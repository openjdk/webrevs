{"files":[{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+\/*\n+ * @test\n+ * @bug 4111098\n+ * @key headful\n+ * @summary Test for no window activation on control requestFocus()\n+ * @run main\/timeout=30 ActivateOnFocusTest\n+ *\/\n+\n+public class ActivateOnFocusTest {\n+    static MyFrame mf1;\n+    static Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                mf1 = new MyFrame();\n+                mf1.setBounds(100, 100, 300, 300);\n+                mf1.mc1.requestFocusInWindow();\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            EventQueue.invokeAndWait(() -> {\n+                p = mf1.mb.getLocationOnScreen();\n+            });\n+\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(p.x + 5, p.y + 5);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(250);\n+            robot.waitForIdle();\n+        } finally {\n+            if (mf1 != null) {\n+                EventQueue.invokeAndWait(mf1::dispose);\n+            }\n+        }\n+    }\n+}\n+\n+class MyFrame extends Frame implements ActionListener {\n+    public Button mb;\n+    public MyComponent mc1;\n+    public MyComponent mc2;\n+\n+    public MyFrame() {\n+        super();\n+        setTitle(\"ActivateOnFocusTest\");\n+        setLayout(new FlowLayout());\n+        mb = new Button(\"Pull\");\n+        mb.addActionListener(this);\n+        add(mb);\n+        mc1 = new MyComponent(Color.red);\n+        add(mc1);\n+        mc2 = new MyComponent(Color.blue);\n+        add(mc2);\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowActivated(WindowEvent e) {\n+                mc1.requestFocusInWindow();\n+            }\n+            @Override\n+            public void windowDeactivated(WindowEvent e) {\n+                mc2.requestFocusInWindow();\n+            }\n+        });\n+        setVisible(true);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        MyFrame mf2 = new MyFrame();\n+        mf2.setBounds(200, 200, 300, 300);\n+        mf2.setVisible(true);\n+        mf2.mc1.requestFocusInWindow();\n+    }\n+}\n+\n+class MyComponent extends Component {\n+    public MyComponent(Color c) {\n+        super();\n+        setBackground(c);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, d.width, d.height);\n+    }\n+\n+    public boolean isFocusTraversable() {\n+        return true;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(50, 50);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Container\/ActivateOnFocusTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,243 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionListener;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4159745\n+ * @key headful\n+ * @summary Mediumweight popup dragging broken\n+ * @run main MouseEnteredTest\n+ *\/\n+\n+public class MouseEnteredTest extends JFrame implements ActionListener {\n+    static volatile MouseEnteredTest test;\n+    static volatile Point p;\n+    static volatile Point p2;\n+\n+    static String strMotif = \"Motif\";\n+    static String motifClassName = \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\";\n+    static char cMotif = 'o';\n+\n+    static String strWindows = \"Windows\";\n+    static String windowsClassName = \"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\";\n+    static char cWindows = 'W';\n+\n+    static String strMetal = \"Metal\";\n+    static String metalClassName = \"javax.swing.plaf.metal.MetalLookAndFeel\";\n+    static char cMetal = 'M';\n+\n+    static JMenu m;\n+    static JMenu menu;\n+\n+    static MouseListener ml = new MouseEnteredTest.MouseEventListener();\n+\n+    public MouseEnteredTest() {\n+        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n+        setJMenuBar(getMyMenuBar());\n+        getContentPane().add(\"Center\", new JTextArea());\n+        setSize(400, 500);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                test = new MouseEnteredTest();\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.waitForIdle();\n+            robot.delay(250);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                p = m.getLocationOnScreen();\n+                p2 = menu.getLocationOnScreen();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(250);\n+            robot.mouseMove(p.x + 5, p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (int i = p.x; i < p2.x + 10; i = i + 2) {\n+                robot.mouseMove(i, p2.y + 10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(2000);\n+\n+            if (m.isPopupMenuVisible()) {\n+                throw new RuntimeException(\"First menu is showing. Test Failed.\");\n+            }\n+        } finally {\n+            if (test != null) {\n+                EventQueue.invokeAndWait(test::dispose);\n+            }\n+        }\n+    }\n+\n+    public JMenuBar getMyMenuBar() {\n+        JMenuBar menubar;\n+        JMenuItem menuItem;\n+\n+        menubar = GetLNFMenuBar();\n+\n+        menu = menubar.add(new JMenu(\"Test\"));\n+        menu.setName(\"Test\");\n+        menu.addMouseListener(ml);\n+        menu.setMnemonic('T');\n+        menuItem = menu.add(new JMenuItem(\"Menu Item\"));\n+        menuItem.addActionListener(this);\n+        menuItem.setMnemonic('M');\n+        menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, ActionEvent.ALT_MASK));\n+\n+        JRadioButtonMenuItem mi = new JRadioButtonMenuItem(\"Radio Button\");\n+        mi.addActionListener(this);\n+        mi.setMnemonic('R');\n+        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.ALT_MASK));\n+        menu.add(mi);\n+\n+        JCheckBoxMenuItem mi1 = new JCheckBoxMenuItem(\"Check Box\");\n+        mi1.addActionListener(this);\n+        mi1.setMnemonic('C');\n+        mi1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.ALT_MASK));\n+        menu.add(mi1);\n+        return menubar;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String str = e.getActionCommand();\n+        if (str.equals(metalClassName) || str.equals(windowsClassName) || str.equals(motifClassName)) {\n+            changeLNF(str);\n+        } else {\n+            System.out.println(\"ActionEvent: \" + str);\n+        }\n+    }\n+\n+    public void changeLNF(String str) {\n+        System.out.println(\"Changing LNF to \" + str);\n+        try {\n+            UIManager.setLookAndFeel(str);\n+            SwingUtilities.updateComponentTreeUI(this);\n+            pack();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public JMenuBar GetLNFMenuBar() {\n+        JMenuBar mbar = new JMenuBar();\n+        m = new JMenu(\"Look and Feel\");\n+        m.setName(\"Look and Feel\");\n+        m.addMouseListener(ml);\n+        m.setMnemonic('L');\n+        ButtonGroup bg = new ButtonGroup();\n+\n+        JRadioButtonMenuItem mi;\n+\n+        mi = new JRadioButtonMenuItem(strMetal);\n+        mi.addActionListener(this);\n+        mi.setActionCommand(metalClassName);\n+        mi.setMnemonic(cMetal);\n+        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_1, ActionEvent.ALT_MASK));\n+        mi.setSelected(true);\n+        bg.add(mi);\n+        m.add(mi);\n+\n+        mi = new JRadioButtonMenuItem(strWindows);\n+        mi.addActionListener(this);\n+        mi.setActionCommand(windowsClassName);\n+        mi.setMnemonic(cWindows);\n+        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_2, ActionEvent.ALT_MASK));\n+        bg.add(mi);\n+        m.add(mi);\n+\n+        mi = new JRadioButtonMenuItem(strMotif);\n+        mi.addActionListener(this);\n+        mi.setActionCommand(motifClassName);\n+        mi.setMnemonic(cMotif);\n+        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_3, ActionEvent.ALT_MASK));\n+        bg.add(mi);\n+        m.add(mi);\n+\n+        mbar.add(m);\n+        return mbar;\n+    }\n+\n+    static class MouseEventListener implements MouseListener, MouseMotionListener {\n+        public void mouseClicked(MouseEvent e) {\n+            System.out.println(\"In mouseClicked for \" + e.getComponent().getName());\n+        }\n+\n+        public void mousePressed(MouseEvent e) {\n+            Component c = e.getComponent();\n+            System.out.println(\"In mousePressed for \" + c.getName());\n+        }\n+\n+        public void mouseReleased(MouseEvent e) {\n+            System.out.println(\"In mouseReleased for \" + e.getComponent().getName());\n+        }\n+\n+        public void mouseEntered(MouseEvent e) {\n+            System.out.println(\"In mouseEntered for \" + e.getComponent().getName());\n+            System.out.println(\"MouseEvent:\" + e.getComponent());\n+        }\n+\n+        public void mouseExited(MouseEvent e) {\n+            System.out.println(\"In mouseExited for \" + e.getComponent().getName());\n+        }\n+\n+        public void mouseDragged(MouseEvent e) {\n+            System.out.println(\"In mouseDragged for \" + e.getComponent().getName());\n+        }\n+\n+        public void mouseMoved(MouseEvent e) {\n+            System.out.println(\"In mouseMoved for \" + e.getComponent().getName());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Container\/MouseEnteredTest.java","additions":243,"deletions":0,"binary":false,"changes":243,"status":"added"},{"patch":"@@ -0,0 +1,315 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.JobAttributes;\n+import java.awt.PageAttributes;\n+import java.awt.Panel;\n+import java.awt.PrintJob;\n+import java.awt.TextArea;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+\n+import sun.awt.SunToolkit;\n+\n+\/*\n+ * @test\n+ * @bug 4813288 4866704\n+ * @summary Test for \"modal exclusion\" functionality\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @modules java.desktop\/sun.awt\n+ * @run main\/manual ModalExcludedTest\n+ *\/\n+\n+public class ModalExcludedTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Press 'Modal dialog w\/o modal excluded' button below\n+                A window, a modeless dialog and a modal dialog will appear\n+                Make sure the frame and the modeless dialog are inaccessible,\n+                i.e. receive no mouse and keyboard events. MousePressed and\n+                KeyPressed events are logged in the text area below - use it\n+                to watch events\n+            Close all 3 windows\n+\n+            2. Press 'Modal dialog w\/ modal excluded' button below\n+                Again, 3 windows will appear (frame, dialog, modal dialog),\n+                but the frame and the dialog would be modal excluded, i.e.\n+                behave the same way as there is no modal dialog shown. Verify\n+                this by pressing mouse buttons and typing any keys. The\n+                RootFrame would be modal blocked - verify this too\n+            Close all 3 windows\n+\n+            3. Repeat step 2 for file and print dialogs using appropriate\n+                buttons below\n+\n+            Notes: if there is no printer installed in the system you may not\n+                get any print dialogs\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ModalExcludedTest\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(10)\n+                .columns(35)\n+                .testUI(ModalExcludedTest::createGUIs)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createGUIs() {\n+        final Frame f = new Frame(\"RootFrame\");\n+        f.setBounds(0, 0, 480, 500);\n+        f.setLayout(new BorderLayout());\n+\n+        final TextArea messages = new TextArea();\n+\n+        final WindowListener wl = new WindowAdapter() {\n+            public void windowClosing(WindowEvent ev) {\n+                if (ev.getSource() instanceof Window) {\n+                    ((Window) ev.getSource()).dispose();\n+                }\n+            }\n+        };\n+        final MouseListener ml = new MouseAdapter() {\n+            public void mousePressed(MouseEvent ev) {\n+                messages.append(ev + \"\\n\");\n+            }\n+        };\n+        final KeyListener kl = new KeyAdapter() {\n+            public void keyPressed(KeyEvent ev) {\n+                messages.append(ev + \"\\n\");\n+            }\n+        };\n+\n+        if (!SunToolkit.isModalExcludedSupported()) {\n+            throw new jtreg.SkippedException(\"Modal exclude is not supported on this platform.\");\n+        }\n+\n+        messages.addMouseListener(ml);\n+        messages.addKeyListener(kl);\n+        f.add(messages, BorderLayout.CENTER);\n+\n+        Panel buttons = new Panel();\n+        buttons.setLayout(new GridLayout(6, 1));\n+\n+        Button b = new Button(\"Modal dialog w\/o modal excluded\");\n+        b.addActionListener(ev -> {\n+            Frame ff = new Frame(\"Non-modal-excluded frame\");\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            ff.setVisible(true);\n+\n+            Dialog dd = new Dialog(ff, \"Non-modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+\n+            Dialog d = new Dialog(f, \"Modal dialog\", true);\n+            d.setBounds(600, 200, 200, 100);\n+            d.addWindowListener(wl);\n+            d.addMouseListener(ml);\n+            d.addKeyListener(kl);\n+            d.setVisible(true);\n+        });\n+        buttons.add(b);\n+\n+        Button c = new Button(\"Modal dialog w\/ modal excluded\");\n+        c.addActionListener(ev -> {\n+            JFrame ff = new JFrame(\"Modal-excluded frame\");\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            JMenuBar mb = new JMenuBar();\n+            JMenu m = new JMenu(\"Test menu\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            m.add(\"Test menu item\");\n+            mb.add(m);\n+            ff.setJMenuBar(mb);\n+            \/\/ 1: set visible\n+            ff.setVisible(true);\n+\n+            Dialog dd = new Dialog(ff, \"Modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+\n+            \/\/ 2: set modal excluded\n+            SunToolkit.setModalExcluded(ff);\n+\n+            Dialog d = new Dialog(f, \"Modal dialog\", true);\n+            d.setBounds(600, 200, 200, 100);\n+            d.addWindowListener(wl);\n+            d.addMouseListener(ml);\n+            d.addKeyListener(kl);\n+            d.setVisible(true);\n+        });\n+        buttons.add(c);\n+\n+        Button c1 = new Button(\"Modal dialog before modal excluded\");\n+        c1.addActionListener(ev -> {\n+            \/\/ 1: create dialog\n+            Dialog d = new Dialog(f, \"Modal dialog\", true);\n+            d.setBounds(600, 200, 200, 100);\n+            d.addWindowListener(wl);\n+            d.addMouseListener(ml);\n+            d.addKeyListener(kl);\n+\n+            \/\/ 2: create frame\n+            Frame ff = new Frame(\"Modal-excluded frame\");\n+            \/\/ 3: set modal excluded\n+            SunToolkit.setModalExcluded(ff);\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            \/\/ 4: show frame\n+            ff.setVisible(true);\n+\n+            Dialog dd = new Dialog(ff, \"Modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+\n+            \/\/ 5: show dialog\n+            d.setVisible(true);\n+        });\n+        buttons.add(c1);\n+\n+        Button d = new Button(\"File dialog w\/ modal excluded\");\n+        d.addActionListener(ev -> {\n+            Frame ff = new Frame(\"Modal-excluded frame\");\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            \/\/ 1: set modal excluded (peer is not created yet)\n+            SunToolkit.setModalExcluded(ff);\n+            \/\/ 2: set visible\n+            ff.setVisible(true);\n+\n+            Dialog dd = new Dialog(ff, \"Modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+            SunToolkit.setModalExcluded(dd);\n+\n+            Dialog d1 = new FileDialog(f, \"File dialog\");\n+            d1.setVisible(true);\n+        });\n+        buttons.add(d);\n+\n+        Button e = new Button(\"Native print dialog w\/ modal excluded\");\n+        e.addActionListener(ev -> {\n+            Frame ff = new Frame(\"Modal-excluded frame\");\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            ff.setVisible(true);\n+            SunToolkit.setModalExcluded(ff);\n+\n+            Dialog dd = new Dialog(ff, \"Modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+\n+            JobAttributes jobAttributes = new JobAttributes();\n+            jobAttributes.setDialog(JobAttributes.DialogType.NATIVE);\n+            PageAttributes pageAttributes = new PageAttributes();\n+            PrintJob job = Toolkit.getDefaultToolkit().getPrintJob(f, \"Test\", jobAttributes, pageAttributes);\n+        });\n+        buttons.add(e);\n+\n+        Button g = new Button(\"Common print dialog w\/ modal excluded\");\n+        g.addActionListener(ev -> {\n+            Frame ff = new Frame(\"Modal-excluded frame\");\n+            ff.setBounds(400, 0, 200, 100);\n+            ff.addWindowListener(wl);\n+            ff.addMouseListener(ml);\n+            ff.addKeyListener(kl);\n+            ff.setVisible(true);\n+            SunToolkit.setModalExcluded(ff);\n+            ff.dispose();\n+            \/\/ modal excluded must still be alive\n+            ff.setVisible(true);\n+\n+            Dialog dd = new Dialog(ff, \"Modal-excluded dialog\", false);\n+            dd.setBounds(500, 100, 200, 100);\n+            dd.addWindowListener(wl);\n+            dd.addMouseListener(ml);\n+            dd.addKeyListener(kl);\n+            dd.setVisible(true);\n+\n+            JobAttributes jobAttributes = new JobAttributes();\n+            jobAttributes.setDialog(JobAttributes.DialogType.COMMON);\n+            PageAttributes pageAttributes = new PageAttributes();\n+            PrintJob job = Toolkit.getDefaultToolkit().getPrintJob(f, \"Test\", jobAttributes, pageAttributes);\n+        });\n+        buttons.add(g);\n+\n+        f.add(buttons, BorderLayout.SOUTH);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalExcludedTest.java","additions":315,"deletions":0,"binary":false,"changes":315,"status":"added"}]}