[{"commit":{"message":"ayang review"},"files":[{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"}],"sha":"92276c69b7fae1f5f9e83b73ff4fdf3d5febb77a"},{"commit":{"message":"iwalulya review, renamings"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp"}],"sha":"7e69daf6b3c8885ddc5aa76cfe1601c3607fdfd9"},{"commit":{"message":"Disallow use of Serial\/Parallel\/G1 unregister_method() because it's never called"},"files":[{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp"}],"sha":"da90c60779cdd16c907f83b0ddad20d68473ec86"},{"commit":{"message":"Wrong order of unregister and free code blobs after merge. Do not verify unlinked nmethods."},"files":[{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp"}],"sha":"0cf2a8fc35125ab88c28c55894c3e8222bd57e28"},{"commit":{"message":"ayang review; merge fixes :("},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.hpp"},{"filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp"},{"filename":"src\/hotspot\/share\/gc\/x\/xHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp"}],"sha":"c074e8ca1da5af07a9655520e063c93e17833f9c"},{"commit":{"message":"Remove some dead code introduced by merge"},"files":[],"sha":"c9de0868c85123a6081393753b2588f9725665d3"},{"commit":{"message":"Merge branch 'master' of https:\/\/git.openjdk.org\/jdk into submit\/8317007-nmethod-bulk-removal"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp"}],"sha":"2cec708eed549ada791b5a748e5b67eb9d34c2a2"},{"commit":{"message":"8317007\n\nplease review this change that bulk-removes dead nmethods for the STW collectors instead of unregistering nmethod by nmethod. This significantly speeds up the class unloading phase.\n\nFor G1, this is almost 100% the code that has been removed from the review for JDK-8315503.\n\nFor Serial and Parallel GC, the code is new.\n\nThis change does not try to improve the situation for concurrent collectors - this would at first glance require extending the scope of the CodeCache_lock which I did not want to do. See the CR for more details.\n\nAlso, no parallelism for Parallel GC: the existing data structure for code root remembered set is a linked list. There is in almost all cases no point in trying to parallelize what is basically a traversal of the linked list (with each element not having a lot of work to do). I file JDK-8320067. There should still be a significant speedup, as each unregister_nmethod call previously traversed the entire linked list to find that element (i.e. complexity reduction of O(n^2) -> O(n)).\n\nOne more comment:\nSo it would be possible to merge the ScavengableNMethod::prune_nmethods which removes elements from the code root sets that do no longer need to be remembered (due to object movement) and removing dead nmethods.\nHowever, this would mean to put that code at the end of gc (where prune_nmethods is called now) as during phase 1 the new locations which are relevant for pruning uninteresting code root remembered set entries did not move yet. I wanted to keep determining the dead nmethods and removing them together in the code, but I could be convinced to move it.\n\nTesting: tier1-4"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.hpp"}],"sha":"3b383dab4feae038849ba9252350d01399746fac"},{"commit":{"message":"8317809 Insert code blobs in a sorted fashion to exploit the finger-optimization when adding, making this procedure O(n) instead of O(n^2)\n\nIntroduce a globally available ClassUnloadingContext that contains common methods pertaining to class and code unloading.\nGCs may use it to efficiently manage unlinked class loader datas and nmethods to allow use of common methods (unlink\/merge).\n\nThe steps typically are registering a new to be unlinked CLD\/nmethod, and then purge its memory later. STW collectors perform\nthis work in one big chunk taking the CodeCache_lock, for the entire duration, while concurrent collectors lock\/unlock for every\ninsertion to allow for concurrent users for the lock to progress.\n\nSome care has been taken to stay consistent with an \"unloading = unlinking + purge\" scheme; however particularly the existing\nCLD handling API (still) mixes unlinking and purging in its CLD::unload() call. To simplify this change that is mostly geared\ntowards separating nmethod unlinking from purging, to make code blob freeing O(n) instead of O(n^2).\n\nUpcoming changes will\n* separate nmethod unregistering from nmethod purging to allow doing that in bulk (for the STW collectors); that can significantly\n  reduce code purging time for the STW collectors.\n* better name the second stage of unlinking (called \"cleaning\" throughout, e.g. the work done in `G1CollectedHeap::complete_cleaning`)\n* untangle CLD unlinking and what's called \"cleaning\" now to allow moving more stuff into the second unlinking stage for better\n  parallelism\n* G1: move some signifcant tasks from the remark pause to concurrent (unregistering nmethods, freeing code blobs and cld\/metaspace purging)\n* Maybe move Serial\/Parallel GC metaspace purging closer to other unlinking\/purging code to keep things local and allow easier logging."},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp"}],"sha":"d63ff4a4f681656ee7f50a936474b4566529a060"},{"commit":{"message":"Only run test case on debug VMs, sufficient"},"files":[],"sha":"15812e5cc99ebf489b125bd1adf62a1d258f134d"},{"commit":{"message":"8320331 g1 full gc \"during\" verification accesses half-unloaded metadata"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"}],"sha":"ce47d95265020d28fe243d64907700bfe9adf12d"}]