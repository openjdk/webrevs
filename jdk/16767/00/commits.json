[{"commit":{"message":"8317007\n\nplease review this change that bulk-removes dead nmethods for the STW collectors instead of unregistering nmethod by nmethod. This significantly speeds up the class unloading phase.\n\nFor G1, this is almost 100% the code that has been removed from the review for JDK-8315503.\n\nFor Serial and Parallel GC, the code is new.\n\nThis change does not try to improve the situation for concurrent collectors - this would at first glance require extending the scope of the CodeCache_lock which I did not want to do. See the CR for more details.\n\nAlso, no parallelism for Parallel GC: the existing data structure for code root remembered set is a linked list. There is in almost all cases no point in trying to parallelize what is basically a traversal of the linked list (with each element not having a lot of work to do). I file JDK-8320067. There should still be a significant speedup, as each unregister_nmethod call previously traversed the entire linked list to find that element (i.e. complexity reduction of O(n^2) -> O(n)).\n\nOne more comment:\nSo it would be possible to merge the ScavengableNMethod::prune_nmethods which removes elements from the code root sets that do no longer need to be remembered (due to object movement) and removing dead nmethods.\nHowever, this would mean to put that code at the end of gc (where prune_nmethods is called now) as during phase 1 the new locations which are relevant for pruning uninteresting code root remembered set entries did not move yet. I wanted to keep determining the dead nmethods and removing them together in the code, but I could be convinced to move it.\n\nTesting: tier1-4"},"files":[{"filename":"src\/hotspot\/share\/code\/codeBlob.cpp"},{"filename":"src\/hotspot\/share\/code\/codeBlob.hpp"},{"filename":"src\/hotspot\/share\/code\/compiledMethod.hpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.cpp"},{"filename":"src\/hotspot\/share\/code\/nmethod.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp"},{"filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.hpp"}],"sha":"3b383dab4feae038849ba9252350d01399746fac"}]