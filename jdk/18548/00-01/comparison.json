{"files":[{"patch":"@@ -69,1 +69,0 @@\n-    u2 string;\n@@ -78,1 +77,1 @@\n-    uintptr_t hash;\n+    uintptr_t value;\n@@ -81,2 +80,2 @@\n-  BytecodeCPEntry() : _tag(ERROR_TAG) { _u.hash = 0; }\n-  BytecodeCPEntry(u1 tag) : _tag(tag) { _u.hash = 0; }\n+  BytecodeCPEntry() : _tag(ERROR_TAG) { _u.value = 0; }\n+  BytecodeCPEntry(u1 tag) : _tag(tag) { _u.value = 0; }\n@@ -117,1 +116,1 @@\n-    return e0._tag == e1._tag && e0._u.hash == e1._u.hash;\n+    return e0._tag == e1._tag && e0._u.value == e1._u.value;\n@@ -121,1 +120,1 @@\n-    return (unsigned)(e0._tag ^ e0._u.hash);\n+    return (unsigned)(e0._tag ^ e0._u.value);\n@@ -161,1 +160,2 @@\n-    u2 utf8_entry = utf8(str, CHECK_0);\n+    \/\/ Create the utf8_entry in the hashtable but use Symbol for matching.\n+    (void)utf8(str, CHECK_0);\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}