{"files":[{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.GraphicsEnvironment;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JTextArea;\n+\n+\/*\n+ * @test\n+ * @bug 5014727\n+ * @summary Display Devanagari text and make sure the character\n+ *          that appears after the nukta (dot) isn't duplicated.\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @run main\/manual TestDevanagari\n+ *\/\n+\n+public class TestDevanagari {\n+\n+    private static final String text = \"\"\"\n+                Ra Nukta Ra\n+                \\u0930\\u093c\\u0930\"\"\";\n+    private static final Font font = getPhysicalFontForText(text, Font.PLAIN, 20);\n+\n+    public static void main(String[] args) throws Exception {\n+        if (font == null) {\n+            throw new jtreg.SkippedException(\"No Devanagari font found. Test Skipped.\");\n+        }\n+\n+        final String INSTRUCTIONS = \"\"\"\n+                You should see two Devanagari Letters 'Ra':\n+                The first with Nukta sign (dot under it), the second without.\n+                The second character (after the Nukta sign) shouldn't be visible twice\n+\n+                Pass the test if this is true.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestDevanagari Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(TestDevanagari::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createUI() {\n+        JFrame frame = new JFrame(\"TestDevanagari UI\");\n+        JTextArea textArea = new JTextArea();\n+        textArea.setFont(font);\n+        textArea.setText(text);\n+\n+        frame.add(textArea);\n+        frame.setSize(300, 200);\n+        return frame;\n+    }\n+\n+    private static Font getPhysicalFontForText(String text, int style, int size) {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        String[] names = ge.getAvailableFontFamilyNames();\n+\n+        for (String n : names) {\n+            switch (n.toLowerCase()) {\n+                case \"dialog\":\n+                case \"dialoginput\":\n+                case \"serif\":\n+                case \"sansserif\":\n+                case \"monospaced\":\n+                     break;\n+                default:\n+                    Font f = new Font(n, style, size);\n+                    if (f.canDisplayUpTo(text) == -1) {\n+                        return f;\n+                    }\n+             }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TestDevanagari.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Insets;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextLayout;\n+\n+\/*\n+ * @test\n+ * @bug 4517298\n+ * @summary Display special control characters using both TextLayout.draw and\n+ *          Graphics.drawString. In no case should a missing glyph appear.\n+ *          Also display the advance of the control characters, in all cases\n+ *          these should be 0. The space character is also displayed as a reference.\n+ *          Note, the character is rendered between '><' but owing to the directional\n+ *          properties of two of the characters, the second '<' is rendered as '>'.\n+ *          This is correct behavior.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestControls\n+ *\/\n+\n+public class TestControls {\n+    private static String fontName = Font.DIALOG;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                A number of control characters are displayed, one per line.\n+                Each line displays the hex value of the character, the character\n+                between '><' as rendered by TextLayout, the character between '><'\n+                as rendered by drawString, and the advance of the character.\n+                The first line renders the space character, as a reference.\n+                The following lines all render the controls.\n+                All controls should not render (even as space) and report a zero advance.\n+\n+                Pass the test if this is true.\n+\n+                Note: two of the control characters have the effect of changing the '<'\n+                following the control character so that it renders as '>'.\n+                This is not an error.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestControls Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestControls::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame(\"TestControls Test UI\");\n+        Panel panel = new ControlPanel(fontName);\n+        ScrollPane sp = new ScrollPane();\n+        sp.add(\"Center\", panel);\n+        f.add(sp);\n+        f.setSize(450, 400);\n+        return f;\n+    }\n+\n+    static class ControlPanel extends Panel {\n+\n+        static final char[] chars = {\n+            (char)0x0020, (char)0x0009,\n+            (char)0x000A, (char)0x000D, (char)0x200C, (char)0x200D, (char)0x200E,\n+            (char)0x200F, (char)0x2028, (char)0x2029, (char)0x202A, (char)0x202B,\n+            (char)0x202C, (char)0x202D, (char)0x202E, (char)0x206A, (char)0x206B,\n+            (char)0x206C, (char)0x206D, (char)0x206E, (char)0x206F\n+        };\n+\n+        ControlPanel(String fontName) {\n+            Font font = new Font(fontName, Font.PLAIN, 24);\n+            System.out.println(\"using font: \" + font);\n+            setFont(font);\n+            setForeground(Color.BLACK);\n+            setBackground(Color.WHITE);\n+        }\n+\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return new Dimension(400, 750);\n+        }\n+\n+        @Override\n+        public Dimension getMaximumSize() {\n+            return getPreferredSize();\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            Graphics2D g2d = (Graphics2D)g;\n+            FontRenderContext frc = g2d.getFontRenderContext();\n+            Font font = g2d.getFont();\n+            FontMetrics fm = g2d.getFontMetrics();\n+            Insets insets = getInsets();\n+\n+            String jvmString = System.getProperty(\"java.version\");\n+            String osString = System.getProperty(\"os.name\") + \" \/ \" +\n+                System.getProperty(\"os.arch\") + \" \/ \" +\n+                System.getProperty(\"os.version\");\n+\n+            int x = insets.left + 10;\n+            int y = insets.top;\n+\n+            y += 30;\n+            g2d.drawString(\"jvm: \" + jvmString, x, y);\n+\n+            y += 30;\n+            g2d.drawString(\"os: \" + osString, x, y);\n+\n+            y += 30;\n+            g2d.drawString(\"font: \" + font.getFontName(), x, y);\n+\n+            for (int i = 0; i < chars.length; ++i) {\n+                String s = \">\" + chars[i] + \"<\";\n+                x = insets.left + 10;\n+                y += 30;\n+\n+                g2d.drawString(Integer.toHexString(chars[i]), x, y);\n+                x += 100;\n+\n+                new TextLayout(s, font, frc).draw(g2d, x, y);\n+                x += 100;\n+\n+                g2d.drawString(s, x, y);\n+                x += 100;\n+\n+                g2d.drawString(Integer.toString(fm.charWidth(chars[i])), x, y);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestControls.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GraphicAttribute;\n+import java.awt.font.ShapeGraphicAttribute;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.geom.Rectangle2D;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4915565 4920820 4920952\n+ * @summary Display graphics (circles) embedded in text, and draw both the outline (top)\n+ *          and black box bounds (bottom) of the result. The circles should each display at a\n+ *          different height. The outline and frames should approximately (within a pixel\n+ *          or two) surround each character.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestGraphicOutline\n+ *\/\n+\n+public class TestGraphicOutline {\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Display graphics (circles) embedded in text, and draw both the\n+                outline (top) and black box bounds (bottom) of the result.\n+\n+                The circles should each display at a different height.\n+                The outline and frames should approximately (within a pixel or two)\n+                surround each character.\n+\n+                Pass the test if these conditions hold.\n+\n+                'Black box bounds' is a term that refers to the bounding rectangles\n+                of each glyph, see the TextLayout API getBlackBoxBounds. It does not\n+                mean that the rendered outlines in the test are supposed to be black.\n+                The color of the outlines does not matter and is not part of the test\n+                conditions. Since there is no API for embedded graphics to return an\n+                outline that matches the shape of the graphics, the outlines of the\n+                graphics are their visual bounding boxes, which are rectangles.\n+\n+                This is not an error. These outlines, as stated, should surround each\n+                character's graphic.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"TestGraphicOutline Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(TestGraphicsPanel::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final class TestGraphicsPanel extends JPanel {\n+\n+        TextLayout tl;\n+\n+        public TestGraphicsPanel() {\n+            setBackground(Color.white);\n+            setPreferredSize(new Dimension(650, 300));\n+            setName(\"2D Text\");\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            Graphics2D g2 = (Graphics2D) g;\n+            int w = getSize().width;\n+            int h = getSize().height;\n+\n+            g2.setColor(getBackground());\n+            g2.fillRect(0, 0, w, h);\n+\n+            Font f1 = new Font(Font.SANS_SERIF, Font.BOLD, 60);\n+            Font f2 = new Font(Font.SERIF, Font.ITALIC, 80);\n+            String str = \"The Starry Night ok?\";\n+\n+            AttributedString ats = new AttributedString(str);\n+\n+            Shape s = new Ellipse2D.Float(0, -10, 12, 12);\n+            GraphicAttribute iga1 = new ShapeGraphicAttribute(s, GraphicAttribute.TOP_ALIGNMENT, false);\n+            GraphicAttribute iga2 = new ShapeGraphicAttribute(s, GraphicAttribute.HANGING_BASELINE, false);\n+            GraphicAttribute iga3 = new ShapeGraphicAttribute(s, GraphicAttribute.CENTER_BASELINE, false);\n+            GraphicAttribute iga4 = new ShapeGraphicAttribute(s, GraphicAttribute.ROMAN_BASELINE, false);\n+            GraphicAttribute iga5 = new ShapeGraphicAttribute(s, GraphicAttribute.BOTTOM_ALIGNMENT, false);\n+\n+            ats.addAttribute(TextAttribute.CHAR_REPLACEMENT, iga1, 1, 2);\n+            ats.addAttribute(TextAttribute.CHAR_REPLACEMENT, iga2, 3, 4);\n+            ats.addAttribute(TextAttribute.CHAR_REPLACEMENT, iga3, 7, 8);\n+            ats.addAttribute(TextAttribute.CHAR_REPLACEMENT, iga4, 10, 11);\n+            ats.addAttribute(TextAttribute.CHAR_REPLACEMENT, iga5, 14, 15);\n+            ats.addAttribute(TextAttribute.FONT, f1, 0, 20);\n+            ats.addAttribute(TextAttribute.FONT, f2, 4, 10);\n+            AttributedCharacterIterator iter = ats.getIterator();\n+\n+            FontRenderContext frc = g2.getFontRenderContext();\n+            tl = new TextLayout(iter, frc);\n+            Rectangle2D bounds = tl.getBounds();\n+            float sw = (float) bounds.getWidth();\n+            float sh = (float) bounds.getHeight();\n+\n+            g2.translate((w - sw) \/ 2f, h \/ 2f - sh + tl.getAscent() - 2);\n+\n+            g2.setColor(Color.blue);\n+            tl.draw(g2, 0, 0);\n+            g2.draw(bounds);\n+\n+            g2.setColor(Color.black);\n+            Shape shape = tl.getOutline(null);\n+            g2.draw(shape);\n+\n+            g2.translate(0, sh + 5);\n+\n+            g2.setColor(Color.blue);\n+            tl.draw(g2, 0, 0);\n+            g2.draw(bounds);\n+\n+            g2.setColor(Color.red);\n+            shape = tl.getBlackBoxBounds(0, tl.getCharacterCount());\n+            g2.draw(shape);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TestGraphicOutline.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"}]}