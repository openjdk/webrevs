{"files":[{"patch":"@@ -410,6 +410,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-        }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWToolkit.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import sun.awt.AWTPermissions;\n@@ -747,14 +746,0 @@\n-    \/**\n-     * Assigns a valid value to the canAccessClipboard instance variable.\n-     *\/\n-    private boolean canAccessClipboard() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) return true;\n-        try {\n-            sm.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-            return true;\n-        } catch (SecurityException e) {}\n-        return false;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TextComponent.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -316,0 +316,1 @@\n+     * This should be false in a headless environment, true in a headful one.\n@@ -388,20 +389,1 @@\n-        boolean b = false;\n-\n-        if (!GraphicsEnvironment.isHeadless()) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                try {\n-                    sm.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-                    b = true;\n-                } catch (SecurityException se) {\n-                    if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n-                        logger.fine(\"InputEvent.canAccessSystemClipboard() got SecurityException \", se);\n-                    }\n-                }\n-            } else {\n-                b = true;\n-            }\n-        }\n-\n-        return b;\n+        return !GraphicsEnvironment.isHeadless();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/event\/InputEvent.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -470,2 +470,1 @@\n-                } else if(nclicks == 2\n-                          && SwingUtilities2.canEventAccessSystemClipboard(e)) {\n+                } else if (nclicks == 2) {\n@@ -474,2 +473,1 @@\n-                } else if(nclicks == 3\n-                          && SwingUtilities2.canEventAccessSystemClipboard(e)) {\n+                } else if (nclicks == 3) {\n@@ -492,2 +490,1 @@\n-                if (nclicks == 1 && component.isEditable() && component.isEnabled()\n-                    && SwingUtilities2.canEventAccessSystemClipboard(e)) {\n+                if (nclicks == 1 && component.isEditable() && component.isEnabled()) {\n@@ -550,2 +547,1 @@\n-                if (nclicks == 2\n-                    && SwingUtilities2.canEventAccessSystemClipboard(e)) {\n+                if (nclicks == 2) {\n@@ -1397,3 +1393,0 @@\n-        if ( ! SwingUtilities2.canCurrentEventAccessSystemClipboard() ) {\n-            return;\n-        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/DefaultCaret.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -227,12 +227,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        try {\n-            if (!dropInProcess && sm != null) {\n-                sm.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-            }\n-        } catch (Exception e) {\n-            Thread currentThread = Thread.currentThread();\n-            currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, e);\n-            return null;\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/dnd\/SunDropTargetContextPeer.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -192,4 +192,0 @@\n-    \/\/ security stuff\n-    private static final String UntrustedClipboardAccess =\n-        \"UNTRUSTED_CLIPBOARD_ACCESS_KEY\";\n-\n@@ -1461,8 +1457,0 @@\n-    \/*\n-     * here goes the fix for 4856343 [Problem with applet interaction\n-     * with system selection clipboard]\n-     *\n-     * NOTE. In case isTrustedContext() no checking\n-     * are to be performed\n-     *\/\n-\n@@ -1470,4 +1458,2 @@\n-    * checks the security permissions for accessing system clipboard\n-    *\n-    * for untrusted context (see isTrustedContext) checks the\n-    * permissions for the current event being handled\n+    * checks if the system clipboard can be accessed.\n+    * This is true in a headful environment, false in a headless one\n@@ -1477,18 +1463,1 @@\n-       boolean canAccess = false;\n-       if (!GraphicsEnvironment.isHeadless()) {\n-           @SuppressWarnings(\"removal\")\n-           SecurityManager sm = System.getSecurityManager();\n-           if (sm == null) {\n-               canAccess = true;\n-           } else {\n-               try {\n-                   sm.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-                   canAccess = true;\n-               } catch (SecurityException e) {\n-               }\n-               if (canAccess && ! isTrustedContext()) {\n-                   canAccess = canCurrentEventAccessSystemClipboard(true);\n-               }\n-           }\n-       }\n-       return canAccess;\n+       return !GraphicsEnvironment.isHeadless();\n@@ -1496,82 +1465,0 @@\n-    \/**\n-    * Returns true if EventQueue.getCurrentEvent() has the permissions to\n-     * access the system clipboard\n-     *\/\n-    public static boolean canCurrentEventAccessSystemClipboard() {\n-        return  isTrustedContext()\n-            || canCurrentEventAccessSystemClipboard(false);\n-    }\n-\n-    \/**\n-     * Returns true if the given event has permissions to access the\n-     * system clipboard\n-     *\n-     * @param e AWTEvent to check\n-     *\/\n-    public static boolean canEventAccessSystemClipboard(AWTEvent e) {\n-        return isTrustedContext()\n-            || canEventAccessSystemClipboard(e, false);\n-    }\n-\n-    \/**\n-     * Returns true if the given event is current gesture for\n-     * accessing clipboard\n-     *\n-     * @param ie InputEvent to check\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    private static boolean isAccessClipboardGesture(InputEvent ie) {\n-        boolean allowedGesture = false;\n-        if (ie instanceof KeyEvent) { \/\/we can validate only keyboard gestures\n-            KeyEvent ke = (KeyEvent)ie;\n-            int keyCode = ke.getKeyCode();\n-            int keyModifiers = ke.getModifiers();\n-            switch(keyCode) {\n-            case KeyEvent.VK_C:\n-            case KeyEvent.VK_V:\n-            case KeyEvent.VK_X:\n-                allowedGesture = (keyModifiers == InputEvent.CTRL_MASK);\n-                break;\n-            case KeyEvent.VK_INSERT:\n-                allowedGesture = (keyModifiers == InputEvent.CTRL_MASK ||\n-                                  keyModifiers == InputEvent.SHIFT_MASK);\n-                break;\n-            case KeyEvent.VK_COPY:\n-            case KeyEvent.VK_PASTE:\n-            case KeyEvent.VK_CUT:\n-                allowedGesture = true;\n-                break;\n-            case KeyEvent.VK_DELETE:\n-                allowedGesture = ( keyModifiers == InputEvent.SHIFT_MASK);\n-                break;\n-            }\n-        }\n-        return allowedGesture;\n-    }\n-\n-    \/**\n-     * Returns true if e has the permissions to\n-     * access the system clipboard and if it is allowed gesture (if\n-     * checkGesture is true)\n-     *\n-     * @param e AWTEvent to check\n-     * @param checkGesture boolean\n-     *\/\n-    private static boolean canEventAccessSystemClipboard(AWTEvent e,\n-                                                        boolean checkGesture) {\n-        if (EventQueue.isDispatchThread()) {\n-            \/*\n-             * Checking event permissions makes sense only for event\n-             * dispatching thread\n-             *\/\n-            if (e instanceof InputEvent\n-                && (! checkGesture || isAccessClipboardGesture((InputEvent)e))) {\n-                return AWTAccessor.getInputEventAccessor().\n-                        canAccessSystemClipboard((InputEvent) e);\n-            } else {\n-                return false;\n-            }\n-        } else {\n-            return true;\n-        }\n-    }\n@@ -1593,25 +1480,0 @@\n-    \/**\n-     * Returns true if EventQueue.getCurrentEvent() has the permissions to\n-     * access the system clipboard and if it is allowed gesture (if\n-     * checkGesture true)\n-     *\n-     * @param checkGesture boolean\n-     *\/\n-    private static boolean canCurrentEventAccessSystemClipboard(boolean\n-                                                               checkGesture) {\n-        AWTEvent event = EventQueue.getCurrentEvent();\n-        return canEventAccessSystemClipboard(event, checkGesture);\n-    }\n-\n-    \/**\n-     * see RFE 5012841 [Per AppContect security permissions] for the\n-     * details\n-     *\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static boolean isTrustedContext() {\n-        return (System.getSecurityManager() == null)\n-            || (AppContext.getAppContext().\n-                get(UntrustedClipboardAccess) == null);\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":3,"deletions":141,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -1236,5 +1236,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-        }\n@@ -1251,5 +1246,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-    static {\n-        initIDs();\n-    }\n-\n@@ -110,5 +106,0 @@\n-    \/**\n-     * Initialize JNI field and method IDs\n-     *\/\n-    private static native void initIDs();\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WTextComponentPeer.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -681,5 +681,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ACCESS_CLIPBOARD_PERMISSION);\n-        }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-jmethodID AwtTextComponent::canAccessClipboardMID;\n@@ -395,8 +394,0 @@\n-\/*\n- * If this Paste is occurring because of a synthetic Java event (e.g.,\n- * a synthesized <CTRL>-V KeyEvent), then verify that the TextComponent\n- * has permission to access the Clipboard before pasting. If permission\n- * is denied, we should throw a SecurityException, but currently do not\n- * because when we detect the security violation, we are in the Toolkit\n- * thread, not the thread which dispatched the illegal event.\n- *\/\n@@ -406,14 +397,1 @@\n-    if (m_synthetic) {\n-        JNIEnv *env = (JNIEnv *)JNU_GetEnv(jvm, JNI_VERSION_1_2);\n-        if (env->EnsureLocalCapacity(1) < 0) {\n-            return mrConsume;\n-        }\n-        jobject target = GetTarget(env);\n-        jboolean canAccessClipboard =\n-            env->CallBooleanMethod (target, AwtTextComponent::canAccessClipboardMID);\n-        env->DeleteLocalRef(target);\n-        return (canAccessClipboard) ? mrDoDefault : mrConsume;\n-    }\n-    else {\n-        return mrDoDefault;\n-    }\n+    return mrDoDefault;\n@@ -893,23 +871,0 @@\n-\/*\n- * Class:     sun_awt_windows_WTextComponentPeer\n- * Method:    initIDs\n- * Signature: ()V\n- *\/\n-JNIEXPORT void JNICALL\n-Java_sun_awt_windows_WTextComponentPeer_initIDs(JNIEnv *env, jclass cls)\n-{\n-    TRY;\n-\n-    jclass textComponentClassID = env->FindClass(\"java\/awt\/TextComponent\");\n-    CHECK_NULL(textComponentClassID);\n-\n-    AwtTextComponent::canAccessClipboardMID =\n-        env->GetMethodID(textComponentClassID, \"canAccessClipboard\", \"()Z\");\n-    env->DeleteLocalRef(textComponentClassID);\n-\n-    DASSERT(AwtTextComponent::canAccessClipboardMID != NULL);\n-\n-    CATCH_BAD_ALLOC;\n-}\n-\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TextComponent.cpp","additions":1,"deletions":46,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-    static jmethodID canAccessClipboardMID;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TextComponent.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}