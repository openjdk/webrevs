{"files":[{"patch":"@@ -2594,1 +2594,0 @@\n-                            position = pos.index; \/\/ Advance past the exponent\n@@ -2606,0 +2605,1 @@\n+                        position = pos.index; \/\/ Advance past the exponent\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.text.ParseException;\n+import java.text.ParsePosition;\n@@ -52,3 +52,3 @@\n-    \/\/ Check that the parsed value is equal to the expected.\n-    \/\/ We are mainly checking that an exponent > Integer.MAX_VALUE no longer parses to 0\n-    \/\/ and that an exponent > Long.MAX_VALUE no longer parses to the mantissa.\n+    \/\/ Check that the parsed value and parse position index are both equal to the expected values.\n+    \/\/ We are mainly checking that an exponent > Integer.MAX_VALUE no longer\n+    \/\/ parses to 0 and that an exponent > Long.MAX_VALUE no longer parses to the mantissa.\n@@ -57,2 +57,3 @@\n-    public void overflowTest(String parseString, Double expectedValue) throws ParseException {\n-        Number actualValue = FMT.parse(parseString);\n+    public void overflowTest(String parseString, Double expectedValue) {\n+        ParsePosition pp = new ParsePosition(0);\n+        Number actualValue = FMT.parse(parseString, pp);\n@@ -60,0 +61,1 @@\n+        assertEquals(parseString.length(), pp.getIndex());\n@@ -120,4 +122,0 @@\n-                \/\/ Decimal in exponent, everything past decimal is ignored\n-                Arguments.of(\"1.23E33.332\", 1.23E33),\n-                \/\/ Non-numeric value in exponent, ignores subsequent chars\n-                Arguments.of(\"1.23E32ABC9920\", 1.23E32),\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/LargeExponentsTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8327640\n+ * @bug 8327640 8331485\n@@ -37,0 +37,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -130,0 +131,12 @@\n+    @Test \/\/ Non-localized, only run once\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void badExponentParseNumberFormatTest() {\n+        \/\/ Some fmt, with an \"E\" exponent string\n+        DecimalFormat fmt = (DecimalFormat) NumberFormat.getNumberInstance(Locale.US);\n+        \/\/ Upon non-numeric in exponent, parse will still successfully complete\n+        \/\/ but index should end on the last valid char in exponent\n+        assertEquals(1.23E45, successParse(fmt, \"1.23E45.123\", 7));\n+        assertEquals(1.23E45, successParse(fmt, \"1.23E45.\", 7));\n+        assertEquals(1.23E45, successParse(fmt, \"1.23E45FOO3222\", 7));\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientParseTest.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8327640\n+ * @bug 8327640 8331485\n@@ -115,0 +115,1 @@\n+    }\n@@ -116,0 +117,11 @@\n+    @Test \/\/ Non-localized, only run once\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void badExponentParseNumberFormatTest() {\n+        \/\/ Some fmt, with an \"E\" exponent string\n+        DecimalFormat fmt = (DecimalFormat) NumberFormat.getNumberInstance(Locale.US);\n+        fmt.setStrict(true);\n+        \/\/ Upon non-numeric in exponent, parse will exit early and suffix will not\n+        \/\/ exactly match, causing failure\n+        failParse(fmt, \"1.23E45.1\", 7);\n+        failParse(fmt, \"1.23E45.\", 7);\n+        failParse(fmt, \"1.23E45FOO3222\", 7);\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/StrictParseTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}