{"files":[{"patch":"@@ -36,2 +36,2 @@\n-SerialBlockOffsetSharedArray::SerialBlockOffsetSharedArray(MemRegion reserved,\n-                                                           size_t init_word_size):\n+SerialBlockOffsetTable::SerialBlockOffsetTable(MemRegion reserved,\n+                                               size_t init_word_size):\n@@ -52,1 +52,1 @@\n-  log_trace(gc, bot)(\"SerialBlockOffsetSharedArray::SerialBlockOffsetSharedArray: \");\n+  log_trace(gc, bot)(\"SerialBlockOffsetTable::SerialBlockOffsetTable: \");\n@@ -59,1 +59,1 @@\n-void SerialBlockOffsetSharedArray::resize(size_t new_word_size) {\n+void SerialBlockOffsetTable::resize(size_t new_word_size) {\n@@ -115,1 +115,1 @@\n-  uint8_t* const offset_card = _array->entry_for_addr(cur_card_boundary);\n+  uint8_t* const offset_card = entry_for_addr(cur_card_boundary);\n@@ -118,1 +118,1 @@\n-  _array->set_offset_array(offset_card, cur_card_boundary, blk_start);\n+  set_offset_array(offset_card, cur_card_boundary, blk_start);\n@@ -121,1 +121,1 @@\n-  uint8_t* end_card = _array->entry_for_addr(blk_end - 1);\n+  uint8_t* end_card = entry_for_addr(blk_end - 1);\n@@ -133,1 +133,1 @@\n-      _array->set_offset_array(start_card_for_region, MIN2(reach, end_card), value);\n+      set_offset_array(start_card_for_region, MIN2(reach, end_card), value);\n@@ -147,1 +147,1 @@\n-  uint8_t* entry = _array->entry_for_addr(addr);\n+  uint8_t* entry = entry_for_addr(addr);\n@@ -156,1 +156,1 @@\n-  HeapWord* q = _array->addr_for_entry(entry);\n+  HeapWord* q = addr_for_entry(entry);\n@@ -163,2 +163,2 @@\n-  uint8_t* start_card = _array->entry_for_addr(align_up_by_card_size(blk_start));\n-  uint8_t* end_card = _array->entry_for_addr(blk_end - 1);\n+  uint8_t* start_card = entry_for_addr(align_up_by_card_size(blk_start));\n+  uint8_t* end_card = entry_for_addr(blk_end - 1);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,1 +39,5 @@\n-class SerialBlockOffsetSharedArray: public CHeapObj<mtGC> {\n+\/\/ SerialBlockOffsetTable divides the covered region into \"N\"-word subregions (where\n+\/\/ \"N\" = 2^\"LogN\".  An array with an entry for each such subregion indicates\n+\/\/ how far back one must go to find the start of the chunk that includes the\n+\/\/ first word of the subregion.\n+class SerialBlockOffsetTable: public CHeapObj<mtGC> {\n@@ -41,1 +45,0 @@\n-  friend class SerialBlockOffsetTable;\n@@ -66,0 +69,8 @@\n+  void update_for_block_work(HeapWord* blk_start, HeapWord* blk_end);\n+\n+  static HeapWord* align_up_by_card_size(HeapWord* const addr) {\n+    return align_up(addr, CardTable::card_size());\n+  }\n+\n+  void verify_for_block(HeapWord* blk_start, HeapWord* blk_end) const;\n+\n@@ -73,1 +84,19 @@\n-  SerialBlockOffsetSharedArray(MemRegion reserved, size_t init_word_size);\n+  SerialBlockOffsetTable(MemRegion reserved, size_t init_word_size);\n+\n+  static bool is_crossing_card_boundary(HeapWord* const obj_start,\n+                                        HeapWord* const obj_end) {\n+    HeapWord* cur_card_boundary = align_up_by_card_size(obj_start);\n+    \/\/ Strictly greater-than, since we check if this block *crosses* card boundary.\n+    return obj_end > cur_card_boundary;\n+  }\n+\n+  \/\/ Returns the address of the start of the block reaching into the card containing\n+  \/\/ \"addr\".\n+  HeapWord* block_start_reaching_into_card(const void* addr) const;\n+\n+  \/\/ [blk_start, blk_end) representing a block of memory in the heap.\n+  void update_for_block(HeapWord* blk_start, HeapWord* blk_end) {\n+    if (is_crossing_card_boundary(blk_start, blk_end)) {\n+      update_for_block_work(blk_start, blk_end);\n+    }\n+  }\n@@ -102,42 +131,0 @@\n-\/\/ SerialBlockOffsetTable divides the covered region into \"N\"-word subregions (where\n-\/\/ \"N\" = 2^\"LogN\".  An array with an entry for each such subregion indicates\n-\/\/ how far back one must go to find the start of the chunk that includes the\n-\/\/ first word of the subregion.\n-class SerialBlockOffsetTable {\n-  friend class VMStructs;\n-\n-  \/\/ The array that contains offset values. Its reacts to heap resizing.\n-  SerialBlockOffsetSharedArray* _array;\n-\n-  void update_for_block_work(HeapWord* blk_start, HeapWord* blk_end);\n-\n-  static HeapWord* align_up_by_card_size(HeapWord* const addr) {\n-    return align_up(addr, CardTable::card_size());\n-  }\n-\n-  void verify_for_block(HeapWord* blk_start, HeapWord* blk_end) const;\n-\n-public:\n-  \/\/ Initialize the table to cover the given space.\n-  \/\/ The contents of the initial table are undefined.\n-  SerialBlockOffsetTable(SerialBlockOffsetSharedArray* array) : _array(array) {}\n-\n-  static bool is_crossing_card_boundary(HeapWord* const obj_start,\n-                                        HeapWord* const obj_end) {\n-    HeapWord* cur_card_boundary = align_up_by_card_size(obj_start);\n-    \/\/ Strictly greater-than, since we check if this block *crosses* card boundary.\n-    return obj_end > cur_card_boundary;\n-  }\n-\n-  \/\/ Returns the address of the start of the block reaching into the card containing\n-  \/\/ \"addr\".\n-  HeapWord* block_start_reaching_into_card(const void* addr) const;\n-\n-  \/\/ [blk_start, blk_end) representing a block of memory in the heap.\n-  void update_for_block(HeapWord* blk_start, HeapWord* blk_end) {\n-    if (is_crossing_card_boundary(blk_start, blk_end)) {\n-      update_for_block_work(blk_start, blk_end);\n-    }\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.hpp","additions":32,"deletions":45,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-inline uint8_t* SerialBlockOffsetSharedArray::entry_for_addr(const void* const p) const {\n+inline uint8_t* SerialBlockOffsetTable::entry_for_addr(const void* const p) const {\n@@ -37,1 +37,1 @@\n-inline HeapWord* SerialBlockOffsetSharedArray::addr_for_entry(const uint8_t* const p) const {\n+inline HeapWord* SerialBlockOffsetTable::addr_for_entry(const uint8_t* const p) const {\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,2 +290,2 @@\n-  _bts = new SerialBlockOffsetSharedArray(reserved_mr,\n-                                          heap_word_size(initial_byte_size));\n+  _bts = new SerialBlockOffsetTable(reserved_mr,\n+                                    heap_word_size(initial_byte_size));\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-class SerialBlockOffsetSharedArray;\n+class SerialBlockOffsetTable;\n@@ -53,1 +53,1 @@\n-  SerialBlockOffsetSharedArray* _bts;\n+  SerialBlockOffsetTable* _bts;\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  nonstatic_field(TenuredGeneration,                 _bts,                   SerialBlockOffsetSharedArray*) \\\n+  nonstatic_field(TenuredGeneration,                 _bts,                   SerialBlockOffsetTable*) \\\n@@ -57,1 +57,3 @@\n-  nonstatic_field(SerialBlockOffsetTable,            _array,                 SerialBlockOffsetSharedArray*) \\\n+  nonstatic_field(SerialBlockOffsetTable,            _reserved,              MemRegion)                     \\\n+  nonstatic_field(SerialBlockOffsetTable,            _vs,                    VirtualSpace)                  \\\n+  nonstatic_field(SerialBlockOffsetTable,            _offset_base,           u_char*)                       \\\n@@ -59,5 +61,1 @@\n-  nonstatic_field(SerialBlockOffsetSharedArray,      _reserved,              MemRegion)                     \\\n-  nonstatic_field(SerialBlockOffsetSharedArray,      _vs,                    VirtualSpace)                  \\\n-  nonstatic_field(SerialBlockOffsetSharedArray,      _offset_base,           u_char*)                       \\\n-                                                                                                            \\\n-  nonstatic_field(TenuredSpace,                      _offsets,               SerialBlockOffsetTable)        \\\n+  nonstatic_field(TenuredSpace,                      _offsets,               SerialBlockOffsetTable*)       \\\n@@ -81,1 +79,0 @@\n-  declare_toplevel_type(SerialBlockOffsetSharedArray)                         \\\n","filename":"src\/hotspot\/share\/gc\/serial\/vmStructs_serial.hpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-  HeapWord* cur_block = _offsets.block_start_reaching_into_card(addr);\n+  HeapWord* cur_block = _offsets->block_start_reaching_into_card(addr);\n@@ -211,1 +211,1 @@\n-TenuredSpace::TenuredSpace(SerialBlockOffsetSharedArray* sharedOffsetArray,\n+TenuredSpace::TenuredSpace(SerialBlockOffsetTable* offsets,\n@@ -213,1 +213,1 @@\n-  _offsets(sharedOffsetArray)\n+  _offsets(offsets)\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,1 +228,1 @@\n-  SerialBlockOffsetTable _offsets;\n+  SerialBlockOffsetTable* _offsets;\n@@ -234,1 +234,1 @@\n-  TenuredSpace(SerialBlockOffsetSharedArray* sharedOffsetArray,\n+  TenuredSpace(SerialBlockOffsetTable* offsets,\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    _offsets.update_for_block(res, res + size);\n+    _offsets->update_for_block(res, res + size);\n@@ -49,1 +49,1 @@\n-    _offsets.update_for_block(res, res + size);\n+    _offsets->update_for_block(res, res + size);\n@@ -55,1 +55,1 @@\n-  _offsets.update_for_block(start, end);\n+  _offsets->update_for_block(start, end);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}