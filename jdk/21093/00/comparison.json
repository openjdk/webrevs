{"files":[{"patch":"@@ -60,0 +60,2 @@\n+import static java.lang.classfile.ClassFile.*;\n+\n@@ -99,1 +101,0 @@\n-    public final byte tag;\n@@ -103,2 +104,1 @@\n-    private AbstractPoolEntry(ConstantPool constantPool, int tag, int index, int hash) {\n-        this.tag = (byte) tag;\n+    private AbstractPoolEntry(ConstantPool constantPool, int index, int hash) {\n@@ -119,3 +119,1 @@\n-    public byte tag() {\n-        return tag;\n-    }\n+    public abstract byte tag();\n@@ -124,1 +122,1 @@\n-        return (tag == ClassFile.TAG_LONG || tag == ClassFile.TAG_DOUBLE) ? 2 : 1;\n+        return 1;\n@@ -162,1 +160,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, index, 0);\n@@ -174,1 +172,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, index, 0);\n@@ -185,1 +183,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, index, 0);\n@@ -197,0 +195,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_UTF8;\n+        }\n+\n@@ -420,1 +423,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_UTF8);\n@@ -452,1 +455,1 @@\n-            super(constantPool, tag, index, hash1(tag, ref1.index()));\n+            super(constantPool, index, hash1(tag, ref1.index()));\n@@ -461,1 +464,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(tag());\n@@ -477,1 +480,1 @@\n-            super(constantPool, tag, index, hash2(tag, ref1.index(), ref2.index()));\n+            super(constantPool, index, hash2(tag, ref1.index(), ref2.index()));\n@@ -491,1 +494,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(tag());\n@@ -522,1 +525,6 @@\n-            super(cpm, ClassFile.TAG_CLASS, index, name);\n+            super(cpm, TAG_CLASS, index, name);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_CLASS;\n@@ -560,1 +568,6 @@\n-            super(cpm, ClassFile.TAG_PACKAGE, index, name);\n+            super(cpm, TAG_PACKAGE, index, name);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_PACKAGE;\n@@ -586,1 +599,6 @@\n-            super(cpm, ClassFile.TAG_MODULE, index, name);\n+            super(cpm, TAG_MODULE, index, name);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_MODULE;\n@@ -613,1 +631,6 @@\n-            super(cpm, ClassFile.TAG_NAMEANDTYPE, index, name, type);\n+            super(cpm, TAG_NAMEANDTYPE, index, name, type);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_NAMEANDTYPE;\n@@ -673,1 +696,1 @@\n-                return tag == m.tag()\n+                return tag() == m.tag()\n@@ -685,1 +708,6 @@\n-            super(cpm, ClassFile.TAG_FIELDREF, index, owner, nameAndType);\n+            super(cpm, TAG_FIELDREF, index, owner, nameAndType);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_FIELDREF;\n@@ -701,0 +729,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_METHODREF;\n+        }\n+\n@@ -714,0 +747,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_INTERFACEMETHODREF;\n+        }\n+\n@@ -726,1 +764,1 @@\n-        AbstractDynamicConstantPoolEntry(ConstantPool cpm, int tag, int index, int hash, BootstrapMethodEntryImpl bootstrapMethod,\n+        AbstractDynamicConstantPoolEntry(ConstantPool cpm, int index, int hash, BootstrapMethodEntryImpl bootstrapMethod,\n@@ -728,1 +766,1 @@\n-            super(cpm, tag, index, hash);\n+            super(cpm, index, hash);\n@@ -734,1 +772,1 @@\n-        AbstractDynamicConstantPoolEntry(ConstantPool cpm, int tag, int index, int hash, int bsmIndex,\n+        AbstractDynamicConstantPoolEntry(ConstantPool cpm, int index, int hash, int bsmIndex,\n@@ -736,1 +774,1 @@\n-            super(cpm, tag, index, hash);\n+            super(cpm, index, hash);\n@@ -767,1 +805,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(tag());\n@@ -796,1 +834,1 @@\n-            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, index, hash, bootstrapMethod, nameAndType);\n@@ -801,1 +839,1 @@\n-            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash2(ClassFile.TAG_INVOKEDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, index, hash2(TAG_INVOKEDYNAMIC, bsmIndex, nameAndType.index()),\n@@ -805,0 +843,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_INVOKEDYNAMIC;\n+        }\n+\n@@ -816,1 +859,1 @@\n-            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, index, hash, bootstrapMethod, nameAndType);\n@@ -821,1 +864,1 @@\n-            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash2(ClassFile.TAG_CONSTANTDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, index, hash2(TAG_CONSTANTDYNAMIC, bsmIndex, nameAndType.index()),\n@@ -825,0 +868,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_CONSTANTDYNAMIC;\n+        }\n+\n@@ -839,1 +887,1 @@\n-            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash);\n+            super(cpm, index, hash);\n@@ -846,1 +894,1 @@\n-            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash2(ClassFile.TAG_METHODHANDLE, refKind, reference.index()));\n+            super(cpm, index, hash2(ClassFile.TAG_METHODHANDLE, refKind, reference.index()));\n@@ -851,0 +899,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_METHODHANDLE;\n+        }\n+\n@@ -872,1 +925,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_METHODHANDLE);\n@@ -904,1 +957,6 @@\n-            super(cpm, ClassFile.TAG_METHODTYPE, index, descriptor);\n+            super(cpm, TAG_METHODTYPE, index, descriptor);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_METHODTYPE;\n@@ -940,1 +998,6 @@\n-            super(cpm, ClassFile.TAG_STRING, index, utf8);\n+            super(cpm, TAG_STRING, index, utf8);\n+        }\n+\n+        @Override\n+        public byte tag() {\n+            return TAG_STRING;\n@@ -986,1 +1049,1 @@\n-            super(cpm, ClassFile.TAG_INTEGER, index, hash1(ClassFile.TAG_INTEGER, Integer.hashCode(i)));\n+            super(cpm, index, hash1(ClassFile.TAG_INTEGER, Integer.hashCode(i)));\n@@ -990,0 +1053,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_INTEGER;\n+        }\n+\n@@ -992,1 +1060,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_INTEGER);\n@@ -1027,1 +1095,1 @@\n-            super(cpm, ClassFile.TAG_FLOAT, index, hash1(ClassFile.TAG_FLOAT, Float.hashCode(f)));\n+            super(cpm, index, hash1(ClassFile.TAG_FLOAT, Float.hashCode(f)));\n@@ -1031,0 +1099,5 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_FLOAT;\n+        }\n+\n@@ -1033,1 +1106,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_FLOAT);\n@@ -1067,1 +1140,1 @@\n-            super(cpm, ClassFile.TAG_LONG, index, hash1(ClassFile.TAG_LONG, Long.hashCode(l)));\n+            super(cpm, index, hash1(ClassFile.TAG_LONG, Long.hashCode(l)));\n@@ -1071,0 +1144,10 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_LONG;\n+        }\n+\n+        @Override\n+        public int width() {\n+            return 2;\n+        }\n+\n@@ -1073,1 +1156,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_LONG);\n@@ -1107,1 +1190,1 @@\n-            super(cpm, ClassFile.TAG_DOUBLE, index, hash1(ClassFile.TAG_DOUBLE, Double.hashCode(d)));\n+            super(cpm, index, hash1(ClassFile.TAG_DOUBLE, Double.hashCode(d)));\n@@ -1111,0 +1194,10 @@\n+        @Override\n+        public byte tag() {\n+            return TAG_DOUBLE;\n+        }\n+\n+        @Override\n+        public int width() {\n+            return 2;\n+        }\n+\n@@ -1113,1 +1206,1 @@\n-            pool.writeU1(tag);\n+            pool.writeU1(TAG_DOUBLE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":136,"deletions":43,"binary":false,"changes":179,"status":"modified"}]}