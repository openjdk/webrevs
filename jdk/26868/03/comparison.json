{"files":[{"patch":"@@ -737,1 +737,6 @@\n-        Path p = ArtifactResolver.fetchOne(clazz);\n+        Path p;\n+        try {\n+            p = ArtifactResolver.fetchOne(clazz);\n+        } catch (IOException exc) {\n+            throw new SkippedException(\"Could not find NSS\", exc);\n+        }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import jtreg.SkippedException;\n-\n+import java.io.IOException;\n@@ -93,1 +92,1 @@\n-     * @throws SkippedException thrown if the artifact cannot be found\n+     * @throws IOException thrown if the artifact cannot be found\n@@ -95,1 +94,1 @@\n-    public static Path fetchOne(Class<?> klass) {\n+    public static Path fetchOne(Class<?> klass) throws IOException {\n@@ -101,1 +100,1 @@\n-            throw new SkippedException(\"Cannot find the artifact \" + artifact.name(), e);\n+            throw new IOException(\"Cannot find the artifact \" + artifact.name(), e);\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.io.IOException;\n@@ -52,0 +53,1 @@\n+     * \t              or if OpenSSL is not available on the target platform\n@@ -56,0 +58,1 @@\n+            System.out.println(\"Using OpenSSL from system property.\");\n@@ -58,0 +61,1 @@\n+\n@@ -60,0 +64,1 @@\n+            System.out.println(\"Using OpenSSL from system.\");\n@@ -62,0 +67,1 @@\n+\n@@ -64,1 +70,1 @@\n-                path = fetchOpenssl(LINUX_X64.class);\n+                return fetchOpenssl(LINUX_X64.class);\n@@ -66,1 +72,1 @@\n-                path = fetchOpenssl(MACOSX_X64.class);\n+                return fetchOpenssl(MACOSX_X64.class);\n@@ -68,1 +74,1 @@\n-                path = fetchOpenssl(WINDOWS_X64.class);\n+                return fetchOpenssl(WINDOWS_X64.class);\n@@ -72,1 +78,1 @@\n-                path = fetchOpenssl(LINUX_AARCH64.class);\n+                return fetchOpenssl(LINUX_AARCH64.class);\n@@ -75,1 +81,1 @@\n-                path = fetchOpenssl(MACOSX_AARCH64.class);\n+                return fetchOpenssl(MACOSX_AARCH64.class);\n@@ -79,9 +85,2 @@\n-        if (!verifyOpensslVersion(path, OPENSSL_BUNDLE_VERSION)) {\n-            String exMsg = \"Can't find the version: \"\n-                    + OpensslArtifactFetcher.getTestOpensslBundleVersion()\n-                    + \" of openssl binary on this machine, please install\"\n-                    + \" and set openssl path with property 'test.openssl.path'\";\n-            throw new SkippedException(exMsg);\n-        } else {\n-            return path;\n-        }\n+        throw new SkippedException(String.format(\"No OpenSSL %s found for %s\/%s\",\n+                OPENSSL_BUNDLE_VERSION, Platform.getOsName(), Platform.getOsArch()));\n@@ -123,3 +122,7 @@\n-        return ArtifactResolver.fetchOne(clazz)\n-                .resolve(\"openssl\", \"bin\", \"openssl\")\n-                .toString();\n+        try {\n+            return ArtifactResolver.fetchOne(clazz)\n+                    .resolve(\"openssl\", \"bin\", \"openssl\")\n+                    .toString();\n+        } catch (IOException exc) {\n+            throw new SkippedException(\"Could not find openssl\", exc);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/security\/OpensslArtifactFetcher.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"}]}