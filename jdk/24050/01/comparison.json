{"files":[{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#       java.lang.Runtime logging level to console to ALL\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = ALL\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-ALL.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#       Enable logging java.lang.Runtime to the console\n+#       java.lang.Runtime logging level to console to FINE\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-FINE.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#       java.lang.Runtime logging level to console to FINER\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = FINER\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-FINER.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#       Enable logging java.lang.Runtime to the console\n+#       java.lang.Runtime logging level to console to INFO\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-INFO.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#       java.lang.Runtime logging level to console to OFF\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = OFF\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-OFF.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#       java.lang.Runtime logging level to console to SEVERE\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = SEVERE\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-SEVERE.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+############################################################\n+#       java.lang.Runtime logging level to console to WARNING\n+############################################################\n+\n+handlers= java.util.logging.ConsoleHandler\n+\n+java.util.logging.ConsoleHandler.level = ALL\n+java.lang.Runtime.level = WARNING\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/ExitLogging-WARNING.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-\n+    private static final String NEW_LINE = System.lineSeparator();\n@@ -67,0 +67,14 @@\n+    \/**\n+     * Generate a regular expression pattern that match the expected log output for a Runtime.exit() call.\n+     * The pattern includes the method call stack trace and the exit status.\n+     * @param status the exit status passed to the Runtime.exit() call\n+     * @return the regex pattern as a string\n+     *\/\n+    private static String generateStackTraceLogPattern(int status) {\n+        return \"(?s)^.+ java\\\\.lang\\\\.Shutdown logRuntimeExit\\\\n\" +\n+                \".*: Runtime\\\\.exit\\\\(\\\\) called with status: \" + status + \"\\\\n\" +\n+                \"java\\\\.lang\\\\.Throwable: Runtime\\\\.exit\\\\(\" + status + \"\\\\)\\\\n\" +\n+                \"\\\\s+at java\\\\.base\/java\\\\.lang\\\\.Shutdown\\\\.logRuntimeExit\\\\(Shutdown\\\\.java:\\\\d+\\\\)\\\\n\" +\n+                \"\\\\s+at(?: .+)\";\n+    }\n+\n@@ -73,1 +87,7 @@\n-                \/\/ Logging enabled with level DEBUG\n+                \/\/ Logging configuration using the java.util.logging.config.file property\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-ALL.properties\").toString()), 1,\n+                        generateStackTraceLogPattern(1)),\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-FINER.properties\").toString()), 2,\n+                        generateStackTraceLogPattern(2)),\n@@ -75,3 +95,11 @@\n-                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 1,\n-                        \"Runtime.exit() called with status: 1\"),\n-                \/\/ Logging disabled due to level\n+                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 3,\n+                        generateStackTraceLogPattern(3)),\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-INFO.properties\").toString()), 4,\n+                        \"\"),\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-WARNING.properties\").toString()), 5,\n+                        \"\"),\n+                Arguments.of(List.of(\"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-SEVERE.properties\").toString()), 6,\n+                        \"\"),\n@@ -79,1 +107,1 @@\n-                        Path.of(TEST_SRC, \"ExitLogging-INFO.properties\").toString()), 2,\n+                        Path.of(TEST_SRC, \"ExitLogging-OFF.properties\").toString()), 7,\n@@ -81,1 +109,11 @@\n-                \/\/ Console logger\n+\n+                \/\/ Logging configuration using the jdk.system.logger.level property\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=ALL\"), 8,\n+                        generateStackTraceLogPattern(8)),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=TRACE\"), 9,\n+                        generateStackTraceLogPattern(9)),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=DEBUG\"), 10,\n+                        generateStackTraceLogPattern(10)),\n@@ -83,4 +121,12 @@\n-                        \"-Djdk.system.logger.level=DEBUG\"), 3,\n-                        \"Runtime.exit() called with status: 3\"),\n-                \/\/ Console logger\n-                Arguments.of(List.of(), 4, \"\"),\n+                        \"-Djdk.system.logger.level=INFO\"), 11,\n+                        \"\"),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=WARNING\"), 12,\n+                        \"\"),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=ERROR\"), 13,\n+                        \"\"),\n+                Arguments.of(List.of(\"--limit-modules\", \"java.base\",\n+                        \"-Djdk.system.logger.level=OFF\"), 14,\n+                        \"\"),\n+\n@@ -90,2 +136,5 @@\n-                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 5,\n-                        \"Runtime.exit(5) logging failed: Exception in publish\")\n+                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 15,\n+                        \"Runtime\\\\.exit\\\\(15\\\\) logging failed: Exception in publish\"),\n+\n+                \/\/ Default console logging configuration with no additional parameters\n+                Arguments.of(List.of(), 16, \"\")\n@@ -118,2 +167,2 @@\n-                        ? lines.size() == 0\n-                        : lines.stream().filter(s -> s.contains(expectMessage)).findFirst().isPresent();\n+                        ? lines.isEmpty()\n+                        : String.join(\"\\n\", lines).matches(expectMessage);\n@@ -122,1 +171,2 @@\n-                    System.err.println(\"Expected: \\\"\" + expectMessage + \"\\\"\");\n+                    System.err.println(\"Expected pattern (line-break):\");\n+                    System.err.println(expectMessage.replaceAll(\"\\\\n\", NEW_LINE));\n@@ -124,1 +174,1 @@\n-                    lines.forEach(l -> System.err.println(l));\n+                    lines.forEach(System.err::println);\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/RuntimeExitLogTest.java","additions":68,"deletions":18,"binary":false,"changes":86,"status":"modified"}]}