{"files":[{"patch":"@@ -832,2 +832,2 @@\n-static void abort_checked_cast_int(jint val, jint lo, jint hi) {\n-  fatal(\"Invalid CastII, val: %d, lo: %d, hi: %d\", val, lo, hi);\n+static void abort_verify_int_in_range(uint idx, jint val, jint lo, jint hi) {\n+  fatal(\"Invalid CastII, idx: %u, val: %d, lo: %d, hi: %d\", idx, val, lo, hi);\n@@ -836,2 +836,5 @@\n-void C2_MacroAssembler::checked_cast_int(const TypeInt* type, Register val) {\n-  if (type == TypeInt::INT) {\n+void C2_MacroAssembler::verify_int_in_range(uint idx, const TypeInt* t, Register val) {\n+  jint lo = t->_lo;\n+  jint hi = t->_hi;\n+  assert(lo < hi, \"type should not be empty or constant, idx: %u, lo: %d, hi: %d\", idx, lo, hi);\n+  if (t == TypeInt::INT) {\n@@ -844,2 +847,2 @@\n-  if (type->_hi == max_jint) {\n-    cmpl(val, type->_lo);\n+  if (hi == max_jint) {\n+    cmpl(val, lo);\n@@ -848,2 +851,2 @@\n-    if (type->_lo != min_jint) {\n-      cmpl(val, type->_lo);\n+    if (lo != min_jint) {\n+      cmpl(val, lo);\n@@ -852,1 +855,1 @@\n-    cmpl(val, type->_hi);\n+    cmpl(val, hi);\n@@ -857,4 +860,5 @@\n-  movl(c_rarg0, val);\n-  movl(c_rarg1, type->_lo);\n-  movl(c_rarg2, type->_hi);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_int)));\n+  movl(c_rarg0, idx);\n+  movl(c_rarg1, val);\n+  movl(c_rarg2, lo);\n+  movl(c_rarg3, hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_verify_int_in_range)));\n@@ -866,2 +870,2 @@\n-static void abort_checked_cast_long(jlong val, jlong lo, jlong hi) {\n-  fatal(\"Invalid CastLL, val: %lld, lo: %lld, hi: %lld\", (long long)val, (long long)lo, (long long)hi);\n+static void abort_verify_long_in_range(uint idx, jlong val, jlong lo, jlong hi) {\n+  fatal(\"Invalid CastLL, idx: %u, val: \" JLONG_FORMAT \", lo: \" JLONG_FORMAT \", hi: \" JLONG_FORMAT, idx, val, lo, hi);\n@@ -870,2 +874,5 @@\n-void C2_MacroAssembler::checked_cast_long(const TypeLong* type, Register val, Register tmp) {\n-  if (type == TypeLong::LONG) {\n+void C2_MacroAssembler::verify_long_in_range(uint idx, const TypeLong* t, Register val, Register tmp) {\n+  jlong lo = t->_lo;\n+  jlong hi = t->_hi;\n+  assert(lo < hi, \"type should not be empty or constant, idx: %u, lo: \" JLONG_FORMAT \", hi: \" JLONG_FORMAT, idx, lo, hi);\n+  if (t == TypeLong::LONG) {\n@@ -888,2 +895,2 @@\n-  if (type->_hi == max_jlong) {\n-    cmp_val(type->_lo);\n+  if (hi == max_jlong) {\n+    cmp_val(lo);\n@@ -892,2 +899,2 @@\n-    if (type->_lo != min_jlong) {\n-      cmp_val(type->_lo);\n+    if (lo != min_jlong) {\n+      cmp_val(lo);\n@@ -896,1 +903,1 @@\n-    cmp_val(type->_hi);\n+    cmp_val(hi);\n@@ -901,4 +908,5 @@\n-  movq(c_rarg0, val);\n-  mov64(c_rarg1, type->_lo);\n-  mov64(c_rarg2, type->_hi);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_long)));\n+  movl(c_rarg0, idx);\n+  movq(c_rarg1, val);\n+  mov64(c_rarg2, lo);\n+  mov64(c_rarg3, hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_verify_long_in_range)));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":34,"deletions":26,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-  void checked_cast_int(const TypeInt* type, Register val);\n-  void checked_cast_long(const TypeLong* type, Register val, Register tmp);\n+  void verify_int_in_range(uint idx, const TypeInt* t, Register val);\n+  void verify_long_in_range(uint idx, const TypeLong* t, Register val, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -425,0 +425,11 @@\n+bool castLL_is_imm32(const Node* n);\n+\n+%}\n+\n+source %{\n+\n+bool castLL_is_imm32(const Node* n) {\n+  const TypeLong* t = n->bottom_type()->is_long();\n+  return (t->_lo == min_jlong || Assembler::is_simm32(t->_lo)) && (t->_hi == max_jlong || Assembler::is_simm32(t->_hi));\n+}\n+\n@@ -7624,1 +7635,1 @@\n-  format %{ \"# checked_cast_II $dst\" %}\n+  format %{ \"# cast_checked_II $dst\" %}\n@@ -7626,1 +7637,1 @@\n-    __ checked_cast_int(bottom_type()->is_int(), $dst$$Register);\n+    __ verify_int_in_range(_idx, bottom_type()->is_int(), $dst$$Register);\n@@ -7645,3 +7656,1 @@\n-  predicate(VerifyConstraintCasts > 0 &&\n-            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n-            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi));\n+  predicate(VerifyConstraintCasts > 0 && castLL_is_imm32(n));\n@@ -7651,1 +7660,1 @@\n-  format %{ \"# checked_cast_LL $dst\" %}\n+  format %{ \"# cast_checked_LL $dst\" %}\n@@ -7653,1 +7662,1 @@\n-    __ checked_cast_long(bottom_type()->is_long(), $dst$$Register, noreg);\n+    __ verify_long_in_range(_idx, bottom_type()->is_long(), $dst$$Register, noreg);\n@@ -7660,3 +7669,1 @@\n-  predicate(VerifyConstraintCasts > 0 &&\n-            !(Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n-              Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi)));\n+  predicate(VerifyConstraintCasts > 0 && !castLL_is_imm32(n));\n@@ -7666,1 +7673,1 @@\n-  format %{ \"# checked_cast_LL $dst\\tusing $tmp as TEMP\" %}\n+  format %{ \"# cast_checked_LL $dst\\tusing $tmp as TEMP\" %}\n@@ -7668,1 +7675,1 @@\n-    __ checked_cast_long(bottom_type()->is_long(), $dst$$Register, $tmp$$Register);\n+    __ verify_long_in_range(_idx, bottom_type()->is_long(), $dst$$Register, $tmp$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -261,1 +261,0 @@\n-  AD.addInclude(AD._DFA_file, \"opto\/castnode.hpp\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,8 +31,0 @@\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8346836\n- * @requires vm.debug == true & vm.flavor == \"server\"\n- * @summary Run with -Xcomp to test -XX:+StressGCM -XX:VerifyConstraintCasts=2 in debug builds.\n- *\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestVerifyConstraintCasts.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}