{"files":[{"patch":"@@ -832,0 +832,80 @@\n+#ifdef ASSERT\n+static void abort_checked_cast_int(jint val, jint lo, jint hi) {\n+  fatal(\"Invalid CastII, val: %d, lo: %d, hi: %d\", val, lo, hi);\n+}\n+\n+void C2_MacroAssembler::checked_cast_int(const TypeInt* type, Register val) {\n+  if (type == TypeInt::INT) {\n+    return;\n+  }\n+\n+  BLOCK_COMMENT(\"CastII {\");\n+  Label fail;\n+  Label succeed;\n+  if (type->_hi == max_jint) {\n+    cmpl(val, type->_lo);\n+    jccb(Assembler::greaterEqual, succeed);\n+  } else {\n+    if (type->_lo != min_jint) {\n+      cmpl(val, type->_lo);\n+      jccb(Assembler::less, fail);\n+    }\n+    cmpl(val, type->_hi);\n+    jccb(Assembler::lessEqual, succeed);\n+  }\n+\n+  bind(fail);\n+  movl(c_rarg0, val);\n+  movl(c_rarg1, type->_lo);\n+  movl(c_rarg2, type->_hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_int)));\n+  hlt();\n+  bind(succeed);\n+  BLOCK_COMMENT(\"} \/\/ CastII\");\n+}\n+\n+static void abort_checked_cast_long(jlong val, jlong lo, jlong hi) {\n+  fatal(\"Invalid CastLL, val: %lld, lo: %lld, hi: %lld\", (long long)val, (long long)lo, (long long)hi);\n+}\n+\n+void C2_MacroAssembler::checked_cast_long(const TypeLong* type, Register val, Register tmp) {\n+  if (type == TypeLong::LONG) {\n+    return;\n+  }\n+\n+  BLOCK_COMMENT(\"CastLL {\");\n+  Label fail;\n+  Label succeed;\n+\n+  auto cmp_val = [&](jlong bound) {\n+    if (is_simm32(bound)) {\n+      cmpq(val, checked_cast<int>(bound));\n+    } else {\n+      mov64(tmp, bound);\n+      cmpq(val, tmp);\n+    }\n+  };\n+\n+  if (type->_hi == max_jlong) {\n+    cmp_val(type->_lo);\n+    jccb(Assembler::greaterEqual, succeed);\n+  } else {\n+    if (type->_lo != min_jlong) {\n+      cmp_val(type->_lo);\n+      jccb(Assembler::less, fail);\n+    }\n+    cmp_val(type->_hi);\n+    jccb(Assembler::lessEqual, succeed);\n+  }\n+\n+  bind(fail);\n+  movq(c_rarg0, val);\n+  mov64(c_rarg1, type->_lo);\n+  mov64(c_rarg2, type->_hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_long)));\n+  hlt();\n+  bind(succeed);\n+  BLOCK_COMMENT(\"} \/\/ CastLL\");\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -47,0 +47,5 @@\n+#ifdef ASSERT\n+  void checked_cast_int(const TypeInt* type, Register val);\n+  void checked_cast_long(const TypeLong* type, Register val, Register tmp);\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -7608,0 +7608,1 @@\n+  predicate(VerifyConstraintCasts == 0);\n@@ -7617,0 +7618,13 @@\n+instruct castII_checked(rRegI dst, rFlagsReg cr)\n+%{\n+  predicate(VerifyConstraintCasts > 0);\n+  match(Set dst (CastII dst));\n+\n+  effect(KILL cr);\n+  format %{ \"# checked_cast_II $dst\" %}\n+  ins_encode %{\n+    DEBUG_ONLY(__ checked_cast_int(bottom_type()->is_int(), $dst$$Register));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -7619,0 +7633,1 @@\n+  predicate(VerifyConstraintCasts == 0);\n@@ -7628,0 +7643,30 @@\n+instruct castLL_checked_L32(rRegL dst, rFlagsReg cr)\n+%{\n+  predicate(VerifyConstraintCasts > 0 &&\n+            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n+            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi));\n+  match(Set dst (CastLL dst));\n+\n+  effect(KILL cr);\n+  format %{ \"# checked_cast_LL $dst\" %}\n+  ins_encode %{\n+    DEBUG_ONLY(__ checked_cast_long(bottom_type()->is_long(), $dst$$Register, noreg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct castLL_checked(rRegL dst, rRegL tmp, rFlagsReg cr)\n+%{\n+  predicate(VerifyConstraintCasts > 0 &&\n+            !(Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n+              Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi)));\n+  match(Set dst (CastLL dst));\n+\n+  effect(KILL cr, TEMP tmp);\n+  format %{ \"# checked_cast_LL $dst\\tusing $tmp as TEMP\" %}\n+  ins_encode %{\n+    DEBUG_ONLY(__ checked_cast_long(bottom_type()->is_long(), $dst$$Register, $tmp$$Register));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -261,0 +261,1 @@\n+  AD.addInclude(AD._DFA_file, \"opto\/castnode.hpp\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+class TypeInt;\n+class TypeLong;\n","filename":"src\/hotspot\/share\/opto\/c2_MacroAssembler.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -672,0 +672,10 @@\n+  develop(uint, VerifyConstraintCasts, 0,                                   \\\n+          \"Perform runtime checks to verify the value of a \"                \\\n+          \"ConstraintCast lies inside its type\"                             \\\n+          \"0 = does not perform any verification, \"                         \\\n+          \"1 = perform verification on ConstraintCastNodes that are \"       \\\n+              \"present during code emission, \"                              \\\n+          \"2 = Do not do widening of ConstraintCastNodes so that we can \"   \\\n+              \"have more verification coverage\")                            \\\n+          range(0, 2)                                                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -528,0 +528,12 @@\n+\n+  \/\/ At VerifyConstraintCasts == 1, we verify the ConstraintCastNodes that are present during code\n+  \/\/ emission. This allows us detecting possible mis-scheduling due to these nodes being pinned at\n+  \/\/ the wrong control nodes.\n+  \/\/ At VerifyConstraintCasts == 2, we do not perform widening so that we can verify the\n+  \/\/ correctness of more ConstraintCastNodes. This further helps us detect possible\n+  \/\/ mis-transformations that may happen due to these nodes being pinned at the wrong control\n+  \/\/ nodes.\n+  if (VerifyConstraintCasts > 1) {\n+    return res;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346836\n+ * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @summary Run with -Xcomp to test -XX:+StressGCM -XX:VerifyConstraintCasts=1 in debug builds.\n+ *\n+ * @run main\/othervm\/timeout=300 -Xbatch -Xcomp -XX:+StressGCM -XX:VerifyConstraintCasts=1 compiler.c2.TestVerifyConstraintCasts\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346836\n+ * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @summary Run with -Xcomp to test -XX:+StressGCM -XX:VerifyConstraintCasts=2 in debug builds.\n+ *\n+ * @run main\/othervm\/timeout=300 -Xbatch -Xcomp -XX:+StressGCM -XX:VerifyConstraintCasts=2 compiler.c2.TestVerifyConstraintCasts\n+ *\/\n+package compiler.c2;\n+\n+public class TestVerifyConstraintCasts {\n+    public static void main(String[] args) {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestVerifyConstraintCasts.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}