{"files":[{"patch":"@@ -833,1 +833,9 @@\n-void C2_MacroAssembler::checked_cast_int(const TypeInt* type, Register dst) {\n+static void abort_checked_cast_int(jint val, jint lo, jint hi) {\n+  fatal(\"Invalid CastII, val: %d, lo: %d, hi: %d\", val, lo, hi);\n+}\n+\n+void C2_MacroAssembler::checked_cast_int(const TypeInt* type, Register val) {\n+  if (type == TypeInt::INT) {\n+    return;\n+  }\n+\n@@ -837,4 +845,12 @@\n-  cmpl(dst, type->_lo);\n-  jccb(Assembler::less, fail);\n-  cmpl(dst, type->_hi);\n-  jccb(Assembler::lessEqual, succeed);\n+  if (type->_hi == max_jint) {\n+    cmpl(val, type->_lo);\n+    jccb(Assembler::greaterEqual, succeed);\n+  } else {\n+    if (type->_lo != min_jint) {\n+      cmpl(val, type->_lo);\n+      jccb(Assembler::less, fail);\n+    }\n+    cmpl(val, type->_hi);\n+    jccb(Assembler::lessEqual, succeed);\n+  }\n+\n@@ -842,4 +858,5 @@\n-  movl(rax, dst);\n-  movl(rcx, type->_lo);\n-  movl(rdx, type->_hi);\n-  hlt(); \/\/ hlt so we have the stack trace\n+  movl(c_rarg0, val);\n+  movl(c_rarg1, type->_lo);\n+  movl(c_rarg2, type->_hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_int)));\n+  hlt();\n@@ -850,1 +867,9 @@\n-void C2_MacroAssembler::checked_cast_long(const TypeLong* type, Register dst, Register tmp) {\n+static void abort_checked_cast_long(jlong val, jlong lo, jlong hi) {\n+  fatal(\"Invalid CastLL, val: %lld, lo: %lld, hi: %lld\", (long long)val, (long long)lo, (long long)hi);\n+}\n+\n+void C2_MacroAssembler::checked_cast_long(const TypeLong* type, Register val, Register tmp) {\n+  if (type == TypeLong::LONG) {\n+    return;\n+  }\n+\n@@ -854,9 +879,13 @@\n-  if (is_simm32(type->_lo)) {\n-    cmpq(dst, checked_cast<int>(type->_lo));\n-  } else {\n-    mov64(tmp, type->_lo);\n-    cmpq(dst, tmp);\n-  }\n-  jccb(Assembler::less, fail);\n-  if (is_simm32(type->_hi)) {\n-    cmpq(dst, checked_cast<int>(type->_hi));\n+\n+  auto cmp_val = [&](jlong bound) {\n+    if (is_simm32(bound)) {\n+      cmpq(val, checked_cast<int>(bound));\n+    } else {\n+      mov64(tmp, bound);\n+      cmpq(val, tmp);\n+    }\n+  };\n+\n+  if (type->_hi == max_jlong) {\n+    cmp_val(type->_lo);\n+    jccb(Assembler::greaterEqual, succeed);\n@@ -864,2 +893,6 @@\n-    mov64(tmp, type->_hi);\n-    cmpq(dst, tmp);\n+    if (type->_lo != min_jlong) {\n+      cmp_val(type->_lo);\n+      jccb(Assembler::less, fail);\n+    }\n+    cmp_val(type->_hi);\n+    jccb(Assembler::lessEqual, succeed);\n@@ -867,1 +900,1 @@\n-  jccb(Assembler::lessEqual, succeed);\n+\n@@ -869,4 +902,5 @@\n-  movq(rax, dst);\n-  mov64(rcx, type->_lo);\n-  mov64(rdx, type->_hi);\n-  hlt(); \/\/ hlt so we have the stack trace\n+  movq(c_rarg0, val);\n+  mov64(c_rarg1, type->_lo);\n+  mov64(c_rarg2, type->_hi);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, abort_checked_cast_long)));\n+  hlt();\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":60,"deletions":26,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  void checked_cast_int(const TypeInt* type, Register dst);\n-  void checked_cast_long(const TypeLong* type, Register dst, Register tmp);\n+  void checked_cast_int(const TypeInt* type, Register val);\n+  void checked_cast_long(const TypeLong* type, Register val, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7643,0 +7643,15 @@\n+instruct castLL_checked_L32(rRegL dst, rFlagsReg cr)\n+%{\n+  predicate(VerifyConstraintCasts > 0 &&\n+            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n+            Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi));\n+  match(Set dst (CastLL dst));\n+\n+  effect(KILL cr);\n+  format %{ \"# checked_cast_LL $dst\" %}\n+  ins_encode %{\n+    DEBUG_ONLY(__ checked_cast_long(bottom_type()->is_long(), $dst$$Register, noreg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -7645,1 +7660,3 @@\n-  predicate(VerifyConstraintCasts > 0);\n+  predicate(VerifyConstraintCasts > 0 &&\n+            !(Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_lo) &&\n+              Assembler::is_simm32(static_cast<const CastLLNode*>(n)->type()->is_long()->_hi)));\n@@ -7649,1 +7666,1 @@\n-  format %{ \"# checked_cast_LL $dst\" %}\n+  format %{ \"# checked_cast_LL $dst\\tusing $tmp as TEMP\" %}\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -261,0 +261,1 @@\n+  AD.addInclude(AD._DFA_file, \"opto\/castnode.hpp\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}