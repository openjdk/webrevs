{"files":[{"patch":"@@ -2032,2 +2032,0 @@\n-  declare_constant(JVM_ACC_WRITTEN_FLAGS)                                 \\\n-                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,4 +106,0 @@\n-  public long computeModifierFlags() {\n-     return JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ArrayKlass.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -437,40 +437,0 @@\n-  \/\/ refer to compute_modifier_flags in VM code.\n-  public long computeModifierFlags() {\n-    long access = getAccessFlags();\n-    \/\/ But check if it happens to be member class.\n-    U2Array innerClassList = getInnerClasses();\n-    int length = (innerClassList == null)? 0 : innerClassList.length();\n-    if (length > 0) {\n-       if (Assert.ASSERTS_ENABLED) {\n-          Assert.that(length % InnerClassAttributeOffset.innerClassNextOffset == 0 ||\n-                      length % InnerClassAttributeOffset.innerClassNextOffset == EnclosingMethodAttributeOffset.enclosingMethodAttributeSize,\n-                      \"just checking\");\n-       }\n-       for (int i = 0; i < length; i += InnerClassAttributeOffset.innerClassNextOffset) {\n-          if (i == length - EnclosingMethodAttributeOffset.enclosingMethodAttributeSize) {\n-              break;\n-          }\n-          int ioff = innerClassList.at(i +\n-                         InnerClassAttributeOffset.innerClassInnerClassInfoOffset);\n-          \/\/ 'ioff' can be zero.\n-          \/\/ refer to JVM spec. section 4.7.5.\n-          if (ioff != 0) {\n-             \/\/ only look at classes that are already loaded\n-             \/\/ since we are looking for the flags for our self.\n-             Symbol name = getConstants().getKlassNameAt(ioff);\n-\n-             if (name.equals(getName())) {\n-                \/\/ This is really a member class\n-                access = innerClassList.at(i +\n-                        InnerClassAttributeOffset.innerClassAccessFlagsOffset);\n-                break;\n-             }\n-          }\n-       } \/\/ for inner classes\n-    }\n-\n-    \/\/ Remember to strip ACC_SUPER bit\n-    return (access & (~JVM_ACC_SUPER)) & JVM_ACC_WRITTEN_FLAGS;\n-  }\n-\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -136,17 +136,0 @@\n-  \/\/ computed access flags - takes care of inner classes etc.\n-  \/\/ This is closer to actual source level than getAccessFlags() etc.\n-  public long computeModifierFlags() {\n-    return 0L; \/\/ Unless overridden, modifier_flags is 0.\n-  }\n-\n-  \/\/ same as JVM_GetClassModifiers\n-  public final long getClassModifiers() {\n-    \/\/ unlike the VM counterpart we never have to deal with primitive type,\n-    \/\/ because we operator on Klass and not an instance of java.lang.Class.\n-    long flags = computeModifierFlags();\n-    if (isSuper()) {\n-       flags |= JVM_ACC_SUPER;\n-    }\n-    return flags;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Klass.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,13 +63,0 @@\n-  public long computeModifierFlags() {\n-    long elementFlags = getElementKlass().computeModifierFlags();\n-    long arrayFlags = 0L;\n-    if ((elementFlags & (JVM_ACC_PUBLIC | JVM_ACC_PROTECTED)) != 0) {\n-       \/\/ The array type is public if the component type is public or protected\n-       arrayFlags = JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC;\n-    } else {\n-       \/\/ The array type is private if the component type is private\n-       arrayFlags = JVM_ACC_ABSTRACT | JVM_ACC_FINAL;\n-    }\n-    return arrayFlags;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ObjArrayKlass.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"}]}