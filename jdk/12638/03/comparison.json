{"files":[{"patch":"@@ -167,3 +167,0 @@\n-vmTestbase\/nsk\/stress\/strace\/strace002.java 8288912 macosx-x64,windows-x64\n-vmTestbase\/nsk\/stress\/strace\/strace003.java 8297824 macosx-x64,windows-x64\n-vmTestbase\/nsk\/stress\/strace\/strace004.java 8297824 macosx-x64,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package nsk.stress.strace;\n+\n+public class StraceBase {\n+\n+    private static final String[] EXPECTED_SYSTEM_CLASSES = {\n+            \"java.lang.ClassLoader\",\n+            \"java.lang.System\",\n+            \"java.lang.Object\",\n+            \"java.lang.Thread\",\n+            \"jdk.internal.event.Event\",\n+            \"jdk.internal.event.ThreadSleepEvent\",\n+            \"jdk.internal.misc.Blocker\",\n+            \"jdk.internal.misc.VM\",\n+            \"jdk.internal.vm.StackableScope\",\n+    };\n+\n+    \/**\n+     *   Method verifies that StackTraceElement is sane and might be expected in the current stack.\n+     *\/\n+    final static boolean checkElement(StackTraceElement element) {\n+        String className = element.getClassName();\n+        String methodName = element.getMethodName();\n+        if (className.matches(\"nsk.stress.strace.strace\\\\d\\\\d\\\\dThread\")) {\n+            if (methodName.matches(\"recursiveMethod\\\\d?\")\n+                    || methodName.equals(\"run\")) {\n+                return true;\n+            }\n+            return false;\n+        }\n+        for (var systemClassName : EXPECTED_SYSTEM_CLASSES) {\n+            if (className.equals(systemClassName))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/StraceBase.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n- * <p>These checking are performed <code>REPEAT_COUNT<\/code> times.<\/p>\n+ * correct stack frames.<\/p>\n@@ -64,1 +62,1 @@\n-public class strace001 {\n+public class strace001 extends StraceBase {\n@@ -69,18 +67,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.misc.Blocker.begin\",\n-            \"jdk.internal.misc.Blocker.currentCarrierThread\",\n-            \"jdk.internal.misc.Blocker.end\",\n-            \"nsk.stress.strace.strace001Thread.run\",\n-            \"nsk.stress.strace.strace001Thread.recursiveMethod\"\n-    };\n-\n@@ -228,9 +208,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace001.java","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n+ * correct stack frames.<\/p>\n@@ -70,1 +69,1 @@\n-public class strace002 {\n+public class strace002 extends StraceBase {\n@@ -75,18 +74,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.misc.Blocker.begin\",\n-            \"jdk.internal.misc.Blocker.currentCarrierThread\",\n-            \"jdk.internal.misc.Blocker.end\",\n-            \"nsk.stress.strace.strace002Thread.run\",\n-            \"nsk.stress.strace.strace002Thread.recursiveMethod\"\n-    };\n-\n@@ -235,9 +216,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace002.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -61,3 +61,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n- * <p>These checking are performed <code>REPEAT_COUNT<\/code> times.<\/p>\n+ * correct stack frames. <\/p>\n@@ -65,1 +63,1 @@\n-public class strace003 {\n+public class strace003 extends StraceBase {\n@@ -70,22 +68,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.System$2.headStackableScope\",\n-            \"java.lang.Thread.headStackableScopes\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.misc.Blocker.begin\",\n-            \"jdk.internal.misc.Blocker.currentCarrierThread\",\n-            \"jdk.internal.misc.Blocker.end\",\n-            \"jdk.internal.vm.StackableScope.head\",\n-            \"jdk.internal.vm.StackableScope.popAll\",\n-            \"nsk.stress.strace.strace003Thread.run\",\n-            \"nsk.stress.strace.strace003Thread.recursiveMethod\"\n-    };\n-\n@@ -232,9 +208,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace003.java","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -62,3 +62,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n- * <p>These checking are performed <code>REPEAT_COUNT<\/code> times.<\/p>\n+ * correct stack frames. <\/p>\n@@ -66,1 +64,1 @@\n-public class strace004 {\n+public class strace004 extends StraceBase {\n@@ -71,22 +69,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.System$2.headStackableScope\",\n-            \"java.lang.Thread.headStackableScopes\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.misc.Blocker.begin\",\n-            \"jdk.internal.misc.Blocker.currentCarrierThread\",\n-            \"jdk.internal.misc.Blocker.end\",\n-            \"jdk.internal.vm.StackableScope.head\",\n-            \"jdk.internal.vm.StackableScope.popAll\",\n-            \"nsk.stress.strace.strace004Thread.run\",\n-            \"nsk.stress.strace.strace004Thread.recursiveMethod\"\n-    };\n-\n@@ -234,9 +210,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace004.java","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,3 +125,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n- * <p>These checking are performed <code>REPEAT_COUNT<\/code> times.<\/p>\n+ * correct stack frames.<\/p>\n@@ -129,1 +127,1 @@\n-public class strace005 {\n+public class strace005 extends StraceBase {\n@@ -134,20 +132,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.System$2.headStackableScope\",\n-            \"java.lang.Thread.headStackableScopes\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.vm.StackableScope.head\",\n-            \"jdk.internal.vm.StackableScope.popAll\",\n-            \"nsk.stress.strace.strace005Thread.run\",\n-            \"nsk.stress.strace.strace005Thread.recursiveMethod1\",\n-            \"nsk.stress.strace.strace005Thread.recursiveMethod2\"\n-    };\n-\n@@ -305,9 +283,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace005.java","additions":3,"deletions":34,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,1 @@\n- * correct stack frames. Each stack frame must be corresponded to one of the following\n- * methods defined by the <code>expectedMethod<\/code> array.<\/p>\n+ * correct stack frames.<\/p>\n@@ -69,1 +68,1 @@\n-public class strace006 {\n+public class strace006 extends StraceBase {\n@@ -74,19 +73,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.System.arraycopy\",\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"java.lang.System$2.headStackableScope\",\n-            \"java.lang.Thread.headStackableScopes\",\n-            \"java.lang.Thread.exit\",\n-            \"java.lang.Thread.yield\",\n-            \"java.lang.Thread.yield0\",\n-            \"java.lang.Thread.clearReferences\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"java.lang.Thread.threadContainer\",\n-            \"jdk.internal.vm.StackableScope.head\",\n-            \"jdk.internal.vm.StackableScope.popAll\",\n-            \"nsk.stress.strace.strace006Thread.run\",\n-            \"nsk.stress.strace.strace006Thread.recursiveMethod1\",\n-            \"nsk.stress.strace.strace006Thread.recursiveMethod2\"\n-    };\n@@ -247,11 +227,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        if (element.getClassName().equals(\"java.lang.ClassLoader\"))\n-            return true;\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace006.java","additions":3,"deletions":34,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -68,1 +64,1 @@\n-public class strace007 {\n+public class strace007 extends StraceBase {\n@@ -73,12 +69,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace007Thread.run\",\n-            \"nsk.stress.strace.strace007Thread.recursiveMethod\"\n-    };\n-\n@@ -210,9 +194,0 @@\n-    static boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace007.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,3 +67,0 @@\n- * It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -71,1 +68,1 @@\n-public class strace008 {\n+public class strace008 extends StraceBase {\n@@ -77,11 +74,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace008Thread.run\",\n-            \"nsk.stress.strace.strace008Thread.recursiveMethod\"\n-    };\n@@ -214,9 +200,0 @@\n-    static boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace008.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,4 +65,0 @@\n- * <p>\n- * It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -70,1 +66,1 @@\n-public class strace009 {\n+public class strace009 extends StraceBase {\n@@ -76,12 +72,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace009Thread.run\",\n-            \"nsk.stress.strace.strace009Thread.recursiveMethod1\",\n-            \"nsk.stress.strace.strace009Thread.recursiveMethod2\"\n-    };\n@@ -214,9 +198,0 @@\n-    static boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace009.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -68,1 +64,1 @@\n-public class strace010 {\n+public class strace010 extends StraceBase {\n@@ -72,11 +68,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace010Thread.run\",\n-            \"nsk.stress.strace.strace010Thread.recursiveMethod\"\n-    };\n@@ -232,9 +217,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace010.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,3 +65,0 @@\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -69,1 +66,1 @@\n-public class strace011 {\n+public class strace011 extends StraceBase {\n@@ -73,11 +70,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace011Thread.run\",\n-            \"nsk.stress.strace.strace011Thread.recursiveMethod\"\n-    };\n@@ -233,9 +219,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace011.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,4 +67,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -72,1 +68,1 @@\n-public class strace012 {\n+public class strace012 extends StraceBase {\n@@ -76,12 +72,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Thread.sleep\",\n-            \"java.lang.Thread.sleep0\",\n-            \"jdk.internal.event.ThreadSleepEvent.<clinit>\",\n-            \"jdk.internal.event.ThreadSleepEvent.isTurnedOn\",\n-            \"jdk.internal.event.ThreadSleepEvent.isEnabled\",\n-            \"java.lang.Thread.currentCarrierThread\",\n-            \"java.lang.Thread.currentThread\",\n-            \"nsk.stress.strace.strace012Thread.run\",\n-            \"nsk.stress.strace.strace012Thread.recursiveMethod1\",\n-            \"nsk.stress.strace.strace012Thread.recursiveMethod2\"\n-    };\n@@ -237,9 +221,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace012.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,8 +58,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces correspond to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n- *\n- * There is some leeway in the expected stack depth as a thread may not have\n- * reached the native wait0() call when the stacktrace is taken. So we allow\n- * a difference of 3 for the methods: wait(), wait(0), and wait0(0)\n@@ -67,1 +59,1 @@\n-public class strace013 {\n+public class strace013 extends StraceBase {\n@@ -71,6 +63,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Object.wait\", \/\/ two variants\n-            \"java.lang.Object.wait0\",\n-            \"nsk.stress.strace.strace013Thread.run\",\n-            \"nsk.stress.strace.strace013Thread.recursiveMethod\"\n-    };\n@@ -219,9 +205,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace013.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -69,1 +65,1 @@\n-public class strace014 {\n+public class strace014 extends StraceBase {\n@@ -73,6 +69,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"nsk.stress.strace.strace014Thread.run\",\n-            \"nsk.stress.strace.strace014Thread.recursiveMethod\"\n-    };\n@@ -223,9 +213,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace014.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,4 +66,0 @@\n- * <p>\n- * <p>It is expected that these methods return the same stack traces. Each stack frame\n- * for both stack traces must be corresponded to invocation of one of the methods\n- * defined by the <code>EXPECTED_METHODS<\/code> array.<\/p>\n@@ -71,1 +67,1 @@\n-public class strace015 {\n+public class strace015 extends StraceBase {\n@@ -75,8 +71,0 @@\n-    static final String[] EXPECTED_METHODS = {\n-            \"java.lang.Object.wait\",\n-            \"java.lang.Object.wait0\",\n-            \"nsk.stress.strace.strace015Thread.run\",\n-            \"nsk.stress.strace.strace015Thread.recursiveMethod1\",\n-            \"nsk.stress.strace.strace015Thread.recursiveMethod2\"\n-    };\n-\n@@ -224,9 +212,0 @@\n-    boolean checkElement(StackTraceElement element) {\n-        String name = element.getClassName() + \".\" + element.getMethodName();\n-        for (int i = 0; i < EXPECTED_METHODS.length; i++) {\n-            if (name.startsWith(EXPECTED_METHODS[i]))\n-                return true;\n-        }\n-        return false;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/strace\/strace015.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"}]}