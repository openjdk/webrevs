{"files":[{"patch":"@@ -308,3 +308,0 @@\n-            supportedAlgorithms = null;\n-            supportedSignatureSchemes = null;\n-            checksDisabled = false;\n@@ -403,1 +400,1 @@\n-                    || !algorithm.equalsIgnoreCase(\"RSASSA-PSS\")) {\n+                    || !\"RSASSA-PSS\".equalsIgnoreCase(algorithm)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmConstraints.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -461,2 +461,8 @@\n-    \/\/ Additional certificate chain check to verify the signature\n-    \/\/ algorithms with the corresponding signing keys.\n+    \/\/ Additional certificate chain check to verify that the algorithm\n+    \/\/ constraints permit the signature algorithms to be used with the\n+    \/\/ corresponding signing keys.\n+    \/\/ This method is important to differentiate between \"rsa_pss_pss_*\"\n+    \/\/ and \"rsa_pss_rsae_*\" signature schemes in SSLAlgorithmConstraints.\n+    \/\/ We make AlgorithmChecker to perform a check against signature\n+    \/\/ algorithms with the corresponding signing keys on the first iteration\n+    \/\/ by setting a Trust Anchor.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509TrustManagerImpl.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}