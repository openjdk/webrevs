{"files":[{"patch":"@@ -399,9 +399,14 @@\n-\n-        Instance instance = GetInstance.getInstance(\"KDF\", KDFSpi.class,\n-                                                    algorithm,\n-                                                    kdfParameters,\n-                                                    provider);\n-        if (!JceSecurity.canUseProvider(instance.provider)) {\n-            String msg = \"JCE cannot authenticate the provider \"\n-                         + instance.provider.getName();\n-            throw new NoSuchProviderException(msg);\n+        try {\n+            Instance instance = GetInstance.getInstance(\"KDF\", KDFSpi.class,\n+                                                        algorithm,\n+                                                        kdfParameters,\n+                                                        provider);\n+            if (!JceSecurity.canUseProvider(instance.provider)) {\n+                String msg = \"JCE cannot authenticate the provider \"\n+                             + instance.provider.getName();\n+                throw new NoSuchProviderException(msg);\n+            }\n+            return new KDF(new Delegate((KDFSpi) instance.impl,\n+                                        instance.provider), algorithm);\n+        } catch (NoSuchAlgorithmException nsae) {\n+            return handleException(nsae);\n@@ -409,3 +414,0 @@\n-        return new KDF(new Delegate((KDFSpi) instance.impl,\n-                                    instance.provider), algorithm\n-        );\n@@ -447,8 +449,23 @@\n-        Instance instance = GetInstance.getInstance(\"KDF\", KDFSpi.class,\n-                                                    algorithm,\n-                                                    kdfParameters,\n-                                                    provider);\n-        if (!JceSecurity.canUseProvider(instance.provider)) {\n-            String msg = \"JCE cannot authenticate the provider \"\n-                         + instance.provider.getName();\n-            throw new SecurityException(msg);\n+        try {\n+            Instance instance = GetInstance.getInstance(\"KDF\", KDFSpi.class,\n+                                                        algorithm,\n+                                                        kdfParameters,\n+                                                        provider);\n+            if (!JceSecurity.canUseProvider(instance.provider)) {\n+                String msg = \"JCE cannot authenticate the provider \"\n+                             + instance.provider.getName();\n+                throw new SecurityException(msg);\n+            }\n+            return new KDF(new Delegate((KDFSpi) instance.impl,\n+                                        instance.provider), algorithm);\n+        } catch (NoSuchAlgorithmException nsae) {\n+            return handleException(nsae);\n+        }\n+    }\n+\n+    private static KDF handleException(NoSuchAlgorithmException e)\n+            throws NoSuchAlgorithmException,\n+                   InvalidAlgorithmParameterException {\n+        Throwable cause = e.getCause();\n+        if (cause instanceof InvalidAlgorithmParameterException iape) {\n+            throw iape;\n@@ -456,3 +473,1 @@\n-        return new KDF(new Delegate((KDFSpi) instance.impl,\n-                                    instance.provider), algorithm\n-        );\n+        throw e;\n@@ -674,1 +689,2 @@\n-        else throw new NoSuchAlgorithmException();\n+        else throw new NoSuchAlgorithmException(\n+                \"No available provider supports the specified algorithm\");\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":40,"deletions":24,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -72,0 +72,2 @@\n+  static class TestKDFParams implements KDFParameters {}\n+\n@@ -307,0 +309,6 @@\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], new TestKDFParams(), SUNJCE),\n+        InvalidAlgorithmParameterException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], new TestKDFParams(), SUNJCE_PROVIDER),\n+        InvalidAlgorithmParameterException.class);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFExhaustiveTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}