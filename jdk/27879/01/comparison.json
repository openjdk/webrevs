{"files":[{"patch":"@@ -10525,0 +10525,6 @@\n+      <capabilityfield id=\"can_get_gc_cpu_time\" since=\"26\">\n+        <description>\n+          Can <functionlink id=\"GetTotalGCCpuTime\">get<\/functionlink>\n+          GC CPU time\n+        <\/description>\n+      <\/capabilityfield>\n@@ -11228,0 +11234,62 @@\n+    <function id=\"GetGCCpuTimerInfo\" phase=\"any\" callbacksafe=\"safe\" num=\"157\" since=\"26\">\n+      <synopsis>Get Total GC Cpu Timer Information<\/synopsis>\n+      <description>\n+        Get information about the\n+        <functionlink id=\"GetTotalGCCpuTime\"\/> timer.\n+        The fields of the <datalink id=\"jvmtiTimerInfo\"\/> structure\n+        are filled in with details about the timer.\n+        This information will not change during a particular invocation of the VM.\n+      <\/description>\n+      <origin>new<\/origin>\n+      <capabilities>\n+        <required id=\"can_get_gc_cpu_time\">\n+            Can get GC cpu time.\n+        <\/required>\n+      <\/capabilities>\n+      <parameters>\n+        <param id=\"info_ptr\">\n+          <outptr><struct>jvmtiTimerInfo<\/struct><\/outptr>\n+          <description>\n+            On return, filled with information describing the time\n+            returned by <functionlink id=\"GetTotalGCCpuTime\"\/>.\n+          <\/description>\n+        <\/param>\n+      <\/parameters>\n+      <errors>\n+      <\/errors>\n+    <\/function>\n+\n+    <function id=\"GetTotalGCCpuTime\" phase=\"any\" callbacksafe=\"safe\" num=\"158\" since=\"26\">\n+      <synopsis>Get Total GC CPU Time<\/synopsis>\n+      <description>\n+          Return the current value of the total GC CPU timer, in nanoseconds.\n+          <p\/>\n+          The value returned represents nanoseconds since some fixed but\n+          arbitrary time (perhaps in the future, so values may be\n+          negative).  This function provides nanosecond precision, but not\n+          necessarily nanosecond accuracy. No guarantees are made about\n+          how frequently values change.\n+          <p\/>\n+          Get information about this timer with\n+          <functionlink id=\"GetGCCpuTimerInfo\"\/>.\n+      <\/description>\n+      <origin>new<\/origin>\n+      <capabilities>\n+        <required id=\"can_get_gc_cpu_time\">\n+            Can get GC cpu time.\n+        <\/required>\n+      <\/capabilities>\n+      <parameters>\n+        <param id=\"nanos_ptr\">\n+          <outptr><jlong\/><\/outptr>\n+          <description>\n+            On return, points to the time in nanoseconds.\n+            This is an unsigned value.  If tested or printed as a jlong (signed value)\n+            it may appear to be a negative number.\n+          <\/description>\n+        <\/param>\n+      <\/parameters>\n+      <errors>\n+      <\/errors>\n+    <\/function>\n+\n@@ -15473,0 +15541,5 @@\n+  <change date=\"30 October 2025\" version=\"26.0.0\">\n+      Provide GC CPU time details.\n+      Add new functions: GetGCCpuTimerInfo and GetTotalGCCpuTime.\n+      Add new capability: can_get_gc_cpu_time.\n+  <\/change>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -3788,0 +3789,24 @@\n+\/\/ info_ptr - pre-checked for null\n+jvmtiError\n+JvmtiEnv::GetGCCpuTimerInfo(jvmtiTimerInfo* info_ptr) {\n+  os::thread_cpu_time_info(info_ptr);\n+  return JVMTI_ERROR_NONE;\n+} \/* end GetGCCpuTimerInfo *\/\n+\n+\n+\/\/ nanos_ptr - pre-checked for null\n+jvmtiError\n+JvmtiEnv::GetTotalGCCpuTime(long* nanos_ptr) {\n+  {\n+    MutexLocker hl(Heap_lock);\n+    if (!os::is_thread_cpu_time_supported() ||\n+        Universe::heap()->is_shutting_down()) {\n+      *nanos_ptr = -1;\n+    }\n+    *nanos_ptr = CPUTimeUsage::GC::total();\n+  }\n+  return JVMTI_ERROR_NONE;\n+} \/* end GetTotalGCCpuTime *\/\n+\n+\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,1 @@\n+    JVMTI_VERSION_25  = 0x30170000,\n","filename":"src\/hotspot\/share\/prims\/jvmtiH.xsl","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+    jc.can_get_gc_cpu_time = 1;\n@@ -464,0 +465,2 @@\n+  if (cap->can_get_gc_cpu_time)\n+    log_trace(jvmti)(\"can_get_gc_cpu_time\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}