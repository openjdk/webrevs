{"files":[{"patch":"@@ -690,0 +690,2 @@\n+template class TypeIntPrototype<intn_t<5>, uintn_t<5>>;\n+template class TypeIntPrototype<intn_t<6>, uintn_t<6>>;\n@@ -711,4 +713,1 @@\n-      return CT::make_or_top(TypeIntPrototype<S, U>{{MIN2(i1->_lo, i2->_lo), MAX2(i1->_hi, i2->_hi)},\n-                                                    {MIN2(i1->_ulo, i2->_ulo), MAX2(i1->_uhi, i2->_uhi)},\n-                                                    {i1->_bits._zeros & i2->_bits._zeros, i1->_bits._ones & i2->_bits._ones}},\n-                             MAX2(i1->_widen, i2->_widen), false);\n+      return int_type_union(i1, i2);\n","filename":"src\/hotspot\/share\/opto\/rangeinference.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -151,0 +151,11 @@\n+  template <class CTP>\n+  static CTP int_type_union(CTP t1, CTP t2) {\n+    using CT = std::conditional_t<std::is_pointer_v<CTP>, std::remove_pointer_t<CTP>, CTP>;\n+    using S = std::remove_const_t<decltype(CT::_lo)>;\n+    using U = std::remove_const_t<decltype(CT::_ulo)>;\n+    return CT::make(TypeIntPrototype<S, U>{{MIN2(t1->_lo, t2->_lo), MAX2(t1->_hi, t2->_hi)},\n+                                           {MIN2(t1->_ulo, t2->_ulo), MAX2(t1->_uhi, t2->_uhi)},\n+                                           {t1->_bits._zeros & t2->_bits._zeros, t1->_bits._ones & t2->_bits._ones}},\n+                    MAX2(t1->_widen, t2->_widen));\n+  }\n+\n@@ -296,7 +307,0 @@\n-      Iterator operator++(int) {\n-        assert(_current_interval < _iterable._interval_num, \"out of bounds, %d - %d\", _current_interval, _iterable._interval_num);\n-        Iterator res(*this);\n-        _current_interval++;\n-        return res;\n-      }\n-\n@@ -324,1 +328,1 @@\n-    bool init = false;\n+    bool is_init = false;\n@@ -333,1 +337,1 @@\n-        if (init) {\n+        if (is_init) {\n@@ -336,1 +340,1 @@\n-          init = true;\n+          is_init = true;\n@@ -342,1 +346,1 @@\n-    assert(init, \"must be initialized\");\n+    assert(is_init, \"must be initialized\");\n@@ -353,0 +357,2 @@\n+      \/\/ The unsigned value of the result of 'and' is always not greater than both of its inputs\n+      \/\/ since there is no position at which the bit is 1 in the result and 0 in either input\n@@ -365,0 +371,2 @@\n+      \/\/ The unsigned value of the result of 'or' is always not less than both of its inputs since\n+      \/\/ there is no position at which the bit is 0 in the result and 1 in either input\n","filename":"src\/hotspot\/share\/opto\/rangeinference.hpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -224,3 +224,1 @@\n-  return make(TypeIntPrototype<S, U>{{MIN2(_lo, o._lo), MAX2(_hi, o._hi)},\n-                                     {MIN2(_ulo, o._ulo), MAX2(_uhi, o._uhi)},\n-                                     {_bits._zeros & o._bits._zeros, _bits._ones & o._bits._ones}}, 0);\n+  return TypeIntHelper::int_type_union(*this, o);\n@@ -320,0 +318,1 @@\n+  static_assert(std::is_trivially_destructible_v<decltype(res)>);\n@@ -490,1 +489,1 @@\n-  samples[9] = InputType::make(TypeIntPrototype<S, U>{{0, std::numeric_limits<S>::max()}, {U(0), U(-1)}, {U(0), U(0)}}, 0);\n+  samples[9] = InputType::make(TypeIntPrototype<S, U>{{S(0), std::numeric_limits<S>::max()}, {U(0), U(-1)}, {U(0), U(0)}}, 0);\n@@ -492,1 +491,1 @@\n-  samples[10] = InputType::make(TypeIntPrototype<S, U>{{std::numeric_limits<S>::min(), -1}, {U(0), U(-1)}, {U(0), U(0)}}, 0);\n+  samples[10] = InputType::make(TypeIntPrototype<S, U>{{std::numeric_limits<S>::min(), S(-1)}, {U(0), U(-1)}, {U(0), U(0)}}, 0);\n@@ -513,2 +512,2 @@\n-    zeros ^= common;\n-    ones ^= common;\n+    zeros = zeros ^ common;\n+    ones = ones ^ common;\n@@ -541,0 +540,3 @@\n+  test_binary_random<TypeIntMirror<intn_t<4>, uintn_t<4>>>(Operation<uintn_t<4>>(), Inference<TypeIntMirror<intn_t<4>, uintn_t<4>>>());\n+  test_binary_random<TypeIntMirror<intn_t<5>, uintn_t<5>>>(Operation<uintn_t<5>>(), Inference<TypeIntMirror<intn_t<5>, uintn_t<5>>>());\n+  test_binary_random<TypeIntMirror<intn_t<6>, uintn_t<6>>>(Operation<uintn_t<6>>(), Inference<TypeIntMirror<intn_t<6>, uintn_t<6>>>());\n","filename":"test\/hotspot\/gtest\/opto\/test_rangeinference.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}