{"files":[{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"jfr\/recorder\/stacktrace\/jfrVframeStream.inline.hpp\"\n-#include \"runtime\/javaThread.inline.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"runtime\/stackWatermarkSet.inline.hpp\"\n-\n-static inline RegisterMap::WalkContinuation walk_continuation(JavaThread* jt) {\n-  \/\/ NOTE: WalkContinuation::skip, because of interactions with ZGC relocation\n-  \/\/       and load barriers. This code is run while generating stack traces for\n-  \/\/       the ZPage allocation event, even when ZGC is relocating  objects.\n-  \/\/       When ZGC is relocating, it is forbidden to run code that performs\n-  \/\/       load barriers. With WalkContinuation::include, we visit heap stack\n-  \/\/       chunks and could be using load barriers.\n-  \/\/\n-  \/\/ NOTE: Shenandoah GC also seems to require this check - actual details as to why\n-  \/\/       is unknown but to be filled in by others.\n-  return ((UseZGC || UseShenandoahGC) && !StackWatermarkSet::processing_started(jt))\n-    ? RegisterMap::WalkContinuation::skip\n-    : RegisterMap::WalkContinuation::include;\n-}\n-\n-JfrVframeStream::JfrVframeStream(JavaThread* jt, const frame& fr, bool in_continuation, bool stop_at_java_call_stub) :\n-  vframeStreamCommon(jt, RegisterMap::UpdateMap::skip, RegisterMap::ProcessFrames::skip, walk_continuation(jt)),\n-  _vthread(in_continuation), _cont_entry(_vthread ? jt->last_continuation() : nullptr) {\n-  assert(!_vthread || JfrThreadLocal::is_vthread(jt), \"invariant\");\n-  assert(!_vthread || _cont_entry != nullptr, \"invariant\");\n-  _frame = fr;\n-  _stop_at_java_call_stub = stop_at_java_call_stub;\n-  while (!fill_from_frame()) {\n-    _frame = _frame.sender(&_reg_map);\n-  }\n-}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrVframeStream.cpp","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -33,2 +33,1 @@\n-  const ContinuationEntry* _cont_entry;\n-  void step_to_sender();\n+\n@@ -36,0 +35,1 @@\n+  static RegisterMap::WalkContinuation walk_continuation(JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrVframeStream.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -30,0 +31,3 @@\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/registerMap.hpp\"\n+#include \"runtime\/stackWatermarkSet.inline.hpp\"\n@@ -32,0 +36,30 @@\n+inline RegisterMap::WalkContinuation JfrVframeStream::walk_continuation(JavaThread* jt) {\n+  \/\/ NOTE: WalkContinuation::skip, because of interactions with ZGC relocation\n+  \/\/       and load barriers. This code is run while generating stack traces for\n+  \/\/       the ZPage allocation event, even when ZGC is relocating  objects.\n+  \/\/       When ZGC is relocating, it is forbidden to run code that performs\n+  \/\/       load barriers. With WalkContinuation::include, we visit heap stack\n+  \/\/       chunks and could be using load barriers.\n+  \/\/\n+  \/\/ NOTE: Shenandoah GC also seems to require this check - actual details as to why\n+  \/\/       is unknown but to be filled in by others.\n+  return ((UseZGC || UseShenandoahGC) && !StackWatermarkSet::processing_started(jt))\n+    ? RegisterMap::WalkContinuation::skip\n+    : RegisterMap::WalkContinuation::include;\n+}\n+\n+inline JfrVframeStream::JfrVframeStream(JavaThread* jt, const frame& fr, bool in_continuation, bool stop_at_java_call_stub) :\n+  vframeStreamCommon(jt, RegisterMap::UpdateMap::skip, RegisterMap::ProcessFrames::skip, walk_continuation(jt)),\n+  _vthread(in_continuation) {\n+  assert(!_vthread || JfrThreadLocal::is_vthread(jt), \"invariant\");\n+  if (in_continuation) {\n+    _cont_entry = jt->last_continuation();\n+    assert(_cont_entry != nullptr, \"invariant\");\n+  }\n+  _frame = fr;\n+  _stop_at_java_call_stub = stop_at_java_call_stub;\n+  while (!fill_from_frame()) {\n+    _frame = _frame.sender(&_reg_map);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrVframeStream.inline.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}