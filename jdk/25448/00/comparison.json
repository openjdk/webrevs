{"files":[{"patch":"@@ -450,1 +450,1 @@\n-  void set_next_call(Block* block, Node* n, VectorSet& next_call);\n+  void set_next_call(const Block* block, Node* n, VectorSet& next_call) const;\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -798,7 +798,13 @@\n-void PhaseCFG::set_next_call(Block* block, Node* n, VectorSet& next_call) {\n-  if( next_call.test_set(n->_idx) ) return;\n-  for( uint i=0; i<n->len(); i++ ) {\n-    Node *m = n->in(i);\n-    if( !m ) continue;  \/\/ must see all nodes in block that precede call\n-    if (get_block_for_node(m) == block) {\n-      set_next_call(block, m, next_call);\n+void PhaseCFG::set_next_call(const Block* block, Node* init, VectorSet& next_call) const {\n+  Node_List worklist;\n+  worklist.push(init);\n+\n+  while (worklist.size() > 0) {\n+    Node* n = worklist.pop();\n+    if (next_call.test_set(n->_idx)) continue;\n+    for (uint i=0; i < n->len(); i++) {\n+      Node* m = n->in(i);\n+      if(m == nullptr) continue;  \/\/ must see all nodes in block that precede call\n+      if (get_block_for_node(m) == block) {\n+        worklist.push(m);\n+      }\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8324837\n+ * @summary Triggered a stack overflow in PhaseCFG::set_next_call. The graph is legitimately big (mostly deep and not wide)\n+ *          which makes the old version of PhaseCFG::set_next_call crash.\n+ *\n+ * @run main\/othervm -Xcomp -XX:LoopUnrollLimit=8192 -XX:CompileCommand=compileonly,StackOverflowInSetNextCall::test StackOverflowInSetNextCall\n+ * @run main StackOverflowInSetNextCall\n+ *\n+ *\/\n+\n+import java.util.Arrays;\n+\n+public class StackOverflowInSetNextCall {\n+    public static Double d;\n+\n+    static Long[] arr = new Long[500];\n+\n+    public static double test() {\n+        long x = 0;\n+        for (int i = 0; i < 100; i++) {\n+            for (int j = 0; j < 100; j++) {\n+                if (!Arrays.equals(arr, arr)) {\n+                    for (int k = 0; k < 100; k++) {\n+                        for (int l = 0; l < 100; ++l) {\n+                            x -= (j - k) * x;\n+                            for (int m = 0; m < 100; m++) {\n+                                x += x;\n+                                x += x - (x - arr[i]);\n+                            }\n+                        }\n+                        d = 0.0d;\n+                    }\n+                }\n+            }\n+        }\n+        return x;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 400; ++i) {\n+            test ();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/StackOverflowInSetNextCall.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}