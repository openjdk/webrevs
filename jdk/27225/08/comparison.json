{"files":[{"patch":"@@ -1671,0 +1671,28 @@\n+Node* PhaseIdealLoop::find_last_store_in_outer_loop(Node* store, const IdealLoopTree* outer_loop) {\n+  assert(store != nullptr && store->is_Store(), \"starting point should be a store node\");\n+  Node* last = store;\n+  \/\/ Follow the memory uses until we get out of the loop.\n+  \/\/ Store nodes in the outer loop body were moved by PhaseIdealLoop::try_move_store_after_loop.\n+  \/\/ Because of the conditions in try_move_store_after_loop (no other usage in the loop body\n+  \/\/ except for the phi node associated with the loop head), we have the guarantee of a\n+  \/\/ linear memory subgraph within the outer loop body.\n+  while (true) {\n+    Node* unique_next = nullptr;\n+    for (DUIterator_Fast imax, l = last->fast_outs(imax); l < imax; l++) {\n+      Node* use = last->fast_out(l);\n+      if (use->is_Store() && use->in(MemNode::Memory) == last) {\n+        IdealLoopTree* use_loop = get_loop(get_ctrl(use));\n+        if (outer_loop->is_member(use_loop)) {\n+          assert(unique_next == nullptr, \"memory node should only have one usage in the loop body\");\n+          unique_next = use;\n+        }\n+      }\n+    }\n+    if (unique_next == nullptr) {\n+      break;\n+    }\n+    last = unique_next;\n+  }\n+  return last;\n+}\n+\n@@ -1761,0 +1789,21 @@\n+  \/\/ Store nodes that were moved to the outer loop by PhaseIdealLoop::try_move_store_after_loop\n+  \/\/ do not have an associated Phi node. Such nodes are attached to the false projection of the CountedLoopEnd node,\n+  \/\/ right after the execution of the inner CountedLoop.\n+  \/\/ We have to make sure that such stores in the post loop have the right memory inputs from the main loop\n+  \/\/ The moved store node is always attached right after the inner loop exit, and just before the safepoint\n+  const Node* if_false = main_end->proj_out(false);\n+  for (DUIterator j = if_false->outs(); if_false->has_out(j); j++) {\n+    Node* store = if_false->out(j);\n+    if (store->is_Store()) {\n+      \/\/ We only make changes if the memory input of the store is outside the outer loop body,\n+      \/\/ as this is when we would normally expect a Phi as input. If the memory input\n+      \/\/ is in the loop body as well, then we can safely assume it is still correct as the entire\n+      \/\/ body was cloned as a unit\n+      IdealLoopTree* input_loop = get_loop(get_ctrl(store->in(MemNode::Memory)));\n+      if (!outer_loop->is_member(input_loop)) {\n+        Node* mem_out = find_last_store_in_outer_loop(store, outer_loop);\n+        Node* store_new = old_new[store->_idx];\n+        store_new->set_req(MemNode::Memory, mem_out);\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1383,0 +1383,3 @@\n+  \/\/ Find the last store in the body of an OuterStripMinedLoop when following memory uses\n+  Node *find_last_store_in_outer_loop(Node* store, const IdealLoopTree* outer_loop);\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8364757\n+ * @summary Moving Store nodes from the main CountedLoop to the OuterStripMinedLoop causes\n+ *          subsequent Store nodes to be eventually removed because of missing Phi nodes,\n+ *          leading to wrong results.\n+ *\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation\n+ *      -Xcomp -XX:-UseLoopPredicate -XX:-UseAutoVectorizationPredicate\n+ *      -XX:CompileCommand=compileonly,compiler.loopstripmining.MissingStoreAfterOuterStripMinedLoop::test*\n+ *      compiler.loopstripmining.MissingStoreAfterOuterStripMinedLoop\n+ * @run main compiler.loopstripmining.MissingStoreAfterOuterStripMinedLoop\n+ *\n+ *\/\n+\n+package compiler.loopstripmining;\n+\n+public class MissingStoreAfterOuterStripMinedLoop {\n+    public static int x = 0;\n+    public static int y = 0;\n+\n+    static class A {\n+        int field;\n+    }\n+\n+    \/\/ The store node in the loop body is moved to the OuterStripLoop.\n+    \/\/ When making the post loop the new store node\n+    \/\/ should have the moved store node as memory input, and not the\n+    \/\/ initial x = 0 store.\n+    \/\/\n+    \/\/ store (x = 0)\n+    \/\/  |\n+    \/\/ store (x += 1, exit of CountedLoop main)\n+    \/\/  | <-- additional rewiring due to absence of phi node\n+    \/\/ store (x += 1, exit of CountedLoop post)\n+    \/\/  |\n+    \/\/ store (x = 0)\n+    static public void test1() {\n+        x = 0;\n+        for (int i = 0; i < 20000; i++) {\n+            x += i;\n+        }\n+        x = 0;\n+    }\n+\n+    \/\/ Two independent stores\n+    \/\/ They should be wired independently in the post loop, no aliasing\n+    static public void test2() {\n+        x = 0;\n+        y = 0;\n+        for (int i = 0; i < 20000; i++) {\n+            x += i;\n+            y += i;\n+        }\n+        x = 0;\n+        y = 0;\n+    }\n+\n+    \/\/ Chain of stores with potential aliasing.\n+    \/\/ The entire chain is moved to the OuterStripLoop, between the\n+    \/\/ inner loop exit and the safepoint.\n+    \/\/ The chain should be preserved when cloning the main loop body\n+    \/\/ to create the post loop. Only the first store of the post loop\n+    \/\/ should be rewired to have the last store of the main loop\n+    \/\/ as memory input.\n+    \/\/\n+    \/\/ ...\n+    \/\/  |\n+    \/\/ store (a1.field = v, exit of CountedLoop main)\n+    \/\/  |\n+    \/\/ store (a2.field = v, exit of CountedLoop main)\n+    \/\/  |\n+    \/\/ store (a3.field = v, exit of CountedLoop main)\n+    \/\/  | <-- only additional rewiring needed\n+    \/\/ store (a1.field = v, exit of CountedLoop post)\n+    \/\/  |\n+    \/\/ store (a2.field = v, exit of CountedLoop post)\n+    \/\/  |\n+    \/\/ store (a3.field = v, exit of CountedLoop post)\n+    static public void test3(A a1, A a2, A a3) {\n+        a1.field = 0;\n+        a2.field = 0;\n+        a3.field = 0;\n+        int v = 0;\n+        for (int i = 0; i < 20000; i++) {\n+            v++;\n+            a1.field = v;\n+            a2.field = v;\n+            a3.field = v;\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        A a1 = new A();\n+        A a2 = new A();\n+        A a3 = new A();\n+\n+        test1();\n+        if (x != 0) {\n+            throw new RuntimeException(\"unexpected value: \" + x);\n+        }\n+\n+        test2();\n+        if (x != 0 || y != 0) {\n+            throw new RuntimeException(\"unexpected value: \" + x + \" \" + y);\n+        }\n+\n+        test3(a1, a2, a3);\n+        if (a1.field != 20000 || a2.field != 20000 || a3.field != 20000) {\n+            throw new RuntimeException(\"unexpected value: \" + a1.field + \" \" + a2.field + \" \" + a3.field);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/MissingStoreAfterOuterStripMinedLoop.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}