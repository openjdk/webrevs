{"files":[{"patch":"@@ -1671,1 +1671,1 @@\n-Node* PhaseIdealLoop::find_mem_out_outer_strip_mined(Node* store, IdealLoopTree* outer_loop) {\n+Node* PhaseIdealLoop::find_last_store_in_outer_loop(Node* store, IdealLoopTree* outer_loop) {\n@@ -1673,1 +1673,5 @@\n-  \/\/ Follow the memory uses until we get out of the loop\n+  \/\/ Follow the memory uses until we get out of the loop.\n+  \/\/ Store nodes in the outer loop body were moved by PhaseIdealLoop::try_move_store_after_loop.\n+  \/\/ Because of the conditions in try_move_store_after_loop (no other usage in the loop body\n+  \/\/ except for the phi node associated with the loop head), we have the guarantee of a\n+  \/\/ linear memory subgraph within the outer loop body.\n@@ -1796,2 +1800,3 @@\n-    if (store && !outer_loop->is_member(get_loop(get_ctrl(store->in(MemNode::Memory))))) {\n-      Node* mem_out = find_mem_out_outer_strip_mined(store, outer_loop);\n+    IdealLoopTree* input_loop = get_loop(get_ctrl(store->in(MemNode::Memory)));\n+    if (store != nullptr && !outer_loop->is_member(input_loop)) {\n+      Node* mem_out = find_last_store_in_outer_loop(store, outer_loop);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1383,2 +1383,2 @@\n-  \/\/ Find the last memory node in the loop when following memory usages\n-  Node *find_mem_out_outer_strip_mined(Node* store, IdealLoopTree* outer_loop);\n+  \/\/ Find the last store in the body of an OuterStripMinedLoop when following memory uses\n+  Node *find_last_store_in_outer_loop(Node* store, IdealLoopTree* outer_loop);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}