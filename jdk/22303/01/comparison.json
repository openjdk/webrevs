{"files":[{"patch":"@@ -390,8 +390,3 @@\n-     * <p> Care should be taken to ensure that a connected datagram socket\n-     * is not shared with untrusted code. When a socket is connected,\n-     * {@link #receive receive} and {@link #send send} <b>will not perform\n-     * any security checks<\/b> on incoming and outgoing packets, other than\n-     * matching the packet's and the socket's address and port. On a send\n-     * operation, if the packet's address is set and the packet's address\n-     * and the socket's address do not match, an {@code IllegalArgumentException}\n-     * will be thrown. A socket connected to a multicast address may only\n+     * <p> When the socket is connected, the send method checks that the\n+     * packet's address matches the remote address that the socket is\n+     * connected to. A socket connected to a multicast address may only\n@@ -1090,5 +1085,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSetFactory();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/DatagramSocket.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.nio.channels.DatagramChannel;\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -113,10 +110,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            if (address.isMulticastAddress()) {\n-                security.checkMulticast(address);\n-            } else {\n-                security.checkConnect(address.getHostAddress(), port);\n-                security.checkAccept(address.getHostAddress(), port);\n-            }\n-        }\n@@ -184,5 +171,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-        if (sec != null) {\n-            sec.checkListen(port);\n-        }\n+\n@@ -292,16 +275,1 @@\n-                \/\/ check the address is ok with the security manager on every send.\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager security = System.getSecurityManager();\n-\n-                \/\/ The reason you want to synchronize on datagram packet\n-                \/\/ is because you don't want an applet to change the address\n-                \/\/ while you are trying to send the packet for example\n-                \/\/ after the security check but before the send.\n-                if (security != null) {\n-                    if (packetAddress.isMulticastAddress()) {\n-                        security.checkMulticast(packetAddress);\n-                    } else {\n-                        security.checkConnect(packetAddress.getHostAddress(),\n-                                packetPort);\n-                    }\n-                }\n+\n@@ -336,33 +304,0 @@\n-            if (connectState == ST_NOT_CONNECTED) {\n-                \/\/ check the address is ok with the security manager before every recv.\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager security = System.getSecurityManager();\n-                if (security != null) {\n-                    while (true) {\n-                        int peekPort = 0;\n-                        \/\/ peek at the packet to see who it is from.\n-                        DatagramPacket peekPacket = new DatagramPacket(new byte[1], 1);\n-                        peekPort = getImpl().peekData(peekPacket);\n-                        String peekAd = peekPacket.getAddress().getHostAddress();\n-                        try {\n-                            security.checkAccept(peekAd, peekPort);\n-                            \/\/ security check succeeded - so now break\n-                            \/\/ and recv the packet.\n-                            break;\n-                        } catch (SecurityException se) {\n-                            \/\/ Throw away the offending packet by consuming\n-                            \/\/ it in a tmp buffer.\n-                            DatagramPacket tmp = new DatagramPacket(new byte[1], 1);\n-                            getImpl().receive(tmp);\n-\n-                            \/\/ silently discard the offending packet\n-                            \/\/ and continue: unknown\/malicious\n-                            \/\/ entities on nets should not make\n-                            \/\/ runtime throw security exception and\n-                            \/\/ disrupt the applet by sending random\n-                            \/\/ datagram packets.\n-                            continue;\n-                        }\n-                    } \/\/ end of while\n-                }\n-            }\n@@ -370,0 +305,4 @@\n+            \/\/ explicitFilter may be set to 'true' at connect() time and will\n+            \/\/ be set to 'false' in disconnect() - or when there's no more\n+            \/\/ pending packets to filter. If explicitFilter is true,\n+            \/\/ it means we're connected.\n@@ -371,0 +310,1 @@\n+                assert connectState == ST_CONNECTED;\n@@ -397,2 +337,1 @@\n-            \/\/ If the security check succeeds, or the datagram is\n-            \/\/ connected then receive the packet\n+            \/\/ receive the packet\n@@ -426,5 +365,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager s = System.getSecurityManager();\n-            if (s != null) {\n-                s.checkConnect(in.getHostAddress(), -1);\n-            }\n@@ -694,5 +628,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkMulticast(mcastaddr);\n-        }\n@@ -725,5 +654,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkMulticast(mcastaddr);\n-        }\n@@ -748,5 +672,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkMulticast(addr.getAddress());\n-        }\n@@ -771,5 +690,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkMulticast(addr.getAddress());\n-        }\n@@ -896,1 +810,1 @@\n-                if (connectState == NetMulticastSocket.ST_NOT_CONNECTED) {\n+                if (connectState == ST_NOT_CONNECTED) {\n@@ -900,12 +814,0 @@\n-                    \/\/ Security manager makes sure that the multicast address\n-                    \/\/ is allowed one and that the ttl used is less\n-                    \/\/ than the allowed maxttl.\n-                    SecurityManager security = System.getSecurityManager();\n-                    if (security != null) {\n-                        if (packetAddress.isMulticastAddress()) {\n-                            security.checkMulticast(packetAddress, ttl);\n-                        } else {\n-                            security.checkConnect(packetAddress.getHostAddress(),\n-                                    p.getPort());\n-                        }\n-                    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/NetMulticastSocket.java","additions":9,"deletions":107,"binary":false,"changes":116,"status":"modified"}]}