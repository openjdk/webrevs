{"files":[{"patch":"@@ -238,3 +238,0 @@\n-        \/\/ If there are more bytes available in \"in\" or\n-        \/\/ the leftover in the \"inf\" is > 26 bytes:\n-        \/\/ this.trailer(8) + next.header.min(10) + next.trailer(8)\n@@ -242,11 +239,5 @@\n-        if (this.in.available() > 0 || n > 26) {\n-            int m = 8;                  \/\/ this.trailer\n-            try {\n-                m += readHeader(in);    \/\/ next.header\n-            } catch (IOException ze) {\n-                return true;  \/\/ ignore any malformed, do nothing\n-            }\n-            inf.reset();\n-            if (n > m)\n-                inf.setInput(buf, len - n + m, n - m);\n-            return false;\n+        int m = 8;                  \/\/ this.trailer\n+        try {\n+            m += readHeader(in);    \/\/ next.header\n+        } catch (IOException ze) {\n+            return true;  \/\/ ignore any malformed, do nothing\n@@ -254,1 +245,4 @@\n-        return true;\n+        inf.reset();\n+        if (n > m)\n+            inf.setInput(buf, len - n + m, n - m);\n+        return false;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 7036144\n+ * @summary Test concatenated gz streams when available() returns zero\n+ * @run junit GZIPInputStreamAvailable\n+ *\/\n+\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.zip.*;\n+\n+public class GZIPInputStreamAvailable {\n+\n+    @Test\n+    public void testZeroAvailable() throws IOException {\n+\n+        \/\/ Create some compressed data\n+        ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+        try (GZIPOutputStream out = new GZIPOutputStream(buf)) {\n+            out.write(\"boo\".getBytes(\"ASCII\"));\n+        }\n+        byte[] gz = buf.toByteArray();\n+\n+        \/\/ Repeat to build a sequence of concatenated compressed streams\n+        buf.reset();\n+        for(int i = 0; i < 100; i++)\n+            buf.write(gz);\n+        final byte[] gz32 = buf.toByteArray();\n+\n+        \/\/ (a) Read it back from a stream where available() is accurate\n+        long count1 = countBytes(new GZIPInputStream(new ByteArrayInputStream(gz32)));\n+\n+        \/\/ (b) Read it back from a stream where available() always returns zero\n+        long count2 = countBytes(new GZIPInputStream(new ZeroAvailableInputStream(new ByteArrayInputStream(gz32))));\n+\n+        \/\/ They should be the same\n+        Assert.assertEquals(count2, count1);\n+    }\n+\n+    public long countBytes(InputStream in) throws IOException {\n+        long count = 0;\n+        while (in.read() != -1)\n+            count++;\n+        in.close();\n+        return count;\n+    }\n+\n+    public static class ZeroAvailableInputStream extends FilterInputStream {\n+        public ZeroAvailableInputStream(InputStream in) {\n+            super(in);\n+        }\n+        @Override\n+        public int available() throws IOException {\n+            return 0;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamAvailable.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}