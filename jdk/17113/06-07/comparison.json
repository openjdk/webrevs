{"files":[{"patch":"@@ -39,19 +39,0 @@\n- * <p>\n- * The GZIP compressed data format is self-delimiting, i.e., it includes an explicit trailer\n- * frame that marks the end of the compressed data. Therefore it's possible for the underlying\n- * input to contain additional data beyond the end of the GZIP data. If that occurs, this class\n- * will automatically attempt to continue by decoding a new GZIP-compressed data stream.\n- * In this way, decoding of concatenated GZIP-compressed data streams is supported by default.\n- *\n- * <p>\n- * However, this also means that if the underlying input contains non-GZIP data following\n- * one or more GZIP-compressed data streams, then this class will read some small portion of\n- * that non-GZIP data before finally discarding it and returning EOF; or, it may misinterpret\n- * that data as the start of a new, valid GZIP compressed data stream, before throwing an\n- * inevitable {@link ZipException} when that turns out not to be the case.\n- *\n- * <p>\n- * Therefore, even though the GZIP compressed data format is self-delimiting, when the GZIP\n- * compressed data is followed by non-GZIP data this class cannot be relied upon to stop\n- * reading from the underlying input stream precisely at the last byte of valid GZIP data.\n- *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"}]}