{"files":[{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -50,1 +50,1 @@\n-        byte[] compressed1 = gzip(uncompressed1);\n+        byte[] compressed1 = deflate(uncompressed1);\n@@ -53,2 +53,2 @@\n-        \/\/ (a) Read back copied compressed data from a stream where available() is accurate and verify\n-        byte[] readback1 = new GZIPInputStream(new ByteArrayInputStream(compressedN)).readAllBytes();\n+        \/\/ (a) Read back inflated data from a stream where available() is accurate and verify\n+        byte[] readback1 = inflate(new ByteArrayInputStream(compressedN));\n@@ -57,2 +57,2 @@\n-        \/\/ (b) Read back copied compressed data from a stream where available() always returns zero and verify\n-        byte[] readback2 = new GZIPInputStream(new ZeroAvailableStream(new ByteArrayInputStream(compressedN))).readAllBytes();\n+        \/\/ (b) Read back inflated data from a stream where available() always returns zero and verify\n+        byte[] readback2 = inflate(new ZeroAvailableStream(new ByteArrayInputStream(compressedN)));\n@@ -72,1 +72,1 @@\n-    public static byte[] gzip(byte[] data) throws IOException {\n+    public static byte[] deflate(byte[] data) throws IOException {\n@@ -80,0 +80,4 @@\n+    public static byte[] inflate(InputStream in) throws IOException {\n+        return new GZIPInputStream(in).readAllBytes();\n+    }\n+\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamAvailable.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}