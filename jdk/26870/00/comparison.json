{"files":[{"patch":"@@ -647,1 +647,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool);\n+(JNIEnv *env, jobject jcpool);\n@@ -650,1 +650,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -653,1 +653,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -656,1 +656,1 @@\n-(JNIEnv *env, jobject obj, jobject unused, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -659,1 +659,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -662,1 +662,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -665,1 +665,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -668,1 +668,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -671,1 +671,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -674,1 +674,1 @@\n-(JNIEnv *env, jobject obj, jobject unused, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -677,1 +677,1 @@\n-(JNIEnv *env, jobject obj, jobject unused, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -680,1 +680,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -683,1 +683,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -686,1 +686,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -689,1 +689,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -692,1 +692,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -695,1 +695,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n@@ -698,1 +698,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index);\n+(JNIEnv *env, jobject jcpool, jint index);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1930,1 +1930,1 @@\n-JVM_ENTRY(jint, JVM_ConstantPoolGetSize(JNIEnv *env, jobject obj, jobject unused))\n+JVM_ENTRY(jint, JVM_ConstantPoolGetSize(JNIEnv *env, jobject obj))\n@@ -1938,1 +1938,1 @@\n-JVM_ENTRY(jclass, JVM_ConstantPoolGetClassAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jclass, JVM_ConstantPoolGetClassAt(JNIEnv *env, jobject obj, jint index))\n@@ -1951,1 +1951,1 @@\n-JVM_ENTRY(jclass, JVM_ConstantPoolGetClassAtIfLoaded(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jclass, JVM_ConstantPoolGetClassAtIfLoaded(JNIEnv *env, jobject obj, jint index))\n@@ -1995,1 +1995,1 @@\n-JVM_ENTRY(jobject, JVM_ConstantPoolGetMethodAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jobject, JVM_ConstantPoolGetMethodAt(JNIEnv *env, jobject obj, jint index))\n@@ -2005,1 +2005,1 @@\n-JVM_ENTRY(jobject, JVM_ConstantPoolGetMethodAtIfLoaded(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jobject, JVM_ConstantPoolGetMethodAtIfLoaded(JNIEnv *env, jobject obj, jint index))\n@@ -2040,1 +2040,1 @@\n-JVM_ENTRY(jobject, JVM_ConstantPoolGetFieldAt(JNIEnv *env, jobject obj, jobject unusedl, jint index))\n+JVM_ENTRY(jobject, JVM_ConstantPoolGetFieldAt(JNIEnv *env, jobject obj, jint index))\n@@ -2050,1 +2050,1 @@\n-JVM_ENTRY(jobject, JVM_ConstantPoolGetFieldAtIfLoaded(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jobject, JVM_ConstantPoolGetFieldAtIfLoaded(JNIEnv *env, jobject obj, jint index))\n@@ -2060,1 +2060,1 @@\n-JVM_ENTRY(jobjectArray, JVM_ConstantPoolGetMemberRefInfoAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jobjectArray, JVM_ConstantPoolGetMemberRefInfoAt(JNIEnv *env, jobject obj, jint index))\n@@ -2085,1 +2085,1 @@\n-JVM_ENTRY(jint, JVM_ConstantPoolGetClassRefIndexAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jint, JVM_ConstantPoolGetClassRefIndexAt(JNIEnv *env, jobject obj, jint index))\n@@ -2098,1 +2098,1 @@\n-JVM_ENTRY(jint, JVM_ConstantPoolGetNameAndTypeRefIndexAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jint, JVM_ConstantPoolGetNameAndTypeRefIndexAt(JNIEnv *env, jobject obj, jint index))\n@@ -2111,1 +2111,1 @@\n-JVM_ENTRY(jobjectArray, JVM_ConstantPoolGetNameAndTypeRefInfoAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jobjectArray, JVM_ConstantPoolGetNameAndTypeRefInfoAt(JNIEnv *env, jobject obj, jint index))\n@@ -2132,1 +2132,1 @@\n-JVM_ENTRY(jint, JVM_ConstantPoolGetIntAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jint, JVM_ConstantPoolGetIntAt(JNIEnv *env, jobject obj, jint index))\n@@ -2144,1 +2144,1 @@\n-JVM_ENTRY(jlong, JVM_ConstantPoolGetLongAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jlong, JVM_ConstantPoolGetLongAt(JNIEnv *env, jobject obj, jint index))\n@@ -2156,1 +2156,1 @@\n-JVM_ENTRY(jfloat, JVM_ConstantPoolGetFloatAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jfloat, JVM_ConstantPoolGetFloatAt(JNIEnv *env, jobject obj, jint index))\n@@ -2168,1 +2168,1 @@\n-JVM_ENTRY(jdouble, JVM_ConstantPoolGetDoubleAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jdouble, JVM_ConstantPoolGetDoubleAt(JNIEnv *env, jobject obj, jint index))\n@@ -2180,1 +2180,1 @@\n-JVM_ENTRY(jstring, JVM_ConstantPoolGetStringAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jstring, JVM_ConstantPoolGetStringAt(JNIEnv *env, jobject obj, jint index))\n@@ -2193,1 +2193,1 @@\n-JVM_ENTRY(jstring, JVM_ConstantPoolGetUTF8At(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jstring, JVM_ConstantPoolGetUTF8At(JNIEnv *env, jobject obj, jint index))\n@@ -2208,1 +2208,1 @@\n-JVM_ENTRY(jbyte, JVM_ConstantPoolGetTagAt(JNIEnv *env, jobject obj, jobject unused, jint index))\n+JVM_ENTRY(jbyte, JVM_ConstantPoolGetTagAt(JNIEnv *env, jobject obj, jint index))\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,3 @@\n-  public int      getSize()                      { return getSize0            (constantPoolOop);        }\n-  public Class<?> getClassAt         (int index) { return getClassAt0         (constantPoolOop, index); }\n-  public Class<?> getClassAtIfLoaded (int index) { return getClassAtIfLoaded0 (constantPoolOop, index); }\n+  public int      getSize()                      { return getSize0            ();        }\n+  public Class<?> getClassAt         (int index) { return getClassAt0         (index); }\n+  public Class<?> getClassAtIfLoaded (int index) { return getClassAtIfLoaded0 (index); }\n@@ -42,1 +42,1 @@\n-      return getClassRefIndexAt0(constantPoolOop, index);\n+      return getClassRefIndexAt0(index);\n@@ -46,4 +46,4 @@\n-  public Member   getMethodAt        (int index) { return getMethodAt0        (constantPoolOop, index); }\n-  public Member   getMethodAtIfLoaded(int index) { return getMethodAtIfLoaded0(constantPoolOop, index); }\n-  public Field    getFieldAt         (int index) { return getFieldAt0         (constantPoolOop, index); }\n-  public Field    getFieldAtIfLoaded (int index) { return getFieldAtIfLoaded0 (constantPoolOop, index); }\n+  public Member   getMethodAt        (int index) { return getMethodAt0        (index); }\n+  public Member   getMethodAtIfLoaded(int index) { return getMethodAtIfLoaded0(index); }\n+  public Field    getFieldAt         (int index) { return getFieldAt0         (index); }\n+  public Field    getFieldAtIfLoaded (int index) { return getFieldAtIfLoaded0 (index); }\n@@ -52,1 +52,1 @@\n-  public String[] getMemberRefInfoAt (int index) { return getMemberRefInfoAt0 (constantPoolOop, index); }\n+  public String[] getMemberRefInfoAt (int index) { return getMemberRefInfoAt0 (index); }\n@@ -55,1 +55,1 @@\n-      return getNameAndTypeRefIndexAt0(constantPoolOop, index);\n+      return getNameAndTypeRefIndexAt0(index);\n@@ -59,1 +59,1 @@\n-      return getNameAndTypeRefInfoAt0(constantPoolOop, index);\n+      return getNameAndTypeRefInfoAt0(index);\n@@ -61,6 +61,6 @@\n-  public int      getIntAt           (int index) { return getIntAt0           (constantPoolOop, index); }\n-  public long     getLongAt          (int index) { return getLongAt0          (constantPoolOop, index); }\n-  public float    getFloatAt         (int index) { return getFloatAt0         (constantPoolOop, index); }\n-  public double   getDoubleAt        (int index) { return getDoubleAt0        (constantPoolOop, index); }\n-  public String   getStringAt        (int index) { return getStringAt0        (constantPoolOop, index); }\n-  public String   getUTF8At          (int index) { return getUTF8At0          (constantPoolOop, index); }\n+  public int      getIntAt           (int index) { return getIntAt0           (index); }\n+  public long     getLongAt          (int index) { return getLongAt0          (index); }\n+  public float    getFloatAt         (int index) { return getFloatAt0         (index); }\n+  public double   getDoubleAt        (int index) { return getDoubleAt0        (index); }\n+  public String   getStringAt        (int index) { return getStringAt0        (index); }\n+  public String   getUTF8At          (int index) { return getUTF8At0          (index); }\n@@ -68,1 +68,1 @@\n-      return Tag.valueOf(getTagAt0(constantPoolOop, index));\n+      return Tag.valueOf(getTagAt0(index));\n@@ -71,1 +71,1 @@\n-  public static enum Tag {\n+  public enum Tag {\n@@ -85,0 +85,1 @@\n+      DYNAMIC(17),\n@@ -86,0 +87,1 @@\n+      \/\/ For index after long\/double and 0\n@@ -114,18 +116,18 @@\n-  private native int      getSize0            (Object constantPoolOop);\n-  private native Class<?> getClassAt0         (Object constantPoolOop, int index);\n-  private native Class<?> getClassAtIfLoaded0 (Object constantPoolOop, int index);\n-  private native int      getClassRefIndexAt0 (Object constantPoolOop, int index);\n-  private native Member   getMethodAt0        (Object constantPoolOop, int index);\n-  private native Member   getMethodAtIfLoaded0(Object constantPoolOop, int index);\n-  private native Field    getFieldAt0         (Object constantPoolOop, int index);\n-  private native Field    getFieldAtIfLoaded0 (Object constantPoolOop, int index);\n-  private native String[] getMemberRefInfoAt0 (Object constantPoolOop, int index);\n-  private native int      getNameAndTypeRefIndexAt0(Object constantPoolOop, int index);\n-  private native String[] getNameAndTypeRefInfoAt0(Object constantPoolOop, int index);\n-  private native int      getIntAt0           (Object constantPoolOop, int index);\n-  private native long     getLongAt0          (Object constantPoolOop, int index);\n-  private native float    getFloatAt0         (Object constantPoolOop, int index);\n-  private native double   getDoubleAt0        (Object constantPoolOop, int index);\n-  private native String   getStringAt0        (Object constantPoolOop, int index);\n-  private native String   getUTF8At0          (Object constantPoolOop, int index);\n-  private native byte     getTagAt0           (Object constantPoolOop, int index);\n+  private native int      getSize0            ();\n+  private native Class<?> getClassAt0         (int index);\n+  private native Class<?> getClassAtIfLoaded0 (int index);\n+  private native int      getClassRefIndexAt0 (int index);\n+  private native Member   getMethodAt0        (int index);\n+  private native Member   getMethodAtIfLoaded0(int index);\n+  private native Field    getFieldAt0         (int index);\n+  private native Field    getFieldAtIfLoaded0 (int index);\n+  private native String[] getMemberRefInfoAt0 (int index);\n+  private native int      getNameAndTypeRefIndexAt0(int index);\n+  private native String[] getNameAndTypeRefInfoAt0(int index);\n+  private native int      getIntAt0           (int index);\n+  private native long     getLongAt0          (int index);\n+  private native float    getFloatAt0         (int index);\n+  private native double   getDoubleAt0        (int index);\n+  private native String   getStringAt0        (int index);\n+  private native String   getUTF8At0          (int index);\n+  private native byte     getTagAt0           (int index);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ConstantPool.java","additions":40,"deletions":38,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool)\n+(JNIEnv *env, jobject jcpool)\n@@ -32,1 +32,1 @@\n-  return JVM_ConstantPoolGetSize(env, unused, jcpool);\n+  return JVM_ConstantPoolGetSize(env, jcpool);\n@@ -36,1 +36,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -38,1 +38,1 @@\n-  return JVM_ConstantPoolGetClassAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetClassAt(env, jcpool, index);\n@@ -42,1 +42,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -44,1 +44,1 @@\n-  return JVM_ConstantPoolGetClassAtIfLoaded(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetClassAtIfLoaded(env, jcpool, index);\n@@ -48,1 +48,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -50,1 +50,1 @@\n-    return JVM_ConstantPoolGetClassRefIndexAt(env, unused, jcpool, index);\n+    return JVM_ConstantPoolGetClassRefIndexAt(env, jcpool, index);\n@@ -54,1 +54,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -56,1 +56,1 @@\n-  return JVM_ConstantPoolGetMethodAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetMethodAt(env, jcpool, index);\n@@ -60,1 +60,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -62,1 +62,1 @@\n-  return JVM_ConstantPoolGetMethodAtIfLoaded(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetMethodAtIfLoaded(env, jcpool, index);\n@@ -66,1 +66,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -68,1 +68,1 @@\n-  return JVM_ConstantPoolGetFieldAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetFieldAt(env, jcpool, index);\n@@ -72,1 +72,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -74,1 +74,1 @@\n-  return JVM_ConstantPoolGetFieldAtIfLoaded(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetFieldAtIfLoaded(env, jcpool, index);\n@@ -78,1 +78,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -80,1 +80,1 @@\n-  return JVM_ConstantPoolGetMemberRefInfoAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetMemberRefInfoAt(env, jcpool, index);\n@@ -84,1 +84,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -86,1 +86,1 @@\n-    return JVM_ConstantPoolGetNameAndTypeRefIndexAt(env, unused, jcpool, index);\n+    return JVM_ConstantPoolGetNameAndTypeRefIndexAt(env, jcpool, index);\n@@ -90,1 +90,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -92,1 +92,1 @@\n-  return JVM_ConstantPoolGetNameAndTypeRefInfoAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetNameAndTypeRefInfoAt(env, jcpool, index);\n@@ -96,1 +96,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -98,1 +98,1 @@\n-  return JVM_ConstantPoolGetIntAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetIntAt(env, jcpool, index);\n@@ -102,1 +102,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -104,1 +104,1 @@\n-  return JVM_ConstantPoolGetLongAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetLongAt(env, jcpool, index);\n@@ -108,1 +108,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -110,1 +110,1 @@\n-  return JVM_ConstantPoolGetFloatAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetFloatAt(env, jcpool, index);\n@@ -114,1 +114,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -116,1 +116,1 @@\n-  return JVM_ConstantPoolGetDoubleAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetDoubleAt(env, jcpool, index);\n@@ -120,1 +120,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -122,1 +122,1 @@\n-  return JVM_ConstantPoolGetStringAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetStringAt(env, jcpool, index);\n@@ -126,1 +126,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -128,1 +128,1 @@\n-  return JVM_ConstantPoolGetUTF8At(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetUTF8At(env, jcpool, index);\n@@ -132,1 +132,1 @@\n-(JNIEnv *env, jobject unused, jobject jcpool, jint index)\n+(JNIEnv *env, jobject jcpool, jint index)\n@@ -134,1 +134,1 @@\n-  return JVM_ConstantPoolGetTagAt(env, unused, jcpool, index);\n+  return JVM_ConstantPoolGetTagAt(env, jcpool, index);\n","filename":"src\/java.base\/share\/native\/libjava\/ConstantPool.c","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,2 @@\n- * @run main jdk.internal.reflect.constantPool.ConstantPoolTest\n+ * @compile ConstantPoolTest.java\n+ * @run junit ConstantPoolTest\n@@ -35,2 +36,1 @@\n-package jdk.internal.reflect.constantPool;\n-\n+import java.lang.classfile.ClassFile;\n@@ -42,0 +42,5 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,3 +54,11 @@\n-    public static void main(String[] s) {\n-        for (TestCase testCase : TestCase.values()) {\n-            testCase.test();\n+    @ParameterizedTest\n+    @EnumSource(TestCase.class)\n+    void runTestCases(TestCase testCase) {\n+        testCase.test();\n+    }\n+\n+    @Test\n+    void testSize() throws Throwable {\n+        byte[] data;\n+        try (var in = ConstantPoolTest.class.getResourceAsStream(\"\/ConstantPoolTestDummy.class\")) {\n+            data = in.readAllBytes();\n@@ -53,0 +66,2 @@\n+        var testClass = ClassFile.of().parse(data);\n+        assertEquals(testClass.constantPool().size(), CP.getSize());\n@@ -55,1 +70,1 @@\n-    public static enum TestCase {\n+    public enum TestCase {\n","filename":"test\/jdk\/jdk\/internal\/reflect\/constantPool\/ConstantPoolTest.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-package  jdk\/internal\/reflect\/constantPool;\n-\n@@ -44,1 +42,1 @@\n-const #11 = Asciz   \"jdk\/internal\/reflect\/constantPool\/ConstantPoolTestDummy\";\n+const #11 = Asciz   \"ConstantPoolTestDummy\";\n@@ -79,1 +77,1 @@\n-const #48 = Field    #2.#49;    \/\/  jdk\/internal\/reflect\/constantPool\/ConstantPoolTestDummy.myField:\"I\"\n+const #48 = Field    #2.#49;    \/\/  ConstantPoolTestDummy.myField:\"I\"\n","filename":"test\/jdk\/jdk\/internal\/reflect\/constantPool\/ConstantPoolTestDummy.jasm","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}