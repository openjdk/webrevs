{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1273,1 +1273,1 @@\n-    res = gvn.transform(CMoveNode::make(nullptr, bol, a, b, t));\n+    res = gvn.transform(CMoveNode::make(bol, a, b, t));\n@@ -1302,1 +1302,1 @@\n-  Node* res = gvn.transform(CMoveNode::make(nullptr, bol, sub, zero, t));\n+  Node* res = gvn.transform(CMoveNode::make(bol, sub, zero, t));\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2143,12 +2143,12 @@\n-  case vmIntrinsics::_numberOfLeadingZeros_i:   n = new CountLeadingZerosINode( arg);  break;\n-  case vmIntrinsics::_numberOfLeadingZeros_l:   n = new CountLeadingZerosLNode( arg);  break;\n-  case vmIntrinsics::_numberOfTrailingZeros_i:  n = new CountTrailingZerosINode(arg);  break;\n-  case vmIntrinsics::_numberOfTrailingZeros_l:  n = new CountTrailingZerosLNode(arg);  break;\n-  case vmIntrinsics::_bitCount_i:               n = new PopCountINode(          arg);  break;\n-  case vmIntrinsics::_bitCount_l:               n = new PopCountLNode(          arg);  break;\n-  case vmIntrinsics::_reverseBytes_c:           n = new ReverseBytesUSNode(nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_s:           n = new ReverseBytesSNode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_i:           n = new ReverseBytesINode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverseBytes_l:           n = new ReverseBytesLNode( nullptr, arg);  break;\n-  case vmIntrinsics::_reverse_i:                n = new ReverseINode(nullptr, arg); break;\n-  case vmIntrinsics::_reverse_l:                n = new ReverseLNode(nullptr, arg); break;\n+  case vmIntrinsics::_numberOfLeadingZeros_i:   n = new CountLeadingZerosINode( arg); break;\n+  case vmIntrinsics::_numberOfLeadingZeros_l:   n = new CountLeadingZerosLNode( arg); break;\n+  case vmIntrinsics::_numberOfTrailingZeros_i:  n = new CountTrailingZerosINode(arg); break;\n+  case vmIntrinsics::_numberOfTrailingZeros_l:  n = new CountTrailingZerosLNode(arg); break;\n+  case vmIntrinsics::_bitCount_i:               n = new PopCountINode(          arg); break;\n+  case vmIntrinsics::_bitCount_l:               n = new PopCountLNode(          arg); break;\n+  case vmIntrinsics::_reverseBytes_c:           n = new ReverseBytesUSNode(     arg); break;\n+  case vmIntrinsics::_reverseBytes_s:           n = new ReverseBytesSNode(      arg); break;\n+  case vmIntrinsics::_reverseBytes_i:           n = new ReverseBytesINode(      arg); break;\n+  case vmIntrinsics::_reverseBytes_l:           n = new ReverseBytesLNode(      arg); break;\n+  case vmIntrinsics::_reverse_i:                n = new ReverseINode(           arg); break;\n+  case vmIntrinsics::_reverse_l:                n = new ReverseLNode(           arg); break;\n@@ -8267,1 +8267,1 @@\n-    result = _gvn.transform(new FmaDNode(control(), a, b, c));\n+    result = _gvn.transform(new FmaDNode(a, b, c));\n@@ -8274,1 +8274,1 @@\n-    result = _gvn.transform(new FmaFNode(control(), a, b, c));\n+    result = _gvn.transform(new FmaFNode(a, b, c));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -860,3 +860,3 @@\n-    Node *cmov = CMoveNode::make(cmov_ctrl, iff->in(1), phi->in(1+flip), phi->in(2-flip), _igvn.type(phi));\n-    register_new_node( cmov, cmov_ctrl );\n-    _igvn.replace_node( phi, cmov );\n+    Node* cmov = CMoveNode::make(iff->in(1), phi->in(1+flip), phi->in(2-flip), _igvn.type(phi));\n+    register_new_node(cmov, cmov_ctrl);\n+    _igvn.replace_node(phi, cmov);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-    return make(in(Control), phase->transform(b), in(IfTrue), in(IfFalse), _type);\n+    return make(phase->transform(b), in(IfTrue), in(IfFalse), _type);\n@@ -189,1 +189,1 @@\n-CMoveNode *CMoveNode::make(Node *c, Node *bol, Node *left, Node *right, const Type *t) {\n+CMoveNode* CMoveNode::make(Node* bol, Node* left, Node* right, const Type* t) {\n@@ -191,7 +191,7 @@\n-    case T_INT:     return new CMoveINode( bol, left, right, t->is_int() );\n-    case T_FLOAT:   return new CMoveFNode( bol, left, right, t );\n-    case T_DOUBLE:  return new CMoveDNode( bol, left, right, t );\n-    case T_LONG:    return new CMoveLNode( bol, left, right, t->is_long() );\n-    case T_OBJECT:  return new CMovePNode( c, bol, left, right, t->is_oopptr() );\n-    case T_ADDRESS: return new CMovePNode( c, bol, left, right, t->is_ptr() );\n-    case T_NARROWOOP: return new CMoveNNode( c, bol, left, right, t );\n+    case T_INT:     return new CMoveINode(bol, left, right, t->is_int());\n+    case T_FLOAT:   return new CMoveFNode(bol, left, right, t);\n+    case T_DOUBLE:  return new CMoveDNode(bol, left, right, t);\n+    case T_LONG:    return new CMoveLNode(bol, left, right, t->is_long());\n+    case T_OBJECT:  return new CMovePNode(bol, left, right, t->is_oopptr());\n+    case T_ADDRESS: return new CMovePNode(bol, left, right, t->is_ptr());\n+    case T_NARROWOOP: return new CMoveNNode(bol, left, right, t);\n@@ -281,1 +281,1 @@\n-      return make(in(Control), phase->transform(b2), in(IfTrue), in(IfFalse), _type);\n+      return make(phase->transform(b2), in(IfTrue), in(IfFalse), _type);\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  static CMoveNode *make(Node *c, Node *bol, Node *left, Node *right, const Type *t);\n+  static CMoveNode* make(Node* bol, Node* left, Node* right, const Type* t);\n@@ -90,1 +90,1 @@\n-  CMovePNode( Node *c, Node *bol, Node *left, Node *right, const TypePtr* t ) : CMoveNode(bol,left,right,t) { init_req(Control,c); }\n+  CMovePNode(Node* bol, Node* left, Node* right, const TypePtr* t) : CMoveNode(bol, left, right, t) {}\n@@ -97,1 +97,1 @@\n-  CMoveNNode( Node *c, Node *bol, Node *left, Node *right, const Type* t ) : CMoveNode(bol,left,right,t) { init_req(Control,c); }\n+  CMoveNNode(Node* bol, Node* left, Node* right, const Type* t ) : CMoveNode(bol, left, right, t) {}\n","filename":"src\/hotspot\/share\/opto\/movenode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,1 +391,1 @@\n-  FmaNode(Node* c, Node* in1, Node* in2, Node* in3) : Node(c, in1, in2, in3) {\n+  FmaNode(Node* in1, Node* in2, Node* in3) : Node(nullptr, in1, in2, in3) {\n@@ -401,1 +401,1 @@\n-  FmaDNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n+  FmaDNode(Node* in1, Node* in2, Node* in3) : FmaNode(in1, in2, in3) {}\n@@ -412,1 +412,1 @@\n-  FmaFNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n+  FmaFNode(Node* in1, Node* in2, Node* in3) : FmaNode(in1, in2, in3) {}\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1419,3 +1419,1 @@\n-  Node* cmov = CMoveNode::make(nullptr, this,\n-                               phase->intcon(0), phase->intcon(1),\n-                               TypeInt::BOOL);\n+  Node* cmov = CMoveNode::make(this, phase->intcon(0), phase->intcon(1), TypeInt::BOOL);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -535,1 +535,1 @@\n-  ReverseBytesINode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesINode(Node* in) : Node(nullptr, in) {}\n@@ -537,1 +537,1 @@\n-  const Type *bottom_type() const { return TypeInt::INT; }\n+  const Type* bottom_type() const { return TypeInt::INT; }\n@@ -545,1 +545,1 @@\n-  ReverseBytesLNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesLNode(Node* in) : Node(nullptr, in) {}\n@@ -547,1 +547,1 @@\n-  const Type *bottom_type() const { return TypeLong::LONG; }\n+  const Type* bottom_type() const { return TypeLong::LONG; }\n@@ -555,1 +555,1 @@\n-  ReverseBytesUSNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesUSNode(Node* in1) : Node(nullptr, in1) {}\n@@ -557,1 +557,1 @@\n-  const Type *bottom_type() const { return TypeInt::CHAR; }\n+  const Type* bottom_type() const { return TypeInt::CHAR; }\n@@ -565,1 +565,1 @@\n-  ReverseBytesSNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseBytesSNode(Node* in) : Node(nullptr, in) {}\n@@ -567,1 +567,1 @@\n-  const Type *bottom_type() const { return TypeInt::SHORT; }\n+  const Type* bottom_type() const { return TypeInt::SHORT; }\n@@ -575,1 +575,1 @@\n-  ReverseINode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseINode(Node* in) : Node(nullptr, in) {}\n@@ -577,1 +577,1 @@\n-  const Type *bottom_type() const { return TypeInt::INT; }\n+  const Type* bottom_type() const { return TypeInt::INT; }\n@@ -587,1 +587,1 @@\n-  ReverseLNode(Node *c, Node *in1) : Node(c, in1) {}\n+  ReverseLNode(Node* in) : Node(nullptr, in) {}\n@@ -589,1 +589,1 @@\n-  const Type *bottom_type() const { return TypeLong::LONG; }\n+  const Type* bottom_type() const { return TypeLong::LONG; }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}