{"files":[{"patch":"@@ -304,1 +304,1 @@\n-    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+    for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n@@ -464,1 +464,1 @@\n-          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+          for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,2 @@\n-  \/\/   FieldInfoStream := j=num_java_fields k=num_injected_fields Field[j+k] End\n+  \/\/   FieldInfoStream := j=num_java_fields k=num_injected_fields ControlByte[j+k] Field[j+k] End\n+  \/\/   ControlByte := injected_field_flag(1 bit) unused(1 bit) encoded_field_length(6 bits)\n@@ -67,0 +68,1 @@\n+  sizer.consumer()->accept_bytes(java_fields + injected_fields);\n@@ -81,0 +83,2 @@\n+  int ctrl = w.position();\n+  w.set_position(ctrl + java_fields + injected_fields);\n@@ -83,0 +87,1 @@\n+    int pre = w.position();\n@@ -84,0 +89,7 @@\n+    int post = w.position();\n+    u1 control_byte = static_cast<u1>(post - pre);\n+    assert(control_byte < 64, \"size should fit in 6 bits\");\n+    if (fi->field_flags().is_injected()) {\n+      control_byte |= INJECTED_FIELD;\n+    }\n+    w.array()->at_put(ctrl + i, control_byte);\n@@ -92,0 +104,1 @@\n+  r.skip_bytes(jfc + ifc);\n@@ -117,2 +130,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n-  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n@@ -122,0 +133,4 @@\n+  int length = *java_fields_count + *injected_fields_count;\n+\n+  GrowableArray<FieldInfo>* array = new GrowableArray<FieldInfo>(length);\n+  r.skip_bytes(length);\n@@ -128,1 +143,0 @@\n-  assert(array->length() == *java_fields_count + *injected_fields_count, \"Must be\");\n@@ -133,1 +147,0 @@\n-  int length = FieldInfoStream::num_total_fields(fis);\n@@ -135,1 +148,1 @@\n-  int java_field_count = r.next_uint();\n+  int java_fields_count = r.next_uint();\n@@ -137,0 +150,1 @@\n+  r.skip_bytes(java_fields_count + injected_fields_count);\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+#define INJECTED_FIELD ((u1) 0x80)\n+#define CTRL_LENGTH_MASK ~((int) INJECTED_FIELD)\n+\n@@ -242,4 +245,16 @@\n-  int has_next() { return _r.has_next(); }\n-  int position() { return _r.position(); }\n-  int next_index() { return _next_index; }\n-  void read_field_info(FieldInfo& fi);\n+  void skip_bytes(int bytes) {\n+    assert(bytes >= 0, \"skipping negative\");\n+    \/\/ no bounds checking; r._limit() is not set\n+    _r.set_position(_r.position() + bytes);\n+  }\n+\n+  int has_next() const { return _r.has_next(); }\n+  int position() const { return _r.position(); }\n+  int next_index() const { return _next_index; }\n+  void read_name_signature(FieldInfo& fi);\n+  void read_partial_record(FieldInfo& fi);\n+\n+  inline void read_field_info(FieldInfo& fi) {\n+    read_name_signature(fi);\n+    read_partial_record(fi);\n+  }\n@@ -260,1 +275,2 @@\n-\/\/   FieldInfoStream := j=num_java_fields k=num_injected_fields Field[j+k] End\n+\/\/   FieldInfoStream := j=num_java_fields k=num_injected_fields ControlByte[j+k] Field[j+k] End\n+\/\/   ControlByte := injected_field_flag(1 bit) unused(1 bit) encoded_field_length(6 bits)\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-inline void FieldInfoReader::read_field_info(FieldInfo& fi) {\n+inline void FieldInfoReader::read_name_signature(FieldInfo& fi) {\n@@ -104,0 +104,3 @@\n+}\n+\n+inline void FieldInfoReader::read_partial_record(FieldInfo& fi) {\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  int                 _ctrl_offset;\n@@ -51,0 +52,1 @@\n+  int                 _next_field_offset;\n@@ -52,1 +54,1 @@\n-  FieldInfo const * field() const {\n+  void ensure_info() {\n@@ -54,1 +56,4 @@\n-    return &_fi_buf;\n+    if (_next_field_offset > _reader.position()) {\n+      _reader.read_partial_record(_fi_buf);\n+      _next_field_offset = _reader.position();\n+    }\n@@ -59,1 +64,9 @@\n-  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+\n+ private:\n+  void read_next() {\n+    int ctrl_byte = _fieldinfo_stream->at(_ctrl_offset + _index);\n+    _next_field_offset += ctrl_byte & CTRL_LENGTH_MASK;\n+    _reader.read_name_signature(_fi_buf);\n+    _fi_buf.field_flags_addr()->update_injected(ctrl_byte & INJECTED_FIELD);\n+  }\n@@ -61,1 +74,0 @@\n-  private:\n@@ -65,0 +77,2 @@\n+    _ctrl_offset = _reader.position();\n+    _reader.skip_bytes(java_fields_count + injected_fields_count);\n@@ -67,1 +81,2 @@\n-      _reader.read_field_info(_fi_buf);\n+      _next_field_offset = _reader.position();\n+      read_next();\n@@ -79,0 +94,1 @@\n+    _reader.set_position_and_next_index(_next_field_offset, _index);\n@@ -80,1 +96,1 @@\n-    _reader.read_field_info(_fi_buf);\n+    read_next();\n@@ -85,2 +101,3 @@\n-  AccessFlags access_flags() const {\n-    return field()->access_flags();\n+  AccessFlags access_flags() {\n+    ensure_info();\n+    return _fi_buf.access_flags();\n@@ -89,2 +106,3 @@\n-  FieldInfo::FieldFlags field_flags() const {\n-    return field()->field_flags();\n+  FieldInfo::FieldFlags field_flags() {\n+    ensure_info();\n+    return _fi_buf.field_flags();\n@@ -94,1 +112,1 @@\n-    return field()->name(_constants());\n+    return _fi_buf.name(_constants());\n@@ -98,1 +116,1 @@\n-    return field()->signature(_constants());\n+    return _fi_buf.signature(_constants());\n@@ -101,3 +119,3 @@\n-  Symbol* generic_signature() const {\n-    if (field()->field_flags().is_generic()) {\n-      return _constants->symbol_at(field()->generic_signature_index());\n+  Symbol* generic_signature() {\n+    if (_fi_buf.field_flags().is_generic()) {\n+      return _constants->symbol_at(_fi_buf.generic_signature_index());\n@@ -109,2 +127,3 @@\n-  int offset() const {\n-    return field()->offset();\n+  int offset() {\n+    ensure_info();\n+    return _fi_buf.offset();\n@@ -114,1 +133,2 @@\n-    return field()->is_contended();\n+    assert(_next_field_offset == _reader.position(), \"unexpected\");\n+    return _fi_buf.is_contended();\n@@ -118,1 +138,2 @@\n-    return field()->contended_group();\n+    assert(_next_field_offset == _reader.position(), \"unexpected\");\n+    return _fi_buf.contended_group();\n@@ -123,1 +144,2 @@\n-  const FieldInfo& to_FieldInfo() const {\n+  const FieldInfo& to_FieldInfo() {\n+    ensure_info();\n@@ -132,1 +154,2 @@\n-  fieldDescriptor& field_descriptor() const {\n+  fieldDescriptor& field_descriptor() {\n+    ensure_info();\n@@ -145,2 +168,1 @@\n-    assert(!field()->field_flags().is_injected(), \"regular only\");\n-    return field()->name_index();\n+    return _fi_buf.name_index();\n@@ -150,3 +172,1 @@\n-    assert(!field()->field_flags().is_injected(), \"regular only\");\n-    return field()->signature_index();\n-    return -1;\n+    return _fi_buf.signature_index();\n@@ -155,4 +175,5 @@\n-  u2 generic_signature_index() const {\n-    assert(!field()->field_flags().is_injected(), \"regular only\");\n-    if (field()->field_flags().is_generic()) {\n-      return field()->generic_signature_index();\n+  u2 generic_signature_index() {\n+    ensure_info();\n+    assert(!_fi_buf.field_flags().is_injected(), \"regular only\");\n+    if (_fi_buf.field_flags().is_generic()) {\n+      return _fi_buf.generic_signature_index();\n@@ -163,3 +184,4 @@\n-  u2 initval_index() const {\n-    assert(!field()->field_flags().is_injected(), \"regular only\");\n-    return field()->initializer_index();\n+  u2 initval_index() {\n+    ensure_info();\n+    assert(!_fi_buf.field_flags().is_injected(), \"regular only\");\n+    return _fi_buf.initializer_index();\n@@ -179,1 +201,0 @@\n-  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants): FieldStreamBase(fieldinfo, constants) {}\n@@ -241,1 +262,1 @@\n-  AccessFlags access_flags() const {\n+  AccessFlags access_flags() {\n@@ -245,1 +266,1 @@\n-  FieldInfo::FieldFlags field_flags() const {\n+  FieldInfo::FieldFlags field_flags() {\n@@ -257,1 +278,1 @@\n-  Symbol* generic_signature() const {\n+  Symbol* generic_signature() {\n@@ -261,1 +282,1 @@\n-  int offset() const {\n+  int offset() {\n@@ -277,1 +298,1 @@\n-  fieldDescriptor& field_descriptor() const {\n+  fieldDescriptor& field_descriptor() {\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":60,"deletions":39,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+         _ctrl_offset(0),\n@@ -46,1 +47,1 @@\n-FieldStreamBase::FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n+FieldStreamBase::FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants) :\n@@ -49,0 +50,1 @@\n+        _ctrl_offset(0),\n@@ -58,0 +60,1 @@\n+         _ctrl_offset(0),\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.inline.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    int next_length() {\n+    int next_length() const {\n@@ -273,1 +273,1 @@\n-    bool has_next() {\n+    bool has_next() const {\n@@ -287,2 +287,2 @@\n-    OFF limit() { return _limit; }\n-    OFF position() { return _position; }\n+    OFF limit() const { return _limit; }\n+    OFF position() const { return _position; }\n@@ -394,0 +394,3 @@\n+    void accept_bytes(OFF bytes) {\n+      _position += bytes;\n+    }\n","filename":"src\/hotspot\/share\/utilities\/unsigned5.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -66,0 +66,4 @@\n+  public void skipBytes(int bytes) {\n+    this.position += bytes;\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CompressedStream.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+    crs.skipBytes(numFields);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Field.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}