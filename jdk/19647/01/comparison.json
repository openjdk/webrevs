{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shared\/genArguments.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -543,4 +543,0 @@\n-  product(size_t, OldSize, ScaleForWordSize(4*M),                           \\\n-          \"(Deprecated) Initial tenured generation size (in bytes)\")        \\\n-          range(0, max_uintx)                                               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+size_t OldSize = 0;\n+\n@@ -155,18 +157,1 @@\n-  if (OldSize < old_gen_size_lower_bound()) {\n-    FLAG_SET_ERGO(OldSize, old_gen_size_lower_bound());\n-  }\n-  if (!is_aligned(OldSize, GenAlignment)) {\n-    FLAG_SET_ERGO(OldSize, align_down(OldSize, GenAlignment));\n-  }\n-\n-  if (FLAG_IS_CMDLINE(OldSize) && FLAG_IS_DEFAULT(MaxHeapSize)) {\n-    \/\/ NewRatio will be used later to set the young generation size so we use\n-    \/\/ it to calculate how big the heap should be based on the requested OldSize\n-    \/\/ and NewRatio.\n-    assert(NewRatio > 0, \"NewRatio should have been set up earlier\");\n-    size_t calculated_heapsize = (OldSize \/ NewRatio) * (NewRatio + 1);\n-\n-    calculated_heapsize = align_up(calculated_heapsize, HeapAlignment);\n-    FLAG_SET_ERGO(MaxHeapSize, calculated_heapsize);\n-    FLAG_SET_ERGO(InitialHeapSize, calculated_heapsize);\n-  }\n+  OldSize = old_gen_size_lower_bound();\n@@ -188,1 +173,1 @@\n-      FLAG_SET_ERGO(OldSize, MaxHeapSize - NewSize);\n+      OldSize = MaxHeapSize - NewSize;\n@@ -194,11 +179,0 @@\n-  \/\/ Update NewSize, if possible, to avoid sizing the young gen too small when only\n-  \/\/ OldSize is set on the command line.\n-  if (FLAG_IS_CMDLINE(OldSize) && !FLAG_IS_CMDLINE(NewSize)) {\n-    if (OldSize < InitialHeapSize) {\n-      size_t new_size = InitialHeapSize - OldSize;\n-      if (new_size >= MinNewSize && new_size <= MaxNewSize) {\n-        FLAG_SET_ERGO(NewSize, new_size);\n-      }\n-    }\n-  }\n-\n@@ -218,6 +192,0 @@\n-\/\/ Minimum sizes of the generations may be different than\n-\/\/ the initial sizes.  An inconsistency is permitted here\n-\/\/ in the total size that can be specified explicitly by\n-\/\/ command line specification of OldSize and NewSize and\n-\/\/ also a command line specification of -Xms.  Issue a warning\n-\/\/ but allow the values to pass.\n@@ -289,31 +257,1 @@\n-  size_t initial_old_size = OldSize;\n-\n-  \/\/ If no explicit command line flag has been set for the\n-  \/\/ old generation size, use what is left.\n-  if (!FLAG_IS_CMDLINE(OldSize)) {\n-    \/\/ The user has not specified any value but the ergonomics\n-    \/\/ may have chosen a value (which may or may not be consistent\n-    \/\/ with the overall heap size).  In either case make\n-    \/\/ the minimum, maximum and initial sizes consistent\n-    \/\/ with the young sizes and the overall heap sizes.\n-    initial_old_size = clamp(InitialHeapSize - initial_young_size, MinOldSize, MaxOldSize);\n-    \/\/ MaxOldSize and MinOldSize have already been made consistent above.\n-  } else {\n-    \/\/ OldSize has been explicitly set on the command line. Use it\n-    \/\/ for the initial size but make sure the minimum allow a young\n-    \/\/ generation to fit as well.\n-    \/\/ If the user has explicitly set an OldSize that is inconsistent\n-    \/\/ with other command line flags, issue a warning.\n-    \/\/ The generation minimums and the overall heap minimum should\n-    \/\/ be within one generation alignment.\n-    if (initial_old_size > MaxOldSize) {\n-      log_warning(gc, ergo)(\"Inconsistency between maximum heap size and maximum \"\n-                            \"generation sizes: using maximum heap = \" SIZE_FORMAT\n-                            \", -XX:OldSize flag is being ignored\",\n-                            MaxHeapSize);\n-      initial_old_size = MaxOldSize;\n-    } else if (initial_old_size < MinOldSize) {\n-      log_warning(gc, ergo)(\"Inconsistency between initial old size and minimum old size\");\n-      MinOldSize = initial_old_size;\n-    }\n-  }\n+  size_t initial_old_size = clamp(InitialHeapSize - initial_young_size, MinOldSize, MaxOldSize);;\n@@ -362,1 +300,1 @@\n-    FLAG_SET_ERGO(OldSize, initial_old_size);\n+    OldSize = initial_old_size;\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":6,"deletions":68,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+extern size_t OldSize;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shared\/genArguments.hpp\"\n@@ -505,1 +506,0 @@\n-  { \"OldSize\",                      JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n@@ -516,0 +516,1 @@\n+  { \"OldSize\",                      JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-      printValMB(\"OldSize                  = \", getFlagValue(\"OldSize\", flagMap));\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-      AutoSaveRestore<size_t> FLAG_GUARD(OldSize);\n@@ -70,1 +69,0 @@\n-      FLAG_SET_ERGO(OldSize, 4 * M);\n@@ -147,8 +145,0 @@\n-  class SetOldSizeCmd : public UnaryExecutor {\n-   public:\n-    SetOldSizeCmd(size_t param) : UnaryExecutor(param) { }\n-    void execute() {\n-      FLAG_SET_CMDLINE(OldSize, param);\n-    }\n-  };\n-\n@@ -165,43 +155,0 @@\n-\n-  class CheckOldMin : public UnaryExecutor {\n-   public:\n-    CheckOldMin(size_t param) : UnaryExecutor(param) { }\n-    void execute() {\n-      SerialArguments sa;\n-      sa.initialize_heap_sizes();\n-      ASSERT_LE(MinOldSize, param);\n-    }\n-  };\n-\n-  class CheckOldInitial : public Executor {\n-   public:\n-    void execute() {\n-      size_t heap_alignment = GCArguments::compute_heap_alignment();\n-\n-      SerialArguments sa;\n-      sa.initialize_heap_sizes();\n-\n-      size_t expected_old_initial = align_up(InitialHeapSize, heap_alignment)\n-              - MaxNewSize;\n-\n-      ASSERT_EQ(expected_old_initial, OldSize);\n-    }\n-  };\n-\n-  class CheckOldInitialMaxNewSize : public BinaryExecutor {\n-   public:\n-    CheckOldInitialMaxNewSize(size_t param1, size_t param2) : BinaryExecutor(param1, param2) { }\n-    void execute() {\n-      size_t heap_alignment = GCArguments::compute_heap_alignment();\n-      size_t new_size_value = align_up(MaxHeapSize, heap_alignment)\n-              - param1 + param2;\n-\n-      SerialArguments sa;\n-      sa.initialize_heap_sizes();\n-\n-      size_t expected_old_initial = align_up(MaxHeapSize, heap_alignment)\n-              - new_size_value;\n-\n-      ASSERT_EQ(expected_old_initial, OldSize);\n-    }\n-  };\n@@ -247,26 +194,0 @@\n-\n-\/\/ Since a flag has been set with FLAG_SET_CMDLINE it\n-\/\/ will be treated as it have been set on the command line for\n-\/\/ the rest of the VM lifetime. This is an irreversible change and\n-\/\/ could impact other tests so we use TEST_OTHER_VM\n-TEST_OTHER_VM(CollectorPolicy, old_cmd) {\n-  \/\/ If OldSize is set on the command line, it should be used\n-  \/\/ for both min and initial old size if less than min heap.\n-  TestGenCollectorPolicy::SetOldSizeCmd setter(20 * M);\n-\n-  TestGenCollectorPolicy::CheckOldMin checker_min(20 * M);\n-  TestGenCollectorPolicy::TestWrapper::test(&setter, &checker_min);\n-\n-  TestGenCollectorPolicy::CheckOldInitial checker_initial;\n-  TestGenCollectorPolicy::TestWrapper::test(&setter, &checker_initial);\n-\n-  \/\/ If MaxNewSize is large, the maximum OldSize will be less than\n-  \/\/ what's requested on the command line and it should be reset\n-  \/\/ ergonomically.\n-  \/\/ We intentionally set MaxNewSize + OldSize > MaxHeapSize\n-  TestGenCollectorPolicy::SetOldSizeCmd setter_old_size(30 * M);\n-  TestGenCollectorPolicy::SetMaxNewSizeCmd setter_max_new_size(30 * M, 20 * M);\n-  TestGenCollectorPolicy::CheckOldInitialMaxNewSize checker_large(30 * M, 20 * M);\n-\n-  TestGenCollectorPolicy::TestWrapper::test(&setter_old_size, &setter_max_new_size, &checker_large);\n-}\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_collectorPolicy.cpp","additions":0,"deletions":79,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -62,5 +62,0 @@\n-    \/\/ heap sizing ergonomics use the value NewSize + OldSize as default values\n-    \/\/ for ergonomics calculation. Retrieve these values.\n-    long[] values = new long[2];\n-    getNewOldSize(gcflag, values);\n-\n@@ -68,3 +63,3 @@\n-    long newPlusOldSize = values[0] + values[1];\n-    long smallValue = newPlusOldSize \/ 2;\n-    long largeValue = newPlusOldSize * 2;\n+    long initialHeapSize = getInitialHeapSize(gcflag);\n+    long smallValue = initialHeapSize \/ 2;\n+    long largeValue = initialHeapSize * 2;\n@@ -117,1 +112,1 @@\n-  private static void getNewOldSize(String gcflag, long[] values) throws Exception {\n+  private static long getInitialHeapSize(String gcflag) throws Exception {\n@@ -123,2 +118,1 @@\n-    values[0] = getFlagValue(\" NewSize\", stdout);\n-    values[1] = getFlagValue(\" OldSize\", stdout);\n+    return getFlagValue(\" InitialHeapSize\", stdout);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @requires vm.gc.Serial & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null & vm.opt.OldSize == null\n+ * @requires vm.gc.Serial & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null\n@@ -47,1 +47,1 @@\n- * @requires vm.gc.Parallel & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null & vm.opt.OldSize == null\n+ * @requires vm.gc.Parallel & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null\n@@ -62,1 +62,1 @@\n- * @requires vm.gc.G1 & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null & vm.opt.OldSize == null\n+ * @requires vm.gc.G1 & vm.opt.MaxNewSize == null & vm.opt.NewRatio == null & vm.opt.NewSize == null\n@@ -119,1 +119,0 @@\n-    checkMaxNewSize(new String[] { gcName, \"-Xmx128M\", \"-XX:OldSize=96M\" }, 128 * M);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxNewSize.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:NewSize=1M -Xlog:gc -XX:MaxNewSize=1m -XX:-UseTLAB -XX:OldSize=63M -XX:MaxHeapSize=64M gc.g1.TestInvalidateArrayCopy\n+ * @run main\/othervm -XX:NewSize=1M -Xlog:gc -XX:MaxNewSize=1m -XX:-UseTLAB -XX:MaxHeapSize=64M gc.g1.TestInvalidateArrayCopy\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestInvalidateArrayCopy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-        \"-XX:OldSize=64m\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/lib\/PLABUtils.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -243,1 +243,0 @@\n-        excludeTestMaxRange(\"OldSize\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/TestOptionsWithRanges.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,4 +82,0 @@\n-        \/\/ positive(\"Initial old generation size within 32-bit range\", \"-Xmx3G\", \"-XX:OldSize=2G\");\n-        \/\/ positive(\"Initial old generation size at 32-bit range\", \"-Xmx5G\", \"-XX:OldSize=4G\");\n-        \/\/ positive(\"Initial old generation size outside 32-bit range\", \"-Xmx5G\", \"-XX:OldSize=4G\");\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptionsTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -XX:+UseG1GC -XX:+UseTLAB -XX:MinTLABSize=3k -XX:OldSize=30m -XX:YoungPLABSize=3k -XX:MaxDirectMemorySize=5M  jdk.jfr.event.runtime.TestSizeTFlags\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -XX:+UseG1GC -XX:+UseTLAB -XX:MinTLABSize=3k -XX:YoungPLABSize=3k -XX:MaxDirectMemorySize=5M  jdk.jfr.event.runtime.TestSizeTFlags\n@@ -47,1 +47,1 @@\n-    private static final int NUMBER_OF_FLAGS_TO_CHECK = 4;\n+    private static final int NUMBER_OF_FLAGS_TO_CHECK = 3;\n@@ -49,1 +49,0 @@\n-    private static final long OLD_SIZE_FLAG_VALUE = 30*1024*1024L;\n@@ -74,4 +73,0 @@\n-                    case \"OldSize\": {\n-                        flagsFoundWithExpectedValue[1] = OLD_SIZE_FLAG_VALUE == value;\n-                        continue;\n-                    }\n@@ -79,1 +74,1 @@\n-                        flagsFoundWithExpectedValue[2] = YOUNG_PLAB_SIZE_FLAG_VALUE == value;\n+                        flagsFoundWithExpectedValue[1] = YOUNG_PLAB_SIZE_FLAG_VALUE == value;\n@@ -83,1 +78,1 @@\n-                        flagsFoundWithExpectedValue[3] = MAX_DIRECT_MEMORY_SIZE_FLAG_VALUE == value;\n+                        flagsFoundWithExpectedValue[2] = MAX_DIRECT_MEMORY_SIZE_FLAG_VALUE == value;\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSizeTFlags.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-        \"OldSize\",\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/JMapHeapConfigTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}