{"files":[{"patch":"@@ -759,0 +759,5 @@\n+            \/\/make sure variables defined in the let expression are not included\n+            \/\/in the defined variables for jumps that go outside of this let\n+            \/\/expression:\n+            undefineVariablesInChain(result.falseJumps, limit);\n+            undefineVariablesInChain(result.trueJumps, limit);\n@@ -766,0 +771,7 @@\n+        \/\/where:\n+        private void undefineVariablesInChain(Chain toClear, int limit) {\n+            while (toClear != null) {\n+                toClear.state.defined.excludeFrom(limit);\n+                toClear = toClear.next;\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8358801\n+ * @summary Verify variables introduced by let expressions are correctly undefined\n+ * @library \/tools\/lib\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+\n+import javax.tools.JavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+import com.sun.source.util.JavacTask;\n+import java.lang.classfile.ClassFile;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.tools.JavaCompiler;\n+\n+import toolbox.JavaTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class T8358801 extends TestRunner {\n+    private ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new T8358801().runTests();\n+    }\n+\n+    T8358801() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testPatternsInJava(Path base) throws Exception {\n+        Path classes = base.resolve(\"classes\");\n+\n+        List<JavaFileObject> files = new ArrayList<>();\n+        files.add(new ToolBox.JavaSource(\n+            \"\"\"\n+            public class Main {\n+                private boolean test(String s, int i) {\n+                    if (s.subSequence(0, 1) instanceof Runnable r) {\n+                        return true;\n+                    }\n+\n+                    switch (i) {\n+                        case 0:\n+                            String clashing1 = null;\n+                            String clashing2 = null;\n+                            String clashing3 = null;\n+                            String clashing4 = null;\n+                            return true;\n+                        default:\n+                            System.out.println(\"correct\");\n+                            return true;\n+                    }\n+                }\n+\n+                public static void main(String[] args) {\n+                    new Main().test(\"hello\", 1);\n+                }\n+            }\n+            \"\"\"\n+        ));\n+\n+        if (Files.exists(classes)) {\n+            tb.cleanDirectory(classes);\n+        } else {\n+            Files.createDirectories(classes);\n+        }\n+\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        Iterable<String> options = Arrays.asList(\"-d\", classes.toString());\n+        JavacTask task = (JavacTask) compiler.getTask(null, null, null, options, null, files);\n+\n+        task.generate();\n+\n+        List<VerifyError> errors = ClassFile.of().verify(classes.resolve(\"Main.class\"));\n+\n+        if (!errors.isEmpty()) {\n+            throw new AssertionError(\"verify errors found: \" + errors);\n+        }\n+\n+        List<String> log =\n+            new JavaTask(tb).classpath(classes.toString())\n+                            .className(\"Main\")\n+                            .run()\n+                            .writeAll()\n+                            .getOutputLines(Task.OutputKind.STDOUT);\n+        List<String> expected = List.of(\"correct\");\n+\n+        if (!Objects.equals(log, expected)) {\n+            throw new AssertionError(\"Incorrect result, expected: \" + expected +\n+                                     \", got: \" + log);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8358801.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}