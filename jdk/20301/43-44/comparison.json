{"files":[{"patch":"@@ -57,3 +57,4 @@\n-    private static final int SHA256_HMAC_SIZE = 32;\n-    private static final int SHA384_HMAC_SIZE = 48;\n-    private static final int SHA512_HMAC_SIZE = 64;\n+    private enum SupportedHmac {\n+        SHA256(\"HmacSHA256\", 32),\n+        SHA384(\"HmacSHA384\", 48),\n+        SHA512(\"HmacSHA512\", 64);\n@@ -61,5 +62,6 @@\n-    \/\/ since we are using Arrays.binarySearch later, order is important\n-    private static final int[] SUPPORTED_HMAC_SIZES = new int[]{\n-            SHA256_HMAC_SIZE,\n-            SHA384_HMAC_SIZE,\n-            SHA512_HMAC_SIZE\n+        private final String hmacAlg;\n+        private final int hmacLen;\n+        SupportedHmac(String hmacAlg, int hmacLen) {\n+            this.hmacAlg = hmacAlg;\n+            this.hmacLen = hmacLen;\n+        }\n@@ -78,1 +80,1 @@\n-    private HKDFKeyDerivation(String hmacAlgName, int hmacLen,\n+    private HKDFKeyDerivation(SupportedHmac supportedHmac,\n@@ -84,6 +86,1 @@\n-                    hmacAlgName + \" does not support parameters\");\n-        }\n-        \/\/ added to enforce valid values at reviewer's request\n-        if (Arrays.binarySearch(SUPPORTED_HMAC_SIZES, hmacLen) < 0) {\n-            throw new InternalError(\n-                    \"Subclass attempted to use an invalid hmacLen\");\n+                    supportedHmac.hmacAlg + \" does not support parameters\");\n@@ -91,2 +88,2 @@\n-        this.hmacAlgName = hmacAlgName;\n-        this.hmacLen = hmacLen;\n+        this.hmacAlgName = supportedHmac.hmacAlg;\n+        this.hmacLen = supportedHmac.hmacLen;\n@@ -396,1 +393,1 @@\n-            super(\"HmacSHA256\", SHA256_HMAC_SIZE, kdfParameters);\n+            super(SupportedHmac.SHA256, kdfParameters);\n@@ -403,1 +400,1 @@\n-            super(\"HmacSHA384\", SHA384_HMAC_SIZE, kdfParameters);\n+            super(SupportedHmac.SHA384, kdfParameters);\n@@ -410,1 +407,1 @@\n-            super(\"HmacSHA512\", SHA512_HMAC_SIZE, kdfParameters);\n+            super(SupportedHmac.SHA512, kdfParameters);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HKDFKeyDerivation.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -82,5 +82,7 @@\n- * device that only a specific {@code KDF} provider can utilize. Once initiated,\n- * the selection process traverses the list of registered security providers,\n- * starting with the most preferred {@code Provider}. A new {@code KDF} object\n- * encapsulating the {@code KDFSpi} implementation from the first provider that\n- * supports the specified algorithm and optional parameters is returned.\n+ * device that only a specific {@code KDF} provider can utilize. The {@code\n+ * getInstance} method returns a {@code KDF} object as long as there exists\n+ * at least one registered security provider that implements the algorithm\n+ * and supports the optional parameters. The delayed provider selection\n+ * process traverses the list of registered security providers, starting with\n+ * the most preferred {@code Provider}. The first provider that supports the\n+ * specified algorithm, optional parameters, and key material is selected.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,8 +42,10 @@\n- * In addition, all implementations must provide a public constructor which\n- * accepts a {@code KDFParameters} object. The constructor must call\n- * {@code super(params)} passing the parameters supplied. The constructor must\n- * also throw an {@code InvalidAlgorithmParameterException} if the supplied\n- * parameters are inappropriate. If a {@code KDF} object is instantiated with\n- * one of the {@code getInstance} methods that contains a {@code KDFParameters}\n- * parameter, the user-provided {@code KDFParameters} object will be passed to\n- * the constructor of the {@code KDFSpi} implementation. Otherwise, if it is\n+ * Implementations must provide a public constructor which accepts a {@code\n+ * KDFParameters} object if they depend on the default implementation of\n+ * {@code Provider.Service.newInstance} to construct {@code KDFSpi} instances.\n+ * The constructor must call {@code super(params)} passing the parameters\n+ * supplied. The constructor must also throw an\n+ * {@code InvalidAlgorithmParameterException} if the supplied parameters are\n+ * inappropriate. If a {@code KDF} object is instantiated with one of the\n+ * {@code getInstance} methods that contains a {@code KDFParameters} parameter,\n+ * the user-provided {@code KDFParameters} object will be passed to the\n+ * constructor of the {@code KDFSpi} implementation. Otherwise, if it is\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-         * {@code ikm} byte array of length zero will discarded.\n+         * {@code ikm} byte array of length zero will be discarded.\n@@ -215,1 +215,1 @@\n-         * length zero will discarded.\n+         * length zero will be discarded.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}