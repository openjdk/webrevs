{"files":[{"patch":"@@ -74,1 +74,1 @@\n-                \"RFC 5869 has no parameters for its KDF algorithms\");\n+                hmacAlgName + \" does not support parameters\");\n@@ -86,3 +86,6 @@\n-     *     if the information contained within the {@code KDFParameterSpec} is\n-     *     invalid or incorrect for the type of key to be derived, or specifies\n-     *     a type of output that is not a key (e.g. raw data)\n+     *     if the information contained within the {@code derivationParameterSpec} is\n+     *     invalid or if the combination of {@code alg} and the {@code derivationParameterSpec}\n+     *     results in something invalid, ie - a key of inappropriate length\n+     *     for the specified algorithm\n+     * @throws NoSuchAlgorithmException\n+     *     if {@code alg} is empty or invalid\n@@ -95,1 +98,1 @@\n-        throws InvalidAlgorithmParameterException {\n+        throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {\n@@ -97,4 +100,8 @@\n-        if (alg == null || alg.isEmpty()) {\n-            throw new IllegalArgumentException(\n-                \"the algorithm for the resultant SecretKey may not be null or\"\n-                + \" empty\");\n+        if (alg == null) {\n+            throw new NullPointerException(\n+                \"the algorithm for the SecretKey return value may not be null\");\n+        }\n+        if (alg.isEmpty()) {\n+            throw new NoSuchAlgorithmException(\n+                \"the algorithm for the SecretKey return value may not be \"\n+                + \"empty\");\n@@ -242,5 +249,1 @@\n-            \"an HKDF could not be initialized with the given KDFParameterSpec\");\n-    }\n-\n-    private static boolean isNullOrEmpty(Collection<?> c) {\n-        return c == null || c.isEmpty();\n+            \"an HKDF derivation requires a valid HKDFParameterSpec\");\n@@ -279,1 +282,1 @@\n-     * Perform the HMAC-Extract operation.\n+     * Perform the HKDF-Extract operation.\n@@ -281,1 +284,1 @@\n-     * @param inputKey\n+     * @param inputKeyMaterial\n@@ -284,2 +287,2 @@\n-     *     the salt value used for HKDF-Extract.  If no salt is to be used a\n-     *     {@code null} value should be provided.\n+     *     the salt value used for HKDF-Extract; {@code null} if no salt is\n+     *     to be used.\n@@ -293,1 +296,1 @@\n-    protected byte[] hkdfExtract(SecretKey inputKey, byte[] salt)\n+    private byte[] hkdfExtract(SecretKey inputKeyMaterial, byte[] salt)\n@@ -302,1 +305,1 @@\n-        if (inputKey == null) {\n+        if (inputKeyMaterial == null) {\n@@ -305,1 +308,1 @@\n-            return hmacObj.doFinal(inputKey.getEncoded());\n+            return hmacObj.doFinal(inputKeyMaterial.getEncoded());\n@@ -310,3 +313,1 @@\n-     * Perform the HMAC-Expand operation.  At the end of the operation, the\n-     * keyStream instance variable will contain the complete KDF output based on\n-     * the input values and desired length.\n+     * Perform the HKDF-Expand operation.\n@@ -331,1 +332,1 @@\n-    protected byte[] hkdfExpand(SecretKey prk, byte[] info, int outLen)\n+    private byte[] hkdfExpand(SecretKey prk, byte[] info, int outLen)\n@@ -338,0 +339,4 @@\n+        if (prk.getEncoded().length < hmacLen) {\n+            throw new InvalidKeyException(\n+                \"prk must be at least \" + hmacLen + \" bytes\");\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":30,"deletions":25,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -50,2 +50,1 @@\n- * of methods. For <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc5869\">RFC 5869<\/a>,\n- * KDF algorithm names follow a naming convention of\n+ * of methods. For HKDF, KDF algorithm names follow a naming convention of\n@@ -200,2 +199,2 @@\n-     * @throws UnsupportedOperationException if this method is not overridden\n-     * by a provider\n+     * @throws UnsupportedOperationException if the parameters cannot be\n+     * retrieved or if the provider does not support parameter retrieval\n@@ -209,1 +208,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm.\n+     * Returns a {@code KDF} instance initialized with the specified algorithm.\n@@ -228,0 +227,1 @@\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -232,2 +232,1 @@\n-                \"Received an InvalidAlgorithmParameterException. Does this \"\n-                + \"algorithm require KDFParameters?\", e);\n+                \"No implementation found using null KDFParameters\", e);\n@@ -238,1 +237,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm from\n+     * Returns a {@code KDF} instance initialized with the specified algorithm from\n@@ -263,0 +262,1 @@\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -268,2 +268,1 @@\n-                \"Received an InvalidAlgorithmParameterException. Does this \"\n-                + \"algorithm require KDFParameters?\", e);\n+                \"No implementation found using null KDFParameters\", e);\n@@ -274,1 +273,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm from\n+     * Returns a {@code KDF} instance initialized with the specified algorithm from\n@@ -296,0 +295,1 @@\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -301,2 +301,1 @@\n-                \"Received an InvalidAlgorithmParameterException. Does this \"\n-                + \"algorithm require KDFParameters?\", e);\n+                \"No implementation found using null KDFParameters\", e);\n@@ -307,1 +306,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm and\n+     * Returns a {@code KDF} instance initialized with the specified algorithm and\n@@ -327,1 +326,2 @@\n-     *     {@code KDF}\n+     *     {@code KDF} or if no provider can be found which supports the\n+     *     parameters\n@@ -334,1 +334,1 @@\n-        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -349,1 +349,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm from\n+     * Returns a {@code KDF} instance initialized with the specified algorithm from\n@@ -374,1 +374,2 @@\n-     *     {@code KDF}\n+     *     {@code KDF} or if no provider can be found which supports the\n+     *     parameters\n@@ -383,1 +384,1 @@\n-        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -404,1 +405,1 @@\n-     * Returns a {@code KDF} object that implements the specified algorithm from\n+     * Returns a {@code KDF} instance initialized with the specified algorithm from\n@@ -426,1 +427,2 @@\n-     *     {@code KDF}\n+     *     {@code KDF} or if no provider can be found which supports the\n+     *     parameters\n@@ -434,1 +436,1 @@\n-        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        Objects.requireNonNull(algorithm, \"algorithm may not be null\");\n@@ -475,4 +477,1 @@\n-     *     KDF output and according to the derivation parameters. Rather than\n-     *     permitting a {@code null} return value here, implementations will\n-     *     handle cases where a value cannot be returned by throwing an\n-     *     appropriate {@code Exception}.\n+     *     KDF output and according to the derivation parameters.\n@@ -482,1 +481,1 @@\n-     *     invalid, if {@code alg} is invalid, or if their combination\n+     *     invalid or if the combination of {@code alg} and the {@code derivationParameterSpec}\n@@ -485,0 +484,2 @@\n+     * @throws NoSuchAlgorithmException\n+     *     if {@code alg} is empty or invalid\n@@ -490,13 +491,16 @@\n-        throws InvalidAlgorithmParameterException {\n-\n-            if (alg == null || alg.isEmpty()) {\n-                throw new NullPointerException(\n-                    \"the algorithm for the SecretKey return value may not be \"\n-                    + \"null or empty\");\n-            }\n-            Objects.requireNonNull(derivationParameterSpec);\n-            if (spi != null) {\n-                return spi.engineDeriveKey(alg, derivationParameterSpec);\n-            } else {\n-                return (SecretKey) chooseProvider(alg, derivationParameterSpec);\n-            }\n+        throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {\n+        if (alg == null) {\n+            throw new NullPointerException(\n+                \"the algorithm for the SecretKey return value may not be null\");\n+        }\n+        if (alg.isEmpty()) {\n+            throw new NoSuchAlgorithmException(\n+                \"the algorithm for the SecretKey return value may not be \"\n+                + \"empty\");\n+        }\n+        Objects.requireNonNull(derivationParameterSpec);\n+        if (spi != null) {\n+            return spi.engineDeriveKey(alg, derivationParameterSpec);\n+        } else {\n+            return (SecretKey) chooseProvider(alg, derivationParameterSpec);\n+        }\n@@ -514,5 +518,2 @@\n-     * @return a byte array corresponding to a key built from the\n-     *     KDF output and according to the derivation parameters. Rather than\n-     *     permitting a {@code null} return value here, implementations will\n-     *     handle cases where a value cannot be returned by throwing an\n-     *     appropriate {@code Exception}.\n+     * @return a byte array corresponding to the KDF output and according to\n+     * the derivation parameters.\n@@ -535,1 +536,6 @@\n-            return (byte[]) chooseProvider(null, derivationParameterSpec);\n+            try {\n+                return (byte[]) chooseProvider(null, derivationParameterSpec);\n+            } catch (NoSuchAlgorithmException e) {\n+                \/\/ this will never be thrown in the deriveData case\n+                throw new RuntimeException(e);\n+            }\n@@ -596,1 +602,1 @@\n-        throws InvalidAlgorithmParameterException {\n+        throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":53,"deletions":47,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.security.NoSuchAlgorithmException;\n@@ -47,0 +48,9 @@\n+ * <p>\n+ * Implementations which do not support {@code KDFParameters} may require\n+ * {@code null} to be passed, otherwise an {@code InvalidAlgorithmParameterException}\n+ * may be thrown. On the other hand, implementations which require\n+ * {@code KDFParameters} may throw an {@code InvalidAlgorithmParameterException}\n+ * upon receiving a {@code null} value. Furthermore, implementations\n+ * may supply default values for {@code KDFParameters}, mutating the\n+ * object. In that case, {@link KDFSpi#engineGetParameters()} would supply\n+ * callers with the actual {@code KDFParameters} object used.\n@@ -50,0 +60,1 @@\n+ * @see KDF#getParameters()\n@@ -66,0 +77,2 @@\n+     * @see KDF#getParameters()\n+     *\n@@ -86,2 +99,2 @@\n-     * @throws UnsupportedOperationException if this method is not overridden\n-     * by a provider\n+     * @throws UnsupportedOperationException if the parameters cannot be\n+     * retrieved or if the provider does not support parameter retrieval\n@@ -104,3 +117,0 @@\n-     *     Implementations must not return a {@code null} value here. Instead,\n-     *     they must throw an appropriate {@code Exception} if a value cannot\n-     *     be returned.\n@@ -110,1 +120,1 @@\n-     *     invalid, if {@code alg} is invalid, or if their combination\n+     *     invalid or if the combination of {@code alg} and the {@code derivationParameterSpec}\n@@ -113,0 +123,2 @@\n+     * @throws NoSuchAlgorithmException\n+     *     if {@code alg} is empty or invalid\n@@ -118,1 +130,1 @@\n-        throws InvalidAlgorithmParameterException;\n+        throws InvalidAlgorithmParameterException, NoSuchAlgorithmException;\n@@ -129,5 +141,2 @@\n-     * @return a byte array corresponding to a key built from the\n-     *     KDF output and according to the derivation parameters.\n-     *     Implementations must not return a {@code null} value here. Instead,\n-     *     they must throw an appropriate {@code Exception} if a value cannot\n-     *     be returned.\n+     * @return a byte array corresponding to the KDF output and according to\n+     * the derivation parameters.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -170,5 +171,2 @@\n-            if (ikm != null) {\n-                ikms.add(ikm);\n-            } else {\n-                throw new NullPointerException(\"ikm must not be null\");\n-            }\n+            Objects.requireNonNull(ikm, \"ikm must not be null\");\n+            ikms.add(ikm);\n@@ -201,3 +199,1 @@\n-            if (ikm == null) {\n-                throw new NullPointerException(\"ikm must not be null\");\n-            }\n+            Objects.requireNonNull(ikm, \"ikm must not be null\");\n@@ -231,5 +227,2 @@\n-            if (salt != null) {\n-                salts.add(salt);\n-            } else {\n-                throw new NullPointerException(\"salt must not be null\");\n-            }\n+            Objects.requireNonNull(salt, \"salt must not be null\");\n+            salts.add(salt);\n@@ -259,4 +252,1 @@\n-            if (salt == null) {\n-                throw new NullPointerException(\n-                    \"salt must not be null\");\n-            }\n+            Objects.requireNonNull(salt, \"salt must not be null\");\n@@ -326,1 +316,2 @@\n-         * the order they were added.\n+         * the order they were added. Returns an empty list if there are no\n+         * input key material values.\n@@ -336,1 +327,1 @@\n-         * were added.\n+         * were added. Returns an empty list if there are no salt values.\n@@ -426,3 +417,0 @@\n-         * <p>\n-         * Note: {@code addIKMValue} and {@code addSaltValue} may be called\n-         * afterward to supply additional values, if desired\n@@ -444,1 +432,1 @@\n-            \/\/ null-checked previously\n+            Objects.requireNonNull(ext, \"Extract object must not be null\");\n@@ -454,1 +442,2 @@\n-         * the order they were added.\n+         * the order they were added. Returns an empty list if there are no\n+         * input key material values.\n@@ -464,1 +453,1 @@\n-         * were added.\n+         * were added. Returns an empty list if there are no salt values.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"}]}