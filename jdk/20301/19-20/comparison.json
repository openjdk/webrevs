{"files":[{"patch":"@@ -57,13 +57,0 @@\n- * If a provider is not specified in the {@code getInstance} method when\n- * instantiating a {@code KDF} object, the provider is selected the first time\n- * the {@code deriveKey} or {@code deriveData} method is called, and a provider\n- * is chosen that supports the parameters passed to the {@code deriveKey} or\n- * {@code deriveData} method. However, if {@code getProviderName} or\n- * {@code getParameters} is called before calling the {@code deriveKey} or\n- * {@code deriveData} methods, the first provider supporting the KDF algorithm\n- * and {@code KDFParameters} is chosen which may not be the provider that is\n- * eventually selected once the {@code AlgorithmParameterSpec} is supplied in\n- * the derive methods; therefore it is recommended not to call\n- * {@code getProviderName} or {@code getKDFParameters} until after a key\n- * derivation operation. Once a provider is selected, it cannot be changed.\n- * <p>\n@@ -81,0 +68,30 @@\n+ * <br>\n+ * <h2><a id=\"ConcurrentAccess\">Concurrent Access<\/a><\/h2>\n+ * Unless otherwise documented by an implementation, the methods defined in\n+ * this class are not thread-safe. Multiple threads that need to access a\n+ * single object concurrently should synchronize amongst themselves and\n+ * provide the necessary locking. Multiple threads each manipulating separate\n+ * objects need not synchronize.\n+ * <br>\n+ * <h2><a id=\"DelayedProviderSelection\">Delayed Provider Selection<\/a><\/h2>\n+ * If a provider is not specified when calling one of the {@code getInstance}\n+ * methods, the implementation delays the selection of the provider until the\n+ * {@code deriveKey} or {@code deriveData} method is called. This is called\n+ * <i>delayed provider selection<\/i>. The primary reason this is done is to\n+ * ensure that the selected provider can handle the key material that is passed\n+ * to those methods - for example, the key material may reside on a\n+ * hardware device that only a specific {@code KDF} provider can utilize.\n+ * <p>\n+ * If a provider is not specified in the {@code getInstance} method when\n+ * instantiating a {@code KDF} object, the provider is selected the first time\n+ * the {@code deriveKey} or {@code deriveData} method is called, and a provider\n+ * is chosen that supports the parameters passed to the {@code deriveKey} or\n+ * {@code deriveData} method. However, if {@code getProviderName} or\n+ * {@code getParameters} is called before calling the {@code deriveKey} or\n+ * {@code deriveData} methods, the first provider supporting the KDF algorithm\n+ * and {@code KDFParameters} is chosen, which may not be the provider that is\n+ * eventually selected once the {@code AlgorithmParameterSpec} is supplied in\n+ * the derive methods. Therefore, it is recommended not to call\n+ * {@code getProviderName} or {@code getKDFParameters} until after a key\n+ * derivation operation. Once a provider is selected, it cannot be changed.\n+ *\n@@ -158,0 +175,2 @@\n+     * @see <a href=\"#DelayedProviderSelection\">Delayed Provider Selection<\/a>\n+     *\n@@ -175,0 +194,2 @@\n+     * @see <a href=\"#DelayedProviderSelection\">Delayed Provider Selection<\/a>\n+     *\n@@ -186,0 +207,2 @@\n+     * @see <a href=\"#DelayedProviderSelection\">Delayed Provider Selection<\/a>\n+     *\n@@ -287,0 +310,2 @@\n+     * @see <a href=\"#DelayedProviderSelection\">Delayed Provider Selection<\/a>\n+     *\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":38,"deletions":13,"binary":false,"changes":51,"status":"modified"}]}