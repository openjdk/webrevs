{"files":[{"patch":"@@ -176,1 +176,1 @@\n-                throw new InvalidAlgorithmParameterException(\n+                throw new AssertionError(\n@@ -186,2 +186,1 @@\n-                    \"Requested length exceeds maximum allowed key stream \"\n-                    + \"length\");\n+                    \"Requested length exceeds maximum allowed length\");\n@@ -227,2 +226,1 @@\n-                    \"Requested length exceeds maximum allowed key stream \"\n-                    + \"length\");\n+                    \"Requested length exceeds maximum allowed length\");\n@@ -335,1 +333,1 @@\n-        if (prk.getEncoded().length < hmacLen) {\n+        if (CipherCore.getKeyBytes(prk).length < hmacLen) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -477,2 +477,1 @@\n-     * @return a {@code SecretKey} object corresponding to a key built from the\n-     *     KDF output and according to the derivation parameters.\n+     * @return the derived key\n@@ -519,2 +518,1 @@\n-     * @return a byte array corresponding to the KDF output and according to\n-     * the derivation parameters.\n+     * @return the derived key in its raw bytes\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,1 +114,3 @@\n-     *     KDF output and according to the derivation parameters.\n+     *     KDF output and according to the derivation parameters. If the resultant\n+     *     key is extractable, then its {@code getEncoded} value should have the\n+     *     same content as the result of {@code deriveData}.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -287,1 +287,2 @@\n-     * 255 * HMAC length.\n+     * 255 * HMAC length. Implementations will also enforce that the prk is at least as\n+     * many bytes as the HMAC length.\n@@ -365,2 +366,6 @@\n-         *     the length of the output keying material (must be > 0 and < 255 *\n-         *     HMAC length)\n+         *     the length of the output keying material (must be greater than 0)\n+         *\n+         * @implNote HKDF implementations will enforce that the length is less than\n+         * 255 * HMAC length. Implementations will also enforce that the prk\n+         * calculated from the {@code Extract} phase, if applicable, is at least\n+         * as many bytes as the HMAC length.\n@@ -431,2 +436,6 @@\n-         *     the length of the output keying material (must be > 0 and < 255 *\n-         *     HMAC length)\n+         *     the length of the output keying material (must be greater than 0)\n+         *\n+         * @implNote HKDF implementations will enforce that the length is less than\n+         * 255 * HMAC length. Implementations will also enforce that the prk\n+         * calculated from the {@code Extract} phase is at least as many bytes\n+         * as the HMAC length.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    @Test(threadPoolSize = 50, invocationCount = 100, timeOut = 30)\n+    @Test(threadPoolSize = 50, invocationCount = 100, timeOut = 100)\n@@ -66,1 +66,1 @@\n-        SecretKey result = kdfUnderTest.deriveKey(\"AES\", kdfParameterSpec);\n+        SecretKey result = kdfUnderTest.deriveKey(\"Generic\", kdfParameterSpec);\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderSyncTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}