{"files":[{"patch":"@@ -33,8 +33,0 @@\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Utils;\n-\n-import javax.crypto.KDF;\n-import javax.crypto.KDFParameters;\n-import javax.crypto.SecretKey;\n-import javax.crypto.spec.HKDFParameterSpec;\n-import javax.crypto.spec.SecretKeySpec;\n@@ -50,0 +42,7 @@\n+import javax.crypto.KDF;\n+import javax.crypto.KDFParameters;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -53,27 +52,22 @@\n-    private static final String JDK_HKDF_SHA256 = \"HKDF-SHA256\";\n-    private static final String JDK_HKDF_SHA384 = \"HKDF-SHA384\";\n-    private static final String JDK_HKDF_SHA512 = \"HKDF-SHA512\";\n-    private static final String[] KDF_ALGORITHMS = {\n-            JDK_HKDF_SHA256,\n-            JDK_HKDF_SHA384,\n-            JDK_HKDF_SHA512\n-    };\n-    private static final String SUNJCE = \"SunJCE\";\n-\n-    \/\/ SECRET_KEY_SPEC_KEYS and RAW_DATA holds valid values for IKM and SALTS\n-    private static final List<SecretKey> SECRET_KEY_SPEC_KEYS = List.of(\n-            new SecretKeySpec(new byte[]{0}, \"HKDF-IKM\"),\n-            new SecretKeySpec(\"IKM\".getBytes(), \"HKDF-IKM\")\n-                                                                       );\n-    private static final List<byte[]> RAW_DATA = List.of(\n-            new byte[]{0},\n-            \"RAW\".getBytes()\n-                                                        );\n-\n-    private static final byte[] EMPTY = new byte[0];\n-    private static final int SHORT_LENGTH = 42;\n-    private static final int LARGE_LENGTH = 1000;\n-    private static final int NEGATIVE_LENGTH = -1;\n-\n-    private final static KdfVerifier<String, String, AlgorithmParameterSpec>\n-            KdfGetInstanceVerifier = (a, p, s) -> {\n+  private static final String JDK_HKDF_SHA256 = \"HKDF-SHA256\";\n+  private static final String JDK_HKDF_SHA384 = \"HKDF-SHA384\";\n+  private static final String JDK_HKDF_SHA512 = \"HKDF-SHA512\";\n+  private static final String[] KDF_ALGORITHMS = {\n+    JDK_HKDF_SHA256, JDK_HKDF_SHA384, JDK_HKDF_SHA512\n+  };\n+  private static final String SUNJCE = \"SunJCE\";\n+\n+  \/\/ SECRET_KEY_SPEC_KEYS and RAW_DATA holds valid values for IKM and SALTS\n+  private static final List<SecretKey> SECRET_KEY_SPEC_KEYS =\n+      List.of(\n+          new SecretKeySpec(new byte[] {0}, \"HKDF-IKM\"),\n+          new SecretKeySpec(\"IKM\".getBytes(), \"HKDF-IKM\"));\n+  private static final List<byte[]> RAW_DATA = List.of(new byte[] {0}, \"RAW\".getBytes());\n+\n+  private static final byte[] EMPTY = new byte[0];\n+  private static final int SHORT_LENGTH = 42;\n+  private static final int LARGE_LENGTH = 1000;\n+  private static final int NEGATIVE_LENGTH = -1;\n+\n+  private static final KdfVerifier<String, String, AlgorithmParameterSpec> KdfGetInstanceVerifier =\n+      (a, p, s) -> {\n@@ -103,1 +97,1 @@\n-    };\n+      };\n@@ -105,2 +99,2 @@\n-    private final static KdfExtractVerifier<Object, Object>\n-            KdfExtractVerifierImpl = (ikm, salt) -> {\n+  private static final KdfExtractVerifier<Object, Object> KdfExtractVerifierImpl =\n+      (ikm, salt) -> {\n@@ -108,2 +102,1 @@\n-        HKDFParameterSpec.Builder hkdfParameterSpecBuilder =\n-                HKDFParameterSpec.ofExtract();\n+        HKDFParameterSpec.Builder hkdfParameterSpecBuilder = HKDFParameterSpec.ofExtract();\n@@ -117,1 +110,1 @@\n-    };\n+      };\n@@ -119,2 +112,2 @@\n-    private final static KdfExpandVerifier<SecretKey, byte[], Integer>\n-            KdfExpandVerifierImpl = (prk, info, len) -> {\n+  private static final KdfExpandVerifier<SecretKey, byte[], Integer> KdfExpandVerifierImpl =\n+      (prk, info, len) -> {\n@@ -129,1 +122,1 @@\n-    };\n+      };\n@@ -131,5 +124,6 @@\n-    private final static KdfExtThenExpVerifier<Object, Object, byte[], Integer>\n-            KdfExtThenExpVerifierImpl = (ikm, salt, info, len) -> {\n-        \/\/ ofExtract\n-        HKDFParameterSpec.Builder hkdfParameterSpecBuilder = HKDFParameterSpec.ofExtract();\n-        addIkmAndSalt(hkdfParameterSpecBuilder, ikm, salt);\n+  private static final KdfExtThenExpVerifier<Object, Object, byte[], Integer>\n+      KdfExtThenExpVerifierImpl =\n+          (ikm, salt, info, len) -> {\n+            \/\/ ofExtract\n+            HKDFParameterSpec.Builder hkdfParameterSpecBuilder = HKDFParameterSpec.ofExtract();\n+            addIkmAndSalt(hkdfParameterSpecBuilder, ikm, salt);\n@@ -137,2 +131,2 @@\n-        \/\/ thenExpand\n-        HKDFParameterSpec.ExtractThenExpand parameterSpec =\n+            \/\/ thenExpand\n+            HKDFParameterSpec.ExtractThenExpand parameterSpec =\n@@ -140,76 +134,26 @@\n-        checkIKMSaltPresence(ikm, salt, parameterSpec);\n-\n-        \/\/ Validate info and length\n-        Asserts.assertEqualsByteArray(info, parameterSpec.info());\n-        Asserts.assertEquals(len, parameterSpec.length());\n-\n-        return parameterSpec;\n-    };\n-\n-    private static void checkIKMSaltPresence(Object ikm, Object salt,\n-                                             HKDFParameterSpec parameterSpec) {\n-        final List<SecretKey> ikms;\n-        final List<SecretKey> salts;\n-        if(parameterSpec instanceof HKDFParameterSpec.Extract) {\n-            ikms = ((HKDFParameterSpec.Extract)parameterSpec).ikms();\n-            salts = ((HKDFParameterSpec.Extract)parameterSpec).salts();\n-        } else { \/\/ must be HKDFParameterSpec.ExtractThenExpand\n-            ikms = ((HKDFParameterSpec.ExtractThenExpand)parameterSpec).ikms();\n-            salts = ((HKDFParameterSpec.ExtractThenExpand)parameterSpec).salts();\n-        }\n-        if ((ikm instanceof SecretKey) || ((byte[]) ikm).length != 0) {\n-            Asserts.assertTrue(ikms.contains(getSecretKey(ikm)));\n-        }\n-\n-        if ((salt instanceof SecretKey) || ((byte[]) salt).length != 0) {\n-            Asserts.assertTrue(salts.contains(getSecretKey(salt)));\n-        }\n-    }\n-\n-    private final static DeriveComparator<KDF, HKDFParameterSpec, HKDFParameterSpec, String, SecretKey, Integer>\n-            deriveComparatorImpl = (hk, lhs, rhs, t, s, len) -> {\n-        \/\/ deriveKey using two passed in HKDFParameterSpec and compare\n-        byte[] skUsingLhs = hk.deriveKey(t, lhs).getEncoded();\n-        byte[] skUsingRhs = hk.deriveKey(t, rhs).getEncoded();\n-\n-        \/\/ compare deriveData and keys using same HKDFParameterSpec are equal\n-        Asserts.assertEqualsByteArray(skUsingLhs, skUsingRhs);\n-        Asserts.assertEqualsByteArray(hk.deriveData(lhs), skUsingLhs);\n-        Asserts.assertEqualsByteArray(hk.deriveData(lhs), skUsingRhs);\n-        Asserts.assertEqualsByteArray(hk.deriveData(lhs), hk.deriveData(rhs));\n-\n-        \/\/ if 'len < 0' then deriveKey()\/deriveData() length check is not required\n-        if (len >= 0) {\n-            Asserts.assertEquals(skUsingLhs.length, len);\n-        }\n-\n-        \/\/ Compare with if SecretKey is passed in parameter\n-        if (s != null) {\n-            Asserts.assertEqualsByteArray(\n-                    skUsingLhs, s.getEncoded());\n-        }\n-    };\n-    \/\/ Passed in HKDFParameterSpec returned from different methods and algorithms a1, a2.\n-    \/\/ Keys and data derived should be equal.\n-    private final static DeriveVerifier<KDF, HKDFParameterSpec, HKDFParameterSpec, String, String>\n-            deriveVerifierImpl = (hk, lhs, rhs, a1, a2) -> {\n-        SecretKey sk1 = hk.deriveKey(a1, lhs);\n-        SecretKey sk2 = hk.deriveKey(a2, rhs);\n-        Asserts.assertEqualsByteArray(sk1.getEncoded(), sk2.getEncoded());\n-\n-        byte[] bk1 = hk.deriveData(lhs);\n-        Asserts.assertEqualsByteArray(bk1, sk1.getEncoded());\n-    };\n-\n-    private static SecretKey getSecretKey(Object data) {\n-        return (data instanceof SecretKey)\n-                       ? (SecretKey) data\n-                       : new SecretKeySpec((byte[]) data, \"Generic\");\n-    }\n-\n-    private static void addIkmAndSalt(HKDFParameterSpec.Builder hkdfParameterSpecBuilder, Object ikm, Object salt) {\n-        if (ikm instanceof SecretKey) {\n-            hkdfParameterSpecBuilder.addIKM((SecretKey) ikm);\n-        } else {\n-            hkdfParameterSpecBuilder.addIKM((byte[]) ikm);\n-        }\n+            checkIKMSaltPresence(ikm, salt, parameterSpec);\n+\n+            \/\/ Validate info and length\n+            Asserts.assertEqualsByteArray(info, parameterSpec.info());\n+            Asserts.assertEquals(len, parameterSpec.length());\n+\n+            return parameterSpec;\n+          };\n+  private static final DeriveComparator<\n+          KDF, HKDFParameterSpec, HKDFParameterSpec, String, SecretKey, Integer>\n+      deriveComparatorImpl =\n+          (hk, lhs, rhs, t, s, len) -> {\n+            \/\/ deriveKey using two passed in HKDFParameterSpec and compare\n+            byte[] skUsingLhs = hk.deriveKey(t, lhs).getEncoded();\n+            byte[] skUsingRhs = hk.deriveKey(t, rhs).getEncoded();\n+\n+            \/\/ compare deriveData and keys using same HKDFParameterSpec are equal\n+            Asserts.assertEqualsByteArray(skUsingLhs, skUsingRhs);\n+            Asserts.assertEqualsByteArray(hk.deriveData(lhs), skUsingLhs);\n+            Asserts.assertEqualsByteArray(hk.deriveData(lhs), skUsingRhs);\n+            Asserts.assertEqualsByteArray(hk.deriveData(lhs), hk.deriveData(rhs));\n+\n+            \/\/ if 'len < 0' then deriveKey()\/deriveData() length check is not required\n+            if (len >= 0) {\n+              Asserts.assertEquals(skUsingLhs.length, len);\n+            }\n@@ -217,5 +161,28 @@\n-        if (salt instanceof SecretKey) {\n-            hkdfParameterSpecBuilder.addSalt((SecretKey) salt);\n-        } else {\n-            hkdfParameterSpecBuilder.addSalt((byte[]) salt);\n-        }\n+            \/\/ Compare with if SecretKey is passed in parameter\n+            if (s != null) {\n+              Asserts.assertEqualsByteArray(skUsingLhs, s.getEncoded());\n+            }\n+          };\n+  \/\/ Passed in HKDFParameterSpec returned from different methods and algorithms a1, a2.\n+  \/\/ Keys and data derived should be equal.\n+  private static final DeriveVerifier<KDF, HKDFParameterSpec, HKDFParameterSpec, String, String>\n+      deriveVerifierImpl =\n+          (hk, lhs, rhs, a1, a2) -> {\n+            SecretKey sk1 = hk.deriveKey(a1, lhs);\n+            SecretKey sk2 = hk.deriveKey(a2, rhs);\n+            Asserts.assertEqualsByteArray(sk1.getEncoded(), sk2.getEncoded());\n+\n+            byte[] bk1 = hk.deriveData(lhs);\n+            Asserts.assertEqualsByteArray(bk1, sk1.getEncoded());\n+          };\n+\n+  private static void checkIKMSaltPresence(\n+      Object ikm, Object salt, HKDFParameterSpec parameterSpec) {\n+    final List<SecretKey> ikms;\n+    final List<SecretKey> salts;\n+    if (parameterSpec instanceof HKDFParameterSpec.Extract) {\n+      ikms = ((HKDFParameterSpec.Extract) parameterSpec).ikms();\n+      salts = ((HKDFParameterSpec.Extract) parameterSpec).salts();\n+    } else { \/\/ must be HKDFParameterSpec.ExtractThenExpand\n+      ikms = ((HKDFParameterSpec.ExtractThenExpand) parameterSpec).ikms();\n+      salts = ((HKDFParameterSpec.ExtractThenExpand) parameterSpec).salts();\n@@ -223,34 +190,2 @@\n-\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"Starting Test '\" + HKDFExhaustiveTest.class.getName() + \"'\");\n-\n-        \/\/ Test KDF.getInstance methods\n-        System.out.println(\"Testing getInstance methods\");\n-        testGetInstanceMethods();\n-        testGetInstanceNegative();\n-\n-        \/* Executing following test cases with one supported algorithm is sufficient *\/\n-        KDF hk = KDF.getInstance(KDF_ALGORITHMS[0]);\n-\n-        \/\/ Test extract\n-        System.out.println(\"Testing extract method\");\n-        testExtractMethod(hk);\n-\n-        System.out.println(\"Testing deriveKey and deriveData with extract method\");\n-        testDeriveKeyDataWithExtract(hk);\n-\n-        \/\/ Test expand\n-        System.out.println(\"Testing expand method\");\n-        testExpandMethod(hk);\n-\n-        System.out.println(\"Testing deriveKey and deriveData with expand method\");\n-        testDeriveKeyDataWithExpand(hk);\n-\n-        \/\/ Test ExtractThenExpand\n-        System.out.println(\"Testing extractThenExpand method\");\n-        testExtractExpandMethod(hk);\n-\n-        System.out.println(\"Testing deriveKey and deriveData with extExpand method\");\n-        testDeriveKeyDataWithExtExpand(hk);\n-\n-        System.out.println(\"Test executed successfully.\");\n+    if ((ikm instanceof SecretKey) || ((byte[]) ikm).length != 0) {\n+      Asserts.assertTrue(ikms.contains(getSecretKey(ikm)));\n@@ -259,6 +194,2 @@\n-    private static void testGetInstanceMethods() throws InvalidAlgorithmParameterException\n-                                                                , NoSuchAlgorithmException, NoSuchProviderException {\n-        \/\/ POSITIVE TestCase: KDF getInstance methods test\n-        for (String algo : KDF_ALGORITHMS) {\n-            KdfGetInstanceVerifier.test(algo, SUNJCE, null);\n-        }\n+    if ((salt instanceof SecretKey) || ((byte[]) salt).length != 0) {\n+      Asserts.assertTrue(salts.contains(getSecretKey(salt)));\n@@ -266,67 +197,14 @@\n-\n-    private static void testGetInstanceNegative() {\n-        final String INVALID_STRING = \"INVALID\";\n-        final Provider SUNJCE_PROVIDER = Security.getProvider(SUNJCE);\n-\n-        \/\/ getInstance(String algorithm)\n-        Utils.runAndCheckException(() -> KDF.getInstance(null),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(INVALID_STRING),\n-                                   NoSuchAlgorithmException.class);\n-\n-        \/\/ getInstance(String algorithm, String provider)\n-        Utils.runAndCheckException(() -> KDF.getInstance(null, SUNJCE),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(INVALID_STRING, SUNJCE),\n-                                   NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0], (String) null),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0], INVALID_STRING),\n-                                   NoSuchProviderException.class);\n-\n-        \/\/ getInstance(String algorithm, Provider provider)\n-        Utils.runAndCheckException(() -> KDF.getInstance(null, SUNJCE_PROVIDER),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(INVALID_STRING, SUNJCE_PROVIDER),\n-                                   NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0], (Provider) null),\n-                                   NullPointerException.class);\n-\n-        \/\/ getInstance(String algorithm, KDFParameters kdfParameters)\n-        \/\/ null spec is a valid case but different class is not\n-        Utils.runAndCheckException(() -> KDF.getInstance(null, (KDFParameters) null),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(INVALID_STRING, (KDFParameters) null),\n-                                   NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0],\n-                                                         (KDFParameters) new KDFAlgorithmParameterSpec()),\n-                                   ClassCastException.class);\n-\n-        \/\/ getInstance(String algorithm, KDFParameters kdfParameters, String provider)\n-        Utils.runAndCheckException(() -> KDF.getInstance(null, null, SUNJCE),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(INVALID_STRING, null, SUNJCE),\n-                                   NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0],\n-                                                         (KDFParameters) new KDFAlgorithmParameterSpec(), SUNJCE),\n-                                   ClassCastException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0],\n-                                                         null, (String) null),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0],\n-                                                         null, INVALID_STRING),\n-                                   NoSuchProviderException.class);\n-\n-        \/\/ getInstance(String algorithm, KDFParameters kdfParameters, Provider provider)\n-        Utils.runAndCheckException(() ->\n-                                           KDF.getInstance(null, null, SUNJCE_PROVIDER),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() ->\n-                                           KDF.getInstance(INVALID_STRING, null, SUNJCE_PROVIDER),\n-                                   NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(() -> KDF.getInstance(KDF_ALGORITHMS[0],\n-                                                         (KDFParameters) new KDFAlgorithmParameterSpec(), SUNJCE_PROVIDER),\n-                                   ClassCastException.class);\n-        Utils.runAndCheckException(() ->\n-                                           KDF.getInstance(KDF_ALGORITHMS[0], null, (Provider) null),\n-                                   NullPointerException.class);\n+  }\n+\n+  private static SecretKey getSecretKey(Object data) {\n+    return (data instanceof SecretKey)\n+        ? (SecretKey) data\n+        : new SecretKeySpec((byte[]) data, \"Generic\");\n+  }\n+\n+  private static void addIkmAndSalt(\n+      HKDFParameterSpec.Builder hkdfParameterSpecBuilder, Object ikm, Object salt) {\n+    if (ikm instanceof SecretKey) {\n+      hkdfParameterSpecBuilder.addIKM((SecretKey) ikm);\n+    } else {\n+      hkdfParameterSpecBuilder.addIKM((byte[]) ikm);\n@@ -335,22 +213,4 @@\n-    private static void testExtractMethod(KDF hk) throws InvalidAlgorithmParameterException\n-                                                                 , InvalidParameterSpecException, NoSuchAlgorithmException {\n-        List<Object> ikmSaltTestData = new ArrayList<>();\n-        ikmSaltTestData.add(null);\n-        ikmSaltTestData.add(EMPTY);\n-        ikmSaltTestData.add(RAW_DATA.getFirst());\n-        ikmSaltTestData.add(SECRET_KEY_SPEC_KEYS.getFirst());\n-\n-        for (Object ikm : ikmSaltTestData) {\n-            for (Object salt : ikmSaltTestData) {\n-                \/\/ NEGATIVE Testcase: expects NullPointerException\n-                if (ikm == null || salt == null) {\n-                    Utils.runAndCheckException(() -> KdfExtractVerifierImpl.extract(ikm, salt),\n-                                               NullPointerException.class);\n-                } else {\n-                    \/\/ POSITIVE Testcase: Extract - Empty bytes for IKM\/SALT\n-                    HKDFParameterSpec ext1 = KdfExtractVerifierImpl.extract(ikm, salt);\n-                    HKDFParameterSpec ext2 = KdfExtractVerifierImpl.extract(ikm, salt);\n-                    deriveComparatorImpl.deriveAndCompare(hk, ext1, ext2, \"PRK\", null, NEGATIVE_LENGTH);\n-                }\n-            }\n-        }\n+    if (salt instanceof SecretKey) {\n+      hkdfParameterSpecBuilder.addSalt((SecretKey) salt);\n+    } else {\n+      hkdfParameterSpecBuilder.addSalt((byte[]) salt);\n@@ -358,0 +218,1 @@\n+  }\n@@ -359,17 +220,2 @@\n-    private static void testDeriveKeyDataWithExtract(KDF hk) throws InvalidAlgorithmParameterException,\n-                                                                    InvalidParameterSpecException, NoSuchAlgorithmException {\n-        \/\/ POSITIVE TestCase: Extract - Derive keys\/data with unknown algorithm name\n-        deriveVerifierImpl.derive(hk,\n-                                  KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst()),\n-                                  KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst()),\n-                                  \"XYZ\",\n-                                  \"ABC\");\n-\n-        \/\/ NEGATIVE TestCase: Extract - {null, \"\"} algo to derive key\n-        Utils.runAndCheckException(() -> hk.deriveKey(null,\n-                                                      KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst())),\n-                                   NullPointerException.class);\n-        Utils.runAndCheckException(() -> hk.deriveKey(\"\",\n-                                                      KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst())),\n-                                   NoSuchAlgorithmException.class);\n-    }\n+  public static void main(String[] args) throws Exception {\n+    System.out.println(\"Starting Test '\" + HKDFExhaustiveTest.class.getName() + \"'\");\n@@ -377,18 +223,4 @@\n-    private static void testExpandMethod(KDF hk) throws InvalidAlgorithmParameterException\n-                                                                , InvalidParameterSpecException, NoSuchAlgorithmException {\n-        SecretKey prk = hk.deriveKey(\"PRK\",\n-                                     KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.get(1), RAW_DATA.getFirst()));\n-\n-        \/\/ Test extExp with {null, EMPTY} info and {SHORT_LENGTH, LARGE_LENGTH} length\n-        for (byte[] info : new byte[][]{null, EMPTY}) {\n-            for (int length : new Integer[]{SHORT_LENGTH, LARGE_LENGTH}) {\n-                HKDFParameterSpec exp1 = KdfExpandVerifierImpl.expand(prk, info, length);\n-                HKDFParameterSpec exp2 = KdfExpandVerifierImpl.expand(prk, info, length);\n-                deriveComparatorImpl.deriveAndCompare(hk,\n-                                                      exp1,\n-                                                      exp2,\n-                                                      \"OKM\",\n-                                                      null,\n-                                                      length);\n-            }\n-        }\n+    \/\/ Test KDF.getInstance methods\n+    System.out.println(\"Testing getInstance methods\");\n+    testGetInstanceMethods();\n+    testGetInstanceNegative();\n@@ -396,4 +228,2 @@\n-        \/\/ NEGATIVE TestCase: Expand - PRK=null\n-        Utils.runAndCheckException(() -> KdfExpandVerifierImpl.expand(null,\n-                                                                      RAW_DATA.getFirst(), SHORT_LENGTH),\n-                                   NullPointerException.class);\n+    \/* Executing following test cases with one supported algorithm is sufficient *\/\n+    KDF hk = KDF.getInstance(KDF_ALGORITHMS[0]);\n@@ -401,5 +231,3 @@\n-        \/\/ NEGATIVE TestCase: Expand - Derive keys\/data of negative length\n-        Utils.runAndCheckException(() -> KdfExpandVerifierImpl.expand(SECRET_KEY_SPEC_KEYS.getFirst(),\n-                                                                      RAW_DATA.getFirst(), NEGATIVE_LENGTH),\n-                                   IllegalArgumentException.class);\n-    }\n+    \/\/ Test extract\n+    System.out.println(\"Testing extract method\");\n+    testExtractMethod(hk);\n@@ -407,18 +235,2 @@\n-    private static void testDeriveKeyDataWithExpand(KDF hk) throws InvalidAlgorithmParameterException,\n-                                                                   NoSuchAlgorithmException, InvalidParameterSpecException {\n-        SecretKey prk = hk.deriveKey(\"PRK\",\n-                                     KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.get(1), RAW_DATA.getFirst()));\n-\n-        \/\/ POSITIVE TestCase: Expand - Derive keys\/data with unknown algorithm name\n-        deriveVerifierImpl.derive(hk,\n-                                  KdfExpandVerifierImpl.expand(prk, RAW_DATA.getFirst(), SHORT_LENGTH),\n-                                  KdfExpandVerifierImpl.expand(prk, RAW_DATA.getFirst(), SHORT_LENGTH),\n-                                  \"XYZ\",\n-                                  \"ABC\");\n-\n-        \/\/ NEGATIVE TestCase: Expand - PRK is not derived\n-        Utils.runAndCheckException(() -> hk.deriveKey(\"PRK\",\n-                                                      KdfExpandVerifierImpl.expand(SECRET_KEY_SPEC_KEYS.get(1),\n-                                                                                   RAW_DATA.getFirst(),\n-                                                                                   SHORT_LENGTH)),\n-                                   InvalidAlgorithmParameterException.class);\n+    System.out.println(\"Testing deriveKey and deriveData with extract method\");\n+    testDeriveKeyDataWithExtract(hk);\n@@ -426,1 +238,3 @@\n-    }\n+    \/\/ Test expand\n+    System.out.println(\"Testing expand method\");\n+    testExpandMethod(hk);\n@@ -428,52 +242,2 @@\n-    private static void testExtractExpandMethod(KDF hk) throws InvalidAlgorithmParameterException\n-                                                                       , InvalidParameterSpecException, NoSuchAlgorithmException {\n-        \/\/ Test extExp with {null, EMPTY} info and {SHORT_LENGTH, LARGE_LENGTH} length\n-        for (byte[] info : new byte[][]{null, EMPTY}) {\n-            for (int length : new Integer[]{SHORT_LENGTH, LARGE_LENGTH}) {\n-                HKDFParameterSpec extractExpand1 =\n-                        KdfExtThenExpVerifierImpl.extExp(RAW_DATA.getFirst(),\n-                                                         RAW_DATA.getFirst(),\n-                                                         info,\n-                                                         length);\n-                HKDFParameterSpec extractExpand2 =\n-                        KdfExtThenExpVerifierImpl.extExp(RAW_DATA.getFirst(),\n-                                                         RAW_DATA.getFirst(),\n-                                                         info,\n-                                                         length);\n-                deriveComparatorImpl.deriveAndCompare(hk,\n-                                                      extractExpand1,\n-                                                      extractExpand2,\n-                                                      \"OKM\",\n-                                                      null,\n-                                                      length);\n-            }\n-        }\n-\n-        \/\/ NEGATIVE TestCases: ExtractExpand\n-        List<Object> ikmSaltTestData = new ArrayList<>();\n-        ikmSaltTestData.add(null);\n-        ikmSaltTestData.add(RAW_DATA.getFirst());\n-        ikmSaltTestData.add(SECRET_KEY_SPEC_KEYS.getFirst());\n-\n-        for (Object ikm : ikmSaltTestData) {\n-            for (Object salt : ikmSaltTestData) {\n-                if (ikm == null || salt == null) {\n-                    \/\/ ikm and\/or salt are null, expect NullPointerException\n-                    Utils.runAndCheckException(() ->\n-                                                       KdfExtThenExpVerifierImpl.extExp(ikm,\n-                                                                                        salt,\n-                                                                                        RAW_DATA.getFirst(),\n-                                                                                        SHORT_LENGTH),\n-                                               NullPointerException.class);\n-                } else {\n-                    \/\/ ikm and salt are not null, test with negative length\n-                    Utils.runAndCheckException(() ->\n-                                                       KdfExtThenExpVerifierImpl.extExp(ikm,\n-                                                                                        salt,\n-                                                                                        RAW_DATA.getFirst(),\n-                                                                                        NEGATIVE_LENGTH),\n-                                               IllegalArgumentException.class);\n-                }\n-            }\n-        }\n-    }\n+    System.out.println(\"Testing deriveKey and deriveData with expand method\");\n+    testDeriveKeyDataWithExpand(hk);\n@@ -481,15 +245,3 @@\n-    private static void testDeriveKeyDataWithExtExpand(KDF hk)\n-            throws InvalidAlgorithmParameterException, InvalidParameterSpecException, NoSuchAlgorithmException {\n-        \/\/ POSITIVE TestCase: ExtractExpand - Derive keys\/data with unknown algorithm names\n-        deriveVerifierImpl.derive(hk,\n-                                  KdfExtThenExpVerifierImpl.extExp(SECRET_KEY_SPEC_KEYS.getFirst(),\n-                                                                   RAW_DATA.getFirst(),\n-                                                                   RAW_DATA.getFirst(),\n-                                                                   SHORT_LENGTH),\n-                                  KdfExtThenExpVerifierImpl.extExp(SECRET_KEY_SPEC_KEYS.getFirst(),\n-                                                                   RAW_DATA.getFirst(),\n-                                                                   RAW_DATA.getFirst(),\n-                                                                   SHORT_LENGTH),\n-                                  \"XYZ\",\n-                                  \"ABC\");\n-    }\n+    \/\/ Test ExtractThenExpand\n+    System.out.println(\"Testing extractThenExpand method\");\n+    testExtractExpandMethod(hk);\n@@ -497,7 +249,2 @@\n-    @FunctionalInterface\n-    private interface KdfVerifier<A, P, S> {\n-        void test(A a, P p, S s)\n-                throws NoSuchAlgorithmException,\n-                       NoSuchProviderException,\n-                       InvalidAlgorithmParameterException;\n-    }\n+    System.out.println(\"Testing deriveKey and deriveData with extExpand method\");\n+    testDeriveKeyDataWithExtExpand(hk);\n@@ -505,4 +252,2 @@\n-    @FunctionalInterface\n-    private interface KdfExtractVerifier<K, S> {\n-        HKDFParameterSpec extract(K k, S s);\n-    }\n+    System.out.println(\"Test executed successfully.\");\n+  }\n@@ -510,3 +255,5 @@\n-    @FunctionalInterface\n-    private interface KdfExpandVerifier<P, I, L> {\n-        HKDFParameterSpec expand(P p, I i, L l);\n+  private static void testGetInstanceMethods()\n+      throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {\n+    \/\/ POSITIVE TestCase: KDF getInstance methods test\n+    for (String algo : KDF_ALGORITHMS) {\n+      KdfGetInstanceVerifier.test(algo, SUNJCE, null);\n@@ -514,4 +261,96 @@\n-\n-    @FunctionalInterface\n-    private interface KdfExtThenExpVerifier<K, S, I, L> {\n-        HKDFParameterSpec extExp(K k, S s, I i, L l);\n+  }\n+\n+  private static void testGetInstanceNegative() {\n+    final String INVALID_STRING = \"INVALID\";\n+    final Provider SUNJCE_PROVIDER = Security.getProvider(SUNJCE);\n+\n+    \/\/ getInstance(String algorithm)\n+    Utils.runAndCheckException(() -> KDF.getInstance(null), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING), NoSuchAlgorithmException.class);\n+\n+    \/\/ getInstance(String algorithm, String provider)\n+    Utils.runAndCheckException(() -> KDF.getInstance(null, SUNJCE), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING, SUNJCE), NoSuchAlgorithmException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], (String) null), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], INVALID_STRING), NoSuchProviderException.class);\n+\n+    \/\/ getInstance(String algorithm, Provider provider)\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(null, SUNJCE_PROVIDER), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING, SUNJCE_PROVIDER), NoSuchAlgorithmException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], (Provider) null), NullPointerException.class);\n+\n+    \/\/ getInstance(String algorithm, KDFParameters kdfParameters)\n+    \/\/ null spec is a valid case but different class is not\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(null, (KDFParameters) null), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING, (KDFParameters) null),\n+        NoSuchAlgorithmException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], (KDFParameters) new KDFAlgorithmParameterSpec()),\n+        ClassCastException.class);\n+\n+    \/\/ getInstance(String algorithm, KDFParameters kdfParameters, String provider)\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(null, null, SUNJCE), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING, null, SUNJCE), NoSuchAlgorithmException.class);\n+    Utils.runAndCheckException(\n+        () ->\n+            KDF.getInstance(\n+                KDF_ALGORITHMS[0], (KDFParameters) new KDFAlgorithmParameterSpec(), SUNJCE),\n+        ClassCastException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], null, (String) null), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], null, INVALID_STRING),\n+        NoSuchProviderException.class);\n+\n+    \/\/ getInstance(String algorithm, KDFParameters kdfParameters, Provider provider)\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(null, null, SUNJCE_PROVIDER), NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(INVALID_STRING, null, SUNJCE_PROVIDER),\n+        NoSuchAlgorithmException.class);\n+    Utils.runAndCheckException(\n+        () ->\n+            KDF.getInstance(\n+                KDF_ALGORITHMS[0],\n+                (KDFParameters) new KDFAlgorithmParameterSpec(),\n+                SUNJCE_PROVIDER),\n+        ClassCastException.class);\n+    Utils.runAndCheckException(\n+        () -> KDF.getInstance(KDF_ALGORITHMS[0], null, (Provider) null),\n+        NullPointerException.class);\n+  }\n+\n+  private static void testExtractMethod(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          InvalidParameterSpecException,\n+          NoSuchAlgorithmException {\n+    List<Object> ikmSaltTestData = new ArrayList<>();\n+    ikmSaltTestData.add(null);\n+    ikmSaltTestData.add(EMPTY);\n+    ikmSaltTestData.add(RAW_DATA.getFirst());\n+    ikmSaltTestData.add(SECRET_KEY_SPEC_KEYS.getFirst());\n+\n+    for (Object ikm : ikmSaltTestData) {\n+      for (Object salt : ikmSaltTestData) {\n+        \/\/ NEGATIVE Testcase: expects NullPointerException\n+        if (ikm == null || salt == null) {\n+          Utils.runAndCheckException(\n+              () -> KdfExtractVerifierImpl.extract(ikm, salt), NullPointerException.class);\n+        } else {\n+          \/\/ POSITIVE Testcase: Extract - Empty bytes for IKM\/SALT\n+          HKDFParameterSpec ext1 = KdfExtractVerifierImpl.extract(ikm, salt);\n+          HKDFParameterSpec ext2 = KdfExtractVerifierImpl.extract(ikm, salt);\n+          deriveComparatorImpl.deriveAndCompare(hk, ext1, ext2, \"PRK\", null, NEGATIVE_LENGTH);\n+        }\n+      }\n@@ -519,7 +358,47 @@\n-\n-    @FunctionalInterface\n-    private interface DeriveComparator<HK, L, R, T, S, LN> {\n-        void deriveAndCompare(HK hk, L lh, R rh, T t, S s, LN l)\n-                throws InvalidParameterSpecException,\n-                       InvalidAlgorithmParameterException,\n-                       NoSuchAlgorithmException;\n+  }\n+\n+  private static void testDeriveKeyDataWithExtract(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          InvalidParameterSpecException,\n+          NoSuchAlgorithmException {\n+    \/\/ POSITIVE TestCase: Extract - Derive keys\/data with unknown algorithm name\n+    deriveVerifierImpl.derive(\n+        hk,\n+        KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst()),\n+        KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst()),\n+        \"XYZ\",\n+        \"ABC\");\n+\n+    \/\/ NEGATIVE TestCase: Extract - {null, \"\"} algo to derive key\n+    Utils.runAndCheckException(\n+        () ->\n+            hk.deriveKey(\n+                null,\n+                KdfExtractVerifierImpl.extract(\n+                    SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst())),\n+        NullPointerException.class);\n+    Utils.runAndCheckException(\n+        () ->\n+            hk.deriveKey(\n+                \"\",\n+                KdfExtractVerifierImpl.extract(\n+                    SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst())),\n+        NoSuchAlgorithmException.class);\n+  }\n+\n+  private static void testExpandMethod(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          InvalidParameterSpecException,\n+          NoSuchAlgorithmException {\n+    SecretKey prk =\n+        hk.deriveKey(\n+            \"PRK\",\n+            KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.get(1), RAW_DATA.getFirst()));\n+\n+    \/\/ Test extExp with {null, EMPTY} info and {SHORT_LENGTH, LARGE_LENGTH} length\n+    for (byte[] info : new byte[][] {null, EMPTY}) {\n+      for (int length : new Integer[] {SHORT_LENGTH, LARGE_LENGTH}) {\n+        HKDFParameterSpec exp1 = KdfExpandVerifierImpl.expand(prk, info, length);\n+        HKDFParameterSpec exp2 = KdfExpandVerifierImpl.expand(prk, info, length);\n+        deriveComparatorImpl.deriveAndCompare(hk, exp1, exp2, \"OKM\", null, length);\n+      }\n@@ -528,6 +407,56 @@\n-    @FunctionalInterface\n-    private interface DeriveVerifier<HK, L, R, A1, A2> {\n-        void derive(HK hk, L lh, R rh, A1 a1, A2 a2)\n-                throws InvalidParameterSpecException,\n-                       InvalidAlgorithmParameterException,\n-                       NoSuchAlgorithmException;\n+    \/\/ NEGATIVE TestCase: Expand - PRK=null\n+    Utils.runAndCheckException(\n+        () -> KdfExpandVerifierImpl.expand(null, RAW_DATA.getFirst(), SHORT_LENGTH),\n+        NullPointerException.class);\n+\n+    \/\/ NEGATIVE TestCase: Expand - Derive keys\/data of negative length\n+    Utils.runAndCheckException(\n+        () ->\n+            KdfExpandVerifierImpl.expand(\n+                SECRET_KEY_SPEC_KEYS.getFirst(), RAW_DATA.getFirst(), NEGATIVE_LENGTH),\n+        IllegalArgumentException.class);\n+  }\n+\n+  private static void testDeriveKeyDataWithExpand(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          NoSuchAlgorithmException,\n+          InvalidParameterSpecException {\n+    SecretKey prk =\n+        hk.deriveKey(\n+            \"PRK\",\n+            KdfExtractVerifierImpl.extract(SECRET_KEY_SPEC_KEYS.get(1), RAW_DATA.getFirst()));\n+\n+    \/\/ POSITIVE TestCase: Expand - Derive keys\/data with unknown algorithm name\n+    deriveVerifierImpl.derive(\n+        hk,\n+        KdfExpandVerifierImpl.expand(prk, RAW_DATA.getFirst(), SHORT_LENGTH),\n+        KdfExpandVerifierImpl.expand(prk, RAW_DATA.getFirst(), SHORT_LENGTH),\n+        \"XYZ\",\n+        \"ABC\");\n+\n+    \/\/ NEGATIVE TestCase: Expand - PRK is not derived\n+    Utils.runAndCheckException(\n+        () ->\n+            hk.deriveKey(\n+                \"PRK\",\n+                KdfExpandVerifierImpl.expand(\n+                    SECRET_KEY_SPEC_KEYS.get(1), RAW_DATA.getFirst(), SHORT_LENGTH)),\n+        InvalidAlgorithmParameterException.class);\n+  }\n+\n+  private static void testExtractExpandMethod(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          InvalidParameterSpecException,\n+          NoSuchAlgorithmException {\n+    \/\/ Test extExp with {null, EMPTY} info and {SHORT_LENGTH, LARGE_LENGTH} length\n+    for (byte[] info : new byte[][] {null, EMPTY}) {\n+      for (int length : new Integer[] {SHORT_LENGTH, LARGE_LENGTH}) {\n+        HKDFParameterSpec extractExpand1 =\n+            KdfExtThenExpVerifierImpl.extExp(\n+                RAW_DATA.getFirst(), RAW_DATA.getFirst(), info, length);\n+        HKDFParameterSpec extractExpand2 =\n+            KdfExtThenExpVerifierImpl.extExp(\n+                RAW_DATA.getFirst(), RAW_DATA.getFirst(), info, length);\n+        deriveComparatorImpl.deriveAndCompare(\n+            hk, extractExpand1, extractExpand2, \"OKM\", null, length);\n+      }\n@@ -536,2 +465,19 @@\n-    private static class KDFAlgorithmParameterSpec implements AlgorithmParameterSpec {\n-        public KDFAlgorithmParameterSpec() {\n+    \/\/ NEGATIVE TestCases: ExtractExpand\n+    List<Object> ikmSaltTestData = new ArrayList<>();\n+    ikmSaltTestData.add(null);\n+    ikmSaltTestData.add(RAW_DATA.getFirst());\n+    ikmSaltTestData.add(SECRET_KEY_SPEC_KEYS.getFirst());\n+\n+    for (Object ikm : ikmSaltTestData) {\n+      for (Object salt : ikmSaltTestData) {\n+        if (ikm == null || salt == null) {\n+          \/\/ ikm and\/or salt are null, expect NullPointerException\n+          Utils.runAndCheckException(\n+              () -> KdfExtThenExpVerifierImpl.extExp(ikm, salt, RAW_DATA.getFirst(), SHORT_LENGTH),\n+              NullPointerException.class);\n+        } else {\n+          \/\/ ikm and salt are not null, test with negative length\n+          Utils.runAndCheckException(\n+              () ->\n+                  KdfExtThenExpVerifierImpl.extExp(ikm, salt, RAW_DATA.getFirst(), NEGATIVE_LENGTH),\n+              IllegalArgumentException.class);\n@@ -539,0 +485,1 @@\n+      }\n@@ -540,1 +487,66 @@\n-}\n\\ No newline at end of file\n+  }\n+\n+  private static void testDeriveKeyDataWithExtExpand(KDF hk)\n+      throws InvalidAlgorithmParameterException,\n+          InvalidParameterSpecException,\n+          NoSuchAlgorithmException {\n+    \/\/ POSITIVE TestCase: ExtractExpand - Derive keys\/data with unknown algorithm names\n+    deriveVerifierImpl.derive(\n+        hk,\n+        KdfExtThenExpVerifierImpl.extExp(\n+            SECRET_KEY_SPEC_KEYS.getFirst(),\n+            RAW_DATA.getFirst(),\n+            RAW_DATA.getFirst(),\n+            SHORT_LENGTH),\n+        KdfExtThenExpVerifierImpl.extExp(\n+            SECRET_KEY_SPEC_KEYS.getFirst(),\n+            RAW_DATA.getFirst(),\n+            RAW_DATA.getFirst(),\n+            SHORT_LENGTH),\n+        \"XYZ\",\n+        \"ABC\");\n+  }\n+\n+  @FunctionalInterface\n+  private interface KdfVerifier<A, P, S> {\n+    void test(A a, P p, S s)\n+        throws NoSuchAlgorithmException,\n+            NoSuchProviderException,\n+            InvalidAlgorithmParameterException;\n+  }\n+\n+  @FunctionalInterface\n+  private interface KdfExtractVerifier<K, S> {\n+    HKDFParameterSpec extract(K k, S s);\n+  }\n+\n+  @FunctionalInterface\n+  private interface KdfExpandVerifier<P, I, L> {\n+    HKDFParameterSpec expand(P p, I i, L l);\n+  }\n+\n+  @FunctionalInterface\n+  private interface KdfExtThenExpVerifier<K, S, I, L> {\n+    HKDFParameterSpec extExp(K k, S s, I i, L l);\n+  }\n+\n+  @FunctionalInterface\n+  private interface DeriveComparator<HK, L, R, T, S, LN> {\n+    void deriveAndCompare(HK hk, L lh, R rh, T t, S s, LN l)\n+        throws InvalidParameterSpecException,\n+            InvalidAlgorithmParameterException,\n+            NoSuchAlgorithmException;\n+  }\n+\n+  @FunctionalInterface\n+  private interface DeriveVerifier<HK, L, R, A1, A2> {\n+    void derive(HK hk, L lh, R rh, A1 a1, A2 a2)\n+        throws InvalidParameterSpecException,\n+            InvalidAlgorithmParameterException,\n+            NoSuchAlgorithmException;\n+  }\n+\n+  private static class KDFAlgorithmParameterSpec implements AlgorithmParameterSpec {\n+    public KDFAlgorithmParameterSpec() {}\n+  }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFExhaustiveTest.java","additions":437,"deletions":425,"binary":false,"changes":862,"status":"modified"}]}