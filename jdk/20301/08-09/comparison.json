{"files":[{"patch":"@@ -374,0 +374,4 @@\n+    protected KDFParameters engineGetKDFParameters() {\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.security.spec.InvalidParameterSpecException;\n@@ -47,2 +46,2 @@\n- * which is a cryptographic algorithm for deriving additional keys from a secret\n- * key and other data.\n+ * which is a cryptographic algorithm for deriving additional keys from input\n+ * keying material and (optionally) other data.\n@@ -50,2 +49,3 @@\n- * {@code KDF} objects are instantiated with the {@code getInstance} family of\n- * methods. KDF algorithm names follow a naming convention of\n+ * {@code KDF} objects are instantiated with the {@code getInstance} family\n+ * of methods. For <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc5869\">RFC 5869<\/a>,\n+ * KDF algorithm names follow a naming convention of\n@@ -53,3 +53,9 @@\n- * HKDF using HMAC-SHA256 has an algorithm name of \"HKDFWithHmacSHA256\". In some\n- * cases the PRF portion of the algorithm field may be omitted if the KDF\n- * algorithm has a fixed or default PRF.\n+ * HKDF using HMAC-SHA256 has an algorithm name of \"HKDFWithHmacSHA256\". For\n+ * future algorithms, the \"WithPRF\" portion of the algorithm field may be\n+ * omitted if the KDF algorithm has a fixed or default PRF or if the PRF is\n+ * specified as part of the {@code KDFParameters}.\n+ * <p>\n+ * The class has two derive methods, {@code deriveKey} and {@code deriveData}.\n+ * The {@code deriveKey} method accepts an algorithm {@code String} and\n+ * will return a {@code SecretKey} object with the specified algorithm. The\n+ * {@code deriveData} method returns a byte array of raw data.\n@@ -59,1 +65,1 @@\n- * the {@code deriveKey} or {@code deriveData} method is called and a provider\n+ * the {@code deriveKey} or {@code deriveData} method is called, and a provider\n@@ -61,2 +67,2 @@\n- * {@code deriveData} method, for example the initial key material. However, if\n- * {@code getProviderName} is called before calling the {@code deriveKey} or\n+ * {@code deriveData} method. However, if {@code getProviderName} or\n+ * {@code getKDFParameters} is called before calling the {@code deriveKey} or\n@@ -64,3 +70,5 @@\n- * is chosen which may not be the desired one; therefore it is recommended not\n- * to call {@code getProviderName} until after a key derivation operation. Once\n- * a provider is selected, it cannot be changed.\n+ * and {@code KDFParameters} is chosen which may not be the provider that is\n+ * eventually selected once the {@code AlgorithmParameterSpec} is supplied in\n+ * the derive methods; therefore it is recommended not to call\n+ * {@code getProviderName} or {@code getKDFParameters} until after a key\n+ * derivation operation. Once a provider is selected, it cannot be changed.\n@@ -75,1 +83,1 @@\n- *                              .addSalt(salt).thenExpand(info, 42);\n+ *                              .addSalt(salt).thenExpand(info, 32);\n@@ -80,0 +88,1 @@\n+ * @see KDFParameters\n@@ -114,0 +123,3 @@\n+    int DERIVE_KEY = 0;\n+    int DERIVE_DATA = 1;\n+\n@@ -132,0 +144,2 @@\n+        firstService = null;\n+        serviceIterator = null;\n@@ -164,1 +178,11 @@\n-     * Returns the {@code KDFParameters} used to initialize the object.\n+     * Returns the {@code KDFParameters} used with this {@code KDF} object.\n+     * <p>\n+     * The returned parameters may be the same that were used to initialize\n+     * this {@code KDF} object, or may contain additional default or\n+     * random parameter values used by the underlying KDF algorithm.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code KDF} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n+     *\n+     * @return the parameters used with this {@code KDF} object, or\n+     * {@code null}\n@@ -166,1 +190,2 @@\n-     * @return the parameters used to initialize the object\n+     * @throws UnsupportedOperationException if this method is not overridden\n+     * by a provider\n@@ -169,1 +194,2 @@\n-        return this.kdfParameters;\n+        chooseFirstProvider();\n+        return spi.engineGetKDFParameters();\n@@ -176,1 +202,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -193,1 +223,1 @@\n-                + \"algorithm require an AlgorithmParameterSpec?\", e);\n+                + \"algorithm require KDFParameters?\", e);\n@@ -202,1 +232,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -204,2 +238,1 @@\n-     *     the provider to use for this key derivation (may not be\n-     *     {@code null})\n+     *     the provider to use for this key derivation\n@@ -210,3 +243,2 @@\n-     *     if a provider is specified and it does not support the specified KDF\n-     *     algorithm, or if provider is {@code null} and there is no provider\n-     *     that supports a KDF implementation of the specified algorithm\n+     *     if the specified provider does not support the specified KDF\n+     *     algorithm\n@@ -217,1 +249,1 @@\n-     *     if the algorithm is {@code null}\n+     *     if the {@code algorithm} or {@code provider} is {@code null}\n@@ -227,1 +259,1 @@\n-                + \"algorithm require an AlgorithmParameterSpec?\", e);\n+                + \"algorithm require KDFParameters?\", e);\n@@ -236,1 +268,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -238,2 +274,1 @@\n-     *     the provider to use for this key derivation (may not be\n-     *     {@code null})\n+     *     the provider to use for this key derivation\n@@ -244,3 +279,2 @@\n-     *     if a provider is specified and it does not support the specified KDF\n-     *     algorithm, or if provider is {@code null} and there is no provider\n-     *     that supports a KDF implementation of the specified algorithm\n+     *     if the specified provider does not support the specified KDF\n+     *     algorithm\n@@ -248,1 +282,1 @@\n-     *     if the algorithm is {@code null}\n+     *     if the {@code algorithm} or {@code provider} is {@code null}\n@@ -258,1 +292,1 @@\n-                + \"algorithm require an AlgorithmParameterSpec?\", e);\n+                + \"algorithm require KDFParameters?\", e);\n@@ -267,1 +301,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -269,2 +307,2 @@\n-     *     the {@code KDFParameters} used to configure this KDF's algorithm or\n-     *     {@code null} if no additional parameters are provided\n+     *     the {@code KDFParameters} used to configure the derivation\n+     *     algorithm or {@code null} if no additional parameters are provided\n@@ -278,1 +316,1 @@\n-     *     if the {@code AlgorithmParameterSpec} is an invalid value\n+     *     if the {@code KDFParameters} is an invalid value\n@@ -280,1 +318,1 @@\n-     *     if the algorithm is {@code null}\n+     *     if the {@code algorithm} is {@code null}\n@@ -304,1 +342,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -306,2 +348,2 @@\n-     *     the {@code KDFParameters} used to configure this KDF's algorithm or\n-     *     {@code null} if no additional parameters are provided\n+     *     the {@code KDFParameters} used to configure the derivation\n+     *     algorithm or {@code null} if no additional parameters are provided\n@@ -309,2 +351,1 @@\n-     *     the provider to use for this key derivation (may not be\n-     *     {@code null})\n+     *     the provider to use for this key derivation\n@@ -315,3 +356,2 @@\n-     *     if a provider is specified and it does not support the specified KDF\n-     *     algorithm, or if provider is {@code null} and there is no provider\n-     *     that supports a KDF implementation of the specified algorithm\n+     *     if the specified provider does not support the specified KDF\n+     *     algorithm\n@@ -322,1 +362,1 @@\n-     *     if the {@code AlgorithmParameterSpec} is an invalid value\n+     *     if the {@code KDFParameters} is an invalid value\n@@ -324,1 +364,1 @@\n-     *     if the algorithm is {@code null}\n+     *     if the {@code algorithm} or {@code provider} is {@code null}\n@@ -356,1 +396,5 @@\n-     *     the key derivation algorithm to use\n+     *     the key derivation algorithm to use.\n+     *     See the {@code KDF} section in the <a href=\n+     *     \"{@docRoot}\/..\/specs\/security\/standard-names.html#kdf-algorithms\">\n+     *     Java Security Standard Algorithm Names Specification<\/a>\n+     *     for information about standard KDF algorithm names.\n@@ -358,2 +402,2 @@\n-     *     the {@code KDFParameters} used to configure this KDF's algorithm or\n-     *     {@code null} if no additional parameters are provided\n+     *     the {@code KDFParameters} used to configure the derivation\n+     *     algorithm or {@code null} if no additional parameters are provided\n@@ -361,2 +405,1 @@\n-     *     the provider to use for this key derivation (may not be\n-     *     {@code null})\n+     *     the provider to use for this key derivation\n@@ -367,3 +410,2 @@\n-     *     if a provider is specified and it does not support the specified KDF\n-     *     algorithm, or if provider is {@code null} and there is no provider\n-     *     that supports a KDF implementation of the specified algorithm\n+     *     if the specified provider does not support the specified KDF\n+     *     algorithm\n@@ -371,1 +413,1 @@\n-     *     if the {@code AlgorithmParameterSpec} is an invalid value\n+     *     if the {@code KDFParameters} is an invalid value\n@@ -373,1 +415,1 @@\n-     *     if the algorithm is {@code null}\n+     *     if the {@code algorithm} or {@code provider} is {@code null}\n@@ -411,6 +453,2 @@\n-     * The {@code deriveKey} method may be called multiple times at the same\n-     * time on a particular {@code KDF} instance.\n-     * <p>\n-     * Delayed provider selection is also supported such that the provider\n-     * performing the derive is not selected until the method is called. Once a\n-     * provider is selected, it cannot be changed.\n+     * The {@code deriveKey} method may be called multiple times on a particular\n+     * {@code KDF} instance.\n@@ -419,2 +457,1 @@\n-     *     the algorithm of the resultant {@code SecretKey} object (may not be\n-     *     {@code null})\n+     *     the algorithm of the resultant {@code SecretKey} object\n@@ -422,1 +459,1 @@\n-     *     derivation parameters\n+     *     the object describing the inputs to the derivation function\n@@ -425,1 +462,4 @@\n-     *     KDF output and according to the derivation parameters\n+     *     KDF output and according to the derivation parameters. Rather than\n+     *     permitting a {@code null} return value here, implementations will\n+     *     handle cases where a value cannot be returned by throwing an\n+     *     appropriate {@code Exception}.\n@@ -428,2 +468,4 @@\n-     *     if the information contained within the {@code KDFParameterSpec} is\n-     *     invalid or incorrect for the type of key to be derived\n+     *     if the information contained within the {@code kdfParameterSpec} is\n+     *     invalid, if {@code alg} is invalid, or if their combination\n+     *     results in something invalid, ie - a key of inappropriate length\n+     *     for the specified algorithm\n@@ -437,1 +479,0 @@\n-        synchronized (lock) {\n@@ -446,0 +487,2 @@\n+            } else {\n+                return (SecretKey) chooseProvider(alg, kdfParameterSpec);\n@@ -447,39 +490,0 @@\n-\n-            Exception lastException = null;\n-            while ((firstService != null) || serviceIterator.hasNext()) {\n-                Service s;\n-                if (firstService != null) {\n-                    s = firstService;\n-                    firstService = null;\n-                } else {\n-                    s = serviceIterator.next();\n-                }\n-                if (!JceSecurity.canUseProvider(s.getProvider())) {\n-                    continue;\n-                }\n-                try {\n-                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n-                    SecretKey result = spi.engineDeriveKey(alg,\n-                                                           kdfParameterSpec);\n-                    provider = s.getProvider();\n-                    this.spi = spi;\n-                    firstService = null;\n-                    serviceIterator = null;\n-                    return result;\n-                } catch (Exception e) {\n-                    if (lastException == null) {\n-                        lastException = e;\n-                    }\n-                }\n-            }\n-            \/\/ no working provider found, fail\n-            if (lastException instanceof InvalidAlgorithmParameterException) {\n-                throw (InvalidAlgorithmParameterException) lastException;\n-            }\n-            if (lastException instanceof RuntimeException) {\n-                throw (RuntimeException) lastException;\n-            }\n-        }\n-        throw new InvalidAlgorithmParameterException(\n-            \"No installed provider supports the deriveKey method with \"\n-            + \"these parameters\");\n@@ -491,6 +495,2 @@\n-     * The {@code deriveData} method may be called multiple times at the same\n-     * time on a particular {@code KDF} instance.\n-     * <p>\n-     * Delayed provider selection is also supported such that the provider\n-     * performing the derive is not selected until the method is called. Once a\n-     * provider is selected, it cannot be changed.\n+     * The {@code deriveData} method may be called multiple times on a\n+     * particular {@code KDF} instance.\n@@ -499,1 +499,1 @@\n-     *     derivation parameters\n+     *     the object describing the inputs to the derivation function\n@@ -501,2 +501,5 @@\n-     * @return a byte array containing a key built from the KDF output and\n-     *     according to the derivation parameters\n+     * @return a byte array corresponding to a key built from the\n+     *     KDF output and according to the derivation parameters. Rather than\n+     *     permitting a {@code null} return value here, implementations will\n+     *     handle cases where a value cannot be returned by throwing an\n+     *     appropriate {@code Exception}.\n@@ -505,2 +508,2 @@\n-     *     if the information contained within the {@code KDFParameterSpec} is\n-     *     invalid or incorrect for the type of key to be derived\n+     *     if the information contained within the {@code kdfParameterSpec} is\n+     *     invalid\n@@ -515,39 +518,5 @@\n-        synchronized (lock) {\n-            Objects.requireNonNull(kdfParameterSpec);\n-            if (spi != null) {\n-                return spi.engineDeriveData(kdfParameterSpec);\n-            }\n-\n-            Exception lastException = null;\n-            while ((firstService != null) || serviceIterator.hasNext()) {\n-                Service s;\n-                if (firstService != null) {\n-                    s = firstService;\n-                    firstService = null;\n-                } else {\n-                    s = serviceIterator.next();\n-                }\n-                if (!JceSecurity.canUseProvider(s.getProvider())) {\n-                    continue;\n-                }\n-                try {\n-                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n-                    byte[] result = spi.engineDeriveData(kdfParameterSpec);\n-                    provider = s.getProvider();\n-                    this.spi = spi;\n-                    firstService = null;\n-                    serviceIterator = null;\n-                    return result;\n-                } catch (Exception e) {\n-                    if (lastException == null) {\n-                        lastException = e;\n-                    }\n-                }\n-            }\n-            \/\/ no working provider found, fail\n-            if (lastException instanceof InvalidAlgorithmParameterException) {\n-                throw (InvalidAlgorithmParameterException) lastException;\n-            }\n-            if (lastException instanceof RuntimeException) {\n-                throw (RuntimeException) lastException;\n-            }\n+        Objects.requireNonNull(kdfParameterSpec);\n+        if (spi != null) {\n+            return spi.engineDeriveData(kdfParameterSpec);\n+        } else {\n+            return (byte[]) chooseProvider(null, kdfParameterSpec);\n@@ -555,3 +524,0 @@\n-        throw new InvalidAlgorithmParameterException(\n-            \"No installed provider supports the deriveData method with\"\n-            + \" these parameters\");\n@@ -564,3 +530,2 @@\n-     * Choose the Spi from the first provider available. Used if delayed\n-     * provider selection is not possible because init() is not the first method\n-     * called.\n+     * Selects the first provider in the list that supports the\n+     * {@code KDFParameters}.\n@@ -568,1 +533,1 @@\n-    void chooseFirstProvider() {\n+    private void chooseFirstProvider() {\n@@ -611,0 +576,55 @@\n+\n+    \/**\n+     * Selects the provider which supports the passed {@code algorithm} and\n+     * {@code kdfParameterSpec} values, and assigns the global spi and provider\n+     * variables if they have not been assigned yet.\n+     * <p>\n+     * If the spi has already been set, it will just return the result.\n+     *\/\n+    private Object chooseProvider(String algorithm, AlgorithmParameterSpec kdfParameterSpec) throws InvalidAlgorithmParameterException {\n+\n+        int mechanism = (algorithm == null) ? DERIVE_DATA : DERIVE_KEY;\n+\n+        synchronized (lock) {\n+            if(spi != null) {\n+                return (mechanism == DERIVE_DATA)?spi.engineDeriveData(kdfParameterSpec):spi.engineDeriveKey(algorithm, kdfParameterSpec);\n+            }\n+\n+            Exception lastException = null;\n+            while ((firstService != null) || serviceIterator.hasNext()) {\n+                Service s;\n+                if (firstService != null) {\n+                    s = firstService;\n+                    firstService = null;\n+                } else {\n+                    s = serviceIterator.next();\n+                }\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                    continue;\n+                }\n+                try {\n+                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n+                    Object o = (mechanism == DERIVE_DATA)?spi.engineDeriveData(kdfParameterSpec):spi.engineDeriveKey(algorithm, kdfParameterSpec);\n+                    this.provider = s.getProvider();\n+                    this.spi = spi;\n+                    firstService = null;\n+                    serviceIterator = null;\n+                    return o;\n+                } catch (Exception e) {\n+                    if (lastException == null) {\n+                        lastException = e;\n+                    }\n+                }\n+            }\n+            \/\/ no working provider found, fail\n+            if (lastException instanceof InvalidAlgorithmParameterException) {\n+                throw (InvalidAlgorithmParameterException) lastException;\n+            }\n+            if (lastException instanceof RuntimeException) {\n+                throw (RuntimeException) lastException;\n+            }\n+        }\n+        throw new InvalidAlgorithmParameterException(\n+            \"No installed provider supports the \" + ((mechanism == DERIVE_DATA)?\"deriveData\":\"deriveKey\") + \" method with\"\n+            + \" these parameters\");\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":190,"deletions":170,"binary":false,"changes":360,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+ * <p>\n+ * In addition, all implementations must provide a public constructor which\n+ * accepts a {@code KDFParameters} object. The constructor must call {@code\n+ * super(params)} passing the parameters supplied. The constructor must also\n+ * throw an {@code InvalidAlgorithmParameterException} if the supplied\n+ * parameters are inappropriate.\n@@ -44,0 +50,1 @@\n+ * @see KDFParameters\n@@ -54,1 +61,1 @@\n-     * that require this.\n+     * that support initialization parameters.\n@@ -67,0 +74,17 @@\n+    \/**\n+     * Returns the {@code KDFParameters} used with this {@code KDF} object.\n+     * <p>\n+     * The returned parameters may be the same that were used to initialize\n+     * this {@code KDF} object, or may contain additional default or\n+     * random parameter values used by the underlying KDF algorithm.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code KDF} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n+     *\n+     * @return the parameters used with this {@code KDF} object, or\n+     * {@code null}\n+     *\n+     * @throws UnsupportedOperationException if this method is not overridden\n+     * by a provider\n+     *\/\n+    protected abstract KDFParameters engineGetKDFParameters();\n@@ -71,2 +95,2 @@\n-     * The {@code deriveKey} method may be called multiple times on a particular\n-     * {@code KDF} instance.\n+     * The {@code engineDeriveKey} method may be called multiple times on a particular\n+     * {@code KDFSpi} instance.\n@@ -75,2 +99,1 @@\n-     *     the algorithm of the resultant {@code SecretKey} object (may not be\n-     *     {@code null})\n+     *     the algorithm of the resultant {@code SecretKey} object\n@@ -81,1 +104,4 @@\n-     *     KDF output and according to the derivation parameters\n+     *     KDF output and according to the derivation parameters.\n+     *     Implementations must not return a {@code null} value here. Instead,\n+     *     they must throw an appropriate {@code Exception} if a value cannot\n+     *     be returned.\n@@ -84,2 +110,4 @@\n-     *     if the information contained within the {@code KDFParameterSpec} is\n-     *     invalid or incorrect for the type of key to be derived\n+     *     if the information contained within the {@code kdfParameterSpec} is\n+     *     invalid, if {@code alg} is invalid, or if their combination\n+     *     results in something invalid, ie - a key of inappropriate length\n+     *     for the specified algorithm\n@@ -96,2 +124,2 @@\n-     * The {@code deriveData} method may be called multiple times on a\n-     * particular {@code KDF} instance.\n+     * The {@code engineDeriveData} method may be called multiple times on a\n+     * particular {@code KDFSpi} instance.\n@@ -102,3 +130,5 @@\n-     * @return a byte array whose length matches the specified length in the\n-     *     processed {@code KDFParameterSpec} and containing the output from the\n-     *     key derivation function\n+     * @return a byte array corresponding to a key built from the\n+     *     KDF output and according to the derivation parameters.\n+     *     Implementations must not return a {@code null} value here. Instead,\n+     *     they must throw an appropriate {@code Exception} if a value cannot\n+     *     be returned.\n@@ -107,2 +137,2 @@\n-     *     if the information contained within the {@code KDFParameterSpec} is\n-     *     invalid or incorrect for the type of key to be derived\n+     *     if the information contained within the {@code kdfParameterSpec} is\n+     *     invalid\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":45,"deletions":15,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -43,4 +43,5 @@\n- * for use-cases where a {@code SecretKey} may reside on an HSM and not be\n- * exportable. The caller may wish to provide a label (or other components) of\n- * the IKM without having access to the portion stored on the HSM. The same\n- * feature is available for salts.\n+ * for use-cases where a portion of the IKM resides in a non-extractable\n+ * {@code SecretKey} and the whole IKM cannot be provided as a single object.\n+ * The caller may wish to provide a label (or other components) of\n+ * the IKM without having access to all portions. The same feature is\n+ * available for salts.\n@@ -55,0 +56,1 @@\n+ * \/\/ this usage depicts the initialization of an HKDF-Extract AlgorithmParameterSpec\n@@ -57,2 +59,2 @@\n- *                              .addIKM(ikmPart1)\n- *                              .addIKM(ikmPart2)\n+ *                              .addIKM(label)\n+ *                              .addIKM(ikm)\n@@ -65,2 +67,3 @@\n- * AlgorithmParameterSpec kdfParameterSpec = HKDFParameterSpec.expandOnly(prk,\n- * info, 32);\n+ * \/\/ this usage depicts the initialization of an HKDF-Expand AlgorithmParameterSpec\n+ * AlgorithmParameterSpec kdfParameterSpec =\n+ *             HKDFParameterSpec.expandOnly(prk, info, 32);\n@@ -71,0 +74,1 @@\n+ * \/\/ this usage depicts the initialization of an HKDF-ExtractExpand AlgorithmParameterSpec\n@@ -74,1 +78,1 @@\n- *                              .addSalt(salt).thenExpand(info, 42);\n+ *                              .addSalt(salt).thenExpand(info, 32);\n@@ -101,1 +105,1 @@\n-        Builder() {}\n+        private Builder() {}\n@@ -127,1 +131,1 @@\n-         *     {@code null}); the byte[] is copied to prevent subsequent\n+         *     {@code null}); the byte array is copied to prevent subsequent\n@@ -198,1 +202,1 @@\n-                throw new NullPointerException(\"ikm must not be null or empty\");\n+                throw new NullPointerException(\"ikm must not be null\");\n@@ -215,3 +219,0 @@\n-         * This supports the use-case where a label can be applied to the salt\n-         * but the actual value of the salt is not yet available.\n-         * <p>\n@@ -246,4 +247,2 @@\n-         * This supports the use-case where a label can be applied to the salt\n-         * but the actual value of the salt is not yet available. An\n-         * implementation should concatenate the salt into a single value once\n-         * all components are available.\n+         * An implementation should concatenate the salt into a single value\n+         * once all components are available.\n@@ -262,1 +261,1 @@\n-                    \"salt must not be null or empty\");\n+                    \"salt must not be null\");\n@@ -275,4 +274,0 @@\n-     * <p>\n-     * Note: one or more of the methods {@code addIKM} or {@code addSalt} should\n-     * be called next, before calling build methods, such as\n-     * {@code Builder.extractOnly()}\n@@ -290,1 +285,1 @@\n-     *     the pseudorandom key; must not be {@code null} in the Expand case\n+     *     the pseudorandom key; must not be {@code null}\n@@ -324,4 +319,0 @@\n-        private Extract() {\n-            this(new ArrayList<>(), new ArrayList<>());\n-        }\n-\n@@ -425,2 +416,1 @@\n-     * in\n-     * <a href=\"http:\/\/tools.ietf.org\/html\/rfc5869\">RFC 5869<\/a>.\n+     * in <a href=\"http:\/\/tools.ietf.org\/html\/rfc5869\">RFC 5869<\/a>.\n@@ -466,1 +456,1 @@\n-         * @return the input key material values\n+         * @return the unmodifiable {@code List} of input key material values\n@@ -476,1 +466,1 @@\n-         * @return the salt values\n+         * @return the unmodifiable {@code List} of salt values\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":23,"deletions":33,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            throw new Exception();\n+            throw new Exception(\"the PRK does not match the expected value\");\n@@ -58,1 +58,1 @@\n-            throw new Exception();\n+            throw new Exception(\"the OKM does not match the expected value (expand)\");\n@@ -61,1 +61,1 @@\n-            throw new Exception();\n+            throw new Exception(\"the OKM does not match the expected value (extract expand)\");\n@@ -64,0 +64,1 @@\n+        \/\/ test empty extract\n@@ -65,0 +66,1 @@\n+        \/\/ test expand with empty info\n@@ -66,0 +68,1 @@\n+        \/\/ test extract with zero-length salt\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/Functions.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+\n+        protected KDFParameters engineGetKDFParameters(){\n+            return null;\n+        }\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Delayed.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}