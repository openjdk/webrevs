{"files":[{"patch":"@@ -85,1 +85,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -95,1 +95,1 @@\n-        throws InvalidParameterSpecException {\n+        throws InvalidAlgorithmParameterException {\n@@ -112,1 +112,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -120,1 +120,1 @@\n-        throws InvalidParameterSpecException {\n+        throws InvalidAlgorithmParameterException {\n@@ -144,1 +144,1 @@\n-                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n+                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n@@ -153,1 +153,1 @@\n-                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n+                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n@@ -168,1 +168,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -177,1 +177,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -186,1 +186,1 @@\n-                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n+                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n@@ -208,1 +208,1 @@\n-                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n+                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n@@ -218,1 +218,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -230,1 +230,1 @@\n-                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n+                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n@@ -241,1 +241,1 @@\n-        throw new InvalidParameterSpecException(\n+        throw new InvalidAlgorithmParameterException(\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -441,11 +441,1 @@\n-        throws InvalidParameterSpecException {\n-\n-        if (alg == null || alg.isEmpty()) {\n-            throw new NullPointerException(\n-                \"the algorithm for the SecretKey return value may not be \"\n-                + \"null or empty\");\n-        }\n-        Objects.requireNonNull(kdfParameterSpec);\n-        if (spi != null) {\n-            return spi.engineDeriveKey(alg, kdfParameterSpec);\n-        }\n+        throws InvalidAlgorithmParameterException {\n@@ -454,3 +444,44 @@\n-            chooseFirstProvider();\n-            return spi.engineDeriveKey(alg,\n-                                kdfParameterSpec);\n+            if (alg == null || alg.isEmpty()) {\n+                throw new NullPointerException(\n+                    \"the algorithm for the SecretKey return value may not be \"\n+                    + \"null or empty\");\n+            }\n+            Objects.requireNonNull(kdfParameterSpec);\n+            if (spi != null) {\n+                return spi.engineDeriveKey(alg, kdfParameterSpec);\n+            }\n+\n+            Exception lastException = null;\n+            while ((firstService != null) || serviceIterator.hasNext()) {\n+                Service s;\n+                if (firstService != null) {\n+                    s = firstService;\n+                    firstService = null;\n+                } else {\n+                    s = serviceIterator.next();\n+                }\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                    continue;\n+                }\n+                try {\n+                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n+                    SecretKey result = spi.engineDeriveKey(alg,\n+                                                           kdfParameterSpec);\n+                    provider = s.getProvider();\n+                    this.spi = spi;\n+                    firstService = null;\n+                    serviceIterator = null;\n+                    return result;\n+                } catch (Exception e) {\n+                    if (lastException == null) {\n+                        lastException = e;\n+                    }\n+                }\n+            }\n+            \/\/ no working provider found, fail\n+            if (lastException instanceof InvalidAlgorithmParameterException) {\n+                throw (InvalidAlgorithmParameterException) lastException;\n+            }\n+            if (lastException instanceof RuntimeException) {\n+                throw (RuntimeException) lastException;\n+            }\n@@ -458,0 +489,3 @@\n+        throw new InvalidAlgorithmParameterException(\n+            \"No installed provider supports the deriveKey method with \"\n+            + \"these parameters\");\n@@ -476,1 +510,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -485,6 +519,1 @@\n-        throws InvalidParameterSpecException {\n-\n-        Objects.requireNonNull(kdfParameterSpec);\n-        if (spi != null) {\n-            return spi.engineDeriveData(kdfParameterSpec);\n-        }\n+        throws InvalidAlgorithmParameterException {\n@@ -493,2 +522,38 @@\n-            chooseFirstProvider();\n-            return spi.engineDeriveData(kdfParameterSpec);\n+            Objects.requireNonNull(kdfParameterSpec);\n+            if (spi != null) {\n+                return spi.engineDeriveData(kdfParameterSpec);\n+            }\n+\n+            Exception lastException = null;\n+            while ((firstService != null) || serviceIterator.hasNext()) {\n+                Service s;\n+                if (firstService != null) {\n+                    s = firstService;\n+                    firstService = null;\n+                } else {\n+                    s = serviceIterator.next();\n+                }\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                    continue;\n+                }\n+                try {\n+                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n+                    byte[] result = spi.engineDeriveData(kdfParameterSpec);\n+                    provider = s.getProvider();\n+                    this.spi = spi;\n+                    firstService = null;\n+                    serviceIterator = null;\n+                    return result;\n+                } catch (Exception e) {\n+                    if (lastException == null) {\n+                        lastException = e;\n+                    }\n+                }\n+            }\n+            \/\/ no working provider found, fail\n+            if (lastException instanceof InvalidAlgorithmParameterException) {\n+                throw (InvalidAlgorithmParameterException) lastException;\n+            }\n+            if (lastException instanceof RuntimeException) {\n+                throw (RuntimeException) lastException;\n+            }\n@@ -496,0 +561,3 @@\n+        throw new InvalidAlgorithmParameterException(\n+            \"No installed provider supports the deriveData method with\"\n+            + \" these parameters\");\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":92,"deletions":24,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -100,1 +100,1 @@\n-        throws InvalidParameterSpecException;\n+        throws InvalidAlgorithmParameterException;\n@@ -119,1 +119,1 @@\n-     * @throws InvalidParameterSpecException\n+     * @throws InvalidAlgorithmParameterException\n@@ -129,1 +129,1 @@\n-        throws InvalidParameterSpecException;\n+        throws InvalidAlgorithmParameterException;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            throws InvalidParameterSpecException {\n+            throws InvalidAlgorithmParameterException {\n@@ -103,1 +103,1 @@\n-                throw new InvalidParameterSpecException();\n+                throw new InvalidAlgorithmParameterException();\n@@ -129,1 +129,1 @@\n-            throws InvalidParameterSpecException {\n+            throws InvalidAlgorithmParameterException {\n@@ -135,1 +135,1 @@\n-            throws InvalidParameterSpecException {\n+            throws InvalidAlgorithmParameterException {\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Delayed.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.security.InvalidAlgorithmParameterException;\n@@ -42,1 +43,0 @@\n-import java.security.spec.InvalidParameterSpecException;\n@@ -63,2 +63,2 @@\n-    @Test(threadPoolSize = 50, invocationCount = 10000, timeOut = 25)\n-    public void testDeriveKey() throws InvalidParameterSpecException {\n+    @Test(threadPoolSize = 50, invocationCount = 100, timeOut = 30)\n+    public void testDeriveKey() throws InvalidAlgorithmParameterException {\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Threading.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}