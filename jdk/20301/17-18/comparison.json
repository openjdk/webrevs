{"files":[{"patch":"@@ -95,2 +95,1 @@\n-    \/\/ The provider\n-    private Provider provider;\n+    private record Delegate(KDFSpi spi, Provider provider) {}\n@@ -98,2 +97,2 @@\n-    \/\/ The provider implementation (delegate)\n-    private KDFSpi spi;\n+    private Delegate pairOfSpiAndProv;\n+    private Delegate firstPairOfSpiAndProv;\n@@ -107,4 +106,0 @@\n-    \/\/ the first KDFSpi and provider supporting the specified configuration parameters\n-    private KDFSpi firstSpi;\n-    private Provider firstProv;\n-\n@@ -121,6 +116,2 @@\n-     * @param keyDerivSpi\n-     *     the delegate\n-     * @param provider\n-     *     the provider\n-     * @param algorithm\n-     *     the algorithm\n+     * @param delegate the delegate\n+     * @param algorithm the algorithm\n@@ -128,3 +119,2 @@\n-    private KDF(KDFSpi keyDerivSpi, Provider provider, String algorithm) {\n-        this.spi = keyDerivSpi;\n-        this.provider = provider;\n+    private KDF(Delegate delegate, String algorithm, KDFParameters kdfParameters) {\n+        this.pairOfSpiAndProv = delegate;\n@@ -133,1 +123,1 @@\n-        this.kdfParameters = null;\n+        this.kdfParameters = kdfParameters;\n@@ -142,2 +132,1 @@\n-     * @param firstSpi the first matching Spi\n-     * @param firstProv the first matching provider\n+     * @param firstPairOfSpiAndProv the delegate\n@@ -148,1 +137,1 @@\n-    private KDF(KDFSpi firstSpi, Provider firstProv, Iterator<Service> t, String algorithm,\n+    private KDF(Delegate firstPairOfSpiAndProv, Iterator<Service> t, String algorithm,\n@@ -150,2 +139,1 @@\n-        this.firstSpi = firstSpi;\n-        this.firstProv = firstProv;\n+        this.firstPairOfSpiAndProv = firstPairOfSpiAndProv;\n@@ -174,1 +162,1 @@\n-        return provider.getName();\n+        return pairOfSpiAndProv.provider().getName();\n@@ -192,1 +180,1 @@\n-        return spi.engineGetParameters();\n+        return pairOfSpiAndProv.spi().engineGetParameters();\n@@ -336,1 +324,5 @@\n-                return new KDF(spiObj, s.getProvider(), t, algorithm, kdfParameters);\n+                if (t.hasNext()) {\n+                    return new KDF(new Delegate(spiObj, s.getProvider()), t, algorithm, kdfParameters);\n+                } else { \/\/ no other choices, lock down provider\n+                    return new KDF(new Delegate(spiObj, s.getProvider()), algorithm, kdfParameters);\n+                }\n@@ -394,1 +386,2 @@\n-            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm);\n+            return new KDF(new Delegate((KDFSpi) instance.impl,\n+                                        instance.provider), algorithm, kdfParameters);\n@@ -445,1 +438,2 @@\n-            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm);\n+            return new KDF(new Delegate((KDFSpi) instance.impl,\n+                                        instance.provider), algorithm, kdfParameters);\n@@ -477,2 +471,1 @@\n-     *     results in something invalid, ie - a key of inappropriate length\n-     *     for the specified algorithm\n+     *     results in something invalid\n@@ -497,2 +490,2 @@\n-        if (spi != null) {\n-            return spi.engineDeriveKey(alg, derivationSpec);\n+        if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n+            return pairOfSpiAndProv.spi().engineDeriveKey(alg, derivationSpec);\n@@ -527,2 +520,2 @@\n-        if (spi != null) {\n-            return spi.engineDeriveData(derivationSpec);\n+        if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n+            return pairOfSpiAndProv.spi().engineDeriveData(derivationSpec);\n@@ -543,1 +536,1 @@\n-        if ((spi != null) || (serviceIterator == null)) return;\n+        if ((delegateAndSpiAreInitialized(pairOfSpiAndProv)) || (serviceIterator == null)) return;\n@@ -546,3 +539,2 @@\n-            if ((spi == null) && (serviceIterator != null)) {\n-                spi = firstSpi;\n-                provider = firstProv;\n+            if ((delegateIsNullOrSpiIsNull(pairOfSpiAndProv)) && (serviceIterator != null)) {\n+                pairOfSpiAndProv = firstPairOfSpiAndProv;\n@@ -550,2 +542,1 @@\n-                firstSpi = null;\n-                firstProv = null;\n+                firstPairOfSpiAndProv = new Delegate(null, null);\n@@ -571,3 +562,3 @@\n-            if (spi != null) {\n-                return (isDeriveData) ? spi.engineDeriveData(\n-                    derivationSpec) : spi.engineDeriveKey(algorithm,\n+            if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n+                return (isDeriveData) ? pairOfSpiAndProv.spi().engineDeriveData(\n+                    derivationSpec) : pairOfSpiAndProv.spi().engineDeriveKey(algorithm,\n@@ -578,1 +569,1 @@\n-            while ((firstSpi != null) || serviceIterator.hasNext()) {\n+            while ((delegateAndSpiAreInitialized(firstPairOfSpiAndProv)) || serviceIterator.hasNext()) {\n@@ -581,5 +572,4 @@\n-                if (firstSpi != null) {\n-                    currSpi = firstSpi;\n-                    currProv = firstProv;\n-                    firstSpi = null;\n-                    firstProv = null;\n+                if (delegateAndSpiAreInitialized(firstPairOfSpiAndProv)) {\n+                    currSpi = firstPairOfSpiAndProv.spi();\n+                    currProv = firstPairOfSpiAndProv.provider();\n+                    firstPairOfSpiAndProv = new Delegate(null, null);\n@@ -609,2 +599,1 @@\n-                    this.provider = currProv;\n-                    this.spi = currSpi;\n+                    this.pairOfSpiAndProv = new Delegate(currSpi, currProv);\n@@ -633,0 +622,8 @@\n+\n+    boolean delegateAndSpiAreInitialized(Delegate delegate) {\n+        return (delegate != null && delegate.spi() != null);\n+    }\n+\n+    boolean delegateIsNullOrSpiIsNull(Delegate delegate) {\n+        return (delegate == null || delegate.spi() == null);\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":48,"deletions":51,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -121,2 +121,1 @@\n-     *     results in something invalid, ie - a key of inappropriate length\n-     *     for the specified algorithm\n+     *     results in something invalid\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- * AlgorithmParameterSpec kdfParameterSpec =\n+ * AlgorithmParameterSpec derivationSpec =\n@@ -69,1 +69,1 @@\n- * AlgorithmParameterSpec kdfParameterSpec =\n+ * AlgorithmParameterSpec derivationSpec =\n@@ -76,1 +76,1 @@\n- * AlgorithmParameterSpec kdfParameterSpec =\n+ * AlgorithmParameterSpec derivationSpec =\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}