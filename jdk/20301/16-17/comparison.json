{"files":[{"patch":"@@ -98,1 +98,1 @@\n-                                        AlgorithmParameterSpec derivationParameterSpec)\n+                                        AlgorithmParameterSpec derivationSpec)\n@@ -111,1 +111,1 @@\n-        return new SecretKeySpec(engineDeriveData(derivationParameterSpec), alg);\n+        return new SecretKeySpec(engineDeriveData(derivationSpec), alg);\n@@ -127,1 +127,1 @@\n-    protected byte[] engineDeriveData(AlgorithmParameterSpec derivationParameterSpec)\n+    protected byte[] engineDeriveData(AlgorithmParameterSpec derivationSpec)\n@@ -140,1 +140,1 @@\n-        if (derivationParameterSpec instanceof HKDFParameterSpec.Extract) {\n+        if (derivationSpec instanceof HKDFParameterSpec.Extract) {\n@@ -142,1 +142,1 @@\n-                (HKDFParameterSpec.Extract) derivationParameterSpec;\n+                (HKDFParameterSpec.Extract) derivationSpec;\n@@ -145,3 +145,3 @@\n-            \/\/ we should be able to combine these Lists of key segments into\n-            \/\/ single SecretKey Objects, unless we were passed something bogus\n-            \/\/ or an unexportable P11 key\n+            \/\/ we should be able to combine both of the above Lists of key\n+            \/\/ segments into one SecretKey object each, unless we were passed\n+            \/\/ something bogus or an unexportable P11 key\n@@ -171,1 +171,1 @@\n-        } else if (derivationParameterSpec instanceof HKDFParameterSpec.Expand) {\n+        } else if (derivationSpec instanceof HKDFParameterSpec.Expand) {\n@@ -173,1 +173,1 @@\n-                (HKDFParameterSpec.Expand) derivationParameterSpec;\n+                (HKDFParameterSpec.Expand) derivationSpec;\n@@ -203,1 +203,1 @@\n-        } else if (derivationParameterSpec instanceof HKDFParameterSpec.ExtractThenExpand) {\n+        } else if (derivationSpec instanceof HKDFParameterSpec.ExtractThenExpand) {\n@@ -205,1 +205,1 @@\n-                (HKDFParameterSpec.ExtractThenExpand) derivationParameterSpec;\n+                (HKDFParameterSpec.ExtractThenExpand) derivationSpec;\n@@ -208,3 +208,3 @@\n-            \/\/ we should be able to combine these Lists of key segments into\n-            \/\/ single SecretKey Objects, unless we were passed something bogus\n-            \/\/ or an unexportable P11 key\n+            \/\/ we should be able to combine both of the above Lists of key\n+            \/\/ segments into one SecretKey object each, unless we were passed\n+            \/\/ something bogus or an unexportable P11 key\n@@ -343,4 +343,0 @@\n-        int offset = 0;\n-        int tLength = 0;\n-\n-        for (int i = 0; i < rounds; i++) {\n@@ -348,0 +344,1 @@\n+        for (int i = 0, offset = 0; i < rounds; i++, offset += hmacLen) {\n@@ -350,8 +347,6 @@\n-                \/\/ Add T(i).  This will be an empty string on the first\n-                \/\/ iteration since tLength starts at zero.  After the first\n-                \/\/ iteration, tLength is changed to the HMAC length for the\n-                \/\/ rest of the loop.\n-                hmacObj.update(kdfOutput, Math.max(0, offset - hmacLen),\n-                               tLength);\n-                hmacObj.update(info);                       \/\/ Add info\n-                hmacObj.update((byte) (i + 1));              \/\/ Add round number\n+                if (i > 0) {\n+                    hmacObj.update(kdfOutput, Math.max(0, offset - hmacLen),\n+                                   hmacLen); \/\/ add T(i-1)\n+                }\n+                hmacObj.update(info); \/\/ Add info\n+                hmacObj.update((byte) (i + 1)); \/\/ Add round number\n@@ -359,3 +354,0 @@\n-\n-                tLength = hmacLen;\n-                offset += hmacLen;                       \/\/ For next iteration\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":22,"deletions":30,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-        ps(\"KDF\", \"HKDFWithHmacSHA256\",\n+        ps(\"KDF\", \"HKDF-SHA256\",\n@@ -465,1 +465,1 @@\n-        ps(\"KDF\", \"HKDFWithHmacSHA384\",\n+        ps(\"KDF\", \"HKDF-SHA384\",\n@@ -467,1 +467,1 @@\n-        ps(\"KDF\", \"HKDFWithHmacSHA512\",\n+        ps(\"KDF\", \"HKDF-SHA512\",\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * Typically, a {@code KDFParameters} object is passed as a parameter to one of\n+ * A {@code KDFParameters} object is passed as a parameter to one of\n@@ -39,2 +39,1 @@\n- * methods. The {@code getInstance} method returns a {@code KDF}. The\n- * {@code KDF} that is returned is initialized with the specified parameters.\n+ * methods. The {@code getInstance} method returns a {@code KDF}.\n@@ -42,2 +41,5 @@\n- * The {@code KDFParameters} used for initialization can be retrieved via\n- * {@link javax.crypto.KDF#getParameters()}.\n+ * {@code KDF} implementations may choose to supply additional default or\n+ * random parameter values used by the underlying KDF algorithm. If required\n+ * parameters were not supplied and can be generated by the {@code KDF}\n+ * object, these may be supplied by the implementation. For additional\n+ * information, see: {@link javax.crypto.KDF#getParameters()}.\n","filename":"src\/java.base\/share\/classes\/java\/security\/KDFParameters.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,6 +50,1 @@\n- * of methods. For HKDF, KDF algorithm names follow a naming convention of\n- * <em>Algorithm<\/em>With<em>PRF<\/em>. For instance, a KDF implementation of\n- * HKDF using HMAC-SHA256 has an algorithm name of \"HKDFWithHmacSHA256\". For\n- * future algorithms, the \"WithPRF\" portion of the algorithm field may be\n- * omitted if the KDF algorithm has a fixed or default PRF or if the PRF is\n- * specified as part of the {@code KDFParameters}.\n+ * of methods.\n@@ -77,1 +72,1 @@\n- *    KDF kdfHkdf = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+ *    KDF kdfHkdf = KDF.getInstance(\"HKDF-SHA256\");\n@@ -79,1 +74,1 @@\n- *    AlgorithmParameterSpec derivationParameterSpec =\n+ *    AlgorithmParameterSpec derivationSpec =\n@@ -84,1 +79,1 @@\n- *    SecretKey sKey = kdfHkdf.deriveKey(\"AES\", derivationParameterSpec);\n+ *    SecretKey sKey = kdfHkdf.deriveKey(\"AES\", derivationSpec);\n@@ -201,1 +196,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm.\n+     * Returns a {@code KDF} object that implements the specified algorithm.\n@@ -230,1 +225,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm from\n+     * Returns a {@code KDF} object that implements the specified algorithm from\n@@ -267,1 +262,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm from\n+     * Returns a {@code KDF} object that implements the specified algorithm from\n@@ -301,1 +296,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm and\n+     * Returns a {@code KDF} object that implements the specified algorithm and\n@@ -352,1 +347,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm from\n+     * Returns a {@code KDF} object that implements the specified algorithm from\n@@ -407,1 +402,1 @@\n-     * Returns a {@code KDF} instance initialized with the specified algorithm from\n+     * Returns a {@code KDF} object that implements the specified algorithm from\n@@ -474,1 +469,1 @@\n-     * @param derivationParameterSpec\n+     * @param derivationSpec\n@@ -480,2 +475,2 @@\n-     *     if the information contained within the {@code derivationParameterSpec} is\n-     *     invalid or if the combination of {@code alg} and the {@code derivationParameterSpec}\n+     *     if the information contained within the {@code derivationSpec} is\n+     *     invalid or if the combination of {@code alg} and the {@code derivationSpec}\n@@ -487,1 +482,1 @@\n-     *     if {@code alg} or {@code derivationParameterSpec} is null\n+     *     if {@code alg} or {@code derivationSpec} is null\n@@ -490,1 +485,1 @@\n-                               AlgorithmParameterSpec derivationParameterSpec)\n+                               AlgorithmParameterSpec derivationSpec)\n@@ -501,1 +496,1 @@\n-        Objects.requireNonNull(derivationParameterSpec);\n+        Objects.requireNonNull(derivationSpec);\n@@ -503,1 +498,1 @@\n-            return spi.engineDeriveKey(alg, derivationParameterSpec);\n+            return spi.engineDeriveKey(alg, derivationSpec);\n@@ -505,1 +500,1 @@\n-            return (SecretKey) chooseProvider(alg, derivationParameterSpec);\n+            return (SecretKey) chooseProvider(alg, derivationSpec);\n@@ -515,1 +510,1 @@\n-     * @param derivationParameterSpec\n+     * @param derivationSpec\n@@ -521,1 +516,1 @@\n-     *     if the information contained within the {@code derivationParameterSpec} is\n+     *     if the information contained within the {@code derivationSpec} is\n@@ -526,1 +521,1 @@\n-     *     if {@code derivationParameterSpec} is null\n+     *     if {@code derivationSpec} is null\n@@ -528,1 +523,1 @@\n-    public byte[] deriveData(AlgorithmParameterSpec derivationParameterSpec)\n+    public byte[] deriveData(AlgorithmParameterSpec derivationSpec)\n@@ -531,1 +526,1 @@\n-        Objects.requireNonNull(derivationParameterSpec);\n+        Objects.requireNonNull(derivationSpec);\n@@ -533,1 +528,1 @@\n-            return spi.engineDeriveData(derivationParameterSpec);\n+            return spi.engineDeriveData(derivationSpec);\n@@ -536,1 +531,1 @@\n-                return (byte[]) chooseProvider(null, derivationParameterSpec);\n+                return (byte[]) chooseProvider(null, derivationSpec);\n@@ -564,1 +559,1 @@\n-     * {@code derivationParameterSpec} values, and assigns the global spi and\n+     * {@code derivationSpec} values, and assigns the global spi and\n@@ -570,1 +565,1 @@\n-                                  AlgorithmParameterSpec derivationParameterSpec)\n+                                  AlgorithmParameterSpec derivationSpec)\n@@ -578,2 +573,2 @@\n-                    derivationParameterSpec) : spi.engineDeriveKey(algorithm,\n-                                                                   derivationParameterSpec);\n+                    derivationSpec) : spi.engineDeriveKey(algorithm,\n+                                                                   derivationSpec);\n@@ -611,2 +606,2 @@\n-                        derivationParameterSpec) : currSpi.engineDeriveKey(\n-                        algorithm, derivationParameterSpec);\n+                        derivationSpec) : currSpi.engineDeriveKey(\n+                        algorithm, derivationSpec);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":31,"deletions":36,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -53,5 +53,4 @@\n- * upon receiving a {@code null} value. Furthermore, implementations\n- * may supply default values for {@code KDFParameters}, mutating the\n- * object or returning a new object. In that case,\n- * {@link KDFSpi#engineGetParameters()} should supply callers with the actual\n- * {@code KDFParameters} object used.\n+ * upon receiving a {@code null} value. Furthermore, implementations may\n+ * return parameters with additional default values or random parameter\n+ * values used by the underlying {@code KDF} algorithm. See\n+ * {@link KDFSpi#engineGetParameters()} for more details.\n@@ -110,1 +109,1 @@\n-     * @param derivationParameterSpec\n+     * @param derivationSpec\n@@ -113,4 +112,5 @@\n-     * @return a {@code SecretKey} object corresponding to a key built from the\n-     *     KDF output and according to the derivation parameters. If the resultant\n-     *     key is extractable, then its {@code getEncoded} value should have the\n-     *     same content as the result of {@code deriveData}.\n+     * @return the derived key.\n+     *\n+     * @implNote If the resultant key is extractable, then its {@code\n+     * getEncoded} value should have the same content as the result of {@code\n+     * deriveData}.\n@@ -119,2 +119,2 @@\n-     *     if the information contained within the {@code derivationParameterSpec} is\n-     *     invalid or if the combination of {@code alg} and the {@code derivationParameterSpec}\n+     *     if the information contained within the {@code derivationSpec} is\n+     *     invalid or if the combination of {@code alg} and the {@code derivationSpec}\n@@ -126,1 +126,1 @@\n-     *     if {@code alg} or {@code derivationParameterSpec} is null\n+     *     if {@code alg} or {@code derivationSpec} is null\n@@ -129,1 +129,1 @@\n-                                                 AlgorithmParameterSpec derivationParameterSpec)\n+                                                 AlgorithmParameterSpec derivationSpec)\n@@ -138,1 +138,1 @@\n-     * @param derivationParameterSpec\n+     * @param derivationSpec\n@@ -141,2 +141,1 @@\n-     * @return a byte array corresponding to the KDF output and according to\n-     * the derivation parameters.\n+     * @return the derived key in its raw bytes.\n@@ -145,1 +144,1 @@\n-     *     if the information contained within the {@code derivationParameterSpec} is\n+     *     if the information contained within the {@code derivationSpec} is\n@@ -150,1 +149,1 @@\n-     *     if {@code derivationParameterSpec} is null\n+     *     if {@code derivationSpec} is null\n@@ -153,1 +152,1 @@\n-        AlgorithmParameterSpec derivationParameterSpec)\n+        AlgorithmParameterSpec derivationSpec)\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -366,6 +366,5 @@\n-         *     the length of the output keying material (must be greater than 0)\n-         *\n-         * @implNote HKDF implementations will enforce that the length is less than\n-         * 255 * HMAC length. Implementations will also enforce that the prk\n-         * calculated from the {@code Extract} phase, if applicable, is at least\n-         * as many bytes as the HMAC length.\n+         *     the length of the output keying material (must be greater than\n+         *     0). Note: HKDF implementations will enforce that the length is\n+         *     less than 255 * HMAC length. Implementations will also enforce\n+         *     that the prk calculated from the {@code Extract} phase, if\n+         *     applicable, is at least as many bytes as the HMAC length.\n@@ -436,1 +435,5 @@\n-         *     the length of the output keying material (must be greater than 0)\n+         *     the length of the output keying material (must be greater than\n+         *     0). Note: HKDF implementations will enforce that the length is\n+         *     less than 255 * HMAC length. Implementations will also enforce\n+         *     that the prk calculated from the {@code Extract} phase, if\n+         *     applicable, is at least as many bytes as the HMAC length.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        var kdf = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+        var kdf = KDF.getInstance(\"HKDF-SHA256\");\n@@ -73,1 +73,1 @@\n-        var kdf = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+        var kdf = KDF.getInstance(\"HKDF-SHA256\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/BasicHKDFFunctions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        add(new TestData(\"RFC 5869 Test Case 1\", \"HKDFWithHmacSHA256\",\n+        add(new TestData(\"RFC 5869 Test Case 1\", \"HKDF-SHA256\",\n@@ -88,1 +88,1 @@\n-        add(new TestData(\"RFC 5869 Test Case 2\", \"HKDFWithHmacSHA256\",\n+        add(new TestData(\"RFC 5869 Test Case 2\", \"HKDF-SHA256\",\n@@ -111,1 +111,1 @@\n-        add(new TestData(\"RFC 5869 Test Case 3\", \"HKDFWithHmacSHA256\",\n+        add(new TestData(\"RFC 5869 Test Case 3\", \"HKDF-SHA256\",\n@@ -168,1 +168,1 @@\n-        AlgorithmParameterSpec kdfParameterSpecExtract =\n+        AlgorithmParameterSpec derivationSpecExtract =\n@@ -172,1 +172,1 @@\n-        actualPRK = kdfExtract.deriveKey(\"Generic\", kdfParameterSpecExtract);\n+        actualPRK = kdfExtract.deriveKey(\"Generic\", derivationSpecExtract);\n@@ -175,1 +175,1 @@\n-        deriveData = kdfExtract.deriveData(kdfParameterSpecExtract);\n+        deriveData = kdfExtract.deriveData(derivationSpecExtract);\n@@ -184,1 +184,1 @@\n-        AlgorithmParameterSpec kdfParameterSpecExpand = HKDFParameterSpec.expandOnly(\n+        AlgorithmParameterSpec derivationSpecExpand = HKDFParameterSpec.expandOnly(\n@@ -187,1 +187,1 @@\n-        actualOKM = kdfExpand.deriveKey(\"Generic\", kdfParameterSpecExpand);\n+        actualOKM = kdfExpand.deriveKey(\"Generic\", derivationSpecExpand);\n@@ -190,1 +190,1 @@\n-        deriveData = kdfExpand.deriveData(kdfParameterSpecExpand);\n+        deriveData = kdfExpand.deriveData(derivationSpecExpand);\n@@ -200,1 +200,1 @@\n-        AlgorithmParameterSpec kdfParameterSpecExtractExpand =\n+        AlgorithmParameterSpec derivationSpecExtractExpand =\n@@ -205,1 +205,1 @@\n-        actualOKM = kdfHkdf.deriveKey(\"Generic\", kdfParameterSpecExtractExpand);\n+        actualOKM = kdfHkdf.deriveKey(\"Generic\", derivationSpecExtractExpand);\n@@ -208,1 +208,1 @@\n-        deriveData = kdfHkdf.deriveData(kdfParameterSpecExtractExpand);\n+        deriveData = kdfHkdf.deriveData(derivationSpecExtractExpand);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFKnownAnswerTests.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    AlgorithmParameterSpec kdfParameterSpec =\n+    AlgorithmParameterSpec derivationSpec =\n@@ -60,1 +60,1 @@\n-        kdfUnderTest = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+        kdfUnderTest = KDF.getInstance(\"HKDF-SHA256\");\n@@ -66,1 +66,1 @@\n-        SecretKey result = kdfUnderTest.deriveKey(\"Generic\", kdfParameterSpec);\n+        SecretKey result = kdfUnderTest.deriveKey(\"Generic\", derivationSpec);\n@@ -70,1 +70,1 @@\n-        byte[] resultData = kdfUnderTest.deriveData(kdfParameterSpec);\n+        byte[] resultData = kdfUnderTest.deriveData(derivationSpec);\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderSyncTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        kdf.deriveData(new MyKDFParameterSpec() {});\n+        kdf.deriveData(new MyDerivationSpec() {});\n@@ -96,1 +96,1 @@\n-            AlgorithmParameterSpec derivationParameterSpec)\n+            AlgorithmParameterSpec derivationSpec)\n@@ -98,1 +98,1 @@\n-            if (derivationParameterSpec instanceof MyKDFParameterSpec) {\n+            if (derivationSpec instanceof MyDerivationSpec) {\n@@ -126,1 +126,1 @@\n-                                            AlgorithmParameterSpec derivationParameterSpec)\n+                                            AlgorithmParameterSpec derivationSpec)\n@@ -132,1 +132,1 @@\n-            AlgorithmParameterSpec derivationParameterSpec)\n+            AlgorithmParameterSpec derivationSpec)\n@@ -142,1 +142,1 @@\n-    static class MyKDFParameterSpec implements AlgorithmParameterSpec {}\n+    static class MyDerivationSpec implements AlgorithmParameterSpec {}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}