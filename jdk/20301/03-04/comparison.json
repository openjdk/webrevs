{"files":[{"patch":"@@ -442,0 +442,11 @@\n+\n+        if (alg == null || alg.isEmpty()) {\n+            throw new NullPointerException(\n+                \"the algorithm for the SecretKey return value may not be \"\n+                + \"null or empty\");\n+        }\n+        Objects.requireNonNull(kdfParameterSpec);\n+        if (spi != null) {\n+            return spi.engineDeriveKey(alg, kdfParameterSpec);\n+        }\n+\n@@ -443,43 +454,3 @@\n-            if (alg == null || alg.isEmpty()) {\n-                throw new NullPointerException(\n-                    \"the algorithm for the SecretKey return value may not be \"\n-                    + \"null or empty\");\n-            }\n-            Objects.requireNonNull(kdfParameterSpec);\n-            if (spi != null) {\n-                return spi.engineDeriveKey(alg, kdfParameterSpec);\n-            }\n-            Exception lastException = null;\n-            while ((firstService != null) || serviceIterator.hasNext()) {\n-                Service s;\n-                if (firstService != null) {\n-                    s = firstService;\n-                    firstService = null;\n-                } else {\n-                    s = serviceIterator.next();\n-                }\n-                if (!JceSecurity.canUseProvider(s.getProvider())) {\n-                    continue;\n-                }\n-                try {\n-                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n-                    SecretKey result = spi.engineDeriveKey(alg,\n-                                                           kdfParameterSpec);\n-                    provider = s.getProvider();\n-                    this.spi = spi;\n-                    firstService = null;\n-                    serviceIterator = null;\n-                    return result;\n-                } catch (Exception e) {\n-                    if (lastException == null) {\n-                        lastException = e;\n-                    }\n-                }\n-            }\n-            \/\/ no working provider found, fail\n-            if (lastException instanceof InvalidParameterSpecException) {\n-                throw (InvalidParameterSpecException) lastException;\n-            }\n-            if (lastException instanceof RuntimeException) {\n-                throw (RuntimeException) lastException;\n-            }\n+            chooseFirstProvider();\n+            return spi.engineDeriveKey(alg,\n+                                kdfParameterSpec);\n@@ -487,3 +458,0 @@\n-        throw new InvalidParameterSpecException(\n-            \"No installed provider supports the deriveKey method with \"\n-            + \"these parameters\");\n@@ -518,0 +486,6 @@\n+\n+        Objects.requireNonNull(kdfParameterSpec);\n+        if (spi != null) {\n+            return spi.engineDeriveData(kdfParameterSpec);\n+        }\n+\n@@ -519,37 +493,2 @@\n-            Objects.requireNonNull(kdfParameterSpec);\n-            if (spi != null) {\n-                return spi.engineDeriveData(kdfParameterSpec);\n-            }\n-            Exception lastException = null;\n-            while ((firstService != null) || serviceIterator.hasNext()) {\n-                Service s;\n-                if (firstService != null) {\n-                    s = firstService;\n-                    firstService = null;\n-                } else {\n-                    s = serviceIterator.next();\n-                }\n-                if (!JceSecurity.canUseProvider(s.getProvider())) {\n-                    continue;\n-                }\n-                try {\n-                    KDFSpi spi = (KDFSpi) s.newInstance(kdfParameters);\n-                    byte[] result = spi.engineDeriveData(kdfParameterSpec);\n-                    provider = s.getProvider();\n-                    this.spi = spi;\n-                    firstService = null;\n-                    serviceIterator = null;\n-                    return result;\n-                } catch (Exception e) {\n-                    if (lastException == null) {\n-                        lastException = e;\n-                    }\n-                }\n-            }\n-            \/\/ no working provider found, fail\n-            if (lastException instanceof InvalidParameterSpecException) {\n-                throw (InvalidParameterSpecException) lastException;\n-            }\n-            if (lastException instanceof RuntimeException) {\n-                throw (RuntimeException) lastException;\n-            }\n+            chooseFirstProvider();\n+            return spi.engineDeriveData(kdfParameterSpec);\n@@ -557,3 +496,0 @@\n-        throw new InvalidParameterSpecException(\n-            \"No installed provider supports the deriveData method with\"\n-            + \" these parameters\");\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":22,"deletions":86,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import org.testng.annotations.Test;\n@@ -38,1 +39,0 @@\n-import javax.crypto.spec.KDFParameterSpec;\n@@ -41,0 +41,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -51,3 +52,3 @@\n-    KDFParameterSpec kdfParameterSpec = HKDFParameterSpec.extractExpand(\n-        HKDFParameterSpec.extract().addIKM(ikm).addSalt(salt).extractOnly(),\n-        info, 42);\n+    AlgorithmParameterSpec kdfParameterSpec =\n+        HKDFParameterSpec.ofExtract().addIKM(ikm).addSalt(salt).thenExpand(\n+            info, 42);\n@@ -62,1 +63,1 @@\n-    @Test(threadPoolSize = 50, invocationCount = 10000, timeOut = 10)\n+    @Test(threadPoolSize = 50, invocationCount = 10000, timeOut = 25)\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Threading.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}