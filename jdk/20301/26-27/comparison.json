{"files":[{"patch":"@@ -37,1 +37,1 @@\n-import java.security.KDFParameters;\n+import javax.crypto.KDFParameters;\n@@ -41,1 +41,0 @@\n-import java.security.spec.InvalidParameterSpecException;\n@@ -44,1 +43,0 @@\n-import java.util.Collection;\n@@ -59,0 +57,10 @@\n+    private static final int SHA256_HMAC_SIZE = 32;\n+    private static final int SHA384_HMAC_SIZE = 48;\n+    private static final int SHA512_HMAC_SIZE = 64;\n+\n+    private static final Integer[] SUPPORTED_HMAC_SIZES = new Integer[] {\n+        SHA256_HMAC_SIZE,\n+        SHA384_HMAC_SIZE,\n+        SHA512_HMAC_SIZE\n+    };\n+\n@@ -69,1 +77,1 @@\n-    HkdfKeyDerivation(String hmacAlgName, int hmacLen,\n+    private HkdfKeyDerivation(String hmacAlgName, int hmacLen,\n@@ -77,0 +85,5 @@\n+        \/\/ added to enforce valid values at reviewer's request\n+        if (!Arrays.asList(SUPPORTED_HMAC_SIZES).contains(hmacLen)){\n+            throw new InternalError(\n+                \"Subclass attempted to use an invalid hmacLen\");\n+        }\n@@ -255,0 +268,3 @@\n+                \/\/ deliberately omitting os.flush(), since we are writing to\n+                \/\/ memory, and toByteArray() reads like there isn't an explicit\n+                \/\/ need for this call\n@@ -371,1 +387,1 @@\n-            super(\"HmacSHA256\", 32, kdfParameters);\n+            super(\"HmacSHA256\", SHA256_HMAC_SIZE, kdfParameters);\n@@ -378,1 +394,1 @@\n-            super(\"HmacSHA384\", 48, kdfParameters);\n+            super(\"HmacSHA384\", SHA384_HMAC_SIZE, kdfParameters);\n@@ -385,1 +401,1 @@\n-            super(\"HmacSHA512\", 64, kdfParameters);\n+            super(\"HmacSHA512\", SHA512_HMAC_SIZE, kdfParameters);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.security;\n-\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- * A specification of {@code KDF} parameters.\n- * <p>\n- * The purpose of this interface is to group (and provide type safety for) all\n- * {@code KDF} parameter specifications. All {@code KDF} parameter\n- * specifications must implement this interface.\n- * <p>\n- * A {@code KDFParameters} object is passed as a parameter to one of\n- * the\n- * {@link javax.crypto.KDF#getInstance(String, KDFParameters) KDF.getInstance}\n- * methods. The {@code getInstance} method returns a {@code KDF}.\n- * <p>\n- * {@code KDF} implementations may choose to supply additional default or\n- * random parameter values used by the underlying KDF algorithm. If required\n- * parameters were not supplied and can be generated by the {@code KDF}\n- * object, these may be supplied by the implementation. For additional\n- * information, see: {@link javax.crypto.KDF#getParameters()}.\n- *\n- * @see javax.crypto.KDF#getInstance(String, KDFParameters)\n- * @see javax.crypto.KDF#getParameters()\n- * @since 24\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.KEY_DERIVATION)\n-public interface KDFParameters {}\n","filename":"src\/java.base\/share\/classes\/java\/security\/KDFParameters.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -30,0 +30,1 @@\n+import javax.crypto.KDFParameters;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.security.KDFParameters;\n@@ -39,1 +38,0 @@\n-import java.security.ProviderException;\n@@ -54,1 +52,1 @@\n- * will return a {@code SecretKey} object with the specified algorithm. The\n+ * returns a {@code SecretKey} object with the specified algorithm. The\n@@ -93,3 +91,3 @@\n- * the key material that is subsequently passed to the deriveKey or\n- * deriveData methods. Therefore, it is recommended not to call the {@code\n- * getProviderName} or {@code getParameters} methods until after a key\n+ * the key material that is subsequently passed to the {@code deriveKey} or\n+ * {@code deriveData} methods. Therefore, it is recommended not to call the\n+ * {@code getProviderName} or {@code getParameters} methods until after a key\n@@ -128,2 +126,3 @@\n-    \/\/ This lock is intended to provide synchronization when the KDFSpi and\n-    \/\/ Provider objects of the Delegate record are changed\n+    \/\/ This lock provides mutual exclusion, preventing multiple threads from\n+    \/\/ concurrently initializing the same instance (delayed provider selection)\n+    \/\/ in a way which would corrupt the internal state.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javax.crypto;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A specification of Key Derivation Function ({@link KDF})\n+ * parameters.\n+ * <p>\n+ * The purpose of this interface is to group (and provide type safety for) all\n+ * {@code KDF} parameter specifications. All {@code KDF} parameter\n+ * specifications must implement this interface.\n+ * <p>\n+ * A {@code KDFParameters} object is passed as a parameter to one of\n+ * the\n+ * {@link KDF#getInstance(String, KDFParameters) KDF.getInstance}\n+ * methods. The {@code getInstance} method returns a {@code KDF}.\n+ * <p>\n+ * {@code KDF} implementations may choose to supply additional default or\n+ * random parameter values used by the underlying KDF algorithm. If required\n+ * parameters were not supplied and can be generated by the {@code KDF}\n+ * object, these may be supplied by the implementation. For additional\n+ * information, see: {@link KDF#getParameters()}.\n+ *\n+ * @see KDF#getInstance(String, KDFParameters)\n+ * @see KDF#getParameters()\n+ * @see KDF\n+ * @since 24\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.KEY_DERIVATION)\n+public interface KDFParameters {}\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFParameters.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -31,1 +31,0 @@\n-import java.security.KDFParameters;\n@@ -37,1 +36,1 @@\n- * {@code KDF} class.\n+ * Key Derivation Function ({@link KDF}) class.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+ * @see javax.crypto.KDF\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import java.security.KDFParameters;\n+import javax.crypto.KDFParameters;\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}