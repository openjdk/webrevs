{"files":[{"patch":"@@ -314,0 +314,1 @@\n+        NoSuchAlgorithmException lastException = null;\n@@ -322,0 +323,4 @@\n+                    lastException = new NoSuchAlgorithmException(\n+                        new InvalidAlgorithmParameterException(\n+                            \"newInstance failed to provide a KDFSpi for the \"\n+                            + \"provided kdfParameters\"));\n@@ -325,1 +330,2 @@\n-                    return new KDF(new Delegate(spiObj, s.getProvider()), t, algorithm, kdfParameters);\n+                    return new KDF(new Delegate(spiObj, s.getProvider()), t,\n+                                   algorithm, kdfParameters);\n@@ -327,1 +333,2 @@\n-                    return new KDF(new Delegate(spiObj, s.getProvider()), algorithm, kdfParameters);\n+                    return new KDF(new Delegate(spiObj, s.getProvider()),\n+                                   algorithm, kdfParameters);\n@@ -330,1 +337,5 @@\n-                \/\/ ignore\n+                lastException =\n+                    new NoSuchAlgorithmException(\n+                        new InvalidAlgorithmParameterException(\n+                            \"newInstance failed for the provided \"\n+                            + \"kdfParameters\"));\n@@ -334,2 +345,6 @@\n-        throw new NoSuchAlgorithmException(\n-            \"Algorithm \" + algorithm + \" not available\");\n+        if (lastException != null) {\n+            return handleException(lastException);\n+        } else {\n+            throw new NoSuchAlgorithmException(\n+                \"Algorithm \" + algorithm + \" not available\");\n+        }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -158,6 +158,0 @@\n-         * <p>\n-         * This supports the use-case where a label can be applied to the IKM\n-         * but the actual value of the IKM is not yet available.\n-         *\n-         * @implNote An HKDF implementation should concatenate the input keying\n-         * materials into a single value once all components are available.\n@@ -186,6 +180,0 @@\n-         * <p>\n-         * This supports the use-case where a label can be applied to the IKM\n-         * but the actual value of the IKM is not yet available.\n-         *\n-         * @implNote An HKDF implementation should concatenate the input keying\n-         * materials into a single value once all components are available.\n@@ -218,3 +206,0 @@\n-         * @implNote An HKDF implementation should concatenate the salt into a\n-         * single value once all components are available.\n-         *\n@@ -243,3 +228,0 @@\n-         * @implNote An HKDF implementation should concatenate the salt into a\n-         * single value once all components are available.\n-         *\n@@ -324,0 +306,6 @@\n+         * <p>\n+         * Input keying material values added by {@link Builder#addIKM(byte[])}\n+         * are converted to a {@code SecretKeySpec} object.\n+         *\n+         * @implNote An HKDF implementation should concatenate the input keying\n+         * materials into a single value to be used in HKDF-Extract.\n@@ -334,0 +322,6 @@\n+         * <p>\n+         * Salt values added by {@link Builder#addSalt(byte[])}\n+         * are converted to a {@code SecretKeySpec} object.\n+         *\n+         * @implNote An HKDF implementation should concatenate the salt into a\n+         * single value to be used in HKDF-Extract.\n@@ -366,5 +360,1 @@\n-         *     the length of the output keying material (must be greater than\n-         *     0). Note: HKDF implementations will enforce that the length is\n-         *     less than 255 * HMAC length. Implementations will also enforce\n-         *     that the prk calculated from the {@code Extract} phase, if\n-         *     applicable, is at least as many bytes as the HMAC length.\n+         *     the length of the output keying material\n@@ -435,10 +425,1 @@\n-         *     the length of the output keying material (must be greater than\n-         *     0). Note: HKDF implementations will enforce that the length is\n-         *     less than 255 * HMAC length. Implementations will also enforce\n-         *     that the prk calculated from the {@code Extract} phase, if\n-         *     applicable, is at least as many bytes as the HMAC length.\n-         *\n-         * @implNote HKDF implementations will enforce that the length is less than\n-         * 255 * HMAC length. Implementations will also enforce that the prk\n-         * calculated from the {@code Extract} phase is at least as many bytes\n-         * as the HMAC length.\n+         *     the length of the output keying material\n@@ -462,0 +443,6 @@\n+         * <p>\n+         * Input keying material values added by {@link Builder#addIKM(byte[])}\n+         * are converted to a {@code SecretKeySpec} object.\n+         *\n+         * @implNote An HKDF implementation should concatenate the input keying\n+         * materials into a single value to be used in the HKDF-Extract phase.\n@@ -472,0 +459,6 @@\n+         * <p>\n+         * Salt values added by {@link Builder#addSalt(byte[])}\n+         * are converted to a {@code SecretKeySpec} object.\n+         *\n+         * @implNote An HKDF implementation should concatenate the salt into a\n+         * single value to be used in the HKDF-Extract phase.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"}]}