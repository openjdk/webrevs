{"files":[{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Djava.security.debug=provider,engine=kdf KDFDelayedProviderThreadingTest\n+ * @run main\/othervm KDFDelayedProviderThreadingTest\n@@ -34,2 +34,1 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n+import jdk.test.lib.Asserts;\n@@ -43,1 +42,0 @@\n-import java.security.NoSuchAlgorithmException;\n@@ -50,0 +48,9 @@\n+    \/\/\/ This number of iterations is enough to see a case where the threads\n+    \/\/\/ arrange themselves such that both `deriveData` attempts cause \"ERROR\",\n+    \/\/\/ which is still a passing case.\n+    static final int ITERATIONS = 10000;\n+    static int threadOrderReversalCounter = 0;\n+    static final String ERROR = \"ERROR\";\n+    static volatile String out;\n+    static final HKDFParameterSpec input\n+            = HKDFParameterSpec.ofExtract().extractOnly();\n@@ -51,1 +58,7 @@\n-    KDF k;\n+    static String derive(KDF kdf) {\n+        try {\n+            return Arrays.toString(kdf.deriveData(input));\n+        } catch (Exception e) {\n+            return ERROR;\n+        }\n+    }\n@@ -53,2 +66,1 @@\n-    @BeforeClass\n-    public void setUp() throws NoSuchAlgorithmException {\n+    public static void main(String[] args) throws Exception {\n@@ -56,1 +68,13 @@\n-        k = KDF.getInstance(\"HKDF-SHA256\");\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            test();\n+        }\n+\n+        \/\/ If the value of threadOrderReversalCounter is consistently zero,\n+        \/\/ then this test may need to be adjusted for newer hardware to ensure\n+        \/\/ a thorough test. This didn't seem fitting for a check, such as\n+        \/\/ `Asserts.assertTrue(threadOrderReversalCounter > 0);`, since we\n+        \/\/ may not want to start failing the test right away when running on\n+        \/\/ better hardware someday.\n+        System.out.println(\"Also tested atypical threading condition \"\n+                           + threadOrderReversalCounter + \"\/\" + ITERATIONS\n+                           + \" iterations (depends on hardware specs\/utilization).\");\n@@ -59,13 +83,14 @@\n-    @Test(threadPoolSize = 50, invocationCount = 1000000, timeOut = 150)\n-    public void testThreading() throws Exception {\n-        var input = HKDFParameterSpec.ofExtract().extractOnly();\n-        new Thread(() -> {\n-            try {\n-                System.out.println(Arrays.toString(k.deriveData(input)));\n-            } catch (Exception e) {\n-                System.out.println(e);\n-                throw new RuntimeException(e);\n-            }\n-        }).start();\n-        new Thread(() -> k.getProviderName()).start();\n-        System.out.println(Arrays.toString(k.deriveData(input)));\n+    static void test() throws Exception {\n+        var k = KDF.getInstance(\"HKDF-SHA256\");\n+        var t1 = new Thread(() -> out = derive(k));\n+        var t2 = new Thread(() -> k.getProviderName());\n+        t1.start();\n+        t2.start();\n+        t1.join();\n+        t2.join();\n+\n+        String out2 = derive(k);\n+        Asserts.assertEquals(out, out2);\n+        if (out.length() < 10) { \/\/ \"error\"\n+            threadOrderReversalCounter++;\n+        }\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderThreadingTest.java","additions":46,"deletions":21,"binary":false,"changes":67,"status":"modified"}]}