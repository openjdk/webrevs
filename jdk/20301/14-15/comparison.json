{"files":[{"patch":"@@ -103,1 +103,1 @@\n-                \"the algorithm for the SecretKey return value should not be null\");\n+                \"the algorithm for the SecretKey return value must not be null\");\n@@ -107,1 +107,1 @@\n-                \"the algorithm for the SecretKey return value should not be \"\n+                \"the algorithm for the SecretKey return value must not be \"\n@@ -124,1 +124,1 @@\n-     *     if the derived key material is not extractable\n+     *     if the derived keying material is not extractable\n@@ -161,1 +161,1 @@\n-                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -163,1 +163,1 @@\n-                    + \"key or salt material\").initCause(ike);\n+                    + \"key or salt material\", ike);\n@@ -194,1 +194,1 @@\n-                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -196,1 +196,1 @@\n-                    + \"key material\").initCause(ike);\n+                    + \"keying material\", ike);\n@@ -238,1 +238,1 @@\n-                throw (InvalidAlgorithmParameterException) new InvalidAlgorithmParameterException(\n+                throw new InvalidAlgorithmParameterException(\n@@ -240,1 +240,1 @@\n-                    + \"the given key or salt material\").initCause(ike);\n+                    + \"the given key or salt material\", ike);\n@@ -283,2 +283,2 @@\n-     *     the salt value used for HKDF-Extract; {@code null} if no salt is\n-     *     to be used.\n+     *     the salt value used for HKDF-Extract; {@code null} if no salt value\n+     *     is provided.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n- *    kdfHkdf.deriveKey(\"AES\", derivationParameterSpec);\n+ *    SecretKey sKey = kdfHkdf.deriveKey(\"AES\", derivationParameterSpec);\n@@ -220,1 +220,1 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n@@ -231,1 +231,2 @@\n-     * the specified security provider.\n+     * the specified security provider. The specified provider must be\n+     * registered in the security provider list.\n@@ -245,1 +246,1 @@\n-     *     if the specified provider does not support the specified KDF\n+     *     if the specified provider does not support the specified {@code KDF}\n@@ -255,2 +256,2 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n-        Objects.requireNonNull(provider, \"provider should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n+        Objects.requireNonNull(provider, \"provider must not be null\");\n@@ -267,1 +268,2 @@\n-     * the specified security provider.\n+     * the specified security provider. The specified provider must be\n+     * registered in the security provider list.\n@@ -281,1 +283,1 @@\n-     *     if the specified provider does not support the specified KDF\n+     *     if the specified provider does not support the specified {@code KDF}\n@@ -288,2 +290,2 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n-        Objects.requireNonNull(provider, \"provider should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n+        Objects.requireNonNull(provider, \"provider must not be null\");\n@@ -315,2 +317,2 @@\n-     *     if no {@code Provider} supports a {@code KDFSpi} implementation for\n-     *     the specified algorithm\n+     *     if no {@code Provider} supports a {@code KDF} implementation for the\n+     *     specified algorithm\n@@ -318,3 +320,2 @@\n-     *     if the initialization parameters are inappropriate for this\n-     *     {@code KDF} or if no provider can be found which supports the\n-     *     parameters\n+     *     if no {@code Provider} supports a {@code KDFSpi} implementation for\n+     *     the specified algorithm and parameters\n@@ -327,1 +328,1 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n@@ -353,0 +354,1 @@\n+     * The specified provider must be registered in the security provider list.\n@@ -369,1 +371,1 @@\n-     *     if the specified provider does not support the specified KDF\n+     *     if the specified provider does not support the specified {@code KDF}\n@@ -375,3 +377,2 @@\n-     *     if the initialization parameters are inappropriate for this\n-     *     {@code KDF} or if the specified provider does not support the\n-     *     parameters\n+     *     if no {@code Provider} supports a {@code KDFSpi} implementation for\n+     *     the specified algorithm and parameters\n@@ -386,2 +387,2 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n-        Objects.requireNonNull(provider, \"provider should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n+        Objects.requireNonNull(provider, \"provider must not be null\");\n@@ -408,0 +409,1 @@\n+     * The specified provider must be registered in the security provider list.\n@@ -424,1 +426,1 @@\n-     *     if the specified provider does not support the specified KDF\n+     *     if the specified provider does not support the specified {@code KDF}\n@@ -427,3 +429,2 @@\n-     *     if the initialization parameters are inappropriate for this\n-     *     {@code KDF} or if the specified provider does not support the\n-     *     parameters\n+     *     if no {@code Provider} supports a {@code KDFSpi} implementation for\n+     *     the specified algorithm and parameters\n@@ -437,2 +438,2 @@\n-        Objects.requireNonNull(algorithm, \"algorithm should not be null\");\n-        Objects.requireNonNull(provider, \"provider should not be null\");\n+        Objects.requireNonNull(algorithm, \"algorithm must not be null\");\n+        Objects.requireNonNull(provider, \"provider must not be null\");\n@@ -494,1 +495,1 @@\n-                \"the algorithm for the SecretKey return value should not be null\");\n+                \"the algorithm for the SecretKey return value must not be null\");\n@@ -498,1 +499,1 @@\n-                \"the algorithm for the SecretKey return value should not be \"\n+                \"the algorithm for the SecretKey return value must not be \"\n@@ -525,1 +526,1 @@\n-     *     if the derived key material is not extractable\n+     *     if the derived keying material is not extractable\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * {@code KDFParameters} may throw an {@code InvalidAlgorithmParameterException}\n+ * {@code KDFParameters} should throw an {@code InvalidAlgorithmParameterException}\n@@ -55,2 +55,3 @@\n- * object. In that case, {@link KDFSpi#engineGetParameters()} would supply\n- * callers with the actual {@code KDFParameters} object used.\n+ * object or returning a new object. In that case,\n+ * {@link KDFSpi#engineGetParameters()} should supply callers with the actual\n+ * {@code KDFParameters} object used.\n@@ -105,1 +106,1 @@\n-     * {@code KDFSpi} instance.\n+     * {@code KDFSpi} instance, but it is not considered thread-safe.\n@@ -133,1 +134,1 @@\n-     * particular {@code KDFSpi} instance.\n+     * particular {@code KDFSpi} instance, but it is not considered thread-safe.\n@@ -145,1 +146,1 @@\n-     *     if the derived key material is not extractable\n+     *     if the derived keying material is not extractable\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -135,1 +135,4 @@\n-         *     the length of the output key material\n+         *     the length of the output keying material (must be greater than 0)\n+         *\n+         * @implNote HKDF implementations will enforce that the length is less\n+         * than 255 * HMAC length.\n@@ -149,1 +152,1 @@\n-         * Adds input key material to the builder.\n+         * Adds input keying material to the builder.\n@@ -151,1 +154,1 @@\n-         * {@code addIKM} may be called when the input key material value is to\n+         * {@code addIKM} may be called when the input keying material value is to\n@@ -158,3 +161,3 @@\n-         * <p>\n-         * An implementation should concatenate the input key materials into a\n-         * single value once all components are available.\n+         *\n+         * @implNote An HKDF implementation should concatenate the input keying\n+         * materials into a single value once all components are available.\n@@ -163,1 +166,1 @@\n-         *     the input key material value\n+         *     the input keying material value\n@@ -177,1 +180,1 @@\n-         * Adds input key material to the builder.\n+         * Adds input keying material to the builder.\n@@ -179,1 +182,1 @@\n-         * {@code addIKM} may be called when the input key material value is to\n+         * {@code addIKM} may be called when the input keying material value is to\n@@ -186,3 +189,3 @@\n-         * <p>\n-         * An implementation should concatenate the input key materials into a\n-         * single value once all components are available.\n+         *\n+         * @implNote An HKDF implementation should concatenate the input keying\n+         * materials into a single value once all components are available.\n@@ -191,1 +194,1 @@\n-         *     the input key material value\n+         *     the input keying material value\n@@ -214,3 +217,3 @@\n-         * <p>\n-         * An implementation should concatenate the salt into a single value\n-         * once all components are available.\n+         *\n+         * @implNote An HKDF implementation should concatenate the salt into a\n+         * single value once all components are available.\n@@ -239,3 +242,3 @@\n-         * <p>\n-         * An implementation should concatenate the salt into a single value\n-         * once all components are available.\n+         *\n+         * @implNote An HKDF implementation should concatenate the salt into a\n+         * single value once all components are available.\n@@ -265,1 +268,1 @@\n-     * @return a {@code Builder} to mutate\n+     * @return a new {@code Builder}\n@@ -272,1 +275,1 @@\n-     * Creates an {@code Expand} object\n+     * Creates an {@code Expand} object.\n@@ -281,2 +284,4 @@\n-     *     the length of the output key material (must be greater than 0 and\n-     *     less than 255 * HMAC length)\n+     *     the length of the output keying material (must be greater than 0)\n+     *\n+     * @implNote HKDF implementations will enforce that the length is less than\n+     * 255 * HMAC length.\n@@ -315,3 +320,3 @@\n-         * Returns an unmodifiable {@code List} of input key material values in\n-         * the order they were added. Returns an empty list if there are no\n-         * input key material values.\n+         * Returns an unmodifiable {@code List} of input keying material values\n+         * in the order they were added. Returns an empty list if there are no\n+         * input keying material values.\n@@ -319,1 +324,1 @@\n-         * @return the unmodifiable {@code List} of input key material values\n+         * @return the unmodifiable {@code List} of input keying material values\n@@ -360,1 +365,1 @@\n-         *     the length of the output key material (must be > 0 and < 255 *\n+         *     the length of the output keying material (must be > 0 and < 255 *\n@@ -396,1 +401,1 @@\n-         * Returns the length of the output key material.\n+         * Returns the length of the output keying material.\n@@ -398,1 +403,1 @@\n-         * @return the length of the output key material\n+         * @return the length of the output keying material\n@@ -426,1 +431,1 @@\n-         *     the length of the output key material (must be > 0 and < 255 *\n+         *     the length of the output keying material (must be > 0 and < 255 *\n@@ -442,3 +447,3 @@\n-         * Returns an unmodifiable {@code List} of input key material values in\n-         * the order they were added. Returns an empty list if there are no\n-         * input key material values.\n+         * Returns an unmodifiable {@code List} of input keying material values\n+         * in the order they were added. Returns an empty list if there are no\n+         * input keying material values.\n@@ -446,1 +451,1 @@\n-         * @return the unmodifiable {@code List} of input key material values\n+         * @return the unmodifiable {@code List} of input keying material values\n@@ -473,1 +478,1 @@\n-         * Returns the length of the output key material.\n+         * Returns the length of the output keying material.\n@@ -475,1 +480,1 @@\n-         * @return the length of the output key material\n+         * @return the length of the output keying material\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":42,"deletions":37,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331008\n+ * @library \/test\/lib\n+ * @run testng KDFDelayedProviderSyncTest\n+ * @summary multi-threading test for KDF\n+ * @enablePreview\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import javax.crypto.KDF;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import java.math.BigInteger;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.HexFormat;\n+\n+public class KDFDelayedProviderSyncTest {\n+    KDF kdfUnderTest;\n+    byte[] ikm = new BigInteger(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                                16).toByteArray();\n+    byte[] salt = new BigInteger(\"000102030405060708090a0b0c\",\n+                                 16).toByteArray();\n+    byte[] info = new BigInteger(\"f0f1f2f3f4f5f6f7f8f9\", 16).toByteArray();\n+    AlgorithmParameterSpec kdfParameterSpec =\n+        HKDFParameterSpec.ofExtract().addIKM(ikm).addSalt(salt).thenExpand(\n+            info, 42);\n+    String expectedResult =\n+        \"666b33562ebc5e2f041774192e0534efca06f82a5fca17ec8c6ae1b9f5466adba1d77d06480567ddd2d1\";\n+\n+    @BeforeClass\n+    public void setUp() throws NoSuchAlgorithmException {\n+        kdfUnderTest = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+    }\n+\n+    @Test(threadPoolSize = 50, invocationCount = 100, timeOut = 30)\n+    public void testDerive()\n+        throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {\n+        SecretKey result = kdfUnderTest.deriveKey(\"AES\", kdfParameterSpec);\n+        assert (HexFormat.of().formatHex(result.getEncoded()).equals(\n+            expectedResult));\n+\n+        byte[] resultData = kdfUnderTest.deriveData(kdfParameterSpec);\n+        assert (HexFormat.of().formatHex(resultData).equals(expectedResult));\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderSyncTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main Delayed\n+ * @run main KDFDelayedProviderTest\n@@ -46,1 +46,1 @@\n-public class Delayed {\n+public class KDFDelayedProviderTest {\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/javax\/crypto\/KDF\/Delayed.java","status":"renamed"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8331008\n- * @library \/test\/lib\n- * @run testng Threading\n- * @summary multi-threading test for KDF\n- * @enablePreview\n- *\/\n-\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-import javax.crypto.KDF;\n-import javax.crypto.SecretKey;\n-import javax.crypto.spec.HKDFParameterSpec;\n-import java.math.BigInteger;\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.util.HexFormat;\n-\n-public class Threading {\n-    KDF kdfUnderTest;\n-    byte[] ikm = new BigInteger(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n-                                16).toByteArray();\n-    byte[] salt = new BigInteger(\"000102030405060708090a0b0c\",\n-                                 16).toByteArray();\n-    byte[] info = new BigInteger(\"f0f1f2f3f4f5f6f7f8f9\", 16).toByteArray();\n-    AlgorithmParameterSpec kdfParameterSpec =\n-        HKDFParameterSpec.ofExtract().addIKM(ikm).addSalt(salt).thenExpand(\n-            info, 42);\n-    String expectedResult =\n-        \"666b33562ebc5e2f041774192e0534efca06f82a5fca17ec8c6ae1b9f5466adba1d77d06480567ddd2d1\";\n-\n-    @BeforeClass\n-    public void setUp() throws NoSuchAlgorithmException {\n-        kdfUnderTest = KDF.getInstance(\"HKDFWithHmacSHA256\");\n-    }\n-\n-    @Test(threadPoolSize = 50, invocationCount = 100, timeOut = 30)\n-    public void testDeriveKey() throws InvalidAlgorithmParameterException {\n-        SecretKey result = kdfUnderTest.deriveKey(\"AES\", kdfParameterSpec);\n-        assert (HexFormat.of().formatHex(result.getEncoded()).equals(\n-            expectedResult));\n-    }\n-}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Threading.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n-import java.io.*;\n-import java.net.*;\n-import java.security.*;\n-import java.util.jar.*;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.Provider;\n@@ -34,3 +33,2 @@\n- * This class verifies Provider\/Policy resources found at a URL\n- * (currently only JAR files and any supporting JAR files), and\n- * determines whether they may be used in this implementation.\n+ * This class is included here to enable testing of Delayed Provider Selection\n+ * by certain KDF tests. It only stubs out the necessary methods.\n@@ -38,7 +36,1 @@\n- * The JCE in OpenJDK has an open cryptographic interface, meaning it\n- * does not restrict which providers can be used.  Compliance with\n- * United States export controls and with local law governing the\n- * import\/export of products incorporating the JCE in the OpenJDK is\n- * the responsibility of the licensee.\n- *\n- * @since 1.7\n+ * @since 24\n@@ -48,4 +40,1 @@\n-    \/\/ The URL for the JAR file we want to verify.\n-    private final URL jarURL;\n-    private final boolean savePerms;\n-    private CryptoPermissions appPerms = null;\n+    private final CryptoPermissions appPerms = null;\n@@ -73,2 +62,1 @@\n-        this.jarURL = jarURL;\n-        this.savePerms = savePerms;\n+        \/\/ The URL for the JAR file we want to verify.\n@@ -78,5 +66,1 @@\n-     * Verify the JAR file is signed by an entity which has a certificate\n-     * issued by a trusted CA.\n-     *\n-     * In OpenJDK, we just need to examine the \"cryptoperms\" file to see\n-     * if any permissions were bundled together with this jar file.\n+     * Only a stub is needed for the Delayed Provider Selection test.\n@@ -84,60 +68,1 @@\n-    void verify() throws IOException {\n-\n-        \/\/ Short-circuit.  If we weren't asked to save any, we're done.\n-        if (!savePerms) {\n-            return;\n-        }\n-\n-        \/\/ If the protocol of jarURL isn't \"jar\", we should\n-        \/\/ construct a JAR URL so we can open a JarURLConnection\n-        \/\/ for verifying this provider.\n-        @SuppressWarnings(\"deprecation\")\n-        final URL url = jarURL.getProtocol().equalsIgnoreCase(\"jar\")?\n-                        jarURL : new URL(\"jar:\" + jarURL + \"!\/\");\n-\n-        JarFile jf = null;\n-        try {\n-\n-            \/\/ Get a link to the Jarfile to search.\n-            try {\n-                @SuppressWarnings(\"removal\")\n-                var tmp = AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<JarFile>) () -> {\n-                            JarURLConnection conn =\n-                                (JarURLConnection) url.openConnection();\n-                            \/\/ You could do some caching here as\n-                            \/\/ an optimization.\n-                            conn.setUseCaches(false);\n-                            return conn.getJarFile();\n-                        });\n-                jf = tmp;\n-            } catch (java.security.PrivilegedActionException pae) {\n-                throw new SecurityException(\"Cannot load \" + url,\n-                    pae.getCause());\n-            }\n-\n-            if (jf != null) {\n-                JarEntry je = jf.getJarEntry(\"cryptoPerms\");\n-                if (je == null) {\n-                    throw new JarException(\n-                        \"Can not find cryptoPerms\");\n-                }\n-                try {\n-                    appPerms = new CryptoPermissions();\n-                    appPerms.load(jf.getInputStream(je));\n-                } catch (Exception ex) {\n-                    JarException jex =\n-                        new JarException(\"Cannot load\/parse\" + jarURL);\n-                    jex.initCause(ex);\n-                    throw jex;\n-                }\n-            }\n-        } finally {\n-            \/\/ Only call close() when caching is not enabled.\n-            \/\/ Otherwise, exceptions will be thrown for all\n-            \/\/ subsequent accesses of this cached jar.\n-            if (jf != null) {\n-                jf.close();\n-            }\n-        }\n-    }\n+    void verify() throws IOException { return; }\n@@ -168,1 +93,1 @@\n-     *\n+     * <p>\n","filename":"test\/jdk\/security\/unsignedjce\/java.base\/javax\/crypto\/ProviderVerifier.java","additions":12,"deletions":87,"binary":false,"changes":99,"status":"modified"}]}