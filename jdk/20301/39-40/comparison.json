{"files":[{"patch":"@@ -61,1 +61,2 @@\n-    private static final Integer[] SUPPORTED_HMAC_SIZES = new Integer[]{\n+    \/\/ since we are using Arrays.binarySearch later, order is important\n+    private static final int[] SUPPORTED_HMAC_SIZES = new int[]{\n@@ -86,1 +87,1 @@\n-        if (!Arrays.asList(SUPPORTED_HMAC_SIZES).contains(hmacLen)) {\n+        if (Arrays.binarySearch(SUPPORTED_HMAC_SIZES, hmacLen) < 0) {\n@@ -100,5 +101,3 @@\n-     *         if the information contained within the\n-     *         {@code derivationParameterSpec} is invalid or if the combination\n-     *         of {@code alg} and the {@code derivationParameterSpec} results in\n-     *         something invalid, ie - a key of inappropriate length for the\n-     *         specified algorithm\n+     *         if the information contained within the {@code derivationSpec} is\n+     *         invalid or if the combination of {@code alg} and the\n+     *         {@code derivationSpec} results in something invalid\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HKDFKeyDerivation.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-    private Delegate pairOfSpiAndProv;\n+    private Delegate theOne;\n@@ -114,1 +114,1 @@\n-    private Delegate firstPairOfSpiAndProv;\n+    private Delegate candidate;\n@@ -124,1 +124,1 @@\n-    private Iterator<Service> serviceIterator;\n+    private final Iterator<Service> serviceIterator;\n@@ -140,1 +140,1 @@\n-        this.pairOfSpiAndProv = delegate;\n+        this.theOne = delegate;\n@@ -157,1 +157,1 @@\n-        this.firstPairOfSpiAndProv = firstPairOfSpiAndProv;\n+        this.candidate = firstPairOfSpiAndProv;\n@@ -182,1 +182,1 @@\n-        return pairOfSpiAndProv.provider().getName();\n+        return theOne.provider().getName();\n@@ -188,5 +188,6 @@\n-     * The returned parameters may be the same that were used to initialize this\n-     * {@code KDF} object, or may contain additional default or random parameter\n-     * values used by the underlying KDF algorithm. If the required parameters\n-     * were not supplied and can be generated by the {@code KDF} object, the\n-     * generated parameters are returned; otherwise {@code null} is returned.\n+     * The returned parameters may be the same that were used to initialize\n+     * this {@code KDF} object, or may contain additional default or\n+     * random parameter values used by the underlying KDF algorithm.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code KDF} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n@@ -202,1 +203,1 @@\n-        return pairOfSpiAndProv.spi().engineGetParameters();\n+        return theOne.spi().engineGetParameters();\n@@ -234,6 +235,1 @@\n-        try {\n-            return getInstance(algorithm, (KDFParameters) null);\n-        } catch (InvalidAlgorithmParameterException e) {\n-            throw new NoSuchAlgorithmException(\n-                    \"No implementation found using null KDFParameters\", e);\n-        }\n+        return getInstance(algorithm, (KDFParameters) null);\n@@ -328,4 +324,0 @@\n-     * @throws InvalidAlgorithmParameterException\n-     *         if at least one {@code Provider} supports a {@code KDF}\n-     *         implementation for the specified algorithm but none of them\n-     *         support the specified parameters\n@@ -346,2 +338,1 @@\n-            throws NoSuchAlgorithmException,\n-                   InvalidAlgorithmParameterException {\n+            throws NoSuchAlgorithmException {\n@@ -351,41 +342,6 @@\n-        InvalidAlgorithmParameterException lastException = null;\n-        while (t.hasNext()) {\n-            Service s = t.next();\n-            if (!JceSecurity.canUseProvider(s.getProvider())) {\n-                continue;\n-            }\n-            try {\n-                Object obj = s.newInstance(kdfParameters);\n-                if (!(obj instanceof KDFSpi spiObj)) {\n-                    lastException = new InvalidAlgorithmParameterException(\n-                            \"No provider can be found that supports the \"\n-                            + \"specified algorithm and parameters\");\n-                    if (!skipDebug && pdebug != null) {\n-                        pdebug.println(\n-                                \"obj was not an instance of KDFSpi (should not \"\n-                                + \"happen)\");\n-                    }\n-                    \/\/ continue to next iteration\n-                } else if (t.hasNext()) {\n-                    return new KDF(new Delegate(spiObj, s.getProvider()), t,\n-                                   algorithm, kdfParameters);\n-                } else { \/\/ no other choices, lock down provider\n-                    return new KDF(new Delegate(spiObj, s.getProvider()),\n-                                   algorithm, kdfParameters);\n-                }\n-            } catch (NoSuchAlgorithmException e) {\n-                lastException =\n-                        new InvalidAlgorithmParameterException(\n-                                \"No provider can be found that supports the \"\n-                                + \"specified algorithm and parameters\");\n-                if (!skipDebug && pdebug != null) {\n-                    pdebug.println(e.toString());\n-                }\n-                \/\/ continue to next iteration\n-            }\n-        }\n-        if (lastException != null) {\n-            throw lastException;\n-        } else {\n-            throw new NoSuchAlgorithmException(\n-                    \"Algorithm \" + algorithm + \" not available\");\n+\n+        Delegate d = getNext(t, kdfParameters);\n+        if (d != null) {\n+            return (t.hasNext() ?\n+                            new KDF(d, t, algorithm, kdfParameters) :\n+                            new KDF(d, algorithm, kdfParameters));\n@@ -393,0 +349,2 @@\n+        throw new NoSuchAlgorithmException(\n+                \"Algorithm \" + algorithm + \" not available\");\n@@ -551,2 +509,2 @@\n-        if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n-            return pairOfSpiAndProv.spi().engineDeriveKey(alg, derivationSpec);\n+        if (checkSpiNonNull(theOne)) {\n+            return theOne.spi().engineDeriveKey(alg, derivationSpec);\n@@ -582,2 +540,2 @@\n-        if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n-            return pairOfSpiAndProv.spi().engineDeriveData(derivationSpec);\n+        if (checkSpiNonNull(theOne)) {\n+            return theOne.spi().engineDeriveData(derivationSpec);\n@@ -598,2 +556,1 @@\n-        if (delegateAndSpiAreInitialized(pairOfSpiAndProv))\n-            return;\n+        if (checkSpiNonNull(theOne)) return;\n@@ -602,6 +559,1 @@\n-            if (delegateIsNullOrSpiIsNull(pairOfSpiAndProv)) {\n-                pairOfSpiAndProv = firstPairOfSpiAndProv;\n-                \/\/ not needed any more\n-                firstPairOfSpiAndProv = new Delegate(null, null);\n-                serviceIterator = null;\n-            }\n+            theOne = candidate;\n@@ -625,8 +577,5 @@\n-        synchronized (lock) {\n-            if (delegateAndSpiAreInitialized(pairOfSpiAndProv)) {\n-                return (isDeriveData) ? pairOfSpiAndProv.spi().engineDeriveData(\n-                        derivationSpec) : pairOfSpiAndProv.spi()\n-                                                          .engineDeriveKey(\n-                                                                  algorithm,\n-                                                                  derivationSpec);\n-            }\n+        if (checkSpiNonNull(theOne)) {\n+            return (isDeriveData) ?\n+                           theOne.spi().engineDeriveData(derivationSpec) :\n+                           theOne.spi().engineDeriveKey(algorithm, derivationSpec);\n+        }\n@@ -634,0 +583,1 @@\n+        synchronized (lock) {\n@@ -635,26 +585,5 @@\n-            while ((delegateAndSpiAreInitialized(firstPairOfSpiAndProv))\n-                   || serviceIterator.hasNext()) {\n-                KDFSpi currSpi;\n-                Provider currProv;\n-                if (delegateAndSpiAreInitialized(firstPairOfSpiAndProv)) {\n-                    currSpi = firstPairOfSpiAndProv.spi();\n-                    currProv = firstPairOfSpiAndProv.provider();\n-                    firstPairOfSpiAndProv = new Delegate(null, null);\n-                } else {\n-                    Service s = serviceIterator.next();\n-                    currProv = s.getProvider();\n-                    if (!JceSecurity.canUseProvider(currProv)) {\n-                        continue;\n-                    }\n-                    try {\n-                        Object obj = s.newInstance(kdfParameters);\n-                        if (!(obj instanceof KDFSpi)) {\n-                            continue;\n-                        }\n-                        currSpi = (KDFSpi) obj;\n-                    } catch (Exception e) {\n-                        \/\/ continue to the next provider\n-                        continue;\n-                    }\n-                }\n-\n+            if (!checkSpiNonNull(candidate)) {\n+                throw new RuntimeException(\"Unexpected Error: candidate is null!\");\n+            }\n+            Delegate currOne = candidate;\n+            do {\n@@ -662,3 +591,4 @@\n-                    Object result = (isDeriveData) ? currSpi.engineDeriveData(\n-                            derivationSpec) : currSpi.engineDeriveKey(\n-                            algorithm, derivationSpec);\n+                    Object result = (isDeriveData) ?\n+                                            currOne.spi().engineDeriveData(derivationSpec) :\n+                                            currOne.spi().engineDeriveKey(algorithm,\n+                                                                          derivationSpec);\n@@ -666,3 +596,1 @@\n-                    this.pairOfSpiAndProv = new Delegate(currSpi, currProv);\n-                    \/\/ not looking further\n-                    serviceIterator = null;\n+                    this.theOne = currOne;\n@@ -674,0 +602,3 @@\n+                    \/\/ try next one if available\n+                    assert serviceIterator != null : \"serviceIterator was null\";\n+                    currOne = getNext(serviceIterator, kdfParameters);\n@@ -675,1 +606,1 @@\n-            }\n+            } while (currOne != null);\n@@ -680,3 +611,0 @@\n-            if (lastException instanceof RuntimeException) {\n-                throw (RuntimeException) lastException;\n-            }\n@@ -685,3 +613,2 @@\n-                \"No installed provider supports the \" +\n-                ((isDeriveData) ? \"deriveData\" : \"deriveKey\")\n-                + \" method with these parameters\");\n+                \"No installed provider can successfully perform a derivation \" +\n+                \"with these parameters\");\n@@ -690,2 +617,36 @@\n-    boolean delegateAndSpiAreInitialized(Delegate delegate) {\n-        return (delegate != null && delegate.spi() != null);\n+    private static Delegate getNext(Iterator<Service> serviceIter,\n+                                    KDFParameters kdfParameters) {\n+        \/\/ fetch next one if available\n+        while (serviceIter.hasNext()) {\n+            Service s = serviceIter.next();\n+            Provider prov = s.getProvider();\n+            if (!JceSecurity.canUseProvider(prov)) {\n+                \/\/ continue to next iteration\n+                continue;\n+            }\n+            try {\n+                Object obj = s.newInstance(kdfParameters);\n+                if (!(obj instanceof KDFSpi)) {\n+                    if (!skipDebug && pdebug != null) {\n+                        pdebug.println(\n+                                \"obj was not an instance of KDFSpi (should not \"\n+                                + \"happen)\");\n+                    }\n+                    continue;\n+                }\n+                return new Delegate((KDFSpi) obj, prov);\n+            } catch (NoSuchAlgorithmException nsae) {\n+                \/\/ continue to the next provider\n+                if (!skipDebug && pdebug != null) {\n+                    pdebug.println(\n+                            \"The evaluated provider does not support the \"\n+                            + \"specified algorithm and parameters\");\n+                }\n+            }\n+        }\n+        if (!skipDebug && pdebug != null) {\n+            pdebug.println(\n+                    \"No provider can be found that supports the \"\n+                    + \"specified algorithm and parameters\");\n+        }\n+        return null;\n@@ -694,2 +655,2 @@\n-    boolean delegateIsNullOrSpiIsNull(Delegate delegate) {\n-        return (delegate == null || delegate.spi() == null);\n+    private static boolean checkSpiNonNull(Delegate d) {\n+        return (d != null && d.spi() != null);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":89,"deletions":128,"binary":false,"changes":217,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n- * value or {@code KDFParameters} which are not supported by the\n- * implementation.\n+ * value if default parameters cannot be generated or upon receiving {@code\n+ * KDFParameters} which are not supported by the implementation.\n@@ -96,7 +96,6 @@\n-     * The returned parameters may be the same that were used to initialize this\n-     * {@code KDF} object or may contain additional default or random parameter\n-     * values used by the underlying {@code KDFSpi} algorithm's implementation.\n-     * If certain fields of the parameters were not supplied and can be\n-     * generated by the implementation, a new {@code KDFParameters} object with\n-     * the additional generated field values is returned; otherwise {@code null}\n-     * is returned.\n+     * The returned parameters may be the same that were used to initialize\n+     * this {@code KDF} object, or may contain additional default or\n+     * random parameter values used by the underlying KDF algorithm.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code KDF} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}