{"files":[{"patch":"@@ -41,0 +41,3 @@\n+ * <p>\n+ * The {@code KDFParameters} used for initialization can be retrieved via\n+ * {@link javax.crypto.KDF#getParameters()}.\n@@ -43,0 +46,1 @@\n+ * @see javax.crypto.KDF#getParameters()\n","filename":"src\/java.base\/share\/classes\/java\/security\/KDFParameters.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n- * {@code getKDFParameters} is called before calling the {@code deriveKey} or\n+ * {@code getParameters} is called before calling the {@code deriveKey} or\n@@ -132,2 +132,0 @@\n-     * @param kdfParameters\n-     *     the algorithm parameters\n@@ -135,2 +133,1 @@\n-    private KDF(KDFSpi keyDerivSpi, Provider provider, String algorithm,\n-                KDFParameters kdfParameters) {\n+    private KDF(KDFSpi keyDerivSpi, Provider provider, String algorithm) {\n@@ -140,1 +137,2 @@\n-        this.kdfParameters = kdfParameters;\n+        \/\/ note that the parameters are being passed to the impl in getInstance\n+        this.kdfParameters = null;\n@@ -196,3 +194,0 @@\n-     *\n-     * @throws UnsupportedOperationException if the parameters cannot be\n-     * retrieved or if the provider does not support parameter retrieval\n@@ -315,1 +310,1 @@\n-     *     algorithm or {@code null} if no additional parameters are provided\n+     *     algorithm or {@code null} if no parameters are provided\n@@ -367,1 +362,1 @@\n-     *     algorithm or {@code null} if no additional parameters are provided\n+     *     algorithm or {@code null} if no parameters are provided\n@@ -381,1 +376,1 @@\n-     *     {@code KDF} or if no provider can be found which supports the\n+     *     {@code KDF} or if the specified provider does not support the\n@@ -403,2 +398,1 @@\n-            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm,\n-                           kdfParameters);\n+            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm);\n@@ -423,1 +417,1 @@\n-     *     algorithm or {@code null} if no additional parameters are provided\n+     *     algorithm or {@code null} if no parameters are provided\n@@ -434,1 +428,1 @@\n-     *     {@code KDF} or if no provider can be found which supports the\n+     *     {@code KDF} or if the specified provider does not support the\n@@ -455,2 +449,1 @@\n-            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm,\n-                           kdfParameters);\n+            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm);\n@@ -476,1 +469,1 @@\n-     * {@code KDF} instance.\n+     * {@code KDF} instance, but it is not considered thread-safe.\n@@ -520,1 +513,1 @@\n-     * particular {@code KDF} instance.\n+     * particular {@code KDF} instance, but it is not considered thread-safe.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -98,3 +98,0 @@\n-     *\n-     * @throws UnsupportedOperationException if the parameters cannot be\n-     * retrieved or if the provider does not support parameter retrieval\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-         *     if {@code length} is not &gt; 0\n+         *     if {@code length} is not greater than 0\n@@ -272,1 +272,1 @@\n-     * Defines the input parameters of an {@code Expand} object\n+     * Creates an {@code Expand} object\n@@ -278,1 +278,1 @@\n-     *     {@code null}); the byte[] is copied to prevent subsequent\n+     *     {@code null}); the byte array is copied to prevent subsequent\n@@ -281,2 +281,2 @@\n-     *     the length of the output key material (must be &gt; 0 and &lt; 255 *\n-     *     HMAC length)\n+     *     the length of the output key material (must be greater than 0 and\n+     *     less than 255 * HMAC length)\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public class Functions {\n+public class BasicHKDFFunctions {\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/BasicHKDFFunctions.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/Functions.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n- * @run main TestHKDF\n+ * @run main HKDFKnownAnswerTests\n@@ -37,1 +37,0 @@\n-import java.security.InvalidKeyException;\n@@ -43,0 +42,1 @@\n+import java.util.HexFormat;\n@@ -47,1 +47,1 @@\n-public class TestHKDF {\n+public class HKDFKnownAnswerTests {\n@@ -55,1 +55,1 @@\n-            IKM = hex2bin(Objects.requireNonNull(ikmStr));\n+            ikm = HexFormat.of().parseHex(Objects.requireNonNull(ikmStr));\n@@ -60,2 +60,2 @@\n-            expectedPRK = hex2bin(Objects.requireNonNull(expPrkStr));\n-            expectedOKM = hex2bin(Objects.requireNonNull(expOkmStr));\n+            expectedPRK = HexFormat.of().parseHex(Objects.requireNonNull(expPrkStr));\n+            expectedOKM = HexFormat.of().parseHex(Objects.requireNonNull(expOkmStr));\n@@ -64,2 +64,2 @@\n-            salt = (saltStr != null) ? hex2bin(saltStr) : null;\n-            info = (infoStr != null) ? hex2bin(infoStr) : null;\n+            salt = (saltStr != null) ? HexFormat.of().parseHex(saltStr) : null;\n+            info = (infoStr != null) ? HexFormat.of().parseHex(infoStr) : null;\n@@ -70,1 +70,1 @@\n-        public final byte[] IKM;\n+        public final byte[] ikm;\n@@ -164,1 +164,1 @@\n-        SecretKey ikmKey = new SecretKeySpec(testData.IKM, \"HKDF-IKM\");\n+        SecretKey ikmKey = new SecretKeySpec(testData.ikm, \"HKDF-IKM\");\n@@ -172,1 +172,1 @@\n-        actualPRK = kdfExtract.deriveKey(\"RAW\", kdfParameterSpecExtract);\n+        actualPRK = kdfExtract.deriveKey(\"Generic\", kdfParameterSpecExtract);\n@@ -187,1 +187,1 @@\n-        actualOKM = kdfExpand.deriveKey(\"RAW\", kdfParameterSpecExpand);\n+        actualOKM = kdfExpand.deriveKey(\"Generic\", kdfParameterSpecExpand);\n@@ -205,1 +205,1 @@\n-        actualOKM = kdfHkdf.deriveKey(\"RAW\", kdfParameterSpecExtractExpand);\n+        actualOKM = kdfHkdf.deriveKey(\"Generic\", kdfParameterSpecExtractExpand);\n@@ -241,1 +241,1 @@\n-                               dumpHexBytes(outData, 16, \"\\n\", \" \"));\n+                               dumpHexBytes(expectedOut, 16, \"\\n\", \" \"));\n@@ -292,11 +292,0 @@\n-\n-    private static byte[] hex2bin(String hex) {\n-        int i;\n-        int len = hex.length();\n-        byte[] data = new byte[len \/ 2];\n-        for (i = 0; i < len; i += 2) {\n-            data[i \/ 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) +\n-                                  Character.digit(hex.charAt(i + 1), 16));\n-        }\n-        return data;\n-    }\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFKnownAnswerTests.java","additions":14,"deletions":25,"binary":false,"changes":39,"previous_filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/TestHKDF.java","status":"renamed"}]}