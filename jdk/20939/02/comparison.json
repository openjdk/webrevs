{"files":[{"patch":"@@ -161,7 +161,0 @@\n-    boolean hasTrailingSlash(byte[] a, int end) {\n-        byte[] slashBytes = slashBytes();\n-        return end >= slashBytes.length &&\n-            Arrays.mismatch(a, end - slashBytes.length, end, slashBytes, 0, slashBytes.length) == -1;\n-    }\n-\n-    private byte[] slashBytes;\n@@ -194,17 +187,0 @@\n-    \/\/ This method produces an array with the bytes that will correspond to a\n-    \/\/ trailing '\/' in the chosen character encoding.\n-    \/\/\n-    \/\/ While in most charsets a trailing slash will be encoded as the byte\n-    \/\/ value of '\/', this does not hold in the general case. E.g., in charsets\n-    \/\/ such as UTF-16 and UTF-32 it will be represented by a sequence of 2 or 4\n-    \/\/ bytes, respectively.\n-    private byte[] slashBytes() {\n-        if (slashBytes == null) {\n-            \/\/ Take into account charsets that produce a BOM, e.g., UTF-16\n-            byte[] slash = \"\/\".getBytes(cs);\n-            byte[] doubleSlash = \"\/\/\".getBytes(cs);\n-            slashBytes = Arrays.copyOfRange(doubleSlash, slash.length, doubleSlash.length);\n-        }\n-        return slashBytes;\n-    }\n-\n@@ -300,2 +276,1 @@\n-        @Override\n-        boolean hasTrailingSlash(byte[] a, int end) {\n+        private boolean hasTrailingSlash(byte[] a, int end) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -350,3 +350,3 @@\n-            int pos = res.zsrc.getEntryPos(name, true);\n-            if (pos != -1) {\n-                entry = getZipEntry(name, pos);\n+            EntryPos pos = res.zsrc.getEntryPos(name, true);\n+            if (pos != null) {\n+                entry = getZipEntry(pos.name, pos.pos);\n@@ -390,1 +390,6 @@\n-                pos = zsrc.getEntryPos(entry.name, false);\n+                EntryPos entryPos = zsrc.getEntryPos(entry.name, false);\n+                if (entryPos != null) {\n+                    pos = entryPos.pos;\n+                } else {\n+                    pos = -1;\n+                }\n@@ -543,1 +548,2 @@\n-                return (T)getZipEntry(null, res.zsrc.getEntryPos(i++ * 3));\n+                int pos = res.zsrc.getEntryPos(i++ * 3);\n+                return (T)getZipEntry(getEntryName(pos), pos);\n@@ -615,1 +621,1 @@\n-                pos -> getZipEntry(null, pos)), false);\n+                pos -> getZipEntry(getEntryName(pos), pos)), false);\n@@ -658,1 +664,1 @@\n-                pos -> (JarEntry)getZipEntry(null, pos)), false);\n+                pos -> (JarEntry)getZipEntry(getEntryName(pos), pos)), false);\n@@ -668,3 +674,3 @@\n-        int nlen = CENNAM(cen, pos);\n-        int elen = CENEXT(cen, pos);\n-        int clen = CENCOM(cen, pos);\n+        ZipEntry e = this instanceof JarFile jarFile\n+                ? Source.JUJA.entryFor(jarFile, name)\n+                : new ZipEntry(name);\n@@ -672,20 +678,0 @@\n-        ZipCoder zc = res.zsrc.zipCoderForPos(pos);\n-        if (name != null) {\n-            \/\/ only need to check for mismatch of trailing slash\n-            if (nlen > 0 &&\n-                !name.isEmpty() &&\n-                zc.hasTrailingSlash(cen, pos + CENHDR + nlen) &&\n-                !name.endsWith(\"\/\"))\n-            {\n-                name += '\/';\n-            }\n-        } else {\n-            \/\/ invoked from iterator, use the entry name stored in cen\n-            name = zc.toString(cen, pos + CENHDR, nlen);\n-        }\n-        ZipEntry e;\n-        if (this instanceof JarFile) {\n-            e = Source.JUJA.entryFor((JarFile)this, name);\n-        } else {\n-            e = new ZipEntry(name);\n-        }\n@@ -703,0 +689,4 @@\n+        int nlen = CENNAM(cen, pos);\n+        int elen = CENEXT(cen, pos);\n+        int clen = CENCOM(cen, pos);\n+\n@@ -709,0 +699,1 @@\n+            ZipCoder zc = res.zsrc.zipCoderForPos(pos);\n@@ -1179,0 +1170,2 @@\n+    \/\/ Represents the resolved name and position of a CEN record\n+    static record EntryPos(String name, int pos) {}\n@@ -1852,2 +1845,2 @@\n-         * Returns the {@code pos} of the ZIP cen entry corresponding to the\n-         * specified entry name, or -1 if not found.\n+         * Returns the resolved name and position of the ZIP cen entry corresponding\n+         *  to the specified entry name, or {@code null} if not found.\n@@ -1855,1 +1848,1 @@\n-        private int getEntryPos(String name, boolean addSlash) {\n+        private EntryPos getEntryPos(String name, boolean addSlash) {\n@@ -1857,1 +1850,1 @@\n-                return -1;\n+                return null;\n@@ -1880,1 +1873,1 @@\n-                            return pos;\n+                            return new EntryPos(name, pos);\n@@ -1895,1 +1888,1 @@\n-                return dirPos;\n+                return new EntryPos(name +\"\/\", dirPos);\n@@ -1898,1 +1891,1 @@\n-            return -1;\n+            return null;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":30,"deletions":37,"binary":false,"changes":67,"status":"modified"}]}