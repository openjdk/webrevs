{"files":[{"patch":"@@ -161,7 +161,0 @@\n-    protected boolean hasTrailingSlash(byte[] a, int end) {\n-        byte[] slashBytes = slashBytes();\n-        return end >= slashBytes.length &&\n-            Arrays.mismatch(a, end - slashBytes.length, end, slashBytes, 0, slashBytes.length) == -1;\n-    }\n-\n-    private byte[] slashBytes;\n@@ -194,17 +187,0 @@\n-    \/\/ This method produces an array with the bytes that will correspond to a\n-    \/\/ trailing '\/' in the chosen character encoding.\n-    \/\/\n-    \/\/ While in most charsets a trailing slash will be encoded as the byte\n-    \/\/ value of '\/', this does not hold in the general case. E.g., in charsets\n-    \/\/ such as UTF-16 and UTF-32 it will be represented by a sequence of 2 or 4\n-    \/\/ bytes, respectively.\n-    private byte[] slashBytes() {\n-        if (slashBytes == null) {\n-            \/\/ Take into account charsets that produce a BOM, e.g., UTF-16\n-            byte[] slash = \"\/\".getBytes(cs);\n-            byte[] doubleSlash = \"\/\/\".getBytes(cs);\n-            slashBytes = Arrays.copyOfRange(doubleSlash, slash.length, doubleSlash.length);\n-        }\n-        return slashBytes;\n-    }\n-\n@@ -300,2 +276,1 @@\n-        @Override\n-        protected boolean hasTrailingSlash(byte[] a, int end) {\n+        private boolean hasTrailingSlash(byte[] a, int end) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-                entry = getZipEntry(pos);\n+                entry = getZipEntry(pos.name, pos.pos);\n@@ -549,1 +549,1 @@\n-                return (T)getZipEntry(new EntryPos(getEntryName(pos), pos));\n+                return (T)getZipEntry(getEntryName(pos), pos);\n@@ -621,1 +621,1 @@\n-                pos -> getZipEntry(new EntryPos(getEntryName(pos), pos))), false);\n+                pos -> getZipEntry(getEntryName(pos), pos)), false);\n@@ -664,1 +664,1 @@\n-                pos -> (JarEntry)getZipEntry(new EntryPos(getEntryName(pos), pos))), false);\n+                pos -> (JarEntry)getZipEntry(getEntryName(pos), pos)), false);\n@@ -672,3 +672,1 @@\n-    private ZipEntry getZipEntry(EntryPos entryPos) {\n-        String name = entryPos.name;\n-        int pos  = entryPos.pos;\n+    private ZipEntry getZipEntry(String name, int pos) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}