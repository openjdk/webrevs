{"files":[{"patch":"@@ -307,1 +307,1 @@\n-    public static final String JDKCATALOG_RESOLVE = \"jdk.xml.jdkCatalog.resolve\";\n+    public static final String JDKCATALOG_RESOLVE = \"jdk.xml.jdkcatalog.resolve\";\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-# For example, the FILES property in CatalogFeatures has an associated system\n-# property called javax.xml.catalog.files. An entry for the FILES property in the\n-# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# For example, the RESOLVE property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.resolve. An entry for the RESOLVE property in the\n+# configuration file would therefore use javax.xml.catalog.resolve as the key, that\n@@ -54,1 +54,1 @@\n-#     javax.xml.catalog.files=strict\n+#     javax.xml.catalog.resolve=strict\n@@ -131,0 +131,18 @@\n+# Implementation Specific Properties - jdkcatalog.resolve\n+#\n+# This property instructs the JDK default CatalogResolver to act in accordance with\n+# the setting when unable to resolve an external reference with the built-in Catalog.\n+# The options are:\n+#     continue -- indicates that the processing should continue\n+#     ignore -- indicates that the reference is skipped\n+#     strict -- indicates that the resolver should throw a CatalogException\n+#\n+# The following setting would cause the resolve to throw a CatalogException when\n+# unable to resolve an external reference:\n+# jdk.xml.jdkcatalog.resolve=strict\n+#\n+# Implementation Specific Properties - DTD\n+#\n+# This property instructs the parsers to: deny, ignore or allow DTD processing.\n+# The following setting would cause the parser to reject DTD by throwing an exception.\n+# jdk.xml.dtd.support=deny\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        String expected1 = \"invalid.site.com\";\n+        String expected1 = UNKNOWN_HOST;\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/catalog\/CatalogTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -16,1 +16,1 @@\n-jdk.xml.jdkCatalog.resolve=strict\n+jdk.xml.jdkcatalog.resolve=strict\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/catalog2.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-# For example, the FILES property in CatalogFeatures has an associated system\n-# property called javax.xml.catalog.files. An entry for the FILES property in the\n-# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# For example, the RESOLVE property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.resolve. An entry for the RESOLVE property in the\n+# configuration file would therefore use javax.xml.catalog.resolve as the key, that\n@@ -54,1 +54,1 @@\n-#     javax.xml.catalog.files=strict\n+#     javax.xml.catalog.resolve=strict\n@@ -131,0 +131,13 @@\n+# Implementation Specific Properties - jdkcatalog.resolve\n+#\n+# This property instructs the JDK default CatalogResolver to act in accordance with\n+# the setting when unable to resolve an external reference with the built-in Catalog.\n+# The options are:\n+#     continue -- indicates that the processing should continue\n+#     ignore -- indicates that the reference is skipped\n+#     strict -- indicates that the resolver should throw a CatalogException\n+#\n+# The following setting would cause the resolve to throw a CatalogException when\n+# unable to resolve an external reference:\n+# jdk.xml.jdkcatalog.resolve=strict\n+#\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    public static final String SP_CATALOG = \"jdk.xml.jdkCatalog.resolve\";\n+    public static final String SP_CATALOG = \"jdk.xml.jdkcatalog.resolve\";\n@@ -124,0 +124,1 @@\n+    public static final String UNKNOWN_HOST = \"invalid.site.com\";\n@@ -337,1 +338,0 @@\n-        \/\/e.printStackTrace();\n@@ -339,2 +339,0 @@\n-\/\/        System.out.println(\"Exp Msg: \" + str);\n-        \/\/e.printStackTrace();\n@@ -342,2 +340,1 @@\n-            Assert.assertTrue(false, \"Expected pass, but Exception is thrown \" +\n-                    str);\n+            Assert.assertTrue(false, \"Expected pass, but Exception is thrown \" + str);\n@@ -345,1 +342,7 @@\n-            Assert.assertTrue((str != null) && str.contains(error));\n+            \/\/ This check is necessary since errors other than UnknownHostException\n+            \/\/ can contain the host name in the System ID\n+            if (UNKNOWN_HOST.equals(error)) {\n+                Assert.assertTrue((str != null) && str.equals(error));\n+            } else {\n+                Assert.assertTrue((str != null) && str.contains(error));\n+            }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/util\/TestBase.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}