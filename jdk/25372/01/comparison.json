{"files":[{"patch":"@@ -467,0 +467,1 @@\n+  log_info(class, path)(\"path [%d] = (modules image)\", tmp_array.length());\n@@ -576,0 +577,1 @@\n+  log_info(class, path)(\"path [%d] = %s%s\", tmp_array.length(), path, from_cpattr ? \" (from cpattr)\" : \"\");\n@@ -729,0 +731,2 @@\n+  log_locations(CDSConfig::output_archive_path(), \/*is_write=*\/true);\n+\n@@ -776,1 +780,1 @@\n-    log_info(class, path)(\"Checking '%s' %s%s\", effective_dumptime_path, cs->file_type_string(),\n+    log_info(class, path)(\"Checking [%d] '%s' %s%s\", i, effective_dumptime_path, cs->file_type_string(),\n@@ -906,1 +910,1 @@\n-      if (do_substitute) {\n+      if (do_substitute && remove_prefix_len > 0) {\n@@ -964,1 +968,1 @@\n-bool AOTClassLocationConfig::validate(bool has_aot_linked_classes, bool* has_extra_module_paths) const {\n+bool AOTClassLocationConfig::validate(const char* cache_filename, bool has_aot_linked_classes, bool* has_extra_module_paths) const {\n@@ -968,0 +972,2 @@\n+  log_locations(cache_filename, \/*is_write=*\/false);\n+\n@@ -969,0 +975,1 @@\n+  log_info(class, path)(\"Checking [0] (modules image)\");\n@@ -1039,0 +1046,11 @@\n+void AOTClassLocationConfig::log_locations(const char* cache_filename, bool is_write) const {\n+  if (log_is_enabled(Info, class, path)) {\n+    LogStreamHandle(Info, class, path) st;\n+    st.print_cr(\"%s classpath(s) %s %s (size = %d)\",\n+                is_write ? \"Writing\" : \"Reading\",\n+                is_write ? \"into\" : \"from\",\n+                cache_filename, class_locations()->length());\n+    print_on(&st);\n+  }\n+}\n+\n@@ -1055,0 +1073,1 @@\n+  const char* type = \"boot\";\n@@ -1057,0 +1076,6 @@\n+    if (i >= boot_cp_end_index()) {\n+      type = \"app\";\n+    }\n+    if (i >= app_cp_end_index()) {\n+      type = \"module\";\n+    }\n@@ -1064,7 +1089,1 @@\n-    st->print_cr(\"[%d] = %s\", i, path);\n-    if (i == boot_cp_end_index() && i < n) {\n-      st->print_cr(\"--- end of boot\");\n-    }\n-    if (i == app_cp_end_index() && i < n) {\n-      st->print_cr(\"--- end of app\");\n-    }\n+    st->print_cr(\"(%-6s) [%d] = %s\", type, i, path);\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.cpp","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -207,0 +207,1 @@\n+  void log_locations(const char* cache_filename, bool is_writing) const;\n@@ -272,1 +273,1 @@\n-  bool validate(bool has_aot_linked_classes, bool* has_extra_module_paths) const;\n+  bool validate(const char* cache_filename, bool has_aot_linked_classes, bool* has_extra_module_paths) const;\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-  if (!config->validate(header()->has_aot_linked_classes(), &has_extra_module_paths)) {\n+  if (!config->validate(full_path(), header()->has_aot_linked_classes(), &has_extra_module_paths)) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,16 @@\n+ClasspathStream::ClasspathStream(const char* classpath) {\n+  _cp = classpath;\n+  skip_blank_paths();\n+}\n+\n+char ClasspathStream::separator() {\n+  \/\/ All supported platforms have a single character path separator.\n+  return os::path_separator()[0];\n+}\n+\n+void ClasspathStream::skip_blank_paths() {\n+  while (*_cp == separator()) {\n+    _cp ++;\n+  }\n+}\n+\n@@ -30,2 +46,6 @@\n-  while (_class_path[_end] != '\\0' && _class_path[_end] != os::path_separator()[0]) {\n-    _end++;\n+  assert(has_next(), \"call this only after you checked has_next()\");\n+  assert(*_cp != separator(), \"ensured by constructor and get_next()\");\n+\n+  const char* end = _cp + 1;\n+  while (*end != separator() && *end != '\\0') {\n+    end ++;\n@@ -33,1 +53,2 @@\n-  int path_len = _end - _start;\n+\n+  int path_len = end - _cp;\n@@ -35,1 +56,1 @@\n-  strncpy(path, &_class_path[_start], path_len);\n+  strncpy(path, _cp, path_len);\n@@ -38,4 +59,5 @@\n-  while (_class_path[_end] == os::path_separator()[0]) {\n-    _end++;\n-  }\n-  _start = _end;\n+  assert(strlen(path) > 0, \"must be\");\n+\n+  _cp = end;\n+  skip_blank_paths();\n+\n","filename":"src\/hotspot\/share\/utilities\/classpathStream.cpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,3 @@\n-  const char* _class_path;\n-  int _len;\n-  int _start;\n-  int _end;\n-\n+  const char* _cp;\n+  static char separator();\n+  void skip_blank_paths();\n@@ -35,6 +33,3 @@\n-  ClasspathStream(const char* class_path) {\n-    _class_path = class_path;\n-    _len = (int)strlen(class_path);\n-    _start = 0;\n-    _end = 0;\n-  }\n+  \/\/ The caller should ensure that class_path is alive during the\n+  \/\/ lifetime of this ClasspathStream.\n+  ClasspathStream(const char* class_path);\n@@ -43,1 +38,1 @@\n-    return _start < _len;\n+    return *_cp != '\\0';\n@@ -46,0 +41,2 @@\n+  \/\/ Call this only after you checked has_next().\n+  \/\/ Returns a resource-allocated string.\n","filename":"src\/hotspot\/share\/utilities\/classpathStream.hpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -62,3 +62,3 @@\n-    String firstCheckShortMsg = \"Checking 'hello.jar' file\"; \/\/ the first JAR to check (without directory prefix)\n-    String firstCheckMsg = \"Checking '\" + appJar + \"' file\"; \/\/ the first JAR to check\n-    String lastCheckMsg = \"Checking '\" + appJar2 + \"' file\"; \/\/ the last JAR to check\n+    String firstCheckShortMsg = \"Checking [1] 'hello.jar' file\"; \/\/ the first JAR to check (without directory prefix)\n+    String firstCheckMsg = \"Checking [1] '\" + appJar + \"' file\"; \/\/ the first JAR to check\n+    String lastCheckMsg = \"Checking [2] '\" + appJar2 + \"' file\"; \/\/ the last JAR to check\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/PrintSharedArchiveAndExit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary verify the output of -Xlog:class+path when using AOT cache\n+ * @bug 8356308\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @build ClassPathLogging\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar ClassPathLoggingApp\n+ * @run driver ClassPathLogging\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ClassPathLogging {\n+    public static void main(String... args) throws Exception {\n+        String sep = File.pathSeparator;\n+        SimpleCDSAppTester.of(\"ClassPathLogging\")\n+            .addVmArgs(\"-Xlog:class+path=debug\")\n+            .classpath(sep + \"foo.jar\" + sep + sep + sep + \"app.jar\" + sep) \/\/ all empty paths should be skipped.\n+            .appCommandLine(\"ClassPathLoggingApp\")\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"HelloWorld\")\n+                       .shouldContain(\"Reading classpath(s) from ClassPathLogging.aot (size = 3)\")\n+                       .shouldMatch(\"boot.*0.*=.*modules\")\n+                       .shouldContain(\"(app   ) [1] = foo.jar\")\n+                       .shouldContain(\"(app   ) [2] = app.jar\");\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class ClassPathLoggingApp {\n+    public static void main(String[] args) {\n+        System.out.println(\"HelloWorld\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/ClassPathLogging.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}