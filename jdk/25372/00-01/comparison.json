{"files":[{"patch":"@@ -29,0 +29,16 @@\n+ClasspathStream::ClasspathStream(const char* classpath) {\n+  _cp = classpath;\n+  skip_blank_paths();\n+}\n+\n+char ClasspathStream::separator() {\n+  \/\/ All supported platforms have a single character path separator.\n+  return os::path_separator()[0];\n+}\n+\n+void ClasspathStream::skip_blank_paths() {\n+  while (*_cp == separator()) {\n+    _cp ++;\n+  }\n+}\n+\n@@ -30,2 +46,6 @@\n-  while (_class_path[_end] != '\\0' && _class_path[_end] != os::path_separator()[0]) {\n-    _end++;\n+  assert(has_next(), \"call this only after you checked has_next()\");\n+  assert(*_cp != separator(), \"ensured by constructor and get_next()\");\n+\n+  const char* end = _cp + 1;\n+  while (*end != separator() && *end != '\\0') {\n+    end ++;\n@@ -33,1 +53,2 @@\n-  int path_len = _end - _start;\n+\n+  int path_len = end - _cp;\n@@ -35,1 +56,1 @@\n-  strncpy(path, &_class_path[_start], path_len);\n+  strncpy(path, _cp, path_len);\n@@ -38,4 +59,5 @@\n-  while (_class_path[_end] == os::path_separator()[0]) {\n-    _end++;\n-  }\n-  _start = _end;\n+  assert(strlen(path) > 0, \"must be\");\n+\n+  _cp = end;\n+  skip_blank_paths();\n+\n","filename":"src\/hotspot\/share\/utilities\/classpathStream.cpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,3 @@\n-  const char* _class_path;\n-  int _len;\n-  int _start;\n-  int _end;\n-\n+  const char* _cp;\n+  static char separator();\n+  void skip_blank_paths();\n@@ -35,6 +33,3 @@\n-  ClasspathStream(const char* class_path) {\n-    _class_path = class_path;\n-    _len = (int)strlen(class_path);\n-    _start = 0;\n-    _end = 0;\n-  }\n+  \/\/ The caller should ensure that class_path is alive during the\n+  \/\/ lifetime of this ClasspathStream.\n+  ClasspathStream(const char* class_path);\n@@ -43,1 +38,1 @@\n-    return _start < _len;\n+    return *_cp != '\\0';\n@@ -46,0 +41,2 @@\n+  \/\/ Call this only after you checked has_next().\n+  \/\/ Returns a resource-allocated string.\n","filename":"src\/hotspot\/share\/utilities\/classpathStream.hpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -62,3 +62,3 @@\n-    String firstCheckShortMsg = \"Checking 'hello.jar' file\"; \/\/ the first JAR to check (without directory prefix)\n-    String firstCheckMsg = \"Checking '\" + appJar + \"' file\"; \/\/ the first JAR to check\n-    String lastCheckMsg = \"Checking '\" + appJar2 + \"' file\"; \/\/ the last JAR to check\n+    String firstCheckShortMsg = \"Checking [1] 'hello.jar' file\"; \/\/ the first JAR to check (without directory prefix)\n+    String firstCheckMsg = \"Checking [1] '\" + appJar + \"' file\"; \/\/ the first JAR to check\n+    String lastCheckMsg = \"Checking [2] '\" + appJar2 + \"' file\"; \/\/ the last JAR to check\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/PrintSharedArchiveAndExit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+        String sep = File.pathSeparator;\n@@ -46,1 +47,1 @@\n-            .classpath(File.pathSeparator + \"app.jar\")\n+            .classpath(sep + \"foo.jar\" + sep + sep + sep + \"app.jar\" + sep) \/\/ all empty paths should be skipped.\n@@ -52,1 +53,1 @@\n-                       .shouldContain(\"(app   ) [1] = \")\n+                       .shouldContain(\"(app   ) [1] = foo.jar\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/ClassPathLogging.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}