{"files":[{"patch":"@@ -84,2 +84,5 @@\n-    \/\/ get the UnixFileAttributes for a given file. Returns null if the file does not exist.\n-    static UnixFileAttributes getIfExists(UnixPath path) throws UnixException {\n+    \/\/ get the UnixFileAttributes for a given file.\n+    \/\/ Returns null if the file does not exist.\n+    static UnixFileAttributes getIfExists(UnixPath path)\n+        throws UnixException\n+    {\n@@ -97,0 +100,20 @@\n+    \/\/ get the UnixFileAttributes for a given file, optionally following links.\n+    \/\/ Returns null if the file does not exist.\n+    static UnixFileAttributes getIfExists(UnixPath path, boolean followLinks)\n+        throws UnixException\n+    {\n+        UnixFileAttributes attrs = new UnixFileAttributes();\n+        int flag = (followLinks) ? 0 : UnixConstants.AT_SYMLINK_NOFOLLOW;\n+        try {\n+            UnixNativeDispatcher.fstatat(UnixConstants.AT_FDCWD,\n+                                         path.asByteArray(), flag, attrs);\n+        } catch (UnixException x) {\n+            if (x.errno() == UnixConstants.ENOENT)\n+                return null;\n+\n+            throw x;\n+        }\n+\n+        return attrs;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -392,3 +392,10 @@\n-        \/\/ check existence while following linkx\n-        boolean exists1 = exists(file1);\n-        boolean exists2 = exists(file2);\n+        \/\/ try to retrieve attributes following links\n+        UnixFileAttributes attrs1 = null;\n+        UnixFileAttributes attrs2 = null;\n+        try {\n+            if ((attrs1 = UnixFileAttributes.getIfExists(file1)) != null)\n+                attrs2 = UnixFileAttributes.getIfExists(file2);\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file1, file2);\n+            return false;    \/\/ keep compiler happy\n+        }\n@@ -396,1 +403,1 @@\n-        if (exists1 && exists2) {\n+        if (attrs1 != null && attrs2 != null)\n@@ -398,14 +405,0 @@\n-            UnixFileAttributes attrs1;\n-            UnixFileAttributes attrs2;\n-            try {\n-                attrs1 = UnixFileAttributes.get(file1, true);\n-            } catch (UnixException x) {\n-                x.rethrowAsIOException(file1);\n-                return false;    \/\/ keep compiler happy\n-            }\n-            try {\n-                attrs2 = UnixFileAttributes.get(file2, true);\n-            } catch (UnixException x) {\n-                x.rethrowAsIOException(file2);\n-                return false;    \/\/ keep compiler happy\n-            }\n@@ -413,2 +406,12 @@\n-        } else if (exists(file1, LinkOption.NOFOLLOW_LINKS) &&\n-                   exists(file2, LinkOption.NOFOLLOW_LINKS)) {\n+\n+        \/\/ try to retrieve attributes not following links\n+        attrs1 = attrs2 = null;\n+        try {\n+            if ((attrs1 = UnixFileAttributes.getIfExists(file1, false)) != null)\n+                attrs2 = UnixFileAttributes.getIfExists(file2, false);\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file1, file2);\n+            return false;    \/\/ keep compiler happy\n+        }\n+\n+        if (attrs1 != null && attrs2 != null) {\n@@ -422,4 +425,0 @@\n-            return false;\n-        } else if (exists1 || exists2) {\n-            \/\/ only one exists, they cannot be equal\n-            return false;\n@@ -428,2 +427,0 @@\n-        \/\/ neither exist and comparison of normalized paths is problematic,\n-        \/\/ so return false\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":23,"deletions":26,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.FileSystemException;\n@@ -432,1 +433,1 @@\n-    \/\/ This is a loop, but isSameFile(LX,LY) should be true for all X, Y\n+    \/\/ This is a loop and should throw FileSystemException.\n@@ -456,1 +457,1 @@\n-        test(expect, x, y);\n+        assertThrows(FileSystemException.class, () -> Files.isSameFile(x, y));\n","filename":"test\/jdk\/java\/nio\/file\/Files\/IsSameFile.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}