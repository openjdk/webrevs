{"files":[{"patch":"@@ -92,1 +92,1 @@\n-    public AbstractMemorySegmentImpl asReadOnly() {\n+    public final AbstractMemorySegmentImpl asReadOnly() {\n@@ -97,1 +97,1 @@\n-    public boolean isReadOnly() {\n+    public final boolean isReadOnly() {\n@@ -108,1 +108,1 @@\n-    public AbstractMemorySegmentImpl asSlice(long offset) {\n+    public final AbstractMemorySegmentImpl asSlice(long offset) {\n@@ -114,1 +114,1 @@\n-    public MemorySegment asSlice(long offset, long newSize, long byteAlignment) {\n+    public final MemorySegment asSlice(long offset, long newSize, long byteAlignment) {\n@@ -125,1 +125,1 @@\n-    public MemorySegment asSlice(long offset, MemoryLayout layout) {\n+    public final MemorySegment asSlice(long offset, MemoryLayout layout) {\n@@ -175,1 +175,1 @@\n-    public Spliterator<MemorySegment> spliterator(MemoryLayout elementLayout) {\n+    public final Spliterator<MemorySegment> spliterator(MemoryLayout elementLayout) {\n@@ -192,1 +192,1 @@\n-    public Stream<MemorySegment> elements(MemoryLayout elementLayout) {\n+    public final Stream<MemorySegment> elements(MemoryLayout elementLayout) {\n@@ -203,1 +203,1 @@\n-    public MemorySegment allocate(long byteSize, long byteAlignment) {\n+    public final MemorySegment allocate(long byteSize, long byteAlignment) {\n@@ -258,1 +258,1 @@\n-    public MemorySegment copyFrom(MemorySegment src) {\n+    public final MemorySegment copyFrom(MemorySegment src) {\n@@ -264,1 +264,1 @@\n-    public long mismatch(MemorySegment other) {\n+    public final long mismatch(MemorySegment other) {\n@@ -401,1 +401,1 @@\n-    public RuntimeException apply(String s, List<Number> numbers) {\n+    public final RuntimeException apply(String s, List<Number> numbers) {\n@@ -408,1 +408,1 @@\n-    public MemorySessionImpl scope() {\n+    public final MemorySessionImpl scope() {\n@@ -413,1 +413,1 @@\n-    public boolean isAccessibleBy(Thread thread) {\n+    public final boolean isAccessibleBy(Thread thread) {\n@@ -427,1 +427,1 @@\n-    static class SegmentSplitter implements Spliterator<MemorySegment> {\n+    static final class SegmentSplitter implements Spliterator<MemorySegment> {\n@@ -504,1 +504,1 @@\n-    public String toString() {\n+    public final String toString() {\n@@ -522,1 +522,1 @@\n-    public boolean equals(Object o) {\n+    public final boolean equals(Object o) {\n@@ -529,1 +529,1 @@\n-    public int hashCode() {\n+    public final int hashCode() {\n@@ -683,1 +683,1 @@\n-    public byte get(ValueLayout.OfByte layout, long offset) {\n+    public final byte get(ValueLayout.OfByte layout, long offset) {\n@@ -689,1 +689,1 @@\n-    public void set(ValueLayout.OfByte layout, long offset, byte value) {\n+    public final void set(ValueLayout.OfByte layout, long offset, byte value) {\n@@ -695,1 +695,1 @@\n-    public boolean get(ValueLayout.OfBoolean layout, long offset) {\n+    public final boolean get(ValueLayout.OfBoolean layout, long offset) {\n@@ -701,1 +701,1 @@\n-    public void set(ValueLayout.OfBoolean layout, long offset, boolean value) {\n+    public final void set(ValueLayout.OfBoolean layout, long offset, boolean value) {\n@@ -707,1 +707,1 @@\n-    public char get(ValueLayout.OfChar layout, long offset) {\n+    public final char get(ValueLayout.OfChar layout, long offset) {\n@@ -713,1 +713,1 @@\n-    public void set(ValueLayout.OfChar layout, long offset, char value) {\n+    public final void set(ValueLayout.OfChar layout, long offset, char value) {\n@@ -719,1 +719,1 @@\n-    public short get(ValueLayout.OfShort layout, long offset) {\n+    public final short get(ValueLayout.OfShort layout, long offset) {\n@@ -725,1 +725,1 @@\n-    public void set(ValueLayout.OfShort layout, long offset, short value) {\n+    public final void set(ValueLayout.OfShort layout, long offset, short value) {\n@@ -731,1 +731,1 @@\n-    public int get(ValueLayout.OfInt layout, long offset) {\n+    public final int get(ValueLayout.OfInt layout, long offset) {\n@@ -737,1 +737,1 @@\n-    public void set(ValueLayout.OfInt layout, long offset, int value) {\n+    public final void set(ValueLayout.OfInt layout, long offset, int value) {\n@@ -743,1 +743,1 @@\n-    public float get(ValueLayout.OfFloat layout, long offset) {\n+    public final float get(ValueLayout.OfFloat layout, long offset) {\n@@ -749,1 +749,1 @@\n-    public void set(ValueLayout.OfFloat layout, long offset, float value) {\n+    public final void set(ValueLayout.OfFloat layout, long offset, float value) {\n@@ -755,1 +755,1 @@\n-    public long get(ValueLayout.OfLong layout, long offset) {\n+    public final long get(ValueLayout.OfLong layout, long offset) {\n@@ -761,1 +761,1 @@\n-    public void set(ValueLayout.OfLong layout, long offset, long value) {\n+    public final void set(ValueLayout.OfLong layout, long offset, long value) {\n@@ -767,1 +767,1 @@\n-    public double get(ValueLayout.OfDouble layout, long offset) {\n+    public final double get(ValueLayout.OfDouble layout, long offset) {\n@@ -773,1 +773,1 @@\n-    public void set(ValueLayout.OfDouble layout, long offset, double value) {\n+    public final void set(ValueLayout.OfDouble layout, long offset, double value) {\n@@ -779,1 +779,1 @@\n-    public MemorySegment get(AddressLayout layout, long offset) {\n+    public final MemorySegment get(AddressLayout layout, long offset) {\n@@ -785,1 +785,1 @@\n-    public void set(AddressLayout layout, long offset, MemorySegment value) {\n+    public final void set(AddressLayout layout, long offset, MemorySegment value) {\n@@ -792,1 +792,1 @@\n-    public byte getAtIndex(ValueLayout.OfByte layout, long index) {\n+    public final byte getAtIndex(ValueLayout.OfByte layout, long index) {\n@@ -799,1 +799,1 @@\n-    public boolean getAtIndex(ValueLayout.OfBoolean layout, long index) {\n+    public final boolean getAtIndex(ValueLayout.OfBoolean layout, long index) {\n@@ -806,1 +806,1 @@\n-    public char getAtIndex(ValueLayout.OfChar layout, long index) {\n+    public final char getAtIndex(ValueLayout.OfChar layout, long index) {\n@@ -813,1 +813,1 @@\n-    public void setAtIndex(ValueLayout.OfChar layout, long index, char value) {\n+    public final void setAtIndex(ValueLayout.OfChar layout, long index, char value) {\n@@ -820,1 +820,1 @@\n-    public short getAtIndex(ValueLayout.OfShort layout, long index) {\n+    public final short getAtIndex(ValueLayout.OfShort layout, long index) {\n@@ -827,1 +827,1 @@\n-    public void setAtIndex(ValueLayout.OfByte layout, long index, byte value) {\n+    public final void setAtIndex(ValueLayout.OfByte layout, long index, byte value) {\n@@ -834,1 +834,1 @@\n-    public void setAtIndex(ValueLayout.OfBoolean layout, long index, boolean value) {\n+    public final void setAtIndex(ValueLayout.OfBoolean layout, long index, boolean value) {\n@@ -841,1 +841,1 @@\n-    public void setAtIndex(ValueLayout.OfShort layout, long index, short value) {\n+    public final void setAtIndex(ValueLayout.OfShort layout, long index, short value) {\n@@ -848,1 +848,1 @@\n-    public int getAtIndex(ValueLayout.OfInt layout, long index) {\n+    public final int getAtIndex(ValueLayout.OfInt layout, long index) {\n@@ -855,1 +855,1 @@\n-    public void setAtIndex(ValueLayout.OfInt layout, long index, int value) {\n+    public final void setAtIndex(ValueLayout.OfInt layout, long index, int value) {\n@@ -862,1 +862,1 @@\n-    public float getAtIndex(ValueLayout.OfFloat layout, long index) {\n+    public final float getAtIndex(ValueLayout.OfFloat layout, long index) {\n@@ -869,1 +869,1 @@\n-    public void setAtIndex(ValueLayout.OfFloat layout, long index, float value) {\n+    public final void setAtIndex(ValueLayout.OfFloat layout, long index, float value) {\n@@ -876,1 +876,1 @@\n-    public long getAtIndex(ValueLayout.OfLong layout, long index) {\n+    public final long getAtIndex(ValueLayout.OfLong layout, long index) {\n@@ -883,1 +883,1 @@\n-    public void setAtIndex(ValueLayout.OfLong layout, long index, long value) {\n+    public final void setAtIndex(ValueLayout.OfLong layout, long index, long value) {\n@@ -890,1 +890,1 @@\n-    public double getAtIndex(ValueLayout.OfDouble layout, long index) {\n+    public final double getAtIndex(ValueLayout.OfDouble layout, long index) {\n@@ -897,1 +897,1 @@\n-    public void setAtIndex(ValueLayout.OfDouble layout, long index, double value) {\n+    public final void setAtIndex(ValueLayout.OfDouble layout, long index, double value) {\n@@ -904,1 +904,1 @@\n-    public MemorySegment getAtIndex(AddressLayout layout, long index) {\n+    public final MemorySegment getAtIndex(AddressLayout layout, long index) {\n@@ -911,1 +911,1 @@\n-    public void setAtIndex(AddressLayout layout, long index, MemorySegment value) {\n+    public final void setAtIndex(AddressLayout layout, long index, MemorySegment value) {\n@@ -919,1 +919,1 @@\n-    public String getString(long offset) {\n+    public final String getString(long offset) {\n@@ -925,1 +925,1 @@\n-    public String getString(long offset, Charset charset) {\n+    public final String getString(long offset, Charset charset) {\n@@ -932,1 +932,1 @@\n-    public void setString(long offset, String str) {\n+    public final void setString(long offset, String str) {\n@@ -939,1 +939,1 @@\n-    public void setString(long offset, String str, Charset charset) {\n+    public final void setString(long offset, String str, Charset charset) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    public void release0() {\n+    public final void release0() {\n@@ -52,1 +52,1 @@\n-    public void acquire0() {\n+    public final void acquire0() {\n@@ -57,1 +57,1 @@\n-    void addInternal(ResourceList.ResourceCleanup resource) {\n+    final void addInternal(ResourceList.ResourceCleanup resource) {\n@@ -62,1 +62,1 @@\n-    public void justClose() {\n+    public final void justClose() {\n@@ -73,1 +73,1 @@\n-    static class HeapSession extends GlobalSession {\n+    static final class HeapSession extends GlobalSession {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/GlobalSession.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    public long unsafeGetOffset() {\n+    public final long unsafeGetOffset() {\n@@ -91,1 +91,1 @@\n-    ByteBuffer makeByteBuffer() {\n+    final ByteBuffer makeByteBuffer() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n@@ -57,1 +58,1 @@\n-public class LayoutPath {\n+public final class LayoutPath {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    public void addCloseAction(Runnable runnable) {\n+    public final void addCloseAction(Runnable runnable) {\n@@ -118,1 +118,1 @@\n-    public void addOrCleanupIfFail(ResourceList.ResourceCleanup resource) {\n+    public final void addOrCleanupIfFail(ResourceList.ResourceCleanup resource) {\n@@ -163,1 +163,1 @@\n-    public void whileAlive(Runnable action) {\n+    public final void whileAlive(Runnable action) {\n@@ -186,1 +186,1 @@\n-    public boolean isAlive() {\n+    public final boolean isAlive() {\n@@ -199,1 +199,1 @@\n-    public void checkValidStateRaw() {\n+    public final void checkValidStateRaw() {\n@@ -213,1 +213,1 @@\n-    public void checkValidState() {\n+    public final void checkValidState() {\n@@ -226,1 +226,1 @@\n-    protected Object clone() throws CloneNotSupportedException {\n+    protected final Object clone() throws CloneNotSupportedException {\n@@ -239,1 +239,1 @@\n-    public void close() {\n+    public final void close() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public long address() {\n+    public final long address() {\n@@ -59,1 +59,1 @@\n-    public Optional<Object> heapBase() {\n+    public final Optional<Object> heapBase() {\n@@ -81,1 +81,1 @@\n-    public boolean isNative() {\n+    public final boolean isNative() {\n@@ -86,1 +86,1 @@\n-    public long unsafeGetOffset() {\n+    public final long unsafeGetOffset() {\n@@ -91,1 +91,1 @@\n-    public Object unsafeGetBase() {\n+    public final Object unsafeGetBase() {\n@@ -96,1 +96,1 @@\n-    public long maxAlignMask() {\n+    public final long maxAlignMask() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,4 @@\n-public class SegmentFactories {\n+public final class SegmentFactories {\n+\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private SegmentFactories() {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    static class SharedResourceList extends ResourceList {\n+    static final class SharedResourceList extends ResourceList {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\n@@ -82,1 +83,1 @@\n-    public L withByteAlignment(long byteAlignment) {\n+    public final L withByteAlignment(long byteAlignment) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractGroupLayout.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}