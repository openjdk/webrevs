{"files":[{"patch":"@@ -67,0 +67,5 @@\n+  void close_impl() {\n+    FlushFileBuffers(_hPipe);\n+    CloseHandle(_hPipe);\n+    _hPipe = INVALID_HANDLE_VALUE;\n+  }\n@@ -95,4 +100,8 @@\n-      ThreadBlockInVM tbivm(JavaThread::current());\n-      FlushFileBuffers(_hPipe);\n-      CloseHandle(_hPipe);\n-      _hPipe = INVALID_HANDLE_VALUE;\n+      JavaThread* current = JavaThread::current();\n+      \/\/ if we fail to read\/parse request from Win32AttachListener::dequeue, current thread is already blocked\n+      if (current->thread_state() == _thread_blocked) {\n+        close_impl();\n+      } else {\n+        ThreadBlockInVM tbivm(current);\n+        close_impl();\n+      }\n","filename":"src\/hotspot\/os\/windows\/attachListener_windows.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary verifies that failure in AttachListener::dequeue does not crash the VM\n+ * @bug 8356177\n+ * @library \/test\/lib\n+ * @modules jdk.attach\/sun.tools.attach\n+ *\n+ * @run driver FailedDequeueTest\n+ *\/\n+\n+import java.io.IOException;\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import sun.tools.attach.HotSpotVirtualMachine;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+public class FailedDequeueTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        LingeredApp app = null;\n+        try {\n+            app = LingeredApp.startApp(\"-Xlog:attach=trace\");\n+            test(app);\n+        } finally {\n+            LingeredApp.stopApp(app);\n+        }\n+    }\n+\n+    \/\/ The test uses HotSpotVirtualMachine.setFlag method with long flag value (longer than 256K).\n+    private static String flagName = \"HeapDumpPath\";\n+    private static String flagValue = \"X\" + \"A\".repeat(256 * 1024) + \"X\";\n+\n+    private static void test(LingeredApp app) throws Exception {\n+        HotSpotVirtualMachine vm = (HotSpotVirtualMachine)VirtualMachine.attach(String.valueOf(app.getPid()));\n+        try {\n+            \/\/ Should throw IOException and don't crash\n+            vm.setFlag(flagName, flagValue);\n+\n+            throw new RuntimeException(\"expected IOException is not thrown\");\n+        } catch (IOException ex) {\n+            System.out.println(\"OK: setFlag thrown expected exception:\");\n+            ex.printStackTrace(System.out);\n+        } finally {\n+            vm.detach();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/FailedDequeueTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}