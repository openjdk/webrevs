{"files":[{"patch":"@@ -214,1 +214,1 @@\n-                    && i.owner().asInternalName().equals(\"Foo\")\n+                    && i.owner().equalsSymbol(CD_Foo)\n@@ -328,1 +328,1 @@\n-                                                  if (e instanceof InvokeInstruction i && i.owner().asInternalName().equals(\"Foo\")\n+                                                  if (e instanceof InvokeInstruction i && i.owner().equalsSymbol(CD_Foo)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -494,0 +494,12 @@\n+\n+        \/**\n+         * Compares this utf8's content with given\n+         * descriptor. Caches this descriptor if matches.\n+         *\/\n+        boolean equalsArrayClassDescriptor(ClassDesc sym) {\n+            if (equalsString(sym.descriptorString())) {\n+                typeSym = sym;\n+                return true;\n+            }\n+            return false;\n+        }\n@@ -611,0 +623,2 @@\n+            \/\/ Note: for a ClassEntry read from bytes, it will not get a symbol until\n+            \/\/ it matches a ClassDesc. So the huge block below will be called multiple times.\n@@ -615,1 +629,9 @@\n-                equals = ref1.equalsString(symbol.descriptorString());\n+\n+                \/\/ fetch upstream symbol first\n+                if (ref1.typeSym instanceof ClassDesc upstreamSym) {\n+                    \/\/ skip the regular cache process; upstream symbol always reusable\n+                    this.sym = upstreamSym;\n+                    return upstreamSym.equals(symbol);\n+                }\n+\n+                equals = ref1.equalsArrayClassDescriptor(symbol); \/\/ ref1 caches compatible symbol\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.internal.constant.ConstantUtils;\n@@ -193,1 +194,1 @@\n-               && thisClass().asInternalName().equals(\"module-info\")\n+               && thisClass().equalsSymbol(ConstantUtils.CD_module_info)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-        else if ((flags & ClassFile.ACC_MODULE) == 0 && !\"java\/lang\/Object\".equals(thisClassEntry.asInternalName()))\n+        else if ((flags & ClassFile.ACC_MODULE) == 0 && !thisClassEntry.equalsSymbol(ConstantDescs.CD_Object))\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -183,0 +184,1 @@\n+                Arguments.of(true, cp.classEntry(cp.utf8Entry(CD_Object.arrayType())), CD_Object.arrayType()),\n@@ -188,0 +190,1 @@\n+                Arguments.of(false, cp.classEntry(cp.utf8Entry(\"[&*$#@;;))\")), CD_String.arrayType()),\n@@ -203,0 +206,4 @@\n+            if (result && cd.isArray()) {\n+                \/\/ Reuse cache from utf8\n+                assertSame(accessCachedClassDesc(ce), Util.fieldTypeSymbol(ce.name()));\n+            }\n","filename":"test\/jdk\/jdk\/classfile\/ConstantDescSymbolsTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}