{"files":[{"patch":"@@ -558,1 +558,1 @@\n-    static final Charset STDIN_CHARSET =\n+    private static final Charset STDIN_CHARSET =\n@@ -560,1 +560,1 @@\n-    static final Charset STDOUT_CHARSET =\n+    private static final Charset STDOUT_CHARSET =\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/io\/Console\/CharsetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,3 +33,1 @@\n-import org.junit.jupiter.api.condition.EnabledOnOs;\n-import org.junit.jupiter.api.condition.OS;\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -42,0 +40,1 @@\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n@@ -49,1 +48,0 @@\n-    @EnabledOnOs({OS.LINUX, OS.MAC})\n@@ -68,1 +66,1 @@\n-            \"-Dstdin.encoding=Mock\", \/\/ <- gist of this test\n+            \"-Dstdin.encoding=Uppercasing\", \/\/ <- gist of this test\n@@ -77,2 +75,2 @@\n-        if (!\"Mock\".equals(System.getProperty(\"stdin.encoding\"))) {\n-            throw new RuntimeException(\"Mock charset was not set in stdin.encoding\");\n+        if (!\"Uppercasing\".equals(System.getProperty(\"stdin.encoding\"))) {\n+            throw new RuntimeException(\"Uppercasing charset was not set in stdin.encoding\");\n@@ -92,0 +90,3 @@\n+\n+        \/\/ Wait till the test receives the result\n+        con.readLine();\n","filename":"test\/jdk\/java\/io\/Console\/StdinEncodingTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-    provides java.nio.charset.spi.CharsetProvider with provider.MockCharsetProvider;\n+    provides java.nio.charset.spi.CharsetProvider with provider.UppercasingCharsetProvider;\n","filename":"test\/jdk\/java\/io\/Console\/csp\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package provider;\n-\n-import java.nio.ByteBuffer;\n-import java.nio.CharBuffer;\n-import java.nio.charset.Charset;\n-import java.nio.charset.CharsetDecoder;\n-import java.nio.charset.CharsetEncoder;\n-import java.nio.charset.CoderResult;\n-import java.nio.charset.spi.CharsetProvider;\n-import java.util.Collections;\n-import java.util.Iterator;\n-\n-\/\/ A test charset provider that decodes every input byte into its uppercase\n-public class MockCharsetProvider extends CharsetProvider {\n-\n-    @Override\n-    public Iterator charsets() {\n-        return Collections.singleton(new MockCharsetProvider.MockCharset()).iterator();\n-    }\n-\n-    @Override\n-    public Charset charsetForName(String charsetName) {\n-        if (charsetName.equals(\"Mock\")) {\n-            return new MockCharsetProvider.MockCharset();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public static class MockCharset extends Charset {\n-\n-        public MockCharset() {\n-            super(\"Mock\", null);\n-        }\n-\n-        @Override\n-        public boolean contains(Charset cs) {\n-            return false;\n-        }\n-\n-        @Override\n-        public CharsetDecoder newDecoder() {\n-            return new MockCharsetDecoder(this, 1, 1);\n-        }\n-\n-        @Override\n-        public CharsetEncoder newEncoder() {\n-            return null;\n-        }\n-    }\n-\n-    private static class MockCharsetDecoder extends CharsetDecoder {\n-        public MockCharsetDecoder(Charset cs, float averageCharsPerByte, float maxCharsPerByte) {\n-            super(cs, averageCharsPerByte, maxCharsPerByte);\n-        }\n-\n-        @Override\n-        protected CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {\n-            while (in.remaining() > 0) {\n-                char c = (char)in.get();\n-                if (c != '\\n') {\n-                    out.put(Character.toUpperCase(c));\n-                }\n-            }\n-            return CoderResult.UNDERFLOW;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/Console\/csp\/provider\/MockCharsetProvider.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package provider;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import java.nio.charset.spi.CharsetProvider;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+\/\/ A test charset provider that decodes every input byte into its uppercase\n+public class UppercasingCharsetProvider extends CharsetProvider {\n+\n+    @Override\n+    public Iterator charsets() {\n+        return Collections.singleton(new UppercasingCharsetProvider.UppercasingCharset()).iterator();\n+    }\n+\n+    @Override\n+    public Charset charsetForName(String charsetName) {\n+        if (charsetName.equals(\"Uppercasing\")) {\n+            return new UppercasingCharsetProvider.UppercasingCharset();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static class UppercasingCharset extends Charset {\n+\n+        public UppercasingCharset() {\n+            super(\"Uppercasing\", null);\n+        }\n+\n+        @Override\n+        public boolean contains(Charset cs) {\n+            return false;\n+        }\n+\n+        @Override\n+        public CharsetDecoder newDecoder() {\n+            return new UppercasingCharsetDecoder(this, 1, 1);\n+        }\n+\n+        @Override\n+        public CharsetEncoder newEncoder() {\n+            return null;\n+        }\n+    }\n+\n+    private static class UppercasingCharsetDecoder extends CharsetDecoder {\n+        public UppercasingCharsetDecoder(Charset cs, float averageCharsPerByte, float maxCharsPerByte) {\n+            super(cs, averageCharsPerByte, maxCharsPerByte);\n+        }\n+\n+        @Override\n+        protected CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {\n+            while (in.remaining() > 0) {\n+                out.put(Character.toUpperCase((char)in.get()));\n+            }\n+            return CoderResult.UNDERFLOW;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/csp\/provider\/UppercasingCharsetProvider.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -30,0 +30,7 @@\n+expect {\n+    \"ABC\" { send_error \"Console::readLine() received\\n\" }\n+    timeout {\n+        send_error \"Error: Console::readLine() not received\\n\"\n+        exit 1\n+    }\n+}\n@@ -33,0 +40,7 @@\n+expect {\n+    \"DEF\" { send_error \"Console::readPassword() received\\n\" }\n+    timeout {\n+        send_error \"Error: Console::readPassword() not received\\n\"\n+        exit 1\n+    }\n+}\n@@ -36,6 +50,6 @@\n-\n-# check the output\n-expect \"ABCDEFGHI\" {\n-    expect eof\n-    send_error \"Mocked output received\"\n-    exit 0\n+expect {\n+    \"GHI\" { send_error \"Console::reader() received\\n\" }\n+    timeout {\n+        send_error \"Error: Console::reader() not received\\n\"\n+        exit 1\n+    }\n@@ -44,3 +58,6 @@\n-# fail\n-send_error \"Mocked output not received.\"\n-exit 1\n+# should receive eof\n+send \"\\r\"\n+expect eof\n+\n+# success\n+exit 0\n","filename":"test\/jdk\/java\/io\/Console\/stdinEncoding.exp","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"}]}