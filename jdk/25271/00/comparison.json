{"files":[{"patch":"@@ -62,0 +62,6 @@\n+ * Read and write operations use the {@code Charset} returned by the\n+ * {@link #charset()} method, unless {@link System##stdin.encoding\n+ * stdin.encoding} differs from {@link System##stdout.encoding\n+ * stdout.encoding}, in which case read operations use the {@code Charset}\n+ * designated by {@code stdin.encoding}.\n+ * <p>\n@@ -552,1 +558,3 @@\n-    static final Charset CHARSET =\n+    static final Charset STDIN_CHARSET =\n+        Charset.forName(System.getProperty(\"stdin.encoding\"), UTF_8.INSTANCE);\n+    static final Charset STDOUT_CHARSET =\n@@ -582,1 +590,1 @@\n-                    var jc = jcp.console(istty, CHARSET);\n+                    var jc = jcp.console(istty, STDIN_CHARSET, STDOUT_CHARSET);\n@@ -594,1 +602,1 @@\n-            c = new ProxyingConsole(new JdkConsoleImpl(CHARSET));\n+            c = new ProxyingConsole(new JdkConsoleImpl(STDIN_CHARSET, STDOUT_CHARSET));\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        return charset;\n+        return outCharset;\n@@ -197,1 +197,2 @@\n-    private final Charset charset;\n+    private final Charset inCharset;\n+    private final Charset outCharset;\n@@ -367,3 +368,5 @@\n-    public JdkConsoleImpl(Charset charset) {\n-        Objects.requireNonNull(charset);\n-        this.charset = charset;\n+    public JdkConsoleImpl(Charset inCharset, Charset outCharset) {\n+        Objects.requireNonNull(inCharset);\n+        Objects.requireNonNull(outCharset);\n+        this.inCharset = inCharset;\n+        this.outCharset = outCharset;\n@@ -376,1 +379,1 @@\n-                charset);\n+                outCharset);\n@@ -385,1 +388,1 @@\n-                charset));\n+                inCharset));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-     * @param charset charset of the platform console\n+     * @param inCharset Standard input charset of the platform console\n+     * @param outCharset Standard output charset of the platform console\n@@ -43,1 +44,1 @@\n-    JdkConsole console(boolean isTTY, Charset charset);\n+    JdkConsole console(boolean isTTY, Charset inCharset, Charset outCharset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleProvider.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-    public JdkConsole console(boolean isTTY, Charset charset) {\n-        return new LazyDelegatingJdkConsoleImpl(charset);\n+    public JdkConsole console(boolean isTTY, Charset inCharset, Charset outCharset) {\n+        return new LazyDelegatingJdkConsoleImpl(inCharset, outCharset);\n@@ -57,1 +57,1 @@\n-        private final Charset charset;\n+        private final Charset outCharset;\n@@ -61,3 +61,3 @@\n-        public LazyDelegatingJdkConsoleImpl(Charset charset) {\n-            this.charset = charset;\n-            this.delegate = new jdk.internal.io.JdkConsoleImpl(charset);\n+        public LazyDelegatingJdkConsoleImpl(Charset inCharset, Charset outCharset) {\n+            this.outCharset = outCharset;\n+            this.delegate = new jdk.internal.io.JdkConsoleImpl(inCharset, outCharset);\n@@ -133,1 +133,1 @@\n-            return charset;\n+            return outCharset;\n@@ -160,1 +160,1 @@\n-                Terminal terminal = TerminalBuilder.builder().encoding(charset)\n+                Terminal terminal = TerminalBuilder.builder().encoding(outCharset)\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        public JdkConsole console(boolean isTTY, Charset charset) {\n+        public JdkConsole console(boolean isTTY, Charset inCharset, Charset outCharset) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,1 @@\n-                System.out.println(\"'expect' command not found. Test ignored.\");\n-                return;\n+                throw new jtreg.SkippedException(\"'expect' command not found. Test ignored.\");\n","filename":"test\/jdk\/java\/io\/Console\/CharsetTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.BufferedReader;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8356985\n+ * @summary Tests if \"stdin.encoding\" is reflected for reading\n+ *          the console.\n+ * @library \/test\/lib\n+ * @build csp\/*\n+ * @run junit StdinEncodingTest\n+ *\/\n+public class StdinEncodingTest {\n+\n+    @Test\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    public void testStdinEncoding() throws Throwable {\n+        \/\/ check \"expect\" command availability\n+        var expect = Paths.get(\"\/usr\/bin\/expect\");\n+        if (!Files.exists(expect) || !Files.isExecutable(expect)) {\n+            Assumptions.abort(\"'\" + expect + \"' not found\");\n+        }\n+\n+        \/\/ invoking \"expect\" command\n+        var testSrc = System.getProperty(\"test.src\", \".\");\n+        var testClasses = System.getProperty(\"test.classes\", \".\");\n+        var jdkDir = System.getProperty(\"test.jdk\");\n+        OutputAnalyzer output = ProcessTools.executeProcess(\n+            \"expect\",\n+            \"-n\",\n+            testSrc + \"\/stdinEncoding.exp\",\n+            jdkDir + \"\/bin\/java\",\n+            \"--module-path\",\n+            testClasses + \"\/modules\",\n+            \"-Dstdin.encoding=Mock\", \/\/ <- gist of this test\n+            \"StdinEncodingTest\");\n+        output.reportDiagnosticSummary();\n+        var eval = output.getExitValue();\n+        assertEquals(0, eval, \"Test failed. Exit value from 'expect' command: \" + eval);\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        \/\/ check stdin.encoding\n+        if (!\"Mock\".equals(System.getProperty(\"stdin.encoding\"))) {\n+            throw new RuntimeException(\"Mock charset was not set in stdin.encoding\");\n+        }\n+        var con = System.console();\n+\n+        \/\/ Console.readLine()\n+        System.out.print(con.readLine());\n+\n+        \/\/ Console.readPassword()\n+        System.out.print(String.valueOf(con.readPassword()));\n+\n+        \/\/ Console.reader()\n+        try (var br = new BufferedReader(con.reader())) {\n+            System.out.print(br.readLine());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/StdinEncodingTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -25,3 +24,2 @@\n-module com.needsfoosaddexport {\n-    requires com.foos;\n-    exports com.needsfoosaddexport;\n+module csp {\n+    provides java.nio.charset.spi.CharsetProvider with provider.MockCharsetProvider;\n","filename":"test\/jdk\/java\/io\/Console\/csp\/module-info.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsfoosaddexport\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package provider;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CoderResult;\n+import java.nio.charset.spi.CharsetProvider;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+\/\/ A test charset provider that decodes every input byte into its uppercase\n+public class MockCharsetProvider extends CharsetProvider {\n+\n+    @Override\n+    public Iterator charsets() {\n+        return Collections.singleton(new MockCharsetProvider.MockCharset()).iterator();\n+    }\n+\n+    @Override\n+    public Charset charsetForName(String charsetName) {\n+        if (charsetName.equals(\"Mock\")) {\n+            return new MockCharsetProvider.MockCharset();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static class MockCharset extends Charset {\n+\n+        public MockCharset() {\n+            super(\"Mock\", null);\n+        }\n+\n+        @Override\n+        public boolean contains(Charset cs) {\n+            return false;\n+        }\n+\n+        @Override\n+        public CharsetDecoder newDecoder() {\n+            return new MockCharsetDecoder(this, 1, 1);\n+        }\n+\n+        @Override\n+        public CharsetEncoder newEncoder() {\n+            return null;\n+        }\n+    }\n+\n+    private static class MockCharsetDecoder extends CharsetDecoder {\n+        public MockCharsetDecoder(Charset cs, float averageCharsPerByte, float maxCharsPerByte) {\n+            super(cs, averageCharsPerByte, maxCharsPerByte);\n+        }\n+\n+        @Override\n+        protected CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {\n+            while (in.remaining() > 0) {\n+                char c = (char)in.get();\n+                if (c != '\\n') {\n+                    out.put(Character.toUpperCase(c));\n+                }\n+            }\n+            return CoderResult.UNDERFLOW;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/csp\/provider\/MockCharsetProvider.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-eval spawn $java -Dsun.stdout.encoding=$encoding -classpath $args CharsetTest\n+eval spawn $java -Dstdout.encoding=$encoding -classpath $args CharsetTest\n","filename":"test\/jdk\/java\/io\/Console\/script.exp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+set java [lrange $argv 0 end]\n+\n+eval spawn $java\n+\n+# Console::readLine()\n+send \"abc\\r\"\n+\n+# Console::readPassword()\n+send \"def\\r\"\n+\n+# Console::reader()\n+send \"ghi\\r\"\n+\n+# check the output\n+expect \"ABCDEFGHI\" {\n+    expect eof\n+    send_error \"Mocked output received\"\n+    exit 0\n+}\n+\n+# fail\n+send_error \"Mocked output not received.\"\n+exit 1\n","filename":"test\/jdk\/java\/io\/Console\/stdinEncoding.exp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}