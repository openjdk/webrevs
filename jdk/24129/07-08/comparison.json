{"files":[{"patch":"@@ -1124,1 +1124,1 @@\n-instruct vand_notI(vReg dst, vReg src2, vReg src1, immI_M1 m1) %{\n+instruct vand_notI(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n@@ -1129,2 +1129,2 @@\n-  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n-  format %{ \"vand_notI $dst, $src2, $src1\" %}\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n+  format %{ \"vand_notI $dst, $src1, $src2\" %}\n@@ -1135,2 +1135,2 @@\n-                as_VectorRegister($src2$$reg),\n-                as_VectorRegister($src1$$reg));\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n@@ -1141,1 +1141,1 @@\n-instruct vand_notL(vReg dst, vReg src2, vReg src1, immL_M1 m1) %{\n+instruct vand_notL(vReg dst, vReg src1, vReg src2, immL_M1 m1) %{\n@@ -1144,2 +1144,2 @@\n-  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n-  format %{ \"vand_notL $dst, $src2, $src1\" %}\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n+  format %{ \"vand_notL $dst, $src1, $src2\" %}\n@@ -1149,2 +1149,2 @@\n-                as_VectorRegister($src2$$reg),\n-                as_VectorRegister($src1$$reg));\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @summary [vector] Make all bits set vector sharable for match rules\n+ * @summary AArch64: [vector] Make all bits set vector sharable for match rules\n@@ -62,0 +62,3 @@\n+    private static long[] la;\n+    private static long[] lb;\n+    private static long[] lr;\n@@ -66,3 +69,0 @@\n-    private static long[] la;\n-    private static long[] lb;\n-    private static long[] lr;\n@@ -74,0 +74,3 @@\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        lr = new long[LENGTH];\n@@ -78,3 +81,0 @@\n-        la = new long[LENGTH];\n-        lb = new long[LENGTH];\n-        lr = new long[LENGTH];\n@@ -85,0 +85,2 @@\n+            la[i] = RD.nextLong(25);\n+            lb[i] = RD.nextLong(25);\n@@ -88,2 +90,0 @@\n-            la[i] = RD.nextLong(25);\n-            lb[i] = RD.nextLong(25);\n@@ -107,16 +107,0 @@\n-    @Test\n-    @Warmup(10000)\n-    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n-    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    public static void testAllBitsSetMask() {\n-        VectorMask<Long> avm = VectorMask.fromArray(L_SPECIES, ma, 0);\n-        VectorMask<Long> bvm = VectorMask.fromArray(L_SPECIES, mb, 0);\n-        VectorMask<Long> cvm = VectorMask.fromArray(L_SPECIES, mc, 0);\n-        avm.andNot(bvm).andNot(cvm).intoArray(mr, 0);\n-\n-        \/\/ Verify results\n-        for (int i = 0; i < L_SPECIES.length(); i++) {\n-            Asserts.assertEquals((ma[i] & (!mb[i])) & (!mc[i]), mr[i]);\n-        }\n-    }\n-\n@@ -173,0 +157,16 @@\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    public static void testAllBitsSetMask() {\n+        VectorMask<Long> avm = VectorMask.fromArray(L_SPECIES, ma, 0);\n+        VectorMask<Long> bvm = VectorMask.fromArray(L_SPECIES, mb, 0);\n+        VectorMask<Long> cvm = VectorMask.fromArray(L_SPECIES, mc, 0);\n+        avm.andNot(bvm).andNot(cvm).intoArray(mr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals((ma[i] & (!mb[i])) & (!mc[i]), mr[i]);\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"}]}