{"files":[{"patch":"@@ -2079,0 +2079,10 @@\n+    public static final String VAND_NOT_I_MASKED = PREFIX + \"VAND_NOT_I_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VAND_NOT_I_MASKED, \"vand_notI_masked\");\n+    }\n+\n+    public static final String VAND_NOT_L_MASKED = PREFIX + \"VAND_NOT_L_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VAND_NOT_L_MASKED, \"vand_notL_masked\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,0 +66,3 @@\n+    private static long[] la;\n+    private static long[] lb;\n+    private static long[] lr;\n@@ -75,0 +78,3 @@\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        lr = new long[LENGTH];\n@@ -82,0 +88,2 @@\n+            la[i] = RD.nextLong(25);\n+            lb[i] = RD.nextLong(25);\n@@ -103,1 +111,0 @@\n-    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"riscv64\", \"true\"})\n@@ -116,0 +123,48 @@\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" })\n+    public static void testVectorVAndNotL() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        av.not().lanewise(VectorOperators.AND_NOT, bv).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals((~la[i]) & (~lb[i]), lr[i]);\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VAND_NOT_I_MASKED, \" >= 1\" })\n+    public static void testVectorVAndNotIMasked() {\n+        VectorMask<Integer> avm = VectorMask.fromArray(I_SPECIES, ma, 0);\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.not().lanewise(VectorOperators.AND_NOT, bv, avm).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            if (ma[i] == true) {\n+                Asserts.assertEquals((~ia[i]) & (~ib[i]), ir[i]);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = { IRNode.VAND_NOT_L_MASKED, \" >= 1\" })\n+    public static void testVectorVAndNotLMasked() {\n+        VectorMask<Long> avm = VectorMask.fromArray(L_SPECIES, ma, 0);\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        av.not().lanewise(VectorOperators.AND_NOT, bv, avm).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            if (ma[i] == true) {\n+                Asserts.assertEquals((~la[i]) & (~lb[i]), lr[i]);\n+            }\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"}]}