{"files":[{"patch":"@@ -1115,0 +1115,68 @@\n+\/\/ ------------------------------ Vector and not -----------------------------------\n+\n+\/\/ vector and not\n+\n+instruct vand_notI(vReg dst, vReg src2, vReg src1, immI_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n+  format %{ \"vandn.vv $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notL(vReg dst, vReg src2, vReg src1, immL_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n+  format %{ \"vandn.vv $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notI_masked(vReg dst, vReg src2, vReg src1, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV (Binary src2 (XorV (Binary src1 (Replicate m1)) v0)) v0));\n+  format %{ \"vandn.vv $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notL_masked(vReg dst, vReg src2, vReg src1, immL_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV (Binary src2 (XorV (Binary src1 (Replicate m1)) v0)) v0));\n+  format %{ \"vandn.vv $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n- * @requires vm.cpu.features ~= \".*asimd.*\"\n- * @summary AArch64: [vector] Make all bits set vector sharable for match rules\n+ * @requires (os.simpleArch == \"aarch64\" & vm.cpu.features ~= \".*asimd.*\") | (os.simpleArch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n+ * @summary [vector] Make all bits set vector sharable for match rules\n@@ -101,2 +101,3 @@\n-    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIf = {\"UseSVE\", \"0\"})\n-    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"riscv64\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}