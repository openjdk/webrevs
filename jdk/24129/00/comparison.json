{"files":[{"patch":"@@ -2273,0 +2273,1 @@\n+  INSN(vandn_vx,   0b1010111, 0b100, 0b000001);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1115,0 +1115,132 @@\n+\/\/ ------------------------------ Vector and not -----------------------------------\n+\n+\/\/ vector and not\n+\n+instruct vandnI(vReg dst, vReg src2, vReg src1, immI_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n+  format %{ \"vandn.vv $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnL(vReg dst, vReg src2, vReg src1, immL_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV src2 (XorV src1 (Replicate m1))));\n+  format %{ \"vandn.vv $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnI_masked(vReg dst, vReg src2, vReg src1, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV (Binary src2 (XorV (Binary src1 (Replicate m1)) v0)) v0));\n+  format %{ \"vandn.vv $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnL_masked(vReg dst, vReg src2, vReg src1, immL_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV (Binary src2 (XorV (Binary src1 (Replicate m1)) v0)) v0));\n+  format %{ \"vandn.vv $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_VectorRegister($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnI_regI(vReg dst, vReg src2, iRegIorL2I src1, immI_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV src2 (Replicate (XorL src1 m1))));\n+  format %{ \"vandn.vx $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_Register($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnL_regL(vReg dst, vReg src2, iRegL src1, immL_M1 m1) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV src2 (Replicate (XorL src1 m1))));\n+  format %{ \"vandn.vx $dst, $src2, $src1\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_Register($src1$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnI_regI_masked(vReg dst, vReg src2, iRegIorL2I src1, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV (Binary src2 (Replicate (XorI src1 m1))) v0));\n+  format %{ \"vandn.vx $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_Register($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vandnL_regL_masked(vReg dst, vReg src2, iRegL src1, immL_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb);\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (AndV (Binary src2 (Replicate (XorL src1 m1))) v0));\n+  format %{ \"vandn.vx $dst, $src2, $src1, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src2$$reg),\n+                as_Register($src1$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":132,"deletions":0,"binary":false,"changes":132,"status":"modified"}]}