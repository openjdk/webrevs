{"files":[{"patch":"@@ -2273,1 +2273,0 @@\n-  INSN(vandn_vx,   0b1010111, 0b100, 0b000001);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1119,1 +1119,1 @@\n-instruct vandnI(vReg dst, vReg src2, vReg src1, immI_M1 m1) %{\n+instruct vand_notI(vReg dst, vReg src2, vReg src1, immI_M1 m1) %{\n@@ -1136,1 +1136,1 @@\n-instruct vandnL(vReg dst, vReg src2, vReg src1, immL_M1 m1) %{\n+instruct vand_notL(vReg dst, vReg src2, vReg src1, immL_M1 m1) %{\n@@ -1150,1 +1150,1 @@\n-instruct vandnI_masked(vReg dst, vReg src2, vReg src1, immI_M1 m1, vRegMask_V0 v0) %{\n+instruct vand_notI_masked(vReg dst, vReg src2, vReg src1, immI_M1 m1, vRegMask_V0 v0) %{\n@@ -1168,1 +1168,1 @@\n-instruct vandnL_masked(vReg dst, vReg src2, vReg src1, immL_M1 m1, vRegMask_V0 v0) %{\n+instruct vand_notL_masked(vReg dst, vReg src2, vReg src1, immL_M1 m1, vRegMask_V0 v0) %{\n@@ -1183,64 +1183,0 @@\n-instruct vandnI_regI(vReg dst, vReg src2, iRegIorL2I src1, immI_M1 m1) %{\n-  predicate(UseZvbb);\n-  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n-            Matcher::vector_element_basic_type(n) == T_BYTE ||\n-            Matcher::vector_element_basic_type(n) == T_SHORT);\n-  match(Set dst (AndV src2 (Replicate (XorL src1 m1))));\n-  format %{ \"vandn.vx $dst, $src2, $src1\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n-    __ vandn_vx(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src2$$reg),\n-                as_Register($src1$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vandnL_regL(vReg dst, vReg src2, iRegL src1, immL_M1 m1) %{\n-  predicate(UseZvbb);\n-  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n-  match(Set dst (AndV src2 (Replicate (XorL src1 m1))));\n-  format %{ \"vandn.vx $dst, $src2, $src1\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n-    __ vandn_vx(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src2$$reg),\n-                as_Register($src1$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vandnI_regI_masked(vReg dst, vReg src2, iRegIorL2I src1, immI_M1 m1, vRegMask_V0 v0) %{\n-  predicate(UseZvbb);\n-  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n-            Matcher::vector_element_basic_type(n) == T_BYTE ||\n-            Matcher::vector_element_basic_type(n) == T_SHORT);\n-  match(Set dst (AndV (Binary src2 (Replicate (XorI src1 m1))) v0));\n-  format %{ \"vandn.vx $dst, $src2, $src1, $v0\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n-    __ vandn_vx(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src2$$reg),\n-                as_Register($src1$$reg),\n-                Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vandnL_regL_masked(vReg dst, vReg src2, iRegL src1, immL_M1 m1, vRegMask_V0 v0) %{\n-  predicate(UseZvbb);\n-  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n-  match(Set dst (AndV (Binary src2 (Replicate (XorL src1 m1))) v0));\n-  format %{ \"vandn.vx $dst, $src2, $src1, $v0\" %}\n-  ins_encode %{\n-    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n-    __ vandn_vx(as_VectorRegister($dst$$reg),\n-                as_VectorRegister($src2$$reg),\n-                as_Register($src1$$reg),\n-                Assembler::v0_t);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":4,"deletions":68,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n- * @requires vm.cpu.features ~= \".*asimd.*\"\n- * @summary AArch64: [vector] Make all bits set vector sharable for match rules\n+ * @requires (os.simpleArch == \"aarch64\" & vm.cpu.features ~= \".*asimd.*\") | (os.simpleArch == \"riscv64\" & vm.cpu.features ~= \".*zvbb.*\")\n+ * @summary [vector] Make all bits set vector sharable for match rules\n@@ -101,2 +101,3 @@\n-    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIf = {\"UseSVE\", \"0\"})\n-    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(counts = { IRNode.VMASK_AND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = { IRNode.VAND_NOT_L, \" >= 1\" }, applyIfPlatform = {\"riscv64\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/AllBitsSetVectorMatchRuleTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}