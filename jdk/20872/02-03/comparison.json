{"files":[{"patch":"@@ -87,1 +87,1 @@\n-    if (prev->val().out.state() == VMATree::StateType::Committed) {\n+    if (prev->val().out.type() == VMATree::StateType::Committed) {\n@@ -108,2 +108,2 @@\n-                  VMATree::statetype_to_string(broken_start->val().out.mem_tag()),\n-                  VMATree::statetype_to_string(broken_end->val().in.mem_tag()));\n+                  VMATree::statetype_to_string(broken_start->val().out.type()),\n+                  VMATree::statetype_to_string(broken_end->val().in.type()));\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-    if (LEQ_A.out().state() == StateType::Reserved) {\n+    if (LEQ_A.out().type() == StateType::Reserved) {\n@@ -153,1 +153,1 @@\n-    } else if (LEQ_A.out().state() == StateType::Committed) {\n+    } else if (LEQ_A.out().type() == StateType::Committed) {\n@@ -167,1 +167,1 @@\n-    if (delete_me.in().state() == StateType::Reserved) {\n+    if (delete_me.in().type() == StateType::Reserved) {\n@@ -169,1 +169,1 @@\n-    } else if (delete_me.in().state() == StateType::Committed) {\n+    } else if (delete_me.in().type() == StateType::Committed) {\n@@ -176,1 +176,1 @@\n-  if (prev.address != A && prev.out().state() != StateType::Released) {\n+  if (prev.address != A && prev.out().type() != StateType::Released) {\n@@ -180,1 +180,1 @@\n-    if (prev.out().state() == StateType::Reserved) {\n+    if (prev.out().type() == StateType::Reserved) {\n@@ -183,1 +183,1 @@\n-    } else if (prev.out().state() == StateType::Committed) {\n+    } else if (prev.out().type() == StateType::Committed) {\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -90,2 +90,2 @@\n-    \/\/ Store the state and mem_tag as two bytes\n-    uint8_t info[2];\n+    \/\/ Store the type and mem_tag as two bytes\n+    uint8_t type_flag[2];\n@@ -95,5 +95,5 @@\n-    IntervalState() : info{0,0}, sidx() {}\n-    IntervalState(const StateType state, const RegionData data) {\n-      assert(!(state == StateType::Released) || data.mem_tag == mtNone, \"Released type must have flag mtNone\");\n-      info[0] = static_cast<uint8_t>(state);\n-      info[1] = static_cast<uint8_t>(data.mem_tag);\n+    IntervalState() : type_flag{0,0}, sidx() {}\n+    IntervalState(const StateType type, const RegionData data) {\n+      assert(!(type == StateType::Released) || data.mem_tag == mtNone, \"Released type must have flag mtNone\");\n+      type_flag[0] = static_cast<uint8_t>(type);\n+      type_flag[1] = static_cast<uint8_t>(data.mem_tag);\n@@ -103,2 +103,2 @@\n-    StateType state() const {\n-      return static_cast<StateType>(info[0]);\n+    StateType type() const {\n+      return static_cast<StateType>(type_flag[0]);\n@@ -108,1 +108,1 @@\n-      return static_cast<MemTag>(info[1]);\n+      return static_cast<MemTag>(type_flag[1]);\n@@ -127,1 +127,1 @@\n-      return in.state() == out.state() &&\n+      return in.type() == out.type() &&\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}