{"files":[{"patch":"@@ -92,1 +92,1 @@\n-  \/\/ The memory type for allocations.\n+  \/\/ The memory tag for allocations.\n@@ -276,1 +276,1 @@\n-  \/\/ The memory type for allocations.\n+  \/\/ The memory tag for allocations.\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -738,1 +738,1 @@\n-    description=\"Native memory usage for a given memory type in the JVM\" period=\"everyChunk\">\n+    description=\"Native memory usage for a given memory tag in the JVM\" period=\"everyChunk\">\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    assert(mem_tag != mtNone, \"Expect a real memory type\");\n+    assert(mem_tag != mtNone, \"Expect a real memory tag\");\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-\/\/ Sort into allocation site addresses and memory type order for baseline comparison\n+\/\/ Sort into allocation site addresses and memory tag order for baseline comparison\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    by_site_and_type \/\/ by call site and memory type\n+    by_site_and_type \/\/ by call site and memory tag\n@@ -206,1 +206,1 @@\n-  \/\/ Sort allocation sites in call site address and memory type order\n+  \/\/ Sort allocation sites in call site address and memory tag order\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-\/\/ A Cache that correlates range with MEMFLAG, optimized to be iterated quickly\n+\/\/ A Cache that correlates range with MemTag, optimized to be iterated quickly\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  \/\/ Summary by memory type\n+  \/\/ Summary by memory tag\n@@ -343,1 +343,1 @@\n-      \"Must have a valid memory type\");\n+      \"Must have a valid memory tag\");\n@@ -522,1 +522,1 @@\n-  \/\/ Summary diff by memory type\n+  \/\/ Summary diff by memory tag\n@@ -851,2 +851,2 @@\n-        \/\/ This site was originally allocated with one memory type, then released,\n-        \/\/ then re-allocated at the same site (as far as we can tell) with a different memory type.\n+        \/\/ This site was originally allocated with one memory tag, then released,\n+        \/\/ then re-allocated at the same site (as far as we can tell) with a different memory tag.\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  \/\/ Report summary for each memory type\n+  \/\/ Report summary for each memory tag\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-         \"Overwrite memory type for region [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), %u->%u.\",\n+         \"Overwrite memory tag for region [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), %u->%u.\",\n@@ -425,1 +425,1 @@\n-      assert(reserved_rgn->mem_tag() == mtNone, \"Overwrite memory type (should be mtNone, is: \\\"%s\\\")\",\n+      assert(reserved_rgn->mem_tag() == mtNone, \"Overwrite memory tag (should be mtNone, is: \\\"%s\\\")\",\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -153,2 +153,2 @@\n-  \/\/ Move virtual memory from one memory type to another.\n-  \/\/ Virtual memory can be reserved before it is associated with a memory type, and tagged\n+  \/\/ Move virtual memory from one memory tag to another.\n+  \/\/ Virtual memory can be reserved before it is associated with a memory tag, and tagged\n@@ -156,1 +156,1 @@\n-  \/\/ type to specified memory type.\n+  \/\/ type to specified memory tag.\n@@ -393,1 +393,1 @@\n-  \/\/  stack and the memory types of the original section.\n+  \/\/  stack and the memory tag of the original section.\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-      assert(!(type == StateType::Released) || data.mem_tag == mtNone, \"Released type must have flag mtNone\");\n+      assert(!(type == StateType::Released) || data.mem_tag == mtNone, \"Released type must have memory tag mtNone\");\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -679,1 +679,1 @@\n-\/\/ Alloc memory using the test memory type so that we can use that to see if\n+\/\/ Alloc memory using the test memory tag so that we can use that to see if\n@@ -695,1 +695,1 @@\n-\/\/ Alloc memory with pseudo call stack and specific memory type.\n+\/\/ Alloc memory with pseudo call stack and specific memory tag.\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -644,1 +644,1 @@\n-  \/\/ NMT memory type\n+  \/\/ NMT memory tag\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-  \/\/ memory type has to be specified for C heap allocation\n-  assert(mem_tag != mtNone, \"memory type not specified for C heap object\");\n+  \/\/ memory tag has to be specified for C heap allocation\n+  assert(mem_tag != mtNone, \"memory tag not specified for C heap object\");\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}