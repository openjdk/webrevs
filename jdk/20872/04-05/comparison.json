{"files":[{"patch":"@@ -32,1 +32,1 @@\n-template <typename E, MemTag F>\n+template <typename E, MemTag MT>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,2 +119,2 @@\n-template <unsigned int N, MemTag F>\n-class TaskQueueSuper: public CHeapObj<F> {\n+template <unsigned int N, MemTag MT>\n+class TaskQueueSuper: public CHeapObj<MT> {\n@@ -327,2 +327,2 @@\n-template <class E, MemTag F, unsigned int N = TASKQUEUE_SIZE>\n-class GenericTaskQueue: public TaskQueueSuper<N, F> {\n+template <class E, MemTag MT, unsigned int N = TASKQUEUE_SIZE>\n+class GenericTaskQueue: public TaskQueueSuper<N, MT> {\n@@ -330,2 +330,2 @@\n-  typedef typename TaskQueueSuper<N, F>::Age Age;\n-  typedef typename TaskQueueSuper<N, F>::idx_t idx_t;\n+  typedef typename TaskQueueSuper<N, MT>::Age Age;\n+  typedef typename TaskQueueSuper<N, MT>::idx_t idx_t;\n@@ -333,1 +333,1 @@\n-  using TaskQueueSuper<N, F>::MOD_N_MASK;\n+  using TaskQueueSuper<N, MT>::MOD_N_MASK;\n@@ -335,2 +335,2 @@\n-  using TaskQueueSuper<N, F>::bottom_relaxed;\n-  using TaskQueueSuper<N, F>::bottom_acquire;\n+  using TaskQueueSuper<N, MT>::bottom_relaxed;\n+  using TaskQueueSuper<N, MT>::bottom_acquire;\n@@ -338,2 +338,2 @@\n-  using TaskQueueSuper<N, F>::set_bottom_relaxed;\n-  using TaskQueueSuper<N, F>::release_set_bottom;\n+  using TaskQueueSuper<N, MT>::set_bottom_relaxed;\n+  using TaskQueueSuper<N, MT>::release_set_bottom;\n@@ -341,4 +341,4 @@\n-  using TaskQueueSuper<N, F>::age_relaxed;\n-  using TaskQueueSuper<N, F>::set_age_relaxed;\n-  using TaskQueueSuper<N, F>::cmpxchg_age;\n-  using TaskQueueSuper<N, F>::age_top_relaxed;\n+  using TaskQueueSuper<N, MT>::age_relaxed;\n+  using TaskQueueSuper<N, MT>::set_age_relaxed;\n+  using TaskQueueSuper<N, MT>::cmpxchg_age;\n+  using TaskQueueSuper<N, MT>::age_top_relaxed;\n@@ -346,5 +346,5 @@\n-  using TaskQueueSuper<N, F>::increment_index;\n-  using TaskQueueSuper<N, F>::decrement_index;\n-  using TaskQueueSuper<N, F>::dirty_size;\n-  using TaskQueueSuper<N, F>::clean_size;\n-  using TaskQueueSuper<N, F>::assert_not_underflow;\n+  using TaskQueueSuper<N, MT>::increment_index;\n+  using TaskQueueSuper<N, MT>::decrement_index;\n+  using TaskQueueSuper<N, MT>::dirty_size;\n+  using TaskQueueSuper<N, MT>::clean_size;\n+  using TaskQueueSuper<N, MT>::assert_not_underflow;\n@@ -353,1 +353,1 @@\n-  typedef typename TaskQueueSuper<N, F>::PopResult PopResult;\n+  typedef typename TaskQueueSuper<N, MT>::PopResult PopResult;\n@@ -355,2 +355,2 @@\n-  using TaskQueueSuper<N, F>::max_elems;\n-  using TaskQueueSuper<N, F>::size;\n+  using TaskQueueSuper<N, MT>::max_elems;\n+  using TaskQueueSuper<N, MT>::size;\n@@ -359,1 +359,1 @@\n-  using TaskQueueSuper<N, F>::stats;\n+  using TaskQueueSuper<N, MT>::stats;\n@@ -431,2 +431,2 @@\n-template<class E, MemTag F, unsigned int N = TASKQUEUE_SIZE>\n-class OverflowTaskQueue: public GenericTaskQueue<E, F, N>\n+template<class E, MemTag MT, unsigned int N = TASKQUEUE_SIZE>\n+class OverflowTaskQueue: public GenericTaskQueue<E, MT, N>\n@@ -435,2 +435,2 @@\n-  typedef Stack<E, F>               overflow_t;\n-  typedef GenericTaskQueue<E, F, N> taskqueue_t;\n+  typedef Stack<E, MT>               overflow_t;\n+  typedef GenericTaskQueue<E, MT, N> taskqueue_t;\n@@ -470,1 +470,1 @@\n-template <MemTag F> class TaskQueueSetSuperImpl: public CHeapObj<F>, public TaskQueueSetSuper {\n+template <MemTag MT> class TaskQueueSetSuperImpl: public CHeapObj<MT>, public TaskQueueSetSuper {\n@@ -473,2 +473,2 @@\n-template<class T, MemTag F>\n-class GenericTaskQueueSet: public TaskQueueSetSuperImpl<F> {\n+template<class T, MemTag MT>\n+class GenericTaskQueueSet: public TaskQueueSetSuperImpl<MT> {\n@@ -521,2 +521,2 @@\n-template<class T, MemTag F> void\n-GenericTaskQueueSet<T, F>::register_queue(uint i, T* q) {\n+template<class T, MemTag MT> void\n+GenericTaskQueueSet<T, MT>::register_queue(uint i, T* q) {\n@@ -527,2 +527,2 @@\n-template<class T, MemTag F> T*\n-GenericTaskQueueSet<T, F>::queue(uint i) {\n+template<class T, MemTag MT> T*\n+GenericTaskQueueSet<T, MT>::queue(uint i) {\n@@ -534,2 +534,2 @@\n-template<class T, MemTag F>\n-void GenericTaskQueueSet<T, F>::assert_empty() const {\n+template<class T, MemTag MT>\n+void GenericTaskQueueSet<T, MT>::assert_empty() const {\n@@ -542,2 +542,2 @@\n-template<class T, MemTag F>\n-uint GenericTaskQueueSet<T, F>::tasks() const {\n+template<class T, MemTag MT>\n+uint GenericTaskQueueSet<T, MT>::tasks() const {\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-template <class T, MemTag F>\n-inline GenericTaskQueueSet<T, F>::GenericTaskQueueSet(uint n) : _n(n) {\n+template <class T, MemTag MT>\n+inline GenericTaskQueueSet<T, MT>::GenericTaskQueueSet(uint n) : _n(n) {\n@@ -44,1 +44,1 @@\n-  _queues = NEW_C_HEAP_ARRAY(GenericTaskQueuePtr, n, F);\n+  _queues = NEW_C_HEAP_ARRAY(GenericTaskQueuePtr, n, MT);\n@@ -50,2 +50,2 @@\n-template <class T, MemTag F>\n-inline GenericTaskQueueSet<T, F>::~GenericTaskQueueSet() {\n+template <class T, MemTag MT>\n+inline GenericTaskQueueSet<T, MT>::~GenericTaskQueueSet() {\n@@ -56,2 +56,2 @@\n-template<class T, MemTag F>\n-void GenericTaskQueueSet<T, F>::print_taskqueue_stats_hdr(outputStream* const st, const char* label) {\n+template<class T, MemTag MT>\n+void GenericTaskQueueSet<T, MT>::print_taskqueue_stats_hdr(outputStream* const st, const char* label) {\n@@ -63,2 +63,2 @@\n-template<class T, MemTag F>\n-void GenericTaskQueueSet<T, F>::print_taskqueue_stats(outputStream* const st, const char* label) {\n+template<class T, MemTag MT>\n+void GenericTaskQueueSet<T, MT>::print_taskqueue_stats(outputStream* const st, const char* label) {\n@@ -78,2 +78,2 @@\n-template<class T, MemTag F>\n-void GenericTaskQueueSet<T, F>::reset_taskqueue_stats() {\n+template<class T, MemTag MT>\n+void GenericTaskQueueSet<T, MT>::reset_taskqueue_stats() {\n@@ -86,2 +86,2 @@\n-template <class T, MemTag F>\n-inline void GenericTaskQueueSet<T, F>::print_and_reset_taskqueue_stats(const char* label) {\n+template <class T, MemTag MT>\n+inline void GenericTaskQueueSet<T, MT>::print_and_reset_taskqueue_stats(const char* label) {\n@@ -100,3 +100,3 @@\n-template<class E, MemTag F, unsigned int N>\n-inline GenericTaskQueue<E, F, N>::GenericTaskQueue() :\n-  _elems(MallocArrayAllocator<E>::allocate(N, F)),\n+template<class E, MemTag MT, unsigned int N>\n+inline GenericTaskQueue<E, MT, N>::GenericTaskQueue() :\n+  _elems(MallocArrayAllocator<E>::allocate(N, MT)),\n@@ -106,2 +106,2 @@\n-template<class E, MemTag F, unsigned int N>\n-inline GenericTaskQueue<E, F, N>::~GenericTaskQueue() {\n+template<class E, MemTag MT, unsigned int N>\n+inline GenericTaskQueue<E, MT, N>::~GenericTaskQueue() {\n@@ -111,2 +111,2 @@\n-template<class E, MemTag F, unsigned int N> inline bool\n-GenericTaskQueue<E, F, N>::push(E t) {\n+template<class E, MemTag MT, unsigned int N> inline bool\n+GenericTaskQueue<E, MT, N>::push(E t) {\n@@ -137,2 +137,2 @@\n-template <class E, MemTag F, unsigned int N>\n-inline bool OverflowTaskQueue<E, F, N>::push(E t) {\n+template <class E, MemTag MT, unsigned int N>\n+inline bool OverflowTaskQueue<E, MT, N>::push(E t) {\n@@ -146,2 +146,2 @@\n-template <class E, MemTag F, unsigned int N>\n-inline bool OverflowTaskQueue<E, F, N>::try_push_to_taskqueue(E t) {\n+template <class E, MemTag MT, unsigned int N>\n+inline bool OverflowTaskQueue<E, MT, N>::try_push_to_taskqueue(E t) {\n@@ -157,2 +157,2 @@\n-template<class E, MemTag F, unsigned int N>\n-bool GenericTaskQueue<E, F, N>::pop_local_slow(uint localBot, Age oldAge) {\n+template<class E, MemTag MT, unsigned int N>\n+bool GenericTaskQueue<E, MT, N>::pop_local_slow(uint localBot, Age oldAge) {\n@@ -190,2 +190,2 @@\n-template<class E, MemTag F, unsigned int N> inline bool\n-GenericTaskQueue<E, F, N>::pop_local(E& t, uint threshold) {\n+template<class E, MemTag MT, unsigned int N> inline bool\n+GenericTaskQueue<E, MT, N>::pop_local(E& t, uint threshold) {\n@@ -227,2 +227,2 @@\n-template <class E, MemTag F, unsigned int N>\n-bool OverflowTaskQueue<E, F, N>::pop_overflow(E& t)\n+template <class E, MemTag MT, unsigned int N>\n+bool OverflowTaskQueue<E, MT, N>::pop_overflow(E& t)\n@@ -256,2 +256,2 @@\n-template<class E, MemTag F, unsigned int N>\n-typename GenericTaskQueue<E, F, N>::PopResult GenericTaskQueue<E, F, N>::pop_global(E& t) {\n+template<class E, MemTag MT, unsigned int N>\n+typename GenericTaskQueue<E, MT, N>::PopResult GenericTaskQueue<E, MT, N>::pop_global(E& t) {\n@@ -314,2 +314,2 @@\n-template<class E, MemTag F, unsigned int N>\n-int GenericTaskQueue<E, F, N>::next_random_queue_id() {\n+template<class E, MemTag MT, unsigned int N>\n+int GenericTaskQueue<E, MT, N>::next_random_queue_id() {\n@@ -319,2 +319,2 @@\n-template<class T, MemTag F>\n-typename GenericTaskQueueSet<T, F>::PopResult GenericTaskQueueSet<T, F>::steal_best_of_2(uint queue_num, E& t) {\n+template<class T, MemTag MT>\n+typename GenericTaskQueueSet<T, MT>::PopResult GenericTaskQueueSet<T, MT>::steal_best_of_2(uint queue_num, E& t) {\n@@ -375,2 +375,2 @@\n-template<class T, MemTag F>\n-bool GenericTaskQueueSet<T, F>::steal(uint queue_num, E& t) {\n+template<class T, MemTag MT>\n+bool GenericTaskQueueSet<T, MT>::steal(uint queue_num, E& t) {\n@@ -397,1 +397,1 @@\n-template<class E, MemTag F, unsigned int N>\n+template<class E, MemTag MT, unsigned int N>\n@@ -399,1 +399,1 @@\n-inline void GenericTaskQueue<E, F, N>::iterate(Fn fn) {\n+inline void GenericTaskQueue<E, MT, N>::iterate(Fn fn) {\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +40,2 @@\n-template<class E, MemTag F, unsigned int N = TASKQUEUE_SIZE>\n-class BufferedOverflowTaskQueue: public OverflowTaskQueue<E, F, N>\n+template<class E, MemTag MT, unsigned int N = TASKQUEUE_SIZE>\n+class BufferedOverflowTaskQueue: public OverflowTaskQueue<E, MT, N>\n@@ -43,1 +44,1 @@\n-  typedef OverflowTaskQueue<E, F, N> taskqueue_t;\n+  typedef OverflowTaskQueue<E, MT, N> taskqueue_t;\n@@ -304,2 +305,2 @@\n-template <class T, MemTag F>\n-class ParallelClaimableQueueSet: public GenericTaskQueueSet<T, F> {\n+template <class T, MemTag MT>\n+class ParallelClaimableQueueSet: public GenericTaskQueueSet<T, MT> {\n@@ -314,1 +315,1 @@\n-  using GenericTaskQueueSet<T, F>::size;\n+  using GenericTaskQueueSet<T, MT>::size;\n@@ -317,1 +318,1 @@\n-  ParallelClaimableQueueSet(int n) : GenericTaskQueueSet<T, F>(n), _claimed_index(0) {\n+  ParallelClaimableQueueSet(int n) : GenericTaskQueueSet<T, MT>(n), _claimed_index(0) {\n@@ -334,3 +335,3 @@\n-template <class T, MemTag F>\n-T* ParallelClaimableQueueSet<T, F>::claim_next() {\n-  jint size = (jint)GenericTaskQueueSet<T, F>::size();\n+template <class T, MemTag MT>\n+T* ParallelClaimableQueueSet<T, MT>::claim_next() {\n+  jint size = (jint)GenericTaskQueueSet<T, MT>::size();\n@@ -345,1 +346,1 @@\n-    return GenericTaskQueueSet<T, F>::queue((uint)index - 1);\n+    return GenericTaskQueueSet<T, MT>::queue((uint)index - 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +34,2 @@\n-template <class E, MemTag F, unsigned int N>\n-bool BufferedOverflowTaskQueue<E, F, N>::pop(E &t) {\n+template <class E, MemTag MT, unsigned int N>\n+bool BufferedOverflowTaskQueue<E, MT, N>::pop(E &t) {\n@@ -48,2 +49,2 @@\n-template <class E, MemTag F, unsigned int N>\n-inline bool BufferedOverflowTaskQueue<E, F, N>::push(E t) {\n+template <class E, MemTag MT, unsigned int N>\n+inline bool BufferedOverflowTaskQueue<E, MT, N>::push(E t) {\n@@ -61,2 +62,2 @@\n-template <class E, MemTag F, unsigned int N>\n-void BufferedOverflowTaskQueue<E, F, N>::clear() {\n+template <class E, MemTag MT, unsigned int N>\n+void BufferedOverflowTaskQueue<E, MT, N>::clear() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.inline.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-template<MemTag F>\n+template<MemTag MT>\n@@ -181,1 +181,1 @@\n-    return CHeapObjBase::operator new(size, F);\n+    return CHeapObjBase::operator new(size, MT);\n@@ -186,1 +186,1 @@\n-    return CHeapObjBase::operator new(size, F, stack);\n+    return CHeapObjBase::operator new(size, MT, stack);\n@@ -191,1 +191,1 @@\n-    return CHeapObjBase::operator new(size, F, nt, stack);\n+    return CHeapObjBase::operator new(size, MT, nt, stack);\n@@ -195,1 +195,1 @@\n-    return CHeapObjBase::operator new(size, F, nt);\n+    return CHeapObjBase::operator new(size, MT, nt);\n@@ -199,1 +199,1 @@\n-    return CHeapObjBase::operator new[](size, F);\n+    return CHeapObjBase::operator new[](size, MT);\n@@ -204,1 +204,1 @@\n-    return CHeapObjBase::operator new[](size, F, stack);\n+    return CHeapObjBase::operator new[](size, MT, stack);\n@@ -209,1 +209,1 @@\n-    return CHeapObjBase::operator new[](size, F, nt, stack);\n+    return CHeapObjBase::operator new[](size, MT, nt, stack);\n@@ -213,1 +213,1 @@\n-    return CHeapObjBase::operator new[](size, F, nt);\n+    return CHeapObjBase::operator new[](size, MT, nt);\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-template <class T, MemTag mem_tag, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemTag MT, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -103,1 +103,1 @@\n-template <class T, MemTag mem_tag, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemTag MT, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -115,1 +115,1 @@\n-template <class T, MemTag mem_tag, size_t alignment = DEFAULT_PADDING_SIZE>\n+template <class T, MemTag MT, size_t alignment = DEFAULT_PADDING_SIZE>\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-template <class T, MemTag mem_tag, size_t alignment>\n-PaddedEnd<T>* PaddedArray<T, mem_tag, alignment>::create_unfreeable(uint length) {\n+template <class T, MemTag MT, size_t alignment>\n+PaddedEnd<T>* PaddedArray<T, MT, alignment>::create_unfreeable(uint length) {\n@@ -43,1 +43,1 @@\n-  void* chunk = AllocateHeap(length * sizeof(PaddedEnd<T, alignment>) + alignment, mem_tag);\n+  void* chunk = AllocateHeap(length * sizeof(PaddedEnd<T, alignment>) + alignment, MT);\n@@ -56,2 +56,2 @@\n-template <class T, MemTag mem_tag, size_t alignment>\n-T** Padded2DArray<T, mem_tag, alignment>::create_unfreeable(uint rows, uint columns, size_t* allocation_size) {\n+template <class T, MemTag MT, size_t alignment>\n+T** Padded2DArray<T, MT, alignment>::create_unfreeable(uint rows, uint columns, size_t* allocation_size) {\n@@ -66,1 +66,1 @@\n-  void* chunk = MmapArrayAllocator<uint8_t>::allocate(total_size, mem_tag);\n+  void* chunk = MmapArrayAllocator<uint8_t>::allocate(total_size, MT);\n@@ -84,2 +84,2 @@\n-template <class T, MemTag mem_tag, size_t alignment>\n-T* PaddedPrimitiveArray<T, mem_tag, alignment>::create_unfreeable(size_t length) {\n+template <class T, MemTag MT, size_t alignment>\n+T* PaddedPrimitiveArray<T, MT, alignment>::create_unfreeable(size_t length) {\n@@ -90,2 +90,2 @@\n-template <class T, MemTag mem_tag, size_t alignment>\n-T* PaddedPrimitiveArray<T, mem_tag, alignment>::create(size_t length, void** alloc_base) {\n+template <class T, MemTag MT, size_t alignment>\n+T* PaddedPrimitiveArray<T, MT, alignment>::create(size_t length, void** alloc_base) {\n@@ -93,1 +93,1 @@\n-  void* chunk = AllocateHeap(length * sizeof(T) + alignment, mem_tag);\n+  void* chunk = AllocateHeap(length * sizeof(T) + alignment, MT);\n","filename":"src\/hotspot\/share\/memory\/padded.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template<typename E, MemTag mem_tag>\n+template<typename E, MemTag MT>\n@@ -55,1 +55,1 @@\n-  GrowableArrayCHeap<BackingElement, mem_tag> _backing_storage;\n+  GrowableArrayCHeap<BackingElement, MT> _backing_storage;\n","filename":"src\/hotspot\/share\/nmt\/arrayWithFreeList.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-template <class T, MemTag F> class ChunkedList : public CHeapObj<F> {\n+template <class T, MemTag MT> class ChunkedList : public CHeapObj<MT> {\n@@ -39,2 +39,2 @@\n-  ChunkedList<T, F>* _next_used;\n-  ChunkedList<T, F>* _next_free;\n+  ChunkedList<T, MT>* _next_used;\n+  ChunkedList<T, MT>* _next_free;\n@@ -65,2 +65,2 @@\n-  void set_next_used(ChunkedList<T, F>* buffer) { _next_used = buffer; }\n-  void set_next_free(ChunkedList<T, F>* buffer) { _next_free = buffer; }\n+  void set_next_used(ChunkedList<T, MT>* buffer) { _next_used = buffer; }\n+  void set_next_free(ChunkedList<T, MT>* buffer) { _next_free = buffer; }\n@@ -68,2 +68,2 @@\n-  ChunkedList<T, F>* next_used() const          { return _next_used; }\n-  ChunkedList<T, F>* next_free() const          { return _next_free; }\n+  ChunkedList<T, MT>* next_used() const          { return _next_used; }\n+  ChunkedList<T, MT>* next_free() const          { return _next_free; }\n","filename":"src\/hotspot\/share\/utilities\/chunkedList.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-template <typename CONFIG, MemTag F>\n-class ConcurrentHashTable : public CHeapObj<F> {\n+template <typename CONFIG, MemTag MT>\n+class ConcurrentHashTable : public CHeapObj<MT> {\n@@ -205,1 +205,1 @@\n-  class InternalTable : public CHeapObj<F> {\n+  class InternalTable : public CHeapObj<MT> {\n@@ -280,1 +280,1 @@\n-    ConcurrentHashTable<CONFIG, F>* _cht;\n+    ConcurrentHashTable<CONFIG, MT>* _cht;\n@@ -283,1 +283,1 @@\n-    ScopedCS(Thread* thread, ConcurrentHashTable<CONFIG, F>* cht);\n+    ScopedCS(Thread* thread, ConcurrentHashTable<CONFIG, MT>* cht);\n@@ -375,1 +375,1 @@\n-                            size_t num_del, Node** ndel, GrowableArrayCHeap<Node*, F>& ndel_heap);\n+                            size_t num_del, Node** ndel, GrowableArrayCHeap<Node*, MT>& ndel_heap);\n@@ -542,1 +542,1 @@\n-  void rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht);\n+  void rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, MT>* to_cht);\n@@ -547,1 +547,1 @@\n-    MultiGetHandle(Thread* thread, ConcurrentHashTable<CONFIG, F>* cht)\n+    MultiGetHandle(Thread* thread, ConcurrentHashTable<CONFIG, MT>* cht)\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,3 +61,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::Node*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::Node*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -70,3 +70,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::Node*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::Node*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -78,2 +78,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -81,2 +81,2 @@\n-    typename ConcurrentHashTable<CONFIG, F>::Node* const volatile * dst,\n-    typename ConcurrentHashTable<CONFIG, F>::Node* node) const\n+    typename ConcurrentHashTable<CONFIG, MT>::Node* const volatile * dst,\n+    typename ConcurrentHashTable<CONFIG, MT>::Node* node) const\n@@ -90,3 +90,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::Node*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::Node*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -99,2 +99,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -106,2 +106,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -113,2 +113,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -131,2 +131,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -134,1 +134,1 @@\n-     typename ConcurrentHashTable<CONFIG, F>::Node* node)\n+     typename ConcurrentHashTable<CONFIG, MT>::Node* node)\n@@ -144,4 +144,4 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n-  Bucket::cas_first(typename ConcurrentHashTable<CONFIG, F>::Node* node,\n-                    typename ConcurrentHashTable<CONFIG, F>::Node* expect\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n+  Bucket::cas_first(typename ConcurrentHashTable<CONFIG, MT>::Node* node,\n+                    typename ConcurrentHashTable<CONFIG, MT>::Node* expect\n@@ -159,2 +159,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -174,2 +174,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -184,2 +184,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -193,2 +193,2 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n@@ -201,1 +201,1 @@\n-  _buckets = NEW_C_HEAP_ARRAY(Bucket, _size, F);\n+  _buckets = NEW_C_HEAP_ARRAY(Bucket, _size, MT);\n@@ -209,2 +209,2 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n@@ -217,3 +217,3 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n-  ScopedCS::ScopedCS(Thread* thread, ConcurrentHashTable<CONFIG, F>* cht)\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n+  ScopedCS::ScopedCS(Thread* thread, ConcurrentHashTable<CONFIG, MT>* cht)\n@@ -230,2 +230,2 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n@@ -237,1 +237,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -239,1 +239,1 @@\n-inline typename CONFIG::Value* ConcurrentHashTable<CONFIG, F>::\n+inline typename CONFIG::Value* ConcurrentHashTable<CONFIG, MT>::\n@@ -246,1 +246,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -248,1 +248,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -274,1 +274,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -276,1 +276,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -290,2 +290,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -307,2 +307,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -326,2 +326,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -351,2 +351,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -361,2 +361,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -377,3 +377,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::InternalTable*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::InternalTable*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -385,3 +385,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::InternalTable*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::InternalTable*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -393,3 +393,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::InternalTable*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::InternalTable*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -409,2 +409,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -449,1 +449,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -451,1 +451,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -481,1 +481,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -483,1 +483,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -516,1 +516,1 @@\n-    GrowableArrayCHeap<Node*, F> extra(0); \/\/ use this buffer if StackBufferSize is not enough\n+    GrowableArrayCHeap<Node*, MT> extra(0); \/\/ use this buffer if StackBufferSize is not enough\n@@ -536,1 +536,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -538,1 +538,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -571,3 +571,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::Bucket*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::Bucket*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -585,3 +585,3 @@\n-template <typename CONFIG, MemTag F>\n-inline typename ConcurrentHashTable<CONFIG, F>::Bucket*\n-ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline typename ConcurrentHashTable<CONFIG, MT>::Bucket*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -616,1 +616,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -618,2 +618,2 @@\n-typename ConcurrentHashTable<CONFIG, F>::Node*\n-ConcurrentHashTable<CONFIG, F>::\n+typename ConcurrentHashTable<CONFIG, MT>::Node*\n+ConcurrentHashTable<CONFIG, MT>::\n@@ -641,2 +641,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -701,2 +701,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -718,2 +718,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -737,2 +737,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -774,2 +774,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -789,2 +789,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -803,2 +803,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -829,2 +829,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -847,2 +847,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -863,1 +863,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -865,1 +865,1 @@\n-inline typename CONFIG::Value* ConcurrentHashTable<CONFIG, F>::\n+inline typename CONFIG::Value* ConcurrentHashTable<CONFIG, MT>::\n@@ -884,1 +884,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -886,1 +886,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -952,1 +952,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -954,1 +954,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -968,1 +968,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -970,1 +970,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -985,1 +985,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -987,1 +987,1 @@\n-inline size_t ConcurrentHashTable<CONFIG, F>::\n+inline size_t ConcurrentHashTable<CONFIG, MT>::\n@@ -989,1 +989,1 @@\n-                     size_t num_del, Node** ndel, GrowableArrayCHeap<Node*, F>& extra)\n+                     size_t num_del, Node** ndel, GrowableArrayCHeap<Node*, MT>& extra)\n@@ -1016,2 +1016,2 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n@@ -1035,2 +1035,2 @@\n-template <typename CONFIG, MemTag F>\n-inline ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline ConcurrentHashTable<CONFIG, MT>::\n@@ -1045,2 +1045,2 @@\n-template <typename CONFIG, MemTag F>\n-inline size_t ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline size_t ConcurrentHashTable<CONFIG, MT>::\n@@ -1053,2 +1053,2 @@\n-template <typename CONFIG, MemTag F>\n-inline size_t ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline size_t ConcurrentHashTable<CONFIG, MT>::\n@@ -1061,2 +1061,2 @@\n-template <typename CONFIG, MemTag F>\n-inline size_t ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline size_t ConcurrentHashTable<CONFIG, MT>::\n@@ -1070,2 +1070,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1079,2 +1079,2 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -1087,2 +1087,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1095,1 +1095,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1097,1 +1097,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1110,2 +1110,2 @@\n-template <typename CONFIG, MemTag F>\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+template <typename CONFIG, MemTag MT>\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1131,1 +1131,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1133,1 +1133,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1144,1 +1144,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1146,1 +1146,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -1158,1 +1158,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1160,1 +1160,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -1182,1 +1182,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1184,1 +1184,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1207,1 +1207,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1209,1 +1209,1 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n+inline bool ConcurrentHashTable<CONFIG, MT>::\n@@ -1221,1 +1221,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1223,1 +1223,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -1233,1 +1233,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1235,1 +1235,1 @@\n-inline TableStatistics ConcurrentHashTable<CONFIG, F>::\n+inline TableStatistics ConcurrentHashTable<CONFIG, MT>::\n@@ -1271,1 +1271,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1273,1 +1273,1 @@\n-inline TableStatistics ConcurrentHashTable<CONFIG, F>::\n+inline TableStatistics ConcurrentHashTable<CONFIG, MT>::\n@@ -1286,1 +1286,1 @@\n-template <typename CONFIG, MemTag F>\n+template <typename CONFIG, MemTag MT>\n@@ -1288,1 +1288,1 @@\n-inline void ConcurrentHashTable<CONFIG, F>::\n+inline void ConcurrentHashTable<CONFIG, MT>::\n@@ -1303,3 +1303,3 @@\n-template <typename CONFIG, MemTag F>\n-inline void ConcurrentHashTable<CONFIG, F>::\n-  rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht)\n+template <typename CONFIG, MemTag MT>\n+inline void ConcurrentHashTable<CONFIG, MT>::\n+  rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, MT>* to_cht)\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":155,"deletions":155,"binary":false,"changes":310,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-template <typename CONFIG, MemTag F>\n-class ConcurrentHashTable<CONFIG, F>::BucketsOperation {\n+template <typename CONFIG, MemTag MT>\n+class ConcurrentHashTable<CONFIG, MT>::BucketsOperation {\n@@ -41,1 +41,1 @@\n-  ConcurrentHashTable<CONFIG, F>* _cht;\n+  ConcurrentHashTable<CONFIG, MT>* _cht;\n@@ -91,1 +91,1 @@\n-  BucketsOperation(ConcurrentHashTable<CONFIG, F>* cht, bool is_mt = false)\n+  BucketsOperation(ConcurrentHashTable<CONFIG, MT>* cht, bool is_mt = false)\n@@ -149,2 +149,2 @@\n-template <typename CONFIG, MemTag F>\n-class ConcurrentHashTable<CONFIG, F>::BulkDeleteTask :\n+template <typename CONFIG, MemTag MT>\n+class ConcurrentHashTable<CONFIG, MT>::BulkDeleteTask :\n@@ -154,1 +154,1 @@\n-  BulkDeleteTask(ConcurrentHashTable<CONFIG, F>* cht, bool is_mt = false)\n+  BulkDeleteTask(ConcurrentHashTable<CONFIG, MT>* cht, bool is_mt = false)\n@@ -193,2 +193,2 @@\n-template <typename CONFIG, MemTag F>\n-class ConcurrentHashTable<CONFIG, F>::GrowTask :\n+template <typename CONFIG, MemTag MT>\n+class ConcurrentHashTable<CONFIG, MT>::GrowTask :\n@@ -198,1 +198,1 @@\n-  GrowTask(ConcurrentHashTable<CONFIG, F>* cht) : BucketsOperation(cht) {\n+  GrowTask(ConcurrentHashTable<CONFIG, MT>* cht) : BucketsOperation(cht) {\n@@ -232,2 +232,2 @@\n-template <typename CONFIG, MemTag F>\n-class ConcurrentHashTable<CONFIG, F>::ScanTask :\n+template <typename CONFIG, MemTag MT>\n+class ConcurrentHashTable<CONFIG, MT>::ScanTask :\n@@ -258,1 +258,1 @@\n-  ScanTask(ConcurrentHashTable<CONFIG, F>* cht, size_t claim_size) : BucketsOperation(cht), _new_table_claimer() {\n+  ScanTask(ConcurrentHashTable<CONFIG, MT>* cht, size_t claim_size) : BucketsOperation(cht), _new_table_claimer() {\n@@ -262,1 +262,1 @@\n-  void set(ConcurrentHashTable<CONFIG, F>* cht, size_t claim_size) {\n+  void set(ConcurrentHashTable<CONFIG, MT>* cht, size_t claim_size) {\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTableTasks.inline.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -803,3 +803,3 @@\n-template <typename E, MemTag F>\n-class GrowableArrayCHeap : public GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> > {\n-  friend class GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> >;\n+template <typename E, MemTag MT>\n+class GrowableArrayCHeap : public GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, MT> > {\n+  friend class GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, MT> >;\n@@ -807,1 +807,1 @@\n-  STATIC_ASSERT(F != mtNone);\n+  STATIC_ASSERT(MT != mtNone);\n@@ -820,1 +820,1 @@\n-    return allocate(this->_capacity, F);\n+    return allocate(this->_capacity, MT);\n@@ -829,2 +829,2 @@\n-      GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> >(\n-          allocate(initial_capacity, F),\n+      GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, MT> >(\n+          allocate(initial_capacity, MT),\n@@ -834,2 +834,2 @@\n-      GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F> >(\n-          allocate(initial_capacity, F),\n+      GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, MT> >(\n+          allocate(initial_capacity, MT),\n@@ -843,1 +843,1 @@\n-    return AnyObj::operator new(size, F);\n+    return AnyObj::operator new(size, MT);\n@@ -847,1 +847,1 @@\n-    return AnyObj::operator new(size, nothrow_constant, F);\n+    return AnyObj::operator new(size, nothrow_constant, MT);\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  MemTag F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  MemTag MT = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n@@ -345,1 +345,1 @@\n-           return new(std::nothrow, F) LinkedListNode<E>(e);\n+           return new(std::nothrow, MT) LinkedListNode<E>(e);\n@@ -347,1 +347,1 @@\n-           return new(F) LinkedListNode<E>(e);\n+           return new(MT) LinkedListNode<E>(e);\n@@ -368,2 +368,2 @@\n-  MemTag F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n-  class SortedLinkedList : public LinkedListImpl<E, T, F, alloc_failmode> {\n+  MemTag MT = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  class SortedLinkedList : public LinkedListImpl<E, T, MT, alloc_failmode> {\n@@ -372,1 +372,1 @@\n-  SortedLinkedList(Arena* a) : LinkedListImpl<E, T, F, alloc_failmode>(a) { }\n+  SortedLinkedList(Arena* a) : LinkedListImpl<E, T, MT, alloc_failmode>(a) { }\n@@ -375,1 +375,1 @@\n-    return LinkedListImpl<E, T, F, alloc_failmode>::add(e);\n+    return LinkedListImpl<E, T, MT, alloc_failmode>::add(e);\n@@ -412,1 +412,1 @@\n-    return LinkedListImpl<E, T, F, alloc_failmode>::add(list);\n+    return LinkedListImpl<E, T, MT, alloc_failmode>::add(list);\n","filename":"src\/hotspot\/share\/utilities\/linkedlist.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-template<MemTag F>\n-class ObjectBitSet : public CHeapObj<F> {\n+template<MemTag MT>\n+class ObjectBitSet : public CHeapObj<MT> {\n@@ -55,1 +55,1 @@\n-  typedef ResizeableResourceHashtable<uintptr_t, CHeapBitMap*, AnyObj::C_HEAP, F,\n+  typedef ResizeableResourceHashtable<uintptr_t, CHeapBitMap*, AnyObj::C_HEAP, MT,\n@@ -84,2 +84,2 @@\n-template<MemTag F>\n-class ObjectBitSet<F>::BitMapFragment : public CHeapObj<F> {\n+template<MemTag MT>\n+class ObjectBitSet<MT>::BitMapFragment : public CHeapObj<MT> {\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-template<MemTag F>\n-ObjectBitSet<F>::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n-        _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, F, true \/* clear *\/),\n+template<MemTag MT>\n+ObjectBitSet<MT>::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n+        _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, MT, true \/* clear *\/),\n@@ -39,2 +39,2 @@\n-template<MemTag F>\n-ObjectBitSet<F>::ObjectBitSet() :\n+template<MemTag MT>\n+ObjectBitSet<MT>::ObjectBitSet() :\n@@ -47,2 +47,2 @@\n-template<MemTag F>\n-ObjectBitSet<F>::~ObjectBitSet() {\n+template<MemTag MT>\n+ObjectBitSet<MT>::~ObjectBitSet() {\n@@ -59,2 +59,2 @@\n-template<MemTag F>\n-inline BitMap::idx_t ObjectBitSet<F>::addr_to_bit(uintptr_t addr) const {\n+template<MemTag MT>\n+inline BitMap::idx_t ObjectBitSet<MT>::addr_to_bit(uintptr_t addr) const {\n@@ -64,2 +64,2 @@\n-template<MemTag F>\n-inline CHeapBitMap* ObjectBitSet<F>::get_fragment_bits(uintptr_t addr) {\n+template<MemTag MT>\n+inline CHeapBitMap* ObjectBitSet<MT>::get_fragment_bits(uintptr_t addr) {\n@@ -89,2 +89,2 @@\n-template<MemTag F>\n-inline void ObjectBitSet<F>::mark_obj(uintptr_t addr) {\n+template<MemTag MT>\n+inline void ObjectBitSet<MT>::mark_obj(uintptr_t addr) {\n@@ -96,2 +96,2 @@\n-template<MemTag F>\n-inline bool ObjectBitSet<F>::is_marked(uintptr_t addr) {\n+template<MemTag MT>\n+inline bool ObjectBitSet<MT>::is_marked(uintptr_t addr) {\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-template <class E, MemTag F> class StackIterator;\n+template <class E, MemTag MT> class StackIterator;\n@@ -58,1 +58,1 @@\n-template <MemTag F> class StackBase\n+template <MemTag MT> class StackBase\n@@ -88,2 +88,2 @@\n-template <class E, MemTag F>\n-class Stack:  public StackBase<F>\n+template <class E, MemTag MT>\n+class Stack:  public StackBase<MT>\n@@ -92,1 +92,1 @@\n-  friend class StackIterator<E, F>;\n+  friend class StackIterator<E, MT>;\n@@ -163,1 +163,1 @@\n-template <class E, MemTag F>\n+template <class E, MemTag MT>\n@@ -167,1 +167,1 @@\n-  StackIterator(Stack<E, F>& stack): _stack(stack) { sync(); }\n+  StackIterator(Stack<E, MT>& stack): _stack(stack) { sync(); }\n@@ -169,1 +169,1 @@\n-  Stack<E, F>& stack() const { return _stack; }\n+  Stack<E, MT>& stack() const { return _stack; }\n@@ -179,1 +179,1 @@\n-  Stack<E, F>& _stack;\n+  Stack<E, MT>& _stack;\n","filename":"src\/hotspot\/share\/utilities\/stack.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template <MemTag F> StackBase<F>::StackBase(size_t segment_size, size_t max_cache_size,\n+template <MemTag MT> StackBase<MT>::StackBase(size_t segment_size, size_t max_cache_size,\n@@ -43,1 +43,1 @@\n-template <MemTag F> size_t StackBase<F>::adjust_max_size(size_t max_size, size_t seg_size)\n+template <MemTag MT> size_t StackBase<MT>::adjust_max_size(size_t max_size, size_t seg_size)\n@@ -54,3 +54,3 @@\n-template <class E, MemTag F>\n-Stack<E, F>::Stack(size_t segment_size, size_t max_cache_size, size_t max_size):\n-  StackBase<F>(adjust_segment_size(segment_size), max_cache_size, max_size)\n+template <class E, MemTag MT>\n+Stack<E, MT>::Stack(size_t segment_size, size_t max_cache_size, size_t max_size):\n+  StackBase<MT>(adjust_segment_size(segment_size), max_cache_size, max_size)\n@@ -61,2 +61,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::push(E item)\n+template <class E, MemTag MT>\n+void Stack<E, MT>::push(E item)\n@@ -74,2 +74,2 @@\n-template <class E, MemTag F>\n-E Stack<E, F>::pop()\n+template <class E, MemTag MT>\n+E Stack<E, MT>::pop()\n@@ -88,2 +88,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::clear(bool clear_cache)\n+template <class E, MemTag MT>\n+void Stack<E, MT>::clear(bool clear_cache)\n@@ -96,2 +96,2 @@\n-template <class E, MemTag F>\n-size_t Stack<E, F>::adjust_segment_size(size_t seg_size)\n+template <class E, MemTag MT>\n+size_t Stack<E, MT>::adjust_segment_size(size_t seg_size)\n@@ -108,2 +108,2 @@\n-template <class E, MemTag F>\n-size_t Stack<E, F>::link_offset() const\n+template <class E, MemTag MT>\n+size_t Stack<E, MT>::link_offset() const\n@@ -114,2 +114,2 @@\n-template <class E, MemTag F>\n-size_t Stack<E, F>::segment_bytes() const\n+template <class E, MemTag MT>\n+size_t Stack<E, MT>::segment_bytes() const\n@@ -120,2 +120,2 @@\n-template <class E, MemTag F>\n-E** Stack<E, F>::link_addr(E* seg) const\n+template <class E, MemTag MT>\n+E** Stack<E, MT>::link_addr(E* seg) const\n@@ -126,2 +126,2 @@\n-template <class E, MemTag F>\n-E* Stack<E, F>::get_link(E* seg) const\n+template <class E, MemTag MT>\n+E* Stack<E, MT>::get_link(E* seg) const\n@@ -132,2 +132,2 @@\n-template <class E, MemTag F>\n-E* Stack<E, F>::set_link(E* new_seg, E* old_seg)\n+template <class E, MemTag MT>\n+E* Stack<E, MT>::set_link(E* new_seg, E* old_seg)\n@@ -139,2 +139,2 @@\n-template <class E, MemTag F>\n-E* Stack<E, F>::alloc(size_t bytes)\n+template <class E, MemTag MT>\n+E* Stack<E, MT>::alloc(size_t bytes)\n@@ -142,1 +142,1 @@\n-  return (E*) NEW_C_HEAP_ARRAY(char, bytes, F);\n+  return (E*) NEW_C_HEAP_ARRAY(char, bytes, MT);\n@@ -145,2 +145,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::free(E* addr, size_t bytes)\n+template <class E, MemTag MT>\n+void Stack<E, MT>::free(E* addr, size_t bytes)\n@@ -155,2 +155,2 @@\n-template <class E, MemTag F>\n-NOINLINE void Stack<E, F>::push_segment()\n+template <class E, MemTag MT>\n+NOINLINE void Stack<E, MT>::push_segment()\n@@ -176,2 +176,2 @@\n-template <class E, MemTag F>\n-NOINLINE void Stack<E, F>::pop_segment()\n+template <class E, MemTag MT>\n+NOINLINE void Stack<E, MT>::pop_segment()\n@@ -197,2 +197,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::free_segments(E* seg)\n+template <class E, MemTag MT>\n+void Stack<E, MT>::free_segments(E* seg)\n@@ -208,2 +208,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::reset(bool reset_cache)\n+template <class E, MemTag MT>\n+void Stack<E, MT>::reset(bool reset_cache)\n@@ -221,2 +221,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::verify(bool at_empty_transition) const\n+template <class E, MemTag MT>\n+void Stack<E, MT>::verify(bool at_empty_transition) const\n@@ -237,2 +237,2 @@\n-template <class E, MemTag F>\n-void Stack<E, F>::zap_segment(E* seg, bool zap_link_field) const\n+template <class E, MemTag MT>\n+void Stack<E, MT>::zap_segment(E* seg, bool zap_link_field) const\n@@ -246,2 +246,2 @@\n-template <class E, MemTag F>\n-void StackIterator<E, F>::sync()\n+template <class E, MemTag MT>\n+void StackIterator<E, MT>::sync()\n@@ -254,2 +254,2 @@\n-template <class E, MemTag F>\n-E* StackIterator<E, F>::next_addr()\n+template <class E, MemTag MT>\n+E* StackIterator<E, MT>::next_addr()\n","filename":"src\/hotspot\/share\/utilities\/stack.inline.hpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"}]}