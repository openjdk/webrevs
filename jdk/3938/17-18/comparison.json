{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\r\n@@ -29,0 +29,1 @@\n+import jdk.internal.misc.Unsafe;\r\n@@ -49,1 +50,1 @@\n- * @since 1.7 * 14 ^ 20\r\n+ * @since 1.7 * 14 ^ 22\r\n@@ -142,1 +143,1 @@\n-            new Sorter(a, parallelism, low, high - low, 0).invoke();\r\n+            new Sorter<>(a, parallelism, low, high - low, 0).invoke();\r\n@@ -158,1 +159,1 @@\n-    static void sort(Sorter sorter, int[] a, int bits, int low, int high) {\r\n+    static void sort(Sorter<int[]> sorter, int[] a, int bits, int low, int high) {\r\n@@ -563,1 +564,1 @@\n-    static boolean tryMergingSort(Sorter sorter, int[] a, int low, int high) {\r\n+    static boolean tryMergingSort(Sorter<int[]> sorter, int[] a, int low, int high) {\r\n@@ -655,1 +656,1 @@\n-            if (sorter != null && (b = (int[]) sorter.b) != null) {\r\n+            if (sorter != null && (b = sorter.b) != null) {\r\n@@ -657,1 +658,1 @@\n-            } else if ((b = (int[]) tryAllocate(a, high - low)) == null) {\r\n+            } else if ((b = tryAllocate(int[].class, high - low)) == null) {\r\n@@ -712,1 +713,1 @@\n-            new Merger(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n+            new Merger<>(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n@@ -732,1 +733,1 @@\n-    private static void mergeParts(Merger merger, int[] dst, int k,\r\n+    private static void mergeParts(Merger<int[]> merger, int[] dst, int k,\r\n@@ -819,1 +820,1 @@\n-    static boolean tryRadixSort(Sorter sorter, int[] a, int low, int high) {\r\n+    static boolean tryRadixSort(Sorter<int[]> sorter, int[] a, int low, int high) {\r\n@@ -825,1 +826,1 @@\n-        if (sorter != null && (b = (int[]) sorter.b) != null) {\r\n+        if (sorter != null && (b = sorter.b) != null) {\r\n@@ -827,1 +828,1 @@\n-        } else if ((b = (int[]) tryAllocate(a, size)) == null) {\r\n+        } else if ((b = tryAllocate(int[].class, size)) == null) {\r\n@@ -998,1 +999,1 @@\n-            new Sorter(a, parallelism, low, high - low, 0).invoke();\r\n+            new Sorter<>(a, parallelism, low, high - low, 0).invoke();\r\n@@ -1014,1 +1015,1 @@\n-    static void sort(Sorter sorter, long[] a, int bits, int low, int high) {\r\n+    static void sort(Sorter<long[]> sorter, long[] a, int bits, int low, int high) {\r\n@@ -1419,1 +1420,1 @@\n-    static boolean tryMergingSort(Sorter sorter, long[] a, int low, int high) {\r\n+    static boolean tryMergingSort(Sorter<long[]> sorter, long[] a, int low, int high) {\r\n@@ -1511,1 +1512,1 @@\n-            if (sorter != null && (b = (long[]) sorter.b) != null) {\r\n+            if (sorter != null && (b = sorter.b) != null) {\r\n@@ -1513,1 +1514,1 @@\n-            } else if ((b = (long[]) tryAllocate(a, high - low)) == null) {\r\n+            } else if ((b = tryAllocate(long[].class, high - low)) == null) {\r\n@@ -1568,1 +1569,1 @@\n-            new Merger(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n+            new Merger<>(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n@@ -1588,1 +1589,1 @@\n-    private static void mergeParts(Merger merger, long[] dst, int k,\r\n+    private static void mergeParts(Merger<long[]> merger, long[] dst, int k,\r\n@@ -1675,1 +1676,1 @@\n-    static boolean tryRadixSort(Sorter sorter, long[] a, int low, int high) {\r\n+    static boolean tryRadixSort(Sorter<long[]> sorter, long[] a, int low, int high) {\r\n@@ -1681,1 +1682,1 @@\n-        if (sorter != null && (b = (long[]) sorter.b) != null) {\r\n+        if (sorter != null && (b = sorter.b) != null) {\r\n@@ -1683,1 +1684,1 @@\n-        } else if ((b = (long[]) tryAllocate(a, size)) == null) {\r\n+        } else if ((b = tryAllocate(long[].class, size)) == null) {\r\n@@ -2625,1 +2626,1 @@\n-            new Sorter(a, parallelism, low, high - low, 0).invoke();\r\n+            new Sorter<>(a, parallelism, low, high - low, 0).invoke();\r\n@@ -2670,1 +2671,1 @@\n-    static void sort(Sorter sorter, float[] a, int bits, int low, int high) {\r\n+    static void sort(Sorter<float[]> sorter, float[] a, int bits, int low, int high) {\r\n@@ -3075,1 +3076,1 @@\n-    static boolean tryMergingSort(Sorter sorter, float[] a, int low, int high) {\r\n+    static boolean tryMergingSort(Sorter<float[]> sorter, float[] a, int low, int high) {\r\n@@ -3167,1 +3168,1 @@\n-            if (sorter != null && (b = (float[]) sorter.b) != null) {\r\n+            if (sorter != null && (b = sorter.b) != null) {\r\n@@ -3169,1 +3170,1 @@\n-            } else if ((b = (float[]) tryAllocate(a, high - low)) == null) {\r\n+            } else if ((b = tryAllocate(float[].class, high - low)) == null) {\r\n@@ -3224,1 +3225,1 @@\n-            new Merger(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n+            new Merger<>(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n@@ -3244,1 +3245,1 @@\n-    private static void mergeParts(Merger merger, float[] dst, int k,\r\n+    private static void mergeParts(Merger<float[]> merger, float[] dst, int k,\r\n@@ -3331,1 +3332,1 @@\n-    static boolean tryRadixSort(Sorter sorter, float[] a, int low, int high) {\r\n+    static boolean tryRadixSort(Sorter<float[]> sorter, float[] a, int low, int high) {\r\n@@ -3337,1 +3338,1 @@\n-        if (sorter != null && (b = (float[]) sorter.b) != null) {\r\n+        if (sorter != null && (b = sorter.b) != null) {\r\n@@ -3339,1 +3340,1 @@\n-        } else if ((b = (float[]) tryAllocate(a, size)) == null) {\r\n+        } else if ((b = tryAllocate(float[].class, size)) == null) {\r\n@@ -3511,1 +3512,1 @@\n-            new Sorter(a, parallelism, low, high - low, 0).invoke();\r\n+            new Sorter<>(a, parallelism, low, high - low, 0).invoke();\r\n@@ -3556,1 +3557,1 @@\n-    static void sort(Sorter sorter, double[] a, int bits, int low, int high) {\r\n+    static void sort(Sorter<double[]> sorter, double[] a, int bits, int low, int high) {\r\n@@ -3961,1 +3962,1 @@\n-    static boolean tryMergingSort(Sorter sorter, double[] a, int low, int high) {\r\n+    static boolean tryMergingSort(Sorter<double[]> sorter, double[] a, int low, int high) {\r\n@@ -4053,1 +4054,1 @@\n-            if (sorter != null && (b = (double[]) sorter.b) != null) {\r\n+            if (sorter != null && (b = sorter.b) != null) {\r\n@@ -4055,1 +4056,1 @@\n-            } else if ((b = (double[]) tryAllocate(a, high - low)) == null) {\r\n+            } else if ((b = tryAllocate(double[].class, high - low)) == null) {\r\n@@ -4110,1 +4111,1 @@\n-            new Merger(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n+            new Merger<>(null, dst, k, a1, lo1, hi1, a2, lo2, hi2).invoke();\r\n@@ -4130,1 +4131,1 @@\n-    private static void mergeParts(Merger merger, double[] dst, int k,\r\n+    private static void mergeParts(Merger<double[]> merger, double[] dst, int k,\r\n@@ -4217,1 +4218,1 @@\n-    static boolean tryRadixSort(Sorter sorter, double[] a, int low, int high) {\r\n+    static boolean tryRadixSort(Sorter<double[]> sorter, double[] a, int low, int high) {\r\n@@ -4223,1 +4224,1 @@\n-        if (sorter != null && (b = (double[]) sorter.b) != null) {\r\n+        if (sorter != null && (b = sorter.b) != null) {\r\n@@ -4225,1 +4226,1 @@\n-        } else if ((b = (double[]) tryAllocate(a, size)) == null) {\r\n+        } else if ((b = tryAllocate(double[].class, size)) == null) {\r\n@@ -4414,1 +4415,1 @@\n-    private static final class Sorter extends CountedCompleter<Void> {\r\n+    private static final class Sorter<T> extends CountedCompleter<Void> {\r\n@@ -4419,1 +4420,1 @@\n-        private final Object a, b;\r\n+        private final T a, b;\r\n@@ -4422,1 +4423,2 @@\n-        private Sorter(Object a, int parallelism, int low, int size, int depth) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        private Sorter(T a, int parallelism, int low, int size, int depth) {\r\n@@ -4431,1 +4433,1 @@\n-            this.b = tryAllocate(a, this.size);\r\n+            this.b = (T) tryAllocate(a.getClass(), this.size);\r\n@@ -4436,1 +4438,1 @@\n-                Object a, Object b, int low, int size, int offset, int depth) {\r\n+                T a, T b, int low, int size, int offset, int depth) {\r\n@@ -4447,0 +4449,1 @@\n+        @SuppressWarnings(\"unchecked\")\r\n@@ -4451,2 +4454,2 @@\n-                new Sorter(this, b, a, low, half, offset, depth + 1).fork();\r\n-                new Sorter(this, b, a, low + half, size - half, offset, depth + 1).compute();\r\n+                new Sorter<>(this, b, a, low, half, offset, depth + 1).fork();\r\n+                new Sorter<>(this, b, a, low + half, size - half, offset, depth + 1).compute();\r\n@@ -4455,1 +4458,1 @@\n-                    sort(this, (int[]) a, depth, low, low + size);\r\n+                    sort((Sorter<int[]>) this, (int[]) a, depth, low, low + size);\r\n@@ -4457,1 +4460,1 @@\n-                    sort(this, (long[]) a, depth, low, low + size);\r\n+                    sort((Sorter<long[]>) this, (long[]) a, depth, low, low + size);\r\n@@ -4459,1 +4462,1 @@\n-                    sort(this, (float[]) a, depth, low, low + size);\r\n+                    sort((Sorter<float[]>) this, (float[]) a, depth, low, low + size);\r\n@@ -4461,1 +4464,1 @@\n-                    sort(this, (double[]) a, depth, low, low + size);\r\n+                    sort((Sorter<double[]>) this, (double[]) a, depth, low, low + size);\r\n@@ -4470,1 +4473,1 @@\n-        public void onCompletion(CountedCompleter<?> parent) {\r\n+        public void onCompletion(CountedCompleter<?> caller) {\r\n@@ -4475,1 +4478,1 @@\n-                new Merger(null,\r\n+                new Merger<>(null,\r\n@@ -4490,1 +4493,1 @@\n-            new Sorter(this, a, b, low, high - low, offset, depth).fork();\r\n+            new Sorter<>(this, a, b, low, high - low, offset, depth).fork();\r\n@@ -4497,1 +4500,1 @@\n-    private static final class Merger extends CountedCompleter<Void> {\r\n+    private static final class Merger<T> extends CountedCompleter<Void> {\r\n@@ -4502,1 +4505,1 @@\n-        private final Object dst, a1, a2;\r\n+        private final T dst, a1, a2;\r\n@@ -4505,2 +4508,2 @@\n-        private Merger(CountedCompleter<?> parent, Object dst, int k,\r\n-                Object a1, int lo1, int hi1, Object a2, int lo2, int hi2) {\r\n+        private Merger(CountedCompleter<?> parent, T dst, int k,\r\n+                T a1, int lo1, int hi1, T a2, int lo2, int hi2) {\r\n@@ -4519,0 +4522,1 @@\n+        @SuppressWarnings(\"unchecked\")\r\n@@ -4521,1 +4525,1 @@\n-                mergeParts(this, (int[]) dst, k,\r\n+                mergeParts((Merger<int[]>) this, (int[]) dst, k,\r\n@@ -4524,1 +4528,1 @@\n-                mergeParts(this, (long[]) dst, k,\r\n+                mergeParts((Merger<long[]>) this, (long[]) dst, k,\r\n@@ -4527,1 +4531,1 @@\n-                mergeParts(this, (float[]) dst, k,\r\n+                mergeParts((Merger<float[]>) this, (float[]) dst, k,\r\n@@ -4530,1 +4534,1 @@\n-                mergeParts(this, (double[]) dst, k,\r\n+                mergeParts((Merger<double[]>) this, (double[]) dst, k,\r\n@@ -4540,1 +4544,1 @@\n-            new Merger(this, dst, k, a1, lo1, hi1, a2, lo2, hi2).fork();\r\n+            new Merger<>(this, dst, k, a1, lo1, hi1, a2, lo2, hi2).fork();\r\n@@ -4547,1 +4551,1 @@\n-     * @param a the given array\r\n+     * @param clazz the given array class\r\n@@ -4549,3 +4553,5 @@\n-     * @return {@code null} if requested size is too large, otherwise created buffer\r\n-     *\/\r\n-    private static Object tryAllocate(Object a, int size) {\r\n+     * @return {@code null} if requested size is too large or there is not enough memory,\r\n+     *         otherwise created buffer\r\n+    *\/\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    private static <T> T tryAllocate(Class<T> clazz, int size) {\r\n@@ -4553,16 +4559,2 @@\n-            if (size > MAX_BUFFER_SIZE) {\r\n-                return null;\r\n-            }\r\n-            if (a instanceof int[]) {\r\n-                return new int[size];\r\n-            }\r\n-            if (a instanceof long[]) {\r\n-                return new long[size];\r\n-            }\r\n-            if (a instanceof float[]) {\r\n-                return new float[size];\r\n-            }\r\n-            if (a instanceof double[]) {\r\n-                return new double[size];\r\n-            }\r\n-            throw new IllegalArgumentException(\"Unknown array: \" + a.getClass().getName());\r\n+            return size > MAX_BUFFER_SIZE ? null :\r\n+                (T) U.allocateUninitializedArray(clazz.componentType(), size);\r\n@@ -4573,0 +4565,2 @@\n+\r\n+    private static final Unsafe U = Unsafe.getUnsafe();\r\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":79,"deletions":85,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\r\n","filename":"test\/jdk\/java\/util\/Arrays\/Sorting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\r\n@@ -34,1 +34,1 @@\n- * @since 14 ^ 20\r\n+ * @since 14 ^ 22\r\n","filename":"test\/jdk\/java\/util\/Arrays\/java.base\/java\/util\/SortingHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n- * @since 20\n+ * @since 22\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ArraysSort.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}