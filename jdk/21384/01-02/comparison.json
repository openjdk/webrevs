{"files":[{"patch":"@@ -1742,1 +1742,1 @@\n-                if (end.centot > end.cenlen \/ CENHDR) {\n+                if (end.centot < 0 || end.centot > end.cenlen \/ CENHDR) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm EndOfCenValidation\n+ * @run junit\/othervm EndOfCenValidation\n@@ -32,3 +32,5 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -52,1 +54,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -74,1 +76,1 @@\n-    private static int MAX_CEN_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n+    private static final int MAX_CEN_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n@@ -92,1 +94,1 @@\n-    @BeforeTest\n+    @BeforeEach\n@@ -101,1 +103,1 @@\n-    @AfterTest\n+    @AfterEach\n@@ -119,1 +121,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -123,1 +125,1 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_SIZE_TOO_LARGE);\n+        assertEquals(INVALID_CEN_SIZE_TOO_LARGE, ex.getMessage());\n@@ -139,1 +141,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -143,1 +145,1 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_BAD_SIZE);\n+        assertEquals(INVALID_CEN_BAD_SIZE, ex.getMessage());\n@@ -159,1 +161,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -163,1 +165,1 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_BAD_OFFSET);\n+        assertEquals(INVALID_CEN_BAD_OFFSET, ex.getMessage());\n@@ -173,2 +175,9 @@\n-    @Test\n-    public void shouldRejectBadTotalEntries() throws IOException {\n+    @ParameterizedTest\n+    @ValueSource(longs = {\n+            -1,                   \/\/ Negative\n+            Long.MIN_VALUE,       \/\/ Very negative\n+            0x3B \/ 3L - 1,        \/\/ Cannot fit in test ZIP's CEN\n+            MAX_CEN_SIZE \/ 3 + 1, \/\/ Too large to allocate int[] entries array\n+            Long.MAX_VALUE        \/\/ Unreasonably large\n+    })\n+    public void shouldRejectBadTotalEntries(long totalEntries) throws IOException {\n@@ -270,1 +279,1 @@\n-        buf.putLong(0x94, MAX_CEN_SIZE \/ 3);\n+        buf.putLong(0x94, totalEntries);\n@@ -278,1 +287,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -283,1 +292,1 @@\n-        assertEquals(ex.getMessage(), INVALID_BAD_ENTRY_COUNT);\n+        assertEquals(INVALID_BAD_ENTRY_COUNT, ex.getMessage());\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EndOfCenValidation.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"}]}