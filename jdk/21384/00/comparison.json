{"files":[{"patch":"@@ -1611,1 +1611,1 @@\n-            int  centot;     \/\/ 4 bytes\n+            long centot;     \/\/ 4 bytes\n@@ -1706,1 +1706,1 @@\n-                            end.centot = (int)centot64; \/\/ assume total < 2g\n+                            end.centot = centot64;\n@@ -1742,0 +1742,3 @@\n+                if (end.centot > end.cenlen \/ CENHDR) {\n+                    zerror(\"invalid END header (total entries count too large)\");\n+                }\n@@ -1746,1 +1749,1 @@\n-                this.total = end.centot;\n+                this.total = Math.toIntExact(end.centot);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.HexFormat;\n@@ -81,0 +82,2 @@\n+    \/\/ Expected message when total entry count is too large\n+    private static final String INVALID_BAD_ENTRY_COUNT = \"invalid END header (total entries count too large)\";\n@@ -163,0 +166,131 @@\n+    \/**\n+     * Validate that a 'Zip64 End of Central Directory' record (the END header)\n+     * where the value of the 'total entries' field is larger than what fits\n+     * in the CEN size is rejected.\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test\n+    public void shouldRejectBadTotalEntries() throws IOException {\n+        \/*\n+         * A small ZIP using ZIP64. Since such a small ZIP64 file cannot\n+         * be produced using ZipOutputStream, it is included inline here.\n+         *\n+         * The file has the following structure:\n+         *\n+         * ------  Local File Header  ------\n+         * 000000  signature          0x04034b50\n+         * 000004  version            45\n+         * 000006  flags              0x0808\n+         * 000008  method             8              Deflated\n+         * 000010  time               0x542c         10:33:24\n+         * 000012  date               0x5947         2024-10-07\n+         * 000014  crc                0x00000000\n+         * 000018  csize              4294967295\n+         * 000022  size               4294967295\n+         * 000026  nlen               5\n+         * 000028  elen               20\n+         * 000030  name               5 bytes        'entry'\n+         * 000035  ext id             0x0001         Zip64 extended information extra field\n+         * 000037  ext size           16\n+         * 000039  z64 size           0\n+         * 000047  z64 csize          0\n+         *\n+         * ------  File Data  ------\n+         * 000055  data               7 bytes\n+         *\n+         * ------  Data Descriptor  ------\n+         * 000062  signature          0x08074b50\n+         * 000066  crc                0x3610a686\n+         * 000070  csize              7\n+         * 000078  size               5\n+         *\n+         * ------  Central Directory File Header  ------\n+         * 000086  signature          0x02014b50\n+         * 000090  made by version    45\n+         * 000092  extract version    45\n+         * 000094  flags              0x0808\n+         * 000096  method             8              Deflated\n+         * 000098  time               0x542c         10:33:24\n+         * 000100  date               0x5947         2024-10-07\n+         * 000102  crc                0x3610a686\n+         * 000106  csize              4294967295\n+         * 000110  size               4294967295\n+         * 000114  diskstart          65535\n+         * 000116  nlen               5\n+         * 000118  elen               32\n+         * 000120  clen               9\n+         * 000122  iattr              0x00\n+         * 000124  eattr              0x0000\n+         * 000128  loc offset         4294967295\n+         * 000132  name               5 bytes        'entry'\n+         * 000137  ext id             0x0001         Zip64 extended information extra field\n+         * 000139  ext size           28\n+         * 000141  z64 size           5\n+         * 000149  z64 csize          7\n+         * 000157  z64 locoff         0\n+         * 000165  z64 diskStart      0\n+         * 000169  comment            9 bytes        'A comment'\n+         *\n+         * ------  Zip64 End of Central Directory Record  ------\n+         * 000178  signature          0x06064b50\n+         * 000182  record size        44\n+         * 000190  made by version    45\n+         * 000192  extract version    45\n+         * 000194  this disk          0\n+         * 000198  cen disk           0\n+         * 000202  entries            1\n+         * 000210  total entries      1\n+         * 000218  cen size           92\n+         * 000226  cen offset         86\n+         *\n+         * ------  Zip64 End of Central Directory Locator  ------\n+         * 000234  signature          0x07064b50\n+         * 000238  eoc disk           0\n+         * 000242  eoc offset         178\n+         * 000250  total disks        1\n+         *\n+         * ------  End of Central Directory  ------\n+         * 000254  signature          0x06054b50\n+         * 000258  this disk          0\n+         * 000260  cen disk           0\n+         * 000262  entries disk       65535\n+         * 000264  entries total      65535\n+         * 000266  cen size           4294967295\n+         * 000270  cen offset         4294967295\n+         * 000274  clen               0\n+         *\/\n+\n+        byte[] zipBytes = HexFormat.of().parseHex(\"\"\"\n+               504b03042d00080808002c54475900000000ffffffffffffffff05001400\n+               656e7472790100100000000000000000000000000000000000cb48cdc9c9\n+               0700504b070886a6103607000000000000000500000000000000504b0102\n+               2d002d00080808002c54475986a61036ffffffffffffffff050020000900\n+               ffff000000000000ffffffff656e74727901001c00050000000000000007\n+               000000000000000000000000000000000000004120636f6d6d656e74504b\n+               06062c000000000000002d002d0000000000000000000100000000000000\n+               01000000000000005c000000000000005600000000000000504b06070000\n+               0000b20000000000000001000000504b050600000000ffffffffffffffff\n+               ffffffff0000\n+               \"\"\".replaceAll(\"\\n\",\"\"));\n+\n+        \/\/ Buffer to manipulate the above ZIP\n+        ByteBuffer buf = ByteBuffer.wrap(zipBytes).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ Offset of the 'total entries' in the 'Zip64 End of Central Directory' record\n+        int totOffset = 210;\n+        \/\/ Update entry count to a value which cannot possibly fit in the small CEN\n+        buf.putLong(totOffset, MAX_CEN_SIZE \/ 3);\n+\n+        \/\/ Write the ZIP to disk\n+        Path zipFile = Path.of(\"bad-entry-count.zip\");\n+        Files.write(zipFile, zipBytes);\n+\n+        \/\/ Verify that the END header is rejected\n+        ZipException ex = expectThrows(ZipException.class, () -> {\n+            try (var zf = new ZipFile(zipFile.toFile())) {\n+            }\n+        });\n+\n+        assertEquals(ex.getMessage(), INVALID_BAD_ENTRY_COUNT);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EndOfCenValidation.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"modified"}]}