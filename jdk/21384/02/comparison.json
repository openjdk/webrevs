{"files":[{"patch":"@@ -1611,1 +1611,1 @@\n-            int  centot;     \/\/ 4 bytes\n+            long centot;     \/\/ 4 bytes\n@@ -1706,1 +1706,1 @@\n-                            end.centot = (int)centot64; \/\/ assume total < 2g\n+                            end.centot = centot64;\n@@ -1742,0 +1742,3 @@\n+                if (end.centot < 0 || end.centot > end.cenlen \/ CENHDR) {\n+                    zerror(\"invalid END header (total entries count too large)\");\n+                }\n@@ -1746,1 +1749,1 @@\n-                this.total = end.centot;\n+                this.total = Math.toIntExact(end.centot);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm EndOfCenValidation\n+ * @run junit\/othervm EndOfCenValidation\n@@ -32,3 +32,5 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -46,0 +48,1 @@\n+import java.util.HexFormat;\n@@ -51,1 +54,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -73,1 +76,1 @@\n-    private static int MAX_CEN_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n+    private static final int MAX_CEN_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n@@ -81,0 +84,2 @@\n+    \/\/ Expected message when total entry count is too large\n+    private static final String INVALID_BAD_ENTRY_COUNT = \"invalid END header (total entries count too large)\";\n@@ -89,1 +94,1 @@\n-    @BeforeTest\n+    @BeforeEach\n@@ -98,1 +103,1 @@\n-    @AfterTest\n+    @AfterEach\n@@ -116,1 +121,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -120,1 +125,1 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_SIZE_TOO_LARGE);\n+        assertEquals(INVALID_CEN_SIZE_TOO_LARGE, ex.getMessage());\n@@ -136,1 +141,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -140,1 +145,1 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_BAD_SIZE);\n+        assertEquals(INVALID_CEN_BAD_SIZE, ex.getMessage());\n@@ -156,1 +161,1 @@\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n@@ -160,1 +165,128 @@\n-        assertEquals(ex.getMessage(), INVALID_CEN_BAD_OFFSET);\n+        assertEquals(INVALID_CEN_BAD_OFFSET, ex.getMessage());\n+    }\n+\n+    \/**\n+     * Validate that a 'Zip64 End of Central Directory' record (the END header)\n+     * where the value of the 'total entries' field is larger than what fits\n+     * in the CEN size is rejected.\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(longs = {\n+            -1,                   \/\/ Negative\n+            Long.MIN_VALUE,       \/\/ Very negative\n+            0x3B \/ 3L - 1,        \/\/ Cannot fit in test ZIP's CEN\n+            MAX_CEN_SIZE \/ 3 + 1, \/\/ Too large to allocate int[] entries array\n+            Long.MAX_VALUE        \/\/ Unreasonably large\n+    })\n+    public void shouldRejectBadTotalEntries(long totalEntries) throws IOException {\n+        \/**\n+         * A small ZIP using the ZIP64 format.\n+         *\n+         * ZIP created using: \"echo -n hello | zip zip64.zip -\"\n+         * Hex encoded using: \"cat zip64.zip | xxd -ps\"\n+         *\n+         * The file has the following structure:\n+         *\n+         * 0000 LOCAL HEADER #1       04034B50\n+         * 0004 Extract Zip Spec      2D '4.5'\n+         * 0005 Extract OS            00 'MS-DOS'\n+         * 0006 General Purpose Flag  0000\n+         * 0008 Compression Method    0000 'Stored'\n+         * 000A Last Mod Time         5947AB78 'Mon Oct  7 21:27:48 2024'\n+         * 000E CRC                   363A3020\n+         * 0012 Compressed Length     FFFFFFFF\n+         * 0016 Uncompressed Length   FFFFFFFF\n+         * 001A Filename Length       0001\n+         * 001C Extra Length          0014\n+         * 001E Filename              '-'\n+         * 001F Extra ID #0001        0001 'ZIP64'\n+         * 0021   Length              0010\n+         * 0023   Uncompressed Size   0000000000000006\n+         * 002B   Compressed Size     0000000000000006\n+         * 0033 PAYLOAD               hello.\n+         *\n+         * 0039 CENTRAL HEADER #1     02014B50\n+         * 003D Created Zip Spec      1E '3.0'\n+         * 003E Created OS            03 'Unix'\n+         * 003F Extract Zip Spec      2D '4.5'\n+         * 0040 Extract OS            00 'MS-DOS'\n+         * 0041 General Purpose Flag  0000\n+         * 0043 Compression Method    0000 'Stored'\n+         * 0045 Last Mod Time         5947AB78 'Mon Oct  7 21:27:48 2024'\n+         * 0049 CRC                   363A3020\n+         * 004D Compressed Length     00000006\n+         * 0051 Uncompressed Length   FFFFFFFF\n+         * 0055 Filename Length       0001\n+         * 0057 Extra Length          000C\n+         * 0059 Comment Length        0000\n+         * 005B Disk Start            0000\n+         * 005D Int File Attributes   0001\n+         *      [Bit 0]               1 Text Data\n+         * 005F Ext File Attributes   11B00000\n+         * 0063 Local Header Offset   00000000\n+         * 0067 Filename              '-'\n+         * 0068 Extra ID #0001        0001 'ZIP64'\n+         * 006A   Length              0008\n+         * 006C   Uncompressed Size   0000000000000006\n+         *\n+         * 0074 ZIP64 END CENTRAL DIR 06064B50\n+         *      RECORD\n+         * 0078 Size of record        000000000000002C\n+         * 0080 Created Zip Spec      1E '3.0'\n+         * 0081 Created OS            03 'Unix'\n+         * 0082 Extract Zip Spec      2D '4.5'\n+         * 0083 Extract OS            00 'MS-DOS'\n+         * 0084 Number of this disk   00000000\n+         * 0088 Central Dir Disk no   00000000\n+         * 008C Entries in this disk  0000000000000001\n+         * 0094 Total Entries         0000000000000001\n+         * 009C Size of Central Dir   000000000000003B\n+         * 00A4 Offset to Central dir 0000000000000039\n+         *\n+         * 00AC ZIP64 END CENTRAL DIR 07064B50\n+         *      LOCATOR\n+         * 00B0 Central Dir Disk no   00000000\n+         * 00B4 Offset to Central dir 0000000000000074\n+         * 00BC Total no of Disks     00000001\n+         *\n+         * 00C0 END CENTRAL HEADER    06054B50\n+         * 00C4 Number of this disk   0000\n+         * 00C6 Central Dir Disk no   0000\n+         * 00C8 Entries in this disk  0001\n+         * 00CA Total Entries         0001\n+         * 00CC Size of Central Dir   0000003B\n+         * 00D0 Offset to Central Dir FFFFFFFF\n+         * 00D4 Comment Length        0000\n+         *\/\n+\n+        byte[] zipBytes = HexFormat.of().parseHex(\"\"\"\n+                504b03042d000000000078ab475920303a36ffffffffffffffff01001400\n+                2d010010000600000000000000060000000000000068656c6c6f0a504b01\n+                021e032d000000000078ab475920303a3606000000ffffffff01000c0000\n+                00000001000000b011000000002d010008000600000000000000504b0606\n+                2c000000000000001e032d00000000000000000001000000000000000100\n+                0000000000003b000000000000003900000000000000504b060700000000\n+                740000000000000001000000504b050600000000010001003b000000ffff\n+                ffff0000\n+                \"\"\".replaceAll(\"\\n\",\"\"));\n+\n+        \/\/ Buffer to manipulate the above ZIP\n+        ByteBuffer buf = ByteBuffer.wrap(zipBytes).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ Offset of the 'total entries' in the 'ZIP64 END CENTRAL DIR' record\n+        \/\/ Update ZIP64 entry count to a value which cannot possibly fit in the small CEN\n+        buf.putLong(0x94, totalEntries);\n+        \/\/ The corresponding END field needs the ZIP64 magic value\n+        buf.putShort(0xCA, (short) 0xFFFF);\n+        \/\/ Write the ZIP to disk\n+        Path zipFile = Path.of(\"bad-entry-count.zip\");\n+        Files.write(zipFile, zipBytes);\n+\n+        \/\/ Verify that the END header is rejected\n+        ZipException ex = assertThrows(ZipException.class, () -> {\n+            try (var zf = new ZipFile(zipFile.toFile())) {\n+            }\n+        });\n+\n+        assertEquals(INVALID_BAD_ENTRY_COUNT, ex.getMessage());\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EndOfCenValidation.java","additions":146,"deletions":14,"binary":false,"changes":160,"status":"modified"}]}