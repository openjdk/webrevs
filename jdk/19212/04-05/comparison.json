{"files":[{"patch":"@@ -129,0 +129,1 @@\n+        \/* single bit masks composable with operator | *\/\n@@ -142,2 +143,1 @@\n-         * <p>\n-         * Although {@link ThreadLocalRandom} can only be accessed via\n+         * <p> Although {@link ThreadLocalRandom} can only be accessed via\n@@ -147,0 +147,1 @@\n+         * <p> Currently, no algorithm is deprecated.\n@@ -154,1 +155,1 @@\n-                            INSTANTIABLE | BYTE_ARRAY_SEED | STOCHASTIC),\n+                            INSTANTIABLE | BYTE_ARRAY_SEED | STOCHASTIC | deprecationBit(SecureRandom.class)),\n@@ -157,1 +158,1 @@\n-                            INSTANTIABLE | LONG_SEED),\n+                            INSTANTIABLE | LONG_SEED | deprecationBit(Random.class)),\n@@ -160,1 +161,1 @@\n-                            INSTANTIABLE | LONG_SEED),\n+                            INSTANTIABLE | LONG_SEED | deprecationBit(SplittableRandom.class)),\n@@ -193,1 +194,1 @@\n-                            0)\n+                            deprecationBit(ThreadLocalRandom.class))\n@@ -204,1 +205,5 @@\n-                            flags | (rgClass.isAnnotationPresent(Deprecated.class) ? DEPRECATED : 0)));\n+                            flags));\n+        }\n+\n+        private static int deprecationBit(Class<? extends RandomGenerator> rgClass) {\n+            return rgClass.isAnnotationPresent(Deprecated.class) ? DEPRECATED : 0;\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGeneratorFactory.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    static void checkPredicates(RandomGeneratorFactory factory) {\n+    static void checkPredicates(RandomGeneratorFactory<RandomGenerator> factory) {\n@@ -159,1 +159,1 @@\n-    static void coverFactory(RandomGeneratorFactory factory) {\n+    static void coverFactory(RandomGeneratorFactory<RandomGenerator> factory) {\n@@ -174,9 +174,13 @@\n-        RandomGenerator rng;\n-\n-        rng = null;\n-        try {\n-            rng = factory.create(12345L);\n-        } catch (UnsupportedOperationException ignore) {\n-        }\n-        if (rng != null) {\n-            coverRandomGenerator(rng);\n+        \/\/ test create(long)\n+        switch (factory.name()) {\n+            \/\/ SecureRandom doesn't have long constructors so we expect\n+            \/\/ UnsupportedOperationException\n+            case \"SecureRandom\" -> {\n+                try {\n+                    factory.create(12345L);\n+                    throw new AssertionError(\"RandomGeneratorFactory.create(long) was expected\" +\n+                            \"to throw UnsupportedOperationException for \" + factory.name() + \" but didn't\");\n+                } catch (UnsupportedOperationException ignored) {\n+                }\n+            }\n+            default -> coverRandomGenerator(factory.create(12345L));\n@@ -184,8 +188,13 @@\n-\n-        rng = null;\n-        try {\n-            rng = factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});\n-        } catch (UnsupportedOperationException ignore) {\n-        }\n-        if (rng != null) {\n-            coverRandomGenerator(rng);\n+        \/\/ test create(byte[])\n+        switch (factory.name()) {\n+            \/\/ these don't have byte[] constructors so we expect UnsupportedOperationException\n+            case \"Random\",\n+                 \"SplittableRandom\" -> {\n+                try {\n+                    factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});\n+                    throw new AssertionError(\"RandomGeneratorFactory.create(byte[]) was expected\" +\n+                            \"to throw UnsupportedOperationException for \" + factory.name() + \" but didn't\");\n+                } catch (UnsupportedOperationException ignored) {\n+                }\n+            }\n+            default -> coverRandomGenerator(factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}));\n@@ -208,1 +217,1 @@\n-                .filter(f -> f.isStreamable())\n+                .filter(RandomGeneratorFactory::isStreamable)\n@@ -213,1 +222,1 @@\n-                .filter(f -> f.isSplittable())\n+                .filter(RandomGeneratorFactory::isSplittable)\n@@ -218,1 +227,1 @@\n-                .filter(f -> f.isJumpable())\n+                .filter(RandomGeneratorFactory::isJumpable)\n@@ -223,1 +232,1 @@\n-                .filter(f -> f.isLeapable())\n+                .filter(RandomGeneratorFactory::isLeapable)\n@@ -228,1 +237,1 @@\n-                .filter(f -> f.isArbitrarilyJumpable())\n+                .filter(RandomGeneratorFactory::isArbitrarilyJumpable)\n@@ -232,0 +241,2 @@\n+        RandomGeneratorFactory.all()\n+                .forEach(RandomTestCoverage::checkPredicates);\n@@ -235,0 +246,1 @@\n+        coverDefaults();\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestCoverage.java","additions":36,"deletions":24,"binary":false,"changes":60,"status":"modified"}]}