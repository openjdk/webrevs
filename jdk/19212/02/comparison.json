{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -152,4 +151,0 @@\n-@RandomGeneratorProperties(\n-        name = \"SecureRandom\",\n-        isStochastic = true\n-)\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import jdk.internal.util.random.RandomSupport.*;\n-\n@@ -80,5 +78,0 @@\n-@RandomGeneratorProperties(\n-        name = \"Random\",\n-        i = 48, j = 0, k = 0,\n-        equidistribution = 0\n-)\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -90,5 +89,0 @@\n-@RandomGeneratorProperties(\n-        name = \"SplittableRandom\",\n-        i = 64, j = 0, k = 0,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,6 +88,0 @@\n-\n-@RandomGeneratorProperties(\n-        name = \"ThreadLocalRandom\",\n-        i = 64, j = 0, k = 0,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,11 @@\n-import java.lang.reflect.Constructor;\n+import jdk.internal.random.L128X1024MixRandom;\n+import jdk.internal.random.L128X128MixRandom;\n+import jdk.internal.random.L128X256MixRandom;\n+import jdk.internal.random.L32X64MixRandom;\n+import jdk.internal.random.L64X1024MixRandom;\n+import jdk.internal.random.L64X128MixRandom;\n+import jdk.internal.random.L64X128StarStarRandom;\n+import jdk.internal.random.L64X256MixRandom;\n+import jdk.internal.random.Xoroshiro128PlusPlus;\n+import jdk.internal.random.Xoshiro256PlusPlus;\n+\n@@ -30,3 +40,2 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n+import java.security.SecureRandom;\n+import java.util.AbstractMap.SimpleImmutableEntry;\n@@ -34,1 +43,0 @@\n-import java.util.function.Function;\n@@ -36,0 +44,3 @@\n+import java.util.Random;\n+import java.util.SplittableRandom;\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -41,3 +52,0 @@\n-import java.util.ServiceLoader;\n-import java.util.ServiceLoader.Provider;\n-import java.util.stream.Collectors;\n@@ -45,1 +53,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -110,4 +117,0 @@\n-    \/**\n-     * Instance provider class of random number algorithm.\n-     *\/\n-    private final Provider<? extends RandomGenerator> provider;\n@@ -115,4 +118,1 @@\n-    \/**\n-     * Provider RandomGeneratorProperties annotation.\n-     *\/\n-    private volatile RandomGeneratorProperties properties;\n+    private static final String DEFAULT_ALGORITHM = \"L32X64MixRandom\";\n@@ -120,4 +120,9 @@\n-    \/**\n-     * Default provider constructor.\n-     *\/\n-    private volatile Constructor<T> ctor;\n+    private record RandomGeneratorProperties(\n+            Class<? extends RandomGenerator> rgClass,\n+            String name,\n+            String group,\n+            int i,\n+            int j,\n+            int k,\n+            int equidistribution,\n+            int flags) {\n@@ -125,9 +130,6 @@\n-    \/**\n-     * Provider constructor with long seed.\n-     *\/\n-    private Constructor<T> ctorLong;\n-\n-    \/**\n-     * Provider constructor with byte[] seed.\n-     *\/\n-    private Constructor<T> ctorBytes;\n+        private static final int INSTANTIABLE       = 1 << 0;\n+        private static final int LONG_SEED          = 1 << 1;\n+        private static final int BYTE_ARRAY_SEED    = 1 << 2;\n+        private static final int STOCHASTIC         = 1 << 3;\n+        private static final int HARDWARE           = 1 << 4;\n+        private static final int DEPRECATED         = 1 << 5;\n@@ -135,0 +137,1 @@\n+        private static final int ALL_CONSTRUCTORS = INSTANTIABLE | LONG_SEED | BYTE_ARRAY_SEED;\n@@ -136,2 +139,1 @@\n-    private static class FactoryMapHolder {\n-        static final Map<String, Provider<? extends RandomGenerator>> FACTORY_MAP = createFactoryMap();\n+        private static final Map<String, RandomGeneratorProperties> FACTORY_MAP = createFactoryMap();\n@@ -140,1 +142,6 @@\n-         * Returns the factory map, lazily constructing map on first use.\n+         * Returns the factory map, lazily constructing it on first use.\n+         * <p>\n+         * Although {@link ThreadLocalRandom} can only be accessed via\n+         * {@link ThreadLocalRandom#current()}, a map entry is added nevertheless\n+         * to record its properties that are otherwise not documented\n+         * anywhere else.\n@@ -142,1 +149,1 @@\n-         * @return Map of RandomGeneratorFactory classes.\n+         * @return Map of RandomGeneratorProperties.\n@@ -144,7 +151,147 @@\n-        private static Map<String, Provider<? extends RandomGenerator>> createFactoryMap() {\n-            FactoryMapHolder.class.getModule().addUses(RandomGenerator.class);\n-            return ServiceLoader\n-                .load(RandomGenerator.class, ClassLoader.getPlatformClassLoader())\n-                .stream()\n-                .filter(p -> !p.type().isInterface())\n-                .collect(Collectors.toMap(p -> p.type().getSimpleName(), Function.identity()));\n+        private static Map<String, RandomGeneratorProperties> createFactoryMap() {\n+            return Map.ofEntries(\n+                    entry(SecureRandom.class, \"SecureRandom\", \"Legacy\",\n+                            0, 0, 0, Integer.MAX_VALUE,\n+                            INSTANTIABLE | BYTE_ARRAY_SEED | STOCHASTIC),\n+                    entry(Random.class, \"Random\", \"Legacy\",\n+                            48, 0, 0, 0,\n+                            INSTANTIABLE | LONG_SEED),\n+                    entry(SplittableRandom.class, \"SplittableRandom\", \"Legacy\",\n+                            64, 0, 0, 1,\n+                            INSTANTIABLE | LONG_SEED),\n+                    entry(L32X64MixRandom.class, \"L32X64MixRandom\", \"LXM\",\n+                            64, 1, 32, 1,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L64X128MixRandom.class, \"L64X128MixRandom\", \"LXM\",\n+                            128, 1, 64, 2,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L64X128StarStarRandom.class, \"L64X128StarStarRandom\", \"LXM\",\n+                            128, 1, 64, 2,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L64X256MixRandom.class, \"L64X256MixRandom\", \"LXM\",\n+                            256, 1, 64, 4,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L64X1024MixRandom.class, \"L64X1024MixRandom\", \"LXM\",\n+                            1024, 1, 64, 16,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L128X128MixRandom.class, \"L128X128MixRandom\", \"LXM\",\n+                            128, 1, 128, 1,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L128X256MixRandom.class, \"L128X256MixRandom\", \"LXM\",\n+                            256, 1, 128, 1,\n+                            ALL_CONSTRUCTORS),\n+                    entry(L128X1024MixRandom.class, \"L128X1024MixRandom\", \"LXM\",\n+                            1024, 1, 128, 1,\n+                            ALL_CONSTRUCTORS),\n+                    entry(Xoroshiro128PlusPlus.class, \"Xoroshiro128PlusPlus\", \"Xoroshiro\",\n+                            128, 1, 0, 1,\n+                            ALL_CONSTRUCTORS),\n+                    entry(Xoshiro256PlusPlus.class, \"Xoshiro256PlusPlus\", \"Xoshiro\",\n+                            256, 1, 0, 3,\n+                            ALL_CONSTRUCTORS),\n+                    entry(ThreadLocalRandom.class, \"ThreadLocalRandom\", \"Legacy\",\n+                            64, 0, 0, 1,\n+                            0)\n+            );\n+        }\n+\n+        private static SimpleImmutableEntry<String, RandomGeneratorProperties>\n+        entry(Class<? extends RandomGenerator> rgClass, String name, String group,\n+                int i, int j, int k, int equidistribution,\n+                int flags) {\n+            return new SimpleImmutableEntry<>(name,\n+                    new RandomGeneratorProperties(rgClass, name, group,\n+                            i, j, k, equidistribution,\n+                            flags | (rgClass.isAnnotationPresent(Deprecated.class) ? DEPRECATED : 0)));\n+        }\n+\n+        private RandomGenerator create() {\n+            return switch (name) {\n+                case \"Random\" ->                new Random();\n+                case \"SecureRandom\" ->          new SecureRandom();\n+                case \"SplittableRandom\" ->      new SplittableRandom();\n+                case \"L32X64MixRandom\" ->       new L32X64MixRandom();\n+                case \"L64X128MixRandom\" ->      new L64X128MixRandom();\n+                case \"L64X128StarStarRandom\" -> new L64X128StarStarRandom();\n+                case \"L64X256MixRandom\" ->      new L64X256MixRandom();\n+                case \"L64X1024MixRandom\" ->     new L64X1024MixRandom();\n+                case \"L128X128MixRandom\" ->     new L128X128MixRandom();\n+                case \"L128X256MixRandom\" ->     new L128X256MixRandom();\n+                case \"L128X1024MixRandom\" ->    new L128X1024MixRandom();\n+                case \"Xoroshiro128PlusPlus\" ->  new Xoroshiro128PlusPlus();\n+                case \"Xoshiro256PlusPlus\" ->    new Xoshiro256PlusPlus();\n+                default -> throw new InternalError(\"should not happen\");\n+            };\n+        }\n+\n+        private RandomGenerator create(long seed) {\n+            if (isInstantiable() && (flags & LONG_SEED) == 0) {\n+                throw new UnsupportedOperationException(\"Random algorithm \"\n+                        + name + \" does not support a long seed\");\n+            }\n+            return switch (name) {\n+                case \"Random\" ->                new Random(seed);\n+                case \"SplittableRandom\" ->      new SplittableRandom(seed);\n+                case \"L32X64MixRandom\" ->       new L32X64MixRandom(seed);\n+                case \"L64X128MixRandom\" ->      new L64X128MixRandom(seed);\n+                case \"L64X128StarStarRandom\" -> new L64X128StarStarRandom(seed);\n+                case \"L64X256MixRandom\" ->      new L64X256MixRandom(seed);\n+                case \"L64X1024MixRandom\" ->     new L64X1024MixRandom(seed);\n+                case \"L128X128MixRandom\" ->     new L128X128MixRandom(seed);\n+                case \"L128X256MixRandom\" ->     new L128X256MixRandom(seed);\n+                case \"L128X1024MixRandom\" ->    new L128X1024MixRandom(seed);\n+                case \"Xoroshiro128PlusPlus\" ->  new Xoroshiro128PlusPlus(seed);\n+                case \"Xoshiro256PlusPlus\" ->    new Xoshiro256PlusPlus(seed);\n+                default -> throw new InternalError(\"should not happen\");\n+            };\n+        }\n+\n+        private RandomGenerator create(byte[] seed) {\n+            if (isInstantiable() && (flags & BYTE_ARRAY_SEED) == 0) {\n+                throw new UnsupportedOperationException(\"Random algorithm \"\n+                        + name + \" does not support a byte[] seed\");\n+            }\n+            return switch (name) {\n+                case \"SecureRandom\" ->          new SecureRandom(seed);\n+                case \"L32X64MixRandom\" ->       new L32X64MixRandom(seed);\n+                case \"L64X128MixRandom\" ->      new L64X128MixRandom(seed);\n+                case \"L64X128StarStarRandom\" -> new L64X128StarStarRandom(seed);\n+                case \"L64X256MixRandom\" ->      new L64X256MixRandom(seed);\n+                case \"L64X1024MixRandom\" ->     new L64X1024MixRandom(seed);\n+                case \"L128X128MixRandom\" ->     new L128X128MixRandom(seed);\n+                case \"L128X256MixRandom\" ->     new L128X256MixRandom(seed);\n+                case \"L128X1024MixRandom\" ->    new L128X1024MixRandom(seed);\n+                case \"Xoroshiro128PlusPlus\" ->  new Xoroshiro128PlusPlus(seed);\n+                case \"Xoshiro256PlusPlus\" ->    new Xoshiro256PlusPlus(seed);\n+                default -> throw new InternalError(\"should not happen\");\n+            };\n+        }\n+\n+        private boolean isStochastic() {\n+            return (flags & STOCHASTIC) != 0;\n+        }\n+\n+        private boolean isHardware() {\n+            return (flags & HARDWARE) != 0;\n+        }\n+\n+        private boolean isInstantiable() {\n+            return (flags & INSTANTIABLE) != 0;\n+        }\n+\n+        private boolean isDeprecated() {\n+            return (flags & DEPRECATED) != 0;\n+        }\n+\n+        private BigInteger period() {\n+            \/*\n+             * 0                if i = j = k = 0\n+             * (2^i - j) 2^k    otherwise\n+             *\/\n+            return i == 0 && j == 0 && k == 0\n+                    ? BigInteger.ZERO\n+                    : BigInteger.ONE.shiftLeft(i).subtract(BigInteger.valueOf(j)).shiftLeft(k);\n+        }\n+\n+        private int stateBits() {\n+            return i == 0 && k == 0 ? Integer.MAX_VALUE : i + k;\n@@ -155,3 +302,1 @@\n-     * Private constructor.\n-     *\n-     * @param provider  Provider class to wrap.\n+     * Random generator properties.\n@@ -159,3 +304,1 @@\n-    private RandomGeneratorFactory(Provider<? extends RandomGenerator> provider) {\n-        this.provider = provider;\n-    }\n+    private final RandomGeneratorProperties properties;\n@@ -164,1 +307,1 @@\n-     * Returns the factory map, lazily constructing map on first call.\n+     * Private constructor.\n@@ -166,1 +309,1 @@\n-     * @return Map of RandomGeneratorFactory classes.\n+     * @param properties Random generator properties.\n@@ -168,2 +311,2 @@\n-    private static Map<String, Provider<? extends RandomGenerator>> getFactoryMap() {\n-        return FactoryMapHolder.FACTORY_MAP;\n+    private RandomGeneratorFactory(RandomGeneratorProperties properties) {\n+        this.properties = properties;\n@@ -173,1 +316,1 @@\n-     * Return the annotation for the specified provider.\n+     * Returns the factory map, lazily constructing the map on first call.\n@@ -175,1 +318,1 @@\n-     * @return RandomGeneratorProperties annotation for the specified provider.\n+     * @return Map of random generator classes.\n@@ -177,11 +320,2 @@\n-     private RandomGeneratorProperties getProperties() {\n-        if (properties == null) {\n-            synchronized (provider) {\n-                if (properties == null) {\n-                    properties = provider.type().getDeclaredAnnotation(RandomGeneratorProperties.class);\n-                    Objects.requireNonNull(properties, provider.type() + \" missing annotation\");\n-                }\n-            }\n-        }\n-\n-        return properties;\n+    private static Map<String, RandomGeneratorProperties> getFactoryMap() {\n+        return RandomGeneratorProperties.FACTORY_MAP;\n@@ -191,1 +325,1 @@\n-     * Return true if the provider is a subclass of the category.\n+     * Return true if the random generator class is a subclass of the category.\n@@ -195,1 +329,1 @@\n-     * @return true if the provider is a subclass of the category.\n+     * @return true if the random generator class is a subclass of the category.\n@@ -198,1 +332,1 @@\n-        return isSubclass(category, provider);\n+        return isSubclass(category, properties.rgClass());\n@@ -202,1 +336,1 @@\n-     * Return true if the provider is a subclass of the category.\n+     * Return true if rgClass is a subclass of the category.\n@@ -205,1 +339,1 @@\n-     * @param provider Provider that is being filtered.\n+     * @param rgClass Class that is being filtered.\n@@ -207,1 +341,1 @@\n-     * @return true if the provider is a subclass of the category.\n+     * @return true if rgClass is a subclass of the category.\n@@ -210,2 +344,2 @@\n-                                      Provider<? extends RandomGenerator> provider) {\n-        return provider != null && category.isAssignableFrom(provider.type());\n+            Class<? extends RandomGenerator> rgClass) {\n+        return rgClass != null && category.isAssignableFrom(rgClass);\n@@ -215,4 +349,1 @@\n-     * Returns the provider matching name and category.\n-     *\n-     * @param name      Name of RandomGenerator\n-     * @param category  Interface category, sub-interface of {@link RandomGenerator}.\n+     * Returns a RandomGeneratorProperties instance matching name and category.\n@@ -220,10 +351,11 @@\n-     * @return A provider matching name and category.\n-     *\n-     * @throws IllegalArgumentException if provider is not a subclass of category.\n-     *\/\n-    private static Provider<? extends RandomGenerator> findProvider(String name,\n-                                                                    Class<? extends RandomGenerator> category)\n-            throws IllegalArgumentException {\n-        Map<String, Provider<? extends RandomGenerator>> fm = getFactoryMap();\n-        Provider<? extends RandomGenerator> provider = fm.get(name);\n-        if (provider == null) {\n+     * @param name     Name of RandomGenerator\n+     * @param category Interface category, sub-interface of {@link RandomGenerator}.\n+     * @return A RandomGeneratorProperties instance matching name and category.\n+     * @throws IllegalArgumentException if the resulting type is not a subclass of category.\n+     *\/\n+    private static RandomGeneratorProperties findClass(String name,\n+            Class<? extends RandomGenerator> category) throws IllegalArgumentException {\n+        RandomGeneratorProperties properties = name != null\n+                ? getFactoryMap().get(name)\n+                : null;\n+        if (properties == null || !properties.isInstantiable()) {\n@@ -231,3 +363,4 @@\n-                                                name +\n-                                                \"\\\" is available\");\n-        } else if (!isSubclass(category, provider)) {\n+                    name +\n+                    \"\\\" is available\");\n+        }\n+        if (!isSubclass(category, properties.rgClass())) {\n@@ -235,4 +368,4 @@\n-                                                name +\n-                                                \"\\\" is not implemented with the interface \\\"\" +\n-                                                category.getSimpleName() +\n-                                                \"\\\"\");\n+                    name +\n+                    \"\\\" is not implemented with the interface \\\"\" +\n+                    category.getSimpleName() +\n+                    \"\\\"\");\n@@ -240,1 +373,1 @@\n-        return provider;\n+        return properties;\n@@ -258,2 +391,2 @@\n-        T uncheckedRandomGenerator = (T)findProvider(name, category).get();\n-        return uncheckedRandomGenerator;\n+        T instance = (T) findClass(name, category).create();\n+        return instance;\n@@ -276,62 +409,1 @@\n-        Provider<? extends RandomGenerator> uncheckedProvider = findProvider(name, category);\n-        return new RandomGeneratorFactory<>(uncheckedProvider);\n-    }\n-\n-    \/**\n-     * Fetch the required constructors for class of random number algorithm.\n-     *\n-     * @param randomGeneratorClass class of random number algorithm (provider)\n-     *\/\n-    private void getConstructors(Class<? extends RandomGenerator> randomGeneratorClass) {\n-        if (ctor == null) {\n-            synchronized (provider) {\n-                if (ctor == null) {\n-                    PrivilegedExceptionAction<Constructor<?>[]> ctorAction = randomGeneratorClass::getConstructors;\n-                    try {\n-                        @SuppressWarnings(\"removal\")\n-                        Constructor<?>[] ctors = AccessController.doPrivileged(ctorAction);\n-\n-                        Constructor<T> tmpCtor = null;\n-                        Constructor<T> tmpCtorLong = null;\n-                        Constructor<T> tmpCtorBytes = null;\n-\n-\n-                        for (Constructor<?> ctorGeneric : ctors) {\n-                            @SuppressWarnings(\"unchecked\")\n-                            Constructor<T> ctorSpecific = (Constructor<T>) ctorGeneric;\n-                            final Class<?>[] parameterTypes = ctorSpecific.getParameterTypes();\n-\n-                            if (parameterTypes.length == 0) {\n-                                tmpCtor = ctorSpecific;\n-                            } else if (parameterTypes.length == 1) {\n-                                Class<?> argType = parameterTypes[0];\n-\n-                                if (argType == long.class) {\n-                                    tmpCtorLong = ctorSpecific;\n-                                } else if (argType == byte[].class) {\n-                                    tmpCtorBytes = ctorSpecific;\n-                                }\n-                            }\n-                        }\n-\n-                        if (tmpCtor == null) {\n-                            throw new IllegalStateException(\"Random algorithm \" + name() + \" is missing a default constructor\");\n-                        }\n-\n-                        \/\/ Store specialized constructors first, guarded by ctor\n-                        ctorBytes = tmpCtorBytes;\n-                        ctorLong = tmpCtorLong;\n-                        ctor = tmpCtor;\n-                    } catch (PrivilegedActionException ex) {\n-                        \/\/ Do nothing\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Ensure all the required constructors are fetched.\n-     *\/\n-    private void ensureConstructors() {\n-        getConstructors(provider.type());\n+        return new RandomGeneratorFactory<>(findClass(name, category));\n@@ -358,1 +430,1 @@\n-                (RandomGeneratorFactory<T>)factoryOf(name, RandomGenerator.class);\n+                (RandomGeneratorFactory<T>) factoryOf(name, RandomGenerator.class);\n@@ -372,1 +444,1 @@\n-        return factoryOf(\"L32X64MixRandom\", RandomGenerator.class);\n+        return factoryOf(DEFAULT_ALGORITHM, RandomGenerator.class);\n@@ -377,1 +449,1 @@\n-     * <p>\n+     *\n@@ -383,6 +455,4 @@\n-        Map<String, Provider<? extends RandomGenerator>> fm = getFactoryMap();\n-        return fm.values()\n-                 .stream()\n-                 .filter(p -> !p.type().isAnnotationPresent(Deprecated.class) &&\n-                              p.type().isAnnotationPresent(RandomGeneratorProperties.class))\n-                 .map(RandomGeneratorFactory::new);\n+        return getFactoryMap().values()\n+                .stream()\n+                .filter(p -> p.isInstantiable() && !p.isDeprecated())\n+                .map(RandomGeneratorFactory::new);\n@@ -398,1 +468,1 @@\n-        return provider.type().getSimpleName();\n+        return properties.name();\n@@ -408,1 +478,1 @@\n-        return getProperties().group();\n+        return properties.group();\n@@ -419,5 +489,1 @@\n-        RandomGeneratorProperties properties = getProperties();\n-        int i = properties.i();\n-        int k = properties.k();\n-\n-        return i == 0 && k == 0 ? Integer.MAX_VALUE : i + k;\n+        return properties.stateBits();\n@@ -432,1 +498,1 @@\n-        return getProperties().equidistribution();\n+        return properties.equidistribution();\n@@ -443,10 +509,1 @@\n-        RandomGeneratorProperties properties = getProperties();\n-        int i = properties.i();\n-        int j = properties.j();\n-        int k = properties.k();\n-\n-        if (i == 0 && j == 0 && k == 0) {\n-            return BigInteger.ZERO;\n-        } else {\n-            return BigInteger.ONE.shiftLeft(i).subtract(BigInteger.valueOf(j)).shiftLeft(k);\n-        }\n+        return properties.period();\n@@ -463,1 +520,1 @@\n-        return !getProperties().isStochastic();\n+        return !properties.isStochastic();\n@@ -473,1 +530,1 @@\n-        return getProperties().isStochastic();\n+        return properties.isStochastic();\n@@ -483,1 +540,1 @@\n-        return getProperties().isHardware();\n+        return properties.isHardware();\n@@ -550,1 +607,1 @@\n-        return provider.type().isAnnotationPresent(Deprecated.class);\n+        return properties.isDeprecated();\n@@ -554,1 +611,1 @@\n-     * Create an instance of {@link RandomGenerator} based on\n+     * Create an instance of {@link RandomGenerator} based on the\n@@ -558,1 +615,0 @@\n-     *\n@@ -561,7 +617,3 @@\n-        try {\n-            ensureConstructors();\n-            return ctor.newInstance();\n-        } catch (Exception ex) {\n-            \/\/ Should never happen.\n-            throw new IllegalStateException(\"Random algorithm \" + name() + \" is missing a default constructor\", ex);\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        T instance = (T) properties.create();\n+        return instance;\n@@ -571,4 +623,5 @@\n-     * Create an instance of {@link RandomGenerator} based on\n-     * <a href=\"package-summary.html#algorithms\">algorithm<\/a> chosen\n-     * providing a starting long seed. If long seed is not supported by an\n-     * algorithm then the no argument form of create is used.\n+     * Create an instance of {@link RandomGenerator} based on the\n+     * <a href=\"package-summary.html#algorithms\">algorithm<\/a> chosen,\n+     * and providing a starting long seed.\n+     * If a long seed is not supported by the algorithm,\n+     * an UnsupportedOperationException is thrown.\n@@ -579,0 +632,2 @@\n+     *\n+     * @throws UnsupportedOperationException if a long seed in not supported.\n@@ -581,6 +636,3 @@\n-        try {\n-            ensureConstructors();\n-            return ctorLong.newInstance(seed);\n-        } catch (Exception ex) {\n-            return create();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        T instance = (T) properties.create(seed);\n+        return instance;\n@@ -590,5 +642,5 @@\n-     * Create an instance of {@link RandomGenerator} based on\n-     * <a href=\"package-summary.html#algorithms\">algorithm<\/a> chosen\n-     * providing a starting byte[] seed. If byte[] seed is not supported by an\n-     * <a href=\"package-summary.html#algorithms\">algorithm<\/a> then the no\n-     * argument form of create is used.\n+     * Create an instance of {@link RandomGenerator} based on the\n+     * <a href=\"package-summary.html#algorithms\">algorithm<\/a> chosen,\n+     * and providing a starting byte[] seed.\n+     * If a byte[] seed is not supported by the algorithm,\n+     * an UnsupportedOperationException is thrown.\n@@ -600,0 +652,1 @@\n+     * @throws UnsupportedOperationException if a byte[] seed in not supported.\n@@ -604,6 +657,3 @@\n-        try {\n-            ensureConstructors();\n-            return ctorBytes.newInstance(seed);\n-        } catch (Exception ex) {\n-            return create();\n-        }\n+        @SuppressWarnings(\"unchecked\")\n+        T instance = (T) properties.create(seed);\n+        return instance;\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGeneratorFactory.java","additions":269,"deletions":219,"binary":false,"changes":488,"status":"modified"},{"patch":"@@ -84,2 +84,2 @@\n- * algorithm to the static method {@link RandomGenerator#of}, in which case the\n- * no-arguments constructor for that implementation is used:\n+ * algorithm to the static method {@link RandomGenerator#of}, in which case no\n+ * seed is specified by the caller:\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L128X1024MixRandom\",\n-        group = \"LXM\",\n-        i = 1024, j = 1, k = 128,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L128X1024MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L128X128MixRandom\",\n-        group = \"LXM\",\n-        i = 128, j = 1, k = 128,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L128X128MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L128X256MixRandom\",\n-        group = \"LXM\",\n-        i = 256, j = 1, k = 128,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L128X256MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L32X64MixRandom\",\n-        group = \"LXM\",\n-        i = 64, j = 1, k = 32,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L32X64MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L64X1024MixRandom\",\n-        group = \"LXM\",\n-        i = 1024, j = 1, k = 64,\n-        equidistribution = 16\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L64X1024MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L64X128MixRandom\",\n-        group = \"LXM\",\n-        i = 128, j = 1, k = 64,\n-        equidistribution = 2\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L64X128MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L64X128StarStarRandom\",\n-        group = \"LXM\",\n-        i = 128, j = 1, k = 64,\n-        equidistribution = 2\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L64X128StarStarRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -78,6 +77,0 @@\n-@RandomGeneratorProperties(\n-        name = \"L64X256MixRandom\",\n-        group = \"LXM\",\n-        i = 256, j = 1, k = 64,\n-        equidistribution = 4\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/L64X256MixRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -75,6 +74,0 @@\n-@RandomGeneratorProperties(\n-        name = \"Xoroshiro128PlusPlus\",\n-        group = \"Xoroshiro\",\n-        i = 128, j = 1, k = 0,\n-        equidistribution = 1\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/Xoroshiro128PlusPlus.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n@@ -90,6 +89,0 @@\n-@RandomGeneratorProperties(\n-        name = \"Xoshiro256PlusPlus\",\n-        group = \"Xoshiro\",\n-        i = 256, j = 1, k = 0,\n-        equidistribution = 3\n-)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/random\/Xoshiro256PlusPlus.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.lang.annotation.*;\n-import java.math.BigInteger;\n@@ -31,1 +29,0 @@\n-import java.util.Random;\n@@ -56,43 +53,0 @@\n-    \/**\n-     * Annotation providing RandomGenerator properties.\n-     *\/\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Target(ElementType.TYPE)\n-    public @interface RandomGeneratorProperties {\n-        \/**\n-         * Name of algorithm.\n-         *\/\n-        String name();\n-\n-        \/**\n-         * Category of algorithm.\n-         *\/\n-        String group() default \"Legacy\";\n-\n-        \/**\n-         * Algorithm period defined as:\n-         *\n-         * BigInteger.ONE.shiftLeft(i)\n-         *               .subtract(j)\n-         *               .shiftLeft(k)\n-         *\/\n-        int i() default 0;\n-        int j() default 0;\n-        int k() default 0;\n-\n-        \/**\n-         * The equidistribution of the algorithm.\n-         *\/\n-        int equidistribution() default Integer.MAX_VALUE;\n-\n-        \/**\n-         * Is the algorithm based on entropy (true random.)\n-         *\/\n-        boolean isStochastic() default false;\n-\n-        \/**\n-         * Is the algorithm assisted by hardware (fast true random.)\n-         *\/\n-        boolean isHardware() default false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":1,"deletions":47,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -422,15 +422,0 @@\n-    provides java.util.random.RandomGenerator with\n-        java.security.SecureRandom,\n-        java.util.Random,\n-        java.util.SplittableRandom,\n-        jdk.internal.random.L32X64MixRandom,\n-        jdk.internal.random.L64X128MixRandom,\n-        jdk.internal.random.L64X128StarStarRandom,\n-        jdk.internal.random.L64X256MixRandom,\n-        jdk.internal.random.L64X1024MixRandom,\n-        jdk.internal.random.L128X128MixRandom,\n-        jdk.internal.random.L128X256MixRandom,\n-        jdk.internal.random.L128X1024MixRandom,\n-        jdk.internal.random.Xoroshiro128PlusPlus,\n-        jdk.internal.random.Xoshiro256PlusPlus;\n-\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,2 +174,19 @@\n-        coverRandomGenerator(factory.create(12345L));\n-        coverRandomGenerator(factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8}));\n+        RandomGenerator rng;\n+\n+        rng = null;\n+        try {\n+            rng = factory.create(12345L);\n+        } catch (UnsupportedOperationException ignore) {\n+        }\n+        if (rng != null) {\n+            coverRandomGenerator(rng);\n+        }\n+\n+        rng = null;\n+        try {\n+            rng = factory.create(new byte[] {1, 2, 3, 4, 5, 6, 7, 8});\n+        } catch (UnsupportedOperationException ignore) {\n+        }\n+        if (rng != null) {\n+            coverRandomGenerator(rng);\n+        }\n","filename":"test\/jdk\/java\/util\/Random\/RandomTestCoverage.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}