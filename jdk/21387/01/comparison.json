{"files":[{"patch":"@@ -55,1 +55,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -163,5 +162,0 @@\n-  \/\/ Debug on cmd (only makes sense with JVMTI since the agentlib needs it).\n-#if INCLUDE_JVMTI\n-  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<DebugOnCmdStartDCmd>(full_export, true, true));\n-#endif \/\/ INCLUDE_JVMTI\n-\n@@ -1061,39 +1055,0 @@\n-#if INCLUDE_JVMTI\n-extern \"C\" typedef char const* (JNICALL *debugInit_startDebuggingViaCommandPtr)(JNIEnv* env, jthread thread, char const** transport_name,\n-                                                                                char const** address, jboolean* first_start);\n-static debugInit_startDebuggingViaCommandPtr dvc_start_ptr = nullptr;\n-\n-void DebugOnCmdStartDCmd::execute(DCmdSource source, TRAPS) {\n-  char const* transport = nullptr;\n-  char const* addr = nullptr;\n-  jboolean is_first_start = JNI_FALSE;\n-  JavaThread* thread = THREAD;\n-  jthread jt = JNIHandles::make_local(thread->threadObj());\n-  ThreadToNativeFromVM ttn(thread);\n-  const char *error = \"Could not find jdwp agent.\";\n-\n-  if (!dvc_start_ptr) {\n-    JvmtiAgentList::Iterator it = JvmtiAgentList::agents();\n-    while (it.has_next()) {\n-      JvmtiAgent* agent = it.next();\n-      if ((strcmp(\"jdwp\", agent->name()) == 0) && (dvc_start_ptr == nullptr)) {\n-        char const* func = \"debugInit_startDebuggingViaCommand\";\n-        dvc_start_ptr = (debugInit_startDebuggingViaCommandPtr) os::find_agent_function(agent, false, &func, 1);\n-      }\n-    }\n-  }\n-\n-  if (dvc_start_ptr) {\n-    error = dvc_start_ptr(thread->jni_environment(), jt, &transport, &addr, &is_first_start);\n-  }\n-\n-  if (error != nullptr) {\n-    output()->print_cr(\"Debugging has not been started: %s\", error);\n-  } else {\n-    output()->print_cr(is_first_start ? \"Debugging has been started.\" : \"Debugging is already active.\");\n-    output()->print_cr(\"Transport : %s\", transport ? transport : \"#unknown\");\n-    output()->print_cr(\"Address : %s\", addr ? addr : \"#unknown\");\n-  }\n-}\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -889,21 +889,0 @@\n-#if INCLUDE_JVMTI\n-class DebugOnCmdStartDCmd : public DCmd {\n-public:\n-  DebugOnCmdStartDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n-  static const char* name() {\n-    return \"VM.start_java_debugging\";\n-  }\n-  static const char* description() {\n-    return \"Starts up the Java debugging if the jdwp agentlib was enabled with the option onjcmd=y.\";\n-  }\n-  static const char* impact() {\n-    return \"High: Switches the VM into Java debug mode.\";\n-  }\n-  static const JavaPermission permission() {\n-    JavaPermission p = { \"java.lang.management.ManagementPermission\", \"control\", nullptr };\n-    return p;\n-  }\n-  virtual void execute(DCmdSource source, TRAPS);\n-};\n-#endif \/\/ INCLUDE_JVMTI\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -84,3 +84,0 @@\n-static jboolean allowStartViaJcmd = JNI_FALSE;  \/* if true we allow the debugging to be started via a jcmd *\/\n-static jboolean startedViaJcmd = JNI_FALSE;     \/* if false, we have not yet started debugging via a jcmd *\/\n-\n@@ -986,1 +983,0 @@\n-    jboolean onJcmd = JNI_FALSE;\n@@ -1234,4 +1230,0 @@\n-        } else if (strcmp(buf, \"onjcmd\") == 0) {\n-            if (!get_boolean(&str, &onJcmd)) {\n-                goto syntax_error;\n-            }\n@@ -1288,14 +1280,0 @@\n-    if (onJcmd) {\n-        if (launchOnInit != NULL) {\n-            errmsg = \"Cannot combine onjcmd and launch suboptions\";\n-            goto bad_option_with_errmsg;\n-        }\n-        if (!isServer) {\n-            errmsg = \"Can only use onjcmd with server=y\";\n-            goto bad_option_with_errmsg;\n-        }\n-        suspendOnInit = JNI_FALSE;\n-        initOnStartup = JNI_FALSE;\n-        allowStartViaJcmd = JNI_TRUE;\n-    }\n-\n@@ -1370,42 +1348,0 @@\n-\n-static jboolean getFirstTransport(void *item, void *arg)\n-{\n-    TransportSpec** store = arg;\n-    *store = item;\n-\n-    return JNI_FALSE; \/* Want the first *\/\n-}\n-\n-\/* Call to start up debugging. *\/\n-JNIEXPORT char const* JNICALL debugInit_startDebuggingViaCommand(JNIEnv* env, jthread thread, char const** transport_name,\n-                                                                char const** address, jboolean* first_start) {\n-    jboolean is_first_start = JNI_FALSE;\n-    TransportSpec* spec = NULL;\n-\n-    if (!vmInitialized) {\n-        return \"Not yet initialized. Try again later.\";\n-    }\n-\n-    if (!allowStartViaJcmd) {\n-        return \"Starting debugging via jcmd was not enabled via the onjcmd option of the jdwp agent.\";\n-    }\n-\n-    if (!startedViaJcmd) {\n-        startedViaJcmd = JNI_TRUE;\n-        is_first_start = JNI_TRUE;\n-        initialize(env, thread, EI_VM_INIT, NULL);\n-    }\n-\n-    bagEnumerateOver(transports, getFirstTransport, &spec);\n-\n-    if ((spec != NULL) && (transport_name != NULL) && (address != NULL)) {\n-        *transport_name = spec->name;\n-        *address = spec->address;\n-    }\n-\n-    if (first_start != NULL) {\n-        *first_start = is_first_start;\n-    }\n-\n-    return NULL;\n-}\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/debugInit.c","additions":0,"deletions":64,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1,109 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8214892\n- * @summary Test that the onjcmd option of the jdwp agent works.\n- *\n- * @author Ralf Schmelter\n- *\n- * @library \/test\/lib\n- * @run compile --add-exports java.base\/jdk.internal.vm=ALL-UNNAMED -g OnJcmdTest.java\n- * @run main\/othervm --add-exports java.base\/jdk.internal.vm=ALL-UNNAMED -agentlib:jdwp=transport=dt_socket,address=localhost:0,onjcmd=y,server=y OnJcmdTest\n- *\/\n-\n-import java.lang.reflect.Method;\n-import java.util.Properties;\n-\n-import jdk.internal.vm.VMSupport;\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class OnJcmdTest {\n-\n-    private static String getListenerAddress() throws Exception {\n-        Properties props = VMSupport.getAgentProperties();\n-        return props.getProperty(\"sun.jdwp.listenerAddress\", null);\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        \/\/ First check if we get the expected errors.\n-        OutputAnalyzer output = ProcessTools.executeTestJava(\n-                \"-agentlib:jdwp=transport=dt_socket,address=any,onjcmd=y\");\n-        output.shouldContain(\"Can only use onjcmd with server=y\");\n-        output.shouldHaveExitValue(1);\n-\n-        output = ProcessTools.executeTestJava(\n-                \"-agentlib:jdwp=transport=dt_socket,address=any,onjcmd=y,onthrow=a,launch=a\");\n-        output.shouldContain(\"Cannot combine onjcmd and launch suboptions\");\n-        output.shouldHaveExitValue(1);\n-\n-        \/\/ Make sure debugging is not yet started.\n-        String prop = getListenerAddress();\n-\n-        if (prop != null) {\n-            throw new RuntimeException(\"Listener address was set to \" + prop);\n-        }\n-\n-        \/\/ Now start it (test that it is OK to do this more than once).\n-        for (int i = 0; i < 3; ++i) {\n-            String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n-            output = ProcessTools.executeProcess(jcmd,\n-                    Long.toString(ProcessTools.getProcessId()),\n-                    \"VM.start_java_debugging\");\n-\n-            String exp_str = i == 0 ? \"Debugging has been started.\" :\n-                                      \"Debugging is already active.\";\n-            output.shouldContain(exp_str);\n-            output.shouldContain(\"Transport : dt_socket\");\n-            output.shouldHaveExitValue(0);\n-        }\n-\n-        \/\/ Now the property should be set, as the jdwp agent waits for a\n-        \/\/ connection.\n-        long t1 = System.currentTimeMillis();\n-        long t2 = t1;\n-\n-        while(t2 - t1 < 4000) {\n-            prop = getListenerAddress();\n-\n-            if (prop != null) {\n-                if (prop.equals(\"localhost:0\")) {\n-                    throw new RuntimeException(\"Port was not expanded\");\n-                } else if (!prop.startsWith(\"dt_socket:\")) {\n-                    throw new RuntimeException(\"Invalid transport prop \" + prop);\n-                }\n-\n-                return;\n-            }\n-\n-            Thread.sleep(50);\n-            t2 = System.currentTimeMillis();\n-        }\n-\n-        throw new RuntimeException(\"Debugging backend didn't start\");\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/jdi\/OnJcmdTest.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"deleted"},{"patch":"@@ -68,1 +68,1 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -agentlib:jdwp=transport=dt_socket,server=y,address=any,onjcmd=y\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0\n@@ -125,1 +125,1 @@\n-            Events.assertField(e, \"options\").equal(\"transport=dt_socket,server=y,address=any,onjcmd=y\");\n+            Events.assertField(e, \"options\").equal(\"transport=dt_socket,server=y,suspend=n,address=0\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestAgentEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}