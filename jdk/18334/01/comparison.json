{"files":[{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 7075105\n-  @summary WIN: Provide a way to format HTML on drop\n-  @author Denis Fokin area=datatransfer\n-  @run applet\/manual=yesno ManualHTMLDataFlavorTest.html\n-  -->\n-<head>\n-<title>ManualHTMLDataFlavorTest<\/title>\n-<\/head>\n-<body>\n-\n-<h1>ManualHTMLDataFlavorTest<br>Bug ID: 7075105<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"ManualHTMLDataFlavorTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/datatransfer\/HTMLDataFlavors\/ManualHTMLDataFlavorTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-  test\n+  @test\n@@ -28,2 +28,2 @@\n-  @author Denis Fokin: area=datatransfer\n-  @run applet\/manual=yesno ManualHTMLDataFlavorTest\n+  @library \/java\/awt\/regtesthelpers\n+  @run main\/manual ManualHTMLDataFlavorTest\n@@ -32,2 +32,5 @@\n-import java.applet.Applet;\n-import java.awt.*;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Panel;\n@@ -37,1 +40,6 @@\n-import java.awt.dnd.*;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n@@ -40,1 +48,1 @@\n-public class ManualHTMLDataFlavorTest extends Applet {\n+public class ManualHTMLDataFlavorTest {\n@@ -42,1 +50,1 @@\n-    class DropPane extends Panel implements DropTargetListener {\n+    static class DropPane extends Panel implements DropTargetListener {\n@@ -52,1 +60,1 @@\n-            return new Dimension(200,200);\n+            return new Dimension(400, 400);\n@@ -76,1 +84,1 @@\n-                Sysout.println(\"DataFlavor.allHtmlFlavor is not present in the system clipboard\");\n+                ManualHTMLDataFlavorTest.log(\"DataFlavor.allHtmlFlavor is not present in the system clipboard\");\n@@ -80,1 +88,1 @@\n-                Sysout.println(\"DataFlavor.fragmentHtmlFlavor is not present in the system clipboard\");\n+                ManualHTMLDataFlavorTest.log(\"DataFlavor.fragmentHtmlFlavor is not present in the system clipboard\");\n@@ -84,1 +92,1 @@\n-                Sysout.println(\"DataFlavor.selectionHtmlFlavor is not present in the system clipboard\");\n+                ManualHTMLDataFlavorTest.log(\"DataFlavor.selectionHtmlFlavor is not present in the system clipboard\");\n@@ -93,6 +101,7 @@\n-                Sysout.println(\"ALL:\");\n-                Sysout.println(t.getTransferData(DataFlavor.allHtmlFlavor).toString());\n-                Sysout.println(\"FRAGMENT:\");\n-                Sysout.println(t.getTransferData(DataFlavor.fragmentHtmlFlavor).toString());\n-                Sysout.println(\"SELECTION:\");\n-                Sysout.println(t.getTransferData(DataFlavor.selectionHtmlFlavor).toString());\n+                ManualHTMLDataFlavorTest.log(\"ALL:\");\n+                ManualHTMLDataFlavorTest.log(t.getTransferData(DataFlavor.allHtmlFlavor).toString());\n+                t.getTransferData(DataFlavor.allHtmlFlavor).toString();\n+                ManualHTMLDataFlavorTest.log(\"FRAGMENT:\");\n+                ManualHTMLDataFlavorTest.log(t.getTransferData(DataFlavor.fragmentHtmlFlavor).toString());\n+                ManualHTMLDataFlavorTest.log(\"SELECTION:\");\n+                ManualHTMLDataFlavorTest.log(t.getTransferData(DataFlavor.selectionHtmlFlavor).toString());\n@@ -106,31 +115,30 @@\n-    public void init() {\n-\n-        String[] instructions =\n-            {\n-                \"1) The test contains a drop-aware panel with a red background\",\n-                \"2) Open some page in a browser, select some text\",\n-                \"   Drag and drop it on the red panel\",\n-                \"   IMPORTANT NOTE: the page should be stored locally.\",\n-                \"   otherwise for instance iexplore can prohibit drag and drop from\",\n-                \"   the browser to other applications because of\",\n-                \"   the protected mode restrictions.\",\n-                \"   On Mac OS X do NOT use Safari, it does not provide the needed DataFlavor\",\n-                \"3) Check the data in the output area of this dialog\",\n-                \"5) The output should not contain information that any of\",\n-                \"   flavors is not present in the system clipboard\",\n-                \"6) The output should contain data in three different formats\",\n-                \"   provided by the system clipboard\",\n-                \"    - Data after the \\\"ALL:\\\" marker should include the data\",\n-                \"      from the \\\"SELECTION:\\\" marker\",\n-                \"    - Data after the \\\"FRAGMENT\\\" marker should include the data\",\n-                \"      from the \\\"SELECTION:\\\" marker and may be some closing\",\n-                \"      tags could be added to the mark-up\",\n-                \"    - Data after the \\\"SELECTION:\\\" marker should correspond\",\n-                \"      to the data selected in the browser\",\n-                \"7) If the above requirements are met, the test is passed\"\n-            };\n-\n-        add(new DropPane());\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-        new ManualHTMLDataFlavorTest();\n+    static final String INSTRUCTIONS = \"\"\"\n+        1) The test contains a drop-aware panel with a red background,\n+        2) Open some page in a browser, select some text,\n+           Drag and drop it on the red panel,\n+           IMPORTANT NOTE: the page should be stored locally.,\n+           otherwise for instance iexplore can prohibit drag and drop from,\n+           the browser to other applications because of,\n+           the protected mode restrictions.,\n+           On Mac OS X do NOT use Safari, it does not provide the needed DataFlavor,\n+        3) Check the data in the output area of this window,\n+        5) The output should not contain information that any of,\n+           flavors is not present in the system clipboard,\n+        6) The output should contain data in three different formats,\n+           provided by the system clipboard,\n+            - Data after the \"ALL:\" marker should include the data,\n+              from the \"SELECTION:\" marker\",\n+            - Data after the \"FRAGMENT\" marker should include the data,\n+              from the \"SELECTION:\" marker and may be some closing,\n+              tags could be added to the mark-up,\n+            - Data after the \"SELECTION:\" marker should correspond,\n+              to the data selected in the browser,\n+        7) If the above requirements are met, the test is passed.\n+    \"\"\";\n+\n+   static Frame createDropWindow() {\n+        Frame frame = new Frame(\"Manual HTML DataFlavor Test\");\n+        frame.add(new DropPane());\n+        frame.setAlwaysOnTop(true);\n+        frame.pack();\n+        return frame;\n@@ -139,8 +147,14 @@\n-    public void start ()\n-    {\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-\n-    }\/\/ start()\n-\n+   static void log(String msg) {\n+       PassFailJFrame.log(msg);\n+   }\n+\n+   public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .rows(25)\n+            .columns(50)\n+            .testUI(ManualHTMLDataFlavorTest::createDropWindow)\n+            .logArea()\n+            .build()\n+            .awaitAndCheck();\n+   }\n@@ -148,144 +162,0 @@\n-\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n- chunk of code whose purpose is to make user\n- interaction uniform, and thereby make it simpler\n- to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n- for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n- WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n- with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n- as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n- This is part of the standard test machinery.  It provides a place for the\n- test instructions to be displayed, and a place for interactive messages\n- to the user to be displayed.\n- To have the test instructions displayed, see Sysout.\n- To have a message to the user be displayed, see Sysout.\n- Do not call anything in this dialog directly.\n- *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                                                     lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/datatransfer\/HTMLDataFlavors\/ManualHTMLDataFlavorTest.java","additions":72,"deletions":202,"binary":false,"changes":274,"status":"modified"}]}