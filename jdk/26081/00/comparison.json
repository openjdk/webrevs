{"files":[{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +35,0 @@\n-@State(Scope.Thread)\n@@ -39,1 +39,0 @@\n-    private static Signature signer;\n@@ -41,2 +40,53 @@\n-    @Param({\"64\", \"512\", \"2048\", \"16384\"})\n-    private static int messageLength;\n+    @State(Scope.Benchmark)\n+    public static class test01 {\n+        @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+        private int messageLength;\n+        @Param({\"secp256r1\", \"secp384r1\", \"secp521r1\"})\n+        private String algorithm;\n+    }\n+    @State(Scope.Benchmark)\n+    public static class test02 {\n+        @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+        private int messageLength;\n+        @Param({\"Ed25519\", \"Ed448\"})\n+        private String algorithm;\n+    }\n+    @State(Scope.Benchmark)\n+    public static class test03 {\n+        @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+        private int messageLength;\n+        @Param({\"SHA256withDSA\", \"SHA384withDSA\", \"SHA512withDSA\"})\n+        private String algorithm;\n+    }\n+    @State(Scope.Benchmark)\n+    public static class test04 {\n+        @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+        private int messageLength;\n+        @Param({\"SHA256withRSA\", \"SHA384withRSA\", \"SHA512withRSA\"})\n+        private String algorithm;\n+    }\n+    @State(Scope.Benchmark)\n+    public static class test05 {\n+        @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+        private int messageLength;\n+        @Param({\"SHA256\", \"SHA384\", \"SHA512\"})\n+        private String algorithm;\n+    }\n+\n+    @Benchmark\n+    public byte[] ECDSA(s1 state) throws Exception {\n+        state.signer.update(state.message);\n+        return state.signer.sign();\n+    }\n+\n+    @Benchmark\n+    public byte[] EdDSA(s2 state) throws Exception {\n+        state.signer.update(state.message);\n+        return state.signer.sign();\n+    }\n+\n+    @Benchmark\n+    public byte[] DSA(s3 state) throws Exception {\n+        state.signer.update(state.message);\n+        return state.signer.sign();\n+    }\n@@ -44,2 +94,5 @@\n-    @Param({\"secp256r1\", \"secp384r1\", \"secp521r1\"})\n-    private String algorithm;\n+    @Benchmark\n+    public byte[] RSA(s4 state) throws Exception {\n+        state.signer.update(state.message);\n+        return state.signer.sign();\n+    }\n@@ -47,1 +100,5 @@\n-    private static byte[] message;\n+    @Benchmark\n+    public byte[] RSASSAPSS(s5 state) throws Exception {\n+        state.signer.update(state.message);\n+        return state.signer.sign();\n+    }\n@@ -49,4 +106,4 @@\n-    @Setup\n-    public void setup() throws Exception {\n-        message = new byte[messageLength];\n-        (new Random(System.nanoTime())).nextBytes(message);\n+    @State(Scope.Thread)\n+    public static class s1 {\n+        private Signature signer;\n+        private byte[] message;\n@@ -54,6 +111,4 @@\n-        String signName = switch (algorithm) {\n-            case \"secp256r1\" -> \"SHA256withECDSA\";\n-            case \"secp384r1\" -> \"SHA384withECDSA\";\n-            case \"secp521r1\" -> \"SHA512withECDSA\";\n-            default -> throw new RuntimeException();\n-        };\n+        @Setup\n+        public void setup(test01 test) throws Exception {\n+            message = new byte[test.messageLength];\n+            (new Random(System.nanoTime())).nextBytes(message);\n@@ -61,5 +116,6 @@\n-        AlgorithmParameters params =\n-                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n-        params.init(new ECGenParameterSpec(algorithm));\n-        ECGenParameterSpec ecParams =\n-                params.getParameterSpec(ECGenParameterSpec.class);\n+            String signName = switch (test.algorithm) {\n+                case \"secp256r1\" -> \"SHA256withECDSA\";\n+                case \"secp384r1\" -> \"SHA384withECDSA\";\n+                case \"secp521r1\" -> \"SHA512withECDSA\";\n+                default -> throw new RuntimeException();\n+            };\n@@ -67,4 +123,5 @@\n-        KeyPairGenerator kpg =\n-                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n-        kpg.initialize(ecParams);\n-        KeyPair kp = kpg.generateKeyPair();\n+            AlgorithmParameters params =\n+                    AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+            params.init(new ECGenParameterSpec(test.algorithm));\n+            ECGenParameterSpec ecParams =\n+                    params.getParameterSpec(ECGenParameterSpec.class);\n@@ -72,3 +129,4 @@\n-        signer = Signature.getInstance(signName, \"SunEC\");\n-        signer.initSign(kp.getPrivate());\n-    }\n+            KeyPairGenerator kpg =\n+                    KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n+            kpg.initialize(ecParams);\n+            KeyPair kp = kpg.generateKeyPair();\n@@ -76,4 +134,3 @@\n-    @Benchmark\n-    public byte[] sign() throws SignatureException {\n-        signer.update(message);\n-        return signer.sign();\n+            signer = Signature.getInstance(signName, \"SunEC\");\n+            signer.initSign(kp.getPrivate());\n+        }\n@@ -82,3 +139,4 @@\n-    public static class EdDSA extends Signatures {\n-        @Param({\"Ed25519\", \"Ed448\"})\n-        private String algorithm;\n+    @State(Scope.Thread)\n+    public static class s2 {\n+        private Signature signer;\n+        private byte[] message;\n@@ -87,2 +145,2 @@\n-        public void setup() throws Exception {\n-            message = new byte[messageLength];\n+        public void setup(test02 test) throws Exception {\n+            message = new byte[test.messageLength];\n@@ -92,2 +150,2 @@\n-                    KeyPairGenerator.getInstance(algorithm, \"SunEC\");\n-            NamedParameterSpec spec = new NamedParameterSpec(algorithm);\n+                    KeyPairGenerator.getInstance(test.algorithm, \"SunEC\");\n+            NamedParameterSpec spec = new NamedParameterSpec(test.algorithm);\n@@ -97,1 +155,1 @@\n-            signer = Signature.getInstance(algorithm, \"SunEC\");\n+            signer = Signature.getInstance(test.algorithm, \"SunEC\");\n@@ -102,3 +160,4 @@\n-    public static class DSA extends Signatures {\n-        @Param({\"SHA256withDSA\", \"SHA384withDSA\", \"SHA512withDSA\"})\n-        private String algorithm;\n+    @State(Scope.Thread)\n+    public static class s3 {\n+        private Signature signer;\n+        private byte[] message;\n@@ -107,2 +166,2 @@\n-        public void setup() throws Exception {\n-            message = new byte[messageLength];\n+        public void setup(test03 test) throws Exception {\n+            message = new byte[test.messageLength];\n@@ -111,1 +170,1 @@\n-            int keyLength = switch (algorithm) {\n+            int keyLength = switch (test.algorithm) {\n@@ -122,1 +181,1 @@\n-            signer = Signature.getInstance(algorithm);\n+            signer = Signature.getInstance(test.algorithm);\n@@ -127,3 +186,4 @@\n-    public static class RSA extends Signatures {\n-        @Param({\"SHA256withRSA\", \"SHA384withRSA\", \"SHA512withRSA\"})\n-        private String algorithm;\n+    @State(Scope.Thread)\n+    public static class s4 {\n+        private Signature signer;\n+        private byte[] message;\n@@ -132,2 +192,2 @@\n-        public void setup() throws Exception {\n-            message = new byte[messageLength];\n+        public void setup(test04 test) throws Exception {\n+            message = new byte[test.messageLength];\n@@ -136,1 +196,1 @@\n-            int keyLength = switch (algorithm) {\n+            int keyLength = switch (test.algorithm) {\n@@ -147,1 +207,1 @@\n-            signer = Signature.getInstance(algorithm);\n+            signer = Signature.getInstance(test.algorithm);\n@@ -152,3 +212,4 @@\n-    public static class RSASSAPSS extends Signatures {\n-        @Param({\"SHA256\", \"SHA384\", \"SHA512\"})\n-        private String algorithm;\n+    @State(Scope.Thread)\n+    public static class s5 {\n+        private Signature signer;\n+        private byte[] message;\n@@ -157,2 +218,2 @@\n-        public void setup() throws Exception {\n-            message = new byte[messageLength];\n+        public void setup(test05 test) throws Exception {\n+            message = new byte[test.messageLength];\n@@ -161,1 +222,1 @@\n-            int keyLength = switch (algorithm) {\n+            int keyLength = switch (test.algorithm) {\n@@ -168,1 +229,1 @@\n-            PSSParameterSpec spec = switch (algorithm) {\n+            PSSParameterSpec spec = switch (test.algorithm) {\n@@ -197,1 +258,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":123,"deletions":63,"binary":false,"changes":186,"status":"modified"}]}