{"files":[{"patch":"@@ -38,0 +38,1 @@\n+        if (Double.compare(lo, hi) >= 0) throw new EmptyGeneratorException();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformDoubleGenerator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+        if (Float.compare(lo, hi) >= 0) throw new EmptyGeneratorException();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloatGenerator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-        Asserts.assertNotNull(G.uniformDoubles(0, 0));\n+        Asserts.assertThrows(EmptyGeneratorException.class, () -> G.uniformDoubles(0, 0));\n@@ -400,1 +400,1 @@\n-        Asserts.assertNotNull(G.uniformFloats(0, 0));\n+        Asserts.assertThrows(EmptyGeneratorException.class, () -> G.uniformFloats(0, 0));\n@@ -595,2 +595,7 @@\n-            float a = floatBoundGen.next(), b = floatBoundGen.next();\n-            float lo = Math.min(a, b), hi = Math.max(a, b);\n+            float lo = 1, hi = 0;\n+            \/\/ Failure of a single round is very rare, repeated failure even rarer.\n+            while (lo >= hi) {\n+                float a = floatBoundGen.next(), b = floatBoundGen.next();\n+                lo = Math.min(a, b);\n+                hi = Math.max(a, b);\n+            }\n@@ -607,2 +612,7 @@\n-            double a = doubleBoundGen.next(), b = doubleBoundGen.next();\n-            double lo = Math.min(a, b), hi = Math.max(a, b);\n+            double lo = 1, hi = 0;\n+            \/\/ Failure of a single round is very rare, repeated failure even rarer.\n+            while (lo >= hi) {\n+                double a = doubleBoundGen.next(), b = doubleBoundGen.next();\n+                lo = Math.min(a, b);\n+                hi = Math.max(a, b);\n+            }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestGenerators.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"}]}