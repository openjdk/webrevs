{"files":[{"patch":"@@ -798,1 +798,0 @@\n-java\/awt\/event\/MouseEvent\/AltGraphModifierTest\/AltGraphModifierTest.java 8162380 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,5 +25,7 @@\n- @test\n- @bug 8041928 8158616\n- @requires (os.family != \"mac\")\n- @summary Confirm that the Alt-Gr Modifier bit is set correctly.\n- @run main\/manual AltGraphModifierTest\n+ * @test\n+ * @bug 8041928 8158616\n+ * @requires (os.family != \"mac\")\n+ * @summary Confirm that the Alt-Gr Modifier bit is set correctly.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AltGraphModifierTest\n@@ -32,2 +34,0 @@\n-import java.awt.Button;\n-import java.awt.Dialog;\n@@ -35,4 +35,0 @@\n-import java.awt.Panel;\n-import java.awt.TextArea;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -44,18 +40,0 @@\n-    private static void init() throws Exception {\n-        String[] instructions\n-                = {\n-                    \"This test is for verifying Alt-Gr modifier of an event.\",\n-                    \"Linux :-\",\n-                    \"1. Please check if Alt-Gr key is present on keyboard.\",\n-                    \"2. If present, press the Alt-Gr key and perform\",\n-                    \"   mouse click on the TestWindow.\",\n-                    \"3. Navigate to System Settings-> Keyboard-> Shortcuts->\",\n-                    \"   Typing.\",\n-                    \"4. Select an option for the Alternative Characters Key\",\n-                    \"   For example. Right Alt\",\n-                    \"5. Close the settings and navigate to test\",\n-                    \"6. Press Right Alt Key & perform mouse click on the\",\n-                    \"   TestWindow\",\n-                    \"7. Test will exit by itself with appropriate result.\",\n-                    \" \",\n-                };\n@@ -63,2 +41,25 @@\n-        Sysout.createDialog();\n-        Sysout.printInstructions(instructions);\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test is for verifying Alt-Gr modifier of an event.\n+                Please check if Alt-Gr key is present on keyboard.\n+                If not present, press Pass.\n+                On Windows:\n+                    Press Alt-Gr or Right Alt key and simulataneously\n+                        perform mouse click on the \"TestWindow\".\n+                On Linux:\n+                    Navigate to\n+                      System Settings-> Keyboard-> Special Character Entry\n+                    Select \"Right Alt\" option for the \"Alternative Characters Key\"\n+                    Close the settings and navigate to test\n+                    Press Right Alt Key & simultaneously\n+                        perform mouse click on the \"TestWindow\".\n+\n+                Test will exit by itself with appropriate result.\"\"\";\n+\n+\n+         PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(AltGraphModifierTest::initTestWindow)\n+                .build()\n+                .awaitAndCheck();\n@@ -67,3 +68,2 @@\n-    static Frame mainFrame;\n-    public static void initTestWindow() {\n-        mainFrame = new Frame();\n+    public static Frame initTestWindow() {\n+        Frame mainFrame = new Frame();\n@@ -77,1 +77,1 @@\n-                    AltGraphModifierTest.fail(\"Alt-Gr Modifier bit is not set.\");\n+                    PassFailJFrame.forceFail(\"Alt-Gr Modifier bit is not set.\");\n@@ -79,1 +79,1 @@\n-                    AltGraphModifierTest.pass();\n+                    PassFailJFrame.forcePass();\n@@ -83,175 +83,1 @@\n-        mainFrame.setVisible(true);\n-    }\n-\n-    public static void dispose() {\n-        Sysout.dispose();\n-        mainFrame.dispose();\n-    }\n-\n-    \/**\n-     * ***************************************************\n-     * Standard Test Machinery Section DO NOT modify anything in this section --\n-     * it's a standard chunk of code which has all of the synchronisation\n-     * necessary for the test harness. By keeping it the same in all tests, it\n-     * is easier to read and understand someone else's test, as well as insuring\n-     * that all tests behave correctly with the test harness. There is a section\n-     * following this for test-defined classes\n-     * ****************************************************\n-     *\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-    private static Thread mainThread = null;\n-    final private static int sleepTime = 300000;\n-\n-    public static void main(String args[]) throws Exception {\n-        mainThread = Thread.currentThread();\n-        try {\n-            init();\n-            initTestWindow();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        try {\n-            mainThread.sleep(sleepTime);\n-        } catch (InterruptedException e) {\n-            dispose();\n-            if (testGeneratedInterrupt && !theTestPassed) {\n-                throw new Exception(failureMessage);\n-            }\n-        }\n-        if (!testGeneratedInterrupt) {\n-            dispose();\n-            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000\n-                    + \" seconds\");\n-        }\n-    }\n-\n-    public static synchronized void pass() {\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n-    }\n-\n-    public static synchronized void fail(String whyFailed) {\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\n-}\n-\n-\/\/ *********** End Standard Test Machinery Section **********\n-\/**\n- * **************************************************\n- * Standard Test Machinery DO NOT modify anything below -- it's a standard chunk\n- * of code whose purpose is to make user interaction uniform, and thereby make\n- * it simpler to read and understand someone else's test.\n- * **************************************************\n- *\/\n-\/**\n- * This is part of the standard test machinery. It creates a dialog (with the\n- * instructions), and is the interface for sending text messages to the user. To\n- * print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method. Put one line of instructions per array entry. To\n- * display a message for the tester to see, simply call Sysout.println with the\n- * string to be displayed. This mimics System.out.println but works within the\n- * test harness as well as standalone.\n- *\/\n-class Sysout {\n-    private static TestDialog dialog;\n-    private static Frame frame;\n-\n-    public static void createDialog() {\n-        frame = new Frame();\n-        dialog = new TestDialog(frame, \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-\n-    public static void dispose() {\n-        dialog.dispose();\n-        frame.dispose();\n-    }\n-}\n-\n-\/**\n- * This is part of the standard test machinery. It provides a place for the test\n- * instructions to be displayed, and a place for interactive messages to the\n- * user to be displayed. To have the test instructions displayed, see Sysout. To\n- * have a message to the user be displayed, see Sysout. Do not call anything in\n- * this dialog directly.\n- *\/\n-class TestDialog extends Dialog implements ActionListener {\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-    Panel buttonP;\n-    Button failB;\n-\n-    \/\/ DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        buttonP = new Panel();\n-        failB = new Button(\"Fail\");\n-        failB.setActionCommand(\"fail\");\n-        failB.addActionListener(this);\n-        buttonP.add(\"Center\", failB);\n-\n-        add(\"South\", buttonP);\n-        pack();\n-        setVisible(true);\n-    }\n-\n-    \/\/ DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        instructionsText.setText(\"\");\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            remainingStr = instructions[i];\n-            while (remainingStr.length() > 0) {\n-                if (remainingStr.length() >= maxStringLength) {\n-                    int posOfSpace = remainingStr.\n-                            lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) {\n-                        posOfSpace = maxStringLength - 1;\n-                    }\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                }\n-                else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-                instructionsText.append(printStr + \"\\n\");\n-            }\n-        }\n-    }\n-\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-    }\n-\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getActionCommand() == \"fail\") {\n-            AltGraphModifierTest.fail(\"User Clicked Fail\");\n-        }\n+        return mainFrame;\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/AltGraphModifierTest\/AltGraphModifierTest.java","additions":38,"deletions":212,"binary":false,"changes":250,"status":"modified"}]}