{"files":[{"patch":"@@ -325,1 +325,1 @@\n-    private static final String SIGNAL_MASK_PATTERN = \"(?<\" + FIELD + \">Sig\\\\p{Alpha}{3}):\\\\s+(?<\" + MASK + \">\\\\p{XDigit}{16}).*\";\n+    private static final Pattern SIGNAL_MASK_PATTERN = Pattern.compile(\"(?<\" + FIELD + \">Sig\\\\p{Alpha}{3}):\\\\s+(?<\" + MASK + \">\\\\p{XDigit}{16}).*\");\n@@ -327,1 +327,1 @@\n-    private static final long SIGQUIT = 1L << 2;\n+    private static final long SIGQUIT = 0b100; \/\/ mask bit for SIGQUIT\n@@ -336,2 +336,0 @@\n-        final var p = Pattern.compile(SIGNAL_MASK_PATTERN);\n-\n@@ -349,1 +347,1 @@\n-            final var m = p.matcher(line);\n+            final var m = SIGNAL_MASK_PATTERN.matcher(line);\n@@ -353,2 +351,2 @@\n-            var       signals = m.group(MASK);\n-            final var slen    = signals.length();\n+            var       sigmask = m.group(MASK);\n+            final var slen    = sigmask.length();\n@@ -356,1 +354,1 @@\n-            signals = signals.substring(slen \/ 2 , slen); \/\/ only really interested in the non r\/t signals ...\n+            sigmask = sigmask.substring(slen \/ 2 , slen); \/\/ only really interested in the non r\/t signals ...\n@@ -358,1 +356,1 @@\n-            final var sigquit = (Long.valueOf(signals, 16) & SIGQUIT) != 0L;\n+            final var sigquit = (Long.valueOf(sigmask, 16) & SIGQUIT) != 0L;\n@@ -362,2 +360,2 @@\n-                case \"SigIgn\": { quitIgn = sigquit; readCgt = true; break; }\n-                case \"SigCgt\": { quitCgt = sigquit; readIgn = true; break; }\n+                case \"SigIgn\": { quitIgn = sigquit; readIgn = true; break; }\n+                case \"SigCgt\": { quitCgt = sigquit; readCgt = true; break; }\n","filename":"src\/jdk.attach\/linux\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"}]}