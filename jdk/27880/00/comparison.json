{"files":[{"patch":"@@ -184,3 +184,4 @@\n-    if (fd->signature()->equals(\"Ljdk\/internal\/access\/JavaLangAccess;\")) {\n-      \/\/ A few classes have static fields that point to SharedSecrets.getJavaLangAccess().\n-      \/\/ This object carries no state and we can create a new one in the production run.\n+    if (fd->signature()->starts_with(\"Ljdk\/internal\/access\/\") &&\n+        fd->signature()->ends_with(\"Access;\")) {\n+      \/\/ The jdk\/internal\/access\/*Access classes carry no states so they can be safely\n+      \/\/ cached.\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -1539,5 +1538,0 @@\n-        runtimeSetup();\n-    }\n-\n-    @AOTRuntimeSetup\n-    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -2671,5 +2670,0 @@\n-        runtimeSetup();\n-    }\n-\n-    @AOTRuntimeSetup\n-    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -294,5 +293,0 @@\n-        runtimeSetup();\n-    }\n-\n-    @AOTRuntimeSetup\n-    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -3734,5 +3733,0 @@\n-        runtimeSetup();\n-    }\n-\n-    @AOTRuntimeSetup\n-    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import jdk.internal.vm.annotation.AOTRuntimeSetup;\n@@ -1750,5 +1749,0 @@\n-        runtimeSetup();\n-    }\n-\n-    @AOTRuntimeSetup\n-    private static void runtimeSetup() {\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.vm.annotation.AOTSafeClassInitializer;\n@@ -63,0 +64,3 @@\n+\/\/ Static fields in this class are stateless, so the values initialized in the\n+\/\/ AOT assembly phase can be safely cached.\n+@AOTSafeClassInitializer\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}