{"files":[{"patch":"@@ -276,0 +276,8 @@\n+ * The Class-File API performs checks to ensure arguments are representable in\n+ * the {@code class} file format.  A value that is lost when it is built to a\n+ * {@code class} file and re-parsed to a model is rejected with an {@link\n+ * IllegalArgumentException}.  For example, a negative value or a value over\n+ * {@code 65535} is lost when built to a {@code u2} (JVMS {@jvms 4}) item, with\n+ * the range {@code [0, 65535]}.  In particular, any variable-sized table\n+ * exceeding its maximum representable size is rejected.\n+ * <p>\n@@ -277,3 +285,4 @@\n- * (except for null arguments checks). All builders and classfile elements factory\n- * methods accepts the provided information without implicit validation.\n- * However, fatal inconsistencies (like for example invalid code sequence or\n+ * (except for null and representable arguments checks). All builders and\n+ * classfile elements factory methods accepts the provided information without\n+ * implicit validation, as long as they are representable in the {@code class}\n+ * file format.  However, fatal inconsistencies (like invalid code sequence or\n@@ -282,1 +291,1 @@\n- * {@link IllegalArgumentException}.\n+ * {@code IllegalArgumentException}.\n@@ -297,3 +306,3 @@\n- * directly from raw values, with no additional conversions or validations.\n- * Following example uses intentionally wrong class name form and it is applied\n- * without any validation or conversion.\n+ * directly from raw values, with no additional conversions or validations, as\n+ * long as they are representable.  Following example uses intentionally wrong\n+ * class name form, which is applied without any validation or conversion.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}