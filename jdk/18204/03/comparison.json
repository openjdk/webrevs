{"files":[{"patch":"@@ -81,1 +81,2 @@\n-      CFLAGS := $(CFLAGS_JDKEXE) -I$(TOPDIR)\/src\/$(MODULE)\/unix\/native\/libjava, \\\n+      CFLAGS := $(CFLAGS_JDKEXE) $(VERSION_CFLAGS) \\\n+          -I$(TOPDIR)\/src\/$(MODULE)\/unix\/native\/libjava, \\\n","filename":"make\/modules\/java.base\/Launcher.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    ProcessImpl_md.c_CFLAGS := $(VERSION_CFLAGS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <string.h>\n@@ -53,0 +54,4 @@\n+#ifndef VERSION_STRING\n+#error VERSION_STRING must be defined\n+#endif\n+\n@@ -62,0 +67,1 @@\n+    fprintf(stdout, \"jspawnhelper version %s\\n\", VERSION_STRING);\n@@ -144,4 +150,0 @@\n-    if (argc != 2) {\n-        shutItDown();\n-    }\n-\n@@ -151,1 +153,12 @@\n-    r = sscanf (argv[1], \"%d:%d:%d\", &fdinr, &fdinw, &fdout);\n+\n+    if (argc != 3) {\n+        fprintf(stdout, \"Incorrect number of arguments: %d\\n\", argc);\n+        shutItDown();\n+    }\n+\n+    if (strcmp(argv[1], VERSION_STRING) != 0) {\n+        fprintf(stdout, \"Incorrect Java version: %s\\n\", argv[1]);\n+        shutItDown();\n+    }\n+\n+    r = sscanf (argv[2], \"%d:%d:%d\", &fdinr, &fdinw, &fdout);\n@@ -154,1 +167,2 @@\n-        if (!S_ISFIFO(buf.st_mode))\n+        if (!S_ISFIFO(buf.st_mode)) {\n+            fprintf(stdout, \"Incorrect input pipe\\n\");\n@@ -156,0 +170,1 @@\n+        }\n@@ -157,0 +172,1 @@\n+        fprintf(stdout, \"Incorrect FD array data: %s\\n\", argv[2]);\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -303,0 +303,4 @@\n+#ifndef VERSION_STRING\n+#error VERSION_STRING must be defined\n+#endif\n+\n@@ -491,1 +495,1 @@\n-    char *hlpargs[3];\n+    char *hlpargs[4];\n@@ -500,1 +504,2 @@\n-     * argv[1] contains the fd string as argument to jspawnhelper\n+     * argv[1] contains the version string as argument to jspawnhelper\n+     * argv[2] contains the fd string as argument to jspawnhelper\n@@ -503,2 +508,3 @@\n-    hlpargs[1] = buf1;\n-    hlpargs[2] = NULL;\n+    hlpargs[1] = VERSION_STRING;\n+    hlpargs[2] = buf1;\n+    hlpargs[3] = NULL;\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8325567\n+ * @bug 8325567 8325621\n@@ -50,0 +50,17 @@\n+        if (nArgs != 2) {\n+            oa.shouldContain(\"Incorrect number of arguments\");\n+        } else {\n+            oa.shouldContain(\"Incorrect Java version\");\n+        }\n+    }\n+\n+    private static void testVersion() throws Exception {\n+        String[] args = new String[3];\n+        args[0] = Paths.get(System.getProperty(\"java.home\"), \"lib\", \"jspawnhelper\").toString();\n+        args[1] = \"wrongVersion\";\n+        args[2] = \"1:1:1\";\n+        Process p = ProcessTools.startProcess(\"jspawnhelper\", new ProcessBuilder(args));\n+        OutputAnalyzer oa = new OutputAnalyzer(p);\n+        oa.shouldHaveExitValue(1);\n+        oa.shouldContain(\"This command is not for general use\");\n+        oa.shouldContain(\"Incorrect Java version: wrongVersion\");\n@@ -56,0 +73,2 @@\n+\n+        testVersion();\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperWarnings.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}