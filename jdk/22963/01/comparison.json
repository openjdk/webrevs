{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,11 +40,0 @@\n-    boolean [] mask_arr = {\n-        false, false, false, true, false, false, false, false,\n-        false, false, false, true, false, false, false, false,\n-        false, false, false, true, false, false, false, false,\n-        true, true, true, true, true, true, true, true,\n-        true, true, true, true, true, true, true, true,\n-        false, false, false, true, false, false, false, false,\n-        false, false, false, true, false, false, false, false,\n-        false, false, false, true, false, false, false, false\n-    };\n-\n@@ -53,0 +42,1 @@\n+    boolean [] mask_arr = new boolean[ARRAYLEN];\n@@ -65,18 +55,0 @@\n-    Vector<Integer> iv1;\n-    Vector<Integer> iv2;\n-    Vector<Integer> iv3;\n-    Vector<Integer> iv4;\n-    Vector<Integer> iv5;\n-\n-    Vector<Long> lv1;\n-    Vector<Long> lv2;\n-    Vector<Long> lv3;\n-    Vector<Long> lv4;\n-    Vector<Long> lv5;\n-\n-    VectorMask<Integer> imask;\n-    VectorMask<Long> lmask;\n-\n-    VectorSpecies<Integer> ispecies;\n-    VectorSpecies<Long> lspecies;\n-\n@@ -89,1 +61,1 @@\n-    private Random r = new Random();\n+    private Random r = new Random(1024);\n@@ -93,5 +65,7 @@\n-        int512_arr_idx = 0;\n-        int256_arr_idx = 0;\n-        int128_arr_idx = 0;\n-        long256_arr_idx = 0;\n-        long512_arr_idx = 0;\n+        int512_arr_idx = -16;\n+        int256_arr_idx = -8;\n+        int128_arr_idx = -4;\n+        long256_arr_idx = -4;\n+        long512_arr_idx = -8;\n+\n+        mask_arr = new boolean[ARRAYLEN];\n@@ -111,0 +85,2 @@\n+            mask_arr[i] = r.nextBoolean();\n+\n@@ -128,5 +104,5 @@\n-        int512_arr_idx = (int512_arr_idx + 16) & (ARRAYLEN-1);\n-        int256_arr_idx = (int256_arr_idx + 8) & (ARRAYLEN-1);\n-        int128_arr_idx = (int128_arr_idx + 4) & (ARRAYLEN-1);\n-        long512_arr_idx = (long512_arr_idx + 8) & (ARRAYLEN-1);\n-        long256_arr_idx = (long256_arr_idx + 4) & (ARRAYLEN-1);\n+        int512_arr_idx = (((ARRAYLEN & ~15) - int512_arr_idx) <= 16) ? 0 : int512_arr_idx + 16;\n+        int256_arr_idx = (((ARRAYLEN & ~7) - int256_arr_idx) <= 8)  ? 0 : int256_arr_idx + 8;\n+        int128_arr_idx = (((ARRAYLEN & ~3) - int128_arr_idx) <= 4)  ? 0 : int128_arr_idx + 4;\n+        long512_arr_idx = (((ARRAYLEN & ~7) - long512_arr_idx) <= 8) ? 0 : long512_arr_idx + 8;\n+        long256_arr_idx = (((ARRAYLEN & ~3) - long256_arr_idx) <= 4) ? 0 : long256_arr_idx + 4;\n@@ -136,6 +112,6 @@\n-    public void maskedLogicKernel(VectorSpecies<Integer> SPECIES) {\n-        imask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-        iv2 = IntVector.fromArray(SPECIES, i2, int512_arr_idx);\n-        iv3 = IntVector.fromArray(SPECIES, i3, int512_arr_idx);\n-        iv4 = IntVector.fromArray(SPECIES, i4, int512_arr_idx);\n-        iv5 = IntVector.fromArray(SPECIES, i5, int512_arr_idx);\n+    public void maskedLogicKernel(VectorSpecies<Integer> SPECIES, int index) {\n+        VectorMask<Integer> imask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+        IntVector iv2 = IntVector.fromArray(SPECIES, i2, index);\n+        IntVector iv3 = IntVector.fromArray(SPECIES, i3, index);\n+        IntVector iv4 = IntVector.fromArray(SPECIES, i4, index);\n+        IntVector iv5 = IntVector.fromArray(SPECIES, i5, index);\n@@ -143,1 +119,1 @@\n-            for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n+            for(int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n@@ -160,1 +136,1 @@\n-       maskedLogicKernel(IntVector.SPECIES_512);\n+        maskedLogicKernel(IntVector.SPECIES_512, int512_arr_idx);\n@@ -165,1 +141,1 @@\n-       maskedLogicKernel(IntVector.SPECIES_256);\n+        maskedLogicKernel(IntVector.SPECIES_256, int256_arr_idx);\n@@ -170,1 +146,1 @@\n-       maskedLogicKernel(IntVector.SPECIES_128);\n+        maskedLogicKernel(IntVector.SPECIES_128, int128_arr_idx);\n@@ -174,19 +150,19 @@\n-    public void partiallyMaskedLogicOperationsIntKernel(VectorSpecies<Integer> SPECIES) {\n-       imask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-       iv2 = IntVector.fromArray(SPECIES, i2, int512_arr_idx);\n-       iv3 = IntVector.fromArray(SPECIES, i3, int512_arr_idx);\n-       iv4 = IntVector.fromArray(SPECIES, i4, int512_arr_idx);\n-       iv5 = IntVector.fromArray(SPECIES, i5, int512_arr_idx);\n-       for(int i = 0; i < INVOC_COUNTER; i++) {\n-           for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n-               IntVector.fromArray(SPECIES, i1, j)\n-                   .lanewise(VectorOperators.AND, iv2, imask)\n-                   .lanewise(VectorOperators.OR,  iv2, imask)\n-                   .lanewise(VectorOperators.AND, iv3)\n-                   .lanewise(VectorOperators.OR,  iv3)\n-                   .lanewise(VectorOperators.OR,  iv4, imask)\n-                   .lanewise(VectorOperators.AND, iv4, imask)\n-                   .lanewise(VectorOperators.XOR, iv5, imask)\n-                   .intoArray(i1, j);\n-           }\n-       }\n+    public void partiallyMaskedLogicOperationsIntKernel(VectorSpecies<Integer> SPECIES, int index) {\n+        VectorMask<Integer> imask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+        IntVector iv2 = IntVector.fromArray(SPECIES, i2, index);\n+        IntVector iv3 = IntVector.fromArray(SPECIES, i3, index);\n+        IntVector iv4 = IntVector.fromArray(SPECIES, i4, index);\n+        IntVector iv5 = IntVector.fromArray(SPECIES, i5, index);\n+        for (int i = 0; i < INVOC_COUNTER; i++) {\n+            for (int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n+                IntVector.fromArray(SPECIES, i1, j)\n+                    .lanewise(VectorOperators.AND, iv2, imask)\n+                    .lanewise(VectorOperators.OR,  iv2, imask)\n+                    .lanewise(VectorOperators.AND, iv3)\n+                    .lanewise(VectorOperators.OR,  iv3)\n+                    .lanewise(VectorOperators.OR,  iv4, imask)\n+                    .lanewise(VectorOperators.AND, iv4, imask)\n+                    .lanewise(VectorOperators.XOR, iv5, imask)\n+                    .intoArray(i1, j);\n+            }\n+        }\n@@ -197,1 +173,1 @@\n-        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_512);\n+        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_512, int512_arr_idx);\n@@ -202,1 +178,1 @@\n-        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_256);\n+        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_256, int256_arr_idx);\n@@ -207,1 +183,1 @@\n-        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_128);\n+        partiallyMaskedLogicOperationsIntKernel(IntVector.SPECIES_128, int128_arr_idx);\n@@ -211,8 +187,8 @@\n-    public void bitwiseBlendOperationIntKernel(VectorSpecies<Integer> SPECIES) {\n-       imask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-       iv2 = IntVector.fromArray(SPECIES, i2, int512_arr_idx);\n-       iv3 = IntVector.fromArray(SPECIES, i3, int512_arr_idx);\n-       iv4 = IntVector.fromArray(SPECIES, i4, int512_arr_idx);\n-       iv5 = IntVector.fromArray(SPECIES, i5, int512_arr_idx);\n-       for(int i = 0; i < INVOC_COUNTER; i++) {\n-           for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n+    public void bitwiseBlendOperationIntKernel(VectorSpecies<Integer> SPECIES, int index) {\n+       VectorMask<Integer> imask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+       IntVector iv2 = IntVector.fromArray(SPECIES, i2, index);\n+       IntVector iv3 = IntVector.fromArray(SPECIES, i3, index);\n+       IntVector iv4 = IntVector.fromArray(SPECIES, i4, index);\n+       IntVector iv5 = IntVector.fromArray(SPECIES, i5, index);\n+       for (int i = 0; i < INVOC_COUNTER; i++) {\n+           for (int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n@@ -230,1 +206,1 @@\n-       bitwiseBlendOperationIntKernel(IntVector.SPECIES_512);\n+        bitwiseBlendOperationIntKernel(IntVector.SPECIES_512, int512_arr_idx);\n@@ -235,1 +211,1 @@\n-       bitwiseBlendOperationIntKernel(IntVector.SPECIES_256);\n+        bitwiseBlendOperationIntKernel(IntVector.SPECIES_256, int256_arr_idx);\n@@ -240,1 +216,1 @@\n-       bitwiseBlendOperationIntKernel(IntVector.SPECIES_128);\n+        bitwiseBlendOperationIntKernel(IntVector.SPECIES_128, int128_arr_idx);\n@@ -244,18 +220,18 @@\n-    public void maskedLogicOperationsLongKernel(VectorSpecies<Long> SPECIES) {\n-       lmask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-       lv2 = LongVector.fromArray(SPECIES, l2, long256_arr_idx);\n-       lv3 = LongVector.fromArray(SPECIES, l3, long256_arr_idx);\n-       lv4 = LongVector.fromArray(SPECIES, l4, long256_arr_idx);\n-       lv5 = LongVector.fromArray(SPECIES, l5, long256_arr_idx);\n-       for(int i = 0; i < INVOC_COUNTER; i++) {\n-           for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n-               LongVector.fromArray(SPECIES, l1, j)\n-                   .lanewise(VectorOperators.AND, lv2, lmask)\n-                   .lanewise(VectorOperators.OR,  lv3, lmask)\n-                   .lanewise(VectorOperators.AND, lv3, lmask)\n-                   .lanewise(VectorOperators.OR,  lv4, lmask)\n-                   .lanewise(VectorOperators.AND, lv4, lmask)\n-                   .lanewise(VectorOperators.XOR, lv5, lmask)\n-                   .intoArray(l1, j);\n-           }\n-       }\n+    public void maskedLogicOperationsLongKernel(VectorSpecies<Long> SPECIES, int index) {\n+        VectorMask<Long> lmask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+        LongVector lv2 = LongVector.fromArray(SPECIES, l2, index);\n+        LongVector lv3 = LongVector.fromArray(SPECIES, l3, index);\n+        LongVector lv4 = LongVector.fromArray(SPECIES, l4, index);\n+        LongVector lv5 = LongVector.fromArray(SPECIES, l5, index);\n+        for (int i = 0; i < INVOC_COUNTER; i++) {\n+            for (int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n+                LongVector.fromArray(SPECIES, l1, j)\n+                    .lanewise(VectorOperators.AND, lv2, lmask)\n+                    .lanewise(VectorOperators.OR,  lv3, lmask)\n+                    .lanewise(VectorOperators.AND, lv3, lmask)\n+                    .lanewise(VectorOperators.OR,  lv4, lmask)\n+                    .lanewise(VectorOperators.AND, lv4, lmask)\n+                    .lanewise(VectorOperators.XOR, lv5, lmask)\n+                    .intoArray(l1, j);\n+            }\n+        }\n@@ -266,1 +242,1 @@\n-       maskedLogicOperationsLongKernel(LongVector.SPECIES_512);\n+        maskedLogicOperationsLongKernel(LongVector.SPECIES_512, long512_arr_idx);\n@@ -270,1 +246,1 @@\n-       maskedLogicOperationsLongKernel(LongVector.SPECIES_256);\n+        maskedLogicOperationsLongKernel(LongVector.SPECIES_256, long256_arr_idx);\n@@ -274,19 +250,19 @@\n-    public void partiallyMaskedLogicOperationsLongKernel(VectorSpecies<Long> SPECIES) {\n-       lmask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-       lv2 = LongVector.fromArray(SPECIES, l2, long512_arr_idx);\n-       lv3 = LongVector.fromArray(SPECIES, l3, long512_arr_idx);\n-       lv4 = LongVector.fromArray(SPECIES, l4, long512_arr_idx);\n-       lv5 = LongVector.fromArray(SPECIES, l5, long512_arr_idx);\n-       for(int i = 0; i < INVOC_COUNTER; i++) {\n-           for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n-               LongVector.fromArray(SPECIES, l1, j)\n-                   .lanewise(VectorOperators.AND, lv2, lmask)\n-                   .lanewise(VectorOperators.OR,  lv2, lmask)\n-                   .lanewise(VectorOperators.AND, lv3)\n-                   .lanewise(VectorOperators.OR,  lv3)\n-                   .lanewise(VectorOperators.AND, lv4)\n-                   .lanewise(VectorOperators.OR,  lv4, lmask)\n-                   .lanewise(VectorOperators.XOR, lv5, lmask)\n-                   .intoArray(l1, j);\n-           }\n-       }\n+    public void partiallyMaskedLogicOperationsLongKernel(VectorSpecies<Long> SPECIES, int index) {\n+        VectorMask<Long> lmask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+        LongVector lv2 = LongVector.fromArray(SPECIES, l2, index);\n+        LongVector lv3 = LongVector.fromArray(SPECIES, l3, index);\n+        LongVector lv4 = LongVector.fromArray(SPECIES, l4, index);\n+        LongVector lv5 = LongVector.fromArray(SPECIES, l5, index);\n+        for (int i = 0; i < INVOC_COUNTER; i++) {\n+            for (int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n+                LongVector.fromArray(SPECIES, l1, j)\n+                    .lanewise(VectorOperators.AND, lv2, lmask)\n+                    .lanewise(VectorOperators.OR,  lv2, lmask)\n+                    .lanewise(VectorOperators.AND, lv3)\n+                    .lanewise(VectorOperators.OR,  lv3)\n+                    .lanewise(VectorOperators.AND, lv4)\n+                    .lanewise(VectorOperators.OR,  lv4, lmask)\n+                    .lanewise(VectorOperators.XOR, lv5, lmask)\n+                    .intoArray(l1, j);\n+            }\n+        }\n@@ -297,1 +273,1 @@\n-       partiallyMaskedLogicOperationsLongKernel(LongVector.SPECIES_512);\n+        partiallyMaskedLogicOperationsLongKernel(LongVector.SPECIES_512, long512_arr_idx);\n@@ -302,1 +278,1 @@\n-       partiallyMaskedLogicOperationsLongKernel(LongVector.SPECIES_256);\n+        partiallyMaskedLogicOperationsLongKernel(LongVector.SPECIES_256, long256_arr_idx);\n@@ -306,13 +282,13 @@\n-    public void bitwiseBlendOperationLongKernel(VectorSpecies<Long> SPECIES) {\n-       lmask = VectorMask.fromArray(SPECIES, mask_arr, 0);\n-       lv2 = LongVector.fromArray(SPECIES, l2, long512_arr_idx);\n-       lv3 = LongVector.fromArray(SPECIES, l3, long512_arr_idx);\n-       lv4 = LongVector.fromArray(SPECIES, l4, long512_arr_idx);\n-       lv5 = LongVector.fromArray(SPECIES, l5, long512_arr_idx);\n-       for(int i = 0; i < INVOC_COUNTER; i++) {\n-           for(int j = 0 ; j < ARRAYLEN; j+= SPECIES.length()) {\n-               LongVector.fromArray(SPECIES, l1, j)\n-                   .lanewise(VectorOperators.BITWISE_BLEND, lv2, lv3, lmask)\n-                   .lanewise(VectorOperators.BITWISE_BLEND, lv3, lv4, lmask)\n-                   .lanewise(VectorOperators.BITWISE_BLEND, lv4, lv5, lmask)\n-                   .intoArray(l1, j);\n+    public void bitwiseBlendOperationLongKernel(VectorSpecies<Long> SPECIES, int index) {\n+        VectorMask<Long> lmask = VectorMask.fromArray(SPECIES, mask_arr, index);\n+        LongVector lv2 = LongVector.fromArray(SPECIES, l2, index);\n+        LongVector lv3 = LongVector.fromArray(SPECIES, l3, index);\n+        LongVector lv4 = LongVector.fromArray(SPECIES, l4, index);\n+        LongVector lv5 = LongVector.fromArray(SPECIES, l5, index);\n+        for (int i = 0; i < INVOC_COUNTER; i++) {\n+            for (int j = 0 ; j < SPECIES.loopBound(ARRAYLEN); j+= SPECIES.length()) {\n+                LongVector.fromArray(SPECIES, l1, j)\n+                    .lanewise(VectorOperators.BITWISE_BLEND, lv2, lv3, lmask)\n+                    .lanewise(VectorOperators.BITWISE_BLEND, lv3, lv4, lmask)\n+                    .lanewise(VectorOperators.BITWISE_BLEND, lv4, lv5, lmask)\n+                    .intoArray(l1, j);\n@@ -325,1 +301,1 @@\n-       bitwiseBlendOperationLongKernel(LongVector.SPECIES_512);\n+        bitwiseBlendOperationLongKernel(LongVector.SPECIES_512, long512_arr_idx);\n@@ -330,1 +306,1 @@\n-       bitwiseBlendOperationLongKernel(LongVector.SPECIES_256);\n+        bitwiseBlendOperationLongKernel(LongVector.SPECIES_256, long256_arr_idx);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskedLogicOpts.java","additions":116,"deletions":140,"binary":false,"changes":256,"status":"modified"}]}