{"files":[{"patch":"@@ -44,1 +44,1 @@\n- * @build BulkLoaderTest\n+ * @build jdk.test.whitebox.WhiteBox BulkLoaderTest\n@@ -46,1 +46,2 @@\n- * @run driver BulkLoaderTest DYNAMIC\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. BulkLoaderTest DYNAMIC\n@@ -83,1 +84,0 @@\n-                \"-Xshare:on\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,3 @@\n- * @run driver JavacBench DYNAMIC\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. JavacBench DYNAMIC\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/JavacBench.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -46,0 +47,1 @@\n+    private final String tempBaseArchiveFile;\n@@ -61,0 +63,1 @@\n+        tempBaseArchiveFile = name() + \".temp-base.jsa\";\n@@ -192,0 +195,27 @@\n+    \/\/ Creating a dynamic CDS archive (with -XX:ArchiveClassesAtExit=<foo>.jsa) requires that the current\n+    \/\/ JVM process is using a static archive (which is usually the default CDS archive included in the JDK).\n+    \/\/ However, if the JDK doesn't include a default CDS archive that's compatible with the set of\n+    \/\/ VM options used by this test, we need to create a temporary static archive to be used with -XX:ArchiveClassesAtExit.\n+    private String getBaseArchiveForDynamicArchive() throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        if (wb.isSharingEnabled()) {\n+            \/\/ This current JVM is able to use a default CDS archive included by the JDK, so\n+            \/\/ if we launch a JVM child process (with the same set of options as the current JVM),\n+            \/\/ that process is also able to use the same default CDS archive for creating\n+            \/\/ a dynamic archive.\n+            return null;\n+        } else {\n+            \/\/ This current JVM is unable to use a default CDS archive, so let's create a temporary\n+            \/\/ static archive to be used with -XX:ArchiveClassesAtExit.\n+            File f = new File(tempBaseArchiveFile);\n+            if (!f.exists()) {\n+                CDSOptions opts = new CDSOptions();\n+                opts.setArchiveName(tempBaseArchiveFile);\n+                opts.addSuffix(\"-Djava.class.path=\");\n+                OutputAnalyzer out = CDSTestUtils.createArchive(opts);\n+                CDSTestUtils.checkBaseDump(out);\n+            }\n+            return tempBaseArchiveFile;\n+        }\n+    }\n+\n@@ -195,0 +225,1 @@\n+        String baseArchive = getBaseArchiveForDynamicArchive();\n@@ -207,0 +238,3 @@\n+        if (baseArchive != null) {\n+            cmdLine = StringArrayUtils.concat(cmdLine, \"-XX:SharedArchiveFile=\" + baseArchive);\n+        }\n@@ -230,1 +264,1 @@\n-            cmdLine = StringArrayUtils.concat(cmdLine, \"-XX:SharedArchiveFile=\" + staticArchiveFile);\n+            cmdLine = StringArrayUtils.concat(cmdLine, \"-Xshare:on\", \"-XX:SharedArchiveFile=\" + staticArchiveFile);\n@@ -232,1 +266,1 @@\n-            cmdLine = StringArrayUtils.concat(cmdLine, \"-XX:SharedArchiveFile=\" + dynamicArchiveFile);\n+            cmdLine = StringArrayUtils.concat(cmdLine, \"-Xshare:on\", \"-XX:SharedArchiveFile=\" + dynamicArchiveFile);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"}]}