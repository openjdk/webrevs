{"files":[{"patch":"@@ -599,2 +599,2 @@\n-        assert(monitor->owner() == Thread::current(), \"must be owner=\" PTR_FORMAT \" current=\" PTR_FORMAT \" mark=\" PTR_FORMAT,\n-               p2i(monitor->owner()), p2i(Thread::current()), monitor->object()->mark_acquire().value());\n+        assert(monitor->owner() == locking_thread, \"must be owner=\" PTR_FORMAT \" locking_thread=\" PTR_FORMAT \" mark=\" PTR_FORMAT,\n+               p2i(monitor->owner()), p2i(locking_thread), monitor->object()->mark_acquire().value());\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2024 SAP SE. All rights reserved.\n@@ -291,0 +291,1 @@\n+        new EARelockingWithManyLightweightLocksTarget()                                     .run();\n@@ -416,0 +417,1 @@\n+        new EARelockingWithManyLightweightLocks()                                     .run(this);\n@@ -1800,0 +1802,79 @@\n+\/**\n+ * Like {@link EARelockingSimple}. The difference is that there are many\n+ * lightweight locked objects when the relocking is done. With\n+ * <code>-XX:LockingMode=2<\/code> the lock stack of the thread will be full\n+ * because of this.\n+ *\/\n+\n+class EARelockingWithManyLightweightLocks extends EATestCaseBaseDebugger {\n+\n+    public void runTestCase() throws Exception {\n+        BreakpointEvent bpe = resumeTo(TARGET_TESTCASE_BASE_NAME, \"dontinline_brkpt\", \"()V\");\n+        printStack(bpe.thread());\n+        @SuppressWarnings(\"unused\")\n+        ObjectReference o = getLocalRef(bpe.thread().frame(1), XYVAL_NAME, \"l1\");\n+    }\n+}\n+\n+class EARelockingWithManyLightweightLocksTarget extends EATestCaseBaseTarget {\n+\n+    static class Lock {\n+    }\n+\n+    public static Lock L0, L1, L2, L3, L4, L5, L6, L7, L8, L9;\n+\n+    void allocateLocks() {\n+        L0 = new Lock();\n+        L1 = new Lock();\n+        L2 = new Lock();\n+        L3 = new Lock();\n+        L4 = new Lock();\n+        L5 = new Lock();\n+        L6 = new Lock();\n+        L7 = new Lock();\n+        L8 = new Lock();\n+        L9 = new Lock();\n+    }\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        allocateLocks();\n+    }\n+\n+    @Override\n+    public void warmupDone() {\n+        super.warmupDone();\n+        allocateLocks();    \/\/ get rid of already inflated ones\n+    }\n+\n+    public void dontinline_testMethod() {\n+        XYVal l1 = new XYVal(4, 2);\n+        synchronized(L0) {\n+            synchronized(L1) {\n+                synchronized(L2) {\n+                    synchronized(L3) {\n+                        synchronized(L4) {\n+                            synchronized(L5) {\n+                                synchronized(L6) {\n+                                    synchronized(L7) {\n+                                        synchronized(L8) {\n+                                            synchronized(L9) {\n+                                                synchronized (l1) {\n+                                                    dontinline_brkpt();\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":82,"deletions":1,"binary":false,"changes":83,"status":"modified"}]}