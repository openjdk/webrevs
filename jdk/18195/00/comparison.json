{"files":[{"patch":"@@ -36,0 +36,7 @@\n+################################################################################\n+\n+$(CONF_DST_DIR)\/printer.properties: $(TOPDIR)\/src\/java.desktop\/share\/conf\/printer.properties\n+\t$(call install-file)\n+\n+TARGETS += $(CONF_DST_DIR)\/printer.properties\n+\n","filename":"make\/modules\/java.desktop\/Copy.gmk","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,10 @@\n+import java.io.Reader;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.io.IOException;\n+\n@@ -41,0 +51,1 @@\n+import javax.print.attribute.standard.Chromaticity;\n@@ -81,0 +92,3 @@\n+    private static String[] monochromeKeyValues;\n+    private static String[] colorKeyValues;\n+\n@@ -706,0 +720,67 @@\n+    private int getChromaticity() {\n+        return (this.chromaticityAttr == null) ? -1 : this.chromaticityAttr.getValue();\n+    }\n+\n+    private static Properties getPrinterProperties() {\n+\n+        final String home = System.getProperty(\"java.home\");\n+        if (home == null) {\n+            return null;\n+        }\n+\n+        Path propertyPath = Paths.get(home, \"conf\", \"printer.properties\");\n+\n+        if (Files.notExists(propertyPath)) {\n+            return null;\n+        }\n+\n+        Properties properties = new Properties();\n+        try (Reader reader = Files.newBufferedReader(propertyPath)) {\n+            properties.load(reader);\n+            return properties;\n+        } catch (IOException e) {\n+            return null;\n+        }\n+    }\n+\n+    private String[] getChromaticityKeyValues(int value) {\n+\n+        if (monochromeKeyValues == null || colorKeyValues == null) {\n+            Properties printerProperties = getPrinterProperties();\n+            monochromeKeyValues = getChromaticityProperties(\"Chromaticity.MONOCHROME\", printerProperties);\n+            colorKeyValues = getChromaticityProperties(\"Chromaticity.COLOR\", printerProperties);\n+        }\n+\n+        if (Chromaticity.MONOCHROME.getValue() == value) {\n+            return monochromeKeyValues;\n+        } else if (Chromaticity.COLOR.getValue() == value) {\n+            return colorKeyValues;\n+        } else {\n+            return new String[0];\n+        }\n+    }\n+\n+    private static String[] getChromaticityProperties(String chromaticityKeyPrefix, Properties printerProperties) {\n+\n+        if (printerProperties == null) {\n+            return new String[0];\n+        }\n+\n+        int prefixLength = chromaticityKeyPrefix.length() + 1;\n+        List<String> chromaticityKeyValuesList = new ArrayList<>();\n+        for (Map.Entry<Object, Object> entry : printerProperties.entrySet()) {\n+\n+            String key = entry.getKey().toString();\n+\n+            if (key.startsWith(chromaticityKeyPrefix)) {\n+                if (key.length() > prefixLength) {\n+                    String chromaticityKey = key.substring(prefixLength);\n+                    chromaticityKeyValuesList.add(chromaticityKey);\n+                    chromaticityKeyValuesList.add(entry.getValue().toString());\n+                }\n+            }\n+        }\n+\n+        return chromaticityKeyValuesList.toArray(new String[chromaticityKeyValuesList.size()]);\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -471,1 +471,2 @@\n-\n+    DECLARE_METHOD(jm_getChromaticity, sjc_CPrinterJob, \"getChromaticity\", \"()I\");\n+    DECLARE_METHOD(jm_getChromaticityKeyValues, sjc_CPrinterJob, \"getChromaticityKeyValues\", \"(I)[Ljava\/lang\/String;\");\n@@ -541,0 +542,24 @@\n+\n+    jint chromaticity = (*env)->CallIntMethod(env, srcPrinterJob, jm_getChromaticity);\n+    CHECK_EXCEPTION();\n+\n+    if (chromaticity >= 0) {\n+\n+        jobject chromaticityKeyValues = (*env)->CallObjectMethod(env, srcPrinterJob, jm_getChromaticityKeyValues, chromaticity);\n+\n+        if (chromaticityKeyValues == nil) {\n+\n+            NSString* colorValue = (chromaticity == 0) ? @\"Gray\" : @\"Color\";\n+            [[dst printSettings] setObject: colorValue forKey: @\"ColorModel\"];\n+        } else {\n+\n+            jint len = (*env)->GetArrayLength(env, chromaticityKeyValues);\n+            for (int i = 0; i < len; i += 2) {\n+                jstring key =  (*env)->GetObjectArrayElement(env, chromaticityKeyValues, i);\n+                jstring value =  (*env)->GetObjectArrayElement(env, chromaticityKeyValues, i + 1);\n+                NSString* nsKey = JavaStringToNSString(env, key);\n+                NSString* nsValue = JavaStringToNSString(env, value);\n+                [[dst printSettings] setObject: nsValue forKey: nsKey];\n+            }\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import javax.print.attribute.standard.Chromaticity;\n@@ -169,1 +170,0 @@\n-\n@@ -282,0 +282,1 @@\n+    protected Chromaticity chromaticityAttr;\n@@ -1231,0 +1232,1 @@\n+        chromaticityAttr = null;\n@@ -1277,0 +1279,2 @@\n+        chromaticityAttr = (Chromaticity)attributes.get(Chromaticity.class);\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/RasterPrinterJob.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+Chromaticity.MONOCHROME.BRPrintQuality=Black\n+Chromaticity.COLOR.BRPrintQuality=Color\n+Chromaticity.MONOCHROME.DLColorMode=Black\n+Chromaticity.COLOR.DLColorMode=Color\n+Chromaticity.MONOCHROME.EPRendering=None\n+Chromaticity.COLOR.EPRendering=RGB\n+Chromaticity.MONOCHROME.ColorModel=Gray\n+Chromaticity.COLOR.ColorModel=CMYK\n+Chromaticity.MONOCHROME.HPColorAsGray=Yes\n+Chromaticity.COLOR.HPColorAsGray=No\n+Chromaticity.MONOCHROME.HPColorMode=grayscale\n+Chromaticity.COLOR.HPColorMode=color\n+Chromaticity.MONOCHROME.SelectColor=Grayscale\n+Chromaticity.COLOR.SelectColor=Color\n+Chromaticity.MONOCHROME.ColorMode=FalseM\n+Chromaticity.COLOR.ColorMode=TrueM\n+Chromaticity.MONOCHROME.BLW=FalseM\n+Chromaticity.COLOR.BLW=TrueM\n+Chromaticity.MONOCHROME.OKControl=Gray\n+Chromaticity.COLOR.OKControl=Auto\n+Chromaticity.MONOCHROME.ARCMode=CMBW\n+Chromaticity.COLOR.ARCMode=CMColor\n+Chromaticity.MONOCHROME.XRXColor=BW\n+Chromaticity.COLOR.XRXColor=Automatic\n+Chromaticity.MONOCHROME.XRColorMode=Black\n+Chromaticity.COLOR.XRColorMode=Color\n+Chromaticity.MONOCHROME.XRColorModeSetting=Black\n+Chromaticity.COLOR.XRColorModeSetting=Color\n+Chromaticity.MONOCHROME.EFColorMode=GRAY\n+Chromaticity.COLOR.EFColorMode=CMYK\n","filename":"src\/java.desktop\/share\/conf\/printer.properties","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,281 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315113\n+ * @key printer\n+ * @summary javax.print: Print request Chromaticity.MONOCHROME attribute does not work on macOS\n+ * @requires (os.family == \"mac\")\n+ * @run main\/manual ChromaticityAttributeTest\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.Chromaticity;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class ChromaticityAttributeTest {\n+\n+    private static final long TIMEOUT = 10 * 60_000;\n+    private static volatile boolean testPassed = true;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean timeout = false;\n+\n+    private static volatile int testCount;\n+    private static volatile int testTotalCount;\n+\n+    private static final Color TEXT_COLOR = Color.BLUE;\n+    private static final Color SHAPE_COLOR = Color.ORANGE;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        final Set<Chromaticity> chromaticities = Set.of(Chromaticity.MONOCHROME, Chromaticity.COLOR);\n+\n+        SwingUtilities.invokeLater(() -> {\n+            testTotalCount = chromaticities.size();\n+            for (Chromaticity chromaticity : chromaticities) {\n+                testPrint(chromaticity, chromaticities);\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (System.currentTimeMillis() < time) {\n+            if (!testPassed || testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        timeout = true;\n+\n+        closeDialogs();\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+\n+        if (testCount != testTotalCount) {\n+            throw new Exception(\n+                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n+        }\n+    }\n+\n+    private static void print(Chromaticity chromaticity) throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(MediaSizeName.ISO_A4);\n+        attr.add(chromaticity);\n+\n+        for (Attribute attribute : attr.toArray()) {\n+            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n+        }\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(\"Test\" + chromaticity + \" chromaticity\");\n+        job.setPrintable(new ChromaticityAttributePrintable(getPageText(chromaticity)));\n+\n+        job.print(attr);\n+    }\n+\n+    private static class ChromaticityAttributePrintable implements Printable {\n+\n+        private final String text;\n+\n+        public ChromaticityAttributePrintable(String text) {\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+\n+            if (pageIndex != 0) {\n+                return NO_SUCH_PAGE;\n+            }\n+\n+            int w = (int) pageFormat.getImageableWidth();\n+            int h = (int) pageFormat.getImageableHeight();\n+            int x = (int) (pageFormat.getImageableX() + w \/ 10);\n+            int y = (int) (pageFormat.getImageableY() + h \/ 5);\n+\n+            int r = w \/ 4;\n+\n+            Graphics2D g = (Graphics2D) graphics;\n+            g.setColor(SHAPE_COLOR);\n+            g.fillOval(x, y - r, 2 * r, 2 * r);\n+\n+            g.setColor(TEXT_COLOR);\n+            g.setFont(g.getFont().deriveFont(18.0f));\n+            g.drawString(text, x, y);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+\n+    private static boolean isColor(Chromaticity chromaticity) {\n+        if (Chromaticity.MONOCHROME.equals(chromaticity)) {\n+            return false;\n+        } else if (Chromaticity.COLOR.equals(chromaticity)) {\n+            return true;\n+        }\n+        throw new RuntimeException(\"Unsupported chromaticity: \" + chromaticity);\n+    }\n+\n+    private static String getPageColor(Chromaticity chromaticity) {\n+        return isColor(chromaticity) ? \"Color\" : \"Black & White\";\n+    }\n+\n+    private static String getPageText(Chromaticity chromaticity) {\n+        return String.format(\"%s page (test %s chromaticity)\", getPageColor(chromaticity), chromaticity);\n+    }\n+\n+    private static Set<Chromaticity> getSupportedChromaticityAttributes() {\n+        Set<Chromaticity> attributes = new HashSet<>();\n+\n+        PrintService service = PrinterJob.getPrinterJob().getPrintService();\n+        if (service == null) {\n+            return attributes;\n+        }\n+\n+        Object obj = service.getSupportedAttributeValues(Chromaticity.class, null, null);\n+\n+        if (obj instanceof Attribute[]) {\n+            Chromaticity[] attrs = (Chromaticity[]) obj;\n+            Collections.addAll(attributes, attrs);\n+        }\n+\n+        return attributes;\n+    }\n+\n+    private static void pass() {\n+        testCount++;\n+    }\n+\n+    private static void fail(Chromaticity chromaticity) {\n+        System.out.printf(\"Failed test: %s%n\", getPageText(chromaticity));\n+        testPassed = false;\n+    }\n+\n+    private static void runPrint(Chromaticity chromaticity) {\n+        try {\n+            print(chromaticity);\n+        } catch (PrinterException e) {\n+            e.printStackTrace();\n+            fail(chromaticity);\n+        }\n+    }\n+\n+    private static void testPrint(Chromaticity chromaticity, Set<Chromaticity> supportedChromaticities) {\n+\n+        boolean isColor = isColor(chromaticity);\n+        String pageColor = getPageColor(chromaticity);\n+        String pageText = getPageText(chromaticity);\n+\n+        String[] instructions = {\n+                \"Up to \" + testTotalCount + \" tests will run and it will test all chromaticities\",\n+                supportedChromaticities.toString() + \" supported by the printer.\",\n+                \"\",\n+                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n+                \"\",\n+                \"On-screen inspection is not possible for this printing-specific test\",\n+                \"therefore its only output is a \" + pageColor + \" page printed to the printer\",\n+                \"with \" + chromaticity + \" chromaticity.\",\n+                \"To be able to run this test it is required to have a default\",\n+                \"printer configured in your user environment.\",\n+                \"\",\n+                \"Visual inspection of the printed pages is needed.\",\n+                \"\",\n+                \"A passing test will print the \" + pageColor + \" page with\",\n+                isColor\n+                        ? \"a blue '\" + pageText + \"' text and an orange circle.\"\n+                        : \"a black '\" + pageText + \"' text and a circle.\",\n+                \"The test fails if the page is not printed as \" + pageColor + \".\",\n+        };\n+\n+        String title = String.format(\"Print %s page test: %d from %d\",\n+                pageColor, testCount + 1, testTotalCount);\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail(chromaticity);\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            runPrint(chromaticity);\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"Dialog closing\");\n+                fail(chromaticity);\n+            }\n+        });\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/print\/attribute\/ChromaticityAttributeTest.java","additions":281,"deletions":0,"binary":false,"changes":281,"status":"added"}]}