{"files":[{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -43,8 +42,10 @@\n-    public static IOException IOExceptionWithLastError(int errno, String message, Arena arena) {\n-        MemorySegment buf = arena.allocate(ERRNO_STRING_HOLDER_ARRAY_SIZE);\n-        if (errno_h.strerror_r(errno, buf, ERRNO_STRING_HOLDER_ARRAY_SIZE) == 0) {\n-            String errnoMsg = buf.getString(0, StandardCharsets.UTF_8);\n-            return new IOException(message + \" \" + errnoMsg);\n-        } else {\n-            \/\/ failed to convert errno to string - output errno value\n-            return new IOException(message + \" Errno: \" + errno);\n+    public static IOException IOExceptionWithErrnoString(int errno, String message) {\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment buf = arena.allocate(ERRNO_STRING_HOLDER_ARRAY_SIZE);\n+            if (errno_h.strerror_r(errno, buf, ERRNO_STRING_HOLDER_ARRAY_SIZE) == 0) {\n+                String errnoMsg = buf.getString(0, StandardCharsets.UTF_8);\n+                return new IOException(message + \" \" + errnoMsg);\n+            } else {\n+                \/\/ failed to convert errno to string - output errno value\n+                return new IOException(message + \" Errno: \" + errno);\n+            }\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/ffi\/generated\/ErrnoUtils.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,4 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC,\n+                Linker.Option.captureCallState(ERRNO_NAME));\n+\n+        public static final MethodHandle ADAPTED = CaptureStateUtil.adaptSystemCall(HANDLE, ERRNO_NAME);\n@@ -131,1 +134,0 @@\n-        var mh$ = kqueue.HANDLE;\n@@ -133,1 +135,1 @@\n-            return (int)mh$.invokeExact();\n+            return (int) kqueue.ADAPTED.invokeExact();\n@@ -151,1 +153,2 @@\n-        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC,  Linker.Option.captureCallState(ERRNO_NAME));\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC,\n+                Linker.Option.captureCallState(ERRNO_NAME));\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/ffi\/generated\/kqueue\/kqueue_h.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.ffi.util;\n+\n+import java.lang.foreign.*;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+@SuppressWarnings(\"restricted\")\n+public final class FFMUtils {\n+\n+    public static final ValueLayout.OfBoolean C_BOOL =\n+            (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get(\"bool\");\n+\n+    public static final ValueLayout.OfByte C_CHAR =\n+            (ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get(\"char\");\n+\n+    public static final ValueLayout.OfShort C_SHORT =\n+            (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get(\"short\");\n+\n+    public static final ValueLayout.OfInt C_INT =\n+            (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get(\"int\");\n+\n+    public static final ValueLayout.OfLong C_LONG_LONG =\n+            (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long long\");\n+\n+    public static final ValueLayout.OfFloat C_FLOAT =\n+            (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get(\"float\");\n+\n+    public static final ValueLayout.OfDouble C_DOUBLE =\n+            (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get(\"double\");\n+\n+    public static final AddressLayout C_POINTER =\n+            ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get(\"void*\"))\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, C_CHAR));\n+\n+    public static final ValueLayout.OfLong C_LONG =\n+            (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long\");\n+\n+    private FFMUtils() {\n+    }\n+\n+    \/**\n+     * Returns a {@code MemorySegment} set to the size of byteSize\n+     *\n+     * @param byteSize the size in bytes to be allocated\n+     * @param byteAlignment the size in bytes for the memory alignment\n+     *\n+     * @throws IllegalArgumentException if the maxByteAlignment of the created\n+     * MemorySegment is less than the provided byteAlignment\n+     *\n+     * @return the newly created {@code MemorySegment}\n+     *\/\n+    public static MemorySegment malloc(long byteSize, long byteAlignment) {\n+        long allocatedMemory = UNSAFE.allocateMemory(byteSize);\n+        MemorySegment result = MemorySegment.ofAddress(allocatedMemory).reinterpret(byteSize);\n+        if (result.maxByteAlignment() < byteAlignment) {\n+            throw new IllegalArgumentException();\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * Takes a {@code MemorySegment} and deallocates the memory at that address\n+     * @param memorySegment the {@code MemorySegment} that will be deallocated\n+     *\/\n+    public static void free(MemorySegment memorySegment) {\n+        UNSAFE.freeMemory(memorySegment.address());\n+    }\n+\n+    \/\/ SegmentAllocator that delegates to Unsafe for memory allocation\n+    public static final SegmentAllocator SEGMENT_ALLOCATOR = new SegmentAllocator() {\n+        @Override\n+        public MemorySegment allocate(long byteSize, long byteAlignment) {\n+            return malloc(byteSize, byteAlignment);\n+        }\n+    };\n+\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    \/\/ Variables and methods below are extracted from jextract generated\n+    \/\/ code and used by native bindings on all platforms\n+    public static final boolean TRACE_DOWNCALLS = false;\n+    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()\n+            .or(Linker.nativeLinker().defaultLookup());\n+\n+    public static void traceDowncall(String name, Object... args) {\n+        String traceArgs = Arrays.stream(args)\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\", \"));\n+        System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n+    }\n+\n+    public static MemorySegment findOrThrow(String symbol) {\n+        return SYMBOL_LOOKUP.findOrThrow(symbol);\n+    }\n+\n+    public static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n+        try {\n+            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n+        } catch (ReflectiveOperationException ex) {\n+            throw new AssertionError(ex);\n+        }\n+    }\n+\n+    public static MemoryLayout align(MemoryLayout layout, long align) {\n+        return switch (layout) {\n+            case PaddingLayout p -> p;\n+            case ValueLayout v -> v.withByteAlignment(align);\n+            case GroupLayout g -> {\n+                MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n+                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n+                yield g instanceof StructLayout ?\n+                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n+            }\n+            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n+        };\n+    }\n+}\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/ffi\/util\/FFMUtils.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.ffi.generated.errno.errno_h;\n@@ -48,1 +47,0 @@\n-    private static final int KQUEUE_ERROR_VALUE = -1;\n@@ -154,2 +152,2 @@\n-                    throw ErrnoUtils.IOExceptionWithLastError(-result,\n-                            \"kqueue failed.\", arena);\n+                    throw ErrnoUtils.IOExceptionWithErrnoString(-result,\n+                            \"kqueue failed.\");\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueue.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.ffi.generated.*;\n@@ -44,1 +45,6 @@\n-        this.kqfd = kqueue_h.kqueue();\n+        int res = kqueue_h.kqueue();\n+        if (res < 0) {\n+            throw ErrnoUtils.IOExceptionWithErrnoString(-res,\n+                    \"kqueue failed\");\n+        }\n+        this.kqfd = res;\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueuePoller.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.ffi.generated.*;\n@@ -91,2 +92,6 @@\n-\n-        this.kqfd = kqueue_h.kqueue();\n+        int res = kqueue_h.kqueue();\n+        if (res < 0) {\n+            throw ErrnoUtils.IOExceptionWithErrnoString(-res,\n+                    \"kqueue failed\");\n+        }\n+        this.kqfd = res;\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueuePort.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.ffi.generated.*;\n@@ -83,2 +84,6 @@\n-\n-        this.kqfd = kqueue_h.kqueue();\n+        int res = kqueue_h.kqueue();\n+        if (res < 0) {\n+            throw ErrnoUtils.IOExceptionWithErrnoString(-res,\n+                    \"kqueue failed\");\n+        }\n+        this.kqfd = res;\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueueSelectorImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.ffi.util;\n-\n-\n-import java.lang.foreign.*;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.util.Arrays;\n-import java.util.stream.Collectors;\n-\n-import jdk.internal.misc.Unsafe;\n-\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-\n-@SuppressWarnings(\"restricted\")\n-public final class FFMUtils {\n-\n-    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n-    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n-    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n-    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n-    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n-    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n-            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));\n-    public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get(\"long\");\n-    private FFMUtils() {\n-    }\n-\n-    \/**\n-     * Returns a {@code MemorySegment} set to the size of byteSize\n-     *\n-     * @param byteSize the size in bytes to be allocated\n-     * @param byteAlignment the size in bytes for the memory alignment\n-     *\n-     * @throws IllegalArgumentException if the maxByteAlignment of the created\n-     * MemorySegment is less than the provided byteAlignment\n-     *\n-     * @return the newly created {@code MemorySegment}\n-     *\/\n-    public static MemorySegment malloc(long byteSize, long byteAlignment) {\n-        long allocatedMemory = UNSAFE.allocateMemory(byteSize);\n-        MemorySegment result = MemorySegment.ofAddress(allocatedMemory).reinterpret(byteSize);\n-        if (result.maxByteAlignment() < byteAlignment) {\n-            throw new IllegalArgumentException();\n-        }\n-        return result;\n-    }\n-\n-    \/**\n-     * Takes a {@code MemorySegment} and deallocates the memory at that address\n-     * @param memorySegment the {@code MemorySegment} that will be deallocated\n-     *\/\n-    public static void free(MemorySegment memorySegment) {\n-        UNSAFE.freeMemory(memorySegment.address());\n-    }\n-\n-    \/\/ SegmentAllocator that delegates to Unsafe for memory allocation\n-    public static final SegmentAllocator SEGMENT_ALLOCATOR = new SegmentAllocator() {\n-        @Override\n-        public MemorySegment allocate(long byteSize, long byteAlignment) {\n-            return malloc(byteSize, byteAlignment);\n-        }\n-    };\n-\n-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n-\n-    \/\/ Variables and methods below are extracted from jextract generated\n-    \/\/ code and used by native bindings on all platforms\n-    public static final boolean TRACE_DOWNCALLS = false;\n-    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()\n-            .or(Linker.nativeLinker().defaultLookup());\n-\n-    public static void traceDowncall(String name, Object... args) {\n-        String traceArgs = Arrays.stream(args)\n-                .map(Object::toString)\n-                .collect(Collectors.joining(\", \"));\n-        System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n-    }\n-\n-    public static MemorySegment findOrThrow(String symbol) {\n-        return SYMBOL_LOOKUP.findOrThrow(symbol);\n-    }\n-\n-    public static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n-        try {\n-            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n-        } catch (ReflectiveOperationException ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-    public static MemoryLayout align(MemoryLayout layout, long align) {\n-        return switch (layout) {\n-            case PaddingLayout p -> p;\n-            case ValueLayout v -> v.withByteAlignment(align);\n-            case GroupLayout g -> {\n-                MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n-                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n-                yield g instanceof StructLayout ?\n-                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n-            }\n-            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n-        };\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ffi\/util\/FFMUtils.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"}]}