{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -743,1 +742,1 @@\n-            var sizeString = GetPropertyAction.privilegedGetProperty(propertyName, \"16\");\n+            var sizeString = System.getProperty(propertyName, \"16\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -91,1 +90,1 @@\n-            \"true\".equals(GetPropertyAction.privilegedGetProperty(\"stackwalk.debug\"));\n+            \"true\".equals(System.getProperty(\"stackwalk.debug\"));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackStreamFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -807,1 +806,1 @@\n-        String propValue = GetPropertyAction.privilegedGetProperty(\"jdk.traceVirtualThreadLocals\");\n+        String propValue = System.getProperty(\"jdk.traceVirtualThreadLocals\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadLocal.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -710,1 +709,0 @@\n-        Properties props = GetPropertyAction.privilegedGetProperties();\n@@ -712,1 +710,1 @@\n-                props.getProperty(\"java.lang.invoke.MethodHandleNatives.USE_SOFT_CACHE\", \"true\"));\n+                System.getProperty(\"java.lang.invoke.MethodHandleNatives.USE_SOFT_CACHE\", \"true\"));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -54,1 +53,1 @@\n-        String value = GetPropertyAction.privilegedGetProperty(\"jdk.preserveScopedValueCache\");\n+        String value = System.getProperty(\"jdk.preserveScopedValueCache\");\n@@ -506,1 +505,1 @@\n-        String value = GetPropertyAction.privilegedGetProperty(property);\n+        String value = System.getProperty(property);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/Continuation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -55,1 +54,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(\"jdk.trackAllThreads\");\n+        String s = System.getProperty(\"jdk.trackAllThreads\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadContainers.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,163 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.Properties;\n-\n-\/**\n- * A convenience class for retrieving the string value of a system\n- * property as a privileged action.\n- *\n- * <p>An instance of this class can be used as the argument of\n- * <code>AccessController.doPrivileged<\/code>.\n- *\n- * <p>The following code retrieves the value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action:\n- *\n- * <pre>\n- * String s = java.security.AccessController.doPrivileged\n- *                      (new GetPropertyAction(\"prop\"));\n- * <\/pre>\n- *\n- * @author Roland Schemers\n- * @see java.security.PrivilegedAction\n- * @see java.security.AccessController\n- * @since 1.2\n- *\/\n-\n-public class GetPropertyAction implements PrivilegedAction<String> {\n-    private final String theProp;\n-    private final String defaultVal;\n-\n-    \/**\n-     * Constructor that takes the name of the system property whose\n-     * string value needs to be determined.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    public GetPropertyAction(String theProp) {\n-        this.theProp = theProp;\n-        this.defaultVal = null;\n-    }\n-\n-    \/**\n-     * Constructor that takes the name of the system property and the default\n-     * value of that property.\n-     *\n-     * @param theProp the name of the system property.\n-     * @param defaultVal the default value.\n-     *\/\n-    public GetPropertyAction(String theProp, String defaultVal) {\n-        this.theProp = theProp;\n-        this.defaultVal = defaultVal;\n-    }\n-\n-    \/**\n-     * Determines the string value of the system property whose\n-     * name was specified in the constructor.\n-     *\n-     * @return the string value of the system property,\n-     *         or the default value if there is no property with that key.\n-     *\/\n-    public String run() {\n-        String value = System.getProperty(theProp);\n-        return (value == null) ? defaultVal : value;\n-    }\n-\n-    \/**\n-     * Convenience method to get a property without going through doPrivileged\n-     * if no security manager is present. This is unsafe for inclusion in a\n-     * public API but allowable here since this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action using caller-provided\n-     * inputs. The caller of this method should take care to ensure that the\n-     * inputs are not tainted and the returned property is not made accessible\n-     * to untrusted code if it contains sensitive information.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static String privilegedGetProperty(String theProp) {\n-        if (System.getSecurityManager() == null) {\n-            return System.getProperty(theProp);\n-        } else {\n-            return AccessController.doPrivileged(\n-                    new GetPropertyAction(theProp));\n-        }\n-    }\n-\n-    \/**\n-     * Convenience method to get a property without going through doPrivileged\n-     * if no security manager is present. This is unsafe for inclusion in a\n-     * public API but allowable here since this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action using caller-provided\n-     * inputs. The caller of this method should take care to ensure that the\n-     * inputs are not tainted and the returned property is not made accessible\n-     * to untrusted code if it contains sensitive information.\n-     *\n-     * @param theProp the name of the system property.\n-     * @param defaultVal the default value.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static String privilegedGetProperty(String theProp,\n-            String defaultVal) {\n-        if (System.getSecurityManager() == null) {\n-            return System.getProperty(theProp, defaultVal);\n-        } else {\n-            return AccessController.doPrivileged(\n-                    new GetPropertyAction(theProp, defaultVal));\n-        }\n-    }\n-\n-    \/**\n-     * Convenience method to call <code>System.getProperties<\/code> without\n-     * having to go through doPrivileged if no security manager is present.\n-     * This is unsafe for inclusion in a public API but allowable here since\n-     * this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action, and callers of\n-     * this method should take care to ensure that the returned properties\n-     * are not made accessible to untrusted code since it may contain\n-     * sensitive information.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static Properties privilegedGetProperties() {\n-        if (System.getSecurityManager() == null) {\n-            return System.getProperties();\n-        } else {\n-            return AccessController.doPrivileged(\n-                    new PrivilegedAction<Properties>() {\n-                        public Properties run() {\n-                            return System.getProperties();\n-                        }\n-                    }\n-            );\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/GetPropertyAction.java","additions":0,"deletions":163,"binary":false,"changes":163,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -149,2 +148,1 @@\n-        String prop = GetPropertyAction\n-                .privilegedGetProperty(\"jdk.calendar.japanese.supplemental.era\");\n+        String prop = System.getProperty(\"jdk.calendar.japanese.supplemental.era\");\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/LocalGregorianCalendar.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -118,1 +117,1 @@\n-        String order = GetPropertyAction.privilegedGetProperty(\"java.locale.providers\");\n+        String order = System.getProperty(\"java.locale.providers\");\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleProviderAdapter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -902,1 +901,1 @@\n-        GetPropertyAction.privilegedGetProperty(\"locale.resources.debug\", \"false\"));\n+        System.getProperty(\"locale.resources.debug\", \"false\"));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleResources.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}