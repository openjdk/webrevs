{"files":[{"patch":"@@ -47,6 +47,1 @@\n-  add(c);\n-}\n-\n-void G1CSetCandidateGroup::add(G1CollectionSetCandidateInfo& hr_info) {\n-  G1HeapRegion* hr = hr_info._r;\n-  _candidates.append(hr_info);\n+  _candidates.append(c);\n@@ -137,25 +132,0 @@\n-int G1CollectionSetCandidateInfo::compare_region_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2) {\n-  \/\/ Make sure that null entries are moved to the end.\n-  if (ci1->_r == nullptr) {\n-    if (ci2->_r == nullptr) {\n-      return 0;\n-    } else {\n-      return 1;\n-    }\n-  } else if (ci2->_r == nullptr) {\n-    return -1;\n-  }\n-\n-  G1Policy* p = G1CollectedHeap::heap()->policy();\n-  double gc_efficiency1 = p->predict_gc_efficiency(ci1->_r);\n-  double gc_efficiency2 = p->predict_gc_efficiency(ci2->_r);\n-\n-  if (gc_efficiency1 > gc_efficiency2) {\n-    return -1;\n-  } else if (gc_efficiency1 < gc_efficiency2) {\n-    return 1;\n-  } else {\n-    return 0;\n-  }\n-}\n-\n@@ -283,3 +253,3 @@\n-void G1CollectionSetCandidates::set_candidates_from_marking(G1CollectionSetCandidateInfo* candidate_infos,\n-                                                            uint num_infos) {\n-  if (num_infos == 0) {\n+void G1CollectionSetCandidates::set_candidates_from_marking(G1HeapRegion** candidates,\n+                                                            uint num_candidates) {\n+  if (num_candidates == 0) {\n@@ -298,1 +268,1 @@\n-  uint group_limit = p->calc_min_old_cset_length(num_infos);\n+  uint group_limit = p->calc_min_old_cset_length(num_candidates);\n@@ -307,2 +277,2 @@\n-  for (uint i = 0; i < num_infos; i++) {\n-    G1HeapRegion* r = candidate_infos[i]._r;\n+  for (uint i = 0; i < num_candidates; i++) {\n+    G1HeapRegion* r = candidates[i];\n@@ -322,1 +292,1 @@\n-    current->add(candidate_infos[i]);\n+    current->add(r);\n@@ -328,1 +298,1 @@\n-  assert(_from_marking_groups.num_regions() == num_infos, \"Must be!\");\n+  assert(_from_marking_groups.num_regions() == num_candidates, \"Must be!\");\n@@ -330,2 +300,2 @@\n-  log_debug(gc, ergo, cset) (\"Finished creating %u collection groups from %u regions\", _from_marking_groups.length(), num_infos);\n-  _last_marking_candidates_length = num_infos;\n+  log_debug(gc, ergo, cset) (\"Finished creating %u collection groups from %u regions\", _from_marking_groups.length(), num_candidates);\n+  _last_marking_candidates_length = num_candidates;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":11,"deletions":41,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-\n-  static int compare_region_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2);\n@@ -94,1 +92,0 @@\n-  void add(G1CollectionSetCandidateInfo& hr_info);\n@@ -238,1 +235,1 @@\n-  \/\/ Merge collection set candidates from marking into the current marking list\n+  \/\/ Merge collection set candidates from marking into the current marking candidates\n@@ -240,2 +237,2 @@\n-  void set_candidates_from_marking(G1CollectionSetCandidateInfo* candidate_infos,\n-                                   uint num_infos);\n+  void set_candidates_from_marking(G1HeapRegion** candidates,\n+                                   uint num_candidates);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n-\/\/ whether they should be a collection set candidate, calculate their efficiency,\n-\/\/ sort and put them into the candidates.\n+\/\/ whether they should be a collection set candidate. Calculate their efficiency,\n+\/\/ sort, and put them into the collection set candidates.\n+\/\/\n@@ -40,3 +41,0 @@\n-\n-  using CandidateInfo = G1CollectionSetCandidateInfo;\n-\n@@ -50,1 +48,0 @@\n-\n@@ -54,1 +51,1 @@\n-    CandidateInfo* _data;\n+    G1HeapRegion** _data;\n@@ -58,0 +55,27 @@\n+    static int compare_region_gc_efficiency(G1HeapRegion** rr1, G1HeapRegion** rr2) {\n+      G1HeapRegion* r1 = *rr1;\n+      G1HeapRegion* r2 = *rr2;\n+      \/\/ Make sure that null entries are moved to the end.\n+      if (r1 == nullptr) {\n+        if (r2 == nullptr) {\n+          return 0;\n+        } else {\n+          return 1;\n+        }\n+      } else if (r2 == nullptr) {\n+        return -1;\n+      }\n+\n+      G1Policy* p = G1CollectedHeap::heap()->policy();\n+      double gc_efficiency1 = p->predict_gc_efficiency(r1);\n+      double gc_efficiency2 = p->predict_gc_efficiency(r2);\n+\n+      if (gc_efficiency1 > gc_efficiency2) {\n+        return -1;\n+      } else if (gc_efficiency1 < gc_efficiency2) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+\n@@ -71,1 +95,1 @@\n-      _data(NEW_C_HEAP_ARRAY(CandidateInfo, _max_size, mtGC)),\n+      _data(NEW_C_HEAP_ARRAY(G1HeapRegion*, _max_size, mtGC)),\n@@ -74,1 +98,1 @@\n-        _data[i] = CandidateInfo();\n+        _data[i] = nullptr;\n@@ -79,1 +103,1 @@\n-      FREE_C_HEAP_ARRAY(CandidateInfo, _data);\n+      FREE_C_HEAP_ARRAY(G1HeapRegion*, _data);\n@@ -95,2 +119,2 @@\n-      assert(_data[idx]._r == nullptr, \"Value must not have been set.\");\n-      _data[idx] = CandidateInfo(hr);\n+      assert(_data[idx] == nullptr, \"Value must not have been set.\");\n+      _data[idx] = hr;\n@@ -104,1 +128,1 @@\n-        assert(_data[i]._r == nullptr, \"must be\");\n+        assert(_data[i] == nullptr, \"must be\");\n@@ -106,1 +130,1 @@\n-      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)G1CollectionSetCandidateInfo::compare_region_gc_efficiency);\n+      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)compare_region_gc_efficiency);\n@@ -108,1 +132,1 @@\n-        assert(_data[i]._r == nullptr, \"must be\");\n+        assert(_data[i] == nullptr, \"must be\");\n@@ -112,1 +136,1 @@\n-    CandidateInfo* array() const { return _data; }\n+    G1HeapRegion** array() const { return _data; }\n@@ -196,1 +220,1 @@\n-  void prune(CandidateInfo* data) {\n+  void prune(G1HeapRegion** data) {\n@@ -214,1 +238,1 @@\n-      G1HeapRegion* r = data[num_candidates - num_pruned - 1]._r;\n+      G1HeapRegion* r = data[num_candidates - num_pruned - 1];\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":42,"deletions":18,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-public:\n@@ -46,0 +45,1 @@\n+public:\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}