{"files":[{"patch":"@@ -396,0 +396,2 @@\n+  void check_key_offset(Register key, int offset, int load_size);\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1762,0 +1762,14 @@\n+\/\/ Check incoming byte offset against the int[] len. key is the pointer to the int[0].\n+\/\/ This check happens often, so it is important for it to be very compact.\n+void StubGenerator::check_key_offset(Register key, int offset, int load_size) {\n+#ifdef ASSERT\n+  Address key_length(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT));\n+  assert((offset + load_size) % 4 == 0, \"Alignment is good: %d + %d\", offset, load_size);\n+  int end_offset = (offset + load_size) \/ 4;\n+  Label L_good;\n+  __ cmpl(key_length, end_offset);\n+  __ jccb(Assembler::greaterEqual, L_good);\n+  __ hlt();\n+  __ bind(L_good);\n+#endif\n+}\n@@ -1765,0 +1779,1 @@\n+  check_key_offset(key, offset, 16);\n@@ -1770,0 +1785,1 @@\n+  check_key_offset(key, offset, 16);\n@@ -1775,0 +1791,1 @@\n+  check_key_offset(key, offset, 16);\n@@ -1781,0 +1798,1 @@\n+  check_key_offset(key, offset, 16);\n@@ -3208,1 +3226,0 @@\n-  ev_load_key(AESKEY2, key, 11 * 16, rbx);\n@@ -3214,0 +3231,1 @@\n+  ev_load_key(AESKEY2, key, 11 * 16, rbx);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}