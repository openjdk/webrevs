{"files":[{"patch":"@@ -1567,1 +1567,4 @@\n-  Label L_by16_loop, L_vector_entry, L_unroll_loop, L_unroll_loop_entry, L_by4, L_by4_loop, L_by1, L_by1_loop, L_exit;\n+  Label L_vector_entry,\n+        L_unroll_loop,\n+        L_by4_loop_entry, L_by4_loop,\n+        L_by1_loop, L_exit;\n@@ -1588,2 +1591,0 @@\n-  subw(len, len, unroll_words);\n-  bge(len, zr, L_unroll_loop_entry);\n@@ -1591,5 +1592,4 @@\n-  addiw(len, len, unroll_words-4);\n-  bge(len, zr, L_by4_loop);\n-  addiw(len, len, 4);\n-  bgt(len, zr, L_by1_loop);\n-  j(L_exit);\n+  mv(tmp1, unroll_words);\n+  blt(len, tmp1, L_by4_loop_entry);\n+\n+  const Register loop_buf_end = tmp3;\n@@ -1598,3 +1598,2 @@\n-  bind(L_unroll_loop_entry);\n-    const Register buf_end = tmp3;\n-    add(buf_end, buf, len); \/\/ buf_end will be used as endpoint for loop below\n+  \/\/ Entry for L_unroll_loop\n+    add(loop_buf_end, buf, len);    \/\/ loop_buf_end will be used as endpoint for loop below\n@@ -1602,1 +1601,1 @@\n-    sub(len, len, unroll_words); \/\/ Length after all iterations\n+    sub(loop_buf_end, loop_buf_end, len);\n@@ -1611,7 +1610,8 @@\n-    ble(buf, buf_end, L_unroll_loop);\n-    addiw(len, len, unroll_words-4);\n-    bge(len, zr, L_by4_loop);\n-    addiw(len, len, 4);\n-    bgt(len, zr, L_by1_loop);\n-    j(L_exit);\n-\n+    blt(buf, loop_buf_end, L_unroll_loop);\n+\n+  bind(L_by4_loop_entry);\n+    mv(tmp1, 4);\n+    blt(len, tmp1, L_by1_loop);\n+    add(loop_buf_end, buf, len); \/\/ loop_buf_end will be used as endpoint for loop below\n+    andi(len, len, 3);\n+    sub(loop_buf_end, loop_buf_end, len);\n@@ -1621,1 +1621,0 @@\n-    subw(len, len, 4);\n@@ -1623,3 +1622,1 @@\n-    bge(len, zr, L_by4_loop);\n-    addiw(len, len, 4);\n-    ble(len, zr, L_exit);\n+    blt(buf, loop_buf_end, L_by4_loop);\n@@ -1628,0 +1625,2 @@\n+    beqz(len, L_exit);\n+\n@@ -1632,1 +1631,1 @@\n-    ble(len, zr, L_exit);\n+    beqz(len, L_exit);\n@@ -1638,1 +1637,1 @@\n-    ble(len, zr, L_exit);\n+    beqz(len, L_exit);\n@@ -1644,5 +1643,0 @@\n-    ble(len, zr, L_exit);\n-\n-    srli(tmp2, tmp1, 24);\n-    andi(tmp2, tmp2, right_8_bits);\n-    update_byte_crc32(crc, tmp2, table0);\n@@ -1653,1 +1647,2 @@\n-    j(L_exit); \/\/ only need to jump exit when UseRVV == true, it's a jump from end of block `L_by1_loop`.\n+    \/\/ only need to jump exit when UseRVV == true, it's a jump from end of block `L_by1_loop`.\n+    j(L_exit);\n@@ -1658,4 +1653,1 @@\n-    addiw(len, len, -4);\n-    bge(len, zr, L_by4_loop);\n-    addiw(len, len, 4);\n-    bgt(len, zr, L_by1_loop);\n+    bgtz(len, L_by4_loop_entry);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":27,"deletions":35,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -6095,0 +6095,1 @@\n+    \/\/ input parameters\n@@ -6098,11 +6099,0 @@\n-    const Register table0 = c_rarg3;  \/\/ crc_table address\n-    const Register table1 = c_rarg4;\n-    const Register table2 = c_rarg5;\n-    const Register table3 = c_rarg6;\n-\n-    const Register tmp1 = c_rarg7;\n-    const Register tmp2 = t2;\n-    const Register tmp3 = x28; \/\/ t3\n-    const Register tmp4 = x29; \/\/ t4\n-    const Register tmp5 = x30; \/\/ t5\n-    const Register tmp6 = x31; \/\/ t6\n@@ -6113,2 +6103,3 @@\n-    __ kernel_crc32(crc, buf, len, table0, table1, table2,\n-                    table3, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n+    __ kernel_crc32(crc, buf, len,\n+                    c_rarg3, c_rarg4, c_rarg5, c_rarg6, \/\/ tmp's for tables\n+                    c_rarg7, t2, x28, x29, x30, x31);   \/\/ misc tmps\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"}]}