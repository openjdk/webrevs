{"files":[{"patch":"@@ -105,0 +105,6 @@\n+        @Test\n+        @ParameterSupplier\n+        public void testDates2(LocalDate v) {\n+            recordTestCase(v);\n+        }\n+\n@@ -118,1 +124,3 @@\n-                    \"().testDates(2056-07-11)\"\n+                    \"().testDates(2056-07-11)\",\n+                    \"().testDates2(2028-05-05)\",\n+                    \"().testDates2(2028-07-11)\"\n@@ -128,0 +136,14 @@\n+\n+        public static Collection<Object[]> testDates2() {\n+            return List.of(new Object[][] {\n+                { LocalDate.parse(\"2028-05-05\") },\n+                { LocalDate.parse(\"2028-07-11\") },\n+            });\n+        }\n+\n+        public static void testDates2(Object unused) {\n+        }\n+\n+        public int testNoArg(int v) {\n+            return 0;\n+        }\n@@ -316,0 +338,1 @@\n+        final List<String> log;\n@@ -317,1 +340,1 @@\n-            Main.main(TestBuilder.build().workDirRoot(workDir), args);\n+            log = captureJPackageTestLog(() -> Main.main(TestBuilder.build().workDirRoot(workDir), args));\n@@ -322,0 +345,12 @@\n+\n+            \/\/ Redundant, but needed to suppress \"The local variable log may not have been initialized\" error.\n+            throw new RuntimeException(t);\n+        }\n+\n+        final var actualTestCount = Integer.parseInt(log.stream().dropWhile(line -> {\n+            return !(line.startsWith(\"[==========]\") && line.endsWith(\"tests ran\"));\n+        }).findFirst().orElseThrow().split(\" \")[1]);\n+\n+        if (actualTestCount != expectedTestDescs.size()) {\n+            throw new AssertionError(String.format(\n+                    \"Expected %d executed tests. Actual %d executed tests\", expectedTestDescs.size(), actualTestCount));\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/AnnotationsTest.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        String value();\n+        String value() default \"\";\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Annotations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,2 +252,3 @@\n-    private Stream<String> cmdLineArgValueToMethodNames(String v) {\n-        List<String> result = new ArrayList<>();\n+    private Stream<Method> getJavaMethodsFromArg(String argValue) {\n+        final List<Method> methods = new ArrayList<>();\n+\n@@ -255,1 +256,1 @@\n-        for (String token : v.split(\",\")) {\n+        for (String token : argValue.split(\",\")) {\n@@ -266,1 +267,1 @@\n-                result.addAll(Stream.of(testSet.getMethods())\n+                methods.addAll(Stream.of(testSet.getMethods())\n@@ -269,2 +270,0 @@\n-                        .map(Method::getName).distinct()\n-                        .map(name -> String.join(\".\", token, name))\n@@ -286,1 +285,1 @@\n-            result.add(qualifiedMethodName);\n+            methods.addAll(getJavaMethodFromString(qualifiedMethodName));\n@@ -288,1 +287,3 @@\n-        return result.stream();\n+\n+        trace(String.format(\"%s -> %s\", argValue, methods));\n+        return methods.stream();\n@@ -305,8 +306,0 @@\n-    private Stream<Method> getJavaMethodsFromArg(String argValue) {\n-        var methods = cmdLineArgValueToMethodNames(argValue)\n-                .map(this::getJavaMethodFromString)\n-                .flatMap(List::stream).toList();\n-        trace(String.format(\"%s -> %s\", argValue, methods));\n-        return methods.stream();\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestBuilder.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -259,1 +259,6 @@\n-        final var supplierFuncName = a.value();\n+        final String supplierFuncName;\n+        if (a.value().isEmpty()) {\n+            supplierFuncName = exec.getName();\n+        } else {\n+            supplierFuncName = a.value();\n+        }\n@@ -262,1 +267,1 @@\n-        if (!a.value().contains(\".\")) {\n+        if (!supplierFuncName.contains(\".\")) {\n@@ -264,1 +269,1 @@\n-            methodQuery = new MethodQuery(execClass.getName(), a.value());\n+            methodQuery = new MethodQuery(execClass.getName(), supplierFuncName);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestMethodSupplier.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}