{"files":[{"patch":"@@ -416,5 +416,5 @@\n-  int payload_start = arrayOopDesc::base_offset_in_bytes(T_INT);\n-  if (!is_aligned(payload_start, HeapWordSize)) {\n-    assert(is_aligned(payload_start, BytesPerInt), \"base offset must be 32-bit-aligned\");\n-    *(reinterpret_cast<juint*>(start) + (payload_start \/ BytesPerInt)) = value;\n-    payload_start += BytesPerInt;\n+  int payload_offset = arrayOopDesc::base_offset_in_bytes(T_INT);\n+  if (!is_aligned(payload_offset, HeapWordSize)) {\n+    assert(is_aligned(payload_offset, BytesPerInt), \"base offset must be 32-bit-aligned\");\n+    *(reinterpret_cast<juint*>(start) + (payload_offset \/ BytesPerInt)) = value;\n+    payload_offset += BytesPerInt;\n@@ -422,4 +422,4 @@\n-  assert(is_aligned(payload_start, HeapWordSize), \"payload start must be heap word aligned\");\n-  int payload_start_in_words = payload_start \/ HeapWordSize;\n-  Copy::fill_to_words(start + payload_start_in_words,\n-                      words - payload_start_in_words, value);\n+  assert(is_aligned(payload_offset, HeapWordSize), \"payload start must be heap word aligned\");\n+  int payload_offset_in_words = payload_offset \/ HeapWordSize;\n+  Copy::fill_to_words(start + payload_offset_in_words,\n+                      words - payload_offset_in_words, value);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}