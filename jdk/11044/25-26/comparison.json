{"files":[{"patch":"@@ -197,1 +197,1 @@\n-  const int hdr_size_in_bytes = instanceOopDesc::header_size() * HeapWordSize;\n+  const int hdr_size_in_bytes = instanceOopDesc::base_offset_in_bytes();\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-  if (value > ((uint64_t)ThreadLocalAllocBuffer::max_size() * HeapWordSize)) {\n+  if (value \/ HeapWordSize > ThreadLocalAllocBuffer::max_size()) {\n@@ -342,3 +342,3 @@\n-                        \"MinTLABSize (\" SIZE_FORMAT \") must be \"\n-                        \"less than or equal to ergonomic TLAB maximum (\" UINT64_FORMAT \")\\n\",\n-                        value, (uint64_t)ThreadLocalAllocBuffer::max_size() * HeapWordSize);\n+                        \"MinTLABSize (\" SIZE_FORMAT \" bytes) must be \"\n+                        \"less than or equal to ergonomic TLAB maximum (\" SIZE_FORMAT \" words)\\n\",\n+                        value, ThreadLocalAllocBuffer::max_size());\n@@ -360,1 +360,1 @@\n-    if (value > ((uint64_t)ThreadLocalAllocBuffer::max_size() * HeapWordSize)) {\n+    if (value \/ HeapWordSize > ThreadLocalAllocBuffer::max_size()) {\n@@ -362,3 +362,3 @@\n-                          \"TLABSize (\" SIZE_FORMAT \") must be \"\n-                          \"less than or equal to ergonomic TLAB maximum size (\" UINT64_FORMAT \")\\n\",\n-                          value, (uint64_t)ThreadLocalAllocBuffer::max_size() * HeapWordSize);\n+                          \"TLABSize (\" SIZE_FORMAT \" bytes) must be \"\n+                          \"less than or equal to ergonomic TLAB maximum size (\" SIZE_FORMAT \" words)\\n\",\n+                          value, ThreadLocalAllocBuffer::max_size());\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -116,1 +116,0 @@\n-  static size_t max_size_in_bytes()              { return max_size() * BytesPerWord; }\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-         \"total array size in bytes must not overflow signed int: max_elements_per_size_t\");\n+         \"total array size in words must not overflow signed int: \" SIZE_FORMAT, max_elements_per_size_t);\n","filename":"src\/hotspot\/share\/oops\/arrayOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    \/\/ Use only if top > start && used_bytes <= max_tlab_size_bytes.\n+    \/\/ Use only if top > start && used_words <= max_tlab_size_words.\n@@ -48,3 +48,3 @@\n-    const size_t used_bytes = pointer_delta(top, start, 1);\n-    if (used_bytes <= ThreadLocalAllocBuffer::max_size_in_bytes()) {\n-      \/\/ Comparing used_bytes with the maximum allowed size will ensure\n+    const size_t used_words = pointer_delta(top, start);\n+    if (used_words <= ThreadLocalAllocBuffer::max_size()) {\n+      \/\/ Comparing used_words with the maximum allowed size will ensure\n@@ -55,1 +55,1 @@\n-      return allocated_bytes + used_bytes;\n+      return allocated_bytes + used_words * HeapWordSize;\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}