{"files":[{"patch":"@@ -272,15 +272,0 @@\n-void BarrierSetAssembler::incr_allocated_bytes(MacroAssembler* masm,\n-                                               Register var_size_in_bytes,\n-                                               int con_size_in_bytes,\n-                                               Register t1) {\n-  assert(t1->is_valid(), \"need temp reg\");\n-\n-  __ ldr(t1, Address(rthread, in_bytes(JavaThread::allocated_bytes_offset())));\n-  if (var_size_in_bytes->is_valid()) {\n-    __ add(t1, t1, var_size_in_bytes);\n-  } else {\n-    __ add(t1, t1, con_size_in_bytes);\n-  }\n-  __ str(t1, Address(rthread, in_bytes(JavaThread::allocated_bytes_offset())));\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,5 +47,0 @@\n-private:\n-  void incr_allocated_bytes(MacroAssembler* masm,\n-                            Register var_size_in_bytes, int con_size_in_bytes,\n-                            Register t1 = noreg);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -162,40 +162,0 @@\n-void BarrierSetAssembler::incr_allocated_bytes(MacroAssembler* masm, RegisterOrConstant size_in_bytes, Register tmp) {\n-  \/\/ Bump total bytes allocated by this thread\n-  Label done;\n-\n-  \/\/ Borrow the Rthread for alloc counter\n-  Register Ralloc = Rthread;\n-  __ add(Ralloc, Ralloc, in_bytes(JavaThread::allocated_bytes_offset()));\n-  __ ldr(tmp, Address(Ralloc));\n-  __ adds(tmp, tmp, size_in_bytes);\n-  __ str(tmp, Address(Ralloc), cc);\n-  __ b(done, cc);\n-\n-  \/\/ Increment the high word and store single-copy atomically (that is an unlikely scenario on typical embedded systems as it means >4GB has been allocated)\n-  \/\/ To do so ldrd\/strd instructions used which require an even-odd pair of registers. Such a request could be difficult to satisfy by\n-  \/\/ allocating those registers on a higher level, therefore the routine is ready to allocate a pair itself.\n-  Register low, high;\n-  \/\/ Select ether R0\/R1 or R2\/R3\n-\n-  if (size_in_bytes.is_register() && (size_in_bytes.as_register() == R0 || size_in_bytes.as_register() == R1)) {\n-    low = R2;\n-    high  = R3;\n-  } else {\n-    low = R0;\n-    high  = R1;\n-  }\n-  __ push(RegisterSet(low, high));\n-\n-  __ ldrd(low, Address(Ralloc));\n-  __ adds(low, low, size_in_bytes);\n-  __ adc(high, high, 0);\n-  __ strd(low, Address(Ralloc));\n-\n-  __ pop(RegisterSet(low, high));\n-\n-  __ bind(done);\n-\n-  \/\/ Unborrow the Rthread\n-  __ sub(Rthread, Ralloc, in_bytes(JavaThread::allocated_bytes_offset()));\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -43,6 +43,0 @@\n-private:\n-  void incr_allocated_bytes(MacroAssembler* masm,\n-    RegisterOrConstant size_in_bytes,\n-    Register           tmp\n-);\n-\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2212,3 +2212,0 @@\n-void MacroAssembler::incr_allocated_bytes(RegisterOrConstant size_in_bytes, Register t1, Register t2) {\n-  unimplemented(\"incr_allocated_bytes\");\n-}\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -629,1 +629,0 @@\n-  void incr_allocated_bytes(RegisterOrConstant size_in_bytes, Register t1, Register t2);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -214,15 +214,0 @@\n-void BarrierSetAssembler::incr_allocated_bytes(MacroAssembler* masm,\n-                                               Register var_size_in_bytes,\n-                                               int con_size_in_bytes,\n-                                               Register tmp1) {\n-  assert(tmp1->is_valid(), \"need temp reg\");\n-\n-  __ ld(tmp1, Address(xthread, in_bytes(JavaThread::allocated_bytes_offset())));\n-  if (var_size_in_bytes->is_valid()) {\n-    __ add(tmp1, tmp1, var_size_in_bytes);\n-  } else {\n-    __ add(tmp1, tmp1, con_size_in_bytes);\n-  }\n-  __ sd(tmp1, Address(xthread, in_bytes(JavaThread::allocated_bytes_offset())));\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -48,5 +48,0 @@\n-private:\n-  void incr_allocated_bytes(MacroAssembler* masm,\n-                            Register var_size_in_bytes, int con_size_in_bytes,\n-                            Register t1 = noreg);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -355,30 +355,0 @@\n-void BarrierSetAssembler::incr_allocated_bytes(MacroAssembler* masm, Register thread,\n-                                               Register var_size_in_bytes,\n-                                               int con_size_in_bytes,\n-                                               Register t1) {\n-  if (!thread->is_valid()) {\n-#ifdef _LP64\n-    thread = r15_thread;\n-#else\n-    assert(t1->is_valid(), \"need temp reg\");\n-    thread = t1;\n-    __ get_thread(thread);\n-#endif\n-  }\n-\n-#ifdef _LP64\n-  if (var_size_in_bytes->is_valid()) {\n-    __ addq(Address(thread, in_bytes(JavaThread::allocated_bytes_offset())), var_size_in_bytes);\n-  } else {\n-    __ addq(Address(thread, in_bytes(JavaThread::allocated_bytes_offset())), con_size_in_bytes);\n-  }\n-#else\n-  if (var_size_in_bytes->is_valid()) {\n-    __ addl(Address(thread, in_bytes(JavaThread::allocated_bytes_offset())), var_size_in_bytes);\n-  } else {\n-    __ addl(Address(thread, in_bytes(JavaThread::allocated_bytes_offset())), con_size_in_bytes);\n-  }\n-  __ adcl(Address(thread, in_bytes(JavaThread::allocated_bytes_offset())+4), 0);\n-#endif\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -40,6 +40,0 @@\n-private:\n-  void incr_allocated_bytes(MacroAssembler* masm, Register thread,\n-                            Register var_size_in_bytes,\n-                            int con_size_in_bytes,\n-                            Register t1);\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}