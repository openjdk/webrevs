{"files":[{"patch":"@@ -761,1 +761,1 @@\n-    log_debug(class, resolve)(\"bad operand %d in:\", which); cpool->print();\n+    log_debug(class, resolve)(\"bad bsm %d in:\", which); cpool->print();\n@@ -1562,2 +1562,2 @@\n-    bool match_operand = compare_bootstrap_entry_to(i1, cp2, i2);\n-    return (match_entry && match_operand);\n+    bool match_bsm = compare_bootstrap_entry_to(i1, cp2, i2);\n+    return (match_entry && match_bsm);\n@@ -1573,2 +1573,2 @@\n-    bool match_operand = compare_bootstrap_entry_to(i1, cp2, i2);\n-    return (match_entry && match_operand);\n+    bool match_bsm = compare_bootstrap_entry_to(i1, cp2, i2);\n+    return (match_entry && match_bsm);\n@@ -1608,1 +1608,1 @@\n-\/\/ Extend the operands array with the length and size of the ext_cp operands.\n+\/\/ Extend the BSMAttributeEntries with the length and size of the ext_cp BSMAttributeEntries.\n@@ -1784,1 +1784,1 @@\n-    k1 += to_cp->bsm_entries().array_length();  \/\/ to_cp might already have operands\n+    k1 += to_cp->bsm_entries().array_length();  \/\/ to_cp might already have a BSM attribute\n@@ -1792,1 +1792,1 @@\n-    k1 += to_cp->bsm_entries().array_length();  \/\/ to_cp might already have operands\n+    k1 += to_cp->bsm_entries().array_length();  \/\/ to_cp might already have a BSM attribute\n@@ -1868,1 +1868,1 @@\n-} \/\/ end find_matching_operand()\n+} \/\/ end find_matching_bsm_entry()\n@@ -2303,1 +2303,1 @@\n-  if (!bsm_entries().is_empty())  st->print(\"\/operands[%d]\", bsm_entries().bootstrap_methods()->length());\n+  if (!bsm_entries().is_empty())  st->print(\"\/bsms[%d]\", bsm_entries().bootstrap_methods()->length());\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -576,1 +576,1 @@\n-      \/\/ Index of the bootstrap specifier in the operands array\n+      \/\/ Index of the bootstrap specifier in the BSM array\n@@ -578,1 +578,1 @@\n-      int new_bs_i = find_or_append_operand(scratch_cp, old_bs_i, merge_cp_p,\n+      int new_bs_i = find_or_append_bsm_entry(scratch_cp, old_bs_i, merge_cp_p,\n@@ -664,2 +664,2 @@\n-\/\/ Append a bootstrap specifier into the merge_cp operands that is semantically equal\n-\/\/ to the scratch_cp operands bootstrap specifier passed by the old_bs_i index.\n+\/\/ Append a bootstrap specifier into the merge_cp BSM entries that is semantically equal\n+\/\/ to the scratch_cp BSM entries' bootstrap specifier passed by the old_bs_i index.\n@@ -667,1 +667,1 @@\n-int VM_RedefineClasses::append_operand(const constantPoolHandle& scratch_cp, const int old_bs_i,\n+int VM_RedefineClasses::append_bsm_entry(const constantPoolHandle& scratch_cp, const int old_bs_i,\n@@ -676,1 +676,1 @@\n-      (\"operands entry@%d bootstrap method ref_index change: %d to %d\", _bsmae_iter.current_offset() - 1, old_ref_i, new_ref_i);\n+      (\"BSM attribute entry@%d bootstrap method ref_index change: %d to %d\", _bsmae_iter.current_offset() - 1, old_ref_i, new_ref_i);\n@@ -690,1 +690,1 @@\n-        (\"operands entry@%d bootstrap method argument ref_index change: %d to %d\",\n+        (\"BSM attribute entry@%d bootstrap method argument ref_index change: %d to %d\",\n@@ -697,1 +697,1 @@\n-} \/\/ end append_operand()\n+} \/\/ end append_bsm_entry()\n@@ -700,1 +700,1 @@\n-int VM_RedefineClasses::find_or_append_operand(const constantPoolHandle& scratch_cp,\n+int VM_RedefineClasses::find_or_append_bsm_entry(const constantPoolHandle& scratch_cp,\n@@ -715,2 +715,2 @@\n-      guarantee(found_i != old_bs_i, \"compare_bootstrap_entry_to() and find_matching_operand() disagree\");\n-      \/\/ found a matching operand somewhere else in *merge_cp_p so just need a mapping\n+      guarantee(found_i != old_bs_i, \"compare_bootstrap_entry_to() and find_matching_bsm_entry() disagree\");\n+      \/\/ found a matching BSM entry somewhere else in *merge_cp_p so just need a mapping\n@@ -721,1 +721,1 @@\n-      new_bs_i = append_operand(scratch_cp, old_bs_i, merge_cp_p, merge_cp_length_p);\n+      new_bs_i = append_bsm_entry(scratch_cp, old_bs_i, merge_cp_p, merge_cp_length_p);\n@@ -725,1 +725,1 @@\n-} \/\/ end find_or_append_operand()\n+} \/\/ end find_or_append_bsm_entry()\n@@ -741,1 +741,1 @@\n-        log_trace(redefine, class, constantpool)(\"operands_index_map[%d]: old=%d new=%d\", count, i, value);\n+        log_trace(redefine, class, constantpool)(\"bsm_index_map[%d]: old=%d new=%d\", count, i, value);\n@@ -1267,1 +1267,1 @@\n-int VM_RedefineClasses::find_new_operand_index(int old_index) {\n+int VM_RedefineClasses::find_new_bsm_index(int old_index) {\n@@ -1286,1 +1286,1 @@\n-} \/\/ end find_new_operand_index()\n+} \/\/ end find_new_bsm_index()\n@@ -1796,2 +1796,2 @@\n-  int operands_index_map_len = scratch_cp->bsm_entries().array_length();\n-  _bsm_index_map_p = new intArray(operands_index_map_len, operands_index_map_len, -1);\n+  int bsm_data_len = scratch_cp->bsm_entries().array_length();\n+  _bsm_index_map_p = new intArray(bsm_data_len, bsm_data_len, -1);\n@@ -1799,1 +1799,1 @@\n-  \/\/ reference to the cp holder is needed for copy_operands()\n+  \/\/ reference to the cp holder is needed for reallocating the BSM attribute\n@@ -3487,1 +3487,1 @@\n-  \/\/ reference to the cp holder is needed for copy_operands()\n+  \/\/ reference to the cp holder is needed for reallocating the BSM attribute\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -438,1 +438,1 @@\n-  int append_operand(const constantPoolHandle& scratch_cp, int scratch_bootstrap_spec_index,\n+  int append_bsm_entry(const constantPoolHandle& scratch_cp, int scratch_bootstrap_spec_index,\n@@ -443,1 +443,1 @@\n-  int find_or_append_operand(const constantPoolHandle& scratch_cp, int scratch_bootstrap_spec_index,\n+  int find_or_append_bsm_entry(const constantPoolHandle& scratch_cp, int scratch_bootstrap_spec_index,\n@@ -446,1 +446,1 @@\n-  int find_new_operand_index(int old_bootstrap_spec_index);\n+  int find_new_bsm_index(int old_bootstrap_spec_index);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}