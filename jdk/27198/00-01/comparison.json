{"files":[{"patch":"@@ -3325,3 +3325,3 @@\n-                                    bootstrap_methods_u2_len,\n-                                    _loader_data,\n-                                    CHECK);\n+                                      bootstrap_methods_u2_len,\n+                                      _loader_data,\n+                                      CHECK);\n@@ -3338,1 +3338,1 @@\n-                       CHECK);\n+       CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-#include \"oops\/constantPool.hpp\"\n@@ -1613,2 +1612,4 @@\n-  return bsm_entries().start_extension(ext_cp->bsm_entries(), pool_holder()->class_loader_data(),\n-                                     CHECK_(BSMAttributeEntries::InsertionIterator()));\n+  InsertionIterator iter =\n+      bsm_entries().start_extension(ext_cp->bsm_entries(), pool_holder()->class_loader_data(),\n+                                    CHECK_(BSMAttributeEntries::InsertionIterator()));\n+  return iter;\n@@ -1619,1 +1620,1 @@\n-  bsm_entries().end_extension(iter, pool_holder()->class_loader_data(), CHECK);\n+  bsm_entries().end_extension(iter, pool_holder()->class_loader_data(), THREAD);\n@@ -1627,2 +1628,2 @@\n-                            to_cp->pool_holder()->class_loader_data(),\n-                            CHECK);\n+                              to_cp->pool_holder()->class_loader_data(),\n+                              THREAD);\n@@ -1659,1 +1660,1 @@\n-  copy_bsm_entries(from_cp, to_cp, CHECK);\n+  copy_bsm_entries(from_cp, to_cp, THREAD);\n@@ -1830,3 +1831,3 @@\n-  int cp_entry_index1 = bsmae1->bootstrap_method_index();\n-  int cp_entry_index2 = bsmae2->bootstrap_method_index();\n-  bool match = compare_entry_to(cp_entry_index1, cp2, cp_entry_index2);\n+  int k1 = bsmae1->bootstrap_method_index();\n+  int k2 = bsmae2->bootstrap_method_index();\n+  bool match = compare_entry_to(k1, cp2, k2);\n@@ -1844,3 +1845,3 @@\n-    cp_entry_index1 = bsmae1->argument(j);\n-    cp_entry_index2 = bsmae2->argument(j);\n-    match = compare_entry_to(cp_entry_index1, cp2, cp_entry_index2);\n+    k1 = bsmae1->argument(j);\n+    k2 = bsmae2->argument(j);\n+    match = compare_entry_to(k1, cp2, k2);\n@@ -1859,1 +1860,1 @@\n-                    const constantPoolHandle& search_cp, int offset_limit) {\n+                                          const constantPoolHandle& search_cp, int offset_limit) {\n@@ -2348,3 +2349,3 @@\n-    const BSMAttributeEntry* bsmae = entry(i);\n-    BSMAttributeEntry* bsmae_new = iter.reserve_new_entry(bsmae->bootstrap_method_index(), bsmae->argument_count());\n-    bsmae->copy_args_into(bsmae_new);\n+    const BSMAttributeEntry* e = entry(i);\n+    BSMAttributeEntry* e_new = iter.reserve_new_entry(e->bootstrap_method_index(), e->argument_count());\n+    e->copy_args_into(e_new);\n@@ -2355,1 +2356,2 @@\n-  return start_extension(other.number_of_entries(), other.array_length(), loader_data, CHECK_(BSMAttributeEntries::InsertionIterator()));\n+  InsertionIterator iter = start_extension(other.number_of_entries(), other.array_length(), loader_data, CHECK_(BSMAttributeEntries::InsertionIterator()));\n+  return iter;\n@@ -2388,1 +2390,1 @@\n-  end_extension(iter, loader_data, CHECK);\n+  end_extension(iter, loader_data, THREAD);\n@@ -2392,2 +2394,1 @@\n-void BSMAttributeEntries::end_extension(InsertionIterator& iter, ClassLoaderData* loader_data,\n-                                      TRAPS) {\n+void BSMAttributeEntries::end_extension(InsertionIterator& iter, ClassLoaderData* loader_data, TRAPS) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -168,2 +168,2 @@\n-  : _offsets(offsets),\n-    _bootstrap_methods(bootstrap_methods) {}\n+    : _offsets(offsets),\n+      _bootstrap_methods(bootstrap_methods) {}\n@@ -200,1 +200,1 @@\n-  \/\/ This starts an insertion iterator. Any call to start_extension must have a matching end_exntesion call.\n+  \/\/ This starts an insertion iterator. Any call to start_extension must have a matching end_extension call.\n@@ -204,1 +204,1 @@\n-  \/\/ Reallocates the underlying memory to fit the limits of the InsertionITerator precisely.\n+  \/\/ Reallocates the underlying memory to fit the limits of the InsertionIterator precisely.\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -393,2 +393,2 @@\n-  u4 length = sizeof(u2) + \/\/ num_bootstrap_methods\n-              \/\/ The rest of it\n+  u4 length = sizeof(u2) + \/\/ Size of num_bootstrap_methods\n+              \/\/ The rest of the data for the attribute is exactly the u2s in the data array.\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"oops\/constantPool.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -371,1 +371,2 @@\n-  \/\/ After merge_constant_pools pass 0 the BSMAttribute entries of merge_cp_p will have been expanded to fit scratch_cp.\n+  \/\/ After merge_constant_pools pass 0, the BSMAttribute entries of merge_cp_p will have been expanded to fit\n+  \/\/ scratch_cp's BSMAttribute entries as well.\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -439,5 +439,5 @@\n-    private U4Array getOffsets() {\n-        Address a =  getAddress().addOffsetTo(bsmaentries);\n-        if (a == null) return null;\n-        a = bsmaentries_offsets.getValue(a);\n-        return VMObjectFactory.newObject(U4Array.class, a);\n+  private U4Array getOffsets() {\n+     Address a =  getAddress().addOffsetTo(bsmaentries);\n+     if (a == null) return null;\n+     a = bsmaentries_offsets.getValue(a);\n+     return VMObjectFactory.newObject(U4Array.class, a);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}