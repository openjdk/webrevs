{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,0 +116,2 @@\n+        robot.delay(500);\n+\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoicePopupLocation\/ChoicePopupLocation.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,12 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n@@ -69,0 +79,1 @@\n+            robot.delay(500);\n@@ -111,1 +122,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -113,1 +124,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -124,1 +135,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -126,1 +137,1 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n","filename":"test\/jdk\/java\/awt\/Choice\/PopupPosTest\/PopupPosTest.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,1 @@\n+        robot.delay(500);\n","filename":"test\/jdk\/java\/awt\/Focus\/NonFocusableBlockedOwnerTest\/NonFocusableBlockedOwnerTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.awt.BorderLayout;\n+\n@@ -39,1 +39,0 @@\n-import java.awt.Panel;\n@@ -52,2 +51,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -63,1 +60,1 @@\n-    static AtomicBoolean focusGained = new AtomicBoolean(false);\n+    static final AtomicBoolean focusGained = new AtomicBoolean(false);\n@@ -124,0 +121,1 @@\n+            robot.keyRelease(KeyEvent.VK_TAB);\n","filename":"test\/jdk\/java\/awt\/Focus\/RowToleranceTransitivityTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+        robot.delay(500);\n","filename":"test\/jdk\/java\/awt\/Focus\/WrongKeyTypedConsumedTest\/WrongKeyTypedConsumedTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,5 +43,4 @@\n-    private int eventType, eventType1;\n-    private ExtendedRobot robot;\n-    private Object lock1 = new Object();\n-    private Object lock2 = new Object();\n-    private Object lock3 = new Object();\n+    private volatile int eventType;\n+    private final Object lock1 = new Object();\n+    private final Object lock2 = new Object();\n+    private final Object lock3 = new Object();\n@@ -49,1 +48,1 @@\n-    private int delay = 150;\n+    private final int delay = 150;\n@@ -53,1 +52,12 @@\n-        test.doTest();\n+        try {\n+            test.doTest();\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+                if (test.frame2 != null) {\n+                    test.frame2.dispose();\n+                }\n+            });\n+        }\n@@ -108,1 +118,1 @@\n-                            lock2.notifyAll();\n+                        lock2.notifyAll();\n@@ -149,0 +159,1 @@\n+        ExtendedRobot robot;\n@@ -156,0 +167,3 @@\n+        robot.setAutoDelay(delay);\n+        robot.setAutoWaitForIdle(true);\n+\n@@ -159,4 +173,2 @@\n-        robot.waitForIdle(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.waitForIdle(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -179,1 +191,0 @@\n-        eventType1 = -1;\n@@ -184,4 +195,2 @@\n-        robot.waitForIdle(delay);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.waitForIdle(delay);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n","filename":"test\/jdk\/java\/awt\/Frame\/MiscUndecorated\/ActiveAWTWindowTest.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library \/lib\/client\n- * @build ExtendedRobot\n+ * @library \/lib\/client \/test\/lib\n+ * @build ExtendedRobot jdk.test.lib.Platform\n@@ -36,0 +36,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -41,0 +43,1 @@\n+import java.awt.EventQueue;\n@@ -46,2 +49,0 @@\n-import java.awt.Toolkit;\n-import java.awt.event.*;\n@@ -52,0 +53,1 @@\n+import java.awt.event.ActionListener;\n@@ -60,1 +62,0 @@\n-    private Container panel1, panel2;\n@@ -65,2 +66,1 @@\n-    private boolean passed = true;\n-    private boolean buttonClicked = false;\n+    private volatile boolean buttonClicked = false;\n@@ -69,1 +69,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -71,1 +71,0 @@\n-        test.doTest(false);\n@@ -73,8 +72,3 @@\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(new Runnable() {\n-                public void run() {\n-                    test.frame.dispose();\n-                }\n-            });\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Unexpected Exception occured\");\n+            test.doTest(false);\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n@@ -82,1 +76,0 @@\n-        test.doTest(true);\n@@ -84,8 +77,3 @@\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(new Runnable() {\n-                public void run() {\n-                    test.frame.dispose();\n-                }\n-            });\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Unexpected Exception occured\");\n+            test.doTest(true);\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n@@ -104,2 +92,2 @@\n-        panel1 = swingControl ? new JPanel() : new Panel();\n-        panel2 = swingControl ? new JPanel() : new Panel();\n+        Container panel1 = swingControl ? new JPanel() : new Panel();\n+        Container panel2 = swingControl ? new JPanel() : new Panel();\n@@ -115,0 +103,7 @@\n+\n+    private void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n@@ -116,0 +111,12 @@\n+        ActionListener actionListener = e -> {\n+            buttonClicked = true;\n+            System.out.println(\"Clicked!!\");\n+            synchronized (buttonLock) {\n+                try {\n+                    buttonLock.notifyAll();\n+                } catch (Exception ex) {\n+                    ex.printStackTrace();\n+                }\n+            }\n+        };\n+\n@@ -118,12 +125,1 @@\n-            jbtn.addActionListener(new ActionListener() {\n-                public void actionPerformed(ActionEvent e) {\n-                    buttonClicked = true;\n-                    synchronized (buttonLock) {\n-                        try {\n-                            buttonLock.notifyAll();\n-                        } catch (Exception ex) {\n-                            ex.printStackTrace();\n-                        }\n-                    }\n-                }\n-            });\n+            jbtn.addActionListener(actionListener);\n@@ -133,12 +129,1 @@\n-            btn.addActionListener(new ActionListener() {\n-                public void actionPerformed(ActionEvent e) {\n-                    buttonClicked = true;\n-                    synchronized (buttonLock) {\n-                        try {\n-                            buttonLock.notifyAll();\n-                        } catch (Exception ex) {\n-                            ex.printStackTrace();\n-                        }\n-                    }\n-                }\n-            });\n+            btn.addActionListener(actionListener);\n@@ -149,18 +134,7 @@\n-    public void doTest(boolean swingControl) {\n-        try {\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(new Runnable() {\n-                public void run() {\n-                    initializeGUI(swingControl);\n-                }\n-            });\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Interrupted or unexpected Exception occured\");\n-        }\n-        try {\n-            robot = new ExtendedRobot();\n-            robot.waitForIdle(1000);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Cannot create robot\");\n-        }\n+    public void doTest(boolean swingControl) throws Exception {\n+\n+        robot = new ExtendedRobot();\n+        robot.setAutoDelay(50);\n+\n+        EventQueue.invokeAndWait(() -> initializeGUI(swingControl));\n+        robot.waitForIdle(1000);\n@@ -183,1 +157,0 @@\n-            passed = false;\n@@ -189,1 +162,1 @@\n-        robot.waitForIdle(delay * 5); \/\/ Need to wait until look of the button\n+        robot.waitForIdle(1000); \/\/ Need to wait until look of the button\n@@ -191,5 +164,3 @@\n-        passed = paintAndRepaint(button, (swingControl? \"J\": \"\")+\"Button\");\n-        if( !paintAndRepaint(button, (swingControl? \"J\": \"\")+\"TextField\") ) {\n-            passed = false;\n-        }\n-        if(!passed) {\n+\n+        if (!paintAndRepaint(button, (swingControl ? \"J\" : \"\") + \"Button\")\n+            || !paintAndRepaint(textField, (swingControl ? \"J\" : \"\") + \"TextField\")) {\n@@ -199,1 +170,2 @@\n-    private boolean paintAndRepaint(Component comp, String prefix) {\n+    private boolean paintAndRepaint(Component comp, String prefix) throws Exception {\n+        boolean passed = true;\n@@ -203,1 +175,1 @@\n-        System.out.println(\"paintAndRepaint \"+prefix);\n+        System.out.printf(\"paintAndRepaint %s %s\\n\", prefix, comp);\n@@ -208,10 +180,20 @@\n-\n-        try {\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(new Runnable() {\n-                public void run() {\n-                    frame.setExtendedState(Frame.ICONIFIED);\n-                }\n-            });\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Exception while setting extended state ICONIFIED\");\n+        BufferedImage frameImage = robot.createScreenCapture(frame.getBounds());\n+\n+        EventQueue.invokeAndWait(() -> frame.setExtendedState(Frame.ICONIFIED));\n+        robot.waitForIdle(1500);\n+        EventQueue.invokeAndWait(() -> frame.setExtendedState(Frame.NORMAL));\n+        robot.waitForIdle(1500);\n+\n+        if (Platform.isOnWayland()) {\n+            \/\/ Robot.mouseMove does not move the actual mouse cursor on the\n+            \/\/ screen in X11 compatibility mode on Wayland, but only within\n+            \/\/ the XWayland server.\n+            \/\/ This can cause the test to fail if the actual mouse cursor on\n+            \/\/ the screen is somewhere over the test window, so that when the\n+            \/\/ test window is restored from the iconified state, it's detected\n+            \/\/ that the mouse cursor has moved to the mouse cursor position on\n+            \/\/ the screen, and is no longer hovering over the button, so the\n+            \/\/ button is painted differently.\n+            robot.mouseMove(button.getLocationOnScreen().x + button.getSize().width \/ 2,\n+                    button.getLocationOnScreen().y + button.getSize().height \/ 2);\n+            robot.waitForIdle();\n@@ -219,12 +201,0 @@\n-        robot.waitForIdle(delay * 5);\n-        try {\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(new Runnable() {\n-                public void run() {\n-                    frame.setExtendedState(Frame.NORMAL);\n-                }\n-            });\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Exception while setting extended state NORMAL\");\n-        }\n-        robot.waitForIdle(delay * 5);\n@@ -241,0 +211,1 @@\n+        BufferedImage frameImage2 = robot.createScreenCapture(frame.getBounds());\n@@ -242,1 +213,1 @@\n-        if (! compareImages(capturedImage, capturedImage2)) {\n+        if (!compareImages(capturedImage, capturedImage2)) {\n@@ -244,0 +215,1 @@\n+\n@@ -245,4 +217,8 @@\n-                javax.imageio.ImageIO.write(capturedImage, \"jpg\", new File(\n-                                   prefix+\"BeforeMinimize.jpg\"));\n-                javax.imageio.ImageIO.write(capturedImage2, \"jpg\", new File(\n-                                   prefix+\"AfterMinimize.jpg\"));\n+                javax.imageio.ImageIO.write(capturedImage, \"png\",\n+                        new File(prefix + \"BeforeMinimize.png\"));\n+                javax.imageio.ImageIO.write(capturedImage2, \"png\",\n+                        new File(prefix + \"AfterMinimize.png\"));\n+                javax.imageio.ImageIO.write(frameImage, \"png\",\n+                        new File(\"Frame\" + prefix + \"BeforeMinimize.png\"));\n+                javax.imageio.ImageIO.write(frameImage2, \"png\",\n+                        new File(\"Frame\" + prefix + \"AfterMinimize.png\"));\n","filename":"test\/jdk\/java\/awt\/Frame\/MiscUndecorated\/RepaintTest.java","additions":83,"deletions":107,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,9 @@\n-import java.awt.*;\n-import javax.swing.*;\n-import java.awt.event.*;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n@@ -41,14 +47,10 @@\n-    Robot robot;\n-    JFrame frame = new JFrame(\"Test Frame\");\n-    JTextField text = new JTextField();\n-    JMenuBar bar = new JMenuBar();\n-    JMenu menu = new JMenu(\"Menu\");\n-    JMenuItem item = new JMenuItem(\"item\");\n-\n-    public static void main(String[] args) {\n-        ConsumeNextMnemonicKeyTypedTest app = new ConsumeNextMnemonicKeyTypedTest();\n-        app.init();\n-        app.start();\n-    }\n-\n-    public void init() {\n+    static Robot robot;\n+    static JFrame frame;\n+    static JTextField text;\n+    static JMenuBar bar;\n+    static JMenu menu;\n+    static JMenuItem item;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(50);\n@@ -56,4 +58,12 @@\n-            robot = new Robot();\n-            robot.setAutoDelay(50);\n-        } catch (AWTException e) {\n-            throw new RuntimeException(\"Error: unable to create robot\", e);\n+            SwingUtilities.invokeAndWait(ConsumeNextMnemonicKeyTypedTest::init);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            test();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n@@ -63,1 +73,7 @@\n-    public void start() {\n+    public static void init() {\n+        frame = new JFrame(\"Test Frame\");\n+        text = new JTextField();\n+        bar = new JMenuBar();\n+        menu = new JMenu(\"Menu\");\n+        item = new JMenuItem(\"item\");\n+\n@@ -75,2 +91,0 @@\n-\n-        test();\n@@ -79,1 +93,1 @@\n-    void test() {\n+    static void test() {\n@@ -86,1 +100,1 @@\n-            robot.mousePress(MouseEvent.BUTTON1_MASK);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n@@ -88,1 +102,1 @@\n-            robot.mouseRelease(MouseEvent.BUTTON1_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n@@ -149,1 +163,1 @@\n-        System.err.println(\"Test: chracter typed with VK_A: \" + text.getText());\n+        System.err.println(\"Test: character typed with VK_A: \" + text.getText());\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/ConsumeNextMnemonicKeyTypedTest\/ConsumeNextMnemonicKeyTypedTest.java","additions":43,"deletions":29,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.awt.AWTException;\n+import java.awt.EventQueue;\n@@ -38,1 +38,0 @@\n-import java.awt.event.ActionListener;\n@@ -40,0 +39,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -41,3 +42,0 @@\n-public class ActionEventTest extends Frame {\n-    List list;\n-    Robot robot;\n@@ -45,8 +43,5 @@\n-    public ActionEventTest() {\n-        try {\n-            robot = new Robot();\n-            robot.setAutoDelay(100);\n-            robot.setAutoWaitForIdle(true);\n-        } catch(AWTException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n+public class ActionEventTest {\n+\n+    static List list;\n+    static Frame frame;\n+    static Robot robot;\n@@ -54,0 +49,4 @@\n+    static final CountDownLatch countDownLatch = new CountDownLatch(1);\n+    static volatile boolean failed;\n+\n+    static void initAndShowGui() {\n@@ -56,7 +55,0 @@\n-        add(list);\n-        setSize(400,400);\n-        setLayout(new FlowLayout());\n-        setLocationRelativeTo(null);\n-        pack();\n-        setVisible(true);\n-    }\n@@ -64,17 +56,7 @@\n-    void performTest() {\n-        list.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent ae) {\n-                int md = ae.getModifiers();\n-                int expectedMask = ActionEvent.ALT_MASK | ActionEvent.CTRL_MASK\n-                        | ActionEvent.SHIFT_MASK;\n-\n-                if ((md & expectedMask) != expectedMask) {\n-\n-                    robot.keyRelease(KeyEvent.VK_CONTROL);\n-                    robot.keyRelease(KeyEvent.VK_SHIFT);\n-                    robot.keyRelease(KeyEvent.VK_ALT);\n-                    dispose();\n-                    throw new RuntimeException(\"Action Event modifiers are not\"\n-                        + \" set correctly.\");\n-                }\n+        list.addActionListener(ae -> {\n+            int md = ae.getModifiers();\n+            int expectedMask = ActionEvent.ALT_MASK | ActionEvent.CTRL_MASK\n+                    | ActionEvent.SHIFT_MASK;\n+\n+            if ((md & expectedMask) != expectedMask) {\n+                failed = true;\n@@ -82,0 +64,1 @@\n+            countDownLatch.countDown();\n@@ -84,0 +67,7 @@\n+        frame = new Frame(\"ActionEventTest\");\n+        frame.add(list);\n+        frame.setSize(400,400);\n+        frame.setLayout(new FlowLayout());\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n@@ -85,0 +75,6 @@\n+    }\n+\n+    static void performTest() {\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n@@ -96,4 +92,24 @@\n-    public static void main(String args[]) {\n-       ActionEventTest test = new ActionEventTest();\n-       test.performTest();\n-       test.dispose();\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        robot.setAutoWaitForIdle(true);\n+\n+        try {\n+            EventQueue.invokeAndWait(ActionEventTest::initAndShowGui);\n+            performTest();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!countDownLatch.await(10, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Action Listener is not triggered\");\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"Action Event modifiers are not\"\n+                    + \" set correctly.\");\n+        }\n","filename":"test\/jdk\/java\/awt\/List\/ActionEventTest\/ActionEventTest.java","additions":57,"deletions":41,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,15 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.lang.reflect.*;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n@@ -41,2 +53,1 @@\n-public class KeyEventsTest extends Frame implements ItemListener, FocusListener, KeyListener\n-{\n+public class KeyEventsTest {\n@@ -47,2 +58,2 @@\n-    List single = new List(3, false);\n-    List multiple = new List(3, true);\n+    List single;\n+    List multiple;\n@@ -50,2 +61,1 @@\n-    Panel p1 = new Panel ();\n-    Panel p2 = new Panel ();\n+    KeyFrame keyFrame;\n@@ -53,1 +63,4 @@\n-    public static void main(final String[] args) {\n+    static Robot r;\n+\n+    public static void main(final String[] args) throws Exception {\n+        r = new Robot();\n@@ -55,2 +68,40 @@\n-        app.init();\n-        app.start();\n+        try {\n+            EventQueue.invokeAndWait(app::initAndShowGui);\n+            r.waitForIdle();\n+            r.delay(500);\n+            app.doTest();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (app.keyFrame != null) {\n+                    app.keyFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    class KeyFrame extends Frame implements ItemListener, FocusListener, KeyListener {\n+        public void itemStateChanged(ItemEvent ie) {\n+            System.out.println(\"itemStateChanged-\" + ie);\n+            currentState.setAction(true);\n+        }\n+\n+        public void focusGained(FocusEvent e) {\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+\n+        public void focusLost(FocusEvent e) {\n+        }\n+\n+        public void keyPressed(KeyEvent e) {\n+            System.out.println(\"keyPressed-\" + e);\n+        }\n+\n+        public void keyReleased(KeyEvent e) {\n+            System.out.println(\"keyReleased-\" + e);\n+        }\n+\n+        public void keyTyped(KeyEvent e) {\n+            System.out.println(\"keyTyped-\" + e);\n+        }\n@@ -59,3 +110,6 @@\n-    public void init()\n-    {\n-        setLayout (new BorderLayout ());\n+    public void initAndShowGui() {\n+        keyFrame = new KeyFrame();\n+        keyFrame.setLayout(new BorderLayout ());\n+\n+        single = new List(3, false);\n+        multiple = new List(3, true);\n@@ -83,3 +137,4 @@\n-        single.addKeyListener(this);\n-        single.addItemListener(this);\n-        single.addFocusListener(this);\n+        single.addKeyListener(keyFrame);\n+        single.addItemListener(keyFrame);\n+        single.addFocusListener(keyFrame);\n+        Panel p1 = new Panel();\n@@ -87,1 +142,1 @@\n-        add(\"North\", p1);\n+        keyFrame.add(\"North\", p1);\n@@ -89,3 +144,4 @@\n-        multiple.addKeyListener(this);\n-        multiple.addItemListener(this);\n-        multiple.addFocusListener(this);\n+        multiple.addKeyListener(keyFrame);\n+        multiple.addItemListener(keyFrame);\n+        multiple.addFocusListener(keyFrame);\n+        Panel p2 = new Panel();\n@@ -93,20 +149,1 @@\n-        add(\"South\", p2);\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-\n-        try{\n-            setSize (200,200);\n-            validate();\n-            setUndecorated(true);\n-            setLocationRelativeTo(null);\n-            setVisible(true);\n-\n-            doTest();\n-            System.out.println(\"Test passed.\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"The test failed.\");\n-        }\n+        keyFrame.add(\"South\", p2);\n@@ -114,5 +151,5 @@\n-    }\/\/ start()\n-\n-    public void itemStateChanged (ItemEvent ie) {\n-        System.out.println(\"itemStateChanged-\"+ie);\n-        this.currentState.setAction(true);\n+        keyFrame.setSize (200,200);\n+        keyFrame.validate();\n+        keyFrame.setUndecorated(true);\n+        keyFrame.setLocationRelativeTo(null);\n+        keyFrame.setVisible(true);\n@@ -121,2 +158,1 @@\n-    public void focusGained(FocusEvent e){\n-\n+    private void test(TestState currentState) throws Exception {\n@@ -124,25 +160,0 @@\n-            LOCK.notifyAll();\n-        }\n-\n-    }\n-\n-    public void focusLost(FocusEvent e){\n-    }\n-\n-    public void keyPressed(KeyEvent e){\n-        System.out.println(\"keyPressed-\"+e);\n-    }\n-\n-    public void keyReleased(KeyEvent e){\n-        System.out.println(\"keyReleased-\"+e);\n-    }\n-\n-    public void keyTyped(KeyEvent e){\n-        System.out.println(\"keyTyped-\"+e);\n-    }\n-\n-    private void test(TestState currentState)\n-      throws InterruptedException, InvocationTargetException {\n-\n-        synchronized (LOCK) {\n-\n@@ -153,1 +164,1 @@\n-            if (currentState.getMultiple()){\n+            if (currentState.getMultiple()) {\n@@ -155,1 +166,1 @@\n-            }else{\n+            } else {\n@@ -159,7 +170,0 @@\n-            Robot r;\n-            try {\n-                r = new Robot();\n-            } catch(AWTException e) {\n-                throw new RuntimeException(e.getMessage());\n-            }\n-\n@@ -167,1 +171,1 @@\n-            Point loc = this.getLocationOnScreen();\n+            Point loc = keyFrame.getLocationOnScreen();\n@@ -169,2 +173,2 @@\n-            r.mouseMove(loc.x+10, loc.y+10);\n-            r.mousePress(InputEvent.BUTTON1_MASK);\n+            r.mouseMove(loc.x + 10, loc.y + 10);\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -172,1 +176,1 @@\n-            r.mouseRelease(InputEvent.BUTTON1_MASK);\n+            r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -177,0 +181,2 @@\n+            r.waitForIdle();\n+\n@@ -181,34 +187,21 @@\n-            list.deselect(0);\n-            list.deselect(1);\n-            list.deselect(2);\n-            list.deselect(3);\n-            list.deselect(4);\n-            list.deselect(5);\n-            list.deselect(6);\n-            list.deselect(7);\n-            list.deselect(8);\n-\n-            int selectIndex = 0;\n-            int visibleIndex = 0;\n-\n-            if (currentState.getScrollMoved()){\n-\n-                if (currentState.getKeyID() == KeyEvent.VK_PAGE_UP ||\n-                    currentState.getKeyID() == KeyEvent.VK_HOME){\n-                    selectIndex = 8;\n-                    visibleIndex = 8;\n-                }else if (currentState.getKeyID() == KeyEvent.VK_PAGE_DOWN ||\n-                    currentState.getKeyID() == KeyEvent.VK_END){\n-                    selectIndex = 0;\n-                    visibleIndex = 0;\n-                }\n-\n-            }else{\n-\n-                if (currentState.getKeyID() == KeyEvent.VK_PAGE_UP ||\n-                    currentState.getKeyID() == KeyEvent.VK_HOME){\n-\n-                    if (currentState.getSelectedMoved()){\n-                        selectIndex = 1;\n-                        visibleIndex = 0;\n-                    }else{\n+            EventQueue.invokeAndWait(() -> {\n+                list.deselect(0);\n+                list.deselect(1);\n+                list.deselect(2);\n+                list.deselect(3);\n+                list.deselect(4);\n+                list.deselect(5);\n+                list.deselect(6);\n+                list.deselect(7);\n+                list.deselect(8);\n+\n+                int selectIndex = 0;\n+                int visibleIndex = 0;\n+\n+                if (currentState.getScrollMoved()) {\n+                    if (currentState.getKeyID() == KeyEvent.VK_PAGE_UP ||\n+                            currentState.getKeyID() == KeyEvent.VK_HOME) {\n+                        selectIndex = 8;\n+                        visibleIndex = 8;\n+                    } else if (currentState.getKeyID() == KeyEvent.VK_PAGE_DOWN ||\n+                            currentState.getKeyID() == KeyEvent.VK_END) {\n@@ -218,9 +211,16 @@\n-\n-                }else if (currentState.getKeyID() == KeyEvent.VK_PAGE_DOWN ||\n-                    currentState.getKeyID() == KeyEvent.VK_END){\n-\n-                    if (currentState.getSelectedMoved()){\n-                        selectIndex = 7;\n-                        visibleIndex = 8;\n-                    }else{\n-                        selectIndex = 8;\n+                } else {\n+                    if (currentState.getKeyID() == KeyEvent.VK_PAGE_UP ||\n+                            currentState.getKeyID() == KeyEvent.VK_HOME) {\n+                        if (currentState.getSelectedMoved()) {\n+                            selectIndex = 1;\n+                        } else {\n+                            selectIndex = 0;\n+                        }\n+                        visibleIndex = 0;\n+                    } else if (currentState.getKeyID() == KeyEvent.VK_PAGE_DOWN ||\n+                            currentState.getKeyID() == KeyEvent.VK_END) {\n+                        if (currentState.getSelectedMoved()) {\n+                            selectIndex = 7;\n+                        } else {\n+                            selectIndex = 8;\n+                        }\n@@ -229,1 +229,0 @@\n-\n@@ -231,5 +230,3 @@\n-\n-            }\n-\n-            list.select(selectIndex);\n-            list.makeVisible(visibleIndex);\n+                list.select(selectIndex);\n+                list.makeVisible(visibleIndex);\n+            });\n@@ -238,0 +235,1 @@\n+            r.waitForIdle();\n@@ -262,1 +260,0 @@\n-\n@@ -265,2 +262,1 @@\n-    private void doTest()\n-      throws InterruptedException, InvocationTargetException {\n+    private void doTest() throws Exception {\n@@ -313,1 +309,1 @@\n-class TestState{\n+class TestState {\n@@ -315,1 +311,1 @@\n-    private boolean multiple;\n+    private final boolean multiple;\n","filename":"test\/jdk\/java\/awt\/List\/KeyEventsTest\/KeyEventsTest.java","additions":138,"deletions":142,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -54,0 +56,1 @@\n+            latch.countDown();\n@@ -64,1 +67,2 @@\n-    static boolean pressed = false;\n+    static volatile boolean pressed = false;\n+    static final CountDownLatch latch = new CountDownLatch(1);\n@@ -86,0 +90,1 @@\n+            r.setAutoDelay(20);\n@@ -88,1 +93,0 @@\n-            r.delay(10);\n@@ -92,1 +96,0 @@\n-            r.delay(10);\n@@ -96,1 +99,0 @@\n-            r.delay(10);\n@@ -100,1 +102,0 @@\n-            r.delay(10);\n@@ -104,1 +105,0 @@\n-            r.delay(10);\n@@ -106,1 +106,1 @@\n-            r.delay(10000);\n+            latch.await(5, TimeUnit.SECONDS);\n","filename":"test\/jdk\/java\/awt\/MenuBar\/SeparatorsNavigation\/SeparatorsNavigation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,4 @@\n-    public static void main(final String[] args) {\n+    static ListRepaint listRepaint;\n+    static Frame frame;\n+\n+    public static void main(final String[] args) throws Exception {\n@@ -39,14 +42,12 @@\n-            final Frame frame = new Frame();\n-            frame.setSize(300, 300);\n-            frame.setLocationRelativeTo(null);\n-            ListRepaint list = new ListRepaint();\n-            list.add(\"1\");\n-            list.add(\"2\");\n-            list.add(\"3\");\n-            list.add(\"4\");\n-            list.select(0);\n-            frame.add(list);\n-            frame.setVisible(true);\n-            sleep();\n-            list.test();\n-            frame.dispose();\n+            try {\n+                EventQueue.invokeLater(ListRepaint::createAndShowGUI);\n+                sleep();\n+                EventQueue.invokeAndWait(listRepaint::test);\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                        frame = null;\n+                    }\n+                });\n+            }\n@@ -63,0 +64,16 @@\n+    static void createAndShowGUI() {\n+        frame = new Frame();\n+        frame.setSize(300, 300);\n+        frame.setLocationRelativeTo(null);\n+\n+        listRepaint = new ListRepaint();\n+        listRepaint.add(\"1\");\n+        listRepaint.add(\"2\");\n+        listRepaint.add(\"3\");\n+        listRepaint.add(\"4\");\n+        listRepaint.select(0);\n+\n+        frame.add(listRepaint);\n+        frame.setVisible(true);\n+    }\n+\n","filename":"test\/jdk\/java\/awt\/Paint\/ListRepaint.java","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        if (os.contains(\"os x\")) {\n+        if (os.contains(\"os x\") || os.contains(\"linux\")) {\n","filename":"test\/jdk\/java\/awt\/Robot\/ModifierRobotKey\/ModifierRobotKeyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+        robot.delay(500);\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCaretVisibilityTest\/bug7129742.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,14 +31,0 @@\n-        GNOMESID=`pgrep gnome-session | head -n1`\n-\n-        printf \"\\n\/* gnome-session environ\\n\"\n-        cat \"\/proc\/$GNOMESID\/environ\" | tr '\\0' '\\n'\n-        printf \"\\n*\/\\n\\n\"\n-\n-        DBUS_SESSION_BUS_ADDRESS=`grep -z DBUS_SESSION_BUS_ADDRESS \/proc\/$GNOMESID\/environ | cut -d= -f2-`\n-        export DBUS_SESSION_BUS_ADDRESS\n-\n-        DISPLAY=`grep -z DISPLAY \/proc\/$GNOMESID\/environ | cut -d= -f2-`\n-        export DISPLAY\n-\n-        XDG_CURRENT_DESKTOP=`grep -z XDG_CURRENT_DESKTOP \/proc\/$GNOMESID\/environ | cut -d= -f2-`\n-        export XDG_CURRENT_DESKTOP\n","filename":"test\/jdk\/java\/awt\/Toolkit\/DesktopProperties\/rfe4758438.sh","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+        robot.setAutoDelay(25);\n@@ -83,0 +84,2 @@\n+        robot.waitForIdle();\n+        robot.delay(500);\n@@ -120,4 +123,0 @@\n-        robot.keyPress(KeyEvent.VK_ALT);\n-        robot.keyPress(KeyEvent.VK_SHIFT);\n-        robot.keyPress(KeyEvent.VK_CONTROL);\n-\n@@ -132,0 +131,4 @@\n+        robot.keyPress(KeyEvent.VK_ALT);\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ActionEventTest\/ActionEventTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    static final int ATTEMPTS = 50;\n+    static final int ATTEMPTS = 10;\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconPopup\/TrayIconPopupTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+        r.delay(500);\n","filename":"test\/jdk\/java\/awt\/Window\/SetWindowLocationByPlatformTest\/SetWindowLocationByPlatformTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.awt.EventQueue;\n@@ -30,0 +31,2 @@\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n@@ -49,7 +52,1 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-\n-            @Override\n-            public void run() {\n-                constructTestUI();\n-            }\n-        });\n+        SwingUtilities.invokeAndWait(PressedButtonRightClickTest::constructTestUI);\n@@ -64,0 +61,1 @@\n+        testRobot.delay(500);\n@@ -66,3 +64,5 @@\n-        test();\n-\n-        disposeTestUI();\n+        try {\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(PressedButtonRightClickTest::disposeTestUI);\n+        }\n@@ -77,0 +77,1 @@\n+        System.out.println(\"press BUTTON1_DOWN_MASK\");\n@@ -79,1 +80,1 @@\n-        testRobot.delay(1000);\n+        testRobot.delay(500);\n@@ -82,0 +83,1 @@\n+        System.out.println(\"press BUTTON3_DOWN_MASK\");\n@@ -84,1 +86,1 @@\n-        testRobot.delay(1000);\n+        testRobot.delay(500);\n@@ -87,0 +89,1 @@\n+        System.out.println(\"release BUTTON3_DOWN_MASK\");\n@@ -89,1 +92,2 @@\n-        testRobot.delay(1000);\n+        testRobot.waitForIdle();\n+        testRobot.delay(500);\n@@ -93,0 +97,1 @@\n+        System.out.println(\"release BUTTON1_DOWN_MASK\");\n@@ -109,0 +114,26 @@\n+        myButton.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                System.out.println(e);\n+            }\n+\n+            @Override\n+            public void mousePressed(MouseEvent e) {\n+                System.out.println(e);\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                System.out.println(e);\n+            }\n+\n+            @Override\n+            public void mouseEntered(MouseEvent e) {\n+                System.out.println(e);\n+            }\n+\n+            @Override\n+            public void mouseExited(MouseEvent e) {\n+                System.out.println(e);\n+            }\n+        });\n","filename":"test\/jdk\/javax\/swing\/JButton\/PressedButtonRightClickTest.java","additions":45,"deletions":14,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n@@ -52,0 +50,1 @@\n+        robot.setAutoWaitForIdle(true);\n@@ -57,2 +56,4 @@\n-                button.addActionListener(new ActionListener() {\n-                    public void actionPerformed(ActionEvent e) {\n+                button.addActionListener(e -> {\n+                    if ((e.getModifiers() & InputEvent.BUTTON1_MASK)\n+                            != InputEvent.BUTTON1_MASK) {\n+                        System.out.println(\"passed\");\n@@ -83,0 +84,2 @@\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n","filename":"test\/jdk\/javax\/swing\/JButton\/bug4490179.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,1 @@\n+                robot.delay(500);\n","filename":"test\/jdk\/javax\/swing\/JLabel\/4138746\/JLabelMnemonicsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,1 @@\n+                        robot.delay(500);\n@@ -113,0 +114,1 @@\n+                robot.delay(500);\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicComboPopup\/JComboBoxPopupLocation\/JComboBoxPopupLocation.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+    static JFrame frame;\n@@ -58,1 +59,1 @@\n-        JFrame frame = new JFrame();\n+        frame = new JFrame();\n@@ -60,0 +61,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -83,0 +85,2 @@\n+        robot.delay(500);\n+\n@@ -85,1 +89,3 @@\n-        robot.delay(200);\n+        robot.delay(500);\n+\n+        SwingUtilities.invokeAndWait(() -> frame.dispose());\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicMenuUI\/4983388\/bug4983388.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @summary tests delte-next-word and delete-prev-word actions for all text compnents and all look&feels\n+ * @summary tests delete-next-word and delete-prev-word actions for all text components and all look&feels\n@@ -52,0 +52,2 @@\n+    private static JFrame frame;\n+    private static Robot robot;\n@@ -59,0 +61,4 @@\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+\n@@ -63,3 +69,12 @@\n-                boolean res = test(clazz);\n-                if (!res && clazz != JPasswordField.class) {\n-                    throw new RuntimeException(\"failed\");\n+                try {\n+                    boolean res = test(clazz);\n+                    if (!res && clazz != JPasswordField.class) {\n+                        throw new RuntimeException(\"failed\");\n+                    }\n+                } finally {\n+                    SwingUtilities.invokeAndWait(() -> {\n+                        if (frame != null) {\n+                            frame.dispose();\n+                            frame = null;\n+                        }\n+                    });\n@@ -72,5 +87,0 @@\n-        Robot robot = new Robot();\n-        robot.setAutoWaitForIdle(true);\n-        robot.setAutoDelay(50);\n-\n-\n@@ -86,0 +96,1 @@\n+        robot.delay(500);\n@@ -123,0 +134,1 @@\n+        robot.delay(250);\n@@ -155,1 +167,1 @@\n-            JFrame frame = new JFrame();\n+            frame = new JFrame();\n","filename":"test\/jdk\/javax\/swing\/text\/JTextComponent\/5074573\/bug5074573.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"}]}