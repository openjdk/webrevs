{"files":[{"patch":"@@ -2338,3 +2338,4 @@\n-                gotDouble = ((doubleResult != (double)longResult) ||\n-                            (doubleResult == 0.0 && 1\/doubleResult < 0.0)) &&\n-                            !isParseIntegerOnly();\n+                gotDouble = ((doubleResult >= Long.MAX_VALUE || doubleResult <= Long.MIN_VALUE) ||\n+                        (doubleResult != (double)longResult) ||\n+                        (doubleResult == 0.0 && 1\/doubleResult < 0.0)) &&\n+                        !isParseIntegerOnly();\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8327640 8331485 8333456 8335668\n+ * @bug 6177299 8327640 8331485 8333456 8335668\n@@ -191,0 +191,24 @@\n+    @Test\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void largePosParseTest() {\n+        var df = NumberFormat.getPercentInstance(); \/\/ Default w\/ multiplier 100\n+        \/\/ Parsed string after multiplier applied is beyond long range\n+        assertEquals(9.223372036854777E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,700,000%\")));\n+        \/\/ Fails before 6177299 fix and returns as long\n+        assertEquals(9.223372036854776E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,600,000%\")));\n+        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n+        assertEquals((long) 9.223372036854775E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,500,000%\")));\n+    }\n+\n+    @Test\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void largeNegParseTest() {\n+        var df = NumberFormat.getPercentInstance(); \/\/ Default w\/ multiplier 100\n+        \/\/ Parsed string after multiplier applied is beyond long range\n+        assertEquals(-9.223372036854777E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,700,000%\")));\n+        \/\/ Fails before 6177299 fix and returns as long\n+        assertEquals(-9.223372036854776E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,600,000%\")));\n+        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n+        assertEquals((long) -9.223372036854775E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,500,000%\")));\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientParseTest.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}