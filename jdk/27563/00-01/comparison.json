{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6177299 8327640 8331485 8333456 8335668\n+ * @bug 8327640 8331485 8333456 8335668\n@@ -191,24 +191,0 @@\n-    @Test\n-    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n-    public void largePosParseTest() {\n-        var df = NumberFormat.getPercentInstance(); \/\/ Default w\/ multiplier 100\n-        \/\/ Parsed string after multiplier applied is beyond long range\n-        assertEquals(9.223372036854777E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,700,000%\")));\n-        \/\/ Fails before 6177299 fix and returns as long\n-        assertEquals(9.223372036854776E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,600,000%\")));\n-        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n-        assertEquals((long) 9.223372036854775E18, assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,500,000%\")));\n-    }\n-\n-    @Test\n-    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n-    public void largeNegParseTest() {\n-        var df = NumberFormat.getPercentInstance(); \/\/ Default w\/ multiplier 100\n-        \/\/ Parsed string after multiplier applied is beyond long range\n-        assertEquals(-9.223372036854777E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,700,000%\")));\n-        \/\/ Fails before 6177299 fix and returns as long\n-        assertEquals(-9.223372036854776E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,600,000%\")));\n-        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n-        assertEquals((long) -9.223372036854775E18, assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,500,000%\")));\n-    }\n-\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientParseTest.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n- * 4243011 4243108 4330377 4233840 4241880 4833877 8008577 8227313 8174269\n+ * 4243011 4243108 4330377 4233840 4241880 4833877 6177299 8008577 8227313\n+ * 8174269\n@@ -59,0 +60,1 @@\n+\n@@ -63,0 +65,2 @@\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -1850,0 +1854,35 @@\n+\n+    \/**\n+     * 6177299: DecimalFormat w\/ multiplier applied may incorrectly return\n+     * a Double as Long.MAX_VALUE.\n+     *\/\n+    @Test\n+    void largePosParseTest() {\n+        var df = NumberFormat.getPercentInstance(Locale.ENGLISH); \/\/ Default w\/ multiplier 100\n+        \/\/ Parsed string after multiplier applied is beyond long range\n+        assertEquals(9.223372036854777E18,\n+                assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,700,000%\")));\n+        \/\/ Fails before 6177299 fix and returns as long\n+        assertEquals(9.223372036854776E18,\n+                assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,600,000%\")));\n+        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n+        assertEquals((long) 9.223372036854775E18,\n+                assertDoesNotThrow(() -> df.parse(\"922,337,203,685,477,500,000%\")));\n+    }\n+\n+    \/**\n+     * 6177299: Negative version of above test.\n+     *\/\n+    @Test\n+    void largeNegParseTest() {\n+        var df = NumberFormat.getPercentInstance(Locale.ENGLISH); \/\/ Default w\/ multiplier 100\n+        \/\/ Parsed string after multiplier applied is beyond long range\n+        assertEquals(-9.223372036854777E18,\n+                assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,700,000%\")));\n+        \/\/ Fails before 6177299 fix and returns as long\n+        assertEquals(-9.223372036854776E18,\n+                assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,600,000%\")));\n+        \/\/ Within long range -> Expect to get longs as long as ulp >= 1\n+        assertEquals((long) -9.223372036854775E18,\n+                assertDoesNotThrow(() -> df.parse(\"-922,337,203,685,477,500,000%\")));\n+    }\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberRegression.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}