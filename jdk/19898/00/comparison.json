{"files":[{"patch":"@@ -72,8 +72,8 @@\n-        if (type == int.class)     return TypeKind.IntType;\n-        if (type == long.class)    return TypeKind.LongType;\n-        if (type == boolean.class) return TypeKind.BooleanType;\n-        if (type == short.class)   return TypeKind.ShortType;\n-        if (type == byte.class)    return TypeKind.ByteType;\n-        if (type == char.class)    return TypeKind.CharType;\n-        if (type == float.class)   return TypeKind.FloatType;\n-        if (type == double.class)  return TypeKind.DoubleType;\n+        if (type == Integer.class)   return TypeKind.IntType;\n+        if (type == Long.class)      return TypeKind.LongType;\n+        if (type == Boolean.class)   return TypeKind.BooleanType;\n+        if (type == Short.class)     return TypeKind.ShortType;\n+        if (type == Byte.class)      return TypeKind.ByteType;\n+        if (type == Character.class) return TypeKind.CharType;\n+        if (type == Float.class)     return TypeKind.FloatType;\n+        if (type == Double.class)    return TypeKind.DoubleType;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/TypeConvertingMethodAdapter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,798 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/* @test\n+ * @bug 8335060\n+ * @summary unit tests of TypeConvertingMethodAdapter\n+ * @run junit TypeConvertingTest\n+ *\/\n+public class TypeConvertingTest {\n+\n+    static void smallBooleanC(boolean b) {\n+        assertTrue(b);\n+    }\n+\n+    static void bigBooleanC(Boolean b) {\n+        assertTrue(b);\n+    }\n+\n+    static void smallByteC(byte b) {\n+        assertEquals(1, b);\n+    }\n+\n+    static void bigByteC(Byte b) {\n+        assertEquals((byte)1, b);\n+    }\n+\n+    static void smallShortC(short s) {\n+        assertEquals(1, s);\n+    }\n+\n+    static void bigShortC(Short s) {\n+        assertEquals((short)1, s);\n+    }\n+\n+    static void smallCharC(char c) {\n+        assertEquals(1, c);\n+    }\n+\n+    static void bigCharC(Character c) {\n+        assertEquals((char)1, c);\n+    }\n+\n+    static void smallIntC(int i) {\n+        assertEquals(1, i);\n+    }\n+\n+    static void bigIntC(Integer i) {\n+        assertEquals(1, i);\n+    }\n+\n+    static void smallLongC(long l) {\n+        assertEquals(1, l);\n+    }\n+\n+    static void bigLongC(Long l) {\n+        assertEquals(1, l);\n+    }\n+\n+    static void smallFloatC(float f) {\n+        assertEquals(1.0f, f);\n+    }\n+\n+    static void bigFloatC(Float f) {\n+        assertEquals(1.0f, f);\n+    }\n+\n+    static void smallDoubleC(double d) {\n+        assertEquals(1.0, d);\n+    }\n+\n+    static void bigDoubleC(Double d) {\n+        assertEquals(1.0, d);\n+    }\n+\n+    static void numberC(Number n) {\n+        assertEquals(1, n.intValue());\n+    }\n+\n+\n+    static boolean smallBooleanS() {return true;}\n+\n+    static Boolean bigBooleanS() {return true;}\n+\n+    static byte smallByteS() {return 1;}\n+\n+    static Byte bigByteS() {return 1;}\n+\n+    static short smallShortS() {return 1;}\n+\n+    static Short bigShortS() {return 1;}\n+\n+    static char smallCharS() {return 1;}\n+\n+    static Character bigCharS() {return 1;}\n+\n+    static int smallIntS() {return 1;}\n+\n+    static Integer bigIntS() {return 1;}\n+\n+    static long smallLongS() {return 1;}\n+\n+    static Long bigLongS() {return 1l;}\n+\n+    static float smallFloatS() {return 1;}\n+\n+    static Float bigFloatS() {return 1f;}\n+\n+    static double smallDoubleS() {return 1;}\n+\n+    static Double bigDoubleS() {return 1d;}\n+\n+    static Number numberS() {return 1;}\n+\n+\n+    interface GenericC<T> {\n+        void m(T t);\n+    }\n+\n+    interface SmallBooleanC {\n+        void m(boolean b);\n+    }\n+\n+    interface BigBooleanC {\n+        void m(Boolean b);\n+    }\n+\n+    interface SmallByteC {\n+        void m(byte b);\n+    }\n+\n+    interface BigByteC {\n+        void m(Byte b);\n+    }\n+\n+    interface SmallShortC {\n+        void m(short s);\n+    }\n+\n+    interface BigShortC {\n+        void m(Short s);\n+    }\n+\n+    interface SmallCharC {\n+        void m(char c);\n+    }\n+\n+    interface BigCharC {\n+        void m(Character c);\n+    }\n+\n+    interface SmallIntC {\n+        void m(int i);\n+    }\n+\n+    interface BigIntC {\n+        void m(Integer i);\n+    }\n+\n+    interface SmallLongC {\n+        void m(long l);\n+    }\n+\n+    interface BigLongC {\n+        void m(Long l);\n+    }\n+\n+    interface SmallFloatC {\n+        void m(float f);\n+    }\n+\n+    interface BigFloatC {\n+        void m(Float f);\n+    }\n+\n+    interface SmallDoubleC {\n+        void m(double d);\n+    }\n+\n+    interface BigDoubleC {\n+        void m(Double d);\n+    }\n+\n+    interface BigNumberC {\n+        void m(Number n);\n+    }\n+\n+\n+    interface GenericS<T> {\n+        T m();\n+    }\n+\n+    interface SmallBooleanS {\n+        boolean m();\n+    }\n+\n+    interface BigBooleanS {\n+        Boolean m();\n+    }\n+\n+    interface SmallByteS {\n+        byte m();\n+    }\n+\n+    interface BigByteS {\n+        Byte m();\n+    }\n+\n+    interface SmallShortS {\n+        short m();\n+    }\n+\n+    interface BigShortS {\n+        Short m();\n+    }\n+\n+    interface SmallCharS {\n+        char m();\n+    }\n+\n+    interface BigCharS {\n+        Character m();\n+    }\n+\n+    interface SmallIntS {\n+        int m();\n+    }\n+\n+    interface BigIntS {\n+        Integer m();\n+    }\n+\n+    interface SmallLongS {\n+        long m();\n+    }\n+\n+    interface BigLongS {\n+        Long m();\n+    }\n+\n+    interface SmallFloatS {\n+        float m();\n+    }\n+\n+    interface BigFloatS {\n+        Float m();\n+    }\n+\n+    interface SmallDoubleS {\n+        double m();\n+    }\n+\n+    interface BigDoubleS {\n+        Double m();\n+    }\n+\n+    interface BigNumberS {\n+        Number m();\n+    }\n+\n+\n+    static void testGenericBoolean(GenericC<Boolean> t) {\n+        t.m(true);\n+    }\n+\n+    static void testGenericByte(GenericC<Byte> t) {\n+        t.m((byte)1);\n+    }\n+\n+    static void testGenericShort(GenericC<Short> t) {\n+        t.m((short)1);\n+    }\n+\n+    static void testGenericChar(GenericC<Character> t) {\n+        t.m((char)1);\n+    }\n+\n+    static void testGenericInt(GenericC<Integer> t) {\n+        t.m(1);\n+    }\n+\n+    static void testGenericLong(GenericC<Long> t) {\n+        t.m(1l);\n+    }\n+\n+    static void testGenericFloat(GenericC<Float> t) {\n+        t.m(1.0f);\n+    }\n+\n+    static void testGenericDouble(GenericC<Double> t) {\n+        t.m(1.0d);\n+    }\n+\n+    static void testGenericNumber(GenericC<Number> t) {\n+        t.m(1);\n+    }\n+\n+    static void testSmallBoolean(SmallBooleanC t) {\n+        t.m(true);\n+    }\n+\n+    static void testSmallByte(SmallByteC t) {\n+        t.m((byte)1);\n+    }\n+\n+    static void testSmallShort(SmallShortC t) {\n+        t.m((short)1);\n+    }\n+\n+    static void testSmallChar(SmallCharC t) {\n+        t.m((char)1);\n+    }\n+\n+    static void testSmallInt(SmallIntC t) {\n+        t.m(1);\n+    }\n+\n+    static void testSmallLong(SmallLongC t) {\n+        t.m(1l);\n+    }\n+\n+    static void testSmallFloat(SmallFloatC t) {\n+        t.m(1.0f);\n+    }\n+\n+    static void testSmallDouble(SmallDoubleC t) {\n+        t.m(1.0d);\n+    }\n+\n+    static void testBigBoolean(BigBooleanC t) {\n+        t.m(true);\n+    }\n+\n+    static void testBigByte(BigByteC t) {\n+        t.m((byte)1);\n+    }\n+\n+    static void testBigShort(BigShortC t) {\n+        t.m((short)1);\n+    }\n+\n+    static void testBigChar(BigCharC t) {\n+        t.m((char)1);\n+    }\n+\n+    static void testBigInt(BigIntC t) {\n+        t.m(1);\n+    }\n+\n+    static void testBigLong(BigLongC t) {\n+        t.m(1l);\n+    }\n+\n+    static void testBigFloat(BigFloatC t) {\n+        t.m(1.0f);\n+    }\n+\n+    static void testBigDouble(BigDoubleC t) {\n+        t.m(1.0d);\n+    }\n+\n+    static void testBigNumber(BigNumberC t) {\n+        t.m(1);\n+    }\n+\n+\n+    static void testGenericBoolean(GenericS<Boolean> t) {\n+        assertEquals(true, t.m());\n+    }\n+\n+    static void testGenericByte(GenericS<Byte> t) {\n+        assertEquals((byte)1, t.m());\n+    }\n+\n+    static void testGenericShort(GenericS<Short> t) {\n+        assertEquals((short)1, t.m());\n+    }\n+\n+    static void testGenericChar(GenericS<Character> t) {\n+        assertEquals((char)1, t.m());\n+    }\n+\n+    static void testGenericInt(GenericS<Integer> t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testGenericLong(GenericS<Long> t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testGenericFloat(GenericS<Float> t) {\n+        assertEquals(1.0f, t.m());\n+    }\n+\n+    static void testGenericDouble(GenericS<Double> t) {\n+        assertEquals(1.0d, t.m());\n+    }\n+\n+    static void testGenericNumber(GenericS<Number> t) {\n+        assertEquals(1, t.m().intValue());\n+    }\n+\n+    static void testSmallBoolean(SmallBooleanS t) {\n+        assertEquals(true, t.m());\n+    }\n+\n+    static void testSmallByte(SmallByteS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testSmallShort(SmallShortS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testSmallChar(SmallCharS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testSmallInt(SmallIntS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testSmallLong(SmallLongS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testSmallFloat(SmallFloatS t) {\n+        assertEquals(1.0f, t.m());\n+    }\n+\n+    static void testSmallDouble(SmallDoubleS t) {\n+        assertEquals(1.0d, t.m());\n+    }\n+\n+    static void testBigBoolean(BigBooleanS t) {\n+        assertEquals(true, t.m());\n+    }\n+\n+    static void testBigByte(BigByteS t) {\n+        assertEquals((byte)1, t.m());\n+    }\n+\n+    static void testBigShort(BigShortS t) {\n+        assertEquals((short)1, t.m());\n+    }\n+\n+    static void testBigChar(BigCharS t) {\n+        assertEquals((char)1, t.m());\n+    }\n+\n+    static void testBigInt(BigIntS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testBigLong(BigLongS t) {\n+        assertEquals(1, t.m());\n+    }\n+\n+    static void testBigFloat(BigFloatS t) {\n+        assertEquals(1.0f, t.m());\n+    }\n+\n+    static void testBigDouble(BigDoubleS t) {\n+        assertEquals(1.0f, t.m());\n+    }\n+\n+    static void testBigNumber(BigNumberS t) {\n+        assertEquals(1, t.m().intValue());\n+    }\n+\n+\n+    @Test\n+    void testGenericBoolean() {\n+        testGenericBoolean(TypeConvertingTest::smallBooleanC);\n+        testGenericBoolean(TypeConvertingTest::bigBooleanC);\n+\n+        testGenericBoolean(TypeConvertingTest::smallBooleanS);\n+        testGenericBoolean(TypeConvertingTest::bigBooleanS);\n+    }\n+\n+    @Test\n+    void testGenericByte() {\n+        testGenericByte(TypeConvertingTest::smallByteC);\n+        testGenericByte(TypeConvertingTest::bigByteC);\n+        testGenericByte(TypeConvertingTest::smallShortC);\n+        testGenericByte(TypeConvertingTest::smallIntC);\n+        testGenericByte(TypeConvertingTest::smallLongC);\n+        testGenericByte(TypeConvertingTest::smallFloatC);\n+        testGenericByte(TypeConvertingTest::smallDoubleC);\n+        testGenericByte(TypeConvertingTest::numberC);\n+\n+        testGenericByte(TypeConvertingTest::smallByteS);\n+        testGenericByte(TypeConvertingTest::bigByteS);\n+    }\n+\n+    @Test\n+    void testGenericShort() {\n+        testGenericShort(TypeConvertingTest::smallShortC);\n+        testGenericShort(TypeConvertingTest::bigShortC);\n+        testGenericShort(TypeConvertingTest::smallIntC);\n+        testGenericShort(TypeConvertingTest::smallLongC);\n+        testGenericShort(TypeConvertingTest::smallFloatC);\n+        testGenericShort(TypeConvertingTest::smallDoubleC);\n+        testGenericShort(TypeConvertingTest::numberC);\n+\n+        testGenericShort(TypeConvertingTest::smallShortS);\n+        testGenericShort(TypeConvertingTest::bigShortS);\n+    }\n+\n+    @Test\n+    void testGenericChar() {\n+        testGenericChar(TypeConvertingTest::smallCharC);\n+        testGenericChar(TypeConvertingTest::bigCharC);\n+        testGenericChar(TypeConvertingTest::smallIntC);\n+        testGenericChar(TypeConvertingTest::smallLongC);\n+        testGenericChar(TypeConvertingTest::smallFloatC);\n+        testGenericChar(TypeConvertingTest::smallDoubleC);\n+\n+        testGenericChar(TypeConvertingTest::smallCharS);\n+        testGenericChar(TypeConvertingTest::bigCharS);\n+    }\n+\n+    @Test\n+    void testGenericInt() {\n+        testGenericInt(TypeConvertingTest::smallIntC);\n+        testGenericInt(TypeConvertingTest::bigIntC);\n+        testGenericInt(TypeConvertingTest::smallLongC);\n+        testGenericInt(TypeConvertingTest::smallFloatC);\n+        testGenericInt(TypeConvertingTest::smallDoubleC);\n+        testGenericInt(TypeConvertingTest::numberC);\n+\n+        testGenericInt(TypeConvertingTest::smallIntS);\n+        testGenericInt(TypeConvertingTest::bigIntS);\n+    }\n+\n+    @Test\n+    void testGenericLong() {\n+        testGenericLong(TypeConvertingTest::smallLongC);\n+        testGenericLong(TypeConvertingTest::bigLongC);\n+        testGenericLong(TypeConvertingTest::smallFloatC);\n+        testGenericLong(TypeConvertingTest::smallDoubleC);\n+        testGenericLong(TypeConvertingTest::numberC);\n+\n+        testGenericLong(TypeConvertingTest::smallLongS);\n+        testGenericLong(TypeConvertingTest::bigLongS);\n+    }\n+\n+    @Test\n+    void testGenericFloat() {\n+        testGenericFloat(TypeConvertingTest::smallFloatC);\n+        testGenericFloat(TypeConvertingTest::bigFloatC);\n+        testGenericFloat(TypeConvertingTest::smallDoubleC);\n+        testGenericFloat(TypeConvertingTest::numberC);\n+\n+        testGenericFloat(TypeConvertingTest::smallFloatS);\n+        testGenericFloat(TypeConvertingTest::bigFloatS);\n+    }\n+\n+    @Test\n+    void testGenericDouble() {\n+        testGenericDouble(TypeConvertingTest::smallDoubleC);\n+        testGenericDouble(TypeConvertingTest::bigDoubleC);\n+        testGenericDouble(TypeConvertingTest::numberC);\n+\n+        testGenericDouble(TypeConvertingTest::smallDoubleS);\n+        testGenericDouble(TypeConvertingTest::bigDoubleS);\n+    }\n+\n+    @Test\n+    void testGenericNumber() {\n+        testGenericNumber(TypeConvertingTest::numberC);\n+\n+        testGenericNumber(TypeConvertingTest::numberS);\n+    }\n+\n+    @Test\n+    void testSmallBoolean() {\n+        testSmallBoolean(TypeConvertingTest::smallBooleanC);\n+        testSmallBoolean(TypeConvertingTest::bigBooleanC);\n+\n+        testSmallBoolean(TypeConvertingTest::smallBooleanS);\n+        testSmallBoolean(TypeConvertingTest::bigBooleanS);\n+    }\n+\n+    @Test\n+    void testSmallByte() {\n+        testSmallByte(TypeConvertingTest::smallByteC);\n+        testSmallByte(TypeConvertingTest::bigByteC);\n+        testSmallByte(TypeConvertingTest::smallShortC);\n+        testSmallByte(TypeConvertingTest::smallIntC);\n+        testSmallByte(TypeConvertingTest::smallLongC);\n+        testSmallByte(TypeConvertingTest::smallFloatC);\n+        testSmallByte(TypeConvertingTest::smallDoubleC);\n+        testSmallByte(TypeConvertingTest::numberC);\n+\n+        testSmallByte(TypeConvertingTest::smallByteS);\n+        testSmallByte(TypeConvertingTest::bigByteS);\n+    }\n+\n+    @Test\n+    void testSmallShort() {\n+        testSmallShort(TypeConvertingTest::smallShortC);\n+        testSmallShort(TypeConvertingTest::bigShortC);\n+        testSmallShort(TypeConvertingTest::smallIntC);\n+        testSmallShort(TypeConvertingTest::smallLongC);\n+        testSmallShort(TypeConvertingTest::smallFloatC);\n+        testSmallShort(TypeConvertingTest::smallDoubleC);\n+        testSmallShort(TypeConvertingTest::numberC);\n+\n+        testSmallShort(TypeConvertingTest::smallShortS);\n+        testSmallShort(TypeConvertingTest::bigShortS);\n+    }\n+\n+    @Test\n+    void testSmallChar() {\n+        testSmallChar(TypeConvertingTest::smallCharC);\n+        testSmallChar(TypeConvertingTest::bigCharC);\n+        testSmallChar(TypeConvertingTest::smallIntC);\n+        testSmallChar(TypeConvertingTest::smallLongC);\n+        testSmallChar(TypeConvertingTest::smallFloatC);\n+        testSmallChar(TypeConvertingTest::smallDoubleC);\n+\n+        testSmallChar(TypeConvertingTest::smallCharS);\n+        testSmallChar(TypeConvertingTest::bigCharS);\n+    }\n+\n+    @Test\n+    void testSmallInt() {\n+        testSmallInt(TypeConvertingTest::smallIntC);\n+        testSmallInt(TypeConvertingTest::bigIntC);\n+        testSmallInt(TypeConvertingTest::smallLongC);\n+        testSmallInt(TypeConvertingTest::smallFloatC);\n+        testSmallInt(TypeConvertingTest::smallDoubleC);\n+        testSmallInt(TypeConvertingTest::numberC);\n+\n+        testSmallInt(TypeConvertingTest::smallIntS);\n+        testSmallInt(TypeConvertingTest::bigIntS);\n+    }\n+\n+    @Test\n+    void testSmallLong() {\n+        testSmallLong(TypeConvertingTest::smallLongC);\n+        testSmallLong(TypeConvertingTest::bigLongC);\n+        testSmallLong(TypeConvertingTest::smallFloatC);\n+        testSmallLong(TypeConvertingTest::smallDoubleC);\n+        testSmallLong(TypeConvertingTest::numberC);\n+\n+        testSmallLong(TypeConvertingTest::smallLongS);\n+        testSmallLong(TypeConvertingTest::bigLongS);\n+    }\n+\n+    @Test\n+    void testSmallFloat() {\n+        testSmallFloat(TypeConvertingTest::smallFloatC);\n+        testSmallFloat(TypeConvertingTest::bigFloatC);\n+        testSmallFloat(TypeConvertingTest::smallDoubleC);\n+        testSmallFloat(TypeConvertingTest::numberC);\n+\n+        testSmallFloat(TypeConvertingTest::smallFloatS);\n+        testSmallFloat(TypeConvertingTest::bigFloatS);\n+    }\n+\n+    @Test\n+    void testSmallDouble() {\n+        testSmallDouble(TypeConvertingTest::smallDoubleC);\n+        testSmallDouble(TypeConvertingTest::bigDoubleC);\n+        testSmallDouble(TypeConvertingTest::numberC);\n+\n+        testSmallDouble(TypeConvertingTest::smallDoubleS);\n+        testSmallDouble(TypeConvertingTest::bigDoubleS);\n+    }\n+\n+    @Test\n+    void testBigBoolean() {\n+        testBigBoolean(TypeConvertingTest::smallBooleanC);\n+        testBigBoolean(TypeConvertingTest::bigBooleanC);\n+\n+        testBigBoolean(TypeConvertingTest::smallBooleanS);\n+        testBigBoolean(TypeConvertingTest::bigBooleanS);\n+    }\n+\n+    @Test\n+    void testBigByte() {\n+        testBigByte(TypeConvertingTest::smallByteC);\n+        testBigByte(TypeConvertingTest::bigByteC);\n+        testBigByte(TypeConvertingTest::smallShortC);\n+        testBigByte(TypeConvertingTest::smallIntC);\n+        testBigByte(TypeConvertingTest::smallLongC);\n+        testBigByte(TypeConvertingTest::smallFloatC);\n+        testBigByte(TypeConvertingTest::smallDoubleC);\n+        testBigByte(TypeConvertingTest::numberC);\n+\n+        testBigByte(TypeConvertingTest::smallByteS);\n+        testBigByte(TypeConvertingTest::bigByteS);\n+    }\n+\n+    @Test\n+    void testBigShort() {\n+        testBigShort(TypeConvertingTest::smallShortC);\n+        testBigShort(TypeConvertingTest::bigShortC);\n+        testBigShort(TypeConvertingTest::smallIntC);\n+        testBigShort(TypeConvertingTest::smallLongC);\n+        testBigShort(TypeConvertingTest::smallFloatC);\n+        testBigShort(TypeConvertingTest::smallDoubleC);\n+        testBigShort(TypeConvertingTest::numberC);\n+\n+        testBigShort(TypeConvertingTest::smallShortS);\n+        testBigShort(TypeConvertingTest::bigShortS);\n+    }\n+\n+    @Test\n+    void testBigChar() {\n+        testBigChar(TypeConvertingTest::smallCharC);\n+        testBigChar(TypeConvertingTest::bigCharC);\n+        testBigChar(TypeConvertingTest::smallIntC);\n+        testBigChar(TypeConvertingTest::smallLongC);\n+        testBigChar(TypeConvertingTest::smallFloatC);\n+        testBigChar(TypeConvertingTest::smallDoubleC);\n+\n+        testBigChar(TypeConvertingTest::smallCharS);\n+        testBigChar(TypeConvertingTest::bigCharS);\n+    }\n+\n+    @Test\n+    void testBigInt() {\n+        testBigInt(TypeConvertingTest::smallIntC);\n+        testBigInt(TypeConvertingTest::bigIntC);\n+        testBigInt(TypeConvertingTest::smallLongC);\n+        testBigInt(TypeConvertingTest::smallFloatC);\n+        testBigInt(TypeConvertingTest::smallDoubleC);\n+        testBigInt(TypeConvertingTest::numberC);\n+\n+        testBigInt(TypeConvertingTest::smallIntS);\n+        testBigInt(TypeConvertingTest::bigIntS);\n+    }\n+\n+    @Test\n+    void testBigLong() {\n+        testBigLong(TypeConvertingTest::smallLongC);\n+        testBigLong(TypeConvertingTest::bigLongC);\n+        testBigLong(TypeConvertingTest::smallFloatC);\n+        testBigLong(TypeConvertingTest::smallDoubleC);\n+        testBigLong(TypeConvertingTest::numberC);\n+\n+        testBigLong(TypeConvertingTest::smallLongS);\n+        testBigLong(TypeConvertingTest::bigLongS);\n+    }\n+\n+    @Test\n+    void testBigFloat() {\n+        testBigFloat(TypeConvertingTest::smallFloatC);\n+        testBigFloat(TypeConvertingTest::bigFloatC);\n+        testBigFloat(TypeConvertingTest::smallDoubleC);\n+        testBigFloat(TypeConvertingTest::numberC);\n+\n+        testBigFloat(TypeConvertingTest::smallFloatS);\n+        testBigFloat(TypeConvertingTest::bigFloatS);\n+    }\n+\n+    @Test\n+    void testBigDouble() {\n+        testBigDouble(TypeConvertingTest::smallDoubleC);\n+        testBigDouble(TypeConvertingTest::bigDoubleC);\n+        testBigDouble(TypeConvertingTest::numberC);\n+\n+        testBigDouble(TypeConvertingTest::smallDoubleS);\n+        testBigDouble(TypeConvertingTest::bigDoubleS);\n+    }\n+\n+    @Test\n+    void testBigNumber() {\n+        testBigNumber(TypeConvertingTest::numberC);\n+\n+        testBigNumber(TypeConvertingTest::numberS);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/TypeConvertingTest.java","additions":798,"deletions":0,"binary":false,"changes":798,"status":"added"}]}