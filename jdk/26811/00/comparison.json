{"files":[{"patch":"@@ -72,1 +72,1 @@\n-                descriptors.add(String.valueOf(object));\n+                values.add(String.valueOf(object));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/AnnotationElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-     * Returns the settings that specifies how a recording is configured.\n+     * Returns the settings that specify how a recording is configured.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Configuration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-     * @return {@code true} if by default the event should be enabled by default, {@code false} otherwise\n+     * @return {@code true} if by default the event should be enabled, {@code false} otherwise\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Enabled.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,1 @@\n-            label = platformEventType.getLabel();;\n+            label = platformEventType.getLabel();\n@@ -229,1 +229,1 @@\n-     * Returns the list of human-readable names that makes up the categories for\n+     * Returns the list of human-readable names that make up the categories for\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-     * This method is also be invoked when a listener is added to an already\n+     * This method is also invoked when a listener is added to an already\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * The following example shows how configure, start, stop and dump recording data to disk.\n+ * The following example shows how to configure, start, stop and dump recording data to disk.\n@@ -141,1 +141,1 @@\n-     * @param configuration configuration that contains the settings to be use, not\n+     * @param configuration configuration that contains the settings to be used, not\n@@ -342,1 +342,1 @@\n-     * with the {@link #setMaxAge(Duration)} method and the {@link #setMaxSize(long)}method.\n+     * with the {@link #setMaxAge(Duration)} method and the {@link #setMaxSize(long)} method.\n@@ -618,1 +618,1 @@\n-     * If multiple events with same name (for example, the same class is loaded\n+     * If multiple events with the same name (for example, the same class is loaded\n@@ -620,1 +620,1 @@\n-     * name is disabled. To disable a specific class, use the\n+     * name are disabled. To disable a specific class, use the\n@@ -656,1 +656,1 @@\n-     * @param eventClass the event to enable, not {@code null}\n+     * @param eventClass the event to disable, not {@code null}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-     * Specifies that events arrives in chronological order, sorted by the time\n+     * Specifies that events arrive in chronological order, sorted by the time\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/EventStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-     * @return an immutable list of added event types, not {@code null}\n+     * @return an immutable list of removed event types, not {@code null}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/MetadataEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-     * Returns the class this method belongs to, if it belong to a Java frame.\n+     * Returns the class this method belongs to, if it belongs to a Java frame.\n@@ -102,1 +102,1 @@\n-     * expressions).\n+     * expression).\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * The following example shows how read and print all events in a recording file.\n+ * The following example shows how to read and print all events in a recording file.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,2 +235,2 @@\n-     * If neither maximum limit or the maximum age is set, the size of the\n-     * recording may grow indefinitely if events are on\n+     * If neither the maximum limit nor the maximum age is set, the size of the\n+     * recording may grow indefinitely if events are not consumed.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * parameters is passed to a method that throws other exceptions, such as\n+ * parameter is passed to a method that throws other exceptions, such as\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            eventType.setThrottler(new Throttler(eventType));\n+            eventType.setThrottler(new Throttler());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-                list.add(o);\n+                list.add(o == NULL_OBJECT ? null : o);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/LongMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.jfr.events.ActiveSettingEvent;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.jfr.FlightRecorderPermission;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PrivateAccess.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.nio.file.Paths;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/management\/ChunkFilename.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.jfr.internal.MetadataRepository;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/FlushTask.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        @SuppressWarnings({ \"unchecked\"})\n@@ -61,2 +61,2 @@\n-            if (keys instanceof Set set) {\n-                set.add(o);\n+            if (keys instanceof Set<?> set) {\n+                ((Set<Object>) set).add(o);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Histogram.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.function.BiConsumer;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/QueryParser.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import static jdk.jfr.internal.util.TimespanUnit.SECONDS;\n-import static jdk.jfr.internal.util.TimespanUnit.MILLISECONDS;\n-\n@@ -44,1 +41,0 @@\n-import jdk.jfr.internal.util.Utils;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CPUThrottleSetting.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private volatile static boolean initialized;\n+    private static volatile boolean initialized;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/MethodSetting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-    public Throttler(PlatformEventType t) {\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/Throttler.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-    public static <T> Predicate<T> matchAny(List<Predicate<T>> filters) {\n+    public static <T> Predicate<T> matchAll(List<Predicate<T>> filters) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Filters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,1 +206,1 @@\n-                filter =  Filters.matchAny(filters);\n+                filter = Filters.matchAll(filters);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-            eventWriter.setEventFilter(Filters.matchAny(eventFilters));\n+            eventWriter.setEventFilter(Filters.matchAll(eventFilters));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Print.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-        return Filters.matchAny(filters);\n+        return Filters.matchAll(filters);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Scrub.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import jdk.jfr.internal.Type;\n@@ -267,10 +266,9 @@\n-        try {\n-            Logger.log(LogTag.JFR_METHODTRACE, LogLevel.DEBUG, \"Method tracer initialization started.\");\n-            Thread current = Thread.currentThread();\n-            JVM.exclude(current);\n-            long methodId = 16384126;\n-            long classId = methodId >> 16;\n-            ClassLoader cl = null;\n-            String className = \" java\/lang\/String\";\n-            Module m = String.class.getModule();\n-            var is = ClassLoader.getSystemClassLoader().getResourceAsStream(\"java\/lang\/String.class\");\n+        Logger.log(LogTag.JFR_METHODTRACE, LogLevel.DEBUG, \"Method tracer initialization started.\");\n+        Thread current = Thread.currentThread();\n+        JVM.exclude(current);\n+        long methodId = 16384126;\n+        long classId = methodId >> 16;\n+        ClassLoader cl = null;\n+        String className = \"java\/lang\/String\";\n+        Module m = String.class.getModule();\n+        try (var is = ClassLoader.getSystemClassLoader().getResourceAsStream(\"java\/lang\/String.class\")) {\n@@ -278,1 +276,0 @@\n-            is.close();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/PlatformTracer.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import jdk.jfr.internal.settings.CPUThrottleSetting;\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/TimespanRate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * fields that matches the data types of the payload. Metadata about fields,\n+ * fields that match the data types of the payload. Metadata about fields,\n@@ -235,1 +235,1 @@\n- * parameters is passed to a method that throws other exceptions, such as\n+ * parameters are passed to a method that throws other exceptions, such as\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,1 +166,1 @@\n-     * {@code \"Garbage collection performed by the JVM\"\"}.\n+     * {@code \"Garbage collection performed by the JVM\"}.\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/EventTypeInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.file.Paths;\n@@ -50,1 +51,1 @@\n- * Specify which events should be enabled and what kind information each\n+ * Specify which events should be enabled and what kind of information each\n@@ -62,1 +63,1 @@\n- * The following table shows the options names to use with {@link #setRecordingOptions(long, Map)}\n+ * The following table shows the option names to use with {@link #setRecordingOptions(long, Map)}\n@@ -70,1 +71,1 @@\n- * <th scope=\"col\">Descripion<\/th>\n+ * <th scope=\"col\">Description<\/th>\n@@ -110,1 +111,1 @@\n- * <td>Specifies the size, measured in bytes, at which data is kept in disk\n+ * <td>Specifies the size, measured in bytes, at which data is kept in the disk\n@@ -134,2 +135,2 @@\n- * is relative to the working directory where the target JVM was started.}<\/td>\n- * <td>{@code \"c:\\recording\\recotding.jfr\"},<br>\n+ * is relative to the working directory where the target JVM was started.<\/td>\n+ * <td>{@code \"c:\\recording\\recording.jfr\"},<br>\n@@ -148,1 +149,1 @@\n- * <td>Sets how long the recording should be running<\/td>\n+ * <td>Specifies the duration of the recording.<\/td>\n@@ -290,1 +291,1 @@\n-     * <th scope=\"col\">Descripion<\/th>\n+     * <th scope=\"col\">Description<\/th>\n@@ -340,1 +341,1 @@\n-     * To be able to read from a running recording the value must be set<\/td>\n+     * To be able to read from a running recording the value must be set to<\/td>\n@@ -358,1 +359,1 @@\n-     * @throws IllegalArgumentException if a recording with the iD doesn't\n+     * @throws IllegalArgumentException if a recording with the ID doesn't\n@@ -428,1 +429,1 @@\n-     * @param recordingId the ID of the recordings to get settings for\n+     * @param recordingId the ID of the recording to get settings for\n@@ -525,1 +526,1 @@\n-     * Returns the list of the available recordings, not necessarily running.\n+     * Returns the list of available recordings, not necessarily running.\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/FlightRecorderMXBean.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-     * {@code \"The duration an event must exceed to be be recorded\"}).\n+     * {@code \"The duration an event must exceed to be recorded\"}).\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/SettingDescriptorInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}