{"files":[{"patch":"@@ -44,4 +44,0 @@\n-  do_stub(initial, get_previous_sp)                                     \\\n-  do_arch_entry(x86, initial, get_previous_sp,                          \\\n-                get_previous_sp_entry,                                  \\\n-                get_previous_sp_entry)                                  \\\n","filename":"src\/hotspot\/cpu\/x86\/stubDeclarations_x86.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -544,16 +544,0 @@\n-\/\/ Support for intptr_t get_previous_sp()\n-\/\/\n-\/\/ This routine is used to find the previous stack pointer for the\n-\/\/ caller.\n-address StubGenerator::generate_get_previous_sp() {\n-  StubId stub_id = StubId::stubgen_get_previous_sp_id;\n-  StubCodeMark mark(this, stub_id);\n-  address start = __ pc();\n-\n-  __ movptr(rax, rsp);\n-  __ addptr(rax, 8); \/\/ return address is at the top of the stack.\n-  __ ret(0);\n-\n-  return start;\n-}\n-\n@@ -4086,2 +4070,0 @@\n-  StubRoutines::x86::_get_previous_sp_entry = generate_get_previous_sp();\n-\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -71,6 +71,0 @@\n-  \/\/ Support for intptr_t get_previous_sp()\n-  \/\/\n-  \/\/ This routine is used to find the previous stack pointer for the\n-  \/\/ caller.\n-  address generate_get_previous_sp();\n-\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+#include <intrin.h>\n+\n@@ -342,0 +344,7 @@\n+\/\/ The function is intentionally not inlined. This way, the transfer of control\n+\/\/ into this method must be made with a call instruction. The MSVC\n+\/\/ _AddressOfReturnAddress() intrinsic returns the address of the return PC\n+\/\/ saved by that call instruction. Therefore, the stack pointer of the caller\n+\/\/ just before the call instruction, is acquired by skipping over the return PC\n+\/\/ slot in the stack.\n+__declspec(noinline)\n@@ -343,4 +352,1 @@\n-  typedef address get_sp_func();\n-  get_sp_func* func = CAST_TO_FN_PTR(get_sp_func*,\n-                                     StubRoutines::x86::get_previous_sp_entry());\n-  return (*func)();\n+  return ((address)_AddressOfReturnAddress()) + sizeof(void*);\n@@ -503,5 +509,1 @@\n-  \/\/ The current_stack_pointer() calls generated get_previous_sp stub routine.\n-  \/\/ Only enable the assert after the routine becomes available.\n-  if (StubRoutines::initial_stubs_code() != nullptr) {\n-    assert(((intptr_t)os::current_stack_pointer() & (StackAlignmentInBytes-1)) == 0, \"incorrect stack alignment\");\n-  }\n+  assert(((intptr_t)os::current_stack_pointer() & (StackAlignmentInBytes-1)) == 0, \"incorrect stack alignment\");\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}