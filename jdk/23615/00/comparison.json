{"files":[{"patch":"@@ -0,0 +1,9 @@\n+JUnit.dirs = .\n+\n+lib.dirs = \/test\/jdk\/tools\/jpackage\/helpers \/test\/jdk\/tools\/jpackage\/helpers-test\n+\n+modules=jdk.jpackage\/jdk.jpackage.internal:+open \\\n+        jdk.jpackage\/jdk.jpackage.internal.util:+open \\\n+        jdk.jpackage\/jdk.jpackage.internal.util.function:+open \\\n+        java.base\/jdk.internal.util \\\n+        jdk.jlink\/jdk.tools.jlink.internal\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/TEST.properties","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -26,0 +26,3 @@\n+import static java.util.stream.Collectors.toMap;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+\n@@ -35,1 +38,0 @@\n-import static java.util.stream.Collectors.toMap;\n@@ -42,1 +44,4 @@\n-import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -44,19 +49,17 @@\n-\/*\n- * @test\n- * @summary Test jpackage test library's annotation processor\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @build jdk.jpackage.test.*\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.AnnotationsTest\n- *\/\n-public class AnnotationsTest {\n-\n-    public static void main(String... args) {\n-        runTests(List.of(BasicTest.class, ParameterizedInstanceTest.class));\n-        for (var os : OperatingSystem.values()) {\n-            try {\n-                TestBuilderConfig.setOperatingSystem(os);\n-                TKit.log(\"Current operating system: \" + os);\n-                runTests(List.of(IfOSTest.class));\n-            } finally {\n-                TestBuilderConfig.setDefaults();\n-            }\n+public class AnnotationsTest extends JUnitAdapter {\n+\n+    @ParameterizedTest\n+    @ValueSource(classes = {BasicTest.class, ParameterizedInstanceTest.class})\n+    public void test(Class<? extends TestExecutionRecorder> clazz, @TempDir Path workDir) {\n+        runTest(clazz, workDir);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(OperatingSystem.class)\n+    public void testIfOSTest(OperatingSystem os, @TempDir Path workDir) {\n+        try {\n+            TestBuilderConfig.setOperatingSystem(os);\n+            TKit.log(\"Current operating system: \" + os);\n+            runTest(IfOSTest.class, workDir);\n+        } finally {\n+            TestBuilderConfig.setDefaults();\n@@ -303,1 +306,1 @@\n-    private static void runTests(List<Class<? extends TestExecutionRecorder>> tests) {\n+    private static void runTest(Class<? extends TestExecutionRecorder> test, Path workDir) {\n@@ -306,3 +309,1 @@\n-        var expectedTestDescs = tests.stream()\n-                .map(AnnotationsTest::getExpectedTestDescs)\n-                .flatMap(x -> x)\n+        var expectedTestDescs = getExpectedTestDescs(test)\n@@ -313,3 +314,1 @@\n-        var args = tests.stream().map(test -> {\n-            return String.format(\"--jpt-run=%s\", test.getName());\n-        }).toArray(String[]::new);\n+        var args = new String[] { String.format(\"--jpt-run=%s\", test.getName()) };\n@@ -318,1 +317,1 @@\n-            Main.main(args);\n+            Main.main(TestBuilder.build().workDirRoot(workDir), args);\n@@ -323,0 +322,1 @@\n+            return;\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/AnnotationsTest.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -25,1 +25,5 @@\n-import java.io.IOException;\n+import static java.util.stream.Collectors.toSet;\n+import static jdk.jpackage.test.DirectoryContentVerifierTest.AssertType.CONTAINS;\n+import static jdk.jpackage.test.DirectoryContentVerifierTest.AssertType.MATCH;\n+import static jdk.jpackage.test.TKit.assertAssert;\n+\n@@ -33,1 +37,0 @@\n-import static java.util.stream.Collectors.toSet;\n@@ -35,1 +38,1 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -37,2 +40,0 @@\n-import static jdk.jpackage.test.DirectoryContentVerifierTest.AssertType.CONTAINS;\n-import static jdk.jpackage.test.DirectoryContentVerifierTest.AssertType.MATCH;\n@@ -40,1 +41,0 @@\n-import static jdk.jpackage.test.TKit.assertAssert;\n@@ -42,1 +42,1 @@\n-public class DirectoryContentVerifierTest {\n+public class DirectoryContentVerifierTest extends JUnitAdapter {\n@@ -108,1 +108,0 @@\n-    @Parameters\n@@ -130,8 +129,0 @@\n-    public DirectoryContentVerifierTest(String[] expectedPaths, String[] actualPaths,\n-            AssertType assertOp, Boolean success) {\n-        this.expectedPaths = conv(expectedPaths);\n-        this.actualPaths = conv(actualPaths);\n-        this.assertOp = assertOp;\n-        this.success = success;\n-    }\n-\n@@ -139,8 +130,8 @@\n-    public void test() {\n-        TKit.withTempDirectory(\"basedir\", this::test);\n-    }\n-\n-    private void test(Path basedir) throws IOException {\n-        for (var path : actualPaths) {\n-            Files.createFile(basedir.resolve(path));\n-        }\n+    @ParameterSupplier(\"input\")\n+    public void test(String[] expectedPaths, String[] actualPaths, AssertType assertOp, Boolean success) {\n+        final var expectedPathsAsSet = conv(expectedPaths);\n+        final var actualPathsAsSet = conv(actualPaths);\n+        TKit.withTempDirectory(\"basedir\", basedir -> {\n+            for (var path : actualPathsAsSet) {\n+                Files.createFile(basedir.resolve(path));\n+            }\n@@ -148,1 +139,1 @@\n-        var testee = TKit.assertDirectoryContent(basedir);\n+            var testee = TKit.assertDirectoryContent(basedir);\n@@ -150,1 +141,2 @@\n-        assertAssert(success, () -> assertOp.assertFunc.accept(testee, expectedPaths));\n+            assertAssert(success, () -> assertOp.assertFunc.accept(testee, expectedPathsAsSet));\n+        });\n@@ -156,5 +148,0 @@\n-\n-    private final Set<Path> expectedPaths;\n-    private final Set<Path> actualPaths;\n-    private final AssertType assertOp;\n-    private final boolean success;\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/DirectoryContentVerifierTest.java","additions":18,"deletions":31,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.List;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class JUnitAdapter {\n+\n+    JUnitAdapter() {\n+        if (System.getProperty(\"test.src\") == null) {\n+            \/\/ Was called by somebody else but not by jtreg\n+            System.setProperty(\"test.src\", Path.of(\"@@openJdkDir@@\/test\/jdk\/tools\/jpackage\").toString());\n+        }\n+    }\n+\n+    @Test\n+    void runJPackageTests(@TempDir Path workDir) throws Throwable {\n+        if (!getClass().equals(JUnitAdapter.class)) {\n+            Main.main(TestBuilder.build().workDirRoot(workDir), new String [] {\n+                    \"--jpt-before-run=jdk.jpackage.test.JPackageCommand.useToolProviderByDefault\",\n+                    \"--jpt-run=\" + getClass().getName()\n+                    });\n+        }\n+    }\n+\n+    static List<String> captureJPackageTestLog(ThrowingRunnable runnable) {\n+        final var buf = new ByteArrayOutputStream();\n+        try (PrintStream ps = new PrintStream(buf, true, StandardCharsets.UTF_8)) {\n+            TKit.withExtraLogStream(runnable, ps);\n+        }\n+\n+        try (final var in = new ByteArrayInputStream(buf.toByteArray());\n+                final var reader = new InputStreamReader(in, StandardCharsets.UTF_8);\n+                final var bufReader = new BufferedReader(reader)) {\n+            return bufReader.lines().map(line -> {\n+                \/\/ Skip timestamp\n+                return line.substring(LOG_MSG_TIMESTAMP_LENGTH);\n+            }).toList();\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private static final int LOG_MSG_TIMESTAMP_LENGTH = \"[HH:mm:ss.SSS] \".length();\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/JUnitAdapter.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -30,1 +31,0 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n@@ -32,6 +32,1 @@\n-public class JavaAppDescTest {\n-\n-    public JavaAppDescTest(JavaAppDesc expectedAppDesc, JavaAppDesc actualAppDesc) {\n-        this.expectedAppDesc = expectedAppDesc;\n-        this.actualAppDesc = actualAppDesc;\n-    }\n+public class JavaAppDescTest extends JUnitAdapter {\n@@ -40,1 +35,2 @@\n-    public void test() {\n+    @ParameterSupplier(\"input\")\n+    public void test(JavaAppDesc expectedAppDesc, JavaAppDesc actualAppDesc) {\n@@ -56,1 +52,0 @@\n-    @Parameters\n@@ -96,2 +91,0 @@\n-    private final JavaAppDesc expectedAppDesc;\n-    private final JavaAppDesc actualAppDesc;\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/JavaAppDescTest.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,5 +25,3 @@\n-import java.io.BufferedReader;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStreamReader;\n-import java.io.PrintStream;\n+import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+\n@@ -31,1 +29,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -38,2 +35,0 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n-import jdk.jpackage.test.Annotations.Test;\n@@ -41,2 +36,2 @@\n-import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n-import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -44,1 +39,1 @@\n-public class TKitTest {\n+public class TKitTest extends JUnitAdapter {\n@@ -46,1 +41,0 @@\n-    @Parameters\n@@ -194,4 +188,0 @@\n-    public TKitTest(MethodCallConfig methodCall) {\n-        this.methodCall = methodCall;\n-    }\n-\n@@ -199,1 +189,2 @@\n-    public void test() {\n+    @ParameterSupplier(\"assertTestsData\")\n+    public void test(MethodCallConfig methodCall) {\n@@ -214,17 +205,5 @@\n-        final var buf = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(buf, true, StandardCharsets.UTF_8)) {\n-            TKit.withExtraLogStream(action, ps);\n-        } finally {\n-            toRunnable(() -> {\n-                var output = new BufferedReader(new InputStreamReader(\n-                        new ByteArrayInputStream(buf.toByteArray()),\n-                        StandardCharsets.UTF_8)).lines().map(line -> {\n-                            \/\/ Skip timestamp\n-                            return line.substring(LOG_MSG_TIMESTAMP_LENGTH);\n-                        }).toList();\n-                if (output.size() == 1 && expectLogStrings.length == 1) {\n-                    TKit.assertEquals(expectLogStrings[0], output.get(0), null);\n-                } else {\n-                    TKit.assertStringListEquals(List.of(expectLogStrings), output, null);\n-                }\n-            }).run();\n+        final var output = JUnitAdapter.captureJPackageTestLog(action);\n+        if (output.size() == 1 && expectLogStrings.length == 1) {\n+            TKit.assertEquals(expectLogStrings[0], output.get(0), null);\n+        } else {\n+            TKit.assertStringListEquals(List.of(expectLogStrings), output, null);\n@@ -240,4 +219,0 @@\n-\n-    private final MethodCallConfig methodCall;\n-\n-    private static final int LOG_MSG_TIMESTAMP_LENGTH = \"[HH:mm:ss.SSS] \".length();\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/TKitTest.java","additions":13,"deletions":38,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.test;\n-\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-\/*\n- * @test\n- * @summary Unit tests for jpackage test library\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @library \/test\/jdk\/tools\/jpackage\/helpers-test\n- * @build jdk.jpackage.test.*\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.TestSuite\n- *\/\n-\n-public final class TestSuite {\n-    public static void main(String args[]) throws Throwable {\n-        final var pkgName = TestSuite.class.getPackageName();\n-        final var javaSuffix = \".java\";\n-        final var testSrcNameSuffix = \"Test\" + javaSuffix;\n-\n-        final var unitTestDir = TKit.TEST_SRC_ROOT.resolve(Path.of(\"helpers-test\", pkgName.split(\"\\\\.\")));\n-\n-        final List<String> runTestArgs = new ArrayList<>();\n-        runTestArgs.addAll(List.of(args));\n-\n-        try (var javaSources = Files.list(unitTestDir)) {\n-            runTestArgs.addAll(javaSources.filter(path -> {\n-                return path.getFileName().toString().endsWith(testSrcNameSuffix);\n-            }).map(path -> {\n-                var filename = path.getFileName().toString();\n-                return String.join(\".\", pkgName, filename.substring(0, filename.length() - javaSuffix.length()));\n-            }).map(testClassName -> {\n-                return \"--jpt-run=\" + testClassName;\n-            }).toList());\n-        }\n-\n-        Main.main(runTestArgs.toArray(String[]::new));\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/TestSuite.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -41,0 +41,1 @@\n+\n@@ -42,0 +43,4 @@\n+        main(TestBuilder.build(), args);\n+    }\n+\n+    public static void main(TestBuilder.Builder builder, String args[]) throws Throwable {\n@@ -44,1 +49,1 @@\n-        try (TestBuilder testBuilder = new TestBuilder(tests::add)) {\n+        try (TestBuilder testBuilder = builder.testConsumer(tests::add).create()) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Main.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n+import static jdk.jpackage.test.TestMethodSupplier.MethodQuery.fromQualifiedMethodName;\n+\n@@ -29,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -41,0 +45,2 @@\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n@@ -44,3 +50,0 @@\n-import jdk.jpackage.internal.util.function.ThrowingConsumer;\n-import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n-import jdk.jpackage.internal.util.function.ThrowingFunction;\n@@ -48,1 +51,0 @@\n-import static jdk.jpackage.test.TestMethodSupplier.MethodQuery.fromQualifiedMethodName;\n@@ -57,1 +59,27 @@\n-    TestBuilder(Consumer<TestInstance> testConsumer) {\n+    static Builder build() {\n+        return new Builder();\n+    }\n+\n+    final static class Builder {\n+        private Builder() {\n+        }\n+\n+        Builder testConsumer(Consumer<TestInstance> v) {\n+            testConsumer = v;\n+            return this;\n+        }\n+\n+        Builder workDirRoot(Path v) {\n+            workDirRoot = v;\n+            return this;\n+        }\n+\n+        TestBuilder create() {\n+            return new TestBuilder(testConsumer, workDirRoot);\n+        }\n+\n+        private Consumer<TestInstance> testConsumer;\n+        private Path workDirRoot = Path.of(\"\");\n+    }\n+\n+    private TestBuilder(Consumer<TestInstance> testConsumer, Path workDirRoot) {\n@@ -59,0 +87,1 @@\n+        this.workDirRoot = Objects.requireNonNull(workDirRoot);\n@@ -91,1 +120,1 @@\n-        this.testConsumer = testConsumer;\n+        this.testConsumer = Objects.requireNonNull(testConsumer);\n@@ -191,1 +220,1 @@\n-                curAfterActions, dryRun);\n+                curAfterActions, dryRun, workDirRoot);\n@@ -351,0 +380,1 @@\n+    private final Path workDirRoot;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestBuilder.java","additions":37,"deletions":7,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    TestInstance(ThrowingRunnable testBody) {\n+    TestInstance(ThrowingRunnable testBody, Path workDirRoot) {\n@@ -161,1 +161,1 @@\n-        this.workDir = createWorkDirName(testDesc);\n+        this.workDir = workDirRoot.resolve(createWorkDirPath(testDesc));\n@@ -165,1 +165,1 @@\n-            List<ThrowingConsumer<Object>> afterActions, boolean dryRun) {\n+            List<ThrowingConsumer<Object>> afterActions, boolean dryRun, Path workDirRoot) {\n@@ -173,1 +173,1 @@\n-        this.workDir = createWorkDirName(testDesc);\n+        this.workDir = workDirRoot.resolve(createWorkDirPath(testDesc));\n@@ -279,2 +279,2 @@\n-    private static Path createWorkDirName(TestDesc testDesc) {\n-        Path result = Path.of(\".\");\n+    private static Path createWorkDirPath(TestDesc testDesc) {\n+        Path result = Path.of(\"\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}