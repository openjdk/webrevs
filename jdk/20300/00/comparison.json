{"files":[{"patch":"@@ -1216,3 +1216,11 @@\n-                Type tDesc = types.findDescriptorType(types.capture(t));\n-                Type tDescNoCapture = types.findDescriptorType(t);\n-                Type sDesc = types.findDescriptorType(s);\n+                Type tDesc;\n+                Type tDescNoCapture;\n+                Type sDesc;\n+                try {\n+                    tDesc = types.findDescriptorType(types.capture(t));\n+                    tDescNoCapture = types.findDescriptorType(t);\n+                    sDesc = types.findDescriptorType(s);\n+                } catch (Types.FunctionDescriptorLookupError ex) {\n+                    \/\/ don't report, a more meaningful error should be reported upstream\n+                    return false;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334466\n+ * @summary Ambiguous method call with generics may cause FunctionDescriptorLookupError\n+ * @compile\/fail\/ref=CrashWithFunctionDescriptorLookupErrorTest.out -XDrawDiagnostics CrashWithFunctionDescriptorLookupErrorTest.java\n+ *\/\n+\n+import java.util.List;\n+\n+class CrashWithFunctionDescriptorLookupErrorTest {\n+    void m() {\n+        List<X> list = List.of(new X());\n+        test(list.get(0));\n+    }\n+\n+    void test(A<?> a) { }\n+    void test(B<?> b) { }\n+\n+    interface A<T extends A<T>> { T a(); }\n+    interface B<T extends B<T>> { T b(); }\n+    class X implements A<X>, B<X> {\n+        public X a() { return null; }\n+        public X b() { return null; }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/CrashWithFunctionDescriptorLookupErrorTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CrashWithFunctionDescriptorLookupErrorTest.java:13:9: compiler.err.ref.ambiguous: test, kindname.method, test(CrashWithFunctionDescriptorLookupErrorTest.A<?>), CrashWithFunctionDescriptorLookupErrorTest, kindname.method, test(CrashWithFunctionDescriptorLookupErrorTest.B<?>), CrashWithFunctionDescriptorLookupErrorTest\n+1 error\n","filename":"test\/langtools\/tools\/javac\/lambda\/CrashWithFunctionDescriptorLookupErrorTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}