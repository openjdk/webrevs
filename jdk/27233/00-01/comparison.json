{"files":[{"patch":"@@ -116,4 +116,5 @@\n- * @implNote Concurrent usage of {@code Collator} instances returned by the factory\n- * methods under the standard provider may lead to significant thread contention.\n- * As such, users should consider retrieving a separate instance for each thread\n- * when used in multithreaded environments.\n+ * @implNote Significant thread contention may occur during concurrent usage\n+ * of the JDK reference implementation's {@link RuleBasedCollator}, which is the\n+ * subtype returned by the default provider of the {@link #getInstance()} factory\n+ * methods. As such, users should consider retrieving a separate instance for\n+ * each thread when used in multithreaded environments.\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -239,3 +239,3 @@\n- * lead to significant thread contention. As such, users of this class should\n- * consider creating a separate instance for each thread when used in\n- * multithreaded environments.\n+ * lead to significant thread contention since {@code synchronized} is employed\n+ * to ensure thread-safety. As such, users of this class should consider creating\n+ * a separate instance for each thread when used in multithreaded environments.\n","filename":"src\/java.base\/share\/classes\/java\/text\/RuleBasedCollator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}