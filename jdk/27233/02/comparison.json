{"files":[{"patch":"@@ -114,2 +114,7 @@\n- * for {@link CollationKey}\n- * for an example using {@code CollationKey}s.\n+ * for {@link CollationKey} for an example using {@code CollationKey}s.\n+ *\n+ * @implNote Significant thread contention may occur during concurrent usage\n+ * of the JDK Reference Implementation's {@link RuleBasedCollator}, which is the\n+ * subtype returned by the default provider of the {@link #getInstance()} factory\n+ * methods. As such, users should consider retrieving a separate instance for\n+ * each thread when used in multithreaded environments.\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,0 @@\n-import java.text.Normalizer;\n-import java.util.Vector;\n-import java.util.Locale;\n-\n@@ -242,0 +238,5 @@\n+ * @implNote For this implementation, concurrent usage of this class may\n+ * lead to significant thread contention since {@code synchronized} is employed\n+ * to ensure thread-safety. As such, users of this class should consider creating\n+ * a separate instance for each thread when used in multithreaded environments.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/text\/RuleBasedCollator.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}