{"files":[{"patch":"@@ -1315,0 +1315,38 @@\n+    \/**\n+     * Reads a string using the given byte length from this segment at the given offset,\n+     * using the provided charset.\n+     * <p>\n+     * This method always replaces malformed-input and unmappable-character\n+     * sequences with this charset's default replacement string. The {@link\n+     * java.nio.charset.CharsetDecoder} class should be used when more control\n+     * over the decoding process is required.\n+     *\n+     * @param offset  offset in bytes (relative to this segment address) at which this\n+     *                access operation will occur\n+     * @param length  byte length to be used for string conversion (not including any\n+     *                null termination)\n+     * @param charset the charset used to {@linkplain Charset#newDecoder() decode} the\n+     *                string bytes\n+     * @return a Java string constructed from the bytes read from the given starting\n+     *         address reading the given length of characters\n+     * @throws IllegalArgumentException  if the size of the string is greater than the\n+     *         largest string supported by the platform\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - (B + N)}, where:\n+     *         <ul>\n+     *             <li>{@code B} is the size, in bytes, of the string encoded using the\n+     *             provided charset (e.g. {@code str.getBytes(charset).length});<\/li>\n+     *             <li>{@code N} is the size (in bytes) of the terminator char according\n+     *             to the provided charset. For instance, this is 1 for\n+     *             {@link StandardCharsets#US_ASCII} and 2 for {@link StandardCharsets#UTF_16}.<\/li>\n+     *         <\/ul>\n+     * @throws IllegalStateException if the {@linkplain #scope() scope} associated with\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n+     * @throws WrongThreadException if this method is called from a thread {@code T},\n+     *         such that {@code isAccessibleBy(T) == false}\n+     * @throws IllegalArgumentException if {@code charset} is not a\n+     *         {@linkplain StandardCharsets standard charset}\n+     * @throws IllegalArgumentException if {@code length < 0}\n+     *\/\n+    String getString(long offset, int length, Charset charset);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -983,0 +983,10 @@\n+    @Override\n+    public String getString(long offset, int length, Charset charset) {\n+        if (length < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        Objects.requireNonNull(charset);\n+\n+        return StringSupport.read(this, offset, length, charset);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,8 @@\n+    public static String read(MemorySegment segment, long offset, int len, Charset charset) {\n+        return switch (CharsetKind.of(charset)) {\n+            case SINGLE_BYTE -> readByte(segment, offset, len, charset);\n+            case DOUBLE_BYTE -> readShort(segment, offset, len, charset);\n+            case QUAD_BYTE -> readInt(segment, offset, len, charset);\n+        };\n+    }\n+\n@@ -65,3 +73,7 @@\n-        long len = chunkedStrlenByte(segment, offset);\n-        byte[] bytes = new byte[(int)len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, (int)len);\n+        int len = chunkedStrlenByte(segment, offset);\n+        return readByte(segment, offset, len, charset);\n+    }\n+\n+    private static String readByte(MemorySegment segment, long offset, int len, Charset charset) {\n+        byte[] bytes = new byte[len];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n@@ -77,3 +89,7 @@\n-        long len = chunkedStrlenShort(segment, offset);\n-        byte[] bytes = new byte[(int)len];\n-        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, (int)len);\n+        int len = chunkedStrlenShort(segment, offset);\n+        return readShort(segment, offset, len, charset);\n+    }\n+\n+    private static String readShort(MemorySegment segment, long offset, int len, Charset charset) {\n+        byte[] bytes = new byte[len];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n@@ -95,0 +111,6 @@\n+    private static String readInt(MemorySegment segment, long offset, int len, Charset charset) {\n+        byte[] bytes = new byte[len];\n+        MemorySegment.copy(segment, JAVA_BYTE, offset, bytes, 0, len);\n+        return new String(bytes, charset);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.Set;\n@@ -64,8 +65,0 @@\n-                        int terminatorSize = \"\\0\".getBytes(charset).length;\n-                        if (charset == StandardCharsets.UTF_16) {\n-                            terminatorSize -= 2; \/\/ drop BOM\n-                        }\n-                        \/\/ Note that the JDK's UTF_32 encoder doesn't add a BOM.\n-                        \/\/ This is legal under the Unicode standard, and means the byte order is BE.\n-                        \/\/ See: https:\/\/unicode.org\/faq\/utf_bom.html#gen7\n-\n@@ -73,2 +66,1 @@\n-                                testString.getBytes(charset).length +\n-                                        terminatorSize;\n+                                testString.getBytes(charset).length + terminatorSize(charset);\n@@ -90,0 +82,31 @@\n+    @Test(dataProvider = \"strings\")\n+    public void testStringsLength(String testString) {\n+        Set<String> excluded = Set.of(\"yen\", \"snowman\", \"rainbow\");\n+        \/\/ This test only works for certain strings where the last character is not special\n+        if (!testString.isEmpty() && excluded.stream().noneMatch(testString::startsWith)) {\n+            for (Charset charset : Charset.availableCharsets().values()) {\n+                if (isStandard(charset)) {\n+                    for (Arena arena : arenas()) {\n+                        try (arena) {\n+                            MemorySegment text = arena.allocateFrom(testString, charset);\n+\n+                            String roundTrip = text.getString(0,\n+                                    (int) text.byteSize() - terminatorSize(charset) * 2, charset);\n+                            if (charset.newEncoder().canEncode(testString)) {\n+                                assertEquals(roundTrip, testString.substring(0, testString.length() - 1));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testStringsLengthNegative() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var segment = arena.allocateFrom(\"abc\");\n+            assertThrows(IllegalArgumentException.class, () -> segment.getString(0, -1, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n@@ -496,0 +519,12 @@\n+\n+    static int terminatorSize(Charset charset) {\n+        int terminatorSize = \"\\0\".getBytes(charset).length;\n+        if (charset == StandardCharsets.UTF_16) {\n+            terminatorSize -= 2; \/\/ drop BOM\n+        }\n+        \/\/ Note that the JDK's UTF_32 encoder doesn't add a BOM.\n+        \/\/ This is legal under the Unicode standard, and means the byte order is BE.\n+        \/\/ See: https:\/\/unicode.org\/faq\/utf_bom.html#gen7\n+        return terminatorSize;\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"}]}