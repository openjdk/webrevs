{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,0 +114,2 @@\n+        \/\/ capture the errno from getaddrinfo\n+        const int sys_errno = errno;\n@@ -124,1 +126,1 @@\n-        NET_ThrowUnknownHostExceptionWithGaiError(env, hostname, error);\n+        NET_ThrowUnknownHostExceptionWithGaiError(env, hostname, error, sys_errno);\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet4AddressImpl.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,0 +233,2 @@\n+        \/\/ capture the errno from getaddrinfo\n+        const int sys_errno = errno;\n@@ -241,1 +243,1 @@\n-        NET_ThrowUnknownHostExceptionWithGaiError(env, hostname, error);\n+        NET_ThrowUnknownHostExceptionWithGaiError(env, hostname, error, sys_errno);\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet6AddressImpl.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,1 +174,2 @@\n-                                               int gai_error)\n+                                               int gai_error,\n+                                               int sys_errno)\n@@ -178,1 +179,2 @@\n-    const char *format = \"%s: %s\";\n+    const char *format;\n+    const char *sys_errno_string;\n@@ -180,1 +182,1 @@\n-    if (error_string == NULL)\n+    if (error_string == NULL) {\n@@ -182,2 +184,13 @@\n-\n-    size = strlen(format) + strlen(hostname) + strlen(error_string) + 2;\n+    }\n+    if (gai_error == EAI_SYSTEM) {\n+        \/\/ EAI_SYSTEM implies that the actual error is stored in the system errno.\n+        \/\/ we thus additionally get the string representation for that system errno.\n+        sys_errno_string = strerror(sys_errno);\n+        format = \"%s: %s: %s\";\n+        \/\/ 5 for the \":\", \" \" (two pairs) followed by the null terminator\n+        size = strlen(format) + strlen(hostname) + strlen(error_string) + strlen(sys_errno_string) + 5;\n+    } else {\n+        format = \"%s: %s\";\n+        \/\/ 3 for the \":\", \" \" and the null terminator\n+        size = strlen(format) + strlen(hostname) + strlen(error_string) + 3;\n+    }\n@@ -186,3 +199,6 @@\n-        jstring s;\n-        snprintf(buf, size, format, hostname, error_string);\n-        s = JNU_NewStringPlatform(env, buf);\n+        if (gai_error == EAI_SYSTEM) {\n+            snprintf(buf, size, format, hostname, error_string, sys_errno_string);\n+        } else {\n+            snprintf(buf, size, format, hostname, error_string);\n+        }\n+        jstring s = JNU_NewStringPlatform(env, buf);\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,2 @@\n-                                               int gai_error);\n+                                               int gai_error,\n+                                               int sys_errno);\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}