{"files":[{"patch":"@@ -5495,1 +5495,1 @@\n-  Node* elementType     = null_check(argument(0));\n+  Node* elementType     = argument(0);\n@@ -5505,0 +5505,33 @@\n+  const TypeInstPtr* elem_klass = gvn().type(elementType)->isa_instptr();\n+  if (elem_klass == nullptr) {\n+    return false;  \/\/ dead path (elementType->is_top()).\n+  }\n+  if (obj == nullptr || obj->is_top()) {\n+    return false;  \/\/ dead path\n+  }\n+  \/\/ java_mirror_type() returns non-null for compile-time Class constants only.\n+  ciType* elem_type = elem_klass->java_mirror_type();\n+  if (elem_type == nullptr) {\n+    return false;\n+  }\n+  BasicType bt = elem_type->basic_type();\n+  \/\/ Disable the intrinsic if the CPU does not support SIMD sort\n+  if (!Matcher::supports_simd_sort(bt)) {\n+    return false;\n+  }\n+  address stubAddr = nullptr;\n+  stubAddr = StubRoutines::select_array_partition_function();\n+  \/\/ stub not loaded\n+  if (stubAddr == nullptr) {\n+    return false;\n+  }\n+  \/\/ get the address of the array\n+  const TypeAryPtr* obj_t = _gvn.type(obj)->isa_aryptr();\n+  if (obj_t == nullptr || obj_t->elem() == Type::BOTTOM ) {\n+    return false; \/\/ failed input validation\n+  }\n+\n+  null_check(obj);\n+  \/\/ If obj is dead, only null-path is taken.\n+  if (stopped())  return true;\n+\n@@ -5510,18 +5543,0 @@\n-    const TypeInstPtr* elem_klass = gvn().type(elementType)->isa_instptr();\n-    ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n-    BasicType bt = elem_type->basic_type();\n-    \/\/ Disable the intrinsic if the CPU does not support SIMD sort\n-    if (!Matcher::supports_simd_sort(bt)) {\n-      return false;\n-    }\n-    address stubAddr = nullptr;\n-    stubAddr = StubRoutines::select_array_partition_function();\n-    \/\/ stub not loaded\n-    if (stubAddr == nullptr) {\n-      return false;\n-    }\n-    \/\/ get the address of the array\n-    const TypeAryPtr* obj_t = _gvn.type(obj)->isa_aryptr();\n-    if (obj_t == nullptr || obj_t->elem() == Type::BOTTOM ) {\n-      return false; \/\/ failed input validation\n-    }\n@@ -5561,1 +5576,1 @@\n-  Node* elementType     = null_check(argument(0));\n+  Node* elementType     = argument(0);\n@@ -5568,1 +5583,11 @@\n-  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  if (elem_klass == nullptr) {\n+    return false;  \/\/ dead path (elementType->is_top()).\n+  }\n+  if (obj == nullptr || obj->is_top()) {\n+    return false;  \/\/ dead path\n+  }\n+  \/\/ java_mirror_type() returns non-null for compile-time Class constants only.\n+  ciType* elem_type = elem_klass->java_mirror_type();\n+  if (elem_type == nullptr) {\n+    return false;\n+  }\n@@ -5586,0 +5611,5 @@\n+\n+  null_check(obj);\n+  \/\/ If obj is dead, only null-path is taken.\n+  if (stopped())  return true;\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":51,"deletions":21,"binary":false,"changes":72,"status":"modified"}]}