{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-    if (!CDSConfig::is_loading_full_module_graph()) {\n+    if (!CDSConfig::is_using_full_module_graph()) {\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cds\/classListWriter.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"memory\/universe.hpp\"\n@@ -39,6 +41,3 @@\n-\n-\/\/ The ability to dump the FMG depends on many factors checked by\n-\/\/ is_dumping_full_module_graph(), but can be unconditionally disabled by\n-\/\/ _dumping_full_module_graph_disabled. (Ditto for loading the FMG).\n-bool CDSConfig::_dumping_full_module_graph_disabled = false;\n-bool CDSConfig::_loading_full_module_graph_disabled = false;\n+bool CDSConfig::_is_using_optimized_module_handling = true;\n+bool CDSConfig::_is_dumping_full_module_graph = true;\n+bool CDSConfig::_is_using_full_module_graph = true;\n@@ -50,0 +49,9 @@\n+int CDSConfig::get_status() {\n+  assert(Universe::is_fully_initialized(), \"status is finalized only after Universe is initialized\");\n+  return (is_dumping_archive()              ? IS_DUMPING_ARCHIVE : 0) |\n+         (is_dumping_static_archive()       ? IS_DUMPING_STATIC_ARCHIVE : 0) |\n+         (is_logging_lambda_form_invokers() ? IS_LOGGING_LAMBDA_FORM_INVOKERS : 0) |\n+         (is_using_archive()                ? IS_USING_ARCHIVE : 0);\n+}\n+\n+\n@@ -65,0 +73,4 @@\n+\n+  if (!is_dumping_heap()) {\n+    _is_dumping_full_module_graph = false;\n+  }\n@@ -228,1 +240,1 @@\n-    MetaspaceShared::disable_optimized_module_handling();\n+    stop_using_optimized_module_handling();\n@@ -234,2 +246,2 @@\n-    disable_loading_full_module_graph();\n-    disable_dumping_full_module_graph();\n+    stop_dumping_full_module_graph();\n+    stop_using_full_module_graph();\n@@ -358,0 +370,14 @@\n+bool CDSConfig::is_using_archive() {\n+  return UseSharedSpaces; \/\/ TODO: UseSharedSpaces will be eventually replaced by CDSConfig::is_using_archive()\n+}\n+\n+bool CDSConfig::is_logging_lambda_form_invokers() {\n+  return ClassListWriter::is_enabled() || is_dumping_dynamic_archive();\n+}\n+\n+void CDSConfig::stop_using_optimized_module_handling() {\n+  _is_using_optimized_module_handling = false;\n+  _is_dumping_full_module_graph = false; \/\/ This requires is_using_optimized_module_handling()\n+  _is_using_full_module_graph = false; \/\/ This requires is_using_optimized_module_handling()\n+}\n+\n@@ -364,4 +390,2 @@\n-bool CDSConfig::is_dumping_full_module_graph() {\n-  if (!_dumping_full_module_graph_disabled &&\n-      is_dumping_heap() &&\n-      MetaspaceShared::use_optimized_module_handling()) {\n+bool CDSConfig::is_using_full_module_graph() {\n+  if (ClassLoaderDataShared::is_full_module_graph_loaded()) {\n@@ -369,2 +393,0 @@\n-  } else {\n-    return false;\n@@ -372,1 +394,0 @@\n-}\n@@ -374,3 +395,2 @@\n-bool CDSConfig::is_loading_full_module_graph() {\n-  if (ClassLoaderDataShared::is_full_module_graph_loaded()) {\n-    return true;\n+  if (!_is_using_full_module_graph) {\n+    return false;\n@@ -379,4 +399,1 @@\n-  if (!_loading_full_module_graph_disabled &&\n-      UseSharedSpaces &&\n-      ArchiveHeapLoader::can_use() &&\n-      MetaspaceShared::use_optimized_module_handling()) {\n+  if (UseSharedSpaces && ArchiveHeapLoader::can_use()) {\n@@ -388,0 +405,1 @@\n+    _is_using_full_module_graph = false;\n@@ -392,3 +410,3 @@\n-void CDSConfig::disable_dumping_full_module_graph(const char* reason) {\n-  if (!_dumping_full_module_graph_disabled) {\n-    _dumping_full_module_graph_disabled = true;\n+void CDSConfig::stop_dumping_full_module_graph(const char* reason) {\n+  if (_is_dumping_full_module_graph) {\n+    _is_dumping_full_module_graph = false;\n@@ -401,1 +419,1 @@\n-void CDSConfig::disable_loading_full_module_graph(const char* reason) {\n+void CDSConfig::stop_using_full_module_graph(const char* reason) {\n@@ -403,2 +421,2 @@\n-  if (!_loading_full_module_graph_disabled) {\n-    _loading_full_module_graph_disabled = true;\n+  if (_is_using_full_module_graph) {\n+    _is_using_full_module_graph = false;\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":48,"deletions":30,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,3 @@\n-  static bool _dumping_full_module_graph_disabled;\n-  static bool _loading_full_module_graph_disabled;\n+  static bool _is_using_optimized_module_handling;\n+  static bool _is_dumping_full_module_graph;\n+  static bool _is_using_full_module_graph;\n@@ -39,3 +40,3 @@\n-  static char*  _default_archive_path;\n-  static char*  _static_archive_path;\n-  static char*  _dynamic_archive_path;\n+  static char* _default_archive_path;\n+  static char* _static_archive_path;\n+  static char* _dynamic_archive_path;\n@@ -51,0 +52,7 @@\n+  \/\/ Used by jdk.internal.misc.CDS.getCDSConfigStatus();\n+  static const int IS_DUMPING_ARCHIVE              = 1 << 0;\n+  static const int IS_DUMPING_STATIC_ARCHIVE       = 1 << 1;\n+  static const int IS_LOGGING_LAMBDA_FORM_INVOKERS = 1 << 2;\n+  static const int IS_USING_ARCHIVE                = 1 << 3;\n+  static int get_status() NOT_CDS_RETURN_(0);\n+\n@@ -57,6 +65,14 @@\n-  \/\/ Basic CDS features\n-  static bool      is_dumping_archive()                      { return is_dumping_static_archive() || is_dumping_dynamic_archive(); }\n-  static bool      is_dumping_static_archive()               { return CDS_ONLY(_is_dumping_static_archive) NOT_CDS(false); }\n-  static void  enable_dumping_static_archive()               { CDS_ONLY(_is_dumping_static_archive = true); }\n-  static bool      is_dumping_dynamic_archive()              { return CDS_ONLY(_is_dumping_dynamic_archive) NOT_CDS(false); }\n-  static void  enable_dumping_dynamic_archive()              { CDS_ONLY(_is_dumping_dynamic_archive = true); }\n+  \/\/ --- Basic CDS features\n+\n+  \/\/ archive(s) in general\n+  static bool is_dumping_archive()                           { return is_dumping_static_archive() || is_dumping_dynamic_archive(); }\n+  static bool is_using_archive()                             NOT_CDS_RETURN_(false);\n+  static int num_archives(const char* archive_path)          NOT_CDS_RETURN_(0);\n+\n+  \/\/ static_archive\n+  static bool is_dumping_static_archive()                    { return CDS_ONLY(_is_dumping_static_archive) NOT_CDS(false); }\n+  static void enable_dumping_static_archive()                { CDS_ONLY(_is_dumping_static_archive = true); }\n+\n+  \/\/ dynamic_archive\n+  static bool is_dumping_dynamic_archive()                   { return CDS_ONLY(_is_dumping_dynamic_archive) NOT_CDS(false); }\n+  static void enable_dumping_dynamic_archive()               { CDS_ONLY(_is_dumping_dynamic_archive = true); }\n@@ -65,1 +81,8 @@\n-  \/\/ Archive paths\n+  \/\/ optimized_module_handling -- can we skip some expensive operations related to modules?\n+  static bool is_using_optimized_module_handling()           { return CDS_ONLY(_is_using_optimized_module_handling) NOT_CDS(false); }\n+  static void stop_using_optimized_module_handling()         NOT_CDS_RETURN;\n+\n+  static bool is_logging_lambda_form_invokers()              NOT_CDS_RETURN_(false);\n+\n+  \/\/ archive_path\n+\n@@ -67,1 +90,1 @@\n-  static char* default_archive_path()                         NOT_CDS_RETURN_(nullptr);\n+  static char* default_archive_path()                        NOT_CDS_RETURN_(nullptr);\n@@ -73,2 +96,1 @@\n-  static int num_archives(const char* archive_path)          NOT_CDS_RETURN_(0);\n-\n+  \/\/ --- Archived java objects\n@@ -76,6 +98,1 @@\n-  \/\/ CDS archived heap\n-  static bool      is_dumping_heap()                         NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static void disable_dumping_full_module_graph(const char* reason = nullptr) NOT_CDS_JAVA_HEAP_RETURN;\n-  static bool      is_dumping_full_module_graph()            NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static void disable_loading_full_module_graph(const char* reason = nullptr) NOT_CDS_JAVA_HEAP_RETURN;\n-  static bool      is_loading_full_module_graph()            NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  static bool   is_dumping_heap()                            NOT_CDS_JAVA_HEAP_RETURN_(false);\n@@ -83,0 +100,5 @@\n+  \/\/ full_module_graph (requires optimized_module_handling)\n+  static bool is_dumping_full_module_graph()                 { return CDS_ONLY(_is_dumping_full_module_graph) NOT_CDS(false); }\n+  static bool is_using_full_module_graph()                   NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  static void stop_dumping_full_module_graph(const char* reason = nullptr) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void stop_using_full_module_graph(const char* reason = nullptr) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":44,"deletions":22,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-  if (CDSConfig::is_loading_full_module_graph() && ik->is_shared() && pkg_entry != nullptr) {\n+  if (CDSConfig::is_using_full_module_graph() && ik->is_shared() && pkg_entry != nullptr) {\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-  _use_optimized_module_handling = MetaspaceShared::use_optimized_module_handling();\n+  _use_optimized_module_handling = CDSConfig::is_using_optimized_module_handling();\n@@ -1980,1 +1980,1 @@\n-    CDSConfig::disable_loading_full_module_graph();\n+    CDSConfig::stop_using_full_module_graph();\n@@ -2396,1 +2396,1 @@\n-    MetaspaceShared::disable_optimized_module_handling();\n+    CDSConfig::stop_using_optimized_module_handling();\n@@ -2402,1 +2402,1 @@\n-    CDSConfig::disable_loading_full_module_graph(\"archive was created without full module graph\");\n+    CDSConfig::stop_using_full_module_graph(\"archive was created without full module graph\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -975,1 +975,1 @@\n-    if (record->is_full_module_graph() && !CDSConfig::is_loading_full_module_graph()) {\n+    if (record->is_full_module_graph() && !CDSConfig::is_using_full_module_graph()) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,0 @@\n-bool MetaspaceShared::_use_optimized_module_handling = true;\n@@ -787,1 +786,1 @@\n-      CDSConfig::disable_dumping_full_module_graph();\n+      CDSConfig::stop_dumping_full_module_graph();\n@@ -1179,2 +1178,2 @@\n-    log_info(cds)(\"initial optimized module handling: %s\", MetaspaceShared::use_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"initial full module graph: %s\", CDSConfig::is_loading_full_module_graph() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"initial optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"initial full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-  static bool _use_optimized_module_handling;\n@@ -162,4 +161,0 @@\n-  \/\/ Can we skip some expensive operations related to modules?\n-  static bool use_optimized_module_handling() { return NOT_CDS(false) CDS_ONLY(_use_optimized_module_handling); }\n-  static void disable_optimized_module_handling() { _use_optimized_module_handling = false; }\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-  if (f->reading() && CDSConfig::is_loading_full_module_graph()) {\n+  if (f->reading() && CDSConfig::is_using_full_module_graph()) {\n@@ -185,1 +185,1 @@\n-  assert(!CDSConfig::is_loading_full_module_graph(), \"must be\");\n+  assert(!CDSConfig::is_using_full_module_graph(), \"must be\");\n@@ -192,1 +192,1 @@\n-  assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+  assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n@@ -198,1 +198,1 @@\n-  assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+  assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n@@ -203,1 +203,1 @@\n-  assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+  assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -599,1 +599,1 @@\n-      MetaspaceShared::disable_optimized_module_handling();\n+      CDSConfig::stop_using_optimized_module_handling();\n@@ -601,2 +601,2 @@\n-    log_info(cds)(\"optimized module handling: %s\", MetaspaceShared::use_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_loading_full_module_graph() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n@@ -607,1 +607,1 @@\n-  assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+  assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+    assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n@@ -156,1 +156,1 @@\n-    assert(CDSConfig::is_loading_full_module_graph(), \"must be\");\n+    assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n@@ -968,1 +968,1 @@\n-  if (MetaspaceShared::use_optimized_module_handling()) {\n+  if (CDSConfig::is_using_optimized_module_handling()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -200,8 +200,2 @@\n-JNIEXPORT jboolean JNICALL\n-JVM_IsCDSDumpingEnabled(JNIEnv* env);\n-\n-JNIEXPORT jboolean JNICALL\n-JVM_IsSharingEnabled(JNIEnv* env);\n-\n-JNIEXPORT jboolean JNICALL\n-JVM_IsDumpingClassList(JNIEnv* env);\n+JNIEXPORT jint JNICALL\n+JVM_GetCDSConfigStatus();\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2708,1 +2708,1 @@\n-             CDSConfig::is_loading_full_module_graph() &&\n+             CDSConfig::is_using_full_module_graph() &&\n@@ -3034,1 +3034,1 @@\n-    if (CDSConfig::is_loading_full_module_graph() && _package_entry == pkg_entry) {\n+    if (CDSConfig::is_using_full_module_graph() && _package_entry == pkg_entry) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3691,8 +3691,0 @@\n-JVM_LEAF(jboolean, JVM_IsCDSDumpingEnabled(JNIEnv* env))\n-  return CDSConfig::is_dumping_archive();\n-JVM_END\n-\n-JVM_LEAF(jboolean, JVM_IsSharingEnabled(JNIEnv* env))\n-  return UseSharedSpaces;\n-JVM_END\n-\n@@ -3722,6 +3714,2 @@\n-JVM_LEAF(jboolean, JVM_IsDumpingClassList(JNIEnv *env))\n-#if INCLUDE_CDS\n-  return ClassListWriter::is_enabled() || CDSConfig::is_dumping_dynamic_archive();\n-#else\n-  return false;\n-#endif \/\/ INCLUDE_CDS\n+JVM_ENTRY_NO_ENV(jint, JVM_GetCDSConfigStatus())\n+  return CDSConfig::get_status();\n@@ -3732,1 +3720,1 @@\n-  assert(ClassListWriter::is_enabled() || CDSConfig::is_dumping_dynamic_archive(),  \"Should be set and open or do dynamic dump\");\n+  assert(CDSConfig::is_logging_lambda_form_invokers(), \"sanity\");\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-            if (CDS.isSharingEnabled()) {\n+            if (CDS.isUsingArchive()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-            !CDS.isSharingEnabled() || isSerializable || altInterfaces.length > 0 || altMethods.length > 0)\n+            !CDS.isUsingArchive() || isSerializable || altInterfaces.length > 0 || altMethods.length > 0)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,2 +137,2 @@\n-        if (CDS.isDumpingClassList()) {\n-            CDS.traceLambdaFormInvoker(\"[LF_RESOLVE]\", holder.getName(), name, shortenSignature(basicTypeSignature(type)));\n+        if (CDS.isLoggingLambdaFormInvokers()) {\n+            CDS.logLambdaFormInvoker(\"[LF_RESOLVE]\", holder.getName(), name, shortenSignature(basicTypeSignature(type)));\n@@ -151,2 +151,2 @@\n-        if (CDS.isDumpingClassList()) {\n-            CDS.traceSpeciesType(\"[SPECIES_RESOLVE]\", cn);\n+        if (CDS.isLoggingLambdaFormInvokers()) {\n+            CDS.logSpeciesType(\"[SPECIES_RESOLVE]\", cn);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleStatics.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,10 +44,6 @@\n-    private static final boolean isDumpingClassList;\n-    private static final boolean isDumpingArchive;\n-    private static final boolean isSharingEnabled;\n-    private static final boolean isDumpingStaticArchive;\n-    static {\n-        isDumpingClassList = isDumpingClassList0();\n-        isDumpingArchive = isDumpingArchive0();\n-        isSharingEnabled = isSharingEnabled0();\n-        isDumpingStaticArchive = isDumpingArchive && !isSharingEnabled;\n-    }\n+    \/\/ Must be in sync with cdsConfig.hpp\n+    private static final int IS_DUMPING_ARCHIVE              = 1 << 0;\n+    private static final int IS_DUMPING_STATIC_ARCHIVE       = 1 << 1;\n+    private static final int IS_LOGGING_LAMBDA_FORM_INVOKERS = 1 << 2;\n+    private static final int IS_USING_ARCHIVE                = 1 << 3;\n+    private static final int configStatus = getCDSConfigStatus();\n@@ -56,4 +52,4 @@\n-      * indicator for dumping class list.\n-      *\/\n-    public static boolean isDumpingClassList() {\n-        return isDumpingClassList;\n+     * Should we log the use of lambda form invokers?\n+     *\/\n+    public static boolean isLoggingLambdaFormInvokers() {\n+        return (configStatus & IS_LOGGING_LAMBDA_FORM_INVOKERS) != 0;\n@@ -66,1 +62,1 @@\n-        return isDumpingArchive;\n+        return (configStatus & IS_DUMPING_ARCHIVE) != 0;\n@@ -70,1 +66,1 @@\n-      * Is sharing enabled.\n+      * Is the VM using at least one CDS archive?\n@@ -72,2 +68,2 @@\n-    public static boolean isSharingEnabled() {\n-        return isSharingEnabled;\n+    public static boolean isUsingArchive() {\n+        return (configStatus & IS_USING_ARCHIVE) != 0;\n@@ -80,1 +76,1 @@\n-        return isDumpingStaticArchive;\n+        return (configStatus & IS_DUMPING_STATIC_ARCHIVE) != 0;\n@@ -83,3 +79,1 @@\n-    private static native boolean isDumpingClassList0();\n-    private static native boolean isDumpingArchive0();\n-    private static native boolean isSharingEnabled0();\n+    private static native int getCDSConfigStatus();\n@@ -115,2 +109,2 @@\n-    public static void traceLambdaFormInvoker(String prefix, String holder, String name, String type) {\n-        if (isDumpingClassList) {\n+    public static void logLambdaFormInvoker(String prefix, String holder, String name, String type) {\n+        if (isLoggingLambdaFormInvokers()) {\n@@ -124,2 +118,2 @@\n-    public static void traceSpeciesType(String prefix, String cn) {\n-        if (isDumpingClassList) {\n+    public static void logSpeciesType(String prefix, String cn) {\n+        if (isLoggingLambdaFormInvokers()) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":21,"deletions":27,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,13 +47,3 @@\n-JNIEXPORT jboolean JNICALL\n-Java_jdk_internal_misc_CDS_isDumpingArchive0(JNIEnv *env, jclass jcls) {\n-    return JVM_IsCDSDumpingEnabled(env);\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_jdk_internal_misc_CDS_isSharingEnabled0(JNIEnv *env, jclass jcls) {\n-    return JVM_IsSharingEnabled(env);\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_jdk_internal_misc_CDS_isDumpingClassList0(JNIEnv *env, jclass jcls) {\n-    return JVM_IsDumpingClassList(env);\n+JNIEXPORT jint JNICALL\n+Java_jdk_internal_misc_CDS_getCDSConfigStatus(JNIEnv *env, jclass jcls) {\n+    return JVM_GetCDSConfigStatus();\n","filename":"src\/java.base\/share\/native\/libjava\/CDS.c","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"}]}