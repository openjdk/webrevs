{"files":[{"patch":"@@ -309,3 +309,6 @@\n-        out.println(\"-----BEGIN NEW CERTIFICATE REQUEST-----\");\n-        out.println(Base64.getMimeEncoder(64, CRLF).encodeToString(encoded));\n-        out.println(\"-----END NEW CERTIFICATE REQUEST-----\");\n+        out.print(\"-----BEGIN NEW CERTIFICATE REQUEST-----\");\n+        out.print(\"\\r\\n\");\n+        out.print(Base64.getMimeEncoder(64, CRLF).encodeToString(encoded));\n+        out.print(\"\\r\\n\");\n+        out.print(\"-----END NEW CERTIFICATE REQUEST-----\");\n+        out.print(\"\\r\\n\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs10\/PKCS10.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1613,3 +1613,6 @@\n-            out.println(\"-----BEGIN X509 CRL-----\");\n-            out.println(Base64.getMimeEncoder(64, CRLF).encodeToString(crl.getEncodedInternal()));\n-            out.println(\"-----END X509 CRL-----\");\n+            out.print(\"-----BEGIN X509 CRL-----\");\n+            out.print(\"\\r\\n\");\n+            out.print(Base64.getMimeEncoder(64, CRLF).encodeToString(crl.getEncodedInternal()));\n+            out.print(\"\\r\\n\");\n+            out.print(\"-----END X509 CRL-----\");\n+            out.print(\"\\r\\n\");\n@@ -2787,3 +2790,6 @@\n-            out.println(\"-----BEGIN X509 CRL-----\");\n-            out.println(Base64.getMimeEncoder(64, CRLF).encodeToString(xcrl.getEncoded()));\n-            out.println(\"-----END X509 CRL-----\");\n+            out.print(\"-----BEGIN X509 CRL-----\");\n+            out.print(\"\\r\\n\");\n+            out.print(Base64.getMimeEncoder(64, CRLF).encodeToString(xcrl.getEncoded()));\n+            out.print(\"\\r\\n\");\n+            out.print(\"-----END X509 CRL-----\");\n+            out.print(\"\\r\\n\");\n@@ -3803,3 +3809,6 @@\n-            out.println(X509Factory.BEGIN_CERT);\n-            out.println(Base64.getMimeEncoder(64, CRLF).encodeToString(cert.getEncoded()));\n-            out.println(X509Factory.END_CERT);\n+            out.print(X509Factory.BEGIN_CERT);\n+            out.print(\"\\r\\n\");\n+            out.print(Base64.getMimeEncoder(64, CRLF).encodeToString(cert.getEncoded()));\n+            out.print(\"\\r\\n\");\n+            out.print(X509Factory.END_CERT);\n+            out.print(\"\\r\\n\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * @test\n+ * @bug 8202598\n+ * @summary PEM outputs should have consistent line endings\n+ * @library \/test\/lib\n+ *\/\n+\n+public class LineEndings {\n+\n+    public static void main(String[] args) throws Exception {\n+        keytool(\"-genkeypair -dname CN=A -keyalg ec\");\n+\n+        keytool(\"-certreq -file a.csr -rfc\");\n+        checkFile(\"a.csr\");\n+\n+        keytool(\"-exportcert -file a.crt -rfc\");\n+        checkFile(\"a.crt\");\n+\n+        keytool(\"-gencrl -id 1 -rfc -file a.crl\");\n+        checkFile(\"a.crl\");\n+\n+        \/\/ `keytool -printcrl` shows \"Verified by ...\" at the end. Remove it.\n+        String print = keytool(\"-printcrl -file a.crl -rfc\").getStdout();\n+        print = print.substring(0, print.indexOf(\"Verified by\"));\n+        Files.writeString(Path.of(\"print\"), print);\n+        checkFile(\"print\");\n+    }\n+\n+    private static OutputAnalyzer keytool(String cmd) throws Exception {\n+        return SecurityTools.keytool(\n+                \"-keystore ks -storepass changeit -alias a \" + cmd)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    \/\/ Make sure only CRLF is used inside the file.\n+    private static void checkFile(String name) throws Exception {\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        for (byte b : Files.readAllBytes(Path.of(name))) {\n+            \/\/ Collect all non-printable bytes in an array\n+            if (b < 32) bout.write(b);\n+        }\n+        \/\/ There should only be a series of CRLFs left\n+        byte[] endings = bout.toByteArray();\n+        Asserts.assertTrue(endings.length > 4, \"Too empty\");\n+        Asserts.assertTrue(endings.length % 2 == 0,\n+                \"Length is \" + endings.length);\n+        for (int i = 0; i < endings.length; i += 2) {\n+            Asserts.assertEquals(endings[i], (byte)'\\r',\n+                    \"Byte at \" + i + \" is not CR\");\n+            Asserts.assertEquals(endings[i + 1], (byte)'\\n',\n+                    \"Byte at \" + (i + 1) + \" is not LF\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/LineEndings.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}