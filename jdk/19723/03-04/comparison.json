{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n@@ -32,0 +33,1 @@\n+import java.io.IOException;\n@@ -38,0 +40,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n@@ -40,2 +45,5 @@\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -45,0 +53,8 @@\n+    static final String OS_NAME = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n+    static final boolean IS_WINDOWS_2016 = OS_NAME.contains(\"windows\") && OS_NAME.contains(\"2016\");\n+\n+    \/\/ On Windows Server 2016 trying to connect to port 47 consumes the\n+    \/\/ whole connect timeout - which makes the test fail in timeout.\n+    \/\/ We skip this part of the test on Windows Server 2016\n+    static final boolean TEST_WITH_RESERVED_PORT = !IS_WINDOWS_2016;\n+\n@@ -47,3 +63,0 @@\n-    @Test\n-    public void test() throws Exception {\n-        InetAddress lo = InetAddress.getLoopbackAddress();\n@@ -51,4 +64,6 @@\n-        \/\/ Try to find a suitable port that will cause a\n-        \/\/ Connection Rejected exception\n-        \/\/ port 47 is reserved - there should be nothing there...\n-        InetSocketAddress isa = new InetSocketAddress(lo, 47);\n+    \/\/ Try to find a suitable port to provoke a \"Connection Refused\"\n+    \/\/ error.\n+    private static InetSocketAddress findSuitableRefusedAddress(InetSocketAddress isa)\n+            throws IOException {\n+        if (!TEST_WITH_RESERVED_PORT) return null;\n+        var addr = isa.getAddress();\n@@ -59,2 +74,3 @@\n-            isa = new InetSocketAddress(lo, 51);\n-            try (SocketChannel sc2 = SocketChannel.open(isa)) {};\n+            isa = new InetSocketAddress(addr, 51);\n+            try (SocketChannel sc2 = SocketChannel.open(isa)) {\n+            }\n@@ -63,12 +79,41 @@\n-            isa = new InetSocketAddress(lo, 61);\n-            try (SocketChannel sc3 = SocketChannel.open(isa)) {};\n-            Assumptions.abort(\"Could not find a suitable port\");\n-            return;\n-        } catch (ConnectException x) { }\n-\n-        \/\/ create an unresolved address to test another path\n-        \/\/   where close should be called\n-        SocketAddress sa = InetSocketAddress.createUnresolved(isa.getHostString(), isa.getPort());\n-\n-        System.err.println(\"Expecting Connection Refused for \" + isa);\n-        System.err.println(\"Expecting UnresolvedAddressException for \" + sa);\n+            isa = new InetSocketAddress(addr, 61);\n+            try (SocketChannel sc3 = SocketChannel.open(isa)) {\n+            }\n+            System.err.println(\"Could not find a suitable port\");\n+            return null;\n+        } catch (ConnectException x) {\n+        }\n+        return isa;\n+    }\n+\n+    private static InetSocketAddress createUnresolved(InetSocketAddress isa, InetSocketAddress def) {\n+       var sa = isa == null ? def : isa;\n+       return InetSocketAddress.createUnresolved(sa.getHostString(), sa.getPort());\n+    }\n+\n+\n+    \/\/ Builds a list of test cases\n+    static List<Object[]> testCases() throws Exception {\n+        InetAddress lo = InetAddress.getLoopbackAddress();\n+\n+        \/\/ Try to find a suitable port that will cause a\n+        \/\/ Connection Refused exception\n+        \/\/ port 47 is reserved - there should be nothing there...\n+        InetSocketAddress def = new InetSocketAddress(lo, 47);\n+        InetSocketAddress isa = findSuitableRefusedAddress(def);\n+        InetSocketAddress sa  = createUnresolved(isa, def);\n+\n+        final List<Object[]> cases = new ArrayList<>();\n+        cases.add(new Object[]{sa, UnresolvedAddressException.class});\n+        cases.add(new Object[]{isa, ConnectException.class});\n+        return cases;\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    public void test(SocketAddress sa, Class<? extends Throwable> expectedException) throws Exception {\n+        if (sa == null) {\n+            Assumptions.abort(\"No suitable port could be found for \" + expectedException);\n+        }\n+        System.err.printf(\"%nExpecting %s for %s%n\", expectedException, sa);\n+\n@@ -78,17 +123,5 @@\n-                try {\n-                    SocketChannel.open(sa);\n-                    fail(\"This should not happen\");\n-                } catch (UnresolvedAddressException x) {\n-                    if (i < 5 || i >= MAX_LOOP - 5) {\n-                        \/\/ print a message for the first five and last 5 exceptions\n-                        System.err.println(x);\n-                    }\n-                }\n-                try {\n-                    SocketChannel.open(isa);\n-                    fail(\"This should not happen\");\n-                } catch (ConnectException x) {\n-                    if (i < 5 || i >= MAX_LOOP - 5) {\n-                        \/\/ print a message for the first five and last 5 exceptions\n-                        System.err.println(x);\n-                    }\n+                Throwable x =\n+                        assertThrows(expectedException, () -> SocketChannel.open(sa));\n+                if (i < 5 || i >= MAX_LOOP - 5) {\n+                    \/\/ print a message for the first five and last 5 exceptions\n+                    System.err.println(x);\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/OpenLeak.java","additions":73,"deletions":40,"binary":false,"changes":113,"status":"modified"}]}