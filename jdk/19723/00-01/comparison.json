{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.net.SocketAddress;\n@@ -36,0 +37,2 @@\n+import java.nio.channels.UnresolvedAddressException;\n+import java.util.concurrent.CompletableFuture;\n@@ -42,0 +45,1 @@\n+    final CompletableFuture<Boolean> result = new CompletableFuture<>();\n@@ -62,0 +66,1 @@\n+            return;\n@@ -64,0 +69,1 @@\n+        SocketAddress sa = InetSocketAddress.createUnresolved(isa.getHostString(), isa.getPort());\n@@ -65,5 +71,24 @@\n-        for (int i=0; i<100000; i++) {\n-            try {\n-                SocketChannel.open(isa);\n-                throw new RuntimeException(\"This should not happen\");\n-            } catch (ConnectException x) { }\n+        System.out.println(\"Expecting UnresolvedAddressException for \" + sa);\n+        int i = 0;\n+        try {\n+            for (i = 0; i < 250000; i++) {\n+                try {\n+                    SocketChannel.open(sa);\n+                    throw new RuntimeException(\"This should not happen\");\n+                } catch (UnresolvedAddressException x) {\n+                    if (i > 250000 - 10) {\n+                        System.out.println(x);\n+                    }\n+                }\n+                try {\n+                    SocketChannel.open(isa);\n+                    throw new RuntimeException(\"This should not happen\");\n+                } catch (ConnectException x) {\n+                    if (i > 250000 - 10) {\n+                        System.out.println(x);\n+                    }\n+                }\n+            }\n+        } catch (Throwable t) {\n+            System.out.println(\"Failed at \" + i + \" with \" + t);\n+            throw t;\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/OpenLeak.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"}]}