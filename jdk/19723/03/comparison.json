{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow OpenLeak\n+ * @run junit\/othervm OpenLeak\n@@ -32,0 +32,1 @@\n+import java.net.ConnectException;\n@@ -34,0 +35,1 @@\n+import java.net.SocketAddress;\n@@ -35,0 +37,5 @@\n+import java.nio.channels.UnresolvedAddressException;\n+\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -38,3 +45,1 @@\n-    public static void main(String[] args) throws Exception {\n-        InetAddress lh = InetAddress.getLocalHost();\n-        InetSocketAddress isa = new InetSocketAddress(lh, 12345);\n+    private static final int MAX_LOOP = 250000;\n@@ -42,7 +47,21 @@\n-        System.setSecurityManager( new SecurityManager() );\n-        for (int i=0; i<100000; i++) {\n-            try {\n-                SocketChannel.open(isa);\n-                throw new RuntimeException(\"This should not happen\");\n-            } catch (SecurityException x) { }\n-        }\n+    @Test\n+    public void test() throws Exception {\n+        InetAddress lo = InetAddress.getLoopbackAddress();\n+\n+        \/\/ Try to find a suitable port that will cause a\n+        \/\/ Connection Rejected exception\n+        \/\/ port 47 is reserved - there should be nothing there...\n+        InetSocketAddress isa = new InetSocketAddress(lo, 47);\n+        try (SocketChannel sc1 = SocketChannel.open(isa)) {\n+            \/\/ If we manage to connect, let's try to use some other\n+            \/\/ port.\n+            \/\/ port 51 is reserved too - there should be nothing there...\n+            isa = new InetSocketAddress(lo, 51);\n+            try (SocketChannel sc2 = SocketChannel.open(isa)) {};\n+            \/\/ OK, last attempt...\n+            \/\/ port 61 is reserved too - there should be nothing there...\n+            isa = new InetSocketAddress(lo, 61);\n+            try (SocketChannel sc3 = SocketChannel.open(isa)) {};\n+            Assumptions.abort(\"Could not find a suitable port\");\n+            return;\n+        } catch (ConnectException x) { }\n@@ -50,0 +69,32 @@\n+        \/\/ create an unresolved address to test another path\n+        \/\/   where close should be called\n+        SocketAddress sa = InetSocketAddress.createUnresolved(isa.getHostString(), isa.getPort());\n+\n+        System.err.println(\"Expecting Connection Refused for \" + isa);\n+        System.err.println(\"Expecting UnresolvedAddressException for \" + sa);\n+        int i = 0;\n+        try {\n+            for (i = 0; i < MAX_LOOP; i++) {\n+                try {\n+                    SocketChannel.open(sa);\n+                    fail(\"This should not happen\");\n+                } catch (UnresolvedAddressException x) {\n+                    if (i < 5 || i >= MAX_LOOP - 5) {\n+                        \/\/ print a message for the first five and last 5 exceptions\n+                        System.err.println(x);\n+                    }\n+                }\n+                try {\n+                    SocketChannel.open(isa);\n+                    fail(\"This should not happen\");\n+                } catch (ConnectException x) {\n+                    if (i < 5 || i >= MAX_LOOP - 5) {\n+                        \/\/ print a message for the first five and last 5 exceptions\n+                        System.err.println(x);\n+                    }\n+                }\n+            }\n+        } catch (Throwable t) {\n+            System.err.println(\"Failed at \" + i + \" with \" + t);\n+            throw t;\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/OpenLeak.java","additions":63,"deletions":12,"binary":false,"changes":75,"status":"modified"}]}