{"files":[{"patch":"@@ -59,0 +59,4 @@\n+    \/**\n+     * Aggregate unique values into a comma-separated list, including {@code null}.\n+     *\/\n+    SET(\"SET\"),\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Aggregator.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Collections;\n@@ -125,1 +124,4 @@\n-\n+        if (fieldName.equals(\"stackTrace.topFrame.class\")) {\n+            configureTopFrameClassField();\n+            return true;\n+        }\n@@ -178,0 +180,14 @@\n+    private void configureTopFrameClassField() {\n+        field.alignLeft = true;\n+        field.label = \"Class\";\n+        field.dataType = \"java.lang.Class\";\n+        field.valueGetter = e -> {\n+            RecordedStackTrace t = e.getStackTrace();\n+            if (t == null) {\n+                return null;\n+            }\n+            return t.getFrames().getFirst().getMethod().getType();\n+        };\n+        field.lexicalSort = true;\n+    }\n+\n@@ -382,1 +398,1 @@\n-        if (aggregator == Aggregator.LIST) {\n+        if (aggregator == Aggregator.LIST || aggregator == Aggregator.SET) {\n@@ -395,0 +411,1 @@\n+            case SET -> field.label + \"s\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/FieldBuilder.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.util.Collection;\n+import java.util.StringJoiner;\n@@ -54,0 +56,7 @@\n+        if (object instanceof Collection<?> c) {\n+            StringJoiner sj = new StringJoiner(\", \");\n+            for (Object o : c) {\n+                sj.add(format(field, o, compact));\n+            }\n+            return sj.toString();\n+        }\n@@ -74,0 +83,4 @@\n+        if (object instanceof RecordedFrame f && f.isJavaFrame()) {\n+            object = f.getMethod();\n+        }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/FieldFormatter.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Collection;\n@@ -32,1 +33,1 @@\n-import java.util.HashSet;\n+import java.util.LinkedHashSet;\n@@ -34,1 +35,0 @@\n-import java.util.StringJoiner;\n@@ -49,1 +49,5 @@\n-            return new List();\n+            return new Container(new ArrayList<>());\n+        }\n+\n+        if (aggregator == Aggregator.SET) {\n+            return new Container(new LinkedHashSet<>());\n@@ -381,1 +385,1 @@\n-        private final Set<Object> unique = new HashSet<>();\n+        private final Set<Object> unique = new LinkedHashSet<>();\n@@ -394,1 +398,1 @@\n-    \/\/ **** LIST ****\n+    \/\/ **** LIST and SET ****\n@@ -396,2 +400,2 @@\n-    private static final class List extends Function {\n-        private final ArrayList<Object> list = new ArrayList<>();\n+    private static final class Container extends Function {\n+        private final Collection<Object> collection;\n@@ -399,0 +403,3 @@\n+        private Container(Collection<Object> collection) {\n+            this.collection = collection;\n+        }\n@@ -401,1 +408,1 @@\n-            list.add(value);\n+            collection.add(value);\n@@ -406,5 +413,1 @@\n-            StringJoiner sj = new StringJoiner(\", \");\n-            for (Object object : list) {\n-                sj.add(String.valueOf(object));\n-            }\n-            return sj.toString();\n+            return collection;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Function.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -72,1 +73,1 @@\n-        if (text.length() >= contentWidth) {\n+        if (text.length() > contentWidth) {\n@@ -146,0 +147,4 @@\n+    public void sort() {\n+        Collections.sort(lines);\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/TableCell.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Collection;\n@@ -34,2 +35,0 @@\n-import jdk.jfr.consumer.RecordedFrame;\n-import jdk.jfr.consumer.RecordedMethod;\n@@ -296,1 +295,4 @@\n-                setStackTrace(cell, s);\n+                o = s.getFrames();\n+            }\n+            if (o instanceof Collection<?> c) {\n+                setMultiline(cell, c);\n@@ -303,1 +305,0 @@\n-\n@@ -310,1 +311,1 @@\n-    private void setStackTrace(TableCell cell, RecordedStackTrace s) {\n+    private void setMultiline(TableCell cell, Collection<?> objects) {\n@@ -313,1 +314,1 @@\n-        for(RecordedFrame f : s.getFrames()) {\n+        for(Object object : objects) {\n@@ -317,7 +318,3 @@\n-            if (f.isJavaFrame()) {\n-                RecordedMethod method = f.getMethod();\n-                String text = FieldFormatter.format(cell.field, method);\n-                if (text.length() > cell.getContentWidth()) {\n-                    text = FieldFormatter.formatCompact(cell.field, method);\n-                }\n-                cell.addLine(text);\n+            String text = FieldFormatter.format(cell.field, object);\n+            if (text.length() > cell.getContentWidth()) {\n+                text = FieldFormatter.formatCompact(cell.field, object);\n@@ -325,0 +322,1 @@\n+            cell.addLine(text);\n@@ -327,0 +325,3 @@\n+        if (cell.field.lexicalSort) {\n+            cell.sort();\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/TableRenderer.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -176,0 +176,10 @@\n+[application.deprecated-methods-for-removal]\n+label = \"Deprecated Methods for Removal\"\n+table = \"COLUMN 'Deprecated Method', 'Called from Class'\n+         FORMAT truncate-beginning, cell-height:10000;truncate-beginning\n+         SELECT method AS m, SET(stackTrace.topFrame.class)\n+         FROM DeprecatedInvocation\n+         WHERE forRemoval = 'true'\n+         GROUP BY m\n+         ORDER BY m\"\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/view.ini","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}