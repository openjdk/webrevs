{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.util.Map;\n@@ -37,2 +36,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.regex.Pattern;\n@@ -47,2 +44,0 @@\n-    private static final Map<String, Pattern> patternCache =\n-            new ConcurrentHashMap<>(4);\n@@ -97,7 +92,0 @@\n-        \/\/ TLS cipher suite wildcard matching\n-        for (String pattern : algorithms) {\n-            if (wildCardMatch(pattern, algorithm)) {\n-                return false;\n-            }\n-        }\n-\n@@ -117,19 +105,0 @@\n-    private static boolean wildCardMatch(final String pattern,\n-                                         final String algorithm) {\n-        if (!pattern.contains(\"*\")) {\n-            return false;\n-        }\n-\n-        if (!pattern.startsWith(\"TLS_\")) {\n-            throw new IllegalArgumentException(\n-                    \"Wildcard pattern must start with \\\"TLS_\\\"\");\n-        }\n-\n-        return patternCache.computeIfAbsent(\n-                        pattern,\n-                        p -> Pattern.compile(\n-                                \/\/ Ignore all regex characters but asterisk.\n-                                \"^\\\\Q\" + p.replace(\"*\", \"\\\\E.*\\\\Q\") + \"\\\\E$\"))\n-                .matcher(algorithm)\n-                .matches();\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AbstractAlgorithmConstraints.java","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.time.ZonedDateTime;\n@@ -47,0 +46,1 @@\n+import java.time.ZonedDateTime;\n@@ -49,0 +49,1 @@\n+import java.util.Collection;\n@@ -55,1 +56,0 @@\n-import java.util.Collection;\n@@ -58,1 +58,0 @@\n-import java.util.regex.Pattern;\n@@ -60,0 +59,1 @@\n+import java.util.regex.Pattern;\n@@ -104,0 +104,1 @@\n+    private final List<Pattern> disabledPatterns = new ArrayList<>();\n@@ -138,0 +139,1 @@\n+        loadDisabledPatterns();\n@@ -970,1 +972,3 @@\n-        result = checkAlgorithm(disabledAlgorithms, algorithm, decomposer);\n+        \/\/ We won't check patterns if algorithm check fails.\n+        result = checkAlgorithm(disabledAlgorithms, algorithm, decomposer)\n+                && checkDisabledPatterns(algorithm);\n@@ -975,0 +979,27 @@\n+    private boolean checkDisabledPatterns(final String algorithm) {\n+        return disabledPatterns.stream().noneMatch(\n+                p -> p.matcher(algorithm).matches());\n+    }\n+\n+    private void loadDisabledPatterns() {\n+        List<String> patternStrings = new ArrayList<>();\n+\n+        for (String p : disabledAlgorithms) {\n+            if (p.contains(\"*\")) {\n+                if (!p.startsWith(\"TLS_\")) {\n+                    throw new IllegalArgumentException(\n+                            \"Wildcard pattern must start with \\\"TLS_\\\"\");\n+                }\n+\n+                disabledPatterns.add(Pattern.compile(\n+                        \/\/ Ignore all regex characters but asterisk.\n+                        \"^\\\\Q\" + p.replace(\"*\", \"\\\\E.*\\\\Q\") + \"\\\\E$\"));\n+\n+                patternStrings.add(p);\n+            }\n+        }\n+\n+        \/\/ Exclude patterns from algorithm code flow.\n+        patternStrings.forEach(disabledAlgorithms::remove);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"}]}