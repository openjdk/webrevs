{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.Locale;\n@@ -36,0 +37,1 @@\n+import java.util.regex.Pattern;\n@@ -92,0 +94,7 @@\n+        \/\/ TLS cipher suite wild card matching\n+        for (String pattern : algorithms) {\n+            if (wildCardMatch(pattern, algorithm)) {\n+                return false;\n+            }\n+        }\n+\n@@ -105,0 +114,15 @@\n+    private static boolean wildCardMatch(String pattern, String algorithm) {\n+        if (pattern.contains(\"*\")) {\n+            if (!pattern.toUpperCase(Locale.ENGLISH).startsWith(\"TLS_\")) {\n+                throw new IllegalArgumentException(\n+                        \"Wildcard pattern should start with 'TLS_'\");\n+            }\n+\n+            return Pattern.compile(pattern.replace(\"*\", \".*\"),\n+                                   Pattern.CASE_INSENSITIVE)\n+                    .matcher(algorithm)\n+                    .matches();\n+        }\n+\n+        return false;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AbstractAlgorithmConstraints.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -778,1 +778,3 @@\n-# syntax of the disabled algorithm string.\n+# syntax of the disabled algorithm string. Additionally, TLS cipher suites\n+# can be disabled here using wildcard '*' syntax. For example \"TLS_RSA_*\"\n+# disables all cipher suites that match that pattern.\n@@ -788,1 +790,1 @@\n-#       rsa_pkcs1_sha1, secp224r1\n+#       rsa_pkcs1_sha1, secp224r1, TLS_RSA_*\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,0 @@\n-    private static final boolean DEBUG = false;\n-\n@@ -103,0 +101,1 @@\n+        NoDesRC4DesEdeCiphSuite test = new NoDesRC4DesEdeCiphSuite();\n@@ -105,3 +104,3 @@\n-        allGood &= testDefaultCase(DES_CS_LIST);\n-        allGood &= testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DES_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DES_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DES_CS_LIST_NAMES);\n@@ -110,3 +109,3 @@\n-        allGood &= testDefaultCase(RC4_CS_LIST);\n-        allGood &= testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n-        allGood &= testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(RC4_CS_LIST);\n+        allGood &= test.testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n@@ -115,3 +114,3 @@\n-        allGood &= testDefaultCase(DESEDE_CS_LIST);\n-        allGood &= testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DESEDE_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n@@ -135,1 +134,1 @@\n-    private static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n+    protected boolean testDefaultCase(List<Integer> disabledSuiteIds)\n@@ -139,1 +138,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -145,1 +144,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -170,1 +169,1 @@\n-    private static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n+    protected boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n@@ -177,1 +176,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -183,1 +182,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -200,1 +199,1 @@\n-     * @param disabledSuiteNames an array of cipher suite names that\n+     * @param disabledNames an array of cipher suite names that\n@@ -207,1 +206,1 @@\n-    private static boolean testEngAddDisabled(String[] disabledNames,\n+    protected boolean testEngAddDisabled(String[] disabledNames,\n@@ -220,1 +219,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -226,1 +225,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -240,2 +239,6 @@\n-    private static SSLEngine makeEngine() throws GeneralSecurityException {\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n+    protected String getProtocol() {\n+        return \"TLSv1.2\";\n+    }\n+\n+    private SSLEngine makeEngine() throws GeneralSecurityException {\n+        SSLContext ctx = SSLContext.getInstance(getProtocol());\n@@ -279,1 +282,1 @@\n-    private static boolean areSuitesPresentCH(ByteBuffer clientHello,\n+    private boolean areSuitesPresentCH(ByteBuffer clientHello,\n@@ -358,2 +361,2 @@\n-    private static void log(String str) {\n-        if (DEBUG) {\n+    private void log(String str) {\n+        if (getDebug()) {\n@@ -363,0 +366,4 @@\n+\n+    protected boolean getDebug() {\n+        return false;\n+    }\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NoDesRC4DesEdeCiphSuite.java","additions":34,"deletions":27,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherSuiteWildCardMatchingDisablePartsOfCipherSuite\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+import java.util.List;\n+\n+public class TLSCipherSuiteWildCardMatchingDisablePartsOfCipherSuite extends\n+    NoDesRC4DesEdeCiphSuite {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS =\n+            \"TLS_ECDH_*, TLS_RSA_*, TLS_ECDHE_*_WITH_AES_256_GCM_*, Tls_DH_anon_*SHA, tls_ECDH_anon_WITH_AES_*_SHA\";\n+    private static final String[] CIPHER_SUITES = new String[] {\n+            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\"\n+    };\n+    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n+            0x009D,\n+            0xC02E,\n+            0xC02C,\n+            0x0034,\n+            0xC018\n+    );\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testAddDisabled() throws Exception {\n+        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testOnlyDisabled() throws Exception {\n+        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherSuiteWildCardMatchingDisablePartsOfCipherSuite.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherSuiteWildCardMatchingIllegalArgument\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically\n+ * when it's being loaded into memory, so we can't call\n+ * Security.setProperty(\"jdk.tls.disabledAlgorithms\") more than once per test\n+ * class. Thus, we need a separate test class each time we need to modify\n+ * \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\/\n+public class TLSCipherSuiteWildCardMatchingIllegalArgument {\n+\n+    private static final String SECURITY_PROPERTY =\n+            \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"ECDHE_*_WITH_AES_256_GCM_*\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedBefore() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class,\n+                         e.getCause().getClass());\n+            assertEquals(\"Wildcard pattern should start with 'TLS_'\",\n+                         e.getCause().getMessage());\n+            return;\n+        }\n+        fail(\"No IllegalArgumentException was thrown\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherSuiteWildCardMatchingIllegalArgument.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}