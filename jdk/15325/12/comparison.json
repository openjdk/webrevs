{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1742,1 +1742,1 @@\n-     * value.  Subsequent calls to <code>getMaximumSize<\/code> will always\n+     * value.  Subsequent calls to {@code getMaximumSize} will always\n@@ -1744,1 +1744,1 @@\n-     * to compute it.  Setting the maximum size to <code>null<\/code>\n+     * to compute it. Setting the maximum size to {@code null}\n@@ -1746,0 +1746,3 @@\n+     * <p>\n+     * Subclasses may choose to override this by returning its own maximum size\n+     * in its {@code getMaximumSize} method.\n@@ -1783,1 +1786,1 @@\n-     * value.  Subsequent calls to <code>getMinimumSize<\/code> will always\n+     * value.  Subsequent calls to {@code getMinimumSize} will always\n@@ -1785,1 +1788,1 @@\n-     * to compute it.  Setting the minimum size to <code>null<\/code>\n+     * to compute it. Setting the minimum size to {@code null}\n@@ -1787,0 +1790,3 @@\n+     * <p>\n+     * Subclasses may choose to override this by returning its own minimum size\n+     * in its {@code getMinimumSize} method.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JComponent.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -756,1 +756,12 @@\n-    \/\/ PENDING(hmuller) - the next three methods should be removed\n+    \/**\n+     * Unlike most components, {@code JScrollBar} derives the minimum size from\n+     * the preferred size in one axis and a fixed minimum size in the other.\n+     * Thus, it overrides {@code JComponent.setMinimumSize} contract\n+     * that subsequent calls to {@code getMinimumSize} will return the\n+     * same value as set in {@code JComponent.setMinimumSize}.\n+     *\n+     * @param minimumSize the new minimum size of this component\n+     *\/\n+    public void setMinimumSize(Dimension minimumSize) {\n+        super.setMinimumSize(minimumSize);\n+    }\n@@ -759,1 +770,15 @@\n-     * The scrollbar is flexible along it's scrolling axis and\n+     * Unlike most components, {@code JScrollBar} derives the maximum size from\n+     * the preferred size in one axis and a fixed maximum size in the other.\n+     * Thus, it overrides {@code JComponent.setMaximumSize} contract\n+     * that subsequent calls to {@code getMaximumSize} will return the\n+     * same value as set in {@code JComponent.setMaximumSize}.\n+     *\n+     * @param maximumSize the desired maximum allowable size\n+     *\/\n+    public void setMaximumSize(Dimension maximumSize) {\n+        super.setMaximumSize(maximumSize);\n+    }\n+\n+    \/**\n+     * Returns the minimum size for the {@code JScrollBar}.\n+     * The scrollbar is flexible along its scrolling axis and\n@@ -761,0 +786,5 @@\n+     * As specified in {@code setMinimumSize} JScrollBar will derive the\n+     * minimum size from the preferred size in one axis and a\n+     * fixed minimum size in the other.\n+     *\n+     * @return the minimum size as specified above.\n@@ -772,1 +802,2 @@\n-     * The scrollbar is flexible along it's scrolling axis and\n+     * Returns the maximum size for the {@code JScrollBar}.\n+     * The scrollbar is flexible along its scrolling axis and\n@@ -774,0 +805,5 @@\n+     * As specified in {@code setMaximumSize} JScrollBar will derive the\n+     * maximum size from the preferred size in one axis and a\n+     * fixed maximum size in the other.\n+     *\n+     * @return the maximum size as specified above.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JScrollBar.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"}]}