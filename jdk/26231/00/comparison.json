{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,18 @@\n+\/\/ JVMTI_ERROR_WRONG_PHASE guard\n+static jrawMonitorID event_mon = NULL;\n+static int is_vm_dead = 0;\n+\n+void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n+  jvmtiError err = (*jvmti)->RawMonitorEnter(jvmti, event_mon);\n+  if (err != JVMTI_ERROR_NONE) {\n+    JNI_ENV_PTR(jni)->FatalError(JNI_ENV_ARGS2(jni, \"RawMonitorEnter failed\"));\n+  }\n+}\n+\n+void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n+  jvmtiError err = (*jvmti)->RawMonitorExit(jvmti, event_mon);\n+  if (err != JVMTI_ERROR_NONE) {\n+    JNI_ENV_PTR(jni)->FatalError(JNI_ENV_ARGS2(jni, \"RawMonitorExit failed\"));\n+  }\n+}\n+\n@@ -56,0 +74,6 @@\n+  lock(jvmti, jni);\n+  if (is_vm_dead) {\n+    unlock(jvmti, jni);\n+    return;\n+  }\n+\n@@ -81,0 +105,1 @@\n+  unlock(jvmti, jni);\n@@ -87,0 +112,6 @@\n+extern JNIEXPORT void JNICALL OnVMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n+  lock(jvmti, jni);\n+  is_vm_dead = 1;\n+  unlock(jvmti, jni);\n+}\n+\n@@ -92,0 +123,1 @@\n+  jvmtiError err;\n@@ -97,0 +129,6 @@\n+  err = (*jvmti)->CreateRawMonitor(jvmti, \"Event Monitor\", &event_mon);\n+  if (err != JVMTI_ERROR_NONE) {\n+    printf(\"CreateRawMonitor failed: %d\\n\", err);\n+    return JNI_ERR;\n+  }\n+\n@@ -100,0 +138,1 @@\n+  callbacks.VMDeath = &OnVMDeath;\n@@ -107,0 +146,1 @@\n+  (*jvmti)->SetEventNotificationMode(jvmti, JVMTI_ENABLE, JVMTI_EVENT_VM_DEATH, NULL);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/VMEvent\/libVMEventTest.c","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}