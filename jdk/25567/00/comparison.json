{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -226,4 +226,5 @@\n-        while (len-- > 0) {\n-            int byte1 = buf[off++];\n-            if (byte1 < 0)\n-                len -= ((byte1 & 0xe0) == 0xc0) ? 1 : 2;\n+        while (len > 0) {\n+            int byte1 = buf[off];\n+            int nbytes = byte1 >= 0 ? 1 : (byte1 & 0xe0) == 0xc0 ? 2 : 3;\n+            off += nbytes;\n+            len -= nbytes;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Convert.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8358066\n+ * @summary Test for bug in Convert.utfNumChars()\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ * @run main TestUtfNumChars\n+ *\/\n+\n+import com.sun.tools.javac.util.Convert;\n+\n+import java.util.function.IntPredicate;\n+import java.util.stream.IntStream;\n+\n+public class TestUtfNumChars {\n+\n+    public static void main(String[] args) {\n+\n+        \/\/ This is the string \"abÂ«cdâ‰¤efðŸŸ¢gh\"\n+        String s = \"ab\\u00ABcd\\u2264ef\\ud83d\\udd34gh\";\n+\n+        \/\/ This is its modified UTF-8 encoding\n+        byte[] utf8 = Convert.string2utf(s);    \/\/ UTF-8: 61 62 c2 ab 63 64 e2 89 a4 65 66 ed a0 bd ed b4 b4 67 68\n+                                                \/\/ Bytes: 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18\n+                                                \/\/ Chars: 00 01 02 .. 03 04 05 .. .. 06 07 08 .. .. 09 .. .. 10 11\n+\n+        \/\/ These are the offsets in \"utf8\" marking the boundaries of encoded Java charcters\n+        int[] offsets = new int[] {\n+            0, 1, 2, 4, 5, 6, 9, 10, 11, 14, 17, 18\n+        };\n+        IntPredicate boundary = off -> off == utf8.length || IntStream.of(offsets).anyMatch(off2 -> off2 == off);\n+\n+        \/\/ Check Convert.utfNumChars() on every subsequence\n+        for (int i = 0; i < offsets.length; i++) {\n+            int i_off = offsets[i];\n+            if (!boundary.test(i_off))\n+                continue;\n+            for (int j = i; j < offsets.length; j++) {\n+                int j_off = offsets[j];\n+                if (!boundary.test(j_off))\n+                    continue;\n+                int nchars = Convert.utfNumChars(utf8, i_off, j_off - i_off);\n+                if (nchars != j - i)\n+                    throw new AssertionError(String.format(\"nchars %d != %d for [%d, %d)\", nchars, j - i, i, j));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nametable\/TestUtfNumChars.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}