{"files":[{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.accessibility;\n+\n+import javax.accessibility.Accessible;\n+import java.lang.annotation.Native;\n+\n+\/**\n+ * This interface provides the ability to speak a given string using screen readers.\n+ *\/\n+public interface AccessibleAnnouncer {\n+\n+    \/**\n+     * messages do not interrupt the current speech, they are spoken after the screen reader has spoken the current phrase\n+     *\/\n+    @Native int ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT = 0;\n+\n+    \/**\n+     * messages interrupt the current speech, but only when the focus is on the window of the calling application\n+     *\/\n+    @Native int ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT = 1;\n+\n+    \/**\n+     * This method makes an announcement with the specified priority from an accessible to which the announcing relates\n+     *\n+     * @param a      an accessible to which the announcing relates\n+     * @param str      string for announcing\n+     * @param priority priority for announcing\n+     *\/\n+    void announce(Accessible a, final String str, final int priority);\n+\n+}\n\\ No newline at end of file\n","filename":"src\/java.desktop\/share\/classes\/javax\/accessibility\/AccessibleAnnouncer.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.swing;\n+\n+import sun.swing.AccessibleAnnounceProvider;\n+\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAnnouncer;\n+\n+\/**\n+ * This class provides the ability to speak a given string using screen readers.\n+ *\/\n+public class JAccessibleAnnouncer implements AccessibleAnnouncer {\n+\n+    \/**\n+     * This method checks if an announcing implementation for this platform is available in this build\n+     *\n+     * @return announcer instance ore null\n+     *\/\n+    public static JAccessibleAnnouncer getJAccessibleAnnouncer() {\n+        if (AccessibleAnnounceProvider.isAnnounceExists()) {\n+            return new JAccessibleAnnouncer();\n+        }\n+        return null;\n+    }\n+\n+    private JAccessibleAnnouncer() {}\n+\n+    \/**\n+     * This method makes an announcement with the specified priority from an accessible to which the announcing relates\n+     *\n+     * @param a      an accessible to which the announcing relates\n+     * @param str      string for announcing\n+     * @param priority priority for announcing\n+     *\/\n+    @Override\n+    public void announce(Accessible a, String str, int priority) {\n+        try {\n+            AccessibleAnnounceProvider.announce(a, str, priority);\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JAccessibleAnnouncer.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.swing;\n+\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAnnouncer;\n+import java.lang.annotation.Native;\n+\n+\/**\n+  * This class provides the ability to speak a given string using screen readers.\n+ *\/\n+public class AccessibleAnnounceProvider {\n+\n+    private AccessibleAnnounceProvider() {}\n+\n+    \/**\n+     * This method checks the parameters for announcing\n+     * and makes a native call to the announsing screen reader API.\n+     *\n+     * @param a      an accessible to which the announcing relates\n+     * @param str      string for announcing\n+     * @param priority priority for announcing\n+     *\/\n+    public static void announce(Accessible a, final String str, final int priority) throws Exception {\n+        if (str == null ||\n+        priority != AccessibleAnnouncer.ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT &&\n+        priority != AccessibleAnnouncer.ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT) {\n+            throw new IllegalArgumentException(\"Invalid parameters passed for declaration\");\n+        }\n+\n+        nativeAnnounce(a, str, priority);\n+    }\n+\n+    public static boolean isAnnounceExists() {\n+        try {\n+            return nativeIsAnnounceExists();\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    private static native void nativeAnnounce(Accessible a, final String str, final int priority);\n+    private static native boolean nativeIsAnnounceExists();\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/AccessibleAnnounceProvider.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug JDK-8302687\n+ * @summary Test implementation of accessibility announcing\n+ * @run main\/manual AccessibleAnnouncerTest\n+ *\/\n+\n+import javax.accessibility.AccessibleAnnouncer;\n+\n+import javax.swing.JAccessibleAnnouncer;\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.ActionEvent;\n+import java.awt.Rectangle;\n+import java.util.concurrent.CountDownLatch;\n+import java.lang.Thread;\n+\n+public class AccessibleAnnouncerTest extends AccessibleComponentTest {\n+\n+    @java.lang.Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    void createTest() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check announcing.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the say button and press it.\\n\\n\"\n+                + \"If you can hear text from text field tab further and press PASS, otherwise press FAIL.\\n\";\n+        ;\n+\n+        JPanel frame = new JPanel();\n+\n+        JButton button = new JButton(\"Say\");\n+        button.setPreferredSize(new Dimension(100, 35));\n+        JTextField textField = new JTextField(\"This is text\");\n+\n+        button.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                String str = textField.getText();\n+                AccessibleAnnouncer accessibleAnnouncer = JAccessibleAnnouncer.getJAccessibleAnnouncer();\n+                if (accessibleAnnouncer== null) {\n+                    return;\n+                }\n+                accessibleAnnouncer.announce(button, str, AccessibleAnnouncer.ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT);\n+            }\n+        });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(textField);\n+        frame.add(button);\n+        exceptionString = \"Accessible announcer test failed!\";\n+        super.createUI(frame, \"Accessible Anouncer test\");\n+    }\n+\n+    void createPriorityTest() {\n+        String firstMessage = \"This is first message\";\n+        String secondMessage = \"This is second message\";\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check announcing priority.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the say button and press.\\n\\n\"\n+                + \"If you can hear \\\"\" + firstMessage\n+                + \"\\\" and \\\"\" + secondMessage\n+                + \"\\\" tab further and press PASS, otherwise press FAIL.\\n\";;\n+\n+        JPanel frame = new JPanel();\n+\n+        JButton button = new JButton(\"Say\");\n+        button.setPreferredSize(new Dimension(100, 35));\n+\n+        button.addActionListener(new ActionListener() {\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                AccessibleAnnouncer accessibleAnnouncer = JAccessibleAnnouncer.getJAccessibleAnnouncer();\n+                if (accessibleAnnouncer == null) {\n+                    return;\n+                }\n+                accessibleAnnouncer.announce(button, firstMessage, AccessibleAnnouncer.ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT);\n+                try {\n+                    Thread.sleep(3000);\n+                    accessibleAnnouncer.announce(button, \"You must not hear this message.\", AccessibleAnnouncer.ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT);\n+                    accessibleAnnouncer.announce(button, secondMessage, AccessibleAnnouncer.ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT);\n+                 } catch (Exception ex) {\n+                    ex.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+        exceptionString = \"Accessible announcer priority test failed!\";\n+        super.createUI(frame, \"Accessible Anouncer test\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleAnnouncerTest test = new AccessibleAnnouncerTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeLater(test::createTest);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeLater(test::createPriorityTest);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleAnnouncerTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}