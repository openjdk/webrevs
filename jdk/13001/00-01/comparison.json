{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.annotation.Native;\n@@ -38,1 +39,1 @@\n-    int ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT = 0;\n+    @Native int ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT = 0;\n@@ -43,1 +44,1 @@\n-    int ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT = 1;\n+    @Native int ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT = 1;\n","filename":"src\/java.desktop\/share\/classes\/javax\/accessibility\/AccessibleAnnouncer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,10 +37,0 @@\n-    \/**\n-     * messages do not interrupt the current speech, they are spoken after the screen reader has spoken the current phrase\n-     *\/\n-    @Native private static final int ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT = AccessibleAnnouncer.ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT;\n-\n-    \/**\n-     * messages interrupt the current speech, but only when the focus is on the window of the calling application\n-     *\/\n-    @Native private static final int ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT = AccessibleAnnouncer.ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT;\n-\n@@ -59,2 +49,2 @@\n-        priority != ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT &&\n-        priority != ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT) {\n+        priority != AccessibleAnnouncer.ANNOUNCE_WITHOUT_INTERRUPTING_CURRENT_OUTPUT &&\n+        priority != AccessibleAnnouncer.ANNOUNCE_WITH_INTERRUPTING_CURRENT_OUTPUT) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/AccessibleAnnounceProvider.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    public static void main(String[] args)  throws Exception {\n+    public static void main(String[] args) throws Exception {\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleAnnouncerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}