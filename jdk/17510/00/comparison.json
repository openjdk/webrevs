{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -585,1 +585,1 @@\n-    } else if (_java_mirror.ptr_raw() == nullptr) {\n+    } else if (_java_mirror.is_empty()) {\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,2 @@\n-  oop* ptr = ptr_raw();\n-  assert(ptr != nullptr, \"should not use replace\");\n-  NativeAccess<>::oop_store(ptr, obj);\n+  assert(!is_empty(), \"should not use replace\");\n+  NativeAccess<>::oop_store(_obj, obj);\n","filename":"src\/hotspot\/share\/oops\/oopHandle.inline.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-  if (_scopedValueCache.ptr_raw() != nullptr) { \/\/ i.e. if the OopHandle has been allocated\n+  if (!_scopedValueCache.is_empty()) { \/\/ i.e. if the OopHandle has been allocated\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}