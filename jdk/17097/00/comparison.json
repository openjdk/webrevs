{"files":[{"patch":"@@ -2800,1 +2800,1 @@\n-        if (parameterNameIndicesMp != null\n+        if (parameterNameIndicesMp != null && mpIndex < parameterNameIndicesMp.length\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2023, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322040\n+ * @summary Missing array bounds check in ClassReader.parameter\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      java.base\/jdk.internal.classfile\n+ *      java.base\/jdk.internal.classfile.attribute\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main BadMethodParameter\n+ *\/\n+\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.MethodTransform;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+public class BadMethodParameter extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    BadMethodParameter() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new BadMethodParameter().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] {Paths.get(m.getName())});\n+    }\n+\n+    @Test\n+    public void testAnnoOnConstructors(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path t = src.resolve(\"T.java\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(\n+                src,\n+                \"\"\"\n+                class T {\n+                  public static void f(int x, int y) {\n+                  }\n+                }\n+                \"\"\");\n+\n+        new JavacTask(tb).options(\"-parameters\").files(t).outdir(classes).run();\n+\n+        transform(classes.resolve(\"T.class\"));\n+\n+        Path classDir = getClassDir();\n+        new JavacTask(tb)\n+                .classpath(classes, classDir)\n+                .options(\"-verbose\", \"-parameters\", \"-processor\", P.class.getName())\n+                .classes(P.class.getName())\n+                .outdir(classes)\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    public Path getClassDir() {\n+        String classes = ToolBox.testClasses;\n+        if (classes == null) {\n+            return Paths.get(\"build\");\n+        } else {\n+            return Paths.get(classes);\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class P extends AbstractProcessor {\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            if (processingEnv.getElementUtils().getTypeElement(\"T\") == null) {\n+                throw new AssertionError(\"could not load T\");\n+            }\n+            return false;\n+        }\n+    }\n+\n+    private static void transform(Path path) throws IOException {\n+        byte[] bytes = Files.readAllBytes(path);\n+        Classfile cf = Classfile.of();\n+        ClassModel classModel = cf.parse(bytes);\n+        MethodTransform methodTransform =\n+                (mb, me) -> {\n+                    if (me instanceof MethodParametersAttribute mp) {\n+                        \/\/ create a MethodParameters attribute with the wrong number of entries\n+                        mb.with(\n+                                MethodParametersAttribute.of(\n+                                        mp.parameters().subList(0, mp.parameters().size() - 1)));\n+                    } else {\n+                        mb.with(me);\n+                    }\n+                };\n+\n+        ClassTransform classTransform = ClassTransform.transformingMethods(methodTransform);\n+        bytes = cf.transform(classModel, classTransform);\n+        Files.write(path, bytes);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/classreader\/BadMethodParameter.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}