{"files":[{"patch":"@@ -44,1 +44,1 @@\n-        if (args != null) {\n+        if (args != null && args.length <= 2) {\n@@ -47,1 +47,0 @@\n-                \/\/ no formatting to be done\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringFormat.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -270,0 +270,12 @@\n+\n+        format1(\"a%n\");\n+        format1(\"a%nb\");\n+        format1(\"%nb\");\n+        format1(utf_chars[0] + \"%n\");\n+        format1(utf_chars[0] + \"%n\" + utf_chars[0]);\n+        format1(\"%n\" + utf_chars[0]);\n+\n+        format1(utf_chars[0] + \"%s%n\", str_args_0[0]);\n+        format1(utf_chars[0] + \"%s%n\", formats_1d_utf16[0]);\n+        format1(utf_chars[0] + \"%n%s\", str_args_0[0]);\n+        format1(utf_chars[0] + \"%n%s\", formats_1d_utf16[0]);\n@@ -282,0 +294,6 @@\n+    private static void format1(String format) {\n+        String juf = new Formatter().format(format).toString();\n+        String strf = format.formatted();\n+        assertEquals(juf, strf);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/String\/StringFormat.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,0 +59,10 @@\n+    @Benchmark\n+    public String lineFormat() {\n+        return \"0123456789 %n\".formatted();\n+    }\n+\n+    @Benchmark\n+    public String lineFormatUtf16() {\n+        return \"\\u3007\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d %n\".formatted();\n+    }\n+\n@@ -69,0 +79,10 @@\n+    @Benchmark\n+    public String stringLineFormat() {\n+        return \"%s 0123456789 %n\".formatted(s);\n+    }\n+\n+    @Benchmark\n+    public String stringLineFormatUtf16() {\n+        return \"%s \\u3007\\u4e00\\u4e8c\\u4e09\\u56db\\u4e94\\u516d\\u4e03\\u516b\\u4e5d %n\".formatted(s);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringFormat.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}