{"files":[{"patch":"@@ -0,0 +1,303 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary StringFormat fastpath test\n+ *\/\n+\n+import java.util.Formatter;\n+import java.util.Locale;\n+\n+public class StringFormat {\n+    static char[] utf_chars = new char[] {\n+            '\\u3007', '\\u4e00', '\\u4e8c', '\\u4e09', '\\u56db', '\\u4e94', '\\u516d', '\\u4e03', '\\u516b', '\\u4e5d'\n+    };\n+\n+    static String str3(String s, char c, int i) {\n+        int x1 = (i * 3 - 1) % 10, x2 = (i * 3)  % 10, x3 = (i * 3 + 1)  % 10;\n+        return s + (char) (c + x1) + (char) (c + x2) + (char) (c + x3);\n+    }\n+\n+    static String str3_utf16(String s, int i) {\n+        int x1 = (i * 3 - 1) % 10, x2 = (i * 3)  % 10, x3 = (i * 3 + 1)  % 10;\n+        return s + utf_chars[x1] + utf_chars[x2] + utf_chars[x3];\n+    }\n+\n+    public static void main(String[] args) {\n+        int n = 5;\n+        String[] str_args_0 = new String[n];\n+        String[] str_args_1 = new String[n];\n+        String[] str_args_utf16 = new String[n];\n+        long[] int_args = new long[n];\n+\n+        String[] prefix = new String[n];\n+        String[] suffix = new String[n];\n+        String[] middle = new String[n];\n+\n+        str_args_0[0] = \"\";\n+        str_args_1[0] = \"\";\n+        str_args_utf16[0] = \"\";\n+\n+        prefix[0] = \"\";\n+        suffix[0] = \"\";\n+        middle[0] = \"\";\n+        int_args[0] = 1;\n+        for (int i = 1; i < n; i++) {\n+            int x1 = (i * 3 - 1) % 10, x2 = (i * 3)  % 10, x3 = (i * 3 + 1)  % 10;\n+            str_args_0[i] = str3(str_args_0[i - 1], 'M', i);\n+            str_args_1[i] = str3(str_args_1[i - 1], 'm', i);\n+            int_args[i] = int_args[i - 1] * 1000 + x1 * 100 + x2 * 10 + x3;\n+\n+            str_args_utf16[i] = str3_utf16(str_args_utf16[i - 1], i);\n+\n+            prefix[i] = str3(prefix[i - 1], 'a', i);\n+            suffix[i] = str3(suffix[i - 1], 'A', i);\n+            middle[i] = str3(middle[i - 1], 'k', i);\n+        }\n+\n+        String[] formats_1s = new String[n * n * n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                for (int k = 0; k < n; k++) {\n+                    String specifier = \"%\" + (k == 0 ? \"\" : Integer.toString(k)) + \"s\";\n+                    formats_1s[i * n * n + j * n + k] = prefix[i] + specifier + suffix[j];\n+                }\n+            }\n+        }\n+\n+        for (String format : formats_1s) {\n+            for (String arg : str_args_0) {\n+                format1(format, arg);\n+            }\n+\n+            for (long arg : int_args) {\n+                format1(format, arg);\n+            }\n+        }\n+\n+        String[] formats_1d = new String[n * n * n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                for (int k = 0; k < n; k++) {\n+                    String specifier = \"%\" + (k == 0 ? \"\" : Integer.toString(k * 3)) + \"s\";\n+                    formats_1d[i * n * n + j * n + k] = prefix[i] + specifier + suffix[j];\n+                }\n+            }\n+        }\n+        for (String format : formats_1d) {\n+            for (int i = 0; i < n; i++) {\n+                format1(format, str_args_0[i]);\n+                format1(format, str_args_utf16[i]);\n+                format1(format, int_args[i]);\n+            }\n+        }\n+\n+        String[] formats_1d_utf16 = new String[n * n * n];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                for (int k = 0; k < n; k++) {\n+                    String specifier = utf_chars[0] + \"%\" + (k == 0 ? \"\" : Integer.toString(k * 3)) + \"s\";\n+                    formats_1d_utf16[i * n * n + j * n + k] = prefix[i] + specifier + suffix[j];\n+                }\n+            }\n+        }\n+        for (String format : formats_1d_utf16) {\n+            for (int i = 0; i < n; i++) {\n+                format1(format, str_args_0[i]);\n+                format1(format, str_args_utf16[i]);\n+                format1(format, int_args[i]);\n+            }\n+        }\n+\n+        String[] formats_2_s_s = new String[n * n * n * n * n];\n+        for (int i0 = 0; i0 < n; i0++) {\n+            for (int i1 = 0; i1 < n; i1++) {\n+                for (int i2 = 0; i2 < n; i2++) {\n+                    for (int i3 = 0; i3 < n; i3++) {\n+                        for (int i4 = 0; i4 < n; i4++) {\n+                            String s0 = \"%\" + (i3 == 0 ? \"\" : Integer.toString(i3 * 3)) + \"s\";\n+                            String s1 = \"%\" + (i4 == 0 ? \"\" : Integer.toString(i4 * 3)) + \"s\";\n+                            int index = i0 * n * n * n * n\n+                                    + i1 * n * n * n\n+                                    + i2 * n * n\n+                                    + i3 * n\n+                                    + i4;\n+                            formats_2_s_s[index] = prefix[i0] + s0 + middle[i1] + s1 + suffix[i2];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        for (String format : formats_2_s_s) {\n+            for (int i = 0; i < str_args_0.length; i++) {\n+                for (int j = 0; j < str_args_0.length; j++) {\n+                    format2(format, str_args_0[i], str_args_0[j]);\n+                    format2(format, int_args[i], int_args[j]);\n+                }\n+            }\n+        }\n+\n+        String[] formats_2_s_d = new String[n * n * n * n * n];\n+        for (int i0 = 0; i0 < n; i0++) {\n+            for (int i1 = 0; i1 < n; i1++) {\n+                for (int i2 = 0; i2 < n; i2++) {\n+                    for (int i3 = 0; i3 < n; i3++) {\n+                        for (int i4 = 0; i4 < n; i4++) {\n+                            String s0 = \"%\" + (i3 == 0 ? \"\" : Integer.toString(i3 * 3)) + \"s\";\n+                            String s1 = \"%\" + (i4 == 0 ? \"\" : Integer.toString(i4 * 3)) + \"d\";\n+                            int index = i0 * n * n * n * n\n+                                    + i1 * n * n * n\n+                                    + i2 * n * n\n+                                    + i3 * n\n+                                    + i4;\n+                            formats_2_s_d[index] = prefix[i0] + s0 + middle[i1] + s1 + suffix[i2];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        for (String format : formats_2_s_d) {\n+            for (int i = 0; i < str_args_0.length; i++) {\n+                for (int j = 0; j < str_args_0.length; j++) {\n+                    format2(format, str_args_0[i], int_args[j]);\n+                }\n+            }\n+        }\n+\n+        String[] formats_2_d_s = new String[n * n * n * n * n];\n+        for (int i0 = 0; i0 < n; i0++) {\n+            for (int i1 = 0; i1 < n; i1++) {\n+                for (int i2 = 0; i2 < n; i2++) {\n+                    for (int i3 = 0; i3 < n; i3++) {\n+                        for (int i4 = 0; i4 < n; i4++) {\n+                            String s0 = \"%\" + (i3 == 0 ? \"\" : Integer.toString(i3 * 3)) + \"d\";\n+                            String s1 = \"%\" + (i4 == 0 ? \"\" : Integer.toString(i4 * 3)) + \"s\";\n+                            int index = i0 * n * n * n * n\n+                                    + i1 * n * n * n\n+                                    + i2 * n * n\n+                                    + i3 * n\n+                                    + i4;\n+                            formats_2_d_s[index] = prefix[i0] + s0 + middle[i1] + s1 + suffix[i2];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        for (String format : formats_2_d_s) {\n+            for (int i = 0; i < str_args_0.length; i++) {\n+                for (int j = 0; j < str_args_0.length; j++) {\n+                    format2(format, int_args[i], str_args_0[j]);\n+                }\n+            }\n+        }\n+\n+        String[] formats_2_d_d = new String[n * n * n * n * n];\n+        for (int i0 = 0; i0 < n; i0++) {\n+            for (int i1 = 0; i1 < n; i1++) {\n+                for (int i2 = 0; i2 < n; i2++) {\n+                    for (int i3 = 0; i3 < n; i3++) {\n+                        for (int i4 = 0; i4 < n; i4++) {\n+                            String s0 = \"%\" + (i3 == 0 ? \"\" : Integer.toString(i3 * 3)) + \"d\";\n+                            String s1 = \"%\" + (i4 == 0 ? \"\" : Integer.toString(i4 * 3)) + \"d\";\n+                            int index = i0 * n * n * n * n\n+                                    + i1 * n * n * n\n+                                    + i2 * n * n\n+                                    + i3 * n\n+                                    + i4;\n+                            formats_2_d_d[index] = prefix[i0] + s0 + middle[i1] + s1 + suffix[i2];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (String format : formats_2_d_d) {\n+            for (int i = 0; i < str_args_0.length; i++) {\n+                for (int j = 0; j < str_args_0.length; j++) {\n+                    format2(format, int_args[i], int_args[j]);\n+                }\n+            }\n+        }\n+\n+        locales(() -> {\n+            for (int i = 0; i < n; i++) {\n+                format2(\"%s%d\", str_args_0[i], int_args[i]);\n+            }\n+        });\n+    }\n+\n+    static void locales(Runnable r) {\n+        Locale defaultLocale = Locale.getDefault(Locale.Category.FORMAT);\n+        Locale[] locales = Locale.getAvailableLocales();\n+        for (Locale locale : locales) {\n+            Locale.setDefault(Locale.Category.FORMAT, locale);\n+            r.run();\n+        }\n+        Locale.setDefault(Locale.Category.FORMAT, defaultLocale);\n+    }\n+\n+    private static void format1(String format, String arg) {\n+        String juf = new Formatter().format(format, arg).toString();\n+        String strf = format.formatted(arg);\n+        assertEquals(juf, strf);\n+    }\n+\n+    private static void format2(String format, Object arg0, Object arg1) {\n+        String juf = new Formatter().format(format, arg0, arg1).toString();\n+        String strf = format.formatted(arg0, arg1);\n+        assertEquals(juf, strf);\n+    }\n+\n+    private static void format1(String format, long arg) {\n+        {\n+            byte byteArg = (byte) arg;\n+            String juf = new Formatter().format(format, byteArg).toString();\n+            String strf = format.formatted(byteArg);\n+            assertEquals(juf, strf);\n+        }\n+        {\n+            short shortArg = (short) arg;\n+            String juf = new Formatter().format(format, shortArg).toString();\n+            String strf = format.formatted(shortArg);\n+            assertEquals(juf, strf);\n+        }\n+        {\n+            int intArg = (int) arg;\n+            String juf = new Formatter().format(format, intArg).toString();\n+            String strf = format.formatted(intArg);\n+            assertEquals(juf, strf);\n+        }\n+        {\n+            String juf = new Formatter().format(format, arg).toString();\n+            String strf = format.formatted(arg);\n+            assertEquals(juf, strf);\n+        }\n+    }\n+\n+    private static void assertEquals(Object expected, Object actual) {\n+        if (!expected.equals(actual)) {\n+            throw new RuntimeException(\"Expected \" + expected + \" but got \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/StringFormat.java","additions":303,"deletions":0,"binary":false,"changes":303,"status":"added"}]}