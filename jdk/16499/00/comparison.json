{"files":[{"patch":"@@ -399,1 +399,2 @@\n-                if (value.getClass() != clazz) {\n+                if (!(value instanceof Enum<?> enumValue) ||\n+                    enumValue.getDeclaringClass() != clazz) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @bug 8318144\n@@ -73,1 +74,5 @@\n-        MethodType switchType = MethodType.methodType(int.class, target.getClass(), int.class);\n+        testEnum(target.getClass(), target, start, result, labels);\n+    }\n+\n+    private void testEnum(Class<?> targetClass, Enum<?> target, int start, int result, Object... labels) throws Throwable {\n+        MethodType switchType = MethodType.methodType(int.class, targetClass, int.class);\n@@ -141,0 +146,20 @@\n+    public void testEnumsWithConstants() throws Throwable {\n+        enum E {\n+            A {},\n+            B {},\n+            C {}\n+        }\n+        ClassDesc eDesc = E.class.describeConstable().get();\n+        Object[] typeParams = new Object[] {\n+            EnumDesc.of(eDesc, \"A\"),\n+            EnumDesc.of(eDesc, \"B\"),\n+            EnumDesc.of(eDesc, \"C\"),\n+        };\n+        testType(E.A, 0, 0, typeParams);\n+        testType(E.B, 0, 1, typeParams);\n+        testType(E.C, 0, 2, typeParams);\n+        testEnum(E.class, E.A, 0, 0, \"A\", \"B\", \"C\");\n+        testEnum(E.class, E.B, 0, 1, \"A\", \"B\", \"C\");\n+        testEnum(E.class, E.C, 0, 2, \"A\", \"B\", \"C\");\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8318144\n+ * @summary Verify switches work in presence of enum constants that have bodies\n+ * @compile SwitchEnumConstants.java\n+ * @run main SwitchEnumConstants\n+ *\/\n+\n+import java.util.function.ToIntFunction;\n+\n+public class SwitchEnumConstants {\n+\n+    public static void main(String... args) throws Exception {\n+        new SwitchEnumConstants().run();\n+    }\n+\n+    void run() throws Exception {\n+        doRun(this::typeSwitch);\n+        doRun(this::enumSwitch);\n+    }\n+\n+    void doRun(ToIntFunction<E> c) throws Exception {\n+        assertEquals(0, c.applyAsInt(E.A));\n+        assertEquals(1, c.applyAsInt(E.B));\n+        assertEquals(2, c.applyAsInt(E.C));\n+    }\n+\n+    int typeSwitch(Object o) {\n+        return switch (o) {\n+            case E.A -> 0;\n+            case E.B -> 1;\n+            case E.C -> 2;\n+            default -> throw new IllegalStateException();\n+        };\n+    }\n+\n+    int enumSwitch(E e) {\n+        return switch (e) {\n+            case A -> 0;\n+            case B -> 1;\n+            case C -> 2;\n+        };\n+    }\n+\n+\n+    private static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"expected: \" + expected +\n+                                     \", actual: \" + actual);\n+        }\n+    }\n+\n+    enum E {\n+        A {},\n+        B {},\n+        C {}\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchEnumConstants.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}