{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,2 +157,0 @@\n-     * @throws SecurityException if the security manager is present and\n-     * denies access to {@code RuntimePermission(\"liveStackFrames\")}\n@@ -174,6 +172,0 @@\n-     *\n-     * @throws SecurityException if the security manager is present and\n-     * it denies access to {@code RuntimePermission(\"liveStackFrames\")};\n-     * or if the given {@code options} contains\n-     * {@link StackWalker.Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n-     * and it denies access to {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n@@ -196,6 +188,0 @@\n-     *\n-     * @throws SecurityException if the security manager is present and\n-     * it denies access to {@code RuntimePermission(\"liveStackFrames\")}; or\n-     * or if the given {@code options} contains\n-     * {@link StackWalker.Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n-     * and it denies access to {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n@@ -204,5 +190,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"liveStackFrames\"));\n-        }\n@@ -216,3 +197,0 @@\n-     *\n-     * @throws SecurityException if the security manager is present and\n-     * denies access to {@code RuntimePermission(\"liveStackFrames\")}\n@@ -235,6 +213,0 @@\n-     *\n-     * @throws SecurityException if the security manager is present and\n-     * it denies access to {@code RuntimePermission(\"liveStackFrames\")}; or\n-     * or if the given {@code options} contains\n-     * {@link StackWalker.Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n-     * and it denies access to {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n@@ -245,5 +217,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"liveStackFrames\"));\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/LiveStackFrame.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -177,5 +177,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkExit(status);\n-        }\n@@ -235,5 +230,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n-        }\n@@ -262,5 +252,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n-        }\n@@ -296,5 +281,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkExit(status);\n-        }\n@@ -782,5 +762,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkLink(filename);\n-        }\n@@ -843,5 +818,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkLink(libname);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -382,1 +382,0 @@\n-        checkPermission(optionSet);\n@@ -412,1 +411,0 @@\n-        checkPermission(optionSet);\n@@ -436,11 +434,0 @@\n-    private static void checkPermission(Set<Option> options) {\n-        Objects.requireNonNull(options);\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (options.contains(Option.RETAIN_CLASS_REFERENCE)) {\n-                sm.checkPermission(new RuntimePermission(\"getStackWalkerWithClassReference\"));\n-            }\n-        }\n-    }\n-\n@@ -640,1 +627,0 @@\n-        checkPermission(optionSet);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -688,6 +688,0 @@\n-            if (charset.getClass().getClassLoader0() != null &&\n-                    System.getSecurityManager() != null) {\n-                bytes = Arrays.copyOfRange(bytes, offset, offset + length);\n-                offset = 0;\n-            }\n-\n@@ -831,4 +825,0 @@\n-        if (cs.getClass().getClassLoader0() != null &&\n-                System.getSecurityManager() != null) {\n-            src = Arrays.copyOf(src, len);\n-        }\n@@ -853,3 +843,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static byte[] safeTrim(byte[] ba, int len, boolean isTrusted) {\n-        if (len == ba.length && (isTrusted || System.getSecurityManager() == null)) {\n+    private static byte[] trimArray(byte[] ba, int len) {\n+        if (len == ba.length) {\n@@ -910,1 +899,1 @@\n-                return safeTrim(ba, blen, true);\n+                return trimArray(ba, blen);\n@@ -940,1 +929,1 @@\n-        return safeTrim(ba, bb.position(), cs.getClass().getClassLoader0() == null);\n+        return trimArray(ba, bb.position());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -203,1 +203,0 @@\n-        checkIO();\n@@ -215,1 +214,0 @@\n-        checkIO();\n@@ -227,1 +225,0 @@\n-        checkIO();\n@@ -278,8 +275,0 @@\n-    private static void checkIO() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"setIO\"));\n-        }\n-    }\n-\n@@ -290,7 +279,0 @@\n-    private static class CallersHolder {\n-        \/\/ Remember callers of setSecurityManager() here so that warning\n-        \/\/ is only printed once for each different caller\n-        static final Map<Class<?>, Boolean> callers\n-            = Collections.synchronizedMap(new WeakHashMap<>());\n-    }\n-\n@@ -684,6 +666,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertiesAccess();\n-        }\n-\n@@ -728,6 +704,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertiesAccess();\n-        }\n-\n@@ -765,6 +735,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertyAccess(key);\n-        }\n-\n@@ -793,6 +757,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPropertyAccess(key);\n-        }\n-\n@@ -825,7 +783,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new PropertyPermission(key,\n-                SecurityConstants.PROPERTY_WRITE_ACTION));\n-        }\n-\n@@ -856,6 +807,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new PropertyPermission(key, \"write\"));\n-        }\n-\n@@ -908,6 +853,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"getenv.\"+name));\n-        }\n-\n@@ -948,6 +887,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"getenv.*\"));\n-        }\n-\n@@ -1404,5 +1337,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(LOGGERFINDER_PERMISSION);\n-            }\n@@ -1479,5 +1407,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(LOGGERFINDER_PERMISSION);\n-            }\n@@ -1605,11 +1528,0 @@\n-        final SecurityManager sm = System.getSecurityManager();\n-        \/\/ We don't use LazyLoggers if a resource bundle is specified.\n-        \/\/ Bootstrap sensitive classes in the JDK do not use resource bundles\n-        \/\/ when logging. This could be revisited later, if it needs to.\n-        if (sm != null) {\n-            final PrivilegedAction<Logger> pa =\n-                    () -> LoggerFinder.accessProvider()\n-                            .getLocalizedLogger(name, rb, caller.getModule());\n-            return AccessController.doPrivileged(pa, null,\n-                                         LoggerFinder.LOGGERFINDER_PERMISSION);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"modified"}]}