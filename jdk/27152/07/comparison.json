{"files":[{"patch":"@@ -38,3 +38,4 @@\n-#define DEF_RV_FEATURE(NAME, PRETTY, BIT, FSTRING, FLAGF)       \\\n-VM_Version::NAME##RVFeatureValue VM_Version::NAME(PRETTY, BIT, FSTRING);\n-RV_FEATURE_FLAGS(DEF_RV_FEATURE)\n+#define DEF_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::NAME##RVExtFeatureValue VM_Version::NAME;\n+RV_EXT_FEATURE_FLAGS(DEF_RV_EXT_FEATURE)\n+#undef DEF_RV_EXT_FEATURE\n@@ -42,4 +43,12 @@\n-#define ADD_RV_FEATURE_IN_LIST(NAME, PRETTY, BIT, FSTRING, FLAGF) \\\n-    &VM_Version::NAME,\n-VM_Version::RVFeatureValue* VM_Version::_feature_list[] = {\n-RV_FEATURE_FLAGS(ADD_RV_FEATURE_IN_LIST)\n+#define DEF_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::NAME##RVNonExtFeatureValue VM_Version::NAME;\n+RV_NON_EXT_FEATURE_FLAGS(DEF_RV_NON_EXT_FEATURE)\n+#undef DEF_RV_NON_EXT_FEATURE\n+\n+#define ADD_RV_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::NAME,\n+#define ADD_RV_NON_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::NAME,\n+ VM_Version::RVFeatureValue* VM_Version::_feature_list[] = {\n+ RV_EXT_FEATURE_FLAGS(ADD_RV_EXT_FEATURE_IN_LIST)\n+ RV_NON_EXT_FEATURE_FLAGS(ADD_RV_NON_EXT_FEATURE_IN_LIST)\n@@ -47,0 +56,4 @@\n+#undef ADD_RV_NON_EXT_FEATURE_IN_LIST\n+#undef ADD_RV_EXT_FEATURE_IN_LIST\n+\n+VM_Version::RVExtFeatures* VM_Version::_rv_ext_features = new VM_Version::RVExtFeatures();\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+  class RVExtFeatures;\n+\n@@ -52,2 +54,1 @@\n-    const uint64_t    _feature_bit;\n-    bool              _enabled;\n+    const uint64_t    _linux_feature_bit;\n@@ -56,3 +57,3 @@\n-    RVFeatureValue(const char* pretty, int bit_num, bool fstring) :\n-      _pretty(pretty), _feature_string(fstring), _feature_bit(nth_bit(bit_num)),\n-      _enabled(false), _value(-1) {\n+    RVFeatureValue(const char* pretty, int linux_bit_num, bool fstring) :\n+      _pretty(pretty), _feature_string(fstring), _linux_feature_bit(nth_bit(linux_bit_num)),\n+      _value(-1) {\n@@ -60,2 +61,1 @@\n-    void enable_feature(int64_t value = 0) {\n-      _enabled = true;\n+    virtual void enable_feature(int64_t value = 0) {\n@@ -64,2 +64,1 @@\n-    void disable_feature() {\n-      _enabled = false;\n+    virtual void disable_feature() {\n@@ -69,1 +68,1 @@\n-    uint64_t feature_bit()       { return _feature_bit; }\n+    uint64_t feature_bit()       { return _linux_feature_bit; }\n@@ -71,1 +70,0 @@\n-    bool enabled()               { return _enabled; }\n@@ -73,0 +71,1 @@\n+    virtual bool enabled() = 0;\n@@ -114,0 +113,39 @@\n+\n+  class RVExtFeatureValue : public RVFeatureValue {\n+    const uint32_t _cpu_feature_index;\n+   public:\n+    RVExtFeatureValue(const char* pretty, int linux_bit_num, uint32_t cpu_feature_index, bool fstring) :\n+      RVFeatureValue(pretty, linux_bit_num, fstring),\n+      _cpu_feature_index(cpu_feature_index) {\n+    }\n+    bool enabled() {\n+      return RVExtFeatures::current()->support_feature(_cpu_feature_index);\n+    }\n+    void enable_feature(int64_t value = 0) {\n+      RVFeatureValue::enable_feature(value);\n+      RVExtFeatures::current()->set_feature(_cpu_feature_index);\n+    }\n+    void disable_feature() {\n+      RVFeatureValue::disable_feature();\n+      RVExtFeatures::current()->clear_feature(_cpu_feature_index);\n+    }\n+  };\n+\n+  class RVNonExtFeatureValue : public RVFeatureValue {\n+    bool _enabled;\n+   public:\n+    RVNonExtFeatureValue(const char* pretty, int linux_bit_num, bool fstring) :\n+      RVFeatureValue(pretty, linux_bit_num, fstring),\n+      _enabled(false) {\n+    }\n+    bool enabled()               { return _enabled; }\n+    void enable_feature(int64_t value = 0) {\n+      RVFeatureValue::enable_feature(value);\n+      _enabled = true;\n+    }\n+    void disable_feature() {\n+      RVFeatureValue::disable_feature();\n+      _enabled = false;\n+    }\n+  };\n+\n@@ -164,52 +202,139 @@\n-  \/\/ declaration name  , extension name, bit pos       ,in str, mapped flag)\n-  #define RV_FEATURE_FLAGS(decl)                                                                        \\\n-  decl(ext_I            , \"i\"              ,    ('I' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_M            , \"m\"              ,    ('M' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_A            , \"a\"              ,    ('A' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_F            , \"f\"              ,    ('F' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_D            , \"d\"              ,    ('D' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_C            , \"c\"              ,    ('C' - 'A'), true , UPDATE_DEFAULT(UseRVC))             \\\n-  decl(ext_Q            , \"q\"              ,    ('Q' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_H            , \"h\"              ,    ('H' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_V            , \"v\"              ,    ('V' - 'A'), true , UPDATE_DEFAULT(UseRVV))             \\\n-  decl(ext_Zicbom       , \"Zicbom\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbom))          \\\n-  decl(ext_Zicboz       , \"Zicboz\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicboz))          \\\n-  decl(ext_Zicbop       , \"Zicbop\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbop))          \\\n-  decl(ext_Zba          , \"Zba\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZba))             \\\n-  decl(ext_Zbb          , \"Zbb\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbb))             \\\n-  decl(ext_Zbc          , \"Zbc\"            , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zbs          , \"Zbs\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbs))             \\\n-  decl(ext_Zbkb         , \"Zbkb\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbkb))            \\\n-  decl(ext_Zcb          , \"Zcb\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZcb))             \\\n-  decl(ext_Zfa          , \"Zfa\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))             \\\n-  decl(ext_Zfh          , \"Zfh\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfh))             \\\n-  decl(ext_Zfhmin       , \"Zfhmin\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfhmin))          \\\n-  decl(ext_Zicsr        , \"Zicsr\"          , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zicntr       , \"Zicntr\"         , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zifencei     , \"Zifencei\"       , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zic64b       , \"Zic64b\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZic64b))          \\\n-  decl(ext_Ztso         , \"Ztso\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZtso))            \\\n-  decl(ext_Zihintpause  , \"Zihintpause\"    , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZihintpause))     \\\n-  decl(ext_Zacas        , \"Zacas\"          , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZacas))           \\\n-  decl(ext_Zvbb         , \"Zvbb\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n-  decl(ext_Zvbc         , \"Zvbc\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n-  decl(ext_Zvfh         , \"Zvfh\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n-  decl(ext_Zvkn         , \"Zvkn\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n-  decl(ext_Zicond       , \"Zicond\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicond))          \\\n-  decl(mvendorid        , \"VendorId\"       , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(marchid          , \"ArchId\"         , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(mimpid           , \"ImpId\"          , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(unaligned_access , \"Unaligned\"      , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(satp_mode        , \"SATP\"           , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(zicboz_block_size, \"ZicbozBlockSize\", RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-\n-  #define DECLARE_RV_FEATURE(NAME, PRETTY, BIT, FSTRING, FLAGF)        \\\n-  struct NAME##RVFeatureValue : public RVFeatureValue {                \\\n-    NAME##RVFeatureValue(const char* pretty, int bit, bool fstring) :  \\\n-      RVFeatureValue(pretty, bit, fstring) {}                          \\\n-    FLAGF;                                                             \\\n-  };                                                                   \\\n-  static NAME##RVFeatureValue NAME;                                    \\\n-\n-  RV_FEATURE_FLAGS(DECLARE_RV_FEATURE)\n-  #undef DECLARE_RV_FEATURE\n+  \/\/\n+  \/\/ Fields description in `decl`:\n+  \/\/    declaration name, extension name, bit value from linux, feature string?, mapped flag)\n+  #define RV_EXT_FEATURE_FLAGS(decl)                                                                   \\\n+  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_A            ,  a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_C            ,  c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))             \\\n+  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_H            ,  h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_V            ,  v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))             \\\n+  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))          \\\n+  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))          \\\n+  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))          \\\n+  decl(ext_Zba          ,  Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))             \\\n+  decl(ext_Zbb          ,  Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))             \\\n+  decl(ext_Zbc          ,  Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))             \\\n+  decl(ext_Zbkb         ,  Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))            \\\n+  decl(ext_Zcb          ,  Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))             \\\n+  decl(ext_Zfa          ,  Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))             \\\n+  decl(ext_Zfh          ,  Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))             \\\n+  decl(ext_Zfhmin       ,  Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))          \\\n+  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zicntr       ,  Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zic64b       ,  Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))          \\\n+  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))            \\\n+  decl(ext_Zihintpause  ,  Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))     \\\n+  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))           \\\n+  decl(ext_Zvbb         ,  Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n+  decl(ext_Zvbc         ,  Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n+  decl(ext_Zvfh         ,  Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n+  decl(ext_Zvkn         ,  Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n+  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))          \\\n+\n+  #define DECLARE_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)               \\\n+  struct NAME##RVExtFeatureValue : public RVExtFeatureValue {                           \\\n+    NAME##RVExtFeatureValue() :                                                         \\\n+      RVExtFeatureValue(#PRETTY, LINUX_BIT, RVExtFeatures::CPU_##NAME, FSTRING) {}      \\\n+    FLAGF;                                                                              \\\n+  };                                                                                    \\\n+  static NAME##RVExtFeatureValue NAME;                                                  \\\n+\n+  RV_EXT_FEATURE_FLAGS(DECLARE_RV_EXT_FEATURE)\n+  #undef DECLARE_RV_EXT_FEATURE\n+\n+  \/\/ Non-extension features\n+  \/\/\n+  #define RV_NON_EXT_FEATURE_FLAGS(decl)                                                       \\\n+  decl(unaligned_access ,  Unaligned       ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(mvendorid        ,  VendorId        ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(marchid          ,  ArchId          ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(mimpid           ,  ImpId           ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(satp_mode        ,  SATP            ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(zicboz_block_size,  ZicbozBlockSize ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+\n+  #define DECLARE_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)      \\\n+  struct NAME##RVNonExtFeatureValue : public RVNonExtFeatureValue {                \\\n+    NAME##RVNonExtFeatureValue() :                                                 \\\n+      RVNonExtFeatureValue(#PRETTY, LINUX_BIT, FSTRING) {}                         \\\n+    FLAGF;                                                                         \\\n+  };                                                                               \\\n+  static NAME##RVNonExtFeatureValue NAME;                                          \\\n+\n+  RV_NON_EXT_FEATURE_FLAGS(DECLARE_RV_NON_EXT_FEATURE)\n+  #undef DECLARE_RV_NON_EXT_FEATURE\n+\n+private:\n+  \/\/ Utility for AOT CPU feature store\/check.\n+  class RVExtFeatures : public CHeapObj<mtCode> {\n+   public:\n+    enum RVFeatureIndex {\n+      #define DECLARE_RV_FEATURE_ENUM(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) CPU_##NAME,\n+\n+      RV_EXT_FEATURE_FLAGS(DECLARE_RV_FEATURE_ENUM)\n+      MAX_CPU_FEATURE_INDEX\n+      #undef DECLARE_RV_FEATURE_ENUM\n+    };\n+   private:\n+    uint64_t _features_bitmap[(MAX_CPU_FEATURE_INDEX \/ BitsPerLong) + 1];\n+    STATIC_ASSERT(sizeof(_features_bitmap) * BitsPerByte >= MAX_CPU_FEATURE_INDEX);\n+\n+    \/\/ Number of 8-byte elements in _features_bitmap.\n+    constexpr static int element_count() {\n+      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n+    }\n+\n+    constexpr static int element_shift_count() {\n+      return LogBitsPerLong;\n+    }\n+\n+    static int element_index(RVFeatureIndex feature) {\n+      int idx = feature >> element_shift_count();\n+      assert(idx < element_count(), \"Features array index out of bounds\");\n+      return idx;\n+    }\n+\n+    static uint64_t feature_bit(RVFeatureIndex feature) {\n+      constexpr static uint64_t m = (1ULL << element_shift_count()) - 1;\n+      return (1ULL << (feature & m));\n+    }\n+\n+    static RVFeatureIndex convert(uint32_t index) {\n+      assert(index < MAX_CPU_FEATURE_INDEX, \"must\");\n+      return (RVFeatureIndex)index;\n+    }\n+\n+   public:\n+    static RVExtFeatures* current() {\n+      return _rv_ext_features;\n+    }\n+\n+    RVExtFeatures() {\n+      for (int i = 0; i < element_count(); i++) {\n+        _features_bitmap[i] = 0;\n+      }\n+    }\n+\n+    void set_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      _features_bitmap[idx] |= feature_bit(f);\n+    }\n+\n+    void clear_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      _features_bitmap[idx] &= ~feature_bit(f);\n+    }\n+\n+    bool support_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      return (_features_bitmap[idx] & feature_bit(f)) != 0;\n+    }\n+  };\n@@ -289,0 +414,1 @@\n+  static RVExtFeatures* _rv_ext_features;\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":189,"deletions":63,"binary":false,"changes":252,"status":"modified"}]}