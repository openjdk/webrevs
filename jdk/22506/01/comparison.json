{"files":[{"patch":"@@ -0,0 +1,271 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.jdkcatalog;\n+\n+import java.io.StringReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+import javax.xml.XMLConstants;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import org.testng.Assert;\n+import org.testng.Assert.ThrowingRunnable;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+\/*\n+ * @test\n+ * @bug 8344800 8345353\n+ * @run testng\/othervm common.jdkcatalog.JDKCatalogTest\n+ * @summary Verifies the W3C DTDs and XSDs in the JDK built-in catalog.\n+ *\/\n+public class JDKCatalogTest {\n+    static String CLS_DIR = System.getProperty(\"test.classes\");\n+    static String SRC_DIR = System.getProperty(\"test.src\");\n+    public static boolean isWindows = false;\n+    static {\n+        if (System.getProperty(\"os.name\").contains(\"Windows\")) {\n+            isWindows = true;\n+        }\n+    };\n+    public static final String JDKCATALOG_RESOLVE = \"jdk.xml.jdkcatalog.resolve\";\n+    static final String PUBLIC_ID = \"{{publicId}}\";\n+    static final String SYSTEM_ID = \"{{systemId}}\";\n+    static final String XSD_LOCATION = \"{{SCHEMA_LOCATION}}\";\n+    static final String TARGET_NAMESPACE = \"{{targetNamespace}}\";\n+    static final String ROOT_ELEMENT = \"{{rootElement}}\";\n+\n+    \/*\n+     * DataProvider: for verifying DTDs in the JDKCatalog\n+     * Data provided: see test testExternalDTD\n+     *\/\n+    @DataProvider(name = \"externalDTD\")\n+    public Object[][] getDTD() throws Exception {\n+        return new Object[][]{\n+            \/\/ verifies the test method correctly throws an exception if the specified\n+            \/\/ DTD can not be resolved\n+            {\"-\/\/ORG\/\/DTD FOO 200102\/\/EN\", \"http:\/\/foo.org\/2001\/bar.dtd\", SAXException.class},\n+            \/\/ this test also verifies datatypes.dtd as it's referenced in XMLSchema.dtd\n+            {\"-\/\/W3C\/\/DTD XMLSCHEMA 200102\/\/EN\", \"http:\/\/www.w3.org\/2001\/XMLSchema.dtd\", null},\n+            {\"-\/\/W3C\/\/DTD XHTML 1.0 Frameset\/\/EN\", \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-frameset.dtd\", null},\n+            {\"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\", \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\", null},\n+            {\"-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN\", \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd\", null},\n+            {\"-\/\/W3C\/\/DTD XHTML 1.1\/\/EN\", \"http:\/\/www.w3.org\/TR\/xhtml11\/DTD\/xhtml11.dtd\", null},\n+            {\"-\/\/W3C\/\/DTD Specification V2.10\/\/EN\", \"http:\/\/www.w3.org\/2002\/xmlspec\/dtd\/2.10\/xmlspec.dtd\", null},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: for verifying XSDs in the JDKCatalog\n+     * Data provided: see test testXSD\n+     *\/\n+    @DataProvider(name = \"getXSD\")\n+    public Object[][] getXSD() throws Exception {\n+        return new Object[][]{\n+            \/\/ verifies the test method correctly throws an exception if the specified\n+            \/\/ XSD can not be resolved\n+            {\"xsdtest.xml\", \"http:\/\/foo.org\/2001\/bar.xsd\", \"http:\/\/foo.org\/2001\/bar\", \"root\", null, SAXException.class},\n+            \/\/ application XSD is resolved by a custom catalog, the W3C XSD then by the JDKCatalog\n+            {\"testXML.xml\", \"http:\/\/www.w3.org\/2001\/xml.xsd\", \"http:\/\/www.w3.org\/XML\/1998\/namespace\", \"testXMLXSD\", \"TestCatalog.xml\", null},\n+            \/\/ this test also verifies XMLSchema.dtd and xml.xsd as they are referenced\n+            {\"testXMLSchema.xml\", \"http:\/\/www.w3.org\/2001\/XMLSchema.xsd\", \"http:\/\/www.w3.org\/2001\/XMLSchema\", \"xs:schema\", null, null},\n+            {\"testDatatypes.xml\", \"http:\/\/www.w3.org\/2009\/XMLSchema\/XMLSchema-datatypes.xsd\", \"http:\/\/www.w3.org\/2001\/XMLSchema-datatypes\", \"testDatatypes\", \"TestCatalog.xml\", null},\n+            {\"xhtml-frameset.xml\", \"https:\/\/www.w3.org\/2002\/08\/xhtml\/xhtml1-frameset.xsd\", \"http:\/\/www.w3.org\/1999\/xhtml\", \"html\", null, null},\n+            {\"xhtml.xml\", \"https:\/\/www.w3.org\/2002\/08\/xhtml\/xhtml1-strict.xsd\", \"http:\/\/www.w3.org\/1999\/xhtml\", \"html\", null, null},\n+            {\"xhtml.xml\", \"https:\/\/www.w3.org\/2002\/08\/xhtml\/xhtml1-transitional.xsd\", \"http:\/\/www.w3.org\/1999\/xhtml\", \"html\", null, null},\n+            {\"xhtml.xml\", \"http:\/\/www.w3.org\/MarkUp\/SCHEMA\/xhtml11.xsd\", \"http:\/\/www.w3.org\/1999\/xhtml\", \"html\", null, null},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that references to the W3C DTDs are resolved by the JDK built-in\n+     * catalog.\n+     * @param publicId the PUBLIC identifier\n+     * @param systemId the SYSTEM identifier\n+     * @param expectedThrow the expected throw if the specified DTD can not be\n+     *                      resolved.\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"externalDTD\")\n+    public void testExternalDTD(String publicId, String systemId, Class<Throwable> expectedThrow)\n+            throws Exception {\n+        final String xmlString = generateXMLWithDTDRef(publicId, systemId);\n+\n+        if (expectedThrow == null) {\n+            assertDoesNotThrow(() -> parseWithResolveStrict(xmlString),\n+                    \"JDKCatalog shall resolve \" + systemId + \" but exception is thrown.\");\n+        } else {\n+            Assert.assertThrows(expectedThrow,\n+                () -> parseWithResolveStrict(xmlString));\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that references to the W3C DTDs are resolved by the JDK built-in\n+     * catalog.\n+     * @param xmlTemplate a template used to generate an XML instance\n+     * @param xsdLocation the XSD to be resolved\n+     * @param targetNS the target namespace\n+     * @param rootElement the root element\n+     * @param catalog the custom catalog to be used to resolve XSDs used by the\n+     *                test.\n+     * @param expectedThrow the expected throw if the specified DTD can not be\n+     *                      resolved.\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"getXSD\")\n+    public void testXSD(String xmlTemplate, String xsdLocation, String targetNS, String rootElement, String catalog,\n+            Class<Throwable> expectedThrow)\n+            throws Exception {\n+        String xmlSrcPath = SRC_DIR + \"\/\" + xmlTemplate;\n+        final String xmlSrcId = getSysId(xmlSrcPath);\n+\n+        final String customCatalog = getSysId((catalog != null) ? SRC_DIR + \"\/\" + catalog : null);\n+\n+        final String xmlString = generateXMLWithXSDRef(xmlSrcPath, xsdLocation,\n+                targetNS, rootElement);\n+        if (expectedThrow == null) {\n+            assertDoesNotThrow(() -> validateWithResolveStrict(xmlString, xmlSrcId, customCatalog),\n+                    \"JDKCatalog shall resolve \" + xsdLocation + \" but exception is thrown.\");\n+        } else {\n+            Assert.assertThrows(expectedThrow,\n+                () -> validateWithResolveStrict(xmlString, xmlSrcId, customCatalog));\n+        }\n+    }\n+\n+    \/**\n+     * Validate the specified XML document with jdk.xml.jdkCatalog.resolve set to strict.\n+     * @param xml  the XML document to be validated\n+     * @param xmlSrcPathId the URI to the XML source (template in this case)\n+     * @param customCatalog the custom catalog used to resolve local XSDs\n+     * @throws Exception if validation fails\n+     *\/\n+    public void validateWithResolveStrict(String xml, String xmlSrcPathId, String customCatalog)\n+            throws Exception {\n+        SAXSource ss = new SAXSource(new InputSource(new StringReader(xml)));\n+        ss.setSystemId(xmlSrcPathId);\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        schemaFactory.setProperty(JDKCATALOG_RESOLVE, \"strict\");\n+        if (customCatalog != null) {\n+            schemaFactory.setProperty(CatalogFeatures.Feature.FILES.getPropertyName(), customCatalog);\n+            schemaFactory.setProperty(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"continue\");\n+        }\n+        Validator validator = schemaFactory.newSchema().newValidator();\n+        validator.validate(ss);\n+    }\n+\n+    \/**\n+     * Parses the XML with jdk.xml.jdkCatalog.resolve set to strict.\n+     * @param xml the XML document to be parsed\n+     * @throws Exception if external access is denied\n+     *\/\n+    public void parseWithResolveStrict(String xml)\n+            throws Exception {\n+        SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n+        saxParserFactory.setNamespaceAware(true);\n+        XMLReader xmlReader = saxParserFactory.newSAXParser().getXMLReader();\n+        xmlReader.setProperty(JDKCATALOG_RESOLVE, \"strict\");\n+        xmlReader.setContentHandler(new DefaultHandler());\n+        xmlReader.parse(new InputSource(new StringReader(xml)));\n+    }\n+\n+    \/**\n+     * Generates an XML with the specified PUBLIC and SYSTEM identifiers.\n+     * @param publicId the public identifier\n+     * @param systemId the system identifier\n+     * @return an XML\n+     * @throws Exception if error happens\n+     *\/\n+    private String generateXMLWithDTDRef(String publicId, String systemId)\n+            throws Exception {\n+        Path path = Paths.get(SRC_DIR + \"\/dtdtest.xml\");\n+        String xmlString = Files.lines(path).map(line -> {\n+            line = line.replace(PUBLIC_ID, publicId);\n+            line = line.replace(SYSTEM_ID, systemId);\n+            return line;\n+        }).collect(Collectors.joining(System.lineSeparator()));\n+        return xmlString;\n+    }\n+\n+    \/**\n+     * Generates an XML with the specified XSD location.\n+     * @param xmlSrcPath the path to the XML source\n+     * @param xsd the XSD location\n+     * @return an XML\n+     * @throws Exception if error happens\n+     *\/\n+    private String generateXMLWithXSDRef(String xmlSrcPath, String xsd,\n+            String targetNS, String rootElement)\n+            throws Exception {\n+        String xmlString = Files.lines(Paths.get(xmlSrcPath)).map(line -> {\n+            if (line.contains(XSD_LOCATION)) {\n+                line = line.replace(XSD_LOCATION, xsd);\n+            }\n+            if (line.contains(TARGET_NAMESPACE)) {\n+                line = line.replace(TARGET_NAMESPACE, targetNS);\n+            }\n+            if (line.contains(ROOT_ELEMENT)) {\n+                line = line.replace(ROOT_ELEMENT, rootElement);\n+            }\n+            return line;\n+        }).collect(Collectors.joining(System.lineSeparator()));\n+        return xmlString;\n+    }\n+\n+    \/**\n+     * Returns the System identifier (URI) of the source.\n+     * @param path the path to the source\n+     * @return the System identifier\n+     *\/\n+    private String getSysId(String path) {\n+        if (path == null) return null;\n+        String xmlSysId = \"file:\/\/\" + path;\n+        if (isWindows) {\n+            path = path.replace('\\\\', '\/');\n+            xmlSysId = \"file:\/\/\/\" + path;\n+        }\n+        return xmlSysId;\n+    }\n+\n+    \/**\n+     * Asserts the run does not cause a Throwable.\n+     * @param runnable the runnable\n+     * @param message the message if the test fails\n+     *\/\n+    private void assertDoesNotThrow(ThrowingRunnable runnable, String message) {\n+        try {\n+            runnable.run();\n+        } catch (Throwable t) {\n+            Assert.fail(message + \"\\n Exception thrown: \" + t.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/JDKCatalogTest.java","additions":271,"deletions":0,"binary":false,"changes":271,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n+    <!-- Catalog for testing the JDKCatalog\n+    -->\n+    <systemSuffix systemIdSuffix=\"testDatatypes.xsd\" uri=\"testDatatypes.xsd\"\/>\n+    <systemSuffix systemIdSuffix=\"testXML.xsd\" uri=\"testXML.xsd\"\/>\n+\n+<\/catalog>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/TestCatalog.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\"?>\n+    <!DOCTYPE html PUBLIC \"{{publicId}}\"\n+      \"{{systemId}}\">\n+<html>\n+    <head>\n+        <title>\n+            XHTML 1.0\n+        <\/title>\n+    <\/head>\n+    <body>\n+        <h1>\n+            XHTML 1.0\n+        <\/h1>\n+        <ul>\n+            <li>\n+                xhtml1-transition.dtd\n+            <\/li>\n+        <\/ul>\n+    <\/body>\n+<\/html>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/dtdtest.xml","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<testDatatypes xmlns=\"http:\/\/xmlschema.datatypes\/testSchema\"\n+          xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+          xsi:schemaLocation=\"http:\/\/xmlschema.datatypes\/testSchema testDatatypes.xsd\">\n+\n+    <stringType>Hello, World!<\/stringType>\n+    <integerType>12345<\/integerType>\n+    <decimalType>67.78<\/decimalType>\n+    <booleanType>false<\/booleanType>\n+    <dateType>2024-11-24<\/dateType>\n+<\/testDatatypes>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/testDatatypes.xml","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<xs:schema xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+           targetNamespace=\"http:\/\/xmlschema.datatypes\/testSchema\"\n+           xmlns=\"http:\/\/xmlschema.datatypes\/testSchema\"\n+           elementFormDefault=\"qualified\">\n+\n+    <!-- Import the XMLSchema-datatypes.xsd -->\n+    <xs:import namespace=\"http:\/\/www.w3.org\/2001\/XMLSchema-datatypes\" schemaLocation=\"http:\/\/www.w3.org\/2009\/XMLSchema\/XMLSchema-datatypes.xsd\">\n+      <xs:annotation>\n+        <xs:documentation>\n+          Get access to the type defined in datatypes\n+        <\/xs:documentation>\n+      <\/xs:annotation>\n+    <\/xs:import>\n+\n+    <!-- Define a root element that uses built-in datatypes -->\n+    <xs:element name=\"testDatatypes\">\n+        <xs:complexType>\n+            <xs:sequence>\n+                <xs:element name=\"stringType\" type=\"xs:string\"\/>\n+                <xs:element name=\"integerType\" type=\"xs:integer\"\/>\n+                <xs:element name=\"decimalType\" type=\"xs:decimal\"\/>\n+                <xs:element name=\"booleanType\" type=\"xs:boolean\"\/>\n+                <xs:element name=\"dateType\" type=\"xs:date\"\/>\n+            <\/xs:sequence>\n+        <\/xs:complexType>\n+    <\/xs:element>\n+\n+<\/xs:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/testDatatypes.xsd","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<testXMLXSD xmlns=\"http:\/\/xml.xsd.test\/testXMLXSD\"\n+          xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+          xmlns:xml=\"http:\/\/www.w3.org\/XML\/1998\/namespace\"\n+          xsi:schemaLocation=\"http:\/\/xml.xsd.test\/testXMLXSD testXML.xsd\"\n+          xml:lang=\"en\"\n+          xml:base=\"http:\/\/xml.xsd.test\/base\">\n+\n+    <message>Hello, World!<\/message>\n+<\/testXMLXSD>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/testXML.xml","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<xs:schema xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+           xmlns:xml=\"http:\/\/www.w3.org\/XML\/1998\/namespace\"\n+           targetNamespace=\"http:\/\/xml.xsd.test\/testXMLXSD\"\n+           xmlns=\"http:\/\/xml.xsd.test\/testXMLXSD\"\n+           elementFormDefault=\"qualified\">\n+\n+    <xs:import namespace=\"http:\/\/www.w3.org\/XML\/1998\/namespace\" schemaLocation=\"http:\/\/www.w3.org\/2001\/xml.xsd\">\n+      <xs:annotation>\n+        <xs:documentation>\n+          Get access to the xml: attribute groups for xml:lang\n+          as declared on 'schema' and 'documentation' below\n+        <\/xs:documentation>\n+      <\/xs:annotation>\n+    <\/xs:import>\n+    <!-- Define a root element that uses xml:lang and xml:base attributes -->\n+    <xs:element name=\"testXMLXSD\">\n+        <xs:complexType mixed=\"true\">\n+            <xs:sequence>\n+                <xs:element name=\"message\" type=\"xs:string\"\/>\n+            <\/xs:sequence>\n+            <xs:attribute ref=\"xml:lang\"\/>\n+            <xs:attribute ref=\"xml:base\"\/>\n+        <\/xs:complexType>\n+    <\/xs:element>\n+\n+<\/xs:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/testXML.xsd","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\"?>\n+<xs:schema xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+           xsi:schemaLocation=\"{{targetNamespace}} {{SCHEMA_LOCATION}}\"\n+           xmlns:xs=\"{{targetNamespace}}\">\n+    <xs:element name=\"example\" type=\"xs:string\" \/>\n+<\/xs:schema>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/testXMLSchema.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\"?>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\"\n+    xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http:\/\/www.w3.org\/1999\/xhtml {{SCHEMA_LOCATION}}\"\n+    >\n+    <head>\n+        <title>Test XHTML<\/title>\n+    <\/head>\n+    <frameset cols=\"1*, 1*, 2*\">\n+        <frame src=\"frame1.html\" name=\"left\" \/>\n+        <frame src=\"frame2.html\" name=\"middle\" \/>\n+        <frame src=\"frame3.html\" name=\"right\" \/>\n+    <\/frameset>\n+<\/html>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/xhtml-frameset.xml","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\"?>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\"\n+    xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http:\/\/www.w3.org\/1999\/xhtml {{SCHEMA_LOCATION}}\"\n+    xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\">\n+    <head>\n+        <title>Test XHTML<\/title>\n+    <\/head>\n+    <body>\n+        <p>Test XHTML<\/p>\n+    <\/body>\n+<\/html>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/xhtml.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+<?xml version=\"1.0\"?>\n+<{{rootElement}} xmlns=\"{{targetNamespace}}\"\n+            xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+            xsi:schemaLocation=\"{{targetNamespace}} {{SCHEMA_LOCATION}}\"\n+            xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\">\n+\n+<\/{{rootElement}}>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/jdkcatalog\/xsdtest.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"}]}