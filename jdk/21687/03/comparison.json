{"files":[{"patch":"@@ -220,1 +220,1 @@\n-                this.hashCode = hashCode = TreeHasher.hash(tree, symbol.params());\n+                this.hashCode = hashCode = TreeHasher.hash(types, tree, symbol.params());\n@@ -229,1 +229,1 @@\n-                    && new TreeDiffer(symbol.params(), dedupedLambda.symbol.params()).scan(tree, dedupedLambda.tree);\n+                    && new TreeDiffer(types, symbol.params(), dedupedLambda.symbol.params()).scan(tree, dedupedLambda.tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-                       new TreeDiffer(List.of(commonBinding), List.of(currentBinding))\n+                       new TreeDiffer(types, List.of(commonBinding), List.of(currentBinding))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import com.sun.tools.javac.code.TypeTag;\n+import com.sun.tools.javac.code.Types;\n+import com.sun.tools.javac.jvm.PoolConstant;\n@@ -110,3 +113,2 @@\n-\n-    public TreeDiffer(\n-            Collection<? extends Symbol> symbols, Collection<? extends Symbol> otherSymbols) {\n+    public TreeDiffer(Types types,\n+                      Collection<? extends Symbol> symbols, Collection<? extends Symbol> otherSymbols) {\n@@ -114,0 +116,1 @@\n+        this.types = types;\n@@ -130,0 +133,1 @@\n+    final Types types;\n@@ -200,1 +204,10 @@\n-        result = tree.sym == that.sym;\n+        result = scanSymbol(symbol, otherSymbol);\n+    }\n+\n+    private boolean scanSymbol(Symbol symbol, Symbol otherSymbol) {\n+        if (symbol instanceof PoolConstant.Dynamic dms && otherSymbol instanceof PoolConstant.Dynamic other_dms) {\n+            return dms.bsmKey(types).equals(other_dms.bsmKey(types));\n+        }\n+        else {\n+            return symbol == otherSymbol;\n+        }\n@@ -206,1 +219,3 @@\n-        result = scan(tree.selected, that.selected) && tree.sym == that.sym;\n+\n+        result = scan(tree.selected, that.selected) &&\n+                scanSymbol(tree.sym, that.sym);\n@@ -331,8 +346,1 @@\n-        JCClassDecl that = (JCClassDecl) parameter;\n-        result =\n-                scan(tree.mods, that.mods)\n-                        && tree.name == that.name\n-                        && scan(tree.typarams, that.typarams)\n-                        && scan(tree.extending, that.extending)\n-                        && scan(tree.implementing, that.implementing)\n-                        && scan(tree.defs, that.defs);\n+        result = false;\n@@ -670,1 +678,0 @@\n-                        && tree.name == that.name\n@@ -674,2 +681,8 @@\n-        if (!result) {\n-            return;\n+\n+        if (tree.sym.owner.type.hasTag(TypeTag.CLASS)) {\n+            \/\/ field names are important!\n+            result &= tree.name == that.name;\n+        }\n+\n+        if (result) {\n+            equiv.put(tree.sym, that.sym);\n@@ -677,1 +690,0 @@\n-        equiv.put(tree.sym, that.sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeDiffer.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import com.sun.tools.javac.code.Types;\n+import com.sun.tools.javac.jvm.PoolConstant;\n@@ -31,0 +33,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n@@ -46,0 +49,1 @@\n+    private final Types types;\n@@ -48,1 +52,1 @@\n-    public TreeHasher(Map<Symbol, Integer> symbolHashes) {\n+    public TreeHasher(Types types, Map<Symbol, Integer> symbolHashes) {\n@@ -50,0 +54,1 @@\n+        this.types = types;\n@@ -52,1 +57,1 @@\n-    public static int hash(JCTree tree, Collection<? extends Symbol> symbols) {\n+    public static int hash(Types types, JCTree tree, Collection<? extends Symbol> symbols) {\n@@ -58,1 +63,1 @@\n-        TreeHasher hasher = new TreeHasher(symbolHashes);\n+        TreeHasher hasher = new TreeHasher(types, symbolHashes);\n@@ -90,0 +95,6 @@\n+    @Override\n+    public void visitClassDef(JCClassDecl tree) {\n+        hash(tree.sym);\n+        super.visitClassDef(tree);\n+    }\n+\n@@ -100,1 +111,1 @@\n-        hash(sym);\n+        hashSymbol(sym);\n@@ -105,1 +116,1 @@\n-        hash(tree.sym);\n+        hashSymbol(tree.sym);\n@@ -109,0 +120,8 @@\n+    private void hashSymbol(Symbol sym) {\n+        if (sym instanceof PoolConstant.Dynamic dynamic) {\n+            hash(dynamic.bsmKey(types));\n+        } else {\n+            hash(sym);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -175,0 +175,18 @@\n+\n+        group((Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1,\n+              (Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1);\n+\n+        group((Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; },\n+              (Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; });\n+\n+        group((Function<Object, Integer>) x -> {\n+                    int y1 = -1;\n+                    return y1;\n+                },\n+              (Function<Object, Integer>) x -> {\n+                    int y2 = -1;\n+                    return y2;\n+               });\n+\n+        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n+        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/Deduplication.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import com.sun.tools.javac.api.JavacTaskImpl;\n@@ -54,0 +55,1 @@\n+import com.sun.tools.javac.code.Types;\n@@ -67,0 +69,2 @@\n+import jdk.internal.classfile.impl.BootstrapMethodEntryImpl;\n+\n@@ -106,0 +110,3 @@\n+\n+        Context context = ((JavacTaskImpl)task).getContext();\n+        Types types = Types.instance(context);\n@@ -107,1 +114,1 @@\n-        task.addTaskListener(new TreeDiffHashTaskListener(dedupedLambdas));\n+        task.addTaskListener(new TreeDiffHashTaskListener(dedupedLambdas, types));\n@@ -145,1 +152,3 @@\n-            if (cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\")) {\n+            if (cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\") ||\n+                cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$1C\") ||\n+                cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$2C\")) {\n@@ -150,4 +159,6 @@\n-                bootstrapMethodNames.add(\n-                        ((MethodHandleEntry)b.arguments().get(1))\n-                                .reference()\n-                                .name().stringValue());\n+                if (((BootstrapMethodEntryImpl) b).bootstrapMethod().asSymbol().methodName().equals(\"metafactory\")) {\n+                    bootstrapMethodNames.add(\n+                            ((MethodHandleEntry) b.arguments().get(1))\n+                                    .reference()\n+                                    .name().stringValue());\n+                }\n@@ -252,0 +263,1 @@\n+        private final Types types;\n@@ -253,1 +265,1 @@\n-        public TreeDiffHashTaskListener(Map<JCLambda, JCLambda> dedupedLambdas) {\n+        public TreeDiffHashTaskListener(Map<JCLambda, JCLambda> dedupedLambdas, Types types) {\n@@ -255,0 +267,1 @@\n+            this.types = types;\n@@ -297,12 +310,14 @@\n-                        if (!new TreeDiffer(paramSymbols(lhs), paramSymbols(rhs))\n-                                .scan(lhs.body, rhs.body)) {\n-                            throw new AssertionError(\n-                                    String.format(\n-                                            \"expected lambdas to be equal\\n%s\\n%s\", lhs, rhs));\n-                        }\n-                        if (TreeHasher.hash(lhs, paramSymbols(lhs))\n-                                != TreeHasher.hash(rhs, paramSymbols(rhs))) {\n-                            throw new AssertionError(\n-                                    String.format(\n-                                            \"expected lambdas to hash to the same value\\n%s\\n%s\",\n-                                            lhs, rhs));\n+                        if (rhs != lhs) {\n+                            if (!new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n+                                    .scan(lhs.body, rhs.body)) {\n+                                throw new AssertionError(\n+                                        String.format(\n+                                                \"expected lambdas to be equal\\n%s\\n%s\", lhs, rhs));\n+                            }\n+                            if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                    != TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n+                                throw new AssertionError(\n+                                        String.format(\n+                                                \"expected lambdas to hash to the same value\\n%s\\n%s\",\n+                                                lhs, rhs));\n+                            }\n@@ -322,1 +337,1 @@\n-                            if (new TreeDiffer(paramSymbols(lhs), paramSymbols(rhs))\n+                            if (new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n@@ -329,2 +344,2 @@\n-                            if (TreeHasher.hash(lhs, paramSymbols(lhs))\n-                                    == TreeHasher.hash(rhs, paramSymbols(rhs))) {\n+                            if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                    == TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":37,"deletions":22,"binary":false,"changes":59,"status":"modified"}]}