{"files":[{"patch":"@@ -204,1 +204,1 @@\n-        result = scan(symbol, otherSymbol);\n+        result = scanSymbol(symbol, otherSymbol);\n@@ -207,1 +207,1 @@\n-    private boolean scan(Symbol symbol, Symbol otherSymbol) {\n+    private boolean scanSymbol(Symbol symbol, Symbol otherSymbol) {\n@@ -219,1 +219,0 @@\n-        result = scan(tree.selected, that.selected);\n@@ -221,5 +220,2 @@\n-        Symbol symbol = tree.sym;\n-        Symbol otherSymbol = that.sym;\n-\n-        if (result)\n-            result = scan(symbol, otherSymbol);\n+        result = scan(tree.selected, that.selected) &&\n+                scanSymbol(tree.sym, that.sym);\n@@ -693,1 +689,2 @@\n-        if (!tree.sym.owner.type.hasTag(TypeTag.METHOD) && result) {\n+        if (tree.sym.owner.type.hasTag(TypeTag.CLASS)) {\n+            \/\/ field names are important!\n@@ -697,2 +694,2 @@\n-        if (!result) {\n-            return;\n+        if (result) {\n+            equiv.put(tree.sym, that.sym);\n@@ -700,1 +697,0 @@\n-        equiv.put(tree.sym, that.sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeDiffer.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -104,5 +104,1 @@\n-        if (sym instanceof PoolConstant.Dynamic dynamic) {\n-            hash(dynamic.bsmKey(types));\n-        } else {\n-            hash(sym);\n-        }\n+        hashSymbol(sym);\n@@ -113,1 +109,5 @@\n-        Symbol sym = tree.sym;\n+        hashSymbol(tree.sym);\n+        super.visitSelect(tree);\n+    }\n+\n+    private void hashSymbol(Symbol sym) {\n@@ -119,1 +119,0 @@\n-        super.visitSelect(tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}