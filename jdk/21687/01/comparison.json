{"files":[{"patch":"@@ -220,1 +220,1 @@\n-                this.hashCode = hashCode = TreeHasher.hash(tree, symbol.params());\n+                this.hashCode = hashCode = TreeHasher.hash(types, tree, symbol.params());\n@@ -229,1 +229,1 @@\n-                    && new TreeDiffer(symbol.params(), dedupedLambda.symbol.params()).scan(tree, dedupedLambda.tree);\n+                    && new TreeDiffer(types, symbol.params(), dedupedLambda.symbol.params()).scan(tree, dedupedLambda.tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-                       new TreeDiffer(List.of(commonBinding), List.of(currentBinding))\n+                       new TreeDiffer(types, List.of(commonBinding), List.of(currentBinding))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import com.sun.tools.javac.code.TypeTag;\n+import com.sun.tools.javac.code.Types;\n+import com.sun.tools.javac.jvm.PoolConstant;\n@@ -110,3 +113,2 @@\n-\n-    public TreeDiffer(\n-            Collection<? extends Symbol> symbols, Collection<? extends Symbol> otherSymbols) {\n+    public TreeDiffer(Types types,\n+                      Collection<? extends Symbol> symbols, Collection<? extends Symbol> otherSymbols) {\n@@ -114,0 +116,1 @@\n+        this.types = types;\n@@ -130,0 +133,1 @@\n+    final Types types;\n@@ -200,1 +204,10 @@\n-        result = tree.sym == that.sym;\n+        result = scan(symbol, otherSymbol);\n+    }\n+\n+    private boolean scan(Symbol symbol, Symbol otherSymbol) {\n+        if (symbol instanceof PoolConstant.Dynamic dms && otherSymbol instanceof PoolConstant.Dynamic other_dms) {\n+            return dms.bsmKey(types).equals(other_dms.bsmKey(types));\n+        }\n+        else {\n+            return symbol == otherSymbol;\n+        }\n@@ -206,1 +219,7 @@\n-        result = scan(tree.selected, that.selected) && tree.sym == that.sym;\n+        result = scan(tree.selected, that.selected);\n+\n+        Symbol symbol = tree.sym;\n+        Symbol otherSymbol = that.sym;\n+\n+        if (result)\n+            result = scan(symbol, otherSymbol);\n@@ -670,1 +689,0 @@\n-                        && tree.name == that.name\n@@ -674,0 +692,5 @@\n+\n+        if (!tree.sym.owner.type.hasTag(TypeTag.METHOD) && result) {\n+            result &= tree.name == that.name;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeDiffer.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import com.sun.tools.javac.code.Types;\n+import com.sun.tools.javac.jvm.PoolConstant;\n@@ -46,0 +48,1 @@\n+    private final Types types;\n@@ -48,1 +51,1 @@\n-    public TreeHasher(Map<Symbol, Integer> symbolHashes) {\n+    public TreeHasher(Types types, Map<Symbol, Integer> symbolHashes) {\n@@ -50,0 +53,1 @@\n+        this.types = types;\n@@ -52,1 +56,1 @@\n-    public static int hash(JCTree tree, Collection<? extends Symbol> symbols) {\n+    public static int hash(Types types, JCTree tree, Collection<? extends Symbol> symbols) {\n@@ -58,1 +62,1 @@\n-        TreeHasher hasher = new TreeHasher(symbolHashes);\n+        TreeHasher hasher = new TreeHasher(types, symbolHashes);\n@@ -100,1 +104,5 @@\n-        hash(sym);\n+        if (sym instanceof PoolConstant.Dynamic dynamic) {\n+            hash(dynamic.bsmKey(types));\n+        } else {\n+            hash(sym);\n+        }\n@@ -105,1 +113,6 @@\n-        hash(tree.sym);\n+        Symbol sym = tree.sym;\n+        if (sym instanceof PoolConstant.Dynamic dynamic) {\n+            hash(dynamic.bsmKey(types));\n+        } else {\n+            hash(sym);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -175,0 +175,15 @@\n+\n+        group((Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1,\n+              (Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1);\n+\n+        group((Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; },\n+              (Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; });\n+\n+        group((Function<Object, Integer>) x -> {\n+                    int y1 = -1;\n+                    return y1;\n+                },\n+              (Function<Object, Integer>) x -> {\n+                    int y2 = -1;\n+                    return y2;\n+               });\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/Deduplication.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import com.sun.tools.javac.api.JavacTaskImpl;\n@@ -54,0 +55,1 @@\n+import com.sun.tools.javac.code.Types;\n@@ -67,0 +69,2 @@\n+import jdk.internal.classfile.impl.BootstrapMethodEntryImpl;\n+\n@@ -106,0 +110,3 @@\n+\n+        Context context = ((JavacTaskImpl)task).getContext();\n+        Types types = Types.instance(context);\n@@ -107,1 +114,1 @@\n-        task.addTaskListener(new TreeDiffHashTaskListener(dedupedLambdas));\n+        task.addTaskListener(new TreeDiffHashTaskListener(dedupedLambdas, types));\n@@ -150,4 +157,6 @@\n-                bootstrapMethodNames.add(\n-                        ((MethodHandleEntry)b.arguments().get(1))\n-                                .reference()\n-                                .name().stringValue());\n+                if (((BootstrapMethodEntryImpl) b).bootstrapMethod().asSymbol().methodName().equals(\"metafactory\")) {\n+                    bootstrapMethodNames.add(\n+                            ((MethodHandleEntry) b.arguments().get(1))\n+                                    .reference()\n+                                    .name().stringValue());\n+                }\n@@ -252,0 +261,1 @@\n+        private final Types types;\n@@ -253,1 +263,1 @@\n-        public TreeDiffHashTaskListener(Map<JCLambda, JCLambda> dedupedLambdas) {\n+        public TreeDiffHashTaskListener(Map<JCLambda, JCLambda> dedupedLambdas, Types types) {\n@@ -255,0 +265,1 @@\n+            this.types = types;\n@@ -297,1 +308,1 @@\n-                        if (!new TreeDiffer(paramSymbols(lhs), paramSymbols(rhs))\n+                        if (!new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n@@ -303,2 +314,2 @@\n-                        if (TreeHasher.hash(lhs, paramSymbols(lhs))\n-                                != TreeHasher.hash(rhs, paramSymbols(rhs))) {\n+                        if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                != TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n@@ -322,1 +333,1 @@\n-                            if (new TreeDiffer(paramSymbols(lhs), paramSymbols(rhs))\n+                            if (new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n@@ -329,2 +340,2 @@\n-                            if (TreeHasher.hash(lhs, paramSymbols(lhs))\n-                                    == TreeHasher.hash(rhs, paramSymbols(rhs))) {\n+                            if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                    == TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"}]}