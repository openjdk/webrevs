{"files":[{"patch":"@@ -346,8 +346,1 @@\n-        JCClassDecl that = (JCClassDecl) parameter;\n-        result =\n-                scan(tree.mods, that.mods)\n-                        && tree.name == that.name\n-                        && scan(tree.typarams, that.typarams)\n-                        && scan(tree.extending, that.extending)\n-                        && scan(tree.implementing, that.implementing)\n-                        && scan(tree.defs, that.defs);\n+        result = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeDiffer.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n@@ -94,0 +95,6 @@\n+    @Override\n+    public void visitClassDef(JCClassDecl tree) {\n+        hash(tree.sym);\n+        super.visitClassDef(tree);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -190,0 +190,3 @@\n+\n+        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n+        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/Deduplication.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,1 +152,3 @@\n-            if (cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\")) {\n+            if (cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$R\") ||\n+                cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$1C\") ||\n+                cm.thisClass().asInternalName().equals(\"com\/sun\/tools\/javac\/comp\/Deduplication$2C\")) {\n@@ -308,12 +310,14 @@\n-                        if (!new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n-                                .scan(lhs.body, rhs.body)) {\n-                            throw new AssertionError(\n-                                    String.format(\n-                                            \"expected lambdas to be equal\\n%s\\n%s\", lhs, rhs));\n-                        }\n-                        if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n-                                != TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n-                            throw new AssertionError(\n-                                    String.format(\n-                                            \"expected lambdas to hash to the same value\\n%s\\n%s\",\n-                                            lhs, rhs));\n+                        if (rhs != lhs) {\n+                            if (!new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n+                                    .scan(lhs.body, rhs.body)) {\n+                                throw new AssertionError(\n+                                        String.format(\n+                                                \"expected lambdas to be equal\\n%s\\n%s\", lhs, rhs));\n+                            }\n+                            if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                    != TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n+                                throw new AssertionError(\n+                                        String.format(\n+                                                \"expected lambdas to hash to the same value\\n%s\\n%s\",\n+                                                lhs, rhs));\n+                            }\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"}]}