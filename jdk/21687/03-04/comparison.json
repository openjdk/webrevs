{"files":[{"patch":"@@ -98,1 +98,0 @@\n-        super.visitClassDef(tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+    void groupEquals(Object... xs) {}\n+    void groupNotEquals(Object... xs) {}\n@@ -36,1 +38,1 @@\n-        group(\n+        groupEquals(\n@@ -41,1 +43,1 @@\n-        group(\n+        groupEquals(\n@@ -46,1 +48,1 @@\n-        group(\n+        groupEquals(\n@@ -51,1 +53,1 @@\n-        group(\n+        groupEquals(\n@@ -56,1 +58,1 @@\n-        group(\n+        groupEquals(\n@@ -61,1 +63,1 @@\n-        group(\n+        groupEquals(\n@@ -66,2 +68,2 @@\n-        group((Function<String, Integer>) x -> x.hashCode());\n-        group((Function<Object, Integer>) x -> x.hashCode());\n+        groupEquals((Function<String, Integer>) x -> x.hashCode());\n+        groupEquals((Function<Object, Integer>) x -> x.hashCode());\n@@ -71,1 +73,1 @@\n-            group((Supplier<Integer>) () -> x + 1);\n+            groupEquals((Supplier<Integer>) () -> x + 1);\n@@ -75,1 +77,1 @@\n-            group((Supplier<Integer>) () -> x + 1);\n+            groupEquals((Supplier<Integer>) () -> x + 1);\n@@ -77,1 +79,1 @@\n-        group(\n+        groupEquals(\n@@ -88,1 +90,1 @@\n-        group(\n+        groupEquals(\n@@ -92,1 +94,1 @@\n-        group((Function<Integer, Integer>) x -> x + 1, (Function<Integer, Integer>) y -> y + 1);\n+        groupEquals((Function<Integer, Integer>) x -> x + 1, (Function<Integer, Integer>) y -> y + 1);\n@@ -94,1 +96,1 @@\n-        group((Consumer<Integer>) x -> this.f(), (Consumer<Integer>) x -> this.f());\n+        groupEquals((Consumer<Integer>) x -> this.f(), (Consumer<Integer>) x -> this.f());\n@@ -96,1 +98,1 @@\n-        group((Consumer<Integer>) y -> this.g());\n+        groupEquals((Consumer<Integer>) y -> this.g());\n@@ -98,1 +100,1 @@\n-        group((Consumer<Integer>) x -> f(), (Consumer<Integer>) x -> f());\n+        groupEquals((Consumer<Integer>) x -> f(), (Consumer<Integer>) x -> f());\n@@ -100,1 +102,1 @@\n-        group((Consumer<Integer>) y -> g());\n+        groupEquals((Consumer<Integer>) y -> g());\n@@ -102,1 +104,1 @@\n-        group((Function<Integer, Integer>) x -> this.i, (Function<Integer, Integer>) x -> this.i);\n+        groupEquals((Function<Integer, Integer>) x -> this.i, (Function<Integer, Integer>) x -> this.i);\n@@ -104,1 +106,1 @@\n-        group((Function<Integer, Integer>) y -> this.j);\n+        groupEquals((Function<Integer, Integer>) y -> this.j);\n@@ -106,1 +108,1 @@\n-        group((Function<Integer, Integer>) x -> i, (Function<Integer, Integer>) x -> i);\n+        groupEquals((Function<Integer, Integer>) x -> i, (Function<Integer, Integer>) x -> i);\n@@ -108,1 +110,1 @@\n-        group((Function<Integer, Integer>) y -> j);\n+        groupEquals((Function<Integer, Integer>) y -> j);\n@@ -110,1 +112,1 @@\n-        group(\n+        groupEquals(\n@@ -126,1 +128,1 @@\n-        group(\n+        groupEquals(\n@@ -138,1 +140,1 @@\n-        group(\n+        groupEquals(\n@@ -144,1 +146,1 @@\n-        group(\n+        groupEquals(\n@@ -157,4 +159,4 @@\n-                group((Function<Integer, Integer>) x -> this.i);\n-                group((Consumer<Integer>) x -> this.f());\n-                group((Function<Integer, Integer>) x -> Deduplication.this.i);\n-                group((Consumer<Integer>) x -> Deduplication.this.f());\n+                groupEquals((Function<Integer, Integer>) x -> this.i);\n+                groupEquals((Consumer<Integer>) x -> this.f());\n+                groupEquals((Function<Integer, Integer>) x -> Deduplication.this.i);\n+                groupEquals((Consumer<Integer>) x -> Deduplication.this.f());\n@@ -164,1 +166,1 @@\n-        group((Function<Integer, Integer>) x -> switch (x) { default: yield x; },\n+        groupEquals((Function<Integer, Integer>) x -> switch (x) { default: yield x; },\n@@ -167,1 +169,1 @@\n-        group((Function<Object, Integer>) x -> x instanceof Integer i ? i : -1,\n+        groupEquals((Function<Object, Integer>) x -> x instanceof Integer i ? i : -1,\n@@ -170,1 +172,1 @@\n-        group((Function<Object, Integer>) x -> x instanceof R(var i1, var i2) ? i1 : -1,\n+        groupEquals((Function<Object, Integer>) x -> x instanceof R(var i1, var i2) ? i1 : -1,\n@@ -173,1 +175,1 @@\n-        group((Function<Object, Integer>) x -> x instanceof R(Integer i1, int i2) ? i2 : -1,\n+        groupEquals((Function<Object, Integer>) x -> x instanceof R(Integer i1, int i2) ? i2 : -1,\n@@ -176,1 +178,1 @@\n-        group((Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1,\n+        groupEquals((Function<Object, Integer>) x -> x instanceof int i2 ? i2 : -1,\n@@ -179,1 +181,1 @@\n-        group((Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; },\n+        groupEquals((Function<Object, Integer>) x -> switch (x) { case String s -> s.length(); default -> -1; },\n@@ -182,1 +184,1 @@\n-        group((Function<Object, Integer>) x -> {\n+        groupEquals((Function<Object, Integer>) x -> {\n@@ -191,2 +193,1 @@\n-        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n-        group((Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n+        groupNotEquals((Function<Object, Integer>) x -> {class C {} new C(); return 42; }, (Function<Object, Integer>) x -> {class C {} new C(); return 42; });\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/Deduplication.java","additions":39,"deletions":38,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -278,1 +278,3 @@\n-            List<List<JCLambda>> lambdaGroups = new ArrayList<>();\n+            List<List<JCLambda>> lambdaEqualsGroups = new ArrayList<>();\n+            List<List<JCLambda>> lambdaNotEqualsGroups = new ArrayList<>();\n+\n@@ -282,12 +284,4 @@\n-                    if (tree.getMethodSelect().getTag() == Tag.IDENT\n-                            && ((JCIdent) tree.getMethodSelect())\n-                                    .getName()\n-                                    .contentEquals(\"group\")) {\n-                        List<JCLambda> xs = new ArrayList<>();\n-                        for (JCExpression arg : tree.getArguments()) {\n-                            if (arg instanceof JCTypeCast) {\n-                                arg = ((JCTypeCast) arg).getExpression();\n-                            }\n-                            xs.add((JCLambda) arg);\n-                        }\n-                        lambdaGroups.add(xs);\n+                    if (isMethodWithName(tree, \"groupEquals\")) {\n+                        addToGroup(tree, lambdaEqualsGroups);\n+                    } else if (isMethodWithName(tree, \"groupNotEquals\")) {\n+                        addToGroup(tree, lambdaNotEqualsGroups);\n@@ -298,3 +292,3 @@\n-            for (int i = 0; i < lambdaGroups.size(); i++) {\n-                List<JCLambda> curr = lambdaGroups.get(i);\n-                JCLambda first = null;\n+\n+            for (int i = 0; i < lambdaEqualsGroups.size(); i++) {\n+                List<JCLambda> curr = lambdaEqualsGroups.get(i);\n@@ -303,0 +297,1 @@\n+                JCLambda first = null;\n@@ -331,20 +326,34 @@\n-                for (int j = 0; j < lambdaGroups.size(); j++) {\n-                    if (i == j) {\n-                        continue;\n-                    }\n-                    for (JCLambda lhs : curr) {\n-                        for (JCLambda rhs : lambdaGroups.get(j)) {\n-                            if (new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n-                                    .scan(lhs.body, rhs.body)) {\n-                                throw new AssertionError(\n-                                        String.format(\n-                                                \"expected lambdas to not be equal\\n%s\\n%s\",\n-                                                lhs, rhs));\n-                            }\n-                            if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n-                                    == TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n-                                throw new AssertionError(\n-                                        String.format(\n-                                                \"expected lambdas to hash to different values\\n%s\\n%s\",\n-                                                lhs, rhs));\n-                            }\n+                assertNotEqualsWithinGroup(lambdaEqualsGroups, i, curr, types);\n+            }\n+            lambdaEqualsGroups.clear();\n+\n+            \/\/ Assert that no lambdas in a not-equals group are equal to any lambdas inside that group,\n+            \/\/ or hash to the same value as lambda inside the group.\n+            for (int i = 0; i < lambdaNotEqualsGroups.size(); i++) {\n+                List<JCLambda> curr = lambdaNotEqualsGroups.get(i);\n+\n+                assertNotEqualsWithinGroup(lambdaNotEqualsGroups, i, curr, types);\n+            }\n+            lambdaNotEqualsGroups.clear();\n+        }\n+\n+        private void assertNotEqualsWithinGroup(List<List<JCLambda>> lambdaNotEqualsGroups, int i, List<JCLambda> curr, Types types) {\n+            for (int j = 0; j < lambdaNotEqualsGroups.size(); j++) {\n+                if (i == j) {\n+                    continue;\n+                }\n+                for (JCLambda lhs : curr) {\n+                    for (JCLambda rhs : lambdaNotEqualsGroups.get(j)) {\n+                        if (new TreeDiffer(types, paramSymbols(lhs), paramSymbols(rhs))\n+                                .scan(lhs.body, rhs.body)) {\n+                            throw new AssertionError(\n+                                    String.format(\n+                                            \"expected lambdas to not be equal\\n%s\\n%s\",\n+                                            lhs, rhs));\n+                        }\n+                        if (TreeHasher.hash(types, lhs, paramSymbols(lhs))\n+                                == TreeHasher.hash(types, rhs, paramSymbols(rhs))) {\n+                            throw new AssertionError(\n+                                    String.format(\n+                                            \"expected lambdas to hash to different values\\n%s\\n%s\",\n+                                            lhs, rhs));\n@@ -355,1 +364,17 @@\n-            lambdaGroups.clear();\n+        }\n+\n+        private boolean isMethodWithName(JCMethodInvocation tree, String markerMethodName) {\n+            return tree.getMethodSelect().getTag() == Tag.IDENT && ((JCIdent) tree.getMethodSelect())\n+                    .getName()\n+                    .contentEquals(markerMethodName);\n+        }\n+\n+        private void addToGroup(JCMethodInvocation tree, List<List<JCLambda>> groupToAdd) {\n+            List<JCLambda> xs = new ArrayList<>();\n+            for (JCExpression arg : tree.getArguments()) {\n+                if (arg instanceof JCTypeCast) {\n+                    arg = ((JCTypeCast) arg).getExpression();\n+                }\n+                xs.add((JCLambda) arg);\n+            }\n+            groupToAdd.add(xs);\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":62,"deletions":37,"binary":false,"changes":99,"status":"modified"}]}