{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -310,3 +310,3 @@\n-        String requiredPrefix = identifier;\n-        return computeSuggestions(codeWrap, cursor, anchor).stream()\n-                .filter(s -> s.filteringText.startsWith(requiredPrefix) && !s.continuation().equals(REPL_DOESNOTMATTER_CLASS_NAME))\n+        String[] requiredPrefix = new String[] {identifier};\n+        return computeSuggestions(codeWrap, cursor, requiredPrefix, anchor).stream()\n+                .filter(s -> s.continuation().startsWith(requiredPrefix[0]) && !s.continuation().equals(REPL_DOESNOTMATTER_CLASS_NAME))\n@@ -314,1 +314,0 @@\n-                .map(s -> (Suggestion) s)\n@@ -318,1 +317,1 @@\n-    private List<SuggestionImpl> computeSuggestions(OuterWrap code, int cursor, int[] anchor) {\n+    private List<Suggestion> computeSuggestions(OuterWrap code, int cursor, String[] requiredPrefix, int[] anchor) {\n@@ -322,1 +321,1 @@\n-            List<SuggestionImpl> result = new ArrayList<>();\n+            List<Suggestion> result = new ArrayList<>();\n@@ -411,1 +410,0 @@\n-                            String fullCode = code.wrapped();\n@@ -413,2 +411,3 @@\n-                            int selectEnd   = (int) sp.getEndPosition(topLevel, tp.getLeaf());\n-                            String qualifiedPrefix = fullCode.substring(selectStart, selectEnd);\n+                            String qualifiedPrefix = it.getQualifiedIdentifier().getKind() == Kind.MEMBER_SELECT\n+                                ? ((MemberSelectTree) it.getQualifiedIdentifier()).getExpression().toString() + \".\"\n+                                : \"\";\n@@ -417,0 +416,5 @@\n+\n+                            requiredPrefix[0] = qualifiedPrefix + requiredPrefix[0];\n+                            anchor[0] = selectStart;\n+\n+                            return result;\n@@ -494,2 +498,1 @@\n-                                \/\/check source level(!)\n-                                result.add(new SuggestionImpl(\"module\", false));\n+                                result.add(new SuggestionImpl(\"module \", false));\n@@ -1010,4 +1013,1 @@\n-    private void addElements(Iterable<? extends Element> elements,\n-                             Predicate<Element> accept,\n-                             Predicate<Element> smart,\n-                             List<SuggestionImpl> result) {\n+    private void addElements(Iterable<? extends Element> elements, Predicate<Element> accept, Predicate<Element> smart, List<Suggestion> result) {\n@@ -1016,6 +1016,1 @@\n-\n-    private void addElements(Iterable<? extends Element> elements,\n-                             Predicate<Element> accept,\n-                             Predicate<Element> smart,\n-                             Function<Boolean, String> paren,\n-                             List<SuggestionImpl> result) {\n+    private void addElements(Iterable<? extends Element> elements, Predicate<Element> accept, Predicate<Element> smart, Function<Boolean, String> paren, List<Suggestion> result) {\n@@ -1055,1 +1050,1 @@\n-                                   List<SuggestionImpl> result) {\n+                                   List<Suggestion> result) {\n@@ -1061,1 +1056,0 @@\n-                                          me.getSimpleName().toString(),\n@@ -1436,4 +1430,1 @@\n-    private void addScopeElements(AnalyzeTask at, Scope scope,\n-                                  Function<Element, Iterable<? extends Element>> elementConvertor,\n-                                  Predicate<Element> filter, Predicate<Element> smartFilter,\n-                                  List<SuggestionImpl> result) {\n+    private void addScopeElements(AnalyzeTask at, Scope scope, Function<Element, Iterable<? extends Element>> elementConvertor, Predicate<Element> filter, Predicate<Element> smartFilter, List<Suggestion> result) {\n@@ -2220,1 +2211,0 @@\n-        private final String filteringText;\n@@ -2230,12 +2220,0 @@\n-            this(continuation, continuation, matchesType);\n-        }\n-\n-        \/**\n-         * Create a {@code Suggestion} instance.\n-         *\n-         * @param continuation a candidate continuation of the user's input\n-         * @param filteringText a filtering prefix\n-         * @param matchesType does the candidate match the target type\n-         *\/\n-        public SuggestionImpl(String continuation, String filteringText,\n-                              boolean matchesType) {\n@@ -2243,1 +2221,0 @@\n-            this.filteringText = filteringText;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":19,"deletions":42,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -830,1 +830,1 @@\n-        assertCompletionIncludesExcludes(\"import |\", Set.of(\"module\"), Set.of());\n+        assertCompletionIncludesExcludes(\"import |\", Set.of(\"module \"), Set.of());\n@@ -834,0 +834,2 @@\n+        assertCompletionIncludesExcludes(\"import module ja|\", Set.of(\"java.base\"), Set.of(\"jdk.compiler\"));\n+        assertCompletion(\"import module java\/*c*\/.\/*c*\/ba|\", \"java.base\");\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}