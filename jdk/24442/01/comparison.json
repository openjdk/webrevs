{"files":[{"patch":"@@ -86,0 +86,1 @@\n+import javax.lang.model.element.ModuleElement;\n@@ -253,0 +254,4 @@\n+        return guessKind(code, null);\n+    }\n+\n+    private Tree.Kind guessKind(String code, boolean[] moduleImport) {\n@@ -260,0 +265,3 @@\n+            if (moduleImport != null && unitTree.getKind() == Kind.IMPORT) {\n+                moduleImport[0] = ((ImportTree) unitTree).isModule();\n+            }\n@@ -295,2 +303,4 @@\n-        OuterWrap codeWrap = switch (guessKind(code)) {\n-            case IMPORT -> proc.outerMap.wrapImport(Wrap.simpleWrap(code + \"any.any\"), null);\n+        boolean[] moduleImport = new boolean[1];\n+        OuterWrap codeWrap = switch (guessKind(code, moduleImport)) {\n+            case IMPORT -> moduleImport[0] ? proc.outerMap.wrapImport(Wrap.simpleWrap(code), null)\n+                                           : proc.outerMap.wrapImport(Wrap.simpleWrap(code + \"any.any\"), null);\n@@ -302,1 +312,1 @@\n-                .filter(s -> s.continuation().startsWith(requiredPrefix) && !s.continuation().equals(REPL_DOESNOTMATTER_CLASS_NAME))\n+                .filter(s -> s.filteringText.startsWith(requiredPrefix) && !s.continuation().equals(REPL_DOESNOTMATTER_CLASS_NAME))\n@@ -304,0 +314,1 @@\n+                .map(s -> (Suggestion) s)\n@@ -307,1 +318,1 @@\n-    private List<Suggestion> computeSuggestions(OuterWrap code, int cursor, int[] anchor) {\n+    private List<SuggestionImpl> computeSuggestions(OuterWrap code, int cursor, int[] anchor) {\n@@ -311,1 +322,1 @@\n-            List<Suggestion> result = new ArrayList<>();\n+            List<SuggestionImpl> result = new ArrayList<>();\n@@ -398,0 +409,10 @@\n+\n+                        if (it != null && it.isModule()) {\n+                            String fullCode = code.wrapped();\n+                            int selectStart = (int) sp.getStartPosition(topLevel, tp.getLeaf());\n+                            int selectEnd   = (int) sp.getEndPosition(topLevel, tp.getLeaf());\n+                            String qualifiedPrefix = fullCode.substring(selectStart, selectEnd);\n+\n+                            addModuleElements(at, qualifiedPrefix, result);\n+                        }\n+\n@@ -457,12 +478,19 @@\n-                            \/\/ the context of the identifier is an import, look for\n-                            \/\/ package names that start with the identifier.\n-                            \/\/ If and when Java allows imports from the default\n-                            \/\/ package to the default package which would allow\n-                            \/\/ JShell to change to use the default package, and that\n-                            \/\/ change is done, then this should use some variation\n-                            \/\/ of membersOf(at, at.getElements().getPackageElement(\"\").asType(), false)\n-                            addElements(listPackages(at, \"\"),\n-                                    it.isStatic()\n-                                            ? STATIC_ONLY.and(accessibility)\n-                                            : accessibility,\n-                                    smartFilter, result);\n+                            if (it.isModule()) {\n+                                addModuleElements(at, \"\", result);\n+                            } else {\n+                                \/\/ the context of the identifier is an import, look for\n+                                \/\/ package names that start with the identifier.\n+                                \/\/ If and when Java allows imports from the default\n+                                \/\/ package to the default package which would allow\n+                                \/\/ JShell to change to use the default package, and that\n+                                \/\/ change is done, then this should use some variation\n+                                \/\/ of membersOf(at, at.getElements().getPackageElement(\"\").asType(), false)\n+                                addElements(listPackages(at, \"\"),\n+                                        it.isStatic()\n+                                                ? STATIC_ONLY.and(accessibility)\n+                                                : accessibility,\n+                                        smartFilter, result);\n+\n+                                \/\/check source level(!)\n+                                result.add(new SuggestionImpl(\"module\", false));\n+                            }\n@@ -982,1 +1010,4 @@\n-    private void addElements(Iterable<? extends Element> elements, Predicate<Element> accept, Predicate<Element> smart, List<Suggestion> result) {\n+    private void addElements(Iterable<? extends Element> elements,\n+                             Predicate<Element> accept,\n+                             Predicate<Element> smart,\n+                             List<SuggestionImpl> result) {\n@@ -985,1 +1016,6 @@\n-    private void addElements(Iterable<? extends Element> elements, Predicate<Element> accept, Predicate<Element> smart, Function<Boolean, String> paren, List<Suggestion> result) {\n+\n+    private void addElements(Iterable<? extends Element> elements,\n+                             Predicate<Element> accept,\n+                             Predicate<Element> smart,\n+                             Function<Boolean, String> paren,\n+                             List<SuggestionImpl> result) {\n@@ -1017,0 +1053,13 @@\n+    private void addModuleElements(AnalyzeTask at,\n+                                   String prefix,\n+                                   List<SuggestionImpl> result) {\n+        for (ModuleElement me : at.getElements().getAllModuleElements()) {\n+            if (!me.getQualifiedName().toString().startsWith(prefix)) {\n+                continue;\n+            }\n+            result.add(new SuggestionImpl(me.getQualifiedName().toString(),\n+                                          me.getSimpleName().toString(),\n+                                          false));\n+        }\n+    }\n+\n@@ -1387,1 +1436,4 @@\n-    private void addScopeElements(AnalyzeTask at, Scope scope, Function<Element, Iterable<? extends Element>> elementConvertor, Predicate<Element> filter, Predicate<Element> smartFilter, List<Suggestion> result) {\n+    private void addScopeElements(AnalyzeTask at, Scope scope,\n+                                  Function<Element, Iterable<? extends Element>> elementConvertor,\n+                                  Predicate<Element> filter, Predicate<Element> smartFilter,\n+                                  List<SuggestionImpl> result) {\n@@ -2168,0 +2220,1 @@\n+        private final String filteringText;\n@@ -2177,0 +2230,12 @@\n+            this(continuation, continuation, matchesType);\n+        }\n+\n+        \/**\n+         * Create a {@code Suggestion} instance.\n+         *\n+         * @param continuation a candidate continuation of the user's input\n+         * @param filteringText a filtering prefix\n+         * @param matchesType does the candidate match the target type\n+         *\/\n+        public SuggestionImpl(String continuation, String filteringText,\n+                              boolean matchesType) {\n@@ -2178,0 +2243,1 @@\n+            this.filteringText = filteringText;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":86,"deletions":20,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789 8314662 8326333 8326333\n+ * @bug 8131025 8141092 8153761 8145263 8131019 8175886 8176184 8176241 8176110 8177466 8197439 8221759 8234896 8240658 8278039 8286206 8296789 8314662 8326333 8326333 8353581\n@@ -827,0 +827,8 @@\n+\n+    \/\/JDK-8353581: completion for module imports:\n+    public void testModuleImport() {\n+        assertCompletionIncludesExcludes(\"import |\", Set.of(\"module\"), Set.of());\n+        assertCompletionIncludesExcludes(\"import module |\", Set.of(\"java.base\"), Set.of(\"java.\", \"module\"));\n+        assertCompletionIncludesExcludes(\"import module java.|\", Set.of(\"java.base\"), Set.of());\n+        assertCompletion(\"import module java.ba|\", \"java.base\");\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}