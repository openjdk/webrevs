{"files":[{"patch":"@@ -199,4 +199,2 @@\n-  template <typename CMP, typename RET, typename ARG1, typename ARG2, typename = void>\n-  struct has_cmp_type : std::false_type {};\n-  template <typename CMP, typename RET, typename ARG1, typename ARG2>\n-  struct has_cmp_type<CMP, RET, ARG1, ARG2, decltype(static_cast<RET(*)(ARG1, ARG2)>(CMP::cmp), void())> : std::true_type {};\n+  static constexpr bool HasKeyComparator =\n+      std::is_invocable_r_v<RBTreeOrdering, decltype(&COMPARATOR::cmp), K, K>;\n@@ -204,5 +202,2 @@\n-  template <typename CMP>\n-  static constexpr bool HasKeyComparator = has_cmp_type<CMP, RBTreeOrdering, K, K>::value;\n-\n-  template <typename CMP>\n-  static constexpr bool HasNodeComparator = has_cmp_type<CMP, RBTreeOrdering, K, const NodeType*>::value;\n+  static constexpr bool HasNodeComparator =\n+      std::is_invocable_r_v<RBTreeOrdering, decltype(&COMPARATOR::cmp), K, const NodeType*>;\n@@ -210,4 +205,4 @@\n-  template <typename CMP, typename RET, typename ARG1, typename ARG2, typename = void>\n-  struct has_less_than_type : std::false_type {};\n-  template <typename CMP, typename RET, typename ARG1, typename ARG2>\n-  struct has_less_than_type<CMP, RET, ARG1, ARG2, decltype(static_cast<RET(*)(ARG1, ARG2)>(CMP::less), void())> : std::true_type {};\n+  \/\/ Due to a bug in older GCC versions with static templated constexpr data members (see GCC PR 71954),\n+  \/\/ we have to express this trait through a struct instead of a constexpr variable directly.\n+  template<typename, typename = void>\n+  struct HasNodeVerifierImpl : std::false_type {};\n@@ -216,1 +211,2 @@\n-  static constexpr bool HasNodeVerifier = has_less_than_type<CMP, bool, const NodeType*, const NodeType*>::value;\n+  struct HasNodeVerifierImpl<CMP, std::void_t<decltype(&CMP::less_than)>>\n+      : std::bool_constant<std::is_invocable_r_v<bool, decltype(&CMP::less_than), const NodeType*, const NodeType*>> {};\n@@ -218,4 +214,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(HasKeyComparator<CMP> && !HasNodeComparator<CMP>)>\n-  RBTreeOrdering cmp(const K& a, const NodeType* b) const {\n-    return COMPARATOR::cmp(a, b->key());\n-  }\n+  static constexpr bool HasNodeVerifier = HasNodeVerifierImpl<COMPARATOR>::value;\n@@ -223,1 +216,0 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeComparator<CMP>)>\n@@ -225,6 +217,5 @@\n-    return COMPARATOR::cmp(a, b);\n-  }\n-\n-  template <typename CMP = COMPARATOR, ENABLE_IF(!HasNodeVerifier<CMP>)>\n-  bool less_than(const NodeType* a, const NodeType* b) const {\n-    return true;\n+    if constexpr (HasNodeComparator) {\n+      return COMPARATOR::cmp(a, b);\n+    } else if constexpr (HasKeyComparator) {\n+      return COMPARATOR::cmp(a, b->key());\n+    }\n@@ -233,1 +224,0 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeVerifier<CMP>)>\n@@ -235,1 +225,5 @@\n-    return COMPARATOR::less_than(a, b);\n+    if constexpr (HasNodeVerifier) {\n+      return COMPARATOR::less_than(a, b);\n+    } else {\n+      return true;\n+    }\n@@ -238,5 +232,0 @@\n-  \/\/ Cannot assert if no key comparator exist.\n-  template <typename CMP = COMPARATOR, ENABLE_IF(!HasKeyComparator<CMP>)>\n-  void assert_key_leq(K a, K b) const {}\n-\n-  template <typename CMP = COMPARATOR, ENABLE_IF(HasKeyComparator<CMP>)>\n@@ -244,1 +233,3 @@\n-    assert(COMPARATOR::cmp(a, b) != RBTreeOrdering::GT, \"key a must be less or equal to key b\");\n+    if constexpr (HasKeyComparator) { \/\/ Cannot assert if no key comparator exist.\n+      assert(COMPARATOR::cmp(a, b) != RBTreeOrdering::GT, \"key a must be less or equal to key b\");\n+    }\n@@ -286,2 +277,1 @@\n-    static_assert(HasKeyComparator<COMPARATOR> || HasNodeComparator<COMPARATOR>,\n-                  \"comparator must be of correct type\");\n+    static_assert(HasKeyComparator || HasNodeComparator, \"comparator must be of correct type\");\n@@ -441,1 +431,1 @@\n-  \/\/ A second `cmp` must exist in COMPARATOR (see top of file).\n+  \/\/ a function `less_than` must exist in COMPARATOR (see top of file).\n@@ -445,7 +435,1 @@\n-  template <typename USER_VERIFIER = empty_verifier, typename CMP = COMPARATOR, ENABLE_IF(HasNodeVerifier<CMP>)>\n-  void verify_self(const USER_VERIFIER& extra_verifier = USER_VERIFIER()) const {\n-    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::less_than(a, b);}, extra_verifier);\n-  }\n-\n-  template <typename USER_VERIFIER = empty_verifier, typename CMP = COMPARATOR,\n-            ENABLE_IF(HasKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n+  template <typename USER_VERIFIER = empty_verifier>\n@@ -453,7 +437,7 @@\n-    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a->key(), b->key()) == RBTreeOrdering::LT; }, extra_verifier);\n-  }\n-\n-  template <typename USER_VERIFIER = empty_verifier, typename CMP = COMPARATOR,\n-            ENABLE_IF(HasNodeComparator<CMP> && !HasKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n-  void verify_self(const USER_VERIFIER& extra_verifier = USER_VERIFIER()) const {\n-    verify_self([](const NodeType*, const NodeType*){ return true;}, extra_verifier);\n+    if constexpr (HasNodeVerifier) {\n+      verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::less_than(a, b);}, extra_verifier);\n+    } else if constexpr (HasKeyComparator) {\n+      verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a->key(), b->key()) == RBTreeOrdering::LT; }, extra_verifier);\n+    } else {\n+      verify_self([](const NodeType*, const NodeType*){ return true;}, extra_verifier);\n+    }\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":34,"deletions":50,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -698,2 +698,2 @@\n-          ENABLE_IF(std::is_integral<T>::value),\n-          ENABLE_IF(std::is_signed<T>::value)>\n+          ENABLE_IF(std::is_integral_v<T>),\n+          ENABLE_IF(std::is_signed_v<T>)>\n@@ -705,2 +705,2 @@\n-          ENABLE_IF(std::is_integral<T>::value),\n-          ENABLE_IF(std::is_unsigned<T>::value)>\n+          ENABLE_IF(std::is_integral_v<T>),\n+          ENABLE_IF(std::is_unsigned_v<T>)>\n@@ -712,1 +712,1 @@\n-          ENABLE_IF(std::is_pointer<T>::value)>\n+          ENABLE_IF(std::is_pointer_v<T>)>\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}