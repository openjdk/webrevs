{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.util.StaticProperty;\n-\n@@ -33,1 +31,0 @@\n-import java.io.FileOutputStream;\n@@ -43,1 +40,2 @@\n-public class MimeTable implements FileNameMap {\n+public final class MimeTable implements FileNameMap {\n+\n@@ -53,6 +51,0 @@\n-    \/\/ Will be reset if in the platform-specific data file\n-    private static String tempFileTemplate =\n-            System.getProperty(\"content.types.temp.file.template\", \"\/tmp\/%s\");\n-\n-    private static final String filePreamble = \"sun.net.www MIME content-types table\";\n-\n@@ -82,2 +74,1 @@\n-        MimeTable mt = getDefaultTable();\n-        return mt;\n+        return getDefaultTable();\n@@ -102,1 +93,1 @@\n-        String exts[] = m.getExtensions();\n+        String[] exts = m.getExtensions();\n@@ -107,2 +98,2 @@\n-        for (int i = 0; i < exts.length; i++) {\n-            extensionMap.put(exts[i], m);\n+        for (String ext : exts) {\n+            extensionMap.put(ext, m);\n@@ -120,2 +111,2 @@\n-            for (int i = 0; i < extensionKeys.length; i++) {\n-                extensionMap.remove(extensionKeys[i]);\n+            for (String extensionKey : extensionKeys) {\n+                extensionMap.remove(extensionKey);\n@@ -170,1 +161,0 @@\n-        MimeEntry entry = null;\n@@ -176,1 +166,1 @@\n-            entry = findViaFileExtension(fname.substring(0, hashIndex));\n+            MimeEntry entry = findViaFileExtension(fname.substring(0, hashIndex));\n@@ -182,2 +172,0 @@\n-        assert entry == null;\n-\n@@ -186,3 +174,1 @@\n-        if (entry == null) {\n-            entry = findViaFileExtension(fname);\n-        }\n+        return findViaFileExtension(fname);\n@@ -190,1 +176,0 @@\n-        return entry;\n@@ -201,17 +186,0 @@\n-    public synchronized MimeEntry findByDescription(String description) {\n-        Enumeration<MimeEntry> e = elements();\n-        while (e.hasMoreElements()) {\n-            MimeEntry entry = e.nextElement();\n-            if (description.equals(entry.getDescription())) {\n-                return entry;\n-            }\n-        }\n-\n-        \/\/ We failed, now try treating description as type\n-        return find(description);\n-    }\n-\n-    String getTempFileTemplate() {\n-        return tempFileTemplate;\n-    }\n-\n@@ -222,12 +190,0 @@\n-    \/\/ For backward compatibility -- mailcap format files\n-    \/\/ This is not currently used, but may in the future when we add ability\n-    \/\/ to read BOTH the properties format and the mailcap format.\n-    protected static String[] mailcapLocations =\n-            new String[]{\n-                    System.getProperty(\"user.mailcap\"),\n-                    StaticProperty.userHome() + \"\/.mailcap\",\n-                    \"\/etc\/mailcap\",\n-                    \"\/usr\/etc\/mailcap\",\n-                    \"\/usr\/local\/etc\/mailcap\"\n-            };\n-\n@@ -236,1 +192,1 @@\n-        File file = null;\n+        File file;\n@@ -268,1 +224,0 @@\n-            MimeTable.tempFileTemplate = tempFileTemplate;\n@@ -370,57 +325,0 @@\n-    public Properties getAsProperties() {\n-        Properties properties = new Properties();\n-        Enumeration<MimeEntry> e = elements();\n-        while (e.hasMoreElements()) {\n-            MimeEntry entry = e.nextElement();\n-            properties.put(entry.getType(), entry.toProperty());\n-        }\n-\n-        return properties;\n-    }\n-\n-    protected boolean saveAsProperties(File file) {\n-        try (FileOutputStream os = new FileOutputStream(file)) {\n-            Properties properties = getAsProperties();\n-            properties.put(\"temp.file.template\", tempFileTemplate);\n-            String tag;\n-            String user = StaticProperty.userName();\n-            if (user != null) {\n-                tag = \"; customized for \" + user;\n-                properties.store(os, filePreamble + tag);\n-            }\n-            else {\n-                properties.store(os, filePreamble);\n-            }\n-        }\n-        catch (IOException e) {\n-            e.printStackTrace();\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-    \/*\n-     * Debugging utilities\n-     *\n-    public void list(PrintStream out) {\n-        Enumeration keys = entries.keys();\n-        while (keys.hasMoreElements()) {\n-            String key = (String)keys.nextElement();\n-            MimeEntry entry = (MimeEntry)entries.get(key);\n-            out.println(key + \": \" + entry);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        MimeTable testTable = MimeTable.getDefaultTable();\n-\n-        Enumeration e = testTable.elements();\n-        while (e.hasMoreElements()) {\n-            MimeEntry entry = (MimeEntry)e.nextElement();\n-            System.out.println(entry);\n-        }\n-\n-        testTable.save(File.separator + \"tmp\" +\n-                       File.separator + \"mime_table.save\");\n-    }\n-    *\/\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeTable.java","additions":11,"deletions":113,"binary":false,"changes":124,"status":"modified"}]}