{"files":[{"patch":"@@ -807,0 +807,1 @@\n+java\/awt\/List\/ListScrollbarCursorTest.java 8066410 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4238932\n+ * @summary JTextField in gridBagLayout does not properly set MinimumSize\n+ * @key headful\n+ * @run main ComponentShortage\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+\n+public class ComponentShortage {\n+    static final int WIDTH_REDUCTION = 50;\n+    static JFrame frame;\n+    static JTextField jtf;\n+    static volatile Dimension size;\n+    static volatile Dimension fSize;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                frame.setLayout(new GridBagLayout());\n+                GridBagConstraints gBC = new GridBagConstraints();\n+\n+                gBC.gridx = 1;\n+                gBC.gridy = 0;\n+                gBC.gridwidth = 1;\n+                gBC.gridheight = 1;\n+                gBC.weightx = 1.0;\n+                gBC.weighty = 0.0;\n+                gBC.fill = GridBagConstraints.NONE;\n+                gBC.anchor = GridBagConstraints.NORTHWEST;\n+                jtf = new JTextField(16);\n+                frame.add(jtf, gBC);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                size = jtf.getSize();\n+            });\n+            System.out.println(\"TextField size before Frame's width reduction : \" + size);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setSize(frame.getSize().width - WIDTH_REDUCTION, frame.getSize().height);\n+            });\n+            frame.repaint();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                size = jtf.getSize();\n+                fSize = frame.getSize();\n+            });\n+            System.out.println(\"TextField size after Frame's width reduction : \" + size);\n+\n+            if (size.width < fSize.width - WIDTH_REDUCTION) {\n+                throw new RuntimeException(\"Width of JTextField is too small to be visible.\");\n+            }\n+            System.out.println(\"Test passed.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GridBagLayout\/ComponentShortage.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4290684\n+ * @summary Tests that cursor on the scrollbar of the list is set to default.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListScrollbarCursorTest\n+ *\/\n+\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Panel;\n+\n+public class ListScrollbarCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. You see the list in the middle of the panel.\n+                   This list has two scrollbars.\n+                2. The cursor should have a shape of hand over the main area\n+                   and a shape of arrow over scrollbars.\n+                3. Move the mouse cursor to either horizontal or vertical scrollbar.\n+                4. Press PASS if you see the default arrow cursor else press FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ListScrollbarCursorTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"List Scrollbar Cursor Test\");\n+        Panel panel = new Panel();\n+        List list = new List(3);\n+        list.add(\"List item with a very long name\" +\n+                \"(just to make the horizontal scrollbar visible)\");\n+        list.add(\"Item 2\");\n+        list.add(\"Item 3\");\n+        list.setCursor(new Cursor(Cursor.HAND_CURSOR));\n+        panel.add(list);\n+        frame.add(panel);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListScrollbarCursorTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4096445\n+ * @summary Test to verify List Scollbar appears\/disappears automatically\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListScrollbarTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Event;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.List;\n+\n+public class ListScrollbarTest extends Frame {\n+    static final int ITEMS = 10;\n+    List ltList;\n+    List rtList;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. There are two lists added to the Frame separated by\n+                   a column of buttons\n+                2. Double click on any item(s) on the left list, you would see\n+                   a '*' added at the end of the item\n+                3. Keep double clicking on the same item till the length of the\n+                   item exceeds the width of the list\n+                4. Now, if you don't get the horizontal scrollbar on\n+                   the left list click FAIL.\n+                5. If you get horizontal scrollbar, select the item\n+                   (that you double clicked) and press the '>' button\n+                   to move the item to the right list.\n+                6. If horizontal scroll bar appears on the right list\n+                   as well as disappears from the left list [only if both\n+                   happen] proceed with step 8 else click FAIL\n+                7. Now move the same item to the left list, by pressing\n+                     '<' button\n+                8. If the horizontal scrollbar appears on the left list\n+                   and disappears from the right list[only if both happen]\n+                   click PASS else click FAIL.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ListScrollbarTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public ListScrollbarTest() {\n+        super(\"List scroll bar test\");\n+        GridBagLayout gbl = new GridBagLayout();\n+        ltList = new List(ITEMS, true);\n+        rtList = new List(0, true);\n+        setLayout(gbl);\n+        add(ltList, 0, 0, 1, 5, 1.0, 1.0);\n+        add(rtList, 2, 0, 1, 5, 1.0, 1.0);\n+        add(new Button(\">\"), 1, 0, 1, 1, 0, 1.0);\n+        add(new Button(\">>\"), 1, 1, 1, 1, 0, 1.0);\n+        add(new Button(\"<\"), 1, 2, 1, 1, 0, 1.0);\n+        add(new Button(\"<<\"), 1, 3, 1, 1, 0, 1.0);\n+        add(new Button(\"!\"), 1, 4, 1, 1, 0, 1.0);\n+\n+        for (int i = 0; i < ITEMS; i++) {\n+            ltList.addItem(\"item \" + i);\n+        }\n+        setSize(220, 250);\n+    }\n+\n+    void add(Component comp, int x, int y, int w, int h, double weightx, double weighty) {\n+        GridBagLayout gbl = (GridBagLayout) getLayout();\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.fill = GridBagConstraints.BOTH;\n+        c.gridx = x;\n+        c.gridy = y;\n+        c.gridwidth = w;\n+        c.gridheight = h;\n+        c.weightx = weightx;\n+        c.weighty = weighty;\n+        add(comp);\n+        gbl.setConstraints(comp, c);\n+    }\n+\n+    void reverseSelections(List l) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            if (l.isSelected(i)) {\n+                l.deselect(i);\n+            } else {\n+                l.select(i);\n+            }\n+        }\n+    }\n+\n+    void deselectAll(List l) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            l.deselect(i);\n+        }\n+    }\n+\n+    void replaceItem(List l, String item) {\n+        for (int i = 0; i < l.countItems(); i++) {\n+            if (l.getItem(i).equals(item)) {\n+                l.replaceItem(item + \"*\", i);\n+            }\n+        }\n+    }\n+\n+    void move(List l1, List l2, boolean all) {\n+\n+        \/\/ if all the items are to be moved\n+        if (all) {\n+            for (int i = 0; i < l1.countItems(); i++) {\n+                l2.addItem(l1.getItem(i));\n+            }\n+            l1.delItems(0, l1.countItems() - 1);\n+        } else { \/\/ else move the selected items\n+            String[] items = l1.getSelectedItems();\n+            int[] itemIndexes = l1.getSelectedIndexes();\n+\n+            deselectAll(l2);\n+            for (int i = 0; i < items.length; i++) {\n+                l2.addItem(items[i]);\n+                l2.select(l2.countItems() - 1);\n+                if (i == 0) {\n+                    l2.makeVisible(l2.countItems() - 1);\n+                }\n+            }\n+            for (int i = itemIndexes.length - 1; i >= 0; i--) {\n+                l1.delItem(itemIndexes[i]);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean action(Event evt, Object arg) {\n+        if (\">\".equals(arg)) {\n+            move(ltList, rtList, false);\n+        } else if (\">>\".equals(arg)) {\n+            move(ltList, rtList, true);\n+        } else if (\"<\".equals(arg)) {\n+            move(rtList, ltList, false);\n+        } else if (\"<<\".equals(arg)) {\n+            move(rtList, ltList, true);\n+        } else if (\"!\".equals(arg)) {\n+            if (ltList.getSelectedItems().length > 0) {\n+                reverseSelections(ltList);\n+            } else if (rtList.getSelectedItems().length > 0) {\n+                reverseSelections(rtList);\n+            }\n+        } else if (evt.target == rtList || evt.target == ltList) {\n+            replaceItem((List) evt.target, (String) arg);\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean handleEvent(Event evt) {\n+        if (evt.id == Event.LIST_SELECT\n+                || evt.id == Event.LIST_DESELECT) {\n+            if (evt.target == ltList) {\n+                deselectAll(rtList);\n+            } else if (evt.target == rtList) {\n+                deselectAll(ltList);\n+            }\n+            return true;\n+        }\n+        return super.handleEvent(evt);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListScrollbarTest.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"}]}