{"files":[{"patch":"@@ -4785,17 +4785,0 @@\n-SkipIfEqual::SkipIfEqual(\n-    MacroAssembler* masm, const bool* flag_addr, bool value) {\n-  _masm = masm;\n-  uint64_t offset;\n-  _masm->adrp(rscratch1, ExternalAddress((address)flag_addr), offset);\n-  _masm->ldrb(rscratch1, Address(rscratch1, offset));\n-  if (value) {\n-    _masm->cbnzw(rscratch1, _label);\n-  } else {\n-    _masm->cbzw(rscratch1, _label);\n-  }\n-}\n-\n-SkipIfEqual::~SkipIfEqual() {\n-  _masm->bind(_label);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1655,18 +1655,0 @@\n-\/**\n- * class SkipIfEqual:\n- *\n- * Instantiating this class will result in assembly code being output that will\n- * jump around any code emitted between the creation of the instance and it's\n- * automatic destruction at the end of a scope block, depending on the value of\n- * the flag passed to the constructor, which will be checked at run-time.\n- *\/\n-class SkipIfEqual {\n- private:\n-  MacroAssembler* _masm;\n-  Label _label;\n-\n- public:\n-   SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value);\n-   ~SkipIfEqual();\n-};\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4622,17 +4622,0 @@\n-void SkipIfEqualZero::skip_to_label_if_equal_zero(MacroAssembler* masm, Register temp,\n-                                                  const bool* flag_addr, Label& label) {\n-  int simm16_offset = masm->load_const_optimized(temp, (address)flag_addr, R0, true);\n-  assert(sizeof(bool) == 1, \"PowerPC ABI\");\n-  masm->lbz(temp, simm16_offset, temp);\n-  masm->cmpwi(CCR0, temp, 0);\n-  masm->beq(CCR0, label);\n-}\n-\n-SkipIfEqualZero::SkipIfEqualZero(MacroAssembler* masm, Register temp, const bool* flag_addr) : _masm(masm), _label() {\n-  skip_to_label_if_equal_zero(masm, temp, flag_addr, _label);\n-}\n-\n-SkipIfEqualZero::~SkipIfEqualZero() {\n-  _masm->bind(_label);\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -963,19 +963,0 @@\n-\/\/ class SkipIfEqualZero:\n-\/\/\n-\/\/ Instantiating this class will result in assembly code being output that will\n-\/\/ jump around any code emitted between the creation of the instance and it's\n-\/\/ automatic destruction at the end of a scope block, depending on the value of\n-\/\/ the flag passed to the constructor, which will be checked at run-time.\n-class SkipIfEqualZero : public StackObj {\n- private:\n-  MacroAssembler* _masm;\n-  Label _label;\n-\n- public:\n-   \/\/ 'Temp' is a temp register that this object can use (and trash).\n-   explicit SkipIfEqualZero(MacroAssembler*, Register temp, const bool* flag_addr);\n-   static void skip_to_label_if_equal_zero(MacroAssembler*, Register temp,\n-                                           const bool* flag_addr, Label& label);\n-   ~SkipIfEqualZero();\n-};\n-\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2572,21 +2572,0 @@\n-SkipIfEqual::SkipIfEqual(MacroAssembler* masm, const bool* flag_addr, bool value) {\n-  _masm = masm;\n-  ExternalAddress target((address)flag_addr);\n-  _masm->relocate(target.rspec(), [&] {\n-    int32_t offset;\n-    _masm->la(t0, target.target(), offset);\n-    _masm->lbu(t0, Address(t0, offset));\n-  });\n-\n-  if (value) {\n-    _masm->bnez(t0, _label);\n-  } else {\n-    _masm->beqz(t0, _label);\n-  }\n-}\n-\n-SkipIfEqual::~SkipIfEqual() {\n-  _masm->bind(_label);\n-  _masm = nullptr;\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1797,18 +1797,0 @@\n-\/**\n- * class SkipIfEqual:\n- *\n- * Instantiating this class will result in assembly code being output that will\n- * jump around any code emitted between the creation of the instance and it's\n- * automatic destruction at the end of a scope block, depending on the value of\n- * the flag passed to the constructor, which will be checked at run-time.\n- *\/\n-class SkipIfEqual {\n- private:\n-  MacroAssembler* _masm;\n-  Label _label;\n-\n- public:\n-   SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value);\n-   ~SkipIfEqual();\n-};\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2134,12 +2134,0 @@\n-\n-#if 0\n-  \/\/ Dtrace currently not supported on z\/Architecture.\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n-    push(state);\n-    get_method(c_rarg1);\n-    call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_exit),\n-                 r15_thread, c_rarg1);\n-    pop(state);\n-  }\n-#endif\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -6019,15 +6019,0 @@\n-SkipIfEqual::SkipIfEqual(MacroAssembler* masm, const bool* flag_addr, bool value, Register _rscratch) {\n-  _masm = masm;\n-  _masm->load_absolute_address(_rscratch, (address)flag_addr);\n-  _masm->load_and_test_int(_rscratch, Address(_rscratch));\n-  if (value) {\n-    _masm->z_brne(_label); \/\/ Skip if true, i.e. != 0.\n-  } else {\n-    _masm->z_bre(_label);  \/\/ Skip if false, i.e. == 0.\n-  }\n-}\n-\n-SkipIfEqual::~SkipIfEqual() {\n-  _masm->bind(_label);\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1067,18 +1067,0 @@\n-\/**\n- * class SkipIfEqual:\n- *\n- * Instantiating this class will result in assembly code being output that will\n- * jump around any code emitted between the creation of the instance and it's\n- * automatic destruction at the end of a scope block, depending on the value of\n- * the flag passed to the constructor, which will be checked at run-time.\n- *\/\n-class SkipIfEqual {\n- private:\n-  MacroAssembler* _masm;\n-  Label _label;\n-\n- public:\n-  SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value, Register _rscratch);\n-  ~SkipIfEqual();\n-};\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -10216,11 +10216,0 @@\n-SkipIfEqual::SkipIfEqual(\n-    MacroAssembler* masm, const bool* flag_addr, bool value, Register rscratch) {\n-  _masm = masm;\n-  _masm->cmp8(ExternalAddress((address)flag_addr), value, rscratch);\n-  _masm->jcc(Assembler::equal, _label);\n-}\n-\n-SkipIfEqual::~SkipIfEqual() {\n-  _masm->bind(_label);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2165,18 +2165,0 @@\n-\/**\n- * class SkipIfEqual:\n- *\n- * Instantiating this class will result in assembly code being output that will\n- * jump around any code emitted between the creation of the instance and it's\n- * automatic destruction at the end of a scope block, depending on the value of\n- * the flag passed to the constructor, which will be checked at run-time.\n- *\/\n-class SkipIfEqual {\n- private:\n-  MacroAssembler* _masm;\n-  Label _label;\n-\n- public:\n-   SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value, Register rscratch);\n-   ~SkipIfEqual();\n-};\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}