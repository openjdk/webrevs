{"files":[{"patch":"@@ -67,3 +67,4 @@\n-        var bytes = cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n-                .return_()\n-                .withExplicitStackAndLocals(2, 3)));\n+        var bytes = cc.build(ClassDesc.of(\"Foo\"),\n+                             builderType.asClassHandler(\"foo\", MTD_void, 0, cob ->\n+                                     cob.return_()\n+                                        .withExplicitStackAndLocals(2, 3)));\n@@ -85,6 +86,10 @@\n-        assertThrows(IllegalArgumentException.class, () -> cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n-                .return_()\n-                .withExplicitStackAndLocals(-1, 2))));\n-        assertThrows(IllegalArgumentException.class, () -> cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n-                .return_()\n-                .withExplicitStackAndLocals(2, 100000))));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                cc.build(ClassDesc.of(\"Foo\"),\n+                         builderType.asClassHandler(\"foo\", MTD_void, 0, cob ->\n+                                 cob.return_()\n+                                    .withExplicitStackAndLocals(-1, 2))));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                cc.build(ClassDesc.of(\"Foo\"),\n+                         builderType.asClassHandler(\"foo\", MTD_void, 0, cob ->\n+                                 cob.return_()\n+                                    .withExplicitStackAndLocals(2, 100000))));\n","filename":"test\/jdk\/jdk\/classfile\/BuilderExplicitMaxsTest.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -49,13 +49,15 @@\n-        cc.build(ClassDesc.of(\"Foo\"), type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), 0, xb -> {\n-            assertEquals(0, xb.receiverSlot(), \"this\");\n-            assertEquals(1, xb.parameterSlot(0), \"int\");\n-            assertEquals(2, xb.parameterSlot(1), \"long\");\n-            assertEquals(4, xb.parameterSlot(2), \"int\");\n-            xb.return_();\n-        }));\n-        cc.build(ClassDesc.of(\"Foo\"), type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ACC_STATIC, xb -> {\n-            assertEquals(0, xb.parameterSlot(0), \"int\");\n-            assertEquals(1, xb.parameterSlot(1), \"long\");\n-            assertEquals(3, xb.parameterSlot(2), \"int\");\n-            xb.return_();\n-        }));\n+        cc.build(ClassDesc.of(\"Foo\"),\n+                 type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), 0, xb -> {\n+                     assertEquals(0, xb.receiverSlot(), \"this\");\n+                     assertEquals(1, xb.parameterSlot(0), \"int\");\n+                     assertEquals(2, xb.parameterSlot(1), \"long\");\n+                     assertEquals(4, xb.parameterSlot(2), \"int\");\n+                     xb.return_();\n+                 }));\n+        cc.build(ClassDesc.of(\"Foo\"),\n+                 type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ACC_STATIC, xb -> {\n+                     assertEquals(0, xb.parameterSlot(0), \"int\");\n+                     assertEquals(1, xb.parameterSlot(1), \"long\");\n+                     assertEquals(3, xb.parameterSlot(2), \"int\");\n+                     xb.return_();\n+                 }));\n","filename":"test\/jdk\/jdk\/classfile\/BuilderParamTest.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"}]}