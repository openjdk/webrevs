{"files":[{"patch":"@@ -3419,0 +3419,28 @@\n+\n+    \/\/ advanced user hints\n+\n+    \/**\n+     * Provides this builder with explicit {@code max_stack} and {@code\n+     * max_locals} values when {@link StackMapsOption#DROP_STACK_MAPS} is set.\n+     * No automatic counting for the two max values will be done; the resulting\n+     * {@code Code} attribute will instead use the provided values.\n+     * <p>\n+     * This call does not affect the two max values if any of the following is\n+     * true:\n+     * <ul>\n+     * <li>{@code DROP_STACK_MAPS} is not set;\n+     * <li>this builder does not build a complete {@code Code} attribute;\n+     * <li>this builder's output is redirected to a {@link CodeTransform};\n+     * <li>the built {@code Code} attribute is subsequently inflated in a\n+     * transformation;\n+     * <\/ul>\n+     * <p>\n+     * This call always validates the provided max values.\n+     *\n+     * @param maxStack the max stack slots used by this method body\n+     * @param maxLocals the max local variable slots used by this method body\n+     * @return this builder\n+     * @throws IllegalArgumentException if any of the values is not a {@code u2}\n+     * @since 25\n+     *\/\n+    CodeBuilder withExplicitStackAndLocals(int maxStack, int maxLocals);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -514,2 +514,2 @@\n-                  .with(StackMapTableAttribute.of(stackMapFrames));\n-                DirectCodeBuilder.withMaxs(cb, 2, locals.size()); \/\/ checkIndex uses 2\n+                  .with(StackMapTableAttribute.of(stackMapFrames))\n+                  .withExplicitStackAndLocals(2, locals.size()); \/\/ checkIndex uses 2\n@@ -715,2 +715,2 @@\n-              .with(StackMapTableAttribute.of(stackMapFrames));\n-            DirectCodeBuilder.withMaxs(cb, 3, locals.size()); \/\/ enum labels use 3 stack, others use 2\n+              .with(StackMapTableAttribute.of(stackMapFrames))\n+              .withExplicitStackAndLocals(3, locals.size()); \/\/ enum labels use 3 stack, others use 2\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+    private int maxStackHint = -1;\n+    private int maxLocalsHint = -1;\n@@ -129,0 +131,11 @@\n+    @Override\n+    public CodeBuilder withExplicitStackAndLocals(int maxStack, int maxLocals) {\n+        BytecodeHelpers.validateU2(maxStack);\n+        BytecodeHelpers.validateU2(maxLocals);\n+        if (context.dropStackMaps()) {\n+            this.maxStackHint = maxStack;\n+            this.maxLocalsHint = maxLocals;\n+        }\n+        return this;\n+    }\n+\n@@ -177,1 +190,11 @@\n-            builder.withCode(Util.writingAll(this));\n+            if (maxStackHint != -1 && maxLocalsHint != -1) {\n+                builder.withCode(new Consumer<>() {\n+                    @Override\n+                    public void accept(CodeBuilder cob) {\n+                        Model.this.forEach(cob);\n+                        cob.withExplicitStackAndLocals(maxStackHint, maxLocalsHint);\n+                    }\n+                });\n+            } else {\n+                builder.withCode(Util.writingAll(this));\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,4 @@\n+    public static IllegalArgumentException u2OutOfBounds(int u2) {\n+        return new IllegalArgumentException(\"Invalid value for u2:\".concat(Integer.toString(u2)));\n+    }\n+\n@@ -58,1 +62,1 @@\n-        return new IllegalArgumentException(\"Invalid slot index :\".concat(Integer.toString(slot)));\n+        return new IllegalArgumentException(\"Invalid slot index:\".concat(Integer.toString(slot)));\n@@ -440,0 +444,5 @@\n+    public static void validateU2(int u2) {\n+        if ((u2 & ~0xFFFF) != 0)\n+            throw u2OutOfBounds(u2);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -177,4 +177,9 @@\n-    public static void withMaxs(CodeBuilder cob, int stacks, int locals) {\n-        var dcb = (DirectCodeBuilder) cob;\n-        dcb.maxStackHint = stacks;\n-        dcb.maxLocalsHint = locals;\n+    @Override\n+    public CodeBuilder withExplicitStackAndLocals(int maxStack, int maxLocals) {\n+        BytecodeHelpers.validateU2(maxStack);\n+        BytecodeHelpers.validateU2(maxLocals);\n+        if (context.dropStackMaps()) {\n+            this.maxStackHint = maxStack;\n+            this.maxLocalsHint = maxLocals;\n+        }\n+        return this;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -65,0 +65,7 @@\n+\n+    @Override\n+    public CodeBuilder withExplicitStackAndLocals(int maxStack, int maxLocals) {\n+        BytecodeHelpers.validateU2(maxStack);\n+        BytecodeHelpers.validateU2(maxLocals);\n+        return this;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/NonterminalCodeBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341275\n+ * @summary Testing CodeBuilder::withExplicitStackAndLocals\n+ * @run junit BuilderExplicitMaxsTest\n+ *\/\n+\n+import java.lang.classfile.*;\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n+\n+import helpers.CodeBuilderType;\n+import jdk.internal.classfile.impl.BufferedCodeBuilder;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.lang.constant.ConstantDescs.MTD_void;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/**\n+ * Testing explicit max stacks and locals setter. Configurations:\n+ * <ul>\n+ * <li>Builder Type: Direct, Buffered, Block, Chained\n+ * <li>Argument validity\n+ * <li>Whether DROP_STACK_MAPS is set\n+ * <\/ul>\n+ *\/\n+class BuilderExplicitMaxsTest {\n+\n+    static Stream<Arguments> arguments() {\n+        return Arrays.stream(CodeBuilderType.values()).mapMulti((t, sink) -> {\n+            sink.accept(Arguments.of(ClassFile.StackMapsOption.DROP_STACK_MAPS, t));\n+            sink.accept(Arguments.of(ClassFile.StackMapsOption.STACK_MAPS_WHEN_REQUIRED, t));\n+        });\n+    }\n+\n+    @MethodSource(\"arguments\")\n+    @ParameterizedTest\n+    void testValidArgs(ClassFile.StackMapsOption stackMapsOption, CodeBuilderType builderType) {\n+        var cc = ClassFile.of(stackMapsOption);\n+        var bytes = cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n+                .return_()\n+                .withExplicitStackAndLocals(2, 3)));\n+        var clz = ClassFile.of().parse(bytes);\n+        var code = clz.methods().getFirst().findAttribute(Attributes.code()).orElseThrow();\n+        if (builderType.terminal && stackMapsOption == ClassFile.StackMapsOption.DROP_STACK_MAPS) {\n+            assertEquals(2, code.maxStack());\n+            assertEquals(3, code.maxLocals());\n+        } else {\n+            assertEquals(0, code.maxStack());\n+            assertEquals(1, code.maxLocals());\n+        }\n+    }\n+\n+    @MethodSource(\"arguments\")\n+    @ParameterizedTest\n+    void testInvalidArgs(ClassFile.StackMapsOption stackMapsOption, CodeBuilderType builderType) {\n+        var cc = ClassFile.of(stackMapsOption);\n+        assertThrows(IllegalArgumentException.class, () -> cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n+                .return_()\n+                .withExplicitStackAndLocals(-1, 2))));\n+        assertThrows(IllegalArgumentException.class, () -> cc.build(ClassDesc.of(\"Foo\"), builderType.asClassHandler(\"foo\", MTD_void, 0, cob -> cob\n+                .return_()\n+                .withExplicitStackAndLocals(2, 100000))));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/BuilderExplicitMaxsTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -35,1 +34,4 @@\n-import static java.lang.constant.ConstantDescs.CD_void;\n+import helpers.CodeBuilderType;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n@@ -43,2 +45,3 @@\n-    @Test\n-    void testDirectBuilder() {\n+    @EnumSource\n+    @ParameterizedTest\n+    void test(CodeBuilderType type) {\n@@ -46,19 +49,13 @@\n-        cc.build(ClassDesc.of(\"Foo\"), cb -> {\n-            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), 0,\n-                          mb -> mb.withCode(xb -> {\n-                assertEquals(xb.receiverSlot(), 0);\n-                assertEquals(xb.parameterSlot(0), 1);\n-                assertEquals(xb.parameterSlot(1), 2);\n-                assertEquals(xb.parameterSlot(2), 4);\n-                xb.return_();\n-            }));\n-        });\n-        cc.build(ClassDesc.of(\"Foo\"), cb -> {\n-            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ACC_STATIC,\n-                          mb -> mb.withCode(xb -> {\n-                              assertEquals(xb.parameterSlot(0), 0);\n-                              assertEquals(xb.parameterSlot(1), 1);\n-                              assertEquals(xb.parameterSlot(2), 3);\n-                              xb.return_();\n-                          }));\n-        });\n+        cc.build(ClassDesc.of(\"Foo\"), type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), 0, xb -> {\n+            assertEquals(0, xb.receiverSlot(), \"this\");\n+            assertEquals(1, xb.parameterSlot(0), \"int\");\n+            assertEquals(2, xb.parameterSlot(1), \"long\");\n+            assertEquals(4, xb.parameterSlot(2), \"int\");\n+            xb.return_();\n+        }));\n+        cc.build(ClassDesc.of(\"Foo\"), type.asClassHandler(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ACC_STATIC, xb -> {\n+            assertEquals(0, xb.parameterSlot(0), \"int\");\n+            assertEquals(1, xb.parameterSlot(1), \"long\");\n+            assertEquals(3, xb.parameterSlot(2), \"int\");\n+            xb.return_();\n+        }));\n","filename":"test\/jdk\/jdk\/classfile\/BuilderParamTest.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.reflect.Parameter;\n@@ -42,0 +41,1 @@\n+import helpers.CodeBuilderType;\n@@ -171,15 +171,4 @@\n-        var cf = ClassFile.of();\n-        CodeTransform noopCodeTransform = CodeBuilder::with;\n-        \/\/ Direct builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, checkedAction)));\n-        \/\/ Chained builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, cob -> cob\n-                        .transforming(CodeTransform.ACCEPT_ALL, checkedAction))));\n-        var classTemplate = cf.build(ClassDesc.of(\"Test\"), clb -> clb\n-                .withMethodBody(\"test\", MTD_void, ACC_STATIC, CodeBuilder::return_));\n-        \/\/ Indirect builders\n-        assertThrows(IllegalArgumentException.class, () -> cf.transformClass(cf.parse(classTemplate),\n-                ClassTransform.transformingMethodBodies(CodeTransform.endHandler(checkedAction)\n-                        .andThen(noopCodeTransform))));\n+        for (var builderType : CodeBuilderType.values()) {\n+            assertThrows(IllegalArgumentException.class, () -> ClassFile.of().build(ClassDesc.of(\"Test\"),\n+                    builderType.asClassHandler(\"test\", MTD_void, ACC_STATIC, checkedAction)), builderType.name());\n+        }\n","filename":"test\/jdk\/jdk\/classfile\/InstructionValidationTest.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package helpers;\n+\n+import java.lang.classfile.*;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.function.Consumer;\n+\n+import jdk.internal.classfile.impl.BlockCodeBuilderImpl;\n+import jdk.internal.classfile.impl.BufferedCodeBuilder;\n+import jdk.internal.classfile.impl.ChainedCodeBuilder;\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n+\n+\/**\n+ * A utility to test behavior of an API across all implementations of CodeBuilder.\n+ *\/\n+public enum CodeBuilderType {\n+    DIRECT(DirectCodeBuilder.class, true) {\n+        @Override\n+        Consumer<ClassBuilder> asClassHandler0(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler) {\n+            return clb -> clb.withMethodBody(name, mtd, flags, codeHandler);\n+        }\n+    },\n+    BUFFERED(BufferedCodeBuilder.class, true) {\n+        @Override\n+        Consumer<ClassBuilder> asClassHandler0(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler) {\n+            var bytes = ClassFile.of().build(ClassDesc.of(\"Dummy\"), clb -> clb.withMethod(name, mtd, flags, _ -> {\n+            }));\n+            var mm = ClassFile.of().parse(bytes).methods().getFirst();\n+            return clb -> clb.transformMethod(mm, new MethodTransform() {\n+                @Override\n+                public void accept(MethodBuilder builder, MethodElement element) {\n+                }\n+\n+                @Override\n+                public void atEnd(MethodBuilder builder) {\n+                    builder.withCode(codeHandler);\n+                }\n+            }.andThen(MethodTransform.ACCEPT_ALL));\n+        }\n+    },\n+    CHAINED(ChainedCodeBuilder.class, false) {\n+        @Override\n+        Consumer<ClassBuilder> asClassHandler0(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler) {\n+            return clb -> clb.withMethodBody(name, mtd, flags, cob -> cob.transforming(CodeTransform.ACCEPT_ALL, codeHandler));\n+        }\n+    },\n+    BLOCK(BlockCodeBuilderImpl.class, false) {\n+        @Override\n+        Consumer<ClassBuilder> asClassHandler0(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler) {\n+            return clb -> clb.withMethodBody(name, mtd, flags, cob -> cob.block(codeHandler::accept));\n+        }\n+    };\n+\n+    public final Class<? extends CodeBuilder> clz;\n+    public final boolean terminal;\n+\n+    CodeBuilderType(Class<? extends CodeBuilder> clz, boolean operational) {\n+        this.clz = clz;\n+        this.terminal = operational;\n+    }\n+\n+    public Consumer<ClassBuilder> asClassHandler(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler) {\n+        Consumer<CodeBuilder> actualHandler = cob -> {\n+            assert clz.isInstance(cob) : cob.getClass() + \" != \" + clz;\n+            codeHandler.accept(cob);\n+        };\n+        return asClassHandler0(name, mtd, flags, actualHandler);\n+    }\n+    abstract Consumer<ClassBuilder> asClassHandler0(String name, MethodTypeDesc mtd, int flags, Consumer<CodeBuilder> codeHandler);\n+}\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/CodeBuilderType.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}