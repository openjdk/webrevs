{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.nio.file.Files;\n@@ -80,1 +79,1 @@\n-                TKit.assertTrue(-1 == Files.mismatch(expectedIcon, iconPath),\n+                TKit.assertSameFileContent(expectedIcon, iconPath,\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static jdk.jpackage.internal.util.function.ThrowingBiFunction.toBiFunction;\n@@ -800,0 +801,29 @@\n+    public static void assertMismatchFileContent(Path a, Path b) {\n+        assertFilesMismatch(a, b, true, Optional.empty());\n+    }\n+\n+    public static void assertMismatchFileContent(Path a, Path b, String msg) {\n+        assertFilesMismatch(a, b, true, Optional.of(msg));\n+    }\n+\n+    public static void assertSameFileContent(Path a, Path b) {\n+        assertFilesMismatch(a, b, false, Optional.empty());\n+    }\n+\n+    public static void assertSameFileContent(Path a, Path b, String msg) {\n+        assertFilesMismatch(a, b, false, Optional.of(msg));\n+    }\n+\n+    public static void assertFilesMismatch(Path a, Path b, boolean expectMismatch, Optional<String> msg) {\n+        var mismatch = toBiFunction(Files::mismatch).apply(a, b) != -1;\n+        if (expectMismatch) {\n+            assertTrue(mismatch, msg.orElseGet(() -> {\n+                return String.format(\"Check the content of [%s] and [%s] files mismatch\", a, b);\n+            }));\n+        } else {\n+            assertTrue(!mismatch, msg.orElseGet(() -> {\n+                return String.format(\"Check the content of [%s] and [%s] files is the same\", a, b);\n+            }));\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n@@ -31,3 +30,0 @@\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n@@ -35,1 +31,0 @@\n-import java.util.HexFormat;\n@@ -178,8 +173,2 @@\n-\n-            var overlayDigest = digest(fc.out());\n-            var noOverlayDigest = digest(noOverlayPath);\n-            var inputDigest = digest(fc.in());\n-\n-            TKit.trace(String.format(\"Check [%s] file:\", fc.out()));\n-            TKit.assertEquals(inputDigest, overlayDigest, String.format(\"Check contents equals to [%s] file\", fc.in()));\n-            TKit.assertNotEquals(noOverlayDigest, overlayDigest, String.format(\"Check contents differ from [%s] file\", noOverlayPath));\n+            TKit.assertSameFileContent(fc.in(), fc.out());\n+            TKit.assertMismatchFileContent(noOverlayPath, fc.out());\n@@ -358,12 +347,0 @@\n-    private static String digest(Path file) {\n-        try {\n-            var md = MessageDigest.getInstance(\"md5\");\n-            try (var is = Files.newInputStream(file); var dis = new DigestInputStream(is, md)) {\n-                dis.readAllBytes();\n-            }\n-            return HexFormat.of().formatHex(md.digest());\n-        } catch (NoSuchAlgorithmException|IOException ex) {\n-            throw rethrowUnchecked(ex);\n-        }\n-    }\n-\n@@ -372,1 +349,6 @@\n-        return JPackageCommand.helloAppImage().setArgumentValue(\"--name\", \"Foo\");\n+        var cmd = JPackageCommand.helloAppImage().setArgumentValue(\"--name\", \"Foo\");\n+\n+        \/\/ Clean leftovers in the input dir from the previous test run if any.\n+        TKit.deleteDirectoryContentsRecursive(cmd.inputDir());\n+\n+        return cmd;\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImageFillOrderTest.java","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"}]}