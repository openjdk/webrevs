{"files":[{"patch":"@@ -26,2 +26,0 @@\n-import static jdk.jpackage.internal.util.function.ThrowingBiFunction.toBiFunction;\n-import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n@@ -30,0 +28,1 @@\n+import java.io.UncheckedIOException;\n@@ -42,0 +41,1 @@\n+import java.util.function.Consumer;\n@@ -44,2 +44,0 @@\n-import jdk.jpackage.internal.util.function.ThrowingBiFunction;\n-import jdk.jpackage.internal.util.function.ThrowingFunction;\n@@ -119,3 +117,1 @@\n-        var appContentRoot = TKit.createTempDirectory(\"app-content\");\n-\n-        var file = AppImageFile.getPathInAppImage(appContentRoot);\n+        var cmd = createJPackage().setFakeRuntime();\n@@ -123,2 +119,1 @@\n-        Files.createDirectories(file.getParent());\n-        TKit.createTextFile(file, List.of(\"This is not a valid XML content\"));\n+        var outputBundle = cmd.outputBundle();\n@@ -126,2 +121,3 @@\n-        var cmd = createJPackage().setFakeRuntime();\n-        addAppContentPath(cmd, appContentRoot, ApplicationLayout::appDirectory);\n+        buildOverlay(cmd, TKit.createTempDirectory(\"app-content\"), AppImageFile.getPathInAppImage(outputBundle))\n+                .textContent(\"This is not a valid XML content\")\n+                .configureCmdOptions().createOverlayFile();\n@@ -132,2 +128,2 @@\n-        TKit.trace(String.format(\"Parse [%s] file...\", AppImageFile.getPathInAppImage(cmd.outputBundle())));\n-        AppImageFile.load(cmd.outputBundle());\n+        TKit.trace(String.format(\"Parse [%s] file...\", AppImageFile.getPathInAppImage(outputBundle)));\n+        AppImageFile.load(outputBundle);\n@@ -227,2 +223,5 @@\n-        AppImageDefaultOverlay(ThrowingFunction<JPackageCommand, Collection<FileCopy>> func) {\n-            this.func = toFunction(func);\n+        AppImageDefaultOverlay(Function<JPackageCommand, FileCopy> func) {\n+            Objects.requireNonNull(func);\n+            this.func = cmd -> {\n+                return List.of(func.apply(cmd));\n+            };\n@@ -240,2 +239,15 @@\n-        APP_CONTENT_MAIN_LAUNCHER_CFG(AppImageFillOrderTest::replaceMainLauncherCfgFile),\n-        APP_CONTENT_MAIN_JAR(AppImageFillOrderTest::replaceMainJar),\n+        \/\/ Replace the standard main launcher .cfg file with the custom one from the app content.\n+        APP_CONTENT_MAIN_LAUNCHER_CFG((cmd, appContentRoot) -> {\n+            return buildOverlay(cmd, appContentRoot, cmd.appLauncherCfgPath(null))\n+                    .textContent(\"!Olleh\")\n+                    .configureCmdOptions().createOverlayFile();\n+        }),\n+\n+        \/\/ Replace the jar file that jpackage will pick up from the input directory with the custom one.\n+        APP_CONTENT_MAIN_JAR((cmd, appContentRoot) -> {\n+            return buildOverlay(cmd, appContentRoot, cmd.appLayout().appDirectory().resolve(cmd.getArgumentValue(\"--main-jar\")))\n+                    .textContent(\"Surprise!\")\n+                    .configureCmdOptions().createOverlayFile();\n+        }),\n+\n+        \/\/ Replace \"release\" file in the runtime directory.\n@@ -243,1 +255,3 @@\n-            return addRuntimeFile(cmd, appContentRoot, RUNTIME_RELEASE_FILE);\n+            return buildOverlay(cmd, appContentRoot, cmd.appLayout().runtimeHomeDirectory().resolve(\"release\"))\n+                    .textContent(\"blob\")\n+                    .configureCmdOptions().createOverlayFile();\n@@ -247,2 +261,5 @@\n-        AppImageAppContentOverlay(ThrowingBiFunction<JPackageCommand, Path, Collection<FileCopy>> func) {\n-            this.func = toBiFunction(func);\n+        AppImageAppContentOverlay(BiFunction<JPackageCommand, Path, FileCopy> func) {\n+            Objects.requireNonNull(func);\n+            this.func = (cmd, appContentRoot) -> {\n+                return List.of(func.apply(cmd, appContentRoot));\n+            };\n@@ -267,3 +284,1 @@\n-    private static Collection<FileCopy> replaceMainLauncherCfgFile(JPackageCommand cmd) {\n-        var inputDir = Path.of(cmd.getArgumentValue(\"--input\"));\n-\n+    private static FileCopy replaceMainLauncherCfgFile(JPackageCommand cmd) {\n@@ -271,1 +286,1 @@\n-        final var inputMainLauncherCfg = inputDir.resolve(cmd.appLauncherCfgPath(null).getFileName());\n+        final var outputFile = cmd.appLauncherCfgPath(null);\n@@ -273,1 +288,1 @@\n-        TKit.createTextFile(inputMainLauncherCfg, List.of(\"Hello!\"));\n+        final var inputDir = Path.of(cmd.getArgumentValue(\"--input\"));\n@@ -275,8 +290,1 @@\n-        return List.of(new FileCopy(inputMainLauncherCfg, cmd.appLauncherCfgPath(null)));\n-    }\n-\n-    private static Collection<FileCopy> replaceMainLauncherCfgFile(JPackageCommand cmd, Path appContentRoot) throws IOException {\n-        var appDirOverlay = APP_IMAGE_LAYOUT.resolveAt(appContentRoot).appDirectory();\n-\n-        \/\/ Replace the standard main launcher .cfg file with the custom one from the app content.\n-        final var inputMainLauncherCfg = appDirOverlay.resolve(cmd.appLauncherCfgPath(null).getFileName());\n+        final var file = inputDir.resolve(outputFile.getFileName());\n@@ -284,2 +292,1 @@\n-        Files.createDirectories(inputMainLauncherCfg.getParent());\n-        TKit.createTextFile(inputMainLauncherCfg, List.of(\"!Olleh\"));\n+        TKit.createTextFile(file, List.of(\"Hello!\"));\n@@ -287,1 +294,2 @@\n-        addAppContentPath(cmd, appContentRoot, ApplicationLayout::appDirectory);\n+        return new FileCopy(file, outputFile);\n+    }\n@@ -289,1 +297,2 @@\n-        return List.of(new FileCopy(inputMainLauncherCfg, cmd.appLauncherCfgPath(null)));\n+    private static AppContentOverlayFileBuilder buildOverlay(JPackageCommand cmd, Path appContentRoot, Path outputFile) {\n+        return new AppContentOverlayFileBuilder(cmd, appContentRoot, outputFile);\n@@ -292,2 +301,0 @@\n-    private static Collection<FileCopy> replaceMainJar(JPackageCommand cmd, Path appContentRoot) throws IOException {\n-        var appDirOverlay = APP_IMAGE_LAYOUT.resolveAt(appContentRoot).appDirectory();\n@@ -295,2 +302,1 @@\n-        \/\/ Replace the jar file that jpackage will pick up from the input directory with the custom one.\n-        var mainJar = appDirOverlay.resolve(cmd.getArgumentValue(\"--main-jar\"));\n+    private static final class AppContentOverlayFileBuilder {\n@@ -298,2 +304,4 @@\n-        Files.createDirectories(mainJar.getParent());\n-        TKit.createTextFile(mainJar, List.of(\"Surprise!\"));\n+        AppContentOverlayFileBuilder(JPackageCommand cmd, Path appContentRoot, Path outputFile) {\n+            if (outputFile.isAbsolute()) {\n+                throw new IllegalArgumentException();\n+            }\n@@ -301,1 +309,3 @@\n-        addAppContentPath(cmd, appContentRoot, ApplicationLayout::appDirectory);\n+            if (!outputFile.startsWith(cmd.outputBundle())) {\n+                throw new IllegalArgumentException();\n+            }\n@@ -303,2 +313,7 @@\n-        return List.of(new FileCopy(mainJar, cmd.appLayout().appDirectory().resolve(mainJar.getFileName())));\n-    }\n+            this.cmd = Objects.requireNonNull(cmd);\n+            this.outputFile = Objects.requireNonNull(outputFile);\n+            this.appContentRoot = Objects.requireNonNull(appContentRoot);\n+        }\n+\n+        FileCopy createOverlayFile() {\n+            final var file = appContentRoot.resolve(pathInAppContentDirectory());\n@@ -306,2 +321,6 @@\n-    private static Collection<FileCopy> addRuntimeFile(JPackageCommand cmd, Path appContentRoot, Path pathInRuntime) throws IOException {\n-        var runtimeOverlay = APP_IMAGE_LAYOUT.resolveAt(appContentRoot).runtimeHomeDirectory();\n+            try {\n+                Files.createDirectories(file.getParent());\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+            fileContentInitializer.accept(file);\n@@ -309,2 +328,2 @@\n-        \/\/ Add a file to the runtime.\n-        var file = runtimeOverlay.resolve(pathInRuntime);\n+            return new FileCopy(file, outputFile);\n+        }\n@@ -312,2 +331,4 @@\n-        Files.createDirectories(file.getParent());\n-        TKit.createTextFile(file, List.of(\"blob\"));\n+        AppContentOverlayFileBuilder configureCmdOptions() {\n+            cmd.addArguments(\"--app-content\", appContentRoot.resolve(pathInAppContentDirectory().getName(0)));\n+            return this;\n+        }\n@@ -315,1 +336,4 @@\n-        addAppContentPath(cmd, appContentRoot, ApplicationLayout::runtimeDirectory);\n+        AppContentOverlayFileBuilder content(Consumer<Path> v) {\n+            fileContentInitializer = v;\n+            return this;\n+        }\n@@ -317,2 +341,5 @@\n-        return List.of(new FileCopy(file, cmd.appLayout().runtimeHomeDirectory().resolve(file.getFileName())));\n-    }\n+        AppContentOverlayFileBuilder textContent(String... lines) {\n+            return content(path -> {\n+                TKit.createTextFile(path, List.of(lines));\n+            });\n+        }\n@@ -320,4 +347,2 @@\n-    private static void addAppContentPath(JPackageCommand cmd, Path appContentRoot, Function<ApplicationLayout, Path> appImageComponentGetter) {\n-        var pathInAppImage = appImageComponentGetter.apply(APP_IMAGE_LAYOUT);\n-        if (TKit.isOSX()) {\n-            pathInAppImage = ApplicationLayout.macAppImage().contentDirectory().relativize(pathInAppImage);\n+        private Path pathInAppContentDirectory() {\n+            return APP_IMAGE_LAYOUT.resolveAt(cmd.outputBundle()).contentDirectory().relativize(outputFile);\n@@ -326,1 +351,4 @@\n-        cmd.addArguments(\"--app-content\", appContentRoot.resolve(pathInAppImage.getName(0)));\n+        private Consumer<Path> fileContentInitializer;\n+        private final JPackageCommand cmd;\n+        private final Path outputFile;\n+        private final Path appContentRoot;\n@@ -329,0 +357,1 @@\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImageFillOrderTest.java","additions":89,"deletions":60,"binary":false,"changes":149,"status":"modified"}]}