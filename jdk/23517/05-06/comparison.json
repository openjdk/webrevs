{"files":[{"patch":"@@ -78,0 +78,1 @@\n+            \/\/ We do not use the method here as we are using an automatic arena.\n@@ -79,3 +80,1 @@\n-            protected void threadTerminated(LocalArenaPoolImpl pool) {\n-                pool.close();\n-            }\n+            protected void threadTerminated(LocalArenaPoolImpl pool) {}\n@@ -96,1 +95,3 @@\n-        private final Arena arena;\n+        \/\/ Hold a reference so that the arena is not GC:ed before the thread dies.\n+        @Stable\n+        private final Arena originalArena;\n@@ -98,1 +99,1 @@\n-        private final MemorySegment segment;\n+        private final MemorySegment recyclableSegment;\n@@ -105,2 +106,2 @@\n-            this.arena = Arena.ofAuto();\n-            this.segment = arena.allocate(byteSize, byteAlignment);\n+            this.originalArena = Arena.ofAuto();\n+            this.recyclableSegment = originalArena.allocate(byteSize, byteAlignment);\n@@ -113,1 +114,1 @@\n-                    ? new SlicingArena((ArenaImpl) arena, segment)\n+                    ? new SlicingArena(originalArena, (ArenaImpl) arena, recyclableSegment)\n@@ -117,11 +118,0 @@\n-        void close() {\n-            \/\/ As we are using an automatic arena, we cannot close it here.\n-            \/\/ In order to prevent use-after-free issues, we make sure the arena\n-            \/\/ is reachable until the dying moments of a carrier thread. The reason for\n-            \/\/ this is reinterpreted segments carved out from the `arena` can be used\n-            \/\/ independently of the `arena` but are freed when the `arena` is collected.\n-            \/\/ Note: carved-out segments can only be used by threads on the\n-            \/\/ carrier thread.\n-            Reference.reachabilityFence(arena);\n-        }\n-\n@@ -204,0 +194,13 @@\n+            \/\/ In order to prevent use-after-free issues, we make sure the original arena\n+            \/\/ is reachable until the dying moments of a carrier thread AND remains\n+            \/\/ reachable whenever a carved out segment can be reached. The reason for\n+            \/\/ this is reinterpreted segments carved out from the original arena can be\n+            \/\/ used independently of the original arena but are freed when the\n+            \/\/ original arena is collected.\n+            \/\/\n+            \/\/ To solve this, we also hold a reference to the original arena from which we\n+            \/\/ carved out the `segment`. This covers the case when a VT was remounted on\n+            \/\/ another CarrierThread and the original CarrierThread\n+            \/\/ died and therefore the original arena was not referenced anymore.\n+            @Stable\n+            private final Arena originalArena;\n@@ -214,1 +217,2 @@\n-            private SlicingArena(ArenaImpl arena,\n+            private SlicingArena(Arena originalArena,\n+                                 ArenaImpl delegate,\n@@ -216,1 +220,2 @@\n-                this.delegate = arena;\n+                this.originalArena = originalArena;\n+                this.delegate = delegate;\n@@ -253,0 +258,2 @@\n+                \/\/ This is probably not strictly needed but shows intent\n+                Reference.reachabilityFence(originalArena);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CarrierLocalArenaPools.java","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"}]}