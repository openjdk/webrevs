{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.ref.Reference;\n@@ -79,2 +80,1 @@\n-                \/\/ As we are using Arena.ofAuto, we do not need to explicitly\n-                \/\/ close the pool.\n+                pool.close();\n@@ -96,0 +96,1 @@\n+        private final Arena arena;\n@@ -98,0 +99,1 @@\n+\n@@ -103,2 +105,2 @@\n-            this.segment = Arena.ofAuto()\n-                    .allocate(byteSize, byteAlignment);\n+            this.arena = Arena.ofAuto();\n+            this.segment = arena.allocate(byteSize, byteAlignment);\n@@ -115,0 +117,11 @@\n+        void close() {\n+            \/\/ As we are using an automatic arena, we cannot close it here.\n+            \/\/ In order to prevent use-after-free issues, we make sure the arena\n+            \/\/ is reachable until the dying moments of a carrier thread. The reason for\n+            \/\/ this is reinterpreted segments carved out from the `arena` can be used\n+            \/\/ independently of the `arena` but are freed when the `arena` is collected.\n+            \/\/ Note: carved-out segments can only be used by threads on the\n+            \/\/ carrier thread.\n+            Reference.reachabilityFence(arena);\n+        }\n+\n@@ -188,3 +201,0 @@\n-         * <p>\n-         * Todo: Should we expose a variant of this class as a complement\n-         *       to SlicingAllocator?\n@@ -226,1 +236,0 @@\n-                assertOwnerThread();\n@@ -261,1 +270,1 @@\n-    \/\/ Equivalent to:\n+    \/\/ Equivalent to but faster than:\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CarrierLocalArenaPools.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"}]}