{"files":[{"patch":"@@ -51,0 +51,2 @@\n+            \/\/ This method can be invoked by either a virtual thread, a platform thread\n+            \/\/ , or a carrier thread (e.g. ForkJoinPool-1-worker-1).\n@@ -72,0 +74,3 @@\n+            \/\/ This method is never invoked by a virtual thread but can be invoked by\n+            \/\/ a platform thread or a carrier thread (e.g. ForkJoinPool-1-worker-1).\n+            \/\/ Note: the fork join pool can expand\/contract dynamically\n@@ -73,2 +78,3 @@\n-            protected void threadTerminated(LocalArenaPoolImpl stack) {\n-                stack.close();\n+            protected void threadTerminated(LocalArenaPoolImpl pool) {\n+                \/\/ As we are using Arena.ofAuto, we do not need to explicitly\n+                \/\/ close the pool.\n@@ -90,2 +96,0 @@\n-        @Stable\n-        private final Arena pooledArena;\n@@ -99,2 +103,2 @@\n-            this.pooledArena = Arena.ofConfined();\n-            this.segment = pooledArena.allocate(byteSize, byteAlignment);\n+            this.segment = Arena.ofAuto()\n+                    .allocate(byteSize, byteAlignment);\n@@ -111,4 +115,0 @@\n-        public final void close() {\n-            pooledArena.close();\n-        }\n-\n@@ -198,0 +198,2 @@\n+            @Stable\n+            private final Thread owner;\n@@ -206,0 +208,1 @@\n+                this.owner = Thread.currentThread();\n@@ -223,0 +226,1 @@\n+                assertOwnerThread();\n@@ -238,0 +242,1 @@\n+                assertOwnerThread();\n@@ -245,0 +250,8 @@\n+\n+            @ForceInline\n+            void assertOwnerThread() {\n+                if (owner != Thread.currentThread()) {\n+                    throw new WrongThreadException();\n+                }\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CarrierLocalArenaPools.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -43,2 +43,3 @@\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.locks.LockSupport;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -47,0 +48,1 @@\n+import java.util.stream.LongStream;\n@@ -131,2 +133,6 @@\n-            CompletableFuture<Arena> future = CompletableFuture.supplyAsync(pool::take);\n-            Arena otherThreadArena = null;\n+            \/\/ Do not use CompletableFuture here as it might accidentally run on the\n+            \/\/ same carrier thread as a virtual thread.\n+            AtomicReference<Arena> otherThreadArena = new AtomicReference<>();\n+            var thread = Thread.ofPlatform().start(() -> {\n+                otherThreadArena.set(pool.take());\n+            });\n@@ -134,3 +140,3 @@\n-                otherThreadArena = future.get();\n-            } catch (InterruptedException | ExecutionException e) {\n-                fail(e);\n+                thread.join();\n+            } catch (InterruptedException ie) {\n+                fail(ie);\n@@ -138,1 +144,1 @@\n-            assertThrows(WrongThreadException.class, otherThreadArena::close);\n+            assertThrows(WrongThreadException.class, otherThreadArena.get()::close);\n@@ -291,0 +297,19 @@\n+\n+        \/\/ Force the ForkJoin pool to expand\/contract so that VT:s will be allocated\n+        \/\/ on FJP threads that are later terminated.\n+        long sum = LongStream.range(0, ForkJoinPool.getCommonPoolParallelism() * 2L)\n+                .parallel()\n+                .boxed()\n+                \/\/ Using a CompletableFuture expands the FJP\n+                .map(i -> CompletableFuture.supplyAsync(() -> {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(1);\n+                    } catch (InterruptedException ie) {\n+                        throw new RuntimeException(ie);\n+                    }\n+                    return i;\n+                }))\n+                .map(CompletableFuture::join)\n+                .mapToLong(Long::longValue)\n+                .sum();\n+\n@@ -292,1 +317,1 @@\n-        final CarrierLocalArenaPools pool = pools().limit(1).findFirst().orElseThrow();\n+        final CarrierLocalArenaPools pool = CarrierLocalArenaPools.create(POOL_SIZE);\n","filename":"test\/jdk\/java\/foreign\/TestCarrierLocalArenaPools.java","additions":34,"deletions":9,"binary":false,"changes":43,"status":"modified"}]}