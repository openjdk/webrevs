{"files":[{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.util.Objects;\n+\n+public final class Slot<T> {\n+\n+    public static <T> Slot<T> createEmpty() {\n+        return new Slot<>();\n+    }\n+\n+    public T get() {\n+        return Objects.requireNonNull(value);\n+    }\n+\n+    public void set(T v) {\n+        value = Objects.requireNonNull(v);\n+    }\n+\n+    private T value;\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/Slot.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.jpackage.internal.util.Slot;\n@@ -101,2 +102,3 @@\n-        List<Consumer<JPackageCommand>> verifier = new ArrayList<>();\n-        JPackageCommand[] appImageCmd = new JPackageCommand[1];\n+        var verifier = Slot.<Consumer<JPackageCommand>>createEmpty();\n+\n+        var appImageCmd = JPackageCommand.helloAppImage().setFakeRuntime();\n@@ -108,3 +110,3 @@\n-            appImageCmd[0] = cfg.init(JPackageCommand.helloAppImage().setFakeRuntime().executePrerequisiteActions());\n-            appImageCmd[0].execute();\n-            verifier.add(cfg.createPListFilesVerifier(appImageCmd[0]));\n+            cfg.init(appImageCmd.executePrerequisiteActions());\n+            appImageCmd.execute();\n+            verifier.set(cfg.createPListFilesVerifier(appImageCmd));\n@@ -112,1 +114,1 @@\n-            cmd.removeArgumentWithValue(\"--input\").setArgumentValue(\"--app-image\", appImageCmd[0].outputBundle());\n+            cmd.removeArgumentWithValue(\"--input\").setArgumentValue(\"--app-image\", appImageCmd.outputBundle());\n@@ -114,1 +116,1 @@\n-            verifier.get(0).accept(cmd);\n+            verifier.get().accept(cmd);\n@@ -122,1 +124,2 @@\n-        final Path runtimeImage[] = new Path[1];\n+\n+        var runtimeImage = Slot.<Path>createEmpty();\n@@ -129,1 +132,1 @@\n-                runtimeImage[0] = MacHelper.createRuntimeBundle(toConsumer(buildRuntimeBundleCmd -> {\n+                runtimeImage.set(MacHelper.createRuntimeBundle(toConsumer(buildRuntimeBundleCmd -> {\n@@ -136,1 +139,1 @@\n-                }));\n+                })));\n@@ -138,1 +141,1 @@\n-                runtimeImage[0] = JPackageCommand.createInputRuntimeImage();\n+                runtimeImage.set(JPackageCommand.createInputRuntimeImage());\n@@ -143,1 +146,1 @@\n-                    .setArgumentValue(\"--runtime-image\", runtimeImage[0]);\n+                    .setArgumentValue(\"--runtime-image\", runtimeImage.get());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"}]}