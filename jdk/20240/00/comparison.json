{"files":[{"patch":"@@ -57,1 +57,3 @@\n-ParCompactionManager::ParCompactionManager(PreservedMarks* preserved_marks) {\n+ParCompactionManager::ParCompactionManager(PreservedMarks* preserved_marks,\n+                                           ReferenceProcessor* ref_processor)\n+  : _mark_and_push_closure(this, ref_processor) {\n@@ -69,2 +71,3 @@\n-  assert(ParallelScavengeHeap::heap() != nullptr,\n-    \"Needed for initialization\");\n+  assert(ParallelScavengeHeap::heap() != nullptr, \"Needed for initialization\");\n+  assert(PSParallelCompact::ref_processor() != nullptr, \"precondition\");\n+  assert(ParallelScavengeHeap::heap()->workers().max_workers() != 0, \"Not initialized?\");\n@@ -88,1 +91,2 @@\n-    _manager_array[i] = new ParCompactionManager(_preserved_marks_set->get(i));\n+    _manager_array[i] = new ParCompactionManager(_preserved_marks_set->get(i),\n+                                                 PSParallelCompact::ref_processor());\n@@ -94,3 +98,0 @@\n-  assert(ParallelScavengeHeap::heap()->workers().max_workers() != 0,\n-    \"Not initialized?\");\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/classLoaderData.hpp\"\n@@ -43,0 +44,13 @@\n+class PCMarkAndPushClosure: public ClaimMetadataVisitingOopIterateClosure {\n+  ParCompactionManager* _compaction_manager;\n+\n+  template <typename T> void do_oop_work(T* p);\n+public:\n+  PCMarkAndPushClosure(ParCompactionManager* cm, ReferenceProcessor* rp) :\n+    ClaimMetadataVisitingOopIterateClosure(ClassLoaderData::_claim_stw_fullgc_mark, rp),\n+    _compaction_manager(cm) { }\n+\n+  virtual void do_oop(oop* p)                     { do_oop_work(p); }\n+  virtual void do_oop(narrowOop* p)               { do_oop_work(p); }\n+};\n+\n@@ -50,0 +64,1 @@\n+  friend class PCAddThreadRootsMarkingTaskClosure;\n@@ -74,0 +89,1 @@\n+  PCMarkAndPushClosure _mark_and_push_closure;\n@@ -107,1 +123,3 @@\n-  ParCompactionManager(PreservedMarks* preserved_marks);\n+  ParCompactionManager(PreservedMarks* preserved_marks,\n+                       ReferenceProcessor* ref_processor);\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,23 +44,4 @@\n-class PCMarkAndPushClosure: public OopClosure {\n-private:\n-  ParCompactionManager* _compaction_manager;\n-public:\n-  PCMarkAndPushClosure(ParCompactionManager* cm) : _compaction_manager(cm) { }\n-\n-  template <typename T> void do_oop_work(T* p)      { _compaction_manager->mark_and_push(p); }\n-  virtual void do_oop(oop* p)                     { do_oop_work(p); }\n-  virtual void do_oop(narrowOop* p)               { do_oop_work(p); }\n-};\n-\n-class PCIterateMarkAndPushClosure: public ClaimMetadataVisitingOopIterateClosure {\n-private:\n-  ParCompactionManager* _compaction_manager;\n-public:\n-  PCIterateMarkAndPushClosure(ParCompactionManager* cm, ReferenceProcessor* rp) :\n-    ClaimMetadataVisitingOopIterateClosure(ClassLoaderData::_claim_stw_fullgc_mark, rp),\n-    _compaction_manager(cm) { }\n-\n-  template <typename T> void do_oop_work(T* p)      { _compaction_manager->mark_and_push(p); }\n-  virtual void do_oop(oop* p)                     { do_oop_work(p); }\n-  virtual void do_oop(narrowOop* p)               { do_oop_work(p); }\n-};\n+template <typename T>\n+inline void PCMarkAndPushClosure::do_oop_work(T* p) {\n+  _compaction_manager->mark_and_push(p);\n+}\n@@ -164,1 +145,0 @@\n-  PCIterateMarkAndPushClosure cl(this, PSParallelCompact::ref_processor());\n@@ -167,1 +147,1 @@\n-    cl.do_klass(obj->klass());\n+    _mark_and_push_closure.do_klass(obj->klass());\n@@ -170,1 +150,1 @@\n-    obj->oop_iterate(&cl);\n+    obj->oop_iterate(&_mark_and_push_closure);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1191,2 +1191,3 @@\n-    PCMarkAndPushClosure mark_and_push_closure(cm);\n-    MarkingNMethodClosure mark_and_push_in_blobs(&mark_and_push_closure, !NMethodToOopClosure::FixRelocations, true \/* keepalive nmethods *\/);\n+    MarkingNMethodClosure mark_and_push_in_blobs(&cm->_mark_and_push_closure,\n+                                                 !NMethodToOopClosure::FixRelocations,\n+                                                 true \/* keepalive nmethods *\/);\n@@ -1194,1 +1195,1 @@\n-    thread->oops_do(&mark_and_push_closure, &mark_and_push_in_blobs);\n+    thread->oops_do(&cm->_mark_and_push_closure, &mark_and_push_in_blobs);\n@@ -1235,2 +1236,0 @@\n-    PCMarkAndPushClosure mark_and_push_closure(cm);\n-\n@@ -1238,1 +1237,1 @@\n-      CLDToOopClosure cld_closure(&mark_and_push_closure, ClassLoaderData::_claim_stw_fullgc_mark);\n+      CLDToOopClosure cld_closure(&cm->_mark_and_push_closure, ClassLoaderData::_claim_stw_fullgc_mark);\n@@ -1245,2 +1244,4 @@\n-    PCAddThreadRootsMarkingTaskClosure closure(worker_id);\n-    Threads::possibly_parallel_threads_do(true \/* is_par *\/, &closure);\n+    {\n+      PCAddThreadRootsMarkingTaskClosure closure(worker_id);\n+      Threads::possibly_parallel_threads_do(_active_workers > 1 \/* is_par *\/, &closure);\n+    }\n@@ -1250,1 +1251,1 @@\n-      _oop_storage_set_par_state.oops_do(&mark_and_push_closure);\n+      _oop_storage_set_par_state.oops_do(&cm->_mark_and_push_closure);\n@@ -1272,1 +1273,0 @@\n-    PCMarkAndPushClosure keep_alive(cm);\n@@ -1275,1 +1275,1 @@\n-    _rp_task->rp_work(worker_id, PSParallelCompact::is_alive_closure(), &keep_alive, &enqueue, &complete_gc);\n+    _rp_task->rp_work(worker_id, PSParallelCompact::is_alive_closure(), &cm->_mark_and_push_closure, &enqueue, &complete_gc);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}