{"files":[{"patch":"@@ -32,3 +32,0 @@\n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.FileNotFoundException;\n@@ -36,0 +33,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -41,1 +41,1 @@\n-    public static final String SRC_HASH_REGEXP = \":((hg)|(git)):[a-z0-9]*\\\\+?\";\n+    public static final String SRC_HASH_REGEXP = \":git:[a-z0-9]*\\\\+?\";\n@@ -43,5 +43,8 @@\n-    private final boolean isOpenJDK;\n-    CheckReleaseFile(String dataFile, boolean isOpenJDK) {\n-        this.isOpenJDK = isOpenJDK;\n-        \/\/ Read data files\n-        readFile(dataFile);\n+    public static void main(String args[]) throws IOException {\n+        String jdkPath = System.getProperty(\"test.jdk\");\n+        String runtime = System.getProperty(\"java.runtime.name\");\n+\n+        System.out.println(\"JDK Path : \" + jdkPath);\n+        System.out.println(\"Runtime Name : \" + runtime);\n+\n+        checkReleaseFile(Path.of(jdkPath));\n@@ -50,3 +53,2 @@\n-    private void readFile(String fileName) {\n-        String fishForSOURCE = null;\n-        String implementor = null;\n+    private static void checkReleaseFile(Path javaHome) throws IOException {\n+        String source = null;\n@@ -55,1 +57,1 @@\n-        File file = new File(fileName);\n+        Path releaseFile = javaHome.resolve(\"release\");\n@@ -58,2 +60,1 @@\n-        try (BufferedReader buffRead =\n-            new BufferedReader(new FileReader(fileName))) {\n+        try (BufferedReader buffRead = Files.newBufferedReader(releaseFile)) {\n@@ -74,7 +75,1 @@\n-                    fishForSOURCE = readIn;\n-                    continue;\n-                }\n-\n-                \/\/ grab IMPLEMENTOR line\n-                if (readIn.startsWith(\"IMPLEMENTOR=\")) {\n-                    implementor = readIn;\n+                    source = readIn;\n@@ -90,6 +85,0 @@\n-        } catch (FileNotFoundException fileExcept) {\n-            throw new RuntimeException(\"File \" + fileName +\n-                                       \" not found reading data!\", fileExcept);\n-        } catch (IOException ioExcept) {\n-            throw new RuntimeException(\"Unexpected problem reading data!\",\n-                                       ioExcept);\n@@ -99,1 +88,1 @@\n-        if (fishForSOURCE == null) {\n+        if (source == null) {\n@@ -102,4 +91,1 @@\n-\n-        \/\/ Check if implementor is Oracle\n-        boolean isOracle = (implementor != null) && implementor.contains(\"Oracle Corporation\");\n-        checkSource(fishForSOURCE, isOracle);\n+        checkSource(source);\n@@ -117,1 +103,1 @@\n-    private void checkSource(String fishForSOURCE, boolean isOracle) {\n+    private static void checkSource(String source) {\n@@ -119,1 +105,1 @@\n-        System.out.println(\"The source string found: \" + fishForSOURCE);\n+        System.out.println(\"The source string found: \" + source);\n@@ -123,1 +109,1 @@\n-        Matcher valueMatcher = valuePattern.matcher(fishForSOURCE);\n+        Matcher valueMatcher = valuePattern.matcher(source);\n@@ -140,16 +126,7 @@\n-        if (isOracle) {\n-            if (isOpenJDK) {\n-                if (values.length != 1) {\n-                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n-                            \" Should be 1 for Oracle built OpenJDK.\");\n-                }\n-            } else {\n-                if (values.length != 2) {\n-                    throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n-                            \" Should be 2 for OracleJDK.\");\n-                }\n-                \/\/ Second value MUST start with \"open:\" for OracleJDK\n-                String openRegexp = \"open\" + SRC_HASH_REGEXP;\n-                if (!values[1].matches(openRegexp)) {\n-                    throw new RuntimeException(\"The test failed, second element did not match regexp: \" + openRegexp);\n-                }\n+        String runtime = System.getProperty(\"java.runtime.name\");\n+        String vendor = System.getProperty(\"java.vendor\");\n+        if (runtime.contains(\"OpenJDK\") && vendor.contains(\"Oracle Corporation\")) {\n+            System.out.println(\"Oracle built OpenJDK, verifying SOURCE format\");\n+            if (values.length != 1) {\n+                throw new RuntimeException(\"The test failed, wrong number of elements in SOURCE list.\" +\n+                                           \" Should be 1 for Oracle built OpenJDK.\");\n@@ -157,0 +134,2 @@\n+        } else {\n+            System.out.println(\"Not Oracle built OpenJDK, skipping further SOURCE verification\");\n@@ -162,10 +141,0 @@\n-\n-    public static void main(String args[]) {\n-        String jdkPath = System.getProperty(\"test.jdk\");\n-        String runtime = System.getProperty(\"java.runtime.name\");\n-\n-        System.out.println(\"JDK Path : \" + jdkPath);\n-        System.out.println(\"Runtime Name : \" + runtime);\n-\n-        new CheckReleaseFile(jdkPath + \"\/release\", runtime.contains(\"OpenJDK\"));\n-    }\n","filename":"test\/jdk\/build\/releaseFile\/CheckReleaseFile.java","additions":31,"deletions":62,"binary":false,"changes":93,"status":"modified"}]}