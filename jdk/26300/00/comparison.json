{"files":[{"patch":"@@ -114,1 +114,1 @@\n- * @apiNote\n+ * @deprecated\n@@ -121,1 +121,0 @@\n- * @see SocketPermission\n@@ -131,0 +130,1 @@\n+@Deprecated(since = \"26\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -272,3 +273,16 @@\n-     *           then the SocketPermission\n-     *           constructed with this object's host must imply the\n-     *           SocketPermission constructed with <i>codesource<\/i>'s host.\n+     *           then the following checks are made in order:\n+     *           <ul>\n+     *           <li> If this object's host was initialized with a single IP\n+     *           address then one of <i>codesource<\/i>'s IP addresses must be\n+     *           equal to this object's IP address.\n+     *           <li> If this object's host is a wildcard domain (such as\n+     *           *.example.com), then <i>codesource<\/i>'s canonical host name\n+     *           (the name without any preceding *) must end with this object's\n+     *           canonical host name. For example, *.example.com implies\n+     *           *.foo.example.com.\n+     *           <li> If this object's host was not initialized with a single\n+     *           IP address, then one of this object's IP addresses must equal\n+     *           one of <i>codesource<\/i>'s IP addresses or this object's\n+     *           canonical host name must equal <i>codesource<\/i>'s canonical\n+     *           host name.\n+     *           <\/ul>\n@@ -390,0 +404,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSource.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4866847 7152564 7155693\n+ * @bug 4866847 7152564 7155693 8356557\n@@ -31,0 +31,1 @@\n+import java.net.InetAddress;\n@@ -51,0 +52,34 @@\n+        thisURL = new URL(\"http\", \"204.160.241.0\", \"file\");\n+        thatURL = new URL(\"http\", \"localhost\", \"file\");\n+        \/\/ ip address should not imply localhost's IP address\n+        testImplies(thisURL, thatURL, false);\n+\n+        thisURL = new URL(\"http\", \"204.160.241.0\", \"file\");\n+        thatURL = new URL(\"http\", \"*.example.com\", \"file\");\n+        \/\/ ip address should not imply wildcarded host\n+        testImplies(thisURL, thatURL, false);\n+\n+        InetAddress ia = InetAddress.getLocalHost();\n+        thisURL = new URL(\"http\", ia.getHostAddress(), \"file\");\n+        thatURL = new URL(\"http\", ia.getHostName(), \"file\");\n+        \/\/ ip address should imply host name with same ip address\n+        testImplies(thisURL, thatURL, true);\n+\n+        thisURL = new URL(\"http\", \"*.example.com\", \"file\");\n+        thatURL = new URL(\"http\", \"*.foo.example.com\", \"file\");\n+        \/\/ wildcarded host name should imply wildcarded host name ending with\n+        \/\/ same canonical host name\n+        testImplies(thisURL, thatURL, true);\n+\n+        thisURL = new URL(\"http\", \"example.com\", \"file\");\n+        thatURL = new URL(\"http\", \"*.foo.example.com\", \"file\");\n+        \/\/ host name should not imply wildcarded host name ending with same\n+        \/\/ canonical host name\n+        testImplies(thisURL, thatURL, false);\n+\n+        thisURL = new URL(\"http\", \"*.example.com\", \"file\");\n+        thatURL = new URL(\"http\", \"foo.example.com\", \"file\");\n+        \/\/ wildcarded host name should imply host name ending with same\n+        \/\/ canonical host name\n+        testImplies(thisURL, thatURL, true);\n+\n","filename":"test\/jdk\/java\/security\/CodeSource\/Implies.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"}]}