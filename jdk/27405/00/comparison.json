{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Optional;\n@@ -67,10 +68,11 @@\n-        Files.walkFileTree(src, new SimpleFileVisitor<Path>() {\n-            @Override\n-            public FileVisitResult preVisitDirectory(final Path dir,\n-                    final BasicFileAttributes attrs) {\n-                if (isPathMatch(dir, excludes)) {\n-                    return FileVisitResult.SKIP_SUBTREE;\n-                } else {\n-                    copyActions.add(new CopyAction(null, dest.resolve(src.\n-                            relativize(dir))));\n-                    return FileVisitResult.CONTINUE;\n+        if (Files.isDirectory(src)) {\n+            Files.walkFileTree(src, new SimpleFileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult preVisitDirectory(final Path dir,\n+                        final BasicFileAttributes attrs) {\n+                    if (isPathMatch(dir, excludes)) {\n+                        return FileVisitResult.SKIP_SUBTREE;\n+                    } else {\n+                        copyActions.add(new CopyAction(null, dest.resolve(src.relativize(dir))));\n+                        return FileVisitResult.CONTINUE;\n+                    }\n@@ -78,1 +80,0 @@\n-            }\n@@ -80,6 +81,7 @@\n-            @Override\n-            public FileVisitResult visitFile(final Path file,\n-                    final BasicFileAttributes attrs) {\n-                if (!isPathMatch(file, excludes)) {\n-                    copyActions.add(new CopyAction(file, dest.resolve(src.\n-                            relativize(file))));\n+                @Override\n+                public FileVisitResult visitFile(final Path file,\n+                        final BasicFileAttributes attrs) {\n+                    if (!isPathMatch(file, excludes)) {\n+                        copyActions.add(new CopyAction(file, dest.resolve(src.relativize(file))));\n+                    }\n+                    return FileVisitResult.CONTINUE;\n@@ -87,3 +89,7 @@\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n+            });\n+        } else if (!isPathMatch(src, excludes)) {\n+            Optional.ofNullable(dest.getParent()).ifPresent(dstDir -> {\n+                copyActions.add(new CopyAction(null, dstDir));\n+            });\n+            copyActions.add(new CopyAction(src, dest));\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/FileUtils.java","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+\n+public class FileUtilsTest {\n+\n+    @ParameterizedTest\n+    @EnumSource(ExcludeType.class)\n+    public void test_copyRecursive_dir(ExcludeType exclude, @TempDir Path workdir) throws IOException {\n+        Files.createDirectories(workdir.resolve(\"from\/foo\/bar\"));\n+        Files.createDirectories(workdir.resolve(\"from\/foo\/buz\"));\n+        Files.writeString(workdir.resolve(\"from\/foo\/bar\/file.txt\"), \"Hello\");\n+\n+        List<Path> excludes = new ArrayList<>();\n+        switch (exclude) {\n+            case EXCLUDE_FILE -> {\n+                excludes.add(Path.of(\"file.txt\"));\n+            }\n+            case EXCLUDE_DIR -> {\n+                excludes.add(Path.of(\"bar\"));\n+            }\n+            case EXCLUDE_SUBDIR -> {\n+                excludes.add(Path.of(\"foo\"));\n+            }\n+            case EXCLUDE_NONE -> {\n+            }\n+        }\n+\n+        FileUtils.copyRecursive(workdir.resolve(\"from\"), workdir.resolve(\"to\"), excludes);\n+\n+        assertEquals(\"Hello\", Files.readString(workdir.resolve(\"from\/foo\/bar\/file.txt\")));\n+\n+        switch (exclude) {\n+            case EXCLUDE_FILE -> {\n+                assertFalse(Files.exists(workdir.resolve(\"to\/foo\/bar\/file.txt\")));\n+                assertTrue(Files.isDirectory(workdir.resolve(\"to\/foo\/bar\")));\n+            }\n+            case EXCLUDE_DIR -> {\n+                assertFalse(Files.exists(workdir.resolve(\"to\/foo\/bar\")));\n+                assertTrue(Files.isDirectory(workdir.resolve(\"to\/foo\/buz\")));\n+            }\n+            case EXCLUDE_SUBDIR -> {\n+                assertFalse(Files.exists(workdir.resolve(\"to\/foo\")));\n+                assertTrue(Files.isDirectory(workdir.resolve(\"to\")));\n+            }\n+            case EXCLUDE_NONE -> {\n+                assertEquals(\"Hello\", Files.readString(workdir.resolve(\"to\/foo\/bar\/file.txt\")));\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void test_copyRecursive_file(boolean exclude, @TempDir Path workdir) throws IOException {\n+        Files.createDirectories(workdir.resolve(\"from\/foo\/bar\"));\n+        Files.writeString(workdir.resolve(\"from\/foo\/bar\/file.txt\"), \"Hello\");\n+\n+        List<Path> excludes = new ArrayList<>();\n+        if (exclude) {\n+            excludes.add(Path.of(\"bar\/file.txt\"));\n+        }\n+\n+        FileUtils.copyRecursive(workdir.resolve(\"from\/foo\/bar\/file.txt\"), workdir.resolve(\"to\/foo\/bar\/file.txt\"), excludes);\n+\n+        assertEquals(\"Hello\", Files.readString(workdir.resolve(\"from\/foo\/bar\/file.txt\")));\n+        if (exclude) {\n+            assertFalse(Files.exists(workdir.resolve(\"to\")));\n+        } else {\n+            assertEquals(\"Hello\", Files.readString(workdir.resolve(\"to\/foo\/bar\/file.txt\")));\n+        }\n+    }\n+\n+    enum ExcludeType {\n+        EXCLUDE_NONE,\n+        EXCLUDE_FILE,\n+        EXCLUDE_DIR,\n+        EXCLUDE_SUBDIR,\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/util\/FileUtilsTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -172,1 +172,0 @@\n-            Files.createDirectories(dstPath.getParent());\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}