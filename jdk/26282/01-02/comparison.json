{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -27,0 +28,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n@@ -62,0 +65,15 @@\n+            CharBuffer lehbbAsCB = ByteBuffer.allocate(buf.length * 2)\n+                                             .order(ByteOrder.LITTLE_ENDIAN)\n+                                             .asCharBuffer()\n+                                             .put(buf)\n+                                             .position(i);\n+            args.add(Arguments.of(lehbbAsCB, buf, i, buf.length, \"LE HeapByteBuffer as CharBuffer index \" + i + \" to end\"));\n+\n+            CharBuffer behbdAsCB = ByteBuffer.allocateDirect(buf.length * 2)\n+                                             .order(ByteOrder.BIG_ENDIAN)\n+                                             .asCharBuffer()\n+                                             .put(buf)\n+                                             .position(i);\n+            args.add(Arguments.of(behbdAsCB, buf, i, buf.length,\n+                    \"BE DirectByteBuffer as CharBuffer index \" + i + \" to end\"));\n+\n@@ -80,0 +98,20 @@\n+\n+                CharBuffer behbbAsCB = ByteBuffer.allocate(buf.length * 2)\n+                                                 .order(ByteOrder.BIG_ENDIAN)\n+                                                 .asCharBuffer()\n+                                                 .put(buf)\n+                                                 .position(1)\n+                                                 .slice()\n+                                                 .position(i - 1)\n+                                                 .limit(end - 1);\n+                args.add(Arguments.of(behbbAsCB, buf, i, buf.length - i, \"BE HeapByteBuffer as CharBuffer index \" + i + \" to \" + end));\n+\n+                CharBuffer ledbbAsCB = ByteBuffer.allocateDirect(buf.length * 2)\n+                                                 .order(ByteOrder.LITTLE_ENDIAN)\n+                                                 .asCharBuffer()\n+                                                 .put(buf)\n+                                                 .position(1)\n+                                                 .slice()\n+                                                 .position(i - 1)\n+                                                 .limit(end - 1);\n+                args.add(Arguments.of(ledbbAsCB, buf, i, buf.length - i, \"LE DirectByteBuffer as CharBuffer index \" + i + \" to \" + end));\n@@ -177,0 +215,20 @@\n+        assertFalse(chars.hasNext(), \"chars has more elements than expected \" + description);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"charBufferArguments\")\n+    void testCodePoints(CharSequence actual, char[] expected, int start, int stop, String description) {\n+        OfInt codePoints = actual.codePoints().iterator();\n+        for (int i = 0, j = stop - start; i < j; ++i) {\n+            char c1 = expected[start + i];\n+            int expectedCodePoint = c1;\n+            if (Character.isHighSurrogate(c1) && (i + 1) < j) {\n+                char c2 = expected[i + 1];\n+                if (Character.isLowSurrogate(c2)) {\n+                    expectedCodePoint = Character.toCodePoint(c1, c2);\n+                    ++i;\n+                }\n+            }\n+            assertEquals(expectedCodePoint, codePoints.nextInt(), \"code point at \" + i + \": \" + description);\n+        }\n+        assertFalse(codePoints.hasNext(), \"codePoints has more elements than expected \" + description);\n","filename":"test\/jdk\/java\/nio\/Buffer\/CharBufferAsCharSequenceTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"}]}