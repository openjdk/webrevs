{"files":[{"patch":"@@ -94,5 +94,4 @@\n-    \/\/ Maximum possible size of name length + comment length + extra length\n-    \/\/ for entries in order to not exceed 65,489 bytes minus 46 bytes for the CEN\n-    \/\/ header length\n-    private static final int MAX_NAME_COMMENT_EXTRA_SIZE =\n-            0xFFFF - ZipFile.CENHDR;\n+    \/\/ CEN header size + name length + comment length + extra length\n+    \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n+    \/\/ 4.4.10, 4.4.11, & 4.4.12.\n+    private static final int MAX_COMBINED_CEN_HEADER_SIZE = 0xFFFF;\n@@ -106,2 +105,2 @@\n-     * @throws IllegalArgumentException if the entry name is longer than\n-     *         65,489 bytes\n+     * @throws IllegalArgumentException if the combined length of the entry name\n+     * and {@linkplain #CENHDR CEN Header size} exceeds 65,535 bytes.\n@@ -111,1 +110,1 @@\n-        if (name.length() > MAX_NAME_COMMENT_EXTRA_SIZE) {\n+        if (!isCENHeaderValid(name, null, null)) {\n@@ -526,2 +525,4 @@\n-     * @throws IllegalArgumentException if the length of the specified\n-     *         extra field data is greater than 65,489 bytes\n+     * @throws IllegalArgumentException if the combined length of the specified\n+     * extra field data, the {@linkplain #getName() entry name},\n+     * the {@linkplain #getComment() entry comment}, and\n+     * {@linkplain #CENHDR CEN Header size}, exceeds 65,535 bytes.\n@@ -548,1 +549,1 @@\n-            if (extra.length > MAX_NAME_COMMENT_EXTRA_SIZE) {\n+            if (!isCENHeaderValid(name, extra, comment)) {\n@@ -650,2 +651,4 @@\n-     * @throws IllegalArgumentException if the length of the specified\n-     *         comment string is greater than 65,489 bytes\n+     * @throws IllegalArgumentException if the combined length\n+     * of the specified entry comment, {@linkplain #getName() entry name},\n+     * the {@linkplain #getExtra() extra field data}, and\n+     * {@linkplain #CENHDR CEN Header size}, exceeds 65,535 bytes.\n@@ -656,1 +659,1 @@\n-            if (comment.length() > MAX_NAME_COMMENT_EXTRA_SIZE) {\n+            if (!isCENHeaderValid(name, extra, comment)) {\n@@ -710,0 +713,16 @@\n+\n+    \/**\n+     * Validate that the CEN header size + name length + comment length + extra length\n+     *  do not exceed 65,535 bytes per the PKWare APP.NOTE\n+     *  4.4.10, 4.4.11, & 4.4.12.\n+     * @param name Zip entry name\n+     * @param extra Zip extra data\n+     * @param comment Zip entry comment\n+     * @return true if valid CEN Header size; false otherwise\n+     *\/\n+    private static  boolean isCENHeaderValid(String name, byte[] extra, String comment) {\n+        int clen = comment == null ? 0 : comment.length();\n+        int elen = extra == null ? 0 : extra.length;\n+        int headerSize = CENHDR + name.length() + clen + elen;\n+        return headerSize <= MAX_COMBINED_CEN_HEADER_SIZE ? true : false;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipEntry.java","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -1,184 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8336025\n- * @summary Verify that ZipOutputStream throws a ZipException when the\n- * CEN header size + name length + comment length + extra length exceeds\n- * 65,535 bytes\n- * @run junit ZipOutputStreamMaxCenHdrTest\n- *\/\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Arrays;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipException;\n-import java.util.zip.ZipFile;\n-import java.util.zip.ZipOutputStream;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class ZipOutputStreamMaxCenHdrTest {\n-\n-    \/\/ CEN header size + name length + comment length + extra length\n-    \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n-    \/\/ 4.4.10, 4.4.11, & 4.4.12.\n-    static final int MAX_COMBINED_CEN_HEADER_SIZE = 0xFFFF;\n-\n-    \/\/ Maximum possible size of name length + comment length + extra length\n-    \/\/ for entries in order to not exceed 65,489 bytes minus 46 bytes for the CEN\n-    \/\/ header length\n-    static final int MAX_NAME_COMMENT_EXTRA_SIZE =\n-            MAX_COMBINED_CEN_HEADER_SIZE - ZipFile.CENHDR;\n-\n-    \/\/ Tag for the 'unknown' field type, specified in APPNOTE.txt 'Third party mappings'\n-    static final short UNKNOWN_ZIP_TAG = (short) 0x9902;\n-\n-    \/\/ ZIP file to be used by the tests\n-    static final Path ZIP_FILE = Path.of(\"maxCENHdrTest.zip\");\n-    \/\/ Zip Entry name used by tests\n-    static final String ENTRY_NAME = \"EntryName\";\n-    \/\/ Zip Entry comment used by tests\n-    static final String ENTRY_COMMENT = \"A Comment\";\n-    \/\/ Max length minus the size of the ENTRY_NAME or ENTRY_COMMENT\n-    static final int MAX_FIELD_LEN_MINUS_ENTRY_NAME =\n-            MAX_NAME_COMMENT_EXTRA_SIZE - 9;\n-\n-    \/**\n-     * Clean up prior to test run\n-     *\n-     * @throws IOException if an error occurs\n-     *\/\n-    @BeforeEach\n-    public void startUp() throws IOException {\n-        Files.deleteIfExists(ZIP_FILE);\n-    }\n-\n-    \/**\n-     * Validate a ZipException is thrown when the combined CEN Header, name\n-     * length, comment length, and extra data length exceeds 65,535 bytes when\n-     * the ZipOutputStream is closed.\n-     *\/\n-    @ParameterizedTest\n-    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n-    void setCommentTest(int length) throws IOException {\n-        final byte[] bytes = new byte[length];\n-        Arrays.fill(bytes, (byte) 'a');\n-        boolean expectZipException =  length + ENTRY_NAME.length() > MAX_NAME_COMMENT_EXTRA_SIZE ;\n-        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n-        String comment = new String(bytes, StandardCharsets.UTF_8);\n-        System.out.printf(\"Comment Len= %s, exception: %s%n\", comment.length(), expectZipException);\n-        \/\/ The comment length will trigger the ZipException\n-        zipEntry.setComment(new String(bytes, StandardCharsets.UTF_8));\n-        boolean receivedException = writeZipEntry(zipEntry, expectZipException);\n-        assertEquals(receivedException, expectZipException);\n-    }\n-\n-    \/**\n-     * Validate an ZipException is thrown when the combined CEN Header, name\n-     * length, comment length, and extra data length exceeds 65,535 bytes when\n-     * the ZipOutputStream is closed.\n-     *\/\n-    @ParameterizedTest\n-    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n-    void setNameTest(int length) throws IOException {\n-        boolean expectZipException = length + ENTRY_COMMENT.length() > MAX_NAME_COMMENT_EXTRA_SIZE;\n-        final byte[] bytes = new byte[length];\n-        Arrays.fill(bytes, (byte) 'a');\n-        String name = new String(bytes, StandardCharsets.UTF_8);\n-        \/\/ The name length will trigger the ZipException\n-        ZipEntry zipEntry = new ZipEntry(name);\n-        zipEntry.setComment(ENTRY_COMMENT);\n-        System.out.printf(\"name Len= %s, exception: %s%n\", name.length(), expectZipException);\n-        boolean receivedException = writeZipEntry(zipEntry, expectZipException);\n-        assertEquals(receivedException, expectZipException);\n-    }\n-\n-    \/**\n-     * Validate an ZipException is thrown when the combined CEN Header, name\n-     * length, comment length, and extra data length exceeds 65,535 bytes when\n-     * the ZipOutputStream is closed.\n-     *\/\n-    @ParameterizedTest\n-    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n-            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n-    void setExtraTest(int length) throws IOException {\n-        final byte[] bytes = new byte[length];\n-        boolean expectZipException =  length + ENTRY_NAME.length() > MAX_NAME_COMMENT_EXTRA_SIZE ;\n-        \/\/ Little-endian ByteBuffer for updating the header fields\n-        ByteBuffer buffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n-        \/\/ We use the 'unknown' tag, specified in APPNOTE.TXT, 4.6.1 Third party mappings'\n-        buffer.putShort(UNKNOWN_ZIP_TAG);\n-        \/\/ Size of the actual (empty) data\n-        buffer.putShort((short) (length - 2 * Short.BYTES));\n-        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n-        System.out.printf(\"extra Len= %s, exception: %s%n\", bytes.length, expectZipException);\n-        \/\/ The extra data length will trigger the ZipException\n-        zipEntry.setExtra(bytes);\n-        boolean receivedException = writeZipEntry(zipEntry, expectZipException);\n-        assertEquals(receivedException, expectZipException);\n-    }\n-\n-    \/**\n-     * Write a single Zip entry using ZipOutputStream\n-     * @param zipEntry the ZipEntry to write\n-     * @param expectZipException true if a ZipException is expected, false otherwse\n-     * @return true if a ZipException was thrown\n-     * @throws IOException if an error occurs\n-     *\/\n-    private static boolean writeZipEntry(ZipEntry zipEntry, boolean expectZipException)\n-            throws IOException {\n-        boolean receivedException = false;\n-        try (ZipOutputStream zos = new ZipOutputStream(\n-                new BufferedOutputStream(Files.newOutputStream(ZIP_FILE)))) {\n-            if (expectZipException) {\n-                ZipException ex = assertThrows(ZipException.class, () -> zos.putNextEntry(zipEntry));\n-                assertTrue(ex.getMessage().matches(\".*bad header size.*\"),\n-                        \"Unexpected ZipException message: \" + ex.getMessage());\n-                receivedException = true;\n-            } else {\n-                zos.putNextEntry(zipEntry);\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Received Unexpected Exception\", e);\n-        }\n-        return receivedException;\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipOutputStream\/ZipOutputStreamMaxCenHdrTest.java","additions":0,"deletions":184,"binary":false,"changes":184,"status":"deleted"}]}