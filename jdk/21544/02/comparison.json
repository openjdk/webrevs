{"files":[{"patch":"@@ -94,1 +94,5 @@\n-\n+    \/\/ Maximum possible size of name length + comment length + extra length\n+    \/\/ for entries in order to not exceed 65,489 bytes minus 46 bytes for the CEN\n+    \/\/ header length\n+    private static final int MAX_NAME_COMMENT_EXTRA_SIZE =\n+            0xFFFF - ZipFile.CENHDR;\n@@ -103,1 +107,1 @@\n-     *         0xFFFF bytes\n+     *         65,489 bytes\n@@ -107,1 +111,1 @@\n-        if (name.length() > 0xFFFF) {\n+        if (name.length() > MAX_NAME_COMMENT_EXTRA_SIZE) {\n@@ -523,1 +527,1 @@\n-     *         extra field data is greater than 0xFFFF bytes\n+     *         extra field data is greater than 65,489 bytes\n@@ -544,1 +548,1 @@\n-            if (extra.length > 0xFFFF) {\n+            if (extra.length > MAX_NAME_COMMENT_EXTRA_SIZE) {\n@@ -645,5 +649,0 @@\n-     *\n-     * <p>ZIP entry comments have maximum length of 0xffff. If the length of the\n-     * specified comment string is greater than 0xFFFF bytes after encoding, only\n-     * the first 0xFFFF bytes are output to the ZIP file entry.\n-     *\n@@ -651,1 +650,2 @@\n-     *\n+     * @throws IllegalArgumentException if the length of the specified\n+     *         comment string is greater than 65,489 bytes\n@@ -655,0 +655,5 @@\n+        if (comment != null) {\n+            if (comment.length() > MAX_NAME_COMMENT_EXTRA_SIZE) {\n+                throw new IllegalArgumentException(\"entry comment too long\");\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipEntry.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -265,0 +265,9 @@\n+        \/\/ CEN header size + name length + comment length + extra length\n+        \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n+        \/\/ 4.4.10, 4.4.11, & 4.4.12.\n+        int clen = e.comment == null ? 0 : e.comment.length();\n+        int elen = e.extra == null ? 0 : e.extra.length;\n+        int headerSize = CENHDR + e.name.length() + clen + elen;\n+        if (headerSize > 0xFFFF ) {\n+            throw new ZipException(\"invalid CEN header (bad header size)\");\n+        }\n@@ -605,0 +614,16 @@\n+\n+        int clen = 0;\n+        byte[] commentBytes = null;\n+        if (e.comment != null) {\n+            commentBytes = zc.getBytes(e.comment);\n+            clen = commentBytes.length;\n+        }\n+\n+        \/\/ CEN header size + name length + comment length + extra length\n+        \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n+        \/\/ 4.4.10, 4.4.11, & 4.4.12.\n+        int headerSize = CENHDR + nlen + clen + elen;\n+        if (headerSize > 0xFFFF ) {\n+            throw new ZipException(\"invalid CEN header (bad header size)\");\n+        }\n+\n@@ -636,6 +661,0 @@\n-        byte[] commentBytes = null;\n-        int clen = 0;\n-        if (e.comment != null) {\n-            commentBytes = zc.getBytes(e.comment);\n-            clen = Math.min(commentBytes.length, 0xffff);\n-        }\n@@ -689,7 +708,0 @@\n-        \/\/ CEN header size + name length + comment length + extra length\n-        \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n-        \/\/ 4.4.10, 4.4.11, & 4.4.12.\n-        long headerSize = (long)CENHDR + nlen + clen + elen;\n-        if (headerSize > 0xFFFF ) {\n-            throw new ZipException(\"invalid CEN header (bad header size)\");\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8340553\n+ * @summary Verify that ZipEntry(String), ZipEntry::setComment, and\n+ * ZipEntry::setExtra throws a IllegalArgumentException when the\n+ * length of the field exceeds 65,489 bytes\n+ * @run junit MaxZipEntryFieldSizeTest\n+ *\/\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class MaxZipEntryFieldSizeTest {\n+\n+    \/\/ CEN header size + name length + comment length + extra length\n+    \/\/ should not exceed 65,535 bytes per the PKWare APP.NOTE\n+    \/\/ 4.4.10, 4.4.11, & 4.4.12.\n+    static final int MAX_COMBINED_CEN_HEADER_SIZE = 0xFFFF;\n+    \/\/ Maximum possible size of name length + comment length + extra length\n+    \/\/ for entries in order to not exceed 65,489 bytes\n+    static final int MAX_NAME_COMMENT_EXTRA_SIZE =\n+            MAX_COMBINED_CEN_HEADER_SIZE - ZipFile.CENHDR;\n+    \/\/ Tag for the 'unknown' field type, specified in APPNOTE.txt 'Third party mappings'\n+    static final short UNKNOWN_ZIP_TAG = (short) 0x9902;\n+    \/\/ ZIP file to be used by the tests\n+    static final Path ZIP_FILE = Path.of(\"ZipEntryFieldSize.zip\");\n+    \/\/ Zip Entry name used by tests\n+    static final String ENTRY_NAME = \"EntryName\";\n+    \/\/ Max length minus the size of the ENTRY_NAME or ENTRY_COMMENT\n+    static final int MAX_FIELD_LEN_MINUS_ENTRY_NAME =\n+            MAX_NAME_COMMENT_EXTRA_SIZE - 9;\n+\n+    \/**\n+     * Clean up prior to test run\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeEach\n+    public void startUp() throws IOException {\n+        Files.deleteIfExists(ZIP_FILE);\n+    }\n+\n+    \/**\n+     * Validate an IllegalArgumentException is thrown when the comment\n+     * length exceeds 65,489 bytes.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n+    void setCommentLengthTest(int length) {\n+        final byte[] bytes = new byte[length];\n+        Arrays.fill(bytes, (byte) 'a');\n+        boolean expectException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n+        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n+        String comment = new String(bytes, StandardCharsets.UTF_8);\n+        System.out.printf(\"Comment Len= %s, exception: %s%n\", comment.length(), expectException);\n+        \/\/ The comment length will trigger the IllegalArgumentException\n+        if (expectException) {\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    zipEntry.setComment(comment));\n+        }\n+    }\n+\n+    \/**\n+     * Validate an IllegalArgumentException is thrown when the name\n+     * length exceeds 65,489 bytes.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n+    void setNameLengthTest(int length) {\n+        boolean expectException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n+        final byte[] bytes = new byte[length];\n+        Arrays.fill(bytes, (byte) 'a');\n+        String name = new String(bytes, StandardCharsets.UTF_8);\n+        System.out.printf(\"name Len= %s, exception: %s%n\", name.length(), expectException);\n+        \/\/ The name length will trigger the IllegalArgumentException\n+        if (expectException) {\n+            assertThrows(IllegalArgumentException.class, () -> new ZipEntry(name));\n+        }\n+    }\n+\n+    \/**\n+     * Validate an IllegalArgumentException is thrown when the extra data\n+     * length exceeds 65,489 bytes.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_NAME_COMMENT_EXTRA_SIZE + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n+    void setExtraLengthTest(int length) {\n+        final byte[] bytes = new byte[length];\n+        boolean expectException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n+        \/\/ Little-endian ByteBuffer for updating the header fields\n+        ByteBuffer buffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ We use the 'unknown' tag, specified in APPNOTE.TXT, 4.6.1 Third party mappings'\n+        buffer.putShort(UNKNOWN_ZIP_TAG);\n+        \/\/ Size of the actual (empty) data\n+        buffer.putShort((short) (length - 2 * Short.BYTES));\n+        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n+        System.out.printf(\"extra Len= %s, exception: %s%n\", bytes.length, expectException);\n+        \/\/ The extra data length will trigger the IllegalArgumentException\n+        if (expectException) {\n+            assertThrows(IllegalArgumentException.class, () -> zipEntry.setExtra(bytes));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipEntry\/MaxZipEntryFieldSizeTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -35,1 +35,2 @@\n-import java.io.*;\n+import java.io.BufferedOutputStream;\n+import java.io.IOException;\n@@ -67,0 +68,7 @@\n+    \/\/ Zip Entry name used by tests\n+    static final String ENTRY_NAME = \"EntryName\";\n+    \/\/ Zip Entry comment used by tests\n+    static final String ENTRY_COMMENT = \"A Comment\";\n+    \/\/ Max length minus the size of the ENTRY_NAME or ENTRY_COMMENT\n+    static final int MAX_FIELD_LEN_MINUS_ENTRY_NAME =\n+            MAX_NAME_COMMENT_EXTRA_SIZE - 9;\n@@ -84,4 +92,4 @@\n-    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n-            MAX_COMBINED_CEN_HEADER_SIZE - 1,\n-            MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_NAME_COMMENT_EXTRA_SIZE - 1})\n+    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n@@ -89,1 +97,0 @@\n-        boolean expectZipException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n@@ -92,1 +99,4 @@\n-        ZipEntry zipEntry = new ZipEntry(\"\");\n+        boolean expectZipException =  length + ENTRY_NAME.length() > MAX_NAME_COMMENT_EXTRA_SIZE ;\n+        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n+        String comment = new String(bytes, StandardCharsets.UTF_8);\n+        System.out.printf(\"Comment Len= %s, exception: %s%n\", comment.length(), expectZipException);\n@@ -105,4 +115,4 @@\n-    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n-            MAX_COMBINED_CEN_HEADER_SIZE - 1,\n-            MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_NAME_COMMENT_EXTRA_SIZE - 1})\n+    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n@@ -110,1 +120,1 @@\n-        boolean expectZipException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n+        boolean expectZipException = length + ENTRY_COMMENT.length() > MAX_NAME_COMMENT_EXTRA_SIZE;\n@@ -113,0 +123,1 @@\n+        String name = new String(bytes, StandardCharsets.UTF_8);\n@@ -114,1 +125,3 @@\n-        ZipEntry zipEntry = new ZipEntry(new String(bytes, StandardCharsets.UTF_8));\n+        ZipEntry zipEntry = new ZipEntry(name);\n+        zipEntry.setComment(ENTRY_COMMENT);\n+        System.out.printf(\"name Len= %s, exception: %s%n\", name.length(), expectZipException);\n@@ -125,4 +138,4 @@\n-    @ValueSource(ints = {MAX_COMBINED_CEN_HEADER_SIZE,\n-            MAX_COMBINED_CEN_HEADER_SIZE - 1,\n-            MAX_NAME_COMMENT_EXTRA_SIZE,\n-            MAX_NAME_COMMENT_EXTRA_SIZE - 1})\n+    @ValueSource(ints = {MAX_NAME_COMMENT_EXTRA_SIZE,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME + 1,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME,\n+            MAX_FIELD_LEN_MINUS_ENTRY_NAME - 1})\n@@ -130,1 +143,0 @@\n-        boolean expectZipException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n@@ -132,0 +144,1 @@\n+        boolean expectZipException =  length + ENTRY_NAME.length() > MAX_NAME_COMMENT_EXTRA_SIZE ;\n@@ -138,1 +151,2 @@\n-        ZipEntry zipEntry = new ZipEntry(\"\");\n+        ZipEntry zipEntry = new ZipEntry(ENTRY_NAME);\n+        System.out.printf(\"extra Len= %s, exception: %s%n\", bytes.length, expectZipException);\n@@ -157,1 +171,0 @@\n-            zos.putNextEntry(zipEntry);\n@@ -159,1 +172,1 @@\n-                ZipException ex = assertThrows(ZipException.class, zos::close);\n+                ZipException ex = assertThrows(ZipException.class, () -> zos.putNextEntry(zipEntry));\n@@ -163,0 +176,2 @@\n+            } else {\n+                zos.putNextEntry(zipEntry);\n","filename":"test\/jdk\/java\/util\/zip\/ZipOutputStream\/ZipOutputStreamMaxCenHdrTest.java","additions":36,"deletions":21,"binary":false,"changes":57,"status":"modified"}]}