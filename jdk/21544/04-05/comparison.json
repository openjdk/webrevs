{"files":[{"patch":"@@ -528,1 +528,1 @@\n-     * {@linkplain #CENHDR CEN Header size}, exceeds 65,535 bytes.\n+     * {@linkplain #CENHDR CEN Header size} exceeds 65,535 bytes.\n@@ -654,1 +654,1 @@\n-     * {@linkplain #CENHDR CEN Header size}, exceeds 65,535 bytes.\n+     * {@linkplain #CENHDR CEN Header size} exceeds 65,535 bytes.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * length of the field exceeds 65,489 bytes\n+ * combined length of the field, including the size of the CEN Header,\n+ * exceeds 65,535 bytes\n@@ -39,1 +40,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -42,1 +42,0 @@\n-import java.util.Arrays;\n@@ -89,3 +88,1 @@\n-        final byte[] bytes = new byte[length];\n-        Arrays.fill(bytes, (byte) 'a');\n-        boolean expectException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n+        boolean expectException = length >= MAX_NAME_COMMENT_EXTRA_SIZE;\n@@ -93,1 +90,1 @@\n-        String comment = new String(bytes, StandardCharsets.UTF_8);\n+        String comment = \"a\".repeat(length);\n@@ -99,0 +96,2 @@\n+        } else {\n+            zipEntry.setComment(comment);\n@@ -112,1 +111,1 @@\n-    void setNameLengthTest(int length) {\n+    void nameLengthTest(int length) {\n@@ -114,3 +113,1 @@\n-        final byte[] bytes = new byte[length];\n-        Arrays.fill(bytes, (byte) 'a');\n-        String name = new String(bytes, StandardCharsets.UTF_8);\n+        String name = \"a\".repeat(length);\n@@ -121,0 +118,2 @@\n+        } else {\n+            new ZipEntry(name);\n@@ -135,8 +134,2 @@\n-        final byte[] bytes = new byte[length];\n-        boolean expectException = length > MAX_NAME_COMMENT_EXTRA_SIZE;\n-        \/\/ Little-endian ByteBuffer for updating the header fields\n-        ByteBuffer buffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n-        \/\/ We use the 'unknown' tag, specified in APPNOTE.TXT, 4.6.1 Third party mappings'\n-        buffer.putShort(UNKNOWN_ZIP_TAG);\n-        \/\/ Size of the actual (empty) data\n-        buffer.putShort((short) (length - 2 * Short.BYTES));\n+        boolean expectException = length >= MAX_NAME_COMMENT_EXTRA_SIZE;\n+        byte[] bytes = creatExtraData(length);\n@@ -148,0 +141,2 @@\n+        } else {\n+            zipEntry.setExtra(bytes);\n@@ -150,0 +145,16 @@\n+\n+    \/**\n+     * Create the extra field data which will be passed to ZipEntry::setExtra\n+     * @param length size of the extra data\n+     * @return byte array containing the extra data\n+     *\/\n+    private static byte[] creatExtraData(int length) {\n+        byte[] bytes = new byte[length];\n+        \/\/ Little-endian ByteBuffer for updating the header fields\n+        ByteBuffer buffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ We use the 'unknown' tag, specified in APPNOTE.TXT, 4.6.1 Third party mappings'\n+        buffer.putShort(UNKNOWN_ZIP_TAG);\n+        \/\/ Size of the actual (empty) data\n+        buffer.putShort((short) (length - 2 * Short.BYTES));\n+        return bytes;\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/ZipEntry\/MaxZipEntryFieldSizeTest.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"}]}