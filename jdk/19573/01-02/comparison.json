{"files":[{"patch":"@@ -1625,1 +1625,1 @@\n-Node* PackSet::isa_unique_input_or_null(const Node_List* pack, int j) const {\n+Node* PackSet::same_inputs_at_index_or_null(const Node_List* pack, int j) const {\n@@ -1636,2 +1636,2 @@\n-  BoolNode* bol0 = bool_pack->at(0)->as_Bool();\n-  BoolTest::mask mask = bol0->_test._test;\n+  BoolNode* bol = bool_pack->at(0)->as_Bool();\n+  BoolTest::mask mask = bol->_test._test;\n@@ -1655,1 +1655,1 @@\n-  CmpNode* cmp0 = bol0->in(1)->as_Cmp();\n+  CmpNode* cmp0 = bol->in(1)->as_Cmp();\n@@ -1699,1 +1699,1 @@\n-      mask = bol0->_test.negate();\n+      mask = bol->_test.negate();\n@@ -1741,1 +1741,1 @@\n-    if (cnt_pk != nullptr || _packset.isa_unique_input_or_null(p, 2) == nullptr) {\n+    if (cnt_pk != nullptr || _packset.same_inputs_at_index_or_null(p, 2) == nullptr) {\n@@ -2100,1 +2100,1 @@\n-    return false; \/\/ empty packset\n+    return false;\n@@ -2134,0 +2134,1 @@\n+  Compile* C = phase()->C;\n@@ -2135,1 +2136,1 @@\n-  phase()->C->print_method(PHASE_AUTO_VECTORIZATION1_BEFORE_APPLY, 4, cl);\n+  C->print_method(PHASE_AUTO_VECTORIZATION1_BEFORE_APPLY, 4, cl);\n@@ -2138,1 +2139,1 @@\n-  phase()->C->print_method(PHASE_AUTO_VECTORIZATION2_AFTER_REORDER, 4, cl);\n+  C->print_method(PHASE_AUTO_VECTORIZATION2_AFTER_REORDER, 4, cl);\n@@ -2141,1 +2142,1 @@\n-  phase()->C->print_method(PHASE_AUTO_VECTORIZATION3_AFTER_ADJUST_LIMIT, 4, cl);\n+  C->print_method(PHASE_AUTO_VECTORIZATION3_AFTER_ADJUST_LIMIT, 4, cl);\n@@ -2144,1 +2145,1 @@\n-  phase()->C->print_method(PHASE_AUTO_VECTORIZATION4_AFTER_APPLY, 4, cl);\n+  C->print_method(PHASE_AUTO_VECTORIZATION4_AFTER_APPLY, 4, cl);\n@@ -2522,1 +2523,1 @@\n-  Node* unique_input = _packset.isa_unique_input_or_null(p, opd_idx);\n+  Node* unique_input = _packset.same_inputs_at_index_or_null(p, opd_idx);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-  Node* isa_unique_input_or_null(const Node_List* pack, int j) const;\n+  Node* same_inputs_at_index_or_null(const Node_List* pack, int j) const;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -929,22 +929,22 @@\n-  case Op_SqrtF:\n-  case Op_SqrtD:\n-  case Op_AbsF:\n-  case Op_AbsD:\n-  case Op_AbsI:\n-  case Op_AbsL:\n-  case Op_NegF:\n-  case Op_NegD:\n-  case Op_RoundF:\n-  case Op_RoundD:\n-  case Op_ReverseBytesI:\n-  case Op_ReverseBytesL:\n-  case Op_ReverseBytesUS:\n-  case Op_ReverseBytesS:\n-  case Op_ReverseI:\n-  case Op_ReverseL:\n-  case Op_PopCountI:\n-  case Op_CountLeadingZerosI:\n-  case Op_CountTrailingZerosI:\n-    return true;\n-  default:\n-    return false;\n+    case Op_SqrtF:\n+    case Op_SqrtD:\n+    case Op_AbsF:\n+    case Op_AbsD:\n+    case Op_AbsI:\n+    case Op_AbsL:\n+    case Op_NegF:\n+    case Op_NegD:\n+    case Op_RoundF:\n+    case Op_RoundD:\n+    case Op_ReverseBytesI:\n+    case Op_ReverseBytesL:\n+    case Op_ReverseBytesUS:\n+    case Op_ReverseBytesS:\n+    case Op_ReverseI:\n+    case Op_ReverseL:\n+    case Op_PopCountI:\n+    case Op_CountLeadingZerosI:\n+    case Op_CountTrailingZerosI:\n+      return true;\n+    default:\n+      return false;\n@@ -961,6 +961,6 @@\n-  case Op_PopCountL:\n-  case Op_CountLeadingZerosL:\n-  case Op_CountTrailingZerosL:\n-    return true;\n-  default:\n-    return false;\n+    case Op_PopCountL:\n+    case Op_CountLeadingZerosL:\n+    case Op_CountTrailingZerosL:\n+      return true;\n+    default:\n+      return false;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"}]}