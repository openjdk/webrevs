{"files":[{"patch":"@@ -1146,1 +1146,2 @@\n-        offer(e);\n+        Objects.requireNonNull(e);\n+        xfer(e, -1L);\n@@ -1184,1 +1185,3 @@\n-        return offer(e);\n+        Objects.requireNonNull(e);\n+        xfer(e, -1L);\n+        return true;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/LinkedTransferQueue.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng SubclassTest\n+ * @bug 8323659\n+ * @summary Ensures that the implementation of LTQ add and put methods does\n+ *  not call overridable offer. This test specifically asserts implementation\n+ *  details of LTQ. It's not that such impl details cannot change, just that\n+ *  such a change should be deliberately done with suitable consideration\n+ *  to compatibility.\n+ *\/\n+\n+import java.util.concurrent.LinkedTransferQueue;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test\n+public class SubclassTest {\n+\n+    public void testPut() {\n+        var queue = new TestLinkedTransferQueue();\n+        queue.put(new Object());\n+        assertEquals(queue.size(), 1);\n+    }\n+\n+    public void testAdd() {\n+        var queue = new TestLinkedTransferQueue();\n+        queue.add(new Object());\n+        assertEquals(queue.size(), 1);\n+    }\n+\n+    static class TestLinkedTransferQueue extends LinkedTransferQueue<Object> {\n+        @Override\n+        public boolean offer(Object obj) {\n+            return false;  \/\/  simulate fails to add the given obj\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/LinkedTransferQueue\/SubclassTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}