{"files":[{"patch":"@@ -130,1 +130,1 @@\n-      bool bm_live = heap->active_generation()->complete_marking_context()->is_marked(cast_to_oop(region->bottom()));\n+      bool bm_live = _generation->complete_marking_context()->is_marked(cast_to_oop(region->bottom()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,2 +76,0 @@\n-  assert(collection_set->is_empty(), \"Must be empty\");\n-\n@@ -80,0 +78,3 @@\n+  assert(collection_set->is_empty(), \"Must be empty\");\n+  assert(!heap->mode()->is_generational(), \"Wrong heuristic for heap mode\");\n+\n@@ -123,1 +124,1 @@\n-      bool bm_live = heap->gc_generation()->complete_marking_context()->is_marked(cast_to_oop(region->bottom()));\n+      bool bm_live = heap->global_generation()->complete_marking_context()->is_marked(cast_to_oop(region->bottom()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -428,0 +428,10 @@\n+void ShenandoahAsserts::assert_mark_complete(HeapWord* obj, const char* file, int line) {\n+  const ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  const ShenandoahHeapRegion* region = heap->heap_region_containing(obj);\n+  const ShenandoahGeneration* generation = heap->generation_for(region->affiliation());\n+  if (!generation->is_mark_complete()) {\n+    ShenandoahMessageBuffer msg(\"Marking should be complete for object \" PTR_FORMAT \" in the %s generation\", p2i(obj), generation->name());\n+    report_vm_error(file, line, msg.buffer());\n+  }\n+}\n+\n@@ -545,17 +555,0 @@\n-void ShenandoahAsserts::assert_generations_reconciled(const char* file, int line) {\n-  if (!ShenandoahSafepoint::is_at_shenandoah_safepoint()) {\n-    \/\/ Only shenandoah safepoint operations participate in the active\/gc generation scheme\n-    return;\n-  }\n-\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  ShenandoahGeneration* ggen = heap->gc_generation();\n-  ShenandoahGeneration* agen = heap->active_generation();\n-  if (agen == ggen) {\n-    return;\n-  }\n-\n-  ShenandoahMessageBuffer msg(\"Active(%s) & GC(%s) Generations aren't reconciled\", agen->name(), ggen->name());\n-  report_vm_error(file, line, msg.buffer());\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -68,0 +68,3 @@\n+\n+  \/\/ Assert that marking is complete for the generation where this obj resides\n+  static void assert_mark_complete(HeapWord* obj, const char* file, int line);\n@@ -79,1 +82,0 @@\n-  static void assert_generations_reconciled(const char* file, int line);\n@@ -136,0 +138,3 @@\n+#define shenandoah_assert_mark_complete(obj) \\\n+                    ShenandoahAsserts::assert_mark_complete(obj, __FILE__, __LINE__)\n+\n@@ -187,4 +192,0 @@\n-\/\/ Some limited sanity checking of the _gc_generation and _active_generation fields of ShenandoahHeap\n-#define shenandoah_assert_generations_reconciled()                                                             \\\n-                    ShenandoahAsserts::assert_generations_reconciled(__FILE__, __LINE__)\n-\n@@ -220,0 +221,2 @@\n+#define shenandoah_assert_mark_complete(obj)\n+\n@@ -244,1 +247,0 @@\n-#define shenandoah_assert_generations_reconciled()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+  ShenandoahGC(generation),\n@@ -95,1 +96,0 @@\n-  _generation(generation),\n@@ -579,1 +579,1 @@\n-  ShenandoahGenerationalHeap::heap()->promote_regions_in_place(true);\n+  ShenandoahGenerationalHeap::heap()->promote_regions_in_place(_generation, true);\n@@ -709,1 +709,1 @@\n-    heap->verifier()->verify_before_concmark();\n+    heap->verifier()->verify_before_concmark(_generation);\n@@ -766,1 +766,1 @@\n-    heap->verifier()->verify_roots_no_forwarded();\n+    heap->verifier()->verify_roots_no_forwarded(_generation);\n@@ -794,1 +794,1 @@\n-        heap->verifier()->verify_before_evacuation();\n+        heap->verifier()->verify_before_evacuation(_generation);\n@@ -809,1 +809,1 @@\n-          heap->verifier()->verify_after_concmark_with_promotions();\n+          heap->verifier()->verify_after_concmark_with_promotions(_generation);\n@@ -811,1 +811,1 @@\n-          heap->verifier()->verify_after_concmark();\n+          heap->verifier()->verify_after_concmark(_generation);\n@@ -880,0 +880,1 @@\n+  ShenandoahGeneration* const _generation;\n@@ -885,1 +886,1 @@\n-  ShenandoahEvacUpdateCleanupOopStorageRootsClosure();\n+  explicit ShenandoahEvacUpdateCleanupOopStorageRootsClosure(ShenandoahGeneration* generation);\n@@ -890,1 +891,1 @@\n-ShenandoahEvacUpdateCleanupOopStorageRootsClosure::ShenandoahEvacUpdateCleanupOopStorageRootsClosure() :\n+ShenandoahEvacUpdateCleanupOopStorageRootsClosure::ShenandoahEvacUpdateCleanupOopStorageRootsClosure(ShenandoahGeneration* generation) :\n@@ -892,0 +893,1 @@\n+  _generation(generation),\n@@ -901,2 +903,1 @@\n-      shenandoah_assert_generations_reconciled();\n-      if (_heap->is_in_active_generation(obj)) {\n+      if (_generation->contains(obj)) {\n@@ -945,0 +946,1 @@\n+  ShenandoahGeneration*                      _generation;\n@@ -948,1 +950,1 @@\n-  ShenandoahConcurrentWeakRootsEvacUpdateTask(ShenandoahPhaseTimings::Phase phase) :\n+  ShenandoahConcurrentWeakRootsEvacUpdateTask(ShenandoahGeneration* generation, ShenandoahPhaseTimings::Phase phase) :\n@@ -953,0 +955,1 @@\n+    _generation(generation),\n@@ -960,1 +963,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -967,1 +970,1 @@\n-      ShenandoahEvacUpdateCleanupOopStorageRootsClosure cl;\n+      ShenandoahEvacUpdateCleanupOopStorageRootsClosure cl(_generation);\n@@ -1002,1 +1005,1 @@\n-    ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahConcurrentWeakRootsEvacUpdateTask task(_generation, ShenandoahPhaseTimings::conc_weak_roots_work);\n@@ -1108,1 +1111,1 @@\n-  ShenandoahHeap::heap()->evacuate_collection_set(true \/*concurrent*\/);\n+  ShenandoahHeap::heap()->evacuate_collection_set(_generation, true \/*concurrent*\/);\n@@ -1112,1 +1115,0 @@\n-  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n@@ -1114,0 +1116,1 @@\n+    ShenandoahHeap* const heap = ShenandoahHeap::heap();\n@@ -1115,1 +1118,1 @@\n-    heap->verifier()->verify_before_update_refs();\n+    heap->verifier()->verify_before_update_refs(_generation);\n@@ -1120,1 +1123,1 @@\n-  ShenandoahHeap::heap()->update_heap_references(true \/*concurrent*\/);\n+  ShenandoahHeap::heap()->update_heap_references(_generation, true \/*concurrent*\/);\n@@ -1166,1 +1169,1 @@\n-    heap->verifier()->verify_roots_in_to_space();\n+    heap->verifier()->verify_roots_in_to_space(_generation);\n@@ -1201,1 +1204,1 @@\n-    heap->verifier()->verify_after_update_refs();\n+    heap->verifier()->verify_after_update_refs(_generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-  ShenandoahGeneration* const _generation;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -63,6 +62,0 @@\n-    \/\/ Do not use active_generation() : we must use the gc_generation() set by\n-    \/\/ ShenandoahGCScope on the ControllerThread's stack; no safepoint may\n-    \/\/ intervene to update active_generation, so we can't\n-    \/\/ shenandoah_assert_generations_reconciled() here.\n-    ShenandoahReferenceProcessor* rp = heap->gc_generation()->ref_processor();\n-    assert(rp != nullptr, \"need reference processor\");\n@@ -70,1 +63,1 @@\n-    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, true \/*cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, GENERATION, true \/*cancellable*\/,\n@@ -109,3 +102,0 @@\n-    ShenandoahReferenceProcessor* rp = heap->gc_generation()->ref_processor();\n-    shenandoah_assert_generations_reconciled();\n-\n@@ -125,1 +115,1 @@\n-    _cm->mark_loop(worker_id, _terminator, rp, GENERATION, false \/*not cancellable*\/,\n+    _cm->mark_loop(worker_id, _terminator, GENERATION, false \/*not cancellable*\/,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  ShenandoahGC(),\n+  ShenandoahGC(generation),\n@@ -51,1 +51,0 @@\n-  _generation(generation),\n@@ -263,1 +262,1 @@\n-        ShenandoahGenerationalHeap::heap()->promote_regions_in_place(false \/* concurrent*\/);\n+        ShenandoahGenerationalHeap::heap()->promote_regions_in_place(_generation, false \/* concurrent*\/);\n@@ -303,1 +302,1 @@\n-    heap->verifier()->verify_after_degenerated();\n+    heap->verifier()->verify_after_degenerated(_generation);\n@@ -340,1 +339,1 @@\n-    heap->verifier()->verify_roots_no_forwarded();\n+    heap->verifier()->verify_roots_no_forwarded(_generation);\n@@ -344,1 +343,1 @@\n-  heap->parallel_cleaning(false \/*full gc*\/);\n+  heap->parallel_cleaning(_generation, false \/*full gc*\/);\n@@ -361,1 +360,1 @@\n-      heap->verifier()->verify_before_evacuation();\n+      heap->verifier()->verify_before_evacuation(_generation);\n@@ -369,1 +368,1 @@\n-        heap->verifier()->verify_after_concmark_with_promotions();\n+        heap->verifier()->verify_after_concmark_with_promotions(_generation);\n@@ -371,1 +370,1 @@\n-        heap->verifier()->verify_after_concmark();\n+        heap->verifier()->verify_after_concmark(_generation);\n@@ -391,1 +390,1 @@\n-  ShenandoahHeap::heap()->evacuate_collection_set(false \/* concurrent*\/);\n+  ShenandoahHeap::heap()->evacuate_collection_set(_generation, false \/* concurrent*\/);\n@@ -405,1 +404,1 @@\n-  heap->update_heap_references(false \/*concurrent*\/);\n+  heap->update_heap_references(_generation, false \/*concurrent*\/);\n@@ -419,1 +418,1 @@\n-    heap->verifier()->verify_after_update_refs();\n+    heap->verifier()->verify_after_update_refs(_generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-  ShenandoahGeneration* _generation;\n@@ -42,1 +41,1 @@\n-  bool collect(GCCause::Cause cause);\n+  bool collect(GCCause::Cause cause) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+  ShenandoahGC(ShenandoahHeap::heap()->global_generation()),\n@@ -127,1 +128,1 @@\n-  heap->global_generation()->heuristics()->record_success_full();\n+  _generation->heuristics()->record_success_full();\n@@ -144,1 +145,1 @@\n-    heap->verifier()->verify_before_fullgc();\n+    heap->verifier()->verify_before_fullgc(_generation);\n@@ -197,1 +198,1 @@\n-    ShenandoahReferenceProcessor* rp = heap->global_generation()->ref_processor();\n+    ShenandoahReferenceProcessor* rp = _generation->ref_processor();\n@@ -276,1 +277,1 @@\n-    heap->verifier()->verify_after_fullgc();\n+    heap->verifier()->verify_after_fullgc(_generation);\n@@ -295,1 +296,1 @@\n-  heap->global_generation()->reset_mark_bitmap<true, true>();\n+  _generation->reset_mark_bitmap<true, true>();\n@@ -297,1 +298,1 @@\n-  assert(!heap->global_generation()->is_mark_complete(), \"sanity\");\n+  assert(!_generation->is_mark_complete(), \"sanity\");\n@@ -299,1 +300,1 @@\n-  heap->set_unload_classes(heap->global_generation()->heuristics()->can_unload_classes());\n+  heap->set_unload_classes(_generation->heuristics()->can_unload_classes());\n@@ -301,1 +302,1 @@\n-  ShenandoahReferenceProcessor* rp = heap->global_generation()->ref_processor();\n+  ShenandoahReferenceProcessor* rp = _generation->ref_processor();\n@@ -305,1 +306,1 @@\n-  ShenandoahSTWMark mark(heap->global_generation(), true \/*full_gc*\/);\n+  ShenandoahSTWMark mark(_generation, true \/*full_gc*\/);\n@@ -307,1 +308,1 @@\n-  heap->parallel_cleaning(true \/* full_gc *\/);\n+  heap->parallel_cleaning(_generation, true \/* full_gc *\/);\n@@ -353,1 +354,2 @@\n-  void do_object(oop p) {\n+  void do_object(oop p) override {\n+    shenandoah_assert_mark_complete(cast_from_oop<HeapWord*>(p));\n@@ -355,2 +357,3 @@\n-    assert(_heap->gc_generation()->complete_marking_context()->is_marked(p), \"must be marked\");\n-    assert(!_heap->gc_generation()->complete_marking_context()->allocated_after_mark_start(p), \"must be truly marked\");\n+    assert(_heap->global_generation()->is_mark_complete(), \"marking must be finished\");\n+    assert(_heap->marking_context()->is_marked(p), \"must be marked\");\n+    assert(!_heap->marking_context()->allocated_after_mark_start(p), \"must be truly marked\");\n@@ -526,3 +529,0 @@\n-private:\n-  ShenandoahHeap* const _heap;\n-\n@@ -530,2 +530,1 @@\n-  ShenandoahEnsureHeapActiveClosure() : _heap(ShenandoahHeap::heap()) {}\n-  void heap_region_do(ShenandoahHeapRegion* r) {\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n@@ -763,1 +762,0 @@\n-  ShenandoahHeap* const _heap;\n@@ -781,2 +779,1 @@\n-    _heap(ShenandoahHeap::heap()),\n-    _ctx(ShenandoahHeap::heap()->gc_generation()->complete_marking_context()) {}\n+    _ctx(ShenandoahHeap::heap()->global_generation()->complete_marking_context()) {}\n@@ -792,1 +789,0 @@\n-  ShenandoahHeap* const _heap;\n@@ -796,5 +792,3 @@\n-  ShenandoahAdjustPointersObjectClosure() :\n-    _heap(ShenandoahHeap::heap()) {\n-  }\n-  void do_object(oop p) {\n-    assert(_heap->gc_generation()->complete_marking_context()->is_marked(p), \"must be marked\");\n+  void do_object(oop p) override {\n+    assert(ShenandoahHeap::heap()->global_generation()->is_mark_complete(), \"marking must be complete\");\n+    assert(ShenandoahHeap::heap()->marking_context()->is_marked(p), \"must be marked\");\n@@ -816,1 +810,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -842,1 +836,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -876,2 +870,1 @@\n-  ShenandoahHeap* const _heap;\n-  uint            const _worker_id;\n+  uint const _worker_id;\n@@ -880,2 +873,2 @@\n-  ShenandoahCompactObjectsClosure(uint worker_id) :\n-    _heap(ShenandoahHeap::heap()), _worker_id(worker_id) {}\n+  explicit ShenandoahCompactObjectsClosure(uint worker_id) :\n+    _worker_id(worker_id) {}\n@@ -883,2 +876,3 @@\n-  void do_object(oop p) {\n-    assert(_heap->gc_generation()->complete_marking_context()->is_marked(p), \"must be marked\");\n+  void do_object(oop p) override {\n+    assert(ShenandoahHeap::heap()->global_generation()->is_mark_complete(), \"marking must be finished\");\n+    assert(ShenandoahHeap::heap()->marking_context()->is_marked(p), \"must be marked\");\n@@ -911,1 +905,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -948,1 +942,1 @@\n-  void heap_region_do(ShenandoahHeapRegion* r) {\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n@@ -957,1 +951,1 @@\n-      _heap->gc_generation()->complete_marking_context()->reset_top_at_mark_start(r);\n+      _heap->marking_context()->reset_top_at_mark_start(r);\n@@ -1082,1 +1076,1 @@\n-\/\/ cannot be iterated over using oop->size(). The only way to safely iterate over those is using\n+\/\/ cannot be iterated over using oop->size()). The only way to safely iterate over those is using\n@@ -1094,1 +1088,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -1098,1 +1092,2 @@\n-    ShenandoahMarkingContext* const ctx = heap->gc_generation()->complete_marking_context();\n+    ShenandoahMarkingContext* const ctx = heap->marking_context();\n+    assert(heap->global_generation()->is_mark_complete(), \"Marking must be complete\");\n@@ -1166,1 +1161,1 @@\n-    heap->global_generation()->set_mark_incomplete();\n+    _generation->set_mark_incomplete();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":37,"deletions":42,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  bool collect(GCCause::Cause cause);\n+  bool collect(GCCause::Cause cause) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+class ShenandoahGeneration;\n+\n@@ -60,0 +62,2 @@\n+  explicit ShenandoahGC(ShenandoahGeneration* generation) : _generation(generation) {}\n+\n@@ -64,0 +68,1 @@\n+  ShenandoahGeneration* generation() const { return _generation; }\n@@ -66,0 +71,2 @@\n+\n+  ShenandoahGeneration* _generation;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-  bool is_mark_complete() { return _is_marking_complete.is_set(); }\n+  bool is_mark_complete() const { return _is_marking_complete.is_set(); }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+                                                                           ShenandoahGeneration* generation,\n@@ -57,0 +58,1 @@\n+  _generation(generation),\n@@ -172,1 +174,1 @@\n-  assert(!_heap->gc_generation()->is_old(), \"Sanity check\");\n+  assert(!_generation->is_old(), \"Sanity check\");\n@@ -178,1 +180,0 @@\n-    shenandoah_assert_generations_reconciled();\n@@ -262,2 +263,1 @@\n-  assert(_heap->gc_generation()->is_mark_complete(), \"sanity\");\n-  shenandoah_assert_generations_reconciled();\n+  assert(_generation->is_mark_complete(), \"sanity\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  ShenandoahGeneration* const _generation;\n@@ -45,0 +46,1 @@\n+                                       ShenandoahGeneration* generation,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-  heap->set_gc_generation(heap->global_generation());\n-  heap->set_active_generation();\n+  heap->set_active_generation(heap->global_generation());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-void ShenandoahGenerationalHeap::evacuate_collection_set(bool concurrent) {\n+void ShenandoahGenerationalHeap::evacuate_collection_set(ShenandoahGeneration* generation, bool concurrent) {\n@@ -183,1 +183,1 @@\n-  ShenandoahGenerationalEvacuationTask task(this, &regions, concurrent, false \/* only promote regions *\/);\n+  ShenandoahGenerationalEvacuationTask task(this, generation, &regions, concurrent, false \/* only promote regions *\/);\n@@ -187,1 +187,1 @@\n-void ShenandoahGenerationalHeap::promote_regions_in_place(bool concurrent) {\n+void ShenandoahGenerationalHeap::promote_regions_in_place(ShenandoahGeneration* generation, bool concurrent) {\n@@ -189,1 +189,1 @@\n-  ShenandoahGenerationalEvacuationTask task(this, &regions, concurrent, true \/* only promote regions *\/);\n+  ShenandoahGenerationalEvacuationTask task(this, generation, &regions, concurrent, true \/* only promote regions *\/);\n@@ -760,0 +760,2 @@\n+  \/\/ For update refs, _generation will be young or global. Mixed collections use the young generation.\n+  ShenandoahGeneration* _generation;\n@@ -765,2 +767,3 @@\n-  explicit ShenandoahGenerationalUpdateHeapRefsTask(ShenandoahRegionIterator* regions,\n-                                                    ShenandoahRegionChunkIterator* work_chunks) :\n+  ShenandoahGenerationalUpdateHeapRefsTask(ShenandoahGeneration* generation,\n+                                           ShenandoahRegionIterator* regions,\n+                                           ShenandoahRegionChunkIterator* work_chunks) :\n@@ -768,0 +771,1 @@\n+          _generation(generation),\n@@ -772,1 +776,1 @@\n-    bool old_bitmap_stable = _heap->old_generation()->is_mark_complete();\n+    const bool old_bitmap_stable = _heap->old_generation()->is_mark_complete();\n@@ -776,1 +780,1 @@\n-  void work(uint worker_id) {\n+  void work(uint worker_id) override {\n@@ -806,4 +810,2 @@\n-    \/\/ We update references for global, old, and young collections.\n-    ShenandoahGeneration* const gc_generation = _heap->gc_generation();\n-    shenandoah_assert_generations_reconciled();\n-    assert(gc_generation->is_mark_complete(), \"Expected complete marking\");\n+    \/\/ We update references for global, mixed, and young collections.\n+    assert(_generation->is_mark_complete(), \"Expected complete marking\");\n@@ -821,1 +823,1 @@\n-          if (gc_generation->is_global()) {\n+          if (_generation->is_global()) {\n@@ -850,1 +852,1 @@\n-    if (!gc_generation->is_global()) {\n+    if (_generation->is_young()) {\n@@ -964,1 +966,1 @@\n-void ShenandoahGenerationalHeap::update_heap_references(bool concurrent) {\n+void ShenandoahGenerationalHeap::update_heap_references(ShenandoahGeneration* generation, bool concurrent) {\n@@ -969,1 +971,1 @@\n-    ShenandoahGenerationalUpdateHeapRefsTask<true> task(&_update_refs_iterator, &work_list);\n+    ShenandoahGenerationalUpdateHeapRefsTask<true> task(generation, &_update_refs_iterator, &work_list);\n@@ -972,1 +974,1 @@\n-    ShenandoahGenerationalUpdateHeapRefsTask<false> task(&_update_refs_iterator, &work_list);\n+    ShenandoahGenerationalUpdateHeapRefsTask<false> task(generation, &_update_refs_iterator, &work_list);\n@@ -1047,1 +1049,1 @@\n-  ShenandoahUpdateRegionAges ages(active_generation()->complete_marking_context());\n+  ShenandoahUpdateRegionAges ages(marking_context());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -91,2 +91,5 @@\n-  void evacuate_collection_set(bool concurrent) override;\n-  void promote_regions_in_place(bool concurrent);\n+\n+  \/\/ In the generational mode, we will use these two functions for young, mixed, and global collections.\n+  \/\/ For young and mixed, the generation argument will be the young generation, otherwise it will be the global generation.\n+  void evacuate_collection_set(ShenandoahGeneration* generation, bool concurrent) override;\n+  void promote_regions_in_place(ShenandoahGeneration* generation, bool concurrent);\n@@ -102,1 +105,3 @@\n-  void update_heap_references(bool concurrent) override;\n+  \/\/ In the generational mode, we will use this function for young, mixed, and global collections.\n+  \/\/ For young and mixed, the generation argument will be the young generation, otherwise it will be the global generation.\n+  void update_heap_references(ShenandoahGeneration* generation, bool concurrent) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -532,1 +532,0 @@\n-  _gc_generation(nullptr),\n@@ -1260,1 +1259,2 @@\n-void ShenandoahHeap::evacuate_collection_set(bool concurrent) {\n+void ShenandoahHeap::evacuate_collection_set(ShenandoahGeneration* generation, bool concurrent) {\n+  assert(generation->is_global(), \"Only global generation expected here\");\n@@ -1662,5 +1662,0 @@\n-void ShenandoahHeap::set_gc_generation(ShenandoahGeneration* generation) {\n-  shenandoah_assert_control_or_vm_thread_at_safepoint();\n-  _gc_generation = generation;\n-}\n-\n@@ -1668,1 +1663,1 @@\n-void ShenandoahHeap::set_active_generation() {\n+void ShenandoahHeap::set_active_generation(ShenandoahGeneration* generation) {\n@@ -1671,2 +1666,1 @@\n-  assert(_gc_generation != nullptr, \"Will set _active_generation to nullptr\");\n-  _active_generation = _gc_generation;\n+  _active_generation = generation;\n@@ -1681,1 +1675,0 @@\n-  assert(_gc_generation == nullptr, \"Over-writing _gc_generation\");\n@@ -1684,1 +1677,0 @@\n-  set_gc_generation(generation);\n@@ -1691,1 +1683,0 @@\n-  assert(_gc_generation != nullptr, \"_gc_generation wasn't set\");\n@@ -1700,1 +1691,0 @@\n-  set_gc_generation(nullptr);\n@@ -1707,1 +1697,1 @@\n-      verifier()->verify_generic(vo);\n+      verifier()->verify_generic(active_generation(), vo);\n@@ -2067,1 +2057,1 @@\n-void ShenandoahHeap::stw_weak_refs(bool full_gc) {\n+void ShenandoahHeap::stw_weak_refs(ShenandoahGeneration* generation, bool full_gc) {\n@@ -2073,2 +2063,1 @@\n-  shenandoah_assert_generations_reconciled();\n-  gc_generation()->ref_processor()->process_references(phase, workers(), false \/* concurrent *\/);\n+  generation->ref_processor()->process_references(phase, workers(), false \/* concurrent *\/);\n@@ -2315,1 +2304,1 @@\n-void ShenandoahHeap::parallel_cleaning(bool full_gc) {\n+void ShenandoahHeap::parallel_cleaning(ShenandoahGeneration* generation, bool full_gc) {\n@@ -2321,1 +2310,1 @@\n-  stw_weak_refs(full_gc);\n+  stw_weak_refs(generation, full_gc);\n@@ -2429,5 +2418,2 @@\n-    shenandoah_assert_generations_reconciled();\n-    if (gc_generation()->contains(r)) {\n-      assert((r->is_pinned() && r->pin_count() > 0) || (!r->is_pinned() && r->pin_count() == 0),\n-             \"Region %zu pinning status is inconsistent\", i);\n-    }\n+    assert((r->is_pinned() && r->pin_count() > 0) || (!r->is_pinned() && r->pin_count() == 0),\n+           \"Region %zu pinning status is inconsistent\", i);\n@@ -2536,1 +2522,2 @@\n-void ShenandoahHeap::update_heap_references(bool concurrent) {\n+void ShenandoahHeap::update_heap_references(ShenandoahGeneration* generation, bool concurrent) {\n+  assert(generation->is_global(), \"Should only get global generation here\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":13,"deletions":26,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -148,5 +148,0 @@\n-  \/\/ Indicates the generation whose collection is in\n-  \/\/ progress. Mutator threads aren't allowed to read\n-  \/\/ this field.\n-  ShenandoahGeneration* _gc_generation;\n-\n@@ -154,2 +149,2 @@\n-  \/\/ at each STW pause (safepoint) to the value seen in\n-  \/\/ _gc_generation. This allows the value to be always consistently\n+  \/\/ at each STW pause (safepoint) to the value given to the VM operation.\n+  \/\/ This allows the value to be always consistently\n@@ -157,2 +152,0 @@\n-  \/\/ In that sense, it's a stable snapshot of _gc_generation that is\n-  \/\/ updated at each STW pause associated with a ShenandoahVMOp.\n@@ -170,7 +163,0 @@\n-  ShenandoahGeneration* gc_generation() const {\n-    \/\/ We don't want this field read by a mutator thread\n-    assert(!Thread::current()->is_Java_thread(), \"Not allowed\");\n-    \/\/ value of _gc_generation field, see above\n-    return _gc_generation;\n-  }\n-\n@@ -182,7 +168,2 @@\n-  \/\/ Set the _gc_generation field\n-  void set_gc_generation(ShenandoahGeneration* generation);\n-\n-  \/\/ Copy the value in the _gc_generation field into\n-  \/\/ the _active_generation field: can only be called at\n-  \/\/ a safepoint by the VMThread.\n-  void set_active_generation();\n+  \/\/ Update the _active_generation field: can only be called at a safepoint by the VMThread.\n+  void set_active_generation(ShenandoahGeneration* generation);\n@@ -485,1 +466,1 @@\n-  virtual void evacuate_collection_set(bool concurrent);\n+  virtual void evacuate_collection_set(ShenandoahGeneration* generation, bool concurrent);\n@@ -500,1 +481,1 @@\n-  virtual void update_heap_references(bool concurrent);\n+  virtual void update_heap_references(ShenandoahGeneration* generation, bool concurrent);\n@@ -608,1 +589,1 @@\n-  void parallel_cleaning(bool full_gc);\n+  void parallel_cleaning(ShenandoahGeneration* generation, bool full_gc);\n@@ -613,1 +594,1 @@\n-  void stw_weak_refs(bool full_gc);\n+  void stw_weak_refs(ShenandoahGeneration* generation, bool full_gc);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -318,3 +318,3 @@\n-  assert(ShenandoahHeap::heap()->gc_generation()->is_mark_complete(), \"Marking should be complete here.\");\n-  shenandoah_assert_generations_reconciled();\n-  ShenandoahHeap::heap()->marking_context()->reset_top_bitmap(this);\n+  const ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  assert(heap->generation_for(affiliation())->is_mark_complete(), \"Marking should be complete here.\");\n+  heap->marking_context()->reset_top_bitmap(this);\n@@ -464,3 +464,3 @@\n-  \/\/ Expect marking to be completed before these threads invoke this service.\n-  assert(heap->gc_generation()->is_mark_complete(), \"sanity\");\n-  shenandoah_assert_generations_reconciled();\n+  \/\/ Expect marking to be completed for the old generation before we fill in unmarked objects\n+  assert(heap->old_generation()->is_mark_complete(), \"sanity\");\n+  assert(is_old(), \"Only need to coalesce and fill old regions\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-void ShenandoahMark::mark_loop_prework(uint w, TaskTerminator *t, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req, bool update_refs) {\n+void ShenandoahMark::mark_loop_prework(uint w, TaskTerminator *t, StringDedup::Requests* const req, bool update_refs) {\n@@ -61,1 +61,1 @@\n-\n+  ShenandoahReferenceProcessor *rp = _generation->ref_processor();\n@@ -81,2 +81,2 @@\n-void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                               ShenandoahGenerationType generation, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator,\n+                               ShenandoahGenerationType generation_type, StringDedup::Requests* const req) {\n@@ -84,1 +84,1 @@\n-  switch (generation) {\n+  switch (generation_type) {\n@@ -86,1 +86,1 @@\n-      mark_loop_prework<YOUNG, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n+      mark_loop_prework<YOUNG, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, req, update_refs);\n@@ -90,1 +90,1 @@\n-      mark_loop_prework<OLD, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, false);\n+      mark_loop_prework<OLD, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, req, false);\n@@ -93,1 +93,1 @@\n-      mark_loop_prework<GLOBAL, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n+      mark_loop_prework<GLOBAL, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, req, update_refs);\n@@ -96,1 +96,1 @@\n-      mark_loop_prework<NON_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, rp, req, update_refs);\n+      mark_loop_prework<NON_GEN, CANCELLABLE, STRING_DEDUP>(worker_id, terminator, req, update_refs);\n@@ -104,2 +104,2 @@\n-void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                               ShenandoahGenerationType generation, bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n+void ShenandoahMark::mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahGenerationType generation_type,\n+                               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n@@ -109,1 +109,1 @@\n-        mark_loop<true, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<true, NO_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -112,1 +112,1 @@\n-        mark_loop<true, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<true, ENQUEUE_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -115,1 +115,1 @@\n-        mark_loop<true, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<true, ALWAYS_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -121,1 +121,1 @@\n-        mark_loop<false, NO_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<false, NO_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -124,1 +124,1 @@\n-        mark_loop<false, ENQUEUE_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<false, ENQUEUE_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -127,1 +127,1 @@\n-        mark_loop<false, ALWAYS_DEDUP>(worker_id, terminator, rp, generation, req);\n+        mark_loop<false, ALWAYS_DEDUP>(worker_id, terminator, generation_type, req);\n@@ -142,6 +142,2 @@\n-  \/\/ Do not use active_generation() : we must use the gc_generation() set by\n-  \/\/ ShenandoahGCScope on the ControllerThread's stack; no safepoint may\n-  \/\/ intervene to update active_generation, so we can't\n-  \/\/ shenandoah_assert_generations_reconciled() here.\n-  assert(heap->gc_generation()->type() == GENERATION, \"Sanity: %d != %d\", heap->gc_generation()->type(), GENERATION);\n-  heap->gc_generation()->ref_processor()->set_mark_closure(worker_id, cl);\n+  assert(_generation->type() == GENERATION, \"Sanity: %d != %d\", _generation->type(), GENERATION);\n+  _generation->ref_processor()->set_mark_closure(worker_id, cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-class ShenandoahReferenceProcessor;\n@@ -75,1 +74,1 @@\n-  inline ShenandoahGeneration* generation() { return _generation; };\n+  ShenandoahGeneration* generation() const { return _generation; };\n@@ -96,1 +95,1 @@\n-  void mark_loop_prework(uint worker_id, TaskTerminator *terminator, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req, bool update_refs);\n+  void mark_loop_prework(uint worker_id, TaskTerminator *terminator, StringDedup::Requests* const req, bool update_refs);\n@@ -112,2 +111,2 @@\n-  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                 ShenandoahGenerationType generation, StringDedup::Requests* const req);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahGenerationType generation_type,\n+                StringDedup::Requests* const req);\n@@ -115,2 +114,2 @@\n-  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahReferenceProcessor *rp,\n-                 ShenandoahGenerationType generation, bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n+  void mark_loop(uint worker_id, TaskTerminator* terminator, ShenandoahGenerationType generation_type,\n+                 bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    heap->verifier()->verify_roots_no_forwarded();\n+    heap->verifier()->verify_roots_no_forwarded(_old_generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+  shenandoah_assert_mark_complete(raw_referent);\n@@ -333,2 +334,1 @@\n-  \/\/ Check if the referent is still alive, in which case we should\n-  \/\/ drop the reference.\n+  \/\/ Check if the referent is still alive, in which case we should drop the reference.\n@@ -336,1 +336,1 @@\n-    return heap->active_generation()->complete_marking_context()->is_marked(raw_referent);\n+    return heap->marking_context()->is_marked(raw_referent);\n@@ -338,1 +338,1 @@\n-    return heap->active_generation()->complete_marking_context()->is_marked_strong(raw_referent);\n+    return heap->marking_context()->is_marked_strong(raw_referent);\n@@ -345,0 +345,8 @@\n+#ifdef ASSERT\n+    auto referent = reference_referent_raw<T>(reference);\n+    auto heap = ShenandoahHeap::heap();\n+    shenandoah_assert_mark_complete(referent);\n+    assert(reference_next<T>(reference) == nullptr, \"Already inactive\");\n+    assert(heap->marking_context()->is_marked(referent), \"only make inactive final refs with alive referents\");\n+#endif\n+\n@@ -349,2 +357,0 @@\n-    assert(reference_next<T>(reference) == nullptr, \"Already inactive\");\n-    assert(ShenandoahHeap::heap()->active_generation()->complete_marking_context()->is_marked(reference_referent_raw<T>(reference)), \"only make inactive final refs with alive referents\");\n@@ -440,2 +446,6 @@\n-  assert(raw_referent == nullptr || ShenandoahHeap::heap()->active_generation()->complete_marking_context()->is_marked(raw_referent),\n-         \"only drop references with alive referents\");\n+  if (raw_referent != nullptr) {\n+    ShenandoahHeap* heap = ShenandoahHeap::heap();\n+    ShenandoahHeapRegion* region  = heap->heap_region_containing(raw_referent);\n+    ShenandoahMarkingContext* ctx = heap->generation_for(region->affiliation())->complete_marking_context();\n+    assert(ctx->is_marked(raw_referent), \"only drop references with alive referents\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-void ShenandoahRootVerifier::roots_do(OopIterateClosure* oops) {\n+void ShenandoahRootVerifier::roots_do(OopIterateClosure* oops, ShenandoahGeneration* generation) {\n@@ -78,2 +78,1 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  if (heap->mode()->is_generational() && heap->active_generation()->is_young()) {\n+  if (generation->is_young()) {\n@@ -81,0 +80,1 @@\n+    shenandoah_assert_generational();\n@@ -90,1 +90,1 @@\n-void ShenandoahRootVerifier::strong_roots_do(OopIterateClosure* oops) {\n+void ShenandoahRootVerifier::strong_roots_do(OopIterateClosure* oops, ShenandoahGeneration* generation) {\n@@ -101,2 +101,2 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  if (heap->mode()->is_generational() && heap->active_generation()->is_young()) {\n+  if (generation->is_young()) {\n+    shenandoah_assert_generational();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,2 +46,4 @@\n-  static void roots_do(OopIterateClosure* cl);\n-  static void strong_roots_do(OopIterateClosure* cl);\n+  \/\/ The generation parameter here may be young or global. If it is young,\n+  \/\/ then the roots will include the remembered set.\n+  static void roots_do(OopIterateClosure* cl, ShenandoahGeneration* generation);\n+  static void strong_roots_do(OopIterateClosure* cl, ShenandoahGeneration* generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  assert(ShenandoahHeap::heap()->gc_generation() == _generation, \"Marking unexpected generation\");\n@@ -82,1 +81,0 @@\n-  shenandoah_assert_generations_reconciled();\n@@ -88,1 +86,1 @@\n-    heap->verifier()->verify_roots_no_forwarded();\n+    heap->verifier()->verify_roots_no_forwarded(_generation);\n@@ -122,1 +120,0 @@\n-  assert(ShenandoahHeap::heap()->gc_generation() == _generation, \"Marking unexpected generation\");\n@@ -151,1 +148,0 @@\n-  assert(ShenandoahHeap::heap()->gc_generation() == _generation, \"Marking unexpected generation\");\n@@ -154,2 +150,0 @@\n-  ShenandoahReferenceProcessor* rp = _generation->ref_processor();\n-  shenandoah_assert_generations_reconciled();\n@@ -158,2 +152,1 @@\n-  mark_loop(worker_id, &_terminator, rp,\n-            _generation->type(), false \/* not cancellable *\/,\n+  mark_loop(worker_id, &_terminator, _generation->type(), false \/* not cancellable *\/,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,4 +53,2 @@\n-  ShenandoahGeneration* ggen = ShenandoahHeap::heap()->gc_generation();\n-  log_debug(gc, heap)(\"%s: active_generation is %s, gc_generation is %s\", prefix,\n-                      agen == nullptr ? \"nullptr\" : shenandoah_generation_name(agen->type()),\n-                      ggen == nullptr ? \"nullptr\" : shenandoah_generation_name(ggen->type()));\n+  log_debug(gc, heap)(\"%s: active_generation is %s\", prefix,\n+                      agen == nullptr ? \"nullptr\" : shenandoah_generation_name(agen->type()));\n@@ -62,1 +60,1 @@\n-    ShenandoahHeap::heap()->set_active_generation();\n+    ShenandoahHeap::heap()->set_active_generation(_generation);\n@@ -80,0 +78,4 @@\n+VM_ShenandoahInitMark::VM_ShenandoahInitMark(ShenandoahConcurrentGC* gc)\n+  : VM_ShenandoahOperation(gc->generation()), _gc(gc) {\n+}\n+\n@@ -86,0 +88,4 @@\n+VM_ShenandoahFinalMarkStartEvac::VM_ShenandoahFinalMarkStartEvac(ShenandoahConcurrentGC* gc)\n+  : VM_ShenandoahOperation(gc->generation()), _gc(gc) {\n+}\n+\n@@ -92,0 +98,4 @@\n+VM_ShenandoahFullGC::VM_ShenandoahFullGC(GCCause::Cause gc_cause, ShenandoahFullGC* full_gc)\n+  : VM_ShenandoahReferenceOperation(full_gc->generation()), _gc_cause(gc_cause), _full_gc(full_gc) {\n+}\n+\n@@ -98,0 +108,4 @@\n+VM_ShenandoahDegeneratedGC::VM_ShenandoahDegeneratedGC(ShenandoahDegenGC* gc)\n+  : VM_ShenandoahReferenceOperation(gc->generation()), _gc(gc) {\n+}\n+\n@@ -104,0 +118,4 @@\n+VM_ShenandoahInitUpdateRefs::VM_ShenandoahInitUpdateRefs(ShenandoahConcurrentGC* gc)\n+  : VM_ShenandoahOperation(gc->generation()), _gc(gc) {\n+}\n+\n@@ -110,0 +128,4 @@\n+VM_ShenandoahFinalUpdateRefs::VM_ShenandoahFinalUpdateRefs(ShenandoahConcurrentGC* gc)\n+  : VM_ShenandoahOperation(gc->generation()), _gc(gc) {\n+}\n+\n@@ -116,0 +138,4 @@\n+VM_ShenandoahFinalRoots::VM_ShenandoahFinalRoots(ShenandoahConcurrentGC* gc)\n+  : VM_ShenandoahOperation(gc->generation()), _gc(gc) {\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  ShenandoahGeneration* _generation;\n@@ -52,1 +53,5 @@\n-  VM_ShenandoahOperation() : _gc_id(GCId::current()) {};\n+  explicit VM_ShenandoahOperation(ShenandoahGeneration* generation)\n+  : _gc_id(GCId::current())\n+  , _generation(generation) {\n+  }\n+\n@@ -64,1 +69,2 @@\n-  VM_ShenandoahReferenceOperation() : VM_ShenandoahOperation() {};\n+  explicit VM_ShenandoahReferenceOperation(ShenandoahGeneration* generation)\n+    : VM_ShenandoahOperation(generation) {};\n@@ -70,1 +76,0 @@\n-private:\n@@ -73,6 +78,4 @@\n-  VM_ShenandoahInitMark(ShenandoahConcurrentGC* gc) :\n-    VM_ShenandoahOperation(),\n-    _gc(gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahInitMark; }\n-  const char* name()             const { return \"Shenandoah Init Marking\"; }\n-  virtual void doit();\n+  explicit VM_ShenandoahInitMark(ShenandoahConcurrentGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahInitMark; }\n+  const char* name()             const override { return \"Shenandoah Init Marking\"; }\n+  void doit() override;\n@@ -82,1 +85,0 @@\n-private:\n@@ -85,6 +87,4 @@\n-  VM_ShenandoahFinalMarkStartEvac(ShenandoahConcurrentGC* gc) :\n-    VM_ShenandoahOperation(),\n-    _gc(gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahFinalMarkStartEvac; }\n-  const char* name()             const { return \"Shenandoah Final Mark and Start Evacuation\"; }\n-  virtual  void doit();\n+  explicit VM_ShenandoahFinalMarkStartEvac(ShenandoahConcurrentGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahFinalMarkStartEvac; }\n+  const char* name()             const override { return \"Shenandoah Final Mark and Start Evacuation\"; }\n+  void doit() override;\n@@ -94,1 +94,0 @@\n-private:\n@@ -97,7 +96,4 @@\n-  VM_ShenandoahDegeneratedGC(ShenandoahDegenGC* gc) :\n-    VM_ShenandoahReferenceOperation(),\n-    _gc(gc) {};\n-\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahDegeneratedGC; }\n-  const char* name()             const { return \"Shenandoah Degenerated GC\"; }\n-  virtual  void doit();\n+  explicit VM_ShenandoahDegeneratedGC(ShenandoahDegenGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahDegeneratedGC; }\n+  const char* name()             const override { return \"Shenandoah Degenerated GC\"; }\n+  void doit() override;\n@@ -107,1 +103,0 @@\n-private:\n@@ -111,7 +106,4 @@\n-  VM_ShenandoahFullGC(GCCause::Cause gc_cause, ShenandoahFullGC* full_gc) :\n-    VM_ShenandoahReferenceOperation(),\n-    _gc_cause(gc_cause),\n-    _full_gc(full_gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahFullGC; }\n-  const char* name()             const { return \"Shenandoah Full GC\"; }\n-  virtual void doit();\n+  explicit VM_ShenandoahFullGC(GCCause::Cause gc_cause, ShenandoahFullGC* full_gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahFullGC; }\n+  const char* name()             const override { return \"Shenandoah Full GC\"; }\n+  void doit() override;\n@@ -123,6 +115,4 @@\n-  VM_ShenandoahInitUpdateRefs(ShenandoahConcurrentGC* gc) :\n-    VM_ShenandoahOperation(),\n-    _gc(gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahInitUpdateRefs; }\n-  const char* name()             const { return \"Shenandoah Init Update References\"; }\n-  virtual void doit();\n+  explicit VM_ShenandoahInitUpdateRefs(ShenandoahConcurrentGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahInitUpdateRefs; }\n+  const char* name()             const override { return \"Shenandoah Init Update References\"; }\n+  void doit() override;\n@@ -134,6 +124,4 @@\n-  VM_ShenandoahFinalUpdateRefs(ShenandoahConcurrentGC* gc) :\n-    VM_ShenandoahOperation(),\n-    _gc(gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahFinalUpdateRefs; }\n-  const char* name()             const { return \"Shenandoah Final Update References\"; }\n-  virtual void doit();\n+  explicit VM_ShenandoahFinalUpdateRefs(ShenandoahConcurrentGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahFinalUpdateRefs; }\n+  const char* name()             const override { return \"Shenandoah Final Update References\"; }\n+  void doit() override;\n@@ -145,6 +133,4 @@\n-  VM_ShenandoahFinalRoots(ShenandoahConcurrentGC* gc) :\n-    VM_ShenandoahOperation(),\n-    _gc(gc) {};\n-  VM_Operation::VMOp_Type type() const { return VMOp_ShenandoahFinalRoots; }\n-  const char* name()             const { return \"Shenandoah Final Roots\"; }\n-  virtual void doit();\n+  explicit VM_ShenandoahFinalRoots(ShenandoahConcurrentGC* gc);\n+  VM_Operation::VMOp_Type type() const override { return VMOp_ShenandoahFinalRoots; }\n+  const char* name()             const override { return \"Shenandoah Final Roots\"; }\n+  void doit() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.hpp","additions":36,"deletions":50,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-  ShenandoahVerifyOopClosure(ShenandoahVerifierStack* stack, MarkBitMap* map, ShenandoahLivenessData* ld,\n+  ShenandoahVerifyOopClosure(ShenandoahGeneration* generation, ShenandoahVerifierStack* stack,\n+                             MarkBitMap* map, ShenandoahLivenessData* ld,\n@@ -83,1 +84,1 @@\n-    _generation(nullptr) {\n+    _generation(generation) {\n@@ -95,6 +96,0 @@\n-\n-    if (_heap->mode()->is_generational()) {\n-      _generation = _heap->gc_generation();\n-      assert(_generation != nullptr, \"Expected active generation in this mode\");\n-      shenandoah_assert_generations_reconciled();\n-    }\n@@ -134,5 +129,1 @@\n-  bool in_generation(oop obj) {\n-    if (_generation == nullptr) {\n-      return true;\n-    }\n-\n+  bool in_generation(oop obj) const {\n@@ -200,1 +191,1 @@\n-                (obj_reg->is_old() && _heap->gc_generation()->is_young()),\n+                (obj_reg->is_old() && _generation->is_young()),\n@@ -202,1 +193,0 @@\n-          shenandoah_assert_generations_reconciled();\n@@ -279,1 +269,1 @@\n-        check(ShenandoahAsserts::_safe_all, obj, _heap->gc_generation()->complete_marking_context()->is_marked(obj),\n+        check(ShenandoahAsserts::_safe_all, obj, _generation->complete_marking_context()->is_marked(obj),\n@@ -284,1 +274,1 @@\n-        check(ShenandoahAsserts::_safe_all, obj, _heap->gc_generation()->complete_marking_context()->is_marked(obj),\n+        check(ShenandoahAsserts::_safe_all, obj, _generation->complete_marking_context()->is_marked(obj),\n@@ -574,0 +564,1 @@\n+  ShenandoahGeneration* _generation;\n@@ -576,1 +567,2 @@\n-  ShenandoahVerifierReachableTask(MarkBitMap* bitmap,\n+  ShenandoahVerifierReachableTask(ShenandoahGeneration* generation,\n+                                  MarkBitMap* bitmap,\n@@ -586,1 +578,2 @@\n-    _processed(0) {};\n+    _processed(0),\n+    _generation(generation) {};\n@@ -602,1 +595,1 @@\n-        ShenandoahVerifyOopClosure cl(&stack, _bitmap, _ld,\n+        ShenandoahVerifyOopClosure cl(_generation, &stack, _bitmap, _ld,\n@@ -606,1 +599,1 @@\n-          ShenandoahRootVerifier::strong_roots_do(&cl);\n+          ShenandoahRootVerifier::strong_roots_do(&cl, _generation);\n@@ -608,1 +601,1 @@\n-          ShenandoahRootVerifier::roots_do(&cl);\n+          ShenandoahRootVerifier::roots_do(&cl, _generation);\n@@ -615,1 +608,1 @@\n-      ShenandoahVerifyOopClosure cl(&stack, _bitmap, _ld,\n+      ShenandoahVerifyOopClosure cl(_generation, &stack, _bitmap, _ld,\n@@ -651,1 +644,2 @@\n-  ShenandoahVerifierMarkedRegionTask(MarkBitMap* bitmap,\n+  ShenandoahVerifierMarkedRegionTask(ShenandoahGeneration* generation,\n+                                     MarkBitMap* bitmap,\n@@ -663,7 +657,1 @@\n-          _generation(nullptr) {\n-    if (_heap->mode()->is_generational()) {\n-      _generation = _heap->gc_generation();\n-      assert(_generation != nullptr, \"Expected active generation in this mode.\");\n-      shenandoah_assert_generations_reconciled();\n-    }\n-  };\n+          _generation(generation) {}\n@@ -682,1 +670,1 @@\n-    ShenandoahVerifyOopClosure cl(&stack, _bitmap, _ld,\n+    ShenandoahVerifyOopClosure cl(_generation, &stack, _bitmap, _ld,\n@@ -705,2 +693,2 @@\n-  bool in_generation(ShenandoahHeapRegion* r) {\n-    return _generation == nullptr || _generation->contains(r);\n+  bool in_generation(ShenandoahHeapRegion* r) const {\n+    return _generation->contains(r);\n@@ -712,1 +700,1 @@\n-    if (_heap->gc_generation()->complete_marking_context()->is_marked(cast_to_oop(obj))) {\n+    if (_generation->complete_marking_context()->is_marked(cast_to_oop(obj))) {\n@@ -720,1 +708,1 @@\n-    ShenandoahMarkingContext* ctx = _heap->gc_generation()->complete_marking_context();\n+    ShenandoahMarkingContext* ctx = _generation->complete_marking_context();\n@@ -797,1 +785,2 @@\n-void ShenandoahVerifier::verify_at_safepoint(const char* label,\n+void ShenandoahVerifier::verify_at_safepoint(ShenandoahGeneration* generation,\n+                                             const char* label,\n@@ -899,1 +888,0 @@\n-  ShenandoahGeneration* generation;\n@@ -901,8 +889,0 @@\n-    generation = _heap->gc_generation();\n-    guarantee(generation != nullptr, \"Need to know which generation to verify.\");\n-    shenandoah_assert_generations_reconciled();\n-  } else {\n-    generation = nullptr;\n-  }\n-\n-  if (generation != nullptr) {\n@@ -955,5 +935,1 @@\n-    if (generation != nullptr) {\n-      generation->heap_region_iterate(&cl);\n-    } else {\n-      _heap->heap_region_iterate(&cl);\n-    }\n+    generation->heap_region_iterate(&cl);\n@@ -983,1 +959,1 @@\n-    ShenandoahVerifierReachableTask task(_verification_bit_map, ld, label, options);\n+    ShenandoahVerifierReachableTask task(generation, _verification_bit_map, ld, label, options);\n@@ -1002,2 +978,2 @@\n-    guarantee(_heap->gc_generation()->is_mark_complete(), \"Marking context should be complete\");\n-    ShenandoahVerifierMarkedRegionTask task(_verification_bit_map, ld, label, options);\n+    guarantee(generation->is_mark_complete(), \"Marking context should be complete\");\n+    ShenandoahVerifierMarkedRegionTask task(generation, _verification_bit_map, ld, label, options);\n@@ -1018,1 +994,1 @@\n-      if (generation != nullptr && !generation->contains(r)) {\n+      if (!generation->contains(r)) {\n@@ -1045,2 +1021,0 @@\n-\n-\n@@ -1053,1 +1027,1 @@\n-void ShenandoahVerifier::verify_generic(VerifyOption vo) {\n+void ShenandoahVerifier::verify_generic(ShenandoahGeneration* generation, VerifyOption vo) {\n@@ -1055,0 +1029,1 @@\n+          generation,\n@@ -1067,1 +1042,1 @@\n-void ShenandoahVerifier::verify_before_concmark() {\n+void ShenandoahVerifier::verify_before_concmark(ShenandoahGeneration* generation) {\n@@ -1075,0 +1050,1 @@\n+          generation,\n@@ -1088,1 +1064,1 @@\n-void ShenandoahVerifier::verify_after_concmark() {\n+void ShenandoahVerifier::verify_after_concmark(ShenandoahGeneration* generation) {\n@@ -1090,0 +1066,1 @@\n+          generation,\n@@ -1102,1 +1079,1 @@\n-void ShenandoahVerifier::verify_after_concmark_with_promotions() {\n+void ShenandoahVerifier::verify_after_concmark_with_promotions(ShenandoahGeneration* generation) {\n@@ -1104,0 +1081,1 @@\n+          generation,\n@@ -1117,1 +1095,1 @@\n-void ShenandoahVerifier::verify_before_evacuation() {\n+void ShenandoahVerifier::verify_before_evacuation(ShenandoahGeneration* generation) {\n@@ -1119,0 +1097,1 @@\n+          generation,\n@@ -1132,1 +1111,1 @@\n-void ShenandoahVerifier::verify_before_update_refs() {\n+void ShenandoahVerifier::verify_before_update_refs(ShenandoahGeneration* generation) {\n@@ -1139,0 +1118,1 @@\n+          generation,\n@@ -1152,1 +1132,1 @@\n-void ShenandoahVerifier::verify_after_update_refs() {\n+void ShenandoahVerifier::verify_after_update_refs(ShenandoahGeneration* generation) {\n@@ -1154,0 +1134,1 @@\n+          generation,\n@@ -1166,1 +1147,1 @@\n-void ShenandoahVerifier::verify_after_degenerated() {\n+void ShenandoahVerifier::verify_after_degenerated(ShenandoahGeneration* generation) {\n@@ -1168,0 +1149,1 @@\n+          generation,\n@@ -1180,1 +1162,1 @@\n-void ShenandoahVerifier::verify_before_fullgc() {\n+void ShenandoahVerifier::verify_before_fullgc(ShenandoahGeneration* generation) {\n@@ -1182,0 +1164,1 @@\n+          generation,\n@@ -1194,1 +1177,1 @@\n-void ShenandoahVerifier::verify_after_fullgc() {\n+void ShenandoahVerifier::verify_after_fullgc(ShenandoahGeneration* generation) {\n@@ -1196,0 +1179,1 @@\n+          generation,\n@@ -1260,1 +1244,1 @@\n-void ShenandoahVerifier::verify_roots_in_to_space() {\n+void ShenandoahVerifier::verify_roots_in_to_space(ShenandoahGeneration* generation) {\n@@ -1262,1 +1246,1 @@\n-  ShenandoahRootVerifier::roots_do(&cl);\n+  ShenandoahRootVerifier::roots_do(&cl, generation);\n@@ -1265,1 +1249,1 @@\n-void ShenandoahVerifier::verify_roots_no_forwarded() {\n+void ShenandoahVerifier::verify_roots_no_forwarded(ShenandoahGeneration* generation) {\n@@ -1267,1 +1251,1 @@\n-  ShenandoahRootVerifier::roots_do(&cl);\n+  ShenandoahRootVerifier::roots_do(&cl, generation);\n@@ -1303,1 +1287,0 @@\n-  shenandoah_assert_generations_reconciled();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":55,"deletions":72,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -199,1 +199,2 @@\n-  void verify_at_safepoint(const char* label,\n+  void verify_at_safepoint(ShenandoahGeneration* generation,\n+                           const char* label,\n@@ -213,10 +214,10 @@\n-  void verify_before_concmark();\n-  void verify_after_concmark();\n-  void verify_after_concmark_with_promotions();\n-  void verify_before_evacuation();\n-  void verify_before_update_refs();\n-  void verify_after_update_refs();\n-  void verify_before_fullgc();\n-  void verify_after_fullgc();\n-  void verify_after_degenerated();\n-  void verify_generic(VerifyOption option);\n+  void verify_before_concmark(ShenandoahGeneration* generation);\n+  void verify_after_concmark(ShenandoahGeneration* generation);\n+  void verify_after_concmark_with_promotions(ShenandoahGeneration* generation);\n+  void verify_before_evacuation(ShenandoahGeneration* generation);\n+  void verify_before_update_refs(ShenandoahGeneration* generation);\n+  void verify_after_update_refs(ShenandoahGeneration* generation);\n+  void verify_before_fullgc(ShenandoahGeneration* generation);\n+  void verify_after_fullgc(ShenandoahGeneration* generation);\n+  void verify_after_degenerated(ShenandoahGeneration* generation);\n+  void verify_generic(ShenandoahGeneration* generation, VerifyOption option);\n@@ -225,2 +226,2 @@\n-  void verify_roots_in_to_space();\n-  void verify_roots_no_forwarded();\n+  void verify_roots_in_to_space(ShenandoahGeneration* generation);\n+  void verify_roots_no_forwarded(ShenandoahGeneration* generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.hpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}