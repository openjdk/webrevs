{"files":[{"patch":"@@ -3839,1 +3839,1 @@\n-void Assembler::nop(int i) {\n+void Assembler::nop(uint i) {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1733,1 +1733,1 @@\n-  void nop(int i = 1);\n+  void nop(uint i = 1);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1153,1 +1153,1 @@\n-  align(64, (unsigned long long) pc());\n+  align(64, (uint)(uintptr_t)pc());\n@@ -1157,1 +1157,1 @@\n-  align(32, (unsigned long long) pc());\n+  align(32, (uint)(uintptr_t)pc());\n@@ -1160,1 +1160,1 @@\n-void MacroAssembler::align(int modulus) {\n+void MacroAssembler::align(uint modulus) {\n@@ -1166,8 +1166,3 @@\n-void MacroAssembler::align(int modulus, int target) {\n-  int mask = modulus - 1;\n-  guarantee((modulus & mask) == 0, \"Modulus must be a power of two\");\n-  int numNops = mask & (-target);\n-  assert(numNops >= 0 && numNops < modulus, \"Unexpected number of NOPs\");\n-  assert((target + numNops) % modulus == 0, \"Incorrect number of NOPs\");\n-  if (numNops != 0) {\n-    nop(numNops);\n+void MacroAssembler::align(uint modulus, uint target) {\n+  if (target % modulus != 0) {\n+    nop(modulus - (target % modulus));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -216,2 +216,2 @@\n-  void align(int modulus);\n-  void align(int modulus, int target);\n+  void align(uint modulus);\n+  void align(uint modulus, uint target);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}