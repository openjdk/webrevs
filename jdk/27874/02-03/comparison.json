{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n@@ -30,0 +32,1 @@\n+import java.net.http.HttpClient;\n@@ -33,0 +36,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n@@ -74,6 +79,1 @@\n-            HttpServerAdapters.HttpTestHandler serverHandler = exchange -> {\n-                try (exchange) {\n-                    exchange.sendResponseHeaders(200, 0);\n-                }\n-            };\n-            server.addHandler(serverHandler, serverHandlerPath);\n+            server.addHandler(new BodyEchoingHandler(), serverHandlerPath);\n@@ -83,20 +83,1 @@\n-            var clientBuilder = HttpServerAdapters\n-                    .createClientBuilderFor(version)\n-                    .proxy(NO_PROXY)\n-                    .version(version);\n-            if (sslContext != null) {\n-                clientBuilder.sslContext(sslContext);\n-            }\n-            try (var client = clientBuilder.build()) {\n-\n-                \/\/ Create the request\n-                var requestUri = URI.create(String.format(\n-                        \"%s:\/\/%s%s\/x\",\n-                        sslContext == null ? \"http\" : \"https\",\n-                        server.serverAuthority(),\n-                        serverHandlerPath));\n-                var requestBuilder = HttpRequest.newBuilder(requestUri).version(version).HEAD();\n-                if (HTTP_3.equals(version)) {\n-                    requestBuilder.setOption(H3_DISCOVERY, HTTP_3_URI_ONLY);\n-                }\n-                var request = requestBuilder.build();\n+            try (var client = createClient(version, sslContext)) {\n@@ -104,5 +85,8 @@\n-                \/\/ Execute and verify the request\n-                var response = client.send(request, HttpResponse.BodyHandlers.discarding());\n-                if (response.statusCode() != 200) {\n-                    throw new AssertionError(\"Was expecting status code 200, found: \" + response.statusCode());\n-                }\n+                \/\/ Create the request with body to ensure that `ByteBuffer`s\n+                \/\/ will be used throughout the entire end-to-end interaction.\n+                byte[] requestBodyBytes = \"body\".repeat(1000).getBytes(StandardCharsets.US_ASCII);\n+                var request = createRequest(sslContext, server, serverHandlerPath, version, requestBodyBytes);\n+\n+                \/\/ Execute and verify the request, twice for certainty.\n+                requestAndVerify(client, request, requestBodyBytes);\n+                requestAndVerify(client, request, requestBodyBytes);\n@@ -116,0 +100,61 @@\n+    private static HttpClient createClient(Version version, SSLContext sslContext) {\n+        var clientBuilder = HttpServerAdapters\n+                .createClientBuilderFor(version)\n+                .proxy(NO_PROXY)\n+                .version(version);\n+        if (sslContext != null) {\n+            clientBuilder.sslContext(sslContext);\n+        }\n+        return clientBuilder.build();\n+    }\n+\n+    private static HttpRequest createRequest(SSLContext sslContext, HttpTestServer server, String serverHandlerPath, Version version, byte[] requestBodyBytes) {\n+        var requestUri = URI.create(String.format(\n+                \"%s:\/\/%s%s\/x\",\n+                sslContext == null ? \"http\" : \"https\",\n+                server.serverAuthority(),\n+                serverHandlerPath));\n+        var requestBuilder = HttpRequest\n+                .newBuilder(requestUri)\n+                .version(version)\n+                .POST(HttpRequest.BodyPublishers.ofByteArray(requestBodyBytes));\n+        if (HTTP_3.equals(version)) {\n+            requestBuilder.setOption(H3_DISCOVERY, HTTP_3_URI_ONLY);\n+        }\n+        return requestBuilder.build();\n+    }\n+\n+    private static void requestAndVerify(HttpClient client, HttpRequest request, byte[] requestBodyBytes)\n+            throws IOException, InterruptedException {\n+        var response = client.send(request, HttpResponse.BodyHandlers.ofByteArray());\n+        if (response.statusCode() != 200) {\n+            throw new AssertionError(\"Was expecting status code 200, found: \" + response.statusCode());\n+        }\n+        byte[] responseBodyBytes = response.body();\n+        int mismatchIndex = Arrays.mismatch(requestBodyBytes, responseBodyBytes);\n+        if (mismatchIndex >= 0) {\n+            var message = String.format(\n+                    \"Response body (%s bytes) mismatches the request body (%s bytes) at index %s!\",\n+                    responseBodyBytes.length, requestBodyBytes.length, mismatchIndex);\n+            throw new AssertionError(message);\n+        }\n+    }\n+\n+    private static final class BodyEchoingHandler implements HttpServerAdapters.HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpServerAdapters.HttpTestExchange exchange) throws IOException {\n+            try (exchange) {\n+                byte[] body;\n+                try (var requestBodyStream = exchange.getRequestBody()) {\n+                    body = requestBodyStream.readAllBytes();\n+                }\n+                exchange.sendResponseHeaders(200, body.length);\n+                try (var responseBodyStream = exchange.getResponseBody()) {\n+                    responseBodyStream.write(body);\n+                }\n+            }\n+        }\n+\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/BufferSize1Test.java","additions":76,"deletions":31,"binary":false,"changes":107,"status":"modified"}]}