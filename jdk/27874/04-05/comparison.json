{"files":[{"patch":"@@ -24,2 +24,1 @@\n-import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestEchoHandler;\n-import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestServer;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n@@ -28,0 +27,3 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,0 +42,2 @@\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n@@ -43,1 +47,2 @@\n-import static jdk.httpclient.test.lib.common.HttpServerAdapters.createClientBuilderFor;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,1 +51,1 @@\n- * @test\n+ * @test id\n@@ -52,5 +57,1 @@\n- * @run main\/othervm -Djdk.httpclient.bufsize=1 -Dtest.httpVersion=HTTP_1_1 BufferSize1Test\n- * @run main\/othervm -Djdk.httpclient.bufsize=1 -Dtest.httpVersion=HTTP_1_1 -Dtest.sslEnabled BufferSize1Test\n- * @run main\/othervm -Djdk.httpclient.bufsize=1 -Dtest.httpVersion=HTTP_2 BufferSize1Test\n- * @run main\/othervm -Djdk.httpclient.bufsize=1 -Dtest.httpVersion=HTTP_2 -Dtest.sslEnabled BufferSize1Test\n- * @run main\/othervm -Djdk.httpclient.bufsize=1 -Dtest.httpVersion=HTTP_3 BufferSize1Test\n+ * @run junit\/othervm -Djdk.httpclient.bufsize=1 BufferSize1Test\n@@ -59,1 +60,1 @@\n-public class BufferSize1Test {\n+class BufferSize1Test implements HttpServerAdapters {\n@@ -61,1 +62,4 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeAll\n+    static void verifyBufferSize() {\n+        assertEquals(1, Utils.BUFSIZE);\n+    }\n@@ -63,4 +67,13 @@\n-        \/\/ Verify `Utils.BUFSIZE`\n-        if (Utils.BUFSIZE != 1) {\n-            throw new AssertionError(\"Unexpected `Utils.BUFSIZE`: \" + Utils.BUFSIZE);\n-        }\n+    static Object[][] testArgs() {\n+        return new Object[][]{\n+                {HTTP_1_1, false},\n+                {HTTP_1_1, true},\n+                {HTTP_2, false},\n+                {HTTP_2, true},\n+                {HTTP_3, true}\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testArgs\")\n+    void test(Version version, boolean secure) throws Exception {\n@@ -69,4 +82,1 @@\n-        var version = Version.valueOf(System.getProperty(\"test.httpVersion\"));\n-        var sslContext = System.getProperty(\"test.sslEnabled\") != null || HTTP_3.equals(version)\n-                ? new SimpleSSLContext().get()\n-                : null;\n+        var sslContext = secure || HTTP_3.equals(version) ? new SimpleSSLContext().get() : null;\n@@ -91,1 +101,2 @@\n-                \/\/ Execute and verify the request, twice for certainty.\n+                \/\/ Execute and verify the request.\n+                \/\/ Do it twice to cover code paths before and after a protocol upgrade.\n@@ -101,2 +112,2 @@\n-    private static HttpClient createClient(Version version, SSLContext sslContext) {\n-        var clientBuilder = createClientBuilderFor(version)\n+    private HttpClient createClient(Version version, SSLContext sslContext) {\n+        var clientBuilder = newClientBuilderForH3()\n@@ -140,6 +151,5 @@\n-        if (mismatchIndex >= 0) {\n-            var message = String.format(\n-                    \"Response body (%s bytes) mismatches the request body (%s bytes) at index %s!\",\n-                    responseBodyBytes.length, requestBodyBytes.length, mismatchIndex);\n-            throw new AssertionError(message);\n-        }\n+        assertTrue(\n+                mismatchIndex < 0,\n+                String.format(\n+                        \"Response body (%s bytes) mismatches the request body (%s bytes) at index %s!\",\n+                        responseBodyBytes.length, requestBodyBytes.length, mismatchIndex));\n","filename":"test\/jdk\/java\/net\/httpclient\/BufferSize1Test.java","additions":38,"deletions":28,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -67,1 +67,3 @@\n-        \/\/ Run the Java file\n+        \/\/ To obtain the buffer size constant, run the Java file in a separate\n+        \/\/ process, which is needed to capture the stdout and verify the logged\n+        \/\/ error message.\n","filename":"test\/jdk\/java\/net\/httpclient\/BufferSizePropertyClampTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}