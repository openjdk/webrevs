{"files":[{"patch":"@@ -24,2 +24,1 @@\n-import jdk.test.lib.process.ProcessTools;\n-import org.junit.jupiter.api.AfterAll;\n+import jdk.internal.net.http.common.Utils;\n@@ -27,2 +26,1 @@\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n+import org.junit.jupiter.api.Test;\n@@ -30,3 +28,3 @@\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -34,0 +32,3 @@\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n@@ -36,1 +37,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,0 +43,1 @@\n+ *\n@@ -44,1 +45,15 @@\n- * @run junit BufferSizePropertyClampTest\n+ *\n+ * @comment `-Djdk.httpclient.HttpClient.log=errors` is needed to enable\n+ *          logging and verify that invalid input gets logged\n+ * @run junit\/othervm\n+ *      -Djdk.httpclient.HttpClient.log=errors\n+ *      -Djdk.httpclient.bufsize=-1\n+ *      BufferSizePropertyClampTest\n+ * @run junit\/othervm\n+ *      -Djdk.httpclient.HttpClient.log=errors\n+ *      -Djdk.httpclient.bufsize=0\n+ *      BufferSizePropertyClampTest\n+ * @run junit\/othervm\n+ *      -Djdk.httpclient.HttpClient.log=errors\n+ *      -Djdk.httpclient.bufsize=16385\n+ *      BufferSizePropertyClampTest\n@@ -49,1 +64,3 @@\n-    private static Path scriptPath;\n+    \/** Anchor to avoid the {@code Logger} instance get GC'ed *\/\n+    private static final Logger CLIENT_LOGGER =\n+            Logger.getLogger(\"jdk.httpclient.HttpClient\");\n@@ -51,6 +68,2 @@\n-    @BeforeAll\n-    static void setUp() throws IOException {\n-        \/\/ Create a Java file that prints the `Utils::BUFSIZE` value\n-        scriptPath = Path.of(\"UtilsBUFSIZE.java\");\n-        Files.write(scriptPath, List.of(\"void main() { IO.println(jdk.internal.net.http.common.Utils.BUFSIZE); }\"));\n-    }\n+    private static final List<String> CLIENT_LOGGER_MESSAGES =\n+            Collections.synchronizedList(new ArrayList<>());\n@@ -58,4 +71,3 @@\n-    @AfterAll\n-    static void tearDown() throws IOException {\n-        Files.deleteIfExists(scriptPath);\n-    }\n+    @BeforeAll\n+    static void registerLoggerHandler() {\n+        CLIENT_LOGGER.addHandler(new Handler() {\n@@ -63,3 +75,5 @@\n-    @ParameterizedTest\n-    @ValueSource(ints = {-1, 0, (2 << 14) + 1})\n-    void test(int invalidBufferSize) throws Exception {\n+            @Override\n+            public void publish(LogRecord record) {\n+                var message = MessageFormat.format(record.getMessage(), record.getParameters());\n+                CLIENT_LOGGER_MESSAGES.add(message);\n+            }\n@@ -67,9 +81,4 @@\n-        \/\/ To obtain the buffer size constant, run the Java file in a separate\n-        \/\/ process, which is needed to capture the stdout and verify the logged\n-        \/\/ error message.\n-        var outputAnalyzer = ProcessTools.executeTestJava(\n-                \"--add-exports\", \"java.net.http\/jdk.internal.net.http.common=ALL-UNNAMED\",\n-                \"-Djdk.httpclient.HttpClient.log=errors\",\n-                \"-Djdk.httpclient.bufsize=\" + invalidBufferSize,\n-                scriptPath.toString());\n-        outputAnalyzer.shouldHaveExitValue(0);\n+            @Override\n+            public void flush() {\n+                \/\/ Do nothing\n+            }\n@@ -77,9 +86,4 @@\n-        \/\/ Verify stderr\n-        List<String> stderrLines = outputAnalyzer.stderrAsLines();\n-        assertEquals(2, stderrLines.size(), \"Expected 2 lines, found: \" + stderrLines);\n-        assertTrue(\n-                stderrLines.get(0).endsWith(\"jdk.internal.net.http.common.Utils getIntegerNetProperty\"),\n-                \"Unexpected line: \" + stderrLines.get(0));\n-        assertEquals(\n-                \"INFO: ERROR: Property value for jdk.httpclient.bufsize=\" + invalidBufferSize + \" not in [1..16384]: using default=16384\",\n-                stderrLines.get(1).replaceAll(\",\", \"\"));\n+            @Override\n+            public void close() {\n+                \/\/ Do nothing\n+            }\n@@ -87,4 +91,2 @@\n-        \/\/ Verify stdout\n-        var stdoutLines = outputAnalyzer.stdoutAsLines();\n-        assertEquals(1, stdoutLines.size(), \"Expected one line, found: \" + stdoutLines);\n-        assertEquals(\"16384\", stdoutLines.get(0));\n+        });\n+    }\n@@ -92,0 +94,10 @@\n+    @Test\n+    void test() throws Exception {\n+        assertEquals(16384, Utils.BUFSIZE);\n+        assertEquals(\n+                1, CLIENT_LOGGER_MESSAGES.size(),\n+                \"Unexpected number of logger messages: \" + CLIENT_LOGGER_MESSAGES);\n+        var expectedMessage = \"ERROR: Property value for jdk.httpclient.bufsize=\" +\n+                System.getProperty(\"jdk.httpclient.bufsize\") +\n+                \" not in [1..16384]: using default=16384\";\n+        assertEquals(expectedMessage, CLIENT_LOGGER_MESSAGES.getFirst().replaceAll(\",\", \"\"));\n","filename":"test\/jdk\/java\/net\/httpclient\/BufferSizePropertyClampTest.java","additions":57,"deletions":45,"binary":false,"changes":102,"status":"modified"}]}