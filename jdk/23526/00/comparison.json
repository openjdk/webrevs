{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,1 @@\n-                super(\"HmacSHA224\", 224);\n+                super(\"HmacSHA224\", 512);\n@@ -144,1 +144,1 @@\n-                super(\"HmacSHA256\", 256);\n+                super(\"HmacSHA256\", 512);\n@@ -149,1 +149,1 @@\n-                super(\"HmacSHA384\", 384);\n+                super(\"HmacSHA384\", 1024);\n@@ -154,1 +154,1 @@\n-                super(\"HmacSHA512\", 512);\n+                super(\"HmacSHA512\", 1024);\n@@ -159,1 +159,1 @@\n-                super(\"HmacSHA512\/224\", 224);\n+                super(\"HmacSHA512\/224\", 1024);\n@@ -164,1 +164,1 @@\n-                super(\"HmacSHA512\/256\", 256);\n+                super(\"HmacSHA512\/256\", 1024);\n@@ -169,1 +169,1 @@\n-                super(\"HmacSHA3-224\", 224);\n+                super(\"HmacSHA3-224\", 1152);\n@@ -174,1 +174,1 @@\n-                super(\"HmacSHA3-256\", 256);\n+                super(\"HmacSHA3-256\", 1088);\n@@ -179,1 +179,1 @@\n-                super(\"HmacSHA3-384\", 384);\n+                super(\"HmacSHA3-384\", 832);\n@@ -184,1 +184,1 @@\n-                super(\"HmacSHA3-512\", 512);\n+                super(\"HmacSHA3-512\", 576);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyGeneratorCore.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,6 +293,7 @@\n-                        case \"MD5\" -> 512;\n-                        case \"SHA1\" -> 160;\n-                        case \"SHA224\", \"SHA512\/224\", \"SHA3-224\" -> 224;\n-                        case \"SHA256\", \"SHA512\/256\", \"SHA3-256\" -> 256;\n-                        case \"SHA384\", \"SHA3-384\" -> 384;\n-                        case \"SHA512\", \"SHA3-512\" -> 512;\n+                        case \"MD5\", \"SHA1\", \"SHA224\", \"SHA256\" -> 512;\n+                        case \"SHA384\", \"SHA512\", \"SHA512\/224\", \"SHA512\/256\"\n+                                -> 1024;\n+                        case \"SHA3-224\" -> 1152;\n+                        case \"SHA3-256\" -> 1088;\n+                        case \"SHA3-384\" -> 832;\n+                        case \"SHA3-512\" -> 576;\n@@ -300,2 +301,2 @@\n-                            throw new ProviderException(\"Unsupported algorithm \" +\n-                                    algorithm);\n+                            throw new ProviderException(\"Unsupported algorithm \"\n+                                    + algorithm);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n- * @bug 4628062 4963723 8267319 8288050\n- * @summary Verify that AES KeyGenerator supports default initialization\n- *      when init is not called\n+ * @bug 4628062 4963723 8267319 8288050 8348432\n+ * @summary Verify that AES and Hmac KeyGenerator supports default\n+ *      initialization when init is not called\n@@ -37,8 +37,28 @@\n-    \/\/ first value is the default key size\n-    private static final int[] AES_SIZES = { 32, 16, 24 }; \/\/ in bytes\n-    private static final int[] HMACSHA224_SIZES = { 28 };\n-    private static final int[] HMACSHA256_SIZES = { 32 };\n-    private static final int[] HMACSHA384_SIZES = { 48 };\n-    private static final int[] HMACSHA512_SIZES = { 64 };\n-    private static final int[] HMACSHA512_224_SIZES = { 28 };\n-    private static final int[] HMACSHA512_256_SIZES = { 32 };\n+    \/\/ valid key sizes (in bytes); first value is the default key size\n+    private static final int[] AES_SIZES = { 32, 16, 24 };\n+    private static final int[] HMACSHA224AND256_SIZES = { 64, 48 };\n+    private static final int[] HMACSHA384AND512_SIZES = { 128, 112 };\n+    private static final int[] HMACSHA3_224_SIZES = { 144, 128 };\n+    private static final int[] HMACSHA3_256_SIZES = { 136, 110 };\n+    private static final int[] HMACSHA3_384_SIZES = { 104, 88 };\n+    private static final int[] HMACSHA3_512_SIZES = { 72, 64 };\n+\n+    record TestData(String algo, int[] validSizes) {\n+    }\n+\n+    private static final TestData[] TEST_DATUM = {\n+        new TestData(\"AES\", AES_SIZES),\n+        new TestData(\"HmacSHA224\", HMACSHA224AND256_SIZES),\n+        new TestData(\"HmacSHA256\", HMACSHA224AND256_SIZES),\n+        new TestData(\"HmacSHA384\", HMACSHA384AND512_SIZES),\n+        new TestData(\"HmacSHA512\", HMACSHA384AND512_SIZES),\n+        new TestData(\"HmacSHA512\/224\", HMACSHA384AND512_SIZES),\n+        new TestData(\"HmacSHA512\/256\", HMACSHA384AND512_SIZES),\n+        new TestData(\"HmacSHA3-224\", HMACSHA3_224_SIZES),\n+        new TestData(\"HmacSHA3-256\", HMACSHA3_256_SIZES),\n+        new TestData(\"HmacSHA3-384\", HMACSHA3_384_SIZES),\n+        new TestData(\"HmacSHA3-512\", HMACSHA3_512_SIZES)\n+    };\n+\n+    public void execute(String algo, int[] keySizes) throws Exception {\n+        System.out.println(\"Testing \" + algo);\n@@ -46,1 +66,0 @@\n-    public boolean execute(String algo, int[] keySizes) throws Exception {\n@@ -61,9 +80,7 @@\n-        if (keySizes.length > 1) {\n-            \/\/ 1. call init(int keysize) with various valid key sizes\n-            \/\/ and see if the generated key is the right size.\n-            for (int i=0; i<keySizes.length; i++) {\n-                kg.init(keySizes[i]*8); \/\/ in bits\n-                Key key = kg.generateKey();\n-                if (key.getEncoded().length != keySizes[i]) {\n-                    throw new Exception(\"key is generated with the wrong length!\");\n-                }\n+        \/\/ 1. call init(int keysize) with various valid key sizes\n+        \/\/    and see if the generated key is the right size.\n+        for (int ks : keySizes) {\n+            kg.init(ks*8); \/\/ in bits\n+            Key key = kg.generateKey();\n+            if (key.getEncoded().length != ks) {\n+                throw new Exception(\"key is generated with the wrong length!\");\n@@ -71,2 +88,4 @@\n-            \/\/ 2. call init(int keysize) with invalid key size and see\n-            \/\/ if the expected InvalidParameterException is thrown.\n+        }\n+        \/\/ 2. for AES, call init(int keysize) with invalid key size and see\n+        \/\/ if the expected InvalidParameterException is thrown.\n+        if (algo.equals(\"AES\")) {\n@@ -75,0 +94,1 @@\n+                throw new Exception(\"expected IPE not thrown\");\n@@ -76,0 +96,1 @@\n+                \/\/ expected\n@@ -77,1 +98,2 @@\n-                throw new Exception(\"wrong exception is thrown for invalid key size!\");\n+                ex.printStackTrace();\n+                throw new Exception(\"Wrong exception is thrown instead of IPE!\");\n@@ -80,3 +102,1 @@\n-        System.out.println(algo + \" Passed!\");\n-        \/\/ passed all tests...hooray!\n-        return true;\n+        System.out.println(\"=> Passed!\");\n@@ -87,8 +107,3 @@\n-\n-        test.execute(\"AES\", AES_SIZES);\n-        test.execute(\"HmacSHA224\", HMACSHA224_SIZES);\n-        test.execute(\"HmacSHA256\", HMACSHA256_SIZES);\n-        test.execute(\"HmacSHA384\", HMACSHA384_SIZES);\n-        test.execute(\"HmacSHA512\", HMACSHA512_SIZES);\n-        test.execute(\"HmacSHA512\/224\", HMACSHA512_224_SIZES);\n-        test.execute(\"HmacSHA512\/256\", HMACSHA512_256_SIZES);\n+        for (TestData td : TEST_DATUM) {\n+            test.execute(td.algo, td.validSizes);\n+        }\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyGenerator\/Test4628062.java","additions":51,"deletions":36,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8242332\n+ * @bug 8242332 8348432\n@@ -53,0 +53,15 @@\n+    \/\/ return key length in bytes\n+    private static int getDefaultKeySize(String algo) {\n+        return switch (algo) {\n+            case \"HmacMD5\", \"HmacSHA1\", \"HmacSHA224\", \"HmacSHA256\" -> 64;\n+            case \"HmacSHA384\", \"HmacSHA512\", \"HmacSHA512\/224\", \"HmacSHA512\/256\"\n+                    -> 128;\n+            case \"HmacSHA3-224\" -> 144;\n+            case \"HmacSHA3-256\" -> 136;\n+            case \"HmacSHA3-384\" -> 104;\n+            case \"HmacSHA3-512\" -> 72;\n+            default -> throw new RuntimeException(\"Unsupported algorithm \" +\n+                    algo);\n+        };\n+    }\n+\n@@ -61,0 +76,1 @@\n+\n@@ -63,6 +79,7 @@\n-                SecretKey k1 = kg.generateKey();\n-                int keysize = k1.getEncoded().length << 3;\n-                System.out.println(\"=> default key size = \" + keysize);\n-                kg.init(keysize);\n-                SecretKey k2 = kg.generateKey();\n-                if ((k2.getEncoded().length << 3) != keysize) {\n+                int defSizeInBytes = getDefaultKeySize(alg);\n+                if (!checkKeySize(kg.generateKey(), defSizeInBytes)) {\n+                    success = false;\n+                    System.out.println(\"default keysize check failed\");\n+                }\n+                kg.init(defSizeInBytes << 3);\n+                if (!checkKeySize(kg.generateKey(), defSizeInBytes)) {\n@@ -83,0 +100,6 @@\n+\n+    \/\/ if key encoding is null; assume the key has the right length\n+    private static boolean checkKeySize(SecretKey k, int lenInBytes) {\n+        byte[] encoded = k.getEncoded();\n+        return (encoded != null ? encoded.length == lenInBytes : true);\n+    }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyGenerator\/HmacDefKeySizeTest.java","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"}]}