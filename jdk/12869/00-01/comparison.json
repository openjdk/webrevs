{"files":[{"patch":"@@ -304,1 +304,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -325,1 +326,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -305,1 +305,2 @@\n-  if (!InlineIntrinsics || !UseZfhmin ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -326,1 +327,2 @@\n-  if (!InlineIntrinsics || !UseZfhmin ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,1 +198,2 @@\n-    \/\/ Instruction requires different XMM registers\n+    \/\/ Use separate tmp XMM register because caller may\n+    \/\/ requires src XMM register to be unchanged (as in x86.ad).\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3928,1 +3928,1 @@\n-  if (VM_Version::supports_f16c() || VM_Version::supports_avx512vl()) {\n+  if (VM_Version::supports_float16()) {\n@@ -3930,0 +3930,1 @@\n+    \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -322,1 +322,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -327,5 +328,1 @@\n-  \/\/ For AVX CPUs only. f16c support is disabled if UseAVX == 0.\n-  if (VM_Version::supports_f16c() || VM_Version::supports_avx512vl()) {\n-    address entry = __ pc();\n-\n-    \/\/ rsi: the sender's SP\n+  address entry = __ pc();\n@@ -333,3 +330,1 @@\n-    \/\/ Load value into xmm0 and convert\n-    __ movswl(rax, Address(rsp, wordSize));\n-    __ flt16_to_flt(xmm0, rax);\n+  \/\/ rsi: the sender's SP\n@@ -337,6 +332,3 @@\n-    \/\/ Return\n-    __ pop(rdi); \/\/ get return address\n-    __ mov(rsp, rsi); \/\/ set rsp to the sender's SP\n-    __ jmp(rdi);\n-    return entry;\n-  }\n+  \/\/ Load value into xmm0 and convert\n+  __ movswl(rax, Address(rsp, wordSize));\n+  __ flt16_to_flt(xmm0, rax);\n@@ -344,1 +336,5 @@\n-  return nullptr;\n+  \/\/ Return\n+  __ pop(rdi); \/\/ get return address\n+  __ mov(rsp, rsi); \/\/ set rsp to the sender's SP\n+  __ jmp(rdi);\n+  return entry;\n@@ -352,1 +348,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -357,3 +354,1 @@\n-  \/\/ For AVX CPUs only. f16c support is disabled if UseAVX == 0.\n-  if (VM_Version::supports_f16c() || VM_Version::supports_avx512vl()) {\n-    address entry = __ pc();\n+  address entry = __ pc();\n@@ -361,1 +356,1 @@\n-    \/\/ rsi: the sender's SP\n+  \/\/ rsi: the sender's SP\n@@ -363,3 +358,3 @@\n-    \/\/ Load value into xmm0, convert and put result into rax\n-    __ movflt(xmm0, Address(rsp, wordSize));\n-    __ flt_to_flt16(rax, xmm0, xmm1);\n+  \/\/ Load value into xmm0, convert and put result into rax\n+  __ movflt(xmm0, Address(rsp, wordSize));\n+  __ flt_to_flt16(rax, xmm0, xmm1);\n@@ -367,8 +362,5 @@\n-    \/\/ Return\n-    __ pop(rdi); \/\/ get return address\n-    __ mov(rsp, rsi); \/\/ set rsp to the sender's SP\n-    __ jmp(rdi);\n-    return entry;\n-  }\n-\n-  return nullptr;\n+  \/\/ Return\n+  __ pop(rdi); \/\/ get return address\n+  __ mov(rsp, rsi); \/\/ set rsp to the sender's SP\n+  __ jmp(rdi);\n+  return entry;\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_32.cpp","additions":24,"deletions":32,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -340,1 +340,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -345,3 +346,1 @@\n-  \/\/ For AVX CPUs only. f16c support is disabled if UseAVX == 0.\n-  if (VM_Version::supports_f16c() || VM_Version::supports_avx512vl()) {\n-    address entry = __ pc();\n+  address entry = __ pc();\n@@ -349,1 +348,1 @@\n-    \/\/ r13: the sender's SP\n+  \/\/ r13: the sender's SP\n@@ -351,3 +350,3 @@\n-    \/\/ Load value into xmm0 and convert\n-    __ movswl(rax, Address(rsp, wordSize));\n-    __ flt16_to_flt(xmm0, rax);\n+  \/\/ Load value into xmm0 and convert\n+  __ movswl(rax, Address(rsp, wordSize));\n+  __ flt16_to_flt(xmm0, rax);\n@@ -355,4 +354,4 @@\n-    \/\/ Return result in xmm0\n-    __ pop(rdi);      \/\/ get return address\n-    __ mov(rsp, r13); \/\/ set rsp to sender's SP\n-    __ jmp(rdi);\n+  \/\/ Return result in xmm0\n+  __ pop(rdi);      \/\/ get return address\n+  __ mov(rsp, r13); \/\/ set rsp to sender's SP\n+  __ jmp(rdi);\n@@ -360,4 +359,1 @@\n-    return entry;\n-  }\n-\n-  return nullptr;\n+  return entry;\n@@ -371,1 +367,2 @@\n-  if (!InlineIntrinsics ||\n+  \/\/ vmIntrinsics checks InlineIntrinsics flag, no need to check it here.\n+  if (!VM_Version::supports_float16() ||\n@@ -376,3 +373,1 @@\n-  \/\/ For AVX CPUs only. f16c support is disabled if UseAVX == 0.\n-  if (VM_Version::supports_f16c() || VM_Version::supports_avx512vl()) {\n-    address entry = __ pc();\n+  address entry = __ pc();\n@@ -380,1 +375,1 @@\n-    \/\/ r13: the sender's SP\n+  \/\/ r13: the sender's SP\n@@ -382,3 +377,3 @@\n-    \/\/ Load value into xmm0, convert and put result into rax\n-    __ movflt(xmm0, Address(rsp, wordSize));\n-    __ flt_to_flt16(rax, xmm0, xmm1);\n+  \/\/ Load value into xmm0, convert and put result into rax\n+  __ movflt(xmm0, Address(rsp, wordSize));\n+  __ flt_to_flt16(rax, xmm0, xmm1);\n@@ -386,4 +381,4 @@\n-    \/\/ Return result in rax\n-    __ pop(rdi);      \/\/ get return address\n-    __ mov(rsp, r13); \/\/ set rsp to sender's SP\n-    __ jmp(rdi);\n+  \/\/ Return result in rax\n+  __ pop(rdi);      \/\/ get return address\n+  __ mov(rsp, r13); \/\/ set rsp to sender's SP\n+  __ jmp(rdi);\n@@ -391,4 +386,1 @@\n-    return entry;\n-  }\n-\n-  return nullptr;\n+  return entry;\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":24,"deletions":32,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -762,0 +762,1 @@\n+  \/\/ For AVX CPUs only. f16c support is disabled if UseAVX == 0.\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1686,1 +1686,1 @@\n-      if (!VM_Version::supports_f16c() && !VM_Version::supports_avx512vl()) {\n+      if (!VM_Version::supports_float16()) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}