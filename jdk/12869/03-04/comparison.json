{"files":[{"patch":"@@ -3527,1 +3527,1 @@\n-  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  \/\/ No need for RuntimeStub frame since it is called only during JIT compilation\n@@ -3532,1 +3532,0 @@\n-  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3553,1 +3552,1 @@\n-  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  \/\/ No need for RuntimeStub frame since it is called only during JIT compilation\n@@ -3558,1 +3557,0 @@\n-  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -171,1 +170,1 @@\n-  if (StubRoutines::f2hf() == nullptr) return bottom_type();\n+  if (StubRoutines::f2hf_adr() == nullptr) return bottom_type();\n@@ -174,1 +173,1 @@\n-  return TypeInt::make( SharedRuntime::f2hf( tf->getf() ) );\n+  return TypeInt::make( StubRoutines::f2hf(tf->getf()) );\n@@ -241,1 +240,1 @@\n-  if (StubRoutines::hf2f() == nullptr) return bottom_type();\n+  if (StubRoutines::hf2f_adr() == nullptr) return bottom_type();\n@@ -245,1 +244,1 @@\n-    return TypeF::make( SharedRuntime::hf2f( ti->get_con() ) );\n+    return TypeF::make( StubRoutines::hf2f(ti->get_con()) );\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -448,11 +448,0 @@\n-JRT_LEAF(jshort, SharedRuntime::f2hf(jfloat  x))\n-  assert(StubRoutines::f2hf() != nullptr, \"floatToFloat16 intrinsic is not supported on this platform\");\n-  typedef jshort (*f2hf_stub_t)(jfloat x);\n-  return ((f2hf_stub_t)StubRoutines::f2hf())(x);\n-JRT_END\n-\n-JRT_LEAF(jfloat, SharedRuntime::hf2f(jshort x))\n-  assert(StubRoutines::hf2f() != nullptr, \"float16ToFloat intrinsic is not supported on this platform\");\n-  typedef jfloat (*hf2f_stub_t)(jshort x);\n-  return ((hf2f_stub_t)StubRoutines::hf2f())(x);\n-JRT_END\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -138,6 +138,0 @@\n-  \/\/ These are versions of the java.lang.Float methods which perform\n-  \/\/ the same operations as the intrinsic version.  They are used for\n-  \/\/ constant folding in the compiler to ensure equivalence.\n-  static jfloat  hf2f(jshort  x);\n-  static jshort  f2hf(jfloat  x);\n-\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -430,2 +430,17 @@\n-  static address f2hf()                { return _f2hf; }\n-  static address hf2f()                { return _hf2f; }\n+  \/\/ These are versions of the java.lang.Float::floatToFloat16() and float16ToFloat()\n+  \/\/ methods which perform the same operations as the intrinsic version.\n+  \/\/ They are used for constant folding in JIT compiler to ensure equivalence.\n+  \/\/\n+  static address f2hf_adr()            { return _f2hf; }\n+  static address hf2f_adr()            { return _hf2f; }\n+\n+  static jshort f2hf(jfloat x) {\n+    assert(_f2hf != nullptr, \"stub is not implemented on this platform\");\n+    typedef jshort (*f2hf_stub_t)(jfloat x);\n+    return ((f2hf_stub_t)_f2hf)(x);\n+  }\n+  static jfloat hf2f(jshort x) {\n+    assert(_hf2f != nullptr, \"stub is not implemented on this platform\");\n+    typedef jfloat (*hf2f_stub_t)(jshort x);\n+    return ((hf2f_stub_t)_hf2f)(x);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}