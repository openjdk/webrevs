{"files":[{"patch":"@@ -46,11 +46,1 @@\n-        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n-\n-    \/**\n-     * {@return the maximum size of the local variable table}\n-     *\/\n-    int maxLocals();\n-\n-    \/**\n-     * {@return the maximum size of the operand stack}\n-     *\/\n-    int maxStack();\n+        permits CodeAttribute, BufferedCodeBuilder.Model {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeModel.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,0 +50,10 @@\n+    \/**\n+     * {@return the maximum size of the local variable table}\n+     *\/\n+    int maxLocals();\n+\n+    \/**\n+     * {@return the maximum size of the operand stack}\n+     *\/\n+    int maxStack();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        implements CompoundElement<E>, AttributedElement, Util.Writable\n+        implements CompoundElement<E>, AttributedElement\n@@ -66,2 +66,5 @@\n-                                 .filter(e -> e instanceof Attribute)\n-                                 .<Attribute<?>>map(e -> (Attribute<?>) e)\n+                                 .<Attribute<?>>mapMulti((e, sink) -> {\n+                                     if (e instanceof Attribute<?> attr) {\n+                                         sink.accept(attr);\n+                                     }\n+                                 })\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n-import java.lang.classfile.instruction.IncrementInstruction;\n-import java.lang.classfile.instruction.LoadInstruction;\n-import java.lang.classfile.instruction.StoreInstruction;\n@@ -50,1 +47,0 @@\n-    private final CodeModel original;\n@@ -63,1 +59,0 @@\n-        this.original = original;\n@@ -65,4 +60,1 @@\n-        this.maxLocals = Util.maxLocals(methodInfo.methodFlags(), methodInfo.methodTypeSymbol());\n-        if (original != null)\n-            this.maxLocals = Math.max(this.maxLocals, original.maxLocals());\n-\n+        this.maxLocals = TerminalCodeBuilder.setupTopLocal(methodInfo, original);\n@@ -165,2 +157,5 @@\n-                           .filter(x -> x instanceof ExceptionCatch)\n-                           .map(x -> (ExceptionCatch) x)\n+                           .<ExceptionCatch>mapMulti((x, sink) -> {\n+                               if (x instanceof ExceptionCatch ec) {\n+                                   sink.accept(ec);\n+                               }\n+                           })\n@@ -170,16 +165,2 @@\n-        @Override\n-        public int maxLocals() {\n-            for (CodeElement element : elements) {\n-                if (element instanceof LoadInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + i.typeKind().slotSize());\n-                else if (element instanceof StoreInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + i.typeKind().slotSize());\n-                else if (element instanceof IncrementInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + 1);\n-            }\n-            return maxLocals;\n-        }\n-\n-        @Override\n-        public int maxStack() {\n-            throw new UnsupportedOperationException(\"nyi\");\n+        int curTopLocal() {\n+            return BufferedCodeBuilder.this.curTopLocal();\n@@ -203,5 +184,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectCodeBuilder.build(methodInfo, cb -> elements.forEach(cb), constantPool, context, null).writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-            builder.withField(name, desc, new Consumer<FieldBuilder>() {\n+            builder.withField(name, desc, new Consumer<>() {\n@@ -114,7 +114,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectFieldBuilder fb = new DirectFieldBuilder(constantPool, context, name, desc, null);\n-            elements.forEach(fb);\n-            fb.writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -199,1 +199,5 @@\n-            throw new UnsupportedOperationException(\"nyi\");\n+            return elements.stream().<CodeModel>mapMulti((e, sink) -> {\n+                if (e instanceof CodeModel cm) {\n+                    sink.accept(cm);\n+                }\n+            }).findFirst();\n@@ -212,7 +216,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectMethodBuilder mb = new DirectMethodBuilder(constantPool, context, name, desc, methodFlags(), null);\n-            elements.forEach(mb);\n-            mb.writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        implements CodeModel, LabelContext {\n+        implements LabelContext {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                                                               : new BufWriterImpl(constantPool, context);\n+                : new BufWriterImpl(constantPool, context);\n@@ -133,3 +133,1 @@\n-        this.topLocal = Util.maxLocals(methodInfo.methodFlags(), methodInfo.methodTypeSymbol());\n-        if (original != null)\n-            this.topLocal = Math.max(this.topLocal, original.maxLocals());\n+        this.topLocal = TerminalCodeBuilder.setupTopLocal(methodInfo, original);\n@@ -315,2 +313,3 @@\n-                    buf.writeU2(original.maxStack());\n-                    buf.writeU2(original.maxLocals());\n+                    var originalAttribute = (CodeImpl) original;\n+                    buf.writeU2(originalAttribute.maxStack());\n+                    buf.writeU2(originalAttribute.maxLocals());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -32,0 +34,14 @@\n+\n+    static int setupTopLocal(MethodInfo methodInfo, CodeModel original) {\n+        int paramSlots = Util.maxLocals(methodInfo.methodFlags(), methodInfo.methodTypeSymbol());\n+        if (original == null) {\n+            return paramSlots;\n+        }\n+        if (original instanceof CodeAttribute attr) {\n+            return Math.max(paramSlots, attr.maxLocals());\n+        }\n+        if (original instanceof BufferedCodeBuilder.Model buffered) {\n+            return Math.max(paramSlots, buffered.curTopLocal());\n+        }\n+        throw new InternalError(\"Unknown code model \" + original);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8337225\n@@ -29,0 +30,15 @@\n+import java.io.IOException;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.StringEntry;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -30,3 +46,0 @@\n-\n-import static java.lang.constant.ConstantDescs.*;\n-\n@@ -34,0 +47,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -35,0 +49,1 @@\n+import java.net.URI;\n@@ -36,1 +51,0 @@\n-import java.nio.file.Paths;\n@@ -39,6 +53,0 @@\n-import java.lang.classfile.AccessFlags;\n-import java.lang.reflect.AccessFlag;\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.Opcode;\n-import java.lang.classfile.TypeKind;\n@@ -46,1 +54,0 @@\n-import static org.junit.jupiter.api.Assertions.*;\n@@ -49,0 +56,5 @@\n+import static java.lang.constant.ConstantDescs.CD_int;\n+import static java.lang.constant.ConstantDescs.CD_void;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -54,2 +66,2 @@\n-    static final String testClassName = \"AdaptCodeTest$TestClass\";\n-    static final Path testClassPath = Paths.get(\"target\/test-classes\/\" + testClassName + \".class\");\n+    static final String testClassName = \"BuilderBlockTest$TestClass\";\n+    static final Path testClassPath = Path.of(URI.create(BuilderBlockTest.class.getResource(testClassName + \".class\").toString()));\n@@ -308,0 +320,77 @@\n+\n+    private static final CodeTransform ALLOCATE_LOCAL_EXAMINER = CodeTransform.ofStateful(() -> new CodeTransform() {\n+        boolean foundItem = false;\n+\n+        @Override\n+        public void atStart(CodeBuilder builder) {\n+            foundItem = false;\n+        }\n+\n+        @Override\n+        public void accept(CodeBuilder cob, CodeElement coe) {\n+            cob.with(coe);\n+            if (coe instanceof ConstantInstruction.LoadConstantInstruction ldc\n+                    && ldc.constantEntry() instanceof StringEntry se\n+                    && se.utf8().equalsString(\"Output\")) {\n+                assertFalse(foundItem);\n+                foundItem = true;\n+                var i = cob.allocateLocal(TypeKind.IntType);\n+                assertEquals(7, i, \"Allocated new int slot\");\n+            }\n+        }\n+\n+        @Override\n+        public void atEnd(CodeBuilder builder) {\n+            assertTrue(foundItem);\n+        }\n+    });\n+\n+    \/\/ Test updating local variable slot management from\n+    \/\/ source code models in transformingCode;\n+    \/\/ CodeBuilder.transform(CodeModel, CodeTransform) is\n+    \/\/ not managed for now\n+    @Test\n+    void testAllocateLocalTransformingCodeAttribute() throws IOException {\n+        var cf = ClassFile.of();\n+        var code = cf.parse(testClassPath)\n+                .methods()\n+                .stream()\n+                .filter(f -> f.methodName().equalsString(\"work\"))\n+                .findFirst()\n+                .orElseThrow()\n+                .findAttribute(Attributes.code())\n+                .orElseThrow();\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> cb\n+                .withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), 0, mb -> mb\n+                        .transformCode(code, ALLOCATE_LOCAL_EXAMINER)));\n+    }\n+\n+    @Test\n+    void testAllocateLocalTransformingBufferedCode() throws IOException {\n+        var cf = ClassFile.of();\n+        var testClass = cf.parse(testClassPath);\n+        ClassTransform bufferingTransform = (clb, cle) -> {\n+            if (cle instanceof MethodModel mm && mm.methodName().equalsString(\"work\")) {\n+                clb.withMethodBody(mm.methodName(), mm.methodType(), mm.flags().flagsMask(), cob -> {\n+                    int d = cob.allocateLocal(TypeKind.IntType);\n+                    int e = cob.allocateLocal(TypeKind.IntType);\n+\n+                    assertEquals(5, d);\n+                    assertEquals(6, e);\n+\n+                    mm.code().ifPresent(code -> code.forEach(cob));\n+                });\n+            }\n+        };\n+        cf.transformClass(testClass, bufferingTransform.andThen(ClassTransform.transformingMethods(MethodTransform.transformingCode(ALLOCATE_LOCAL_EXAMINER))));\n+    }\n+\n+    public static class TestClass {\n+        public void work(int a, long b, int c) {\n+            int d = Math.addExact(a, 25);\n+            int e = Math.multiplyExact(d, c);\n+            System.out.println(\"Output\");\n+            System.out.println(e + b);\n+            throw new IllegalArgumentException(\"foo\");\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":103,"deletions":14,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -225,1 +226,2 @@\n-                      + m1.code().map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n+                      + m1.code().map(CodeAttribute.class::cast)\n+                                 .map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n@@ -227,1 +229,2 @@\n-                      + m2.code().map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n+                      + m2.code().map(CodeAttribute.class::cast)\n+                                 .map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -66,1 +67,1 @@\n-        var c = cc.parse(bytes).methods().get(0).code().get();\n+        var c = (CodeAttribute) cc.parse(bytes).methods().get(0).code().get();\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -332,1 +333,1 @@\n-            var code = method.code().orElseThrow();\n+            var code = (CodeAttribute) method.code().orElseThrow();\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}