{"files":[{"patch":"@@ -46,11 +46,1 @@\n-        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n-\n-    \/**\n-     * {@return the maximum size of the local variable table}\n-     *\/\n-    int maxLocals();\n-\n-    \/**\n-     * {@return the maximum size of the operand stack}\n-     *\/\n-    int maxStack();\n+        permits CodeAttribute, BufferedCodeBuilder.Model {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeModel.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,0 +50,10 @@\n+    \/**\n+     * {@return the maximum size of the local variable table}\n+     *\/\n+    int maxLocals();\n+\n+    \/**\n+     * {@return the maximum size of the operand stack}\n+     *\/\n+    int maxStack();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        implements CompoundElement<E>, AttributedElement, Util.Writable\n+        implements CompoundElement<E>, AttributedElement\n@@ -66,2 +66,5 @@\n-                                 .filter(e -> e instanceof Attribute)\n-                                 .<Attribute<?>>map(e -> (Attribute<?>) e)\n+                                 .<Attribute<?>>mapMulti((e, sink) -> {\n+                                     if (e instanceof Attribute<?> attr) {\n+                                         sink.accept(attr);\n+                                     }\n+                                 })\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -35,3 +36,0 @@\n-import java.lang.classfile.instruction.IncrementInstruction;\n-import java.lang.classfile.instruction.LoadInstruction;\n-import java.lang.classfile.instruction.StoreInstruction;\n@@ -50,1 +48,0 @@\n-    private final CodeModel original;\n@@ -63,1 +60,0 @@\n-        this.original = original;\n@@ -66,2 +62,2 @@\n-        if (original != null)\n-            this.maxLocals = Math.max(this.maxLocals, original.maxLocals());\n+        if (original instanceof CodeAttribute ca)\n+            this.maxLocals = Math.max(this.maxLocals, ca.maxLocals());\n@@ -165,2 +161,5 @@\n-                           .filter(x -> x instanceof ExceptionCatch)\n-                           .map(x -> (ExceptionCatch) x)\n+                           .<ExceptionCatch>mapMulti((x, sink) -> {\n+                               if (x instanceof ExceptionCatch ec) {\n+                                   sink.accept(ec);\n+                               }\n+                           })\n@@ -170,18 +169,0 @@\n-        @Override\n-        public int maxLocals() {\n-            for (CodeElement element : elements) {\n-                if (element instanceof LoadInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + i.typeKind().slotSize());\n-                else if (element instanceof StoreInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + i.typeKind().slotSize());\n-                else if (element instanceof IncrementInstruction i)\n-                    maxLocals = Math.max(maxLocals, i.slot() + 1);\n-            }\n-            return maxLocals;\n-        }\n-\n-        @Override\n-        public int maxStack() {\n-            throw new UnsupportedOperationException(\"nyi\");\n-        }\n-\n@@ -203,5 +184,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectCodeBuilder.build(methodInfo, cb -> elements.forEach(cb), constantPool, context, null).writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-            builder.withField(name, desc, new Consumer<FieldBuilder>() {\n+            builder.withField(name, desc, new Consumer<>() {\n@@ -114,7 +114,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectFieldBuilder fb = new DirectFieldBuilder(constantPool, context, name, desc, null);\n-            elements.forEach(fb);\n-            fb.writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -199,1 +199,5 @@\n-            throw new UnsupportedOperationException(\"nyi\");\n+            return elements.stream().<CodeModel>mapMulti((e, sink) -> {\n+                if (e instanceof CodeModel cm) {\n+                    sink.accept(cm);\n+                }\n+            }).findFirst();\n@@ -212,7 +216,0 @@\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            DirectMethodBuilder mb = new DirectMethodBuilder(constantPool, context, name, desc, methodFlags(), null);\n-            elements.forEach(mb);\n-            mb.writeTo(buf);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        implements CodeModel, LabelContext {\n+        implements LabelContext {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,2 +129,0 @@\n-        bytecodesBufWriter = (original instanceof CodeImpl cai) ? new BufWriterImpl(constantPool, context, cai.codeLength())\n-                                                               : new BufWriterImpl(constantPool, context);\n@@ -133,3 +131,8 @@\n-        this.topLocal = Util.maxLocals(methodInfo.methodFlags(), methodInfo.methodTypeSymbol());\n-        if (original != null)\n-            this.topLocal = Math.max(this.topLocal, original.maxLocals());\n+        var topLocal = Util.maxLocals(methodInfo.methodFlags(), methodInfo.methodTypeSymbol());\n+        if (original instanceof CodeAttribute cai) {\n+            this.topLocal = Math.max(topLocal, cai.maxLocals());\n+            this.bytecodesBufWriter = new BufWriterImpl(constantPool, context, cai.codeLength());\n+        } else {\n+            this.topLocal = topLocal;\n+            this.bytecodesBufWriter = new BufWriterImpl(constantPool, context);\n+        }\n@@ -315,2 +318,3 @@\n-                    buf.writeU2(original.maxStack());\n-                    buf.writeU2(original.maxLocals());\n+                    var originalAttribute = (CodeImpl) original;\n+                    buf.writeU2(originalAttribute.maxStack());\n+                    buf.writeU2(originalAttribute.maxLocals());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -225,1 +226,2 @@\n-                      + m1.code().map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n+                      + m1.code().map(CodeAttribute.class::cast)\n+                                 .map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n@@ -227,1 +229,2 @@\n-                      + m2.code().map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n+                      + m2.code().map(CodeAttribute.class::cast)\n+                                 .map(c -> c.maxLocals() + \" \/ \" + c.maxStack()).orElse(\"-\");\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -66,1 +67,1 @@\n-        var c = cc.parse(bytes).methods().get(0).code().get();\n+        var c = (CodeAttribute) cc.parse(bytes).methods().get(0).code().get();\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -332,1 +333,1 @@\n-            var code = method.code().orElseThrow();\n+            var code = (CodeAttribute) method.code().orElseThrow();\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}