{"files":[{"patch":"@@ -2414,1 +2414,1 @@\n-      int maxf = (int)(strtod(tail, &err) * 100);\n+      double dmaxf = strtod(tail, &err);\n@@ -2421,1 +2421,13 @@\n-        if (FLAG_SET_CMDLINE(MaxHeapFreeRatio, maxf) != JVMFlag::SUCCESS) {\n+        if (dmaxf < 0.0 || dmaxf > 1.0) {\n+          jio_fprintf(defaultStream::error_stream(),\n+                      \"-Xmaxf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n+                      option->optionString);\n+          return JNI_EINVAL;\n+        }\n+        if (MinHeapFreeRatio > (uintx)(dmaxf * 100)) {\n+          jio_fprintf(defaultStream::error_stream(),\n+                      \"-Xmaxf value (%s) which is also used for MaxHeapFreeRatio must be greater than or equal to MinHeapFreeRatio (%3.2lf)\\n\",\n+                      tail, MinHeapFreeRatio \/ 100.0);\n+          return JNI_EINVAL;\n+        }\n+        if (FLAG_SET_CMDLINE(MaxHeapFreeRatio, (uintx)(dmaxf * 100)) != JVMFlag::SUCCESS) {\n@@ -2428,1 +2440,1 @@\n-      int minf = (int)(strtod(tail, &err) * 100);\n+      double dminf = strtod(tail, &err);\n@@ -2435,1 +2447,13 @@\n-        if (FLAG_SET_CMDLINE(MinHeapFreeRatio, minf) != JVMFlag::SUCCESS) {\n+        if (dminf < 0.0 || dminf > 1.0) {\n+          jio_fprintf(defaultStream::error_stream(),\n+                      \"-Xminf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n+                      tail);\n+          return JNI_EINVAL;\n+        }\n+        if (MaxHeapFreeRatio < (uintx)(dminf * 100)) {\n+          jio_fprintf(defaultStream::error_stream(),\n+                      \"-Xminf value (%s) which is also used for MinHeapFreeRatio must be less than or equal to MaxHeapFreeRatio (%3.2lf)\\n\",\n+                      tail, MaxHeapFreeRatio \/ 100.0);\n+          return JNI_EINVAL;\n+        }\n+        if (FLAG_SET_CMDLINE(MinHeapFreeRatio, (uintx)(dminf * 100)) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,6 +50,1 @@\n-  private static void testMinMaxFreeRatio(String min, String max, Validation type) throws Exception {\n-    OutputAnalyzer output = GCArguments.executeTestJava(\n-        \"-Xminf\" + min,\n-        \"-Xmaxf\" + max,\n-        \"-version\");\n-\n+  private static void checkValidity(OutputAnalyzer output, String min, String max, Validation type) {\n@@ -77,1 +72,1 @@\n-      output.shouldContain(\"must be less than or equal to MaxHeapFreeRatio\");\n+      output.shouldMatch(\"must be (less|greater) than or equal to M..HeapFreeRatio\");\n@@ -88,0 +83,18 @@\n+  private static void testMinMaxFreeRatio_Reordered(String min, String max, Validation type) throws Exception {\n+    OutputAnalyzer output = GCArguments.executeTestJava(\n+        \"-Xmaxf\" + max,\n+        \"-Xminf\" + min,\n+        \"-version\");\n+\n+    checkValidity(output, min, max, type);\n+  }\n+\n+  private static void testMinMaxFreeRatio(String min, String max, Validation type) throws Exception {\n+    OutputAnalyzer output = GCArguments.executeTestJava(\n+        \"-Xminf\" + min,\n+        \"-Xmaxf\" + max,\n+        \"-version\");\n+\n+    checkValidity(output, min, max, type);\n+  }\n+\n@@ -89,3 +102,4 @@\n-    testMinMaxFreeRatio( \"0.1\", \"0.5\", Validation.VALID);\n-    testMinMaxFreeRatio(  \".1\",  \".5\", Validation.VALID);\n-    testMinMaxFreeRatio( \"0.5\", \"0.5\", Validation.VALID);\n+    testMinMaxFreeRatio( \"0.1\",  \"0.5\", Validation.VALID);\n+    testMinMaxFreeRatio(  \".1\",   \".5\", Validation.VALID);\n+    testMinMaxFreeRatio( \"0.5\",  \"0.5\", Validation.VALID);\n+    testMinMaxFreeRatio( \"0.0\",\"0.001\", Validation.VALID);\n@@ -106,1 +120,3 @@\n-                  \"2147483647\", \"0.5\", Validation.OUT_OF_RANGE);\n+                   \"2147483647\", \"0.5\", Validation.OUT_OF_RANGE);\n+    testMinMaxFreeRatio(\n+                  \"-2147483647\", \"0.5\", Validation.OUT_OF_RANGE);\n@@ -111,0 +127,15 @@\n+    testMinMaxFreeRatio(\n+                   \"0.1\", \"-2147483647\", Validation.OUT_OF_RANGE);\n+\n+    testMinMaxFreeRatio( \"0.5\",   \"0.1\", Validation.COMBINATION_INVALID);\n+    testMinMaxFreeRatio(  \".5\",   \".10\", Validation.COMBINATION_INVALID);\n+    testMinMaxFreeRatio(\"0.12\", \"0.100\", Validation.COMBINATION_INVALID);\n+\n+    \/\/ Default range is [0.40, 0.70]\n+    \/\/ setting minf to 0.80 violates minf < maxf\n+    testMinMaxFreeRatio(\"0.80\", \"0.90\", Validation.COMBINATION_INVALID);\n+\n+    \/\/ Options are re-ordered: -Xmaxf is given before -Xminf\n+\n+    \/\/ valid range, but acceptable only if maxf be set first\n+    testMinMaxFreeRatio_Reordered(\"0.80\", \"0.90\", Validation.VALID);\n@@ -112,3 +143,2 @@\n-    testMinMaxFreeRatio( \"0.5\",  \"0.1\", Validation.COMBINATION_INVALID);\n-    testMinMaxFreeRatio(  \".5\",  \".10\", Validation.COMBINATION_INVALID);\n-    testMinMaxFreeRatio(\"0.12\",\"0.100\", Validation.COMBINATION_INVALID);\n+    \/\/ although a valid range, but setting maxf first violates minf < maxf\n+    testMinMaxFreeRatio_Reordered(\"0.10\", \"0.30\", Validation.COMBINATION_INVALID);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestHeapFreeRatio.java","additions":45,"deletions":15,"binary":false,"changes":60,"status":"modified"}]}