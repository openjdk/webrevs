{"files":[{"patch":"@@ -2417,1 +2417,1 @@\n-                    \"Bad max heap free percentage size: %s\\n\",\n+                    \"Bad max heap free ratio: %s\\n\",\n@@ -2420,16 +2420,16 @@\n-      } else {\n-        if (dmaxf < 0.0 || dmaxf > 1.0) {\n-          jio_fprintf(defaultStream::error_stream(),\n-                      \"-Xmaxf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n-                      option->optionString);\n-          return JNI_EINVAL;\n-        }\n-        if (MinHeapFreeRatio > (uintx)(dmaxf * 100)) {\n-          jio_fprintf(defaultStream::error_stream(),\n-                      \"-Xmaxf value (%s) must be greater than or equal to the implicit -Xminf value (%3.2lf)\\n\",\n-                      tail, MinHeapFreeRatio \/ 100.0);\n-          return JNI_EINVAL;\n-        }\n-        if (FLAG_SET_CMDLINE(MaxHeapFreeRatio, (uintx)(dmaxf * 100)) != JVMFlag::SUCCESS) {\n-            return JNI_EINVAL;\n-        }\n+      }\n+      if (dmaxf < 0.0 || dmaxf > 1.0) {\n+        jio_fprintf(defaultStream::error_stream(),\n+                    \"-Xmaxf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n+                    option->optionString);\n+        return JNI_EINVAL;\n+      }\n+      const uintx umaxf = (uintx)(dmaxf * 100);\n+      if (MinHeapFreeRatio > umaxf) {\n+        jio_fprintf(defaultStream::error_stream(),\n+                    \"-Xmaxf value (%s) must be greater than or equal to the implicit -Xminf value (%.2f)\\n\",\n+                    tail, MinHeapFreeRatio \/ 100.0f);\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(MaxHeapFreeRatio, umaxf) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n@@ -2443,1 +2443,1 @@\n-                    \"Bad min heap free percentage size: %s\\n\",\n+                    \"Bad min heap free ratio: %s\\n\",\n@@ -2446,16 +2446,16 @@\n-      } else {\n-        if (dminf < 0.0 || dminf > 1.0) {\n-          jio_fprintf(defaultStream::error_stream(),\n-                      \"-Xminf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n-                      tail);\n-          return JNI_EINVAL;\n-        }\n-        if (MaxHeapFreeRatio < (uintx)(dminf * 100)) {\n-          jio_fprintf(defaultStream::error_stream(),\n-                      \"-Xminf value (%s) must be less than or equal to the implicit -Xmaxf value (%3.2lf)\\n\",\n-                      tail, MaxHeapFreeRatio \/ 100.0);\n-          return JNI_EINVAL;\n-        }\n-        if (FLAG_SET_CMDLINE(MinHeapFreeRatio, (uintx)(dminf * 100)) != JVMFlag::SUCCESS) {\n-          return JNI_EINVAL;\n-        }\n+      }\n+      if (dminf < 0.0 || dminf > 1.0) {\n+        jio_fprintf(defaultStream::error_stream(),\n+                    \"-Xminf value (%s) is outside the allowed range [ 0.0 ... 1.0 ]\\n\",\n+                    tail);\n+        return JNI_EINVAL;\n+      }\n+      const uintx uminf = (uintx)(dminf * 100);\n+      if (MaxHeapFreeRatio < uminf) {\n+        jio_fprintf(defaultStream::error_stream(),\n+                    \"-Xminf value (%s) must be less than or equal to the implicit -Xmaxf value (%.2f)\\n\",\n+                    tail, MaxHeapFreeRatio \/ 100.0f);\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(MinHeapFreeRatio, uminf) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-      output.shouldContain(\"Bad min heap free percentage size: -Xminf\" + min);\n+      output.shouldContain(\"Bad min heap free ratio: -Xminf\" + min);\n@@ -62,1 +62,1 @@\n-      output.shouldContain(\"Bad max heap free percentage size: -Xmaxf\" + max);\n+      output.shouldContain(\"Bad max heap free ratio: -Xmaxf\" + max);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestHeapFreeRatio.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}