{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -596,9 +596,0 @@\n-        \/\/ derive it ourselves\n-        if (ZoneInfoFile.useOldMapping() && id.length() == 3) {\n-            if (\"EST\".equals(id))\n-                return ZoneId.of(\"America\/New_York\");\n-            if (\"MST\".equals(id))\n-                return ZoneId.of(\"America\/Denver\");\n-            if (\"HST\".equals(id))\n-                return ZoneId.of(\"America\/Honolulu\");\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.time.ZoneId;\n@@ -46,1 +47,0 @@\n-import java.util.Locale;\n@@ -53,1 +53,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -68,4 +67,2 @@\n-        int len = regions.length + oldMappings.length;\n-        if (!USE_OLDMAPPING) {\n-            len += 3;    \/\/ EST\/HST\/MST not in tzdb.dat\n-        }\n+        var shortIDs = ZoneId.SHORT_IDS.keySet();\n+        int len = regions.length + shortIDs.size();\n@@ -74,7 +71,2 @@\n-        if (!USE_OLDMAPPING) {\n-            ids[i++] = \"EST\";\n-            ids[i++] = \"HST\";\n-            ids[i++] = \"MST\";\n-        }\n-        for (int j = 0; j < oldMappings.length; j++) {\n-            ids[i++] = oldMappings[j][0];\n+        for (var id : shortIDs) {\n+            ids[i++] = id;\n@@ -219,31 +211,0 @@\n-    \/\/ Flag for supporting JDK backward compatible IDs, such as \"EST\".\n-    private static final boolean USE_OLDMAPPING;\n-\n-    private static final String[][] oldMappings = new String[][] {\n-        { \"ACT\", \"Australia\/Darwin\" },\n-        { \"AET\", \"Australia\/Sydney\" },\n-        { \"AGT\", \"America\/Argentina\/Buenos_Aires\" },\n-        { \"ART\", \"Africa\/Cairo\" },\n-        { \"AST\", \"America\/Anchorage\" },\n-        { \"BET\", \"America\/Sao_Paulo\" },\n-        { \"BST\", \"Asia\/Dhaka\" },\n-        { \"CAT\", \"Africa\/Harare\" },\n-        { \"CNT\", \"America\/St_Johns\" },\n-        { \"CST\", \"America\/Chicago\" },\n-        { \"CTT\", \"Asia\/Shanghai\" },\n-        { \"EAT\", \"Africa\/Addis_Ababa\" },\n-        { \"ECT\", \"Europe\/Paris\" },\n-        { \"IET\", \"America\/Indiana\/Indianapolis\" },\n-        { \"IST\", \"Asia\/Kolkata\" },\n-        { \"JST\", \"Asia\/Tokyo\" },\n-        { \"MIT\", \"Pacific\/Apia\" },\n-        { \"NET\", \"Asia\/Yerevan\" },\n-        { \"NST\", \"Pacific\/Auckland\" },\n-        { \"PLT\", \"Asia\/Karachi\" },\n-        { \"PNT\", \"America\/Phoenix\" },\n-        { \"PRT\", \"America\/Puerto_Rico\" },\n-        { \"PST\", \"America\/Los_Angeles\" },\n-        { \"SST\", \"Pacific\/Guadalcanal\" },\n-        { \"VST\", \"Asia\/Ho_Chi_Minh\" },\n-    };\n-\n@@ -251,4 +212,0 @@\n-        String oldmapping = GetPropertyAction\n-                .privilegedGetProperty(\"sun.timezone.ids.oldmapping\", \"false\")\n-                .toLowerCase(Locale.ROOT);\n-        USE_OLDMAPPING = (oldmapping.equals(\"yes\") || oldmapping.equals(\"true\"));\n@@ -278,9 +235,6 @@\n-        for (String[] alias : oldMappings) {\n-            aliases.put(alias[0], alias[1]);\n-        }\n-        if (USE_OLDMAPPING) {\n-            aliases.put(\"EST\", \"America\/New_York\");\n-            aliases.put(\"MST\", \"America\/Denver\");\n-        } else {\n-            aliases.put(\"EST\", \"America\/Panama\");\n-            aliases.put(\"MST\", \"America\/Phoenix\");\n+        for (var key : ZoneId.SHORT_IDS.keySet()) {\n+            switch (key) {\n+                case \"EST\" -> aliases.put(\"EST\", \"America\/Panama\");\n+                case \"MST\" -> aliases.put(\"MST\", \"America\/Phoenix\");\n+                default -> aliases.put(key, ZoneId.SHORT_IDS.get(key));\n+            }\n@@ -288,5 +242,0 @@\n-        aliases.put(\"HST\", \"Pacific\/Honolulu\");\n-    }\n-\n-    public static boolean useOldMapping() {\n-       return USE_OLDMAPPING;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfoFile.java","additions":11,"deletions":62,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1,120 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6466476\n- * @summary Compatibility test for the old JDK ID mapping and Olson IDs\n- * @comment Expecting the new (Olson compatible) mapping (default)\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=null OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=\"\" OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=no OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=No OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=NO OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=false OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=False OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=FALSE OldIDMappingTest -new\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=Hello OldIDMappingTest -new\n- * @comment Expecting the old mapping\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=true OldIDMappingTest -old\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=True OldIDMappingTest -old\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=TRUE OldIDMappingTest -old\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=yes OldIDMappingTest -old\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=Yes OldIDMappingTest -old\n- * @run main\/othervm -Dsun.timezone.ids.oldmapping=YES OldIDMappingTest -old\n- *\/\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.TimeZone;\n-\n-public class OldIDMappingTest {\n-    private static final String MAPPING_PROPERTY_NAME = \"sun.timezone.ids.oldmapping\";\n-    private static final Map<String, String> newmap = new HashMap<String, String>();\n-    static {\n-        \/\/ Add known new mappings\n-        newmap.put(\"EST\", \"EST\");\n-        newmap.put(\"MST\", \"MST\");\n-    }\n-\n-    public static void main(String[] args) {\n-        boolean useOldMapping = true;\n-        String arg = args[0];\n-        if (arg.equals(\"-new\")) {\n-            useOldMapping = false;\n-        } else if (arg.equals(\"-old\")) {\n-            useOldMapping = true;\n-        } else {\n-            throw new RuntimeException(\"-old or -new must be specified; got \" + arg);\n-        }\n-\n-        Map<String, String> oldmap = TzIDOldMapping.MAP;\n-        String prop = System.getProperty(MAPPING_PROPERTY_NAME);\n-        System.out.println(MAPPING_PROPERTY_NAME + \"=\" + prop);\n-\n-        \/\/ Try the test multiple times with modifying TimeZones to\n-        \/\/ make sure TimeZone instances for the old mapping are\n-        \/\/ properly copied (defensive copy).\n-        for (int count = 0; count < 3; count++) {\n-            for (String id : oldmap.keySet()) {\n-                TimeZone tzAlias = TimeZone.getTimeZone(id);\n-                TimeZone tz = TimeZone.getTimeZone(oldmap.get(id));\n-                if (useOldMapping) {\n-                    if (!tzAlias.hasSameRules(tz)) {\n-                        throw new RuntimeException(\"OLDMAP: \" + MAPPING_PROPERTY_NAME\n-                                + \"=\" + prop + \": \" + id\n-                                + \" isn't an alias of \" + oldmap.get(id));\n-                    }\n-                    if (count == 0) {\n-                        System.out.println(\"    \" + id + \" => \" + oldmap.get(id));\n-                    }\n-                    tzAlias.setRawOffset(tzAlias.getRawOffset() * count);\n-                } else {\n-                    if (!newmap.containsKey(id)) {\n-                        \/\/ ignore ids not contained in the new map\n-                        if (count == 0) {\n-                            System.out.println(\"    \" + id + \" => \" + oldmap.get(id));\n-                        }\n-                        tzAlias.setRawOffset(tzAlias.getRawOffset() * count);\n-                        continue;\n-                    }\n-                    if (tzAlias.hasSameRules(tz)) {\n-                        throw new RuntimeException(\"NEWMAP: \" + MAPPING_PROPERTY_NAME\n-                                + \"=\" + prop + \": \" + id\n-                                + \" is an alias of \" + oldmap.get(id));\n-                    }\n-                    tz = TimeZone.getTimeZone(newmap.get(id));\n-                    if (!tzAlias.hasSameRules(tz)) {\n-                        throw new RuntimeException(\"NEWMAP: \" + MAPPING_PROPERTY_NAME\n-                                + \"=\" + prop + \": \" + id\n-                                + \" isn't an alias of \" + newmap.get(id));\n-                    }\n-                    if (count == 0) {\n-                        System.out.println(\"    \" + id + \" => \" + newmap.get(id));\n-                    }\n-                    tzAlias.setRawOffset(tzAlias.getRawOffset() * count);\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/OldIDMappingTest.java","additions":0,"deletions":120,"binary":false,"changes":120,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.Map;\n-import java.util.HashMap;\n-\n-class TzIDOldMapping {\n-    static final Map<String, String> MAP = new HashMap<String, String>();\n-    static {\n-        String[][] oldmap = {\n-            { \"ACT\", \"Australia\/Darwin\" },\n-            { \"AET\", \"Australia\/Sydney\" },\n-            { \"AGT\", \"America\/Argentina\/Buenos_Aires\" },\n-            { \"ART\", \"Africa\/Cairo\" },\n-            { \"AST\", \"America\/Anchorage\" },\n-            { \"BET\", \"America\/Sao_Paulo\" },\n-            { \"BST\", \"Asia\/Dhaka\" },\n-            { \"CAT\", \"Africa\/Harare\" },\n-            { \"CNT\", \"America\/St_Johns\" },\n-            { \"CST\", \"America\/Chicago\" },\n-            { \"CTT\", \"Asia\/Shanghai\" },\n-            { \"EAT\", \"Africa\/Addis_Ababa\" },\n-            { \"ECT\", \"Europe\/Paris\" },\n-            { \"EST\", \"America\/New_York\" },\n-            { \"HST\", \"Pacific\/Honolulu\" },\n-            { \"IET\", \"America\/Indianapolis\" },\n-            { \"IST\", \"Asia\/Calcutta\" },\n-            { \"JST\", \"Asia\/Tokyo\" },\n-            { \"MIT\", \"Pacific\/Apia\" },\n-            { \"MST\", \"America\/Denver\" },\n-            { \"NET\", \"Asia\/Yerevan\" },\n-            { \"NST\", \"Pacific\/Auckland\" },\n-            { \"PLT\", \"Asia\/Karachi\" },\n-            { \"PNT\", \"America\/Phoenix\" },\n-            { \"PRT\", \"America\/Puerto_Rico\" },\n-            { \"PST\", \"America\/Los_Angeles\" },\n-            { \"SST\", \"Pacific\/Guadalcanal\" },\n-            { \"VST\", \"Asia\/Saigon\" },\n-        };\n-        for (String[] pair : oldmap) {\n-            MAP.put(pair[0], pair[1]);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/TzIDOldMapping.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -88,7 +88,0 @@\n-    \/\/ Flag for supporting JDK backward compatible IDs, such as \"EST\".\n-    static final boolean USE_OLDMAPPING;\n-    static {\n-      String oldmapping = System.getProperty(\"sun.timezone.ids.oldmapping\", \"false\").toLowerCase(Locale.ROOT);\n-      USE_OLDMAPPING = (oldmapping.equals(\"yes\") || oldmapping.equals(\"true\"));\n-    }\n-\n@@ -656,12 +649,0 @@\n-        \/*\n-         * If old JDK compatibility is specified, get the old alias\n-         * name.\n-         *\/\n-        if (USE_OLDMAPPING) {\n-            String compatibleID = TzIDOldMapping.MAP.get(ID);\n-            if (compatibleID != null) {\n-                givenID = ID;\n-                ID = compatibleID;\n-            }\n-        }\n-\n@@ -845,4 +826,2 @@\n-                 if (!USE_OLDMAPPING) {\n-                     \/\/ Replace old mappings from `jdk11_backward`\n-                     aliases.putAll(conflictingIDs);\n-                 }\n+                 \/\/ Replace old mappings from `jdk11_backward`\n+                 aliases.putAll(conflictingIDs);\n","filename":"test\/jdk\/sun\/util\/calendar\/zi\/ZoneInfoOld.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"}]}