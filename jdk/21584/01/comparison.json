{"files":[{"patch":"@@ -220,1 +220,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -541,1 +541,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2739,1 +2739,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -3086,1 +3086,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -569,1 +569,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3670,1 +3670,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -6513,1 +6513,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -480,3 +480,3 @@\n-  \/\/ Check if the entry lists are empty.\n-  movptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(cxq)));\n-  orptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(EntryList)));\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n+  movptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(EntryList)));\n+  orptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(cxq)));\n@@ -809,3 +809,3 @@\n-    \/\/ Check if the entry lists are empty.\n-    movptr(reg_rax, cxq_address);\n-    orptr(reg_rax, EntryList_address);\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n+    movptr(reg_rax, EntryList_address);\n+    orptr(reg_rax, cxq_address);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1136,0 +1136,8 @@\n+\/\/ Note that we read the EntryList and then the cxq after dropping the\n+\/\/ lock, so the values need not form a stable snapshot. In particular,\n+\/\/ after reading the (empty) EntryList, another thread could acquire\n+\/\/ and release the lock, moving any entries in the cxq to the\n+\/\/ EntryList, causing the current thread to see an empty cxq and\n+\/\/ conclude there are no waiters. But this is okay as the thread that\n+\/\/ moved the cxq is responsible for waking the successor.\n+\/\/\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}