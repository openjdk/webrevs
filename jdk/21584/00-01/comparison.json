{"files":[{"patch":"@@ -220,1 +220,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -541,1 +541,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2739,1 +2739,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -3086,1 +3086,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -569,1 +569,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3670,1 +3670,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -6513,1 +6513,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-  \/\/ Check if the entry lists are empty.\n+  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n@@ -809,1 +809,1 @@\n-    \/\/ Check if the entry lists are empty.\n+    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1136,23 +1136,7 @@\n-\/\/ Also note that due to reading the EntryList before cxq we have a benign race.\n-\/\/ Example:\n-\/\/   1. Thread 1 enters the monitor.\n-\/\/   2. Thread 2 tries to enter the monitor, fails, and adds itself to\n-\/\/      cxq, tries again, and eventually parks.\n-\/\/   3. Thread 1 starts exiting the monitor and runs all the\n-\/\/      instructions up to and including reading the EntryList, which\n-\/\/      yields an empty EntryList.\n-\/\/   4. Thread 3 can now enter the monitor, since it is no longer owned.\n-\/\/   5. Thread 3 exits the monitor, and moves cxq to EntryList while\n-\/\/      still holding the lock.\n-\/\/   6. Thread 1 reads cxq, and finds it empty.\n-\/\/   7. Thread 1 now draws the conclusion that there is no thread\n-\/\/      waiting for the monitor, even though thread 2 has waited for the\n-\/\/      monitor since before thread 3 released it.\n-\/\/\n-\/\/ However the successor protocol deals with this just fine. Since thread 3\n-\/\/ managed to enter the monitor, the responsibility of ensuring liveness of\n-\/\/ the monitor becomes the responsibility of thread 3 which will make\n-\/\/ thread 2 the successor and unpark thread 2 before exiting the monitor.\n-\/\/ The race could be removed by reading cxq before EntryList, but it\n-\/\/ would come with an added cost of needing a loadload fence between the\n-\/\/ reads.\n+\/\/ Note that we read the EntryList and then the cxq after dropping the\n+\/\/ lock, so the values need not form a stable snapshot. In particular,\n+\/\/ after reading the (empty) EntryList, another thread could acquire\n+\/\/ and release the lock, moving any entries in the cxq to the\n+\/\/ EntryList, causing the current thread to see an empty cxq and\n+\/\/ conclude there are no waiters. But this is okay as the thread that\n+\/\/ moved the cxq is responsible for waking the successor.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"}]}