{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,3 +278,0 @@\n-\n-        \/\/ workaround for bugid 5046319 - switch over to commented section\n-        \/\/ below when it is fixed.\n@@ -284,1 +281,3 @@\n-        staxStreamReader.getTextCharacters(0, chars, 0, textLength);\n+        if (textLength > 0) {\n+            staxStreamReader.getTextCharacters(0, chars, 0, textLength);\n+        }\n@@ -291,13 +290,0 @@\n-\n-\n-\/\/        int start = 0;\n-\/\/        int len;\n-\/\/        do {\n-\/\/            len = staxStreamReader.getTextCharacters(start, buf, 0, buf.length);\n-\/\/            start += len;\n-\/\/            try {\n-\/\/                _sax.characters(buf, 0, len);\n-\/\/            } catch (SAXException e) {\n-\/\/                throw new XMLStreamException(e);\n-\/\/            }\n-\/\/        } while (len == buf.length);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/StAXStream2SAX.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.io.Reader;\n+import java.io.StringReader;\n@@ -36,0 +38,1 @@\n+import javax.xml.transform.stax.StAXSource;\n@@ -51,1 +54,1 @@\n- * @bug 8220818 8176447\n+ * @bug 8220818 8176447 8349516\n@@ -142,0 +145,46 @@\n+    \/**\n+     * Verifies the bug fix for 8349516. The fix adds a guard against empty text\n+     * since calling StreamReader.getTextCharacters with textLength=0 will result\n+     * in IndexOutOfBoundsException.\n+     *\n+     * @throws Exception if the test fails, in which case the parser throws\n+     * IndexOutOfBoundsException.\n+     *\/\n+    @Test\n+    public void testValidationWithStAX() throws Exception {\n+        String schema = \"\"\"\n+            <xs:schema xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n+                targetNamespace=\"http:\/\/xxxx.com\/schema\/test\"\n+                attributeFormDefault=\"unqualified\"\n+                elementFormDefault=\"qualified\"\n+            >\n+\n+                <xs:element name=\"test\">\n+                    <xs:complexType>\n+                    <xs:choice>\n+                        <xs:element name=\"tag\" type=\"xs:string\" \/>\n+                    <\/xs:choice>\n+                    <\/xs:complexType>\n+                <\/xs:element>\n+\n+            <\/xs:schema>\n+            \"\"\";\n+\n+        String xml = \"\"\"\n+            <test xmlns=\"http:\/\/xxxx.com\/schema\/test\">\n+                <tag><![CDATA[]]><\/tag>\n+            <\/test>\n+            \"\"\";\n+\n+        Reader schemaReader = new StringReader(schema);\n+        Reader xmlReader = new StringReader(xml);\n+\n+        Source source = new StreamSource(schemaReader);\n+\n+        Validator validator =\n+                SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(source).newValidator();\n+\n+        XMLStreamReader xmlStreamReader = XMLInputFactory.newInstance().createXMLStreamReader(xmlReader);\n+        validator.validate(new StAXSource(xmlStreamReader));\n+    }\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ValidationTest.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}