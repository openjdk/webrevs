{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        super(provider, dir);\n+        super(provider);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/AixFileSystem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        super(provider, dir);\n+        super(provider);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        super(provider, dir);\n+        super(provider);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -45,0 +44,1 @@\n+import java.io.IOException;\n@@ -55,0 +55,1 @@\n+import jdk.internal.util.SystemProps;\n@@ -78,3 +79,0 @@\n-    \/\/ lazily initialized in needToResolveAgainstDefaultDirectory()\n-    private Boolean needToResolveAgainstDefaultDirectory;\n-\n@@ -82,1 +80,2 @@\n-    UnixFileSystem(UnixFileSystemProvider provider, String dir) {\n+    UnixFileSystem(UnixFileSystemProvider provider) {\n+        String dir = SystemProps.initProperties().get(\"user.dir\");\n@@ -98,29 +97,0 @@\n-    boolean needToResolveAgainstDefaultDirectory() {\n-        \/\/ OK if two or more threads initialize this instance variable\n-        if (needToResolveAgainstDefaultDirectory == null) {\n-            \/\/ if process-wide chdir is allowed or default directory is not the\n-            \/\/ process working directory then paths must be resolved against the\n-            \/\/ default directory.\n-            String propValue = GetPropertyAction\n-                .privilegedGetProperty(\"sun.nio.fs.chdirAllowed\", \"false\");\n-            boolean chdirAllowed = Boolean.parseBoolean(propValue);\n-\n-            if (chdirAllowed) {\n-                this.needToResolveAgainstDefaultDirectory = true;\n-            } else {\n-                byte[] cwd = UnixNativeDispatcher.getcwd();\n-                boolean defaultIsCwd = (cwd.length == defaultDirectory.length);\n-                if (defaultIsCwd) {\n-                    for (int i=0; i<cwd.length; i++) {\n-                        if (cwd[i] != defaultDirectory[i]) {\n-                            defaultIsCwd = false;\n-                            break;\n-                        }\n-                    }\n-                }\n-                this.needToResolveAgainstDefaultDirectory = !defaultIsCwd;\n-            }\n-        }\n-        return needToResolveAgainstDefaultDirectory;\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":4,"deletions":34,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -141,4 +141,2 @@\n-        \/\/ resolve against default directory if required (chdir allowed or\n-        \/\/ file system default directory is not working directory)\n-        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n-            return resolve(getFileSystem().defaultDirectory(), path);\n+        if (!isEmpty()) {\n+            return path;\n@@ -146,7 +144,3 @@\n-            if (!isEmpty()) {\n-                return path;\n-            } else {\n-                \/\/ empty path case will access current directory\n-                byte[] here = { '.' };\n-                return here;\n-            }\n+            \/\/ empty path case will access current directory\n+            byte[] here = { '.' };\n+            return here;\n@@ -163,5 +157,1 @@\n-        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n-            return Util.toString(getByteArrayForSysCalls());\n-        } else {\n-            return toString();\n-        }\n+        return toString();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.util.SystemProps;\n@@ -45,2 +46,1 @@\n-    WindowsFileSystem(WindowsFileSystemProvider provider,\n-                      String dir)\n+    WindowsFileSystem(WindowsFileSystemProvider provider)\n@@ -51,0 +51,1 @@\n+        String dir = SystemProps.initProperties().get(\"user.dir\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -52,1 +51,1 @@\n-        theFileSystem = new WindowsFileSystem(this, StaticProperty.userDir());\n+        theFileSystem = new WindowsFileSystem(this);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}