{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import static java.lang.System.err;\n+import static java.lang.System.out;\n@@ -28,1 +30,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -30,1 +31,0 @@\n-import org.junit.jupiter.params.provider.MethodSource;\n@@ -32,3 +32,1 @@\n-\n-import static java.lang.System.err;\n-import static java.lang.System.out;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -88,1 +86,1 @@\n-        ProcessBuilder processBuilder = ProcessTools.createLimitedTestJavaProcessBuilder(cmd);\n+        ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(cmd);\n","filename":"test\/jdk\/java\/lang\/Thread\/UncaughtExceptionsTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        var processBuilder = ProcessTools.createLimitedTestJavaProcessBuilder(command)\n+        var processBuilder = ProcessTools.createTestJavaProcessBuilder(command)\n","filename":"test\/jdk\/java\/lang\/annotation\/LoaderLeakTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library ..\/..\/..\/..\/testlibrary ..\/..\/\n+ * @library ..\/..\/..\/..\/testlibrary ..\/..\/ \/test\/lib\n@@ -34,1 +34,1 @@\n- * @build TestLibrary bench.BenchInfo bench.HtmlReporter bench.Util\n+ * @build TestLibrary bench.BenchInfo bench.HtmlReporter bench.Util jdk.test.lib.process.ProcessTools\n@@ -54,7 +54,0 @@\n-import bench.ConfigFormatException;\n-import bench.Harness;\n-import bench.HtmlReporter;\n-import bench.Reporter;\n-import bench.TextReporter;\n-import bench.XmlReporter;\n-import static bench.rmi.Main.OutputFormat.*;\n@@ -65,1 +58,0 @@\n-import java.io.InputStream;\n@@ -67,0 +59,1 @@\n+import java.io.InputStream;\n@@ -80,0 +73,12 @@\n+import bench.ConfigFormatException;\n+import bench.Harness;\n+import bench.HtmlReporter;\n+import bench.Reporter;\n+import bench.TextReporter;\n+import bench.XmlReporter;\n+import static bench.rmi.Main.OutputFormat.HTML;\n+import static bench.rmi.Main.OutputFormat.TEXT;\n+import static bench.rmi.Main.OutputFormat.XML;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -237,7 +242,0 @@\n-                    clientProcessStr.add(System.getProperty(\"test.jdk\") +\n-                            File.separator + \"bin\" + File.separator + \"java\");\n-                    String classpath = System.getProperty(\"java.class.path\");\n-                    if (classpath != null) {\n-                        clientProcessStr.add(\"-cp\");\n-                        clientProcessStr.add(classpath);\n-                    }\n@@ -279,11 +277,4 @@\n-                        Process client = new ProcessBuilder(clientProcessStr).\n-                                inheritIO().start();\n-                        try {\n-                            client.waitFor();\n-                            int exitValue = client.exitValue();\n-                            if (0 != exitValue) {\n-                                die(\"Error: error happened in client process, exitValue = \" + exitValue);\n-                            }\n-                        } finally {\n-                            client.destroyForcibly();\n-                        }\n+                        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(clientProcessStr);\n+                        OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(pb);\n+                        System.out.println(outputAnalyzer.getOutput());\n+                        outputAnalyzer.shouldHaveExitValue(0);\n@@ -292,1 +283,1 @@\n-                    } catch (InterruptedException ex) {\n+                    } catch (Exception ex) {\n","filename":"test\/jdk\/java\/rmi\/reliability\/benchmark\/bench\/rmi\/Main.java","additions":21,"deletions":30,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -35,1 +37,1 @@\n- * @library \/tools\/lib\n+ * @library \/tools\/lib \/test\/lib\n@@ -40,1 +42,1 @@\n- * @build HijrahConfigCheck tests.*\n+ * @build HijrahConfigCheck tests.* jdk.test.lib.compiler.CompilerUtils jdk.test.lib.process.ProcessTools\n@@ -69,8 +71,2 @@\n-        ProcessBuilder builder = new ProcessBuilder(\n-                launcher.toAbsolutePath().toString(), \"-ea\", \"-esa\", \"HijrahConfigCheck\");\n-        Process p = builder.inheritIO().start();\n-        p.waitFor();\n-        int exitValue = p.exitValue();\n-        if (exitValue != 0) {\n-            throw new RuntimeException(\"HijrahConfigTest failed. Exit value: \" + exitValue);\n-        }\n+        OutputAnalyzer analyzer =  ProcessTools.executeCommand(launcher.toAbsolutePath().toString(), \"-ea\", \"-esa\", \"HijrahConfigCheck\");\n+        analyzer.shouldHaveExitValue(0);\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/HijrahConfigTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,12 @@\n-import javax.naming.Context;\n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.SequenceInputStream;\n+import java.io.StringWriter;\n+import java.io.Writer;\n@@ -29,1 +39,1 @@\n-import java.util.*;\n+import java.util.ArrayList;\n@@ -32,0 +42,1 @@\n+import java.util.Iterator;\n@@ -33,0 +44,1 @@\n+import java.util.Map;\n@@ -37,1 +49,2 @@\n-import static java.lang.String.format;\n+import javax.naming.Context;\n+\n@@ -41,0 +54,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -48,0 +63,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n+ * @run main InitialContextTest\n@@ -246,3 +264,7 @@\n-        ProcessBuilder p = new ProcessBuilder(jar, \"cf\", jarName.toString(),\n-                \"-C\", jarRoot.toString(), \".\");\n-        quickFail(run(p));\n+        String [] commands = {jar, \"cf\", jarName.toString(),\"-C\", jarRoot.toString(), \".\"};\n+        try {\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(commands);\n+            outputAnalyzer.shouldHaveExitValue(0);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n@@ -259,6 +281,6 @@\n-        quickFail(run(new ProcessBuilder(commands)));\n-    }\n-\n-    private static void quickFail(Result r) {\n-        if (r.exitValue != 0)\n-            throw new RuntimeException(r.output);\n+        try {\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(commands.toArray(new String[commands.size()]));\n+            outputAnalyzer.shouldHaveExitValue(0);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n@@ -270,3 +292,0 @@\n-\n-        String java = getJDKTool(\"java\");\n-\n@@ -274,1 +293,0 @@\n-        commands.add(java);\n@@ -283,0 +301,1 @@\n+\/\/        System.setProperty(\"test.noclasspath\", \"true\");\n@@ -286,0 +305,1 @@\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(commands);\n@@ -287,13 +307,0 @@\n-        return run(new ProcessBuilder(commands));\n-    }\n-\n-    private static Result run(ProcessBuilder b) {\n-        Process p = null;\n-        try {\n-            p = b.start();\n-        } catch (IOException e) {\n-            throw new RuntimeException(\n-                    format(\"Couldn't start process '%s'\", b.command()), e);\n-        }\n-\n-        String output;\n@@ -301,11 +308,4 @@\n-            output = toString(p.getInputStream(), p.getErrorStream());\n-        } catch (IOException e) {\n-            throw new RuntimeException(\n-                    format(\"Couldn't read process output '%s'\", b.command()), e);\n-        }\n-\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(\n-                    format(\"Process hasn't finished '%s'\", b.command()), e);\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(pb);\n+            return new Result(outputAnalyzer.getExitValue(), outputAnalyzer.getOutput());\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n@@ -313,2 +313,0 @@\n-\n-        return new Result(p.exitValue(), output);\n","filename":"test\/jdk\/javax\/naming\/spi\/providers\/InitialContextTest.java","additions":42,"deletions":44,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n+ * @run main EscapePath\n@@ -29,1 +32,9 @@\n-import java.io.*;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -78,9 +89,14 @@\n-    private static void invokeJava() throws Exception {\n-        String command = System.getProperty(\"java.home\") +\n-                         File.separator + \"bin\" + File.separator +\n-                         \"java -classpath \" + \"a#b\/ Hello\";\n-        Process p = Runtime.getRuntime().exec(command);\n-        p.waitFor();\n-        int result = p.exitValue();\n-        if (result != 0)\n-            throw new RuntimeException(\"Path encoding failure.\");\n+    private static void invokeJava() {\n+        List<String> commands = new ArrayList<>();\n+\n+        commands.add(\"-classpath\");\n+        commands.add(\"a#b\");\n+        commands.add(\"Hello\");\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(commands);\n+\n+        try {\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeProcess(pb);\n+            outputAnalyzer.shouldHaveExitValue(0);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n","filename":"test\/jdk\/sun\/misc\/EscapePath.java","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"}]}