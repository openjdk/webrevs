{"files":[{"patch":"@@ -290,1 +290,1 @@\n-                certs.add(v);\n+                certs.add(Objects.requireNonNull(v));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacSign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.CannedFormattedString;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageStringBundle;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.TKit;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --mac-sign\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @library base\n+ * @build SigningBase\n+ * @build jdk.jpackage.test.*\n+ * @build MacSignTest\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=MacSignTest\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n+ *\/\n+public class MacSignTest {\n+\n+    @Test\n+    public static void testAppContentWarning() throws IOException {\n+\n+        \/\/ Create app content directory with the name known to fail signing.\n+        \/\/ This will trigger jpackage exit with status code \"1\".\n+        final var appContent = TKit.createTempDirectory(\"app-content\").resolve(\"foo.1\");\n+        Files.createDirectory(appContent);\n+        Files.createFile(appContent.resolve(\"file\"));\n+\n+        final List<CannedFormattedString> expectedStrings = new ArrayList<>();\n+        expectedStrings.add(JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.app.content\"));\n+\n+        final var xcodeWarning = JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.xcode.tools\");\n+        if (!MacHelper.isXcodeDevToolsInstalled()) {\n+            expectedStrings.add(xcodeWarning);\n+        }\n+\n+        \/\/ --app-content and --type app-image\n+        \/\/ Expect `message.codesign.failed.reason.app.content` message in the log.\n+        \/\/ This is not a fatal error, just a warning.\n+        \/\/ To make jpackage fail, specify bad additional content.\n+        final var cmd = JPackageCommand.helloAppImage()\n+                .ignoreDefaultVerbose(true)\n+                .validateOutput(expectedStrings.toArray(CannedFormattedString[]::new))\n+                .addArguments(\"--app-content\", appContent)\n+                .addArguments(\"--mac-sign\")\n+                .addArguments(\"--mac-signing-keychain\", SigningBase.StandardKeychain.MAIN.spec().keychain().name())\n+                .addArguments(\"--mac-app-image-sign-identity\", SigningBase.StandardCertificateRequest.APP_IMAGE.spec().name());\n+\n+        if (MacHelper.isXcodeDevToolsInstalled()) {\n+            \/\/ Check there is no warning about missing xcode command line developer tools.\n+            cmd.validateOutput(TKit.assertTextStream(xcodeWarning.getValue()).negate());\n+        }\n+\n+        cmd.execute(1);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacSignTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -66,6 +66,27 @@\n-    enum StandardKeychain {\n-        MAIN(DEFAULT_KEYCHAIN,\n-                cert().userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()]).create(),\n-                cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()]).create(),\n-                cert().userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()]).create(),\n-                cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()]).create());\n+    public enum StandardCertificateRequest {\n+        APP_IMAGE(cert().userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        INSTALLER(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.ASCII_INDEX.value()])),\n+        APP_IMAGE_UNICODE(cert().userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()])),\n+        INSTALLER_UNICODE(cert().type(CertificateType.INSTALLER).userName(DEV_NAMES[CertIndex.UNICODE_INDEX.value()]));\n+\n+        StandardCertificateRequest(CertificateRequest.Builder specBuilder) {\n+            this.spec = specBuilder.create();\n+        }\n+\n+        public CertificateRequest spec() {\n+            return spec;\n+        }\n+\n+        private static CertificateRequest.Builder cert() {\n+            return new CertificateRequest.Builder();\n+        }\n+\n+        private final CertificateRequest spec;\n+    }\n+\n+    public enum StandardKeychain {\n+        MAIN(DEFAULT_KEYCHAIN, StandardCertificateRequest.values());\n+\n+        StandardKeychain(String keychainName, StandardCertificateRequest... certs) {\n+            this(keychainName, certs[0].spec(), Stream.of(certs).skip(1).map(StandardCertificateRequest::spec).toArray(CertificateRequest[]::new));\n+        }\n@@ -79,1 +100,1 @@\n-        KeychainWithCertsSpec spec() {\n+        public KeychainWithCertsSpec spec() {\n@@ -95,1 +116,1 @@\n-        final KeychainWithCertsSpec spec;\n+        private final KeychainWithCertsSpec spec;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import jdk.jpackage.test.MacHelper;\n@@ -561,28 +560,0 @@\n-    @Test(ifOS = MACOS)\n-    public static void testAppContentWarning() {\n-        \/\/ --app-content and --type app-image\n-        \/\/ Expect `message.codesign.failed.reason.app.content` message in the log.\n-        \/\/ This is not a fatal error, just a warning.\n-        \/\/ To make jpackage fail, specify invalid signing identity.\n-        final var cmd = JPackageCommand.helloAppImage()\n-                .addArguments(\"--app-content\", TKit.TEST_SRC_ROOT.resolve(\"apps\/dukeplug.png\"))\n-                .addArguments(\"--mac-sign\", \"--mac-app-image-sign-identity\", \"foo\");\n-\n-        final List<CannedFormattedString> expectedStrings = new ArrayList<>();\n-        expectedStrings.add(JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.app.content\"));\n-\n-        final var xcodeWarning = JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.xcode.tools\");\n-        if (!MacHelper.isXcodeDevToolsInstalled()) {\n-            expectedStrings.add(xcodeWarning);\n-        }\n-\n-        defaultInit(cmd, expectedStrings);\n-\n-        if (MacHelper.isXcodeDevToolsInstalled()) {\n-            \/\/ Check there is no warning about missing xcode command line developer tools.\n-            cmd.validateOutput(TKit.assertTextStream(xcodeWarning.getValue()).negate());\n-        }\n-\n-        cmd.execute(1);\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"}]}