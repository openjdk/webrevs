{"files":[{"patch":"@@ -63,1 +63,3 @@\n-                        return new KeychainStore();\n+                        return new KeychainStore.USER();\n+                    } else if (algo.equals(\"KeychainStore-ROOT\")) {\n+                        return new KeychainStore.ROOT();\n@@ -85,1 +87,3 @@\n-                           \"KeychainStore\", \"apple.security.KeychainStore\"));\n+                           \"KeychainStore\", \"apple.security.KeychainStore$USER\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore$ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,3 +45,5 @@\n- * This class provides the keystore implementation referred to as \"KeychainStore\".\n- * It uses the current user's keychain as its backing storage, and does NOT support\n- * a file-based implementation.\n+ * This class provides the keystore implementations referred to as\n+ * \"KeychainStore\" and \"KeychainStore-ROOT\".\n+ * They use the current user's and system root keychains accordingly\n+ * as their backing storage, and does NOT support a file-based\n+ * implementation.\n@@ -50,1 +52,59 @@\n-public final class KeychainStore extends KeyStoreSpi {\n+abstract sealed class KeychainStore extends KeyStoreSpi {\n+\n+    \/**\n+     * Current user's keychain\n+     *\/\n+    public static final class USER extends KeychainStore {\n+        public USER() {\n+            super(\"USER\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * System root read-only keychain\n+     *\n+     *\/\n+    public static final class ROOT extends KeychainStore {\n+        public ROOT() {\n+            super(\"ROOT\");\n+        }\n+\n+        \/**\n+         * Delete operation is not permitted for trusted anchors\n+         *\/\n+        public void engineDeleteEntry(String alias)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be removed\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, Key key, char[] password,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, byte[] key,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineStore(OutputStream stream, char[] password)\n+                throws IOException, NoSuchAlgorithmException, CertificateException\n+        {\n+            \/\/ do nothing, no changes allowed\n+        }\n+    }\n@@ -140,0 +200,1 @@\n+    private final String storeName;\n@@ -147,1 +208,3 @@\n-    public KeychainStore() { }\n+    private KeychainStore(String name) {\n+        this.storeName = name;\n+    }\n@@ -764,1 +827,1 @@\n-            _scanKeychain();\n+            _scanKeychain(storeName);\n@@ -772,1 +835,1 @@\n-    private native void _scanKeychain();\n+    private native void _scanKeychain(String name);\n@@ -810,1 +873,1 @@\n-            if (entries.contains(alias.toLowerCase(Locale.ROOT))) {\n+            if (entries.containsKey(alias.toLowerCase(Locale.ROOT))) {\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":71,"deletions":8,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-static void addIdentitiesToKeystore(JNIEnv *env, jobject keyStore)\n+static void addIdentitiesToKeystore(JNIEnv *env, jobject keyStore, jmethodID jm_createKeyEntry)\n@@ -287,9 +287,0 @@\n-    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n-    if (jc_KeychainStore == NULL) {\n-        goto errOut;\n-    }\n-    jmethodID jm_createKeyEntry = (*env)->GetMethodID(env, jc_KeychainStore, \"createKeyEntry\", \"(Ljava\/lang\/String;JJ[J[[B)V\");\n-    if (jm_createKeyEntry == NULL) {\n-        goto errOut;\n-    }\n-\n@@ -415,11 +406,19 @@\n-static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore)\n-{\n-    \/\/ Search the user keychain list for all X509 certificates.\n-    SecKeychainSearchRef keychainItemSearch = NULL;\n-    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n-    SecKeychainItemRef theItem = NULL;\n-    OSErr searchResult = noErr;\n-\n-    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n-    if (jc_KeychainStore == NULL) {\n-        goto errOut;\n+static bool loadTrustSettings(JNIEnv *env,\n+                              SecCertificateRef certRef,\n+                              SecTrustSettingsDomain domain,\n+                              jclass jc_arrayListClass,\n+                              jmethodID jm_arrayListCons,\n+                              jmethodID jm_listAdd,\n+                              jobject *inputTrust) {\n+    CFArrayRef trustSettings;\n+    \/\/ Load trustSettings into inputTrust\n+    if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+        if (*inputTrust == NULL) {\n+            *inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+            if (*inputTrust == NULL) {\n+                CFRelease(trustSettings);\n+                return false;\n+            }\n+        }\n+        addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, *inputTrust);\n+        CFRelease(trustSettings);\n@@ -427,0 +426,2 @@\n+    return true;\n+}\n@@ -428,4 +429,11 @@\n-    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n-            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n-    if (jm_createTrustedCertEntry == NULL) {\n-        goto errOut;\n+static bool createTrustedCertEntry(JNIEnv *env,  jobject keyStore,\n+                              SecCertificateRef certRef,\n+                              jmethodID jm_createTrustedCertEntry,\n+                              jobject inputTrust) {\n+\n+    SecKeychainItemRef theItem = (SecKeychainItemRef)certRef;\n+    CSSM_DATA currCertificate;\n+    OSStatus err = SecCertificateGetData(certRef, &currCertificate);\n+    jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n+    if (certData == NULL) {\n+        return false;\n@@ -433,0 +441,1 @@\n+    (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n@@ -434,3 +443,4 @@\n-    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n-    if (jc_arrayListClass == NULL) {\n-        goto errOut;\n+    \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n+    jstring alias = getLabelFromItem(env, theItem);\n+    if (alias == NULL) {\n+        return false;\n@@ -439,4 +449,2 @@\n-    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n-    if (jm_arrayListCons == NULL) {\n-        goto errOut;\n-    }\n+    \/\/ Find the creation date.\n+    jlong creationDate = getModDateFromItem(env, theItem);\n@@ -444,3 +452,5 @@\n-    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n-    if (jm_listAdd == NULL) {\n-        goto errOut;\n+    \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n+    jlong nativeRef = ptr_to_jlong(certRef);\n+    (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n+    if ((*env)->ExceptionCheck(env)) {\n+        return false;\n@@ -448,0 +458,13 @@\n+    return true;\n+}\n+\n+static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n+    \/\/ Search the user keychain list for all X509 certificates.\n+    SecKeychainSearchRef keychainItemSearch = NULL;\n+    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n+    SecKeychainItemRef theItem = NULL;\n+    OSErr searchResult = noErr;\n@@ -455,13 +478,0 @@\n-            CSSM_DATA currCertificate;\n-            err = SecCertificateGetData(certRef, &currCertificate);\n-            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n-            if (certData == NULL) {\n-                goto errOut;\n-            }\n-            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n-\n-            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n-            jstring alias = getLabelFromItem(env, theItem);\n-            if (alias == NULL) {\n-                goto errOut;\n-            }\n@@ -473,1 +483,0 @@\n-            CFArrayRef trustSettings = NULL;\n@@ -476,8 +485,3 @@\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -486,11 +490,3 @@\n-            trustSettings = NULL;\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainAdmin, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                if (inputTrust == NULL) {\n-                    inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                }\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -504,7 +500,2 @@\n-            \/\/ Find the creation date.\n-            jlong creationDate = getModDateFromItem(env, theItem);\n-\n-            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n-            jlong nativeRef = ptr_to_jlong(certRef);\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n-            if ((*env)->ExceptionCheck(env)) {\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n@@ -522,0 +513,84 @@\n+static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n+    SecKeychainRef keychain = NULL;\n+    CFMutableArrayRef keychainList = NULL;\n+    CFDictionaryRef search = NULL;\n+    CFArrayRef currAnchors = NULL;\n+\n+    \/\/ Load predefined root certificates from SystemRootCertificates keychain\n+    \/\/ SecTrustCopyAnchorCertificates includes extra root certificates and can not be used here\n+    if( SecKeychainOpen(\"\/System\/Library\/Keychains\/SystemRootCertificates.keychain\", &keychain) != errSecSuccess ) {\n+        return;\n+    }\n+\n+    keychainList = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);\n+    if (keychainList == NULL) {\n+        goto errOut;\n+    }\n+    CFArrayAppendValue(keychainList, keychain);\n+\n+    CFTypeRef searchKeys[] = { kSecClass, kSecMatchLimit, kSecReturnRef, kSecMatchSearchList };\n+    CFTypeRef searchValues[] = { kSecClassCertificate, kSecMatchLimitAll, kCFBooleanTrue, keychainList };\n+    search = CFDictionaryCreate(kCFAllocatorDefault,\n+                              searchKeys, searchValues, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);\n+    if (search == NULL) {\n+        goto errOut;\n+    }\n+\n+    if( SecItemCopyMatching( search, (CFTypeRef *)&currAnchors ) == errSecSuccess ){\n+        CFIndex nAnchors = CFArrayGetCount(currAnchors);\n+\n+        for (CFIndex i = 0; i < nAnchors; i++) {\n+            SecCertificateRef certRef = (SecCertificateRef)CFArrayGetValueAtIndex(currAnchors, i);\n+\n+            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust for system root certs\n+            \/\/ This time we load trust settings from domains kSecTrustSettingsDomainUser,\n+            \/\/ kSecTrustSettingsDomainAdmin and kSecTrustSettingsDomainSystem\n+            jobject inputTrust = NULL;\n+\n+            \/\/ Load user trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load admin trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load system trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainSystem,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+\n+            if (inputTrust == NULL) {\n+                continue;\n+            }\n+\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n+                goto errOut;\n+            }\n+            CFRetain(certRef);\n+        }\n+    }\n+\n+errOut:\n+    if (currAnchors != NULL) {\n+        CFRelease(currAnchors);\n+    }\n+    if (search != NULL) {\n+        CFRelease(search);\n+    }\n+    if (keychainList != NULL) {\n+        CFRelease(keychainList);\n+    }\n+    if (keychain != NULL) {\n+        CFRelease(keychain);\n+    }\n+}\n+\n@@ -593,1 +668,1 @@\n- * Signature: ()V\n+ * Signature: (Ljava\/lang\/String)V\n@@ -596,1 +671,1 @@\n-(JNIEnv *env, jobject this)\n+(JNIEnv *env, jobject this, jstring name)\n@@ -598,4 +673,18 @@\n-    \/\/ Look for 'identities' -- private key and certificate chain pairs -- and add those.\n-    \/\/ Search for these first, because a certificate that's found here as part of an identity will show up\n-    \/\/ again later as a certificate.\n-    addIdentitiesToKeystore(env, this);\n+    jboolean isCopy;\n+    const char *name_utf = (*env)->GetStringUTFChars(env, name, &isCopy);\n+    if (name_utf != NULL) {\n+        jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n+        if (jc_KeychainStore == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_createKeyEntry = (*env)->GetMethodID(env, jc_KeychainStore, \"createKeyEntry\", \"(Ljava\/lang\/String;JJ[J[[B)V\");\n+        if (jm_createKeyEntry == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n+                env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n+        if (jm_createTrustedCertEntry == NULL) {\n+            return;\n+        }\n@@ -603,1 +692,9 @@\n-    JNU_CHECK_EXCEPTION(env);\n+        jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+        if (jc_arrayListClass == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n+        if (jm_arrayListCons == NULL) {\n+            return;\n+        }\n@@ -605,2 +702,4 @@\n-    \/\/ Scan current keychain for trusted certificates.\n-    addCertificatesToKeystore(env, this);\n+        jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+        if (jm_listAdd == NULL) {\n+            return;\n+        }\n@@ -608,0 +707,23 @@\n+        if (strcmp(name_utf, \"ROOT\") == 0) {\n+            \/\/ Scan Trusted Anchors keychain for trusted certificates.\n+            addCertificatesToKeystoreRoot(env, this,\n+                                          jm_createTrustedCertEntry,\n+                                          jc_arrayListClass,\n+                                          jm_arrayListCons,\n+                                          jm_listAdd);\n+        } else {\n+            \/\/ Look for 'identities' -- private key and certificate chain pairs -- and add those.\n+            \/\/ Search for these first, because a certificate that's found here as part of an identity will show up\n+            \/\/ again later as a certificate.\n+            addIdentitiesToKeystore(env, this, jm_createKeyEntry);\n+\n+            JNU_CHECK_EXCEPTION(env);\n+\n+            \/\/ Scan current keychain for trusted certificates.\n+            addCertificatesToKeystore(env, this,\n+                                      jm_createTrustedCertEntry,\n+                                      jc_arrayListClass,\n+                                      jm_arrayListCons,\n+                                      jm_listAdd);\n+        }\n+    }\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":206,"deletions":84,"binary":false,"changes":290,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-    security\/infra\/java\/security\/cert\/CertPathValidator\/certification\n+    security\/infra\n","filename":"test\/jdk\/TEST.groups","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @bug 8303465\n+ * @bug 8303465 8320362\n@@ -40,0 +40,2 @@\n+ * @run main CheckMacOSKeyChainTrust KEYCHAINSTORE\n+ * @run main CheckMacOSKeyChainTrust KEYCHAINSTORE-ROOT\n@@ -46,2 +48,10 @@\n-        loadUser();\n-        loadAdmin();\n+        String keystore = args[0];\n+        if (keystore.equals(\"KEYCHAINSTORE\")) {\n+            loadUser(true);\n+            loadAdmin(true);\n+        } else {\n+            \/\/ check user and admin trustsettings to find distrusted certs\n+            loadUser(false);\n+            loadAdmin(false);\n+            loadSystem(true);\n+        }\n@@ -50,1 +60,1 @@\n-        KeyStore ks = KeyStore.getInstance(\"KEYCHAINSTORE\");\n+        KeyStore ks = KeyStore.getInstance(keystore);\n@@ -64,2 +74,6 @@\n-    private static void loadUser() throws Throwable {\n-        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\"));\n+    private static void loadUser(boolean addTrusted) throws Throwable {\n+        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\"), addTrusted);\n+    }\n+\n+    private static void loadAdmin(boolean addTrusted) throws Throwable {\n+        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\", \"-d\"), addTrusted);\n@@ -68,2 +82,2 @@\n-    private static void loadAdmin() throws Throwable {\n-        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\", \"-d\"));\n+    private static void loadSystem(boolean addTrusted) throws Throwable {\n+        populate(ProcessTools.executeProcess(\"security\", \"dump-trust-settings\", \"-s\"), addTrusted);\n@@ -72,1 +86,1 @@\n-    private static void populate(OutputAnalyzer output) throws Throwable {\n+    private static void populate(OutputAnalyzer output, boolean addTrusted) throws Throwable {\n@@ -87,1 +101,3 @@\n-                        trusted.add(certName);\n+                        if (addTrusted) {\n+                            trusted.add(certName);\n+                        }\n@@ -112,1 +128,3 @@\n-                trusted.add(certName);\n+                if (addTrusted) {\n+                    trusted.add(certName);\n+                }\n","filename":"test\/jdk\/java\/security\/KeyStore\/CheckMacOSKeyChainTrust.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8320362\n+ * @summary Verifies successfull connection to external server with\n+ *          KEYCHAINSTORE-ROOT trust store\n+ * @library \/test\/lib\n+ * @requires os.family == \"mac\"\n+ * @run main\/othervm HttpsURLConnectionTest https:\/\/github.com KeychainStore-Root\n+ *\/\n+import java.io.*;\n+import java.net.*;\n+import javax.net.ssl.*;\n+\n+public class HttpsURLConnectionTest {\n+    public static void main(String[] args) {\n+        System.setProperty( \"javax.net.ssl.trustStoreType\", args[1]);\n+        try {\n+            HttpsURLConnection httpsCon = (HttpsURLConnection) new URL(args[0]).openConnection();\n+            if(httpsCon.getResponseCode() != 200) {\n+                throw new RuntimeException(\"Test failed : bad http response code : \"+ httpsCon.getResponseCode());\n+            }\n+        } catch(IOException ioe) {\n+            throw new RuntimeException(\"Test failed: \" + ioe.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/security\/infra\/javax\/net\/ssl\/HttpsURLConnectionTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}