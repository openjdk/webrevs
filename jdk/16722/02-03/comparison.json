{"files":[{"patch":"@@ -87,1 +87,1 @@\n-                           \"KeychainStore\", \"apple.security.KeychainStore.USER\"));\n+                           \"KeychainStore\", \"apple.security.KeychainStore$USER\"));\n@@ -89,1 +89,1 @@\n-                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore.ROOT\"));\n+                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore$ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * This class provides the keystores implementation referred to as\n+ * This class provides the keystore implementations referred to as\n@@ -47,2 +47,2 @@\n- * It uses the current user's and system root keychains accordingly\n- * as its backing storage, and does NOT support a file-based\n+ * They use the current user's and system root keychains accordingly\n+ * as their backing storage, and does NOT support a file-based\n@@ -52,1 +52,1 @@\n-abstract class KeychainStore extends KeyStoreSpi {\n+abstract sealed class KeychainStore extends KeyStoreSpi {\n@@ -212,8 +212,0 @@\n-    \/**\n-     * Returns the name of the keystore.\n-     *\/\n-    private String getName()\n-    {\n-        return storeName;\n-    }\n-\n@@ -546,1 +538,0 @@\n-\n@@ -836,1 +827,1 @@\n-            _scanKeychain(getName());\n+            _scanKeychain(storeName);\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -415,11 +415,19 @@\n-static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore)\n-{\n-    \/\/ Search the user keychain list for all X509 certificates.\n-    SecKeychainSearchRef keychainItemSearch = NULL;\n-    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n-    SecKeychainItemRef theItem = NULL;\n-    OSErr searchResult = noErr;\n-\n-    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n-    if (jc_KeychainStore == NULL) {\n-        goto errOut;\n+static bool loadTrustSettings(JNIEnv *env,\n+                              SecCertificateRef certRef,\n+                              SecTrustSettingsDomain domain,\n+                              jclass jc_arrayListClass,\n+                              jmethodID jm_arrayListCons,\n+                              jmethodID jm_listAdd,\n+                              jobject *inputTrust) {\n+    CFArrayRef trustSettings;\n+    \/\/ Load trustSettings into inputTrust\n+    if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+        if (*inputTrust == NULL) {\n+            *inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+            if (*inputTrust == NULL) {\n+                CFRelease(trustSettings);\n+                return false;\n+            }\n+        }\n+        addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, *inputTrust);\n+        CFRelease(trustSettings);\n@@ -427,0 +435,2 @@\n+    return true;\n+}\n@@ -428,5 +438,4 @@\n-    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n-            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n-    if (jm_createTrustedCertEntry == NULL) {\n-        goto errOut;\n-    }\n+static bool createTrustedCertEntry(JNIEnv *env,  jobject keyStore,\n+                              SecCertificateRef certRef,\n+                              jmethodID jm_createTrustedCertEntry,\n+                              jobject inputTrust) {\n@@ -434,3 +443,6 @@\n-    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n-    if (jc_arrayListClass == NULL) {\n-        goto errOut;\n+    SecKeychainItemRef theItem = (SecKeychainItemRef)certRef;\n+    CSSM_DATA currCertificate;\n+    OSStatus err = SecCertificateGetData(certRef, &currCertificate);\n+    jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n+    if (certData == NULL) {\n+        return false;\n@@ -438,0 +450,1 @@\n+    (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n@@ -439,3 +452,4 @@\n-    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n-    if (jm_arrayListCons == NULL) {\n-        goto errOut;\n+    \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n+    jstring alias = getLabelFromItem(env, theItem);\n+    if (alias == NULL) {\n+        return false;\n@@ -444,3 +458,8 @@\n-    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n-    if (jm_listAdd == NULL) {\n-        goto errOut;\n+    \/\/ Find the creation date.\n+    jlong creationDate = getModDateFromItem(env, theItem);\n+\n+    \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n+    jlong nativeRef = ptr_to_jlong(certRef);\n+    (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n+    if ((*env)->ExceptionCheck(env)) {\n+        return false;\n@@ -448,0 +467,13 @@\n+    return true;\n+}\n+\n+static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n+    \/\/ Search the user keychain list for all X509 certificates.\n+    SecKeychainSearchRef keychainItemSearch = NULL;\n+    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n+    SecKeychainItemRef theItem = NULL;\n+    OSErr searchResult = noErr;\n@@ -455,13 +487,0 @@\n-            CSSM_DATA currCertificate;\n-            err = SecCertificateGetData(certRef, &currCertificate);\n-            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n-            if (certData == NULL) {\n-                goto errOut;\n-            }\n-            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n-\n-            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n-            jstring alias = getLabelFromItem(env, theItem);\n-            if (alias == NULL) {\n-                goto errOut;\n-            }\n@@ -473,15 +492,5 @@\n-            CFArrayRef trustSettings = NULL;\n-            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainAdmin; domain++) {\n-                trustSettings = NULL;\n-                \/\/ Load user trustSettings into inputTrust\n-                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                    if(inputTrust == NULL) {\n-                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                    }\n-                    if (inputTrust == NULL) {\n-                        CFRelease(trustSettings);\n-                        goto errOut;\n-                    }\n-                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                    CFRelease(trustSettings);\n-                }\n+\n+            \/\/ Load user trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -489,0 +498,7 @@\n+            \/\/ Load admin trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+\n+            \/\/ Only add certificates with trust settings\n@@ -493,7 +509,2 @@\n-            \/\/ Find the creation date.\n-            jlong creationDate = getModDateFromItem(env, theItem);\n-\n-            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n-            jlong nativeRef = ptr_to_jlong(certRef);\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n-            if ((*env)->ExceptionCheck(env)) {\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n@@ -511,4 +522,5 @@\n-static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore)\n-{\n-    OSStatus err;\n-    SecKeychainItemRef theItem = NULL;\n+static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n@@ -517,26 +529,0 @@\n-    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n-    if (jc_KeychainStore == NULL) {\n-        goto errOut;\n-    }\n-\n-    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n-            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n-    if (jm_createTrustedCertEntry == NULL) {\n-        goto errOut;\n-    }\n-\n-    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n-    if (jc_arrayListClass == NULL) {\n-        goto errOut;\n-    }\n-\n-    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n-    if (jm_arrayListCons == NULL) {\n-        goto errOut;\n-    }\n-\n-    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n-    if (jm_listAdd == NULL) {\n-        goto errOut;\n-    }\n-\n@@ -544,1 +530,1 @@\n-    if(SecTrustCopyAnchorCertificates(&currAnchors) == errSecSuccess) {\n+    if (SecTrustCopyAnchorCertificates(&currAnchors) == errSecSuccess) {\n@@ -549,13 +535,0 @@\n-            CSSM_DATA currCertificate;\n-            err = SecCertificateGetData(certRef, &currCertificate);\n-            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n-            if (certData == NULL) {\n-                goto errOut;\n-            }\n-            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n-\n-            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n-            jstring alias = getLabelFromItem(env, (SecKeychainItemRef)certRef);\n-            if (alias == NULL) {\n-                goto errOut;\n-            }\n@@ -567,15 +540,15 @@\n-            CFArrayRef trustSettings = NULL;\n-            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainSystem; domain++) {\n-                trustSettings = NULL;\n-                \/\/ Load user trustSettings into inputTrust\n-                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                    if(inputTrust == NULL) {\n-                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                    }\n-                    if (inputTrust == NULL) {\n-                        CFRelease(trustSettings);\n-                        goto errOut;\n-                    }\n-                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                    CFRelease(trustSettings);\n-                }\n+\n+            \/\/ Load user trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load admin trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load system trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainSystem,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -583,0 +556,1 @@\n+\n@@ -587,7 +561,2 @@\n-            \/\/ Find the creation date.\n-            jlong creationDate = getModDateFromItem(env, (SecKeychainItemRef)certRef);\n-\n-            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n-            jlong nativeRef = ptr_to_jlong(certRef);\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n-            if ((*env)->ExceptionCheck(env)) {\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n@@ -598,1 +567,0 @@\n-\n@@ -693,0 +661,26 @@\n+        jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n+        if (jc_KeychainStore == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n+                env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n+        if (jm_createTrustedCertEntry == NULL) {\n+            return;\n+        }\n+\n+        jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+        if (jc_arrayListClass == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n+        if (jm_arrayListCons == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+        if (jm_listAdd == NULL) {\n+            return;\n+        }\n+\n@@ -695,1 +689,5 @@\n-            addCertificatesToKeystoreRoot(env, this);\n+            addCertificatesToKeystoreRoot(env, this,\n+                                          jm_createTrustedCertEntry,\n+                                          jc_arrayListClass,\n+                                          jm_arrayListCons,\n+                                          jm_listAdd);\n@@ -698,1 +696,5 @@\n-            addCertificatesToKeystore(env, this);\n+            addCertificatesToKeystore(env, this,\n+                                      jm_createTrustedCertEntry,\n+                                      jc_arrayListClass,\n+                                      jm_arrayListCons,\n+                                      jm_listAdd);\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":131,"deletions":129,"binary":false,"changes":260,"status":"modified"}]}