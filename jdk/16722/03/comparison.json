{"files":[{"patch":"@@ -63,1 +63,3 @@\n-                        return new KeychainStore();\n+                        return new KeychainStore.USER();\n+                    } else if (algo.equals(\"KeychainStore-ROOT\")) {\n+                        return new KeychainStore.ROOT();\n@@ -85,1 +87,3 @@\n-                           \"KeychainStore\", \"apple.security.KeychainStore\"));\n+                           \"KeychainStore\", \"apple.security.KeychainStore$USER\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore$ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,3 +45,5 @@\n- * This class provides the keystore implementation referred to as \"KeychainStore\".\n- * It uses the current user's keychain as its backing storage, and does NOT support\n- * a file-based implementation.\n+ * This class provides the keystore implementations referred to as\n+ * \"KeychainStore\" and \"KeychainStore-ROOT\".\n+ * They use the current user's and system root keychains accordingly\n+ * as their backing storage, and does NOT support a file-based\n+ * implementation.\n@@ -50,1 +52,59 @@\n-public final class KeychainStore extends KeyStoreSpi {\n+abstract sealed class KeychainStore extends KeyStoreSpi {\n+\n+    \/**\n+     * Current user's keychain\n+     *\/\n+    public static final class USER extends KeychainStore {\n+        public USER() {\n+            super(\"USER\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * System root read-only keychain\n+     *\n+     *\/\n+    public static final class ROOT extends KeychainStore {\n+        public ROOT() {\n+            super(\"ROOT\");\n+        }\n+\n+        \/**\n+         * Delete operation is not permitted for trusted anchors\n+         *\/\n+        public void engineDeleteEntry(String alias)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be removed\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, Key key, char[] password,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, byte[] key,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineStore(OutputStream stream, char[] password)\n+                throws IOException, NoSuchAlgorithmException, CertificateException\n+        {\n+            \/\/ do nothing, no changes allowed\n+        }\n+    }\n@@ -140,0 +200,1 @@\n+    private final String storeName;\n@@ -147,1 +208,3 @@\n-    public KeychainStore() { }\n+    private KeychainStore(String name) {\n+        this.storeName = name;\n+    }\n@@ -764,1 +827,1 @@\n-            _scanKeychain();\n+            _scanKeychain(storeName);\n@@ -772,1 +835,1 @@\n-    private native void _scanKeychain();\n+    private native void _scanKeychain(String name);\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":70,"deletions":7,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -415,11 +415,19 @@\n-static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore)\n-{\n-    \/\/ Search the user keychain list for all X509 certificates.\n-    SecKeychainSearchRef keychainItemSearch = NULL;\n-    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n-    SecKeychainItemRef theItem = NULL;\n-    OSErr searchResult = noErr;\n-\n-    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n-    if (jc_KeychainStore == NULL) {\n-        goto errOut;\n+static bool loadTrustSettings(JNIEnv *env,\n+                              SecCertificateRef certRef,\n+                              SecTrustSettingsDomain domain,\n+                              jclass jc_arrayListClass,\n+                              jmethodID jm_arrayListCons,\n+                              jmethodID jm_listAdd,\n+                              jobject *inputTrust) {\n+    CFArrayRef trustSettings;\n+    \/\/ Load trustSettings into inputTrust\n+    if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+        if (*inputTrust == NULL) {\n+            *inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+            if (*inputTrust == NULL) {\n+                CFRelease(trustSettings);\n+                return false;\n+            }\n+        }\n+        addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, *inputTrust);\n+        CFRelease(trustSettings);\n@@ -427,0 +435,2 @@\n+    return true;\n+}\n@@ -428,4 +438,11 @@\n-    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n-            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n-    if (jm_createTrustedCertEntry == NULL) {\n-        goto errOut;\n+static bool createTrustedCertEntry(JNIEnv *env,  jobject keyStore,\n+                              SecCertificateRef certRef,\n+                              jmethodID jm_createTrustedCertEntry,\n+                              jobject inputTrust) {\n+\n+    SecKeychainItemRef theItem = (SecKeychainItemRef)certRef;\n+    CSSM_DATA currCertificate;\n+    OSStatus err = SecCertificateGetData(certRef, &currCertificate);\n+    jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n+    if (certData == NULL) {\n+        return false;\n@@ -433,0 +450,1 @@\n+    (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n@@ -434,3 +452,4 @@\n-    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n-    if (jc_arrayListClass == NULL) {\n-        goto errOut;\n+    \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n+    jstring alias = getLabelFromItem(env, theItem);\n+    if (alias == NULL) {\n+        return false;\n@@ -439,4 +458,2 @@\n-    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n-    if (jm_arrayListCons == NULL) {\n-        goto errOut;\n-    }\n+    \/\/ Find the creation date.\n+    jlong creationDate = getModDateFromItem(env, theItem);\n@@ -444,3 +461,5 @@\n-    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n-    if (jm_listAdd == NULL) {\n-        goto errOut;\n+    \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n+    jlong nativeRef = ptr_to_jlong(certRef);\n+    (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n+    if ((*env)->ExceptionCheck(env)) {\n+        return false;\n@@ -448,0 +467,13 @@\n+    return true;\n+}\n+\n+static void addCertificatesToKeystore(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n+    \/\/ Search the user keychain list for all X509 certificates.\n+    SecKeychainSearchRef keychainItemSearch = NULL;\n+    OSStatus err = SecKeychainSearchCreateFromAttributes(NULL, kSecCertificateItemClass, NULL, &keychainItemSearch);\n+    SecKeychainItemRef theItem = NULL;\n+    OSErr searchResult = noErr;\n@@ -455,13 +487,0 @@\n-            CSSM_DATA currCertificate;\n-            err = SecCertificateGetData(certRef, &currCertificate);\n-            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n-            if (certData == NULL) {\n-                goto errOut;\n-            }\n-            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n-\n-            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n-            jstring alias = getLabelFromItem(env, theItem);\n-            if (alias == NULL) {\n-                goto errOut;\n-            }\n@@ -473,1 +492,0 @@\n-            CFArrayRef trustSettings = NULL;\n@@ -476,8 +494,3 @@\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -486,11 +499,3 @@\n-            trustSettings = NULL;\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainAdmin, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                if (inputTrust == NULL) {\n-                    inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                }\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n@@ -504,7 +509,2 @@\n-            \/\/ Find the creation date.\n-            jlong creationDate = getModDateFromItem(env, theItem);\n-\n-            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n-            jlong nativeRef = ptr_to_jlong(certRef);\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n-            if ((*env)->ExceptionCheck(env)) {\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n@@ -522,0 +522,53 @@\n+static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore,\n+                                        jmethodID jm_createTrustedCertEntry,\n+                                        jclass jc_arrayListClass,\n+                                        jmethodID jm_arrayListCons,\n+                                        jmethodID jm_listAdd) {\n+    CFArrayRef currAnchors = NULL;\n+\n+    \/\/ Read Trust Anchors\n+    if (SecTrustCopyAnchorCertificates(&currAnchors) == errSecSuccess) {\n+        CFIndex nAnchors = CFArrayGetCount(currAnchors);\n+\n+        for (CFIndex i = 0; i < nAnchors; i++) {\n+            SecCertificateRef certRef = (SecCertificateRef)CFArrayGetValueAtIndex(currAnchors, i);\n+\n+            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust for system root certs\n+            \/\/ This time we load trust settings from domains kSecTrustSettingsDomainUser,\n+            \/\/ kSecTrustSettingsDomainAdmin and kSecTrustSettingsDomainSystem\n+            jobject inputTrust = NULL;\n+\n+            \/\/ Load user trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainUser,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load admin trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainAdmin,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+            \/\/ Load system trustSettings into inputTrust\n+            if (!loadTrustSettings(env, certRef, kSecTrustSettingsDomainSystem,\n+                                   jc_arrayListClass, jm_arrayListCons, jm_listAdd, &inputTrust)) {\n+                goto errOut;\n+            }\n+\n+            if (inputTrust == NULL) {\n+                continue;\n+            }\n+\n+            \/\/ Create java object for certificate with trust settings\n+            if (!createTrustedCertEntry(env, keyStore, certRef, jm_createTrustedCertEntry, inputTrust)) {\n+                goto errOut;\n+            }\n+            CFRetain(certRef);\n+        }\n+    }\n+\n+errOut:\n+    if (currAnchors != NULL) {\n+        CFRelease(currAnchors);\n+    }\n+}\n+\n@@ -593,1 +646,1 @@\n- * Signature: ()V\n+ * Signature: (Ljava\/lang\/String)V\n@@ -596,1 +649,1 @@\n-(JNIEnv *env, jobject this)\n+(JNIEnv *env, jobject this, jstring name)\n@@ -605,2 +658,7 @@\n-    \/\/ Scan current keychain for trusted certificates.\n-    addCertificatesToKeystore(env, this);\n+    jboolean isCopy;\n+    const char *name_utf = (*env)->GetStringUTFChars(env, name, &isCopy);\n+    if (name_utf != NULL) {\n+        jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n+        if (jc_KeychainStore == NULL) {\n+            return;\n+        }\n@@ -608,0 +666,37 @@\n+        jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n+                env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n+        if (jm_createTrustedCertEntry == NULL) {\n+            return;\n+        }\n+\n+        jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+        if (jc_arrayListClass == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n+        if (jm_arrayListCons == NULL) {\n+            return;\n+        }\n+\n+        jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+        if (jm_listAdd == NULL) {\n+            return;\n+        }\n+\n+        if (strcmp(name_utf, \"ROOT\") == 0) {\n+            \/\/ Scan Trusted Anchors keychain for trusted certificates.\n+            addCertificatesToKeystoreRoot(env, this,\n+                                          jm_createTrustedCertEntry,\n+                                          jc_arrayListClass,\n+                                          jm_arrayListCons,\n+                                          jm_listAdd);\n+        } else {\n+            \/\/ Scan current keychain for trusted certificates.\n+            addCertificatesToKeystore(env, this,\n+                                      jm_createTrustedCertEntry,\n+                                      jc_arrayListClass,\n+                                      jm_arrayListCons,\n+                                      jm_listAdd);\n+        }\n+    }\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":164,"deletions":69,"binary":false,"changes":233,"status":"modified"}]}