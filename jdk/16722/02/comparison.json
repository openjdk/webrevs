{"files":[{"patch":"@@ -63,1 +63,3 @@\n-                        return new KeychainStore();\n+                        return new KeychainStore.USER();\n+                    } else if (algo.equals(\"KeychainStore-ROOT\")) {\n+                        return new KeychainStore.ROOT();\n@@ -85,1 +87,3 @@\n-                           \"KeychainStore\", \"apple.security.KeychainStore\"));\n+                           \"KeychainStore\", \"apple.security.KeychainStore.USER\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore.ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,3 +45,5 @@\n- * This class provides the keystore implementation referred to as \"KeychainStore\".\n- * It uses the current user's keychain as its backing storage, and does NOT support\n- * a file-based implementation.\n+ * This class provides the keystores implementation referred to as\n+ * \"KeychainStore\" and \"KeychainStore-ROOT\".\n+ * It uses the current user's and system root keychains accordingly\n+ * as its backing storage, and does NOT support a file-based\n+ * implementation.\n@@ -50,1 +52,59 @@\n-public final class KeychainStore extends KeyStoreSpi {\n+abstract class KeychainStore extends KeyStoreSpi {\n+\n+    \/**\n+     * Current user's keychain\n+     *\/\n+    public static final class USER extends KeychainStore {\n+        public USER() {\n+            super(\"USER\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * System root read-only keychain\n+     *\n+     *\/\n+    public static final class ROOT extends KeychainStore {\n+        public ROOT() {\n+            super(\"ROOT\");\n+        }\n+\n+        \/**\n+         * Delete operation is not permitted for trusted anchors\n+         *\/\n+        public void engineDeleteEntry(String alias)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be removed\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, Key key, char[] password,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, byte[] key,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineStore(OutputStream stream, char[] password)\n+                throws IOException, NoSuchAlgorithmException, CertificateException\n+        {\n+            \/\/ do nothing, no changes allowed\n+        }\n+    }\n@@ -140,0 +200,1 @@\n+    private final String storeName;\n@@ -147,1 +208,11 @@\n-    public KeychainStore() { }\n+    private KeychainStore(String name) {\n+        this.storeName = name;\n+    }\n+\n+    \/**\n+     * Returns the name of the keystore.\n+     *\/\n+    private String getName()\n+    {\n+        return storeName;\n+    }\n@@ -475,0 +546,1 @@\n+\n@@ -764,1 +836,1 @@\n-            _scanKeychain();\n+            _scanKeychain(getName());\n@@ -772,1 +844,1 @@\n-    private native void _scanKeychain();\n+    private native void _scanKeychain(String name);\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":79,"deletions":7,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -474,5 +474,12 @@\n-\n-            \/\/ Load user trustSettings into inputTrust\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                if (inputTrust == NULL) {\n+            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainAdmin; domain++) {\n+                trustSettings = NULL;\n+                \/\/ Load user trustSettings into inputTrust\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                    if(inputTrust == NULL) {\n+                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                    }\n+                    if (inputTrust == NULL) {\n+                        CFRelease(trustSettings);\n+                        goto errOut;\n+                    }\n+                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n@@ -480,1 +487,0 @@\n-                    goto errOut;\n@@ -482,2 +488,0 @@\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n@@ -485,15 +489,0 @@\n-            \/\/ Load admin trustSettings into inputTrust\n-            trustSettings = NULL;\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainAdmin, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                if (inputTrust == NULL) {\n-                    inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                }\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n-            }\n-\n-            \/\/ Only add certificates with trust settings\n@@ -522,0 +511,96 @@\n+static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore)\n+{\n+    OSStatus err;\n+    SecKeychainItemRef theItem = NULL;\n+    CFArrayRef currAnchors = NULL;\n+\n+    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n+    if (jc_KeychainStore == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n+            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n+    if (jm_createTrustedCertEntry == NULL) {\n+        goto errOut;\n+    }\n+\n+    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+    if (jc_arrayListClass == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n+    if (jm_arrayListCons == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+    if (jm_listAdd == NULL) {\n+        goto errOut;\n+    }\n+\n+    \/\/ Read Trust Anchors\n+    if(SecTrustCopyAnchorCertificates(&currAnchors) == errSecSuccess) {\n+        CFIndex nAnchors = CFArrayGetCount(currAnchors);\n+\n+        for (CFIndex i = 0; i < nAnchors; i++) {\n+            SecCertificateRef certRef = (SecCertificateRef)CFArrayGetValueAtIndex(currAnchors, i);\n+            CSSM_DATA currCertificate;\n+            err = SecCertificateGetData(certRef, &currCertificate);\n+            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n+            if (certData == NULL) {\n+                goto errOut;\n+            }\n+            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n+\n+            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n+            jstring alias = getLabelFromItem(env, (SecKeychainItemRef)certRef);\n+            if (alias == NULL) {\n+                goto errOut;\n+            }\n+\n+            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust for system root certs\n+            \/\/ This time we load trust settings from domains kSecTrustSettingsDomainUser,\n+            \/\/ kSecTrustSettingsDomainAdmin and kSecTrustSettingsDomainSystem\n+            jobject inputTrust = NULL;\n+            CFArrayRef trustSettings = NULL;\n+            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainSystem; domain++) {\n+                trustSettings = NULL;\n+                \/\/ Load user trustSettings into inputTrust\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                    if(inputTrust == NULL) {\n+                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                    }\n+                    if (inputTrust == NULL) {\n+                        CFRelease(trustSettings);\n+                        goto errOut;\n+                    }\n+                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n+                    CFRelease(trustSettings);\n+                }\n+            }\n+            if (inputTrust == NULL) {\n+                continue;\n+            }\n+\n+            \/\/ Find the creation date.\n+            jlong creationDate = getModDateFromItem(env, (SecKeychainItemRef)certRef);\n+\n+            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n+            jlong nativeRef = ptr_to_jlong(certRef);\n+            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n+            if ((*env)->ExceptionCheck(env)) {\n+                goto errOut;\n+            }\n+            CFRetain(certRef);\n+        }\n+\n+    }\n+\n+errOut:\n+    if (currAnchors != NULL) {\n+        CFRelease(currAnchors);\n+    }\n+}\n+\n@@ -593,1 +678,1 @@\n- * Signature: ()V\n+ * Signature: (Ljava\/lang\/String)V\n@@ -596,1 +681,1 @@\n-(JNIEnv *env, jobject this)\n+(JNIEnv *env, jobject this, jstring name)\n@@ -605,3 +690,11 @@\n-    \/\/ Scan current keychain for trusted certificates.\n-    addCertificatesToKeystore(env, this);\n-\n+    jboolean isCopy;\n+    const char *name_utf = (*env)->GetStringUTFChars(env, name, &isCopy);\n+    if (name_utf != NULL) {\n+        if (strcmp(name_utf, \"ROOT\") == 0) {\n+            \/\/ Scan Trusted Anchors keychain for trusted certificates.\n+            addCertificatesToKeystoreRoot(env, this);\n+        } else {\n+            \/\/ Scan current keychain for trusted certificates.\n+            addCertificatesToKeystore(env, this);\n+        }\n+    }\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":121,"deletions":28,"binary":false,"changes":149,"status":"modified"}]}