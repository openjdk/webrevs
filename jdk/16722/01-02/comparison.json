{"files":[{"patch":"@@ -63,1 +63,3 @@\n-                        return new KeychainStore();\n+                        return new KeychainStore.USER();\n+                    } else if (algo.equals(\"KeychainStore-ROOT\")) {\n+                        return new KeychainStore.ROOT();\n@@ -85,1 +87,3 @@\n-                           \"KeychainStore\", \"apple.security.KeychainStore\"));\n+                           \"KeychainStore\", \"apple.security.KeychainStore.USER\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore.ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,3 +45,5 @@\n- * This class provides the keystore implementation referred to as \"KeychainStore\".\n- * It uses the current user's keychain as its backing storage, and does NOT support\n- * a file-based implementation.\n+ * This class provides the keystores implementation referred to as\n+ * \"KeychainStore\" and \"KeychainStore-ROOT\".\n+ * It uses the current user's and system root keychains accordingly\n+ * as its backing storage, and does NOT support a file-based\n+ * implementation.\n@@ -50,1 +52,59 @@\n-public final class KeychainStore extends KeyStoreSpi {\n+abstract class KeychainStore extends KeyStoreSpi {\n+\n+    \/**\n+     * Current user's keychain\n+     *\/\n+    public static final class USER extends KeychainStore {\n+        public USER() {\n+            super(\"USER\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * System root read-only keychain\n+     *\n+     *\/\n+    public static final class ROOT extends KeychainStore {\n+        public ROOT() {\n+            super(\"ROOT\");\n+        }\n+\n+        \/**\n+         * Delete operation is not permitted for trusted anchors\n+         *\/\n+        public void engineDeleteEntry(String alias)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be removed\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, Key key, char[] password,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineSetKeyEntry(String alias, byte[] key,\n+                                      Certificate[] chain)\n+                throws KeyStoreException\n+        {\n+            throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n+        }\n+\n+        \/**\n+         * Changes are not permitted for trusted anchors\n+         *\/\n+        public void engineStore(OutputStream stream, char[] password)\n+                throws IOException, NoSuchAlgorithmException, CertificateException\n+        {\n+            \/\/ do nothing, no changes allowed\n+        }\n+    }\n@@ -71,1 +131,0 @@\n-        boolean isReadOnly; \/\/ kSecTrustSettingsDomainSystem certificates\n@@ -141,8 +200,1 @@\n-    private void readOnlyCheck(String alias) throws KeyStoreException {\n-        String lowerAlias = alias.toLowerCase();\n-        if (entries.get(lowerAlias) instanceof TrustedCertEntry oldEntry) {\n-            if (oldEntry.isReadOnly) {\n-                throw new KeyStoreException(\"Trusted entry <\" + alias + \"> can not be modified\");\n-            }\n-        }\n-    }\n+    private final String storeName;\n@@ -156,1 +208,11 @@\n-    public KeychainStore() { }\n+    private KeychainStore(String name) {\n+        this.storeName = name;\n+    }\n+\n+    \/**\n+     * Returns the name of the keystore.\n+     *\/\n+    private String getName()\n+    {\n+        return storeName;\n+    }\n@@ -414,2 +476,0 @@\n-                readOnlyCheck(alias);\n-\n@@ -448,2 +508,0 @@\n-            } catch (KeyStoreException kse) {\n-                throw kse;\n@@ -488,1 +546,0 @@\n-            readOnlyCheck(alias);\n@@ -541,1 +598,0 @@\n-            readOnlyCheck(alias);\n@@ -780,1 +836,1 @@\n-            _scanKeychain();\n+            _scanKeychain(getName());\n@@ -788,1 +844,1 @@\n-    private native void _scanKeychain();\n+    private native void _scanKeychain(String name);\n@@ -812,1 +868,1 @@\n-            long keychainItemRef, long creationDate, boolean isReadOnly, byte[] derStream) {\n+            long keychainItemRef, long creationDate, byte[] derStream) {\n@@ -822,1 +878,0 @@\n-            tce.isReadOnly = isReadOnly;\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":79,"deletions":24,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -422,3 +422,0 @@\n-    SecTrustSettingsDomain domains[] = {kSecTrustSettingsDomainUser, kSecTrustSettingsDomainAdmin, kSecTrustSettingsDomainSystem};\n-    int numDomains = (int)sizeof(domains);\n-    CFArrayRef currAnchors = NULL;\n@@ -432,1 +429,1 @@\n-            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJZ[B)V\");\n+            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n@@ -477,1 +474,1 @@\n-            for (int n = 0; n < numDomains-1; n++) {\n+            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainAdmin; domain++) {\n@@ -480,1 +477,1 @@\n-                if (SecTrustSettingsCopyTrustSettings(certRef, domains[n], &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n@@ -501,1 +498,1 @@\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, JNI_FALSE, certData);\n+            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n@@ -508,0 +505,38 @@\n+errOut:\n+    if (keychainItemSearch != NULL) {\n+        CFRelease(keychainItemSearch);\n+    }\n+}\n+\n+static void addCertificatesToKeystoreRoot(JNIEnv *env, jobject keyStore)\n+{\n+    OSStatus err;\n+    SecKeychainItemRef theItem = NULL;\n+    CFArrayRef currAnchors = NULL;\n+\n+    jclass jc_KeychainStore = (*env)->FindClass(env, \"apple\/security\/KeychainStore\");\n+    if (jc_KeychainStore == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_createTrustedCertEntry = (*env)->GetMethodID(\n+            env, jc_KeychainStore, \"createTrustedCertEntry\", \"(Ljava\/lang\/String;Ljava\/util\/List;JJ[B)V\");\n+    if (jm_createTrustedCertEntry == NULL) {\n+        goto errOut;\n+    }\n+\n+    jclass jc_arrayListClass = (*env)->FindClass(env, \"java\/util\/ArrayList\");\n+    if (jc_arrayListClass == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_arrayListCons = (*env)->GetMethodID(env, jc_arrayListClass, \"<init>\", \"()V\");\n+    if (jm_arrayListCons == NULL) {\n+        goto errOut;\n+    }\n+\n+    jmethodID jm_listAdd = (*env)->GetMethodID(env, jc_arrayListClass, \"add\", \"(Ljava\/lang\/Object;)Z\");\n+    if (jm_listAdd == NULL) {\n+        goto errOut;\n+    }\n+\n@@ -510,1 +545,1 @@\n-        CFIndex i, nAnchors = CFArrayGetCount(currAnchors);\n+        CFIndex nAnchors = CFArrayGetCount(currAnchors);\n@@ -512,1 +547,1 @@\n-        for (i = 0; i < nAnchors; i++) {\n+        for (CFIndex i = 0; i < nAnchors; i++) {\n@@ -533,1 +568,1 @@\n-            for (int n = 0; n < numDomains; n++) {\n+            for (SecTrustSettingsDomain domain = kSecTrustSettingsDomainUser; domain <= kSecTrustSettingsDomainSystem; domain++) {\n@@ -536,1 +571,1 @@\n-                if (SecTrustSettingsCopyTrustSettings(certRef, domains[n], &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domain, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n@@ -548,1 +583,1 @@\n-            if (inputTrust == NULL)\n+            if (inputTrust == NULL) {\n@@ -550,0 +585,1 @@\n+            }\n@@ -552,1 +588,1 @@\n-            jlong creationDate = getModDateFromItem(env, theItem);\n+            jlong creationDate = getModDateFromItem(env, (SecKeychainItemRef)certRef);\n@@ -556,1 +592,1 @@\n-            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, JNI_TRUE, certData);\n+            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n@@ -566,3 +602,0 @@\n-    if (keychainItemSearch != NULL) {\n-        CFRelease(keychainItemSearch);\n-    }\n@@ -645,1 +678,1 @@\n- * Signature: ()V\n+ * Signature: (Ljava\/lang\/String)V\n@@ -648,1 +681,1 @@\n-(JNIEnv *env, jobject this)\n+(JNIEnv *env, jobject this, jstring name)\n@@ -657,3 +690,11 @@\n-    \/\/ Scan current keychain for trusted certificates.\n-    addCertificatesToKeystore(env, this);\n-\n+    jboolean isCopy;\n+    const char *name_utf = (*env)->GetStringUTFChars(env, name, &isCopy);\n+    if (name_utf != NULL) {\n+        if (strcmp(name_utf, \"ROOT\") == 0) {\n+            \/\/ Scan Trusted Anchors keychain for trusted certificates.\n+            addCertificatesToKeystoreRoot(env, this);\n+        } else {\n+            \/\/ Scan current keychain for trusted certificates.\n+            addCertificatesToKeystore(env, this);\n+        }\n+    }\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":63,"deletions":22,"binary":false,"changes":85,"status":"modified"}]}