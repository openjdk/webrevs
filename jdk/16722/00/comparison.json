{"files":[{"patch":"@@ -422,0 +422,3 @@\n+    SecTrustSettingsDomain domains[] = {kSecTrustSettingsDomainUser, kSecTrustSettingsDomainAdmin, kSecTrustSettingsDomainSystem};\n+    int numDomains = (int)sizeof(domains);\n+\n@@ -474,18 +477,12 @@\n-\n-            \/\/ Load user trustSettings into inputTrust\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainUser, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                if (inputTrust == NULL) {\n-                    CFRelease(trustSettings);\n-                    goto errOut;\n-                }\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n-            }\n-            \/\/ Load admin trustSettings into inputTrust\n-            trustSettings = NULL;\n-            if (SecTrustSettingsCopyTrustSettings(certRef, kSecTrustSettingsDomainAdmin, &trustSettings) == errSecSuccess && trustSettings != NULL) {\n-                if (inputTrust == NULL) {\n-                    inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n-                }\n-                if (inputTrust == NULL) {\n+            for (int n = 0; n < numDomains-1; n++) {\n+                trustSettings = NULL;\n+                \/\/ Load user trustSettings into inputTrust\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domains[n], &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                    if(inputTrust == NULL) {\n+                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                    }\n+                    if (inputTrust == NULL) {\n+                        CFRelease(trustSettings);\n+                        goto errOut;\n+                    }\n+                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n@@ -493,1 +490,0 @@\n-                    goto errOut;\n@@ -495,2 +491,0 @@\n-                addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n-                CFRelease(trustSettings);\n@@ -498,2 +492,0 @@\n-\n-            \/\/ Only add certificates with trust settings\n@@ -516,0 +508,61 @@\n+    \/\/ Read Trust Anchors\n+    CFArrayRef currAnchors;\n+    if(SecTrustCopyAnchorCertificates(&currAnchors) == errSecSuccess) {\n+        CFIndex ncerts = CFArrayGetCount(currAnchors);\n+\n+        for (int i = 0; i < ncerts; i++) {\n+            SecCertificateRef certRef = (SecCertificateRef)CFArrayGetValueAtIndex(currAnchors, i);\n+            CSSM_DATA currCertificate;\n+            err = SecCertificateGetData(certRef, &currCertificate);\n+            jbyteArray certData = (*env)->NewByteArray(env, currCertificate.Length);\n+            if (certData == NULL) {\n+                goto errOut;\n+            }\n+            (*env)->SetByteArrayRegion(env, certData, 0, currCertificate.Length, (jbyte *)currCertificate.Data);\n+\n+            \/\/ Find the label.  It's a 'blob', but we interpret as characters.\n+            jstring alias = getLabelFromItem(env, (SecKeychainItemRef)certRef);\n+            if (alias == NULL) {\n+                goto errOut;\n+            }\n+\n+            \/\/ See KeychainStore::createTrustedCertEntry for content of inputTrust for system root certs\n+            \/\/ This time we load trust settings from domains kSecTrustSettingsDomainUser,\n+            \/\/ kSecTrustSettingsDomainAdmin and kSecTrustSettingsDomainSystem\n+            jobject inputTrust = NULL;\n+            CFArrayRef trustSettings = NULL;\n+            for (int n = 0; n < numDomains; n++) {\n+                trustSettings = NULL;\n+                \/\/ Load user trustSettings into inputTrust\n+                if (SecTrustSettingsCopyTrustSettings(certRef, domains[n], &trustSettings) == errSecSuccess && trustSettings != NULL) {\n+                    if(inputTrust == NULL) {\n+                        inputTrust = (*env)->NewObject(env, jc_arrayListClass, jm_arrayListCons);\n+                    }\n+                    if (inputTrust == NULL) {\n+                        CFRelease(trustSettings);\n+                        goto errOut;\n+                    }\n+                    addTrustSettingsToInputTrust(env, jm_listAdd, trustSettings, inputTrust);\n+                    CFRelease(trustSettings);\n+                }\n+            }\n+            if (inputTrust == NULL)\n+                continue;\n+\n+            \/\/ Find the creation date.\n+            jlong creationDate = getModDateFromItem(env, theItem);\n+\n+            \/\/ Call back to the Java object to create Java objects corresponding to this security object.\n+            jlong nativeRef = ptr_to_jlong(certRef);\n+            (*env)->CallVoidMethod(env, keyStore, jm_createTrustedCertEntry, alias, inputTrust, nativeRef, creationDate, certData);\n+            if ((*env)->ExceptionCheck(env)) {\n+                goto errOut;\n+            }\n+        }\n+\n+    }\n+\n+    if (currAnchors != NULL) {\n+        CFRelease(currAnchors);\n+    }\n+\n","filename":"src\/java.base\/macosx\/native\/libosxsecurity\/KeystoreImpl.m","additions":76,"deletions":23,"binary":false,"changes":99,"status":"modified"}]}