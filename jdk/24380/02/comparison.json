{"files":[{"patch":"@@ -464,1 +464,1 @@\n-$(eval $(call SetupTarget, static-launcher, \\\n+$(eval $(call SetupTarget, static-launchers, \\\n@@ -466,1 +466,1 @@\n-    TARGET := static-launcher, \\\n+    TARGET := static-launchers, \\\n@@ -1293,1 +1293,1 @@\n-static-exploded-image: static-launcher exploded-image\n+static-exploded-image: static-launchers exploded-image\n","filename":"make\/Main.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,17 @@\n+ifeq ($(MAKEFILE_PREFIX), Launcher)\n+  # We need to keep track of which launchers are created by this module. This\n+  # information is required for static builds, to know which relaunchers to\n+  # create. The variable $(MODULE)_INCLUDED_LAUNCHERS is added to for each call\n+  # to SetupBuildLauncher. The file module-included-launchers.txt is then read\n+  # in StaticLibs.gmk.\n+  ifneq ($($(MODULE)_INCLUDED_LAUNCHERS), )\n+    LAUNCHERS_LIST := $(SUPPORT_OUTPUTDIR)\/modules_static-launchers\/$(MODULE)\/module-included-launchers.txt\n+\n+    $(LAUNCHERS_LIST): $(TARGETS)\n+\t$(call MakeDir, $(@D))\n+\t$(ECHO) $($(MODULE)_INCLUDED_LAUNCHERS) > $@\n+\n+    TARGETS += $(LAUNCHERS_LIST)\n+  endif\n+endif\n+\n","filename":"make\/ModuleWrapper.gmk","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-STATIC_LIB_MODULES := $(patsubst $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/%, \\\n-    %, $(wildcard $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/*))\n+STATIC_LIB_MODULES := $(sort $(patsubst $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/%, \\\n+    %, $(wildcard $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/*)))\n@@ -123,0 +123,3 @@\n+################################################################################\n+# Build the java static launcher\n+################################################################################\n@@ -129,0 +132,1 @@\n+    MACOSX_PRIVILEGED := true, \\\n@@ -130,0 +134,1 @@\n+    CFLAGS := -DSTATIC_BUILD, \\\n@@ -146,1 +151,47 @@\n-static-launcher: $(java)\n+static-launchers: $(java)\n+\n+################################################################################\n+# Build relaunchers (thin wrappers calling the java binary) for all other\n+# JDK launchers.\n+################################################################################\n+\n+RELAUNCHER_SRC := $(TOPDIR)\/src\/java.base\/$(OPENJDK_TARGET_OS_TYPE)\/native\/launcher\n+\n+# $1: The module name\n+# $2: The launcher name\n+define SetupRelauncher\n+  $1_$2_LAUNCHER_ARGS_LINE :=  $$(shell cat $$(SUPPORT_OUTPUTDIR)\/static-native\/relaunchers\/$1\/$2-relauncher-arguments.txt)\n+  # Restore |||| with space\n+  $1_$2_LAUNCHER_ARGS := '{ $$(subst ||||,$(SPACE),$$(strip $$(foreach a, $$($1_$2_LAUNCHER_ARGS_LINE), \"-J$$a\"$$(COMMA) )) ) }'\n+\n+  $$(eval $$(call SetupJdkExecutable, BUILD_relauncher_$2, \\\n+      NAME := $2, \\\n+      EXTRA_FILES := $$(RELAUNCHER_SRC)\/relauncher.c, \\\n+      CFLAGS := -DLAUNCHER_ARGS=$$($1_$2_LAUNCHER_ARGS), \\\n+      LIBS_windows := shlwapi.lib, \\\n+      OUTPUT_DIR := $$(STATIC_LAUNCHER_OUTPUT_DIR), \\\n+      OBJECT_DIR := $$(STATIC_LAUNCHER_OUTPUT_DIR)\/relaunchers\/$2, \\\n+  ))\n+\n+  TARGETS += $$(BUILD_relauncher_$2)\n+\n+  RELAUNCHERS += $$(BUILD_relauncher_$2_TARGET)\n+  static-launchers: $$(BUILD_relauncher_$2)\n+endef\n+\n+# Find all modules with launchers\n+LAUNCHER_MODULES := $(sort $(patsubst $(SUPPORT_OUTPUTDIR)\/modules_static-launchers\/%, \\\n+    %, $(wildcard $(SUPPORT_OUTPUTDIR)\/modules_static-launchers\/*)))\n+\n+# Find launchers for each module\n+$(foreach module, $(LAUNCHER_MODULES), \\\n+    $(eval LAUNCHERS_$(module) := $(if $(wildcard \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_static-launchers\/$(module)\/module-included-launchers.txt), \\\n+    $(shell cat \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_static-launchers\/$(module)\/module-included-launchers.txt))) \\\n+)\n+\n+# For all launchers (except java and javaw), setup a relauncher build\n+$(foreach module, $(LAUNCHER_MODULES), \\\n+    $(foreach launcher, $(filter-out java javaw, $(LAUNCHERS_$(module))), \\\n+    $(eval $(call SetupRelauncher,$(module),$(launcher)))))\n@@ -188,2 +239,2 @@\n-$(eval $(call SetupCopyFiles, copy-static-launcher, \\\n-    FILES := $(JAVA_LAUNCHER), \\\n+$(eval $(call SetupCopyFiles, copy-static-launchers, \\\n+    FILES := $(JAVA_LAUNCHER) $(RELAUNCHERS), \\\n@@ -193,1 +244,1 @@\n-TARGETS += $(copy-static-launcher)\n+TARGETS += $(copy-static-launchers)\n@@ -195,1 +246,1 @@\n-$(eval $(call SetupCopyFiles, copy-static-launcher-debuginfo, \\\n+$(eval $(call SetupCopyFiles, copy-static-launchers-debuginfo, \\\n@@ -201,1 +252,46 @@\n-TARGETS += $(copy-static-launcher-debuginfo)\n+TARGETS += $(copy-static-launchers-debuginfo)\n+\n+# Copy the microsoft runtime libraries on windows\n+ifeq ($(call isTargetOs, windows), true)\n+  # Chmod to avoid permission issues if bundles are unpacked on unix platforms.\n+  # Use separate macro calls in case the source files are not in the same\n+  # directory.\n+  $(eval $(call SetupCopyFiles, copy-windows-msvcr, \\\n+      DEST := $(STATIC_JDK_IMAGE_DIR)\/bin, \\\n+      FILES := $(MSVCR_DLL), \\\n+      MACRO := copy-and-chmod-executable, \\\n+  ))\n+\n+  TARGETS += $(copy-windows-msvcr)\n+\n+  $(eval $(call SetupCopyFiles, copy-windows-vcruntime, \\\n+      DEST := $(STATIC_JDK_IMAGE_DIR)\/bin, \\\n+      FILES := $(VCRUNTIME_1_DLL), \\\n+      MACRO := copy-and-chmod-executable, \\\n+  ))\n+\n+  TARGETS += $(copy-windows-vcruntime)\n+\n+  $(eval $(call SetupCopyFiles, copy-windows-msvcp, \\\n+      DEST := $(STATIC_JDK_IMAGE_DIR)\/bin, \\\n+      FILES := $(MSVCP_DLL), \\\n+      MACRO := copy-and-chmod-executable, \\\n+  ))\n+\n+  TARGETS += $(copy-windows-msvcp)\n+\n+  copy-windows-libs := $(copy-windows-msvcr) $(copy-windows-vcruntime) $(copy-windows-msvcp)\n+\n+  ifneq ($(UCRT_DLL_DIR), )\n+    $(eval $(call SetupCopyFiles, copy-windows-ucrt, \\\n+        DEST := $(STATIC_JDK_IMAGE_DIR)\/bin, \\\n+        SRC := $(UCRT_DLL_DIR), \\\n+        FILES := $(wildcard $(UCRT_DLL_DIR)\/*.dll), \\\n+        MACRO := copy-and-chmod-executable, \\\n+    ))\n+\n+    TARGETS += $(copy-windows-ucrt)\n+\n+    copy-windows-libs += $(copy-windows-ucrt)\n+  endif\n+endif\n@@ -203,1 +299,2 @@\n-static-jdk-image: $(copy-from-jdk-image) $(copy-static-launcher) $(copy-static-launcher-debuginfo)\n+static-jdk-image: $(copy-from-jdk-image) $(copy-static-launchers) \\\n+    $(copy-static-launchers-debuginfo) $(copy-windows-libs)\n@@ -207,1 +304,1 @@\n-.PHONY: static-launcher static-jdk-image\n+.PHONY: static-launchers static-jdk-image\n","filename":"make\/StaticLibs.gmk","additions":107,"deletions":10,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -77,0 +77,7 @@\n+  # Record the fact that this launcher is part of the current module. This\n+  # variable stores information about all created launchers, and is read by\n+  # ModuleWrapper.\n+  $$(MODULE)_INCLUDED_LAUNCHERS += $1\n+\n+  $1_RELAUNCHER_ARGUMENTS :=\n+\n@@ -82,2 +89,6 @@\n-  ifeq ($$($1_EXPAND_CLASSPATH_WILDCARDS), true)\n-    $1_CFLAGS += -DEXPAND_CLASSPATH_WILDCARDS\n+  ifeq ($$($1_ENABLE_ARG_FILES), true)\n+    $1_CFLAGS += -DDISABLE_ARGFILE=JNI_FALSE\n+  else\n+    $1_CFLAGS += -DDISABLE_ARGFILE=JNI_TRUE\n+    # This must be the first argument given, if it should be present\n+    $1_RELAUNCHER_ARGUMENTS += -DjavaLauncherArgFiles=false\n@@ -86,2 +97,5 @@\n-  ifeq ($$($1_ENABLE_ARG_FILES), true)\n-    $1_CFLAGS += -DENABLE_ARG_FILES\n+  ifeq ($$($1_EXPAND_CLASSPATH_WILDCARDS), true)\n+    $1_CFLAGS += -DCLASSPATH_WILDCARDS=JNI_TRUE\n+  else\n+    $1_CFLAGS += -DCLASSPATH_WILDCARDS=JNI_FALSE\n+    $1_RELAUNCHER_ARGUMENTS += -DjavaLauncherWildcards=false\n@@ -90,0 +104,2 @@\n+  $1_RELAUNCHER_ARGUMENTS += -DjavaLauncherProgname=$1\n+\n@@ -97,2 +113,4 @@\n-    $1_JAVA_ARGS_STR := '{ $$(strip $$(foreach a, \\\n-        $$(addprefix -J, $$($1_JAVA_ARGS)) $$($1_LAUNCHER_CLASS), \"$$a\"$(COMMA) )) }'\n+    $1_PREFIXED_JAVA_ARGS := $$(addprefix -J, $$($1_JAVA_ARGS)) \\\n+        $$($1_LAUNCHER_CLASS)\n+    $1_JAVA_ARGS_STR := '{ $$(strip $$(foreach a, $$($1_PREFIXED_JAVA_ARGS), \\\n+        \"$$a\"$(COMMA) )) }'\n@@ -100,0 +118,3 @@\n+    # To preserve spaces, substitute them with a hopefully unique pattern\n+    $1_RELAUNCHER_ARGUMENTS += \\\n+        -DjavaLauncherArgs=$$(subst $$(SPACE),||||,$$($1_PREFIXED_JAVA_ARGS))\n@@ -175,0 +196,14 @@\n+\n+  $1_RELAUNCHER_ARGUMENTS_FILE := \\\n+      $$(SUPPORT_OUTPUTDIR)\/static-native\/relaunchers\/$$(MODULE)\/$1-relauncher-arguments.txt\n+\n+  $1_VARDEPS := $$($1_RELAUNCHER_ARGUMENTS)\n+  $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n+      $$($1_RELAUNCHER_ARGUMENTS_FILE).vardeps)\n+\n+  $$($1_RELAUNCHER_ARGUMENTS_FILE):\n+\t$$(call MakeDir, $$(@D))\n+\t$$(ECHO) '$$($1_RELAUNCHER_ARGUMENTS)' > $$@\n+\n+  $1 += $$($1_RELAUNCHER_ARGUMENTS_FILE)\n+\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":41,"deletions":6,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-      SRC := $(TOPDIR)\/src\/$(MODULE)\/unix\/native\/launcher, \\\n+      EXTRA_FILES := $(TOPDIR)\/src\/$(MODULE)\/unix\/native\/launcher\/jexec.c, \\\n","filename":"make\/modules\/java.base\/Launcher.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef _DEFINES_H\n-#define _DEFINES_H\n-\n-#include \"java.h\"\n-\n-#define STR_HELPER(x) #x\n-#define STR(x) STR_HELPER(x)\n-\n-\/*\n- * This file contains commonly defined constants used only by main.c\n- * and should not be included by another file.\n- *\/\n-#ifndef VERSION_STRING\n-\/* make sure the compilation fails *\/\n-#error \"VERSION_STRING must be defined\"\n-#endif\n-\n-\/* Unused, but retained for JLI_Launch compatibility*\/\n-#define DOT_VERSION \"0.0\"\n-\n-#ifdef JAVA_ARGS\n-#ifdef PROGNAME\n-static const char* const_progname = PROGNAME;\n-#else\n-static char* const_progname = NULL;\n-#endif\n-static const char* const_jargs[] = JAVA_ARGS;\n-#else  \/* !JAVA_ARGS *\/\n-static const char* const_progname = \"java\";\n-static const char** const_jargs = NULL;\n-#endif \/* JAVA_ARGS *\/\n-\n-#ifdef LAUNCHER_NAME\n-static const char* const_launcher = LAUNCHER_NAME;\n-#else  \/* LAUNCHER_NAME *\/\n-static char* const_launcher = NULL;\n-#endif \/* LAUNCHER_NAME *\/\n-\n-#ifdef EXPAND_CLASSPATH_WILDCARDS\n-static const jboolean const_cpwildcard = JNI_TRUE;\n-#else\n-static const jboolean const_cpwildcard = JNI_FALSE;\n-#endif \/* EXPAND_CLASSPATH_WILDCARDS *\/\n-\n-#ifdef ENABLE_ARG_FILES\n-static const jboolean const_disable_argfile = JNI_FALSE;\n-#else\n-static const jboolean const_disable_argfile = JNI_TRUE;\n-#endif\n-#endif \/*_DEFINES_H *\/\n","filename":"src\/java.base\/share\/native\/launcher\/defines.h","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-#include \"defines.h\"\n+#include \"java.h\"\n@@ -37,0 +37,46 @@\n+\/\/ Unused, but retained for JLI_Launch compatibility\n+#define DOT_VERSION \"0.0\"\n+\n+\/\/ This is reported when requesting a full version\n+static char* launcher = LAUNCHER_NAME;\n+\n+\/\/ This is used as the name of the executable in the help message\n+static char* progname = PROGNAME;\n+\n+#ifdef JAVA_ARGS\n+static const char* jargs[] = JAVA_ARGS;\n+#else\n+static const char** jargs = NULL;\n+#endif\n+static int jargc;\n+\n+static jboolean cpwildcard = CLASSPATH_WILDCARDS;\n+static jboolean disable_argfile = DISABLE_ARGFILE;\n+\n+#ifdef STATIC_BUILD\n+static void check_relauncher_argument(char* arg) {\n+    if (strcmp(arg, \"-J-DjavaLauncherWildcards=false\") == 0) {\n+        cpwildcard = JNI_FALSE;\n+    }\n+    if (strncmp(arg, \"-J-DjavaLauncherProgname=\", 26) == 0) {\n+        progname = arg + 26;\n+    }\n+    if (strncmp(arg, \"-J-DjavaLauncherArgs=\", 21) == 0) {\n+        char* java_args_ptr = arg + 21;\n+        size_t java_args_len = strlen(arg) - 21;\n+\n+        JLI_List java_args = JLI_List_new(java_args_len);\n+        char* next_space;\n+        while ((next_space = strchr(java_args_ptr, ' ')) != NULL) {\n+            size_t next_arg_len = next_space - java_args_ptr;\n+            JLI_List_addSubstring(java_args, java_args_ptr, next_arg_len);\n+            java_args_ptr = next_space + 1;\n+        }\n+        JLI_List_add(java_args, java_args_ptr);\n+\n+        jargc = (int) java_args->size;\n+        jargs = (const char**) java_args->elements;\n+    }\n+}\n+#endif\n+\n@@ -47,1 +93,1 @@\n-    const jboolean const_javaw = JNI_TRUE;\n+    const jboolean javaw = JNI_TRUE;\n@@ -55,1 +101,1 @@\n-    const jboolean const_javaw = JNI_FALSE;\n+    const jboolean javaw = JNI_FALSE;\n@@ -60,2 +106,0 @@\n-    int jargc;\n-    const char** jargv = const_jargs;\n@@ -63,2 +107,2 @@\n-    jargc = (sizeof(const_jargs) \/ sizeof(char *)) > 1\n-        ? sizeof(const_jargs) \/ sizeof(char *)\n+    jargc = (sizeof(jargs) \/ sizeof(char *)) > 1\n+        ? sizeof(jargs) \/ sizeof(char *)\n@@ -67,1 +111,9 @@\n-    JLI_InitArgProcessing(jargc > 0, const_disable_argfile);\n+#ifdef STATIC_BUILD\n+        \/\/ Relaunchers always give -J-DjavaLauncherArgFiles as the first argument, if present\n+        \/\/ We must check disable_argfile before calling JLI_InitArgProcessing.\n+        if (argc > 1 && strcmp(argv[1], \"-J-DjavaLauncherArgFiles=false\") == 0) {\n+            disable_argfile = JNI_TRUE;\n+        }\n+#endif\n+\n+    JLI_InitArgProcessing(jargc > 0, disable_argfile);\n@@ -106,0 +158,3 @@\n+#ifdef STATIC_BUILD\n+            check_relauncher_argument(margv[i]);\n+#endif\n@@ -130,0 +185,3 @@\n+#ifdef STATIC_BUILD\n+            check_relauncher_argument(argv[i]);\n+#endif\n@@ -151,1 +209,1 @@\n-                   jargc, jargv,\n+                   jargc, jargs,\n@@ -155,2 +213,2 @@\n-                   (const_progname != NULL) ? const_progname : *margv,\n-                   (const_launcher != NULL) ? const_launcher : *margv,\n+                   progname,\n+                   launcher,\n@@ -158,1 +216,1 @@\n-                   const_cpwildcard, const_javaw, 0);\n+                   cpwildcard, javaw, 0);\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":71,"deletions":13,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <libgen.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#define JAVA_EXECUTABLE_NAME \"java\"\n+\n+#ifndef LAUNCHER_ARGS\n+#error LAUNCHER_ARGS must be defined\n+#endif\n+\n+static char *launcher_args[] = LAUNCHER_ARGS;\n+\n+int main(int argc, char *argv[]) {\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Create a fully qualified path to the java executable in the same\n+    \/\/ directory as this file resides in.\n+\n+    char *our_full_path = realpath(argv[0], NULL);\n+    if (our_full_path == NULL) {\n+        perror(\"failed to get the full path of the executable\");\n+        return 1;\n+    }\n+\n+    char *last_slash_pos = strrchr(our_full_path, '\/');\n+    if (last_slash_pos == NULL) {\n+        fprintf(stderr, \"no '\/' found in the full path of the executable\\n\");\n+        return 1;\n+    }\n+\n+    size_t base_length = last_slash_pos - our_full_path + 1;\n+    size_t java_path_length = base_length + strlen(JAVA_EXECUTABLE_NAME) + 1;\n+\n+    char *java_path = malloc(java_path_length);\n+    if (java_path == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    memcpy(java_path, our_full_path, base_length);\n+    strcpy(java_path + base_length, JAVA_EXECUTABLE_NAME);\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Build the argument list: our executable name + launcher args + users args\n+\n+    int launcher_argsc = sizeof(launcher_args) \/ sizeof(char *);\n+\n+    char **java_args = malloc((launcher_argsc + argc + 1) * sizeof(char *));\n+    if (java_args == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    \/\/ Our executable name\n+    java_args[0] = argv[0];\n+\n+    \/\/ Launcher arguments\n+    for (int i = 0; i < launcher_argsc; i++) {\n+        java_args[i + 1] = launcher_args[i];\n+    }\n+\n+    \/\/ User arguments\n+    for (int i = 1; i < argc; i++) {\n+        java_args[launcher_argsc + i] = argv[i];\n+    }\n+\n+    java_args[launcher_argsc + argc] = NULL;\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Finally execute the real java process with the constructed arguments\n+\n+    if (getenv(\"_JAVA_LAUNCHER_DEBUG\")) {\n+        char *program_name = basename(argv[0]);\n+\n+        fprintf(stderr, \"%s: executing: '%s'\", program_name, java_path);\n+        for (int i = 0; java_args[i] != NULL; i++) {\n+            fprintf(stderr, \" '%s' \", java_args[i]);\n+        }\n+        fprintf(stderr, \"\\n\");\n+    }\n+\n+    execv(java_path, java_args);\n+\n+    \/\/ Should not reach here, unless something went wrong\n+    perror(\"execv failed\");\n+    return 1;\n+}\n","filename":"src\/java.base\/unix\/native\/launcher\/relauncher.c","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -279,0 +279,3 @@\n+    \/* Compute\/set the name of the executable *\/\n+    SetExecname(*pargv);\n+\n@@ -300,3 +303,0 @@\n-    \/* Compute\/set the name of the executable *\/\n-    SetExecname(*pargv);\n-\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <shlwapi.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <windows.h>\n+\n+#define JAVA_EXECUTABLE_NAME \"java.exe\"\n+\n+#ifndef LAUNCHER_ARGS\n+#error LAUNCHER_ARGS must be defined\n+#endif\n+\n+static char* launcher_args[] = LAUNCHER_ARGS;\n+\n+char* quote_argument(char* arg) {\n+    \/\/ See https:\/\/learn.microsoft.com\/en-us\/archive\/blogs\/twistylittlepassagesallalike\/everyone-quotes-command-line-arguments-the-wrong-way\n+    \/\/ for an explanation of how to properly quote command lines for CreateProcess\n+    size_t arg_length = strlen(arg);\n+\n+    if (strcspn(arg, \" \\t\\n\\v\\\"\") == arg_length) {\n+        \/\/ No quoting is needed\n+        return arg;\n+    }\n+\n+    \/\/ Worst-case buffer size: all characters need a backslash, and starting + end quotes\n+    size_t buffer_size = arg_length * 2 + 3;\n+    char* buffer = malloc(buffer_size);\n+    if (buffer == NULL) {\n+        return NULL;\n+    }\n+\n+    int backslashes = 0;\n+    char* write_pos = buffer;\n+    char* read_pos = arg;\n+\n+    \/\/ Start with a quote character\n+    *write_pos++ = '\"';\n+\n+    while (*read_pos) {\n+        while (*read_pos == '\\\\') {\n+            read_pos++;\n+            backslashes++;\n+        }\n+\n+        if (*read_pos == '\"') {\n+            \/\/ Any potential backslashes before a quote needs to be doubled,\n+            \/\/ and the quote needs to be escaped with an additional backslash\n+            for (int i = 0; i < backslashes * 2 + 1; i++) {\n+                *write_pos++ = '\\\\';\n+            }\n+            *write_pos++ = *read_pos++;\n+            backslashes = 0;\n+        } else {\n+            \/\/ Backslashes not preceeding a quote is copied without escaping\n+            for (int i = 0; i < backslashes; i++) {\n+                *write_pos++ = '\\\\';\n+            }\n+            if (*read_pos) {\n+                *write_pos++ = *read_pos++;\n+                backslashes = 0;\n+            }\n+        }\n+    }\n+\n+    \/\/ If the string ended with backslashes, they need to be doubled before\n+    \/\/ the final quote character\n+    for (int i = 0; i < backslashes; i++) {\n+        *write_pos++ = '\\\\';\n+    }\n+    *write_pos++ = '\"';\n+    *write_pos = '\\0';\n+\n+    return buffer;\n+}\n+\n+int main(int argc, char* argv[]) {\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Create a fully qualified path to the java executable in the same\n+    \/\/ directory as this file resides in.\n+\n+    \/\/ Calculate path length first\n+    DWORD our_full_path_len = GetFullPathName(argv[0], 0, NULL, NULL);\n+    if (our_full_path_len == 0) {\n+        fprintf(stderr, \"failed to get the full path of the executable: %lu\\n\", GetLastError());\n+        return 1;\n+    }\n+\n+    char* our_full_path = malloc(our_full_path_len + 1);\n+    if (our_full_path == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    if (GetFullPathName(argv[0], our_full_path_len + 1, our_full_path, NULL) == 0) {\n+        fprintf(stderr, \"failed to get the full path of the executable: %lu\\n\", GetLastError());\n+        return 1;\n+    }\n+\n+    char *last_slash_pos = strrchr(our_full_path, '\\\\');\n+    if (last_slash_pos == NULL) {\n+        fprintf(stderr, \"no '\\\\' found in the full path of the executable\\n\");\n+        return 1;\n+    }\n+\n+    size_t base_length = last_slash_pos - our_full_path + 1;\n+    size_t java_path_length = base_length + strlen(JAVA_EXECUTABLE_NAME) + 1;\n+\n+    char *java_path = malloc(java_path_length);\n+    if (java_path == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    memcpy(java_path, our_full_path, base_length);\n+    strcpy(java_path + base_length, JAVA_EXECUTABLE_NAME);\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Build the argument list: our executable name + launcher args + users args\n+\n+    int launcher_argsc = sizeof(launcher_args) \/ sizeof(char *);\n+\n+    char **java_args = malloc((launcher_argsc + argc + 1) * sizeof(char *));\n+    if (java_args == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    \/\/ Our executable name (should not be quoted)\n+    java_args[0] = argv[0];\n+\n+    \/\/ Launcher arguments\n+    for (int i = 0; i < launcher_argsc; i++) {\n+        char* quoted = quote_argument(launcher_args[i]);\n+        if (quoted == NULL) {\n+            perror(\"malloc failed\");\n+            return 1;\n+        }\n+        java_args[i + 1] = quoted;\n+    }\n+\n+    \/\/ User arguments\n+    for (int i = 1; i < argc; i++) {\n+        char* quoted = quote_argument(argv[i]);\n+        if (quoted == NULL) {\n+            perror(\"malloc failed\");\n+            return 1;\n+        }\n+        java_args[launcher_argsc + i] = quoted;\n+    }\n+\n+    java_args[launcher_argsc + argc] = NULL;\n+\n+    \/\/ Windows needs the command line as a single string, not as an array of char*\n+    size_t total_length = 0;\n+    for (int i = 0; java_args[i] != NULL; i++) {\n+        char* arg = java_args[i];\n+        total_length += strlen(java_args[i]) + 1;\n+    }\n+\n+    char* command_line = malloc(total_length);\n+    if (command_line == NULL) {\n+        perror(\"malloc failed\");\n+        return 1;\n+    }\n+\n+    \/\/ Concatenate the quoted arguments with a space between them\n+    char* write_pos = command_line;\n+    for (int i = 0; java_args[i] != NULL; i++) {\n+        size_t arg_len = strlen(java_args[i]);\n+        memcpy(write_pos, java_args[i], arg_len);\n+        write_pos += arg_len;\n+\n+        \/\/ Append a space\n+        *write_pos++ = ' ';\n+    }\n+\n+    \/\/ Replace the last space with a null terminator\n+    write_pos--;\n+    *write_pos = '\\0';\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ Finally execute the real java process with the constructed arguments\n+\n+    if (GetEnvironmentVariable(\"_JAVA_LAUNCHER_DEBUG\", NULL, 0)) {\n+        char *program_name = PathFindFileName(argv[0]);\n+\n+        fprintf(stderr, \"%s: executing: '%s' '%s'\\n\", program_name, java_path, command_line);\n+    }\n+\n+    STARTUPINFO si;\n+    PROCESS_INFORMATION pi;\n+\n+    memset(&si, 0, sizeof(si));\n+    memset(&pi, 0, sizeof(pi));\n+\n+    \/\/ Windows has no equivalent of exec, so start the process and wait for it\n+    \/\/ to finish, to be able to return the same exit code\n+    if (!CreateProcess(java_path, command_line, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {\n+        fprintf(stderr, \"CreateProcess failed: %lu\\n\", GetLastError());\n+        return 1;\n+    }\n+\n+    if (WaitForSingleObject(pi.hProcess, INFINITE) == WAIT_FAILED) {\n+        fprintf(stderr, \"WaitForSingleObject failed: %lu\\n\", GetLastError());\n+        return 1;\n+    }\n+\n+    DWORD exit_code;\n+    if (!GetExitCodeProcess(pi.hProcess, &exit_code)) {\n+        fprintf(stderr, \"GetExitCodeProcess failed: %lu\\n\", GetLastError());\n+        return 1;\n+    }\n+    CloseHandle(pi.hProcess);\n+    CloseHandle(pi.hThread);\n+\n+    return exit_code;\n+}\n","filename":"src\/java.base\/windows\/native\/launcher\/relauncher.c","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"},{"patch":"@@ -1,35 +0,0 @@\n-# Require javac\n-runtime\/HiddenClasses\/DefineHiddenClass.java            8346719 generic-all\n-\n-# Require jstack\n-runtime\/Thread\/TestThreadDumpClassInitMonitor.java      8346719 generic-all\n-runtime\/Thread\/TestThreadDumpSMRInfo.java               8346719 generic-all\n-serviceability\/tmtools\/jstack\/DaemonThreadTest.java     8346719 generic-all\n-serviceability\/tmtools\/jstack\/JstackThreadTest.java     8346719 generic-all\n-serviceability\/tmtools\/jstack\/SpreadLockTest.java       8346719 generic-all\n-serviceability\/tmtools\/jstack\/ThreadNamesTest.java      8346719 generic-all\n-serviceability\/tmtools\/jstack\/TraveledLockTest.java     8346719 generic-all\n-serviceability\/tmtools\/jstack\/WaitNotifyThreadTest.java 8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcCapacityTest.java        8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcCauseTest01.java         8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcCauseTest02.java         8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcCauseTest03.java         8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcNewTest.java             8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcTest01.java              8346719 generic-all\n-serviceability\/tmtools\/jstat\/GcTest02.java              8346719 generic-all\n-\n-# Require jcmd\n-serviceability\/HeapDump\/DuplicateArrayClassesTest.java  8346719 generic-all\n-serviceability\/HeapDump\/FieldsInInstanceTest.java       8346719 generic-all\n-serviceability\/attach\/ConcAttachTest.java               8346719 generic-all\n-serviceability\/attach\/RemovingUnixDomainSocketTest.java 8346719 generic-all\n-serviceability\/jvmti\/vthread\/HeapDump\/VThreadInHeapDump.java#default            8346719 generic-all\n-serviceability\/jvmti\/vthread\/HeapDump\/VThreadInHeapDump.java#no-vmcontinuations 8346719 generic-all\n-\n-# Require jhsdb\n-serviceability\/sa\/ClhsdbCDSCore.java                    8346719 generic-all\n-serviceability\/sa\/ClhsdbFindPC.java#no-xcomp-core       8346719 generic-all\n-serviceability\/sa\/ClhsdbFindPC.java#xcomp-core          8346719 generic-all\n-serviceability\/sa\/ClhsdbPmap.java#core                  8346719 generic-all\n-serviceability\/sa\/ClhsdbPstack.java#core                8346719 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList-StaticJdk.txt","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,3 +1,24 @@\n-# Require jarsigner\n-java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/SignedLoggerFinderTest.java 8346719 generic-all\n-java\/util\/jar\/JarFile\/jarVerification\/MultiProviderTest.java                     8346719 generic-all\n+###########################################################################\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+###########################################################################\n@@ -5,10 +26,1 @@\n-# Require jar\n-java\/lang\/System\/MacEncoding\/TestFileEncoding.java                               8346719 generic-all\n-java\/util\/ResourceBundle\/modules\/basic\/BasicTest.java                            8346719 generic-all\n-\n-# Require javac\n-java\/util\/ResourceBundle\/modules\/layer\/LayerTest.java                            8346719 generic-all\n-java\/util\/ResourceBundle\/modules\/unnamed\/UnNamedTest.java                        8346719 generic-all\n-\n-# Require jps\n-java\/util\/concurrent\/locks\/Lock\/TimedAcquireLeak.java                            8346719 generic-all\n+# Currently empty\n","filename":"test\/jdk\/ProblemList-StaticJdk.txt","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,8 +1,24 @@\n-# Requires javadoc\n-jdk\/javadoc\/tool\/6964914\/TestStdDoclet.java                                8346719 generic-all\n-jdk\/javadoc\/tool\/6964914\/TestUserDoclet.java                               8346719 generic-all\n-jdk\/javadoc\/tool\/AddOpensTest.java                                         8346719 generic-all\n-jdk\/javadoc\/tool\/EncodingTest.java                                         8346719 generic-all\n-jdk\/javadoc\/tool\/EnsureNewOldDoclet.java                                   8346719 generic-all\n-jdk\/javadoc\/tool\/QuietOption.java                                          8346719 generic-all\n-jdk\/javadoc\/tool\/testLocaleOption\/TestLocaleOption.java                    8346719 generic-all\n+###########################################################################\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+###########################################################################\n@@ -10,20 +26,1 @@\n-# Requires javac\n-tools\/javac\/ClassPathTest\/ClassPathTest.java                               8346719 generic-all\n-tools\/javac\/Paths\/ClassPath.java                                           8346719 generic-all\n-tools\/javac\/Paths\/WildcardMineField.java                                   8346719 generic-all\n-tools\/javac\/T8132562\/ClassPathWithDoubleQuotesTest.java                    8346719 generic-all\n-tools\/javac\/file\/MultiReleaseJar\/MultiReleaseJarTest.java                  8346719 generic-all\n-tools\/javac\/modules\/AllDefaultTest.java                                    8346719 generic-all\n-tools\/javac\/modules\/EnvVarTest.java                                        8346719 generic-all\n-tools\/javac\/modules\/InheritRuntimeEnvironmentTest.java                     8346719 generic-all\n-tools\/javac\/modules\/NPEEmptyFileTest.java                                  8346719 generic-all\n-tools\/javac\/newlines\/NewLineTest.java                                      8346719 generic-all\n-tools\/javac\/options\/smokeTests\/OptionSmokeTest.java                        8346719 generic-all\n-tools\/javac\/platform\/PlatformProviderTest.java                             8346719 generic-all\n-tools\/javac\/processing\/options\/testPrintProcessorInfo\/TestWithXstdout.java 8346719 generic-all\n-\n-# Requires jar\n-tools\/jdeps\/MultiReleaseJar.java                                           8346719 generic-all\n-\n-# Requires jimage\n-tools\/javac\/Paths\/MineField.java                                           8346719 generic-all\n+# Currently empty\n","filename":"test\/langtools\/ProblemList-StaticJdk.txt","additions":25,"deletions":28,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1,2 +1,26 @@\n-# Requires jcmd\n-jdk\/test\/lib\/hprof\/HprofTest.java   8346719 generic-all\n+###########################################################################\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+###########################################################################\n+\n+# Currently empty\n","filename":"test\/lib-test\/ProblemList-StaticJdk.txt","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"}]}