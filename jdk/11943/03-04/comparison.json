{"files":[{"patch":"@@ -48,0 +48,3 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -596,1 +599,2 @@\n-        return new ImageHelper(cf, mods, config.getByteOrder(), retainModulesPath, ignoreSigning);\n+        return new ImageHelper(cf, mods, config.getByteOrder(), retainModulesPath, ignoreSigning,\n+                verbose, log);\n@@ -815,1 +819,3 @@\n-                    boolean ignoreSigning) throws IOException {\n+                    boolean ignoreSigning,\n+                    boolean verbose,\n+                    PrintWriter log) throws IOException {\n@@ -819,5 +825,14 @@\n-                \/\/ Use the java.base module of the target platform to determine the endianness\n-                \/\/ of the target image\n-                String targetPlatform = null;\n-                Optional<ResolvedModule> javaBase = cf.findModule(\"java.base\");\n-                if (javaBase.isPresent()) {\n+                Path javaBasePath = modsPaths.get(\"java.base\");\n+                assert javaBasePath != null : \"java.base module path is missing\";\n+                if (this.isJavaBaseFromCurrentPlatform(javaBasePath)) {\n+                    \/\/ this implies that the java.base module used for the target image\n+                    \/\/ will correspond to the current platform. So this isn't an attempt to\n+                    \/\/ build a cross-platform image. We use the current platform's endianness\n+                    \/\/ in this case\n+                    this.order = ByteOrder.nativeOrder();\n+                } else {\n+                    \/\/ this is an attempt to build a cross-platform image. We now attempt to\n+                    \/\/ find the target platform's arch and thus its endianness from the java.base\n+                    \/\/ module's ModuleTarget attribute\n+                    Optional<ResolvedModule> javaBase = cf.findModule(\"java.base\");\n+                    assert javaBase.isPresent() : \"java.base module is missing\";\n@@ -825,0 +840,1 @@\n+                    String targetPlatform = null;\n@@ -829,5 +845,17 @@\n-                }\n-                if (targetPlatform != null) {\n-                    this.order = getNativeEndianOfTargetPlatform(targetPlatform);\n-                } else {\n-                    this.order = ByteOrder.nativeOrder();\n+                    if (targetPlatform == null) {\n+                        \/\/ could not determine target platform\n+                        throw new IOException(\n+                                taskHelper.getMessage(\"err.cannot.determine.target.platform\"));\n+                    }\n+                    ByteOrder targetByteOrder = getNativeEndianOfTargetPlatform(targetPlatform);\n+                    if (targetByteOrder == null) {\n+                        \/\/ unsupported target platform\n+                        throw new IOException(\n+                                taskHelper.getMessage(\"err.unsupported.target.platform\",\n+                                        targetPlatform));\n+                    }\n+                    this.order = targetByteOrder;\n+                    if (verbose && log != null) {\n+                        log.format(\"Cross-platform image generation, using %s for target platform\" +\n+                                        \" %s%n\", this.order, targetPlatform);\n+                    }\n@@ -854,0 +882,22 @@\n+        \/\/ returns true if the current platform's \"jmods\" directory is the parent of the\n+        \/\/ passed javaBasePath\n+        private boolean isJavaBaseFromCurrentPlatform(Path javaBasePath) throws IOException {\n+            Path currentPlatformJmods = getDefaultModulePath();\n+            if (currentPlatformJmods == null) {\n+                return false;\n+            }\n+            boolean ret;\n+            try {\n+                @SuppressWarnings(\"removal\")\n+                var unused = ret = AccessController.doPrivileged(\n+                        \/\/ check if the current platform's \"jmods\" directory is the parent of\n+                        \/\/ the \"java.base\" module file used to create the image\n+                        (PrivilegedExceptionAction<Boolean>) () -> Files.isSameFile(javaBasePath,\n+                                currentPlatformJmods.resolve(Path.of(\"java.base.jmod\"))));\n+            } catch (PrivilegedActionException e) {\n+                \/\/ Files.isSameFile() is only expected to throw an IOException\n+                throw (IOException) e.getCause();\n+            }\n+            return ret;\n+        }\n+\n@@ -907,2 +957,2 @@\n-        \/\/ returns the endianness of the target platform, if known. Else returns the\n-        \/\/ current platform's endianness\n+        \/\/ returns the endianness of the target platform, if the target platform is known\n+        \/\/ and supported for creating an image through jlink. Else returns null.\n@@ -912,2 +962,2 @@\n-                \/\/ unknown arch, return current platform's endianness\n-                return ByteOrder.nativeOrder();\n+                \/\/ unknown arch\n+                return null;\n@@ -918,9 +968,5 @@\n-                        \"alpha\", \"amd64\",\n-                        \"arm\", \"aarch64\",\n-                        \"ia64\", \"mipsel\",\n-                        \"mips64el\", \"loongarch64\",\n-                        \"ppc64le\", \"riscv32\", \"riscv64\" -> ByteOrder.LITTLE_ENDIAN;\n-                case \"m68k\", \"mips\",\n-                        \"mips64\", \"ppc\",\n-                        \"ppc64\", \"s390\",\n-                        \"s390x\", \"sh\",\n+                        \"amd64\", \"arm\", \"aarch64\",\n+                        \"loongarch64\", \"ppc64le\",\n+                        \"riscv32\", \"riscv64\" -> ByteOrder.LITTLE_ENDIAN;\n+                case \"ppc\", \"ppc64\",\n+                        \"s390\", \"s390x\",\n@@ -928,1 +974,1 @@\n-                default -> ByteOrder.nativeOrder();\n+                default -> null;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":72,"deletions":26,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,0 +151,2 @@\n+err.cannot.determine.target.platform=cannot determine target platform for image generation\n+err.unsupported.target.platform=image generation for target platform {0} is not supported\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}