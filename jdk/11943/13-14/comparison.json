{"files":[{"patch":"@@ -50,12 +50,1 @@\n-        Properties endianness = new Properties();\n-        for (String key : p.stringPropertyNames()) {\n-            if (key.endsWith(ENDIANNESS_KEY_SUFFIX)) {\n-                String val = p.getProperty(key);\n-                String platform = key.substring(0, key.indexOf(ENDIANNESS_KEY_SUFFIX));\n-                if (platform.isEmpty()) {\n-                    throw new InternalError(\"Incorrect key '\" + key + \"'\");\n-                }\n-                endianness.put(platform, val);\n-            }\n-        }\n-        KNOWN_ENDIANNESS = endianness;\n+        KNOWN_ENDIANNESS = p;\n@@ -112,1 +101,1 @@\n-        String v = KNOWN_ENDIANNESS.getProperty(platformString);\n+        String v = KNOWN_ENDIANNESS.getProperty(platformString + ENDIANNESS_KEY_SUFFIX);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Platform.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -65,1 +68,1 @@\n-        var image = helper.generateDefaultImage(new String[] { \"--generate-cds-archive\" },\n+        Path image = helper.generateDefaultImage(new String[] { \"--generate-cds-archive\" },\n@@ -90,2 +93,18 @@\n-           String[] cmd = {jlinkPath, \"--add-modules\", \"java.base,java.logging\",\n-                           \"-J-Dos.name=windows\", \"--generate-cds-archive\",\n+           \/\/ copy over the java.base and java.logging module file to a temporary directory\n+           \/\/ which we then use as a --module-path during jlink image generation. using such a\n+           \/\/ separate --module-path will force the JLink task to read the ModuleTarget from\n+           \/\/ the java.base module-info.class to identify the target platform for the image\n+           \/\/ being generated.\n+           Path jdkRoot = Path.of(jlinkPath).getParent().getParent();\n+           Path modsPath = Files.createDirectory(Path.of(\"mods\"));\n+           copyModuleFiles(jdkRoot, modsPath, new String[] {\"java.base\", \"java.logging\"});\n+           String[] cmd = {jlinkPath, \"--verbose\",\n+                           \"--add-modules\", \"java.base,java.logging\",\n+                           \/\/ java.base in a custom module path will ensure the ModuleTarget\n+                           \/\/ attribute in module-info.class is parsed and target platform is\n+                           \/\/ inferred as a linux-*\n+                           \"--module-path\", modsPath.toString(),\n+                           \"-J-Dos.name=windows\", \/\/ simulate current platform as windows\n+                           \/\/ enable the CDSPlugin, which, during the processing is then expected\n+                           \/\/ to throw an exception because of current and target platform mismatch\n+                           \"--generate-cds-archive\",\n@@ -105,0 +124,16 @@\n+\n+    private static void copyModuleFiles(Path jdkRoot, Path targetDir, String[] modules)\n+            throws IOException {\n+        for (String module : modules) {\n+            Path moduleFile = jdkRoot.resolve(\"jmods\").resolve(module + \".jmod\");\n+            if (!Files.exists(moduleFile)) {\n+                throw new AssertionError(\"Missing \" + moduleFile);\n+            }\n+            Path copy = targetDir.resolve(moduleFile.getFileName());\n+            Files.copy(moduleFile, copy);\n+            if (!Files.exists(copy)) {\n+                throw new AssertionError(\"Could not copy '\" + module\n+                        + \"' module file to directory: \" + targetDir);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":39,"deletions":4,"binary":false,"changes":43,"status":"modified"}]}