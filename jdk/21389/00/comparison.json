{"files":[{"patch":"@@ -330,3 +330,5 @@\n-  } else if (_id == load_mirror_id) {\n-    \/\/ produce a copy of the load mirror instruction for use by the being\n-    \/\/ initialized case\n+  } else if (_id == load_mirror_id || _id == load_appendix_id) {\n+    \/\/ Produce a copy of the load mirror \/ appendix instruction.\n+    \/\/ 8-byte align the address of the oop immediate to guarantee atomicity\n+    \/\/ when patching since the GC might walk nmethod oops concurrently.\n+    __ align(8, __ offset() + NativeMovConstReg::data_offset_rex);\n@@ -413,1 +415,1 @@\n-    case load_appendix_id:      target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id: target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -890,1 +890,1 @@\n-\/\/ patch_stub: jmp Runtim1::patch_code (through a runtime stub)\n+\/\/ patch_stub: jmp Runtime1::patch_code (through a runtime stub)\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+\n+\/**\n+  * @test\n+  * @bug 8340313\n+  * @summary Test that concurrent patching of oop immediates is thread-safe in C1.\n+  * @run main\/othervm\/timeout=480 -Xcomp -XX:CompileCommand=compileonly,TestConcurrentPatching::* -XX:TieredStopAtLevel=1 TestConcurrentPatching\n+  *\/\n+\n+class MyClass { }\n+\n+class Holder {\n+    public static final MyClass OBJ1 = null;\n+    public static final MyClass OBJ2 = null;\n+    public static final MyClass OBJ3 = null;\n+    public static final MyClass OBJ4 = null;\n+    public static final MyClass OBJ5 = null;\n+    public static final MyClass OBJ6 = null;\n+    public static final MyClass OBJ7 = null;\n+    public static final MyClass OBJ8 = null;\n+    public static final MyClass OBJ9 = null;\n+    public static final MyClass OBJ10 = null;\n+    public static final MyClass OBJ11 = null;\n+    public static final MyClass OBJ12 = null;\n+    public static final MyClass OBJ13 = null;\n+    public static final MyClass OBJ14 = null;\n+    public static final MyClass OBJ15 = null;\n+    public static final MyClass OBJ16 = null;\n+    public static final MyClass OBJ17 = null;\n+    public static final MyClass OBJ18 = null;\n+    public static final MyClass OBJ19 = null;\n+    public static final MyClass OBJ20 = null;\n+}\n+\n+public class TestConcurrentPatching {\n+    \/\/ Increase to 100_000 for a good chance of reproducing the issue with a single run\n+    static final int ITERATIONS = 10_000;\n+\n+    static Object field;\n+\n+    \/\/ 'Holder' class is unloaded on first execution and therefore field\n+    \/\/ accesses require patching when the method is C1 compiled (with -Xcomp).\n+    public static void test() {\n+        field = Holder.OBJ1;\n+        field = Holder.OBJ2;\n+        field = Holder.OBJ3;\n+        field = Holder.OBJ4;\n+        field = Holder.OBJ5;\n+        field = Holder.OBJ6;\n+        field = Holder.OBJ7;\n+        field = Holder.OBJ8;\n+        field = Holder.OBJ9;\n+        field = Holder.OBJ10;\n+        field = Holder.OBJ11;\n+        field = Holder.OBJ12;\n+        field = Holder.OBJ13;\n+        field = Holder.OBJ14;\n+        field = Holder.OBJ15;\n+        field = Holder.OBJ16;\n+        field = Holder.OBJ17;\n+        field = Holder.OBJ18;\n+        field = Holder.OBJ19;\n+        field = Holder.OBJ20;\n+    }\n+\n+    \/\/ Appendix of invokedynamic call sites is unloaded on first execution and\n+    \/\/ therefore requires patching when the method is C1 compiled (with -Xcomp).\n+    public static void testIndy() throws Throwable {\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+          field = (Runnable) () -> { };\n+    }\n+\n+    \/\/ Run 'test' by multiple threads to trigger concurrent patching of field accesses\n+    static void runWithThreads(Method method) {\n+        ArrayList<Thread> threads = new ArrayList<>();\n+        for (int threadIdx = 0; threadIdx < 10; threadIdx++) {\n+            threads.add(new Thread(() -> {\n+                try {\n+                    method.invoke(null);\n+                } catch (Exception e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }));\n+        }\n+        threads.forEach(Thread::start);\n+        threads.forEach(t -> {\n+            try {\n+                t.join();\n+            } catch (Throwable e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Class<?> thisClass = TestConcurrentPatching.class;\n+        ClassLoader defaultLoader = thisClass.getClassLoader();\n+        URL classesDir = thisClass.getProtectionDomain().getCodeSource().getLocation();\n+\n+        \/\/ Load the test class multiple times with a separate class loader to make sure\n+        \/\/ that the 'Holder' class is unloaded for each compilation of method 'test'\n+        \/\/ and that the appendix of the invokedynamic call site is unloaded for each\n+        \/\/ compilation of method 'testIndy'.\n+        for (int i = 0; i < ITERATIONS; ++i) {\n+            URLClassLoader myLoader = URLClassLoader.newInstance(new URL[] {classesDir}, defaultLoader.getParent());\n+            Class<?> testClass = Class.forName(thisClass.getCanonicalName(), true, myLoader);\n+            runWithThreads(testClass.getDeclaredMethod(\"test\"));\n+            runWithThreads(testClass.getDeclaredMethod(\"testIndy\"));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestConcurrentPatching.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}