{"files":[{"patch":"@@ -81,1 +81,1 @@\n-  assert((Patching_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n+  assert((CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-\/\/ during code generation, where no patching lock is needed.\n+\/\/ during code generation, where no lock is needed.\n@@ -98,1 +98,1 @@\n-         (Patching_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n+         (CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-\/\/ during code generation, where no patching lock is needed.\n+\/\/ during code generation, where no lock is needed.\n@@ -221,1 +221,1 @@\n-         (Patching_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n+         (CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n@@ -389,1 +389,1 @@\n-         (Patching_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n+         (CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint()) ||\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -661,2 +661,2 @@\n-  \/\/ Bytes_after_jump cannot change, because we own the Patching_lock.\n-  assert(Patching_lock->owned_by_self(), \"must hold lock to patch instruction\");\n+  \/\/ Bytes_after_jump cannot change, because we own the CodeCache_lock.\n+  assert(CodeCache_lock->owned_by_self(), \"must hold lock to patch instruction\");\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  assert(Patching_lock->is_locked() ||\n+  assert(CodeCache_lock->is_locked() ||\n@@ -147,1 +147,1 @@\n-  assert(Patching_lock->is_locked() || SafepointSynchronize::is_at_safepoint() ||\n+  assert(CodeCache_lock->is_locked() || SafepointSynchronize::is_at_safepoint() ||\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1106,1 +1106,1 @@\n-    MutexLocker ml_patch (current, Patching_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker ml_code (current, CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -1271,3 +1271,0 @@\n-    \/\/ Keep holding the Patching_lock when walking oops because another thread\n-    \/\/ might update immediate oops in the patch body concurrently and non-atomic.\n-\n@@ -1276,9 +1273,6 @@\n-    {\n-      MutexLocker ml_code (current, CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-      nmethod* nm = CodeCache::find_nmethod(caller_frame.pc());\n-      guarantee(nm != nullptr, \"only nmethods can contain non-perm oops\");\n-\n-      \/\/ Since we've patched some oops in the nmethod,\n-      \/\/ (re)register it with the heap.\n-      Universe::heap()->register_nmethod(nm);\n-    }\n+    nmethod* nm = CodeCache::find_nmethod(caller_frame.pc());\n+    guarantee(nm != nullptr, \"only nmethods can contain non-perm oops\");\n+\n+    \/\/ Since we've patched some oops in the nmethod,\n+    \/\/ (re)register it with the heap.\n+    Universe::heap()->register_nmethod(nm);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2051,1 +2051,1 @@\n-  \/\/ Invalidate can't occur while holding the Patching lock\n+  \/\/ Invalidate can't occur while holding the NMethodState_lock\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-Mutex*   Patching_lock                = nullptr;\n@@ -236,1 +235,0 @@\n-  MUTEX_DEFN(Patching_lock                   , PaddedMutex  , nosafepoint);      \/\/ used for safepointing and code patching.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-extern Mutex*   Patching_lock;                   \/\/ a lock used to guard code patching of compiled code\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}