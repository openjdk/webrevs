{"files":[{"patch":"@@ -426,1 +426,1 @@\n-void CompilationPolicy::print_training_data_on(outputStream* st,  const char* prefix, Method* method) {\n+void CompilationPolicy::print_training_data_on(outputStream* st,  const char* prefix, Method* method, CompLevel cur_level) {\n@@ -433,0 +433,3 @@\n+    if (should_delay_standard_transition(m, cur_level, mtd)) {\n+      st->print(\"delayed, \");\n+    }\n@@ -539,1 +542,1 @@\n-    print_training_data_on(st, \"\", m);\n+    print_training_data_on(st, \"\", m, level);\n@@ -541,1 +544,1 @@\n-      print_training_data_on(st, \"inlinee \", im);\n+      print_training_data_on(st, \"inlinee \", im, level);\n@@ -1156,1 +1159,1 @@\n-    \/\/ The method was a part of a level 4 compile, but don't have a stored profile,\n+    \/\/ The method was a part of a level 4 compile, but doesn't have a stored profile,\n@@ -1311,1 +1314,1 @@\n-      next_level = standard_transition<Predicate>(method, cur_level, false \/*delay_profiling*\/, disable_feedback);\n+      next_level = standard_transition<Predicate>(method, cur_level, disable_feedback);\n@@ -1314,1 +1317,1 @@\n-      if (cur_level == next_level) {\n+      if (cur_level == next_level && !should_delay_standard_transition(method, cur_level, mtd)) {\n@@ -1318,1 +1321,1 @@\n-        next_level = standard_transition<Predicate>(method, cur_level, true \/*delay_profiling*\/, disable_feedback);\n+        next_level = standard_transition<Predicate>(method, cur_level, disable_feedback);\n@@ -1322,1 +1325,1 @@\n-    next_level = standard_transition<Predicate>(method, cur_level, false \/*delay_profiling*\/, disable_feedback);\n+    next_level = standard_transition<Predicate>(method, cur_level, disable_feedback);\n@@ -1327,0 +1330,20 @@\n+bool CompilationPolicy::should_delay_standard_transition(const methodHandle& method, CompLevel cur_level, MethodTrainingData* mtd) {\n+  precond(mtd != nullptr);\n+  CompLevel highest_training_level = static_cast<CompLevel>(mtd->highest_top_level());\n+  if (highest_training_level != CompLevel_full_optimization && cur_level == CompLevel_limited_profile) {\n+    \/\/ This is a lukewarm method - it hasn't been compiled with C2 during the tranining run and is currently\n+    \/\/ running at level 2. Delay any further state changes until its counters exceed the training run counts.\n+    MethodCounters* mc = method->method_counters();\n+    if (mc == nullptr) {\n+      return false;\n+    }\n+    if (mc->invocation_counter()->carry() || mc->backedge_counter()->carry()) {\n+      return false;\n+    }\n+    if (static_cast<int>(mc->invocation_counter()->count()) <= mtd->invocation_count() &&\n+        static_cast<int>(mc->backedge_counter()->count()) <= mtd->backedge_count()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n@@ -1329,1 +1352,1 @@\n-CompLevel CompilationPolicy::standard_transition(const methodHandle& method, CompLevel cur_level, bool delay_profiling, bool disable_feedback) {\n+CompLevel CompilationPolicy::standard_transition(const methodHandle& method, CompLevel cur_level, bool disable_feedback) {\n@@ -1334,1 +1357,1 @@\n-    next_level = transition_from_none<Predicate>(method, cur_level, delay_profiling, disable_feedback);\n+    next_level = transition_from_none<Predicate>(method, cur_level, disable_feedback);\n@@ -1337,1 +1360,1 @@\n-    next_level = transition_from_limited_profile<Predicate>(method, cur_level, delay_profiling, disable_feedback);\n+    next_level = transition_from_limited_profile<Predicate>(method, cur_level, disable_feedback);\n@@ -1346,8 +1369,0 @@\n-template<typename Predicate> static inline bool apply_predicate(const methodHandle& method, CompLevel cur_level, int i, int b, bool delay_profiling, double delay_profiling_scale) {\n-  if (delay_profiling) {\n-    return Predicate::apply_scaled(method, cur_level, i, b, delay_profiling_scale);\n-  } else {\n-    return Predicate::apply(method, cur_level, i, b);\n-  }\n-}\n-\n@@ -1355,1 +1370,1 @@\n-CompLevel CompilationPolicy::transition_from_none(const methodHandle& method, CompLevel cur_level, bool delay_profiling, bool disable_feedback) {\n+CompLevel CompilationPolicy::transition_from_none(const methodHandle& method, CompLevel cur_level, bool disable_feedback) {\n@@ -1363,1 +1378,1 @@\n-  } else if (!CompilationModeFlag::disable_intermediate() && apply_predicate<Predicate>(method, cur_level, i, b, delay_profiling, Tier0ProfileDelayFactor)) {\n+  } else if (!CompilationModeFlag::disable_intermediate() && Predicate::apply(method, cur_level, i, b)) {\n@@ -1371,1 +1386,1 @@\n-    if (delay_profiling || (!disable_feedback && CompileBroker::queue_size(CompLevel_full_optimization) > Tier3DelayOn * compiler_count(CompLevel_full_optimization))) {\n+    if (!disable_feedback && CompileBroker::queue_size(CompLevel_full_optimization) > Tier3DelayOn * compiler_count(CompLevel_full_optimization)) {\n@@ -1400,1 +1415,1 @@\n-CompLevel CompilationPolicy::transition_from_limited_profile(const methodHandle& method, CompLevel cur_level, bool delay_profiling, bool disable_feedback) {\n+CompLevel CompilationPolicy::transition_from_limited_profile(const methodHandle& method, CompLevel cur_level, bool disable_feedback) {\n@@ -1410,1 +1425,1 @@\n-                              apply_predicate<Predicate>(method, cur_level, i, b, delay_profiling, Tier2ProfileDelayFactor))) {\n+                              Predicate::apply(method, cur_level, i, b))) {\n@@ -1420,1 +1435,1 @@\n-                            apply_predicate<Predicate>(method, cur_level, i, b, delay_profiling, Tier2ProfileDelayFactor))) {\n+                            Predicate::apply(method, cur_level, i, b))) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":40,"deletions":25,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-  static CompLevel transition_from_none(const methodHandle& method, CompLevel cur_level, bool delay_profiling, bool disable_feedback);\n+  static CompLevel transition_from_none(const methodHandle& method, CompLevel cur_level, bool disable_feedback);\n@@ -268,1 +268,1 @@\n-  static CompLevel transition_from_limited_profile(const methodHandle& method, CompLevel cur_level, bool delay_profiling, bool disable_feedback);\n+  static CompLevel transition_from_limited_profile(const methodHandle& method, CompLevel cur_level, bool disable_feedback);\n@@ -272,1 +272,1 @@\n-  static CompLevel standard_transition(const methodHandle& method, CompLevel cur_level, bool delayprof, bool disable_feedback);\n+  static CompLevel standard_transition(const methodHandle& method, CompLevel cur_level, bool disable_feedback);\n@@ -274,0 +274,1 @@\n+  static bool should_delay_standard_transition(const methodHandle& method, CompLevel cur_level, MethodTrainingData* mtd);\n@@ -287,1 +288,1 @@\n-  static void print_training_data_on(outputStream* st, const char* prefix, Method* method);\n+  static void print_training_data_on(outputStream* st, const char* prefix, Method* method, CompLevel cur_level);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -274,7 +274,0 @@\n-  product(double, Tier0ProfileDelayFactor, 100.0, DIAGNOSTIC,               \\\n-          \"Delay profiling\/compiling of methods that were \"                 \\\n-          \"observed to be lukewarm\")                                        \\\n-                                                                            \\\n-  product(double, Tier2ProfileDelayFactor, 250.0, DIAGNOSTIC,               \\\n-          \"Delay profiling of methods that were observed to be lukewarm\")   \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/method.inline.hpp\"\n@@ -355,0 +356,2 @@\n+    _invocation_count = holder()->invocation_count();\n+    _backedge_count = holder()->backedge_count();\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -747,0 +747,3 @@\n+  int _invocation_count;\n+  int _backedge_count;\n+\n@@ -757,0 +760,2 @@\n+    _invocation_count = 0;\n+    _backedge_count = 0;\n@@ -771,0 +776,2 @@\n+  int invocation_count() const { return _invocation_count; }\n+  int backedge_count() const { return _backedge_count; }\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}