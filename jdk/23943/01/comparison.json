{"files":[{"patch":"@@ -794,0 +794,6 @@\n+  if (bol->is_OpaqueMultiversioning()) {\n+    assert(bol->as_OpaqueMultiversioning()->is_useless(), \"Must be useless, i.e. fast main loop has already disappeared.\");\n+    \/\/ Ignore multiversion_if that just lost its loops. The OpaqueMultiversioning is marked useless,\n+    \/\/ and will make the multiversion_if constant fold in the next IGVN round.\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,0 +115,1 @@\n+  DEBUG_ONLY( bool is_useless() const { return _useless; } )\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -124,0 +124,26 @@\n+\n+    class Unloaded {\n+        static void unloaded() {}\n+    }\n+    static int f;\n+\n+    \/\/ The outer loop is eventually Multiversioned, then PreMainPost and Unroll.\n+    \/\/ Then the loops disappear during IGVN, and in the next loop-opts phase, the\n+    \/\/ OpaqueMultiversioning is marked useless, but then we already run\n+    \/\/ PhaseIdealLoop::conditional_move before the next IGVN round,  and find a\n+    \/\/ useless OpaqueMultiversioning instead of a BoolNode.\n+    @Test\n+    @Arguments(values = { Argument.NUMBER_42 })\n+    static void testCrash2(int y) {\n+        int x = 53446;\n+        for (int i = 12; i < 376; i++) {\n+            if (x != 0) {\n+                \/\/ Uncommon trap because the class is not yet loaded.\n+                Unloaded.unloaded();\n+            }\n+            for (int k = 1; k < 4; k++) {\n+                y += 1;\n+            }\n+            x += f;\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMultiversionRemoveUselessSlowLoop.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}