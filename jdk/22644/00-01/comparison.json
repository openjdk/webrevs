{"files":[{"patch":"@@ -88,2 +88,0 @@\n-\n-    exports jdk.tools.jlink.internal to jdk.jpackage;\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.module.ModuleDescriptor.Requires;\n@@ -38,1 +37,0 @@\n-import java.nio.file.Files;\n@@ -46,1 +44,0 @@\n-import java.util.function.Predicate;\n@@ -55,1 +52,0 @@\n-import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -60,2 +56,0 @@\n-    private static final boolean LINKABLE_RUNTIME = LinkableRuntimeImage.isLinkableRuntime();\n-\n@@ -108,1 +102,0 @@\n-        Predicate<ModuleDescriptor> moduleFilter = defaultModulePredicate();\n@@ -110,0 +103,2 @@\n+        \/\/ Don't perform service bindings by default as outlined by JEP 343\n+        \/\/ and JEP 392\n@@ -111,1 +106,1 @@\n-                .resolveAndBind(finder, ModuleFinder.of(), roots)\n+                .resolve(finder, ModuleFinder.of(), roots)\n@@ -114,4 +109,1 @@\n-                .map(ResolvedModule::reference)\n-                .map(ModuleReference::descriptor)\n-                .filter(moduleFilter)\n-                .map(ModuleDescriptor::name)\n+                .map(ResolvedModule::name)\n@@ -121,31 +113,0 @@\n-    \/*\n-     * Returns a predicate suitable for filtering JDK modules. It returns an\n-     * allways-include predicate when the default module path, \"jmods\" folder in\n-     * JAVA_HOME exists. Otherwise, it returns a filter that checks for a build\n-     * which allows for linking from the run-time image. If so, modules 'jdk.jlink'\n-     * and 'jdk.jpackage' - which depends on jdk.jlink - will be filtered by the\n-     * predicate.\n-     *\/\n-    private static Predicate<ModuleDescriptor> defaultModulePredicate() {\n-        Predicate<ModuleDescriptor> defaultModFilter = a -> true;\n-        Path defaultJmodsPath = Path.of(System.getProperty(\"java.home\"),\n-                                        \"jmods\");\n-        if (Files.notExists(defaultJmodsPath)) {\n-            return JLinkBundlerHelper::linkableRuntimeFilter;\n-        }\n-        return defaultModFilter;\n-    }\n-\n-    \/*\n-     * Since the jdk.jlink module is not allowed, filter it and modules that\n-     * require it when we have a runtime that allows for linking from the run-time\n-     * image.\n-     *\/\n-    private static boolean linkableRuntimeFilter(ModuleDescriptor desc) {\n-        Set<Requires> r = desc.requires();\n-        boolean requiresJlink = r.stream()\n-                                 .map(Requires::name)\n-                                 .anyMatch(a -> \"jdk.jlink\".equals(a));\n-        return !(LINKABLE_RUNTIME && (\"jdk.jlink\".equals(desc.name()) || requiresJlink));\n-    }\n-\n@@ -168,4 +129,0 @@\n-    static boolean isLinkableRuntime() {\n-        return LINKABLE_RUNTIME;\n-    }\n-\n@@ -199,0 +156,1 @@\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/JLinkBundlerHelper.java","additions":5,"deletions":47,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.util.OperatingSystem;\n+\n@@ -45,2 +47,0 @@\n-\n-import jdk.internal.util.OperatingSystem;\n@@ -472,5 +472,2 @@\n-                        \/\/ JEP 493 allows for a JDK build without JMODs, thus\n-                        \/\/ check for a linkable runtime before issuing the warning\n-                        boolean linkableRuntime = JLinkBundlerHelper.isLinkableRuntime();\n-                        if (!linkableRuntime && (javaBasePath == null ||\n-                                                 !Files.exists(javaBasePath))) {\n+                        if (javaBasePath == null ||\n+                                !Files.exists(javaBasePath)) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.util.Collection;\n+import java.util.Collections;\n@@ -44,0 +46,1 @@\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -59,0 +62,23 @@\n+\n+    public static Collection addModulesParams() {\n+        List<Object[][]> params = new ArrayList<>();\n+        params.add(new Object[][] { new String[] { \"ALL-DEFAULT\"  } });\n+        params.add(new Object[][] { new String[] { \"java.desktop\" } });\n+        params.add(new Object[][] { new String[] { \"java.desktop,jdk.jartool\" } });\n+        params.add(new Object[][] { new String[] { \"java.desktop\", \"jdk.jartool\" } });\n+        if (isAllModulePathCapable()) {\n+            params.add(new Object[][] { new String[] { \"ALL-MODULE-PATH\" } });\n+        }\n+        return Collections.unmodifiableList(params);\n+    }\n+\n+    private static boolean isAllModulePathCapable() {\n+        Path jmods = Path.of(System.getProperty(\"java.home\"), \"jmods\");\n+        boolean noJmods = Files.notExists(jmods);\n+        if (LinkableRuntimeImage.isLinkableRuntime() && noJmods) {\n+           System.out.println(\"ALL-MODULE-PATH test skipped for linkable run-time image\");\n+           return false;\n+        }\n+        return true;\n+    }\n+\n@@ -310,14 +336,2 @@\n-    @Parameter(\"ALL-MODULE-PATH\")\n-    @Parameter(\"ALL-DEFAULT\")\n-    @Parameter(\"java.desktop\")\n-    @Parameter(\"java.desktop,jdk.jartool\")\n-    @Parameter({ \"java.desktop\", \"jdk.jartool\" })\n-    public void testAddModules(String... addModulesArg) {\n-        if (addModulesArg.length == 1 && addModulesArg[0].equals(\"ALL-MODULE-PATH\")) {\n-            Path jmods = Path.of(System.getProperty(\"java.home\"), \"jmods\");\n-            boolean noJmods = Files.notExists(jmods);\n-            if (LinkableRuntimeImage.isLinkableRuntime() && noJmods) {\n-               System.out.println(\"ALL-MODULE-PATH test skipped for linkable run-time image\");\n-               return;\n-            }\n-        }\n+    @ParameterSupplier(\"addModulesParams\")\n+    public void testAddModules(String[] addModulesArg) {\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"}]}