{"files":[{"patch":"@@ -88,0 +88,2 @@\n+\n+    exports jdk.tools.jlink.internal to jdk.jpackage;\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.module.ModuleDescriptor.Requires;\n@@ -37,0 +38,1 @@\n+import java.nio.file.Files;\n@@ -44,0 +46,1 @@\n+import java.util.function.Predicate;\n@@ -50,0 +53,1 @@\n+\n@@ -51,0 +55,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -55,0 +60,2 @@\n+    private static final boolean LINKABLE_RUNTIME = LinkableRuntimeImage.isLinkableRuntime();\n+\n@@ -101,0 +108,1 @@\n+        Predicate<ModuleDescriptor> moduleFilter = defaultModulePredicate();\n@@ -106,1 +114,4 @@\n-                .map(ResolvedModule::name)\n+                .map(ResolvedModule::reference)\n+                .map(ModuleReference::descriptor)\n+                .filter(moduleFilter)\n+                .map(ModuleDescriptor::name)\n@@ -110,0 +121,31 @@\n+    \/*\n+     * Returns a predicate suitable for filtering JDK modules. It returns an\n+     * allways-include predicate when the default module path, \"jmods\" folder in\n+     * JAVA_HOME exists. Otherwise, it returns a filter that checks for a build\n+     * which allows for linking from the run-time image. If so, modules 'jdk.jlink'\n+     * and 'jdk.jpackage' - which depends on jdk.jlink - will be filtered by the\n+     * predicate.\n+     *\/\n+    private static Predicate<ModuleDescriptor> defaultModulePredicate() {\n+        Predicate<ModuleDescriptor> defaultModFilter = a -> true;\n+        Path defaultJmodsPath = Path.of(System.getProperty(\"java.home\"),\n+                                        \"jmods\");\n+        if (Files.notExists(defaultJmodsPath)) {\n+            return JLinkBundlerHelper::linkableRuntimeFilter;\n+        }\n+        return defaultModFilter;\n+    }\n+\n+    \/*\n+     * Since the jdk.jlink module is not allowed, filter it and modules that\n+     * require it when we have a runtime that allows for linking from the run-time\n+     * image.\n+     *\/\n+    private static boolean linkableRuntimeFilter(ModuleDescriptor desc) {\n+        Set<Requires> r = desc.requires();\n+        boolean requiresJlink = r.stream()\n+                                 .map(Requires::name)\n+                                 .anyMatch(a -> \"jdk.jlink\".equals(a));\n+        return !(LINKABLE_RUNTIME && (\"jdk.jlink\".equals(desc.name()) || requiresJlink));\n+    }\n+\n@@ -126,0 +168,4 @@\n+    static boolean isLinkableRuntime() {\n+        return LINKABLE_RUNTIME;\n+    }\n+\n@@ -153,1 +199,0 @@\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/JLinkBundlerHelper.java","additions":47,"deletions":2,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.util.OperatingSystem;\n-\n@@ -47,0 +45,2 @@\n+\n+import jdk.internal.util.OperatingSystem;\n@@ -472,2 +472,5 @@\n-                        if (javaBasePath == null ||\n-                                !Files.exists(javaBasePath)) {\n+                        \/\/ JEP 493 allows for a JDK build without JMODs, thus\n+                        \/\/ check for a linkable runtime before issuing the warning\n+                        boolean linkableRuntime = JLinkBundlerHelper.isLinkableRuntime();\n+                        if (!linkableRuntime && (javaBasePath == null ||\n+                                                 !Files.exists(javaBasePath))) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -17,1 +17,2 @@\n-        java.base\/jdk.internal.util\n+        java.base\/jdk.internal.util \\\n+        jdk.jlink\/jdk.tools.jlink.internal\n","filename":"test\/jdk\/tools\/jpackage\/TEST.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.tools.jlink.internal.LinkableRuntimeImage;\n@@ -315,0 +316,8 @@\n+        if (addModulesArg.length == 1 && addModulesArg[0].equals(\"ALL-MODULE-PATH\")) {\n+            Path jmods = Path.of(System.getProperty(\"java.home\"), \"jmods\");\n+            boolean noJmods = Files.notExists(jmods);\n+            if (LinkableRuntimeImage.isLinkableRuntime() && noJmods) {\n+               System.out.println(\"ALL-MODULE-PATH test skipped for linkable run-time image\");\n+               return;\n+            }\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                    \"--bind-services\",\n+                    \"--verbose --bind-services --limit-modules java.smartcardio,jdk.crypto.cryptoki,java.desktop\",\n@@ -63,1 +63,1 @@\n-                    \/\/ with bind-services should have some services\n+                    \/\/ with limit-modules and bind-services should have them in the result\n@@ -69,1 +69,2 @@\n-                    \"--jlink-options\", \"--bind-services\",\n+                    \"--jlink-options\",\n+                    \"--bind-services --limit-modules jdk.jartool,jdk.unsupported,java.desktop\",\n@@ -71,1 +72,1 @@\n-                    \/\/ non modular should have everything\n+                    \/\/ non modular should have at least the module limits\n@@ -78,1 +79,2 @@\n-                    \"--jlink-options\", \"--bind-services\",\n+                    \"--jlink-options\",\n+                    \"--bind-services --limit-modules java.smartcardio,jdk.crypto.cryptoki,java.desktop\",\n","filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                \"--add-modules\", \"ALL-MODULE-PATH\",\n+                \"--add-modules\", \"java.desktop\",\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageSymbolicLinksTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-                \"--add-modules\", \"ALL-MODULE-PATH\",\n+                \"--add-modules\", \"java.desktop\",\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-                        \"--add-modules\", \"ALL-MODULE-PATH\",\n+                        \"--add-modules\", \"java.desktop\",\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}