{"files":[{"patch":"@@ -326,0 +326,43 @@\n+template<class CgroupVxController, class LambdaInit, class LambdaCond> static\n+void adjust_controller(const char *ver, const char *subject, CgroupVxController* reader, LambdaInit init, LambdaCond cond) {\n+  log_trace(os, container)(\"Adjusting %s controller path for %s: %s\", ver, subject, reader->subsystem_path());\n+  assert(reader->cgroup_path() != nullptr, \"invariant\");\n+  char* orig = os::strdup(reader->cgroup_path());\n+  char* cg_path = os::strdup(orig);\n+  char* last_slash;\n+  jlong count = init();\n+  bool path_iterated = false;\n+  while (cond(count) && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n+    *last_slash = '\\0'; \/\/ strip path\n+    \/\/ update to shortened path and try again\n+    reader->set_subsystem_path(cg_path);\n+    count = init();\n+    path_iterated = true;\n+    if (!cond(count)) {\n+      log_trace(os, container)(\"Adjusted %s controller path for %s to: %s\", ver, subject, reader->subsystem_path());\n+      os::free(cg_path);\n+      os::free(orig);\n+      return;\n+    }\n+  }\n+  \/\/ no lower limit found or limit at leaf\n+  os::free(cg_path);\n+  if (path_iterated) {\n+    reader->set_subsystem_path((char*)\"\/\");\n+    count = init();\n+    if (!cond(count)) {\n+      \/\/ handle limit set at mount point\n+      log_trace(os, container)(\"Adjusted %s controller path for %s to: %s\", ver, subject, reader->subsystem_path());\n+      os::free(orig);\n+      return;\n+    }\n+    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n+                              reader->mount_point(), orig);\n+    reader->set_subsystem_path(orig);\n+  } else {\n+    log_trace(os, container)(\"Lowest limit for %s at leaf: %s\",\n+                              subject, reader->subsystem_path());\n+  }\n+  os::free(orig);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -85,39 +85,4 @@\n-  log_trace(os, container)(\"Adjusting v1 controller path for memory: %s\", reader()->subsystem_path());\n-  assert(reader()->cgroup_path() != nullptr, \"invariant\");\n-  char* orig = os::strdup(reader()->cgroup_path());\n-  char* cg_path = os::strdup(orig);\n-  char* last_slash;\n-  jlong limit = read_memory_limit_in_bytes(phys_mem);\n-  bool path_iterated = false;\n-  while (limit < 0 && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n-    *last_slash = '\\0'; \/\/ strip path\n-    \/\/ update to shortened path and try again\n-    reader()->set_subsystem_path(cg_path);\n-    limit = read_memory_limit_in_bytes(phys_mem);\n-    path_iterated = true;\n-    if (limit > 0) {\n-      log_trace(os, container)(\"Adjusted v1 controller path for memory to: %s\", reader()->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return this;\n-    }\n-  }\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    reader()->set_subsystem_path((char*)\"\/\");\n-    limit = read_memory_limit_in_bytes(phys_mem);\n-    if (limit > 0) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted v1 controller path for memory to: %s\", reader()->subsystem_path());\n-      os::free(orig);\n-      return this;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n-                              reader()->mount_point(), orig);\n-    reader()->set_subsystem_path(orig);\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for memory at leaf: %s\",\n-                              reader()->subsystem_path());\n-  }\n-  os::free(orig);\n+  ::adjust_controller(\"v1\", \"memory\", reader(),\n+    [&]() { return read_memory_limit_in_bytes(phys_mem); },\n+    [&](jlong count) { return count < 0; }\n+  );\n@@ -128,2 +93,0 @@\n-  log_trace(os, container)(\"Adjusting v1 controller path for cpu: %s\", reader()->subsystem_path());\n-  assert(reader()->cgroup_path() != nullptr, \"invariant\");\n@@ -131,37 +94,4 @@\n-  char* orig = os::strdup(reader()->cgroup_path());\n-  char* cg_path = os::strdup(orig);\n-  char* last_slash;\n-  int cpus = CgroupUtil::processor_count(this, host_cpus);\n-  bool path_iterated = false;\n-  while (cpus == host_cpus && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n-    *last_slash = '\\0'; \/\/ strip path\n-    \/\/ update to shortened path and try again\n-    reader()->set_subsystem_path((char*)cg_path);\n-    cpus = CgroupUtil::processor_count(this, host_cpus);\n-    path_iterated = true;\n-    if (cpus != host_cpus) {\n-      log_trace(os, container)(\"Adjusted v1 controller path for cpu to: %s\", reader()->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return this;\n-    }\n-  }\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    reader()->set_subsystem_path((char*)\"\/\");\n-    cpus = CgroupUtil::processor_count(this, host_cpus);\n-    if (cpus != host_cpus) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted v1 controller path for cpu to: %s\", reader()->subsystem_path());\n-      os::free(orig);\n-      return this;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n-                              reader()->mount_point(), orig);\n-    reader()->set_subsystem_path(orig);\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for cpu at leaf: %s\",\n-                              reader()->subsystem_path());\n-  }\n-  os::free(orig);\n+  ::adjust_controller(\"v1\", \"cpu\", reader(),\n+    [&]() { return CgroupUtil::processor_count(this, host_cpus); },\n+    [&](jlong count) { return count == host_cpus; }\n+  );\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":8,"deletions":78,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -282,40 +282,5 @@\n-CgroupCpuController* CgroupV2CpuController::adjust_controller(int host_cpus) {\n-  log_trace(os, container)(\"Adjusting v2 controller path for cpu: %s\", reader()->subsystem_path());\n-  assert(reader()->cgroup_path() != nullptr, \"invariant\");\n-  assert(host_cpus > 0, \"Negative host cpus?\");\n-  char* orig = os::strdup(reader()->cgroup_path());\n-  char* cg_path = os::strdup(orig);\n-  char* last_slash;\n-  int cpus = CgroupUtil::processor_count(this, host_cpus);\n-  bool path_iterated = false;\n-  while (cpus == host_cpus && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n-    *last_slash = '\\0'; \/\/ strip path\n-    \/\/ update to shortened path and try again\n-    reader()->set_subsystem_path(cg_path);\n-    cpus = CgroupUtil::processor_count(this, host_cpus);\n-    path_iterated = true;\n-    if (cpus != host_cpus) {\n-      log_trace(os, container)(\"Adjusted v2 controller path for cpu to: %s\", reader()->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return this;\n-    }\n-  }\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    reader()->set_subsystem_path((char*)\"\/\");\n-    cpus = CgroupUtil::processor_count(this, host_cpus);\n-    if (cpus != host_cpus) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted v2 controller path for cpu to: %s\", reader()->subsystem_path());\n-      os::free(orig);\n-      return this;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n-                              reader()->mount_point(), orig);\n-    reader()->set_subsystem_path(orig);\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for cpu at leaf: %s\",\n-                              reader()->subsystem_path());\n-  }\n-  os::free(orig);\n+CgroupV2MemoryController* CgroupV2MemoryController::adjust_controller(julong phys_mem) {\n+  ::adjust_controller(\"v2\", \"memory\", reader(),\n+    [&]() { return read_memory_limit_in_bytes(phys_mem); },\n+    [&](jlong count) { return count < 0; }\n+  );\n@@ -325,40 +290,6 @@\n-CgroupMemoryController* CgroupV2MemoryController::adjust_controller(julong phys_mem) {\n-  log_trace(os, container)(\"Adjusting v2 controller path for memory: %s\", reader()->subsystem_path());\n-  assert(reader()->cgroup_path() != nullptr, \"invariant\");\n-  char* orig = os::strdup(reader()->cgroup_path());\n-  char* cg_path = os::strdup(orig);\n-  char* last_slash;\n-  jlong limit = read_memory_limit_in_bytes(phys_mem);\n-  bool path_iterated = false;\n-  while (limit < 0 && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n-    *last_slash = '\\0'; \/\/ strip path\n-    \/\/ update to shortened path and try again\n-    reader()->set_subsystem_path(cg_path);\n-    limit = read_memory_limit_in_bytes(phys_mem);\n-    path_iterated = true;\n-    if (limit > 0) {\n-      log_trace(os, container)(\"Adjusted v2 controller path for memory to: %s\", reader()->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return this;\n-    }\n-  }\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    reader()->set_subsystem_path((char*)\"\/\");\n-    limit = read_memory_limit_in_bytes(phys_mem);\n-    if (limit > 0) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted v2 controller path for memory to: %s\", reader()->subsystem_path());\n-      os::free(orig);\n-      return this;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n-                              reader()->mount_point(), orig);\n-    reader()->set_subsystem_path(orig);\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for memory at leaf: %s\",\n-                              reader()->subsystem_path());\n-  }\n-  os::free(orig);\n+CgroupV2CpuController* CgroupV2CpuController::adjust_controller(int host_cpus) {\n+  assert(host_cpus > 0, \"Negative host cpus?\");\n+  ::adjust_controller(\"v2\", \"cpu\", reader(),\n+    [&]() { return CgroupUtil::processor_count(this, host_cpus); },\n+    [&](jlong count) { return count == host_cpus; }\n+  );\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":11,"deletions":80,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    CgroupCpuController* adjust_controller(int host_cpus) override;\n+    CgroupV2CpuController* adjust_controller(int host_cpus) override;\n@@ -103,1 +103,1 @@\n-    CgroupMemoryController* adjust_controller(julong phys_mem) override;\n+    CgroupV2MemoryController* adjust_controller(julong phys_mem) override;\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}