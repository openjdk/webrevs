{"files":[{"patch":"@@ -57,1 +57,0 @@\n-    vm.cgroup.tools \\\n@@ -91,1 +90,2 @@\n-    jdk.containerized\n+    jdk.containerized \\\n+    cgroup.tools\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @requires vm.cgroup.tools\n+ * @requires cgroup.tools\n@@ -56,4 +56,0 @@\n-        public static final String CONTROLLERS_PATH_OUTER = \"memory:\" + CGROUP_OUTER;\n-        public static final String CONTROLLERS_PATH_INNER = CONTROLLERS_PATH_OUTER + \"\/\" + CGROUP_INNER;\n-        public static final String LINE_DELIM = \"-\".repeat(80);\n-        public static final String MOUNTINFO = \"\/proc\/self\/mountinfo\";\n@@ -65,2 +61,3 @@\n-        class Limits {\n-            int integer;\n+        class HookResult {\n+            int integerLimit;\n+            OutputAnalyzer output;\n@@ -69,2 +66,1 @@\n-        public static String sysFsCgroup;\n-        public String memory_max_filename;\n+        public static String memory_max_filename;\n@@ -72,36 +68,1 @@\n-\n-        public static void lineDelim(String str, String label) {\n-            System.err.print(LINE_DELIM + \" \" + label + \"\\n\" + str);\n-            if (!str.isEmpty() && !str.endsWith(\"\\n\")) {\n-                System.err.println();\n-            }\n-        }\n-\n-        public static OutputAnalyzer pSystem(List<String> args,\n-                String failStderr, String failExplanation,\n-                String fail2Stderr, String fail2Explanation,\n-                String ignoreStderr) throws Exception {\n-            System.err.println(LINE_DELIM + \" command: \" + String.join(\" \",args));\n-            ProcessBuilder pb = new ProcessBuilder(args);\n-            Process process = pb.start();\n-            OutputAnalyzer output = new OutputAnalyzer(process);\n-            int exitValue = process.waitFor();\n-            lineDelim(output.getStdout(), \"stdout\");\n-            lineDelim(output.getStderr(), \"stderr\");\n-            System.err.println(LINE_DELIM);\n-            if (!failStderr.isEmpty() && output.getStderr().equals(failStderr + \"\\n\")) {\n-                throw new SkippedException(failExplanation + \": \" + failStderr);\n-            }\n-            if (!fail2Stderr.isEmpty() && output.getStderr().equals(fail2Stderr + \"\\n\")) {\n-                throw new SkippedException(fail2Explanation + \": \" + fail2Stderr);\n-            }\n-            if (!ignoreStderr.isEmpty() && output.getStderr().equals(ignoreStderr + \"\\n\")) {\n-                return output;\n-            }\n-            Asserts.assertEQ(0, exitValue, \"Process returned unexpected exit code: \" + exitValue);\n-            return output;\n-        }\n-\n-        public static OutputAnalyzer pSystem(List<String> args) throws Exception {\n-            return pSystem(args, \"\", \"\", \"\", \"\", \"\");\n-        }\n+        public static String controller;\n@@ -112,1 +73,1 @@\n-            args.add(CONTROLLERS_PATH_INNER);\n+            args.add(controller + \":\" + CGROUP_OUTER + \"\/\" + CGROUP_INNER);\n@@ -120,1 +81,1 @@\n-            args.add(System.getProperty(\"java.class.path\"));\n+            args.add(System.getProperty(\"test.classes\"));\n@@ -129,1 +90,4 @@\n-        public Test() throws Exception {\n+        public Test(String controller_) throws Exception {\n+            controller = controller_;\n+            OutputAnalyzer output;\n+\n@@ -134,11 +98,8 @@\n-            cgdelete.add(CONTROLLERS_PATH_OUTER);\n-            try {\n-                pSystem(cgdelete,\n-                    \"cgdelete: libcgroup initialization failed: Cgroup is not mounted\", \"cgroup\/cgroup2 is not mounted\",\n-                    \"\", \"\",\n-                    \"cgdelete: cannot remove group '\" + CGROUP_OUTER + \"': No such file or directory\");\n-            } catch (IOException e) {\n-                if (e.toString().equals(\"java.io.IOException: Cannot run program \\\"cgdelete\\\": error=2, No such file or directory\")) {\n-                    throw new SkippedException(\"libcgroup-tools is not installed\");\n-                }\n-                throw e;\n+            cgdelete.add(controller + \":\" + CGROUP_OUTER);\n+            output = ProcessTools.executeProcess(new ProcessBuilder(cgdelete));\n+            if (output.contains(\"cgdelete: libcgroup initialization failed: Cgroup is not mounted\")) {\n+                throw new SkippedException(\"cgroup\/cgroup2 is not mounted: \" + output.getStderr());\n+            }\n+            output.stdoutShouldBeEmpty();\n+            if (!output.contains(\"cgdelete: cannot remove group '\" + CGROUP_OUTER + \"': No such file or directory\")) {\n+                output.stderrShouldBeEmpty();\n@@ -148,1 +109,1 @@\n-            \/\/ cgcreate: can't create cgroup CONTROLLERS_PATH_INNER: No such file or directory\n+            \/\/ cgcreate: can't create cgroup [...]: No such file or directory\n@@ -152,5 +113,8 @@\n-            cgcreate1.add(CONTROLLERS_PATH_OUTER);\n-            pSystem(cgcreate1,\n-                \"cgcreate: can't create cgroup \" + CGROUP_OUTER + \": Cgroup, operation not allowed\", \"Missing root permission\",\n-                \"cgcreate: can't create cgroup \" + CGROUP_OUTER + \": Cgroup, requested group parameter does not exist\", \"Missing root permission\",\n-                \"\");\n+            cgcreate1.add(controller + \":\" + CGROUP_OUTER);\n+            output = ProcessTools.executeProcess(new ProcessBuilder(cgcreate1));\n+            if (output.contains(\"cgcreate: can't create cgroup \" + CGROUP_OUTER + \": Cgroup, operation not allowed\")\n+             || output.contains(\"cgcreate: can't create cgroup \" + CGROUP_OUTER + \": Cgroup, requested group parameter does not exist\")) {\n+                throw new SkippedException(\"Missing root permission: \" + output.getStderr());\n+            }\n+            output.stdoutShouldBeEmpty();\n+            output.stderrShouldBeEmpty();\n@@ -161,2 +125,4 @@\n-            cgcreate2.add(CONTROLLERS_PATH_INNER);\n-            pSystem(cgcreate2, \"\", \"\", \"\", \"\", \"\");\n+            cgcreate2.add(controller + \":\" + CGROUP_OUTER + \"\/\" + CGROUP_INNER);\n+            output = ProcessTools.executeProcess(new ProcessBuilder(cgcreate2));\n+            output.stdoutShouldBeEmpty();\n+            output.stderrShouldBeEmpty();\n@@ -176,16 +142,0 @@\n-            String mountInfo;\n-            try {\n-                mountInfo = Files.readString(Path.of(MOUNTINFO));\n-            } catch (NoSuchFileException e) {\n-                throw new SkippedException(\"Cannot open \" + MOUNTINFO);\n-            }\n-\n-            Matcher matcher = Pattern.compile(\"^(?:\\\\S+\\\\s+){4}(\\\\S+)\\\\s.*\\\\scgroup(?:2(?:\\\\s+\\\\S+){2}|\\\\s+\\\\S+\\\\s+(?:\\\\S*,)?memory(?:,\\\\S*)?)$\", Pattern.MULTILINE).matcher(mountInfo);\n-            if (!matcher.find()) {\n-                System.err.println(mountInfo);\n-                throw new SkippedException(\"cgroup\/cgroup2 filesystem mount point not found\");\n-            }\n-            sysFsCgroup = matcher.group(1);\n-            System.err.println(\"sysFsCgroup = \" + sysFsCgroup);\n-\n-            System.err.println(LINE_DELIM + \" \" + (isCgroup2 ? \"cgroup2\" : \"cgroup1\") + \" mount point: \" + sysFsCgroup);\n@@ -193,1 +143,1 @@\n-            Files.writeString(Path.of(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/\" + memory_max_filename), \"\" + MEMORY_MAX_OUTER);\n+            ProcessTools.executeProcess(\"cgset\", \"-r\", memory_max_filename + \"=\" + MEMORY_MAX_OUTER, \"\/\" + CGROUP_OUTER);\n@@ -195,4 +145,1 @@\n-            \/\/ Here starts a copy of ProcessTools.createJavaProcessBuilder.\n-            List<String> cgexec = new ArrayList<>();\n-            Limits limits = hook(cgexec);\n-            OutputAnalyzer output = pSystem(cgexec);\n+            HookResult hookResult = hook();\n@@ -200,1 +147,1 @@\n-            output.shouldMatch(\"\\\\[trace\\\\]\\\\[os,container\\\\] Memory Limit is: \" + limits.integer + \"$\");\n+            hookResult.output.shouldMatch(\"\\\\[trace\\\\]\\\\[os,container\\\\] Memory Limit is: \" + hookResult.integerLimit + \"$\");\n@@ -202,1 +149,3 @@\n-            pSystem(cgdelete);\n+            output = ProcessTools.executeProcess(new ProcessBuilder(cgdelete));\n+            output.stdoutShouldBeEmpty();\n+            output.stderrShouldBeEmpty();\n@@ -205,1 +154,1 @@\n-        public abstract Limits hook(List<String> cgexec) throws IOException;\n+        public abstract HookResult hook() throws Exception;\n@@ -208,1 +157,3 @@\n-        public Limits hook(List<String> cgexec) throws IOException {\n+        public HookResult hook() throws Exception {\n+            HookResult hookResult = new HookResult();\n+\n@@ -210,1 +161,1 @@\n-            Files.writeString(Path.of(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/\" + CGROUP_INNER + \"\/\" + memory_max_filename), \"\" + MEMORY_MAX_INNER);\n+            ProcessTools.executeProcess(\"cgset\", \"-r\", memory_max_filename + \"=\" + MEMORY_MAX_INNER, \"\/\" + CGROUP_OUTER + \"\/\" + CGROUP_INNER);\n@@ -212,0 +163,1 @@\n+            List<String> cgexec = new ArrayList<>();\n@@ -215,0 +167,1 @@\n+            hookResult.output = ProcessTools.executeProcess(new ProcessBuilder(cgexec));\n@@ -218,3 +171,2 @@\n-            Limits limits = new Limits();\n-            limits.integer = MEMORY_MAX_INNER;\n-            return limits;\n+            hookResult.integerLimit = MEMORY_MAX_INNER;\n+            return hookResult;\n@@ -223,0 +175,1 @@\n+            super(\"memory\");\n@@ -226,1 +179,4 @@\n-        public Limits hook(List<String> cgexec) throws IOException {\n+        public HookResult hook() throws Exception {\n+            HookResult hookResult = new HookResult();\n+\n+            List<String> cgexec = new ArrayList<>();\n@@ -232,1 +188,1 @@\n-            cgexec.add(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/cgroup.subtree_control\");\n+            hookResult.output = ProcessTools.executeProcess(new ProcessBuilder(cgexec));\n@@ -234,3 +190,2 @@\n-            Limits limits = new Limits();\n-            limits.integer = MEMORY_MAX_OUTER;\n-            return limits;\n+            hookResult.integerLimit = MEMORY_MAX_OUTER;\n+            return hookResult;\n@@ -239,0 +194,1 @@\n+            super(\"cpu\");\n@@ -240,3 +196,1 @@\n-        public static void child(String arg) throws Exception {\n-            Files.writeString(Path.of(arg), \"-memory\");\n-\n+        public static void child() throws Exception {\n@@ -246,1 +200,1 @@\n-            pSystem(self_verbose);\n+            ProcessTools.executeProcess(new ProcessBuilder(self_verbose));\n@@ -258,1 +212,1 @@\n-            case 3:\n+            case 2:\n@@ -262,1 +216,1 @@\n-                        TestNoController.child(args[2]);\n+                        TestNoController.child();\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/NestedCgroup.java","additions":61,"deletions":107,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        map.put(\"vm.cgroup.tools\", this::cgroupTools);\n+        map.put(\"cgroup.tools\", this::cgroupTools);\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}