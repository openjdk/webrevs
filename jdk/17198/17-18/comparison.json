{"files":[{"patch":"@@ -203,0 +203,11 @@\n+class CgroupControllerVirt: public CHeapObj<mtInternal> {\n+  public:\n+    virtual bool needs_hierarchy_adjustment() = 0;\n+    virtual bool is_read_only() = 0;\n+    virtual int version() = 0;\n+    virtual char* subsystem_path() = 0;\n+    virtual void set_subsystem_path(char *cgroup_path) = 0;\n+    virtual char* cgroup_path() = 0;\n+    virtual char* mount_point() = 0;\n+};\n+\n@@ -204,1 +215,1 @@\n-class CgroupCpuController: public CHeapObj<mtInternal> {\n+class CgroupCpuController: public CgroupControllerVirt {\n@@ -209,3 +220,0 @@\n-    virtual bool needs_hierarchy_adjustment() = 0;\n-    virtual CgroupCpuController* adjust_controller(int host_cpus) = 0;\n-    virtual bool is_read_only() = 0;\n@@ -215,1 +223,1 @@\n-class CgroupMemoryController: public CHeapObj<mtInternal> {\n+class CgroupMemoryController: public CgroupControllerVirt {\n@@ -226,3 +234,0 @@\n-    virtual CgroupMemoryController* adjust_controller(julong phys_mem) = 0;\n-    virtual bool needs_hierarchy_adjustment() = 0;\n-    virtual bool is_read_only() = 0;\n@@ -326,43 +331,0 @@\n-template<class CgroupVxController, class LambdaInit, class LambdaCond> static\n-void adjust_controller(const char *ver, const char *subject, CgroupVxController* reader, LambdaInit init, LambdaCond cond) {\n-  log_trace(os, container)(\"Adjusting %s controller path for %s: %s\", ver, subject, reader->subsystem_path());\n-  assert(reader->cgroup_path() != nullptr, \"invariant\");\n-  char* orig = os::strdup(reader->cgroup_path());\n-  char* cg_path = os::strdup(orig);\n-  char* last_slash;\n-  jlong count = init();\n-  bool path_iterated = false;\n-  while (cond(count) && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n-    *last_slash = '\\0'; \/\/ strip path\n-    \/\/ update to shortened path and try again\n-    reader->set_subsystem_path(cg_path);\n-    count = init();\n-    path_iterated = true;\n-    if (!cond(count)) {\n-      log_trace(os, container)(\"Adjusted %s controller path for %s to: %s\", ver, subject, reader->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return;\n-    }\n-  }\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    reader->set_subsystem_path((char*)\"\/\");\n-    count = init();\n-    if (!cond(count)) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted %s controller path for %s to: %s\", ver, subject, reader->subsystem_path());\n-      os::free(orig);\n-      return;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n-                              reader->mount_point(), orig);\n-    reader->set_subsystem_path(orig);\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for %s at leaf: %s\",\n-                              subject, reader->subsystem_path());\n-  }\n-  os::free(orig);\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":13,"deletions":51,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -54,1 +54,39 @@\n-    return mem->adjust_controller(phys_mem);\n+    log_trace(os, container)(\"Adjusting v%d controller path for memory: %s\", mem->version(), mem->subsystem_path());\n+    assert(mem->cgroup_path() != nullptr, \"invariant\");\n+    char* orig = os::strdup(mem->cgroup_path());\n+    char* cg_path = os::strdup(orig);\n+    char* last_slash;\n+    jlong limit = mem->read_memory_limit_in_bytes(phys_mem);\n+    bool path_iterated = false;\n+    while (limit < 0 && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n+      *last_slash = '\\0'; \/\/ strip path\n+      \/\/ update to shortened path and try again\n+      mem->set_subsystem_path(cg_path);\n+      limit = mem->read_memory_limit_in_bytes(phys_mem);\n+      path_iterated = true;\n+      if (limit > 0) {\n+        log_trace(os, container)(\"Adjusted v%d controller path for memory to: %s\", mem->version(), mem->subsystem_path());\n+        os::free(cg_path);\n+        os::free(orig);\n+        return mem;\n+      }\n+    }\n+    \/\/ no lower limit found or limit at leaf\n+    os::free(cg_path);\n+    if (path_iterated) {\n+      mem->set_subsystem_path((char*)\"\/\");\n+      limit = mem->read_memory_limit_in_bytes(phys_mem);\n+      if (limit > 0) {\n+        \/\/ handle limit set at mount point\n+        log_trace(os, container)(\"Adjusted v%d controller path for memory to: %s\", mem->version(), mem->subsystem_path());\n+        os::free(orig);\n+        return mem;\n+      }\n+      log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n+                                mem->mount_point(), orig);\n+      mem->set_subsystem_path(orig);\n+    } else {\n+      log_trace(os, container)(\"Lowest limit for memory at leaf: %s\",\n+                                mem->subsystem_path());\n+    }\n+    os::free(orig);\n@@ -62,1 +100,39 @@\n-    return cpu->adjust_controller(cpu_total);\n+    log_trace(os, container)(\"Adjusting v%d controller path for cpu: %s\", cpu->version(), cpu->subsystem_path());\n+    assert(cpu->cgroup_path() != nullptr, \"invariant\");\n+    assert(cpu_total > 0, \"Negative host cpus?\");\n+    char* orig = os::strdup(cpu->cgroup_path());\n+    char* cg_path = os::strdup(orig);\n+    char* last_slash;\n+    int cpus = CgroupUtil::processor_count(cpu, cpu_total);\n+    bool path_iterated = false;\n+    while (cpus == cpu_total && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n+      *last_slash = '\\0'; \/\/ strip path\n+      \/\/ update to shortened path and try again\n+      cpu->set_subsystem_path(cg_path);\n+      cpus = CgroupUtil::processor_count(cpu, cpu_total);\n+      path_iterated = true;\n+      if (cpus != cpu_total) {\n+        log_trace(os, container)(\"Adjusted v%d controller path for cpu to: %s\", cpu->version(), cpu->subsystem_path());\n+        os::free(cg_path);\n+        os::free(orig);\n+        return cpu;\n+      }\n+    }\n+    os::free(cg_path);\n+    if (path_iterated) {\n+      cpu->set_subsystem_path((char*)\"\/\");\n+      cpus = CgroupUtil::processor_count(cpu, cpu_total);\n+      if (cpus != cpu_total) {\n+        \/\/ handle limit set at mount point\n+        log_trace(os, container)(\"Adjusted v%d controller path for cpu to: %s\", cpu->version(), cpu->subsystem_path());\n+        os::free(orig);\n+        return cpu;\n+      }\n+      log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n+                                cpu->mount_point(), orig);\n+      cpu->set_subsystem_path(orig);\n+    } else {\n+      log_trace(os, container)(\"Lowest limit for cpu at leaf: %s\",\n+                                cpu->subsystem_path());\n+    }\n+    os::free(orig);\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":78,"deletions":2,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -84,17 +84,0 @@\n-CgroupV1MemoryController* CgroupV1MemoryController::adjust_controller(julong phys_mem) {\n-  ::adjust_controller(\"v1\", \"memory\", reader(),\n-    [&]() { return read_memory_limit_in_bytes(phys_mem); },\n-    [&](jlong count) { return count < 0; }\n-  );\n-  return this;\n-}\n-\n-CgroupV1CpuController* CgroupV1CpuController::adjust_controller(int host_cpus) {\n-  assert(host_cpus > 0, \"Negative host cpus?\");\n-  ::adjust_controller(\"v1\", \"cpu\", reader(),\n-    [&]() { return CgroupUtil::processor_count(this, host_cpus); },\n-    [&](jlong count) { return count == host_cpus; }\n-  );\n-  return this;\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -79,1 +79,2 @@\n-    void set_subsystem_path(char *cgroup_path) {\n+    char* subsystem_path() override { return reader()->subsystem_path(); }\n+    void set_subsystem_path(char *cgroup_path) override {\n@@ -95,1 +96,0 @@\n-    CgroupV1MemoryController* adjust_controller(julong phys_mem) override;\n@@ -99,0 +99,3 @@\n+    int version() override { return 1; }\n+    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    char* mount_point() override { return reader()->mount_point(); }\n@@ -119,1 +122,2 @@\n-    void set_subsystem_path(char *cgroup_path) {\n+    char* subsystem_path() override { return reader()->subsystem_path(); }\n+    void set_subsystem_path(char *cgroup_path) override {\n@@ -125,0 +129,3 @@\n+    int version() override { return 1; }\n+    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    char* mount_point() override { return reader()->mount_point(); }\n@@ -130,1 +137,0 @@\n-    CgroupV1CpuController* adjust_controller(int host_cpus) override;\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -282,17 +282,0 @@\n-CgroupV2MemoryController* CgroupV2MemoryController::adjust_controller(julong phys_mem) {\n-  ::adjust_controller(\"v2\", \"memory\", reader(),\n-    [&]() { return read_memory_limit_in_bytes(phys_mem); },\n-    [&](jlong count) { return count < 0; }\n-  );\n-  return this;\n-}\n-\n-CgroupV2CpuController* CgroupV2CpuController::adjust_controller(int host_cpus) {\n-  assert(host_cpus > 0, \"Negative host cpus?\");\n-  ::adjust_controller(\"v2\", \"cpu\", reader(),\n-    [&]() { return CgroupUtil::processor_count(this, host_cpus); },\n-    [&](jlong count) { return count == host_cpus; }\n-  );\n-  return this;\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -81,0 +81,7 @@\n+    int version() override { return 2; }\n+    char* subsystem_path() override { return reader()->subsystem_path(); }\n+    void set_subsystem_path(char* cgroup_path) override {\n+      reader()->set_subsystem_path(cgroup_path);\n+    }\n+    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    char* mount_point() override { return reader()->mount_point(); }\n@@ -82,1 +89,0 @@\n-    CgroupV2CpuController* adjust_controller(int host_cpus) override;\n@@ -103,1 +109,0 @@\n-    CgroupV2MemoryController* adjust_controller(julong phys_mem) override;\n@@ -107,0 +112,7 @@\n+    int version() override { return 2; }\n+    char* subsystem_path() override { return reader()->subsystem_path(); }\n+    void set_subsystem_path(char* cgroup_path) override {\n+      reader()->set_subsystem_path(cgroup_path);\n+    }\n+    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    char* mount_point() override { return reader()->mount_point(); }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}