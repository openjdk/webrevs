{"files":[{"patch":"@@ -92,0 +92,12 @@\n+  CgroupV1MemoryController* mem_controller = reinterpret_cast<CgroupV1MemoryController*>(_memory->controller());\n+  if (mem_controller->is_hierarchical()) {\n+    GET_CONTAINER_INFO_LINE(julong, _memory->controller(), \"\/memory.stat\", \"hierarchical_memory_limit\",\n+                           \"Hierarchical Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, hier_memlimit)\n+    \/\/ Backward compatibility:\n+    log_trace(os, container)(\"Memory Limit is: \" JULONG_FORMAT, hier_memlimit);\n+    if (hier_memlimit >= os::Linux::physical_memory()) {\n+      log_trace(os, container)(\"Hierarchical Memory Limit is: Unlimited\");\n+      return (jlong)-1;\n+    }\n+    return (jlong)hier_memlimit;\n+  }\n@@ -94,1 +106,0 @@\n-\n@@ -97,10 +108,0 @@\n-    CgroupV1MemoryController* mem_controller = reinterpret_cast<CgroupV1MemoryController*>(_memory->controller());\n-    if (mem_controller->is_hierarchical()) {\n-      GET_CONTAINER_INFO_LINE(julong, _memory->controller(), \"\/memory.stat\", \"hierarchical_memory_limit\",\n-                             \"Hierarchical Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, hier_memlimit)\n-      if (hier_memlimit >= os::Linux::physical_memory()) {\n-        log_trace(os, container)(\"Hierarchical Memory Limit is: Unlimited\");\n-      } else {\n-        return (jlong)hier_memlimit;\n-      }\n-    }\n@@ -109,3 +110,1 @@\n-  else {\n-    return (jlong)memlimit;\n-  }\n+  return (jlong)memlimit;\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -310,10 +310,10 @@\n-        long retval = getLongValue(memory, \"memory.limit_in_bytes\");\n-        if (retval > CgroupV1SubsystemController.UNLIMITED_MIN) {\n-            if (memory.isHierarchical()) {\n-                \/\/ memory.limit_in_bytes returned unlimited, attempt\n-                \/\/ hierarchical memory limit\n-                String match = \"hierarchical_memory_limit\";\n-                retval = CgroupV1SubsystemController.getLongValueMatchingLine(memory,\n-                                                            \"memory.stat\",\n-                                                            match);\n-            }\n+        long retval;\n+        if (memory.isHierarchical()) {\n+            \/\/ memory.limit_in_bytes returned unlimited, attempt\n+            \/\/ hierarchical memory limit\n+            String match = \"hierarchical_memory_limit\";\n+            retval = CgroupV1SubsystemController.getLongValueMatchingLine(memory,\n+                                                        \"memory.stat\",\n+                                                        match);\n+        } else {\n+            retval = getLongValue(memory, \"memory.limit_in_bytes\");\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.io.IOException;\n@@ -52,1 +53,1 @@\n-    public static final String CONTROLLERS_PATH = CONTROLLERS_PATH_OUTER + \"\/\" + CGROUP_INNER;\n+    public static final String CONTROLLERS_PATH_INNER = CONTROLLERS_PATH_OUTER + \"\/\" + CGROUP_INNER;\n@@ -57,1 +58,2 @@\n-    public static final int MEMORY_MAX = 500 * 1024 * 1024;\n+    public static final int MEMORY_MAX_OUTER = 500 * 1024 * 1024;\n+    public static final int MEMORY_MAX_INNER = MEMORY_MAX_OUTER * 2;\n@@ -67,2 +69,1 @@\n-    public static OutputAnalyzer pSystem(List<String> args, String rootFailStderr) throws Exception {\n-        System.err.println(LINE_DELIM + \" command: \" + String.join(\" \",args));\n+    public static OutputAnalyzer pSystem(List<String> args, String failStderr, String failExplanation, String ignoreStderr) throws Exception {\n@@ -77,2 +78,5 @@\n-        if (!rootFailStderr.isEmpty() && output.getStderr().equals(rootFailStderr + \"\\n\")) {\n-            throw new SkippedException(\"Missing root permission failure stderr has been found: \" + rootFailStderr);\n+        if (!failStderr.isEmpty() && output.getStderr().equals(failStderr + \"\\n\")) {\n+            throw new SkippedException(failExplanation + \": \" + failStderr);\n+        }\n+        if (!ignoreStderr.isEmpty() && output.getStderr().equals(ignoreStderr + \"\\n\")) {\n+            return output;\n@@ -85,1 +89,1 @@\n-        return pSystem(args, \"\");\n+        return pSystem(args, \"\", \"\", \"\");\n@@ -94,1 +98,10 @@\n-        pSystem(cgdelete);\n+        try {\n+            pSystem(cgdelete,\n+                \"cgdelete: libcgroup initialization failed: Cgroup is not mounted\", \"cgroup\/cgroup2 is not mounted\",\n+                \"cgdelete: cannot remove group '\" + CGROUP_OUTER + \"': No such file or directory\");\n+        } catch (IOException e) {\n+            if (e.toString().equals(\"java.io.IOException: Cannot run program \\\"cgdelete\\\": error=2, No such file or directory\")) {\n+                throw new SkippedException(\"libcgroup-tools is not installed\");\n+            }\n+            throw e;\n+        }\n@@ -99,2 +112,2 @@\n-        cgcreate.add(CONTROLLERS_PATH);\n-        pSystem(cgcreate, \"cgcreate: can't create cgroup \" + CGROUP_OUTER + \"\/\" + CGROUP_INNER + \": Cgroup, operation not allowed\");\n+        cgcreate.add(CONTROLLERS_PATH_INNER);\n+        pSystem(cgcreate, \"cgcreate: can't create cgroup \" + CGROUP_OUTER + \"\/\" + CGROUP_INNER + \": Cgroup, operation not allowed\", \"Missing root permission\", \"\");\n@@ -109,1 +122,1 @@\n-        Matcher matcher = Pattern.compile(\"^(?:\\\\S+\\\\s+){4}(\\\\S+)\\\\s.*\\\\scgroup2(?:\\\\s+\\\\S+){2}$\", Pattern.MULTILINE).matcher(mountInfo);\n+        Matcher matcher = Pattern.compile(\"^(?:\\\\S+\\\\s+){4}(\\\\S+)\\\\s.*\\\\scgroup(?:(2)(?:\\\\s+\\\\S+){2}|\\\\s+\\\\S+\\\\s+(?:\\\\S*,)?memory(?:,\\\\S*)?)$\", Pattern.MULTILINE).matcher(mountInfo);\n@@ -112,1 +125,1 @@\n-            throw new SkippedException(\"cgroup2 filesystem mount point not found\");\n+            throw new SkippedException(\"cgroup\/cgroup2 filesystem mount point not found\");\n@@ -115,2 +128,6 @@\n-        System.err.println(LINE_DELIM + \" cgroup2 mount point: \" + sysFsCgroup);\n-        Files.writeString(Path.of(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/memory.max\"), \"\" + MEMORY_MAX);\n+        boolean isCgroup2 = matcher.group(2) != null;\n+        System.err.println(LINE_DELIM + \" \" + (isCgroup2 ? \"cgroup2\" : \"cgroup1\") + \" mount point: \" + sysFsCgroup);\n+        String memory_max_filename = isCgroup2 ? \"memory.max\" : \"memory.limit_in_bytes\";\n+        Files.writeString(Path.of(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/\" + memory_max_filename), \"\" + MEMORY_MAX_OUTER);\n+        \/\/ CgroupV1Subsystem::read_memory_limit_in_bytes considered hierarchical_memory_limit only when inner memory.limit_in_bytes is unlimited.\n+        Files.writeString(Path.of(sysFsCgroup + \"\/\" + CGROUP_OUTER + \"\/\" + CGROUP_INNER + \"\/\" + memory_max_filename), \"\" + MEMORY_MAX_INNER);\n@@ -122,1 +139,1 @@\n-        cgexec.add(CONTROLLERS_PATH);\n+        cgexec.add(CONTROLLERS_PATH_INNER);\n@@ -131,1 +148,1 @@\n-        output.shouldMatch(\"\\\\[trace\\\\]\\\\[os,container\\\\] Memory Limit is: \" + MEMORY_MAX + \"$\");\n+        output.shouldMatch(\"\\\\[trace\\\\]\\\\[os,container\\\\] \" + (isCgroup2 ? \"\" : \"Hierarchical \") + \"Memory Limit is: \" + MEMORY_MAX_OUTER + \"$\");\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/NestedCgroup.java","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        assertEquals(mountPoint, ctrl.path());\n+        assertEquals(mountPoint, ctrl.path(0));\n@@ -64,1 +64,1 @@\n-        assertEquals(expectedPath, ctrl.path());\n+        assertEquals(expectedPath, ctrl.path(0));\n@@ -75,1 +75,1 @@\n-        assertEquals(expectedPath, ctrl.path());\n+        assertEquals(expectedPath, ctrl.path(0));\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        assertEquals(mountPoint, ctrl.path());\n+        assertEquals(mountPoint, ctrl.path(0));\n@@ -61,1 +61,1 @@\n-        assertEquals(expectedPath, ctrl.path());\n+        assertEquals(expectedPath, ctrl.path(0));\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV2SubsystemControllerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-        public String path() {\n+        public String path(int dir_ix) {\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemController.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}