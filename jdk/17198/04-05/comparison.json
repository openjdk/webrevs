{"files":[{"patch":"@@ -175,0 +175,6 @@\n+jlong CgroupV2Subsystem::read_hierarchical_memsw_limit() const {\n+  GET_CONTAINER_INFO_LINE(julong, _unified, \"\/memory.stat\", \"hierarchical_memsw_limit\",\n+                         \"Hierarchical Memory and Swap Limit is : \" JULONG_FORMAT, JULONG_FORMAT, hier_memswlimit)\n+  return hier_memswlimit;\n+}\n+\n@@ -181,6 +187,7 @@\n-  char *first_val = mem_swp_limit_val(0);\n-  if (first_val == nullptr) {\n-    \/\/ Some container tests rely on this trace logging to happen.\n-    log_trace(os, container)(\"Memory and Swap Limit is: %d\", OSCONTAINER_ERROR);\n-    \/\/ swap disabled at kernel level, treat it as no swap\n-    return read_memory_limit_in_bytes();\n+  jlong swap_limit = OSCONTAINER_ERROR;\n+  static bool hierarchical_failed = false;\n+  if (!hierarchical_failed) {\n+    swap_limit = read_hierarchical_memsw_limit();\n+    if (swap_limit == OSCONTAINER_ERROR) {\n+      hierarchical_failed = true;\n+    }\n@@ -188,5 +195,15 @@\n-  jlong swap_limit = dir_iterate(&CgroupV2Subsystem::mem_swp_limit_val, first_val);\n-  if (swap_limit >= 0) {\n-    jlong memory_limit = read_memory_limit_in_bytes();\n-    assert(memory_limit >= 0, \"swap limit without memory limit?\");\n-    return memory_limit + swap_limit;\n+  if (swap_limit == OSCONTAINER_ERROR) {\n+    \/\/ Older kernels did not support \"hierarchical_memsw_limit\" for cgroup2.\n+    char *first_val = mem_swp_limit_val(0);\n+    if (first_val == nullptr) {\n+      \/\/ Some container tests rely on this trace logging to happen.\n+      log_trace(os, container)(\"Memory and Swap Limit is: %d\", OSCONTAINER_ERROR);\n+      \/\/ swap disabled at kernel level, treat it as no swap\n+      return read_memory_limit_in_bytes();\n+    }\n+    swap_limit = dir_iterate(&CgroupV2Subsystem::mem_swp_limit_val, first_val);\n+    if (swap_limit >= 0) {\n+      jlong memory_limit = read_memory_limit_in_bytes();\n+      assert(memory_limit >= 0, \"swap limit without memory limit?\");\n+      return memory_limit + swap_limit;\n+    }\n@@ -211,0 +228,6 @@\n+jlong CgroupV2Subsystem::read_hierarchical_memory_limit() const {\n+  GET_CONTAINER_INFO_LINE(julong, _unified, \"\/memory.stat\", \"hierarchical_memory_limit\",\n+                         \"Hierarchical Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, hier_memlimit)\n+  return hier_memlimit;\n+}\n+\n@@ -220,1 +243,12 @@\n-  jlong total_limit = dir_iterate(&CgroupV2Subsystem::mem_limit_val);\n+  jlong total_limit = OSCONTAINER_ERROR;\n+  static bool hierarchical_failed = false;\n+  if (!hierarchical_failed) {\n+    total_limit = read_hierarchical_memory_limit();\n+    if (total_limit == OSCONTAINER_ERROR) {\n+      hierarchical_failed = true;\n+    }\n+  }\n+  if (total_limit == OSCONTAINER_ERROR) {\n+    \/\/ Older kernels did not support \"hierarchical_memory_limit\" for cgroup2.\n+    total_limit = dir_iterate(&CgroupV2Subsystem::mem_limit_val);\n+  }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":46,"deletions":12,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+    jlong read_hierarchical_memsw_limit() const;\n+    jlong read_hierarchical_memory_limit() const;\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  const char* expected_path;\n+  const char** expected_path;\n@@ -39,0 +39,12 @@\n+static void test_expected_path(const TestCase *testCase, CgroupController* ctrl) {\n+  for (size_t dir_ix = 0;; ++dir_ix) {\n+    const char *expected_path = testCase->expected_path[dir_ix];\n+    const char *subsystem_path = ctrl->subsystem_path(dir_ix);\n+    if (expected_path == nullptr || subsystem_path == nullptr) {\n+      ASSERT_EQ(expected_path, subsystem_path);\n+      break;\n+    }\n+    ASSERT_STREQ(expected_path, subsystem_path);\n+  }\n+}\n+\n@@ -40,0 +52,4 @@\n+  static const char* host_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\",\n+    nullptr\n+  };\n@@ -44,1 +60,5 @@\n-    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\" \/\/ expected_path\n+    host_expected_path                                                   \/\/ expected_path\n+  };\n+  static const char* container_engine_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\/mem\",\n+    nullptr\n@@ -50,1 +70,1 @@\n-    \"\/sys\/fs\/cgroup\/mem\"                             \/\/ expected_path\n+    container_engine_expected_path                   \/\/ expected_path\n@@ -59,1 +79,1 @@\n-    ASSERT_STREQ(testCases[i]->expected_path, ctrl->subsystem_path(0 \/* dir_ix *\/));\n+    test_expected_path(testCases[i], ctrl);\n@@ -64,0 +84,4 @@\n+  static const char* at_mount_root_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\",\n+    nullptr\n+  };\n@@ -65,4 +89,8 @@\n-    \"\/sys\/fs\/cgroup\",       \/\/ mount_path\n-    nullptr,                \/\/ root_path, ignored\n-    \"\/\",                    \/\/ cgroup_path\n-    \"\/sys\/fs\/cgroup\"        \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\",           \/\/ mount_path\n+    nullptr,                       \/\/ root_path, ignored\n+    \"\/\",                        \/\/ cgroup_path\n+    at_mount_root_expected_path \/\/ expected_path\n+  };\n+  static const char* sub_path_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\/foobar\",\n+    nullptr\n@@ -74,1 +102,1 @@\n-    \"\/sys\/fs\/cgroup\/foobar\" \/\/ expected_path\n+    sub_path_expected_path  \/\/ expected_path\n@@ -76,1 +104,24 @@\n-  int length = 2;\n+  static const char* nested_path_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\/outer\/inner\",\n+    \"\/sys\/fs\/cgroup\/outer\",\n+    nullptr\n+  };\n+  TestCase nested_path = {\n+    \"\/sys\/fs\/cgroup\",         \/\/ mount_path\n+    nullptr,                     \/\/ root_path, ignored\n+    \"\/outer\/inner\",           \/\/ cgroup_path\n+    nested_path_expected_path \/\/ expected_path\n+  };\n+  static const char* nested_path_doubleslash_expected_path[] = {\n+    \"\/sys\/fs\/cgroup\/outer\/\/inner\",\n+    \"\/sys\/fs\/cgroup\/outer\/\",\n+    \"\/sys\/fs\/cgroup\/outer\",\n+    nullptr\n+  };\n+  TestCase nested_path_doubleslash = {\n+    \"\/sys\/fs\/cgroup\",                     \/\/ mount_path\n+    nullptr,                                 \/\/ root_path, ignored\n+    \"\/outer\/\/inner\",                      \/\/ cgroup_path\n+    nested_path_doubleslash_expected_path \/\/ expected_path\n+  };\n+  int length = 4;\n@@ -78,1 +129,3 @@\n-                            &sub_path };\n+                            &sub_path,\n+                            &nested_path,\n+                            &nested_path_doubleslash };\n@@ -82,1 +135,1 @@\n-    ASSERT_STREQ(testCases[i]->expected_path, ctrl->subsystem_path(0 \/* dir_ix *\/));\n+    test_expected_path(testCases[i], ctrl);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux_cgroups.cpp","additions":65,"deletions":12,"binary":false,"changes":77,"status":"modified"}]}