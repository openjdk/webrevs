{"files":[{"patch":"@@ -105,0 +105,2 @@\n+  const bool check_access = !orig_callee->is_method_handle_intrinsic(); \/\/ method handle intrinsics don't perform access checks\n+\n@@ -242,1 +244,2 @@\n-                                                   speculative_receiver_type);\n+                                                   speculative_receiver_type,\n+                                                   check_access);\n@@ -259,0 +262,1 @@\n+        assert(check_access, \"required\");\n@@ -260,1 +264,1 @@\n-                                                      profile.receiver(0));\n+                                                 profile.receiver(0));\n@@ -271,0 +275,1 @@\n+            assert(check_access, \"required\");\n@@ -272,1 +277,1 @@\n-                                                               profile.receiver(1));\n+                                                          profile.receiver(1));\n@@ -345,0 +350,1 @@\n+        assert(check_access, \"required\");\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-                \"-XX:CompileCommand=dontinline,compiler.jsr292.MHInlineTest::test*\",\n+                \"-XX:CompileCommand=quiet\",\n+                \"-XX:CompileCommand=compileonly,compiler.jsr292.MHInlineTest::test*\",\n@@ -63,0 +64,4 @@\n+            analyzer.shouldContain(\"compiler.jsr292.MHInlineTest$A::package_final_x (3 bytes)   inline (hot)\");\n+            analyzer.shouldContain(\"compiler.jsr292.MHInlineTest$A::private_x (3 bytes)   inline (hot)\");\n+            analyzer.shouldContain(\"compiler.jsr292.MHInlineTest$A::package_static_x (3 bytes)   inline (hot)\");\n+\n@@ -66,1 +71,0 @@\n-            analyzer.shouldContain(\"compiler.jsr292.MHInlineTest$A::package_final_x (3 bytes)   inline (hot)\");\n@@ -69,1 +73,2 @@\n-            analyzer.shouldContain(\"compiler.jsr292.MHInlineTest$A::package_static_x (3 bytes)   inline (hot)\");\n+\n+            analyzer.shouldNotContain(\"failed to inline\");\n@@ -78,4 +83,5 @@\n-        public Class<?>         public_x() { return A.class; }\n-        protected Class<?>   protected_x() { return A.class; }\n-        Class<?>               package_x() { return A.class; }\n-        final Class<?>   package_final_x() { return A.class; }\n+        public            Class<?>        public_x() { return A.class; }\n+        protected         Class<?>     protected_x() { return A.class; }\n+        \/*package*\/       Class<?>       package_x() { return A.class; }\n+        \/*package*\/ final Class<?> package_final_x() { return A.class; }\n+        private           Class<?>       private_x() { return A.class; }\n@@ -83,1 +89,1 @@\n-        static Class<?> package_static_x() { return A.class; }\n+        \/*package*\/ static Class<?> package_static_x() { return A.class; }\n@@ -89,3 +95,3 @@\n-        @Override public    Class<?>    public_x() { return B.class; }\n-        @Override protected Class<?> protected_x() { return B.class; }\n-        @Override Class<?>             package_x() { return B.class; }\n+        @Override public      Class<?>    public_x() { return B.class; }\n+        @Override protected   Class<?> protected_x() { return B.class; }\n+        @Override \/*package*\/ Class<?>   package_x() { return B.class; }\n@@ -93,2 +99,2 @@\n-        private   Class<?>             private_x() { return B.class; }\n-        static    Class<?>      private_static_x() { return B.class; }\n+        private           Class<?>       private_x()    { return B.class; }\n+        private static Class<?>      private_static_x() { return B.class; }\n@@ -102,0 +108,1 @@\n+    static final MethodHandle A_PRIVATE_X;\n@@ -120,0 +127,2 @@\n+            A_PRIVATE_X = LOOKUP.findVirtual(\n+                    A.class, \"private_x\", MethodType.methodType(Class.class));\n@@ -132,1 +141,12 @@\n-    private static void testPublicMH() {\n+    \/* ============== public Class<?> public_x() ============== *\/\n+\n+    private static void testPublicMH(A recv) {\n+        try {\n+            Class<?> r = (Class<?>)A_PUBLIC_X.invokeExact(recv);\n+            assertEquals(r, B.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testPublicMHConst() {\n@@ -141,1 +161,12 @@\n-    private static void testProtectedMH() {\n+    \/* ============== protected Class<?> protected_x() ============== *\/\n+\n+    private static void testProtectedMH(A recv) {\n+        try {\n+            Class<?> r = (Class<?>)A_PROTECTED_X.invokeExact(recv);\n+            assertEquals(r, B.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testProtectedMHConst() {\n@@ -150,1 +181,12 @@\n-    private static void testPackageMH() {\n+    \/* ============== Class<?> package_x() ============== *\/\n+\n+    private static void testPackageMH(A recv) {\n+        try {\n+            Class<?> r = (Class<?>)A_PACKAGE_X.invokeExact(recv);\n+            assertEquals(r, B.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testPackageMHConst() {\n@@ -159,1 +201,3 @@\n-    private static void testPackageFinalMH() {\n+    \/* ============== final Class<?> package_final_x() ============== *\/\n+\n+    private static void testPackageFinalMH(A recv) {\n@@ -168,1 +212,1 @@\n-    private static void testPackageStaticMH() {\n+    private static void testPackageFinalMHConst() {\n@@ -170,1 +214,1 @@\n-            Class<?> r = (Class<?>)A_PACKAGE_STATIC_X.invokeExact();\n+            Class<?> r = (Class<?>)A_PACKAGE_FINAL_X.invokeExact(a);\n@@ -177,1 +221,30 @@\n-    private static void testPrivateMH() {\n+    \/* ============== private Class<?> private_x() ============== *\/\n+\n+    private static void testPrivateA_MH(A recv) {\n+        try {\n+            Class<?> r = (Class<?>)A_PRIVATE_X.invokeExact(recv);\n+            assertEquals(r, A.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testPrivateA_MHConst() {\n+        try {\n+            Class<?> r = (Class<?>)A_PRIVATE_X.invokeExact(a);\n+            assertEquals(r, A.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testPrivateB_MH(B recv) {\n+        try {\n+            Class<?> r = (Class<?>)B_PRIVATE_X.invokeExact(recv);\n+            assertEquals(r, B.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+    private static void testPrivateB_MHConst() {\n@@ -186,1 +259,13 @@\n-    private static void testPrivateStaticMH() {\n+    \/* ============== static ============== *\/\n+\n+    private static void testPackageStaticMHConst() {\n+        try {\n+            Class<?> r = (Class<?>)A_PACKAGE_STATIC_X.invokeExact();\n+            assertEquals(r, A.class);\n+        } catch (Throwable throwable) {\n+            throw new Error(throwable);\n+        }\n+    }\n+\n+\n+    private static void testPrivateStaticMHConst() {\n@@ -195,0 +280,2 @@\n+    \/* ====================================================================== *\/\n+\n@@ -198,19 +285,9 @@\n-                testPublicMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testProtectedMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testPackageMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testPackageFinalMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testPackageStaticMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testPrivateMH();\n-            }\n-            for (int i = 0; i < 20_000; i++) {\n-                testPrivateStaticMH();\n+                testPublicMH(a);       testPublicMHConst();\n+                testProtectedMH(a);    testProtectedMHConst();\n+                testPackageMH(a);      testPackageMHConst();\n+                testPackageFinalMH(a); testPackageFinalMHConst();\n+                testPrivateA_MH(a);    testPrivateA_MHConst();\n+                testPrivateB_MH((B)a); testPrivateB_MHConst();\n+\n+                testPackageStaticMHConst();\n+                testPrivateStaticMHConst();\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/MHInlineTest.java","additions":117,"deletions":40,"binary":false,"changes":157,"status":"modified"}]}