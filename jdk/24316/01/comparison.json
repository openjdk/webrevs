{"files":[{"patch":"@@ -259,1 +259,1 @@\n-  blob = writer.copy();\n+  blob = stack_trace->should_write() ? writer.copy() : writer.move();\n@@ -365,0 +365,2 @@\n+static GrowableArray<traceid>* _stacktrace_ids = nullptr;\n+\n@@ -366,0 +368,1 @@\n+  assert(_stacktrace_ids != nullptr, \"invariant\");\n@@ -368,0 +371,5 @@\n+    return;\n+  }\n+  const traceid stacktrace_id = sample->stack_trace_id();\n+  if (stacktrace_id != 0) {\n+    _stacktrace_ids->append(stacktrace_id);\n@@ -405,1 +413,9 @@\n-  write_sample_blobs(sampler, emit_all, thread);\n+  {\n+    ResourceMark rm(thread);\n+    _stacktrace_ids = new GrowableArray<traceid>(JfrOptionSet::old_object_queue_size());\n+    write_sample_blobs(sampler, emit_all, thread);\n+    if (_stacktrace_ids->is_nonempty()) {\n+      _stacktrace_ids->sort(sort_traceid);\n+      JfrStackTraceRepository::write_leak_profiler(_stacktrace_ids, thread);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+  assert(!_written, \"invariant\");\n@@ -106,0 +107,1 @@\n+  _written = true;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-  bool should_write() const { return !_written; }\n@@ -110,0 +109,1 @@\n+  bool should_write() const { return !_written; }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"jfr\/utilities\/jfrPredicate.hpp\"\n+#include \"jfr\/utilities\/jfrRelation.hpp\"\n@@ -31,0 +33,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -245,0 +248,33 @@\n+\n+static inline bool should_write(const JfrStackTrace* stacktrace, GrowableArray<traceid>* leakp_set) {\n+  assert(stacktrace != nullptr, \"invariant\");\n+  return stacktrace->should_write() && JfrPredicate<traceid, compare_traceid>::test(leakp_set, stacktrace->id());\n+}\n+\n+void JfrStackTraceRepository::write_leak_profiler(GrowableArray<traceid>* leakp_set, Thread* t) {\n+  assert(leakp_set != nullptr, \"invariant\");\n+  assert(leakp_set->is_nonempty(), \"invariant\");\n+  assert(t != nullptr, \"invariant\");\n+\n+  JfrCheckpointWriter writer(t);\n+  writer.write_type(TYPE_STACKTRACE);\n+  const int64_t count_offset = writer.reserve(sizeof(u4)); \/\/ Don't know how many yet\n+\n+  int count = 0;\n+  const JfrStackTraceRepository& repo = leak_profiler_instance();\n+\n+  for (u4 i = 0; i < TABLE_SIZE; ++i) {\n+    const JfrStackTrace* stacktrace = repo._table[i];\n+    while (stacktrace != nullptr) {\n+      if (should_write(stacktrace, leakp_set)) {\n+        stacktrace->write(writer);\n+        ++count;\n+      }\n+      stacktrace = stacktrace->next();\n+    }\n+  }\n+\n+  assert(count > 0, \"invariant\");\n+  assert(count <= leakp_set->length(), \"invariant\");\n+  writer.write_count(count, count_offset);\n+}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-class JfrCheckpointWriter;\n@@ -36,0 +35,3 @@\n+template <typename>\n+class GrowableArray;\n+\n@@ -65,0 +67,1 @@\n+  static void write_leak_profiler(GrowableArray<traceid>* leakp_set, Thread* t);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}