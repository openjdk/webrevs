{"files":[{"patch":"@@ -359,9 +359,7 @@\n-    } else {\n-      if (i < lgrp_spaces()->length() - 1) { \/\/ Middle chunks\n-        MutableSpace *ps = lgrp_spaces()->at(i - 1)->space();\n-        new_region = MemRegion(ps->end(),\n-                               chunk_byte_size >> LogHeapWordSize);\n-      } else { \/\/ Top chunk\n-        MutableSpace *ps = lgrp_spaces()->at(i - 1)->space();\n-        new_region = MemRegion(ps->end(), end());\n-      }\n+    } else if (i < lgrp_spaces()->length() - 1) { \/\/ Middle chunks\n+      MutableSpace* ps = lgrp_spaces()->at(i - 1)->space();\n+      new_region = MemRegion(ps->end(),\n+                             chunk_byte_size >> LogHeapWordSize);\n+    } else { \/\/ Top chunk\n+      MutableSpace* ps = lgrp_spaces()->at(i - 1)->space();\n+      new_region = MemRegion(ps->end(), end());\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -128,3 +128,0 @@\n-  size_t _base_space_size;\n-  void set_base_space_size(size_t v)                 { _base_space_size = v;      }\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}