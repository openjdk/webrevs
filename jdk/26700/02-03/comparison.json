{"files":[{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/gcArguments.hpp\"\n@@ -191,1 +190,1 @@\n-  os::realign_memory((char*) mr.start(), mr.byte_size(), SpaceAlignment);\n+  os::realign_memory((char*) mr.start(), mr.byte_size(), page_size());\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  \/\/ Check if SpaceAlignment needs adjustment\n+  \/\/ Adjust SpaceAlignment based on actually used large page size.\n@@ -75,16 +75,1 @@\n-    if (SpaceAlignment == default_space_alignment()) {\n-      \/\/ Opted out of using largepage because MinHeapSize is too small.\n-      assert(!is_aligned(SpaceAlignment, os::large_page_size()), \"inv\");\n-      assert(heap_rs.page_size() == os::vm_page_size(), \"inv\");\n-    } else {\n-      \/\/ Opted in to using largepage\n-      if (os::can_commit_large_page_memory()) {\n-        \/\/ Keep SpaceAlignment as is so that largepage can be formed\n-      } else {\n-        \/\/ Explicit largepage; use actual pagesize or the default\n-        SpaceAlignment = MAX2(heap_rs.page_size(), default_space_alignment());\n-      }\n-    }\n-  } else {\n-    assert(heap_rs.page_size() == os::vm_page_size(), \"inv\");\n-    assert(SpaceAlignment == default_space_alignment(), \"inv\");\n+    SpaceAlignment = MAX2(heap_rs.page_size(), default_space_alignment());\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  \/\/ OS page size used. If using transparent large pages, it's the ordinary page-size.\n+  \/\/ OS page size used. If using transparent large pages, it's the desired large page-size.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}