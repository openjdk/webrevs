{"files":[{"patch":"@@ -136,0 +136,1 @@\n+  ParallelScavengeHeap::set_desired_page_size(page_sz);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+size_t ParallelScavengeHeap::_desired_page_size = 0;\n@@ -68,2 +69,1 @@\n-  \/\/ If using largepage, SpaceAlignment is the desired largepage size.\n-  size_t desired_page_size = (SpaceAlignment == default_space_alignment())\n+  size_t desired_page_size = (_desired_page_size == 0)\n@@ -71,1 +71,1 @@\n-                           : SpaceAlignment;\n+                           : _desired_page_size;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,0 +79,3 @@\n+  \/\/ At startup, calculate the desired OS page-size based on heap size and large-page flags.\n+  static size_t _desired_page_size;\n+\n@@ -132,2 +135,9 @@\n-  static size_t default_space_alignment() {\n-    return 64 * K * HeapWordSize;\n+  constexpr static size_t default_space_alignment() {\n+    constexpr size_t alignment = 64 * K * HeapWordSize;\n+    static_assert(is_power_of_2(alignment), \"inv\");\n+    return alignment;\n+  }\n+\n+  static void set_desired_page_size(size_t page_size) {\n+    assert(is_power_of_2(page_size), \"precondition\");\n+    _desired_page_size = page_size;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"}]}