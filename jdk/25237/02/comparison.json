{"files":[{"patch":"@@ -154,2 +154,1 @@\n-            for (int i = head, to = (head += newSpace); i < to; i++)\n-                es[i] = null;\n+            Arrays.fill(es, head, head += newSpace, null);\n@@ -1049,1 +1048,1 @@\n-            for (; i < to; i++) es[i] = null;\n+            Arrays.fill(es, i, to, null);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayDeque.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.util.ArrayDeque;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+public class ClearBenchmarkTestJMH {\n+\n+    private static final int LIST_SIZE = 10_000_000;\n+\n+    private Object[] array;\n+\n+    @Setup\n+    public void setUp() {\n+        array = new Object[LIST_SIZE];\n+        for (int i = 0; i < LIST_SIZE; i++)\n+            array[i] = new Object();\n+    }\n+\n+    @Benchmark\n+    @Measurement(iterations = 10)\n+    @Warmup(iterations = 3)\n+    public void fillAndClear(Blackhole bh) {\n+        ArrayDeque<Object> a = new ArrayDeque<>(LIST_SIZE);\n+        Collections.addAll(a, array);\n+        a.clear();\n+        bh.consume(a);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/ArrayDeque\/ClearBenchmarkTestJMH.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}