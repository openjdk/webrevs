{"files":[{"patch":"@@ -1044,0 +1044,1 @@\n+        !u->depends_only_on_test() && \/\/ preserve dependency on test\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8342496\n+ * @summary C2\/Shenandoah: SEGV in compiled code when running jcstress\n+ * @requires vm.flavor == \"server\"\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:+StressGCM\n+ *                   -XX:+StressLCM -XX:+UseShenandoahGC -XX:LoopMaxUnroll=0 -XX:StressSeed=270847015 TestLoadBypassesNullCheck\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:+StressGCM\n+ *                   -XX:+StressLCM -XX:+UseShenandoahGC -XX:LoopMaxUnroll=0 TestLoadBypassesNullCheck\n+ *\n+ *\/\n+\n+public class TestLoadBypassesNullCheck {\n+    private static A fieldA = new A();\n+    private static Object fieldO = new Object();\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1();\n+        }\n+        fieldA = null;\n+        try {\n+            test1();\n+        } catch (NullPointerException npe) {\n+        }\n+    }\n+\n+    private static boolean test1() {\n+        for (int i = 0; i < 1000; i++) {\n+            volatileField = 42;\n+            A a = fieldA;\n+            Object o = a.fieldO;\n+            if (o == fieldO) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static class A {\n+        public Object fieldO;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLoadBypassesNullCheck.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}