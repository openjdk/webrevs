{"files":[{"patch":"@@ -47,0 +47,3 @@\n+hotspot_null_check = \\\n+  sources\n+\n@@ -224,1 +227,2 @@\n-  -compiler\/runtime\/Test6826736.java\n+  -compiler\/runtime\/Test6826736.java \\\n+  sources\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343802\n+ * @summary Test prevent NULL backsliding in hotspot code and tests\n+ * @run main TestNoNULL\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestNoNULL {\n+    private static final List<Path> files = new ArrayList<>();\n+    private static final Set<String> excludedSourceFiles = new HashSet<>();\n+    private static final Set<String> excludedTestFiles = new HashSet<>();\n+    private static final Set<String> excludedTestExtensions = Set.of(\".c\", \".java\", \".jar\");\n+    private static final Pattern NULL_PATTERN = Pattern.compile(\"\\\\bNULL\\\\b\");\n+    private static Path dir = Paths.get(System.getProperty(\"test.src\"));\n+\n+    public static void main(String[] args) throws IOException {\n+        int maxIter = 20;\n+        while (maxIter-- > 0 && dir != null && !Files.exists(dir.resolve(\"src\"))) {\n+            dir = dir.getParent();\n+        }\n+\n+        if (dir == null) {\n+            throw new RuntimeException(\"Could not locate the 'src' directory within 20 parent directories.\");\n+        }\n+\n+        Path srcPath = dir.resolve(\"src\").resolve(\"hotspot\");\n+        Path testPath = dir.resolve(\"test\").resolve(\"hotspot\");\n+\n+        initializeExcludedPaths(dir);\n+\n+        processFiles(srcPath, excludedSourceFiles, false);\n+        processFiles(testPath, excludedTestFiles, true);\n+\n+        boolean foundNull = false;\n+        for (Path file : files) {\n+            if (checkForNull(file)) {\n+                foundNull = true;\n+            }\n+        }\n+\n+        if (foundNull) {\n+            throw new RuntimeException(\"Found usage of 'NULL' in source files. See errors above.\");\n+        }\n+    }\n+\n+    private static void initializeExcludedPaths(Path rootDir) {\n+        List<String> sourceExclusions = List.of(\n+                \"src\/hotspot\/share\/prims\/jvmti.xml\",\n+                \"src\/hotspot\/share\/prims\/jvmti.xsl\",\n+                \"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp\",\n+                \"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp\",\n+                \"src\/hotspot\/os\/windows\/os_windows.cpp\" \/\/todo: remove after JDK-8349417\n+        );\n+\n+        List<String> testExclusions = List.of(\n+                \"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/README\",\n+                \"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/README\"\n+        );\n+\n+        sourceExclusions.forEach(relativePath ->  excludedSourceFiles.add(rootDir.resolve(relativePath).normalize().toString()));\n+        testExclusions.forEach(relativePath ->  excludedTestFiles.add(rootDir.resolve(relativePath).normalize().toString()));\n+    }\n+\n+    private static void processFiles(Path directory, Set<String> excludedFiles, boolean excludeExtensions) throws IOException {\n+        Files.walkFileTree(directory, new SimpleFileVisitor<>() {\n+            @Override\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n+                if (isIncluded(file, excludedFiles, excludeExtensions)) {\n+                    files.add(file);\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+\n+            @Override\n+            public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+    }\n+\n+    private static boolean isIncluded(Path file, Set<String> excludedFiles, boolean excludeExtensions) {\n+        String filePath = file.normalize().toString();\n+\n+        if (excludedFiles.contains(filePath)) {\n+            return false;\n+        }\n+\n+        if (excludeExtensions) {\n+            for (String ext : excludedTestExtensions) {\n+                if (filePath.endsWith(ext)) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private static boolean checkForNull(Path path) throws IOException {\n+        boolean found = false;\n+        List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);\n+\n+        for (int i = 0; i < lines.size(); i++) {\n+            Matcher matcher = NULL_PATTERN.matcher(lines.get(i));\n+            if (matcher.find()) {\n+                found = true;\n+                System.err.printf(\"Error: 'NULL' found in %s at line %d:%n%s%n\", path, i + 1, lines.get(i));\n+            }\n+        }\n+        return found;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/sources\/TestNoNULL.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}