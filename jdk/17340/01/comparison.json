{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"memory\/metaspace.hpp\"\n@@ -43,1 +44,5 @@\n-  } \/\/ end: low-address reservation\n+  } else {\n+    \/\/ If we cannot use zero-based encoding (when CDS is enabled), optimizing for an\n+    \/\/ encoding base < 4GB can still make sense since such a base allows for shorter imm32 moves\n+    result = reserve_address_space_X(0, nth_bit(32), size, Metaspace::reserve_alignment(), aslr);\n+  }\n@@ -45,1 +50,0 @@\n-  \/\/ Nothing more to optimize for on x64. If base != 0, we will always emit the full 64-bit immediate.\n","filename":"src\/hotspot\/cpu\/x86\/compressedKlass_x86.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -5549,0 +5549,1 @@\n+  BLOCK_COMMENT(\"decode_klass_not_null\");\n@@ -5560,1 +5561,2 @@\n-    mov64(tmp, (int64_t)CompressedKlassPointers::base());\n+    \/\/ Uses 32-bit mov if base is small enough\n+    movptr(tmp, (intptr_t)CompressedKlassPointers::base());\n@@ -5580,1 +5582,2 @@\n-      mov64(dst, (int64_t)CompressedKlassPointers::base());\n+      \/\/ Uses 32-bit mov if base is small enough\n+      movptr(dst, (intptr_t)CompressedKlassPointers::base());\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,2 @@\n-                output.shouldNotContain(tryReserveForUnscaled);\n+                \/\/ We always try to allocate below 4 GB.\n+                output.shouldContain(\"reserve_between (range [0x0000000000000000-0x0000000100000000)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedCPUSpecificClassSpaceReservation.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}