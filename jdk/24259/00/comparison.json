{"files":[{"patch":"@@ -1803,6 +1803,0 @@\n-\/\/ Not supported\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -797,4 +797,0 @@\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2012,6 +2012,0 @@\n-\/\/ Not supported\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -941,4 +941,0 @@\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2023,4 +2023,0 @@\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -500,7 +500,0 @@\n-\n-\/\/ Not supported\n-address TemplateInterpreterGenerator::generate_Float_intBitsToFloat_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Float_floatToRawIntBits_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_longBitsToDouble_entry() { return nullptr; }\n-address TemplateInterpreterGenerator::generate_Double_doubleToRawLongBits_entry() { return nullptr; }\n-\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1447,24 +1447,0 @@\n-#if defined(IA32) && !defined(ZERO)\n-      \/\/ The following native methods:\n-      \/\/\n-      \/\/ java.lang.Float.intBitsToFloat\n-      \/\/ java.lang.Float.floatToRawIntBits\n-      \/\/ java.lang.Double.longBitsToDouble\n-      \/\/ java.lang.Double.doubleToRawLongBits\n-      \/\/\n-      \/\/ are called through the interpreter even if interpreter native stubs\n-      \/\/ are not preferred (i.e., calling through adapter handlers is preferred).\n-      \/\/ The reason is that on x86_32 signaling NaNs (sNaNs) are not preserved\n-      \/\/ if the version of the methods from the native libraries is called.\n-      \/\/ As the interpreter and the C2-intrinsified version of the methods preserves\n-      \/\/ sNaNs, that would result in an inconsistent way of handling of sNaNs.\n-      if ((UseSSE >= 1 &&\n-          (method->intrinsic_id() == vmIntrinsics::_intBitsToFloat ||\n-           method->intrinsic_id() == vmIntrinsics::_floatToRawIntBits)) ||\n-          (UseSSE >= 2 &&\n-           (method->intrinsic_id() == vmIntrinsics::_longBitsToDouble ||\n-            method->intrinsic_id() == vmIntrinsics::_doubleToRawLongBits))) {\n-        return nullptr;\n-      }\n-#endif \/\/ IA32 && !ZERO\n-\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -133,4 +133,0 @@\n-      case vmIntrinsics::_intBitsToFloat:    return java_lang_Float_intBitsToFloat;\n-      case vmIntrinsics::_floatToRawIntBits: return java_lang_Float_floatToRawIntBits;\n-      case vmIntrinsics::_longBitsToDouble:  return java_lang_Double_longBitsToDouble;\n-      case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;\n@@ -227,8 +223,0 @@\n-  case java_lang_Float_intBitsToFloat\n-                                  : return vmIntrinsics::_intBitsToFloat;\n-  case java_lang_Float_floatToRawIntBits\n-                                  : return vmIntrinsics::_floatToRawIntBits;\n-  case java_lang_Double_longBitsToDouble\n-                                  : return vmIntrinsics::_longBitsToDouble;\n-  case java_lang_Double_doubleToRawLongBits\n-                                  : return vmIntrinsics::_doubleToRawLongBits;\n@@ -334,4 +322,0 @@\n-    case java_lang_Float_intBitsToFloat       : tty->print(\"java_lang_Float_intBitsToFloat\"); break;\n-    case java_lang_Float_floatToRawIntBits    : tty->print(\"java_lang_Float_floatToRawIntBits\"); break;\n-    case java_lang_Double_longBitsToDouble    : tty->print(\"java_lang_Double_longBitsToDouble\"); break;\n-    case java_lang_Double_doubleToRawLongBits : tty->print(\"java_lang_Double_doubleToRawLongBits\"); break;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-    java_lang_Float_intBitsToFloat,                             \/\/ implementation of java.lang.Float.intBitsToFloat()\n-    java_lang_Float_floatToRawIntBits,                          \/\/ implementation of java.lang.Float.floatToRawIntBits()\n@@ -95,2 +93,0 @@\n-    java_lang_Double_longBitsToDouble,                          \/\/ implementation of java.lang.Double.longBitsToDouble()\n-    java_lang_Double_doubleToRawLongBits,                       \/\/ implementation of java.lang.Double.doubleToRawLongBits()\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -235,5 +235,0 @@\n-  native_method_entry(java_lang_Float_intBitsToFloat)\n-  native_method_entry(java_lang_Float_floatToRawIntBits)\n-  native_method_entry(java_lang_Double_longBitsToDouble)\n-  native_method_entry(java_lang_Double_doubleToRawLongBits)\n-\n@@ -490,11 +485,0 @@\n-\n-  \/\/ On x86_32 platforms, a special entry is generated for the following four methods.\n-  \/\/ On other platforms the native entry is used to enter these methods.\n-  case Interpreter::java_lang_Float_intBitsToFloat\n-                                           : entry_point = generate_Float_intBitsToFloat_entry(); break;\n-  case Interpreter::java_lang_Float_floatToRawIntBits\n-                                           : entry_point = generate_Float_floatToRawIntBits_entry(); break;\n-  case Interpreter::java_lang_Double_longBitsToDouble\n-                                           : entry_point = generate_Double_longBitsToDouble_entry(); break;\n-  case Interpreter::java_lang_Double_doubleToRawLongBits\n-                                           : entry_point = generate_Double_doubleToRawLongBits_entry(); break;\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -102,4 +102,0 @@\n-  address generate_Float_intBitsToFloat_entry();\n-  address generate_Float_floatToRawIntBits_entry();\n-  address generate_Double_longBitsToDouble_entry();\n-  address generate_Double_doubleToRawLongBits_entry();\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}