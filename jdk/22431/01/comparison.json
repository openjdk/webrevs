{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n-import java.util.EnumSet;\n@@ -64,1 +63,0 @@\n-import java.util.stream.Collectors;\n@@ -330,1 +328,1 @@\n-                } catch (ProviderNotFoundException | SecurityException ex) {\n+                } catch (ProviderNotFoundException ex) {\n@@ -559,1 +557,1 @@\n-        public ArchiveContainer(Path archivePath) throws IOException, ProviderNotFoundException, SecurityException {\n+        public ArchiveContainer(Path archivePath) throws IOException, ProviderNotFoundException {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1763,7 +1763,1 @@\n-        long mod = 0;\n-        try {\n-            mod = filename.getLastModified();\n-        } catch (SecurityException e) {\n-            throw new AssertionError(\"CRT: couldn't get source file modification date: \" + e.getMessage());\n-        }\n-        return mod;\n+        return filename.getLastModified();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.List;\n@@ -77,1 +76,0 @@\n-                    .checkSecurityManager()\n@@ -111,13 +109,0 @@\n-    \/**\n-     * Checks if a security manager is present and throws an exception if so.\n-     * @return this object\n-     * @throws Fault if a security manager is present\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private SourceLauncher checkSecurityManager() throws Fault {\n-        if (System.getSecurityManager() != null) {\n-            throw new Fault(Errors.SecurityManager);\n-        }\n-        return this;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.nio.file.Path;\n@@ -65,1 +62,0 @@\n-import com.sun.tools.javac.file.JavacFileManager;\n@@ -170,1 +166,0 @@\n-    private SecurityException processorLoaderException;\n@@ -271,12 +266,11 @@\n-        try {\n-            if (fileManager.hasLocation(ANNOTATION_PROCESSOR_MODULE_PATH)) {\n-                try {\n-                    serviceLoader = fileManager.getServiceLoader(ANNOTATION_PROCESSOR_MODULE_PATH, Processor.class);\n-                } catch (IOException e) {\n-                    throw new Abort(e);\n-                }\n-            } else {\n-                \/\/ If processorpath is not explicitly set, use the classpath.\n-                processorClassLoader = fileManager.hasLocation(ANNOTATION_PROCESSOR_PATH)\n-                    ? fileManager.getClassLoader(ANNOTATION_PROCESSOR_PATH)\n-                    : fileManager.getClassLoader(CLASS_PATH);\n+        if (fileManager.hasLocation(ANNOTATION_PROCESSOR_MODULE_PATH)) {\n+            try {\n+                serviceLoader = fileManager.getServiceLoader(ANNOTATION_PROCESSOR_MODULE_PATH, Processor.class);\n+            } catch (IOException e) {\n+                throw new Abort(e);\n+            }\n+        } else {\n+            \/\/ If processorpath is not explicitly set, use the classpath.\n+            processorClassLoader = fileManager.hasLocation(ANNOTATION_PROCESSOR_PATH)\n+                ? fileManager.getClassLoader(ANNOTATION_PROCESSOR_PATH)\n+                : fileManager.getClassLoader(CLASS_PATH);\n@@ -284,2 +278,2 @@\n-                if (options.isSet(\"accessInternalAPI\"))\n-                    ModuleHelper.addExports(getClass().getModule(), processorClassLoader.getUnnamedModule());\n+            if (options.isSet(\"accessInternalAPI\"))\n+                ModuleHelper.addExports(getClass().getModule(), processorClassLoader.getUnnamedModule());\n@@ -287,3 +281,2 @@\n-                if (processorClassLoader != null && processorClassLoader instanceof Closeable closeable) {\n-                    compiler.closeables = compiler.closeables.prepend(closeable);\n-                }\n+            if (processorClassLoader != null && processorClassLoader instanceof Closeable closeable) {\n+                compiler.closeables = compiler.closeables.prepend(closeable);\n@@ -291,2 +284,0 @@\n-        } catch (SecurityException e) {\n-            processorLoaderException = e;\n@@ -308,20 +299,16 @@\n-            if (processorLoaderException == null) {\n-                \/*\n-                 * If the \"-processor\" option is used, search the appropriate\n-                 * path for the named class.  Otherwise, use a service\n-                 * provider mechanism to create the processor iterator.\n-                 *\n-                 * Note: if an explicit processor path is not set,\n-                 * only the class path and _not_ the module path are\n-                 * searched for processors.\n-                 *\/\n-                String processorNames = options.get(Option.PROCESSOR);\n-                if (fileManager.hasLocation(ANNOTATION_PROCESSOR_MODULE_PATH)) {\n-                    processorIterator = (processorNames == null) ?\n-                            new ServiceIterator(serviceLoader, log) :\n-                            new NameServiceIterator(serviceLoader, log, processorNames);\n-                } else if (processorNames != null) {\n-                    processorIterator = new NameProcessIterator(processorNames, processorClassLoader, log);\n-                } else {\n-                    processorIterator = new ServiceIterator(processorClassLoader, log);\n-                }\n+            \/*\n+             * If the \"-processor\" option is used, search the appropriate\n+             * path for the named class.  Otherwise, use a service\n+             * provider mechanism to create the processor iterator.\n+             *\n+             * Note: if an explicit processor path is not set,\n+             * only the class path and _not_ the module path are\n+             * searched for processors.\n+             *\/\n+            String processorNames = options.get(Option.PROCESSOR);\n+            if (fileManager.hasLocation(ANNOTATION_PROCESSOR_MODULE_PATH)) {\n+                processorIterator = (processorNames == null) ?\n+                        new ServiceIterator(serviceLoader, log) :\n+                        new NameServiceIterator(serviceLoader, log, processorNames);\n+            } else if (processorNames != null) {\n+                processorIterator = new NameProcessIterator(processorNames, processorClassLoader, log);\n@@ -329,8 +316,1 @@\n-                \/*\n-                 * A security exception will occur if we can't create a classloader.\n-                 * Ignore the exception if, with hindsight, we didn't need it anyway\n-                 * (i.e. no processor was specified either explicitly, or implicitly,\n-                 * in service configuration file.) Otherwise, we cannot continue.\n-                 *\/\n-                processorIterator = handleServiceLoaderUnavailability(\"proc.cant.create.loader\",\n-                        processorLoaderException);\n+                processorIterator = new ServiceIterator(processorClassLoader, log);\n@@ -366,41 +346,0 @@\n-    \/**\n-     * Returns an empty processor iterator if no processors are on the\n-     * relevant path, otherwise if processors are present, logs an\n-     * error.  Called when a service loader is unavailable for some\n-     * reason, either because a service loader class cannot be found\n-     * or because a security policy prevents class loaders from being\n-     * created.\n-     *\n-     * @param key The resource key to use to log an error message\n-     * @param e   If non-null, pass this exception to Abort\n-     *\/\n-    private Iterator<Processor> handleServiceLoaderUnavailability(String key, Exception e) {\n-        if (fileManager instanceof JavacFileManager standardFileManager) {\n-            Iterable<? extends Path> workingPath = fileManager.hasLocation(ANNOTATION_PROCESSOR_PATH)\n-                ? standardFileManager.getLocationAsPaths(ANNOTATION_PROCESSOR_PATH)\n-                : standardFileManager.getLocationAsPaths(CLASS_PATH);\n-\n-            if (needClassLoader(options.get(Option.PROCESSOR), workingPath) )\n-                handleException(key, e);\n-\n-        } else {\n-            handleException(key, e);\n-        }\n-\n-        return Collections.emptyIterator();\n-    }\n-\n-    \/**\n-     * Handle a security exception thrown during initializing the\n-     * Processor iterator.\n-     *\/\n-    private void handleException(String key, Exception e) {\n-        if (e != null) {\n-            log.error(key, e.getLocalizedMessage());\n-            throw new Abort(e);\n-        } else {\n-            log.error(key);\n-            throw new Abort();\n-        }\n-    }\n-\n@@ -420,7 +359,2 @@\n-                try {\n-                    loader = ServiceLoader.load(Processor.class, classLoader);\n-                    this.iterator = loader.iterator();\n-                } catch (Exception e) {\n-                    \/\/ Fail softly if a loader is not actually needed.\n-                    this.iterator = handleServiceLoaderUnavailability(\"proc.no.service\", null);\n-                }\n+                loader = ServiceLoader.load(Processor.class, classLoader);\n+                this.iterator = loader.iterator();\n@@ -1551,26 +1485,0 @@\n-    \/*\n-     * Called retroactively to determine if a class loader was required,\n-     * after we have failed to create one.\n-     *\/\n-    private boolean needClassLoader(String procNames, Iterable<? extends Path> workingpath) {\n-        if (procNames != null)\n-            return true;\n-\n-        URL[] urls = new URL[1];\n-        for(Path pathElement : workingpath) {\n-            try {\n-                urls[0] = pathElement.toUri().toURL();\n-                if (ServiceProxy.hasService(Processor.class, urls))\n-                    return true;\n-            } catch (MalformedURLException ex) {\n-                throw new AssertionError(ex);\n-            }\n-            catch (ServiceProxy.ServiceConfigurationError e) {\n-                log.error(Errors.ProcBadConfigFile(e.getLocalizedMessage()));\n-                return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":35,"deletions":127,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.processing;\n-\n-import java.io.BufferedReader;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-\/**\n- * Utility class to determine if a service can be found on the\n- * path that might be used to create a class loader.\n- *\n- * <p><b>This is NOT part of any supported API.\n- * If you write code that depends on this, you do so at your own risk.\n- * This code and its internal interfaces are subject to change or\n- * deletion without notice.<\/b>\n- *\n- *\/\n-\/\/ based on sun.misc.Service\n-class ServiceProxy {\n-    static class ServiceConfigurationError extends Error {\n-        static final long serialVersionUID = 7732091036771098303L;\n-\n-        ServiceConfigurationError(String msg) {\n-            super(msg);\n-        }\n-    }\n-\n-    private static final String prefix = \"META-INF\/services\/\";\n-\n-    private static void fail(Class<?> service, String msg)\n-            throws ServiceConfigurationError {\n-        throw new ServiceConfigurationError(service.getName() + \": \" + msg);\n-    }\n-\n-    private static void fail(Class<?> service, URL u, int line, String msg)\n-            throws ServiceConfigurationError {\n-        fail(service, u + \":\" + line + \": \" + msg);\n-    }\n-\n-    \/**\n-     * Parse the content of the given URL as a provider-configuration file.\n-     *\n-     * @param  service\n-     *         The service class for which providers are being sought;\n-     *         used to construct error detail strings\n-     *\n-     * @param  u\n-     *         The URL naming the configuration file to be parsed\n-     *\n-     * @return true if the name of a service is found\n-     *\n-     * @throws ServiceConfigurationError\n-     *         If an I\/O error occurs while reading from the given URL, or\n-     *         if a configuration-file format error is detected\n-     *\/\n-    private static boolean parse(Class<?> service, URL u) throws ServiceConfigurationError {\n-        InputStream in = null;\n-        BufferedReader r = null;\n-        try {\n-            in = u.openStream();\n-            r = new BufferedReader(new InputStreamReader(in, UTF_8));\n-            int lc = 1;\n-            String ln;\n-            while ((ln = r.readLine()) != null) {\n-                int ci = ln.indexOf('#');\n-                if (ci >= 0) ln = ln.substring(0, ci);\n-                ln = ln.trim();\n-                int n = ln.length();\n-                if (n != 0) {\n-                    if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\\t') >= 0))\n-                        fail(service, u, lc, \"Illegal configuration-file syntax\");\n-                    int cp = ln.codePointAt(0);\n-                    if (!Character.isJavaIdentifierStart(cp))\n-                        fail(service, u, lc, \"Illegal provider-class name: \" + ln);\n-                    for (int i = Character.charCount(cp); i < n; i += Character.charCount(cp)) {\n-                        cp = ln.codePointAt(i);\n-                        if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))\n-                            fail(service, u, lc, \"Illegal provider-class name: \" + ln);\n-                    }\n-                    return true;\n-                }\n-            }\n-        } catch (FileNotFoundException x) {\n-            return false;\n-        } catch (IOException x) {\n-            fail(service, \": \" + x);\n-        } finally {\n-            try {\n-                if (r != null) r.close();\n-            } catch (IOException y) {\n-                fail(service, \": \" + y);\n-            }\n-            try {\n-                if (in != null) in.close();\n-            } catch (IOException y) {\n-                fail(service, \": \" + y);\n-            }\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Return true if a description for at least one service is found in the\n-     * service configuration files in the given URLs.\n-     *\/\n-    public static boolean hasService(Class<?> service, URL[] urls)\n-            throws ServiceConfigurationError {\n-        for (URL url: urls) {\n-            try {\n-                String fullName = prefix + service.getName();\n-                @SuppressWarnings(\"deprecation\")\n-                URL u = new URL(url, fullName);\n-                boolean found = parse(service, u);\n-                if (found)\n-                    return true;\n-            } catch (MalformedURLException e) {\n-                \/\/ should not happen; ignore it if it does\n-            }\n-        }\n-        return false;\n-    }\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/ServiceProxy.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -1182,3 +1182,0 @@\n-compiler.err.proc.no.service=\\\n-    A ServiceLoader was not usable and is required for annotation processing.\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -87,3 +87,0 @@\n-launcher.err.security.manager=\\\n-    cannot use source-code launcher with a security manager enabled\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-compiler.err.proc.no.service                            # JavacProcessingEnvironment: no service loader available\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}