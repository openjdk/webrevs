{"files":[{"patch":"@@ -142,1 +142,1 @@\n-        static boolean mnemonicShowHideFlag = false;\n+        @Override\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuBarUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.awt.event.KeyEvent;\n@@ -36,0 +35,1 @@\n+import java.awt.event.KeyEvent;\n@@ -39,1 +39,0 @@\n-import javax.swing.JMenuItem;\n@@ -41,0 +40,1 @@\n+import javax.swing.JMenuItem;\n@@ -45,0 +45,1 @@\n+\n@@ -52,0 +53,2 @@\n+    private static final AtomicInteger mnemonicHideCount = new AtomicInteger(0);\n+    private static final AtomicInteger mnemonicShowCount = new AtomicInteger(0);\n@@ -55,1 +58,1 @@\n-        int expectedMnemonicShowHideCount = 5;\n+        final int EXPECTED = 5;\n@@ -58,2 +61,1 @@\n-        AtomicInteger mnemonicHideCount = new AtomicInteger(0);\n-        AtomicInteger mnemonicShowCount = new AtomicInteger(0);\n+\n@@ -66,1 +68,1 @@\n-            for (int i = 0; i < 10; i++) {\n+            for (int i = 0; i < EXPECTED * 2; i++) {\n@@ -73,20 +75,1 @@\n-                SwingUtilities.invokeAndWait(() -> {\n-                    MenuSelectionManager msm =\n-                            MenuSelectionManager.defaultManager();\n-                    MenuElement[] selectedPath = msm.getSelectedPath();\n-                    if (WindowsLookAndFeel.isMnemonicHidden()) {\n-                        mnemonicHideCount.getAndIncrement();\n-                        \/\/ check if selection is cleared when mnemonics are hidden\n-                        if (selectedPath.length != 0) {\n-                            throw new RuntimeException(\"Menubar is active after\" +\n-                                    \" mnemonics are hidden\");\n-                        }\n-                    } else {\n-                        mnemonicShowCount.getAndIncrement();\n-                        if (selectedPath.length != 2 &&\n-                                (selectedPath[0] != menuBar || selectedPath[1] != fileMenu)) {\n-                            throw new RuntimeException(\"No Menu and Menubar is active when\" +\n-                                    \" mnemonics are shown\");\n-                        }\n-                    }\n-                });\n+                SwingUtilities.invokeAndWait(TestMenuMnemonic::verifyMnemonicsState);\n@@ -95,2 +78,2 @@\n-            if (mnemonicShowCount.get() != expectedMnemonicShowHideCount\n-                && mnemonicHideCount.get() != expectedMnemonicShowHideCount) {\n+            if (mnemonicShowCount.get() != EXPECTED\n+                && mnemonicHideCount.get() != EXPECTED) {\n@@ -108,0 +91,21 @@\n+    private static void verifyMnemonicsState() {\n+        MenuSelectionManager msm =\n+                MenuSelectionManager.defaultManager();\n+        MenuElement[] selectedPath = msm.getSelectedPath();\n+        if (WindowsLookAndFeel.isMnemonicHidden()) {\n+            mnemonicHideCount.getAndIncrement();\n+            \/\/ check if selection is cleared when mnemonics are hidden\n+            if (selectedPath.length != 0) {\n+                throw new RuntimeException(\"Menubar is active after\" +\n+                        \" mnemonics are hidden\");\n+            }\n+        } else {\n+            mnemonicShowCount.getAndIncrement();\n+            if (selectedPath.length != 2\n+                && (selectedPath[0] != menuBar || selectedPath[1] != fileMenu)) {\n+                throw new RuntimeException(\"No Menu and Menubar is active when\" +\n+                        \" mnemonics are shown\");\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/TestMenuMnemonic.java","additions":32,"deletions":28,"binary":false,"changes":60,"status":"modified"}]}