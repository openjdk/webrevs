{"files":[{"patch":"@@ -1461,0 +1461,106 @@\n+\/\/ jdk.internal.util.ArraysSupport.vectorizedHashCode\n+void C2_MacroAssembler::arrays_hashcode(Register ary, Register cnt, Register result,\n+                                        Register tmp1, Register tmp2, Register tmp3,\n+                                        Register tmp4, Register tmp5, Register tmp6,\n+                                        BasicType eltype)\n+{\n+  assert_different_registers(ary, cnt, result, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, t0, t1);\n+\n+  const int elsize = arrays_hashcode_elsize(eltype);\n+  const int chunks_end_shift = exact_log2(elsize);\n+\n+  switch (eltype) {\n+  case T_BOOLEAN: BLOCK_COMMENT(\"arrays_hashcode(unsigned byte) {\"); break;\n+  case T_CHAR:    BLOCK_COMMENT(\"arrays_hashcode(char) {\");          break;\n+  case T_BYTE:    BLOCK_COMMENT(\"arrays_hashcode(byte) {\");          break;\n+  case T_SHORT:   BLOCK_COMMENT(\"arrays_hashcode(short) {\");         break;\n+  case T_INT:     BLOCK_COMMENT(\"arrays_hashcode(int) {\");           break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+\n+  const int stride = 4;\n+  const Register pow31_4 = tmp1;\n+  const Register pow31_3 = tmp2;\n+  const Register pow31_2 = tmp3;\n+  const Register chunks  = tmp4;\n+  const Register chunks_end = chunks;\n+\n+  Label DONE, TAIL, TAIL_LOOP, WIDE_LOOP;\n+\n+  \/\/ result has a value initially\n+\n+  beqz(cnt, DONE);\n+\n+  andi(chunks, cnt, ~(stride-1));\n+  beqz(chunks, TAIL);\n+\n+  mv(pow31_4, 923521);           \/\/ [31^^4]\n+  mv(pow31_3,  29791);           \/\/ [31^^3]\n+  mv(pow31_2,    961);           \/\/ [31^^2]\n+\n+  slli(chunks_end, chunks, chunks_end_shift);\n+  add(chunks_end, ary, chunks_end);\n+  andi(cnt, cnt, stride-1);      \/\/ don't forget about tail!\n+\n+  bind(WIDE_LOOP);\n+  mulw(result, result, pow31_4); \/\/ 31^^4 * h\n+  arrays_hashcode_elload(t0,   Address(ary, 0 * elsize), eltype);\n+  arrays_hashcode_elload(t1,   Address(ary, 1 * elsize), eltype);\n+  arrays_hashcode_elload(tmp5, Address(ary, 2 * elsize), eltype);\n+  arrays_hashcode_elload(tmp6, Address(ary, 3 * elsize), eltype);\n+  mulw(t0, t0, pow31_3);         \/\/ 31^^3 * ary[i+0]\n+  addw(result, result, t0);\n+  mulw(t1, t1, pow31_2);         \/\/ 31^^2 * ary[i+1]\n+  addw(result, result, t1);\n+  slli(t0, tmp5, 5);             \/\/ optimize 31^^1 * ary[i+2]\n+  subw(tmp5, t0, tmp5);          \/\/ with ary[i+2]<<5 - ary[i+2]\n+  addw(result, result, tmp5);\n+  addw(result, result, tmp6);    \/\/ 31^^4 * h + 31^^3 * ary[i+0] + 31^^2 * ary[i+1]\n+                                 \/\/           + 31^^1 * ary[i+2] + 31^^0 * ary[i+3]\n+  addi(ary, ary, elsize * stride);\n+  bne(ary, chunks_end, WIDE_LOOP);\n+  beqz(cnt, DONE);\n+\n+  bind(TAIL);\n+  slli(chunks_end, cnt, chunks_end_shift);\n+  add(chunks_end, ary, chunks_end);\n+\n+  bind(TAIL_LOOP);\n+  arrays_hashcode_elload(t0, Address(ary), eltype);\n+  slli(t1, result, 5);           \/\/ optimize 31 * result\n+  subw(result, t1, result);      \/\/ with result<<5 - result\n+  addw(result, result, t0);\n+  addi(ary, ary, elsize);\n+  bne(ary, chunks_end, TAIL_LOOP);\n+\n+  bind(DONE);\n+  BLOCK_COMMENT(\"} \/\/ arrays_hashcode\");\n+}\n+\n+int C2_MacroAssembler::arrays_hashcode_elsize(BasicType eltype) {\n+  switch (eltype) {\n+  case T_BOOLEAN: return sizeof(jboolean);\n+  case T_BYTE:    return sizeof(jbyte);\n+  case T_SHORT:   return sizeof(jshort);\n+  case T_CHAR:    return sizeof(jchar);\n+  case T_INT:     return sizeof(jint);\n+  default:\n+    ShouldNotReachHere();\n+    return -1;\n+  }\n+}\n+\n+void C2_MacroAssembler::arrays_hashcode_elload(Register dst, Address src, BasicType eltype) {\n+  switch (eltype) {\n+  \/\/ T_BOOLEAN used as surrogate for unsigned byte\n+  case T_BOOLEAN: lbu(dst, src);   break;\n+  case T_BYTE:     lb(dst, src);   break;\n+  case T_SHORT:    lh(dst, src);   break;\n+  case T_CHAR:    lhu(dst, src);   break;\n+  case T_INT:      lw(dst, src);   break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":106,"deletions":0,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -81,0 +81,9 @@\n+  void arrays_hashcode(Register ary, Register cnt, Register result,\n+                       Register tmp1, Register tmp2,\n+                       Register tmp3, Register tmp4,\n+                       Register tmp5, Register tmp6,\n+                       BasicType eltype);\n+  \/\/ helper function for arrays_hashcode\n+  int arrays_hashcode_elsize(BasicType eltype);\n+  void arrays_hashcode_elload(Register dst, Address src, BasicType eltype);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -10305,0 +10305,20 @@\n+\/\/ fast ArraysSupport.vectorizedHashCode\n+instruct arrays_hashcode(iRegP_R11 ary, iRegI_R12 cnt, iRegI_R10 result, immI basic_type,\n+                         iRegLNoSp tmp1, iRegLNoSp tmp2,\n+                         iRegLNoSp tmp3, iRegLNoSp tmp4,\n+                         iRegLNoSp tmp5, iRegLNoSp tmp6, rFlagsReg cr)\n+%{\n+  match(Set result (VectorizedHashCode (Binary ary cnt) (Binary result basic_type)));\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6,\n+         USE_KILL ary, USE_KILL cnt, USE basic_type, KILL cr);\n+\n+  format %{ \"Array HashCode array[] $ary,$cnt,$result,$basic_type -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary$$Register, $cnt$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp4$$Register, $tmp5$$Register, $tmp6$$Register,\n+                       (BasicType)$basic_type$$constant);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -319,0 +319,4 @@\n+  if (FLAG_IS_DEFAULT(UseVectorizedHashCodeIntrinsic)) {\n+    FLAG_SET_DEFAULT(UseVectorizedHashCodeIntrinsic, true);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}