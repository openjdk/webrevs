{"files":[{"patch":"@@ -1461,0 +1461,107 @@\n+void C2_MacroAssembler::arrays_hashcode(Register ary, Register cnt, Register result,\n+                                        Register tmp1, Register tmp2, Register tmp3,\n+                                        Register tmp4, BasicType eltype)\n+{\n+  const Register tmp5 = t0;\n+  const Register tmp6 = t1;\n+  assert_different_registers(ary, cnt, result, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n+\n+  const int elsize = arrays_hashcode_elsize(eltype);\n+  const int chunks_end_shift = exact_log2(elsize);\n+\n+  switch (eltype) {\n+  case T_BOOLEAN: BLOCK_COMMENT(\"arrays_hashcode(unsigned byte) {\"); break;\n+  case T_CHAR:    BLOCK_COMMENT(\"arrays_hashcode(char) {\");          break;\n+  case T_BYTE:    BLOCK_COMMENT(\"arrays_hashcode(byte) {\");          break;\n+  case T_SHORT:   BLOCK_COMMENT(\"arrays_hashcode(short) {\");         break;\n+  case T_INT:     BLOCK_COMMENT(\"arrays_hashcode(int) {\");           break;\n+  default:        BLOCK_COMMENT(\"arrays_hashcode {\");                break;\n+    ShouldNotReachHere();\n+  }\n+\n+  const int stride = 4;\n+  const Register pow31_3_4 = tmp1;\n+  const Register pow31_3   = tmp2;\n+  const Register pow31_2   = tmp3;\n+  const Register chunks    = tmp4;\n+  const Register chunks_end = chunks;\n+\n+  Label DONE, TAIL, TAIL_LOOP, WIDE_LOOP;\n+\n+  \/\/ result has a value initially\n+\n+  beqz(cnt, DONE);\n+\n+  mv(pow31_2, 961); \/\/ [31^^2]\n+\n+  andi(chunks, cnt, ~(stride-1));\n+  beqz(chunks, TAIL);\n+\n+  slli(chunks_end, chunks, chunks_end_shift);\n+  add(chunks_end, ary, chunks_end);\n+  andi(cnt, cnt, stride-1); \/\/ don't forget about tail!\n+\n+#define DO_ELEMENT_LOAD(reg, idx) \\\n+  switch (eltype) { \\\n+  case T_BOOLEAN: lb(reg, Address(ary, idx * elsize)); break; \\\n+  case T_CHAR:   lhu(reg, Address(ary, idx * elsize)); break; \\\n+  case T_BYTE:    lb(reg, Address(ary, idx * elsize)); break; \\\n+  case T_SHORT:   lh(reg, Address(ary, idx * elsize)); break; \\\n+  case T_INT:     lw(reg, Address(ary, idx * elsize)); break; \\\n+  default:                                             break; \\\n+  } \\\n+\n+  ld(pow31_3_4, ExternalAddress(StubRoutines::riscv::arrays_hashcode_powers_of_31()\n+                                + 0 * sizeof(jint))); \/\/ [31^^3:31^^4]\n+  srli(pow31_3, pow31_3_4, 32);\n+\n+  bind(WIDE_LOOP);\n+  mulw(result, result, pow31_3_4); \/\/ 31^^4 * h\n+  DO_ELEMENT_LOAD(tmp5, 0);\n+  mulw(tmp5, tmp5, pow31_3);       \/\/ 31^^3 * ary[i+0]\n+  addw(result, result, tmp5);\n+  DO_ELEMENT_LOAD(tmp5, 1);\n+  mulw(tmp5, tmp5, pow31_2);       \/\/ 31^^2 * ary[i+1]\n+  addw(result, result, tmp5);\n+  DO_ELEMENT_LOAD(tmp5, 2);\n+  slli(tmp6, tmp5, 5);             \/\/ optimize 31^^1 * ary[i+2]\n+  subw(tmp5, tmp6, tmp5);          \/\/ with ary[i+2]<<5 - ary[i+2]\n+  addw(result, result, tmp5);\n+  DO_ELEMENT_LOAD(tmp5, 3);\n+  addw(result, result, tmp5);      \/\/ 31^^4 * h + 31^^3 * ary[i+0] + 31^^2 * ary[i+1]\n+                                   \/\/           + 31^^1 * ary[i+2] + 31^^0 * ary[i+3]\n+  addi(ary, ary, elsize * stride);\n+  bne(ary, chunks_end, WIDE_LOOP);\n+\n+  bind(TAIL);\n+  beqz(cnt, DONE);\n+  slli(chunks_end, cnt, chunks_end_shift);\n+  add(chunks_end, ary, chunks_end);\n+\n+  bind(TAIL_LOOP);\n+  DO_ELEMENT_LOAD(tmp5, 0)\n+  slli(tmp6, result, 5);           \/\/ optimize 31 * result\n+  subw(result, tmp6, result);      \/\/ with result<<5 - result\n+  addw(result, result, tmp5);\n+  addi(ary, ary, elsize);\n+  bne(ary, chunks_end, TAIL_LOOP);\n+\n+#undef DO_ELEMENT_LOAD\n+\n+  bind(DONE);\n+  BLOCK_COMMENT(\"} \/\/ arrays_hashcode\");\n+}\n+\n+int C2_MacroAssembler::arrays_hashcode_elsize(BasicType eltype) {\n+  switch (eltype) {\n+  case T_BOOLEAN: return sizeof(jboolean);\n+  case T_BYTE:    return sizeof(jbyte);\n+  case T_SHORT:   return sizeof(jshort);\n+  case T_CHAR:    return sizeof(jchar);\n+  case T_INT:     return sizeof(jint);\n+  default:\n+    ShouldNotReachHere();\n+    return -1;\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":107,"deletions":0,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -81,0 +81,6 @@\n+  void arrays_hashcode(Register ary, Register cnt, Register result,\n+                       Register tmp1, Register tmp2,\n+                       Register tmp3, Register tmp4, BasicType eltype);\n+  \/\/ helper function for arrays_hashcode\n+  int arrays_hashcode_elsize(BasicType eltype);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -10305,0 +10305,18 @@\n+\n+instruct arrays_hashcode(iRegP_R11 ary, iRegI_R12 cnt, iRegI_R10 result, immI basic_type,\n+                         iRegINoSp tmp1, iRegINoSp tmp2,\n+                         iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg cr)\n+%{\n+  match(Set result (VectorizedHashCode (Binary ary cnt) (Binary result basic_type)));\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4,\n+         USE_KILL ary, USE_KILL cnt, USE basic_type, KILL cr);\n+\n+  format %{ \"Array HashCode array[] $ary,$cnt,$result,$basic_type -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary$$Register, $cnt$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n+                       (BasicType)$basic_type$$constant);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -58,0 +58,6 @@\n+ATTRIBUTE_ALIGNED(64) const jint StubRoutines::riscv::_arrays_hashcode_powers_of_31[] =\n+{\n+         923521, \/\/ 31^^4 (0x000E1781)\n+          29791, \/\/ 31^^3 (0x0000745F)\n+};\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+  \/\/ table for arrays_hashcode\n+  static const jint _arrays_hashcode_powers_of_31[];\n+\n@@ -162,0 +165,4 @@\n+\n+  static address arrays_hashcode_powers_of_31() {\n+    return (address)_arrays_hashcode_powers_of_31;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -319,0 +319,4 @@\n+  if (FLAG_IS_DEFAULT(UseVectorizedHashCodeIntrinsic)) {\n+    FLAG_SET_DEFAULT(UseVectorizedHashCodeIntrinsic, true);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}