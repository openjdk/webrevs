{"files":[{"patch":"@@ -1461,0 +1461,99 @@\n+void C2_MacroAssembler::arrays_hashcode(Register ary, Register cnt,\n+                                        Register result, Register tmp1, Register tmp2,\n+                                        Register tmp3, Register tmp4, Register tmp5,\n+                                        Register tmp6,\n+                                        BasicType eltype)\n+{\n+  assert_different_registers(ary, cnt, result, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n+\n+  const int elsize = arrays_hashcode_elsize(eltype);\n+\n+  switch (eltype) {\n+  case T_BOOLEAN: BLOCK_COMMENT(\"arrays_hashcode(unsigned byte) {\"); break;\n+  case T_CHAR:    BLOCK_COMMENT(\"arrays_hashcode(char) {\");          break;\n+  case T_BYTE:    BLOCK_COMMENT(\"arrays_hashcode(byte) {\");          break;\n+  case T_SHORT:   BLOCK_COMMENT(\"arrays_hashcode(short) {\");         break;\n+  case T_INT:     BLOCK_COMMENT(\"arrays_hashcode(int) {\");           break;\n+  default:        BLOCK_COMMENT(\"arrays_hashcode {\");                break;\n+  }\n+\n+  const int stride = 4;\n+  const Register pow31_3_4 = tmp6;\n+  const Register pow31_1_2 = tmp5;\n+  const Register chunk     = tmp4;\n+\n+  Label DONE, TAIL, TAIL_LOOP, WIDE_LOOP;\n+\n+  \/\/ result has already been zeroed earlier.\n+\n+  beqz(cnt, DONE);\n+\n+  ld(pow31_1_2, ExternalAddress(StubRoutines::riscv::arrays_hashcode_powers_of_31() + 2 * sizeof(jint))); \/\/ [31^^1][31^^2]\n+\n+  andi(chunk, cnt, ~(stride-1));\n+  beqz(chunk, TAIL);\n+  andi(cnt, cnt, stride-1);\n+\n+#define DO_ELEMENT_LOAD(reg, idx) \\\n+  switch (eltype) { \\\n+  case T_BOOLEAN: lb(reg, Address(ary, idx * elsize)); break; \\\n+  case T_CHAR:   lhu(reg, Address(ary, idx * elsize)); break; \\\n+  case T_BYTE:    lb(reg, Address(ary, idx * elsize)); break; \\\n+  case T_SHORT:   lh(reg, Address(ary, idx * elsize)); break; \\\n+  case T_INT:     lw(reg, Address(ary, idx * elsize)); break; \\\n+  default:                                             break; \\\n+  } \\\n+\n+  ld(pow31_3_4, ExternalAddress(StubRoutines::riscv::arrays_hashcode_powers_of_31() + 0 * sizeof(jint))); \/\/ [31^^3:31^^4]\n+\n+  bind(WIDE_LOOP);\n+  DO_ELEMENT_LOAD(tmp1, 0)\n+  DO_ELEMENT_LOAD(tmp3, 1)\n+  mulw(result, result, pow31_3_4); \/\/ 31^^4 * h\n+  srli(tmp2, pow31_3_4, 32);\n+  mulw(tmp1, tmp1, tmp2);          \/\/ 31^^3 * ary[i+0]\n+  addw(result, result, tmp1);\n+  mulw(tmp3, tmp3, pow31_1_2);     \/\/ 31^^2 * ary[i+1]\n+  addw(result, result, tmp3);\n+  DO_ELEMENT_LOAD(tmp1, 2)\n+  DO_ELEMENT_LOAD(tmp3, 3)\n+  srli(tmp2, pow31_1_2, 32);\n+  mulw(tmp1, tmp1, tmp2);          \/\/ 31^^1 * ary[i+2]\n+  addw(result, result, tmp1);\n+  addw(result, result, tmp3);      \/\/ 31^^4 * h + 31^^3 * ary[i+0] + 31^^2 * ary[i+1]\n+                                   \/\/           + 31^^1 * ary[i+2] + 31^^0 * ary[i+3]\n+  subw(chunk, chunk, stride);\n+  addi(ary, ary, elsize * stride);\n+  bnez(chunk, WIDE_LOOP);\n+\n+  bind(TAIL);\n+  beqz(cnt, DONE);\n+\n+  bind(TAIL_LOOP);\n+  DO_ELEMENT_LOAD(tmp1, 0)\n+  slli(tmp2, result, 5);\n+  subw(result, tmp2, result);\n+  addw(result, result, tmp1); \/\/ result = result + ary[i]\n+  subw(cnt, cnt, 1);\n+  add(ary, ary, elsize);\n+  bnez(cnt, TAIL_LOOP);\n+\n+#undef DO_ELEMENT_LOAD\n+\n+  bind(DONE);\n+  BLOCK_COMMENT(\"} \/\/ arrays_hashcode\");\n+}\n+\n+int C2_MacroAssembler::arrays_hashcode_elsize(BasicType eltype) {\n+  switch (eltype) {\n+  case T_BOOLEAN: return sizeof(jboolean);\n+  case T_BYTE:    return sizeof(jbyte);\n+  case T_SHORT:   return sizeof(jshort);\n+  case T_CHAR:    return sizeof(jchar);\n+  case T_INT:     return sizeof(jint);\n+  default:\n+    ShouldNotReachHere();\n+    return -1;\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":99,"deletions":0,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -81,0 +81,7 @@\n+  void arrays_hashcode(Register ary, Register cnt, Register result,\n+                       Register tmp1, Register tmp2, Register tmp3,\n+                       Register tmp4, Register tmp5, Register tmp6,\n+                       BasicType eltype);\n+  \/\/ helper function for arrays_hashcode\n+  int arrays_hashcode_elsize(BasicType eltype);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -10305,0 +10305,19 @@\n+\n+instruct arrays_hashcode(iRegP_R11 ary, iRegI_R12 cnt, iRegI_R10 result, immI basic_type,\n+                         iRegINoSp tmp1, iRegINoSp tmp2, iRegINoSp tmp3, iRegINoSp tmp4,\n+                         iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg cr)\n+%{\n+  match(Set result (VectorizedHashCode (Binary ary cnt) (Binary result basic_type)));\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6,\n+         USE_KILL ary, USE_KILL cnt, USE basic_type, KILL cr);\n+\n+  format %{ \"Array HashCode array[] $ary,$cnt,$result,$basic_type -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary$$Register, $cnt$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp4$$Register, $tmp5$$Register, $tmp6$$Register,\n+                       (BasicType)$basic_type$$constant);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,0 +58,9 @@\n+ATTRIBUTE_ALIGNED(64) const jint StubRoutines::riscv::_arrays_hashcode_powers_of_31[] =\n+{\n+         923521, \/\/ 0x000E1781\n+          29791, \/\/ 0x0000745F\n+            961, \/\/ 0x000003C1\n+             31, \/\/ 0x0000001F\n+              1, \/\/ 0x00000001\n+};\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+  \/\/ table for arrays_hashcode\n+  static const jint _arrays_hashcode_powers_of_31[];\n+\n@@ -162,0 +165,4 @@\n+\n+  static address arrays_hashcode_powers_of_31() {\n+    return (address)_arrays_hashcode_powers_of_31;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -319,0 +319,4 @@\n+  if (FLAG_IS_DEFAULT(UseVectorizedHashCodeIntrinsic)) {\n+    FLAG_SET_DEFAULT(UseVectorizedHashCodeIntrinsic, true);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}