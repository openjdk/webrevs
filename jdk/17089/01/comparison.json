{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,7 @@\n-            if (j < 0) continue;\n+            if (j < 0) {\n+                \/\/ If there is no preceding name and this path is absolute,\n+                \/\/ then remove this instance of \"..\"\n+                if (path[0] == '\/')\n+                    ix[i] = 0;\n+                continue;\n+            }\n","filename":"src\/java.base\/unix\/native\/libjava\/path_util.c","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires (os.family == \"windows\")\n@@ -38,0 +37,2 @@\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n@@ -46,1 +47,1 @@\n-    private static Stream<Arguments> pathProvider() {\n+    private static Stream<Arguments> pathProviderWindows() {\n@@ -83,0 +84,19 @@\n+    private static Stream<Arguments> pathProviderUnix() {\n+        return Stream.of(\n+            Arguments.of(\"\/..\/..\/..\/..\/..\/a\/b\/c\", \"\/a\/b\/c\"),\n+            Arguments.of(\"\/..\/..\/..\/..\/..\/a\/..\/b\/c\", \"\/b\/c\"),\n+            Arguments.of(\"\/..\/..\/..\/..\/..\/a\/..\/..\/b\/c\", \"\/b\/c\"),\n+            Arguments.of(\"\/..\/..\/..\/..\/..\/a\/..\/..\/..\/b\/c\", \"\/b\/c\"),\n+            Arguments.of(\"\/..\/..\/..\/..\/..\/a\/..\/..\/..\/..\/b\/c\", \"\/b\/c\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @EnabledOnOs({OS.AIX, OS.LINUX, OS.MAC})\n+    @MethodSource(\"pathProviderUnix\")\n+    void goodPathsUnix(String pathname, String expected) throws IOException {\n+        File file = new File(pathname);\n+        String canonicalPath = file.getCanonicalPath();\n+        assertEquals(expected, canonicalPath);\n+    }\n+\n@@ -84,0 +104,1 @@\n+    @EnabledOnOs(OS.WINDOWS)\n@@ -85,1 +106,1 @@\n-    void badPaths(String pathname) {\n+    void badPathsWindows(String pathname) {\n@@ -90,2 +111,3 @@\n-    @MethodSource(\"pathProvider\")\n-    void goodPaths(String pathname, String expected) throws IOException {\n+    @EnabledOnOs(OS.WINDOWS)\n+    @MethodSource(\"pathProviderWindows\")\n+    void goodPathsWindows(String pathname, String expected) throws IOException {\n@@ -98,0 +120,1 @@\n+    @EnabledOnOs(OS.WINDOWS)\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"}]}