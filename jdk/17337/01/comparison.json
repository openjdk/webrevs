{"files":[{"patch":"@@ -933,0 +933,5 @@\n+  if (selected_method->is_abstract()) {\n+    ResourceMark rm(THREAD);\n+    THROW_MSG(vmSymbols::java_lang_AbstractMethodError(), selected_method->name()->as_C_string());\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ *  This is a non-abstract class with an abstract method.\n+ *\n+ *\/\n+super public class AbstractMethodClass\n+      extends java\/lang\/Object\n+              version 51:0  \/\/ Java 7 version\n+{\n+\n+    public Method \"<init>\":\"()V\"\n+       stack 1 locals 1\n+    {\n+        aload_0;\n+        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    public abstract Method \"abstractM\":\"()V\";\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/abstractMethod\/AbstractMethodClass.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8323243\n+ * @summary Test that invocation of an abstract method from JNI works correctly\n+ * @compile AbstractMethodClass.jasm\n+ * @run main\/othervm\/native TestJNIAbstractMethod\n+ *\/\n+\n+\/**\n+ * We are testing invocation of an abstract method from JNI - which should\n+ * simply result in throwning AbstractMethodError. To invoke an abstract method\n+ * we must have an instance method (as abstract static methods are illegal),\n+ * but instantiating an abstract class is also illegal at the Java language\n+ * level, so we have to use a custom jasm class that contains an abstract method\n+ * declaration, but which is not itself declared as an abstract class.\n+ *\/\n+public class TestJNIAbstractMethod {\n+\n+    \/\/ Invokes an abstract method from JNI and throws AbstractMethodError.\n+    private static native void invokeAbstractM(Class<?> AMclass,\n+                                               AbstractMethodClass receiver);\n+\n+    static {\n+        System.loadLibrary(\"JNIAbstractMethod\");\n+    }\n+\n+    public static void main(String[] args) {\n+        AbstractMethodClass obj = new AbstractMethodClass();\n+        try {\n+            System.out.println(\"Attempting direct invocation via JNI\");\n+            invokeAbstractM(obj.getClass(), obj);\n+            throw new RuntimeException(\"Did not get AbstractMethodError!\");\n+        } catch (AbstractMethodError expected) {\n+            System.out.println(\"ok - got expected exception: \" + expected);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/abstractMethod\/TestJNIAbstractMethod.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#include <jni.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+JNIEXPORT void JNICALL Java_TestJNIAbstractMethod_invokeAbstractM(JNIEnv* env,\n+                                                                  jclass this_cls,\n+                                                                  jclass target_cls,\n+                                                                  jobject receiver) {\n+\n+  jmethodID mid = (*env)->GetMethodID(env, target_cls, \"abstractM\", \"()V\");\n+  if (mid == NULL) {\n+    fprintf(stderr, \"Error looking up method abstractM\\n\");\n+    (*env)->ExceptionDescribe(env);\n+    exit(1);\n+  }\n+\n+  printf(\"Invoking abstract method ...\\n\");\n+  (*env)->CallVoidMethod(env, receiver, mid);  \/\/ Should raise exception\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/abstractMethod\/libJNIAbstractMethod.c","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}