{"files":[{"patch":"@@ -349,0 +349,13 @@\n+        private static int toRangeHash(Set<Range> ranges) {\n+            int m = 0;\n+            for (Range range : ranges) {\n+                int index = range.ordinal();\n+                if (index < NUM_KEYS) {\n+                    m |= 1 << index;\n+                } else {\n+                    m |=  (1 << NUM_KEYS) + index;\n+                }\n+            }\n+            return m;\n+        }\n+\n@@ -579,1 +592,1 @@\n-    private static int ctCacheLimit = contexts.length - 2;\n+    private static final int ctCacheLimit = contexts.length - 2;\n@@ -1513,0 +1526,3 @@\n+        if (((this.mask & ARABIC) != 0) && ((this.mask & EASTERN_ARABIC) != 0)) {\n+            this.mask &= ~ARABIC;\n+        }\n@@ -1798,9 +1814,1 @@\n-        int hash = mask;\n-        if (rangeSet != null) {\n-            \/\/ Use the CONTEXTUAL_MASK bit only for the enum-based\n-            \/\/ NumericShaper. A deserialized NumericShaper might have\n-            \/\/ bit masks.\n-            hash &= CONTEXTUAL_MASK;\n-            hash ^= rangeSet.hashCode();\n-        }\n-        return hash;\n+        return (rangeSet != null) ? Range.toRangeHash(rangeSet) : (mask & ~CONTEXTUAL_MASK);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/NumericShaper.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8365077\n+ * @summary confirm that an instance which is created with Enum ranges is\n+ * equal to another instance which is created with equivalent traditional\n+ * ranges, and that in such a case the hashCodes are also equal.\n+ *\/\n+\n+import java.awt.font.NumericShaper;\n+import java.awt.font.NumericShaper.Range;\n+import static java.awt.font.NumericShaper.Range.*;\n+import java.util.EnumSet;\n+\n+public class NSEqualsTest {\n+\n+    public static void main(String[] args) {\n+\n+        for (Range r1 : Range.values()) {\n+           test(r1);\n+           for (Range r2 : Range.values()) {\n+              test(r1, r2);\n+           }\n+        }\n+    }\n+\n+    static void test(Range r) {\n+        if (r.ordinal() > MONGOLIAN.ordinal()) {\n+            return;\n+        }\n+        int o = 1 << r.ordinal();\n+        NumericShaper nsr = NumericShaper.getContextualShaper(EnumSet.of(r));\n+        NumericShaper nso = NumericShaper.getContextualShaper(o);\n+        printAndCompare(nsr, nso);\n+    }\n+\n+    static void test(Range r1, Range r2) {\n+        if (r1.ordinal() > MONGOLIAN.ordinal() || r2.ordinal() > MONGOLIAN.ordinal()) {\n+            return;\n+        }\n+        int o1 = 1 << r1.ordinal();\n+        int o2 = 1 << r2.ordinal();\n+\n+        NumericShaper nsr = NumericShaper.getContextualShaper(EnumSet.of(r1, r2));\n+        NumericShaper nso = NumericShaper.getContextualShaper(o1 | o2);\n+        printAndCompare(nsr, nso);\n+    }\n+\n+    static void printAndCompare(NumericShaper nsr, NumericShaper nso) {\n+        System.err.println(nsr);\n+        System.err.println(nso);\n+        System.err.println(nsr.hashCode() + \" vs \" + nso.hashCode() +\n+                           \" equal: \" + nsr.equals(nso));\n+        if (!nsr.equals(nso)) {\n+            throw new RuntimeException(\"Expected equal\");\n+        }\n+        if (nsr.hashCode() != nso.hashCode()) {\n+            throw new RuntimeException(\"Different hash codes:\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/font\/NumericShaper\/NSEqualsTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}