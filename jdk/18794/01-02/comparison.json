{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.function.Consumer;\n@@ -174,1 +175,2 @@\n-     * If the supplier throws an (unchecked) exception, the exception is ignored, and no\n+     * If the supplier throws an (unchecked) exception, the exception is forwarded to\n+     * the thread's {@linkplain Thread#getUncaughtExceptionHandler()} (if any) and no\n@@ -176,0 +178,13 @@\n+     * <p>\n+     * Here is how a custom exception listener can be attached to the background thread:\n+     *\n+     * {@snippet lang=java :\n+     * AtomicReference<Throwable> holder = new AtomicReference<>();\n+     *\n+     * ThreadFactory factory =\n+     *         Thread.ofVirtual()\n+     *                 .uncaughtExceptionHandler((t, e) -> holder.set(e))\n+     *                 .factory();\n+     *\n+     * StableValue<V> stable = StableValue.ofBackground(factory, computeV());\n+     * }\n@@ -177,3 +192,3 @@\n-     * @param <V>           the value type to set\n-     * @param threadFactory to use when creating the background thread\n-     * @param supplier      to be used for computing a value\n+     * @param <V>               the value type to set\n+     * @param threadFactory     to use when creating the background thread\n+     * @param supplier          to be used for computing a value\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/StableValue.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n@@ -314,1 +316,5 @@\n-        Thread bgThread = threadFactory.newThread(new Runnable() {\n+\n+        final class BgRunnable implements Runnable {\n+\n+            volatile Thread thread;\n+\n@@ -319,1 +325,7 @@\n-                } catch (Throwable _) {}\n+                } catch (Throwable throwable) {\n+                    final Thread.UncaughtExceptionHandler uncaughtExceptionHandler =\n+                            thread.getUncaughtExceptionHandler();\n+                    if (uncaughtExceptionHandler != null) {\n+                        uncaughtExceptionHandler.uncaughtException(thread, throwable);\n+                    }\n+                }\n@@ -321,1 +333,5 @@\n-        });\n+        }\n+\n+        final BgRunnable runnable = new BgRunnable();\n+        Thread bgThread = threadFactory.newThread(runnable);\n+        runnable.thread = bgThread;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.concurrent.ThreadFactory;\n@@ -45,0 +46,2 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -229,1 +232,1 @@\n-        long deadline = System.nanoTime() + TimeUnit.SECONDS.toNanos(2);\n+        long deadline = deadlineS(2);\n@@ -240,0 +243,24 @@\n+    @Test\n+    void backgroundException() {\n+        String message = \"The background thread threw an exception\";\n+\n+        AtomicReference<Throwable> holder = new AtomicReference<>();\n+        ThreadFactory factory =\n+                Thread.ofVirtual()\n+                        .uncaughtExceptionHandler((t, e) -> holder.set(e))\n+                        .factory();\n+\n+        StableValue<Integer> stable = StableValue.ofBackground(\n+                factory,\n+                () -> { throw new UnsupportedOperationException(message); }\n+        );\n+\n+        long deadline = deadlineS(2);\n+        while (holder.get() == null) {\n+            Thread.onSpinWait();\n+            if (System.nanoTime() > deadline) {\n+                fail(\"No exception was received within the stipulated time: \" + stable);\n+            }\n+        }\n+    }\n+\n@@ -278,0 +305,4 @@\n+    private static long deadlineS(int seconds) {\n+        return System.nanoTime() + TimeUnit.SECONDS.toNanos(seconds);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/BasicStableTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}