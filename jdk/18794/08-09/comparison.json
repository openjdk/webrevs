{"files":[{"patch":"@@ -47,1 +47,1 @@\n-    static final int UNSET = 0;\n+    static final byte UNSET = 0;\n@@ -49,1 +49,1 @@\n-    static final int NULL = 1;\n+    static final byte NULL = 1;\n@@ -51,1 +51,1 @@\n-    static final int NON_NULL = 2; \/\/ The middle value\n+    static final byte NON_NULL = 2; \/\/ The middle value\n@@ -53,1 +53,1 @@\n-    static final int ERROR = 3;\n+    static final byte ERROR = 3;\n@@ -55,1 +55,4 @@\n-    static final int DUMMY = 4;\n+    static final byte DUMMY = 4;\n+\n+    \/\/ Indicates a computation operation has been invoked.\n+    static final byte INVOKED = 1;\n@@ -59,1 +62,1 @@\n-    \/\/ Used to mark that a mutex will not be used anymore\n+    \/\/ Sentinel value used to mark that a mutex will not be used anymore\n@@ -111,16 +114,0 @@\n-    \/**\n-     * {@return the address offset for an Object element in an Object array}\n-     * @param index for the object\n-     *\/\n-    static long objectOffset(int index) {\n-        return ARRAY_OBJECT_BASE_OFFSET + (long) index * ARRAY_OBJECT_INDEX_SCALE;\n-    }\n-\n-    \/**\n-     * {@return the address offset for an int element in an `int` array}\n-     * @param index for the object\n-     *\/\n-    static long intOffset(int index) {\n-        return ARRAY_INT_BASE_OFFSET + (long) index * ARRAY_INT_INDEX_SCALE;\n-    }\n-\n@@ -152,1 +139,1 @@\n-            return witness == null ? stable: witness;\n+            return witness == null ? stable : witness;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableUtil.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -51,0 +51,6 @@\n+    private static final long COMPUTE_INVOKED_OFFSET =\n+            UNSAFE.objectFieldOffset(StableValueImpl.class, \"computeInvoked\");\n+\n+    \/\/ The fields below are read and written using a combination of plain memory access\n+    \/\/ and Unsafe volatile memory access.\n+\n@@ -73,1 +79,1 @@\n-    private int state;\n+    private byte state;\n@@ -78,0 +84,2 @@\n+     * 0                  , not invoked\n+     * StableUtil.INVOKED , invoked\n@@ -80,1 +88,1 @@\n-    private boolean computeInvoked;\n+    private byte computeInvoked;\n@@ -236,2 +244,1 @@\n-            \/\/ A value is not set\n-            if (computeInvoked) {\n+            if (!UNSAFE.compareAndSetByte(this, COMPUTE_INVOKED_OFFSET, (byte) 0, INVOKED)) {\n@@ -240,1 +247,1 @@\n-            computeInvoked = true;\n+\n@@ -296,1 +303,1 @@\n-        return UNSAFE.getIntVolatile(this, STATE_OFFSET);\n+        return UNSAFE.getByteVolatile(this, STATE_OFFSET);\n@@ -299,1 +306,1 @@\n-    private void putState(int newValue) {\n+    private void putState(byte newValue) {\n@@ -302,1 +309,1 @@\n-        UNSAFE.putIntVolatile(this, STATE_OFFSET, newValue);\n+        UNSAFE.putByteVolatile(this, STATE_OFFSET, newValue);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"}]}