{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Consumer;\n@@ -78,2 +76,2 @@\n-     * Indicates if a supplier is currently being invoked. Used to\n-     * detect circular supplier invocations.\n+     * Indicates a computation operation has been invoked. Used to\n+     * detect circular computation invocations.\n@@ -81,1 +79,2 @@\n-    @Stable private boolean supplying;\n+    @Stable\n+    private boolean computeInvoked;\n@@ -225,1 +224,1 @@\n-            if (supplying) {\n+            if (computeInvoked) {\n@@ -228,0 +227,1 @@\n+            computeInvoked = true;\n@@ -229,12 +229,7 @@\n-                supplying = true;\n-                try {\n-                    V newValue = supplier.get();\n-                    setValue(newValue);\n-                    return newValue;\n-                } catch (Throwable t) {\n-                    putState(ERROR);\n-                    putMutex(t.getClass());\n-                    throw t;\n-                }\n-            } finally {\n-                supplying = false;\n+                V newValue = supplier.get();\n+                setValue(newValue);\n+                return newValue;\n+            } catch (Throwable t) {\n+                putState(ERROR);\n+                putMutex(t.getClass());\n+                throw t;\n@@ -295,1 +290,1 @@\n-            if (supplying) {\n+            if (computeInvoked) {\n@@ -298,0 +293,1 @@\n+            computeInvoked = true;\n@@ -299,18 +295,13 @@\n-                supplying = true;\n-                try {\n-                    @SuppressWarnings(\"unchecked\")\n-                    V newValue = switch (provider) {\n-                        case Supplier<?> sup     -> (V) sup.get();\n-                        case IntFunction<?> iFun -> (V) iFun.apply((int) key);\n-                        case Function<?, ?> func -> ((Function<K, V>) func).apply(key);\n-                        default                  -> throw shouldNotReachHere();\n-                    };\n-                    setValue(newValue);\n-                    return newValue;\n-                } catch (Throwable t) {\n-                    putState(ERROR);\n-                    putMutex(t.getClass());\n-                    throw t;\n-                }\n-            } finally {\n-                supplying = false;\n+                @SuppressWarnings(\"unchecked\")\n+                V newValue = switch (provider) {\n+                    case Supplier<?> sup     -> (V) sup.get();\n+                    case IntFunction<?> iFun -> (V) iFun.apply((int) key);\n+                    case Function<?, ?> func -> ((Function<K, V>) func).apply(key);\n+                    default                  -> throw shouldNotReachHere();\n+                };\n+                setValue(newValue);\n+                return newValue;\n+            } catch (Throwable t) {\n+                putState(ERROR);\n+                putMutex(t.getClass());\n+                throw t;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":28,"deletions":37,"binary":false,"changes":65,"status":"modified"}]}