{"files":[{"patch":"@@ -289,1 +289,1 @@\n-    private int implRead(byte[] b, int off, int len) throws IOException {\n+    private int implRead(byte[] b, int off, int len, long remainingNanos) throws IOException {\n@@ -297,3 +297,2 @@\n-            int timeout = this.timeout;\n-            configureNonBlockingIfNeeded(fd, timeout > 0);\n-            if (timeout > 0) {\n+            configureNonBlockingIfNeeded(fd, remainingNanos > 0);\n+            if (remainingNanos > 0) {\n@@ -301,1 +300,1 @@\n-                n = timedRead(fd, b, off, len, MILLISECONDS.toNanos(timeout));\n+                n = timedRead(fd, b, off, len, remainingNanos);\n@@ -336,1 +335,11 @@\n-            readLock.lock();\n+            long remainingNanos = 0;\n+            int timeout = this.timeout;\n+            if (timeout > 0) {\n+                remainingNanos = tryLock(readLock, timeout, MILLISECONDS);\n+                if (remainingNanos <= 0) {\n+                    assert !readLock.isHeldByCurrentThread();\n+                    throw new SocketTimeoutException(\"Read timed out\");\n+                }\n+            } else {\n+                readLock.lock();\n+            }\n@@ -343,1 +352,1 @@\n-                int n = implRead(b, off, size);\n+                int n = implRead(b, off, size, remainingNanos);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8221481\n+ * @bug 8221481 8358496\n@@ -29,2 +29,1 @@\n- * @compile Timeouts.java\n- * @run testng\/othervm\/timeout=180 Timeouts\n+ * @run junit\/othervm\/timeout=180 Timeouts\n@@ -46,0 +45,2 @@\n+import java.util.ArrayList;\n+import java.util.concurrent.Callable;\n@@ -49,0 +50,1 @@\n+import java.util.concurrent.ForkJoinPool;\n@@ -50,1 +52,0 @@\n-import java.util.concurrent.ScheduledExecutorService;\n@@ -53,3 +54,3 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -58,2 +59,1 @@\n-@Test\n-public class Timeouts {\n+class Timeouts {\n@@ -62,1 +62,1 @@\n-     * Test timed connect where connection is established\n+     * Test timed connect where connection is established.\n@@ -64,1 +64,2 @@\n-    public void testTimedConnect1() throws IOException {\n+    @Test\n+    void testTimedConnect1() throws IOException {\n@@ -73,1 +74,1 @@\n-     * Test timed connect where connection is refused\n+     * Test timed connect where connection is refused.\n@@ -75,1 +76,2 @@\n-    public void testTimedConnect2() throws IOException {\n+    @Test\n+    void testTimedConnect2() throws IOException {\n@@ -78,3 +80,1 @@\n-            try {\n-                s.connect(remote, 10000);\n-            } catch (ConnectException expected) { }\n+            assertThrows(ConnectException.class,  () -> s.connect(remote, 10000));\n@@ -85,1 +85,1 @@\n-     * Test connect with a timeout of Integer.MAX_VALUE\n+     * Test connect with a timeout of Integer.MAX_VALUE.\n@@ -87,1 +87,2 @@\n-    public void testTimedConnect3() throws IOException {\n+    @Test\n+    void testTimedConnect3() throws IOException {\n@@ -98,1 +99,2 @@\n-    public void testTimedConnect4() throws IOException {\n+    @Test\n+    void testTimedConnect4() throws IOException {\n@@ -101,1 +103,1 @@\n-                expectThrows(IllegalArgumentException.class,\n+                assertThrows(IllegalArgumentException.class,\n@@ -108,1 +110,1 @@\n-     * Test timed read where the read succeeds immediately\n+     * Test timed read where the read succeeds immediately.\n@@ -110,1 +112,2 @@\n-    public void testTimedRead1() throws IOException {\n+    @Test\n+    void testTimedRead1() throws IOException {\n@@ -115,1 +118,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -120,1 +123,1 @@\n-     * Test timed read where the read succeeds after a delay\n+     * Test timed read where the read succeeds after a delay.\n@@ -122,1 +125,2 @@\n-    public void testTimedRead2() throws IOException {\n+    @Test\n+    void testTimedRead2() throws IOException {\n@@ -127,1 +131,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -132,1 +136,1 @@\n-     * Test timed read where the read times out\n+     * Test timed read where the read times out.\n@@ -134,1 +138,2 @@\n-    public void testTimedRead3() throws IOException {\n+    @Test\n+    void testTimedRead3() throws IOException {\n@@ -138,1 +143,1 @@\n-            expectThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n@@ -145,1 +150,1 @@\n-     * Test timed read that succeeds after a previous read has timed out\n+     * Test timed read that succeeds after a previous read has timed out.\n@@ -147,1 +152,2 @@\n-    public void testTimedRead4() throws IOException {\n+    @Test\n+    void testTimedRead4() throws IOException {\n@@ -150,1 +156,1 @@\n-            expectThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n@@ -153,1 +159,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -159,1 +165,1 @@\n-     * after a short delay\n+     * after a short delay.\n@@ -161,1 +167,2 @@\n-    public void testTimedRead5() throws IOException {\n+    @Test\n+    void testTimedRead5() throws IOException {\n@@ -164,1 +171,1 @@\n-            expectThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n@@ -168,1 +175,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -173,1 +180,1 @@\n-     * Test untimed read that succeeds after a previous read has timed out\n+     * Test untimed read that succeeds after a previous read has timed out.\n@@ -175,1 +182,2 @@\n-    public void testTimedRead6() throws IOException {\n+    @Test\n+    void testTimedRead6() throws IOException {\n@@ -178,1 +186,1 @@\n-            expectThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n@@ -182,1 +190,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -188,1 +196,1 @@\n-     * after a short delay\n+     * after a short delay.\n@@ -190,1 +198,2 @@\n-    public void testTimedRead7() throws IOException {\n+    @Test\n+    void testTimedRead7() throws IOException {\n@@ -193,1 +202,1 @@\n-            expectThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketTimeoutException.class, () -> s2.getInputStream().read());\n@@ -197,1 +206,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -202,1 +211,1 @@\n-     * Test async close of timed read\n+     * Test async close of timed read.\n@@ -204,1 +213,2 @@\n-    public void testTimedRead8() throws IOException {\n+    @Test\n+    void testTimedRead8() throws IOException {\n@@ -208,1 +218,1 @@\n-            expectThrows(SocketException.class, () -> s2.getInputStream().read());\n+            assertThrows(SocketException.class, () -> s2.getInputStream().read());\n@@ -213,1 +223,1 @@\n-     * Test read with a timeout of Integer.MAX_VALUE\n+     * Test read with a timeout of Integer.MAX_VALUE.\n@@ -215,1 +225,2 @@\n-    public void testTimedRead9() throws IOException {\n+    @Test\n+    void testTimedRead9() throws IOException {\n@@ -220,1 +231,28 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n+        });\n+    }\n+\n+    \/**\n+     * Test concurrent reading with a timeout of 2s. The read method should throw\n+     * SocketTimeoutException after 2s, not after 2s, 4s, 6s, 8s, ...\n+     *\/\n+    @Test\n+    void testTimedRead10() throws Exception {\n+        var futures = new ArrayList<Future<?>>();\n+        withConnection((_, s) -> {\n+            s.setSoTimeout(2000);\n+            Callable<?> timedReadTask = () -> {\n+                long startMillis = millisTime();\n+                assertThrows(SocketTimeoutException.class,\n+                        () -> s.getInputStream().read());\n+                int timeout = s.getSoTimeout();\n+                checkDuration(startMillis, timeout-100, timeout+20_000);\n+                return null;\n+            };\n+            \/\/ start 100 virtual threads to read from the socket\n+            try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\n+                for (int i = 0; i < 100; i++) {\n+                    Future<?> future = executor.submit(timedReadTask);\n+                    futures.add(future);\n+                }\n+            }\n@@ -222,0 +260,3 @@\n+        for (Future<?> future : futures) {\n+            future.get();\n+        }\n@@ -227,1 +268,2 @@\n-    public void testTimedWrite1() throws IOException {\n+    @Test\n+    void testTimedWrite1() throws IOException {\n@@ -232,1 +274,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -248,1 +290,2 @@\n-    public void testTimedWrite2() throws IOException {\n+    @Test\n+    void testTimedWrite2() throws IOException {\n@@ -253,1 +296,1 @@\n-            assertTrue(b == 99);\n+            assertEquals(99, b);\n@@ -269,1 +312,1 @@\n-     * Test timed accept where a connection is established immediately\n+     * Test timed accept where a connection is established immediately.\n@@ -271,1 +314,2 @@\n-    public void testTimedAccept1() throws IOException {\n+    @Test\n+    void testTimedAccept1() throws IOException {\n@@ -286,1 +330,1 @@\n-     * Test timed accept where a connection is established after a short delay\n+     * Test timed accept where a connection is established after a short delay.\n@@ -288,1 +332,2 @@\n-    public void testTimedAccept2() throws IOException {\n+    @Test\n+    void testTimedAccept2() throws IOException {\n@@ -300,1 +345,2 @@\n-    public void testTimedAccept3() throws IOException {\n+    @Test\n+    void testTimedAccept3() throws IOException {\n@@ -319,1 +365,2 @@\n-    public void testTimedAccept4() throws IOException {\n+    @Test\n+    void testTimedAccept4() throws IOException {\n@@ -337,1 +384,1 @@\n-     * accept timed out\n+     * accept timed out.\n@@ -339,1 +386,2 @@\n-    public void testTimedAccept5() throws IOException {\n+    @Test\n+    void testTimedAccept5() throws IOException {\n@@ -358,1 +406,1 @@\n-     * accept timed out and after a short delay\n+     * accept timed out and after a short delay.\n@@ -360,1 +408,2 @@\n-    public void testTimedAccept6() throws IOException {\n+    @Test\n+    void testTimedAccept6() throws IOException {\n@@ -376,1 +425,1 @@\n-     * Test async close of a timed accept\n+     * Test async close of a timed accept.\n@@ -378,1 +427,2 @@\n-    public void testTimedAccept7() throws IOException {\n+    @Test\n+    void testTimedAccept7() throws IOException {\n@@ -396,3 +446,3 @@\n-    public void testTimedAccept8() throws IOException {\n-        if (Thread.currentThread().isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+    @Test\n+    void testTimedAccept8() throws IOException {\n+        assumeFalse(Thread.currentThread().isVirtual(), \"Main test is a virtual thread\");\n@@ -421,3 +471,3 @@\n-    public void testTimedAccept9() throws IOException {\n-        if (Thread.currentThread().isVirtual())\n-            throw new SkipException(\"Main test is a virtual thread\");\n+    @Test\n+    void testTimedAccept9() throws IOException {\n+        assumeFalse(Thread.currentThread().isVirtual(), \"Main test is a virtual thread\");\n@@ -448,1 +498,2 @@\n-    public void testTimedAccept10() throws Exception {\n+    @Test\n+    void testTimedAccept10() throws Exception {\n@@ -459,1 +510,1 @@\n-            Throwable e = expectThrows(ExecutionException.class, result1::get);\n+            Throwable e = assertThrows(ExecutionException.class, result1::get);\n@@ -461,1 +512,1 @@\n-            e = expectThrows(ExecutionException.class, result2::get);\n+            e = assertThrows(ExecutionException.class, result2::get);\n@@ -475,1 +526,2 @@\n-    public void testTimedAccept11() throws Exception {\n+    @Test\n+    void testTimedAccept11() throws Exception {\n@@ -517,2 +569,2 @@\n-    @Test(expectedExceptions = { IllegalArgumentException.class })\n-    public void testBadTimeout1() throws IOException {\n+    @Test\n+    void testBadTimeout1() throws IOException {\n@@ -520,1 +572,1 @@\n-            s.setSoTimeout(-1);\n+            assertThrows(IllegalArgumentException.class, () -> s.setSoTimeout(-1));\n@@ -527,2 +579,2 @@\n-    @Test(expectedExceptions = { IllegalArgumentException.class })\n-    public void testBadTimeout2() throws IOException {\n+    @Test\n+    void testBadTimeout2() throws IOException {\n@@ -530,1 +582,1 @@\n-            ss.setSoTimeout(-1);\n+            assertThrows(IllegalArgumentException.class, () -> ss.setSoTimeout(-1));\n@@ -535,1 +587,1 @@\n-     * Returns a ServerSocket bound to a port on the loopback address\n+     * Returns a ServerSocket bound to a port on the loopback address.\n@@ -545,1 +597,1 @@\n-     * An operation that accepts two arguments and may throw IOException\n+     * An operation that accepts two arguments and may throw IOException.\n@@ -552,1 +604,1 @@\n-     * Invokes the consumer with a connected pair of sockets\n+     * Invokes the consumer with a connected pair of sockets.\n@@ -571,1 +623,1 @@\n-     * Schedule c to be closed after a delay\n+     * Schedule c to be closed after a delay.\n@@ -582,1 +634,1 @@\n-     * Schedule thread to be interrupted after a delay\n+     * Schedule thread to be interrupted after a delay.\n@@ -589,1 +641,1 @@\n-     * Schedule a thread to connect to the given end point after a delay\n+     * Schedule a thread to connect to the given end point after a delay.\n@@ -600,1 +652,1 @@\n-     * Schedule a thread to read to EOF after a delay\n+     * Schedule a thread to read to EOF after a delay.\n@@ -612,1 +664,1 @@\n-     * Schedule a thread to write after a delay\n+     * Schedule a thread to write after a delay.\n@@ -626,6 +678,1 @@\n-        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n-        try {\n-            return executor.schedule(task, delay, TimeUnit.MILLISECONDS);\n-        } finally {\n-            executor.shutdown();\n-        }\n+        return ForkJoinPool.commonPool().schedule(task, delay, TimeUnit.MILLISECONDS);\n@@ -643,1 +690,1 @@\n-     * Check the duration of a task\n+     * Check the duration of a task.\n","filename":"test\/jdk\/java\/net\/Socket\/Timeouts.java","additions":146,"deletions":99,"binary":false,"changes":245,"status":"modified"}]}