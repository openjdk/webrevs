{"files":[{"patch":"@@ -50,1 +50,0 @@\n-  template(HeapDumpMerge)                         \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2169,14 +2169,0 @@\n-\/\/ The VM operation wraps DumpMerger so that it could be performed by VM thread\n-class VM_HeapDumpMerge : public VM_Operation {\n-private:\n-  DumpMerger* _merger;\n-public:\n-  VM_HeapDumpMerge(DumpMerger* merger) : _merger(merger) {}\n-  VMOp_Type type() const { return VMOp_HeapDumpMerge; }\n-  \/\/ heap dump merge could happen outside safepoint\n-  virtual bool evaluate_at_safepoint() const { return false; }\n-  void doit() {\n-    _merger->do_merge();\n-  }\n-};\n-\n@@ -2662,11 +2648,4 @@\n-  Thread* current_thread = Thread::current();\n-  if (current_thread->is_AttachListener_thread()) {\n-    \/\/ perform heapdump file merge operation in the current thread prevents us\n-    \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n-    \/\/ GC and other VM operations.\n-    merger.do_merge();\n-  } else {\n-    \/\/ otherwise, performs it by VM thread\n-    VM_HeapDumpMerge op(&merger);\n-    VMThread::execute(&op);\n-  }\n+  \/\/ perform heapdump file merge operation in the current thread prevents us\n+  \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n+  \/\/ GC and other VM operations.\n+  merger.do_merge();\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":4,"deletions":25,"binary":false,"changes":29,"status":"modified"}]}