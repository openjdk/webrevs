{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,4 @@\n+import java.util.List;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,1 +37,0 @@\n-import org.testng.annotations.AfterTest;\n@@ -39,1 +42,0 @@\n-import java.io.IOException;\n@@ -48,7 +50,8 @@\n-    private static final String JDK_HOME = System.getProperty(\"test.jdk\");\n-    private static final String TEST_SRC = System.getProperty(\"test.src\");\n-    private static final Path POLICY_DIR = Paths.get(JDK_HOME, \"conf\", \"security\",\n-            \"policy\", \"testlimited\");\n-    private static final Path POLICY_FILE = Paths.get(TEST_SRC, \"default_local.policy\");\n-\n-    Path targetFile = null;\n+    private static final String JDK_HOME = System.getProperty(\"test.jdk\", \".\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\", \".\");\n+    private static final Path TEMP_JDK_HOME = Path.of(\"java\");\n+    private static final Path POLICY_DIR = TEMP_JDK_HOME.resolve(Path.of(\"conf\", \"security\",\n+            \"policy\", \"testlimited\"));\n+    private static final Path POLICY_FILE_SRC = Paths.get(TEST_SRC, \"default_local.policy\");\n+    private static final Path POLICY_FILE_TARGET = POLICY_DIR\n+        .resolve(POLICY_FILE_SRC.getFileName());\n@@ -57,1 +60,5 @@\n-    public void setUp() throws IOException {\n+    public void setUp() throws Exception {\n+        \/\/ Clone the tested JDK to the scratch directory\n+        CDSTestUtils.clone(new File(JDK_HOME), new File(TEMP_JDK_HOME.toString()));\n+\n+        \/\/ create policy directory in the cloned JDK\n@@ -62,7 +69,2 @@\n-        targetFile = POLICY_DIR.resolve(POLICY_FILE.getFileName());\n-        Files.copy(POLICY_FILE, targetFile, StandardCopyOption.REPLACE_EXISTING);\n-    }\n-\n-    @AfterTest\n-    public void cleanUp() throws IOException {\n-        Files.delete(targetFile);\n+        \/\/ copy policy file into policy directory\n+        Files.copy(POLICY_FILE_SRC, POLICY_FILE_TARGET, StandardCopyOption.REPLACE_EXISTING);\n@@ -71,7 +73,2 @@\n-    @Test\n-    public void test() throws Exception {\n-        String JAVA_HOME = System.getProperty(\"java.home\");\n-        String FS = System.getProperty(\"file.separator\");\n-        Path testlimited = Path.of(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                FS + \"policy\" + FS + \"testlimited\");\n-        if (!Files.exists(testlimited)) {\n+    public static void main(String[] args) throws Throwable {\n+        if (!Files.exists(POLICY_DIR)) {\n@@ -81,3 +78,1 @@\n-\n-        File testpolicy = new File(JAVA_HOME + FS + \"conf\" + FS + \"security\" +\n-                FS + \"policy\" + FS + \"testlimited\" + FS + \"default_local.policy\");\n+        File testpolicy = new File(POLICY_FILE_TARGET.toString());\n@@ -94,0 +89,12 @@\n+\n+    @Test\n+    public void test() throws Exception {\n+        String tmpJava = TEMP_JDK_HOME.resolve(\"bin\").resolve(\"java\").toString();\n+        String[] args = Utils.prependTestJavaOpts(InconsistentEntries.class.getName());\n+        ProcessBuilder pb = new ProcessBuilder(tmpJava);\n+        pb.command().addAll(List.of(args));\n+\n+        ProcessTools\n+            .executeProcess(pb)\n+            .shouldHaveExitValue(0);\n+    }\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/InconsistentEntries.java","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"}]}