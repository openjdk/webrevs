{"files":[{"patch":"@@ -213,0 +213,2 @@\n+java\/awt\/TrayIcon\/MouseMoveTest.java 8203053 linux-all\n+java\/awt\/TrayIcon\/TrayIconKeySelectTest.java 8341557 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.RenderingHints;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.image.BufferedImage;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 6267936\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @summary Tests that the previous image in TrayIcon is cleared\n+ *          when a new image is set\n+ * @run main\/manual ClearPrevImageTest\n+ *\/\n+\n+public class ClearPrevImageTest {\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test checks that the previous image in TrayIcon is cleared\n+            when a new image is set.\n+\n+            When the test starts, a RED square TrayIcon is added\n+            to the SystemTray (also, called Taskbar Status Area in MS Windows,\n+            Notification Area in, GNOME and System Tray in KDE).\n+\n+            You should see it change into YELLOW after 5 seconds.\n+            If you still see RED TrayIcon after 5 seconds,\n+            press FAIL, otherwise press PASS\n+            \"\"\";\n+\n+\n+    public static void main(String[] args) throws Exception {\n+         if (!SystemTray.isSupported()) {\n+             throw new SkippedException(\"Test not applicable as\"\n+                                        + \" System Tray not supported\");\n+         }\n+\n+        PassFailJFrame passFailJFrame\n+                = PassFailJFrame.builder()\n+                                .title(\"TrayIcon Change Test Instructions\")\n+                                .instructions(INSTRUCTIONS)\n+                                .columns(40)\n+                                .build();\n+\n+        EventQueue.invokeAndWait(ClearPrevImageTest::createAndShowTrayIcon);\n+        try {\n+            changeTrayIcon();\n+            passFailJFrame.awaitAndCheck();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed: \", e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    tray.remove(icon);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowTrayIcon() {\n+        Image img1 = createIcon(Color.RED);\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(img1);\n+        icon.setImageAutoSize(true);\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding\"\n+                                       + \" icon to system tray\", e);\n+        }\n+    }\n+\n+    private static void changeTrayIcon() {\n+        try {\n+            Thread.sleep(5000);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+        Image img2 = createIcon(Color.YELLOW);\n+        icon.setImage(img2);\n+    }\n+\n+    private static Image createIcon(Color color) {\n+        BufferedImage image = new BufferedImage(16, 16,\n+                                                BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                           RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.setColor(color);\n+        g.fillRect(0, 0, 16, 16);\n+        g.dispose();\n+        return image;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/ClearPrevImageTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.SystemTray;\n+import java.awt.TextArea;\n+import java.awt.TrayIcon;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.image.BufferedImage;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 6269309\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @summary Tests that focus is transferred properly back\n+ *          to toplevel after clicking on a tray icon.\n+ * @run main\/manual FocusLostAfterTrayTest\n+ *\/\n+\n+public class FocusLostAfterTrayTest {\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test checks that focus is transferred properly back\n+            to top-level after clicking on a tray icon.\n+\n+            When the test starts, a Frame with a text area & a RED tray icon\n+            are shown. If you don't see a tray icon please make sure that\n+            the tray area (also called Taskbar Status Area on MS Windows\n+            Notification Area on Gnome or System Tray on KDE) is visible.\n+\n+            Click with a mouse inside a text area and make sure that it has\n+            received input focus. Then click on the tray icon and then back\n+            on the text area and verify that it has input focus again. Repeat\n+            the last step several times. Ensure that the text area always\n+            has the input focus and there are no \"FOCUS LOST\" event\n+            for text area in the log section.\n+\n+            If above is true, Press PASS, else FAIL.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"Test not applicable as\"\n+                                       + \" System Tray not supported\");\n+        }\n+\n+        try {\n+            PassFailJFrame.builder()\n+                          .title(\"FocusLostAfterTrayTest Instructions\")\n+                          .instructions(INSTRUCTIONS)\n+                          .columns(40)\n+                          .testUI(FocusLostAfterTrayTest::createAndShowTrayIcon)\n+                          .logArea()\n+                          .build()\n+                          .awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    tray.remove(icon);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static Frame createAndShowTrayIcon() {\n+        Frame frame = new Frame(\"FocusLostAfterTrayTest\");\n+        frame.setBounds(100, 300, 200, 200);\n+        frame.setLayout(new BorderLayout());\n+        TextArea ta = new TextArea();\n+        ta.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                PassFailJFrame.log(\"FOCUS GAINED: \"\n+                                   + e.getComponent().getClass().toString());\n+            }\n+            @Override\n+            public void focusLost(FocusEvent e) {\n+                PassFailJFrame.log(\"FOCUS LOST !! \"\n+                                   + e.getComponent().getClass().toString());\n+            }\n+        });\n+        frame.add(ta);\n+\n+        BufferedImage image = new BufferedImage(16, 16,\n+                                                BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                           RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, 16, 16);\n+        g.dispose();\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(image);\n+        icon.setImageAutoSize(true);\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding\"\n+                                       + \" icon to system tray\", e);\n+        }\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/FocusLostAfterTrayTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.image.BufferedImage;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 6267980\n+ * @summary PIT:Spurious MouseMoved events are triggered by Tray Icon\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @run main\/manual MouseMoveTest\n+ *\/\n+\n+public class MouseMoveTest {\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1) You will see a tray icon (white square) in notification area,\n+            2) Move mouse pointer to the icon and leave it somewhere inside the icon,\n+            3) Verify that MOUSE_MOVE events are NOT triggered after you have STOPPED\n+               moving mouse.\n+            4) If events are still triggered Press FAIL else PASS.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"Test not applicable as\"\n+                                       + \" System Tray not supported\");\n+        }\n+\n+        PassFailJFrame passFailJFrame\n+                = PassFailJFrame.builder()\n+                                .title(\"TrayIcon Change Test Instructions\")\n+                                .instructions(INSTRUCTIONS)\n+                                .columns(45)\n+                                .logArea()\n+                                .build();\n+\n+        try {\n+            EventQueue.invokeAndWait(MouseMoveTest::createAndShowTrayIcon);\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    tray.remove(icon);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowTrayIcon() {\n+        BufferedImage img = new BufferedImage(32, 32,\n+                                              BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = img.createGraphics();\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, 32, 32);\n+        g.dispose();\n+\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(img);\n+        icon.setImageAutoSize(true);\n+\n+        icon.addMouseMotionListener(new MouseMotionAdapter() {\n+                public void mouseMoved(MouseEvent me){\n+                    PassFailJFrame.log(me.toString());\n+                }\n+        });\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding\"\n+                                       + \" icon to system tray\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/MouseMoveTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.image.BufferedImage;\n+\n+import jtreg.SkippedException;\n+import sun.awt.AppContext;\n+import sun.awt.SunToolkit;\n+\n+\/*\n+ * @test\n+ * @bug 6390934\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @modules java.desktop\/sun.awt\n+ * @summary To check if TrayIcon msg is displayed when there is no system tray.\n+ * @run main\/manual RemoveSystemTrayTest\n+ *\/\n+\n+public class RemoveSystemTrayTest {\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+    private static final ThreadGroup threadGroup\n+            = new ThreadGroup(\"Test thread group\");\n+    private static AppContext appContext = null;\n+    private static final Object lock = new Object();\n+    \/\/ stores information whether AppContext was created to prevent spurious wakeups\n+    private static volatile boolean isCreated;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                1) When the test starts an icon is added to the SystemTray area.\n+                2) Remove the SystemTray manually (if it's impossible just press PASS).\n+                3) If you still see the tray icon in the tray area region\n+                   then press FAIL else goto next step.\n+                4) Press button 'Show message'.\n+                5) If you see the tray icon message then press FAIL else press PASS.\n+                \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"Test not applicable as\"\n+                                       + \" System Tray not supported\");\n+        }\n+        try {\n+            PassFailJFrame.builder()\n+                          .title(\"FocusLostAfterTrayTest Instructions\")\n+                          .instructions(INSTRUCTIONS)\n+                          .columns(40)\n+                          .testUI(RemoveSystemTrayTest::createAndShowUI)\n+                          .logArea(4)\n+                          .build()\n+                          .awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    tray.remove(icon);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static Frame createAndShowUI() {\n+        Frame frame = new Frame(\"RemoveSystemTrayTest\");\n+        Button button = new Button(\"Show message\");\n+        button.addActionListener(e -> displayMessage());\n+        frame.add(button);\n+        frame.setSize(150, 100);\n+\n+        createAppContext();\n+        final Runnable runnable = RemoveSystemTrayTest::addTrayIcon;\n+        final Thread thread = new Thread(threadGroup, runnable,\n+                                         \"Thread to add icon\");\n+        thread.start();\n+        return frame;\n+    }\n+\n+\n+    private static void addTrayIcon() {\n+        BufferedImage img = new BufferedImage(32, 32,\n+                                              BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = img.createGraphics();\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, 32, 32);\n+        g.setColor(Color.RED);\n+        g.fillRect(6, 6, 20, 20);\n+        g.dispose();\n+\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(img);\n+        icon.setImageAutoSize(true);\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding\"\n+                                       + \" icon to system tray\", e);\n+        }\n+    }\n+\n+    private static void createAppContext() {\n+        final Runnable runnable = () -> {\n+            appContext = SunToolkit.createNewAppContext();\n+            synchronized (lock) {\n+                isCreated = true;\n+                lock.notifyAll();\n+            }\n+        };\n+\n+        final Thread thread = new Thread(threadGroup, runnable, \"Test thread\");\n+        synchronized (lock) {\n+            thread.start();\n+            while (!isCreated) {\n+                try {\n+                    lock.wait();\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        if (appContext == null) {\n+            PassFailJFrame.log(\"WARNING: Failed to create AppContext.\");\n+        } else {\n+            PassFailJFrame.log(\"AppContext was created.\");\n+        }\n+    }\n+\n+    private static void displayMessage() {\n+        final Runnable runnable = () -> icon.displayMessage(\"caption\",\n+                                                \"TrayIcon Msg\", TrayIcon.MessageType.INFO);\n+        final Thread thread = new Thread(threadGroup, runnable,\n+                                         \"Thread to display message\");\n+        thread.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/RemoveSystemTrayTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.image.BufferedImage;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 6267943\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @summary Tests the possibility of selecting a tray icon with the keyboard.\n+ * @run main\/manual TrayIconKeySelectTest\n+ *\/\n+\n+public class TrayIconKeySelectTest {\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Tests that TrayIcon is selectable with the keyboard\n+            When the test is started you will see three-color icon\n+            in the system tray.\n+\n+            1. Bring the focus to the icon with TAB. Press ENTER key.\n+            - One or more ActionEvent should be generated\n+               (see the output area of the test)\n+\n+            2. Bring the focus again to the icon. Press SPACE key twice.\n+            - One or more ActionEvent should be generated.\n+\n+            3. Bring the focus again to the icon. Click on the icon with\n+            the LEFT mouse button twice.\n+            - One or more ActionEvent should be generated.\n+\n+            4. Again bring the focus to the icon. Click on the icon with\n+            the LEFT mouse button just once.\n+            - NO ActionEvent should be generated.\n+\n+            5. Repeat the 4th step with other mouse buttons.\n+\n+            If all the above are true press PASS, else FAIL\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            throw new SkippedException(\"Test not applicable as\"\n+                                       + \" System Tray not supported\");\n+        }\n+        PassFailJFrame passFailJFrame;\n+        try {\n+            passFailJFrame\n+                    = PassFailJFrame.builder()\n+                                    .title(\"TrayIconKeySelectTest Instructions\")\n+                                    .instructions(INSTRUCTIONS)\n+                                    .columns(40)\n+                                    .logArea()\n+                                    .build();\n+\n+            EventQueue.invokeAndWait(TrayIconKeySelectTest::createAndShowTrayIcon);\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (tray != null) {\n+                    tray.remove(icon);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowTrayIcon() {\n+        BufferedImage im = new BufferedImage(16, 16,\n+                                             BufferedImage.TYPE_INT_ARGB);\n+        Graphics gr = im.createGraphics();\n+        gr.setColor(Color.white);\n+        gr.fillRect(0, 0, 16, 5);\n+        gr.setColor(Color.blue);\n+        gr.fillRect(0, 5, 16, 10);\n+        gr.setColor(Color.red);\n+        gr.fillRect(0, 10, 16, 16);\n+        gr.dispose();\n+\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(im);\n+        icon.setImageAutoSize(true);\n+        icon.addActionListener(e -> PassFailJFrame.log(e.toString()));\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding\"\n+                                       + \" icon to system tray\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconKeySelectTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}