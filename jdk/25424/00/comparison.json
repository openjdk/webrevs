{"files":[{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.IllegalClassFormatException;\n-import java.lang.instrument.Instrumentation;\n-import java.security.ProtectionDomain;\n-import jdk.test.lib.thread.VThreadPinner;\n-\n-\/*\n- * @test\n- * @summary javaagent + tracePinnedThreads will cause jvm crash\/ run into deadlock when the virtual thread is pinned\n- * @library \/test\/lib\n- * @requires vm.continuations\n- * @requires vm.jvmti\n- * @modules java.base\/java.lang:+open\n- * @compile TestPinCaseWithCFLH.java\n- * @build jdk.test.lib.Utils\n- * @run driver jdk.test.lib.util.JavaAgentBuilder\n- *             TestPinCaseWithCFLH TestPinCaseWithCFLH.jar\n- * @run main\/othervm\/timeout=100  -Djdk.virtualThreadScheduler.maxPoolSize=1\n- *       -Djdk.tracePinnedThreads=full --enable-native-access=ALL-UNNAMED\n- *       -javaagent:TestPinCaseWithCFLH.jar TestPinCaseWithCFLH\n- *\/\n-public class TestPinCaseWithCFLH {\n-\n-    public static class TestClassFileTransformer implements ClassFileTransformer {\n-        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n-                                ProtectionDomain protectionDomain, byte[] classfileBuffer)\n-                                throws IllegalClassFormatException {\n-            return classfileBuffer;\n-        }\n-    }\n-\n-    \/\/ Called when agent is loaded at startup\n-    public static void premain(String agentArgs, Instrumentation instrumentation) throws Exception {\n-        instrumentation.addTransformer(new TestClassFileTransformer());\n-    }\n-\n-    private static int result = 0;\n-\n-    public static void main(String[] args) throws Exception{\n-        Thread t1 = Thread.ofVirtual().name(\"vthread-1\").start(() -> {\n-            VThreadPinner.runPinned(() -> {\n-                try {\n-                    \/\/ try yield, will pin,\n-                    \/\/ javaagent + tracePinnedThreads should not lead to crash\n-                    \/\/ (because of the class `PinnedThreadPrinter`)\n-                    Thread.sleep(500);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            });\n-        });\n-        t1.join();\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/TestPinCaseWithCFLH\/TestPinCaseWithCFLH.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"}]}