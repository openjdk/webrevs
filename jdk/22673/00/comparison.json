{"files":[{"patch":"@@ -2379,0 +2379,14 @@\n+void MacroAssembler::cmp_mxcsr(Address mxcsr_save, Register tmp, Register rscratch) {\n+  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n+  assert(rscratch != noreg || always_reachable(mxcsr_std), \"missing\");\n+\n+  stmxcsr(mxcsr_save);\n+  movl(tmp, mxcsr_save);\n+  if (EnableX86ECoreOpts) {\n+    orl(tmp, 0x003f);  \/\/ Set exceptions bits, addr_mxcsr_std has them set for ECore\n+  } else {\n+    andl(tmp, 0xFFC0); \/\/ Mask out any pending exceptions (only check control and mask bits)\n+  }\n+  cmp32(tmp, mxcsr_std, rscratch);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1138,0 +1138,1 @@\n+  void cmp_mxcsr(Address mxcsr_save, Register tmp, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-const int MXCSR_MASK  = 0xFFC0;  \/\/ Mask out any pending exceptions\n@@ -178,5 +177,1 @@\n-      __ stmxcsr(mxcsr_save);\n-      __ movl(rax, mxcsr_save);\n-      __ andl(rax, MXCSR_MASK);    \/\/ Only check control and mask bits\n-      ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-      __ cmp32(rax, mxcsr_std);\n+      __ cmp_mxcsr(mxcsr_save, rax, noreg);\n@@ -468,4 +463,1 @@\n-      __ stmxcsr(mxcsr_save);\n-      __ movl(rax, mxcsr_save);\n-      __ andl(rax, MXCSR_MASK);\n-      __ cmp32(rax, mxcsr_std);\n+      __ cmp_mxcsr(mxcsr_save, rax);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -251,3 +251,0 @@\n-    __ stmxcsr(mxcsr_save);\n-    __ movl(rax, mxcsr_save);\n-    __ andl(rax, 0xFFC0); \/\/ Mask out any pending exceptions (only check control and mask bits)\n@@ -255,1 +252,1 @@\n-    __ cmp32(rax, mxcsr_std, rscratch1);\n+    __ cmp_mxcsr(mxcsr_save, rax, rscratch1);\n@@ -577,4 +574,1 @@\n-    __ stmxcsr(mxcsr_save);\n-    __ movl(rax, mxcsr_save);\n-    __ andl(rax, 0xFFC0); \/\/ Mask out any pending exceptions (only check control and mask bits)\n-    __ cmp32(rax, mxcsr_std, rscratch1);\n+    __ cmp_mxcsr(mxcsr_save, rax, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -80,2 +80,0 @@\n-constexpr int MXCSR_MASK = 0xFFC0;  \/\/ Mask out any pending exceptions\n-\n@@ -118,3 +116,0 @@\n-    __ stmxcsr(mxcsr_save);\n-    __ movl(rax, mxcsr_save);\n-    __ andl(rax, MXCSR_MASK);    \/\/ Only check control and mask bits\n@@ -122,1 +117,1 @@\n-    __ cmp32(rax, mxcsr_std, rscratch1);\n+    __ cmp_mxcsr(mxcsr_save, rax, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2591,1 +2591,1 @@\n-    jint MxCsr = INITIAL_MXCSR;\n+    jint MxCsr = INITIAL_MXCSR; \/\/ FIXME? this is `define INITIAL_MXCSR 0x1f80` in windows sdk\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xcomp -XX:-TieredCompilation -XX:UseAVX=2 -XX:+UnlockDiagnosticVMOptions -XX:+EnableX86ECoreOpts -XX:-CheckJNICalls IndexOf\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xcomp -XX:-TieredCompilation -XX:UseAVX=2 -XX:+UnlockDiagnosticVMOptions -XX:+EnableX86ECoreOpts IndexOf\n","filename":"test\/jdk\/java\/lang\/String\/IndexOf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+EnableX86ECoreOpts -XX:-CheckJNICalls -XX:UseAVX=2 -Xbatch -XX:-TieredCompilation -XX:CompileCommand=dontinline,ECoreIndexOf.indexOfKernel ECoreIndexOf\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+EnableX86ECoreOpts -XX:UseAVX=2 -Xbatch -XX:-TieredCompilation -XX:CompileCommand=dontinline,ECoreIndexOf.indexOfKernel ECoreIndexOf\n","filename":"test\/jdk\/java\/lang\/StringBuffer\/ECoreIndexOf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}