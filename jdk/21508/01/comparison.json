{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,2 @@\n+    private Boolean isOther = null;\n+\n@@ -63,0 +65,11 @@\n+    private boolean isOther() throws IOException {\n+        Boolean isOther = this.isOther;\n+        if (isOther == null) {\n+            if (ch instanceof FileChannelImpl fci)\n+                this.isOther = isOther = fci.isOther();\n+            else\n+                this.isOther = isOther = Boolean.FALSE;\n+        }\n+        return isOther;\n+    }\n+\n@@ -108,1 +121,2 @@\n-        if (!(ch instanceof SeekableByteChannel sbc))\n+        if (!(ch instanceof SeekableByteChannel sbc) ||\n+             (ch instanceof FileChannelImpl fci && isOther()))\n@@ -159,1 +173,2 @@\n-        if (!(ch instanceof SeekableByteChannel sbc))\n+        if (!(ch instanceof SeekableByteChannel sbc) ||\n+             (ch instanceof FileChannelImpl fci && isOther()))\n@@ -195,1 +210,3 @@\n-        if (ch instanceof SeekableByteChannel sbc) {\n+        if (ch instanceof FileChannelImpl fci) {\n+            return fci.available();\n+        } else if (ch instanceof SeekableByteChannel sbc) {\n@@ -205,1 +222,2 @@\n-        if (ch instanceof SeekableByteChannel sbc) {\n+        if (ch instanceof SeekableByteChannel sbc &&\n+            !(ch instanceof FileChannelImpl fci && isOther())) {\n@@ -227,1 +245,2 @@\n-        if (ch instanceof FileChannel fc) {\n+        if (ch instanceof FileChannel fc &&\n+            !(fc instanceof FileChannelImpl fci && isOther())) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -457,0 +457,1 @@\n+\n@@ -532,0 +533,40 @@\n+    public int available() throws IOException {\n+        ensureOpen();\n+        synchronized (positionLock) {\n+            int a = -1;\n+            int ti = -1;\n+            try {\n+                beginBlocking();\n+                ti = threads.add();\n+                if (!isOpen())\n+                    return -1;\n+                a = nd.available(fd);\n+            } finally {\n+                threads.remove(ti);\n+                endBlocking(a > -1);\n+            }\n+            return a;\n+        }\n+    }\n+\n+    public boolean isOther() throws IOException {\n+        ensureOpen();\n+        int ti = -1;\n+        Boolean isOther = null;\n+        try {\n+            beginBlocking();\n+            ti = threads.add();\n+            if (!isOpen())\n+                return false;\n+            boolean attempted = Blocker.begin();\n+            try {\n+                return isOther = nd.isOther(fd);\n+            } finally {\n+                Blocker.end(attempted);\n+            }\n+        } finally {\n+            threads.remove(ti);\n+            endBlocking(isOther != null);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,4 @@\n+    abstract int available(FileDescriptor fd) throws IOException;\n+\n+    abstract boolean isOther(FileDescriptor fd) throws IOException;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileDispatcher.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,8 @@\n+    int available(FileDescriptor fd) throws IOException {\n+        return available0(fd);\n+    }\n+\n+    boolean isOther(FileDescriptor fd) throws IOException {\n+        return isOther0(fd);\n+    }\n+\n@@ -199,0 +207,4 @@\n+    static native int available0(FileDescriptor fd) throws IOException;\n+\n+    static native boolean isOther0(FileDescriptor fd) throws IOException;\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixFileDispatcherImpl.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <sys\/ioctl.h>\n@@ -44,0 +45,1 @@\n+#include \"java_lang_Integer.h\"\n@@ -46,0 +48,1 @@\n+#include \"io_util_md.h\"\n@@ -181,0 +184,51 @@\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_UnixFileDispatcherImpl_available0(JNIEnv *env, jobject this, jobject fdo)\n+{\n+    jint fd = fdval(env, fdo);\n+    struct stat fbuf;\n+    jlong size = -1;\n+\n+    if (fstat(fd, &fbuf) != -1) {\n+        int mode = fbuf.st_mode;\n+        if (S_ISCHR(mode) || S_ISFIFO(mode) || S_ISSOCK(mode)) {\n+            int n = ioctl(fd, FIONREAD, &n);\n+            if (n >= 0) {\n+                return n;\n+            }\n+        } else if (S_ISREG(mode)) {\n+            size = fbuf.st_size;\n+        }\n+    }\n+\n+    jlong position;\n+    if ((position = lseek(fd, 0, SEEK_CUR)) == -1) {\n+        return 0;\n+    }\n+\n+    if (size < position) {\n+        if ((size = lseek(fd, 0, SEEK_END)) == -1)\n+            return 0;\n+        else if (lseek(fd, position, SEEK_SET) == -1)\n+            return 0;\n+    }\n+\n+    jlong available = size - position;\n+    return available > java_lang_Integer_MAX_VALUE ?\n+        java_lang_Integer_MAX_VALUE : (jint)available;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_ch_UnixFileDispatcherImpl_isOther0(JNIEnv *env, jobject this, jobject fdo)\n+{\n+    jint fd = fdval(env, fdo);\n+    struct stat fbuf;\n+\n+    if (fstat(fd, &fbuf) == -1)\n+        handle(env, -1, \"isOther failed\");\n+\n+    if (S_ISREG(fbuf.st_mode) || S_ISDIR(fbuf.st_mode) || S_ISLNK(fbuf.st_mode))\n+        return JNI_FALSE;\n+\n+    return JNI_TRUE;\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixFileDispatcherImpl.c","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,8 @@\n+    int available(FileDescriptor fd) throws IOException {\n+        return available0(fd);\n+    }\n+\n+    boolean isOther(FileDescriptor fd) throws IOException {\n+        return isOther0(fd);\n+    }\n+\n@@ -225,0 +233,4 @@\n+\n+    static native int available0(FileDescriptor fd) throws IOException;\n+\n+    static native boolean isOther0(FileDescriptor fd) throws IOException;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include <winioctl.h>\n@@ -36,0 +37,1 @@\n+#include \"io_util_md.h\"\n@@ -395,0 +397,68 @@\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_FileDispatcherImpl_available0(JNIEnv *env, jobject this, jobject fdo)\n+{\n+    HANDLE handle = (HANDLE)(handleval(env, fdo));\n+    DWORD type = GetFileType(handle);\n+    jlong available = 0;\n+\n+    \/\/ Calculate the number of bytes available for a regular file,\n+    \/\/ and return the default (zero) for other types.\n+    if (type == FILE_TYPE_DISK) {\n+        jlong current, end;\n+        LARGE_INTEGER distance, pos, filesize;\n+        distance.QuadPart = 0;\n+        if (SetFilePointerEx(handle, distance, &pos, FILE_CURRENT) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Available failed\");\n+            return IOS_THROWN;\n+        }\n+        current = (jlong)pos.QuadPart;\n+        if (GetFileSizeEx(handle, &filesize) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Available failed\");\n+            return IOS_THROWN;\n+        }\n+        end = (jlong)filesize.QuadPart;\n+        available = end - current;\n+        if (available > java_lang_Integer_MAX_VALUE) {\n+            available = java_lang_Integer_MAX_VALUE;\n+        } else if (available < 0) {\n+            available = 0;\n+        }\n+    }\n+\n+    return (jint)available;\n+}\n+\n+\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_ch_FileDispatcherImpl_isOther0(JNIEnv *env, jobject this, jobject fdo)\n+{\n+    HANDLE handle = (HANDLE)(handleval(env, fdo));\n+\n+    BY_HANDLE_FILE_INFORMATION finfo;\n+    GetFileInformationByHandle(handle, &finfo);\n+    DWORD fattr = finfo.dwFileAttributes;\n+\n+    if ((fattr & FILE_ATTRIBUTE_DEVICE) != 0)\n+        return (jboolean)JNI_TRUE;\n+\n+    if ((fattr & FILE_ATTRIBUTE_REPARSE_POINT) != 0) {\n+        int size = MAXIMUM_REPARSE_DATA_BUFFER_SIZE;\n+        void* lpOutBuffer = (void*)malloc(size*sizeof(char));\n+        if (lpOutBuffer == NULL)\n+            JNU_ThrowOutOfMemoryError(env, \"isOther failed\");\n+\n+        DWORD bytesReturned;\n+        if (!DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, NULL, 0,\n+                             lpOutBuffer, (DWORD)size, &bytesReturned, NULL)) {\n+            free(lpOutBuffer);\n+            JNU_ThrowIOExceptionWithLastError(env, \"isOther failed\");\n+        }\n+        ULONG reparseTag = (*((PULONG)lpOutBuffer));\n+        free(lpOutBuffer);\n+        return reparseTag == IO_REPARSE_TAG_SYMLINK ?\n+            (jboolean)JNI_FALSE : (jboolean)JNI_TRUE;\n+    }\n+\n+    return (jboolean)JNI_FALSE;\n+}\n+\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8227609\n+ * @bug 8227609 8233451\n@@ -27,1 +27,3 @@\n- * @library ..\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main InputStreamTest\n@@ -39,0 +41,1 @@\n+import jdk.test.lib.Platform;\n@@ -46,0 +49,2 @@\n+            if (!Platform.isWindows())\n+                testAvailable();\n@@ -126,0 +131,11 @@\n+    \/**\n+     * Tests that Files.newInputStream(Path).available() does not throw\n+     *\/\n+    static void testAvailable() throws IOException {\n+        Path stdin = Path.of(\"\/dev\", \"stdin\");\n+        if (Files.exists(stdin)) {\n+            InputStream s = Files.newInputStream(stdin);\n+            s.available();\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/InputStreamTest.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}