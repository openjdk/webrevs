{"files":[{"patch":"@@ -200,1 +200,1 @@\n-JNIEXPORT jint\n+jint\n","filename":"src\/java.base\/unix\/native\/libjava\/io_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,4 +188,18 @@\n-    jlong available;\n-    if (handleAvailable(fd, &available) == 0) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"Available failed\");\n-        return -1;\n+    struct stat fbuf;\n+    jlong size = -1;\n+\n+    if (fstat(fd, &fbuf) != -1) {\n+        int mode = fbuf.st_mode;\n+        if (S_ISCHR(mode) || S_ISFIFO(mode) || S_ISSOCK(mode)) {\n+            int n = ioctl(fd, FIONREAD, &n);\n+            if (n >= 0) {\n+                return n;\n+            }\n+        } else if (S_ISREG(mode)) {\n+            size = fbuf.st_size;\n+        }\n+    }\n+\n+    jlong position;\n+    if ((position = lseek(fd, 0, SEEK_CUR)) == -1) {\n+        return 0;\n@@ -193,0 +207,9 @@\n+\n+    if (size < position) {\n+        if ((size = lseek(fd, 0, SEEK_END)) == -1)\n+            return 0;\n+        else if (lseek(fd, position, SEEK_SET) == -1)\n+            return 0;\n+    }\n+\n+    jlong available = size - position;\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixFileDispatcherImpl.c","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-JNIEXPORT int\n+int\n","filename":"src\/java.base\/windows\/native\/libjava\/io_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-JNIEXPORT int handleAvailable(FD fd, jlong *pbytes);\n+int handleAvailable(FD fd, jlong *pbytes);\n","filename":"src\/java.base\/windows\/native\/libjava\/io_util_md.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -401,2 +401,20 @@\n-    jlong available;\n-    if (handleAvailable((jlong)handle, &available)) {\n+    DWORD type = GetFileType(handle);\n+    jlong available = 0;\n+\n+    \/\/ Calculate the number of bytes available for a regular file,\n+    \/\/ and return the default (zero) for other types.\n+    if (type == FILE_TYPE_DISK) {\n+        jlong current, end;\n+        LARGE_INTEGER distance, pos, filesize;\n+        distance.QuadPart = 0;\n+        if (SetFilePointerEx(handle, distance, &pos, FILE_CURRENT) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Available failed\");\n+            return IOS_THROWN;\n+        }\n+        current = (jlong)pos.QuadPart;\n+        if (GetFileSizeEx(handle, &filesize) == 0) {\n+            JNU_ThrowIOExceptionWithLastError(env, \"Available failed\");\n+            return IOS_THROWN;\n+        }\n+        end = (jlong)filesize.QuadPart;\n+        available = end - current;\n@@ -408,1 +426,0 @@\n-        return (jint)available;\n@@ -410,2 +427,2 @@\n-    \/\/ Silently ignore failure of handleAvailable and return zero\n-    return 0;\n+\n+    return (jint)available;\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"}]}