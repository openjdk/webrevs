{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @build jdk.test.lib.Platform\n@@ -31,0 +32,2 @@\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n@@ -32,0 +35,1 @@\n+import java.io.IOException;\n@@ -33,0 +37,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n@@ -34,6 +45,4 @@\n-import java.nio.file.*;\n-import static java.nio.file.Files.*;\n-import static java.nio.file.LinkOption.*;\n-import java.nio.file.attribute.*;\n-import java.io.IOException;\n-import java.util.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import jdk.test.lib.Platform;\n@@ -50,0 +59,5 @@\n+    private static final String PIPE = \"pipe\";\n+    private static final Path PIPE_PATH = Path.of(PIPE);\n+    private static final String SENTENCE =\n+        \"Tout est permis mais rien nâ€™est possible\";\n+\n@@ -52,0 +66,46 @@\n+    private static class mkfifo {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            ValueLayout.JAVA_INT,\n+            ValueLayout.ADDRESS,\n+            ValueLayout.JAVA_SHORT\n+        );\n+\n+        public static final MemorySegment ADDR;\n+        static {\n+            Linker linker = Linker.nativeLinker();\n+            SymbolLookup stdlib = linker.defaultLookup();\n+            ADDR = stdlib.find(\"mkfifo\").orElseThrow();\n+        }\n+\n+        public static final MethodHandle HANDLE =\n+            Linker.nativeLinker().downcallHandle(ADDR, DESC);\n+    }\n+\n+    public static int mkfifo(MemorySegment x0, short x1) {\n+        var mh$ = mkfifo.HANDLE;\n+        try {\n+            return (int)mh$.invokeExact(x0, x1);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+\n+    private static Thread createWriteThread() {\n+        Thread t = new Thread(\n+            new Runnable() {\n+                public void run() {\n+                    try {\n+                        try (FileOutputStream fos = new FileOutputStream(PIPE);)\n+                        {\n+                            fos.write(SENTENCE.getBytes());\n+                        }\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            }\n+        );\n+        t.start();\n+        return t;\n+    }\n+\n@@ -53,1 +113,1 @@\n-    static void createDir() throws IOException {\n+    static void before() throws InterruptedException, IOException {\n@@ -55,0 +115,12 @@\n+\n+        if (Platform.isWindows())\n+            return;\n+\n+        Files.deleteIfExists(PIPE_PATH);\n+        try (var newArena = Arena.ofConfined()) {\n+            var addr = newArena.allocateFrom(PIPE);\n+            short mode = 0666;\n+            assertEquals(0, mkfifo(addr, mode));\n+        }\n+        if (Files.notExists(PIPE_PATH))\n+            throw new RuntimeException(\"Failed to create \" + PIPE);\n@@ -58,1 +130,1 @@\n-    static void deleteDir() throws IOException {\n+    static void after() throws IOException {\n@@ -60,0 +132,5 @@\n+\n+        if (Platform.isWindows())\n+            return;\n+\n+        Files.deleteIfExists(PIPE_PATH);\n@@ -67,1 +144,1 @@\n-        Path file = createFile(TMPDIR.resolve(\"foo\"));\n+        Path file = Files.createFile(TMPDIR.resolve(\"foo\"));\n@@ -165,0 +242,37 @@\n+\n+    \/**\n+     * Tests Files.newInputStream(Path).readAllBytes().\n+     *\/\n+    @Test\n+    @DisabledOnOs(OS.WINDOWS)\n+    void readAllBytes() throws InterruptedException, IOException {\n+        Thread t = createWriteThread();\n+        try (InputStream in = Files.newInputStream(Path.of(PIPE))) {\n+            String s = new String(in.readAllBytes());\n+            System.out.println(s);\n+            assertEquals(SENTENCE, s);\n+        } finally {\n+            t.join();\n+        }\n+    }\n+\n+    \/**\n+     * Tests Files.newInputStream(Path).readNBytes().\n+     *\/\n+    @Test\n+    @DisabledOnOs(OS.WINDOWS)\n+    void readNBytes() throws InterruptedException, IOException {\n+        Thread t = createWriteThread();\n+        try (InputStream in = Files.newInputStream(Path.of(PIPE))) {\n+            final int offset = 11;\n+            final int length = 17;\n+            assert length <= SENTENCE.length();\n+            byte[] b = new byte[offset + length];\n+            int n = in.readNBytes(b, offset, length);\n+            String s = new String(b, offset, length);\n+            System.out.println(s);\n+            assertEquals(SENTENCE.substring(0, length), s);\n+        } finally {\n+            t.join();\n+        }\n+    }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/InputStreamTest.java","additions":123,"deletions":9,"binary":false,"changes":132,"status":"modified"}]}