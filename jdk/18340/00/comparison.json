{"files":[{"patch":"@@ -780,1 +780,1 @@\n-javax\/swing\/JTabbedPane\/4666224\/bug4666224.html 8144124  macosx-all\n+javax\/swing\/JTabbedPane\/4666224\/bug4666224.java 8144124  macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-<!--\n- Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @summary   Test that focus indicator is painted properly in JTabbedPane\n-  @author Xhipra Tyagi(xhipra.tyagi@india.sun.com) area=Swing\n-  @run applet\/manual=done bug4666224.html\n-  -->\n-<head>\n-<title> bug4666224 <\/title>\n-<\/head>\n-<body>\n-\n-<h1>bug4666224<br>Bug ID: 4666224 <\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"bug4666224.class\" WIDTH=300 HEIGHT=300><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4666224\/bug4666224.html","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,572 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import javax.swing.*;\n-\/*\n- * test\n- * @bug 4666224\n-*\/\n-\n-public class bug4666224 extends JApplet {\n-    final static int placements[] = { JTabbedPane.LEFT, JTabbedPane.RIGHT, JTabbedPane.TOP, JTabbedPane.BOTTOM };\n-    private JTabbedPane tabPane;\n-    private JPanel mainPanel;\n-\n-    public bug4666224() throws Exception {\n-       java.awt.EventQueue.invokeAndWait( () -> {\n-           tabPane = new JTabbedPane();\n-           tabPane.addMouseListener(new MouseAdapter() {\n-                public void mouseClicked(MouseEvent e) {\n-                    Point pt = e.getPoint();\n-                    System.out.println(\"Index at location: \"\n-                        + tabPane.indexAtLocation(pt.x, pt.y));\n-                }\n-            });\n-            InputMap inputMap = createInputMap();\n-            SwingUtilities.replaceUIInputMap(getRootPane(), JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);\n-            ActionMap actionMap = createActionMap();\n-            SwingUtilities.replaceUIActionMap(getRootPane(), actionMap);\n-\n-            \/\/setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-            tabPane.setTabPlacement(JTabbedPane.TOP);\n-            tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n-            JPanel panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Zero\", panel);\n-            panel = new JPanel();\n-            \/\/panel.requestFocus();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number One\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Two\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Three\", new JColorChooser());\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Four\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Five\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Six\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Seven\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Eight\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Nine\", panel);\n-            panel = new JPanel();\n-            panel.setPreferredSize(new Dimension(200, 300));\n-            tabPane.addTab(\"Number Ten\", panel);\n-            mainPanel = new JPanel();\n-            mainPanel.add(tabPane);\n-\n-            getContentPane().add(mainPanel);\n-                    tabPane.requestFocus();\n-\n-\n-            \/\/pack();\n-            \/\/setVisible(true);\n-        });\n-    }\n-\n-    public void init() {\n-                String[][] instructionsSet =\n-                {\n-                        {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                \"1. Click on any of the tabs, focus indicator is visible\",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                    \"1. type 'C' to change the tab layout to WRAP_TAB_LAYOUT \",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-                        {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                    \"1. type 'R' to align the tabs to the right side \",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                \"1. type 'B' to align the tabs to the bottom side \",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                    \"1. type 'L' to align the tabs to the left side \",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                        \" \",\n-                    \" ON ALL PLATFORMS\",\n-                        \"1. type 'T' to align the tabs to the top side \",\n-                        \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                \" \",\n-                    \" ON ALL PLATFORMS\",\n-                        \"1. type 'B' to align the tabs to the bottom side \",\n-                        \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                },\n-\n-                {\n-                                \" Note : Incase of Assertion failure,user can enter\",\n-                                \" remarks by pressing 'Assertion Fail Remarks ' button\",\n-                                \" \",\n-                                \" You would see an applet with JTabbedPane. Keep the size of applet variable.\",\n-                        \" \",\n-                    \" ON ALL PLATFORMS\",\n-                    \"1. type 'R' to align the tabs to the right side \",\n-                    \"2. Lose focus on the window by clicking on some other window \",\n-                    \"3. Focus indicator should disappear\",\n-                    \"4. Regain focus on the window the focus indicator should reappear.\" ,\n-                    \" If focus doesn't behave as above, \",\n-                    \" press 'Assertion Fail' else press 'Assertion Pass'\",\n-                }\n-                };\n-\n-                String[] exceptionsSet =\n-                {\n-                        \"Focus painted incorrectly in tabbed pane(SCROLL_TAB_LAYOUT) when tabs aligned to the TOP of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(SCROLL_TAB_LAYOUT) when tabs aligned to the RIGHT of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(SCROLL_TAB_LAYOUT) when tabs aligned to the BOTTOM of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(SCROLL_TAB_LAYOUT) when tabs aligned to the LEFT of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(WRAP_TAB_LAYOUT) when tabs aligned to the LEFT of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(WRAP_TAB_LAYOUT) when tabs aligned to the TOP of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(WRAP_TAB_LAYOUT) when tabs aligned to the BOTTOM of the window\",\n-                        \"Focus painted incorrectly in tabbed pane(WRAP_TAB_LAYOUT) when tabs aligned to the RIGHT of the window\"\n-                };\n-\n-                Sysout.setInstructionsWithExceptions(instructionsSet,exceptionsSet);\n-\n-        }\n-\n-        public void start (){}\n-\n-        public void destroy(){\n-            if(Sysout.failStatus())    {\n-                String failMsg = Sysout.getFailureMessages();\n-                failMsg = failMsg.replace('\\n',' ');\n-                throw new RuntimeException(failMsg);\n-            }\/\/ End destroy\n-    }\n-\n-    protected InputMap createInputMap() {\n-        return LookAndFeel.makeComponentInputMap(getRootPane(), new Object[] {\n-            \"R\", \"right\",\n-            \"L\", \"left\",\n-            \"T\", \"top\",\n-            \"B\", \"bottom\",\n-            \"C\", \"changeLayout\",\n-            \"D\", \"dump\"\n-        });\n-    }\n-\n-    protected ActionMap createActionMap() {\n-        ActionMap map = new ActionMap();\n-        map.put(\"right\", new RotateAction(JTabbedPane.RIGHT));\n-        map.put(\"left\", new RotateAction(JTabbedPane.LEFT));\n-        map.put(\"top\", new RotateAction(JTabbedPane.TOP));\n-        map.put(\"bottom\", new RotateAction(JTabbedPane.BOTTOM));\n-        map.put(\"changeLayout\", new ChangeLayoutAction());\n-        map.put(\"dump\", new DumpAction());\n-        return map;\n-    }\n-\n-    private class RotateAction extends AbstractAction {\n-        private int placement;\n-        public RotateAction(int placement) {\n-            this.placement = placement;\n-        }\n-\n-        public void actionPerformed(ActionEvent e) {\n-            tabPane.setTabPlacement(placement);\n-        }\n-    }\n-\n-    private class ChangeLayoutAction extends AbstractAction {\n-        private boolean a = true;\n-        public void actionPerformed(ActionEvent e) {\n-            if (a) {\n-                tabPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);\n-                a = false;\n-            } else {\n-                tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n-                a = true;\n-            }\n-        }\n-    }\n-\n-    private class DumpAction extends AbstractAction {\n-        public void actionPerformed(ActionEvent e) {\n-            for (int i = 0; i < tabPane.getTabCount(); i++) {\n-                System.out.println(\"Tab: \" + i + \" \"\n-                    + tabPane.getUI().getTabBounds(tabPane, i));\n-            }\n-        }\n-    }\n-}\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-   public static void setInstructionsWithExceptions(String instructionsSet[][],\n-                                                    String exceptionsSet[]) {\n-       createDialogWithInstructions(instructionsSet[0]);\n-       dialog.setInstructions(instructionsSet);\n-       dialog.setExceptionMessages(exceptionsSet);\n-   }\n-\n-   public static String getFailureMessages()   {\n-       return dialog.failureMessages;\n-   }\n-\n-   public static boolean failStatus()  {\n-       return dialog.failStatus;\n-   }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 70;\n-\n-   Panel assertPanel;\n-   Button assertPass,assertFail,remarks;\n-   HandleAssert handleAssert;\n-   boolean failStatus=false;\n-   int instructionCounter=0;\n-   String instructions[][];\n-   int exceptionCounter=0;\n-   String exceptionMessages[];\n-   String failureMessages=\"<br>\";\n-   String remarksMessage=null;\n-   RemarksDialog remarksDialog;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 14, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 3, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      assertPanel = new Panel(new FlowLayout());\n-      assertPass=new Button(\"Assertion Pass\");\n-      assertPass.setName(\"Assertion Pass\");\n-      assertFail=new Button(\"Assertion Fail\");\n-      assertFail.setName(\"Assertion Fail\");\n-      remarks = new Button(\"Assertion Fail Remarks\");\n-      remarks.setEnabled(false);\n-      remarks.setName(\"Assertion Remarks\");\n-      assertPanel.add(assertPass);\n-      assertPanel.add(assertFail);\n-      assertPanel.add(remarks);\n-      handleAssert = new HandleAssert();\n-      assertPass.addActionListener(handleAssert);\n-      assertFail.addActionListener(handleAssert);\n-      remarks.addActionListener(handleAssert);\n-      add(\"South\",assertPanel);\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-   public void emptyMessage()   {\n-       messageText.setText(\"\");\n-   }\n-\n-   public void setInstructions(String insStr[][])    {\n-       instructions=insStr;\n-   }\n-\n-   public void setExceptionMessages(String exceptionMessages[])   {\n-       this.exceptionMessages=exceptionMessages;\n-   }\n-\n-   class HandleAssert implements ActionListener   {\n-        public void actionPerformed(ActionEvent ae)    {\n-           if(ae.getSource()==remarks)  {\n-               remarksDialog = new RemarksDialog(TestDialog.this,\n-                                        \"Assertion Remarks Dialog\",true);\n-               remarks.setEnabled(false);\n-               if(remarksMessage!=null)\n-                    failureMessages+=\". User Remarks : \"+remarksMessage;\n-           }\n-           else {\n-               if(instructionCounter<instructions.length-1) {\n-                   emptyMessage();\n-                   instructionCounter++;\n-                   printInstructions(instructions[instructionCounter]);\n-               }\n-               else {\n-                   emptyMessage();\n-                   displayMessage(\"Testcase Completed\");\n-                   displayMessage(\"Press 'Done' button in the \"+\n-                                                    \"BaseApplet to close\");\n-                   assertPass.setEnabled(false);\n-                   assertFail.setEnabled(false);\n-               }\n-\n-               if(ae.getSource()==assertPass)    {\n-                   \/\/ anything to be done in future\n-               }\n-               else if(ae.getSource()==assertFail)   {\n-                   remarks.setEnabled(true);\n-                   if(!failStatus)\n-                       failStatus=true;\n-                   if(exceptionCounter<exceptionMessages.length)   {\n-                        failureMessages = failureMessages + \"<br>\"+\n-                                    exceptionMessages[exceptionCounter];\n-                   }\n-               }\n-               exceptionCounter++;\n-           }\n-        }\n-    }\n-\n-    class RemarksDialog extends Dialog  implements ActionListener{\n-        Panel rootPanel,remarksPanel;\n-        TextArea textarea;\n-        Button addRemarks,cancelRemarks;\n-        public RemarksDialog(Dialog owner,String title,boolean modal)  {\n-            super(owner,title,modal);\n-            rootPanel = new Panel(new BorderLayout());\n-            remarksPanel = new Panel(new FlowLayout());\n-            textarea = new TextArea(5,30);\n-            addRemarks=new Button(\"Add Remarks\");\n-            addRemarks.addActionListener(this);\n-            cancelRemarks = new Button(\"Cancel Remarks\");\n-            cancelRemarks.addActionListener(this);\n-            remarksPanel.add(addRemarks);\n-            remarksPanel.add(cancelRemarks);\n-            rootPanel.add(textarea,\"Center\");\n-            rootPanel.add(remarksPanel,\"South\");\n-            add(rootPanel);\n-            setBounds(150,150,400,200);\n-            setVisible(true);\n-        }\n-\n-        public void actionPerformed(ActionEvent ae) {\n-            remarksMessage=null;\n-            if(ae.getSource()==addRemarks)  {\n-                String msg = textarea.getText().trim();\n-                if (msg.length()>0)\n-                    remarksMessage=msg;\n-            }\n-            dispose();\n-        }\n-\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4666224\/bug4666224.java","additions":0,"deletions":572,"binary":false,"changes":572,"status":"deleted"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.AbstractAction;\n+import javax.swing.ActionMap;\n+import javax.swing.InputMap;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.LookAndFeel;\n+import javax.swing.SwingUtilities;\n+\n+\/* @test\n+ * @bug 4666224\n+ * @summary Tests that focus indicator is painted properly in JTabbedPane\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4666224\n+ *\/\n+\n+public class bug4666224 {\n+    final static int placements[] = { JTabbedPane.LEFT, JTabbedPane.RIGHT, JTabbedPane.TOP, JTabbedPane.BOTTOM };\n+    private static JTabbedPane tabPane;\n+    private static JFrame frame;\n+    private static JPanel mainPanel;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                ON ALL PLATFORMS\n+                    1. Click on any of the tabs, focus indicator is visible.\n+                    2. Lose focus on the window by clicking on some other window.\n+                    3. Focus indicator should disappear\n+                    4. Regain focus on the window by pressing the tab,\n+                        the focus indicator should reappear.\n+                    5. If focus doesn't behave as above,\n+                        press 'Fail' else press 'Pass'.\n+                    6. Type 'C' to change the tab layout to WRAP_TAB_LAYOUT\n+                        and repeat from step 1 to 5.\n+                    7. Type 'R' to align the tabs to the right side and repeat\n+                        from step 1 to 5.\n+                    8. Type 'B' to align the tabs to the bottom side and repeat\n+                        from step 1 to 5.\n+                    9. Type 'L' to align the tabs to the left side and repeat\n+                        from step 1 to 5.\n+                    10. Type 'T' to align the tabs to the top side and repeat\n+                         from step 1 to 5.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JTabbedPane Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(20)\n+                .columns(40)\n+                .testUI(bug4666224::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createAndShowUI() {\n+        frame = new JFrame(\"Test JTabbedPane\");\n+        tabPane = new JTabbedPane();\n+        tabPane.addMouseListener(new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                Point pt = e.getPoint();\n+                System.out.println(\"Index at location: \"\n+                        + tabPane.indexAtLocation(pt.x, pt.y));\n+            }\n+        });\n+        InputMap inputMap = createInputMap();\n+        SwingUtilities.replaceUIInputMap(frame.getRootPane(), JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);\n+        ActionMap actionMap = createActionMap();\n+        SwingUtilities.replaceUIActionMap(frame.getRootPane(), actionMap);\n+\n+        tabPane.setTabPlacement(JTabbedPane.TOP);\n+        tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+\n+        for (int i = 0; i <= 10; i++) {\n+            JPanel panel = new JPanel();\n+            panel.setPreferredSize(new Dimension(500, 200));\n+            tabPane.addTab(\"Tab \" + i, panel);\n+        }\n+        mainPanel = new JPanel();\n+        mainPanel.add(tabPane);\n+\n+        frame.setSize(600, 300);\n+        frame.getContentPane().add(mainPanel);\n+        tabPane.requestFocus();\n+        return frame;\n+    }\n+\n+    protected static InputMap createInputMap() {\n+        return LookAndFeel.makeComponentInputMap(frame.getRootPane(), new Object[] {\n+                \"R\", \"right\",\n+                \"L\", \"left\",\n+                \"T\", \"top\",\n+                \"B\", \"bottom\",\n+                \"C\", \"changeLayout\",\n+                \"D\", \"dump\"\n+        });\n+    }\n+\n+    protected static ActionMap createActionMap() {\n+        ActionMap map = new ActionMap();\n+        map.put(\"right\", new RotateAction(JTabbedPane.RIGHT));\n+        map.put(\"left\", new RotateAction(JTabbedPane.LEFT));\n+        map.put(\"top\", new RotateAction(JTabbedPane.TOP));\n+        map.put(\"bottom\", new RotateAction(JTabbedPane.BOTTOM));\n+        map.put(\"changeLayout\", new ChangeLayoutAction());\n+        map.put(\"dump\", new DumpAction());\n+        return map;\n+    }\n+\n+    private static class RotateAction extends AbstractAction {\n+        private int placement;\n+        public RotateAction(int placement) {\n+            this.placement = placement;\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            tabPane.setTabPlacement(placement);\n+        }\n+    }\n+\n+    private static class ChangeLayoutAction extends AbstractAction {\n+        private boolean a = true;\n+        public void actionPerformed(ActionEvent e) {\n+            if (a) {\n+                tabPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);\n+                a = false;\n+            } else {\n+                tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+                a = true;\n+            }\n+        }\n+    }\n+\n+    private static class DumpAction extends AbstractAction {\n+        public void actionPerformed(ActionEvent e) {\n+            for (int i = 0; i < tabPane.getTabCount(); i++) {\n+                System.out.println(\"Tab: \" + i + \" \"\n+                        + tabPane.getUI().getTabBounds(tabPane, i));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/bug4666224.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}