{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+\n+include CopyFiles.gmk\n+include MakeIO.gmk\n","filename":"make\/Bundles.gmk","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/CompileDemos.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/CompileInterimLangtools.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/CompileToolsJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/CopyImportModules.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/CopyInterimTZDB.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/CreateJmods.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/Docs.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/GenerateLinkOptData.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/GraalBuilderImage.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/Images.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,0 +539,25 @@\n+  ##############################################################################\n+  # Functions for timers\n+  ##############################################################################\n+\n+  # Store the build times in this directory.\n+  BUILDTIMESDIR=$(OUTPUTDIR)\/make-support\/build-times\n+\n+  # Record starting time for build of a sub repository.\n+  define RecordStartTime\n+\t$(DATE) '+%Y %m %d %H %M %S' | $(AWK) '{ print $$1,$$2,$$3,$$4,$$5,$$6,($$4*3600+$$5*60+$$6) }' > $(BUILDTIMESDIR)\/build_time_start_$(strip $1) && \\\n+\t$(DATE) '+%Y-%m-%d %H:%M:%S' > $(BUILDTIMESDIR)\/build_time_start_$(strip $1)_human_readable\n+  endef\n+\n+  # Record ending time and calculate the difference and store it in a\n+  # easy to read format. Handles builds that cross midnight. Expects\n+  # that a build will never take 24 hours or more.\n+  define RecordEndTime\n+\t$(DATE) '+%Y %m %d %H %M %S' | $(AWK) '{ print $$1,$$2,$$3,$$4,$$5,$$6,($$4*3600+$$5*60+$$6) }' > $(BUILDTIMESDIR)\/build_time_end_$(strip $1)\n+\t$(DATE) '+%Y-%m-%d %H:%M:%S' > $(BUILDTIMESDIR)\/build_time_end_$(strip $1)_human_readable\n+\t$(ECHO) `$(CAT) $(BUILDTIMESDIR)\/build_time_start_$(strip $1)` `$(CAT) $(BUILDTIMESDIR)\/build_time_end_$(strip $1)` $1 | \\\n+\t    $(AWK) '{ F=$$7; T=$$14; if (F > T) { T+=3600*24 }; D=T-F; H=int(D\/3600); \\\n+\t    M=int((D-H*3600)\/60); S=D-H*3600-M*60; printf(\"%02d:%02d:%02d %s\\n\",H,M,S,$$15); }' \\\n+\t    > $(BUILDTIMESDIR)\/build_time_diff_$(strip $1)\n+  endef\n+\n","filename":"make\/InitSupport.gmk","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/JrtfsJar.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/MacBundles.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/ModuleWrapper.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,10 @@\n+# Locate all sourcecode repositories included in the forest, as absolute paths\n+FindAllReposAbs = \\\n+    $(strip $(sort $(dir $(filter-out $(TOPDIR)\/build\/%, $(wildcard \\\n+        $(addprefix $(TOPDIR)\/, .git *\/.git *\/*\/.git *\/*\/*\/.git *\/*\/*\/*\/.git) \\\n+    )))))\n+\n+# Locate all sourcecode repositories included in the forest, as relative paths\n+FindAllReposRel = \\\n+    $(strip $(subst $(TOPDIR)\/,.,$(patsubst $(TOPDIR)\/%\/, %, $(FindAllReposAbs))))\n+\n","filename":"make\/SourceRevision.gmk","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/StaticLibsImage.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -680,0 +680,4 @@\n+# A file containing a way to uniquely identify the source code revision that\n+# the build was created from\n+SOURCE_REVISION_TRACKER := $(SUPPORT_OUTPUTDIR)\/src-rev\/source-revision-tracker\n+\n","filename":"make\/autoconf\/spec.gmk.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,303 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+ifeq (,$(_MAKEBASE_GMK))\n+  $(error You must include MakeBase.gmk prior to including FileUtils.gmk)\n+endif\n+\n+################################################################################\n+#\n+# Common file utility functions\n+#\n+################################################################################\n+\n+################################################################################\n+# Replace question marks with space in string. This macro needs to be called on\n+# files from FindFiles in case any of them contains space in their file name,\n+# since FindFiles replaces space with ?.\n+# Param 1 - String to replace in\n+DecodeSpace = \\\n+    $(subst ?,$(SPACE),$(strip $1))\n+\n+EncodeSpace = \\\n+    $(subst $(SPACE),?,$(strip $1))\n+\n+################################################################################\n+# Take two paths and return the path of the last common directory.\n+# Ex: \/foo\/bar\/baz, \/foo\/bar\/banan -> \/foo\/bar\n+#     foo\/bar\/baz, \/foo\/bar -> <empty>\n+#\n+# The x prefix is used to preserve the presence of the initial slash\n+# On Windows paths are treated as case-insensitive\n+#\n+# $1 - Path to compare\n+# $2 - Other path to compare\n+FindCommonPathPrefix = \\\n+    $(call DecodeSpace,$(patsubst x%,%,$(subst $(SPACE),\/,$(strip \\\n+        $(call FindCommonPathPrefixHelper1, \\\n+            $(subst \/,$(SPACE),x$(call EncodeSpace,$(strip $1))), \\\n+            $(subst \/,$(SPACE),x$(call EncodeSpace,$(strip $2)))) \\\n+    ))))\n+\n+FindCommonPathPrefixHelper1 = \\\n+    $(if $(filter $(OPENJDK_TARGET_OS), windows), \\\n+        $(call FindCommonPathPrefixHelper2,$(call uppercase,$1),$(call uppercase,$2),$1), \\\n+        $(call FindCommonPathPrefixHelper2,$1,$2,$1))\n+\n+FindCommonPathPrefixHelper2 = \\\n+    $(if $(call equals, $(firstword $1), $(firstword $2)), \\\n+      $(if $(call equals, $(firstword $1),),, \\\n+        $(firstword $3) \\\n+        $(call FindCommonPathPrefixHelper2, \\\n+            $(wordlist 2, $(words $1), $1), \\\n+            $(wordlist 2, $(words $2), $2), \\\n+            $(wordlist 2, $(words $3), $3) \\\n+        ) \\\n+      ) \\\n+    )\n+\n+# Computes the relative path from a directory to a file\n+# $1 - File to compute the relative path to\n+# $2 - Directory to compute the relative path from\n+RelativePath = \\\n+    $(call DecodeSpace,$(strip $(call RelativePathHelper,$(call EncodeSpace \\\n+        ,$(strip $1)),$(call EncodeSpace \\\n+        ,$(strip $2)),$(call EncodeSpace \\\n+        ,$(call FindCommonPathPrefix,$1,$2)))))\n+\n+RelativePathHelper = \\\n+    $(eval $3_prefix_length := $(words $(subst \/,$(SPACE),$3))) \\\n+    $(eval $1_words := $(subst \/,$(SPACE),$1)) \\\n+    $(eval $2_words := $(subst \/,$(SPACE),$2)) \\\n+    $(if $(call equals,$($3_prefix_length),0),, \\\n+        $(eval $1_words := $(wordlist 2,$(words $($1_words)),$(wordlist \\\n+            $($3_prefix_length),$(words $($1_words)),$($1_words)))) \\\n+        $(eval $2_words := $(wordlist 2,$(words $($2_words)),$(wordlist \\\n+            $($3_prefix_length),$(words $($2_words)),$($2_words)))) \\\n+    ) \\\n+    $(eval $1_suffix := $(subst $(SPACE),\/,$($1_words))) \\\n+    $(eval $2_dotdots := $(subst $(SPACE),\/,$(foreach d,$($2_words),..))) \\\n+    $(if $($1_suffix), \\\n+        $(if $($2_dotdots), $($2_dotdots)\/$($1_suffix), $($1_suffix)), \\\n+        $(if $($2_dotdots), $($2_dotdots), .))\n+\n+# Make directory for target file. Should handle spaces in filenames. Just\n+# calling $(call MakeDir $(@D)) will not work if the directory contains a space\n+# and the target file already exists. In that case, the target file will have\n+# its wildcard ? resolved and the $(@D) will evaluate each space separated dir\n+# part on its own.\n+MakeTargetDir = \\\n+    $(call MakeDir, $(dir $(call EncodeSpace, $@)))\n+\n+################################################################################\n+# All install-file and related macros automatically call DecodeSpace when needed.\n+\n+ifeq ($(call isTargetOs, macosx), true)\n+  # On mac, extended attributes sometimes creep into the source files, which may later\n+  # cause the creation of ._* files which confuses testing. Clear these with xattr if\n+  # set. Some files get their write permissions removed after being copied to the\n+  # output dir. When these are copied again to images, xattr would fail. By only clearing\n+  # attributes when they are present, failing on this is avoided.\n+  #\n+  # If copying a soft link to a directory, need to delete the target first to avoid\n+  # weird errors.\n+  define install-file\n+\t$(call MakeTargetDir)\n+\t$(RM) '$(call DecodeSpace, $@)'\n+        # Work around a weirdness with cp on Macosx. When copying a symlink, if\n+        # the target of the link is write protected (e.g. 444), cp will add\n+        # write permission for the user on the target file (644). Avoid this by\n+        # using ln to create a new link instead.\n+\tif [ -h '$(call DecodeSpace, $<)' ]; then \\\n+\t  $(LN) -s \"`$(READLINK) '$(call DecodeSpace, $<)'`\" '$(call DecodeSpace, $@)'; \\\n+\telse \\\n+\t  $(CP) -fRP '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'; \\\n+\tfi\n+\tif [ -n \"`$(XATTR) -ls '$(call DecodeSpace, $@)'`\" ]; then \\\n+\t  $(XATTR) -cs '$(call DecodeSpace, $@)'; \\\n+\tfi\n+  endef\n+else\n+  define install-file\n+\t$(call MakeTargetDir)\n+\t$(CP) -fP '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n+  endef\n+endif\n+\n+# Variant of install file that does not preserve symlinks\n+define install-file-nolink\n+\t$(call MakeTargetDir)\n+\t$(CP) -f '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n+endef\n+\n+################################################################################\n+# link-file-* works similarly to install-file but creates a symlink instead.\n+# There are two versions, either creating a relative or an absolute link. Be\n+# careful when using this on Windows since the symlink created is only valid in\n+# the unix emulation environment.\n+# In msys2 we use mklink \/J because its ln would perform a deep copy of the target.\n+# This inhibits performance and can lead to issues with long paths. With mklink \/J\n+# relative linking does not work, so we handle the link as absolute path.\n+ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)\n+  define link-file-relative\n+\t$(call MakeTargetDir)\n+\t$(RM) '$(call DecodeSpace, $@)'\n+\tcmd \/\/c \"mklink \/J $(call FixPath, $(call DecodeSpace, $@)) $(call FixPath, $(call DecodeSpace, $<))\"\n+  endef\n+else\n+  define link-file-relative\n+\t$(call MakeTargetDir)\n+\t$(RM) '$(call DecodeSpace, $@)'\n+\t$(LN) -s '$(call DecodeSpace, $(call RelativePath, $<, $(@D)))' '$(call DecodeSpace, $@)'\n+  endef\n+endif\n+\n+ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)\n+  define link-file-absolute\n+\t$(call MakeTargetDir)\n+\t$(RM) '$(call DecodeSpace, $@)'\n+\tcmd \/\/c \"mklink \/J $(call FixPath, $(call DecodeSpace, $@)) $(call FixPath, $(call DecodeSpace, $<))\"\n+  endef\n+else\n+  define link-file-absolute\n+\t$(call MakeTargetDir)\n+\t$(RM) '$(call DecodeSpace, $@)'\n+\t$(LN) -s '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n+  endef\n+endif\n+\n+################################################################################\n+\n+# Recursive wildcard function. Walks down directories recursively and matches\n+# files with the search patterns. Patterns use standard file wildcards (* and\n+# ?).\n+#\n+# $1 - Directories to start search in\n+# $2 - Search patterns\n+rwildcard = \\\n+    $(strip \\\n+        $(foreach d, \\\n+          $(patsubst %\/,%,$(sort $(dir $(wildcard $(addsuffix \/*\/*, $(strip $1)))))), \\\n+          $(call rwildcard,$d,$2) \\\n+        ) \\\n+        $(call DoubleDollar, $(wildcard $(foreach p, $2, $(addsuffix \/$(strip $p), $(strip $1))))) \\\n+    )\n+\n+# Find non directories using recursive wildcard function. This function may\n+# be used directly when a small amount of directories is expected to be\n+# searched and caching is not expected to be of use.\n+#\n+# $1 - Directory to start search in\n+# $2 - Optional search patterns, defaults to '*'.\n+WildcardFindFiles = \\\n+    $(sort $(strip \\\n+        $(eval WildcardFindFiles_result := $(call rwildcard,$(patsubst %\/,%,$1),$(if $(strip $2),$2,*))) \\\n+        $(filter-out $(patsubst %\/,%,$(sort $(dir $(WildcardFindFiles_result)))), \\\n+            $(WildcardFindFiles_result) \\\n+        ) \\\n+    ))\n+\n+# Find non directories using the find utility in the shell. Safe to call for\n+# non existing directories, or directories containing wildcards.\n+#\n+# Files containing space will get spaces replaced with ? because GNU Make\n+# cannot handle lists of files with space in them. By using ?, make will match\n+# the wildcard to space in many situations so we don't need to replace back\n+# to space on every use. While not a complete solution it does allow some uses\n+# of FindFiles to function with spaces in file names, including for\n+# SetupCopyFiles. Unfortunately this does not work for WildcardFindFiles so\n+# if files with spaces are anticipated, use ShellFindFiles directly.\n+#\n+# $1 - Directories to start search in.\n+# $2 - Optional search patterns, empty means find everything. Patterns use\n+#      standard file wildcards (* and ?) and should not be quoted.\n+# $3 - Optional options to find.\n+ShellFindFiles = \\\n+    $(if $(wildcard $1), \\\n+      $(sort \\\n+          $(shell $(FIND) $3 $(patsubst %\/,%,$(wildcard $1)) \\( -type f -o -type l \\) \\\n+              $(if $(strip $2), -a \\( -name \"$(firstword $2)\" \\\n+              $(foreach p, $(filter-out $(firstword $2), $2), -o -name \"$(p)\") \\)) \\\n+              | $(TR) ' ' '?' \\\n+          ) \\\n+      ) \\\n+    )\n+\n+# Find non directories using the method most likely to work best for the\n+# current build host\n+#\n+# $1 - Directory to start search in\n+# $2 - Optional search patterns, defaults to '*'.\n+ifeq ($(OPENJDK_BUILD_OS)-$(RWILDCARD_WORKS), windows-true)\n+  DirectFindFiles = $(WildcardFindFiles)\n+else\n+  DirectFindFiles = $(ShellFindFiles)\n+endif\n+\n+# Finds files using a cache that is populated by FillFindCache below. If any of\n+# the directories given have not been cached, DirectFindFiles is used for\n+# everything. Caching is especially useful in Cygwin, where file finds are very\n+# costly.\n+#\n+# $1 - Directories to start search in.\n+# $2 - Optional search patterns. If used, no caching is done.\n+CacheFindFiles_CACHED_DIRS :=\n+CacheFindFiles_CACHED_FILES :=\n+CacheFindFiles = \\\n+    $(if $2, \\\n+      $(call DirectFindFiles, $1, $2) \\\n+    , \\\n+      $(if $(filter-out $(addsuffix \/%, $(CacheFindFiles_CACHED_DIRS)) \\\n+          $(CacheFindFiles_CACHED_DIRS), $1), \\\n+        $(call DirectFindFiles, $1) \\\n+      , \\\n+        $(filter $(addsuffix \/%,$(patsubst %\/,%,$1)) $1,$(CacheFindFiles_CACHED_FILES)) \\\n+      ) \\\n+    )\n+\n+# Explicitly adds files to the find cache used by CacheFindFiles.\n+#\n+# $1 - Directories to start search in\n+FillFindCache = \\\n+    $(eval CacheFindFiles_NEW_DIRS := $$(filter-out $$(addsuffix \/%,\\\n+        $$(CacheFindFiles_CACHED_DIRS)) $$(CacheFindFiles_CACHED_DIRS), $1)) \\\n+    $(if $(CacheFindFiles_NEW_DIRS), \\\n+      $(eval CacheFindFiles_CACHED_DIRS += $$(patsubst %\/,%,$$(CacheFindFiles_NEW_DIRS))) \\\n+      $(eval CacheFindFiles_CACHED_FILES := $$(sort $$(CacheFindFiles_CACHED_FILES) \\\n+          $$(call DirectFindFiles, $$(CacheFindFiles_NEW_DIRS)))) \\\n+    )\n+\n+# Findfiles is the default macro that should be used to find files in the file\n+# system. This function does not always support files with spaces in the names.\n+# If files with spaces are anticipated, use ShellFindFiles directly.\n+#\n+# $1 - Directories to start search in.\n+# $2 - Optional search patterns, empty means find everything. Patterns use\n+#      standard file wildcards (* and ?) and should not be quoted.\n+ifeq ($(DISABLE_CACHE_FIND), true)\n+  FindFiles = $(DirectFindFiles)\n+else\n+  FindFiles = $(CacheFindFiles)\n+endif\n","filename":"make\/common\/FileUtils.gmk","additions":303,"deletions":0,"binary":false,"changes":303,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+include MakeIO.gmk\n+\n","filename":"make\/common\/JarArchive.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+include MakeIO.gmk\n+\n","filename":"make\/common\/JavaCompilation.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,3 +27,4 @@\n-#\n-# Setup common utility functions.\n-#\n+# MakeBase provides the core functionality needed and used by all makefiles. It\n+# should be included by all makefiles. MakeBase provides essential\n+# functionality for named parameter functions, variable dependency, tool\n+# execution, logging and fixpath functionality.\n@@ -67,3 +68,0 @@\n-# Make sure we have a value (could be overridden on command line by caller)\n-CREATING_BUILDJDK ?= false\n-\n@@ -78,1 +76,0 @@\n-\n@@ -81,1 +78,2 @@\n-\n+# Utils.gmk must be included before FileUtils.gmk, since it uses some of the\n+# basic utility functions there.\n@@ -83,40 +81,1 @@\n-include $(TOPDIR)\/make\/common\/MakeIO.gmk\n-include $(TOPDIR)\/make\/common\/CopyFiles.gmk\n-\n-################################################################################\n-# Functions for timers\n-################################################################################\n-\n-# Store the build times in this directory.\n-BUILDTIMESDIR=$(OUTPUTDIR)\/make-support\/build-times\n-\n-# Record starting time for build of a sub repository.\n-define RecordStartTime\n-\t$(DATE) '+%Y %m %d %H %M %S' | $(AWK) '{ print $$1,$$2,$$3,$$4,$$5,$$6,($$4*3600+$$5*60+$$6) }' > $(BUILDTIMESDIR)\/build_time_start_$(strip $1) && \\\n-\t$(DATE) '+%Y-%m-%d %H:%M:%S' > $(BUILDTIMESDIR)\/build_time_start_$(strip $1)_human_readable\n-endef\n-\n-# Record ending time and calculate the difference and store it in a\n-# easy to read format. Handles builds that cross midnight. Expects\n-# that a build will never take 24 hours or more.\n-define RecordEndTime\n-\t$(DATE) '+%Y %m %d %H %M %S' | $(AWK) '{ print $$1,$$2,$$3,$$4,$$5,$$6,($$4*3600+$$5*60+$$6) }' > $(BUILDTIMESDIR)\/build_time_end_$(strip $1)\n-\t$(DATE) '+%Y-%m-%d %H:%M:%S' > $(BUILDTIMESDIR)\/build_time_end_$(strip $1)_human_readable\n-\t$(ECHO) `$(CAT) $(BUILDTIMESDIR)\/build_time_start_$(strip $1)` `$(CAT) $(BUILDTIMESDIR)\/build_time_end_$(strip $1)` $1 | \\\n-\t    $(AWK) '{ F=$$7; T=$$14; if (F > T) { T+=3600*24 }; D=T-F; H=int(D\/3600); \\\n-\t    M=int((D-H*3600)\/60); S=D-H*3600-M*60; printf(\"%02d:%02d:%02d %s\\n\",H,M,S,$$15); }' \\\n-\t    > $(BUILDTIMESDIR)\/build_time_diff_$(strip $1)\n-endef\n-\n-# Hook to be called when starting to execute a top-level target\n-define TargetEnter\n-\t$(PRINTF) \"## Starting $(patsubst %-only,%,$@)\\n\"\n-\t$(call RecordStartTime,$(patsubst %-only,%,$@))\n-endef\n-\n-# Hook to be called when finish executing a top-level target\n-define TargetExit\n-\t$(call RecordEndTime,$(patsubst %-only,%,$@))\n-\t$(PRINTF) \"## Finished $(patsubst %-only,%,$@) (build time %s)\\n\\n\" \\\n-\t    \"`$(CAT) $(BUILDTIMESDIR)\/build_time_diff_$(patsubst %-only,%,$@) | $(CUT) -f 1 -d ' '`\"\n-endef\n+include $(TOPDIR)\/make\/common\/FileUtils.gmk\n@@ -125,14 +84,2 @@\n-\n-# A file containing a way to uniquely identify the source code revision that\n-# the build was created from\n-SOURCE_REVISION_TRACKER := $(SUPPORT_OUTPUTDIR)\/src-rev\/source-revision-tracker\n-\n-# Locate all sourcecode repositories included in the forest, as absolute paths\n-FindAllReposAbs = \\\n-    $(strip $(sort $(dir $(filter-out $(TOPDIR)\/build\/%, $(wildcard \\\n-        $(addprefix $(TOPDIR)\/, .git *\/.git *\/*\/.git *\/*\/*\/.git *\/*\/*\/*\/.git) \\\n-    )))))\n-\n-# Locate all sourcecode repositories included in the forest, as relative paths\n-FindAllReposRel = \\\n-    $(strip $(subst $(TOPDIR)\/,.,$(patsubst $(TOPDIR)\/%\/, %, $(FindAllReposAbs))))\n+# Make sure we have a value (could be overridden on command line by caller)\n+CREATING_BUILDJDK ?= false\n@@ -240,218 +187,0 @@\n-################################################################################\n-# Make directory without forking mkdir if not needed.\n-#\n-# If a directory with an encoded space is provided, the wildcard function\n-# sometimes returns false answers (typically if the dir existed when the\n-# makefile was parsed, but was deleted by a previous rule). In that case, always\n-# call mkdir regardless of what wildcard says.\n-#\n-# 1: List of directories to create\n-MakeDir = \\\n-    $(strip \\\n-        $(eval MakeDir_dirs_to_make := $(strip $(foreach d, $1, \\\n-          $(if $(findstring ?, $d), '$(call DecodeSpace, $d)', \\\n-            $(if $(wildcard $d), , $d) \\\n-          ) \\\n-        ))) \\\n-        $(if $(MakeDir_dirs_to_make), $(shell $(MKDIR) -p $(MakeDir_dirs_to_make))) \\\n-    )\n-\n-# Make directory for target file. Should handle spaces in filenames. Just\n-# calling $(call MakeDir $(@D)) will not work if the directory contains a space\n-# and the target file already exists. In that case, the target file will have\n-# its wildcard ? resolved and the $(@D) will evaluate each space separated dir\n-# part on its own.\n-MakeTargetDir = \\\n-    $(call MakeDir, $(dir $(call EncodeSpace, $@)))\n-\n-################################################################################\n-# All install-file and related macros automatically call DecodeSpace when needed.\n-\n-ifeq ($(call isTargetOs, macosx), true)\n-  # On mac, extended attributes sometimes creep into the source files, which may later\n-  # cause the creation of ._* files which confuses testing. Clear these with xattr if\n-  # set. Some files get their write permissions removed after being copied to the\n-  # output dir. When these are copied again to images, xattr would fail. By only clearing\n-  # attributes when they are present, failing on this is avoided.\n-  #\n-  # If copying a soft link to a directory, need to delete the target first to avoid\n-  # weird errors.\n-  define install-file\n-\t$(call MakeTargetDir)\n-\t$(RM) '$(call DecodeSpace, $@)'\n-        # Work around a weirdness with cp on Macosx. When copying a symlink, if\n-        # the target of the link is write protected (e.g. 444), cp will add\n-        # write permission for the user on the target file (644). Avoid this by\n-        # using ln to create a new link instead.\n-\tif [ -h '$(call DecodeSpace, $<)' ]; then \\\n-\t  $(LN) -s \"`$(READLINK) '$(call DecodeSpace, $<)'`\" '$(call DecodeSpace, $@)'; \\\n-\telse \\\n-\t  $(CP) -fRP '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'; \\\n-\tfi\n-\tif [ -n \"`$(XATTR) -ls '$(call DecodeSpace, $@)'`\" ]; then \\\n-\t  $(XATTR) -cs '$(call DecodeSpace, $@)'; \\\n-\tfi\n-  endef\n-else\n-  define install-file\n-\t$(call MakeTargetDir)\n-\t$(CP) -fP '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n-  endef\n-endif\n-\n-# Variant of install file that does not preserve symlinks\n-define install-file-nolink\n-\t$(call MakeTargetDir)\n-\t$(CP) -f '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n-endef\n-\n-################################################################################\n-# link-file-* works similarly to install-file but creates a symlink instead.\n-# There are two versions, either creating a relative or an absolute link. Be\n-# careful when using this on Windows since the symlink created is only valid in\n-# the unix emulation environment.\n-# In msys2 we use mklink \/J because its ln would perform a deep copy of the target.\n-# This inhibits performance and can lead to issues with long paths. With mklink \/J\n-# relative linking does not work, so we handle the link as absolute path.\n-ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)\n-  define link-file-relative\n-\t$(call MakeTargetDir)\n-\t$(RM) '$(call DecodeSpace, $@)'\n-\tcmd \/\/c \"mklink \/J $(call FixPath, $(call DecodeSpace, $@)) $(call FixPath, $(call DecodeSpace, $<))\"\n-  endef\n-else\n-  define link-file-relative\n-\t$(call MakeTargetDir)\n-\t$(RM) '$(call DecodeSpace, $@)'\n-\t$(LN) -s '$(call DecodeSpace, $(call RelativePath, $<, $(@D)))' '$(call DecodeSpace, $@)'\n-  endef\n-endif\n-\n-ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)\n-  define link-file-absolute\n-\t$(call MakeTargetDir)\n-\t$(RM) '$(call DecodeSpace, $@)'\n-\tcmd \/\/c \"mklink \/J $(call FixPath, $(call DecodeSpace, $@)) $(call FixPath, $(call DecodeSpace, $<))\"\n-  endef\n-else\n-  define link-file-absolute\n-\t$(call MakeTargetDir)\n-\t$(RM) '$(call DecodeSpace, $@)'\n-\t$(LN) -s '$(call DecodeSpace, $<)' '$(call DecodeSpace, $@)'\n-  endef\n-endif\n-\n-################################################################################\n-\n-# Recursive wildcard function. Walks down directories recursively and matches\n-# files with the search patterns. Patterns use standard file wildcards (* and\n-# ?).\n-#\n-# $1 - Directories to start search in\n-# $2 - Search patterns\n-rwildcard = \\\n-    $(strip \\\n-        $(foreach d, \\\n-          $(patsubst %\/,%,$(sort $(dir $(wildcard $(addsuffix \/*\/*, $(strip $1)))))), \\\n-          $(call rwildcard,$d,$2) \\\n-        ) \\\n-        $(call DoubleDollar, $(wildcard $(foreach p, $2, $(addsuffix \/$(strip $p), $(strip $1))))) \\\n-    )\n-\n-# Find non directories using recursive wildcard function. This function may\n-# be used directly when a small amount of directories is expected to be\n-# searched and caching is not expected to be of use.\n-#\n-# $1 - Directory to start search in\n-# $2 - Optional search patterns, defaults to '*'.\n-WildcardFindFiles = \\\n-    $(sort $(strip \\\n-        $(eval WildcardFindFiles_result := $(call rwildcard,$(patsubst %\/,%,$1),$(if $(strip $2),$2,*))) \\\n-        $(filter-out $(patsubst %\/,%,$(sort $(dir $(WildcardFindFiles_result)))), \\\n-            $(WildcardFindFiles_result) \\\n-        ) \\\n-    ))\n-\n-# Find non directories using the find utility in the shell. Safe to call for\n-# non existing directories, or directories containing wildcards.\n-#\n-# Files containing space will get spaces replaced with ? because GNU Make\n-# cannot handle lists of files with space in them. By using ?, make will match\n-# the wildcard to space in many situations so we don't need to replace back\n-# to space on every use. While not a complete solution it does allow some uses\n-# of FindFiles to function with spaces in file names, including for\n-# SetupCopyFiles. Unfortunately this does not work for WildcardFindFiles so\n-# if files with spaces are anticipated, use ShellFindFiles directly.\n-#\n-# $1 - Directories to start search in.\n-# $2 - Optional search patterns, empty means find everything. Patterns use\n-#      standard file wildcards (* and ?) and should not be quoted.\n-# $3 - Optional options to find.\n-ShellFindFiles = \\\n-    $(if $(wildcard $1), \\\n-      $(sort \\\n-          $(shell $(FIND) $3 $(patsubst %\/,%,$(wildcard $1)) \\( -type f -o -type l \\) \\\n-              $(if $(strip $2), -a \\( -name \"$(firstword $2)\" \\\n-              $(foreach p, $(filter-out $(firstword $2), $2), -o -name \"$(p)\") \\)) \\\n-              | $(TR) ' ' '?' \\\n-          ) \\\n-      ) \\\n-    )\n-\n-# Find non directories using the method most likely to work best for the\n-# current build host\n-#\n-# $1 - Directory to start search in\n-# $2 - Optional search patterns, defaults to '*'.\n-ifeq ($(OPENJDK_BUILD_OS)-$(RWILDCARD_WORKS), windows-true)\n-  DirectFindFiles = $(WildcardFindFiles)\n-else\n-  DirectFindFiles = $(ShellFindFiles)\n-endif\n-\n-# Finds files using a cache that is populated by FillFindCache below. If any of\n-# the directories given have not been cached, DirectFindFiles is used for\n-# everything. Caching is especially useful in Cygwin, where file finds are very\n-# costly.\n-#\n-# $1 - Directories to start search in.\n-# $2 - Optional search patterns. If used, no caching is done.\n-CacheFindFiles_CACHED_DIRS :=\n-CacheFindFiles_CACHED_FILES :=\n-CacheFindFiles = \\\n-    $(if $2, \\\n-      $(call DirectFindFiles, $1, $2) \\\n-    , \\\n-      $(if $(filter-out $(addsuffix \/%, $(CacheFindFiles_CACHED_DIRS)) \\\n-          $(CacheFindFiles_CACHED_DIRS), $1), \\\n-        $(call DirectFindFiles, $1) \\\n-      , \\\n-        $(filter $(addsuffix \/%,$(patsubst %\/,%,$1)) $1,$(CacheFindFiles_CACHED_FILES)) \\\n-      ) \\\n-    )\n-\n-# Explicitly adds files to the find cache used by CacheFindFiles.\n-#\n-# $1 - Directories to start search in\n-FillFindCache = \\\n-    $(eval CacheFindFiles_NEW_DIRS := $$(filter-out $$(addsuffix \/%,\\\n-        $$(CacheFindFiles_CACHED_DIRS)) $$(CacheFindFiles_CACHED_DIRS), $1)) \\\n-    $(if $(CacheFindFiles_NEW_DIRS), \\\n-      $(eval CacheFindFiles_CACHED_DIRS += $$(patsubst %\/,%,$$(CacheFindFiles_NEW_DIRS))) \\\n-      $(eval CacheFindFiles_CACHED_FILES := $$(sort $$(CacheFindFiles_CACHED_FILES) \\\n-          $$(call DirectFindFiles, $$(CacheFindFiles_NEW_DIRS)))) \\\n-    )\n-\n-# Findfiles is the default macro that should be used to find files in the file\n-# system. This function does not always support files with spaces in the names.\n-# If files with spaces are anticipated, use ShellFindFiles directly.\n-#\n-# $1 - Directories to start search in.\n-# $2 - Optional search patterns, empty means find everything. Patterns use\n-#      standard file wildcards (* and ?) and should not be quoted.\n-ifeq ($(DISABLE_CACHE_FIND), true)\n-  FindFiles = $(DirectFindFiles)\n-else\n-  FindFiles = $(CacheFindFiles)\n-endif\n-\n","filename":"make\/common\/MakeBase.gmk","additions":9,"deletions":280,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -244,29 +244,0 @@\n-\n-################################################################################\n-# Write to and read from file\n-\n-# Param 1 - File to read\n-ReadFile = \\\n-    $(shell $(CAT) $1)\n-\n-# Param 1 - Text to write\n-# Param 2 - File to write to\n-ifeq ($(HAS_FILE_FUNCTION), true)\n-  WriteFile = \\\n-      $(file >$2,$(strip $1))\n-else\n-  # Use printf to get consistent behavior on all platforms.\n-  WriteFile = \\\n-      $(shell $(PRINTF) \"%s\\n\" $(strip $(call ShellQuote, $1)) > $2)\n-endif\n-\n-# Param 1 - Text to write\n-# Param 2 - File to write to\n-ifeq ($(HAS_FILE_FUNCTION), true)\n-  AppendFile = \\\n-      $(file >>$2,$(strip $1))\n-else\n-  # Use printf to get consistent behavior on all platforms.\n-  AppendFile = \\\n-      $(shell $(PRINTF) \"%s\\n\" $(strip $(call ShellQuote, $1)) >> $2)\n-endif\n","filename":"make\/common\/MakeIO.gmk","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+include MakeIO.gmk\n","filename":"make\/common\/NativeCompilation.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-# Common utility functions\n+# Basic utility functions available to MakeBase.gmk itself\n@@ -36,5 +36,7 @@\n-### Debug functions\n-\n-# Prints the name and value of a variable\n-PrintVar = \\\n-    $(info $(strip $1) >$($(strip $1))<)\n+# String equals\n+equals = \\\n+    $(if $(strip $1)$(strip $2),$(strip \\\n+      $(and $(findstring $(strip $1),$(strip $2)),\\\n+        $(findstring $(strip $2),$(strip $1)))), \\\n+      true \\\n+    )\n@@ -42,5 +44,4 @@\n-################################################################################\n-# This macro translates $ into \\$ to protect the $ from expansion in the shell.\n-# To make this macro resilient against already escaped strings, first remove\n-# any present escapes before escaping so that no double escapes are added.\n-EscapeDollar = $(subst $$,\\$$,$(subst \\$$,$$,$(strip $1)))\n+# Convert the string given to upper case, without any $(shell)\n+# Inspired by http:\/\/lists.gnu.org\/archive\/html\/help-make\/2013-09\/msg00009.html\n+uppercase_table := a,A b,B c,C d,D e,E f,F g,G h,H i,I j,J k,K l,L m,M n,N o,O \\\n+    p,P q,Q r,R s,S t,T u,U v,V w,W x,X y,Y z,Z\n@@ -48,3 +49,3 @@\n-################################################################################\n-# This macro works just like EscapeDollar above, but for #.\n-EscapeHash = $(subst \\#,\\\\\\#,$(subst \\\\\\#,\\#,$(strip $1)))\n+uppercase_internal = \\\n+  $(if $(strip $1), $$(subst $(firstword $1), $(call uppercase_internal, \\\n+      $(wordlist 2, $(words $1), $1), $2)), $2)\n@@ -52,3 +53,7 @@\n-################################################################################\n-# This macro translates $ into $$ to protect the string from make itself.\n-DoubleDollar = $(subst $$,$$$$,$(strip $1))\n+# Convert a string to upper case. Works only on a-z.\n+# $1 - The string to convert\n+uppercase = \\\n+  $(strip \\\n+    $(eval uppercase_result := $(call uppercase_internal, $(uppercase_table), $1)) \\\n+    $(uppercase_result) \\\n+  )\n@@ -72,4 +77,4 @@\n-# Strip both arguments. Append the first argument to the second argument. If the\n-# first argument is empty, return the empty string.\n-IfAppend = \\\n-    $(if $(strip $1),$(strip $1)$(strip $2),)\n+# This macro translates $ into \\$ to protect the $ from expansion in the shell.\n+# To make this macro resilient against already escaped strings, first remove\n+# any present escapes before escaping so that no double escapes are added.\n+EscapeDollar = $(subst $$,\\$$,$(subst \\$$,$$,$(strip $1)))\n@@ -78,6 +83,2 @@\n-# Replace question marks with space in string. This macro needs to be called on\n-# files from FindFiles in case any of them contains space in their file name,\n-# since FindFiles replaces space with ?.\n-# Param 1 - String to replace in\n-DecodeSpace = \\\n-    $(subst ?,$(SPACE),$(strip $1))\n+# This macro works just like EscapeDollar above, but for #.\n+EscapeHash = $(subst \\#,\\\\\\#,$(subst \\\\\\#,\\#,$(strip $1)))\n@@ -85,2 +86,3 @@\n-EncodeSpace = \\\n-    $(subst $(SPACE),?,$(strip $1))\n+################################################################################\n+# This macro translates $ into $$ to protect the string from make itself.\n+DoubleDollar = $(subst $$,$$$$,$(strip $1))\n@@ -89,5 +91,35 @@\n-# Assign a variable only if it is empty\n-# Param 1 - Variable to assign\n-# Param 2 - Value to assign\n-SetIfEmpty = \\\n-    $(if $($(strip $1)),,$(eval $(strip $1) := $2))\n+# ShellQuote\n+#\n+# Quotes a string with single quotes and replaces single quotes with '\\'' so\n+# that the contents survives being given to the shell.\n+ShellQuote = \\\n+    $(SQUOTE)$(subst $(SQUOTE),$(SQUOTE)\\$(SQUOTE)$(SQUOTE),$(strip $1))$(SQUOTE)\n+\n+################################################################################\n+# Write to and read from file\n+\n+# Param 1 - File to read\n+ReadFile = \\\n+    $(shell $(CAT) $1)\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  WriteFile = \\\n+      $(file >$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  WriteFile = \\\n+      $(shell $(PRINTF) \"%s\\n\" $(strip $(call ShellQuote, $1)) > $2)\n+endif\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  AppendFile = \\\n+      $(file >>$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  AppendFile = \\\n+      $(shell $(PRINTF) \"%s\\n\" $(strip $(call ShellQuote, $1)) >> $2)\n+endif\n@@ -96,3 +128,1 @@\n-# Take two paths and return the path of the last common directory.\n-# Ex: \/foo\/bar\/baz, \/foo\/bar\/banan -> \/foo\/bar\n-#     foo\/bar\/baz, \/foo\/bar -> <empty>\n+# Make directory without forking mkdir if not needed.\n@@ -100,2 +130,4 @@\n-# The x prefix is used to preserve the presence of the initial slash\n-# On Windows paths are treated as case-insensitive\n+# If a directory with an encoded space is provided, the wildcard function\n+# sometimes returns false answers (typically if the dir existed when the\n+# makefile was parsed, but was deleted by a previous rule). In that case, always\n+# call mkdir regardless of what wildcard says.\n@@ -103,24 +135,9 @@\n-# $1 - Path to compare\n-# $2 - Other path to compare\n-FindCommonPathPrefix = \\\n-    $(call DecodeSpace,$(patsubst x%,%,$(subst $(SPACE),\/,$(strip \\\n-        $(call FindCommonPathPrefixHelper1, \\\n-            $(subst \/,$(SPACE),x$(call EncodeSpace,$(strip $1))), \\\n-            $(subst \/,$(SPACE),x$(call EncodeSpace,$(strip $2)))) \\\n-    ))))\n-\n-FindCommonPathPrefixHelper1 = \\\n-    $(if $(filter $(OPENJDK_TARGET_OS), windows), \\\n-        $(call FindCommonPathPrefixHelper2,$(call uppercase,$1),$(call uppercase,$2),$1), \\\n-        $(call FindCommonPathPrefixHelper2,$1,$2,$1))\n-\n-FindCommonPathPrefixHelper2 = \\\n-    $(if $(call equals, $(firstword $1), $(firstword $2)), \\\n-      $(if $(call equals, $(firstword $1),),, \\\n-        $(firstword $3) \\\n-        $(call FindCommonPathPrefixHelper2, \\\n-            $(wordlist 2, $(words $1), $1), \\\n-            $(wordlist 2, $(words $2), $2), \\\n-            $(wordlist 2, $(words $3), $3) \\\n-        ) \\\n-      ) \\\n+# 1: List of directories to create\n+MakeDir = \\\n+    $(strip \\\n+        $(eval MakeDir_dirs_to_make := $(strip $(foreach d, $1, \\\n+          $(if $(findstring ?, $d), '$(call DecodeSpace, $d)', \\\n+            $(if $(wildcard $d), , $d) \\\n+          ) \\\n+        ))) \\\n+        $(if $(MakeDir_dirs_to_make), $(shell $(MKDIR) -p $(MakeDir_dirs_to_make))) \\\n@@ -129,24 +146,72 @@\n-# Computes the relative path from a directory to a file\n-# $1 - File to compute the relative path to\n-# $2 - Directory to compute the relative path from\n-RelativePath = \\\n-    $(call DecodeSpace,$(strip $(call RelativePathHelper,$(call EncodeSpace \\\n-        ,$(strip $1)),$(call EncodeSpace \\\n-        ,$(strip $2)),$(call EncodeSpace \\\n-        ,$(call FindCommonPathPrefix,$1,$2)))))\n-\n-RelativePathHelper = \\\n-    $(eval $3_prefix_length := $(words $(subst \/,$(SPACE),$3))) \\\n-    $(eval $1_words := $(subst \/,$(SPACE),$1)) \\\n-    $(eval $2_words := $(subst \/,$(SPACE),$2)) \\\n-    $(if $(call equals,$($3_prefix_length),0),, \\\n-        $(eval $1_words := $(wordlist 2,$(words $($1_words)),$(wordlist \\\n-            $($3_prefix_length),$(words $($1_words)),$($1_words)))) \\\n-        $(eval $2_words := $(wordlist 2,$(words $($2_words)),$(wordlist \\\n-            $($3_prefix_length),$(words $($2_words)),$($2_words)))) \\\n-    ) \\\n-    $(eval $1_suffix := $(subst $(SPACE),\/,$($1_words))) \\\n-    $(eval $2_dotdots := $(subst $(SPACE),\/,$(foreach d,$($2_words),..))) \\\n-    $(if $($1_suffix), \\\n-        $(if $($2_dotdots), $($2_dotdots)\/$($1_suffix), $($1_suffix)), \\\n-        $(if $($2_dotdots), $($2_dotdots), .))\n+################################################################################\n+# Check if our build or target conforms to certain restrictions. This set of\n+# functions all work in similar ways, testing the property that the name\n+# implies, so e.g. isTargetCpu test the CPU of the target system.\n+#\n+# $1 - A property, or a space separated list of properties to test for.\n+#\n+# Returns true if the actual property matches one of the properties in the list,\n+# and false otherwise.\n+#\n+# Examples: $(call isTargetOs, linux windows) will return true when executed\n+# on either linux or windows, and false otherwise.\n+# $(call isBuildCpuArch, x86) will return true iff the build CPU Arch is x86.\n+\n+isTargetOs = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_OS), $1), true, false))\n+\n+isTargetOsType = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_OS_TYPE), $1), true, false))\n+\n+isTargetCpu = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU), $1), true, false))\n+\n+isTargetCpuArch = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_ARCH), $1), true, false))\n+\n+isTargetCpuBits = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_BITS), $1), true, false))\n+\n+isBuildOs = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS), $1), true, false))\n+\n+isBuildOsType = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS_TYPE), $1), true, false))\n+\n+isBuildOsEnv = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS_ENV), $1), true, false))\n+\n+isBuildCpu = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_CPU), $1), true, false))\n+\n+isBuildCpuArch = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_CPU_ARCH), $1), true, false))\n+\n+isCompiler = \\\n+  $(strip $(if $(filter $(TOOLCHAIN_TYPE), $1), true, false))\n+\n+################################################################################\n+#\n+# Common utility functions\n+#\n+################################################################################\n+\n+### Debug functions\n+\n+# Prints the name and value of a variable\n+PrintVar = \\\n+    $(info $(strip $1) >$($(strip $1))<)\n+\n+\n+################################################################################\n+# Strip both arguments. Append the first argument to the second argument. If the\n+# first argument is empty, return the empty string.\n+IfAppend = \\\n+    $(if $(strip $1),$(strip $1)$(strip $2),)\n+\n+################################################################################\n+# Assign a variable only if it is empty\n+# Param 1 - Variable to assign\n+# Param 2 - Value to assign\n+SetIfEmpty = \\\n+    $(if $($(strip $1)),,$(eval $(strip $1) := $2))\n@@ -176,8 +241,0 @@\n-# String equals\n-equals = \\\n-    $(if $(strip $1)$(strip $2),$(strip \\\n-      $(and $(findstring $(strip $1),$(strip $2)),\\\n-        $(findstring $(strip $2),$(strip $1)))), \\\n-      true \\\n-    )\n-\n@@ -191,17 +248,0 @@\n-# Convert the string given to upper case, without any $(shell)\n-# Inspired by http:\/\/lists.gnu.org\/archive\/html\/help-make\/2013-09\/msg00009.html\n-uppercase_table := a,A b,B c,C d,D e,E f,F g,G h,H i,I j,J k,K l,L m,M n,N o,O \\\n-    p,P q,Q r,R s,S t,T u,U v,V w,W x,X y,Y z,Z\n-\n-uppercase_internal = \\\n-  $(if $(strip $1), $$(subst $(firstword $1), $(call uppercase_internal, \\\n-      $(wordlist 2, $(words $1), $1), $2)), $2)\n-\n-# Convert a string to upper case. Works only on a-z.\n-# $1 - The string to convert\n-uppercase = \\\n-  $(strip \\\n-    $(eval uppercase_result := $(call uppercase_internal, $(uppercase_table), $1)) \\\n-    $(uppercase_result) \\\n-  )\n-\n@@ -293,8 +333,0 @@\n-################################################################################\n-# ShellQuote\n-#\n-# Quotes a string with single quotes and replaces single quotes with '\\'' so\n-# that the contents survives being given to the shell.\n-ShellQuote = \\\n-    $(SQUOTE)$(subst $(SQUOTE),$(SQUOTE)\\$(SQUOTE)$(SQUOTE),$(strip $1))$(SQUOTE)\n-\n@@ -332,47 +364,0 @@\n-################################################################################\n-# Check if our build or target conforms to certain restrictions. This set of\n-# functions all work in similar ways, testing the property that the name\n-# implies, so e.g. isTargetCpu test the CPU of the target system.\n-#\n-# $1 - A property, or a space separated list of properties to test for.\n-#\n-# Returns true if the actual property matches one of the properties in the list,\n-# and false otherwise.\n-#\n-# Examples: $(call isTargetOs, linux windows) will return true when executed\n-# on either linux or windows, and false otherwise.\n-# $(call isBuildCpuArch, x86) will return true iff the build CPU Arch is x86.\n-\n-isTargetOs = \\\n-  $(strip $(if $(filter $(OPENJDK_TARGET_OS), $1), true, false))\n-\n-isTargetOsType = \\\n-  $(strip $(if $(filter $(OPENJDK_TARGET_OS_TYPE), $1), true, false))\n-\n-isTargetCpu = \\\n-  $(strip $(if $(filter $(OPENJDK_TARGET_CPU), $1), true, false))\n-\n-isTargetCpuArch = \\\n-  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_ARCH), $1), true, false))\n-\n-isTargetCpuBits = \\\n-  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_BITS), $1), true, false))\n-\n-isBuildOs = \\\n-  $(strip $(if $(filter $(OPENJDK_BUILD_OS), $1), true, false))\n-\n-isBuildOsType = \\\n-  $(strip $(if $(filter $(OPENJDK_BUILD_OS_TYPE), $1), true, false))\n-\n-isBuildOsEnv = \\\n-  $(strip $(if $(filter $(OPENJDK_BUILD_OS_ENV), $1), true, false))\n-\n-isBuildCpu = \\\n-  $(strip $(if $(filter $(OPENJDK_BUILD_CPU), $1), true, false))\n-\n-isBuildCpuArch = \\\n-  $(strip $(if $(filter $(OPENJDK_BUILD_CPU_ARCH), $1), true, false))\n-\n-isCompiler = \\\n-  $(strip $(if $(filter $(TOOLCHAIN_TYPE), $1), true, false))\n-\n","filename":"make\/common\/Utils.gmk","additions":153,"deletions":168,"binary":false,"changes":321,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/common\/modules\/CopyCommon.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+include CopyFiles.gmk\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/hotspot\/CopyToExplodedJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/hotspot\/gensrc\/GensrcJvmti.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/hotspot\/test\/GtestImage.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+include CopyFiles.gmk\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+include CopyFiles.gmk\n+\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+include CopyFiles.gmk\n","filename":"make\/modules\/jdk.compiler\/Gendata.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/BuildFailureHandler.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/BuildJtregTestThreadFactory.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/BuildTestLib.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/BuildTestLibNative.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+include CopyFiles.gmk\n","filename":"make\/test\/JtregNativeLibTest.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}