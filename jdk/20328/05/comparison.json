{"files":[{"patch":"@@ -50,0 +50,4 @@\n+#include \"utilities\/macros.hpp\"\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#endif\n@@ -86,0 +90,6 @@\n+  \/\/ Return immediately if VM is not safe.\n+  if (!is_safe()) {\n+    log_info(jfr)(\"VM is not in safe state to perform path to GC roots operation, skipping\");\n+    return;\n+  }\n+\n@@ -132,0 +142,14 @@\n+\n+bool PathToGcRootsOperation::is_safe() {\n+#if INCLUDE_SHENANDOAHGC\n+  if (UseShenandoahGC) {\n+    \/\/ This operation uses mark words to track objects. While the operation\n+    \/\/ would restore the mark words after completion, it would interact with\n+    \/\/ mark word uses by Shenandoah itself. This is a problem if we hit the op\n+    \/\/ when Shenandoah has forwarded objects, which means it uses mark words\n+    \/\/ to carry GC metadata.\n+    return !ShenandoahHeap::heap()->has_forwarded_objects();\n+  }\n+#endif\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+  \/\/ Checks if VM is in safe state to perform this operation.\n+  bool is_safe();\n+\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @requires vm.gc != \"Shenandoah\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestFieldInformation.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @requires vm.gc != \"Shenandoah\"\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestLargeRootSet.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}