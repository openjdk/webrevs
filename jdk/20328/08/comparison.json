{"files":[{"patch":"@@ -37,0 +37,9 @@\n+bool LeakProfiler::is_supported() {\n+  if (UseShenandoahGC) {\n+    \/\/ Leak Profiler uses mark words in the ways that might interfere\n+    \/\/ with concurrent GC uses of them. This affects Shenandoah.\n+    return false;\n+  }\n+  return true;\n+}\n+\n@@ -51,0 +60,6 @@\n+  \/\/ Exit cleanly if not supported\n+  if (!is_supported()) {\n+    log_trace(jfr, system)(\"Object sampling is not supported\");\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  static bool is_supported();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,0 +106,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/leakprofiler\/leakProfiler.hpp\"\n+#endif\n@@ -2170,0 +2173,8 @@\n+WB_ENTRY(jboolean, WB_IsJFRLeakProfSupported(JNIEnv* env))\n+#if INCLUDE_JFR\n+  return LeakProfiler::is_supported();\n+#else\n+  return false;\n+#endif \/\/ INCLUDE_JFR\n+WB_END\n+\n@@ -2909,0 +2920,1 @@\n+  {CC\"isJFRLeakProfSupported\",            CC\"()Z\",    (void*)&WB_IsJFRLeakProfSupported },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+    vm.hasJFRLeakProf \\\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordingFileWrite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestAllocationTime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestArrayInformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestCircularReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestClassLoaderLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestFieldInformation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestG1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestHeapDeep.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestHeapShallow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestLargeRootSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestLastKnownHeapUsage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestListenerLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestMetadataRetention.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestObjectAge.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestObjectDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestObjectSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestParallel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestReferenceChainLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestSanityDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestSerial.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n- * @requires vm.hasJFR & vm.gc.Shenandoah\n+ * @ignore \/\/ Leak profiler does not work with Shenandoah\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestShenandoah.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestThreadLocalLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @requires vm.hasJFR & vm.gc.Z\n+ * @requires vm.hasJFRLeakProf & vm.gc.Z\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestZ.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdDumpPathToGCRoots.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdStartPathToGCRoots.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestWaste.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFRLeakProf\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestOldObjectQueueSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+        map.put(\"vm.hasJFRLeakProf\", this::vmHasJFRLeakProf);\n@@ -397,0 +398,7 @@\n+    \/**\n+     * @return \"true\" if the VM supports JFR Leak Profiler.\n+     *\/\n+    protected String vmHasJFRLeakProf() {\n+        return \"\" + WB.isJFRLeakProfSupported();\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -745,0 +745,1 @@\n+  public native boolean isJFRLeakProfSupported();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}