{"files":[{"patch":"@@ -5,3 +5,1 @@\n-    java.base\/jdk.internal.classfile.impl.verifier \\\n-    java.base\/jdk.internal.org.objectweb.asm \\\n-    java.base\/jdk.internal.org.objectweb.asm.tree\n\\ No newline at end of file\n+    java.base\/jdk.internal.classfile.impl.verifier\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,13 +46,0 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.tree.ClassNode;\n@@ -65,2 +52,0 @@\n-    static int ASM9 = 9 << 16 | 0 << 8;\n-\n@@ -131,32 +116,0 @@\n-        ASM_1(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(cw, 0);\n-            return cw.toByteArray();\n-        }),\n-        ASM_UNSHARED_1(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(cw, 0);\n-            return cw.toByteArray();\n-        }),\n-        ASM_3(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(new CustomClassVisitor(cw), 0);\n-            return cw.toByteArray();\n-        }),\n-        ASM_UNSHARED_3(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(new CustomClassVisitor(cw), 0);\n-            return cw.toByteArray();\n-        }),\n-        ASM_TREE(bytes -> {\n-            ClassNode node = new ClassNode();\n-            ClassReader cr = new ClassReader(bytes);\n-            cr.accept(node, 0);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            node.accept(cw);\n-            return cw.toByteArray();\n-        }),\n@@ -166,1 +119,1 @@\n-        \/\/ Need ASM, LOW_UNSHARED\n+        \/\/ Need LOW_UNSHARED\n@@ -205,6 +158,0 @@\n-        ASM_NOP_SHARED(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(new NopClassVisitor(cw), 0);\n-            return cw.toByteArray();\n-        }),\n@@ -245,7 +192,0 @@\n-        ASM_ADD_FIELD(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            cr.accept(cw, 0);\n-            cw.visitField(0, \"argleBargleWoogaWooga\", \"I\", null, null);\n-            return cw.toByteArray();\n-        }),\n@@ -276,14 +216,0 @@\n-        ASM_DEL_METHOD(bytes -> {\n-            ClassReader cr = new ClassReader(bytes);\n-            jdk.internal.org.objectweb.asm.ClassWriter cw = new jdk.internal.org.objectweb.asm.ClassWriter(cr, jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);\n-            ClassVisitor v = new ClassVisitor(ASM9, cw) {\n-                @Override\n-                public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n-                    return (name.equals(\"hashCode\") && descriptor.equals(\"()Z\"))\n-                           ? null\n-                           : super.visitMethod(access, name, descriptor, signature, exceptions);\n-                }\n-            };\n-            cr.accept(cw, 0);\n-            return cw.toByteArray();\n-        }),\n@@ -322,273 +248,0 @@\n-    static class CustomClassVisitor extends ClassVisitor {\n-\n-        public CustomClassVisitor(ClassVisitor writer) {\n-            super(ASM9, writer);\n-        }\n-\n-        @Override\n-        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n-            super.visit(version, access, name, signature, superName, interfaces);\n-        }\n-\n-        @Override\n-        public void visitSource(String source, String debug) {\n-            super.visitSource(source, debug);\n-        }\n-\n-        @Override\n-        public ModuleVisitor visitModule(String name, int access, String version) {\n-            return super.visitModule(name, access, version);\n-        }\n-\n-        @Override\n-        public void visitNestHost(String nestHost) {\n-            super.visitNestHost(nestHost);\n-        }\n-\n-        @Override\n-        public void visitOuterClass(String owner, String name, String descriptor) {\n-            super.visitOuterClass(owner, name, descriptor);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n-            return super.visitAnnotation(descriptor, visible);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String descriptor, boolean visible) {\n-            return super.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitAttribute(Attribute attribute) {\n-            super.visitAttribute(attribute);\n-        }\n-\n-        @Override\n-        public void visitNestMember(String nestMember) {\n-            super.visitNestMember(nestMember);\n-        }\n-\n-        @Override\n-        public void visitInnerClass(String name, String outerName, String innerName, int access) {\n-            super.visitInnerClass(name, outerName, innerName, access);\n-        }\n-\n-        @Override\n-        public RecordComponentVisitor visitRecordComponent(String name, String descriptor, String signature) {\n-            return super.visitRecordComponent(name, descriptor, signature);\n-        }\n-\n-        @Override\n-        public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\n-            return super.visitField(access, name, descriptor, signature, value);\n-        }\n-\n-        @Override\n-        public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n-            MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);\n-            return new CustomMethodVisitor(mv);\n-        }\n-\n-        @Override\n-        public void visitEnd() {\n-            super.visitEnd();\n-        }\n-    };\n-\n-\n-    static class CustomMethodVisitor extends MethodVisitor {\n-\n-        public CustomMethodVisitor(MethodVisitor methodVisitor) {\n-            super(ASM9, methodVisitor);\n-        }\n-\n-        @Override\n-        public void visitParameter(String name, int access) {\n-            super.visitParameter(name, access);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitAnnotationDefault() {\n-            return super.visitAnnotationDefault();\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n-            return super.visitAnnotation(descriptor, visible);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String descriptor, boolean visible) {\n-            return super.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitAnnotableParameterCount(int parameterCount, boolean visible) {\n-            super.visitAnnotableParameterCount(parameterCount, visible);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitParameterAnnotation(int parameter, String descriptor, boolean visible) {\n-            return super.visitParameterAnnotation(parameter, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitAttribute(Attribute attribute) {\n-            super.visitAttribute(attribute);\n-        }\n-\n-        @Override\n-        public void visitCode() {\n-            super.visitCode();\n-        }\n-\n-        @Override\n-        public void visitFrame(int type, int numLocal, Object[] local, int numStack, Object[] stack) {\n-            super.visitFrame(type, numLocal, local, numStack, stack);\n-        }\n-\n-        @Override\n-        public void visitInsn(int opcode) {\n-            super.visitInsn(opcode);\n-        }\n-\n-        @Override\n-        public void visitIntInsn(int opcode, int operand) {\n-            super.visitIntInsn(opcode, operand);\n-        }\n-\n-        @Override\n-        public void visitVarInsn(int opcode, int var) {\n-            super.visitVarInsn(opcode, var);\n-        }\n-\n-        @Override\n-        public void visitTypeInsn(int opcode, String type) {\n-            super.visitTypeInsn(opcode, type);\n-        }\n-\n-        @Override\n-        public void visitFieldInsn(int opcode, String owner, String name, String descriptor) {\n-            super.visitFieldInsn(opcode, owner, name, descriptor);\n-        }\n-\n-        @Override\n-        @SuppressWarnings(\"deprecation\")\n-        public void visitMethodInsn(int opcode, String owner, String name, String descriptor) {\n-            super.visitMethodInsn(opcode, owner, name, descriptor);\n-        }\n-\n-        @Override\n-        public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) {\n-            super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);\n-        }\n-\n-        @Override\n-        public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments) {\n-            super.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments);\n-        }\n-\n-        @Override\n-        public void visitJumpInsn(int opcode, Label label) {\n-            super.visitJumpInsn(opcode, label);\n-        }\n-\n-        @Override\n-        public void visitLabel(Label label) {\n-            super.visitLabel(label);\n-        }\n-\n-        @Override\n-        public void visitLdcInsn(Object value) {\n-            super.visitLdcInsn(value);\n-        }\n-\n-        @Override\n-        public void visitIincInsn(int var, int increment) {\n-            super.visitIincInsn(var, increment);\n-        }\n-\n-        @Override\n-        public void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels) {\n-            super.visitTableSwitchInsn(min, max, dflt, labels);\n-        }\n-\n-        @Override\n-        public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {\n-            super.visitLookupSwitchInsn(dflt, keys, labels);\n-        }\n-\n-        @Override\n-        public void visitMultiANewArrayInsn(String descriptor, int numDimensions) {\n-            super.visitMultiANewArrayInsn(descriptor, numDimensions);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitInsnAnnotation(int typeRef, TypePath typePath, String descriptor, boolean visible) {\n-            return super.visitInsnAnnotation(typeRef, typePath, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitTryCatchBlock(Label start, Label end, Label handler, String type) {\n-            super.visitTryCatchBlock(start, end, handler, type);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitTryCatchAnnotation(int typeRef, TypePath typePath, String descriptor, boolean visible) {\n-            return super.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitLocalVariable(String name, String descriptor, String signature, Label start, Label end, int index) {\n-            super.visitLocalVariable(name, descriptor, signature, start, end, index);\n-        }\n-\n-        @Override\n-        public AnnotationVisitor visitLocalVariableAnnotation(int typeRef, TypePath typePath, Label[] start, Label[] end, int[] index, String descriptor, boolean visible) {\n-            return super.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, descriptor, visible);\n-        }\n-\n-        @Override\n-        public void visitLineNumber(int line, Label start) {\n-            super.visitLineNumber(line, start);\n-        }\n-\n-        @Override\n-        public void visitMaxs(int maxStack, int maxLocals) {\n-            super.visitMaxs(maxStack, maxLocals);\n-        }\n-\n-        @Override\n-        public void visitEnd() {\n-            super.visitEnd();\n-        }\n-    };\n-\n-    static class NopClassVisitor extends CustomClassVisitor {\n-\n-        public NopClassVisitor(ClassVisitor writer) {\n-            super(writer);\n-        }\n-\n-        @Override\n-        public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n-            MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);\n-            return new NopMethodVisitor(mv);\n-        }\n-    }\n-\n-    static class NopMethodVisitor extends CustomMethodVisitor {\n-\n-        public NopMethodVisitor(MethodVisitor methodVisitor) {\n-            super(methodVisitor);\n-        }\n-\n-        @Override\n-        public void visitCode() {\n-            super.visitCode();\n-            visitInsn(Opcodes.NOP);\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":1,"deletions":348,"binary":false,"changes":349,"status":"modified"}]}