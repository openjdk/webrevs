{"files":[{"patch":"@@ -35,0 +35,19 @@\n+class ThreadPriorityAdjuster : public StackObj {\n+private:\n+  Thread* const _thread;\n+  ThreadPriority const _new_prio;\n+  ThreadPriority _old_prio;\n+public:\n+  ThreadPriorityAdjuster(ThreadPriority new_prio) : _thread(Thread::current()), _new_prio(new_prio) {\n+    os::get_priority(_thread, _old_prio);\n+    if (_old_prio != _new_prio) {\n+      os::set_priority(_thread, new_prio);\n+    }\n+  }\n+  ~ThreadPriorityAdjuster() {\n+    if (_old_prio != _new_prio) {\n+      os::set_priority(_thread, _old_prio);\n+    }\n+  }\n+};\n+\n@@ -49,1 +68,1 @@\n-  _not_finished = num_worker_tasks;\n+  Atomic::store(&_not_finished, num_worker_tasks);\n@@ -63,1 +82,1 @@\n-    task->work(0);\n+    caller_run_task();\n@@ -77,0 +96,12 @@\n+void WorkerTaskDispatcher::caller_run_task() {\n+  \/\/ Execute the task in the same context and with the same priority\n+  \/\/ it would be executed by a worker.\n+  ThreadPriorityAdjuster tp(NearMaxPriority);\n+  if (Thread::current()->is_Named_thread()) {\n+    GCIdMark gc_id_mark(_task->gc_id());\n+    _task->work(0);\n+  } else {\n+    _task->work(0);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.cpp","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+  \/\/ Runs task in caller.\n+  void caller_run_task();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}