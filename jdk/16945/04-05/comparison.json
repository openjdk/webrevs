{"files":[{"patch":"@@ -54,1 +54,1 @@\n-  bool caller_can_run() { return _caller_can_run; }\n+  bool caller_can_run() const { return _caller_can_run; }\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/thread.hpp\"\n@@ -42,7 +45,6 @@\n-    WorkerTask(\"Parallel Task\", can_caller_execute),\n-    _expected_workers(expected_workers),\n-    _actual_workers(0),\n-    _actual_ids_bitset(0),\n-    _caller_thread(Thread::current()),\n-    _seen_caller(false)\n-    {};\n+      WorkerTask(\"Parallel Task\", can_caller_execute),\n+      _expected_workers(expected_workers),\n+      _actual_workers(0),\n+      _actual_ids_bitset(0),\n+      _caller_thread(Thread::current()),\n+      _seen_caller(false) {}\n@@ -113,1 +115,0 @@\n-\n@@ -116,3 +117,1 @@\n-  static const uint max_workers = MIN2(31, os::processor_count()); \/\/ ID bitmap limits the max CPU\n-  static const uint half_workers = max_workers \/ 2;\n-  static const uint min_workers = 1;\n+  static const uint MAX_WORKERS = MIN2(31, os::processor_count()); \/\/ ID bitmap limits the max CPU\n@@ -120,1 +119,1 @@\n-  WorkerThreads* workers = new WorkerThreads(\"test\", max_workers);\n+  WorkerThreads* workers = new WorkerThreads(\"test\", MAX_WORKERS);\n@@ -123,19 +122,7 @@\n-  \/\/ Full parallelism\n-  workers->set_active_workers(max_workers);\n-  for (int t = 0; t < TRIES; t++) {\n-    basic_run_with(workers, max_workers, false);\n-    basic_run_with(workers, max_workers, true);\n-  }\n-\n-  \/\/ Half parallelism\n-  workers->set_active_workers(half_workers);\n-  for (int t = 0; t < TRIES; t++) {\n-    basic_run_with(workers, half_workers, false);\n-    basic_run_with(workers, half_workers,  true);\n-  }\n-\n-  \/\/ Min parallelism\n-  workers->set_active_workers(min_workers);\n-  for (int t = 0; t < TRIES; t++) {\n-    basic_run_with(workers, min_workers,  false);\n-    basic_run_with(workers, min_workers,   true);\n+  for (uint w = 1; w <= MAX_WORKERS; w++) {\n+    tty->print_cr(\"Test with %u workers\", w);\n+    workers->set_active_workers(w);\n+    for (int t = 0; t < TRIES; t++) {\n+      basic_run_with(workers, w, false);\n+      basic_run_with(workers, w, true);\n+    }\n@@ -161,0 +148,1 @@\n+  static const uint MAX_WORKERS = os::processor_count();\n@@ -162,5 +150,1 @@\n-  static const uint max_workers = os::processor_count();\n-  static const uint half_workers = max_workers \/ 2;\n-  static const uint min_workers = 1;\n-\n-  WorkerThreads* workers = new WorkerThreads(\"test\", max_workers);\n+  WorkerThreads* workers = new WorkerThreads(\"test\", MAX_WORKERS);\n@@ -169,33 +153,12 @@\n-  tty->print_cr(\"Full parallelism (%u workers):\", max_workers);\n-  workers->set_active_workers(max_workers);\n-  tty->print_cr(\"  only workers:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, false);\n-  }\n-  tty->print_cr(\"  workers + caller:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, true);\n-  }\n-  tty->cr();\n-\n-  tty->print_cr(\"Half parallelism (%u workers):\", half_workers);\n-  workers->set_active_workers(half_workers);\n-  tty->print_cr(\"  only workers:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, false);\n-  }\n-  tty->print_cr(\"  workers + caller:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, true);\n-  }\n-  tty->cr();\n-\n-  tty->print_cr(\"Min parallelism (%u workers):\", min_workers);\n-  workers->set_active_workers(min_workers);\n-  tty->print_cr(\"  only workers:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, false);\n-  }\n-  tty->print_cr(\"  workers + caller:\");\n-  for (int i = 0; i < ITERS; i++) {\n-    perf_iteration(workers, true);\n+  for (uint w = MAX_WORKERS; w > 0; w \/= 2) {\n+    workers->set_active_workers(w);\n+    tty->print_cr(\"Test with %u workers:\", w);\n+    tty->print_cr(\"  only workers:\");\n+    for (int i = 0; i < ITERS; i++) {\n+      perf_iteration(workers, false);\n+    }\n+    tty->print_cr(\"  workers + caller:\");\n+    for (int i = 0; i < ITERS; i++) {\n+      perf_iteration(workers, true);\n+    }\n+    tty->cr();\n@@ -203,1 +166,0 @@\n-  tty->cr();\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_workerThreads.cpp","additions":32,"deletions":70,"binary":false,"changes":102,"status":"modified"}]}