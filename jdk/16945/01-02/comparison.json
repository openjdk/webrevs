{"files":[{"patch":"@@ -35,19 +35,0 @@\n-class ThreadPriorityAdjuster : public StackObj {\n-private:\n-  Thread* const _thread;\n-  ThreadPriority const _new_prio;\n-  ThreadPriority _old_prio;\n-public:\n-  ThreadPriorityAdjuster(ThreadPriority new_prio) : _thread(Thread::current()), _new_prio(new_prio) {\n-    os::get_priority(_thread, _old_prio);\n-    if (_old_prio != _new_prio) {\n-      os::set_priority(_thread, new_prio);\n-    }\n-  }\n-  ~ThreadPriorityAdjuster() {\n-    if (_old_prio != _new_prio) {\n-      os::set_priority(_thread, _old_prio);\n-    }\n-  }\n-};\n-\n@@ -63,1 +44,0 @@\n-  bool use_workers = !use_caller || (num_workers > 1);\n@@ -68,7 +48,1 @@\n-  Atomic::store(&_not_finished, num_worker_tasks);\n-\n-  if (use_workers) {\n-    if (use_caller) {\n-      \/\/ Claim worker_id = 0 for caller.\n-      Atomic::inc(&_started);\n-    }\n+  _not_finished = num_workers;\n@@ -76,1 +50,2 @@\n-    \/\/ Dispatch 'num_worker_tasks' number of tasks.\n+  \/\/ Dispatch tasks to workers.\n+  if (num_worker_tasks > 0) {\n@@ -80,0 +55,1 @@\n+  \/\/ If possible, execute tasks in caller.\n@@ -81,1 +57,0 @@\n-    \/\/ Execute task in caller.\n@@ -85,4 +60,2 @@\n-  if (use_workers) {\n-    \/\/ Wait for the last worker to signal the coordinator.\n-    _end_semaphore.wait();\n-  }\n+  \/\/ Wait for the last worker to signal the coordinator.\n+  _end_semaphore.wait();\n@@ -97,9 +70,5 @@\n-  \/\/ Execute the task in the same context and with the same priority\n-  \/\/ it would be executed by a worker.\n-  ThreadPriorityAdjuster tp(NearMaxPriority);\n-  if (Thread::current()->is_Named_thread()) {\n-    GCIdMark gc_id_mark(_task->gc_id());\n-    _task->work(0);\n-  } else {\n-    _task->work(0);\n-  }\n+  \/\/ Run at least one task in the caller.\n+  \/\/ Then see if we have other tasks that caller can run.\n+  do {\n+    internal_run_task(false);\n+  } while (_start_semaphore.trywait());\n@@ -111,0 +80,2 @@\n+  internal_run_task(true);\n+}\n@@ -112,0 +83,1 @@\n+void WorkerTaskDispatcher::internal_run_task(bool is_worker) {\n@@ -114,1 +86,3 @@\n-  WorkerThread::set_worker_id(worker_id);\n+  if (is_worker) {\n+    WorkerThread::set_worker_id(worker_id);\n+  }\n@@ -117,2 +91,6 @@\n-  GCIdMark gc_id_mark(_task->gc_id());\n-  _task->work(worker_id);\n+  if (is_worker || Thread::current()->is_Named_thread()) {\n+    GCIdMark gc_id_mark(_task->gc_id());\n+    _task->work(worker_id);\n+  } else {\n+    _task->work(worker_id);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.cpp","additions":23,"deletions":45,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -72,3 +72,0 @@\n-  \/\/ Runs task in caller.\n-  void caller_run_task();\n-\n@@ -87,0 +84,3 @@\n+  void caller_run_task();\n+\n+  \/\/ Sees if there is a task and runs it.\n@@ -88,0 +88,2 @@\n+\n+  void internal_run_task(bool is_worker);\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,0 +88,10 @@\n+class PerfTask : public WorkerTask {\n+public:\n+  PerfTask(bool can_caller_execute) :\n+    WorkerTask(\"Parallel Perf Task\", can_caller_execute) {}\n+\n+  void work(uint worker_id) {\n+    \/\/ Do nothing, pretend the work is very small.\n+  }\n+};\n+\n@@ -92,0 +102,11 @@\n+static void basic_run_with(WorkerThreads* workers, uint num_workers, bool caller_runs) {\n+  ParallelTask task(num_workers, caller_runs);\n+  workers->run_task(&task);\n+  EXPECT_EQ(num_workers, task.actual_workers());\n+  EXPECT_EQ(expected_ids_bitset(num_workers), task.actual_ids_bitset());\n+  if (!caller_runs) {\n+    EXPECT_FALSE(task.seen_caller());\n+  }\n+}\n+\n+\n@@ -94,1 +115,1 @@\n-  static const uint max_workers = 4;\n+  static const uint max_workers = os::processor_count();\n@@ -96,0 +117,1 @@\n+  static const uint min_workers = 1;\n@@ -103,15 +125,2 @@\n-    ParallelTask task(max_workers, false);\n-    workers->run_task(&task);\n-    EXPECT_EQ(max_workers, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(max_workers), task.actual_ids_bitset());\n-    EXPECT_FALSE(task.seen_caller());\n-  }\n-\n-  \/\/ Full parallelism, can execute in caller\n-  workers->set_active_workers(max_workers);\n-  for (int t = 0; t < TRIES; t++) {\n-    ParallelTask task(max_workers, true);\n-    workers->run_task(&task);\n-    EXPECT_EQ(max_workers, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(max_workers), task.actual_ids_bitset());\n-    EXPECT_TRUE(task.seen_caller());\n+    basic_run_with(workers, max_workers, false);\n+    basic_run_with(workers, max_workers, true);\n@@ -123,5 +132,2 @@\n-    ParallelTask task(half_workers, false);\n-    workers->run_task(&task);\n-    EXPECT_EQ(half_workers, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(half_workers), task.actual_ids_bitset());\n-    EXPECT_FALSE(task.seen_caller());\n+    basic_run_with(workers, half_workers, false);\n+    basic_run_with(workers, half_workers,  true);\n@@ -130,2 +136,2 @@\n-  \/\/ Half parallelism, can execute in caller\n-  workers->set_active_workers(half_workers);\n+  \/\/ Min parallelism\n+  workers->set_active_workers(min_workers);\n@@ -133,5 +139,2 @@\n-    ParallelTask task(half_workers, true);\n-    workers->run_task(&task);\n-    EXPECT_EQ(half_workers, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(half_workers), task.actual_ids_bitset());\n-    EXPECT_TRUE(task.seen_caller());\n+    basic_run_with(workers, min_workers,  false);\n+    basic_run_with(workers, min_workers,   true);\n@@ -139,0 +142,5 @@\n+}\n+\n+static void perf_iteration(WorkerThreads* workers, bool caller_runs) {\n+  static const int TRIES = 50000;\n+  NumberSeq seq;\n@@ -140,2 +148,0 @@\n-  \/\/ Lowest parallelism\n-  workers->set_active_workers(1);\n@@ -143,1 +149,2 @@\n-    ParallelTask task(1, false);\n+    PerfTask task(caller_runs);\n+    jlong start = os::javaTimeNanos();\n@@ -145,3 +152,1 @@\n-    EXPECT_EQ(1u, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(1), task.actual_ids_bitset());\n-    EXPECT_FALSE(task.seen_caller());\n+    seq.add(os::javaTimeNanos() - start);\n@@ -150,8 +155,45 @@\n-  \/\/ Lowest parallelism, can execute in caller\n-  workers->set_active_workers(1);\n-  for (int t = 0; t < TRIES; t++) {\n-    ParallelTask task(1, true);\n-    workers->run_task(&task);\n-    EXPECT_EQ(1u, task.actual_workers());\n-    EXPECT_EQ(expected_ids_bitset(1), task.actual_ids_bitset());\n-    EXPECT_TRUE(task.seen_caller());\n+  tty->print_cr(\"    %12.3f us total; %10.3f us avg; %10.3f us max\", seq.sum() \/ 1000, seq.sum() \/ TRIES \/ 1000, seq.maximum() \/ 1000);\n+}\n+\n+TEST_VM(WorkerThreads, perf) {\n+  static const uint max_workers = os::processor_count();\n+  static const uint half_workers = max_workers \/ 2;\n+  static const uint min_workers = 1;\n+\n+  WorkerThreads* workers = new WorkerThreads(\"test\", max_workers);\n+  workers->initialize_workers();\n+\n+\n+  tty->print_cr(\"Full parallelism:\");\n+  workers->set_active_workers(max_workers);\n+  tty->print_cr(\"  only workers:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, false);\n+  }\n+  tty->print_cr(\"  workers + caller:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, true);\n+  }\n+  tty->cr();\n+\n+  tty->print_cr(\"Half parallelism:\");\n+  workers->set_active_workers(half_workers);\n+  tty->print_cr(\"  only workers:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, false);\n+  }\n+  tty->print_cr(\"  workers + caller:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, true);\n+  }\n+  tty->cr();\n+\n+  tty->print_cr(\"Min parallelism:\");\n+  workers->set_active_workers(min_workers);\n+  tty->print_cr(\"  only workers:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, false);\n+  }\n+  tty->print_cr(\"  workers + caller:\");\n+  for (int i = 0; i < 5; i++) {\n+    perf_iteration(workers, true);\n@@ -159,0 +201,1 @@\n+  tty->cr();\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_workerThreads.cpp","additions":85,"deletions":42,"binary":false,"changes":127,"status":"modified"}]}