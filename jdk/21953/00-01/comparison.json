{"files":[{"patch":"@@ -603,0 +603,268 @@\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview2(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public interface Preview {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface NonPreviewIntf extends Preview {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview implements Preview {\n+                              public void test() {}\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.NonPreviewIntf;\n+                          public class Test {\n+                              public void test(NonPreview np1,\n+                                               NonPreviewIntf np2) {\n+                                  np1.test();\n+                                  np2.test();\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview3(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public class Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview extends Preview {\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test(NonPreview np, Preview p) {\n+                                  NonPreview.test();\n+                                  Preview.test();\n+                                  int i1 = np.field;\n+                                  int i2 = p.field;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:3:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:5:37: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:6:19: compiler.err.is.preview: test()\",\n+                        \"Test.java:7:9: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:8:20: compiler.err.is.preview: field\",\n+                        \"5 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview4(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public class Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview extends Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test(NonPreview np, Preview p) {\n+                                  NonPreview.test();\n+                                  Preview.test();\n+                                  int i1 = np.field;\n+                                  int i2 = p.field;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:3:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:5:37: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:7:9: compiler.err.is.preview: preview.api.Preview\",\n+                        \"3 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview5(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public interface Preview {\n+                              public static final int CONST1 = 0;\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface NonPreviewIntf extends Preview {\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview implements Preview {\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.NonPreviewIntf;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test() {\n+                                  int i1 = NonPreview.CONST1;\n+                                  int i2 = NonPreviewIntf.CONST1;\n+                                  int i3 = Preview.CONST1;\n+                                  int i4 = NonPreview.CONST2;\n+                                  int i5 = NonPreviewIntf.CONST2;\n+                                  int i6 = Preview.CONST2;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:4:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:7:28: compiler.err.is.preview: CONST1\",\n+                        \"Test.java:8:32: compiler.err.is.preview: CONST1\",\n+                        \"Test.java:9:18: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:12:18: compiler.err.is.preview: preview.api.Preview\",\n+                        \"5 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":268,"deletions":0,"binary":false,"changes":268,"status":"modified"}]}