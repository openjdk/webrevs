{"files":[{"patch":"@@ -4721,1 +4721,1 @@\n-                chk.checkPreview(tree.pos(), env.info.scope.owner, sym);\n+                chk.checkPreview(tree.pos(), env.info.scope.owner, site, sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1848,1 +1848,2 @@\n-            checkPreview(tree.pos(), m, other);\n+            checkPreview(TreeInfo.diagnosticPositionFor(m, tree),\n+                         m, origin.type, other);\n@@ -1928,1 +1929,2 @@\n-                (other.flags() & PREVIEW_API) == 0) {\n+                ((other.flags() & PREVIEW_API) == 0 &&\n+                 (other.owner.flags() & PREVIEW_API) == 0)) {\n@@ -3831,2 +3833,23 @@\n-        if ((s.flags() & PREVIEW_API) != 0 && !preview.participatesInPreview(syms, other, s) && !disablePreviewCheck) {\n-            if ((s.flags() & PREVIEW_REFLECTIVE) == 0) {\n+        checkPreview(pos, other, Type.noType, s);\n+    }\n+\n+    void checkPreview(DiagnosticPosition pos, Symbol other, Type site, Symbol s) {\n+        boolean sIsPreview;\n+        Symbol previewSymbol;\n+        if ((s.flags() & PREVIEW_API) != 0) {\n+            sIsPreview = true;\n+            previewSymbol=  s;\n+        } else if ((s.kind == Kind.MTH || s.kind == Kind.VAR) &&\n+                   site.tsym != null &&\n+                   (site.tsym.flags() & PREVIEW_API) == 0 &&\n+                   (s.owner.flags() & PREVIEW_API) != 0) {\n+            \/\/calling a method, or using a field, whose owner is a preview, but\n+            \/\/using a site that is not a preview. Also produce an error or warning:\n+            sIsPreview = true;\n+            previewSymbol = s.owner;\n+        } else {\n+            sIsPreview = false;\n+            previewSymbol = null;\n+        }\n+        if (sIsPreview && !preview.participatesInPreview(syms, other, s) && !disablePreviewCheck) {\n+            if ((previewSymbol.flags() & PREVIEW_REFLECTIVE) == 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8282823\n+ * @bug 8282823 8343540\n@@ -232,2 +232,2 @@\n-                List.of(\"IUseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n-                        \"IUseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                List.of(\"IUseIntf2P.java:4:25: compiler.err.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:4:25: compiler.err.is.preview: test()\",\n@@ -235,2 +235,2 @@\n-                        \"UseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n-                        \"UseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseIntf2P.java:4:17: compiler.err.is.preview: test()\",\n+                        \"UseIntfDef2P.java:4:17: compiler.err.is.preview: test()\",\n@@ -238,1 +238,1 @@\n-                        \"UseSubIntfDef12P.java:2:8: compiler.err.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:3:17: compiler.err.is.preview: test()\",\n@@ -260,2 +260,2 @@\n-                List.of(\"IUseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n-                        \"IUseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                List.of(\"IUseIntf2P.java:4:25: compiler.warn.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:4:25: compiler.warn.is.preview: test()\",\n@@ -263,2 +263,2 @@\n-                        \"UseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n-                        \"UseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseIntf2P.java:4:17: compiler.warn.is.preview: test()\",\n+                        \"UseIntfDef2P.java:4:17: compiler.warn.is.preview: test()\",\n@@ -266,1 +266,1 @@\n-                        \"UseSubIntfDef12P.java:2:8: compiler.warn.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:3:17: compiler.warn.is.preview: test()\",\n@@ -395,1 +395,1 @@\n-                List.of(\"AbstractP.java:3:17: compiler.err.is.preview: test()\",\n+                List.of(\"AbstractP.java:4:26: compiler.err.is.preview: test()\",\n@@ -418,1 +418,1 @@\n-                List.of(\"AbstractP.java:3:17: compiler.warn.is.preview: test()\",\n+                List.of(\"AbstractP.java:4:26: compiler.warn.is.preview: test()\",\n@@ -466,0 +466,407 @@\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public interface Preview {\n+                              public static final int FIELD = 0;\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST,\n+                                                             reflective=true)\n+                          public interface ReflectivePreview {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface NonPreviewIntf extends Preview {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview implements Preview {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class ReflectiveNonPreview implements ReflectivePreview {\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.NonPreviewIntf;\n+                          import preview.api.Preview;\n+                          import preview.api.ReflectiveNonPreview;\n+                          public class Test {\n+                              public void test(NonPreview np,\n+                                               Produce<? extends NonPreview> prod) {\n+                                  np.test();\n+                                  acceptRunnable(np::test);\n+                                  accept(NonPreview::test);\n+                                  prod.produce().test();\n+                                  acceptRunnable(prod.produce()::test);\n+                                  int i = np.FIELD;\n+                              }\n+                              public <T1 extends NonPreview,\n+                                      T2 extends Test & NonPreviewIntf,\n+                                      T3 extends T2> void test(T1 t1, T2 t2, T3 t3) {\n+                                  t1.test();\n+                                  t2.test();\n+                                  t3.test();\n+                              }\n+                              public void test(ReflectiveNonPreview np) {\n+                                  np.test();\n+                              }\n+                              public void test(Preview p) {\n+                                  p.test();\n+                                  acceptRunnable(p::test);\n+                                  accept(Preview::test);\n+                              }\n+                              private static class ExtendsNonPreview extends NonPreview {\n+                                  public void test() {} \/\/error\/warning here:\n+                              }\n+                              private static class ImplementsPreview implements Preview {\n+                                  \/\/no error\/warning (already was on Preview after implements)\n+                                  public void test() {}\n+                              }\n+                              private static class ImplicitReceiver extends NonPreview {\n+                                  public void g() {\n+                                      test(); \/\/implicit this - error\/warning\n+                                      int i = FIELD; \/\/implicit this - error\/warning\n+                                  }\n+                              }\n+                              private void acceptRunnable(Runnable r) {}\n+                              private void accept(Accept<NonPreview> accept) {}\n+                              interface Accept<T> {\n+                                  public void accept(T t);\n+                              }\n+                              interface Produce<T> {\n+                                  public T produce();\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:4:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:26:22: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:34:55: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:9:11: compiler.err.is.preview: test()\",\n+                        \"Test.java:10:24: compiler.err.is.preview: test()\",\n+                        \"Test.java:11:16: compiler.err.is.preview: test()\",\n+                        \"Test.java:12:23: compiler.err.is.preview: test()\",\n+                        \"Test.java:13:24: compiler.err.is.preview: test()\",\n+                        \"Test.java:14:19: compiler.err.is.preview: FIELD\",\n+                        \"Test.java:19:11: compiler.err.is.preview: test()\",\n+                        \"Test.java:20:11: compiler.err.is.preview: test()\",\n+                        \"Test.java:21:11: compiler.err.is.preview: test()\",\n+                        \"Test.java:24:11: compiler.warn.is.preview.reflective: test()\",\n+                        \"Test.java:29:16: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:32:21: compiler.err.is.preview: test()\",\n+                        \"Test.java:36:21: compiler.err.is.preview: test()\",\n+                        \"Test.java:40:13: compiler.err.is.preview: test()\",\n+                        \"Test.java:41:21: compiler.err.is.preview: FIELD\",\n+                        \"17 errors\",\n+                        \"1 warning\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview2(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public interface Preview {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface NonPreviewIntf extends Preview {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview implements Preview {\n+                              public void test() {}\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.NonPreviewIntf;\n+                          public class Test {\n+                              public void test(NonPreview np1,\n+                                               NonPreviewIntf np2) {\n+                                  np1.test();\n+                                  np2.test();\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview3(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public class Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview extends Preview {\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test(NonPreview np, Preview p) {\n+                                  NonPreview.test();\n+                                  Preview.test();\n+                                  int i1 = np.field;\n+                                  int i2 = p.field;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:3:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:5:37: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:6:19: compiler.err.is.preview: test()\",\n+                        \"Test.java:7:9: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:8:20: compiler.err.is.preview: field\",\n+                        \"5 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview4(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public class Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview extends Preview {\n+                              public int field;\n+                              public static void test() {}\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test(NonPreview np, Preview p) {\n+                                  NonPreview.test();\n+                                  Preview.test();\n+                                  int i1 = np.field;\n+                                  int i2 = p.field;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:3:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:5:37: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:7:9: compiler.err.is.preview: preview.api.Preview\",\n+                        \"3 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n+    @Test \/\/JDK-8343540:\n+    public void nonPreviewImplementsPreview5(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                          public interface Preview {\n+                              public static final int CONST1 = 0;\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface NonPreviewIntf extends Preview {\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public class NonPreview implements Preview {\n+                              public static final int CONST2 = 0;\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.NonPreview;\n+                          import preview.api.NonPreviewIntf;\n+                          import preview.api.Preview;\n+                          public class Test {\n+                              public void test() {\n+                                  int i1 = NonPreview.CONST1;\n+                                  int i2 = NonPreviewIntf.CONST1;\n+                                  int i3 = Preview.CONST1;\n+                                  int i4 = NonPreview.CONST2;\n+                                  int i5 = NonPreviewIntf.CONST2;\n+                                  int i6 = Preview.CONST2;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"Test.java:4:19: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:7:28: compiler.err.is.preview: CONST1\",\n+                        \"Test.java:8:32: compiler.err.is.preview: CONST1\",\n+                        \"Test.java:9:18: compiler.err.is.preview: preview.api.Preview\",\n+                        \"Test.java:12:18: compiler.err.is.preview: preview.api.Preview\",\n+                        \"5 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":421,"deletions":14,"binary":false,"changes":435,"status":"modified"}]}