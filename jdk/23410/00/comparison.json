{"files":[{"patch":"@@ -50,0 +50,1 @@\n+jlong       LogConfiguration::_vm_start_time = 0;\n@@ -109,1 +110,1 @@\n-  LogFileOutput::set_file_name_parameters(vm_start_time);\n+  _vm_start_time = vm_start_time;\n@@ -192,1 +193,1 @@\n-    output = new LogFileOutput(name);\n+    output = new LogFileOutput(name, _vm_start_time);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+  static jlong                      _vm_start_time;\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/filenameUtil.hpp\"\n@@ -37,4 +38,0 @@\n-const char* const LogFileOutput::PidFilenamePlaceholder = \"%p\";\n-const char* const LogFileOutput::TimestampFilenamePlaceholder = \"%t\";\n-const char* const LogFileOutput::TimestampFormat = \"%Y-%m-%d_%H-%M-%S\";\n-const char* const LogFileOutput::HostnameFilenamePlaceholder = \"%hn\";\n@@ -43,2 +40,0 @@\n-char        LogFileOutput::_pid_str[PidBufferSize];\n-char        LogFileOutput::_vm_start_time_str[StartTimeBufferSize];\n@@ -46,1 +41,1 @@\n-LogFileOutput::LogFileOutput(const char* name)\n+LogFileOutput::LogFileOutput(const char* name, jlong vm_start_time)\n@@ -52,1 +47,1 @@\n-  _file_name = make_file_name(name + strlen(Prefix), _pid_str, _vm_start_time_str);\n+  _file_name = FilenameUtil::expand_filename(name + strlen(Prefix), vm_start_time, mtLogging);\n@@ -63,11 +58,0 @@\n-void LogFileOutput::set_file_name_parameters(jlong vm_start_time) {\n-  int res = jio_snprintf(_pid_str, sizeof(_pid_str), \"%d\", os::current_process_id());\n-  assert(res > 0, \"PID buffer too small\");\n-\n-  struct tm local_time;\n-  time_t utc_time = vm_start_time \/ 1000;\n-  os::localtime_pd(&utc_time, &local_time);\n-  res = (int)strftime(_vm_start_time_str, sizeof(_vm_start_time_str), TimestampFormat, &local_time);\n-  assert(res > 0, \"VM start time buffer too small.\");\n-}\n-\n@@ -378,83 +362,0 @@\n-char* LogFileOutput::make_file_name(const char* file_name,\n-                                    const char* pid_string,\n-                                    const char* timestamp_string) {\n-  char hostname_string[HostnameBufferSize];\n-  char* result = nullptr;\n-\n-  \/\/ Lets start finding out if we have any %p, %t and\/or %hn in the name.\n-  \/\/ We will only replace the first occurrence of any placeholder\n-  const char* pid = strstr(file_name, PidFilenamePlaceholder);\n-  const char* timestamp = strstr(file_name, TimestampFilenamePlaceholder);\n-  const char* hostname = strstr(file_name, HostnameFilenamePlaceholder);\n-\n-  if (pid == nullptr && timestamp == nullptr && hostname == nullptr) {\n-    \/\/ We found no place-holders, return the simple filename\n-    return os::strdup_check_oom(file_name, mtLogging);\n-  }\n-\n-  \/\/ At least one of the place-holders were found in the file_name\n-  size_t result_len =  strlen(file_name);\n-  if (pid != nullptr) {\n-    result_len -= strlen(PidFilenamePlaceholder);\n-    result_len += strlen(pid_string);\n-  }\n-  if (timestamp != nullptr) {\n-    result_len -= strlen(TimestampFilenamePlaceholder);\n-    result_len += strlen(timestamp_string);\n-  }\n-  if (hostname != nullptr) {\n-    if (!os::get_host_name(hostname_string, sizeof(hostname_string))) {\n-      int res = jio_snprintf(hostname_string, sizeof(hostname_string), \"unknown-host\");\n-      assert(res > 0, \"Hostname buffer too small\");\n-    }\n-    result_len -= strlen(HostnameFilenamePlaceholder);\n-    result_len += strlen(hostname_string);\n-  }\n-  \/\/ Allocate the new buffer, size it to hold all we want to put in there +1.\n-  result = NEW_C_HEAP_ARRAY(char, result_len + 1, mtLogging);\n-\n-  \/\/ Assemble the strings\n-  size_t file_name_pos = 0;\n-  size_t i = 0;\n-  while (i < result_len) {\n-    if (file_name[file_name_pos] == '%') {\n-      \/\/ Replace the first occurrence of any placeholder\n-      if (pid != nullptr && strncmp(&file_name[file_name_pos],\n-                                    PidFilenamePlaceholder,\n-                                    strlen(PidFilenamePlaceholder)) == 0) {\n-        strcpy(result + i, pid_string);\n-        i += strlen(pid_string);\n-        file_name_pos += strlen(PidFilenamePlaceholder);\n-        pid = nullptr;\n-        continue;\n-      }\n-      if (timestamp != nullptr && strncmp(&file_name[file_name_pos],\n-                                          TimestampFilenamePlaceholder,\n-                                          strlen(TimestampFilenamePlaceholder)) == 0) {\n-        strcpy(result + i, timestamp_string);\n-        i += strlen(timestamp_string);\n-        file_name_pos += strlen(TimestampFilenamePlaceholder);\n-        timestamp = nullptr;\n-        continue;\n-      }\n-      if (hostname != nullptr && strncmp(&file_name[file_name_pos],\n-                                         HostnameFilenamePlaceholder,\n-                                         strlen(HostnameFilenamePlaceholder)) == 0) {\n-        strcpy(result + i, hostname_string);\n-        i += strlen(hostname_string);\n-        file_name_pos += strlen(HostnameFilenamePlaceholder);\n-        hostname = nullptr;\n-        continue;\n-      }\n-    }\n-    \/\/ Else, copy char by char of the original file\n-    result[i++] = file_name[file_name_pos++];\n-  }\n-  assert(i == result_len, \"should be\");\n-  assert(file_name[file_name_pos] == '\\0', \"should be\");\n-\n-  \/\/ Add terminating char\n-  result[result_len] = '\\0';\n-  return result;\n-}\n-\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":3,"deletions":102,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,4 +39,0 @@\n-  static const char* const PidFilenamePlaceholder;\n-  static const char* const TimestampFilenamePlaceholder;\n-  static const char* const TimestampFormat;\n-  static const char* const HostnameFilenamePlaceholder;\n@@ -45,3 +41,0 @@\n-  static const size_t StartTimeBufferSize = 20;\n-  static const size_t PidBufferSize = 21;\n-  static const size_t HostnameBufferSize = 512;\n@@ -49,2 +42,0 @@\n-  static char         _pid_str[PidBufferSize];\n-  static char         _vm_start_time_str[StartTimeBufferSize];\n@@ -70,1 +61,0 @@\n-  char *make_file_name(const char* file_name, const char* pid_string, const char* timestamp_string);\n@@ -84,1 +74,2 @@\n-  LogFileOutput(const char *name);\n+  \/\/ Pass 0 timestamp for current time\n+  LogFileOutput(const char *name, jlong timestamp = 0);\n@@ -100,1 +91,0 @@\n-  static void set_file_name_parameters(jlong start_time);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"jvm.h\"\n+#include \"memory\/allocation.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/filenameUtil.hpp\"\n+\n+const char* const FilenameUtil::PidFilenamePlaceholder = \"%p\";\n+const char* const FilenameUtil::TimestampFilenamePlaceholder = \"%t\";\n+const char* const FilenameUtil::TimestampFormat = \"%Y-%m-%d_%H-%M-%S\";\n+const char* const FilenameUtil::HostnameFilenamePlaceholder = \"%hn\";\n+\n+char* FilenameUtil::expand_filename(const char* filename, jlong timestamp, MemTag tag) {\n+  assert(tag != mtNone, \"Missing memory tag\");\n+\n+  char* result = nullptr;\n+  \/\/ Lets start finding out if we have any %p, %t and\/or %hn in the name.\n+  \/\/ We will only replace the first occurrence of any placeholder\n+  const char* pid_opt = strstr(filename, PidFilenamePlaceholder);\n+  const char* timestamp_opt = strstr(filename, TimestampFilenamePlaceholder);\n+  const char* hostname_opt = strstr(filename, HostnameFilenamePlaceholder);\n+\n+  size_t len = strlen(filename);\n+  if (pid_opt == nullptr && timestamp_opt == nullptr && hostname_opt == nullptr) {\n+    \/\/ We found no place-holders, return the simple filename\n+      return os::strdup_check_oom(filename, tag);\n+  }\n+\n+  char pid_string[PidBufferSize];\n+  char timestamp_string[StartTimeBufferSize];\n+  char hostname_string[HostnameBufferSize];\n+\n+  \/\/ At least one of the place-holders were found in the filename\n+  size_t result_len = len;\n+  if (pid_opt != nullptr) {\n+    get_pid_string(pid_string, sizeof(pid_string));\n+    result_len -= strlen(PidFilenamePlaceholder);\n+    result_len += strlen(pid_string);\n+  }\n+  if (timestamp_opt != nullptr) {\n+    if (timestamp == 0) {\n+        timestamp = os::javaTimeMillis();\n+    }\n+    get_timestamp_string(timestamp_string, sizeof(timestamp_string), timestamp);\n+    result_len -= strlen(TimestampFilenamePlaceholder);\n+    result_len += strlen(timestamp_string);\n+  }\n+  if (hostname_opt != nullptr) {\n+    get_hostname_string(hostname_string, sizeof(hostname_string));\n+    result_len -= strlen(HostnameFilenamePlaceholder);\n+    result_len += strlen(hostname_string);\n+  }\n+  \/\/ Allocate the new buffer, size it to hold all we want to put in there +1.\n+  result = NEW_C_HEAP_ARRAY(char, result_len + 1, tag);\n+  \/\/ Assemble the strings\n+\n+  size_t filename_pos = 0;\n+  size_t i = 0;\n+  while (i < result_len) {\n+    if (filename[filename_pos] == '%') {\n+      \/\/ Replace the first occurrence of any placeholder\n+      if (pid_opt != nullptr && strncmp(&filename[filename_pos],\n+                                        PidFilenamePlaceholder,\n+                                        strlen(PidFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, pid_string);\n+        i += strlen(pid_string);\n+        filename += strlen(PidFilenamePlaceholder);\n+        pid_opt = nullptr;\n+        continue;\n+      }\n+      if (timestamp_opt != nullptr && strncmp(&filename[filename_pos],\n+                                              TimestampFilenamePlaceholder,\n+                                              strlen(TimestampFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, timestamp_string);\n+        i += strlen(timestamp_string);\n+        filename += strlen(TimestampFilenamePlaceholder);\n+        timestamp_opt = nullptr;\n+        continue;\n+      }\n+      if (hostname_opt != nullptr && strncmp(&filename[filename_pos],\n+                                             HostnameFilenamePlaceholder,\n+                                             strlen(HostnameFilenamePlaceholder)) == 0) {\n+        strcpy(result + i, hostname_string);\n+        i += strlen(hostname_string);\n+        filename_pos += strlen(HostnameFilenamePlaceholder);\n+        hostname_opt = nullptr;\n+        continue;\n+      }\n+    }\n+    \/\/ Else, copy char by char of the original file\n+    result[i++] = filename[filename_pos++];\n+  }\n+  assert(i == result_len, \"should be\");\n+  assert(filename[filename_pos] == '\\0', \"should be\");\n+\n+  \/\/ Add terminating char\n+  result[result_len] = '\\0';\n+  return result;\n+}\n+\n+void FilenameUtil::get_pid_string(char* buf, size_t buf_len) {\n+  int res = jio_snprintf(buf, buf_len, \"%d\", os::current_process_id());\n+  assert(res > 0, \"PID buffer too small\");\n+}\n+\n+void FilenameUtil::get_timestamp_string(char* buf, size_t buf_len, jlong timestamp) {\n+  struct tm local_time;\n+  time_t utc_time = timestamp \/ 1000;\n+  os::localtime_pd(&utc_time, &local_time);\n+  size_t res = strftime(buf, buf_len, TimestampFormat, &local_time);\n+  assert(res > 0, \"VM start time buffer too small.\");\n+}\n+\n+void FilenameUtil::get_hostname_string(char* buf, size_t buf_len) {\n+  if (!os::get_host_name(buf, buf_len)) {\n+    int res = jio_snprintf(buf, buf_len, \"unknown-host\");\n+    assert(res > 0, \"Hostname buffer too small\");\n+  }\n+}\n","filename":"src\/hotspot\/share\/utilities\/filenameUtil.cpp","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_FILENAMEUTIL_HPP\n+#define SHARE_UTILITIES_FILENAMEUTIL_HPP\n+\n+class FilenameUtil : AllStatic {\n+private:\n+  static const char* const PidFilenamePlaceholder;\n+  static const char* const TimestampFilenamePlaceholder;\n+  static const char* const TimestampFormat;\n+  static const char* const HostnameFilenamePlaceholder;\n+\n+  static const size_t StartTimeBufferSize = 20;\n+  static const size_t PidBufferSize = 21;\n+  static const size_t HostnameBufferSize = 512;\n+public:\n+  \/\/ Expand wildcards in filename:\n+  \/\/ %p -> PID\n+  \/\/ %t -> timestamp in YY-MM-DD_HH_MM_SS format\n+  \/\/ %hn -> hostname\n+  \/\/\n+  \/\/ Caller is responsible for free returned string\n+  static char* expand_filename(const char* filename, jlong timestamp, MemTag tag);\n+  static char* expand_filename(const char* filename, MemTag tag) {\n+    return expand_filename(filename, 0 \/* current timestamp *\/, tag);\n+  }\n+\n+private:\n+  static void get_pid_string(char* buf, size_t buf_len);\n+  static void get_timestamp_string(char* buf, size_t buf_len, jlong timestamp);\n+  static void get_hostname_string(char* buf, size_t buf_len);\n+};\n+\n+#endif \/\/ SHARE_UTILITIES_FILENAMEUTIL_HPP\n","filename":"src\/hotspot\/share\/utilities\/filenameUtil.hpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -46,3 +46,0 @@\n-  \/\/ Override LogOutput's vm_start time to get predictable file name\n-  LogFileOutput::set_file_name_parameters(0);\n-\n","filename":"test\/hotspot\/gtest\/logging\/test_logFileOutput.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}