{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.io.InputStream;\n@@ -42,38 +41,0 @@\n-    private static String myName = ClassVersionAfterRedefine.class.getName();\n-\n-    private static byte[] getBytecodes(String name) throws Exception {\n-        InputStream is = ClassVersionAfterRedefine.class.getResourceAsStream(name + \".class\");\n-        byte[] buf = is.readAllBytes();\n-        System.out.println(\"sizeof(\" + name + \".class) == \" + buf.length);\n-        return buf;\n-    }\n-\n-    private static int getStringIndex(String needle, byte[] buf) {\n-        return getStringIndex(needle, buf, 0);\n-    }\n-\n-    private static int getStringIndex(String needle, byte[] buf, int offset) {\n-        outer:\n-        for (int i = offset; i < buf.length - offset - needle.length(); i++) {\n-            for (int j = 0; j < needle.length(); j++) {\n-                if (buf[i + j] != (byte)needle.charAt(j)) continue outer;\n-            }\n-            return i;\n-        }\n-        return 0;\n-    }\n-\n-    private static void replaceString(byte[] buf, String name, int index) {\n-        for (int i = index; i < index + name.length(); i++) {\n-            buf[i] = (byte)name.charAt(i - index);\n-        }\n-    }\n-\n-    private static void replaceAllStrings(byte[] buf, String oldString, String newString) throws Exception {\n-        assertTrue(oldString.length() == newString.length(), \"must have same length\");\n-        int index = -1;\n-        while ((index = getStringIndex(oldString, buf, index + 1)) != 0) {\n-            replaceString(buf, newString, index);\n-        }\n-    }\n-\n@@ -82,3 +43,0 @@\n-        byte[] buf = getBytecodes(\"TestClassOld\");\n-        \/\/ Poor man's renaming of class \"TestClassOld\" to \"TestClassXXX\"\n-        replaceAllStrings(buf, \"TestClassOld\", \"TestClassXXX\");\n@@ -86,0 +44,2 @@\n+\n+        byte[] buf = RedefineClassHelper.replaceClassName(cvar, \"TestClassOld\", \"TestClassXXX\");\n@@ -92,1 +52,0 @@\n-        buf = getBytecodes(\"TestClassNew\");\n@@ -95,2 +54,2 @@\n-        replaceAllStrings(buf, \"TestClassNew\", \"TestClassXXX\");\n-        \/\/ Now redine the original version of \"TestClassXXX\" (i.e. \"TestClassOld\").\n+        buf = RedefineClassHelper.replaceClassName(cvar, \"TestClassNew\", \"TestClassXXX\");\n+        \/\/ Now redefine the original version of \"TestClassXXX\" (i.e. \"TestClassOld\").\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/ClassVersionAfterRedefine.java","additions":4,"deletions":45,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,6 @@\n-import java.lang.instrument.Instrumentation;\n+import java.io.InputStream;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.constant.ClassDesc;\n+\n@@ -26,0 +31,1 @@\n+import java.lang.instrument.Instrumentation;\n@@ -36,0 +42,1 @@\n+\n@@ -64,0 +71,35 @@\n+    private static byte[] getBytecodes(ClassLoader loader, String name) throws Exception {\n+        try (InputStream is = loader.getResourceAsStream(name + \".class\")) {\n+            byte[] buf = is.readAllBytes();\n+            System.out.println(\"sizeof(\" + name + \".class) == \" + buf.length);\n+            return buf;\n+        }\n+    }\n+\n+    \/*\n+     * Copy the class defined by `bytes`, replacing the name of the class with `newClassName`,\n+     * so that both old and new classes can be compiled by jtreg for the test.\n+     *\n+     * @param bytes read from the original class file.\n+     * @param newClassName new class name for the returned class representation\n+     * @return a copy of the class represented by `bytes` but with the name `newClassName`\n+     *\/\n+    public static byte[] replaceClassName(byte[] bytes, String newClassName) throws Exception {\n+        ClassModel classModel = ClassFile.of().parse(bytes);\n+        return ClassFile.of().build(ClassDesc.of(newClassName), classModel::forEach);\n+    }\n+\n+    \/*\n+     * Replace class name in bytecodes to the class we're trying to redefine, so that both\n+     * old and new classes can be compiled with jtreg for the test.\n+     *\n+     * @param loader ClassLoader to find the bytes for the old class.\n+     * @param oldClassName old class name.\n+     * @param newClassName new class name to replace with old class name.\n+     * @return a copy of the class represented by `bytes` but with the name `newClassName`\n+     *\/\n+    public static byte[] replaceClassName(ClassLoader loader, String oldClassName, String newClassName) throws Exception {\n+        byte[] buf = getBytecodes(loader, oldClassName);\n+        return replaceClassName(buf, newClassName);\n+    }\n+\n","filename":"test\/lib\/RedefineClassHelper.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"}]}