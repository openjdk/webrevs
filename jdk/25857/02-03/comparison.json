{"files":[{"patch":"@@ -25,0 +25,5 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.util.Map;\n@@ -39,0 +44,1 @@\n+\n@@ -75,38 +81,0 @@\n-    private static int getStringIndex(String needle, byte[] buf) {\n-        return getStringIndex(needle, buf, 0);\n-    }\n-\n-    private static int getStringIndex(String needle, byte[] buf, int offset) {\n-        outer:\n-        for (int i = offset; i < buf.length - offset - needle.length(); i++) {\n-            for (int j = 0; j < needle.length(); j++) {\n-                if (buf[i + j] != (byte)needle.charAt(j)) continue outer;\n-            }\n-            return i;\n-        }\n-        return 0;\n-    }\n-\n-    private static void replaceString(byte[] buf, String name, int index) {\n-        for (int i = index; i < index + name.length(); i++) {\n-            buf[i] = (byte)name.charAt(i - index);\n-        }\n-    }\n-\n-    \/*\n-     * Replace class name in bytecodes to the class we're trying to redefine, so that both\n-     * old and new classes can be compiled with jtreg for the test.\n-     *\n-     * @param byteBuffer buffer of old class bytes.\n-     * @param oldClassName old class name.\n-     * @param newClassName new class name to replace with old class name.\n-     *\/\n-    public static byte[] replaceAllStrings(byte[] byteBuffer, String oldClassName, String newClassName) throws Exception {\n-        assertTrue(oldClassName.length() == newClassName.length(), \"must have same length\");\n-        int index = -1;\n-        while ((index = getStringIndex(oldClassName, byteBuffer, index + 1)) != 0) {\n-            replaceString(byteBuffer, newClassName, index);\n-        }\n-        return byteBuffer;\n-    }\n-\n@@ -123,1 +91,10 @@\n-        return replaceAllStrings(buf, oldClassName, newClassName);\n+\n+        ClassModel classModel = ClassFile.of().parse(buf);\n+        ClassDesc newClassDesc = ClassDesc.of(newClassName);\n+        byte[] newBytes = ClassFile.of().build(newClassDesc,\n+            classBuilder -> {\n+                for (ClassElement ce : classModel) {\n+                    classBuilder.with(ce);\n+                }\n+            });\n+        return newBytes;\n","filename":"test\/lib\/RedefineClassHelper.java","additions":16,"deletions":39,"binary":false,"changes":55,"status":"modified"}]}