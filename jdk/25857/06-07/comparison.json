{"files":[{"patch":"@@ -46,1 +46,1 @@\n-        byte[] buf = RedefineClassHelper.replaceAllStrings(cvar, \"TestClassOld\", \"TestClassXXX\");\n+        byte[] buf = RedefineClassHelper.replaceClassName(cvar, \"TestClassOld\", \"TestClassXXX\");\n@@ -55,1 +55,1 @@\n-        buf = RedefineClassHelper.replaceAllStrings(cvar, \"TestClassNew\", \"TestClassXXX\");\n+        buf = RedefineClassHelper.replaceClassName(cvar, \"TestClassNew\", \"TestClassXXX\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/ClassVersionAfterRedefine.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,0 +79,13 @@\n+    \/*\n+     * Replace class name in bytecodes to the class we're trying to redefine, so that both\n+     * old and new classes can be compiled with jtreg for the test.\n+     *\n+     * @param bytes in original class file.\n+     * @param oldClassName old class name.\n+     * @param newClassName new class name to replace with old class name.\n+     *\/\n+    public static byte[] replaceClassName(byte[] bytes, String oldClassName, String newClassName) throws Exception {\n+        ClassModel classModel = ClassFile.of().parse(bytes);\n+        return ClassFile.of().build(ClassDesc.of(newClassName), classModel::forEach);\n+    }\n+\n@@ -87,1 +100,1 @@\n-    public static byte[] replaceAllStrings(ClassLoader loader, String oldClassName, String newClassName) throws Exception {\n+    public static byte[] replaceClassName(ClassLoader loader, String oldClassName, String newClassName) throws Exception {\n@@ -89,2 +102,1 @@\n-        ClassModel classModel = ClassFile.of().parse(buf);\n-        return ClassFile.of().build(ClassDesc.of(newClassName), classModel::forEach);\n+        return replaceClassName(buf, oldClassName, newClassName);\n","filename":"test\/lib\/RedefineClassHelper.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}