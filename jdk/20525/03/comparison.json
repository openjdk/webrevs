{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n@@ -456,0 +458,7 @@\n+\n+        long responseTimeoutMillis = 5000;\n+        if (request.timeout().isPresent()) {\n+            final long timeoutMillis = request.timeout().get().toMillis();\n+            responseTimeoutMillis = Math.min(responseTimeoutMillis, timeoutMillis);\n+        }\n+\n@@ -457,0 +466,1 @@\n+                .completeOnTimeout(null, responseTimeoutMillis, TimeUnit.MILLISECONDS)\n@@ -458,24 +468,39 @@\n-            Log.logResponse(r1::toString);\n-            int rcode = r1.statusCode();\n-            if (rcode == 100) {\n-                Log.logTrace(\"Received 100-Continue: sending body\");\n-                if (debug.on()) debug.log(\"Received 100-Continue for %s\", r1);\n-                CompletableFuture<Response> cf =\n-                        exchImpl.sendBodyAsync()\n-                                .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n-                cf = wrapForUpgrade(cf);\n-                cf = wrapForLog(cf);\n-                return cf;\n-            } else {\n-                Log.logTrace(\"Expectation failed: Received {0}\",\n-                        rcode);\n-                if (debug.on()) debug.log(\"Expect-Continue failed (%d) for: %s\", rcode, r1);\n-                if (upgrading && rcode == 101) {\n-                    IOException failed = new IOException(\n-                            \"Unable to handle 101 while waiting for 100\");\n-                    return MinimalFuture.failedFuture(failed);\n-                }\n-                exchImpl.expectContinueFailed(rcode);\n-                return MinimalFuture.completedFuture(r1);\n-            }\n-        });\n+                    \/\/ The response will only be null if there was a timeout\n+                    \/\/ send body regardless\n+                    if (r1 == null) {\n+                        if (debug.on())\n+                            debug.log(\"Setting ExpectTimeoutRaised and sending request body\");\n+                        exchImpl.setExpectTimeoutRaised();\n+                        CompletableFuture<Response> cf =\n+                                exchImpl.sendBodyAsync()\n+                                        .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n+                        cf = wrapForUpgrade(cf);\n+                        cf = wrapForLog(cf);\n+                        return cf;\n+                    }\n+\n+                    Log.logResponse(r1::toString);\n+                    int rcode = r1.statusCode();\n+                    if (rcode == 100) {\n+                        Log.logTrace(\"Received 100-Continue: sending body\");\n+                        if (debug.on())\n+                            debug.log(\"Received 100-Continue for %s\", r1);\n+                        CompletableFuture<Response> cf =\n+                                exchImpl.sendBodyAsync()\n+                                        .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n+                        cf = wrapForUpgrade(cf);\n+                        cf = wrapForLog(cf);\n+                        return cf;\n+                    } else {\n+                        Log.logTrace(\"Expectation failed: Received {0}\", rcode);\n+                        if (debug.on())\n+                            debug.log(\"Expect-Continue failed (%d) for: %s\", rcode, r1);\n+                        if (upgrading && rcode == 101) {\n+                            IOException failed = new IOException(\n+                                    \"Unable to handle 101 while waiting for 100\");\n+                            return MinimalFuture.failedFuture(failed);\n+                        }\n+                        exchImpl.expectContinueFailed(rcode);\n+                        return MinimalFuture.completedFuture(r1);\n+                    }\n+                });\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":50,"deletions":25,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+    private volatile boolean expectTimeoutRaised;\n+\n@@ -74,0 +76,8 @@\n+    final void setExpectTimeoutRaised() {\n+        expectTimeoutRaised = true;\n+    }\n+\n+    final boolean expectTimeoutRaised() {\n+        return expectTimeoutRaised;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ExchangeImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1203,2 +1203,7 @@\n-                \/\/ it will be already completed.\n-                cf = response_cfs.remove(0);\n+                \/\/ it will be already completed, unless the expect continue\n+                \/\/ timeout fired\n+                cf = response_cfs.get(0);\n+                if (cf.isDone()) {\n+                    cf = response_cfs.remove(0);\n+                }\n+\n@@ -1207,1 +1212,2 @@\n-                assert cf.isDone() : \"Removing uncompleted response: could cause code to hang!\";\n+                assert cf.isDone() || request.expectContinue && expectTimeoutRaised()\n+                        : \"Removing uncompleted response: could cause code to hang!\";\n@@ -1242,1 +1248,1 @@\n-                if (!cf.isDone()) {\n+                if (!cf.isDone() && !expectTimeoutRaised()) {\n@@ -1250,0 +1256,8 @@\n+                } else if (expectTimeoutRaised()) {\n+                    Log.logTrace(\"Completing response (streamid={0}): {1}\",\n+                            streamid, cf);\n+                    if (debug.on())\n+                        debug.log(\"Completing responseCF(%d) with response headers\", i);\n+                    \/\/ The Request will be removed in getResponseAsync()\n+                    cf.complete(resp);\n+                    return;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,2 +88,2 @@\n-    URI getUri, postUri, hangUri;\n-    URI h2postUri, h2hangUri, h2endStreamUri, h2warmupURI;\n+    URI getUri, postUri, forcePostUri, hangUri;\n+    URI h2postUri, h2forcePostUri, h2hangUri, h2endStreamUri, h2warmupURI;\n@@ -100,0 +100,1 @@\n+                { forcePostUri, 200, false, HTTP_1_1 },\n@@ -102,0 +103,1 @@\n+                { h2forcePostUri, 200, false, HTTP_2 },\n@@ -130,1 +132,1 @@\n-            verifyRequest(expectedStatusCode, resp, exceptionally, testThrowable);\n+            verifyRequest(uri.getPath(), expectedStatusCode, resp, exceptionally, testThrowable);\n@@ -140,0 +142,1 @@\n+        http1TestServer.addHandler(new ForcePostHandler(), \"\/http1\/forcePost\");\n@@ -142,0 +145,1 @@\n+        forcePostUri = URI.create(\"http:\/\/\" + http1TestServer.serverAuthority() + \"\/http1\/forcePost\");\n@@ -152,0 +156,1 @@\n+        http2TestServer.addHandler(new ForcePostHandler().toHttp2Handler(), \"\/http2\/forcePost\");\n@@ -157,0 +162,1 @@\n+        h2forcePostUri = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/forcePost\");\n@@ -160,3 +166,3 @@\n-        out.printf(\"HTTP\/1.1 server listening at: %s\", http1TestServer.serverAuthority());\n-        out.printf(\"HTTP\/1.1 hang server listening at: %s\", hangUri.getRawAuthority());\n-        out.printf(\"HTTP\/2 clear server listening at: %s\", http2TestServer.serverAuthority());\n+        out.printf(\"HTTP\/1.1 server listening at: %s %n\", http1TestServer.serverAuthority());\n+        out.printf(\"HTTP\/1.1 hang server listening at: %s %n\", hangUri.getRawAuthority());\n+        out.printf(\"HTTP\/2 clear server listening at: %s %n\", http2TestServer.serverAuthority());\n@@ -210,0 +216,12 @@\n+    static class ForcePostHandler implements HttpTestHandler {\n+        @Override\n+        public void handle(HttpTestExchange exchange) throws IOException {\n+            try (InputStream is = exchange.getRequestBody()) {\n+                err.println(\"Server reading body inside the force Post\");\n+                is.readAllBytes();\n+                err.println(\"Server send 200 (length=0) in the force post\");\n+                exchange.sendResponseHeaders(200, 0);\n+            }\n+        }\n+    }\n+\n@@ -340,1 +358,4 @@\n-    private void verifyRequest(int expectedStatusCode, HttpResponse<String> resp, boolean exceptionally, Throwable testThrowable) {\n+    private void verifyRequest(String path, int expectedStatusCode, HttpResponse<String> resp, boolean exceptionally, Throwable testThrowable) {\n+        if(!exceptionally){\n+            err.printf(\"Response code %s received for path %s %n\", resp.statusCode(), path);\n+        }\n@@ -342,1 +363,1 @@\n-            err.println(testThrowable);\n+            err.println(\"Finished exceptionally Test throwable: \" + testThrowable);\n@@ -348,1 +369,1 @@\n-            err.println(\"Request completed successfully\");\n+            err.println(\"Request completed successfully for path \" + path);\n","filename":"test\/jdk\/java\/net\/httpclient\/ExpectContinueTest.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"}]}