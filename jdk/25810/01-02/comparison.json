{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,2 @@\n-        LINT_CATEGORY(\"lint.category\");\n+        LINT_CATEGORY(\"lint.category\"),\n+        DIAGNOSTIC_FLAGS(\"diagnostic.flags\");\n@@ -262,0 +263,6 @@\n+        String diagnosticFlags = lines.stream()\n+                .filter(MessageLine::isDiagnosticFlags)\n+                .map(MessageLine::diagnosticFlags)\n+                .flatMap(Stream::of)\n+                .map(s -> \"\\\"\" + s + \"\\\"\")\n+                .collect(Collectors.joining(\", \"));\n@@ -268,0 +275,1 @@\n+                        !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n@@ -273,0 +281,1 @@\n+                        !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n@@ -290,0 +299,1 @@\n+                            !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n@@ -295,0 +305,1 @@\n+                            !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n","filename":"make\/langtools\/tools\/propertiesparser\/gen\/ClassGenerator.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n- * such as {0}, {1}, etc within the property value.\n+ * such as {0}, {1}, etc within the property value, a lint category,\n+ * and\/or a list of diagnostic flags.\n@@ -52,1 +53,1 @@\n-            if (l != null && l.isLint()) {\n+            while (l != null && (l.isLint() || l.isDiagnosticFlags())) {\n@@ -77,1 +78,1 @@\n-            if (l.prev != null && (l.prev.isInfo() || l.prev.isLint()))\n+            while (l.prev != null && (l.prev.isInfo() || l.prev.isLint() || l.prev.isDiagnosticFlags()))\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/Message.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -42,0 +43,1 @@\n+    static final Pattern diagnosticFlagsPattern = Pattern.compile(\"# flags: ([a-z\\\\-]+(, ([a-z\\\\-]+))*)\");\n@@ -72,0 +74,13 @@\n+    public boolean isDiagnosticFlags() {\n+        return diagnosticFlagsPattern.matcher(text).matches();\n+    }\n+\n+    public String[] diagnosticFlags() {\n+        Matcher matcher = diagnosticFlagsPattern.matcher(text);\n+        if (matcher.matches()) {\n+            return matcher.group(1).split(\", \", -1);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageLine.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+    import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\\n\\\n@@ -37,0 +38,3 @@\n+    import java.util.Locale;\\n\\\n+    import java.util.stream.Stream;\\n\\\n+    \\n\\\n@@ -61,1 +65,1 @@\n-    return new {0}({1}, {2}, {3});\n+    return new {0}({1}, {2}, {3}, {4});\n@@ -64,1 +68,1 @@\n-    return new {0}({1}, {2}, {3}, {4});\n+    return new {0}({1}, {2}, {3}, {4}, {5});\n@@ -70,1 +74,1 @@\n-    public static final {0} {1} = new {0}({2}, {3});\n+    public static final {0} {1} = new {0}({2}, {3}, {4});\n@@ -76,1 +80,1 @@\n-    public static final {0} {1} = new {0}({2}, {3}, {4});\n+    public static final {0} {1} = new {0}({2}, {3}, {4}, {5});\n@@ -87,0 +91,7 @@\n+diagnostic.flags=\\n\\\n+  '  'Stream.of({0})\\n\\\n+  '    '.map(s -> s.replace(''-'', ''_''))\\n\\\n+  '    '.map(s -> s.toUpperCase(Locale.ROOT))\\n\\\n+  '    '.map(DiagnosticFlag::valueOf)\\n\\\n+  '    '.toArray(DiagnosticFlag[]::new)\n+\n","filename":"make\/langtools\/tools\/propertiesparser\/resources\/templates.properties","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -178,2 +177,1 @@\n-                LintWarnings.PreviewFeatureUse(feature.nameFragment()),\n-            DiagnosticFlag.AGGREGATE);\n+                LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n@@ -269,1 +267,1 @@\n-            log.error(DiagnosticFlag.SOURCE_LEVEL, pos, disabledError(feature));\n+            log.error(pos, disabledError(feature));\n@@ -272,1 +270,1 @@\n-                log.error(DiagnosticFlag.SOURCE_LEVEL, pos, feature.error(source.name));\n+                log.error(pos, feature.error(source.name));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -4149,2 +4148,1 @@\n-                    log.error(DiagnosticFlag.SOURCE_LEVEL, tree.pos(),\n-                              Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF.error(this.sourceName));\n+                    log.error(tree.pos(), Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF.error(this.sourceName));\n@@ -4170,2 +4168,1 @@\n-                    log.error(DiagnosticFlag.SOURCE_LEVEL, tree.pos(),\n-                            Feature.REIFIABLE_TYPES_INSTANCEOF.error(this.sourceName));\n+                    log.error(tree.pos(), Feature.REIFIABLE_TYPES_INSTANCEOF.error(this.sourceName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            log.mandatoryWarning(pos, warningKey, DiagnosticFlag.AGGREGATE);\n+            log.mandatoryWarning(pos, warningKey);\n@@ -258,1 +258,1 @@\n-            log.mandatoryWarning(pos, warnKey, DiagnosticFlag.AGGREGATE);\n+            log.mandatoryWarning(pos, warnKey);\n@@ -275,1 +275,1 @@\n-            log.mandatoryWarning(pos, warnKey, DiagnosticFlag.AGGREGATE);\n+            log.mandatoryWarning(pos, warnKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-            lexError(DiagnosticFlag.SOURCE_LEVEL, pos, preview.disabledError(feature));\n+            lexError(pos, preview.disabledError(feature));\n@@ -187,1 +187,1 @@\n-            lexError(DiagnosticFlag.SOURCE_LEVEL, pos, feature.error(source.name));\n+            lexError(pos, feature.error(source.name));\n@@ -202,14 +202,1 @@\n-        tk = TokenKind.ERROR;\n-        errPos = pos;\n-    }\n-\n-    \/**\n-     * Report an error at the given position using the provided arguments.\n-     *\n-     * @param flags  diagnostic flags.\n-     * @param pos    position in input buffer.\n-     * @param key    error key to report.\n-     *\/\n-    protected void lexError(DiagnosticFlag flags, int pos, JCDiagnostic.Error key) {\n-        log.error(flags, pos, key);\n-        if (flags != DiagnosticFlag.SOURCE_LEVEL) {\n+        if (!key.hasFlag(DiagnosticFlag.SOURCE_LEVEL)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5614,1 +5614,1 @@\n-            log.error(DiagnosticFlag.SOURCE_LEVEL, pos, preview.disabledError(feature));\n+            log.error(pos, preview.disabledError(feature));\n@@ -5617,1 +5617,1 @@\n-            log.error(DiagnosticFlag.SOURCE_LEVEL, pos, feature.error(source.name));\n+            log.error(pos, feature.error(source.name));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1926,0 +1926,1 @@\n+# flags: aggregate\n@@ -1931,0 +1932,1 @@\n+# flags: aggregate\n@@ -1936,0 +1938,1 @@\n+# flags: aggregate\n@@ -1946,0 +1949,1 @@\n+# flags: aggregate\n@@ -1957,0 +1961,1 @@\n+# flags: aggregate\n@@ -1962,0 +1967,1 @@\n+# flags: aggregate\n@@ -2360,0 +2366,1 @@\n+# flags: aggregate\n@@ -2365,0 +2372,1 @@\n+# flags: aggregate\n@@ -2374,0 +2382,1 @@\n+# flags: aggregate\n@@ -2381,0 +2390,1 @@\n+# flags: aggregate\n@@ -2386,0 +2396,1 @@\n+# flags: aggregate\n@@ -2784,0 +2795,1 @@\n+# flags: aggregate\n@@ -3180,0 +3192,1 @@\n+# flags: aggregate\n@@ -3186,0 +3199,1 @@\n+# flags: aggregate\n@@ -3249,0 +3263,1 @@\n+# flags: source-level\n@@ -3254,0 +3269,1 @@\n+# flags: source-level\n@@ -3269,0 +3285,1 @@\n+# flags: source-level\n@@ -3274,0 +3291,1 @@\n+# flags: source-level\n@@ -3285,0 +3303,1 @@\n+# flags: aggregate\n@@ -3290,0 +3309,1 @@\n+# flags: aggregate\n@@ -4252,0 +4272,1 @@\n+# flags: aggregate\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.EnumSet;\n@@ -163,1 +162,0 @@\n-     * @param flags      Any additional flags required\n@@ -165,2 +163,2 @@\n-    public void warning(Warning warningKey, DiagnosticFlag... flags) {\n-        warning(null, warningKey, flags);\n+    public void warning(Warning warningKey) {\n+        report(diags.warning(source, null, warningKey));\n@@ -173,1 +171,0 @@\n-     *  @param flags         Any additional flags required\n@@ -175,2 +172,2 @@\n-    public void warning(int pos, Warning warningKey, DiagnosticFlag... flags) {\n-        warning(wrap(pos), warningKey, flags);\n+    public void warning(DiagnosticPosition pos, Warning warningKey) {\n+        report(diags.warning(source, pos, warningKey));\n@@ -183,1 +180,0 @@\n-     *  @param flags         Any additional flags required\n@@ -185,5 +181,2 @@\n-    public void warning(DiagnosticPosition pos, Warning warningKey, DiagnosticFlag... flags) {\n-        EnumSet<DiagnosticFlag> flagSet = EnumSet.noneOf(DiagnosticFlag.class);\n-        for (DiagnosticFlag flag : flags)\n-            flagSet.add(flag);\n-        report(diags.create(flagSet, source, pos, warningKey));\n+    public void warning(int pos, Warning warningKey) {\n+        report(diags.warning(source, wrap(pos), warningKey));\n@@ -192,1 +185,1 @@\n-    \/** Report a mandatory warning.\n+    \/** Report a warning.\n@@ -195,1 +188,0 @@\n-     *  @param flags         Any additional flags required\n@@ -197,5 +189,2 @@\n-    public void mandatoryWarning(DiagnosticPosition pos, Warning warningKey, DiagnosticFlag... flags) {\n-        EnumSet<DiagnosticFlag> flagSet = EnumSet.of(DiagnosticFlag.MANDATORY);\n-        for (DiagnosticFlag flag : flags)\n-            flagSet.add(flag);\n-        report(diags.create(flagSet, source, pos, warningKey));\n+    public void mandatoryWarning(DiagnosticPosition pos, Warning warningKey) {\n+        report(diags.mandatoryWarning(source, pos, warningKey));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractLog.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -118,0 +119,27 @@\n+        \/**\n+         * Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n+         *  @param lc     The lint category for the diagnostic\n+         *  @param source The source of the compilation unit, if any, in which to report the warning.\n+         *  @param pos    The source position at which to report the warning.\n+         *  @param key    The key for the localized warning message.\n+         *  @param args   Fields of the warning message.\n+         *  @see MandatoryWarningHandler\n+         *\/\n+        public JCDiagnostic mandatoryWarning(\n+                LintCategory lc,\n+                DiagnosticSource source, DiagnosticPosition pos, String key, Object... args) {\n+            return mandatoryWarning(source, pos, warningKey(lc, key, args));\n+        }\n+\n+        \/**\n+         * Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n+         *  @param source The source of the compilation unit, if any, in which to report the warning.\n+         *  @param pos    The source position at which to report the warning.\n+         *  @param warningKey    The key for the localized warning message.\n+         *  @see MandatoryWarningHandler\n+         *\/\n+        public JCDiagnostic mandatoryWarning(\n+                DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n+            return create(EnumSet.of(DiagnosticFlag.MANDATORY), source, pos, warningKey);\n+        }\n+\n@@ -213,1 +241,1 @@\n-            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args));\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, null, prefix, key, args));\n@@ -228,1 +256,1 @@\n-            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args), rewriter);\n+            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, null, prefix, key, args), rewriter);\n@@ -255,1 +283,1 @@\n-            return create(flags, source, pos, DiagnosticInfo.of(kind, lc, prefix, key, args));\n+            return create(flags, source, pos, DiagnosticInfo.of(kind, null, lc, prefix, key, args));\n@@ -279,1 +307,2 @@\n-                return DiagnosticInfo.of(diagnosticInfo.type, category, diagnosticInfo.prefix, diagnosticInfo.code,\n+                return DiagnosticInfo.of(diagnosticInfo.type, diagnosticInfo.flags,\n+                        category, diagnosticInfo.prefix, diagnosticInfo.code,\n@@ -290,1 +319,1 @@\n-            return (Error)DiagnosticInfo.of(ERROR, prefix, code, args);\n+            return (Error)DiagnosticInfo.of(ERROR, null, prefix, code, args);\n@@ -297,1 +326,1 @@\n-            return (Warning)DiagnosticInfo.of(WARNING, lintCategory, prefix, code, args);\n+            return (Warning)DiagnosticInfo.of(WARNING, null, lintCategory, prefix, code, args);\n@@ -304,1 +333,1 @@\n-            return (Note)DiagnosticInfo.of(NOTE, prefix, code, args);\n+            return (Note)DiagnosticInfo.of(NOTE, null, prefix, code, args);\n@@ -311,1 +340,1 @@\n-            return (Fragment)DiagnosticInfo.of(FRAGMENT, prefix, code, args);\n+            return (Fragment)DiagnosticInfo.of(FRAGMENT, null, prefix, code, args);\n@@ -327,0 +356,1 @@\n+                                      null,\n@@ -482,0 +512,3 @@\n+        \/** A set of diagnostic flags to be automatically added to newly created JCDiagnostics (if not null). *\/\n+        DiagnosticFlag[] flags;\n+\n@@ -492,1 +525,1 @@\n-        private DiagnosticInfo(DiagnosticType type, String prefix, String code, Object... args) {\n+        private DiagnosticInfo(DiagnosticType type, DiagnosticFlag[] flags, String prefix, String code, Object... args) {\n@@ -494,0 +527,1 @@\n+            this.flags = flags;\n@@ -509,2 +543,2 @@\n-        public static DiagnosticInfo of(DiagnosticType type, String prefix, String code, Object... args) {\n-            return of(type, null, prefix, code, args);\n+        public static DiagnosticInfo of(DiagnosticType type, DiagnosticFlag[] flags, String prefix, String code, Object... args) {\n+            return of(type, flags, null, prefix, code, args);\n@@ -513,1 +547,2 @@\n-        public static DiagnosticInfo of(DiagnosticType type, LintCategory lc, String prefix, String code, Object... args) {\n+        public static DiagnosticInfo of(DiagnosticType type, DiagnosticFlag[] flags,\n+            LintCategory lc, String prefix, String code, Object... args) {\n@@ -516,1 +551,1 @@\n-                    return new Error(prefix, code, args);\n+                    return new Error(flags, prefix, code, args);\n@@ -519,2 +554,2 @@\n-                            new Warning(prefix, code, args) :\n-                            new LintWarning(lc, prefix, code, args);\n+                            new Warning(flags, prefix, code, args) :\n+                            new LintWarning(flags, lc, prefix, code, args);\n@@ -522,1 +557,1 @@\n-                    return new Note(prefix, code, args);\n+                    return new Note(flags, prefix, code, args);\n@@ -524,1 +559,1 @@\n-                    return new Fragment(prefix, code, args);\n+                    return new Fragment(flags, prefix, code, args);\n@@ -548,0 +583,4 @@\n+\n+        public boolean hasFlag(DiagnosticFlag flag) {\n+            return flags != null && Arrays.asList(flags).contains(flag);\n+        }\n@@ -554,2 +593,2 @@\n-        public Error(String prefix, String key, Object... args) {\n-            super(DiagnosticType.ERROR, prefix, key, args);\n+        public Error(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+            super(DiagnosticType.ERROR, flags, prefix, key, args);\n@@ -563,2 +602,2 @@\n-        public Warning(String prefix, String key, Object... args) {\n-            super(DiagnosticType.WARNING, prefix, key, args);\n+        public Warning(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+            super(DiagnosticType.WARNING, flags, prefix, key, args);\n@@ -574,2 +613,2 @@\n-        public LintWarning(LintCategory category, String prefix, String key, Object... args) {\n-            super(prefix, key, args);\n+        public LintWarning(DiagnosticFlag[] flags, LintCategory category, String prefix, String key, Object... args) {\n+            super(flags, prefix, key, args);\n@@ -588,2 +627,2 @@\n-        public Note(String prefix, String key, Object... args) {\n-            super(DiagnosticType.NOTE, prefix, key, args);\n+        public Note(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+            super(DiagnosticType.NOTE, flags, prefix, key, args);\n@@ -597,2 +636,2 @@\n-        public Fragment(String prefix, String key, Object... args) {\n-            super(DiagnosticType.FRAGMENT, prefix, key, args);\n+        public Fragment(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+            super(DiagnosticType.FRAGMENT, flags, prefix, key, args);\n@@ -643,0 +682,6 @@\n+\n+        if (diagnosticInfo.flags != null) {\n+            for (DiagnosticFlag flag : diagnosticInfo.flags) {\n+                this.flags.add(flag);\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":72,"deletions":27,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -738,2 +738,1 @@\n-        case REMOVAL, UNCHECKED -> aggregators.computeIfAbsent(lc, c -> new MandatoryWarningAggregator(this, null, c));\n-        case null, default -> null;\n+        default -> aggregators.computeIfAbsent(lc, c -> new MandatoryWarningAggregator(this, null, c));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-        list.add(log.diags.mandatoryNote(log.getSource(file), new Note(\"compiler\", msg, args)));\n+        list.add(log.diags.mandatoryNote(log.getSource(file), new Note(null, \"compiler\", msg, args)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningAggregator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}