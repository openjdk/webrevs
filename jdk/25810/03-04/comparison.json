{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import java.util.Locale;\n@@ -97,1 +98,2 @@\n-        DIAGNOSTIC_FLAGS(\"diagnostic.flags\");\n+        DIAGNOSTIC_FLAGS_EMPTY(\"diagnostic.flags.empty\"),\n+        DIAGNOSTIC_FLAGS_NON_EMPTY(\"diagnostic.flags.non-empty\");\n@@ -267,1 +269,2 @@\n-                .map(s -> \"\\\"\" + s + \"\\\"\")\n+                .map(s -> s.replace('-', '_'))\n+                .map(s -> s.toUpperCase(Locale.ROOT))\n@@ -275,1 +278,3 @@\n-                        !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n+                        diagnosticFlags.isEmpty() ?\n+                          StubKind.DIAGNOSTIC_FLAGS_EMPTY.format() :\n+                          StubKind.DIAGNOSTIC_FLAGS_NON_EMPTY.format(diagnosticFlags),\n@@ -281,1 +286,3 @@\n-                        !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n+                        diagnosticFlags.isEmpty() ?\n+                          StubKind.DIAGNOSTIC_FLAGS_EMPTY.format() :\n+                          StubKind.DIAGNOSTIC_FLAGS_NON_EMPTY.format(diagnosticFlags),\n@@ -299,1 +306,3 @@\n-                            !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n+                            diagnosticFlags.isEmpty() ?\n+                              StubKind.DIAGNOSTIC_FLAGS_EMPTY.format() :\n+                              StubKind.DIAGNOSTIC_FLAGS_NON_EMPTY.format(diagnosticFlags),\n@@ -305,1 +314,3 @@\n-                            !diagnosticFlags.isEmpty() ? StubKind.DIAGNOSTIC_FLAGS.format(diagnosticFlags) : \"null\",\n+                            diagnosticFlags.isEmpty() ?\n+                              StubKind.DIAGNOSTIC_FLAGS_EMPTY.format() :\n+                              StubKind.DIAGNOSTIC_FLAGS_NON_EMPTY.format(diagnosticFlags),\n","filename":"make\/langtools\/tools\/propertiesparser\/gen\/ClassGenerator.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -38,2 +38,3 @@\n-    import java.util.Locale;\\n\\\n-    import java.util.stream.Stream;\\n\\\n+    import java.util.EnumSet;\\n\\\n+    \\n\\\n+    import static com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag.*;\\n\\\n@@ -91,6 +92,5 @@\n-diagnostic.flags=\\n\\\n-  '  'Stream.of({0})\\n\\\n-  '    '.map(s -> s.replace(''-'', ''_''))\\n\\\n-  '    '.map(s -> s.toUpperCase(Locale.ROOT))\\n\\\n-  '    '.map(DiagnosticFlag::valueOf)\\n\\\n-  '    '.toArray(DiagnosticFlag[]::new)\n+diagnostic.flags.empty=\\\n+  EnumSet.noneOf(DiagnosticFlag.class)\n+\n+diagnostic.flags.non-empty=\\\n+  EnumSet.of({0})\n","filename":"make\/langtools\/tools\/propertiesparser\/resources\/templates.properties","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -512,2 +512,2 @@\n-        \/** A set of diagnostic flags to be automatically added to newly created JCDiagnostics (if not null). *\/\n-        DiagnosticFlag[] flags;\n+        \/** A set of diagnostic flags to be automatically added to newly created JCDiagnostics. *\/\n+        Set<DiagnosticFlag> flags;\n@@ -525,1 +525,1 @@\n-        private DiagnosticInfo(DiagnosticType type, DiagnosticFlag[] flags, String prefix, String code, Object... args) {\n+        private DiagnosticInfo(DiagnosticType type, Set<DiagnosticFlag> flags, String prefix, String code, Object... args) {\n@@ -527,1 +527,1 @@\n-            this.flags = flags;\n+            this.flags = flags != null ? flags : EnumSet.noneOf(DiagnosticFlag.class);\n@@ -543,1 +543,2 @@\n-        public static DiagnosticInfo of(DiagnosticType type, DiagnosticFlag[] flags, String prefix, String code, Object... args) {\n+        public static DiagnosticInfo of(DiagnosticType type, Set<DiagnosticFlag> flags,\n+            String prefix, String code, Object... args) {\n@@ -547,1 +548,1 @@\n-        public static DiagnosticInfo of(DiagnosticType type, DiagnosticFlag[] flags,\n+        public static DiagnosticInfo of(DiagnosticType type, Set<DiagnosticFlag> flags,\n@@ -585,1 +586,1 @@\n-            return flags != null && Arrays.asList(flags).contains(flag);\n+            return flags.contains(flag);\n@@ -593,1 +594,1 @@\n-        public Error(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+        public Error(Set<DiagnosticFlag> flags, String prefix, String key, Object... args) {\n@@ -602,1 +603,1 @@\n-        public Warning(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+        public Warning(Set<DiagnosticFlag> flags, String prefix, String key, Object... args) {\n@@ -613,1 +614,1 @@\n-        public LintWarning(DiagnosticFlag[] flags, LintCategory category, String prefix, String key, Object... args) {\n+        public LintWarning(Set<DiagnosticFlag> flags, LintCategory category, String prefix, String key, Object... args) {\n@@ -627,1 +628,1 @@\n-        public Note(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+        public Note(Set<DiagnosticFlag> flags, String prefix, String key, Object... args) {\n@@ -636,1 +637,1 @@\n-        public Fragment(DiagnosticFlag[] flags, String prefix, String key, Object... args) {\n+        public Fragment(Set<DiagnosticFlag> flags, String prefix, String key, Object... args) {\n@@ -683,5 +684,1 @@\n-        if (diagnosticInfo.flags != null) {\n-            for (DiagnosticFlag flag : diagnosticInfo.flags) {\n-                this.flags.add(flag);\n-            }\n-        }\n+        this.flags.addAll(diagnosticInfo.flags);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-    private final EnumMap<LintCategory, MandatoryWarningAggregator> aggregators = new EnumMap<>(LintCategory.class);\n+    private final EnumMap<LintCategory, WarningAggregator> aggregators = new EnumMap<>(LintCategory.class);\n@@ -728,1 +728,1 @@\n-          .map(MandatoryWarningAggregator::aggregationNotes)\n+          .map(WarningAggregator::aggregationNotes)\n@@ -734,1 +734,1 @@\n-    private MandatoryWarningAggregator aggregatorFor(LintCategory lc) {\n+    private WarningAggregator aggregatorFor(LintCategory lc) {\n@@ -736,3 +736,3 @@\n-        case PREVIEW -> aggregators.computeIfAbsent(lc, c -> new MandatoryWarningAggregator(this, Source.instance(context), c));\n-        case DEPRECATION -> aggregators.computeIfAbsent(lc, c -> new MandatoryWarningAggregator(this, null, c, \"deprecated\"));\n-        default -> aggregators.computeIfAbsent(lc, c -> new MandatoryWarningAggregator(this, null, c));\n+        case PREVIEW -> aggregators.computeIfAbsent(lc, c -> new WarningAggregator(this, Source.instance(context), c));\n+        case DEPRECATION -> aggregators.computeIfAbsent(lc, c -> new WarningAggregator(this, null, c, \"deprecated\"));\n+        default -> aggregators.computeIfAbsent(lc, c -> new WarningAggregator(this, null, c));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * An aggregator for mandatory warnings, setting up a deferred diagnostic\n+ * An aggregator for warnings, setting up a deferred diagnostic\n@@ -51,7 +51,0 @@\n- * Note that the SuppressWarnings annotation can be used to suppress warnings\n- * about conditions that would otherwise merit a warning. Such processing\n- * is done when the condition is detected, and in those cases, no call is\n- * made on any API to generate a warning at all. In consequence, this handler only\n- * Returns to handle those warnings that JLS says must be generated.\n- *\n- * <p>\n@@ -65,1 +58,1 @@\n-class MandatoryWarningAggregator {\n+class WarningAggregator {\n@@ -69,2 +62,1 @@\n-     * if a mandatory warning is suppressed because too many warnings have\n-     * already been output.\n+     * if a warning is suppressed because too many warnings have already been output.\n@@ -112,1 +104,1 @@\n-     * Create an aggregator for mandatory warnings.\n+     * Create an aggregator for warnings.\n@@ -118,1 +110,1 @@\n-    public MandatoryWarningAggregator(Log log, Source source, LintCategory lc) {\n+    public WarningAggregator(Log log, Source source, LintCategory lc) {\n@@ -123,1 +115,1 @@\n-     * Create an aggregator for mandatory warnings.\n+     * Create an aggregator for warnings.\n@@ -131,1 +123,1 @@\n-    public MandatoryWarningAggregator(Log log, Source source, LintCategory lc, String prefix) {\n+    public WarningAggregator(Log log, Source source, LintCategory lc, String prefix) {\n@@ -139,1 +131,1 @@\n-     * Aggregate a mandatory warning and determine whether to emit it.\n+     * Aggregate a warning and determine whether to emit it.\n@@ -141,1 +133,1 @@\n-     * @param diagnostic the mandatory warning\n+     * @param diagnostic the warning\n@@ -146,1 +138,0 @@\n-        Assert.check(diagnostic.isMandatory());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/WarningAggregator.java","additions":9,"deletions":18,"binary":false,"changes":27,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/MandatoryWarningAggregator.java","status":"renamed"}]}