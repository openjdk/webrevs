{"files":[{"patch":"@@ -231,3 +231,0 @@\n-    private static final Object processPendingLock = new Object();\n-    private static boolean processPendingActive = false;\n-\n@@ -237,2 +234,0 @@\n-        \/\/ These are separate operations to avoid a race with other threads\n-        \/\/ that are calling waitForReferenceProcessing().\n@@ -240,5 +235,1 @@\n-        Reference<?> pendingList;\n-        synchronized (processPendingLock) {\n-            pendingList = getAndClearReferencePendingList();\n-            processPendingActive = true;\n-        }\n+        Reference<?> pendingList = getAndClearReferencePendingList();\n@@ -251,25 +242,0 @@\n-        \/\/ Notify any waiters of completion of current round.\n-        synchronized (processPendingLock) {\n-            processPendingActive = false;\n-            processPendingLock.notifyAll();\n-        }\n-    }\n-\n-    \/\/ Wait for progress in reference processing.\n-    \/\/\n-    \/\/ Returns true after waiting (for notification from the reference\n-    \/\/ processing thread) if either (1) the VM has any pending\n-    \/\/ references, or (2) the reference processing thread is\n-    \/\/ processing references. Otherwise, returns false immediately.\n-    private static boolean waitForReferenceProcessing()\n-        throws InterruptedException\n-    {\n-        synchronized (processPendingLock) {\n-            if (processPendingActive || hasReferencePendingList()) {\n-                \/\/ Wait for progress, not necessarily completion.\n-                processPendingLock.wait();\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        }\n@@ -304,7 +270,0 @@\n-            @Override\n-            public boolean waitForReferenceProcessing()\n-                throws InterruptedException\n-            {\n-                return Reference.waitForReferenceProcessing();\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":42,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-\n@@ -116,1 +115,1 @@\n-        \/\/ optimist!\n+        \/\/ Optimistic path: enough memory to satisfy allocation.\n@@ -121,1 +120,15 @@\n-        final JavaLangRefAccess jlra = SharedSecrets.getJavaLangRefAccess();\n+        \/\/ Short on memory, with potentially many threads competing for it.\n+        \/\/ To alleviate progress races, acquire the lock and go slow.\n+        synchronized (Bits.class) {\n+            reserveMemorySlow(size, cap);\n+        }\n+    }\n+\n+    static void reserveMemorySlow(long size, long cap) {\n+        \/\/ Slow path under the lock. This code would try to trigger cleanups and\n+        \/\/ sense if cleaning was performed. Since the failure mode is OOME,\n+        \/\/ there is no need to rush.\n+        \/\/\n+        \/\/ If this code is modified, make sure a stress test like DirectBufferAllocTest\n+        \/\/ performs well.\n+\n@@ -124,0 +137,1 @@\n+            BufferCleaner.Canary canary = null;\n@@ -125,29 +139,0 @@\n-            \/\/ Retry allocation until success or there are no more\n-            \/\/ references (including Cleaners that might free direct\n-            \/\/ buffer memory) to process and allocation still fails.\n-            boolean refprocActive;\n-            do {\n-                try {\n-                    refprocActive = jlra.waitForReferenceProcessing();\n-                } catch (InterruptedException e) {\n-                    \/\/ Defer interrupts and keep trying.\n-                    interrupted = true;\n-                    refprocActive = true;\n-                }\n-                if (tryReserveMemory(size, cap)) {\n-                    return;\n-                }\n-            } while (refprocActive);\n-\n-            \/\/ trigger VM's Reference processing\n-            System.gc();\n-\n-            \/\/ A retry loop with exponential back-off delays.\n-            \/\/ Sometimes it would suffice to give up once reference\n-            \/\/ processing is complete.  But if there are many threads\n-            \/\/ competing for memory, this gives more opportunities for\n-            \/\/ any given thread to make progress.  In particular, this\n-            \/\/ seems to be enough for a stress test like\n-            \/\/ DirectBufferAllocTest to (usually) succeed, while\n-            \/\/ without it that test likely fails.  Since failure here\n-            \/\/ ends in OOME, there's no need to hurry.\n@@ -155,2 +140,2 @@\n-            int sleeps = 0;\n-            while (true) {\n+            for (int sleeps = 0; sleeps < MAX_SLEEPS; sleeps++) {\n+                \/\/ See if we can satisfy the allocation now.\n@@ -160,2 +145,7 @@\n-                if (sleeps >= MAX_SLEEPS) {\n-                    break;\n+\n+                if (canary == null || canary.isDead()) {\n+                    \/\/ If canary is not yet initialized, we have not triggered a cleanup.\n+                    \/\/ If canary is dead, there was progress, and it was not enough.\n+                    \/\/ Trigger GC to perform reference processing and then cleaning.\n+                    canary = BufferCleaner.newCanary();\n+                    System.gc();\n@@ -163,0 +153,2 @@\n+\n+                \/\/ Exponentially back off waiting for Cleaner to catch up.\n@@ -164,5 +156,2 @@\n-                    if (!jlra.waitForReferenceProcessing()) {\n-                        Thread.sleep(sleepTime);\n-                        sleepTime <<= 1;\n-                        sleeps++;\n-                    }\n+                    Thread.sleep(sleepTime);\n+                    sleepTime *= 2;\n@@ -171,0 +160,1 @@\n+                    break;\n@@ -174,1 +164,1 @@\n-            \/\/ no luck\n+            \/\/ No luck:\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":32,"deletions":42,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.nio;\n+\n+import java.lang.ref.Cleaner;\n+import java.lang.ref.Cleaner.Cleanable;\n+\n+class BufferCleaner {\n+    private static final Cleaner CLEANER = Cleaner.create();\n+\n+    static Cleanable register(Object buffer, Runnable action) {\n+        if (action != null) {\n+            return CLEANER.register(buffer, action);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    static Canary newCanary() {\n+        Canary canary = new Canary();\n+        register(new Object(), canary);\n+        return canary;\n+    }\n+\n+    public static class Canary implements Runnable {\n+        volatile boolean dead;\n+\n+        @Override\n+        public void run() {\n+            dead = true;\n+        }\n+\n+        public boolean isDead() {\n+            return dead;\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/nio\/BufferCleaner.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.ref.Cleaner;\n@@ -95,14 +94,0 @@\n-    \/\/ Singleton Cleaner for all relevant Buffer instances.\n-    \/\/ Lazily initialized to avoid bootstrapping circularities involving <clinit>.\n-    private static class CleanerHolder {\n-        private static final Cleaner CLEANER = Cleaner.create();\n-\n-        static Cleanable register(Object buffer, Runnable action) {\n-            if (action != null) {\n-                return CLEANER.register(buffer, action);\n-            } else {\n-                return null;\n-            }\n-        }\n-    }\n-\n@@ -150,1 +135,1 @@\n-            cleanable = CleanerHolder.register(this, new Deallocator(base, size, cap));\n+            cleanable = BufferCleaner.register(this, new Deallocator(base, size, cap));\n@@ -225,1 +210,1 @@\n-        cleanable = CleanerHolder.register(this, unmapper);\n+        cleanable = BufferCleaner.register(this, unmapper);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,10 +37,0 @@\n-    \/**\n-     * Wait for progress in {@link java.lang.ref.Reference}\n-     * processing.  If there aren't any pending {@link\n-     * java.lang.ref.Reference}s, return immediately.\n-     *\n-     * @return {@code true} if there were any pending\n-     * {@link java.lang.ref.Reference}s, {@code false} otherwise.\n-     *\/\n-    boolean waitForReferenceProcessing() throws InterruptedException;\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangRefAccess.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}