{"files":[{"patch":"@@ -100,0 +100,2 @@\n+    private static final Object RESERVE_SLOW_LOCK = new Object();\n+\n@@ -122,1 +124,1 @@\n-        synchronized (Bits.class) {\n+        synchronized (RESERVE_SLOW_LOCK) {\n@@ -135,0 +137,5 @@\n+        \/\/ Semi-optimistic attempt after acquiring the slow-path lock.\n+        if (tryReserveMemory(size, cap)) {\n+           return;\n+        }\n+\n@@ -141,5 +148,0 @@\n-                \/\/ See if we can satisfy the allocation now.\n-                if (tryReserveMemory(size, cap)) {\n-                    return;\n-                }\n-\n@@ -161,0 +163,5 @@\n+\n+                \/\/ See if we can satisfy the allocation now.\n+                if (tryReserveMemory(size, cap)) {\n+                    return;\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- *          java.base\/java.lang.ref:open\n@@ -136,1 +135,0 @@\n-     *   java.lang.ref.Reference.waitForReferenceProcessing\n@@ -140,1 +138,0 @@\n-        private static final Method waitForReferenceProcessingMethod;\n@@ -152,4 +149,0 @@\n-                waitForReferenceProcessingMethod =\n-                    Reference.class.getDeclaredMethod(\"waitForReferenceProcessing\");\n-                waitForReferenceProcessingMethod.setAccessible(true);\n-\n@@ -183,19 +176,0 @@\n-        static boolean Reference_waitForReferenceProcessing() {\n-            try {\n-                return (boolean) waitForReferenceProcessingMethod.invoke(null);\n-            } catch (InvocationTargetException e) {\n-                Throwable te = e.getTargetException();\n-                if (te instanceof InterruptedException) {\n-                    return true;\n-                } else if (te instanceof RuntimeException) {\n-                    throw (RuntimeException) te;\n-                } else if (te instanceof Error) {\n-                    throw (Error) te;\n-                } else {\n-                    throw new UndeclaredThrowableException(te);\n-                }\n-            } catch (IllegalAccessException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/provider\/FileInputStreamPool\/FileInputStreamPoolTest.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}