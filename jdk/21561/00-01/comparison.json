{"files":[{"patch":"@@ -45,0 +45,6 @@\n+\/\/ An Assertion Predicate has always a true projection on the success path.\n+bool may_be_assertion_predicate_if(const Node* node) {\n+  assert(node != nullptr, \"should not be null\");\n+  return node->is_IfTrue() && RegularPredicate::may_be_predicate_if(node->as_IfProj());\n+}\n+\n@@ -46,1 +52,1 @@\n-  if (!AssertionPredicate::may_be_predicate_if(maybe_success_proj)) {\n+  if (!may_be_assertion_predicate_if(maybe_success_proj)) {\n@@ -134,5 +140,0 @@\n-\/\/ An Assertion Predicate has always a true projection on the success path.\n-bool AssertionPredicate::may_be_predicate_if(const Node* node) {\n-  return node->is_IfTrue() && RegularPredicate::may_be_predicate_if(node->as_IfProj());\n-}\n-\n@@ -142,1 +143,1 @@\n-  if (!AssertionPredicate::may_be_predicate_if(node)) {\n+  if (!may_be_assertion_predicate_if(node)) {\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -372,6 +372,0 @@\n-\/\/ Utility class to represent an Assertion Predicate.\n-class AssertionPredicate : public StackObj {\n- public:\n-  static bool may_be_predicate_if(const Node* node);\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}