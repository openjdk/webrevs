{"files":[{"patch":"@@ -2829,0 +2829,4 @@\n+  if (ctrl == nullptr) {\n+    \/\/ Dying loop.\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+  assert(start_proj != nullptr, \"should not be null\");\n@@ -44,0 +45,6 @@\n+\/\/ An Assertion Predicate has always a true projection on the success path.\n+bool may_be_assertion_predicate_if(const Node* node) {\n+  assert(node != nullptr, \"should not be null\");\n+  return node->is_IfTrue() && RegularPredicate::may_be_predicate_if(node->as_IfProj());\n+}\n+\n@@ -45,1 +52,1 @@\n-  if (maybe_success_proj == nullptr || !maybe_success_proj->is_IfProj() || !maybe_success_proj->in(0)->is_If()) {\n+  if (!may_be_assertion_predicate_if(maybe_success_proj)) {\n@@ -136,1 +143,1 @@\n-  if (!RegularPredicate::may_be_predicate_if(node)) {\n+  if (!may_be_assertion_predicate_if(node)) {\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -690,4 +690,9 @@\n-    PredicateBlockIterator profiled_loop_predicate_iterator(current, Deoptimization::Reason_profile_predicate);\n-    current = profiled_loop_predicate_iterator.for_each(predicate_visitor);\n-    PredicateBlockIterator loop_predicate_iterator(current, Deoptimization::Reason_predicate);\n-    return loop_predicate_iterator.for_each(predicate_visitor);\n+    if (UseLoopPredicate) {\n+      if (UseProfiledLoopPredicate) {\n+        PredicateBlockIterator profiled_loop_predicate_iterator(current, Deoptimization::Reason_profile_predicate);\n+        current = profiled_loop_predicate_iterator.for_each(predicate_visitor);\n+      }\n+      PredicateBlockIterator loop_predicate_iterator(current, Deoptimization::Reason_predicate);\n+      current = loop_predicate_iterator.for_each(predicate_visitor);\n+    }\n+    return current;\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8342287\n+ * @summary Test that a fail path projection of a Template Assertion Predicate is not treated as success path projection\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileCommand=compileonly,compiler.predicates.TestTemplateAssertionPredicateWithTwoUCTs::test\n+ *                   compiler.predicates.TestTemplateAssertionPredicateWithTwoUCTs\n+ *\/\n+\n+package compiler.predicates;\n+\n+public class TestTemplateAssertionPredicateWithTwoUCTs {\n+    static int iFld;\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 1000; i++) {\n+            test();\n+        }\n+    }\n+\n+    static void test() {\n+        int lArr[][] = new int[100][1];\n+        for (int i14 = 5; i14 < 273; ++i14) {\n+            int i16 = 1;\n+            while (++i16 < 94) {\n+                lArr[i16][0] += 1;\n+                switch (i14) {\n+                    case 11:\n+                    case 2:\n+                    case 13:\n+                        iFld = 34;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"src\/hotspot\/test\/hotspot\/jtreg\/compiler\/predicates\/TestTemplateAssertionPredicateWithTwoUCTs.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}