{"files":[{"patch":"@@ -352,0 +352,1 @@\n+     * @throws NullPointerException if {@code infinity} is {@code null}\n@@ -354,0 +355,1 @@\n+        this.infinity = Objects.requireNonNull(infinity);\n@@ -355,1 +357,0 @@\n-        this.infinity = infinity;\n@@ -373,0 +374,1 @@\n+     * @throws NullPointerException if {@code NaN} is {@code null}\n@@ -375,0 +377,1 @@\n+        this.NaN = Objects.requireNonNull(NaN);\n@@ -376,1 +379,0 @@\n-        this.NaN = NaN;\n@@ -418,1 +420,3 @@\n-     * DecimalFormatSymbols in their locale.\n+     * DecimalFormatSymbols in their locale. Unlike {@link\n+     * #setInternationalCurrencySymbol(String)}, this method does not update\n+     * the other Currency related fields as well.\n@@ -421,0 +425,1 @@\n+     * @throws NullPointerException if {@code currency} is {@code null}\n@@ -425,0 +430,1 @@\n+        Objects.requireNonNull(currency);\n@@ -451,2 +457,1 @@\n-     * then the currency attribute is set to null and the currency symbol\n-     * attribute is not modified.\n+     * then the currency attribute and the currency symbol attribute are not modified.\n@@ -455,0 +460,1 @@\n+     * @throws NullPointerException if {@code currencyCode} is {@code null}\n@@ -459,2 +465,4 @@\n-    public void setInternationalCurrencySymbol(String currencyCode)\n-    {\n+    public void setInternationalCurrencySymbol(String currencyCode) {\n+        Objects.requireNonNull(currencyCode);\n+        \/\/ init over setting currencyInit flag as true so that currency has\n+        \/\/ fallback if code is not valid\n@@ -464,8 +472,4 @@\n-        currency = null;\n-        if (currencyCode != null) {\n-            try {\n-                currency = Currency.getInstance(currencyCode);\n-                currencySymbol = currency.getSymbol();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+        try {\n+            currency = Currency.getInstance(currencyCode);\n+            currencySymbol = currency.getSymbol(locale);\n+        } catch (IllegalArgumentException _) {} \/\/ Simply ignore if not valid\n@@ -500,3 +504,1 @@\n-        if (currency == null) {\n-            throw new NullPointerException();\n-        }\n+        Objects.requireNonNull(currency);\n@@ -558,3 +560,1 @@\n-        if (exp == null) {\n-            throw new NullPointerException();\n-        }\n+        Objects.requireNonNull(exp);\n@@ -770,1 +770,2 @@\n-            getCurrencySymbol().equals(other.getCurrencySymbol()) && \/\/ possible currency init occurs here\n+            \/\/ Currency fields are lazy. Init via get call to ensure non-null\n+            getCurrencySymbol().equals(other.getCurrencySymbol()) &&\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341445\n+ * @summary DFS setters should throw NPE. This ensures that NPE is not thrown\n+ *          by equals().\n+ * @run junit SettersShouldThrowNPETest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.text.DecimalFormatSymbols;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class SettersShouldThrowNPETest {\n+\n+    \/\/ The public setter methods that should throw NPE\n+    private static final List<Method> NPE_SETTERS =\n+            Arrays.stream(DecimalFormatSymbols.class.getDeclaredMethods())\n+            .filter(m -> Modifier.isPublic(m.getModifiers()))\n+            .filter(m -> m.getName().startsWith(\"set\"))\n+            .filter(m -> Stream.of(m.getParameterTypes()).noneMatch(Class::isPrimitive))\n+            .toList();\n+\n+    \/\/ Non-primitive setters should throw NPE\n+    @ParameterizedTest\n+    @MethodSource(\"setters\")\n+    public void settersThrowNPETest(Method m) {\n+        var dfs = new DecimalFormatSymbols();\n+        InvocationTargetException e =\n+                assertThrows(InvocationTargetException.class, () -> m.invoke(dfs, (Object) null));\n+        if (!(e.getCause() instanceof NullPointerException)) {\n+            throw new RuntimeException(e.getCause() + \" was thrown instead of NPE by : \" + m);\n+        }\n+    }\n+\n+    \/\/ Currency fields are lazy and can be null\n+    \/\/ Ensure when exposed to users, they are never null\n+    @ParameterizedTest\n+    @MethodSource(\"locales\")\n+    public void lazyCurrencyFieldsTest(Locale locale) {\n+        var dfs = new DecimalFormatSymbols(locale);\n+        assertDoesNotThrow(() -> dfs.equals(new DecimalFormatSymbols()));\n+        assertNotNull(dfs.getCurrency());\n+        assertNotNull(dfs.getInternationalCurrencySymbol());\n+        assertNotNull(dfs.getCurrencySymbol());\n+    }\n+\n+    private static List<Method> setters() {\n+        return NPE_SETTERS;\n+    }\n+\n+    private static List<Locale> locales() {\n+        return List.of(Locale.ROOT, Locale.US, Locale.forLanguageTag(\"XXX\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/SettersShouldThrowNPETest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}