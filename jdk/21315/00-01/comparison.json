{"files":[{"patch":"@@ -768,0 +768,1 @@\n+            \/\/ Nullable instance variables\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- *          NPE when compared against each other.\n+ *          NPE when compared against each other. Also provides a white list\n+ *          that forces new setter methods to be explicitly added if throwing NPE.\n@@ -32,0 +33,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -41,0 +43,1 @@\n+import java.util.List;\n@@ -49,0 +52,45 @@\n+    \/\/ This is a white list of DFS setter methods that are allowed to throw NPE\n+    private static final List<Method> NPE_SETTERS;\n+    private static final List<Method> NON_NPE_SETTERS;\n+\n+    static {\n+        try {\n+            NPE_SETTERS = List.of(\n+                    \/\/ New NPE throwing setters MUST be added here\n+                    DecimalFormatSymbols.class.getMethod(\"setCurrency\", Currency.class),\n+                    DecimalFormatSymbols.class.getMethod(\"setExponentSeparator\", String.class)\n+            );\n+            NON_NPE_SETTERS = Arrays.stream(DecimalFormatSymbols.class.getDeclaredMethods())\n+                    .filter(m -> Modifier.isPublic(m.getModifiers()))\n+                    .filter(m -> m.getName().startsWith(\"set\"))\n+                    .filter(m -> Stream.of(m.getParameterTypes()).noneMatch(Class::isPrimitive))\n+                    .filter(m -> NPE_SETTERS.stream().noneMatch(x -> x.equals(m))).toList();\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(\"Unexpected test init failure\");\n+        }\n+    }\n+\n+    \/\/ If a future (NPE) setter method were to be added without being whitelisted,\n+    \/\/ this test would fail. This ensures that the implications of adding a new\n+    \/\/ setter method are fully understood in relation to the equals method\n+    @Test\n+    public void setterThrowsNPETest() {\n+        var dfs = new DecimalFormatSymbols();\n+        nonNPEThrowingSetters().forEach(m -> {\n+            try {\n+                m.invoke(dfs, (Object) null);\n+            } catch (InvocationTargetException e) {\n+                if (e.getCause() instanceof NullPointerException) {\n+                    throw new RuntimeException(String.format(\n+                            \"DFS method: %s threw NPE, but was not added to whitelist\", m));\n+                } else {\n+                    throw new RuntimeException(String.format(\n+                            \"Unexpected exception: %s thrown for method: %s\", e.getCause(), m));\n+                }\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(String.format(\n+                        \"Test init failed, could not access method: %s\", m));\n+            }\n+        });\n+    }\n+\n@@ -52,1 +100,1 @@\n-    @MethodSource(\"setters\")\n+    @MethodSource(\"nonNPEThrowingSetters\")\n@@ -65,1 +113,1 @@\n-    @MethodSource(\"setters\")\n+    @MethodSource(\"nonNPEThrowingSetters\")\n@@ -86,22 +134,2 @@\n-    private static Stream<Method> setters() {\n-        var dfs = new DecimalFormatSymbols();\n-        return Arrays.stream(DecimalFormatSymbols.class.getDeclaredMethods())\n-                .filter(m -> Modifier.isPublic(m.getModifiers()))\n-                .filter(m -> m.getName().startsWith(\"set\"))\n-                .filter(m -> Stream.of(m.getParameterTypes()).noneMatch(Class::isPrimitive))\n-                .filter(m -> {\n-                    try {\n-                        m.invoke(dfs, (Object) null);\n-                    } catch (InvocationTargetException e) {\n-                        if (e.getCause() instanceof NullPointerException) {\n-                            return false;\n-                        } else {\n-                            throw new RuntimeException(String.format(\n-                                    \"Test init failed, unexpected exception: %s thrown for method: %s\", e.getCause(), m));\n-                        }\n-                    } catch (IllegalAccessException e) {\n-                        throw new RuntimeException(String.format(\n-                                \"Test init failed, could not access method: %s\", m));\n-                    }\n-                    return true;\n-                });\n+    private static List<Method> nonNPEThrowingSetters() {\n+        return NON_NPE_SETTERS;\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/DFSymbolsNullEqualityTest.java","additions":53,"deletions":25,"binary":false,"changes":78,"status":"modified"}]}