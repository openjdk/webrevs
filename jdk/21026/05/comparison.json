{"files":[{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * summary:\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4038580\n+ * @key headful\n+ * @requires os.family != \"windows\"\n+ * @summary Caret position not accurate in presence of selected areas\n+ * @run main CaretPositionTest\n+ *\/\n+\n+public class CaretPositionTest extends Frame {\n+    private TextField text_field;\n+    private Button caretpos_button;\n+    private Point onScreen;\n+    private Dimension size;\n+    String text = \"12 45 789\";\n+    private static volatile int position = -1;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        CaretPositionTest test = new CaretPositionTest();\n+        EventQueue.invokeAndWait(test::setupGUI);\n+        try {\n+            test.test();\n+            if (position != 9) {\n+                throw new RuntimeException(\"Caret position should be at the end of the string\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public void setupGUI() {\n+        setLocationRelativeTo(null);\n+        setTitle(\"CaretPositionTest\");\n+        setLayout(new FlowLayout());\n+        text_field = new TextField(text, 9);\n+        caretpos_button=new Button(\"CaretPosition\");\n+        add(text_field);\n+        add(caretpos_button);\n+        pack();\n+        setVisible(true);\n+        toFront();\n+    }\n+\n+    public void test() throws AWTException, InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+                    onScreen = text_field.getLocationOnScreen();\n+                    size = text_field.getSize();\n+                });\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.delay(1000);\n+        int y = onScreen.y + (size.height \/ 2);\n+        robot.mouseMove(onScreen.x + (size.width \/ 2), y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(onScreen.x + 3, y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        for (int x = onScreen.x + 5; x < onScreen.x + size.width; x += 2) {\n+            robot.mouseMove(x, y);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        EventQueue.invokeAndWait(() -> {\n+            position = text_field.getCaretPosition();\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/CaretPositionTest\/CaretPositionTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * summary:\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 6198290 6277332\n+ * @summary TextField painting is broken when placed on a Scrollpane, XToolkit\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetBoundsTest\n+ *\/\n+\n+public class SetBoundsTest extends Frame {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1) Make active a frame with a scrollpane and a few components.\n+            2) Please, focus attention on the text components\n+                 placed on the upper half of the frame\n+            3) Make sure, that the scrollbar of the frame\n+                 have the same position during the test.\n+            4) Bring focus to TextField, try deleting the text.\n+                 If the text never gets erased, the test failed\n+            5) Bring focus to TextArea, try deleting the text.\n+                 If the text never gets erased, the test failed\n+            6) Please, focus attention on the text components\n+                 placed on the lower half of the frame\n+            7) Try input something into TextField.\n+                 If you can not input anything into TextField, the test failed\n+            8) Try input something into TextArea.\n+                 If you can not input anything into TextArea, the test failed\n+            9) The test passed\n+            \"\"\";\n+\n+    public SetBoundsTest() {\n+        setTitle(\"SetBoundsTest Test Frame\");\n+        setLayout(new GridLayout(2, 1));\n+        Panel hw = new Panel();\n+        ScrollPane sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+        Container lw = new Container();\n+        fill(hw);\n+        fill(lw);\n+\n+        sp.add(hw);\n+        add(sp);\n+        add(lw);\n+\n+        setSize(600, 600);\n+        sp.setScrollPosition(20, 0);\n+\n+    }\n+\n+    private void fill(Container c) {\n+        Button button = new Button(\"button\");\n+        c.add(button);\n+        button.setBackground(new Color(0xd3ceac));\n+        button.setForeground(new Color(0x000000));\n+        button.move(60, 80);\n+        button.resize(400, 60);\n+        button.show(true);\n+\n+        TextField textfield = new TextField(\"textfield\");\n+        c.add(textfield);\n+        textfield.setBackground(new Color(0xd3ceac));\n+        textfield.setForeground(new Color(0x000000));\n+        textfield.move(60, 20);\n+        textfield.resize(400, 40);\n+        textfield.show(true);\n+\n+        TextArea textarea = new TextArea(\"textarea\");\n+        c.add(textarea);\n+        textarea.setBackground(new Color(0xd3ceac));\n+        textarea.setForeground(new Color(0x000000));\n+        textarea.move(60, 80);\n+        textarea.resize(400, 60);\n+        textarea.show(true);\n+\n+        c.setLayout (new FlowLayout());\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Set Bounds Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(SetBoundsTest::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/SetBoundsTest\/SetBoundsTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * summary:\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4226580\n+ * @summary TextField with echoChar add+remove+add seems to be broken\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetEchoCharTest4\n+ *\/\n+\n+public class SetEchoCharTest4 extends Frame implements ActionListener {\n+    TextField tf1 = new TextField(8);\n+    TextField tf2 = new TextField(8);\n+    TextField tf3 = new TextField(8);\n+    Button b = new Button(\"Click Several Times\");\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+                    Type in the first text field and * characters will echo.\n+                    Type in the second text field and $ characters will echo.\n+                    Type in the third text field and # characters will echo.\n+\n+                    Hit the button several times.  All characters should remain\n+                    the same and the test should not crash.\n+\n+                    Make sure the actual text matches what you typed in for each field.\n+                    Press Pass if everything's ok, otherwise Fail\n+           \"\"\";\n+\n+    public SetEchoCharTest4() {\n+        setLayout(new FlowLayout());\n+        tf1.setEchoChar('*');\n+        tf2.setEchoChar('$');\n+        tf3.setEchoChar('#');\n+        addStuff();\n+        b.addActionListener(this);\n+        setSize (200,200);\n+    }\n+\n+    private void addStuff() {\n+        add(tf1);\n+        add(tf2);\n+        add(tf3);\n+        add(b);\n+    }\n+\n+    public void actionPerformed(ActionEvent ae) {\n+        PassFailJFrame.log(\"TextField1 = \" + tf1.getText());\n+        PassFailJFrame.log(\"TextField2 = \" + tf2.getText());\n+        PassFailJFrame.log(\"TextField3 = \" + tf3.getText());\n+        PassFailJFrame.log(\"--------------\");\n+        setVisible(false);\n+        remove(tf1);\n+        remove(tf2);\n+        remove(tf3);\n+        remove(b);\n+        addStuff();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Set Echo Character Test\")\n+                .testUI(SetEchoCharTest4::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/SetEchoCharTest4\/SetEchoCharTest4.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * summary:\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4084454\n+ * @summary Make sure that you can set the text in a \"password mode\"\n+ *          text field and that it echoes as the current echo char.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetPasswordTest\n+ *\/\n+\n+public class SetPasswordTest extends Frame implements ActionListener {\n+    private String setText = \"Set text\";\n+    private String getText = \"Get text\";\n+    private TextField tfPassword;\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+            The purpose of this test is to ensure that when using a textField for\n+            password entry that text set programmatically is not shown in the clear.\n+\n+            We also test \"pasting\" text into the text field.\n+\n+            1.  Press the \"Set Text\" button\n+                Text should appear as '*' chars\n+              - if the string \"secret\" appears then the test is failed.\n+            2.  Use the mouse to select (highlight) all the text and press the DELETE key\n+            3.  Use the system's copy\/paste functionality to copy a text string from the\n+                desktop or this window, and paste it into the text field.\n+            4.  Text should appear in the text field as '*' chars\n+              - if the string you pasted appears then the test is failed.\n+            5.  press the \"Get Text\" button and the string you pasted\n+                should be printed in the log area\n+              - if it prints echo symbols instead the test is failed.\n+            \"\"\";\n+\n+    public SetPasswordTest() {\n+        setLayout(new FlowLayout());\n+        tfPassword = new TextField(\"Initial text\", 30);\n+        tfPassword.setEchoChar('*');\n+        add(tfPassword);\n+\n+        Button b1 = new Button(setText);\n+        b1.addActionListener(this);\n+        add(b1);\n+\n+        Button b2 = new Button(getText);\n+        b2.addActionListener(this);\n+        add(b2);\n+        pack();\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        String ac = evt.getActionCommand();\n+        if (setText.equals(ac)) {\n+            tfPassword.setText(\"secret\");\n+        }\n+\n+        if (getText.equals(ac)) {\n+            PassFailJFrame.log(\"Text: \\\"\" + tfPassword.getText() + \"\\\"\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Set Password Test\")\n+                .testUI(SetPasswordTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/SetPasswordTest\/SetPasswordTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * summary:\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4307281\n+ * @summary verify that after setting the echo char to 0 disguises are\n+ *          removed and user input is echoed to the screen unchanged.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ZeroEchoCharTest\n+ *\/\n+\n+public class ZeroEchoCharTest extends Frame implements ActionListener {\n+    private final TextField textfield = new TextField();\n+    private final Button button1 = new Button(\"Set echo char to *\");\n+    private final Button button2 = new Button(\"Set echo char to 0\");\n+    static final String INSTRUCTIONS = \"\"\"\n+            1.Type in the text field. The user input must be echoed unchanged.\n+            2.Set echo char to '*' by pressing the corresponding button.\n+              If all characters in the text field aren't immediately replaced\n+              with '*', the test fails.\n+            3.Set echo char to 0 by pressing the corresponding button.\n+              If disguises in the text field don't immediately revert to\n+              the original characters, the test fails.\n+            4.Type in the text field. If the input is echoed unchanged,\n+              the test passes. Otherwise, the test fails.\n+            \"\"\";\n+\n+    public ZeroEchoCharTest() {\n+        button1.addActionListener(this);\n+        button2.addActionListener(this);\n+\n+        setLayout(new GridLayout(3, 1));\n+\n+        add(textfield);\n+        add(button1);\n+        add(button2);\n+        pack();\n+    }\n+\n+    public void actionPerformed(ActionEvent event) {\n+        if (event.getSource() == button1) {\n+            textfield.setEchoChar('*');\n+        } else if (event.getSource() == button2) {\n+            textfield.setEchoChar((char)0);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Zero Echo Char Test\")\n+                .testUI(ZeroEchoCharTest::new)\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextField\/ZeroEchoCharTest\/ZeroEchoCharTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}