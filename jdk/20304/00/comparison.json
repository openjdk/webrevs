{"files":[{"patch":"@@ -54,9 +54,14 @@\n-ArenaStatCounter::ArenaStatCounter() :\n-  _current(0), _start(0), _peak(0),\n-  _na(0), _ra(0),\n-  _limit(0), _hit_limit(false), _limit_in_process(false),\n-  _na_at_peak(0), _ra_at_peak(0), _live_nodes_at_peak(0)\n-{}\n-\n-size_t ArenaStatCounter::peak_since_start() const {\n-  return _peak > _start ? _peak - _start : 0;\n+ArenaStatCounter::ArenaStatCounter() {\n+  init();\n+}\n+\n+void ArenaStatCounter::init() {\n+  _current = 0;\n+  _peak = 0;\n+  memset(_tags_size, 0, sizeof(_tags_size));\n+  memset(_tags_size_at_peak, 0, sizeof(_tags_size_at_peak));\n+  _limit = 0;\n+  _hit_limit = false;\n+  _limit_in_process = false;\n+  _live_nodes_at_peak = 0;\n+  _active = false;\n@@ -66,1 +71,2 @@\n-  _peak = _start = _current;\n+  init();\n+  _active = true;\n@@ -68,1 +74,0 @@\n-  _hit_limit = false;\n@@ -71,1 +76,1 @@\n-void ArenaStatCounter::end(){\n+void ArenaStatCounter::end() {\n@@ -74,0 +79,1 @@\n+  _active = false;\n@@ -77,0 +83,1 @@\n+  assert(_active, \"compilaton has not yet started\");\n@@ -93,0 +100,1 @@\n+  assert(_active, \"compilaton has not yet started\");\n@@ -99,1 +107,1 @@\n-         \"Negative overflow (d=%zd %zu %zu %zu)\", delta, _current, _start, _peak);\n+         \"Negative overflow (d=%zd %zu %zu)\", delta, _current, _peak);\n@@ -103,7 +111,8 @@\n-  \/\/ Update detail counter\n-  switch ((Arena::Tag)tag) {\n-    case Arena::Tag::tag_ra: _ra += delta; break;\n-    case Arena::Tag::tag_node: _na += delta; break;\n-    default: \/\/ ignore\n-      break;\n-  };\n+  _tags_size[tag] += delta;\n+  size_t total = 0;\n+  for (int tag = 0; tag < Arena::tag_count(); tag++) {\n+    total += _tags_size[tag];\n+  }\n+  if (total != _current) {\n+    log_info(compilation, alloc)(\"WARNING!!! Total does not match current\");\n+  }\n@@ -113,3 +122,1 @@\n-    assert(delta > 0, \"Sanity (%zu %zu %zu)\", _current, _start, _peak);\n-    _na_at_peak = _na;\n-    _ra_at_peak = _ra;\n+    assert(delta > 0, \"Sanity (%zu %zu)\", _current, _peak);\n@@ -117,0 +124,1 @@\n+    memcpy(_tags_size_at_peak, _tags_size, sizeof(_tags_size));\n@@ -119,1 +127,1 @@\n-    if (!_hit_limit && _limit > 0 && peak_since_start() > _limit) {\n+    if (!_hit_limit && _limit > 0 && _peak > _limit) {\n@@ -127,1 +135,7 @@\n-  st->print(\"%zu [na %zu ra %zu]\", peak_since_start(), _na_at_peak, _ra_at_peak);\n+  st->print(\"%zu [\", _peak);\n+  for (int tag = 0; tag < Arena::tag_count(); tag++) {\n+    if (_tags_size_at_peak[tag] > 0) {\n+      st->print(\"%s %zu \", Arena::tag_name[tag], _tags_size_at_peak[tag]);\n+    }\n+  }\n+  st->print(\"]\");\n@@ -129,1 +143,1 @@\n-  st->print(\" (%zu->%zu->%zu)\", _start, _peak, _current);\n+  st->print(\" (%zu->%zu)\", _peak, _current);\n@@ -189,4 +203,2 @@\n-  \/\/ usage in node arena when total peaked\n-  size_t _na_at_peak;\n-  \/\/ usage in resource area when total peaked\n-  size_t _ra_at_peak;\n+  \/\/ usage per arena tag when total peaked\n+  size_t _tags_size_at_peak[Arena::tag_count()];\n@@ -202,1 +214,1 @@\n-      _total(0), _na_at_peak(0), _ra_at_peak(0), _live_nodes_at_peak(0),\n+      _total(0), _live_nodes_at_peak(0),\n@@ -204,0 +216,1 @@\n+    memset(_tags_size_at_peak, 0, sizeof(_tags_size_at_peak));\n@@ -213,2 +226,4 @@\n-  void set_na_at_peak(size_t n) { _na_at_peak = n; }\n-  void set_ra_at_peak(size_t n) { _ra_at_peak = n; }\n+  void set_tags_size_at_peak(size_t* tags_size_at_peak, int nelements) {\n+    assert(nelements*sizeof(size_t) <= sizeof(_tags_size_at_peak), \"overflow check\");\n+    memcpy(_tags_size_at_peak, tags_size_at_peak, nelements*sizeof(size_t));\n+  }\n@@ -222,0 +237,1 @@\n+#define LEGEND_KEY_FMT \"%11s\"\n@@ -223,10 +239,12 @@\n-    st->print_cr(\"  total  : memory allocated via arenas while compiling\");\n-    st->print_cr(\"  NA     : ...how much in node arenas (if c2)\");\n-    st->print_cr(\"  RA     : ...how much in resource areas\");\n-    st->print_cr(\"  result : Result: 'ok' finished successfully, 'oom' hit memory limit, 'err' compilation failed\");\n-    st->print_cr(\"  #nodes : ...how many nodes (c2 only)\");\n-    st->print_cr(\"  limit  : memory limit, if set\");\n-    st->print_cr(\"  time   : time of last compilation (sec)\");\n-    st->print_cr(\"  type   : compiler type\");\n-    st->print_cr(\"  #rc    : how often recompiled\");\n-    st->print_cr(\"  thread : compiler thread\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"total\", \"memory allocated via arenas while compiling\");\n+    for (int tag = 0; tag < Arena::tag_count(); tag++) {\n+      st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", Arena::tag_name[tag], Arena::tag_desc[tag]);\n+    }\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"result\", \"Result: 'ok' finished successfully, 'oom' hit memory limit, 'err' compilation failed\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"#nodes\", \"...how many nodes (c2 only)\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"limit\", \"memory limit, if set\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"time\", \"time taken for last compilation (sec)\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"type\", \"compiler type\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"#rc\", \"how often recompiled\");\n+    st->print_cr(\"  \" LEGEND_KEY_FMT \": %s\", \"thread\", \"compiler thread\");\n+#undef LEGEND_KEY_FMT\n@@ -236,1 +254,11 @@\n-    st->print_cr(\"total     NA        RA        result  #nodes  limit   time    type  #rc thread              method\");\n+#define SIZE_FMT \"%-10s\"\n+    st->print(SIZE_FMT, \"total\");\n+    for (int tag = 0; tag < Arena::tag_count(); tag++) {\n+      st->print(SIZE_FMT, Arena::tag_name[tag]);\n+    }\n+#define HDR_FMT1 \"%-8s%-8s%-8s%-8s\"\n+#define HDR_FMT2 \"%-6s%-4s%-19s%s\"\n+\n+    st->print(HDR_FMT1, \"result\", \"#nodes\", \"limit\", \"time\");\n+    st->print(HDR_FMT2, \"type\", \"#rc\", \"thread\", \"method\");\n+    st->print_cr(\"\");\n@@ -250,13 +278,7 @@\n-    \/\/ NA\n-    if (human_readable) {\n-      st->print(PROPERFMT \" \", PROPERFMTARGS(_na_at_peak));\n-    } else {\n-      st->print(\"%zu \", _na_at_peak);\n-    }\n-    col += 10; st->fill_to(col);\n-\n-    \/\/ RA\n-    if (human_readable) {\n-      st->print(PROPERFMT \" \", PROPERFMTARGS(_ra_at_peak));\n-    } else {\n-      st->print(\"%zu \", _ra_at_peak);\n+    for (int tag = 0; tag < Arena::tag_count(); tag++) {\n+      if (human_readable) {\n+        st->print(PROPERFMT \" \", PROPERFMTARGS(_tags_size_at_peak[tag]));\n+      } else {\n+        st->print(\"%zu \", _tags_size_at_peak[tag]);\n+      }\n+      col += 10; st->fill_to(col);\n@@ -264,1 +286,0 @@\n-    col += 10; st->fill_to(col);\n@@ -299,1 +320,1 @@\n-    st->print(PTR_FORMAT \"  \", p2i(_thread));\n+    st->print(PTR_FORMAT \" \", p2i(_thread));\n@@ -344,1 +365,1 @@\n-           size_t total, size_t na_at_peak, size_t ra_at_peak,\n+           size_t total, size_t* tags_size_at_peak, int nelements,\n@@ -363,2 +384,1 @@\n-    e->set_na_at_peak(na_at_peak);\n-    e->set_ra_at_peak(ra_at_peak);\n+    e->set_tags_size_at_peak(tags_size_at_peak, nelements);\n@@ -430,1 +450,1 @@\n-  task->set_arena_bytes(arena_stat->peak_since_start());\n+  task->set_arena_bytes(arena_stat->peak());\n@@ -450,3 +470,3 @@\n-                    arena_stat->peak_since_start(), \/\/ total\n-                    arena_stat->na_at_peak(),\n-                    arena_stat->ra_at_peak(),\n+                    arena_stat->peak(), \/\/ total\n+                    (size_t *)arena_stat->tags_size_at_peak(),\n+                    Arena::tag_count(),\n@@ -514,1 +534,1 @@\n-  if (arena_stat->account(diff, (int)arena->get_tag())) { \/\/ new peak?\n+  if (arena_stat->is_active() && arena_stat->account(diff, (int)arena->get_tag())) { \/\/ new peak?\n@@ -548,1 +568,1 @@\n-                 arena_stat->limit(), arena_stat->peak_since_start());\n+                 arena_stat->limit(), arena_stat->peak());\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":88,"deletions":68,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"memory\/arena.hpp\"\n@@ -38,1 +39,1 @@\n-\/\/ Counters for allocations from one arena\n+\/\/ Counters for allocations from arenas during compilation\n@@ -42,2 +43,0 @@\n-  \/\/ bytes when compilation started\n-  size_t _start;\n@@ -46,4 +45,2 @@\n-  \/\/ Current bytes used for node arenas, total\n-  size_t _na;\n-  \/\/ Current bytes used for resource areas\n-  size_t _ra;\n+  \/\/ Current bytes used by arenas per tag\n+  size_t _tags_size[Arena::tag_count()];\n@@ -56,4 +53,1 @@\n-  \/\/ Size of node arena when total peaked (c2 only)\n-  size_t _na_at_peak;\n-  \/\/ Size of resource area when total peaked\n-  size_t _ra_at_peak;\n+  size_t _tags_size_at_peak[Arena::tag_count()];\n@@ -63,0 +57,3 @@\n+  \/\/ When to start account\n+  bool _active;\n+\n@@ -65,0 +62,2 @@\n+  void init();\n+\n@@ -69,1 +68,1 @@\n-  size_t peak_since_start() const;\n+  size_t peak() const { return _peak; }\n@@ -72,2 +71,1 @@\n-  size_t na_at_peak() const { return _na_at_peak; }\n-  size_t ra_at_peak() const { return _ra_at_peak; }\n+  const size_t* tags_size_at_peak() const { return _tags_size_at_peak; }\n@@ -92,1 +90,1 @@\n-\n+  bool   is_active() const          { return _active; }\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.hpp","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -47,0 +47,20 @@\n+#define ARENA_TAG_STRING_(str) #str\n+#define ARENA_TAG_STRING(name, str, desc) ARENA_TAG_STRING_(str),\n+\n+const char* Arena::tag_name[] = {\n+  DO_ARENA_TAG(ARENA_TAG_STRING)\n+};\n+\n+#undef ARENA_TAG_STRING\n+#undef ARENA_TAG_STRING_\n+\n+#define ARENA_TAG_DESC_(desc) #desc\n+#define ARENA_TAG_DESC(name, str, desc) ARENA_TAG_DESC_(desc),\n+\n+const char* Arena::tag_desc[] = {\n+  DO_ARENA_TAG(ARENA_TAG_DESC)\n+};\n+\n+#undef ARENA_TAG_DESC\n+#undef ARENA_TAG_DESC_\n+\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -86,0 +86,6 @@\n+#define DO_ARENA_TAG(template) \\\n+  template(other, Others, Other arenas) \\\n+  template(ra, RA, Resource areas) \\\n+  template(ha, HA, Handle area) \\\n+  template(node, NA, Node arena) \\\n+\n@@ -90,5 +96,6 @@\n-  enum class Tag : uint8_t {\n-    tag_other = 0,\n-    tag_ra,   \/\/ resource area\n-    tag_ha,   \/\/ handle area\n-    tag_node  \/\/ C2 Node arena\n+#define ARENA_TAG_ENUM_(name) tag_##name\n+#define ARENA_TAG_ENUM(name, str, desc) ARENA_TAG_ENUM_(name),\n+\n+  enum class Tag: uint8_t {\n+    DO_ARENA_TAG(ARENA_TAG_ENUM)\n+    tag_count\n@@ -97,0 +104,10 @@\n+#undef ARENA_TAG_ENUM\n+#undef ARENA_TAG_ENUM_\n+\n+  constexpr static int tag_count() {\n+    return static_cast<int>(Tag::tag_count);\n+  }\n+\n+  static const char* tag_name[static_cast<int>(Arena::Tag::tag_count)];\n+  static const char* tag_desc[static_cast<int>(Arena::Tag::tag_count)];\n+\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-        \/\/ total     NA        RA        result  #nodes  limit   time    type  #rc thread              method\n-        \/\/ 2149912   0         1986272   ok      -       -       0.101   c1    1   0x000000015180a600  jdk\/internal\/org\/objectweb\/asm\/Frame::execute((IILjdk\/internal\/org\/objectweb\/asm\/Symbol;Ljdk\/internal\/org\/objectweb\/asm\/SymbolTable;)V)        oa.shouldMatch(\"total.*method\");\n+        \/\/ total     Others    RA        HA        NA        result  #nodes  limit   time    type  #rc thread             method\n+        \/\/ 523648    32728     490920    0         0         ok      -       -       0.250   c1    1   0x00007f4ec00d4ac0 java\/lang\/Class::descriptorString(()Ljava\/lang\/String;)\n@@ -83,2 +83,3 @@\n-        \/\/ 537784    98184     208536    ok      267     -       0.096   c2    1   0x0000000153019c00  jdk\/internal\/classfile\/impl\/BufWriterImpl::writeU1((I)V) 4521912   0         1986272   ok      -       -       0.101   c1    1   0x000000015180a600  jdk\/internal\/org\/objectweb\/asm\/Frame::execute((IILjdk\/internal\/org\/objectweb\/asm\/Symbol;Ljdk\/internal\/org\/objectweb\/asm\/SymbolTable;)V)        oa.shouldMatch(\"total.*method\");\n-        oa.shouldMatch(\"\\\\d+ +\\\\d+ +\\\\d+ +ok +(\\\\d+|-) +.*\" + expectedNameIncl + \".*\");\n+        \/\/ 1898600   853176    750872    0         294552    ok      934     -       1.501   c2    1   0x00007f4ec00d3330 java\/lang\/String::replace((CC)Ljava\/lang\/String;)\n+        oa.shouldMatch(\"total.*method\");\n+        oa.shouldMatch(\"\\\\d+ +(\\\\d+ +){4}ok +(\\\\d+|-) +.*\" + expectedNameIncl + \".*\");\n@@ -89,1 +90,1 @@\n-            oa.shouldMatch(\"\\\\d+ +\\\\d+ +\\\\d+ +ok +(\\\\d+|-) +.*\" + expectedNameExcl + \".*\");\n+            oa.shouldMatch(\"\\\\d+ +(\\\\d+ +){4}ok +(\\\\d+|-) +.*\" + expectedNameExcl + \".*\");\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintMemStat.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-        \/\/ total     NA        RA        result  #nodes  time    type  #rc thread              method\n-        \/\/ 211488    66440     77624     ok      13      0.057   c2    2   0x00007fb49428db70  compiler\/print\/CompileCommandPrintMemStat$TestMain::method1(()V)\n+        \/\/ total     Others    RA        HA        NA        result  #nodes  limit   time    type  #rc thread             method\n+        \/\/ 1898600   853176    750872    0         294552    ok      934     -       1.501   c2    1   0x00007f4ec00d3330 java\/lang\/String::replace((CC)Ljava\/lang\/String;)\n@@ -53,1 +53,1 @@\n-        out.shouldMatch(\"\\\\d+ +\\\\d+ +\\\\d+ +\\\\S+ +\\\\d+.*java.*\\\\(.*\\\\)\");\n+        out.shouldMatch(\"\\\\d+ +(\\\\d+ +){4}\\\\S+ +\\\\d+.*java.*\\\\(.*\\\\)\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerMemoryStatisticTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}