{"files":[{"patch":"@@ -55,1 +55,1 @@\n-  init();\n+  reset();\n@@ -58,1 +58,1 @@\n-void ArenaStatCounter::init() {\n+void ArenaStatCounter::reset() {\n@@ -61,2 +61,2 @@\n-  memset(_tags_size, 0, sizeof(_tags_size));\n-  memset(_tags_size_at_peak, 0, sizeof(_tags_size_at_peak));\n+  _current_by_tag.clear();\n+  _peak_by_tag.clear();\n@@ -71,1 +71,1 @@\n-  init();\n+  reset();\n@@ -111,8 +111,1 @@\n-  _tags_size[tag] += delta;\n-  size_t total = 0;\n-  for (int tag = 0; tag < Arena::tag_count(); tag++) {\n-    total += _tags_size[tag];\n-  }\n-  if (total != _current) {\n-    log_info(compilation, alloc)(\"WARNING!!! Total does not match current\");\n-  }\n+  _current_by_tag.add(tag, delta);\n@@ -124,1 +117,1 @@\n-    memcpy(_tags_size_at_peak, _tags_size, sizeof(_tags_size));\n+    _peak_by_tag = _current_by_tag;\n@@ -136,3 +129,3 @@\n-  for (int tag = 0; tag < Arena::tag_count(); tag++) {\n-    if (_tags_size_at_peak[tag] > 0) {\n-      st->print(\"%s %zu \", Arena::tag_name[tag], _tags_size_at_peak[tag]);\n+  for (int tag = 0; tag < _peak_by_tag.element_count(); tag++) {\n+    if (_peak_by_tag.counter(tag) > 0) {\n+      st->print(\"%s %zu \", _peak_by_tag.tag_name(tag), _peak_by_tag.counter(tag));\n@@ -204,1 +197,1 @@\n-  size_t _tags_size_at_peak[Arena::tag_count()];\n+  ArenaTagsCounter _peak_by_tag;\n@@ -216,1 +209,1 @@\n-    memset(_tags_size_at_peak, 0, sizeof(_tags_size_at_peak));\n+    _peak_by_tag.clear();\n@@ -226,4 +219,1 @@\n-  void set_tags_size_at_peak(size_t* tags_size_at_peak, int nelements) {\n-    assert(nelements*sizeof(size_t) <= sizeof(_tags_size_at_peak), \"overflow check\");\n-    memcpy(_tags_size_at_peak, tags_size_at_peak, nelements*sizeof(size_t));\n-  }\n+  void set_peak_by_tag(ArenaTagsCounter peak_by_tag) { _peak_by_tag = peak_by_tag; }\n@@ -280,1 +270,1 @@\n-        st->print(PROPERFMT \" \", PROPERFMTARGS(_tags_size_at_peak[tag]));\n+        st->print(PROPERFMT \" \", PROPERFMTARGS(_peak_by_tag.counter(tag)));\n@@ -282,1 +272,1 @@\n-        st->print(\"%zu \", _tags_size_at_peak[tag]);\n+        st->print(\"%zu \", _peak_by_tag.counter(tag));\n@@ -365,1 +355,1 @@\n-           size_t total, size_t* tags_size_at_peak, int nelements,\n+           size_t total, ArenaTagsCounter peak_by_tag,\n@@ -384,1 +374,1 @@\n-    e->set_tags_size_at_peak(tags_size_at_peak, nelements);\n+    e->set_peak_by_tag(peak_by_tag);\n@@ -471,2 +461,1 @@\n-                    (size_t *)arena_stat->tags_size_at_peak(),\n-                    Arena::tag_count(),\n+                    arena_stat->peak_by_tag(),\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":18,"deletions":29,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -39,0 +39,24 @@\n+\/\/ Helper class to wrap the array of arena tags for easier processing\n+class ArenaTagsCounter {\n+private:\n+  size_t _counter[Arena::tag_count()];\n+\n+public:\n+  int element_count() const { return Arena::tag_count(); }\n+  const char* tag_name(int tag) const { return Arena::tag_name[tag]; }\n+\n+  size_t  counter(int tag) const {\n+    assert(tag < element_count(), \"invalid tag %d\", tag);\n+    return _counter[tag];\n+  }\n+\n+  void add(int tag, size_t value) {\n+    assert(tag < element_count(), \"invalid tag %d\", tag);\n+    _counter[tag] += value;\n+  }\n+\n+  void clear() {\n+    memset(_counter, 0, sizeof(size_t) * element_count());\n+  }\n+};\n+\n@@ -46,1 +70,3 @@\n-  size_t _tags_size[Arena::tag_count()];\n+  ArenaTagsCounter _current_by_tag;\n+  \/\/ Peak composition:\n+  ArenaTagsCounter _peak_by_tag;\n@@ -52,2 +78,3 @@\n-  \/\/ Peak composition:\n-  size_t _tags_size_at_peak[Arena::tag_count()];\n+  \/\/ When to start accounting\n+  bool _active;\n+\n@@ -57,3 +84,0 @@\n-  \/\/ When to start account\n-  bool _active;\n-\n@@ -62,1 +86,1 @@\n-  void init();\n+  void reset();\n@@ -71,1 +95,1 @@\n-  const size_t* tags_size_at_peak() const { return _tags_size_at_peak; }\n+  ArenaTagsCounter peak_by_tag() const { return _peak_by_tag; }\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.hpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-#define ARENA_TAG_STRING_(str) #str\n-#define ARENA_TAG_STRING(name, str, desc) ARENA_TAG_STRING_(str),\n@@ -51,0 +49,1 @@\n+#define ARENA_TAG_STRING(name, str, desc) XSTR(name),\n@@ -52,2 +51,0 @@\n-};\n-\n@@ -55,4 +52,1 @@\n-#undef ARENA_TAG_STRING_\n-\n-#define ARENA_TAG_DESC_(desc) #desc\n-#define ARENA_TAG_DESC(name, str, desc) ARENA_TAG_DESC_(desc),\n+};\n@@ -61,0 +55,1 @@\n+#define ARENA_TAG_DESC(name, str, desc) XSTR(desc),\n@@ -62,2 +57,0 @@\n-};\n-\n@@ -65,1 +58,1 @@\n-#undef ARENA_TAG_DESC_\n+};\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -86,5 +86,5 @@\n-#define DO_ARENA_TAG(template) \\\n-  template(other, Others, Other arenas) \\\n-  template(ra, RA, Resource areas) \\\n-  template(ha, HA, Handle area) \\\n-  template(node, NA, Node arena) \\\n+#define DO_ARENA_TAG(FN) \\\n+  FN(other, Others, Other arenas) \\\n+  FN(ra, RA, Resource areas) \\\n+  FN(ha, HA, Handle area) \\\n+  FN(node, NA, Node arena) \\\n@@ -95,4 +95,0 @@\n-\n-#define ARENA_TAG_ENUM_(name) tag_##name\n-#define ARENA_TAG_ENUM(name, str, desc) ARENA_TAG_ENUM_(name),\n-\n@@ -100,0 +96,1 @@\n+#define ARENA_TAG_ENUM(name, str, desc) tag_##name,\n@@ -101,0 +98,1 @@\n+#undef ARENA_TAG_ENUM\n@@ -104,3 +102,0 @@\n-#undef ARENA_TAG_ENUM\n-#undef ARENA_TAG_ENUM_\n-\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"}]}