{"files":[{"patch":"@@ -47,3 +47,6 @@\n- * A class is considered unloaded if its class loader is finalized.\n- * If there no finalization of class loader detected for some timeout,\n- * class is considered still loaded and method returns <i>false<\/i>.\n+ * A class is considered unloaded if its class loader is reclaimed.\n+ * A runnable lambda is registered to JVM to be called whenever the\n+ * class loader becomes unreachable.\n+ * After setting the class loader to null, if within a timeout no notification\n+ * of its reclaim is received, class is considered still loaded and\n+ * <code>unloadClass()<\/code> method returns <i>false<\/i>.\n@@ -51,1 +54,1 @@\n- * <p>Such finalization control applies only to a class loaded by\n+ * <p>Such reclaiming control applies only to a class loaded by\n@@ -77,1 +80,1 @@\n-     * Whole amount of time in milliseconds to wait for class loader finalization.\n+     * Whole amount of time in milliseconds to wait for class loader reclaim.\n@@ -82,1 +85,1 @@\n-     * Piece of time in milliseconds to wait in a loop for class loader finalization.\n+     * Piece of time in milliseconds to wait in a loop for class loader reclaim.\n@@ -87,1 +90,1 @@\n-     * Has class loader been finalized or not.\n+     * Has class loader been is_reclaimed or not.\n@@ -89,1 +92,1 @@\n-    volatile boolean finalized = false;\n+    volatile boolean is_reclaimed = false;\n@@ -96,51 +99,0 @@\n-    \/*\n-     * This class is used as an alternative to deprecated finalize() method.\n-     * It is used as a 'cleaner' whose run() method will be called when JVM\n-     * makes an 'registered' object unreachable.\n-     * Here it will be used for tracking the local instance of 'CustomClassLoader'.\n-     *\/\n-    private static class CustomClassLoaderCleaner implements Runnable{\n-\n-        private ClassUnloader class_unloader;\n-\n-        \/**\n-         * Keep which ClassUnloader has to be notified.\n-         *\/\n-        public CustomClassLoaderCleaner(ClassUnloader class_unloader){\n-            this.class_unloader = class_unloader;\n-        }\n-        @Override\n-        public void run(){\n-            if(class_unloader != null){\n-                class_unloader.finalized = true;\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * The cleaner instance whose run() will be called by JVM.\n-     *\/\n-    private CustomClassLoaderCleaner customCleaner;\n-\n-    \/**\n-     * The java.lanf.ref.Cleaner object for registering the cleaner and the object to be traced.\n-     *\/\n-    private Cleaner cleaner;\n-\n-    \/**\n-     * The cleanable.clean() can be explicitly called to make the object unreachable.\n-     *\/\n-    private static Cleaner.Cleanable cleanable;\n-\n-    private void registerCleaning(){\n-\n-        if (cleaner != null)\n-            return;\n-\n-        cleaner = Cleaner.create();\n-        customCleaner = new CustomClassLoaderCleaner(this);\n-\n-        \/\/ When customClassLoader becomes unreachable, the customCleaner.run() method is called by JVM\/GC.\n-        cleanable = cleaner.register(customClassLoader, customCleaner);\n-    }\n-\n@@ -186,1 +138,1 @@\n-        customClassLoader = new CustomClassLoader(this);\n+        customClassLoader = new CustomClassLoader();\n@@ -189,1 +141,2 @@\n-        registerCleaning();\n+        \/\/ When customClassLoader becomes unreachable, the lambda is called by JVM\/GC.\n+        Cleaner.create().register(customClassLoader, () -> { is_reclaimed = true; } );\n@@ -203,2 +156,3 @@\n-        customClassLoader.setClassUnloader(this);\n-        registerCleaning();\n+\n+        \/\/ When customClassLoader becomes unreachable, the lambda is called by JVM\/GC.\n+        Cleaner.create().register(customClassLoader, () -> { is_reclaimed = true; } );\n@@ -293,1 +247,1 @@\n-        finalized = false;\n+        is_reclaimed = false;\n@@ -303,1 +257,1 @@\n-        \/\/ give GC chance to run and wait for finalization\n+        \/\/ give GC chance to run and wait for receiving reclaim notification\n@@ -305,1 +259,1 @@\n-        while (!finalized && System.currentTimeMillis() < timeToFinish) {\n+        while (!is_reclaimed && System.currentTimeMillis() < timeToFinish) {\n@@ -317,6 +271,0 @@\n-        \/\/ Since customClassLoader object is set to null, we should also null the cleaning\n-        \/\/ objbects to let them be created when new customClassLoader is created.\n-        cleaner = null;\n-        cleanable = null;\n-        customCleaner = null;\n-\n@@ -324,1 +272,1 @@\n-        if (finalized) {\n+        if (is_reclaimed) {\n@@ -329,1 +277,1 @@\n-        \/\/ class loader has not been finalized\n+        \/\/ class loader has not been is_reclaimed\n@@ -345,14 +293,3 @@\n-    \/**\n-     * Stresses memory by allocating arrays of bytes.\n-     *\n-     * Note that this method can throw Failure if any exception\n-     * is thrown while eating memory. To avoid OOM while allocating\n-     * exception we preallocate it before the lunch starts. It means\n-     * that exception stack trace does not correspond to the place\n-     * where exception is thrown, but points at start of the method.\n-     *\/\n-    public static void eatMemory(ExecutionController stresser) {\n-        GarbageUtils.eatMemory(stresser, 50, 1024, 2);\n-        if (cleanable != null) {\n-          cleanable.clean();\n-        }\n+     \/\/ Stresses memory by allocating arrays of bytes.\n+   public static void eatMemory(ExecutionController stresser) {\n+       GarbageUtils.eatMemory(stresser, 50, 1024, 2);\n@@ -361,9 +298,1 @@\n-    \/**\n-     * Stresses memory by allocating arrays of bytes.\n-     *\n-     * Note that this method can throw Failure if any exception\n-     * is thrown while eating memory. To avoid OOM while allocating\n-     * exception we preallocate it before the lunch starts. It means\n-     * that exception stack trace does not correspond to the place\n-     * where exception is thrown, but points at start of the method.\n-     *\/\n+     \/\/ Stresses memory by allocating arrays of bytes.\n@@ -379,4 +308,1 @@\n-        GarbageUtils.eatMemory(stresser, 50, 1024, 2);\n-        if (cleanable != null) {\n-          cleanable.clean();\n-        }\n+        eatMemory(stresser);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/ClassUnloader.java","additions":27,"deletions":101,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-    private ClassUnloader classUnloader;\n@@ -56,21 +55,0 @@\n-        this.classUnloader = null;\n-    }\n-\n-    \/**\n-     * Initializes a newly created <code>CustomClassloader<\/code> object\n-     * linked with specified <code>ClassUnloader<\/code> object.\n-     *\n-     * @param classUnloader an instance of <code>ClassUnloader<\/code>\n-     *\/\n-    public CustomClassLoader(ClassUnloader classUnloader) {\n-        super(CustomClassLoader.class.getClassLoader());\n-        this.classUnloader = classUnloader;\n-    }\n-\n-    \/**\n-     * Links this class loader with specified <code>ClassUnloader<\/code> object.\n-     *\n-     * @param classUnloader an instance of <code>ClassUnloader<\/code>\n-     *\/\n-    public void setClassUnloader(ClassUnloader classUnloader) {\n-        this.classUnloader = classUnloader;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/CustomClassLoader.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}