{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.ref.Cleaner;\n@@ -95,0 +96,51 @@\n+    \/*\n+     * This class is used as an alternative to deprecated finalize() method.\n+     * It is used as a 'cleaner' whose run() method will be called when JVM\n+     * makes an 'registered' object unreachable.\n+     * Here it will be used for tracking the local instance of 'CustomClassLoader'.\n+     *\/\n+    private static class CustomClassLoaderCleaner implements Runnable{\n+\n+        private ClassUnloader class_unloader;\n+\n+        \/**\n+         * Keep which ClassUnloader has to be notified.\n+         *\/\n+        public CustomClassLoaderCleaner(ClassUnloader class_unloader){\n+            this.class_unloader = class_unloader;\n+        }\n+        @Override\n+        public void run(){\n+            if(class_unloader != null){\n+                class_unloader.finalized = true;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * The cleaner instance whose run() will be called by JVM.\n+     *\/\n+    private CustomClassLoaderCleaner customCleaner;\n+\n+    \/**\n+     * The java.lanf.ref.Cleaner object for registering the cleaner and the object to be traced.\n+     *\/\n+    private Cleaner cleaner;\n+\n+    \/**\n+     * The cleanable.clean() can be explicitly called to make the object unreachable.\n+     *\/\n+    private static Cleaner.Cleanable cleanable;\n+\n+    private void registerCleaning(){\n+\n+        if (cleaner != null)\n+            return;\n+\n+        cleaner = Cleaner.create();\n+        customCleaner = new CustomClassLoaderCleaner(this);\n+\n+        \/\/ When customClassLoader becomes unreachable, the customCleaner.run() method is called by JVM\/GC.\n+        cleanable = cleaner.register(customClassLoader, customCleaner);\n+    }\n+\n@@ -137,0 +189,2 @@\n+        registerCleaning();\n+\n@@ -150,0 +204,1 @@\n+        registerCleaning();\n@@ -262,0 +317,6 @@\n+        \/\/ Since customClassLoader object is set to null, we should also null the cleaning\n+        \/\/ objbects to let them be created when new customClassLoader is created.\n+        cleaner = null;\n+        cleanable = null;\n+        customCleaner = null;\n+\n@@ -292,3 +353,0 @@\n-     *\n-     * @throws  Failure if exception other than OutOfMemoryError\n-     *           is thrown while eating memory\n@@ -298,14 +356,2 @@\n-\n-        \/*\n-         * System.runFinalization() may potentially fail with OOM. This is why\n-         * System.runFinalization() is repeated several times.\n-         *\/\n-        for (int i = 0; i < 10; ++i) {\n-            try {\n-                if(!stresser.continueExecution()) {\n-                    return;\n-                }\n-                System.runFinalization();\n-                break;\n-            } catch (OutOfMemoryError e) {\n-            }\n+        if (cleanable != null) {\n+          cleanable.clean();\n@@ -315,1 +361,1 @@\n-        \/**\n+    \/**\n@@ -323,3 +369,0 @@\n-     *\n-     * @throws  Failure if exception other than OutOfMemoryError\n-     *           is thrown while eating memory\n@@ -337,13 +380,2 @@\n-        \/*\n-         * System.runFinalization() may potentially fail with OOM. This is why\n-         * System.runFinalization() is repeated several times.\n-         *\/\n-        for (int i = 0; i < 10; ++i) {\n-            try {\n-                if(!stresser.continueExecution()) {\n-                    return;\n-                }\n-                System.runFinalization();\n-                break;\n-            } catch (OutOfMemoryError e) {\n-            }\n+        if (cleanable != null) {\n+          cleanable.clean();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/ClassUnloader.java","additions":67,"deletions":35,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,12 +138,0 @@\n-    \/**\n-     * Notifies <code>ClassUnloader<\/code> about finalization.\n-     *\/\n-    protected void finalize() throws Throwable {\n-\n-        \/\/ notify ClassUnloader about finalization\n-        if (classUnloader != null) {\n-            classUnloader.finalized = true;\n-        }\n-\n-        super.finalize();\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/CustomClassLoader.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"}]}