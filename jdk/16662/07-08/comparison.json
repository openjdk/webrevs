{"files":[{"patch":"@@ -4223,0 +4223,7 @@\n+\/\/ This nulls out jmethodIDs for all methods in 'klass'\n+\/\/ It needs to be called explicitly for all previous versions of a class because these may not be cleaned up\n+\/\/ during class unloading.\n+\/\/ We can not use the jmethodID cache associated with klass directly because the 'previous' versions\n+\/\/ do not have the jmethodID cache filled in. Instead, we need to lookup jmethodID for each method and this\n+\/\/ is expensive - O(n) for one jmethodID lookup. For all contained methods it is O(n^2).\n+\/\/ The reason for expensive jmethodID lookup for each method is that there is no direct link between method and jmethodID.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1083,5 +1083,1 @@\n-  \/\/ Used to explicitly clear jmethodIDs for the contained methods\n-  \/\/ This is required for JDK-8313816 but should not be used otherwise!\n-  \/\/   - We can not use the jmethodID cache associated with klass directly because the 'previous' versions\n-  \/\/     do not have the jmethodID cache filled in. Instead, we need to lookup jmethodID for each method and this\n-  \/\/     is expensive - O(n) for one jmethodID lookup. For all contained methods it is O(n^2).\n+  \/\/ This nulls out jmethodIDs for all methods in 'klass'\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}