{"files":[{"patch":"@@ -540,2 +540,0 @@\n-      \/\/ Do the pointer maintenance before releasing the metadata\n-      method->clear_jmethod_id();\n@@ -4225,0 +4223,10 @@\n+void InstanceKlass::clear_jmethod_ids(InstanceKlass* klass) {\n+  Array<Method*>* method_refs = klass->methods();\n+  for (int k = 0; k < method_refs->length(); k++) {\n+    Method* method = method_refs->at(k);\n+    if (method != nullptr) {\n+      method->clear_jmethod_id();\n+    }\n+  }\n+}\n+\n@@ -4268,0 +4276,1 @@\n+      clear_jmethod_ids(pv_node); \/\/ jmethodID maintenance for the unloaded class\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1083,0 +1083,6 @@\n+  \/\/ Used to explicitly clear jmethodIDs for the contained methods\n+  \/\/ This is required for JDK-8313816 but should not be used otherwise!\n+  \/\/   - We can not use the jmethodID cache associated with klass directly because the 'previous' versions\n+  \/\/     do not have the jmethodID cache filled in. Instead, we need to lookup jmethodID for each method and this\n+  \/\/     is expensive - O(n) for one jmethodID lookup. For all contained methods it is O(n^2).\n+  static void clear_jmethod_ids(InstanceKlass* klass);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2267,6 +2267,2 @@\n-  if (constMethod() != nullptr && constants() != nullptr && method_holder() == nullptr) {\n-    \/\/ The method has not been fully initialized and has no link to its holder\n-    \/\/ jmethodIDs are kept in the cache in the holder and so, without the holder there is no associated jmethodID\n-    \/\/ The holder is resolved via const_method()->constants()->pool_holder()  so we must check all parts for nullptr\n-    return;\n-  }\n+  \/\/ This should only be called when there is a reachable method_holder containing the jmethodIDs\n+  assert(constMethod() != nullptr && constants() != nullptr && method_holder() != nullptr, \"invariant\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}