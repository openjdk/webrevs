{"files":[{"patch":"@@ -5579,2 +5579,1 @@\n-    \/\/ Free methods - those methods are not fully wired and miss the method holder\n-    InstanceKlass::deallocate_methods(_loader_data, _methods, false);\n+    InstanceKlass::deallocate_methods(_loader_data, _methods);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -531,2 +531,1 @@\n-                                       Array<Method*>* methods,\n-                                       bool with_method_holders) {\n+                                       Array<Method*>* methods) {\n@@ -541,4 +540,2 @@\n-      \/\/ Do the pointer maintenance before releasing the metadata, but not for incomplete methods\n-      if (with_method_holders) {\n-        method->clear_jmethod_id();\n-      }\n+      \/\/ Do the pointer maintenance before releasing the metadata\n+      method->clear_jmethod_id();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -995,2 +995,1 @@\n-                                 Array<Method*>* methods,\n-                                 bool with_method_holders = true);\n+                                 Array<Method*>* methods);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2269,1 +2269,6 @@\n-  \/\/ The jmethodid is not stored in the Method instance, we need to look it up first\n+  if (method_holder() == nullptr) {\n+    \/\/ the method has not been fully initialized and has no link to its holder\n+    \/\/ jmethodIDs are kept in the cache in the holder and so, without the holder there is no associated jmethodID\n+    return;\n+  }\n+  \/\/ The jmethodID is not stored in the Method instance, we need to look it up first\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +28,1 @@\n- *          version is still on stack does not lead to a crash when that's method jmethodID is used as\n+ *          version is still on stack does not lead to a crash when that method's jmethodID is used as\n@@ -46,1 +45,0 @@\n-import java.nio.file.Files;\n@@ -50,4 +48,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CyclicBarrier;\n-import java.util.concurrent.locks.LockSupport;\n@@ -62,1 +56,0 @@\n-import jdk.test.lib.process.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/GetStackTraceAndRetransformTest\/GetStackTraceAndRetransformTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/GetStackTraceAndRetransformTest\/libGetStackTraceAndRetransformTest.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}