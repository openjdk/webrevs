{"files":[{"patch":"@@ -119,2 +119,2 @@\n- * Double#equals equals} uses <a href=#repEquivalence> representation\n- * equivalence<\/a>, defining NaN arguments to be equal to each other,\n+ * Double#equals equals} uses {@linkplain ##repEquivalence representation\n+ * equivalence}, defining NaN arguments to be equal to each other,\n@@ -594,0 +594,17 @@\n+     * @apiNote\n+     * This method corresponds to the general functionality of the\n+     * convertToDecimalCharacter operation defined in IEEE 754;\n+     * however, that operation is defined in terms of specifying the\n+     * number of significand digits used in the conversion.\n+     * Code to do such a conversion in the Java platform includes\n+     * converting the {@code double} to a {@link java.math.BigDecimal\n+     * BigDecimal} exactly and then rounding the {@code BigDecimal} to\n+     * the desired number of digits; sample code:\n+     * {@snippet lang=java :\n+     * double d = 0.1;\n+     * int digits = 25;\n+     * BigDecimal bd = new BigDecimal(d);\n+     * String result = bd.round(new MathContext(digits,  RoundingMode.HALF_UP));\n+     * \/\/ 0.1000000000000000055511151\n+     * }\n+     *\n@@ -674,0 +691,5 @@\n+     *\n+     * @apiNote\n+     * This method corresponds to the convertToHexCharacter operation\n+     * defined in IEEE 754.\n+     *\n@@ -900,0 +922,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFromDecimalCharacter and\n+     * convertFromHexCharacter operations defined in IEEE 754.\n+     *\n@@ -1090,0 +1116,1 @@\n+    @Override\n@@ -1103,0 +1130,1 @@\n+    @Override\n@@ -1112,0 +1140,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTowardZero\n+     * operation defined in IEEE 754.\n+     *\n@@ -1115,0 +1147,1 @@\n+    @Override\n@@ -1123,0 +1156,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTowardZero\n+     * operation defined in IEEE 754.\n+     *\n@@ -1127,0 +1164,1 @@\n+    @Override\n@@ -1144,0 +1182,1 @@\n+    @Override\n@@ -1153,0 +1192,1 @@\n+    @Override\n@@ -1213,3 +1253,2 @@\n-     * relation must be implemented; see <a\n-     * href=\"#equivalenceRelation\">this discussion<\/a> for details of\n-     * floating-point equality and equivalence.\n+     * relation must be implemented; see {@linkplain ##equivalenceRelation\n+     * this discussion for details of floating-point equality and equivalence}.\n@@ -1392,3 +1431,3 @@\n-     * equals<\/i>; see <a href=\"#equivalenceRelation\">this\n-     * discussion<\/a> for details of floating-point comparison and\n-     * ordering.\n+     * equals<\/i>; see {@linkplain ##equivalenceRelation this\n+     * discussion for details of floating-point comparison and\n+     * ordering}.\n@@ -1408,0 +1447,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":48,"deletions":8,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -310,0 +310,17 @@\n+     * @apiNote\n+     * This method corresponds to the general functionality of the\n+     * convertToDecimalCharacter operation defined in IEEE 754;\n+     * however, that operation is defined in terms of specifying the\n+     * number of significand digits used in the conversion.\n+     * Code to do such a conversion in the Java platform includes\n+     * converting the {@code float} to a {@link java.math.BigDecimal\n+     * BigDecimal} exactly and then rounding the {@code BigDecimal} to\n+     * the desired number of digits; sample code:\n+     * {@snippet lang=java :\n+     * floatf = 0.1f;\n+     * int digits = 15;\n+     * BigDecimal bd = new BigDecimal(f);\n+     * String result = bd.round(new MathContext(digits,  RoundingMode.HALF_UP));\n+     * \/\/ 0.100000001490116\n+     * }\n+     *\n@@ -390,0 +407,5 @@\n+     *\n+     * @apiNote\n+     * This method corresponds to the convertToHexCharacter operation\n+     * defined in IEEE 754.\n+     *\n@@ -527,0 +549,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFromDecimalCharacter and\n+     * convertFromHexCharacter operations defined in IEEE 754.\n+     *\n@@ -732,0 +758,1 @@\n+    @Override\n@@ -745,0 +772,1 @@\n+    @Override\n@@ -753,0 +781,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTowardZero\n+     * operation defined in IEEE 754.\n+     *\n@@ -757,0 +789,1 @@\n+    @Override\n@@ -765,0 +798,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTowardZero\n+     * operation defined in IEEE 754.\n+     *\n@@ -769,0 +806,1 @@\n+    @Override\n@@ -778,0 +816,1 @@\n+    @Override\n@@ -795,0 +834,1 @@\n+    @Override\n@@ -842,3 +882,2 @@\n-     * relation must be implemented; see <a\n-     * href=\"Double.html#equivalenceRelation\">this discussion<\/a> for\n-     * details of floating-point equality and equivalence.\n+     * relation must be implemented; see {@linkplain Double##equivalenceRelation\n+     * this discussion for details of floating-point equality and equivalence}.\n@@ -1095,1 +1134,1 @@\n-     * The <a href=\"#binary16Format\">binary16 format<\/a> is discussed in\n+     * The {@linkplain ##binary16Format binary16 format} is discussed in\n@@ -1211,3 +1250,3 @@\n-     * equals<\/i>; see <a href=\"Double.html#equivalenceRelation\">this\n-     * discussion<\/a> for details of floating-point comparison and\n-     * ordering.\n+     * equals<\/i>; see {@linkplain Double##equivalenceRelation this\n+     * discussion for details of floating-point comparison and\n+     * ordering}.\n@@ -1228,0 +1267,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":47,"deletions":7,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -264,1 +264,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -556,1 +556,1 @@\n-     * of {@code y\/x} in the range of -<i>pi<\/i> to <i>pi<\/i>. Special\n+     * of {@code y\/x} in the range of &minus;<i>pi<\/i> to <i>pi<\/i>. Special\n@@ -2648,1 +2648,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2677,1 +2677,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2705,1 +2705,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>),\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>),\n@@ -2773,1 +2773,1 @@\n-     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;-1.  Note that for values of\n+     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;&minus;1.  Note that for values of\n@@ -2802,1 +2802,1 @@\n-     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;-1.\n+     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;&minus;1.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -214,1 +214,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -527,1 +527,1 @@\n-     * of {@code y\/x} in the range of -<i>pi<\/i> to <i>pi<\/i>. Special\n+     * of {@code y\/x} in the range of &minus;<i>pi<\/i> to <i>pi<\/i>. Special\n@@ -2096,1 +2096,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2123,1 +2123,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2149,1 +2149,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>),\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>),\n@@ -2206,1 +2206,1 @@\n-     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;-1.  Note that for values of\n+     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;&minus;1.  Note that for values of\n@@ -2227,1 +2227,1 @@\n-     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;-1.\n+     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;&minus;1.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}