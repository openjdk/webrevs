{"files":[{"patch":"@@ -595,1 +595,1 @@\n-     * This method corresponds to the general functionality of\n+     * This method corresponds to the general functionality of the\n@@ -598,4 +598,12 @@\n-     * number of significand digits used in the conversion, a\n-     * configuration parameter offered by the precision flag of\n-     * several numeric floating-point conversions of {@link\n-     * java.util.Formatter}.\n+     * number of significand digits used in the conversion.\n+     * Code to do such a conversion in the Java platform includes\n+     * converting the {@code double} to a {@link java.math.BigDecimal\n+     * BigDecimal} exactly and then rounding the {@code BigDecimal} to\n+     * the desired number of digits; sample code:\n+     * {@snippet lang=java :\n+     * double d = 0.1;\n+     * int digits = 25;\n+     * BigDecimal bd = new BigDecimal(d);\n+     * String result = bd.round(new MathContext(digits,  RoundingMode.HALF_UP));\n+     * \/\/ 0.1000000000000000055511151\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-     * This method corresponds to the general functionality of\n+     * This method corresponds to the general functionality of the\n@@ -314,4 +314,12 @@\n-     * number of significand digits used in the conversion, a\n-     * configuration parameter offered by the precision flag of\n-     * several numeric floating-point conversions of {@link\n-     * java.util.Formatter}.\n+     * number of significand digits used in the conversion.\n+     * Code to do such a conversion in the Java platform includes\n+     * converting the {@code float} to a {@link java.math.BigDecimal\n+     * BigDecimal} exactly and then rounding the {@code BigDecimal} to\n+     * the desired number of digits; sample code:\n+     * {@snippet lang=java :\n+     * floatf = 0.1f;\n+     * int digits = 15;\n+     * BigDecimal bd = new BigDecimal(f);\n+     * String result = bd.round(new MathContext(digits,  RoundingMode.HALF_UP));\n+     * \/\/ 0.100000001490116\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -264,1 +264,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -556,1 +556,1 @@\n-     * of {@code y\/x} in the range of -<i>pi<\/i> to <i>pi<\/i>. Special\n+     * of {@code y\/x} in the range of &minus;<i>pi<\/i> to <i>pi<\/i>. Special\n@@ -2648,1 +2648,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2677,1 +2677,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2705,1 +2705,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>),\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>),\n@@ -2773,1 +2773,1 @@\n-     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;-1.  Note that for values of\n+     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;&minus;1.  Note that for values of\n@@ -2802,1 +2802,1 @@\n-     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;-1.\n+     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;&minus;1.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -214,1 +214,1 @@\n-     * range -<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n+     * range &minus;<i>pi<\/i>\/2 through <i>pi<\/i>\/2.  Special cases:\n@@ -527,1 +527,1 @@\n-     * of {@code y\/x} in the range of -<i>pi<\/i> to <i>pi<\/i>. Special\n+     * of {@code y\/x} in the range of &minus;<i>pi<\/i> to <i>pi<\/i>. Special\n@@ -2096,1 +2096,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2123,1 +2123,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>)\/2\n+     * (<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>)\/2\n@@ -2149,1 +2149,1 @@\n-     * (<i>e<sup>x<\/sup>&nbsp;-&nbsp;e<sup>-x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>-x<\/sup><\/i>),\n+     * (<i>e<sup>x<\/sup>&nbsp;&minus;&nbsp;e<sup>&minus;x<\/sup><\/i>)\/(<i>e<sup>x<\/sup>&nbsp;+&nbsp;e<sup>&minus;x<\/sup><\/i>),\n@@ -2206,1 +2206,1 @@\n-     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;-1.  Note that for values of\n+     * Returns <i>e<\/i><sup>x<\/sup>&nbsp;&minus;1.  Note that for values of\n@@ -2227,1 +2227,1 @@\n-     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;-1.\n+     *              <i>e<\/i><sup>{@code x}<\/sup>&nbsp;&minus;1.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}