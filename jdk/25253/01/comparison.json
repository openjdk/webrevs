{"files":[{"patch":"@@ -674,21 +674,12 @@\n-\/\/ Load\/store register (all modes)\n-#define INSN(NAME, op, funct3)                                                                     \\\n-  void NAME(Register Rd, Register Rs, const int32_t offset) {                                      \\\n-    guarantee(is_simm12(offset), \"offset is invalid.\");                                            \\\n-    unsigned insn = 0;                                                                             \\\n-    int32_t val = offset & 0xfff;                                                                  \\\n-    patch((address)&insn, 6, 0, op);                                                               \\\n-    patch((address)&insn, 14, 12, funct3);                                                         \\\n-    patch_reg((address)&insn, 15, Rs);                                                             \\\n-    patch_reg((address)&insn, 7, Rd);                                                              \\\n-    patch((address)&insn, 31, 20, val);                                                            \\\n-    emit(insn);                                                                                    \\\n-  }\n-\n-  INSN(lb,  0b0000011, 0b000);\n-  INSN(_lbu, 0b0000011, 0b100);\n-  INSN(_lh,  0b0000011, 0b001);\n-  INSN(_lhu, 0b0000011, 0b101);\n-  INSN(_lw, 0b0000011, 0b010);\n-  INSN(lwu, 0b0000011, 0b110);\n-  INSN(_ld, 0b0000011, 0b011);\n+ private:\n+  \/\/ Load\n+  enum LoadWidthFunct3 : uint8_t {\n+    LOAD_WIDTH_BYTE              = 0b000,\n+    LOAD_WIDTH_HALFWORD          = 0b001,\n+    LOAD_WIDTH_WORD              = 0b010,\n+    LOAD_WIDTH_DOUBLEWORD        = 0b011,\n+    LOAD_WIDTH_BYTE_UNSIGNED     = 0b100,\n+    LOAD_WIDTH_HALFWORD_UNSIGNED = 0b101,\n+    LOAD_WIDTH_WORD_UNSIGNED     = 0b110,\n+    \/\/ 0b111 is reserved\n+  };\n@@ -696,1 +687,67 @@\n-#undef INSN\n+  static constexpr uint8_t OP_LOAD_MAJOR    = 0b0000011;\n+  static constexpr uint8_t OP_FP_LOAD_MAJOR = 0b0000111;\n+\n+  template <uint8_t op_major, LoadWidthFunct3 width>\n+  void load_base(uint8_t Rd, Register Rs, const int32_t offset) {\n+    guarantee(is_simm12(offset), \"offset is invalid.\");\n+    unsigned insn = 0;\n+    int32_t val = offset & 0xfff;\n+    patch((address)&insn,  6,  0, op_major);\n+    patch((address)&insn, 11,  7, Rd);\n+    patch((address)&insn, 14, 12, width);\n+    patch_reg((address)&insn, 15, Rs);\n+    patch((address)&insn, 31, 20, val);\n+    emit(insn);\n+  }\n+\n+  template <LoadWidthFunct3 width>\n+  void load_base(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<OP_LOAD_MAJOR, width>(Rd->raw_encoding(), Rs, offset);\n+  }\n+\n+  template <LoadWidthFunct3 width>\n+  void load_base(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    load_base<OP_FP_LOAD_MAJOR, width>(Rd->raw_encoding(), Rs, offset);\n+  }\n+\n+ public:\n+\n+  void lb(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_BYTE>(Rd, Rs, offset);\n+  }\n+\n+  void _lbu(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_BYTE_UNSIGNED>(Rd, Rs, offset);\n+  }\n+\n+  void _lh(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_HALFWORD>(Rd, Rs, offset);\n+  }\n+\n+  void _lhu(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_HALFWORD_UNSIGNED>(Rd, Rs, offset);\n+  }\n+\n+  void _lw(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_WORD>(Rd, Rs, offset);\n+  }\n+\n+  void lwu(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_WORD_UNSIGNED>(Rd, Rs, offset);\n+  }\n+\n+  void _ld(Register Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_DOUBLEWORD>(Rd, Rs, offset);\n+  }\n+\n+  void flh(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_HALFWORD>(Rd, Rs, offset);\n+  }\n+\n+  void flw(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_WORD>(Rd, Rs, offset);\n+  }\n+\n+  void _fld(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    load_base<LOAD_WIDTH_DOUBLEWORD>(Rd, Rs, offset);\n+  }\n@@ -727,15 +784,1 @@\n-#define INSN(NAME, REGISTER, op, funct3)                                                                    \\\n-  void NAME(REGISTER Rs1, Register Rs2, const int32_t offset) {                                             \\\n-    guarantee(is_simm12(offset), \"offset is invalid.\");                                                     \\\n-    unsigned insn = 0;                                                                                      \\\n-    uint32_t val  = offset & 0xfff;                                                                         \\\n-    uint32_t low  = val & 0x1f;                                                                             \\\n-    uint32_t high = (val >> 5) & 0x7f;                                                                      \\\n-    patch((address)&insn, 6, 0, op);                                                                        \\\n-    patch((address)&insn, 14, 12, funct3);                                                                  \\\n-    patch_reg((address)&insn, 15, Rs2);                                                                     \\\n-    patch_reg((address)&insn, 20, Rs1);                                                                     \\\n-    patch((address)&insn, 11, 7, low);                                                                      \\\n-    patch((address)&insn, 31, 25, high);                                                                    \\\n-    emit(insn);                                                                                             \\\n-  }                                                                                                         \\\n+ private:\n@@ -743,6 +786,7 @@\n-  INSN(_sb,   Register,      0b0100011, 0b000);\n-  INSN(_sh,   Register,      0b0100011, 0b001);\n-  INSN(_sw,  Register,      0b0100011, 0b010);\n-  INSN(_sd,  Register,      0b0100011, 0b011);\n-  INSN(fsw,  FloatRegister, 0b0100111, 0b010);\n-  INSN(_fsd, FloatRegister, 0b0100111, 0b011);\n+  enum StoreWidthFunct3 : uint8_t {\n+    STORE_WIDTH_BYTE        = 0b000,\n+    STORE_WIDTH_HALFWORD    = 0b001,\n+    STORE_WIDTH_WORD        = 0b010,\n+    STORE_WIDTH_DOUBLEWORD  = 0b011,\n+    \/\/ 0b100 to 0b111 are reserved for this opcode\n+  };\n@@ -750,1 +794,54 @@\n-#undef INSN\n+  static constexpr uint8_t OP_STORE_MAJOR    = 0b0100011;\n+  static constexpr uint8_t OP_FP_STORE_MAJOR = 0b0100111;\n+\n+  template <uint8_t op_code, StoreWidthFunct3 width>\n+  void store_base(uint8_t Rs2, Register Rs1, const int32_t offset) {\n+    guarantee(is_simm12(offset), \"offset is invalid.\");\n+    unsigned insn = 0;\n+    uint32_t val  = offset & 0xfff;\n+    uint32_t low  = val & 0x1f;\n+    uint32_t high = (val >> 5) & 0x7f;\n+    patch((address)&insn,  6,  0, op_code);\n+    patch((address)&insn, 11,  7, low);\n+    patch((address)&insn, 14, 12, width);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 24, 20, Rs2);\n+    patch((address)&insn, 31, 25, high);\n+    emit(insn);\n+  }\n+\n+  template <StoreWidthFunct3 width>\n+  void store_base(Register Rs2, Register Rs1, const int32_t offset) {\n+    store_base<OP_STORE_MAJOR, width>(Rs2->raw_encoding(), Rs1, offset);\n+  }\n+\n+  template <StoreWidthFunct3 width>\n+  void store_base(FloatRegister Rs2, Register Rs1, const int32_t offset) {\n+    store_base<OP_FP_STORE_MAJOR, width>(Rs2->raw_encoding(), Rs1, offset);\n+  }\n+\n+ public:\n+\n+  void _sb(Register Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_BYTE>(Rs2, Rs1, offset);\n+  }\n+\n+  void _sh(Register Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_HALFWORD>(Rs2, Rs1, offset);\n+  }\n+\n+  void _sw(Register Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_WORD>(Rs2, Rs1, offset);\n+  }\n+\n+  void _sd(Register Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_DOUBLEWORD>(Rs2, Rs1, offset);\n+  }\n+\n+  void fsw(FloatRegister Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_WORD>(Rs2, Rs1, offset);\n+  }\n+\n+  void _fsd(FloatRegister Rs2, Register Rs1, const int32_t offset) {\n+    store_base<STORE_WIDTH_DOUBLEWORD>(Rs2, Rs1, offset);\n+  }\n@@ -1348,23 +1445,0 @@\n- private:\n-  static constexpr unsigned int OP_LOAD_FP = 0b0000111;\n-\n-  template <int8_t FpWidth>\n-  void fp_load(FloatRegister Rd, Register Rs, const int32_t offset) {\n-    guarantee(is_uimm3(FpWidth), \"Rounding mode is out of validity\");\n-    guarantee(is_simm12(offset), \"offset is invalid.\");\n-    unsigned insn = 0;\n-    uint32_t val = offset & 0xfff;\n-    patch((address)&insn,   6, 0, OP_LOAD_FP);\n-    patch_reg((address)&insn,  7, Rd);\n-    patch((address)&insn, 14, 12, FpWidth);\n-    patch_reg((address)&insn, 15, Rs);\n-    patch((address)&insn, 31, 20, val);\n-    emit(insn);\n-  }\n-\n- public:\n-\n-  void  flh(FloatRegister Rd, Register Rs, const int32_t offset) { fp_load<0b001>(Rd, Rs, offset); }\n-  void  flw(FloatRegister Rd, Register Rs, const int32_t offset) { fp_load<0b010>(Rd, Rs, offset); }\n-  void _fld(FloatRegister Rd, Register Rs, const int32_t offset) { fp_load<0b011>(Rd, Rs, offset); }\n-\n@@ -3188,13 +3262,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, Register Rs, const int32_t offset) {                                \\\n-    \/* lw -> c.lwsp\/c.lw *\/                                                                  \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_lwswsp(Rs, Rd, offset, true)) {                                               \\\n-        c_lwsp(Rd, offset);                                                                  \\\n-        return;                                                                              \\\n-      } else if (is_c_lwsw(Rs, Rd, offset)) {                                                \\\n-        c_lw(Rd, Rs, offset);                                                                \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _lw(Rd, Rs, offset);                                                                     \\\n+  void lw(Register Rd, Register Rs, const int32_t offset) {\n+    \/* lw -> c.lwsp\/c.lw *\/\n+    if (do_compress()) {\n+      if (is_c_lwswsp(Rs, Rd, offset, true)) {\n+        c_lwsp(Rd, offset);\n+        return;\n+      } else if (is_c_lwsw(Rs, Rd, offset)) {\n+        c_lw(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _lw(Rd, Rs, offset);\n@@ -3203,4 +3276,0 @@\n-  INSN(lw);\n-\n-#undef INSN\n-\n@@ -3208,13 +3277,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, Register Rs, const int32_t offset) {                                \\\n-    \/* ld -> c.ldsp\/c.ld *\/                                                                  \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_ldsdsp(Rs, Rd, offset, true)) {                                               \\\n-        c_ldsp(Rd, offset);                                                                  \\\n-        return;                                                                              \\\n-      } else if (is_c_ldsd(Rs, Rd, offset)) {                                                \\\n-        c_ld(Rd, Rs, offset);                                                                \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _ld(Rd, Rs, offset);                                                                     \\\n+  void ld(Register Rd, Register Rs, const int32_t offset) {\n+    \/* ld -> c.ldsp\/c.ld *\/\n+    if (do_compress()) {\n+      if (is_c_ldsdsp(Rs, Rd, offset, true)) {\n+        c_ldsp(Rd, offset);\n+        return;\n+      } else if (is_c_ldsd(Rs, Rd, offset)) {\n+        c_ld(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _ld(Rd, Rs, offset);\n@@ -3223,4 +3291,0 @@\n-  INSN(ld);\n-\n-#undef INSN\n-\n@@ -3228,13 +3292,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(FloatRegister Rd, Register Rs, const int32_t offset) {                           \\\n-    \/* fld -> c.fldsp\/c.fld *\/                                                               \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_fldsdsp(Rs, offset)) {                                                        \\\n-        c_fldsp(Rd, offset);                                                                 \\\n-        return;                                                                              \\\n-      } else if (is_c_fldsd(Rs, Rd, offset)) {                                               \\\n-        c_fld(Rd, Rs, offset);                                                               \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _fld(Rd, Rs, offset);                                                                    \\\n+  void fld(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    \/* fld -> c.fldsp\/c.fld *\/\n+    if (do_compress()) {\n+      if (is_c_fldsdsp(Rs, offset)) {\n+        c_fldsp(Rd, offset);\n+        return;\n+      } else if (is_c_fldsd(Rs, Rd, offset)) {\n+        c_fld(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _fld(Rd, Rs, offset);\n@@ -3243,4 +3306,0 @@\n-  INSN(fld);\n-\n-#undef INSN\n-\n@@ -3248,13 +3307,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, Register Rs, const int32_t offset) {                                \\\n-    \/* sd -> c.sdsp\/c.sd *\/                                                                  \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_ldsdsp(Rs, Rd, offset, false)) {                                              \\\n-        c_sdsp(Rd, offset);                                                                  \\\n-        return;                                                                              \\\n-      } else if (is_c_ldsd(Rs, Rd, offset)) {                                                \\\n-        c_sd(Rd, Rs, offset);                                                                \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _sd(Rd, Rs, offset);                                                                     \\\n+  void sd(Register Rd, Register Rs, const int32_t offset) {\n+    \/* sd -> c.sdsp\/c.sd *\/\n+    if (do_compress()) {\n+      if (is_c_ldsdsp(Rs, Rd, offset, false)) {\n+        c_sdsp(Rd, offset);\n+        return;\n+      } else if (is_c_ldsd(Rs, Rd, offset)) {\n+        c_sd(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _sd(Rd, Rs, offset);\n@@ -3263,4 +3321,0 @@\n-  INSN(sd);\n-\n-#undef INSN\n-\n@@ -3268,13 +3322,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, Register Rs, const int32_t offset) {                                \\\n-    \/* sw -> c.swsp\/c.sw *\/                                                                  \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_lwswsp(Rs, Rd, offset, false)) {                                              \\\n-        c_swsp(Rd, offset);                                                                  \\\n-        return;                                                                              \\\n-      } else if (is_c_lwsw(Rs, Rd, offset)) {                                                \\\n-        c_sw(Rd, Rs, offset);                                                                \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _sw(Rd, Rs, offset);                                                                     \\\n+  void sw(Register Rd, Register Rs, const int32_t offset) {\n+    \/* sw -> c.swsp\/c.sw *\/\n+    if (do_compress()) {\n+      if (is_c_lwswsp(Rs, Rd, offset, false)) {\n+        c_swsp(Rd, offset);\n+        return;\n+      } else if (is_c_lwsw(Rs, Rd, offset)) {\n+        c_sw(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _sw(Rd, Rs, offset);\n@@ -3283,4 +3336,0 @@\n-  INSN(sw);\n-\n-#undef INSN\n-\n@@ -3288,13 +3337,12 @@\n-#define INSN(NAME)                                                                           \\\n-  void NAME(FloatRegister Rd, Register Rs, const int32_t offset) {                           \\\n-    \/* fsd -> c.fsdsp\/c.fsd *\/                                                               \\\n-    if (do_compress()) {                                                                     \\\n-      if (is_c_fldsdsp(Rs, offset)) {                                                        \\\n-        c_fsdsp(Rd, offset);                                                                 \\\n-        return;                                                                              \\\n-      } else if (is_c_fldsd(Rs, Rd, offset)) {                                               \\\n-        c_fsd(Rd, Rs, offset);                                                               \\\n-        return;                                                                              \\\n-      }                                                                                      \\\n-    }                                                                                        \\\n-    _fsd(Rd, Rs, offset);                                                                    \\\n+  void fsd(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    \/* fsd -> c.fsdsp\/c.fsd *\/\n+    if (do_compress()) {\n+      if (is_c_fldsdsp(Rs, offset)) {\n+        c_fsdsp(Rd, offset);\n+        return;\n+      } else if (is_c_fldsd(Rs, Rd, offset)) {\n+        c_fsd(Rd, Rs, offset);\n+        return;\n+      }\n+    }\n+    _fsd(Rd, Rs, offset);\n@@ -3303,4 +3351,0 @@\n-  INSN(fsd);\n-\n-#undef INSN\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":213,"deletions":169,"binary":false,"changes":382,"status":"modified"}]}