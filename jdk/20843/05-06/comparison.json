{"files":[{"patch":"@@ -151,1 +151,1 @@\n-    log_info(cds, aot, link)(\"%s %s\", ArchiveUtils::class_category(ik), ik->external_name());\n+    log_info(cds, aot, link)(\"%s %s\", class_category_name(ik), ik->external_name());\n@@ -211,1 +211,1 @@\n-    const char* category = ArchiveUtils::class_category(list.at(0));\n+    const char* category = class_category_name(list.at(0));\n@@ -246,0 +246,47 @@\n+\n+\/\/ Used in logging: \"boot1\", \"boot2\", \"plat\", \"app\" and \"unreg\";\n+const char* AOTClassLinker::class_category_name(Klass* k) {\n+  if (ArchiveBuilder::is_active() && ArchiveBuilder::current()->is_in_buffer_space(k)) {\n+    k = ArchiveBuilder::current()->get_source_addr(k);\n+  }\n+\n+  if (k->is_array_klass()) {\n+    return \"array\";\n+  } else {\n+    oop loader = k->class_loader();\n+    if (loader == nullptr) {\n+      if (k->module() != nullptr &&\n+          k->module()->name() != nullptr &&\n+          k->module()->name()->equals(\"java.base\")) {\n+        return \"boot1\"; \/\/ boot classes in java.base are loaded in the 1st phase\n+      } else {\n+        return \"boot2\"; \/\/ boot classes outside of java.base are loaded in the 2nd phase phase\n+      }\n+    } else {\n+      if (loader == SystemDictionary::java_platform_loader()) {\n+        return \"plat\";\n+      } else if (loader == SystemDictionary::java_system_loader()) {\n+        return \"app\";\n+      } else {\n+        return \"unreg\";\n+      }\n+    }\n+  }\n+}\n+\n+const char* AOTClassLinker::class_category_name(AOTLinkedClassCategory category) {\n+  switch (category) {\n+  case AOTLinkedClassCategory::BOOT1:\n+    return \"boot1\";\n+  case AOTLinkedClassCategory::BOOT2:\n+    return \"boot2\";\n+  case AOTLinkedClassCategory::PLATFORM:\n+    return \"plat\";\n+  case AOTLinkedClassCategory::APP:\n+    return \"app\";\n+  case AOTLinkedClassCategory::UNREGISTERED:\n+  default:\n+      return \"unreg\";\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-\n+enum class AOTLinkedClassCategory : int;\n@@ -113,0 +113,15 @@\n+\n+  \/\/ Used in logging: \"boot1\", \"boot2\", \"plat\", \"app\" and \"unreg\";\n+  \/\/ Corresponds to AOTLinkedClassCategory.\n+  static const char* class_category_name(Klass* k);\n+  static const char* class_category_name(AOTLinkedClassCategory category);\n+};\n+\n+\/\/ AOT-linked classes are divided into different categories and are loaded\n+\/\/ in two phases during the production run.\n+enum class AOTLinkedClassCategory : int {\n+  BOOT1,       \/\/ Only java.base classes are loaded in the 1st phase\n+  BOOT2,       \/\/ All boots classes that not in java.base are loaded in the 2nd phase\n+  PLATFORM,\n+  APP,    \n+  UNREGISTERED \/\/ classes loaded outside of the boot\/platform\/app loaders; currently not supported by AOTClassLinker\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.hpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/aotClassLinker.hpp\"\n@@ -28,2 +29,0 @@\n-#include \"cds\/archiveBuilder.hpp\"\n-#include \"cds\/archiveUtils.inline.hpp\"\n@@ -31,4 +30,1 @@\n-#include \"cds\/heapShared.hpp\"\n-#include \"classfile\/classLoader.hpp\"\n-#include \"classfile\/dictionary.hpp\"\n-#include \"classfile\/javaClasses.hpp\"\n+#include \"classfile\/classLoaderData.hpp\"\n@@ -38,1 +34,0 @@\n-#include \"gc\/shared\/gcVMOperations.hpp\"\n@@ -49,2 +44,3 @@\n-void AOTLinkedClassBulkLoader::load_javabase_boot_classes(JavaThread* current) {\n-  load_classes_in_loader(current, LoaderKind::BOOT, nullptr);\n+void AOTLinkedClassBulkLoader::load_javabase_classes(JavaThread* current) {\n+  assert(CDSConfig::is_using_aot_linked_classes(), \"sanity\");\n+  load_classes_in_loader(current, AOTLinkedClassCategory::BOOT1, nullptr); \/\/ only java.base classes\n@@ -53,3 +49,2 @@\n-void AOTLinkedClassBulkLoader::load_non_javabase_boot_classes(JavaThread* current) {\n-  load_classes_in_loader(current, LoaderKind::BOOT2, nullptr);\n-}\n+void AOTLinkedClassBulkLoader::load_non_javabase_classes(JavaThread* current) {\n+  assert(CDSConfig::is_using_aot_linked_classes(), \"sanity\");\n@@ -57,3 +52,6 @@\n-void AOTLinkedClassBulkLoader::load_platform_classes(JavaThread* current) {\n-  load_classes_in_loader(current, LoaderKind::PLATFORM, SystemDictionary::java_platform_loader());\n-}\n+  \/\/ is_using_aot_linked_classes() requires is_using_full_module_graph(). As a result,\n+  \/\/ the platform\/system class loader should already have been initialized as part\n+  \/\/ of the FMG support.\n+  assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n+  assert(SystemDictionary::java_platform_loader() != nullptr, \"must be\");\n+  assert(SystemDictionary::java_system_loader() != nullptr,   \"must be\");\n@@ -61,2 +59,3 @@\n-void AOTLinkedClassBulkLoader::load_app_classes(JavaThread* current) {\n-  load_classes_in_loader(current, LoaderKind::APP, SystemDictionary::java_system_loader());\n+  load_classes_in_loader(current, AOTLinkedClassCategory::BOOT2, nullptr); \/\/ all boot classes outside of java.base\n+  load_classes_in_loader(current, AOTLinkedClassCategory::PLATFORM, SystemDictionary::java_platform_loader());\n+  load_classes_in_loader(current, AOTLinkedClassCategory::APP, SystemDictionary::java_system_loader());\n@@ -65,1 +64,1 @@\n-void AOTLinkedClassBulkLoader::load_classes_in_loader(JavaThread* current, LoaderKind loader_kind, oop class_loader_oop) {\n+void AOTLinkedClassBulkLoader::load_classes_in_loader(JavaThread* current, AOTLinkedClassCategory class_category, oop class_loader_oop) {\n@@ -70,1 +69,1 @@\n-  load_classes_in_loader_impl(loader_kind, class_loader_oop, current);\n+  load_classes_in_loader_impl(class_category, class_loader_oop, current);\n@@ -85,1 +84,1 @@\n-void AOTLinkedClassBulkLoader::load_classes_in_loader_impl(LoaderKind loader_kind, oop class_loader_oop, TRAPS) {\n+void AOTLinkedClassBulkLoader::load_classes_in_loader_impl(AOTLinkedClassCategory class_category, oop class_loader_oop, TRAPS) {\n@@ -91,2 +90,2 @@\n-  load_table(AOTLinkedClassTable::for_static_archive(),  loader_kind, h_loader, CHECK);\n-  load_table(AOTLinkedClassTable::for_dynamic_archive(), loader_kind, h_loader, CHECK);\n+  load_table(AOTLinkedClassTable::for_static_archive(),  class_category, h_loader, CHECK);\n+  load_table(AOTLinkedClassTable::for_dynamic_archive(), class_category, h_loader, CHECK);\n@@ -101,2 +100,2 @@\n-void AOTLinkedClassBulkLoader::load_table(AOTLinkedClassTable* table, LoaderKind loader_kind, Handle loader, TRAPS) {\n-  if (loader_kind != LoaderKind::BOOT) {\n+void AOTLinkedClassBulkLoader::load_table(AOTLinkedClassTable* table, AOTLinkedClassCategory class_category, Handle loader, TRAPS) {\n+  if (class_category != AOTLinkedClassCategory::BOOT1) {\n@@ -106,3 +105,4 @@\n-  switch (loader_kind) {\n-  case LoaderKind::BOOT:\n-    load_classes_impl(loader_kind, table->boot(), \"boot \", loader, CHECK);\n+  const char* category_name = AOTClassLinker::class_category_name(class_category);\n+  switch (class_category) {\n+  case AOTLinkedClassCategory::BOOT1:\n+    load_classes_impl(class_category, table->boot(), category_name, loader, CHECK);\n@@ -111,2 +111,2 @@\n-  case LoaderKind::BOOT2:\n-    load_classes_impl(loader_kind, table->boot2(), \"boot2\", loader, CHECK);\n+  case AOTLinkedClassCategory::BOOT2:\n+    load_classes_impl(class_category, table->boot2(), category_name, loader, CHECK);\n@@ -115,1 +115,1 @@\n-  case LoaderKind::PLATFORM:\n+  case AOTLinkedClassCategory::PLATFORM:\n@@ -117,5 +117,3 @@\n-      const char* category = \"plat \";\n-      initiate_loading(THREAD, category, loader, table->boot());\n-      initiate_loading(THREAD, category, loader, table->boot2());\n-\n-      load_classes_impl(loader_kind, table->platform(), category, loader, CHECK);\n+      initiate_loading(THREAD, category_name, loader, table->boot());\n+      initiate_loading(THREAD, category_name, loader, table->boot2());\n+      load_classes_impl(class_category, table->platform(), category_name, loader, CHECK);\n@@ -124,1 +122,1 @@\n-  case LoaderKind::APP:\n+  case AOTLinkedClassCategory::APP:\n@@ -126,6 +124,4 @@\n-      const char* category = \"app  \";\n-      initiate_loading(THREAD, category, loader, table->boot());\n-      initiate_loading(THREAD, category, loader, table->boot2());\n-      initiate_loading(THREAD, category, loader, table->platform());\n-\n-      load_classes_impl(loader_kind, table->app(), category, loader, CHECK);\n+      initiate_loading(THREAD, category_name, loader, table->boot());\n+      initiate_loading(THREAD, category_name, loader, table->boot2());\n+      initiate_loading(THREAD, category_name, loader, table->platform());\n+      load_classes_impl(class_category, table->app(), category_name, loader, CHECK);\n@@ -133,0 +129,4 @@\n+    break;\n+  case AOTLinkedClassCategory::UNREGISTERED:\n+    ShouldNotReachHere(); \/\/ Currently aot-linked classes are not supported for this category.\n+    break;\n@@ -136,1 +136,2 @@\n-void AOTLinkedClassBulkLoader::load_classes_impl(LoaderKind loader_kind, Array<InstanceKlass*>* classes, const char* category, Handle loader, TRAPS) {\n+void AOTLinkedClassBulkLoader::load_classes_impl(AOTLinkedClassCategory class_category, Array<InstanceKlass*>* classes,\n+                                                 const char* category_name, Handle loader, TRAPS) {\n@@ -147,1 +148,1 @@\n-      log_info(cds, aot, load)(\"%s %s%s%s\", category, ik->external_name(),\n+      log_info(cds, aot, load)(\"%-5s %s%s%s\", category_name, ik->external_name(),\n@@ -166,1 +167,1 @@\n-          log_error(cds)(\"Unable to resolve %s class from CDS archive: %s\", category, ik->external_name());\n+          log_error(cds)(\"Unable to resolve %s class from CDS archive: %s\", category_name, ik->external_name());\n@@ -185,1 +186,1 @@\n-void AOTLinkedClassBulkLoader::initiate_loading(JavaThread* current, const char* category,\n+void AOTLinkedClassBulkLoader::initiate_loading(JavaThread* current, const char* category_name,\n@@ -206,1 +207,1 @@\n-        log_info(cds, aot, load)(\"%s %s (initiated, defined by %s)\", category, ik->external_name(),\n+        log_info(cds, aot, load)(\"%s %s (initiated, defined by %s)\", category_name, ik->external_name(),\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":48,"deletions":47,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+enum class AOTLinkedClassCategory : int;\n@@ -45,10 +46,3 @@\n-  enum class LoaderKind : int {\n-    BOOT,\n-    BOOT2,\n-    PLATFORM,\n-    APP\n-  };\n-\n-  static void load_classes_in_loader(JavaThread* current, LoaderKind loader_kind, oop class_loader_oop);\n-  static void load_classes_in_loader_impl(LoaderKind loader_kind, oop class_loader_oop, TRAPS);\n-  static void load_table(AOTLinkedClassTable* table, LoaderKind loader_kind, Handle loader, TRAPS);\n+  static void load_classes_in_loader(JavaThread* current, AOTLinkedClassCategory class_category, oop class_loader_oop);\n+  static void load_classes_in_loader_impl(AOTLinkedClassCategory class_category, oop class_loader_oop, TRAPS);\n+  static void load_table(AOTLinkedClassTable* table, AOTLinkedClassCategory class_category, Handle loader, TRAPS);\n@@ -56,1 +50,2 @@\n-  static void load_classes_impl(LoaderKind loader_kind, Array<InstanceKlass*>* classes, const char* category, Handle loader, TRAPS);\n+  static void load_classes_impl(AOTLinkedClassCategory class_category, Array<InstanceKlass*>* classes,\n+                                const char* category_name, Handle loader, TRAPS);\n@@ -59,1 +54,1 @@\n-  static void serialize(SerializeClosure* soc, bool is_static_archive);\n+  static void serialize(SerializeClosure* soc, bool is_static_archive) NOT_CDS_RETURN;\n@@ -61,4 +56,2 @@\n-  static void load_javabase_boot_classes(JavaThread* current);\n-  static void load_non_javabase_boot_classes(JavaThread* current);\n-  static void load_platform_classes(JavaThread* current);\n-  static void load_app_classes(JavaThread* current);\n+  static void load_javabase_classes(JavaThread* current) NOT_CDS_RETURN;\n+  static void load_non_javabase_classes(JavaThread* current) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.hpp","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -373,31 +373,0 @@\n-\n-\/\/ Used in logging: \"boot\", \"boot2\", \"plat\", \"app\" and \"unreg\";\n-const char* ArchiveUtils::class_category(Klass* k) {\n-  if (ArchiveBuilder::is_active() && ArchiveBuilder::current()->is_in_buffer_space(k)) {\n-    k = ArchiveBuilder::current()->get_source_addr(k);\n-  }\n-\n-  if (k->is_array_klass()) {\n-    return \"array\";\n-  } else {\n-    oop loader = k->class_loader();\n-    if (loader == nullptr) {\n-      if (k->module() != nullptr &&\n-          k->module()->name() != nullptr &&\n-          k->module()->name()->equals(\"java.base\")) {\n-        return \"boot\"; \/\/ boot classes in java.base\n-      } else {\n-        return \"boot2\"; \/\/ boot classes outside of java.base\n-      }\n-    } else {\n-      if (loader == SystemDictionary::java_platform_loader()) {\n-        return \"plat\";\n-      } else if (loader == SystemDictionary::java_system_loader()) {\n-        return \"app\";\n-      } else {\n-        return \"unreg\";\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -256,3 +256,0 @@\n-\n-  \/\/ Used in logging: \"boot\", \"boot2\", \"plat\", \"app\" and \"unreg\";\n-  static const char* class_category(Klass* k);\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-    AOTLinkedClassBulkLoader::load_javabase_boot_classes(THREAD);\n+    AOTLinkedClassBulkLoader::load_javabase_classes(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -321,13 +321,0 @@\n-\n-  if (CDSConfig::is_using_aot_linked_classes()) {\n-    \/\/ is_using_aot_linked_classes() requires is_using_full_module_graph(). As a result,\n-    \/\/ the platform\/system class loader should already have been initialized as part\n-    \/\/ of the FMG support.\n-    assert(CDSConfig::is_using_full_module_graph(), \"must be\");\n-    assert(SystemDictionary::java_platform_loader() != nullptr, \"must be\");\n-    assert(SystemDictionary::java_system_loader() != nullptr,   \"must be\");\n-\n-    AOTLinkedClassBulkLoader::load_non_javabase_boot_classes(THREAD);\n-    AOTLinkedClassBulkLoader::load_platform_classes(THREAD);\n-    AOTLinkedClassBulkLoader::load_app_classes(THREAD);\n-  }\n@@ -749,0 +736,4 @@\n+  if (CDSConfig::is_using_aot_linked_classes()) {\n+    AOTLinkedClassBulkLoader::load_non_javabase_classes(THREAD);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"}]}