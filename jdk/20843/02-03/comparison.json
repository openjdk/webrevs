{"files":[{"patch":"@@ -71,1 +71,2 @@\n-  using ClassesTable = ResourceHashtable<InstanceKlass*, bool, 15889, AnyObj::C_HEAP, mtClassShared>;\n+  static const int TABLE_SIZE = 15889; \/\/ prime number\n+  using ClassesTable = ResourceHashtable<InstanceKlass*, bool, TABLE_SIZE, AnyObj::C_HEAP, mtClassShared>;\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-  using ClassesTable = ResourceHashtable<InstanceKlass*, bool, 15889, AnyObj::C_HEAP, mtClassShared> ;\n+  static const int TABLE_SIZE = 15889; \/\/ prime number\n+  using ClassesTable = ResourceHashtable<InstanceKlass*, bool, TABLE_SIZE, AnyObj::C_HEAP, mtClassShared> ;\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -177,2 +177,2 @@\n-\/\/ Initiate loading of the <classes> in the <loader>. The <classes> should have already been loaded\n-\/\/ by a parent loader of the <loader>. This is necessary for handling pre-resolved CP entries.\n+\/\/ Initiate loading of the <classes> in the <initiating_loader>. The <classes> should have already been loaded\n+\/\/ by a parent loader of the <initiating_loader>. This is necessary for handling pre-resolved CP entries.\n@@ -184,1 +184,1 @@\n-\/\/ AOT-linked classes loaded by <loader>.\n+\/\/ AOT-linked classes loaded by <initiating_loader>.\n@@ -186,1 +186,1 @@\n-                                                Handle loader, Array<InstanceKlass*>* classes) {\n+                                                Handle initiating_loader, Array<InstanceKlass*>* classes) {\n@@ -191,1 +191,3 @@\n-  ClassLoaderData* loader_data = ClassLoaderData::class_loader_data(loader());\n+  assert(initiating_loader() == SystemDictionary::java_platform_loader() ||\n+         initiating_loader() == SystemDictionary::java_system_loader(), \"must be\");\n+  ClassLoaderData* loader_data = ClassLoaderData::class_loader_data(initiating_loader());\n@@ -197,0 +199,1 @@\n+    assert(ik->class_loader() != initiating_loader(), \"must be a parent loader\");\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  static void initiate_loading(JavaThread* current, const char* category, Handle loader, Array<InstanceKlass*>* classes);\n+  static void initiate_loading(JavaThread* current, const char* category, Handle initiating_loader, Array<InstanceKlass*>* classes);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-void CDSConfig::set_has_aot_linked_classes(bool is_static_archive, bool has_aot_linked_classes) {\n+void CDSConfig::set_has_aot_linked_classes(bool has_aot_linked_classes) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static void set_has_aot_linked_classes(bool is_static_archive, bool has_aot_linked_classes) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void set_has_aot_linked_classes(bool has_aot_linked_classes) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2388,1 +2388,1 @@\n-    CDSConfig::set_has_aot_linked_classes(is_static(), true);\n+    CDSConfig::set_has_aot_linked_classes(true);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}