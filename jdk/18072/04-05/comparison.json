{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm AsyncCloseAndInterrupt\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED AsyncCloseAndInterrupt\n@@ -47,2 +47,7 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n@@ -60,0 +65,17 @@\n+    private static int mkfifo(String path) throws Throwable {\n+        Linker linker = Linker.nativeLinker();\n+        SymbolLookup stdlib = linker.defaultLookup();\n+        MethodHandle mkfifo = linker.downcallHandle(\n+            stdlib.find(\"mkfifo\").orElseThrow(),\n+            FunctionDescriptor.of(ValueLayout.JAVA_INT,\n+                                  ValueLayout.ADDRESS, ValueLayout.JAVA_INT)\n+        );\n+\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment cString = arena.allocateFrom(path);\n+            int mode = 0666;\n+            int returnValue = (int)mkfifo.invokeExact(cString, mode);\n+            return returnValue;\n+        }\n+    }\n+\n@@ -141,7 +163,2 @@\n-        ProcessBuilder pb = new ProcessBuilder(\"mkfifo\", fifoFile.toString());\n-        OutputAnalyzer oa = ProcessTools.executeProcess(pb);\n-        oa.waitFor();\n-        if (oa.getExitValue() != 0) {\n-            String stderr = oa.getStderr();\n-            if (stderr.contains(\"mkfifo\") &&\n-                stderr.contains(\"Operation not supported\")) {\n+        try {\n+            if (mkfifo(fifoFile.toString()) != 0) {\n@@ -151,4 +168,0 @@\n-            } else {\n-                throw new IOException(\"Error creating fifo \\\"\" +\n-                    fifoFile.getAbsolutePath() + \"\\\"\\n\" +\n-                    ProcessTools.getProcessLog(pb, oa));\n@@ -156,0 +169,2 @@\n+        } catch (Throwable cause) {\n+            throw new IOException(cause);\n","filename":"test\/jdk\/java\/nio\/channels\/AsyncCloseAndInterrupt.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"}]}