{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run main\/othervm AsyncCloseAndInterrupt\n+ * @library \/test\/lib\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED AsyncCloseAndInterrupt\n@@ -46,0 +47,8 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+\n@@ -56,0 +65,17 @@\n+    private static int mkfifo(String path) throws Throwable {\n+        Linker linker = Linker.nativeLinker();\n+        SymbolLookup stdlib = linker.defaultLookup();\n+        MethodHandle mkfifo = linker.downcallHandle(\n+            stdlib.find(\"mkfifo\").orElseThrow(),\n+            FunctionDescriptor.of(ValueLayout.JAVA_INT,\n+                                  ValueLayout.ADDRESS, ValueLayout.JAVA_INT)\n+        );\n+\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment cString = arena.allocateFrom(path);\n+            int mode = 0666;\n+            int returnValue = (int)mkfifo.invokeExact(cString, mode);\n+            return returnValue;\n+        }\n+    }\n+\n@@ -136,4 +162,0 @@\n-        Process p = Runtime.getRuntime().exec(\"mkfifo \" + fifoFile);\n-        if (p.waitFor() != 0)\n-            throw new IOException(\"Error creating fifo\");\n-        new RandomAccessFile(fifoFile, \"rw\").close();\n@@ -141,0 +163,10 @@\n+        try {\n+            if (mkfifo(fifoFile.toString()) != 0) {\n+                fifoFile = null;\n+                log.println(\"WARNING: mkfifo failed - cannot completely test FileChannels\");\n+                return;\n+            }\n+        } catch (Throwable cause) {\n+            throw new IOException(cause);\n+        }\n+        new RandomAccessFile(fifoFile, \"rw\").close();\n","filename":"test\/jdk\/java\/nio\/channels\/AsyncCloseAndInterrupt.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"}]}