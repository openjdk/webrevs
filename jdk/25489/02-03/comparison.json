{"files":[{"patch":"@@ -88,3 +88,3 @@\n-    private static final double OS_DEVICE_DPI = 72.0;\n-    private static final int DEFAULT_HRES = 300;\n-    private static final int DEFAULT_VRES = 300;\n+    private static final double USER_SPACE_DPI = 72.0;\n+    private static final int DEFAULT_DOC_DPI_X = 300;\n+    private static final int DEFAULT_DOC_DPI_Y = 300;\n@@ -116,2 +116,2 @@\n-    private double hRes = DEFAULT_HRES;\n-    private double vRes = DEFAULT_VRES;\n+    private double hRes = DEFAULT_DOC_DPI_X;\n+    private double vRes = DEFAULT_DOC_DPI_Y;\n@@ -767,1 +767,6 @@\n-        return getPageFormatArea(page, 1, 1);\n+        Rectangle2D.Double pageFormatArea =\n+            new Rectangle2D.Double(page.getImageableX(),\n+                    page.getImageableY(),\n+                    page.getImageableWidth(),\n+                    page.getImageableHeight());\n+        return pageFormatArea;\n@@ -770,14 +775,4 @@\n-    private Rectangle2D getPageFormatArea(PageFormat page, double scaleX, double scaleY) {\n-        Rectangle2D.Double pageFormatArea;\n-        if (scaleX != 1 && scaleY != 1) {\n-            pageFormatArea =\n-                    new Rectangle2D.Double(page.getImageableX() * scaleX,\n-                            page.getImageableY() * scaleY,\n-                            page.getImageableWidth() * scaleX,\n-                            page.getImageableHeight() * scaleY);\n-        } else {\n-            pageFormatArea =\n-                    new Rectangle2D.Double(page.getImageableX(),\n-                            page.getImageableY(),\n-                            page.getImageableWidth(),\n-                            page.getImageableHeight());\n+    private PageFormat scalePageFormat(PageFormat page, double scaleX, double scaleY) {\n+        PageFormat scaledPage = (PageFormat) page.clone();\n+        if (scaleX == 1 && scaleY == 1) {\n+            return scaledPage;\n@@ -785,1 +780,14 @@\n-        return pageFormatArea;\n+        Paper paper = page.getPaper();\n+        Paper scaledPaper = new Paper();\n+        scaledPaper.setSize(\n+                paper.getWidth() * scaleX,\n+                paper.getHeight() * scaleY\n+        );\n+        scaledPaper.setImageableArea(\n+                paper.getImageableX() * scaleX,\n+                paper.getImageableY() * scaleY,\n+                paper.getWidth() * scaleX,\n+                paper.getHeight() * scaleY\n+        );\n+        scaledPage.setPaper(scaledPaper);\n+        return scaledPage;\n@@ -843,3 +851,4 @@\n-                double scaleX = getXRes()\/OS_DEVICE_DPI;\n-                double scaleY = getYRes()\/OS_DEVICE_DPI;\n-                SurfaceData sd = CPrinterSurfaceData.createData(page, context); \/\/ Just stores page into an ivar\n+                double scaleX = getXRes()\/ USER_SPACE_DPI;\n+                double scaleY = getYRes()\/ USER_SPACE_DPI;\n+                PageFormat scaledPage = scalePageFormat(page, scaleX, scaleY);\n+                SurfaceData sd = CPrinterSurfaceData.createData(scaledPage, context); \/\/ Just stores page into an ivar\n@@ -850,4 +859,0 @@\n-                if (scaleX != 1 && scaleY != 1) {\n-                    ((SunGraphics2D) delegate).setDevClip(0, 0,\n-                            (int)(page.getWidth() * scaleX), (int)(page.getHeight() * scaleY));\n-                }\n@@ -855,1 +860,3 @@\n-                Rectangle2D pageFormatArea = getPageFormatArea(page, scaleX, scaleY);\n+                pathGraphics.scale(scaledPage.getWidth() \/ page.getWidth(),\n+                        scaledPage.getHeight() \/ page.getHeight());\n+                Rectangle2D pageFormatArea = getPageFormatArea(page);\n@@ -857,3 +864,0 @@\n-                if (scaleX != 1 && scaleY != 1) {\n-                    delegate.scale(scaleX, scaleY);\n-                }\n@@ -891,2 +895,0 @@\n-                double scaleX = getXRes()\/OS_DEVICE_DPI;\n-                double scaleY = getYRes()\/OS_DEVICE_DPI;\n@@ -896,0 +898,3 @@\n+                        double scaleX = getXRes() \/ USER_SPACE_DPI;\n+                        double scaleY = getYRes() \/ USER_SPACE_DPI;\n+                        PageFormat scaledPageFormat = scalePageFormat(pageFormat, scaleX, scaleY);\n@@ -898,2 +903,2 @@\n-                                  (int)Math.round(pageFormat.getWidth() * scaleX),\n-                                  (int)Math.round(pageFormat.getHeight() * scaleY),\n+                                  (int)Math.round(scaledPageFormat.getWidth()),\n+                                  (int)Math.round(scaledPageFormat.getHeight()),\n@@ -901,3 +906,6 @@\n-                        Graphics2D graphics2D = bimg.createGraphics();\n-                        PeekGraphics peekGraphics = createPeekGraphics(graphics2D, printerJob);\n-                        Rectangle2D pageFormatArea = getPageFormatArea(pageFormat, scaleX, scaleY);\n+                        PeekGraphics peekGraphics =\n+                         createPeekGraphics(bimg.createGraphics(), printerJob);\n+                        peekGraphics.scale(scaledPageFormat.getWidth() \/ pageFormat.getWidth(),\n+                                scaledPageFormat.getHeight() \/ pageFormat.getHeight());\n+                        Rectangle2D pageFormatArea =\n+                             getPageFormatArea(pageFormat);\n@@ -905,3 +913,1 @@\n-                        if (scaleX != 1 && scaleY != 1) {\n-                            graphics2D.scale(scaleX, scaleY);\n-                        }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":48,"deletions":42,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * Some default values for invalid CoreGraphics display ID.\n+ *\/\n+#define DEFAULT_DEVICE_WIDTH 1024\n+#define DEFAULT_DEVICE_HEIGHT 768\n+#define DEFAULT_DEVICE_DPI 72\n\\ No newline at end of file\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.h","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"CGraphicsDevice.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,0 @@\n-\/**\n- * Some default values for invalid CoreGraphics display ID.\n- *\/\n-#define DEFAULT_DEVICE_WIDTH 1024\n-#define DEFAULT_DEVICE_HEIGHT 768\n-#define DEFAULT_DEVICE_DPI 72\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/GeomUtilities.h","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#import \"CGraphicsDevice.h\"\n@@ -109,1 +110,1 @@\n-    \/\/Scale to default device DPI\n+    \/\/ Scale from the java document DPI to the user space DPI\n@@ -115,4 +116,8 @@\n-        double scaleX = DEFAULT_DEVICE_DPI\/hRes;\n-        double scaleY = DEFAULT_DEVICE_DPI\/vRes;\n-        if (scaleX != 1 && scaleY != 1) {\n-            CGContextScaleCTM(cgRef, scaleX, scaleY);\n+        double scaleX = DEFAULT_DEVICE_DPI \/ hRes;\n+        double scaleY = DEFAULT_DEVICE_DPI \/ vRes;\n+        if (scaleX != 1 || scaleY != 1) {\n+            if ([[[NSPrintOperation currentOperation] printInfo] orientation] == NSPortraitOrientation) {\n+                CGContextScaleCTM(cgRef, scaleX, scaleY);\n+            } else {\n+                CGContextScaleCTM(cgRef, scaleY, scaleX);\n+            }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n@@ -47,0 +49,1 @@\n+import java.awt.geom.GeneralPath;\n@@ -58,1 +61,1 @@\n- * @requires (os.family == \"linux\") | (os.family == \"mac\")\n+ * @requires os.family == \"mac\"\n@@ -66,1 +69,1 @@\n-    private static final int DEFAULT_PRINTER_DPI = 300;\n+    private static final int DEFAULT_DOCUMENT_DPI = 300;\n@@ -70,1 +73,1 @@\n-           This test checks printing DPI.\n+           This test checks document DPI.\n@@ -78,1 +81,2 @@\n-           A passing test will print choosen DPI on the printed page\n+           A passing test will print chosen DPI on the printed page,\n+           2 vertical and 2 horizontal lines.\n@@ -93,1 +97,1 @@\n-                .title(\"Printing DPI test\")\n+                .title(\"Document DPI test\")\n@@ -145,1 +149,1 @@\n-                        cbResolutions.addItem(new PrinterResolution(DEFAULT_PRINTER_DPI, DEFAULT_PRINTER_DPI, UNITS));\n+                        cbResolutions.addItem(new PrinterResolution(DEFAULT_DOCUMENT_DPI, DEFAULT_DOCUMENT_DPI, UNITS));\n@@ -211,1 +215,0 @@\n-        final int printOffset = 20;\n@@ -215,0 +218,1 @@\n+\n@@ -217,0 +221,13 @@\n+\n+        \/\/ Horizontal and vertical document resolution\n+        g2.drawLine((int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 5,\n+                (int)pageFormat.getImageableX() + 50, (int)pageFormat.getImageableY() + 5);\n+        g2.drawString(Integer.toString((int)hRes),\n+                (int)pageFormat.getImageableX() + 60,\n+                (int)pageFormat.getImageableY() + 5 + g2.getFontMetrics().getHeight() \/ 2);\n+\n+        g2.drawLine((int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 5,\n+                (int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 50);\n+        g2.drawString(Integer.toString((int)vRes),\n+                (int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 60);\n+\n@@ -221,2 +238,60 @@\n-        g2.drawString(msg, (int)(pageFormat.getImageableX() + printOffset),\n-                (int)(pageFormat.getImageableY() + printOffset));\n+\n+        int msgX = (int)pageFormat.getImageableX() +\n+                g2.getFontMetrics().stringWidth(Integer.toString((int)vRes)) + 20;\n+        int msgY = (int)pageFormat.getImageableY() +\n+                g2.getFontMetrics().getHeight() + 20;\n+\n+        g2.drawString(msg, msgX, msgY);\n+        msgY += 20;\n+        g2.drawString(\"ScaleX: \" + g2.getTransform().getScaleX(), msgX, msgY);\n+        msgY += 20;\n+        g2.drawString(\"ScaleY: \" + g2.getTransform().getScaleY(), msgX, msgY);\n+\n+        final float lineWidth = 0.2f;\n+        double pageWidth = pageFormat.getWidth();\n+        double xLeft = pageWidth \/ 10;\n+        double yBase = pageFormat.getHeight() \/ 2;\n+        double xBase = pageFormat.getWidth() \/ 2;\n+        double yTop = yBase + 40;\n+        double yBottom = pageFormat.getHeight() - pageFormat.getHeight() \/ 10;\n+\n+        g2.setStroke(new BasicStroke(lineWidth));\n+\n+        double xRight = pageWidth - xLeft;\n+        g2.drawLine((int) xLeft, (int) yBase + 80,\n+                (int) (xRight),(int) yBase + 80);\n+        g2.drawLine((int) xBase, (int) yTop,\n+                (int) (xBase),(int) yBottom);\n+\n+        GeneralPath line = new GeneralPath();\n+        double halfLineWidth = lineWidth \/ 2.0f;\n+        double yLine = yBase + 100;\n+        double xLine = xBase + 20;\n+        line.moveTo(xLeft, yLine);\n+        line.lineTo(xLeft, yLine - halfLineWidth);\n+        line.lineTo(xLine - halfLineWidth, yLine - halfLineWidth);\n+        line.lineTo(xLine - halfLineWidth, yTop);\n+        line.lineTo(xLine + halfLineWidth, yTop);\n+        line.lineTo(xLine + halfLineWidth, yLine - halfLineWidth);\n+        line.lineTo(xRight, yLine - halfLineWidth);\n+        line.lineTo(xRight, yLine + halfLineWidth);\n+        line.lineTo(xLine + halfLineWidth, yLine + halfLineWidth);\n+        line.lineTo(xLine + halfLineWidth, yBottom);\n+        line.lineTo(xLine - halfLineWidth, yBottom);\n+        line.lineTo(xLine - halfLineWidth, yLine + halfLineWidth);\n+        line.lineTo(xLeft, yLine + halfLineWidth );\n+        line.closePath();\n+        g2.clip(line);\n+\n+        g2.setColor(Color.RED);\n+\n+        line.reset();\n+        line.moveTo(xLeft, yLine);\n+        line.lineTo(xRight, yLine);\n+        g2.draw(line);\n+\n+        line.reset();\n+        line.moveTo(xBase + 20, yTop);\n+        line.lineTo(xBase + 20, yBottom);\n+        g2.draw(line);\n+\n","filename":"test\/jdk\/javax\/print\/PrintablePrintDPI.java","additions":84,"deletions":9,"binary":false,"changes":93,"status":"modified"}]}