{"files":[{"patch":"@@ -88,0 +88,3 @@\n+    private static final double USER_SPACE_DPI = 72.0;\n+    private static final int DEFAULT_DOC_DPI_X = 300;\n+    private static final int DEFAULT_DOC_DPI_Y = 300;\n@@ -113,0 +116,3 @@\n+    private double hRes = DEFAULT_DOC_DPI_X;\n+    private double vRes = DEFAULT_DOC_DPI_Y;\n+\n@@ -464,2 +470,1 @@\n-        \/\/ NOTE: This is not used in the CPrinterJob code path.\n-        return 0;\n+        return hRes;\n@@ -474,2 +479,7 @@\n-        \/\/ NOTE: This is not used in the CPrinterJob code path.\n-        return 0;\n+        return vRes;\n+    }\n+\n+    @Override\n+    protected void setXYRes(double x, double y) {\n+        hRes = x;\n+        vRes = y;\n@@ -765,0 +775,21 @@\n+    private PageFormat scalePageFormat(PageFormat page, double scaleX, double scaleY) {\n+        PageFormat scaledPage = (PageFormat) page.clone();\n+        if (scaleX == 1 && scaleY == 1) {\n+            return scaledPage;\n+        }\n+        Paper paper = page.getPaper();\n+        Paper scaledPaper = new Paper();\n+        scaledPaper.setSize(\n+                paper.getWidth() * scaleX,\n+                paper.getHeight() * scaleY\n+        );\n+        scaledPaper.setImageableArea(\n+                paper.getImageableX() * scaleX,\n+                paper.getImageableY() * scaleY,\n+                paper.getWidth() * scaleX,\n+                paper.getHeight() * scaleY\n+        );\n+        scaledPage.setPaper(scaledPaper);\n+        return scaledPage;\n+    }\n+\n@@ -820,1 +851,4 @@\n-                SurfaceData sd = CPrinterSurfaceData.createData(page, context); \/\/ Just stores page into an ivar\n+                double scaleX = getXRes()\/ USER_SPACE_DPI;\n+                double scaleY = getYRes()\/ USER_SPACE_DPI;\n+                PageFormat scaledPage = scalePageFormat(page, scaleX, scaleY);\n+                SurfaceData sd = CPrinterSurfaceData.createData(scaledPage, context); \/\/ Just stores page into an ivar\n@@ -825,1 +859,0 @@\n-\n@@ -827,0 +860,2 @@\n+                pathGraphics.scale(scaledPage.getWidth() \/ page.getWidth(),\n+                        scaledPage.getHeight() \/ page.getHeight());\n@@ -863,0 +898,3 @@\n+                        double scaleX = getXRes() \/ USER_SPACE_DPI;\n+                        double scaleY = getYRes() \/ USER_SPACE_DPI;\n+                        PageFormat scaledPageFormat = scalePageFormat(pageFormat, scaleX, scaleY);\n@@ -865,2 +903,2 @@\n-                                  (int)Math.round(pageFormat.getWidth()),\n-                                  (int)Math.round(pageFormat.getHeight()),\n+                                  (int)Math.round(scaledPageFormat.getWidth()),\n+                                  (int)Math.round(scaledPageFormat.getHeight()),\n@@ -870,0 +908,2 @@\n+                        peekGraphics.scale(scaledPageFormat.getWidth() \/ pageFormat.getWidth(),\n+                                scaledPageFormat.getHeight() \/ pageFormat.getHeight());\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":48,"deletions":8,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * Some default values for invalid CoreGraphics display ID.\n+ *\/\n+#define DEFAULT_DEVICE_WIDTH 1024\n+#define DEFAULT_DEVICE_HEIGHT 768\n+#define DEFAULT_DEVICE_DPI 72\n\\ No newline at end of file\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.h","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"CGraphicsDevice.h\"\n@@ -31,6 +32,0 @@\n-\/**\n- * Some default values for invalid CoreGraphics display ID.\n- *\/\n-#define DEFAULT_DEVICE_WIDTH 1024\n-#define DEFAULT_DEVICE_HEIGHT 768\n-#define DEFAULT_DEVICE_DPI 72\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CGraphicsDevice.m","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#import \"CGraphicsDevice.h\"\n@@ -89,0 +90,2 @@\n+    DECLARE_METHOD(jm_getXRes, sjc_CPrinterJob, \"getXRes\", \"()D\");\n+    DECLARE_METHOD(jm_getYRes, sjc_CPrinterJob, \"getYRes\", \"()D\");\n@@ -106,0 +109,18 @@\n+\n+    \/\/ Scale from the java document DPI to the user space DPI\n+    jdouble hRes = (*env)->CallDoubleMethod(env, fPrinterJob, jm_getXRes);\n+    CHECK_EXCEPTION();\n+    jdouble vRes = (*env)->CallDoubleMethod(env, fPrinterJob, jm_getYRes);\n+    CHECK_EXCEPTION();\n+    if (hRes > 0 && vRes > 0) {\n+        double scaleX = DEFAULT_DEVICE_DPI \/ hRes;\n+        double scaleY = DEFAULT_DEVICE_DPI \/ vRes;\n+        if (scaleX != 1 || scaleY != 1) {\n+            if ([[[NSPrintOperation currentOperation] printInfo] orientation] == NSPortraitOrientation) {\n+                CGContextScaleCTM(cgRef, scaleX, scaleY);\n+            } else {\n+                CGContextScaleCTM(cgRef, scaleY, scaleX);\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,300 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.ResolutionSyntax;\n+import javax.print.attribute.standard.OrientationRequested;\n+import javax.print.attribute.standard.PrinterResolution;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.border.EmptyBorder;\n+import java.awt.BasicStroke;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.geom.GeneralPath;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 8251928\n+ * @key printer\n+ * @summary Printable.print method should reflect printer's DPI\n+ * @library \/java\/awt\/regtesthelpers\n+ * @requires os.family == \"mac\"\n+ * @build PassFailJFrame\n+ * @run main\/manual PrintablePrintDPI\n+ *\/\n+\n+public class PrintablePrintDPI implements Printable {\n+\n+    private static final double PAPER_DPI = 72.0;\n+    private static final int DEFAULT_DOCUMENT_DPI = 300;\n+    private static final int UNITS = ResolutionSyntax.DPI;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+           This test checks document DPI.\n+           To be able to run this test it is required to have a\n+           printer configured in your user environment.\n+           Test's steps:\n+             - Choose a printer.\n+             - Choose a printer resolution.\n+             - Press 'Print' button.\n+           Visual inspection of the printed pages is needed.\n+           A passing test will print chosen DPI on the printed page,\n+           2 vertical and 2 horizontal lines.\n+           \"\"\";\n+\n+    private final PrintService printService;\n+    private final PrinterResolution printerResolution;\n+\n+    public static void main(String[] args) throws Exception {\n+        PrintService[] availablePrintServices = PrintServiceLookup.lookupPrintServices(null, null);\n+        if (availablePrintServices.length == 0) {\n+            System.out.println(\"Available print services not found\");\n+            return;\n+        }\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(300)\n+                .title(\"Document DPI test\")\n+                .testUI(createTestWindow(availablePrintServices))\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Window createTestWindow(final PrintService[] availablePrintServices) {\n+        final Window frame = new JFrame(\"Choose service to test\");\n+        JPanel pnlMain = new JPanel();\n+        pnlMain.setBorder(new EmptyBorder(5, 5, 5, 5));\n+        pnlMain.setLayout(new GridLayout(3, 1, 5, 5));\n+        JLabel lblServices = new JLabel(\"Available services\");\n+        JLabel lblResolutions = new JLabel(\"Available resolutions\");\n+        JButton btnPrint = new JButton(\"Print\");\n+        btnPrint.setEnabled(false);\n+        JComboBox<PrinterResolution> cbResolutions = new JComboBox<>();\n+        cbResolutions.setRenderer(new ListCellRenderer<PrinterResolution>() {\n+            @Override\n+            public Component getListCellRendererComponent(JList<? extends PrinterResolution> list,\n+                                                          PrinterResolution value,\n+                                                          int index, boolean isSelected, boolean cellHasFocus) {\n+                String str = value == null ? \"\" :\n+                        String.format(\"%dx%d DPI\",\n+                                value.getCrossFeedResolution(UNITS), value.getFeedResolution(UNITS));\n+                return new JLabel(str);\n+            }\n+        });\n+        cbResolutions.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                btnPrint.setEnabled(cbResolutions.getSelectedItem() != null);\n+            }\n+        });\n+\n+        JComboBox<PrintService> cbServices = new JComboBox<>();\n+        cbServices.setRenderer(new ListCellRenderer<PrintService>() {\n+            @Override\n+            public Component getListCellRendererComponent(JList<? extends PrintService> list, PrintService value,\n+                                                          int index, boolean isSelected, boolean cellHasFocus) {\n+                return new JLabel(value == null ? \"\" : value.getName());\n+            }\n+        });\n+        cbServices.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                PrintService ps = (PrintService) cbServices.getSelectedItem();\n+                cbResolutions.removeAllItems();\n+                btnPrint.setEnabled(ps != null);\n+                if (ps != null) {\n+                    PrinterResolution[] supportedResolutions = (PrinterResolution[])ps\n+                            .getSupportedAttributeValues(PrinterResolution.class, null, null);\n+                    if (supportedResolutions == null || supportedResolutions.length == 0) {\n+                        cbResolutions.addItem(new PrinterResolution(DEFAULT_DOCUMENT_DPI, DEFAULT_DOCUMENT_DPI, UNITS));\n+                    } else {\n+                        for (PrinterResolution pr : supportedResolutions) {\n+                            cbResolutions.addItem(pr);\n+                        }\n+                    }\n+                }\n+            }\n+        });\n+        for (PrintService ps : availablePrintServices) {\n+            cbServices.addItem(ps);\n+        }\n+        lblServices.setLabelFor(cbServices);\n+        btnPrint.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                PrintService printService = (PrintService) cbServices.getSelectedItem();\n+                PrinterResolution resolution = (PrinterResolution) cbResolutions.getSelectedItem();\n+                if (printService != null && resolution != null) {\n+                    cbServices.setEnabled(false);\n+                    cbResolutions.setEnabled(false);\n+                    btnPrint.setEnabled(false);\n+                    frame.setVisible(false);\n+                    new PrintablePrintDPI(printService, resolution).test();\n+                }\n+            }\n+        });\n+        pnlMain.add(lblServices);\n+        pnlMain.add(cbServices);\n+        pnlMain.add(lblResolutions);\n+        pnlMain.add(cbResolutions);\n+        pnlMain.add(btnPrint);\n+        frame.add(pnlMain);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    private PrintablePrintDPI(PrintService printService, PrinterResolution printerResolution) {\n+        this.printService = printService;\n+        this.printerResolution = printerResolution;\n+    }\n+\n+    private void test() {\n+        System.out.printf(\"Perform test using %s and %dx%d DPI\\n\",\n+                printService.getName(),\n+                printerResolution.getCrossFeedResolution(UNITS),\n+                printerResolution.getFeedResolution(UNITS));\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        try {\n+            PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();\n+            attributeSet.add(printerResolution);\n+            attributeSet.add(OrientationRequested.PORTRAIT);\n+            job.setPrintService(printService);\n+            job.setPrintable(this);\n+            job.print(attributeSet);\n+        } catch (PrinterException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+        if (pageIndex > 0) {\n+            return NO_SUCH_PAGE;\n+        }\n+        final int[] deviceRes = printerResolution.getResolution(ResolutionSyntax.DPI);\n+\n+        Graphics2D g2 = (Graphics2D)graphics;\n+\n+        double hRes = g2.getTransform().getScaleX() * PAPER_DPI;\n+        double vRes = g2.getTransform().getScaleY() * PAPER_DPI;\n+\n+        \/\/ Horizontal and vertical document resolution\n+        g2.drawLine((int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 5,\n+                (int)pageFormat.getImageableX() + 50, (int)pageFormat.getImageableY() + 5);\n+        g2.drawString(Integer.toString((int)hRes),\n+                (int)pageFormat.getImageableX() + 60,\n+                (int)pageFormat.getImageableY() + 5 + g2.getFontMetrics().getHeight() \/ 2);\n+\n+        g2.drawLine((int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 5,\n+                (int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 50);\n+        g2.drawString(Integer.toString((int)vRes),\n+                (int)pageFormat.getImageableX() + 5, (int)pageFormat.getImageableY() + 60);\n+\n+        String msg = String.format(\n+                \"Expected DPI: %dx%d, actual: %dx%d.\\n\",\n+                deviceRes[0], deviceRes[1], (int)hRes, (int)vRes);\n+        System.out.println(msg);\n+\n+        int msgX = (int)pageFormat.getImageableX() +\n+                g2.getFontMetrics().stringWidth(Integer.toString((int)vRes)) + 20;\n+        int msgY = (int)pageFormat.getImageableY() +\n+                g2.getFontMetrics().getHeight() + 20;\n+\n+        g2.drawString(msg, msgX, msgY);\n+        msgY += 20;\n+        g2.drawString(\"ScaleX: \" + g2.getTransform().getScaleX(), msgX, msgY);\n+        msgY += 20;\n+        g2.drawString(\"ScaleY: \" + g2.getTransform().getScaleY(), msgX, msgY);\n+\n+        final float lineWidth = 0.2f;\n+        double pageWidth = pageFormat.getWidth();\n+        double xLeft = pageWidth \/ 10;\n+        double yBase = pageFormat.getHeight() \/ 2;\n+        double xBase = pageFormat.getWidth() \/ 2;\n+        double yTop = yBase + 40;\n+        double yBottom = pageFormat.getHeight() - pageFormat.getHeight() \/ 10;\n+\n+        g2.setStroke(new BasicStroke(lineWidth));\n+\n+        double xRight = pageWidth - xLeft;\n+        g2.drawLine((int) xLeft, (int) yBase + 80,\n+                (int) (xRight),(int) yBase + 80);\n+        g2.drawLine((int) xBase, (int) yTop,\n+                (int) (xBase),(int) yBottom);\n+\n+        GeneralPath line = new GeneralPath();\n+        double halfLineWidth = lineWidth \/ 2.0f;\n+        double yLine = yBase + 100;\n+        double xLine = xBase + 20;\n+        line.moveTo(xLeft, yLine);\n+        line.lineTo(xLeft, yLine - halfLineWidth);\n+        line.lineTo(xLine - halfLineWidth, yLine - halfLineWidth);\n+        line.lineTo(xLine - halfLineWidth, yTop);\n+        line.lineTo(xLine + halfLineWidth, yTop);\n+        line.lineTo(xLine + halfLineWidth, yLine - halfLineWidth);\n+        line.lineTo(xRight, yLine - halfLineWidth);\n+        line.lineTo(xRight, yLine + halfLineWidth);\n+        line.lineTo(xLine + halfLineWidth, yLine + halfLineWidth);\n+        line.lineTo(xLine + halfLineWidth, yBottom);\n+        line.lineTo(xLine - halfLineWidth, yBottom);\n+        line.lineTo(xLine - halfLineWidth, yLine + halfLineWidth);\n+        line.lineTo(xLeft, yLine + halfLineWidth );\n+        line.closePath();\n+        g2.clip(line);\n+\n+        g2.setColor(Color.RED);\n+\n+        line.reset();\n+        line.moveTo(xLeft, yLine);\n+        line.lineTo(xRight, yLine);\n+        g2.draw(line);\n+\n+        line.reset();\n+        line.moveTo(xBase + 20, yTop);\n+        line.lineTo(xBase + 20, yBottom);\n+        g2.draw(line);\n+\n+        return PAGE_EXISTS;\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/PrintablePrintDPI.java","additions":300,"deletions":0,"binary":false,"changes":300,"status":"added"}]}