{"files":[{"patch":"@@ -363,0 +363,7 @@\n+        \/\/ We should use full runtime info plist for standalone runtime and for\n+        \/\/ embedded runtime if it contains \"bin\" folder, so embedded runtime\n+        \/\/ can act as standalone runtime.\n+        final var useRuntimeInfoPlist =\n+                Files.isDirectory(env.resolvedLayout().runtimeDirectory().resolve(\"bin\")) ||\n+                app.isRuntime();\n+\n@@ -368,1 +375,1 @@\n-        if (app.isRuntime()) {\n+        if (useRuntimeInfoPlist) {\n@@ -376,1 +383,1 @@\n-        if (app.isRuntime()) {\n+        if (useRuntimeInfoPlist) {\n@@ -378,0 +385,7 @@\n+        } else {\n+            template = \"ApplicationRuntime-Info.plist.template\";\n+        }\n+\n+        \/\/ Public name and category should be based on standalone runtime vs\n+        \/\/ embedded runtime.\n+        if (app.isRuntime()) {\n@@ -381,1 +395,0 @@\n-            template = \"ApplicationRuntime-Info.plist.template\";\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPackagingPipeline.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -292,0 +292,4 @@\n+        return setFakeRuntime(false);\n+    }\n+\n+    public JPackageCommand setFakeRuntime(boolean includeBin) {\n@@ -311,1 +315,1 @@\n-            if (TKit.isLinux()) {\n+            if (TKit.isLinux() || includeBin) {\n@@ -315,0 +319,1 @@\n+                createBulkFile.accept(fakeRuntimeDir.resolve(Path.of(\"bin\", \"bulk\")));\n@@ -326,1 +331,1 @@\n-            createBulkFile.accept(fakeRuntimeDir.resolve(Path.of(\"bin\", \"bulk\")));\n+            createBulkFile.accept(fakeRuntimeDir.resolve(Path.of(\"lib\", \"bulk\")));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            cfg.init(cmd.setFakeRuntime());\n+            cfg.init(cmd.setFakeRuntime(cfg.customPLists.contains(CustomPListType.EMBEDDED_RUNTIME_WITH_BIN)));\n@@ -127,0 +127,1 @@\n+                Set.of(CustomPListType.EMBEDDED_RUNTIME_WITH_BIN),\n@@ -188,1 +189,2 @@\n-                var vanillaCmd = new JPackageCommand().setFakeRuntime()\n+                boolean includeBin = customPLists.contains(CustomPListType.EMBEDDED_RUNTIME_WITH_BIN);\n+                var vanillaCmd = new JPackageCommand().setFakeRuntime(includeBin)\n@@ -246,0 +248,5 @@\n+        EMBEDDED_RUNTIME_WITH_BIN(\n+                CustomPListFactory.PLIST_INPUT::writeEmbeddedRuntimePlist,\n+                CustomPListFactory.PLIST_OUTPUT::writeEmbeddedRuntimePlist,\n+                \"Runtime-Info.plist\"),\n+\n@@ -288,1 +295,1 @@\n-            if (this == EMBEDDED_RUNTIME) {\n+            if (this == EMBEDDED_RUNTIME || this == EMBEDDED_RUNTIME_WITH_BIN) {\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/CustomInfoPListTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}