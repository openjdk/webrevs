{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n@@ -1088,26 +1090,26 @@\n-        static final ClassDesc CD_StringConcatHelper = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringConcatHelper;\");\n-        static final ClassDesc CD_StringConcatBase   = ClassDesc.ofDescriptor(\"Ljava\/lang\/StringConcatHelper$StringConcatBase;\");\n-        static final ClassDesc CD_Array_byte         = ClassDesc.ofDescriptor(\"[B\");\n-        static final ClassDesc CD_Array_String       = ClassDesc.ofDescriptor(\"[Ljava\/lang\/String;\");\n-\n-        static final MethodTypeDesc MTD_byte_char       = MethodTypeDesc.of(CD_byte, CD_char);\n-        static final MethodTypeDesc MTD_byte            = MethodTypeDesc.of(CD_byte);\n-        static final MethodTypeDesc MTD_int             = MethodTypeDesc.of(CD_int);\n-        static final MethodTypeDesc MTD_int_int_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_boolean);\n-        static final MethodTypeDesc MTD_int_int_char    = MethodTypeDesc.of(CD_int, CD_int, CD_char);\n-        static final MethodTypeDesc MTD_int_int_int     = MethodTypeDesc.of(CD_int, CD_int, CD_int);\n-        static final MethodTypeDesc MTD_int_int_long    = MethodTypeDesc.of(CD_int, CD_int, CD_long);\n-        static final MethodTypeDesc MTD_int_int_String  = MethodTypeDesc.of(CD_int, CD_int, CD_String);\n-        static final MethodTypeDesc MTD_String_float    = MethodTypeDesc.of(CD_String, CD_float);\n-        static final MethodTypeDesc MTD_String_double   = MethodTypeDesc.of(CD_String, CD_double);\n-        static final MethodTypeDesc MTD_String_Object   = MethodTypeDesc.of(CD_String, CD_Object);\n-\n-        static final MethodTypeDesc MTD_INIT             = MethodTypeDesc.of(CD_void, CD_Array_String);\n-        static final MethodTypeDesc MTD_NEW_ARRAY_SUFFIX = MethodTypeDesc.of(CD_Array_byte, CD_String, CD_int, CD_byte);\n-        static final MethodTypeDesc MTD_STRING_INIT      = MethodTypeDesc.of(CD_void, CD_Array_byte, CD_byte);\n-\n-        static final MethodTypeDesc PREPEND_int     = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_int, CD_String);\n-        static final MethodTypeDesc PREPEND_long    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_long, CD_String);\n-        static final MethodTypeDesc PREPEND_boolean = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_boolean, CD_String);\n-        static final MethodTypeDesc PREPEND_char    = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_char, CD_String);\n-        static final MethodTypeDesc PREPEND_String  = MethodTypeDesc.of(CD_int, CD_int, CD_byte, CD_Array_byte, CD_String, CD_String);\n+        static final ClassDesc CD_StringConcatHelper = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/StringConcatHelper;\");\n+        static final ClassDesc CD_StringConcatBase   = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/StringConcatHelper$StringConcatBase;\");\n+        static final ClassDesc CD_Array_byte         = ReferenceClassDescImpl.ofValidated(\"[B\");\n+        static final ClassDesc CD_Array_String       = ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/String;\");\n+\n+        static final MethodTypeDesc MTD_byte_char       = MethodTypeDescImpl.ofValidated(CD_byte, CD_char);\n+        static final MethodTypeDesc MTD_byte            = MethodTypeDescImpl.ofValidated(CD_byte);\n+        static final MethodTypeDesc MTD_int             = MethodTypeDescImpl.ofValidated(CD_int);\n+        static final MethodTypeDesc MTD_int_int_boolean = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_boolean);\n+        static final MethodTypeDesc MTD_int_int_char    = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_char);\n+        static final MethodTypeDesc MTD_int_int_int     = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_int);\n+        static final MethodTypeDesc MTD_int_int_long    = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_long);\n+        static final MethodTypeDesc MTD_int_int_String  = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_String);\n+        static final MethodTypeDesc MTD_String_float    = MethodTypeDescImpl.ofValidated(CD_String, CD_float);\n+        static final MethodTypeDesc MTD_String_double   = MethodTypeDescImpl.ofValidated(CD_String, CD_double);\n+        static final MethodTypeDesc MTD_String_Object   = MethodTypeDescImpl.ofValidated(CD_String, CD_Object);\n+\n+        static final MethodTypeDesc MTD_INIT             = MethodTypeDescImpl.ofValidated(CD_void, CD_Array_String);\n+        static final MethodTypeDesc MTD_NEW_ARRAY_SUFFIX = MethodTypeDescImpl.ofValidated(CD_Array_byte, CD_String, CD_int, CD_byte);\n+        static final MethodTypeDesc MTD_STRING_INIT      = MethodTypeDescImpl.ofValidated(CD_void, CD_Array_byte, CD_byte);\n+\n+        static final MethodTypeDesc PREPEND_int     = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_byte, CD_Array_byte, CD_int, CD_String);\n+        static final MethodTypeDesc PREPEND_long    = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_byte, CD_Array_byte, CD_long, CD_String);\n+        static final MethodTypeDesc PREPEND_boolean = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_byte, CD_Array_byte, CD_boolean, CD_String);\n+        static final MethodTypeDesc PREPEND_char    = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_byte, CD_Array_byte, CD_char, CD_String);\n+        static final MethodTypeDesc PREPEND_String  = MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_byte, CD_Array_byte, CD_String, CD_String);\n@@ -1169,1 +1171,1 @@\n-            return changed ? MethodType.methodType(args.returnType(), paramTypes) : args;\n+            return changed ? MethodType.methodType(args.returnType(), paramTypes, true) : args;\n@@ -1194,1 +1196,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1198,2 +1200,2 @@\n-         * Construct the MethodType of the coder method,\n-         * The first parameter is the initialized coder, Only parameter types that can be UTF16 are added.\n+         * Construct the MethodType of the coder method. The first parameter is the initialized coder.\n+         * Only parameter types which can be UTF16 are added. Returns null if no such parameter exists.\n@@ -1201,1 +1203,1 @@\n-        private static MethodTypeDesc coderArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc coderArgsIfMaybeUTF16(MethodType concatArgs) {\n@@ -1203,2 +1205,2 @@\n-            List<ClassDesc> paramTypes = new ArrayList<>();\n-            paramTypes.add(CD_int); \/\/ init coder\n+\n+            int maybeUTF16Count = 0;\n@@ -1206,0 +1208,12 @@\n+                if (maybeUTF16(concatArgs.parameterType(i))) {\n+                    maybeUTF16Count++;\n+                }\n+            }\n+\n+            if (maybeUTF16Count == 0) {\n+                return null;\n+            }\n+\n+            var paramTypes = new ClassDesc[maybeUTF16Count + 1];\n+            paramTypes[0] = CD_int; \/\/ init coder\n+            for (int i = 0, paramIndex = 1; i < parameterCount; i++) {\n@@ -1208,1 +1222,1 @@\n-                    paramTypes.add(cl == char.class ? CD_char : CD_String);\n+                    paramTypes[paramIndex++] = cl == char.class ? CD_char : CD_String;\n@@ -1211,1 +1225,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1226,1 +1240,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1253,1 +1267,1 @@\n-                           coderArgs   = parameterMaybeUTF16(concatArgs) ? coderArgs(concatArgs) : null,\n+                           coderArgs   = coderArgsIfMaybeUTF16(concatArgs),\n@@ -1481,1 +1495,1 @@\n-                     * suffix  = constants[paranCount];\n+                     * suffix  = constants[paramCount];\n@@ -1695,9 +1709,0 @@\n-\n-        static boolean parameterMaybeUTF16(MethodType args) {\n-            for (int i = 0; i < args.parameterCount(); i++) {\n-                if (maybeUTF16(args.parameterType(i))) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":52,"deletions":47,"binary":false,"changes":99,"status":"modified"}]}