{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n@@ -1169,1 +1170,1 @@\n-            return changed ? MethodType.methodType(args.returnType(), paramTypes) : args;\n+            return changed ? MethodType.methodType(args.returnType(), paramTypes, true) : args;\n@@ -1194,1 +1195,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1198,2 +1199,2 @@\n-         * Construct the MethodType of the coder method,\n-         * The first parameter is the initialized coder, Only parameter types that can be UTF16 are added.\n+         * Construct the MethodType of the coder method. The first parameter is the initialized coder.\n+         * Only parameter types which can be UTF16 are added. Returns null if no such parameter exists.\n@@ -1201,1 +1202,1 @@\n-        private static MethodTypeDesc coderArgs(MethodType concatArgs) {\n+        private static MethodTypeDesc coderArgsIfMaybeUTF16(MethodType concatArgs) {\n@@ -1203,2 +1204,2 @@\n-            List<ClassDesc> paramTypes = new ArrayList<>();\n-            paramTypes.add(CD_int); \/\/ init coder\n+\n+            int maybeUTF16Count = 0;\n@@ -1206,0 +1207,12 @@\n+                if (maybeUTF16(concatArgs.parameterType(i))) {\n+                    maybeUTF16Count++;\n+                }\n+            }\n+\n+            if (maybeUTF16Count == 0) {\n+                return null;\n+            }\n+\n+            var paramTypes = new ClassDesc[maybeUTF16Count + 1];\n+            paramTypes[0] = CD_int; \/\/ init coder\n+            for (int i = 0, paramIndex = 1; i < parameterCount; i++) {\n@@ -1208,1 +1221,1 @@\n-                    paramTypes.add(cl == char.class ? CD_char : CD_String);\n+                    paramTypes[paramIndex++] = cl == char.class ? CD_char : CD_String;\n@@ -1211,1 +1224,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1226,1 +1239,1 @@\n-            return MethodTypeDesc.of(CD_int, paramTypes);\n+            return MethodTypeDescImpl.ofValidated(CD_int, paramTypes);\n@@ -1253,1 +1266,1 @@\n-                           coderArgs   = parameterMaybeUTF16(concatArgs) ? coderArgs(concatArgs) : null,\n+                           coderArgs   = coderArgsIfMaybeUTF16(concatArgs),\n@@ -1481,1 +1494,1 @@\n-                     * suffix  = constants[paranCount];\n+                     * suffix  = constants[paramCount];\n@@ -1695,9 +1708,0 @@\n-\n-        static boolean parameterMaybeUTF16(MethodType args) {\n-            for (int i = 0; i < args.parameterCount(); i++) {\n-                if (maybeUTF16(args.parameterType(i))) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"}]}