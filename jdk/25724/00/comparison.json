{"files":[{"patch":"@@ -79,0 +79,1 @@\n+#include <sys\/resource.h>\n@@ -1514,0 +1515,10 @@\n+double os::elapsed_process_vtime() {\n+  struct rusage usage;\n+  int retval = getrusage(RUSAGE_SELF, &usage);\n+  if (retval == 0) {\n+    return usage.ru_utime.tv_sec + usage.ru_stime.tv_sec +\n+         (usage.ru_utime.tv_usec + usage.ru_stime.tv_usec) \/ (1000.0 * 1000.0);\n+  } else {\n+    return -1;\n+  }\n+}\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1212,0 +1212,33 @@\n+double os::elapsed_process_vtime() {\n+  FILETIME create;\n+  FILETIME exit;\n+  FILETIME kernel;\n+  FILETIME user;\n+\n+  if (GetProcessTimes(GetCurrentProcess(), &create, &exit, &kernel, &user) == 0) {\n+    return -1;\n+  }\n+\n+  SYSTEMTIME user_total;\n+  if (FileTimeToSystemTime(&user, &user_total) == 0) {\n+    return -1;\n+  }\n+\n+\n+  SYSTEMTIME kernel_total;\n+  if (FileTimeToSystemTime(&kernel, &kernel_total) == 0) {\n+    return -1;\n+  }\n+\n+  double user_seconds =\n+      double(user_total.wHour) * 3600.0 + double(user_total.wMinute) * 60.0 +\n+      double(user_total.wSecond) + double(user_total.wMilliseconds) \/ 1000.0;\n+\n+  double kernel_seconds = double(kernel_total.wHour) * 3600.0 +\n+                          double(kernel_total.wMinute) * 60.0 +\n+                          double(kernel_total.wSecond) +\n+                          double(kernel_total.wMilliseconds) \/ 1000.0;\n+\n+  return user_seconds + kernel_seconds;\n+}\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1473,0 +1473,2 @@\n+  log_gc_vtime();\n+\n@@ -1481,0 +1483,20 @@\n+class G1VCPUThreadClosure : public ThreadClosure {\n+private:\n+  volatile jlong _vtime = 0;\n+\n+public:\n+  virtual void do_thread(Thread *thread) {\n+    Atomic::add(&_vtime, os::thread_cpu_time(thread));\n+  }\n+  jlong vtime() { return _vtime; };\n+};\n+\n+double G1CollectedHeap::elapsed_gc_vtime() {\n+  G1VCPUThreadClosure cl;\n+  _cr->threads_do(&cl);\n+  _cm->threads_do(&cl);\n+  _workers->threads_do(&cl);\n+  return ((double) cl.vtime() + os::thread_cpu_time(_service_thread) + os::thread_cpu_time(_cm_thread)) \/ NANOSECS_PER_SEC;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -935,0 +935,2 @@\n+  double elapsed_gc_vtime() override;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/parallel\/parallelScavengeHeap.hpp\"\n@@ -55,0 +56,2 @@\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -163,0 +166,21 @@\n+void ParallelScavengeHeap::stop() {\n+  log_gc_vtime();\n+}\n+\n+class ParallelVCPUThreadClosure : public ThreadClosure {\n+private:\n+  volatile jlong _vtime = 0;\n+\n+public:\n+  virtual void do_thread(Thread *thread) {\n+    Atomic::add(&_vtime, os::thread_cpu_time(thread));\n+  }\n+  jlong vtime() { return _vtime; };\n+};\n+\n+double ParallelScavengeHeap::elapsed_gc_vtime() {\n+  ParallelVCPUThreadClosure cl;\n+  workers().threads_do(&cl);\n+  return (double)cl.vtime() \/ NANOSECS_PER_SEC;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -217,0 +217,3 @@\n+  void stop() override;\n+  double elapsed_gc_vtime() override;\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/serial\/serialHeap.hpp\"\n@@ -79,0 +80,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -148,0 +150,9 @@\n+void SerialHeap::stop() {\n+  log_gc_vtime();\n+}\n+\n+double SerialHeap::elapsed_gc_vtime() {\n+  return (double)os::thread_cpu_time(VMThread::vm_thread()) \/\n+    NANOSECS_PER_SEC;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -277,0 +277,3 @@\n+  void stop() override;\n+  double elapsed_gc_vtime() override;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -216,0 +216,21 @@\n+void CollectedHeap::log_gc_vtime() {\n+  if (os::is_thread_cpu_time_supported()) {\n+    double process_vtime = os::elapsed_process_vtime();\n+    double gc_vtime = elapsed_gc_vtime();\n+    if (process_vtime == -1 || gc_vtime == -1) return;\n+\n+    log_info(gc)(\"Process CPU time: %fs\", process_vtime);\n+    log_info(gc)(\"GC CPU time: %fs\", gc_vtime);\n+    double cost = -1;\n+    if (gc_vtime > process_vtime || process_vtime == 0 || gc_vtime == 0) {\n+      \/\/ This can happen e.g. for short running processes with\n+      \/\/ low CPU utilization\n+      cost = 0;\n+    } else {\n+      cost = 100 * gc_vtime \/ process_vtime;\n+    }\n+\n+    log_info(gc)(\"GC CPU cost (%%): %2.2f\", cost);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -458,0 +458,3 @@\n+  virtual double elapsed_gc_vtime() { return -1; };\n+  void log_gc_vtime();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -2205,0 +2206,1 @@\n+  log_gc_vtime();\n@@ -2222,0 +2224,17 @@\n+class ShenandoahCPUThreadClosure : public ThreadClosure {\n+private:\n+  volatile jlong _vtime = 0;\n+\n+public:\n+  virtual void do_thread(Thread *thread) {\n+      Atomic::add(&_vtime, os::thread_cpu_time(thread));\n+  }\n+  jlong vtime() { return _vtime; };\n+};\n+\n+double ShenandoahHeap::elapsed_gc_vtime() {\n+  ShenandoahCPUThreadClosure cl;\n+  ShenandoahHeap::heap()->gc_threads_do(&cl);\n+  return (double)cl.vtime() \/ NANOSECS_PER_SEC;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -212,0 +212,2 @@\n+  double elapsed_gc_vtime() override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/z\/zGeneration.hpp\"\n@@ -108,0 +109,1 @@\n+  log_gc_vtime();\n@@ -113,0 +115,19 @@\n+class ZVCPUThreadClosure : public ThreadClosure {\n+private:\n+  volatile jlong _vtime = 0;\n+public:\n+  virtual void do_thread(Thread *thread) {\n+    if (thread->is_ConcurrentGC_thread() ||\n+        strstr(thread->name(), \"ZWorker\") != nullptr) {\n+      Atomic::add(&_vtime, os::thread_cpu_time(thread));\n+    }\n+  }\n+  jlong vtime() { return _vtime; };\n+};\n+\n+double ZCollectedHeap::elapsed_gc_vtime() {\n+  ZVCPUThreadClosure cl;\n+  gc_threads_do(&cl);\n+  return (double)cl.vtime() \/ NANOSECS_PER_SEC;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+  double elapsed_gc_vtime() override;\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,0 +302,1 @@\n+  static double elapsed_process_vtime();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}