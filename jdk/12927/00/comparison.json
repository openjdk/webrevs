{"files":[{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n+ * @library \/test\/lib\n+ * @library ..\/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\n+ *   -Xbootclasspath\/a:.\n+ *   -XX:+UnlockDiagnosticVMOptions\n+ *   -XX:+WhiteBoxAPI\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   TestReentrantUpcalls\n+ *\/\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemorySegment;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+import static java.lang.invoke.MethodHandles.lookup;\n+\n+public class TestReentrantUpcalls extends NativeTestHelper {\n+    static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static final MethodHandle MH_m;\n+\n+    static {\n+        System.loadLibrary(\"ReentrantUpcalls\");\n+        try {\n+            MH_m = lookup().findStatic(TestReentrantUpcalls.class, \"m\",\n+                    MethodType.methodType(void.class, int.class, MemorySegment.class, MethodHandle.class));\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        FunctionDescriptor descriptor = FunctionDescriptor.ofVoid(C_INT, C_POINTER);\n+        MethodHandle downcallHandle = downcallHandle(\"do_recurse\", descriptor);\n+\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment stub = LINKER.upcallStub(\n+                    MethodHandles.insertArguments(MH_m, 2, downcallHandle), descriptor, arena.scope());\n+\n+            downcallHandle.invokeExact(0, stub);\n+        }\n+    }\n+\n+    static void m(int depth, MemorySegment thisStub, MethodHandle downcallHandle) throws Throwable {\n+        if (depth < 100) {\n+            downcallHandle.invokeExact(depth + 1, thisStub);\n+        } else {\n+            WB.verifyFrames(\/*log=*\/true, \/*updateRegisterMap=*\/true);\n+            WB.verifyFrames(\/*log=*\/true, \/*updateRegisterMap=*\/false); \/\/ triggers different code paths\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestReentrantUpcalls.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT void do_recurse(int depth, void (*cb)(int, void*)) {\n+    cb(depth, cb);\n+}\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/libReentrantUpcalls.c","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"}]}