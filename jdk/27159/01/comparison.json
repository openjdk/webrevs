{"files":[{"patch":"@@ -254,0 +254,48 @@\n+\/\/ Ergonomic construction for creating ad-hoc VMErrorCallback which automatically\n+\/\/ calls the provided invocable f if a VM crash occurs within its lifetime.\n+\/\/ Can be used to instrument a build for more detailed contextual information\n+\/\/ gathering. Especially useful when hunting down intermittent bugs, or issues\n+\/\/ only reproducible in environments where access to a debugger is not readily\n+\/\/ available. Example use:\n+\/*\n+  {\n+    \/\/ Note the lambda is invoked after an error occurs within this thread,\n+    \/\/ and during on_error's lifetime. If state prior to the crash is required,\n+    \/\/ capture a copy of it first.\n+    auto important_value = get_the_value();\n+\n+    OnVMError on_error([&](outputStream* st) {\n+      \/\/ Dump the important bits.\n+      st->print(\"Prior value: \");\n+      important_value.print_on(st);\n+      st->print(\"During crash: \")\n+      get_the_value().print_on(st);\n+      \/\/ Dump whole the whole state.\n+      this->print_on(st);\n+    });\n+\n+    \/\/ When VM crashes, the above lambda will be invoked and print relevant info.\n+    might_cause_vm_crash();\n+  }\n+*\/\n+template <typename CallableType>\n+class OnVMError : public VMErrorCallback {\n+  CallableType _callable;\n+  VMErrorCallbackMark _mark;\n+\n+  void call(outputStream* st) final { _callable(st); }\n+\n+public:\n+  template <typename Callable>\n+  OnVMError(Callable&& callable) : VMErrorCallback(), _callable(static_cast<Callable&&>(callable)), _mark(this) {}\n+};\n+\n+\/\/ This deduction rule enables creating a type with out using auto, decltype\n+\/\/ and\/or helping construction functions. It enables the generic template type\n+\/\/ to be deduced in the following code:\n+\/\/   OnVMError on_error([&](outputStream* st) { ... })\n+\/\/ Rather than having to something along the lines of:\n+\/\/   auto f = [&](outputStream* st) { ... };\n+\/\/   OnVMError<decltype(f)> on_error(f);\n+template <typename CallableType> OnVMError(CallableType) -> OnVMError<CallableType>;\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}