{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.constantpool.AnnotationConstantValueEntry;\n@@ -37,1 +36,0 @@\n-import java.lang.constant.ConstantDesc;\n@@ -54,2 +52,6 @@\n-                AnnotationValue.OfConstant, AnnotationValue.OfClass,\n-                AnnotationValue.OfEnum {\n+                AnnotationValue.OfString, AnnotationValue.OfDouble,\n+                AnnotationValue.OfFloat, AnnotationValue.OfLong,\n+                AnnotationValue.OfInteger, AnnotationValue.OfShort,\n+                AnnotationValue.OfCharacter, AnnotationValue.OfByte,\n+                AnnotationValue.OfBoolean, AnnotationValue.OfClass,\n+                AnnotationValue.OfEnum, AnnotationImpl.OfConstantImpl {\n@@ -58,1 +60,2 @@\n-     * Models an annotation-valued element\n+     * Models an annotation-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ANNOTATION}.\n@@ -70,1 +73,2 @@\n-     * Models an array-valued element\n+     * Models an array-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ARRAY}.\n@@ -82,1 +86,2 @@\n-     * Models a constant-valued element\n+     * Models a string-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_STRING}.\n@@ -84,1 +89,0 @@\n-     * @sealedGraph\n@@ -88,19 +92,1 @@\n-    sealed interface OfConstant extends AnnotationValue\n-            permits AnnotationValue.OfString, AnnotationValue.OfDouble,\n-                    AnnotationValue.OfFloat, AnnotationValue.OfLong,\n-                    AnnotationValue.OfInteger, AnnotationValue.OfShort,\n-                    AnnotationValue.OfCharacter, AnnotationValue.OfByte,\n-                    AnnotationValue.OfBoolean, AnnotationImpl.OfConstantImpl {\n-        \/** {@return the constant} *\/\n-        AnnotationConstantValueEntry constant();\n-        \/** {@return the constant} *\/\n-        ConstantDesc constantValue();\n-    }\n-\n-    \/**\n-     * Models a constant-valued element\n-     *\n-     * @since 22\n-     *\/\n-    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n-    sealed interface OfString extends AnnotationValue.OfConstant\n+    sealed interface OfString extends AnnotationValue\n@@ -110,0 +96,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        Utf8Entry poolEntry();\n@@ -113,1 +102,2 @@\n-     * Models a constant-valued element\n+     * Models a double-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_DOUBLE}.\n@@ -118,1 +108,1 @@\n-    sealed interface OfDouble extends AnnotationValue.OfConstant\n+    sealed interface OfDouble extends AnnotationValue\n@@ -122,0 +112,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        DoubleEntry poolEntry();\n@@ -125,1 +118,2 @@\n-     * Models a constant-valued element\n+     * Models a float-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_FLOAT}.\n@@ -130,1 +124,1 @@\n-    sealed interface OfFloat extends AnnotationValue.OfConstant\n+    sealed interface OfFloat extends AnnotationValue\n@@ -134,0 +128,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        FloatEntry poolEntry();\n@@ -137,1 +134,2 @@\n-     * Models a constant-valued element\n+     * Models a long-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_LONG}.\n@@ -142,1 +140,1 @@\n-    sealed interface OfLong extends AnnotationValue.OfConstant\n+    sealed interface OfLong extends AnnotationValue\n@@ -146,0 +144,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        LongEntry poolEntry();\n@@ -149,1 +150,2 @@\n-     * Models a constant-valued element\n+     * Models an integer-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_INT}.\n@@ -154,1 +156,1 @@\n-    sealed interface OfInteger extends AnnotationValue.OfConstant\n+    sealed interface OfInteger extends AnnotationValue\n@@ -158,0 +160,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        IntegerEntry poolEntry();\n@@ -161,1 +166,2 @@\n-     * Models a constant-valued element\n+     * Models a short-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_SHORT}.\n@@ -166,1 +172,1 @@\n-    sealed interface OfShort extends AnnotationValue.OfConstant\n+    sealed interface OfShort extends AnnotationValue\n@@ -170,0 +176,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        IntegerEntry poolEntry();\n@@ -173,1 +182,2 @@\n-     * Models a constant-valued element\n+     * Models a character-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_CHAR}.\n@@ -178,1 +188,1 @@\n-    sealed interface OfCharacter extends AnnotationValue.OfConstant\n+    sealed interface OfCharacter extends AnnotationValue\n@@ -182,0 +192,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        IntegerEntry poolEntry();\n@@ -185,1 +198,2 @@\n-     * Models a constant-valued element\n+     * Models a byte-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_BYTE}.\n@@ -190,1 +204,1 @@\n-    sealed interface OfByte extends AnnotationValue.OfConstant\n+    sealed interface OfByte extends AnnotationValue\n@@ -194,0 +208,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        IntegerEntry poolEntry();\n@@ -197,1 +214,2 @@\n-     * Models a constant-valued element\n+     * Models a boolean-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_BOOLEAN}.\n@@ -202,1 +220,1 @@\n-    sealed interface OfBoolean extends AnnotationValue.OfConstant\n+    sealed interface OfBoolean extends AnnotationValue\n@@ -206,0 +224,3 @@\n+\n+        \/** {@return the constant pool entry} *\/\n+        IntegerEntry poolEntry();\n@@ -209,1 +230,2 @@\n-     * Models a class-valued element\n+     * Models a class-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_CLASS}.\n@@ -226,1 +248,2 @@\n-     * Models an enum-valued element\n+     * Models an enum-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ENUM}.\n@@ -290,1 +313,1 @@\n-    static OfConstant ofString(Utf8Entry value) {\n+    static OfString ofString(Utf8Entry value) {\n@@ -298,1 +321,1 @@\n-    static OfConstant ofString(String value) {\n+    static OfString ofString(String value) {\n@@ -306,1 +329,1 @@\n-    static OfConstant ofDouble(DoubleEntry value) {\n+    static OfDouble ofDouble(DoubleEntry value) {\n@@ -314,1 +337,1 @@\n-    static OfConstant ofDouble(double value) {\n+    static OfDouble ofDouble(double value) {\n@@ -322,1 +345,1 @@\n-    static OfConstant ofFloat(FloatEntry value) {\n+    static OfFloat ofFloat(FloatEntry value) {\n@@ -330,1 +353,1 @@\n-    static OfConstant ofFloat(float value) {\n+    static OfFloat ofFloat(float value) {\n@@ -338,1 +361,1 @@\n-    static OfConstant ofLong(LongEntry value) {\n+    static OfLong ofLong(LongEntry value) {\n@@ -346,1 +369,1 @@\n-    static OfConstant ofLong(long value) {\n+    static OfLong ofLong(long value) {\n@@ -354,1 +377,1 @@\n-    static OfConstant ofInt(IntegerEntry value) {\n+    static OfInteger ofInt(IntegerEntry value) {\n@@ -362,1 +385,1 @@\n-    static OfConstant ofInt(int value) {\n+    static OfInteger ofInt(int value) {\n@@ -370,1 +393,1 @@\n-    static OfConstant ofShort(IntegerEntry value) {\n+    static OfShort ofShort(IntegerEntry value) {\n@@ -378,1 +401,1 @@\n-    static OfConstant ofShort(short value) {\n+    static OfShort ofShort(short value) {\n@@ -386,1 +409,1 @@\n-    static OfConstant ofChar(IntegerEntry value) {\n+    static OfCharacter ofChar(IntegerEntry value) {\n@@ -394,1 +417,1 @@\n-    static OfConstant ofChar(char value) {\n+    static OfCharacter ofChar(char value) {\n@@ -402,1 +425,1 @@\n-    static OfConstant ofByte(IntegerEntry value) {\n+    static OfByte ofByte(IntegerEntry value) {\n@@ -410,1 +433,1 @@\n-    static OfConstant ofByte(byte value) {\n+    static OfByte ofByte(byte value) {\n@@ -418,1 +441,1 @@\n-    static OfConstant ofBoolean(IntegerEntry value) {\n+    static OfBoolean ofBoolean(IntegerEntry value) {\n@@ -426,1 +449,1 @@\n-    static OfConstant ofBoolean(boolean value) {\n+    static OfBoolean ofBoolean(boolean value) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":87,"deletions":64,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.classfile.constantpool;\n-\n-import java.lang.constant.ConstantDesc;\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- * A constant pool entry that may be used as an annotation constant,\n- * which includes the four kinds of primitive constants, and UTF8 constants.\n- *\n- * @sealedGraph\n- * @since 22\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n-public sealed interface AnnotationConstantValueEntry extends PoolEntry\n-        permits DoubleEntry, FloatEntry, IntegerEntry, LongEntry, Utf8Entry {\n-\n-    \/**\n-     * {@return the constant value}  The constant value will be an {@link Integer},\n-     * {@link Long}, {@link Float}, {@link Double}, or {@link String}.\n-     *\/\n-    ConstantDesc constantValue();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -513,19 +513,0 @@\n-    }\n-\n-    \/**\n-     * {@return An {@link AnnotationConstantValueEntry} describing the provided\n-     * constant}  The constant should be an Integer, String, Long, Float,\n-     * Double, ClassDesc (for a Class constant), or MethodTypeDesc (for a MethodType\n-     * constant.)\n-     *\n-     * @param c the constant\n-     *\/\n-    default AnnotationConstantValueEntry annotationConstantValueEntry(ConstantDesc c) {\n-        if (c instanceof Integer i) return intEntry(i);\n-        if (c instanceof String s) return utf8Entry(s);\n-        if (c instanceof Long l) return longEntry(l);\n-        if (c instanceof Float f) return floatEntry(f);\n-        if (c instanceof Double d) return doubleEntry(d);\n-        if (c instanceof ClassDesc cd) return utf8Entry(cd);\n-        if (c instanceof MethodTypeDesc mtd) return utf8Entry(mtd);\n-        throw new IllegalArgumentException(\"Illegal type: \" + (c == null ? null : c.getClass()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        extends AnnotationConstantValueEntry, ConstantValueEntry\n+        extends ConstantValueEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DoubleEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        extends AnnotationConstantValueEntry, ConstantValueEntry\n+        extends ConstantValueEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FloatEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        extends AnnotationConstantValueEntry, ConstantValueEntry\n+        extends ConstantValueEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/IntegerEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        extends AnnotationConstantValueEntry, ConstantValueEntry\n+        extends ConstantValueEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LongEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        permits AnnotationConstantValueEntry, DynamicConstantPoolEntry,\n+        permits Utf8Entry, DynamicConstantPoolEntry,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        extends CharSequence, AnnotationConstantValueEntry\n+        extends CharSequence, PoolEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/Utf8Entry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -335,5 +335,0 @@\n-        @Override\n-        public ConstantDesc constantValue() {\n-            return stringValue();\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.lang.constant.ConstantDesc;\n@@ -93,1 +92,2 @@\n-    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant\n+    \/\/ TODO stub, remove with WritableElement\n+    public sealed interface OfConstantImpl extends AnnotationValue\n@@ -99,0 +99,1 @@\n+        PoolEntry poolEntry();\n@@ -103,1 +104,1 @@\n-            buf.writeIndex(constant());\n+            buf.writeIndex(poolEntry());\n@@ -105,6 +106,0 @@\n-\n-        @Override\n-        default ConstantDesc constantValue() {\n-            return constant().constantValue();\n-        }\n-\n@@ -113,1 +108,1 @@\n-    public record OfStringImpl(Utf8Entry constant)\n+    public record OfStringImpl(Utf8Entry poolEntry)\n@@ -123,1 +118,1 @@\n-            return constant().stringValue();\n+            return poolEntry().stringValue();\n@@ -127,1 +122,1 @@\n-    public record OfDoubleImpl(DoubleEntry constant)\n+    public record OfDoubleImpl(DoubleEntry poolEntry)\n@@ -137,1 +132,1 @@\n-            return constant().doubleValue();\n+            return poolEntry().doubleValue();\n@@ -141,1 +136,1 @@\n-    public record OfFloatImpl(FloatEntry constant)\n+    public record OfFloatImpl(FloatEntry poolEntry)\n@@ -151,1 +146,1 @@\n-            return constant().floatValue();\n+            return poolEntry().floatValue();\n@@ -155,1 +150,1 @@\n-    public record OfLongImpl(LongEntry constant)\n+    public record OfLongImpl(LongEntry poolEntry)\n@@ -165,1 +160,1 @@\n-            return constant().longValue();\n+            return poolEntry().longValue();\n@@ -169,1 +164,1 @@\n-    public record OfIntegerImpl(IntegerEntry constant)\n+    public record OfIntegerImpl(IntegerEntry poolEntry)\n@@ -179,1 +174,1 @@\n-            return constant().intValue();\n+            return poolEntry().intValue();\n@@ -183,1 +178,1 @@\n-    public record OfShortImpl(IntegerEntry constant)\n+    public record OfShortImpl(IntegerEntry poolEntry)\n@@ -193,1 +188,1 @@\n-            return (short)constant().intValue();\n+            return (short)poolEntry().intValue();\n@@ -197,1 +192,1 @@\n-    public record OfCharacterImpl(IntegerEntry constant)\n+    public record OfCharacterImpl(IntegerEntry poolEntry)\n@@ -207,1 +202,1 @@\n-            return (char)constant().intValue();\n+            return (char)poolEntry().intValue();\n@@ -211,1 +206,1 @@\n-    public record OfByteImpl(IntegerEntry constant)\n+    public record OfByteImpl(IntegerEntry poolEntry)\n@@ -221,1 +216,1 @@\n-            return (byte)constant().intValue();\n+            return (byte)poolEntry().intValue();\n@@ -225,1 +220,1 @@\n-    public record OfBooleanImpl(IntegerEntry constant)\n+    public record OfBooleanImpl(IntegerEntry poolEntry)\n@@ -235,1 +230,1 @@\n-            return constant().intValue() == 1;\n+            return poolEntry().intValue() == 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":23,"deletions":28,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -510,9 +510,9 @@\n-            case OfString cv -> leafs(\"string\", String.valueOf(cv.constantValue()));\n-            case OfDouble cv -> leafs(\"double\", String.valueOf(cv.constantValue()));\n-            case OfFloat cv -> leafs(\"float\", String.valueOf(cv.constantValue()));\n-            case OfLong cv -> leafs(\"long\", String.valueOf(cv.constantValue()));\n-            case OfInteger cv -> leafs(\"int\", String.valueOf(cv.constantValue()));\n-            case OfShort cv -> leafs(\"short\", String.valueOf(cv.constantValue()));\n-            case OfCharacter cv -> leafs(\"char\", String.valueOf(cv.constantValue()));\n-            case OfByte cv -> leafs(\"byte\", String.valueOf(cv.constantValue()));\n-            case OfBoolean cv -> leafs(\"boolean\", String.valueOf((int)cv.constantValue() != 0));\n+            case OfString cv -> leafs(\"string\", String.valueOf(cv.stringValue()));\n+            case OfDouble cv -> leafs(\"double\", String.valueOf(cv.doubleValue()));\n+            case OfFloat cv -> leafs(\"float\", String.valueOf(cv.floatValue()));\n+            case OfLong cv -> leafs(\"long\", String.valueOf(cv.longValue()));\n+            case OfInteger cv -> leafs(\"int\", String.valueOf(cv.intValue()));\n+            case OfShort cv -> leafs(\"short\", String.valueOf(cv.shortValue()));\n+            case OfCharacter cv -> leafs(\"char\", String.valueOf(cv.charValue()));\n+            case OfByte cv -> leafs(\"byte\", String.valueOf(cv.byteValue()));\n+            case OfBoolean cv -> leafs(\"boolean\", String.valueOf(cv.booleanValue()));\n@@ -656,1 +656,1 @@\n-                            case AnnotationConstantValueEntry ve -> leafs(\n+                            case ConstantValueEntry ve -> leafs(\n@@ -659,0 +659,3 @@\n+                            case Utf8Entry ue -> leafs(\n+                                \"value\", ue.stringValue()\n+                            );\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -394,1 +394,0 @@\n-            case AnnotationValue.OfConstant oc -> oc;\n@@ -399,0 +398,5 @@\n+            case AnnotationValue.OfByte _, AnnotationValue.OfBoolean _,\n+                AnnotationValue.OfCharacter _, AnnotationValue.OfDouble _,\n+                AnnotationValue.OfFloat _, AnnotationValue.OfInteger _,\n+                AnnotationValue.OfLong _, AnnotationValue.OfShort _,\n+                AnnotationValue.OfString _ -> val;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,1 +420,5 @@\n-            case AnnotationValue.OfConstant _, AnnotationValue.OfClass _ -> 2;\n+            case AnnotationValue.OfByte _, AnnotationValue.OfBoolean _,\n+                 AnnotationValue.OfCharacter _, AnnotationValue.OfDouble _,\n+                 AnnotationValue.OfFloat _, AnnotationValue.OfInteger _,\n+                 AnnotationValue.OfLong _, AnnotationValue.OfShort _,\n+                 AnnotationValue.OfString _, AnnotationValue.OfClass _ -> 2;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,1 @@\n-            case AnnotationValue.OfConstant ev -> {\n+            case AnnotationValue.OfBoolean ev -> {\n@@ -231,33 +231,63 @@\n-                    var entry = ev.constant();\n-                    switch (ev.tag()) {\n-                        case 'B':\n-                            print(\"(byte) \");\n-                            print(constantWriter.stringValue(entry));\n-                            break;\n-                        case 'C':\n-                            print(\"'\");\n-                            print(constantWriter.charValue(entry));\n-                            print(\"'\");\n-                            break;\n-                        case 'D':\n-                        case 'F':\n-                        case 'I':\n-                        case 'J':\n-                            print(constantWriter.stringValue(entry));\n-                            break;\n-                        case 'S':\n-                            print(\"(short) \");\n-                            print(constantWriter.stringValue(entry));\n-                            break;\n-                        case 'Z':\n-                            print(constantWriter.booleanValue(entry));\n-                            break;\n-                        case 's':\n-                            print(\"\\\"\");\n-                            print(constantWriter.stringValue(entry));\n-                            print(\"\\\"\");\n-                            break;\n-                        default:\n-                            print(ev.tag() + \"#\" + entry.index());\n-                            break;\n-                    }\n+                    print(constantWriter.booleanValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfByte ev -> {\n+                if (resolveIndices) {\n+                    print(\"(byte) \");\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfCharacter ev -> {\n+                if (resolveIndices) {\n+                    print(\"'\");\n+                    print(constantWriter.charValue(ev.poolEntry()));\n+                    print(\"'\");\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfFloat ev -> {\n+                if (resolveIndices) {\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfDouble ev -> {\n+                if (resolveIndices) {\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfInteger ev -> {\n+                if (resolveIndices) {\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfLong ev -> {\n+                if (resolveIndices) {\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfShort ev -> {\n+                if (resolveIndices) {\n+                    print(\"(short) \");\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                } else {\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                }\n+            }\n+            case AnnotationValue.OfString ev -> {\n+                if (resolveIndices) {\n+                    print(\"\\\"\");\n+                    print(constantWriter.stringValue(ev.poolEntry()));\n+                    print(\"\\\"\");\n@@ -265,1 +295,1 @@\n-                    print(ev.tag() + \"#\" + ev.constant().index());\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":66,"deletions":36,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,2 +75,7 @@\n-                    case AnnotationConstantValueEntry info -> {\n-                        println(() -> stringValue(info));\n+                    case StringEntry info -> {\n+                        print(() -> \"#\" + info.utf8().index());\n+                        tab();\n+                        println(() -> \"\/\/ \" + stringValue(info));\n+                    }\n+                    case Utf8Entry _, ConstantValueEntry _ -> {\n+                        println(() -> stringValue(cpInfo));\n@@ -115,5 +120,0 @@\n-                    case StringEntry info -> {\n-                        print(() -> \"#\" + info.utf8().index());\n-                        tab();\n-                        println(() -> \"\/\/ \" + stringValue(info));\n-                    }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ConstantWriter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8335927\n@@ -32,1 +33,0 @@\n-import java.util.AbstractMap;\n@@ -58,12 +58,12 @@\n-            new AbstractMap.SimpleImmutableEntry<>(\"i\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"j\", 1L),\n-            new AbstractMap.SimpleImmutableEntry<>(\"s\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"b\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"f\", 1.0f),\n-            new AbstractMap.SimpleImmutableEntry<>(\"d\", 1.0d),\n-            new AbstractMap.SimpleImmutableEntry<>(\"z\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"c\", (int) '1'),\n-            new AbstractMap.SimpleImmutableEntry<>(\"st\", \"1\"),\n-            new AbstractMap.SimpleImmutableEntry<>(\"cl\", ClassDesc.of(\"foo.Bar\")),\n-            new AbstractMap.SimpleImmutableEntry<>(\"en\", E.C),\n-            new AbstractMap.SimpleImmutableEntry<>(\"arr\", new Object[] {1, \"1\", 1.0f})\n+            Map.entry(\"i\", 1),\n+            Map.entry(\"j\", 1L),\n+            Map.entry(\"s\", (short) 1),\n+            Map.entry(\"b\", (byte) 1),\n+            Map.entry(\"f\", 1.0f),\n+            Map.entry(\"d\", 1.0d),\n+            Map.entry(\"z\", Boolean.TRUE),\n+            Map.entry(\"c\", '1'),\n+            Map.entry(\"st\", \"1\"),\n+            Map.entry(\"cl\", ClassDesc.of(\"foo.Bar\")),\n+            Map.entry(\"en\", E.C),\n+            Map.entry(\"arr\", new Object[] {1, \"1\", 1.0f})\n@@ -90,4 +90,26 @@\n-                case \"i\", \"j\", \"s\", \"b\", \"f\", \"d\", \"z\", \"c\", \"st\":\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfConstant c);\n-                    assertEquals(((AnnotationValue.OfConstant) evp.value()).constantValue(),\n-                                 constants.get(evp.name().stringValue()));\n+                case \"i\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfInteger i && i.intValue() == 1);\n+                    break;\n+                case \"j\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfLong j && j.longValue() == 1L);\n+                    break;\n+                case \"s\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfShort s && s.shortValue() == (short) 1);\n+                    break;\n+                case \"b\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfByte b && b.byteValue() == (byte) 1);\n+                    break;\n+                case \"f\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfFloat f && f.floatValue() == 1.0f);\n+                    break;\n+                case \"d\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfDouble d && d.doubleValue() == 1.0d);\n+                    break;\n+                case \"z\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfBoolean z && z.booleanValue());\n+                    break;\n+                case \"c\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfCharacter c && c.charValue() == '1');\n+                    break;\n+                case \"st\":\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfString st && st.stringValue().equals(\"1\"));\n@@ -96,1 +118,1 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfClass c\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfClass c\n@@ -100,1 +122,1 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfEnum c\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfEnum c\n@@ -104,1 +126,1 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfAnnotation c\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfAnnotation c\n@@ -108,1 +130,1 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfArray);\n+                    assertTrue(evp.value() instanceof AnnotationValue.OfArray);\n@@ -110,2 +132,6 @@\n-                    assertEquals(values.stream().map(v -> ((AnnotationValue.OfConstant) v).constant().constantValue()).collect(toSet()),\n-                                 Set.of(1, 1.0f, \"1\"));\n+                    assertEquals(values.stream().map(v -> switch (v) {\n+                        case AnnotationValue.OfInteger i -> i.intValue();\n+                        case AnnotationValue.OfFloat f -> f.floatValue();\n+                        case AnnotationValue.OfString s -> s.stringValue();\n+                        default -> fail(\"Unexpected value \" + v);\n+                    }).collect(toSet()), Set.of(1, 1.0f, \"1\"));\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":50,"deletions":24,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8335927\n@@ -252,1 +253,1 @@\n-                        annotation default: {array: [{boolean: true}, {byte: 12}, {char: 99}, {class: LPhee;}, {double: 1.3}, {enum class: LBoo;, constant name: BOO}, {float: 3.7}, {int: 33}, {long: 3333}, {short: 25}, {string: BOO}, {annotation class: LPhoo;}]}\n+                        annotation default: {array: [{boolean: true}, {byte: 12}, {char: c}, {class: LPhee;}, {double: 1.3}, {enum class: LBoo;, constant name: BOO}, {float: 3.7}, {int: 33}, {long: 3333}, {short: 25}, {string: BOO}, {annotation class: LPhoo;}]}\n@@ -503,1 +504,1 @@\n-                            \"annotation default\": {\"array\": [{\"boolean\": \"true\"}, {\"byte\": \"12\"}, {\"char\": \"99\"}, {\"class\": \"LPhee;\"}, {\"double\": \"1.3\"}, {\"enum class\": \"LBoo;\", \"constant name\": \"BOO\"}, {\"float\": \"3.7\"}, {\"int\": \"33\"}, {\"long\": \"3333\"}, {\"short\": \"25\"}, {\"string\": \"BOO\"}, {\"annotation class\": \"LPhoo;\"}]},\n+                            \"annotation default\": {\"array\": [{\"boolean\": \"true\"}, {\"byte\": \"12\"}, {\"char\": \"c\"}, {\"class\": \"LPhee;\"}, {\"double\": \"1.3\"}, {\"enum class\": \"LBoo;\", \"constant name\": \"BOO\"}, {\"float\": \"3.7\"}, {\"int\": \"33\"}, {\"long\": \"3333\"}, {\"short\": \"25\"}, {\"string\": \"BOO\"}, {\"annotation class\": \"LPhoo;\"}]},\n@@ -759,1 +760,1 @@\n-                            <annotation_default><array><value><boolean>true<\/boolean><\/value><value><byte>12<\/byte><\/value><value><char>99<\/char><\/value><value><class>LPhee;<\/class><\/value><value><double>1.3<\/double><\/value><value><enum_class>LBoo;<\/enum_class><constant_name>BOO<\/constant_name><\/value><value><float>3.7<\/float><\/value><value><int>33<\/int><\/value><value><long>3333<\/long><\/value><value><short>25<\/short><\/value><value><string>BOO<\/string><\/value><value><annotation_class>LPhoo;<\/annotation_class><\/value><\/array><\/annotation_default>\n+                            <annotation_default><array><value><boolean>true<\/boolean><\/value><value><byte>12<\/byte><\/value><value><char>c<\/char><\/value><value><class>LPhee;<\/class><\/value><value><double>1.3<\/double><\/value><value><enum_class>LBoo;<\/enum_class><constant_name>BOO<\/constant_name><\/value><value><float>3.7<\/float><\/value><value><int>33<\/int><\/value><value><long>3333<\/long><\/value><value><short>25<\/short><\/value><value><string>BOO<\/string><\/value><value><annotation_class>LPhoo;<\/annotation_class><\/value><\/array><\/annotation_default>\n@@ -910,1 +911,1 @@\n-        assertArrayEquals(out.toString().trim().split(\" *\\r?\\n\"), expected.trim().split(\"\\n\"));\n+        assertArrayEquals(expected.trim().split(\"\\n\"), out.toString().trim().split(\" *\\r?\\n\"));\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1061,1 +1061,9 @@\n-                case AnnotationValue.OfConstant evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.constant()));\n+                case AnnotationValue.OfBoolean evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfByte evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfCharacter evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfFloat evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfDouble evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfInteger evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfLong evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfShort evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfString evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}