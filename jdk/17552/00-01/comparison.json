{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/g1\/g1RegionPinCache.inline.hpp\"\n@@ -174,0 +175,4 @@\n+  {\n+    G1RegionPinCache& cache = G1ThreadLocalData::pin_count_cache(thread);\n+    cache.flush();\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -270,2 +270,0 @@\n-  HeapRegion* r = heap_region_containing(obj);\n-  uint obj_region_idx = r->hrm_index();\n@@ -273,0 +271,1 @@\n+  uint obj_region_idx = heap_region_containing(obj)->hrm_index();\n@@ -279,2 +278,0 @@\n-  HeapRegion* r = heap_region_containing(obj);\n-  uint obj_region_idx = r->hrm_index();\n@@ -282,0 +279,1 @@\n+  uint obj_region_idx = heap_region_containing(obj)->hrm_index();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-\n-#include \"gc\/g1\/g1RegionPinCache.inline.hpp\"\n-#include \"gc\/g1\/g1CollectedHeap.inline.hpp\"\n-#include \"gc\/g1\/heapRegion.inline.hpp\"\n-\n-G1RegionPinCache::~G1RegionPinCache() {\n-  flush();\n-}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionPinCache.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/g1\/heapRegion.hpp\"\n@@ -31,3 +32,6 @@\n-\/\/ Holds the pinned object count increment for the given region for a Java thread.\n-\/\/ I.e. the _count value may actually be negative temporarily if pinning operations\n-\/\/ were interleaved between two regions.\n+\/\/ Holds (caches) the pending pinned object count adjustment for the region\n+\/\/ _region_idx on a per thread basis.\n+\/\/ Keeping such a cache avoids the expensive atomic operations when updating the\n+\/\/ pin count for the very common case that the application pins and unpins the\n+\/\/ same object with any interleaving by a garbage collection or pinning\/unpinning\n+\/\/ to an object in another region.\n@@ -41,2 +45,1 @@\n-  G1RegionPinCache() : _region_idx(0), _count(0) { }\n-  ~G1RegionPinCache();\n+  G1RegionPinCache() : _region_idx(G1_NO_HRM_INDEX), _count(0) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionPinCache.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  flush_and_set(0, 0);\n+  flush_and_set(G1_NO_HRM_INDEX, 0);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionPinCache.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,6 +539,0 @@\n-\n-#ifdef ASSERT\n-  for (JavaThreadIteratorWithHandle jtiwh; JavaThread *thread = jtiwh.next(); ) {\n-    assert(G1ThreadLocalData::pin_count_cache(thread).count() == 0, \"must be flushed\");\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -305,0 +305,2 @@\n+  \/\/ Atomically adjust the pinned object count by the given value. Value must not\n+  \/\/ be zero.\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}