{"files":[{"patch":"@@ -4,0 +4,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -22,2 +23,4 @@\n-    \/\/ Used reflectively\n-    private volatile U underlying;\n+    \/\/ Used reflectively. This field can only transition at most once from being set to a\n+    \/\/ non-null reference to being `null`. Once `null`, it is never read. This allows\n+    \/\/ the field to be non-volatile, which is crucial for getting optimum performance.\n+    private U underlying;\n@@ -26,1 +29,1 @@\n-    private volatile int counter;\n+    private int counter;\n@@ -31,0 +34,2 @@\n+        \/\/ Safe publication\n+        UNSAFE.storeStoreFence();\n@@ -33,0 +38,1 @@\n+    @ForceInline\n@@ -39,1 +45,1 @@\n-        return counter;\n+        return UNSAFE.getIntVolatile(this, COUNTER_OFFSET);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/UnderlyingHolder.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}