{"files":[{"patch":"@@ -60,0 +60,7 @@\n+void G1BiasedMappedArrayBase::verify_biased_index_inclusive_end(idx_t biased_index) const {\n+  guarantee(_biased_base != nullptr, \"Array not initialized\");\n+  guarantee(biased_index >= bias() && biased_index <= (bias() + length()),\n+            \"Biased index out of inclusive bounds, index: %zu bias: %zu length: %zu\",\n+            biased_index, bias(), length());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+  void verify_biased_index_inclusive_end(idx_t biased_index) const PRODUCT_RETURN;\n@@ -157,0 +158,9 @@\n+protected:\n+  \/\/ Returns the address of the element the given address maps to\n+  T* address_mapped_to(HeapWord* address) {\n+    idx_t biased_index = ((uintptr_t)address) >> this->shift_by();\n+    this->verify_biased_index_inclusive_end(biased_index);\n+    return biased_base() + biased_index;\n+  }\n+\n+public:\n@@ -176,1 +186,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}