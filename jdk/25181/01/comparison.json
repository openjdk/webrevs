{"files":[{"patch":"@@ -1936,1 +1936,0 @@\n-    case Op_SubHF:\n@@ -1938,0 +1937,1 @@\n+    case Op_SubHF:\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,3 +98,0 @@\n-      case Op_VectorCastHF2F:\n-      case Op_VectorCastF2HF:\n-        return UseZvfh;\n@@ -116,0 +113,12 @@\n+      case Op_VectorCastHF2F:\n+      case Op_VectorCastF2HF:\n+      case Op_AddVHF:\n+      case Op_DivVHF:\n+      case Op_MaxVHF:\n+      case Op_MinVHF:\n+      case Op_MulVHF:\n+      case Op_SqrtVHF:\n+      case Op_SubVHF:\n+        return UseZvfh;\n+      case Op_FmaVHF:\n+        return UseZvfh && UseFMA;\n@@ -366,0 +375,16 @@\n+instruct vadd_hfp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (AddVHF src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vadd_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfadd_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -549,0 +574,15 @@\n+instruct vsub_hfp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (SubVHF src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsub_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfsub_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -1545,0 +1585,16 @@\n+instruct vdiv_hfp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (DivVHF src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vdiv_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfdiv_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -1701,0 +1757,34 @@\n+\/\/ vector float-point max\/min (half precision)\n+\n+instruct vmax_hfp(vReg dst, vReg src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst (MaxVHF src1 src2));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmax_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n+                   as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg),\n+                   bt, false \/* is_min *\/, Matcher::vector_length(this));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmin_hfp(vReg dst, vReg src1, vReg src2, vRegMask_V0 v0) %{\n+  match(Set dst (MinVHF src1 src2));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmin_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ minmax_fp_v(as_VectorRegister($dst$$reg),\n+                   as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg),\n+                   bt, true \/* is_min *\/, Matcher::vector_length(this));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -1773,0 +1863,17 @@\n+\/\/ dst_src1 = src2 * src3 + dst_src1 (half precision)\n+instruct vhfmla(vReg dst_src1, vReg src2, vReg src3) %{\n+  match(Set dst_src1 (FmaVHF dst_src1 (Binary src2 src3)));\n+  ins_cost(VEC_COST);\n+  format %{ \"vhfmla $dst_src1, $dst_src1, $src2, $src3\" %}\n+  ins_encode %{\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfmacc_vv(as_VectorRegister($dst_src1$$reg),\n+                 as_VectorRegister($src2$$reg), as_VectorRegister($src3$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -2041,0 +2148,15 @@\n+instruct vmul_hfp(vReg dst, vReg src1, vReg src2) %{\n+  match(Set dst (MulVHF src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vmul_hfp $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfmul_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -2974,0 +3096,13 @@\n+instruct replicateHF(vReg dst, fRegF src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n+  ins_cost(VEC_COST);\n+  format %{ \"replicateHF $dst, $src\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n+    __ vfmv_v_f(as_VectorRegister($dst$$reg), $src$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -4017,0 +4152,14 @@\n+instruct vsqrt_hfp(vReg dst, vReg src) %{\n+  match(Set dst (SqrtVHF src));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsqrt_hfp $dst, $src\" %}\n+  ins_encode %{\n+    assert(UseZvfh, \"must\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(bt == T_SHORT, \"must\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vfsqrt_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":152,"deletions":3,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -102,1 +102,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -123,1 +123,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -144,1 +144,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -165,1 +165,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -186,1 +186,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -207,1 +207,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -228,1 +228,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -251,1 +251,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -275,1 +275,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n@@ -298,1 +298,1 @@\n-        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx512_fp16\", \"true\", \"zvfh\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorOperations.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}