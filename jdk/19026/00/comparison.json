{"files":[{"patch":"@@ -479,1 +479,1 @@\n-  RegMaskIterator rmi(stub->live());\n+  RegMaskIterator rmi(stub->preserve_set());\n@@ -494,1 +494,1 @@\n-      \/\/ We have size encoding in OptoReg of stub->live()\n+      \/\/ We have size encoding in OptoReg of stub->preserve_set()\n@@ -535,6 +535,2 @@\n-  \/\/ Remove C-ABI SOE registers, scratch regs and _ref register that will be updated\n-  if (stub->result() != noreg) {\n-    _gp_regs -= RegSet::range(r19, r30) + RegSet::of(r8, r9, stub->result());\n-  } else {\n-    _gp_regs -= RegSet::range(r19, r30) + RegSet::of(r8, r9);\n-  }\n+  \/\/ Remove C-ABI SOE registers and scratch regs\n+  _gp_regs -= RegSet::range(r19, r30) + RegSet::of(r8, r9);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  : _masm(masm), _reg_mask(stub->live()), _result_reg(stub->result()) {\n+  : _masm(masm), _reg_mask(stub->preserve_set()) {\n@@ -320,5 +320,0 @@\n-      \/\/ '_result_reg' will hold the end result of the operation. Its content must thus not be preserved.\n-      if (std_reg == _result_reg) {\n-        continue;\n-      }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-  Register _result_reg;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -399,1 +399,1 @@\n-  RegMaskIterator rmi(stub->live());\n+  RegMaskIterator rmi(stub->preserve_set());\n@@ -417,6 +417,2 @@\n-  \/\/ Remove C-ABI SOE registers, tmp regs and _ref register that will be updated\n-  if (stub->result() != noreg) {\n-    _gp_regs -= RegSet::range(x18, x27) + RegSet::of(x2) + RegSet::of(x8, x9) + RegSet::of(x5, stub->result());\n-  } else {\n-    _gp_regs -= RegSet::range(x18, x27) + RegSet::of(x2, x5) + RegSet::of(x8, x9);\n-  }\n+  \/\/ Remove C-ABI SOE registers and tmp regs\n+  _gp_regs -= RegSet::range(x18, x27) + RegSet::of(x2, x5) + RegSet::of(x8, x9);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -616,7 +616,0 @@\n-  if (stub->result() != noreg) {\n-    caller_saved.Remove(OptoReg::as_OptoReg(stub->result()->as_VMReg()));\n-  }\n-\n-  \/\/ Create mask of live registers\n-  RegMask live = stub->live();\n-\n@@ -628,1 +621,1 @@\n-  RegMaskIterator rmi(live);\n+  RegMaskIterator rmi(stub->preserve_set());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -90,5 +90,0 @@\n-BarrierStubC2::BarrierStubC2(const MachNode* node)\n-  : _node(node),\n-    _entry(),\n-    _continuation() {}\n-\n@@ -99,0 +94,6 @@\n+BarrierStubC2::BarrierStubC2(const MachNode* node)\n+  : _node(node),\n+    _entry(),\n+    _continuation(),\n+    _preserve(live()){}\n+\n@@ -111,0 +112,27 @@\n+void BarrierStubC2::preserve(Register r) {\n+  const VMReg vm_reg = r->as_VMReg();\n+  assert(vm_reg->is_Register(), \"r must be a general-purpose register\");\n+  _preserve.Insert(OptoReg::as_OptoReg(vm_reg));\n+}\n+\n+void BarrierStubC2::dont_preserve(Register r) {\n+  const VMReg vm_reg = r->as_VMReg();\n+  assert(vm_reg->is_Register(), \"r must be a general-purpose register\");\n+  OptoReg::Name reg = OptoReg::as_OptoReg(vm_reg);\n+  \/\/ Subtract not only reg, but also all related OptoRegs that are sub-registers\n+  \/\/ of the same general-purpose, processor register (e.g. {R11, R11_H} for r11\n+  \/\/ in aarch64). We assume that all related OptoRegs have contiguous indices.\n+  while (OptoReg::is_reg(reg)) {\n+    const VMReg vm_reg = OptoReg::as_VMReg(reg);\n+    if (!(vm_reg->is_Register()) || vm_reg->as_Register() != r) {\n+      break;\n+    }\n+    _preserve.Remove(reg);\n+    reg = OptoReg::add(reg, 1);\n+  }\n+}\n+\n+const RegMask& BarrierStubC2::preserve_set() const {\n+  return _preserve;\n+}\n+\n@@ -831,0 +859,1 @@\n+  BarrierSetC2State* bs_state = barrier_set_state();\n@@ -853,0 +882,8 @@\n+      \/\/ If this node tracks out-liveness, update it\n+      if (!bs_state->needs_livein_data()) {\n+        RegMask* const regs = bs_state->live(node);\n+        if (regs != NULL) {\n+          regs->OR(new_live);\n+        }\n+      }\n+\n@@ -876,4 +913,6 @@\n-       \/\/ If this node tracks liveness, update it\n-      RegMask* const regs = barrier_set_state()->live(node);\n-      if (regs != NULL) {\n-        regs->OR(new_live);\n+      \/\/ If this node tracks in-liveness, update it\n+      if (bs_state->needs_livein_data()) {\n+        RegMask* const regs = bs_state->live(node);\n+        if (regs != NULL) {\n+          regs->OR(new_live);\n+        }\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":48,"deletions":9,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -230,0 +230,1 @@\n+  virtual bool needs_livein_data() const = 0;\n@@ -241,0 +242,7 @@\n+  RegMask         _preserve;\n+\n+  \/\/ Registers that are live-in\/live-out of the entire memory access\n+  \/\/ implementation (possibly including multiple barriers). Whether live-in or\n+  \/\/ live-out registers are returned depends on\n+  \/\/ BarrierSetC2State::needs_livein_data().\n+  RegMask& live() const;\n@@ -244,1 +252,2 @@\n-  RegMask& live() const;\n+\n+  \/\/ Entry point to the stub.\n@@ -246,0 +255,1 @@\n+  \/\/ Return point from the stub (typically end of barrier).\n@@ -248,1 +258,6 @@\n-  virtual Register result() const = 0;\n+  \/\/ Preserve the value in reg across runtime calls in this barrier.\n+  void preserve(Register reg);\n+  \/\/ Do not preserve the value in reg across runtime calls in this barrier.\n+  void dont_preserve(Register reg);\n+  \/\/ Set of registers whose value needs to be preserved across runtime calls in this barrier.\n+  const RegMask& preserve_set() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.hpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -145,0 +145,4 @@\n+  bool needs_livein_data() const {\n+    return true;\n+  }\n+\n@@ -203,0 +207,3 @@\n+  \/\/ The runtime call updates the value of ref, so we should not spill and\n+  \/\/ reload its outdated value.\n+  dont_preserve(ref);\n@@ -213,4 +220,0 @@\n-Register ZLoadBarrierStubC2::result() const {\n-  return ref();\n-}\n-\n@@ -275,4 +278,0 @@\n-Register ZStoreBarrierStubC2::result() const {\n-  return noreg;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-  virtual Register result() const = 0;\n@@ -73,1 +72,0 @@\n-  virtual Register result() const;\n@@ -97,1 +95,0 @@\n-  virtual Register result() const;\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}