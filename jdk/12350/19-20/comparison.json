{"files":[{"patch":"@@ -25,14 +25,5 @@\n- * @test\n- * @bug 8298935\n- * @summary Test SuperWord vectorization with different access offsets\n- *          and various MaxVectorSize values, and +- AlignVector.\n- *          Note: CompileCommand Option Vectorize is enabled.\n- * @requires vm.compiler2.enabled\n- * @library \/test\/lib \/\n- * @run driver\/timeout=400 compiler.loopopts.superword.TestDependencyOffsets\n- *\/\n-\n-package compiler.loopopts.superword;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n+ * Summary:\n+ *   Test SuperWord vectorization with different access offsets\n+ *   and various MaxVectorSize values, and +- AlignVector.\n+ *   Note: CompileCommand Option Vectorize is enabled.\n+ *\n@@ -43,1 +34,1 @@\n- * Offsets: 0, -1, 1, -2, 2, -3, 3, -4, 4, -7, 7, -8, 8, -15, 15, -16, 16, -18, 18, -20, 20, -31, 31, -32, 32, -63, 63, -64, 64, -65, 65, -128, 128, -129, 129, -192, 192\n+ * Offsets: 0, -1, 1, -2, 2, -3, 3, -4, 4, -7, 7, -8, 8, -14, 14, -16, 16, -18, 18, -20, 20, -31, 31, -32, 32, -63, 63, -64, 64, -65, 65, -128, 128, -129, 129, -192, 192\n@@ -101,0 +92,367 @@\n+\/*\n+ * @test id=sse4-v016-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v016-A\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v016-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v016-U\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v008-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v008-A\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v008-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v008-U\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v004-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v004-A\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v004-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v004-U\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v002-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v002-A\n+ *\/\n+\n+\/*\n+ * @test id=sse4-v002-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*sse4.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets sse4-v002-U\n+ *\/\n+\n+\/*\n+ * @test id=avx1-v032-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx1-v032-A\n+ *\/\n+\n+\/*\n+ * @test id=avx1-v032-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx1-v032-U\n+ *\/\n+\n+\/*\n+ * @test id=avx1-v016-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx1-v016-A\n+ *\/\n+\n+\/*\n+ * @test id=avx1-v016-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx1-v016-U\n+ *\/\n+\n+\/*\n+ * @test id=avx2-v032-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx2-v032-A\n+ *\/\n+\n+\/*\n+ * @test id=avx2-v032-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx2-v032-U\n+ *\/\n+\n+\/*\n+ * @test id=avx2-v016-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx2-v016-A\n+ *\/\n+\n+\/*\n+ * @test id=avx2-v016-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx2-v016-U\n+ *\/\n+\n+\/*\n+ * @test id=avx512-v064-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512-v064-A\n+ *\/\n+\n+\/*\n+ * @test id=avx512-v064-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512-v064-U\n+ *\/\n+\n+\/*\n+ * @test id=avx512-v032-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512-v032-A\n+ *\/\n+\n+\/*\n+ * @test id=avx512-v032-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512-v032-U\n+ *\/\n+\n+\/*\n+ * @test id=avx512bw-v064-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512bw.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512bw-v064-A\n+ *\/\n+\n+\/*\n+ * @test id=avx512bw-v064-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512bw.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512bw-v064-U\n+ *\/\n+\n+\/*\n+ * @test id=avx512bw-v032-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512bw.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512bw-v032-A\n+ *\/\n+\n+\/*\n+ * @test id=avx512bw-v032-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch==\"x86\" | os.arch==\"i386\" | os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @requires vm.cpu.features ~= \".*avx512bw.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets avx512bw-v032-U\n+ *\/\n+\n+\/*\n+ * @test id=vec-v064-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v064-A\n+ *\/\n+\n+\/*\n+ * @test id=vec-v064-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v064-U\n+ *\/\n+\n+\/*\n+ * @test id=vec-v032-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v032-A\n+ *\/\n+\n+\/*\n+ * @test id=vec-v032-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v032-U\n+ *\/\n+\n+\/*\n+ * @test id=vec-v016-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v016-A\n+ *\/\n+\n+\/*\n+ * @test id=vec-v016-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v016-U\n+ *\/\n+\n+\/*\n+ * @test id=vec-v008-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v008-A\n+ *\/\n+\n+\/*\n+ * @test id=vec-v008-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v008-U\n+ *\/\n+\n+\/*\n+ * @test id=vec-v004-A\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v004-A\n+ *\/\n+\n+\/*\n+ * @test id=vec-v004-U\n+ * @bug 8298935\n+ * @summary Test SuperWord: vector size, offsets, dependencies, alignment.\n+ * @requires vm.compiler2.enabled\n+ * @requires (os.arch!=\"x86\" & os.arch!=\"i386\" & os.arch!=\"amd64\" & os.arch!=\"x86_64\")\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestDependencyOffsets vec-v004-U\n+ *\/\n+\n+package compiler.loopopts.superword;\n+import compiler.lib.ir_framework.*;\n+\n@@ -117,2 +475,2 @@\n-    static int[] goldIntM15 = new int[RANGE];\n-    static int[] goldIntP15 = new int[RANGE];\n+    static int[] goldIntM14 = new int[RANGE];\n+    static int[] goldIntP14 = new int[RANGE];\n@@ -154,2 +512,2 @@\n-    static long[] goldLongM15 = new long[RANGE];\n-    static long[] goldLongP15 = new long[RANGE];\n+    static long[] goldLongM14 = new long[RANGE];\n+    static long[] goldLongP14 = new long[RANGE];\n@@ -191,2 +549,2 @@\n-    static short[] goldShortM15 = new short[RANGE];\n-    static short[] goldShortP15 = new short[RANGE];\n+    static short[] goldShortM14 = new short[RANGE];\n+    static short[] goldShortP14 = new short[RANGE];\n@@ -228,2 +586,2 @@\n-    static char[] goldCharM15 = new char[RANGE];\n-    static char[] goldCharP15 = new char[RANGE];\n+    static char[] goldCharM14 = new char[RANGE];\n+    static char[] goldCharP14 = new char[RANGE];\n@@ -265,2 +623,2 @@\n-    static byte[] goldByteM15 = new byte[RANGE];\n-    static byte[] goldByteP15 = new byte[RANGE];\n+    static byte[] goldByteM14 = new byte[RANGE];\n+    static byte[] goldByteP14 = new byte[RANGE];\n@@ -302,2 +660,2 @@\n-    static float[] goldFloatM15 = new float[RANGE];\n-    static float[] goldFloatP15 = new float[RANGE];\n+    static float[] goldFloatM14 = new float[RANGE];\n+    static float[] goldFloatP14 = new float[RANGE];\n@@ -339,2 +697,2 @@\n-    static double[] goldDoubleM15 = new double[RANGE];\n-    static double[] goldDoubleP15 = new double[RANGE];\n+    static double[] goldDoubleM14 = new double[RANGE];\n+    static double[] goldDoubleP14 = new double[RANGE];\n@@ -392,4 +750,4 @@\n-        init(goldIntM15);\n-        testIntM15(goldIntM15);\n-        init(goldIntP15);\n-        testIntP15(goldIntP15);\n+        init(goldIntM14);\n+        testIntM14(goldIntM14);\n+        init(goldIntP14);\n+        testIntP14(goldIntP14);\n@@ -466,4 +824,4 @@\n-        init(goldLongM15);\n-        testLongM15(goldLongM15);\n-        init(goldLongP15);\n-        testLongP15(goldLongP15);\n+        init(goldLongM14);\n+        testLongM14(goldLongM14);\n+        init(goldLongP14);\n+        testLongP14(goldLongP14);\n@@ -540,4 +898,4 @@\n-        init(goldShortM15);\n-        testShortM15(goldShortM15);\n-        init(goldShortP15);\n-        testShortP15(goldShortP15);\n+        init(goldShortM14);\n+        testShortM14(goldShortM14);\n+        init(goldShortP14);\n+        testShortP14(goldShortP14);\n@@ -614,4 +972,4 @@\n-        init(goldCharM15);\n-        testCharM15(goldCharM15);\n-        init(goldCharP15);\n-        testCharP15(goldCharP15);\n+        init(goldCharM14);\n+        testCharM14(goldCharM14);\n+        init(goldCharP14);\n+        testCharP14(goldCharP14);\n@@ -688,4 +1046,4 @@\n-        init(goldByteM15);\n-        testByteM15(goldByteM15);\n-        init(goldByteP15);\n-        testByteP15(goldByteP15);\n+        init(goldByteM14);\n+        testByteM14(goldByteM14);\n+        init(goldByteP14);\n+        testByteP14(goldByteP14);\n@@ -762,4 +1120,4 @@\n-        init(goldFloatM15);\n-        testFloatM15(goldFloatM15);\n-        init(goldFloatP15);\n-        testFloatP15(goldFloatP15);\n+        init(goldFloatM14);\n+        testFloatM14(goldFloatM14);\n+        init(goldFloatP14);\n+        testFloatP14(goldFloatP14);\n@@ -836,4 +1194,4 @@\n-        init(goldDoubleM15);\n-        testDoubleM15(goldDoubleM15);\n-        init(goldDoubleP15);\n-        testDoubleP15(goldDoubleP15);\n+        init(goldDoubleM14);\n+        testDoubleM14(goldDoubleM14);\n+        init(goldDoubleP14);\n+        testDoubleP14(goldDoubleP14);\n@@ -895,8 +1253,109 @@\n-        int i = 0;\n-        Scenario[] scenarios = new Scenario[16];\n-        for (int maxVectorSize : new int[] {1, 2, 4, 8, 16, 32, 64, 128}) {\n-            for (String alignVectorSign : new String[] {\"+\", \"-\"}) {\n-                scenarios[i] = new Scenario(i, \"-XX:\" + alignVectorSign + \"AlignVector\",\n-                                               \"-XX:MaxVectorSize=\" + maxVectorSize);\n-                i++;\n-            }\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Test requires exactly one argument!\");\n+        }\n+\n+        switch (args[0]) {\n+        case \"sse4-v016-A\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=16\", \"-XX:+AlignVector\");\n+            break;\n+        case \"sse4-v016-U\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=16\", \"-XX:-AlignVector\");\n+            break;\n+        case \"sse4-v008-A\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=8\", \"-XX:+AlignVector\");\n+            break;\n+        case \"sse4-v008-U\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=8\", \"-XX:-AlignVector\");\n+            break;\n+        case \"sse4-v004-A\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=4\", \"-XX:+AlignVector\");\n+            break;\n+        case \"sse4-v004-U\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=4\", \"-XX:-AlignVector\");\n+            break;\n+        case \"sse4-v002-A\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=4\", \"-XX:+AlignVector\");\n+            break;\n+        case \"sse4-v002-U\":\n+            framework.addFlags(\"-XX:UseSSE=4\", \"-XX:MaxVectorSize=4\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx1-v032-A\":\n+            framework.addFlags(\"-XX:UseAVX=1\", \"-XX:MaxVectorSize=32\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx1-v032-U\":\n+            framework.addFlags(\"-XX:UseAVX=1\", \"-XX:MaxVectorSize=32\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx1-v016-A\":\n+            framework.addFlags(\"-XX:UseAVX=1\", \"-XX:MaxVectorSize=16\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx1-v016-U\":\n+            framework.addFlags(\"-XX:UseAVX=1\", \"-XX:MaxVectorSize=16\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx2-v032-A\":\n+            framework.addFlags(\"-XX:UseAVX=2\", \"-XX:MaxVectorSize=32\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx2-v032-U\":\n+            framework.addFlags(\"-XX:UseAVX=2\", \"-XX:MaxVectorSize=32\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx2-v016-A\":\n+            framework.addFlags(\"-XX:UseAVX=2\", \"-XX:MaxVectorSize=16\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx2-v016-U\":\n+            framework.addFlags(\"-XX:UseAVX=2\", \"-XX:MaxVectorSize=16\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx512-v064-A\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:+UseKNLSetting\", \"-XX:MaxVectorSize=64\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx512-v064-U\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:+UseKNLSetting\", \"-XX:MaxVectorSize=64\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx512-v032-A\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:+UseKNLSetting\", \"-XX:MaxVectorSize=32\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx512-v032-U\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:+UseKNLSetting\", \"-XX:MaxVectorSize=32\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx512bw-v064-A\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:MaxVectorSize=64\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx512bw-v064-U\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:MaxVectorSize=64\", \"-XX:-AlignVector\");\n+            break;\n+        case \"avx512bw-v032-A\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:MaxVectorSize=32\", \"-XX:+AlignVector\");\n+            break;\n+        case \"avx512bw-v032-U\":\n+            framework.addFlags(\"-XX:UseAVX=3\", \"-XX:MaxVectorSize=32\", \"-XX:-AlignVector\");\n+            break;\n+        case \"vec-v064-A\":\n+            framework.addFlags(\"-XX:MaxVectorSize=64\", \"-XX:+AlignVector\");\n+            break;\n+        case \"vec-v064-U\":\n+            framework.addFlags(\"-XX:MaxVectorSize=64\", \"-XX:-AlignVector\");\n+            break;\n+        case \"vec-v032-A\":\n+            framework.addFlags(\"-XX:MaxVectorSize=32\", \"-XX:+AlignVector\");\n+            break;\n+        case \"vec-v032-U\":\n+            framework.addFlags(\"-XX:MaxVectorSize=32\", \"-XX:-AlignVector\");\n+            break;\n+        case \"vec-v016-A\":\n+            framework.addFlags(\"-XX:MaxVectorSize=16\", \"-XX:+AlignVector\");\n+            break;\n+        case \"vec-v016-U\":\n+            framework.addFlags(\"-XX:MaxVectorSize=16\", \"-XX:-AlignVector\");\n+            break;\n+        case \"vec-v008-A\":\n+            framework.addFlags(\"-XX:MaxVectorSize=8\", \"-XX:+AlignVector\");\n+            break;\n+        case \"vec-v008-U\":\n+            framework.addFlags(\"-XX:MaxVectorSize=8\", \"-XX:-AlignVector\");\n+            break;\n+        case \"vec-v004-A\":\n+            framework.addFlags(\"-XX:MaxVectorSize=4\", \"-XX:+AlignVector\");\n+            break;\n+        case \"vec-v004-U\":\n+            framework.addFlags(\"-XX:MaxVectorSize=4\", \"-XX:-AlignVector\");\n+            break;\n+        default:\n+            throw new RuntimeException(\"Test argument not recognized: \" + args[0]);\n@@ -904,1 +1363,0 @@\n-        framework.addScenarios(scenarios);\n@@ -1406,4 +1864,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n@@ -1414,4 +1868,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n@@ -1422,4 +1872,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -1430,7 +1876,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testIntM15(int[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (int)(data[j] * (int)-11);\n+    public static void testIntM14(int[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (int)(data[j] * (int)-11);\n@@ -1440,1 +1882,1 @@\n-    @Run(test = \"testIntM15\")\n+    @Run(test = \"testIntM14\")\n@@ -1442,1 +1884,1 @@\n-    public static void runIntM15() {\n+    public static void runIntM14() {\n@@ -1445,2 +1887,2 @@\n-        testIntM15(data);\n-        verify(\"testIntM15\", data, goldIntM15);\n+        testIntM14(data);\n+        verify(\"testIntM14\", data, goldIntM14);\n@@ -1459,1 +1901,1 @@\n-    \/\/   positive byte_offset 60 can lead to cyclic dependency\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n@@ -1461,1 +1903,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n@@ -1467,3 +1909,3 @@\n-    public static void testIntP15(int[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (int)(data[j] * (int)-11);\n+    public static void testIntP14(int[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (int)(data[j] * (int)-11);\n@@ -1473,1 +1915,1 @@\n-    @Run(test = \"testIntP15\")\n+    @Run(test = \"testIntP14\")\n@@ -1475,1 +1917,1 @@\n-    public static void runIntP15() {\n+    public static void runIntP14() {\n@@ -1478,2 +1920,2 @@\n-        testIntP15(data);\n-        verify(\"testIntP15\", data, goldIntP15);\n+        testIntP14(data);\n+        verify(\"testIntP14\", data, goldIntP14);\n@@ -2839,4 +3281,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n@@ -2847,4 +3285,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n@@ -2855,4 +3289,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -2863,7 +3293,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testLongM15(long[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (long)(data[j] + (long)-11);\n+    public static void testLongM14(long[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (long)(data[j] + (long)-11);\n@@ -2873,1 +3299,1 @@\n-    @Run(test = \"testLongM15\")\n+    @Run(test = \"testLongM14\")\n@@ -2875,1 +3301,1 @@\n-    public static void runLongM15() {\n+    public static void runLongM14() {\n@@ -2878,2 +3304,2 @@\n-        testLongM15(data);\n-        verify(\"testLongM15\", data, goldLongM15);\n+        testLongM14(data);\n+        verify(\"testLongM14\", data, goldLongM14);\n@@ -2887,0 +3313,4 @@\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n@@ -2899,3 +3329,3 @@\n-    public static void testLongP15(long[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (long)(data[j] + (long)-11);\n+    public static void testLongP14(long[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (long)(data[j] + (long)-11);\n@@ -2905,1 +3335,1 @@\n-    @Run(test = \"testLongP15\")\n+    @Run(test = \"testLongP14\")\n@@ -2907,1 +3337,1 @@\n-    public static void runLongP15() {\n+    public static void runLongP14() {\n@@ -2910,2 +3340,2 @@\n-        testLongP15(data);\n-        verify(\"testLongP15\", data, goldLongP15);\n+        testLongP14(data);\n+        verify(\"testLongP14\", data, goldLongP14);\n@@ -4266,4 +4696,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n@@ -4274,4 +4700,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n@@ -4282,4 +4704,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n@@ -4290,7 +4708,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testShortM15(short[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (short)(data[j] * (short)-11);\n+    public static void testShortM14(short[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (short)(data[j] * (short)-11);\n@@ -4300,1 +4714,1 @@\n-    @Run(test = \"testShortM15\")\n+    @Run(test = \"testShortM14\")\n@@ -4302,1 +4716,1 @@\n-    public static void runShortM15() {\n+    public static void runShortM14() {\n@@ -4305,2 +4719,2 @@\n-        testShortM15(data);\n-        verify(\"testShortM15\", data, goldShortM15);\n+        testShortM14(data);\n+        verify(\"testShortM14\", data, goldShortM14);\n@@ -4315,1 +4729,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -4317,1 +4731,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -4320,1 +4734,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -4322,1 +4736,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -4325,1 +4739,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -4327,1 +4741,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -4329,3 +4743,3 @@\n-    public static void testShortP15(short[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (short)(data[j] * (short)-11);\n+    public static void testShortP14(short[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (short)(data[j] * (short)-11);\n@@ -4335,1 +4749,1 @@\n-    @Run(test = \"testShortP15\")\n+    @Run(test = \"testShortP14\")\n@@ -4337,1 +4751,1 @@\n-    public static void runShortP15() {\n+    public static void runShortP14() {\n@@ -4340,2 +4754,2 @@\n-        testShortP15(data);\n-        verify(\"testShortP15\", data, goldShortP15);\n+        testShortP14(data);\n+        verify(\"testShortP14\", data, goldShortP14);\n@@ -5680,4 +6094,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n@@ -5688,4 +6098,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n@@ -5696,4 +6102,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n@@ -5704,7 +6106,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testCharM15(char[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (char)(data[j] * (char)-11);\n+    public static void testCharM14(char[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (char)(data[j] * (char)-11);\n@@ -5714,1 +6112,1 @@\n-    @Run(test = \"testCharM15\")\n+    @Run(test = \"testCharM14\")\n@@ -5716,1 +6114,1 @@\n-    public static void runCharM15() {\n+    public static void runCharM14() {\n@@ -5719,2 +6117,2 @@\n-        testCharM15(data);\n-        verify(\"testCharM15\", data, goldCharM15);\n+        testCharM14(data);\n+        verify(\"testCharM14\", data, goldCharM14);\n@@ -5729,1 +6127,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -5731,1 +6129,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -5734,1 +6132,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -5736,1 +6134,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -5739,1 +6137,1 @@\n-    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -5741,1 +6139,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 28\"},\n@@ -5743,3 +6141,3 @@\n-    public static void testCharP15(char[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (char)(data[j] * (char)-11);\n+    public static void testCharP14(char[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (char)(data[j] * (char)-11);\n@@ -5749,1 +6147,1 @@\n-    @Run(test = \"testCharP15\")\n+    @Run(test = \"testCharP14\")\n@@ -5751,1 +6149,1 @@\n-    public static void runCharP15() {\n+    public static void runCharP14() {\n@@ -5754,2 +6152,2 @@\n-        testCharP15(data);\n-        verify(\"testCharP15\", data, goldCharP15);\n+        testCharP14(data);\n+        verify(\"testCharP14\", data, goldCharP14);\n@@ -7119,3 +7517,3 @@\n-    public static void testByteM15(byte[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (byte)(data[j] * (byte)11);\n+    public static void testByteM14(byte[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (byte)(data[j] * (byte)11);\n@@ -7125,1 +7523,1 @@\n-    @Run(test = \"testByteM15\")\n+    @Run(test = \"testByteM14\")\n@@ -7127,1 +7525,1 @@\n-    public static void runByteM15() {\n+    public static void runByteM14() {\n@@ -7130,2 +7528,2 @@\n-        testByteM15(data);\n-        verify(\"testByteM15\", data, goldByteM15);\n+        testByteM14(data);\n+        verify(\"testByteM14\", data, goldByteM14);\n@@ -7136,1 +7534,1 @@\n-    \/\/   positive byte_offset 15 can lead to cyclic dependency\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -7138,1 +7536,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -7141,1 +7539,1 @@\n-    \/\/   positive byte_offset 15 can lead to cyclic dependency\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -7143,1 +7541,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -7146,1 +7544,1 @@\n-    \/\/   positive byte_offset 15 can lead to cyclic dependency\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -7148,1 +7546,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -7151,1 +7549,1 @@\n-    \/\/   positive byte_offset 15 can lead to cyclic dependency\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -7153,1 +7551,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -7155,3 +7553,3 @@\n-    public static void testByteP15(byte[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (byte)(data[j] * (byte)11);\n+    public static void testByteP14(byte[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (byte)(data[j] * (byte)11);\n@@ -7161,1 +7559,1 @@\n-    @Run(test = \"testByteP15\")\n+    @Run(test = \"testByteP14\")\n@@ -7163,1 +7561,1 @@\n-    public static void runByteP15() {\n+    public static void runByteP14() {\n@@ -7166,2 +7564,2 @@\n-        testByteP15(data);\n-        verify(\"testByteP15\", data, goldByteP15);\n+        testByteP14(data);\n+        verify(\"testByteP14\", data, goldByteP14);\n@@ -8528,4 +8926,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n@@ -8536,4 +8930,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n@@ -8544,4 +8934,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -8552,7 +8938,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testFloatM15(float[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (float)(data[j] * (float)1.001f);\n+    public static void testFloatM14(float[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (float)(data[j] * (float)1.001f);\n@@ -8562,1 +8944,1 @@\n-    @Run(test = \"testFloatM15\")\n+    @Run(test = \"testFloatM14\")\n@@ -8564,1 +8946,1 @@\n-    public static void runFloatM15() {\n+    public static void runFloatM14() {\n@@ -8567,2 +8949,2 @@\n-        testFloatM15(data);\n-        verify(\"testFloatM15\", data, goldFloatM15);\n+        testFloatM14(data);\n+        verify(\"testFloatM14\", data, goldFloatM14);\n@@ -8581,1 +8963,1 @@\n-    \/\/   positive byte_offset 60 can lead to cyclic dependency\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n@@ -8583,1 +8965,1 @@\n-        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n@@ -8589,3 +8971,3 @@\n-    public static void testFloatP15(float[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (float)(data[j] * (float)1.001f);\n+    public static void testFloatP14(float[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (float)(data[j] * (float)1.001f);\n@@ -8595,1 +8977,1 @@\n-    @Run(test = \"testFloatP15\")\n+    @Run(test = \"testFloatP14\")\n@@ -8597,1 +8979,1 @@\n-    public static void runFloatP15() {\n+    public static void runFloatP14() {\n@@ -8600,2 +8982,2 @@\n-        testFloatP15(data);\n-        verify(\"testFloatP15\", data, goldFloatP15);\n+        testFloatP14(data);\n+        verify(\"testFloatP14\", data, goldFloatP14);\n@@ -9961,4 +10343,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n@@ -9969,4 +10347,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n@@ -9977,4 +10351,0 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -9985,7 +10355,3 @@\n-    \/\/   Strict alignment not possible.\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"AlignVector\", \"true\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testDoubleM15(double[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (double)(data[j] * (double)1.001);\n+    public static void testDoubleM14(double[] data) {\n+        for (int j = 14; j < RANGE; j++) {\n+            data[j + -14] = (double)(data[j] * (double)1.001);\n@@ -9995,1 +10361,1 @@\n-    @Run(test = \"testDoubleM15\")\n+    @Run(test = \"testDoubleM14\")\n@@ -9997,1 +10363,1 @@\n-    public static void runDoubleM15() {\n+    public static void runDoubleM14() {\n@@ -10000,2 +10366,2 @@\n-        testDoubleM15(data);\n-        verify(\"testDoubleM15\", data, goldDoubleM15);\n+        testDoubleM14(data);\n+        verify(\"testDoubleM14\", data, goldDoubleM14);\n@@ -10009,0 +10375,4 @@\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n@@ -10021,3 +10391,3 @@\n-    public static void testDoubleP15(double[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (double)(data[j] * (double)1.001);\n+    public static void testDoubleP14(double[] data) {\n+        for (int j = 0; j < RANGE - 14; j++) {\n+            data[j + 14] = (double)(data[j] * (double)1.001);\n@@ -10027,1 +10397,1 @@\n-    @Run(test = \"testDoubleP15\")\n+    @Run(test = \"testDoubleP14\")\n@@ -10029,1 +10399,1 @@\n-    public static void runDoubleP15() {\n+    public static void runDoubleP14() {\n@@ -10032,2 +10402,2 @@\n-        testDoubleP15(data);\n-        verify(\"testDoubleP15\", data, goldDoubleP15);\n+        testDoubleP14(data);\n+        verify(\"testDoubleP14\", data, goldDoubleP14);\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestDependencyOffsets.java","additions":654,"deletions":284,"binary":false,"changes":938,"status":"modified"}]}