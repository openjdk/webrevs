{"files":[{"patch":"@@ -32,1 +32,1 @@\n- * @run driver compiler.loopopts.superword.TestDependencyOffsets\n+ * @run driver\/timeout=400 compiler.loopopts.superword.TestDependencyOffsets\n@@ -43,1 +43,1 @@\n- * Offsets: 0, -1, 1, -2, 2, -3, 3, -4, 4, -7, 7, -8, 8, -15, 15, -16, 16, -31, 31, -32, 32, -63, 63, -64, 64, -65, 65, -128, 128, -129, 129, -192, 192\n+ * Offsets: 0, -1, 1, -2, 2, -3, 3, -4, 4, -7, 7, -8, 8, -15, 15, -16, 16, -18, 18, -20, 20, -31, 31, -32, 32, -63, 63, -64, 64, -65, 65, -128, 128, -129, 129, -192, 192\n@@ -49,1 +49,1 @@\n- * Generally, we vectorize if:\n+ * With '-XX:-AlignVector', we vectorize if:\n@@ -52,0 +52,2 @@\n+ *    -> min_vector_width = max(4, 2 * sizeofop(velt_type))\n+ *    -> simplifies to: vector_width >= min_vector_width\n@@ -62,1 +64,36 @@\n-*\/\n+ *\n+ * Definition:\n+ *     MaxVectorSize: limit through flag\n+ *     vector_width: limit given by specific CPU feature for a specific velt_type\n+ *     actual_vector_width: what is actually vectorized with\n+ *     min_vector_width: what is minimally required for vectorization\n+ *\n+ *     min_vector_width = max(4, 2 * sizeofop(velt_type))\n+ *     MaxVectorSize >= vector_width >= actual_vector_width >= min_vector_width\n+ *\n+ * In general, we cannot easily specify negative IR rules, that require no\n+ * vectorization to happen. We may improve the SuperWord algorithm later,\n+ * or some additional optimization collapses some Loads, and suddenly cyclic\n+ * dependency disappears, and we can vectorize.\n+ *\n+ * With '-XX:+AlignVector', we would like to check that we vectorize exactly iff:\n+ *     byte_offset % actual_vector_width == 0\n+ * Because all vector_widths are powers of 2, this is equivalent to:\n+ *     pow2_factor(byte_offset) >= actual_vector_width\n+ * where pow2_factor computes the largest power of 2 that is a factor of the number.\n+ *\n+ * Under these assumptions, we know there must be vectorization:\n+ *     pow2_factor(byte_offset) >= vector_width\n+ *       implies\n+ *         pow2_factor(byte_offset) >= actual_vector_width\n+ *     MaxVectorSize >= min_vector_size\n+ *       else any vectorization is impossible.\n+ *\n+ * And under the following conditions no vectorization is possible:\n+ *     byte_offset < 0: No cyclic dependency.\n+ *       Cyclic dependency could lead to Load removals, then only the store is vectorized.\n+ *     byte_offset % min_vector_width != 0\n+ *       implies\n+ *         byte_offset % actual_vector_width != 0\n+ *\n+ *\/\n@@ -84,0 +121,4 @@\n+    static int[] goldIntM18 = new int[RANGE];\n+    static int[] goldIntP18 = new int[RANGE];\n+    static int[] goldIntM20 = new int[RANGE];\n+    static int[] goldIntP20 = new int[RANGE];\n@@ -117,0 +158,4 @@\n+    static long[] goldLongM18 = new long[RANGE];\n+    static long[] goldLongP18 = new long[RANGE];\n+    static long[] goldLongM20 = new long[RANGE];\n+    static long[] goldLongP20 = new long[RANGE];\n@@ -150,0 +195,4 @@\n+    static short[] goldShortM18 = new short[RANGE];\n+    static short[] goldShortP18 = new short[RANGE];\n+    static short[] goldShortM20 = new short[RANGE];\n+    static short[] goldShortP20 = new short[RANGE];\n@@ -183,0 +232,4 @@\n+    static char[] goldCharM18 = new char[RANGE];\n+    static char[] goldCharP18 = new char[RANGE];\n+    static char[] goldCharM20 = new char[RANGE];\n+    static char[] goldCharP20 = new char[RANGE];\n@@ -216,0 +269,4 @@\n+    static byte[] goldByteM18 = new byte[RANGE];\n+    static byte[] goldByteP18 = new byte[RANGE];\n+    static byte[] goldByteM20 = new byte[RANGE];\n+    static byte[] goldByteP20 = new byte[RANGE];\n@@ -249,0 +306,4 @@\n+    static float[] goldFloatM18 = new float[RANGE];\n+    static float[] goldFloatP18 = new float[RANGE];\n+    static float[] goldFloatM20 = new float[RANGE];\n+    static float[] goldFloatP20 = new float[RANGE];\n@@ -282,0 +343,4 @@\n+    static double[] goldDoubleM18 = new double[RANGE];\n+    static double[] goldDoubleP18 = new double[RANGE];\n+    static double[] goldDoubleM20 = new double[RANGE];\n+    static double[] goldDoubleP20 = new double[RANGE];\n@@ -335,0 +400,8 @@\n+        init(goldIntM18);\n+        testIntM18(goldIntM18);\n+        init(goldIntP18);\n+        testIntP18(goldIntP18);\n+        init(goldIntM20);\n+        testIntM20(goldIntM20);\n+        init(goldIntP20);\n+        testIntP20(goldIntP20);\n@@ -401,0 +474,8 @@\n+        init(goldLongM18);\n+        testLongM18(goldLongM18);\n+        init(goldLongP18);\n+        testLongP18(goldLongP18);\n+        init(goldLongM20);\n+        testLongM20(goldLongM20);\n+        init(goldLongP20);\n+        testLongP20(goldLongP20);\n@@ -467,0 +548,8 @@\n+        init(goldShortM18);\n+        testShortM18(goldShortM18);\n+        init(goldShortP18);\n+        testShortP18(goldShortP18);\n+        init(goldShortM20);\n+        testShortM20(goldShortM20);\n+        init(goldShortP20);\n+        testShortP20(goldShortP20);\n@@ -533,0 +622,8 @@\n+        init(goldCharM18);\n+        testCharM18(goldCharM18);\n+        init(goldCharP18);\n+        testCharP18(goldCharP18);\n+        init(goldCharM20);\n+        testCharM20(goldCharM20);\n+        init(goldCharP20);\n+        testCharP20(goldCharP20);\n@@ -599,0 +696,8 @@\n+        init(goldByteM18);\n+        testByteM18(goldByteM18);\n+        init(goldByteP18);\n+        testByteP18(goldByteP18);\n+        init(goldByteM20);\n+        testByteM20(goldByteM20);\n+        init(goldByteP20);\n+        testByteP20(goldByteP20);\n@@ -665,0 +770,8 @@\n+        init(goldFloatM18);\n+        testFloatM18(goldFloatM18);\n+        init(goldFloatP18);\n+        testFloatP18(goldFloatP18);\n+        init(goldFloatM20);\n+        testFloatM20(goldFloatM20);\n+        init(goldFloatP20);\n+        testFloatP20(goldFloatP20);\n@@ -731,0 +844,8 @@\n+        init(goldDoubleM18);\n+        testDoubleM18(goldDoubleM18);\n+        init(goldDoubleP18);\n+        testDoubleP18(goldDoubleP18);\n+        init(goldDoubleM20);\n+        testDoubleM20(goldDoubleM20);\n+        init(goldDoubleP20);\n+        testDoubleP20(goldDoubleP20);\n@@ -766,1 +887,0 @@\n-        TestDependencyOffsets x = new TestDependencyOffsets();\n@@ -776,1 +896,1 @@\n-        Scenario[] scenarios = new Scenario[8];\n+        Scenario[] scenarios = new Scenario[16];\n@@ -778,1 +898,1 @@\n-            for (String alignVectorSign : new String[] {\"-\"}) { \/\/ TODO\n+            for (String alignVectorSign : new String[] {\"+\", \"-\"}) {\n@@ -791,1 +911,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -793,1 +913,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -795,4 +915,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -800,4 +917,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -805,1 +919,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -807,1 +921,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -809,4 +923,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -814,4 +925,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -835,1 +943,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -837,1 +945,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -839,0 +947,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -840,1 +949,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -842,1 +951,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -844,1 +953,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -846,0 +955,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -847,1 +957,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -849,1 +959,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -851,1 +961,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -853,0 +963,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -854,1 +965,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -856,1 +967,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -858,1 +969,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -860,0 +971,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -861,1 +973,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -879,32 +991,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -927,1 +1019,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -929,1 +1021,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -931,4 +1023,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -936,4 +1025,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -941,1 +1027,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -943,1 +1029,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -945,4 +1031,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -950,4 +1033,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -971,2 +1051,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -974,1 +1054,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -976,5 +1056,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -982,4 +1059,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -987,2 +1061,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -990,1 +1064,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -992,5 +1066,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -998,4 +1069,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -1019,1 +1087,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1021,1 +1089,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1023,0 +1091,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1024,1 +1093,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1026,1 +1095,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1028,1 +1097,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1030,0 +1099,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1031,1 +1101,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1033,1 +1103,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1035,1 +1105,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1037,0 +1107,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1038,1 +1109,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1040,1 +1111,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1042,1 +1113,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1044,0 +1115,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1045,1 +1117,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1063,2 +1135,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -1066,1 +1138,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -1068,5 +1140,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -1074,4 +1143,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -1079,2 +1145,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -1082,1 +1148,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -1084,5 +1150,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -1090,4 +1153,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -1111,1 +1171,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1113,1 +1173,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1115,4 +1175,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1120,4 +1177,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1125,1 +1179,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1127,1 +1181,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1129,4 +1183,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1134,4 +1185,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1155,1 +1203,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1157,1 +1205,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1159,2 +1207,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1162,2 +1211,2 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -1165,4 +1214,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -1170,2 +1216,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -1173,1 +1219,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -1175,5 +1221,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -1181,4 +1224,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -1202,1 +1242,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1204,1 +1244,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1206,0 +1246,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1207,1 +1248,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1209,1 +1250,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1211,1 +1252,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1213,0 +1254,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1214,1 +1256,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1216,1 +1258,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1218,1 +1260,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1220,0 +1262,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1221,1 +1264,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1223,1 +1266,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1225,1 +1268,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1227,0 +1270,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1228,1 +1272,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1246,1 +1290,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1248,1 +1292,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1250,5 +1294,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -1256,4 +1297,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -1261,2 +1299,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -1264,1 +1302,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -1266,5 +1304,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -1272,4 +1307,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -1293,1 +1325,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1295,1 +1327,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1297,4 +1329,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1302,4 +1331,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1307,1 +1333,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1309,1 +1335,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1311,4 +1337,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1316,4 +1339,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1337,1 +1357,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1339,1 +1359,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1341,2 +1361,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1344,1 +1365,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1346,1 +1367,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1348,2 +1369,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1351,2 +1373,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -1354,1 +1376,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n@@ -1356,4 +1378,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 32\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1361,1 +1380,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1363,2 +1382,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1382,1 +1402,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1384,1 +1404,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1386,0 +1406,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1387,1 +1408,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1389,1 +1410,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1391,1 +1412,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1393,0 +1414,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1394,1 +1416,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1396,1 +1418,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1398,1 +1420,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1400,0 +1422,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1401,1 +1424,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1403,1 +1426,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1405,1 +1428,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1407,0 +1430,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1408,1 +1432,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1426,1 +1450,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1428,1 +1452,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1430,4 +1454,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1435,4 +1456,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1440,2 +1458,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 60 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 60 can lead to cyclic dependency\n@@ -1443,1 +1461,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n@@ -1445,4 +1463,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 60\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1450,4 +1465,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1471,1 +1483,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1473,1 +1485,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1475,4 +1487,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1480,4 +1489,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1485,1 +1491,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1487,1 +1493,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1489,4 +1495,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1494,4 +1497,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1515,1 +1515,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1517,1 +1517,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1519,2 +1519,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1522,1 +1523,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1524,1 +1525,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1526,2 +1527,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1529,1 +1531,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1531,1 +1533,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1533,2 +1535,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1536,1 +1539,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1538,1 +1541,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1540,2 +1543,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1559,1 +1563,133 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testIntM18(int[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (int)(data[j] * (int)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testIntM18\")\n+    @Warmup(0)\n+    public static void runIntM18() {\n+        int[] data = new int[RANGE];\n+        init(data);\n+        testIntM18(data);\n+        verify(\"testIntM18\", data, goldIntM18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testIntP18(int[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (int)(data[j] * (int)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testIntP18\")\n+    @Warmup(0)\n+    public static void runIntP18() {\n+        int[] data = new int[RANGE];\n+        init(data);\n+        testIntP18(data);\n+        verify(\"testIntP18\", data, goldIntP18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testIntM20(int[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (int)(data[j] * (int)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testIntM20\")\n+    @Warmup(0)\n+    public static void runIntM20() {\n+        int[] data = new int[RANGE];\n+        init(data);\n+        testIntM20(data);\n+        verify(\"testIntM20\", data, goldIntM20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testIntP20(int[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (int)(data[j] * (int)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testIntP20\")\n+    @Warmup(0)\n+    public static void runIntP20() {\n+        int[] data = new int[RANGE];\n+        init(data);\n+        testIntP20(data);\n+        verify(\"testIntP20\", data, goldIntP20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1561,1 +1697,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1563,0 +1699,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1564,1 +1701,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1566,1 +1703,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1568,1 +1705,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1570,0 +1707,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1571,1 +1709,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1573,1 +1711,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1575,1 +1713,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1577,0 +1715,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1578,1 +1717,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1580,1 +1719,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1582,1 +1721,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1584,0 +1723,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1585,1 +1725,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1603,1 +1743,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1605,4 +1745,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1610,1 +1747,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1612,1 +1749,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1614,4 +1751,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1619,4 +1753,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1624,1 +1755,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1626,4 +1757,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1647,1 +1775,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1649,4 +1777,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1654,1 +1779,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1656,1 +1781,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1658,4 +1783,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1663,4 +1785,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1668,1 +1787,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1670,4 +1789,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1691,1 +1807,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1693,1 +1809,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1695,2 +1811,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1698,1 +1815,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1700,1 +1817,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1702,2 +1819,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1705,1 +1823,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1707,1 +1825,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1709,2 +1827,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1712,1 +1831,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1714,1 +1833,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1716,2 +1835,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1735,1 +1855,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1737,1 +1857,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1739,0 +1859,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1740,1 +1861,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1742,1 +1863,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1744,1 +1865,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1746,0 +1867,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1747,1 +1869,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1749,1 +1871,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1751,1 +1873,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1753,0 +1875,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1754,1 +1877,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1756,1 +1879,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1758,1 +1881,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1760,0 +1883,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1761,1 +1885,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1779,1 +1903,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1781,4 +1905,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1786,1 +1907,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1788,1 +1909,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1790,4 +1911,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1795,4 +1913,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1800,1 +1915,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1802,4 +1917,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1823,1 +1935,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1825,4 +1937,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1830,1 +1939,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1832,1 +1941,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1834,4 +1943,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1839,4 +1945,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1844,1 +1947,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1846,4 +1949,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1867,1 +1967,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1869,1 +1969,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1871,2 +1971,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1874,1 +1975,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1876,1 +1977,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1878,2 +1979,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1881,1 +1983,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1883,1 +1985,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1885,2 +1987,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1888,1 +1991,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1890,1 +1993,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1892,2 +1995,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -1911,1 +2015,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1913,1 +2017,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1915,0 +2019,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1916,1 +2021,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1918,1 +2023,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1920,1 +2025,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1922,0 +2027,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1923,1 +2029,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1925,1 +2031,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1927,1 +2033,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1929,0 +2035,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1930,1 +2037,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1932,1 +2039,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1934,1 +2041,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1936,0 +2043,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -1937,1 +2045,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -1955,1 +2063,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -1957,4 +2065,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1962,1 +2067,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -1964,1 +2069,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1966,4 +2071,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -1971,4 +2073,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1976,1 +2075,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -1978,4 +2077,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -1999,1 +2095,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2001,4 +2097,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2006,1 +2099,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2008,1 +2101,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2010,4 +2103,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2015,4 +2105,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2020,1 +2107,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2022,4 +2109,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2043,1 +2127,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2045,1 +2129,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2047,2 +2131,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2050,1 +2135,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2052,1 +2137,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2054,2 +2139,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2057,1 +2143,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2059,1 +2145,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2061,2 +2147,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2064,1 +2151,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2066,1 +2153,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2068,2 +2155,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2087,1 +2175,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2089,1 +2177,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2091,0 +2179,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2092,1 +2181,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2094,1 +2183,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2096,1 +2185,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2098,0 +2187,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2099,1 +2189,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2101,1 +2191,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2103,1 +2193,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2105,0 +2195,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2106,1 +2197,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2108,1 +2199,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2110,1 +2201,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2112,0 +2203,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2113,1 +2205,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2131,1 +2223,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2133,4 +2225,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2138,1 +2227,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2140,1 +2229,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2142,4 +2231,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2147,4 +2233,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2152,1 +2235,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2154,4 +2237,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2175,1 +2255,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2177,4 +2257,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2182,1 +2259,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2184,1 +2261,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2186,4 +2263,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2191,4 +2265,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2196,1 +2267,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2198,4 +2269,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2219,1 +2287,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 4\n@@ -2221,1 +2289,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2223,2 +2291,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2226,1 +2295,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -2228,1 +2297,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2230,2 +2299,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2233,1 +2303,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -2235,1 +2305,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2237,2 +2307,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2240,1 +2311,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -2242,1 +2313,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -2244,2 +2315,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -2263,1 +2335,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2265,4 +2337,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2270,1 +2339,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2272,1 +2341,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2274,4 +2343,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2279,4 +2345,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2284,1 +2347,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2286,4 +2349,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2307,1 +2367,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2309,1 +2369,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2311,0 +2371,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2312,1 +2373,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2314,1 +2375,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2316,1 +2377,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2318,0 +2379,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2319,1 +2381,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2321,1 +2383,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2323,1 +2385,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2325,0 +2387,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2326,1 +2389,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2328,1 +2391,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2330,1 +2393,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2332,0 +2395,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2333,1 +2397,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2351,32 +2415,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -2399,1 +2443,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2401,4 +2445,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2406,1 +2447,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2408,1 +2449,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2410,4 +2451,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2415,4 +2453,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2420,1 +2455,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2422,4 +2457,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2443,1 +2475,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2445,1 +2477,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2447,2 +2479,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2450,2 +2483,2 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -2453,1 +2486,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -2455,5 +2488,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -2461,4 +2491,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -2466,2 +2493,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -2469,4 +2496,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -2490,1 +2514,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2492,1 +2516,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2494,0 +2518,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2495,1 +2520,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2497,1 +2522,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2499,1 +2524,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2501,0 +2526,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2502,1 +2528,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2504,1 +2530,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2506,1 +2532,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2508,0 +2534,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2509,1 +2536,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2511,1 +2538,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2513,1 +2540,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2515,0 +2542,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2516,1 +2544,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2534,1 +2562,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2536,4 +2564,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2541,2 +2566,2 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -2544,1 +2569,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -2546,5 +2571,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -2552,4 +2574,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -2557,2 +2576,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -2560,4 +2579,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -2581,1 +2597,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2583,4 +2599,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2588,1 +2601,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2590,1 +2603,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2592,4 +2605,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2597,4 +2607,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2602,1 +2609,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2604,4 +2611,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2625,1 +2629,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2627,1 +2631,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2629,2 +2633,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2632,1 +2637,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2634,1 +2639,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2636,2 +2641,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2639,2 +2645,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -2642,4 +2648,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n@@ -2647,1 +2650,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2649,1 +2652,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2651,2 +2654,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2670,1 +2674,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2672,1 +2676,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2674,0 +2678,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2675,1 +2680,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2677,1 +2682,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2679,1 +2684,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2681,0 +2686,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2682,1 +2688,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2684,1 +2690,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2686,1 +2692,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2688,0 +2694,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2689,1 +2696,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2691,1 +2698,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2693,1 +2700,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2695,0 +2702,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2696,1 +2704,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2714,1 +2722,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2716,4 +2724,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2721,1 +2726,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2723,1 +2728,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2725,5 +2730,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 56 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n@@ -2731,4 +2733,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 56\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n@@ -2736,1 +2735,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2738,4 +2737,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2759,1 +2755,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2761,4 +2757,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2766,1 +2759,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2768,1 +2761,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2770,4 +2763,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2775,4 +2765,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2780,1 +2767,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2782,4 +2769,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2803,1 +2787,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2805,1 +2789,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2807,2 +2791,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2810,1 +2795,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2812,1 +2797,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2814,2 +2799,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2817,1 +2803,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2819,1 +2805,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2821,2 +2807,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2824,1 +2811,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2826,1 +2813,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2828,2 +2815,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2847,1 +2835,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2849,1 +2837,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2851,0 +2839,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2852,1 +2841,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2854,1 +2843,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2856,1 +2845,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2858,0 +2847,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2859,1 +2849,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2861,1 +2851,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2863,1 +2853,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2865,0 +2855,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2866,1 +2857,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2868,1 +2859,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2870,1 +2861,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2872,0 +2863,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -2873,1 +2865,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -2891,1 +2883,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2893,4 +2885,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2898,1 +2887,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2900,1 +2889,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2902,4 +2891,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2907,4 +2893,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2912,1 +2895,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2914,4 +2897,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2935,1 +2915,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2937,4 +2917,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2942,1 +2919,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2944,1 +2921,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2946,4 +2923,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2951,4 +2925,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2956,1 +2927,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -2958,4 +2929,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2979,1 +2947,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -2981,1 +2949,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2983,2 +2951,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2986,1 +2955,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -2988,1 +2957,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2990,2 +2959,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -2993,1 +2963,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -2995,1 +2965,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -2997,2 +2967,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3000,1 +2971,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3002,1 +2973,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3004,2 +2975,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3023,1 +2995,145 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLongM18(long[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (long)(data[j] + (long)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testLongM18\")\n+    @Warmup(0)\n+    public static void runLongM18() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        testLongM18(data);\n+        verify(\"testLongM18\", data, goldLongM18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLongP18(long[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (long)(data[j] + (long)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testLongP18\")\n+    @Warmup(0)\n+    public static void runLongP18() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        testLongP18(data);\n+        verify(\"testLongP18\", data, goldLongP18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLongM20(long[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (long)(data[j] + (long)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testLongM20\")\n+    @Warmup(0)\n+    public static void runLongM20() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        testLongM20(data);\n+        verify(\"testLongM20\", data, goldLongM20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testLongP20(long[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (long)(data[j] + (long)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testLongP20\")\n+    @Warmup(0)\n+    public static void runLongP20() {\n+        long[] data = new long[RANGE];\n+        init(data);\n+        testLongP20(data);\n+        verify(\"testLongP20\", data, goldLongP20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3025,1 +3141,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3027,0 +3143,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3028,1 +3145,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3030,1 +3147,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3032,1 +3149,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3034,0 +3151,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3035,1 +3153,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3037,1 +3155,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3039,1 +3157,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3041,0 +3159,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3042,1 +3161,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3044,1 +3163,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3046,1 +3165,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3048,0 +3167,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3049,1 +3169,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3067,1 +3187,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3069,4 +3189,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3074,1 +3191,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3076,1 +3193,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3078,4 +3195,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3083,4 +3197,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3088,1 +3199,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3090,4 +3201,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3111,1 +3219,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3113,4 +3221,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3118,1 +3223,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3120,1 +3225,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3122,4 +3227,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3127,4 +3229,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3132,1 +3231,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3134,4 +3233,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3155,1 +3251,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3157,1 +3253,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3159,2 +3255,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3162,1 +3259,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3164,1 +3261,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3166,2 +3263,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3169,1 +3267,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3171,1 +3269,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3173,2 +3271,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3176,1 +3275,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3178,1 +3277,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3180,2 +3279,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3199,1 +3299,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3201,1 +3301,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3203,0 +3303,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3204,1 +3305,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3206,1 +3307,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3208,1 +3309,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3210,0 +3311,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3211,1 +3313,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3213,1 +3315,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3215,1 +3317,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3217,0 +3319,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3218,1 +3321,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3220,1 +3323,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3222,1 +3325,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3224,0 +3327,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3225,1 +3329,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3243,1 +3347,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3245,4 +3349,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3250,1 +3351,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3252,1 +3353,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3254,4 +3355,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3259,4 +3357,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3264,1 +3359,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3266,4 +3361,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3287,1 +3379,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3289,4 +3381,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3294,1 +3383,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3296,1 +3385,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3298,4 +3387,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3303,4 +3389,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3308,1 +3391,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3310,4 +3393,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3331,1 +3411,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3333,1 +3413,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3335,2 +3415,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3338,1 +3419,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3340,1 +3421,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3342,2 +3423,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3345,1 +3427,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3347,1 +3429,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3349,2 +3431,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3352,1 +3435,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3354,1 +3437,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3356,2 +3439,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3375,1 +3459,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3377,1 +3461,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3379,0 +3463,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3380,1 +3465,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3382,1 +3467,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3384,1 +3469,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3386,0 +3471,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3387,1 +3473,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3389,1 +3475,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3391,1 +3477,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3393,0 +3479,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3394,1 +3481,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3396,1 +3483,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3398,1 +3485,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3400,0 +3487,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3401,1 +3489,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3419,1 +3507,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3421,4 +3509,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3426,1 +3511,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3428,1 +3513,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3430,4 +3515,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3435,4 +3517,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3440,1 +3519,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3442,4 +3521,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3463,1 +3539,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3465,4 +3541,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3470,1 +3543,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3472,1 +3545,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3474,4 +3547,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3479,4 +3549,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3484,1 +3551,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3486,4 +3553,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3507,1 +3571,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3509,1 +3573,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3511,2 +3575,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3514,1 +3579,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3516,1 +3581,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3518,2 +3583,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3521,1 +3587,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3523,1 +3589,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3525,2 +3591,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3528,1 +3595,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3530,1 +3597,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3532,2 +3599,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3551,1 +3619,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3553,1 +3621,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3555,0 +3623,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3556,1 +3625,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3558,1 +3627,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3560,1 +3629,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3562,0 +3631,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3563,1 +3633,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3565,1 +3635,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3567,1 +3637,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3569,0 +3639,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3570,1 +3641,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3572,1 +3643,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3574,1 +3645,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3576,0 +3647,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3577,1 +3649,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3595,1 +3667,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3597,4 +3669,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3602,1 +3671,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3604,1 +3673,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3606,4 +3675,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3611,4 +3677,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3616,1 +3679,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3618,4 +3681,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3639,1 +3699,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3641,4 +3701,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3646,1 +3703,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3648,1 +3705,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3650,4 +3707,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3655,4 +3709,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3660,1 +3711,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3662,4 +3713,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3683,1 +3731,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 2\n@@ -3685,1 +3733,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3687,2 +3735,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3690,1 +3739,1 @@\n-    \/\/ cpu: avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -3692,1 +3741,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3694,2 +3743,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3697,1 +3747,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -3699,1 +3749,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3701,2 +3751,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3704,1 +3755,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -3706,1 +3757,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -3708,2 +3759,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.ADD_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.ADD_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -3727,1 +3779,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -3729,4 +3781,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3734,1 +3783,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -3736,1 +3785,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3738,4 +3787,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -3743,4 +3789,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3748,1 +3791,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -3750,4 +3793,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3771,1 +3811,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -3773,1 +3813,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3775,0 +3815,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3776,1 +3817,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3778,1 +3819,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -3780,1 +3821,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3782,0 +3823,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3783,1 +3825,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3785,1 +3827,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -3787,1 +3829,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3789,0 +3831,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3790,1 +3833,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3792,1 +3835,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -3794,1 +3837,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3796,0 +3839,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3797,1 +3841,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3815,32 +3859,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -3863,1 +3887,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -3865,4 +3889,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3870,1 +3891,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -3872,1 +3893,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3874,4 +3895,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -3879,4 +3897,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3884,1 +3899,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -3886,4 +3901,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3907,2 +3919,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -3910,4 +3922,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -3915,2 +3924,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -3918,1 +3927,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -3920,5 +3929,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -3926,4 +3932,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -3931,2 +3934,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -3934,4 +3937,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -3955,1 +3955,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -3957,1 +3957,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3959,0 +3959,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3960,1 +3961,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3962,1 +3963,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -3964,1 +3965,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3966,0 +3967,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3967,1 +3969,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3969,1 +3971,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -3971,1 +3973,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3973,0 +3975,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3974,1 +3977,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3976,1 +3979,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -3978,1 +3981,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -3980,0 +3983,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -3981,1 +3985,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -3999,2 +4003,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -4002,4 +4006,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -4007,2 +4008,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -4010,1 +4011,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -4012,5 +4013,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -4018,4 +4016,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -4023,2 +4018,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -4026,4 +4021,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -4047,1 +4039,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4049,4 +4041,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4054,1 +4043,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4056,1 +4045,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4058,4 +4047,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4063,4 +4049,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4068,1 +4051,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4070,4 +4053,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4091,2 +4071,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -4094,4 +4074,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -4099,2 +4076,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -4102,1 +4079,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -4104,5 +4081,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -4110,4 +4084,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -4115,2 +4086,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -4118,4 +4089,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -4139,1 +4107,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4141,1 +4109,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4143,0 +4111,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4144,1 +4113,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4146,1 +4115,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4148,1 +4117,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4150,0 +4119,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4151,1 +4121,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4153,1 +4123,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4155,1 +4125,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4157,0 +4127,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4158,1 +4129,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4160,1 +4131,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4162,1 +4133,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4164,0 +4135,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4165,1 +4137,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4183,2 +4155,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -4186,4 +4158,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -4191,2 +4160,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -4194,1 +4163,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -4196,5 +4165,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -4202,4 +4168,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -4207,2 +4170,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -4210,4 +4173,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -4231,1 +4191,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4233,4 +4193,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4238,1 +4195,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4240,1 +4197,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4242,4 +4199,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4247,4 +4201,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4252,1 +4203,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4254,4 +4205,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4275,1 +4223,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4277,1 +4225,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4279,2 +4227,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4282,2 +4231,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -4285,1 +4234,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -4287,5 +4236,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -4293,4 +4239,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -4298,2 +4241,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -4301,4 +4244,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -4322,1 +4262,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4324,1 +4264,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4326,0 +4266,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4327,1 +4268,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4329,1 +4270,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4331,1 +4272,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4333,0 +4274,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4334,1 +4276,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4336,1 +4278,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4338,1 +4280,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4340,0 +4282,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4341,1 +4284,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4343,1 +4286,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4345,1 +4288,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4347,0 +4290,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4348,1 +4292,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4366,1 +4310,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4368,4 +4312,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4373,2 +4314,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n@@ -4376,1 +4317,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n@@ -4378,5 +4319,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n@@ -4384,4 +4322,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n@@ -4389,2 +4324,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n@@ -4392,4 +4327,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n@@ -4413,1 +4345,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4415,4 +4347,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4420,1 +4349,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4422,1 +4351,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4424,4 +4353,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4429,4 +4355,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4434,1 +4357,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4436,4 +4359,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4457,1 +4377,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4459,1 +4379,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4461,2 +4381,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4464,1 +4385,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4466,1 +4387,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4468,2 +4389,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4471,2 +4393,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -4474,4 +4396,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n@@ -4479,1 +4398,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4481,1 +4400,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4483,2 +4402,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4502,1 +4422,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4504,4 +4424,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4509,1 +4426,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4511,1 +4428,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4513,4 +4430,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4518,4 +4432,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4523,1 +4434,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4525,1 +4436,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4527,6 +4438,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testShortM31(short[] data) {\n-        for (int j = 31; j < RANGE; j++) {\n-            data[j + -31] = (short)(data[j] * (short)-11);\n+    public static void testShortM18(short[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (short)(data[j] * (short)-11);\n@@ -4536,1 +4444,1 @@\n-    @Run(test = \"testShortM31\")\n+    @Run(test = \"testShortM18\")\n@@ -4538,1 +4446,1 @@\n-    public static void runShortM31() {\n+    public static void runShortM18() {\n@@ -4541,2 +4449,2 @@\n-        testShortM31(data);\n-        verify(\"testShortM31\", data, goldShortM31);\n+        testShortM18(data);\n+        verify(\"testShortM18\", data, goldShortM18);\n@@ -4546,1 +4454,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4548,4 +4456,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4553,1 +4458,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4555,4 +4460,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4560,2 +4462,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 62 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n@@ -4563,4 +4465,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 62\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n@@ -4568,1 +4467,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4570,4 +4469,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4575,3 +4471,3 @@\n-    public static void testShortP31(short[] data) {\n-        for (int j = 0; j < RANGE - 31; j++) {\n-            data[j + 31] = (short)(data[j] * (short)-11);\n+    public static void testShortP18(short[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (short)(data[j] * (short)-11);\n@@ -4581,1 +4477,1 @@\n-    @Run(test = \"testShortP31\")\n+    @Run(test = \"testShortP18\")\n@@ -4583,1 +4479,1 @@\n-    public static void runShortP31() {\n+    public static void runShortP18() {\n@@ -4586,2 +4482,2 @@\n-        testShortP31(data);\n-        verify(\"testShortP31\", data, goldShortP31);\n+        testShortP18(data);\n+        verify(\"testShortP18\", data, goldShortP18);\n@@ -4591,1 +4487,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4593,1 +4489,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4595,4 +4491,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4600,4 +4493,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4605,1 +4495,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4607,1 +4497,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4609,4 +4499,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4614,4 +4501,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4619,3 +4503,3 @@\n-    public static void testShortM32(short[] data) {\n-        for (int j = 32; j < RANGE; j++) {\n-            data[j + -32] = (short)(data[j] * (short)-11);\n+    public static void testShortM20(short[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (short)(data[j] * (short)-11);\n@@ -4625,1 +4509,1 @@\n-    @Run(test = \"testShortM32\")\n+    @Run(test = \"testShortM20\")\n@@ -4627,1 +4511,1 @@\n-    public static void runShortM32() {\n+    public static void runShortM20() {\n@@ -4630,2 +4514,2 @@\n-        testShortM32(data);\n-        verify(\"testShortM32\", data, goldShortM32);\n+        testShortM20(data);\n+        verify(\"testShortM20\", data, goldShortM20);\n@@ -4635,1 +4519,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4637,4 +4521,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4642,1 +4523,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4644,4 +4525,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4649,1 +4527,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n@@ -4651,4 +4530,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n@@ -4656,1 +4532,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4658,4 +4534,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4663,3 +4536,3 @@\n-    public static void testShortP32(short[] data) {\n-        for (int j = 0; j < RANGE - 32; j++) {\n-            data[j + 32] = (short)(data[j] * (short)-11);\n+    public static void testShortP20(short[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (short)(data[j] * (short)-11);\n@@ -4669,1 +4542,1 @@\n-    @Run(test = \"testShortP32\")\n+    @Run(test = \"testShortP20\")\n@@ -4671,1 +4544,1 @@\n-    public static void runShortP32() {\n+    public static void runShortP20() {\n@@ -4674,2 +4547,2 @@\n-        testShortP32(data);\n-        verify(\"testShortP32\", data, goldShortP32);\n+        testShortP20(data);\n+        verify(\"testShortP20\", data, goldShortP20);\n@@ -4679,1 +4552,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4681,1 +4554,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4683,0 +4556,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4684,1 +4558,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4686,1 +4560,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4688,1 +4562,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4690,0 +4564,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4691,1 +4566,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4693,1 +4568,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4695,1 +4570,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4697,0 +4572,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4698,1 +4574,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4700,1 +4576,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4702,1 +4578,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4704,0 +4580,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4705,1 +4582,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4707,3 +4584,3 @@\n-    public static void testShortM63(short[] data) {\n-        for (int j = 63; j < RANGE; j++) {\n-            data[j + -63] = (short)(data[j] * (short)-11);\n+    public static void testShortM31(short[] data) {\n+        for (int j = 31; j < RANGE; j++) {\n+            data[j + -31] = (short)(data[j] * (short)-11);\n@@ -4713,1 +4590,1 @@\n-    @Run(test = \"testShortM63\")\n+    @Run(test = \"testShortM31\")\n@@ -4715,1 +4592,1 @@\n-    public static void runShortM63() {\n+    public static void runShortM31() {\n@@ -4718,2 +4595,2 @@\n-        testShortM63(data);\n-        verify(\"testShortM63\", data, goldShortM63);\n+        testShortM31(data);\n+        verify(\"testShortM31\", data, goldShortM31);\n@@ -4723,1 +4600,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4725,1 +4602,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4727,4 +4604,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4732,4 +4606,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4737,1 +4608,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n@@ -4739,1 +4611,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n@@ -4741,4 +4613,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4746,4 +4615,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4751,4 +4617,4 @@\n-    public static void testShortP63(short[] data) {\n-        for (int j = 0; j < RANGE - 63; j++) {\n-            data[j + 63] = (short)(data[j] * (short)-11);\n-        }\n+    public static void testShortP31(short[] data) {\n+        for (int j = 0; j < RANGE - 31; j++) {\n+            data[j + 31] = (short)(data[j] * (short)-11);\n+        }\n@@ -4757,1 +4623,1 @@\n-    @Run(test = \"testShortP63\")\n+    @Run(test = \"testShortP31\")\n@@ -4759,1 +4625,1 @@\n-    public static void runShortP63() {\n+    public static void runShortP31() {\n@@ -4762,2 +4628,2 @@\n-        testShortP63(data);\n-        verify(\"testShortP63\", data, goldShortP63);\n+        testShortP31(data);\n+        verify(\"testShortP31\", data, goldShortP31);\n@@ -4767,1 +4633,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4769,1 +4635,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4771,0 +4637,81 @@\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testShortM32(short[] data) {\n+        for (int j = 32; j < RANGE; j++) {\n+            data[j + -32] = (short)(data[j] * (short)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testShortM32\")\n+    @Warmup(0)\n+    public static void runShortM32() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        testShortM32(data);\n+        verify(\"testShortM32\", data, goldShortM32);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testShortP32(short[] data) {\n+        for (int j = 0; j < RANGE - 32; j++) {\n+            data[j + 32] = (short)(data[j] * (short)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testShortP32\")\n+    @Warmup(0)\n+    public static void runShortP32() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        testShortP32(data);\n+        verify(\"testShortP32\", data, goldShortP32);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Strict alignment not possible.\n@@ -4772,1 +4719,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4774,1 +4721,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4776,1 +4723,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4778,0 +4725,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4779,1 +4727,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4781,1 +4729,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4783,1 +4731,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4785,0 +4733,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4786,1 +4735,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4788,1 +4737,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4790,1 +4739,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4792,0 +4741,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4793,1 +4743,65 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testShortM63(short[] data) {\n+        for (int j = 63; j < RANGE; j++) {\n+            data[j + -63] = (short)(data[j] * (short)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testShortM63\")\n+    @Warmup(0)\n+    public static void runShortM63() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        testShortM63(data);\n+        verify(\"testShortM63\", data, goldShortM63);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testShortP63(short[] data) {\n+        for (int j = 0; j < RANGE - 63; j++) {\n+            data[j + 63] = (short)(data[j] * (short)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testShortP63\")\n+    @Warmup(0)\n+    public static void runShortP63() {\n+        short[] data = new short[RANGE];\n+        init(data);\n+        testShortP63(data);\n+        verify(\"testShortP63\", data, goldShortP63);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4811,1 +4825,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4813,1 +4827,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4815,2 +4829,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4818,1 +4833,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4820,1 +4835,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4822,2 +4837,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4825,1 +4841,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4827,1 +4843,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4829,2 +4845,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4832,1 +4849,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4834,1 +4851,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4836,2 +4853,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4855,1 +4873,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4857,1 +4875,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4859,0 +4877,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4860,1 +4879,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4862,1 +4881,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4864,1 +4883,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4866,0 +4885,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4867,1 +4887,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4869,1 +4889,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4871,1 +4891,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4873,0 +4893,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4874,1 +4895,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4876,1 +4897,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4878,1 +4899,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4880,0 +4901,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -4881,1 +4903,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -4899,1 +4921,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4901,4 +4923,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4906,1 +4925,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4908,1 +4927,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4910,4 +4929,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4915,1 +4931,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4917,4 +4933,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4922,4 +4935,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4943,1 +4953,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4945,4 +4955,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4950,1 +4957,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4952,1 +4959,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4954,4 +4961,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -4959,4 +4963,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4964,1 +4965,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -4966,4 +4967,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4987,1 +4985,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -4989,1 +4987,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4991,2 +4989,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -4994,1 +4993,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -4996,1 +4995,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -4998,2 +4997,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5001,1 +5001,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5003,1 +5003,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5005,2 +5005,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5008,1 +5009,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5010,1 +5011,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5012,2 +5013,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5031,1 +5033,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5033,1 +5035,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5035,0 +5037,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5036,1 +5039,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5038,1 +5041,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5040,1 +5043,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5042,0 +5045,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5043,1 +5047,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5045,1 +5049,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5047,1 +5051,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5049,0 +5053,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5050,1 +5055,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5052,1 +5057,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5054,1 +5059,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5056,0 +5061,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5057,1 +5063,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5075,1 +5081,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5077,1 +5083,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5079,4 +5085,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5084,1 +5087,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5086,4 +5089,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5091,4 +5091,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5096,1 +5093,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5098,4 +5095,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5119,1 +5113,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5121,1 +5115,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5123,4 +5117,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5128,4 +5119,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5133,1 +5121,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5135,4 +5123,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5140,1 +5125,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5142,4 +5127,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5163,1 +5145,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5165,1 +5147,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5167,2 +5149,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5170,1 +5153,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5172,1 +5155,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5174,2 +5157,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5177,1 +5161,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5179,1 +5163,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5181,2 +5165,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5184,1 +5169,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5186,1 +5171,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5188,2 +5173,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5207,1 +5193,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5209,1 +5195,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5211,4 +5197,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5216,4 +5199,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5221,1 +5201,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5223,4 +5203,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5228,1 +5205,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5230,4 +5207,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5251,1 +5225,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5253,1 +5227,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5255,0 +5229,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5256,1 +5231,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5258,1 +5233,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5260,1 +5235,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5262,0 +5237,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5263,1 +5239,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5265,1 +5241,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5267,1 +5243,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5269,0 +5245,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5270,1 +5247,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5272,1 +5249,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5274,1 +5251,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5276,0 +5253,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5277,1 +5255,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5295,32 +5273,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -5343,1 +5301,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5345,1 +5303,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5347,4 +5305,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5352,1 +5307,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5354,4 +5309,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5359,1 +5311,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5361,4 +5313,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5366,4 +5315,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5387,2 +5333,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -5390,1 +5336,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -5392,5 +5338,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -5398,1 +5341,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -5400,5 +5343,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -5406,4 +5346,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -5411,2 +5348,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -5414,4 +5351,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -5435,1 +5369,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5437,1 +5371,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5439,0 +5373,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5440,1 +5375,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5442,1 +5377,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5444,1 +5379,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5446,0 +5381,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5447,1 +5383,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5449,1 +5385,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5451,1 +5387,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5453,0 +5389,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5454,1 +5391,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5456,1 +5393,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5458,1 +5395,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5460,0 +5397,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5461,1 +5399,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5479,2 +5417,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -5482,1 +5420,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -5484,5 +5422,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -5490,4 +5425,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -5495,2 +5427,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -5498,4 +5430,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -5503,2 +5432,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 6 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n@@ -5506,4 +5435,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 6\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n@@ -5527,1 +5453,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5529,1 +5455,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5531,4 +5457,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5536,1 +5459,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5538,4 +5461,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5543,4 +5463,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5548,1 +5465,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5550,4 +5467,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5571,2 +5485,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -5574,1 +5488,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -5576,5 +5490,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -5582,4 +5493,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -5587,2 +5495,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -5590,4 +5498,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -5595,2 +5500,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -5598,4 +5503,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -5619,1 +5521,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5621,1 +5523,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5623,0 +5525,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5624,1 +5527,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5626,1 +5529,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5628,1 +5531,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5630,0 +5533,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5631,1 +5535,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5633,1 +5537,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5635,1 +5539,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5637,0 +5541,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5638,1 +5543,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5640,1 +5545,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5642,1 +5547,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5644,0 +5549,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5645,1 +5551,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5663,2 +5569,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -5666,4 +5572,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -5671,2 +5574,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -5674,4 +5577,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -5679,2 +5579,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -5682,1 +5582,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -5684,5 +5584,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 14 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n@@ -5690,4 +5587,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 14\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n@@ -5711,1 +5605,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5713,4 +5607,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5718,1 +5609,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5720,4 +5611,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5725,1 +5613,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5727,1 +5615,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5729,4 +5617,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5734,4 +5619,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5755,1 +5637,40 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testCharP8(char[] data) {\n+        for (int j = 0; j < RANGE - 8; j++) {\n+            data[j + 8] = (char)(data[j] * (char)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testCharP8\")\n+    @Warmup(0)\n+    public static void runCharP8() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        testCharP8(data);\n+        verify(\"testCharP8\", data, goldCharP8);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5757,1 +5678,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5759,0 +5680,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5760,1 +5682,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5762,2 +5684,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5765,1 +5686,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5767,0 +5688,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5768,1 +5690,1 @@\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5770,2 +5692,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5773,1 +5694,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5775,0 +5696,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5776,1 +5698,113 @@\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testCharM15(char[] data) {\n+        for (int j = 15; j < RANGE; j++) {\n+            data[j + -15] = (char)(data[j] * (char)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testCharM15\")\n+    @Warmup(0)\n+    public static void runCharM15() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        testCharM15(data);\n+        verify(\"testCharM15\", data, goldCharM15);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/   positive byte_offset 30 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testCharP15(char[] data) {\n+        for (int j = 0; j < RANGE - 15; j++) {\n+            data[j + 15] = (char)(data[j] * (char)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testCharP15\")\n+    @Warmup(0)\n+    public static void runCharP15() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        testCharP15(data);\n+        verify(\"testCharP15\", data, goldCharP15);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testCharM16(char[] data) {\n+        for (int j = 16; j < RANGE; j++) {\n+            data[j + -16] = (char)(data[j] * (char)-11);\n+        }\n+    }\n+\n+    @Run(test = \"testCharM16\")\n+    @Warmup(0)\n+    public static void runCharM16() {\n+        char[] data = new char[RANGE];\n+        init(data);\n+        testCharM16(data);\n+        verify(\"testCharM16\", data, goldCharM16);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n@@ -5778,2 +5812,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5781,1 +5814,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5783,2 +5816,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -5786,3 +5820,3 @@\n-    public static void testCharP8(char[] data) {\n-        for (int j = 0; j < RANGE - 8; j++) {\n-            data[j + 8] = (char)(data[j] * (char)-11);\n+    public static void testCharP16(char[] data) {\n+        for (int j = 0; j < RANGE - 16; j++) {\n+            data[j + 16] = (char)(data[j] * (char)-11);\n@@ -5792,1 +5826,1 @@\n-    @Run(test = \"testCharP8\")\n+    @Run(test = \"testCharP16\")\n@@ -5794,1 +5828,1 @@\n-    public static void runCharP8() {\n+    public static void runCharP16() {\n@@ -5797,2 +5831,2 @@\n-        testCharP8(data);\n-        verify(\"testCharP8\", data, goldCharP8);\n+        testCharP16(data);\n+        verify(\"testCharP16\", data, goldCharP16);\n@@ -5802,1 +5836,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5804,1 +5838,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5806,4 +5840,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5811,4 +5842,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5816,1 +5844,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5818,1 +5846,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5820,4 +5848,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5825,4 +5850,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5830,3 +5852,3 @@\n-    public static void testCharM15(char[] data) {\n-        for (int j = 15; j < RANGE; j++) {\n-            data[j + -15] = (char)(data[j] * (char)-11);\n+    public static void testCharM18(char[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (char)(data[j] * (char)-11);\n@@ -5836,1 +5858,1 @@\n-    @Run(test = \"testCharM15\")\n+    @Run(test = \"testCharM18\")\n@@ -5838,1 +5860,1 @@\n-    public static void runCharM15() {\n+    public static void runCharM18() {\n@@ -5841,2 +5863,2 @@\n-        testCharM15(data);\n-        verify(\"testCharM15\", data, goldCharM15);\n+        testCharM18(data);\n+        verify(\"testCharM18\", data, goldCharM18);\n@@ -5846,1 +5868,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5848,4 +5870,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5853,2 +5872,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5856,4 +5874,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5861,2 +5876,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n@@ -5864,4 +5879,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n@@ -5869,2 +5881,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n-    \/\/ positive byte_offset 30 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5872,4 +5883,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 30\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 30\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5877,3 +5885,3 @@\n-    public static void testCharP15(char[] data) {\n-        for (int j = 0; j < RANGE - 15; j++) {\n-            data[j + 15] = (char)(data[j] * (char)-11);\n+    public static void testCharP18(char[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (char)(data[j] * (char)-11);\n@@ -5883,1 +5891,1 @@\n-    @Run(test = \"testCharP15\")\n+    @Run(test = \"testCharP18\")\n@@ -5885,1 +5893,1 @@\n-    public static void runCharP15() {\n+    public static void runCharP18() {\n@@ -5888,2 +5896,2 @@\n-        testCharP15(data);\n-        verify(\"testCharP15\", data, goldCharP15);\n+        testCharP18(data);\n+        verify(\"testCharP18\", data, goldCharP18);\n@@ -5893,1 +5901,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5895,4 +5903,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5900,1 +5905,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5902,1 +5907,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5904,4 +5909,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5909,4 +5911,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5914,1 +5913,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5916,1 +5915,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5918,6 +5917,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    public static void testCharM16(char[] data) {\n-        for (int j = 16; j < RANGE; j++) {\n-            data[j + -16] = (char)(data[j] * (char)-11);\n+    public static void testCharM20(char[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (char)(data[j] * (char)-11);\n@@ -5927,1 +5923,1 @@\n-    @Run(test = \"testCharM16\")\n+    @Run(test = \"testCharM20\")\n@@ -5929,1 +5925,1 @@\n-    public static void runCharM16() {\n+    public static void runCharM20() {\n@@ -5932,2 +5928,2 @@\n-        testCharM16(data);\n-        verify(\"testCharM16\", data, goldCharM16);\n+        testCharM20(data);\n+        verify(\"testCharM20\", data, goldCharM20);\n@@ -5937,1 +5933,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5939,4 +5935,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5944,1 +5937,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5946,4 +5939,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5951,2 +5941,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n@@ -5954,4 +5944,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n@@ -5959,1 +5946,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -5961,4 +5948,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5966,3 +5950,3 @@\n-    public static void testCharP16(char[] data) {\n-        for (int j = 0; j < RANGE - 16; j++) {\n-            data[j + 16] = (char)(data[j] * (char)-11);\n+    public static void testCharP20(char[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (char)(data[j] * (char)-11);\n@@ -5972,1 +5956,1 @@\n-    @Run(test = \"testCharP16\")\n+    @Run(test = \"testCharP20\")\n@@ -5974,1 +5958,1 @@\n-    public static void runCharP16() {\n+    public static void runCharP20() {\n@@ -5977,2 +5961,2 @@\n-        testCharP16(data);\n-        verify(\"testCharP16\", data, goldCharP16);\n+        testCharP20(data);\n+        verify(\"testCharP20\", data, goldCharP20);\n@@ -5982,1 +5966,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -5984,1 +5968,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5986,0 +5970,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5987,1 +5972,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5989,1 +5974,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -5991,1 +5976,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -5993,0 +5978,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -5994,1 +5980,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -5996,1 +5982,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -5998,1 +5984,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6000,0 +5986,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6001,1 +5988,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6003,1 +5990,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6005,1 +5992,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6007,0 +5994,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6008,1 +5996,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6026,1 +6014,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6028,1 +6016,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6030,4 +6018,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6035,4 +6020,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6040,2 +6022,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n-    \/\/ positive byte_offset 62 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n@@ -6043,1 +6025,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n@@ -6045,4 +6027,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 62\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6050,4 +6029,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6071,1 +6047,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6073,1 +6049,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6075,4 +6051,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6080,4 +6053,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6085,1 +6055,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6087,1 +6057,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6089,4 +6059,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6094,4 +6061,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6115,1 +6079,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6117,1 +6081,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6119,2 +6083,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6122,1 +6087,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6124,1 +6089,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6126,2 +6091,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6129,1 +6095,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6131,1 +6097,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6133,2 +6099,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6136,1 +6103,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6138,1 +6105,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6140,2 +6107,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6159,1 +6127,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6161,1 +6129,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6163,0 +6131,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6164,1 +6133,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6166,1 +6135,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6168,1 +6137,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6170,0 +6139,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6171,1 +6141,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6173,1 +6143,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6175,1 +6145,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6177,0 +6147,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6178,1 +6149,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6180,1 +6151,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6182,1 +6153,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6184,0 +6155,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6185,1 +6157,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6203,1 +6175,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6205,1 +6177,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6207,4 +6179,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6212,4 +6181,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6217,1 +6183,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6219,1 +6185,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6221,4 +6187,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6226,4 +6189,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6247,1 +6207,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6249,1 +6209,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6251,4 +6211,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6256,4 +6213,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6261,1 +6215,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6263,1 +6217,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6265,4 +6219,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6270,4 +6221,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6291,1 +6239,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6293,1 +6241,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6295,2 +6243,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6298,1 +6247,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6300,1 +6249,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6302,2 +6251,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6305,1 +6255,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6307,1 +6257,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6309,2 +6259,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6312,1 +6263,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6314,1 +6265,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6316,2 +6267,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6335,1 +6287,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6337,1 +6289,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6339,0 +6291,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6340,1 +6293,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6342,1 +6295,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6344,1 +6297,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6346,0 +6299,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6347,1 +6301,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6349,1 +6303,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6351,1 +6305,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6353,0 +6307,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6354,1 +6309,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6356,1 +6311,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6358,1 +6313,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6360,0 +6315,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6361,1 +6317,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6379,1 +6335,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6381,1 +6337,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6383,4 +6339,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6388,4 +6341,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6393,1 +6343,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6395,1 +6345,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6397,4 +6347,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6402,4 +6349,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6423,1 +6367,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6425,1 +6369,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6427,4 +6371,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6432,4 +6373,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6437,1 +6375,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6439,1 +6377,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6441,4 +6379,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6446,4 +6381,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6467,1 +6399,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6469,1 +6401,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6471,2 +6403,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6474,1 +6407,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6476,1 +6409,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6478,2 +6411,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6481,1 +6415,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6483,1 +6417,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6485,2 +6419,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6488,1 +6423,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6490,1 +6425,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6492,2 +6427,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6511,1 +6447,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6513,1 +6449,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6515,0 +6451,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6516,1 +6453,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6518,1 +6455,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6520,1 +6457,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6522,0 +6459,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6523,1 +6461,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6525,1 +6463,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6527,1 +6465,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6529,0 +6467,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6530,1 +6469,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6532,1 +6471,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6534,1 +6473,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6536,0 +6475,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6537,1 +6477,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6555,1 +6495,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6557,1 +6497,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6559,4 +6499,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6564,4 +6501,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6569,1 +6503,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6571,1 +6505,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6573,4 +6507,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6578,4 +6509,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6599,1 +6527,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6601,1 +6529,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6603,4 +6531,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6608,4 +6533,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6613,1 +6535,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6615,1 +6537,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6617,4 +6539,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6622,4 +6541,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6643,1 +6559,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 8\n@@ -6645,1 +6561,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6647,2 +6563,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6650,1 +6567,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 16\n@@ -6652,1 +6569,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6654,2 +6571,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6657,1 +6575,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 32\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 32\n@@ -6659,1 +6577,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6661,2 +6579,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6664,1 +6583,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n@@ -6666,1 +6585,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6668,2 +6587,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -6687,1 +6607,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -6689,1 +6609,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6691,4 +6611,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -6696,4 +6613,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6701,1 +6615,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -6703,1 +6617,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6705,4 +6619,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -6710,4 +6621,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6731,1 +6639,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -6733,1 +6641,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6735,0 +6643,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6736,1 +6645,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6738,1 +6647,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -6740,1 +6649,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6742,0 +6651,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6743,1 +6653,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6745,1 +6655,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -6747,1 +6657,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6749,0 +6659,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6750,1 +6661,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6752,1 +6663,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -6754,1 +6665,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6756,0 +6667,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6757,1 +6669,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6775,32 +6687,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 1 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 1\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 1\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 1 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 1\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 1\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 1 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 1\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 1\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 1 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 1\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 1\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -6823,1 +6715,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -6825,1 +6717,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6827,0 +6719,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6828,1 +6721,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6830,1 +6723,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -6832,1 +6725,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6834,0 +6727,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6835,1 +6729,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6837,1 +6731,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -6839,1 +6733,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6841,0 +6735,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6842,1 +6737,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6844,1 +6739,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -6846,1 +6741,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6848,0 +6743,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6849,1 +6745,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6867,32 +6763,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 2 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 2\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -6915,1 +6791,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -6917,1 +6793,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6919,0 +6795,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6920,1 +6797,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6922,1 +6799,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -6924,1 +6801,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6926,0 +6803,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6927,1 +6805,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6929,1 +6807,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -6931,1 +6809,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6933,0 +6811,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6934,1 +6813,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6936,1 +6815,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -6938,1 +6817,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -6940,0 +6819,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -6941,1 +6821,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -6959,32 +6839,12 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 3 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 3\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 3\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 3 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 3\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 3\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 3 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 3\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 3\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 3 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 3\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 3\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -7007,1 +6867,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7009,1 +6869,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7011,4 +6871,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7016,4 +6873,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7021,1 +6875,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7023,1 +6877,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7025,4 +6879,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7030,4 +6881,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7051,2 +6899,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -7054,1 +6902,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -7056,5 +6904,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -7062,4 +6907,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -7067,2 +6909,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -7070,1 +6912,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -7072,5 +6914,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n@@ -7078,4 +6917,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n@@ -7099,1 +6935,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7101,1 +6937,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7103,0 +6939,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7104,1 +6941,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7106,1 +6943,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7108,1 +6945,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7110,0 +6947,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7111,1 +6949,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7113,1 +6951,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7115,1 +6953,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7117,0 +6955,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7118,1 +6957,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7120,1 +6959,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7122,1 +6961,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7124,0 +6963,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7125,1 +6965,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7143,2 +6983,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 7 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n@@ -7146,1 +6986,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n@@ -7148,5 +6988,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 7\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 7 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n@@ -7154,4 +6991,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 7\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n@@ -7159,2 +6993,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 7 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n@@ -7162,1 +6996,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n@@ -7164,5 +6998,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 7\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 7 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n@@ -7170,4 +7001,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 7\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n@@ -7191,1 +7019,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7193,1 +7021,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7195,4 +7023,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7200,4 +7025,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7205,1 +7027,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7207,1 +7029,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7209,4 +7031,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7214,4 +7033,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7235,2 +7051,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -7238,1 +7054,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -7240,5 +7056,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -7246,4 +7059,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -7251,2 +7061,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -7254,1 +7064,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -7256,5 +7066,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -7262,4 +7069,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n@@ -7283,1 +7087,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7285,1 +7089,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7287,0 +7091,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7288,1 +7093,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7290,1 +7095,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7292,1 +7097,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7294,0 +7099,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7295,1 +7101,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7297,1 +7103,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7299,1 +7105,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7301,0 +7107,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7302,1 +7109,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7304,1 +7111,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7306,1 +7113,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7308,0 +7115,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7309,1 +7117,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7327,2 +7135,2 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n-    \/\/ positive byte_offset 15 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 15 can lead to cyclic dependency\n@@ -7330,1 +7138,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n@@ -7332,5 +7140,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 15\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 15 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 15 can lead to cyclic dependency\n@@ -7338,4 +7143,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n@@ -7343,2 +7145,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 15 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 15 can lead to cyclic dependency\n@@ -7346,1 +7148,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n@@ -7348,5 +7150,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 15\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 15 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 15 can lead to cyclic dependency\n@@ -7354,4 +7153,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 15\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 15\"},\n@@ -7375,1 +7171,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7377,1 +7173,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7379,4 +7175,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7384,4 +7177,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7389,1 +7179,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7391,1 +7181,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7393,4 +7183,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7398,4 +7185,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7419,1 +7203,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7421,1 +7205,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7423,2 +7207,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7426,2 +7211,2 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -7429,4 +7214,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -7434,2 +7216,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -7437,1 +7219,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -7439,5 +7221,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -7445,4 +7224,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 16\"},\n@@ -7466,1 +7242,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7468,1 +7244,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7470,0 +7246,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7471,1 +7248,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7473,1 +7250,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7475,1 +7252,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7477,0 +7254,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7478,1 +7256,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7480,1 +7258,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7482,1 +7260,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7484,0 +7262,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7485,1 +7264,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7487,1 +7266,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7489,1 +7268,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7491,0 +7270,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7492,1 +7272,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7494,3 +7274,3 @@\n-    public static void testByteM31(byte[] data) {\n-        for (int j = 31; j < RANGE; j++) {\n-            data[j + -31] = (byte)(data[j] * (byte)11);\n+    public static void testByteM18(byte[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (byte)(data[j] * (byte)11);\n@@ -7500,1 +7280,1 @@\n-    @Run(test = \"testByteM31\")\n+    @Run(test = \"testByteM18\")\n@@ -7502,1 +7282,1 @@\n-    public static void runByteM31() {\n+    public static void runByteM18() {\n@@ -7505,2 +7285,104 @@\n-        testByteM31(data);\n-        verify(\"testByteM31\", data, goldByteM31);\n+        testByteM18(data);\n+        verify(\"testByteM18\", data, goldByteM18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 18 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 18\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 18 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 18\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 18 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 18\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testByteP18(byte[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (byte)(data[j] * (byte)11);\n+        }\n+    }\n+\n+    @Run(test = \"testByteP18\")\n+    @Warmup(0)\n+    public static void runByteP18() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        testByteP18(data);\n+        verify(\"testByteP18\", data, goldByteP18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testByteM20(byte[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (byte)(data[j] * (byte)11);\n+        }\n+    }\n+\n+    @Run(test = \"testByteM20\")\n+    @Warmup(0)\n+    public static void runByteM20() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        testByteM20(data);\n+        verify(\"testByteM20\", data, goldByteM20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 20 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 20\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 20 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 20\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 20 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 20\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testByteP20(byte[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (byte)(data[j] * (byte)11);\n+        }\n+    }\n+\n+    @Run(test = \"testByteP20\")\n+    @Warmup(0)\n+    public static void runByteP20() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        testByteP20(data);\n+        verify(\"testByteP20\", data, goldByteP20);\n@@ -7510,1 +7392,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7512,1 +7394,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7514,0 +7396,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7515,1 +7398,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7517,2 +7400,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 31 can lead to cyclic dependency\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7520,1 +7402,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7522,0 +7404,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7523,1 +7406,1 @@\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 31\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7525,2 +7408,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 31 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7528,1 +7410,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7530,0 +7412,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7531,1 +7414,1 @@\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 31\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7533,2 +7416,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n-    \/\/ positive byte_offset 31 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7536,1 +7418,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7538,0 +7420,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7539,1 +7422,36 @@\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 31\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testByteM31(byte[] data) {\n+        for (int j = 31; j < RANGE; j++) {\n+            data[j + -31] = (byte)(data[j] * (byte)11);\n+        }\n+    }\n+\n+    @Run(test = \"testByteM31\")\n+    @Warmup(0)\n+    public static void runByteM31() {\n+        byte[] data = new byte[RANGE];\n+        init(data);\n+        testByteM31(data);\n+        verify(\"testByteM31\", data, goldByteM31);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 31 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n+        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 31 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n+        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/   positive byte_offset 31 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 31\"},\n@@ -7557,1 +7475,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7559,4 +7477,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7564,1 +7479,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7566,1 +7481,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7568,4 +7483,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7573,4 +7485,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7578,1 +7487,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7580,4 +7489,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7601,1 +7507,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7603,1 +7509,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7605,2 +7511,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7608,1 +7515,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7610,1 +7517,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7612,2 +7519,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7615,2 +7523,2 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -7618,4 +7526,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n@@ -7623,1 +7528,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7625,1 +7530,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7627,2 +7532,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7646,1 +7552,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7648,1 +7554,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7650,0 +7556,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7651,1 +7558,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7653,1 +7560,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7655,1 +7562,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7657,0 +7564,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7658,1 +7566,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7660,1 +7568,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7662,1 +7570,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7664,0 +7572,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7665,1 +7574,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7667,1 +7576,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7669,1 +7578,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7671,0 +7580,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7672,1 +7582,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7690,1 +7600,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7692,4 +7602,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7697,1 +7604,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7699,1 +7606,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7701,5 +7608,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n-    \/\/ positive byte_offset 63 can lead to cyclic dependency\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/   positive byte_offset 63 can lead to cyclic dependency\n@@ -7707,4 +7611,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 63\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 4\", \"MaxVectorSize\", \"> 63\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 63\"},\n@@ -7712,1 +7613,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7714,4 +7615,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7735,1 +7633,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7737,4 +7635,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7742,1 +7637,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7744,1 +7639,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7746,4 +7641,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7751,4 +7643,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7756,1 +7645,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7758,4 +7647,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7779,1 +7665,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7781,1 +7667,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7783,2 +7669,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7786,1 +7673,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7788,1 +7675,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7790,2 +7677,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7793,1 +7681,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7795,1 +7683,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7797,2 +7685,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7800,1 +7689,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7802,1 +7691,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7804,2 +7693,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7823,1 +7713,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7825,1 +7715,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7827,0 +7717,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7828,1 +7719,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7830,1 +7721,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7832,1 +7723,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7834,0 +7725,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7835,1 +7727,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7837,1 +7729,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7839,1 +7731,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7841,0 +7733,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7842,1 +7735,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7844,1 +7737,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7846,1 +7739,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7848,0 +7741,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -7849,1 +7743,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -7867,1 +7761,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7869,4 +7763,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7874,1 +7765,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7876,1 +7767,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7878,4 +7769,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7883,4 +7771,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7888,1 +7773,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7890,4 +7775,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7911,1 +7793,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7913,4 +7795,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7918,1 +7797,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7920,1 +7799,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7922,4 +7801,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7927,4 +7803,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7932,1 +7805,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7934,4 +7807,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7955,1 +7825,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -7957,1 +7827,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7959,2 +7829,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7962,1 +7833,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -7964,1 +7835,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7966,2 +7837,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7969,1 +7841,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -7971,1 +7843,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7973,2 +7845,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7976,1 +7849,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -7978,1 +7851,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -7980,2 +7853,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -7999,1 +7873,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -8001,1 +7875,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8003,0 +7877,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8004,1 +7879,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8006,1 +7881,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -8008,1 +7883,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8010,0 +7885,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8011,1 +7887,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8013,1 +7889,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -8015,1 +7891,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8017,0 +7893,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8018,1 +7895,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8020,1 +7897,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -8022,1 +7899,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8024,0 +7901,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8025,1 +7903,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8043,1 +7921,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -8045,4 +7923,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8050,1 +7925,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -8052,1 +7927,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8054,4 +7929,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -8059,4 +7931,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8064,1 +7933,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -8066,4 +7935,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8087,1 +7953,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -8089,4 +7955,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8094,1 +7957,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -8096,1 +7959,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8098,4 +7961,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n-        applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512bw\", \"false\"})\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -8103,4 +7963,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"avx512bw\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8108,1 +7965,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -8110,4 +7967,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8131,1 +7985,1 @@\n-    \/\/ cpu: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n+    \/\/ CPU: sse4.1 to avx -> vector_width: 16 -> elements in vector: 16\n@@ -8133,1 +7987,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8135,2 +7989,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -8138,1 +7993,1 @@\n-    \/\/ cpu: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: avx2 to avx512 without avx512bw -> vector_width: 32 -> elements in vector: 32\n@@ -8140,1 +7995,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8142,2 +7997,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -8145,1 +8001,1 @@\n-    \/\/ cpu: avx512bw -> vector_width: 64 -> elements in vector: 64\n+    \/\/ CPU: avx512bw -> vector_width: 64 -> elements in vector: 64\n@@ -8147,1 +8003,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8149,2 +8005,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -8152,1 +8009,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n@@ -8154,1 +8011,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 4\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n@@ -8156,2 +8013,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 4\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n@@ -8175,1 +8033,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8177,4 +8035,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8182,1 +8037,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8184,1 +8039,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8186,4 +8041,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8191,4 +8043,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8196,1 +8045,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8198,4 +8047,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8219,1 +8065,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8221,1 +8067,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8223,0 +8069,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8224,1 +8071,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8226,1 +8073,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8228,1 +8075,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8230,0 +8077,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8231,1 +8079,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8233,1 +8081,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8235,1 +8083,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8237,0 +8085,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8238,1 +8087,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8240,1 +8089,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8242,1 +8091,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8244,0 +8093,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8245,1 +8095,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8263,32 +8113,12 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 4 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 4\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -8311,1 +8141,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8313,4 +8143,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8318,1 +8145,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8320,1 +8147,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8322,4 +8149,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8327,4 +8151,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8332,1 +8153,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8334,4 +8155,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8355,2 +8173,2 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -8358,4 +8176,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -8363,2 +8178,2 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -8366,1 +8181,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -8368,5 +8183,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -8374,4 +8186,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -8379,2 +8188,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n@@ -8382,4 +8191,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n@@ -8403,1 +8209,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8405,1 +8211,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8407,0 +8213,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8408,1 +8215,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8410,1 +8217,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8412,1 +8219,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8414,0 +8221,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8415,1 +8223,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8417,1 +8225,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8419,1 +8227,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8421,0 +8229,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8422,1 +8231,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8424,1 +8233,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8426,1 +8235,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8428,0 +8237,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8429,1 +8239,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8447,2 +8257,2 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -8450,4 +8260,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -8455,2 +8262,2 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -8458,1 +8265,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -8460,5 +8267,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -8466,4 +8270,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -8471,2 +8272,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 12 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n@@ -8474,4 +8275,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 12\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n@@ -8495,1 +8293,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8497,4 +8295,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8502,1 +8297,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8504,1 +8299,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8506,4 +8301,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8511,4 +8303,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8516,1 +8305,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8518,4 +8307,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8539,1 +8325,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8541,1 +8327,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8543,2 +8329,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8546,2 +8333,2 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -8549,1 +8336,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -8551,5 +8338,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -8557,4 +8341,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -8562,2 +8343,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -8565,4 +8346,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 16\"},\n@@ -8586,1 +8364,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8588,1 +8366,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8590,0 +8368,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8591,1 +8370,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8593,1 +8372,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8595,1 +8374,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8597,0 +8376,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8598,1 +8378,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8600,1 +8380,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8602,1 +8382,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8604,0 +8384,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8605,1 +8386,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8607,1 +8388,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8609,1 +8390,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8611,0 +8392,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8612,1 +8394,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8630,1 +8412,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8632,4 +8414,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8637,2 +8416,2 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -8640,1 +8419,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -8642,5 +8421,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -8648,4 +8424,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -8653,2 +8426,2 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n-    \/\/ positive byte_offset 28 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/   positive byte_offset 28 can lead to cyclic dependency\n@@ -8656,4 +8429,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 28\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 28\"},\n@@ -8677,1 +8447,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8679,4 +8449,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8684,1 +8451,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8686,1 +8453,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8688,4 +8455,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8693,4 +8457,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8698,1 +8459,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8700,4 +8461,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8721,1 +8479,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8723,1 +8481,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8725,2 +8483,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8728,1 +8487,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8730,1 +8489,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8732,2 +8491,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8735,2 +8495,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -8738,4 +8498,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n@@ -8743,1 +8500,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8745,1 +8502,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8747,2 +8504,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8766,1 +8524,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8768,1 +8526,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8770,0 +8528,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8771,1 +8530,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8773,1 +8532,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8775,1 +8534,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8777,0 +8536,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8778,1 +8538,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8780,1 +8540,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8782,1 +8542,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8784,0 +8544,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8785,1 +8546,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8787,1 +8548,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8789,1 +8550,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8791,0 +8552,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8792,1 +8554,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8810,1 +8572,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8812,4 +8574,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8817,1 +8576,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8819,1 +8578,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8821,5 +8580,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n-    \/\/ positive byte_offset 60 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/   positive byte_offset 60 can lead to cyclic dependency\n@@ -8827,4 +8583,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 8\", \"MaxVectorSize\", \"> 60\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 60\"},\n@@ -8832,1 +8585,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8834,4 +8587,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8855,1 +8605,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8857,4 +8607,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8862,1 +8609,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8864,1 +8611,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8866,4 +8613,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8871,4 +8615,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8876,1 +8617,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8878,4 +8619,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8899,1 +8637,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8901,1 +8639,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8903,2 +8641,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8906,1 +8645,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8908,1 +8647,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8910,2 +8649,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8913,1 +8653,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8915,1 +8655,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8917,2 +8657,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8920,1 +8661,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8922,1 +8663,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8924,2 +8665,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -8943,1 +8685,133 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloatM18(float[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (float)(data[j] * (float)1.001f);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatM18\")\n+    @Warmup(0)\n+    public static void runFloatM18() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        testFloatM18(data);\n+        verify(\"testFloatM18\", data, goldFloatM18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloatP18(float[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (float)(data[j] * (float)1.001f);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatP18\")\n+    @Warmup(0)\n+    public static void runFloatP18() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        testFloatP18(data);\n+        verify(\"testFloatP18\", data, goldFloatP18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloatM20(float[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (float)(data[j] * (float)1.001f);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatM20\")\n+    @Warmup(0)\n+    public static void runFloatM20() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        testFloatM20(data);\n+        verify(\"testFloatM20\", data, goldFloatM20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testFloatP20(float[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (float)(data[j] * (float)1.001f);\n+        }\n+    }\n+\n+    @Run(test = \"testFloatP20\")\n+    @Warmup(0)\n+    public static void runFloatP20() {\n+        float[] data = new float[RANGE];\n+        init(data);\n+        testFloatP20(data);\n+        verify(\"testFloatP20\", data, goldFloatP20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8945,1 +8819,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8947,0 +8821,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8948,1 +8823,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8950,1 +8825,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8952,1 +8827,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8954,0 +8829,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8955,1 +8831,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8957,1 +8833,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -8959,1 +8835,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8961,0 +8837,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8962,1 +8839,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8964,1 +8841,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -8966,1 +8843,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8968,0 +8845,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -8969,1 +8847,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -8987,1 +8865,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -8989,1 +8867,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -8991,4 +8869,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -8996,4 +8871,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9001,1 +8873,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9003,1 +8875,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9005,4 +8877,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9010,4 +8879,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9031,1 +8897,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9033,1 +8899,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9035,4 +8901,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9040,4 +8903,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9045,1 +8905,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9047,1 +8907,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9049,4 +8909,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9054,4 +8911,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9075,1 +8929,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9077,1 +8931,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9079,2 +8933,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9082,1 +8937,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9084,1 +8939,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9086,2 +8941,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9089,1 +8945,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9091,1 +8947,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9093,2 +8949,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9096,1 +8953,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9098,1 +8955,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9100,2 +8957,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9119,1 +8977,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9121,1 +8979,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9123,0 +8981,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9124,1 +8983,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9126,1 +8985,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9128,1 +8987,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9130,0 +8989,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9131,1 +8991,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9133,1 +8993,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9135,1 +8995,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9137,0 +8997,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9138,1 +8999,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9140,1 +9001,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9142,1 +9003,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9144,0 +9005,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9145,1 +9007,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9163,1 +9025,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9165,1 +9027,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9167,4 +9029,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9172,4 +9031,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9177,1 +9033,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9179,1 +9035,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9181,4 +9037,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9186,4 +9039,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9207,1 +9057,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9209,1 +9059,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9211,4 +9061,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9216,4 +9063,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9221,1 +9065,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9223,1 +9067,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9225,4 +9069,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9230,4 +9071,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9251,1 +9089,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9253,1 +9091,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9255,2 +9093,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9258,1 +9097,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9260,1 +9099,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9262,2 +9101,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9265,1 +9105,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9267,1 +9107,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9269,2 +9109,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9272,1 +9113,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9274,1 +9115,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9276,2 +9117,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9295,1 +9137,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9297,1 +9139,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9299,0 +9141,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9300,1 +9143,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9302,1 +9145,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9304,1 +9147,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9306,0 +9149,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9307,1 +9151,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9309,1 +9153,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9311,1 +9155,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9313,0 +9157,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9314,1 +9159,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9316,1 +9161,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9318,1 +9163,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9320,0 +9165,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9321,1 +9167,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9339,1 +9185,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9341,1 +9187,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9343,4 +9189,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9348,4 +9191,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9353,1 +9193,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9355,1 +9195,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9357,4 +9197,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9362,4 +9199,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9383,1 +9217,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9385,1 +9219,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9387,4 +9221,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9392,4 +9223,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9397,1 +9225,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9399,1 +9227,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9401,4 +9229,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9406,4 +9231,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9427,1 +9249,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9429,1 +9251,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9431,2 +9253,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9434,1 +9257,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9436,1 +9259,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9438,2 +9261,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9441,1 +9265,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9443,1 +9267,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9445,2 +9269,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9448,1 +9273,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9450,1 +9275,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9452,2 +9277,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9471,1 +9297,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9473,1 +9299,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9475,0 +9301,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9476,1 +9303,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9478,1 +9305,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9480,1 +9307,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9482,0 +9309,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9483,1 +9311,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9485,1 +9313,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9487,1 +9315,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9489,0 +9317,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9490,1 +9319,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9492,1 +9321,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9494,1 +9323,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9496,0 +9325,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9497,1 +9327,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9515,1 +9345,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9517,1 +9347,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9519,4 +9349,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9524,4 +9351,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9529,1 +9353,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9531,1 +9355,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9533,4 +9357,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9538,4 +9359,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9559,1 +9377,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9561,1 +9379,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9563,4 +9381,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9568,4 +9383,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9573,1 +9385,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9575,1 +9387,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9577,4 +9389,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9582,4 +9391,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9603,1 +9409,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 4\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 4\n@@ -9605,1 +9411,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9607,2 +9413,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9610,1 +9417,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 8\n@@ -9612,1 +9419,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9614,2 +9421,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9617,1 +9425,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 16\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 16\n@@ -9619,1 +9427,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9621,2 +9429,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9624,1 +9433,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n@@ -9626,1 +9435,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 8\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n@@ -9628,2 +9437,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 8\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n@@ -9647,1 +9457,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9649,1 +9459,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9651,4 +9461,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -9656,4 +9463,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9661,1 +9465,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -9663,1 +9467,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9665,4 +9469,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -9670,4 +9471,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9691,1 +9489,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9693,1 +9491,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9695,0 +9493,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9696,1 +9495,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9698,1 +9497,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -9700,1 +9499,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9702,0 +9501,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9703,1 +9503,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9705,1 +9505,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -9707,1 +9507,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9709,0 +9509,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9710,1 +9511,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9712,1 +9513,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -9714,1 +9515,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9716,0 +9517,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9717,1 +9519,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9735,32 +9537,12 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 8 can lead to cyclic dependency\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 8\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n@@ -9783,1 +9565,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9785,1 +9567,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9787,4 +9569,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -9792,4 +9571,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9797,1 +9573,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -9799,1 +9575,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9801,4 +9577,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -9806,4 +9579,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9827,1 +9597,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9829,1 +9599,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9831,2 +9601,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -9834,2 +9605,2 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -9837,4 +9608,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -9842,2 +9610,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -9845,1 +9613,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -9847,5 +9615,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 16 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 16 can lead to cyclic dependency\n@@ -9853,4 +9618,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 16\"},\n@@ -9874,1 +9636,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9876,1 +9638,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9878,0 +9640,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9879,1 +9642,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9881,1 +9644,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -9883,1 +9646,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9885,0 +9648,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9886,1 +9650,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9888,1 +9652,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -9890,1 +9654,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9892,0 +9656,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9893,1 +9658,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9895,1 +9660,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -9897,1 +9662,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9899,0 +9664,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -9900,1 +9666,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -9918,1 +9684,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9920,1 +9686,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9922,5 +9688,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -9928,4 +9691,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -9933,2 +9693,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -9936,1 +9696,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -9938,5 +9698,2 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n-    \/\/ positive byte_offset 24 can lead to cyclic dependency\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/   positive byte_offset 24 can lead to cyclic dependency\n@@ -9944,4 +9701,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 24\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 24\"},\n@@ -9965,1 +9719,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -9967,1 +9721,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9969,4 +9723,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -9974,4 +9725,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9979,1 +9727,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -9981,1 +9729,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -9983,4 +9731,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -9988,4 +9733,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10009,1 +9751,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10011,1 +9753,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10013,2 +9755,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10016,1 +9759,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10018,1 +9761,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10020,2 +9763,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10023,2 +9767,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 32 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n@@ -10026,1 +9770,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n@@ -10028,4 +9772,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 32\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10033,1 +9774,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10035,2 +9776,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10054,1 +9796,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10056,1 +9798,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10058,0 +9800,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10059,1 +9802,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10061,1 +9804,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10063,1 +9806,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10065,0 +9808,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10066,1 +9810,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10068,1 +9812,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10070,1 +9814,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10072,0 +9816,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10073,1 +9818,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10075,1 +9820,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10077,1 +9822,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10079,0 +9824,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10080,1 +9826,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10098,1 +9844,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10100,1 +9846,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10102,4 +9848,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10107,4 +9850,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10112,2 +9852,2 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n-    \/\/ positive byte_offset 56 can lead to cyclic dependency\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n@@ -10115,1 +9855,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n@@ -10117,4 +9857,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIfOr = {\"MaxVectorSize\", \"< 16\", \"MaxVectorSize\", \"> 56\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10122,4 +9859,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10143,1 +9877,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10145,1 +9879,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10147,4 +9881,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10152,4 +9883,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10157,1 +9885,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10159,1 +9887,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10161,4 +9889,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10166,4 +9891,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10187,1 +9909,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10189,1 +9911,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10191,2 +9913,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10194,1 +9917,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10196,1 +9919,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10198,2 +9921,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10201,1 +9925,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10203,1 +9927,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10205,2 +9929,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10208,1 +9933,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10210,1 +9935,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10212,2 +9937,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10231,1 +9957,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10233,1 +9959,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10235,0 +9961,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10236,1 +9963,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10238,1 +9965,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10240,1 +9967,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10242,0 +9969,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10243,1 +9971,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10245,1 +9973,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10247,1 +9975,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10249,0 +9977,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10250,1 +9979,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10252,1 +9981,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10254,1 +9983,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10256,0 +9985,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10257,1 +9987,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10275,1 +10005,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10277,1 +10007,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10279,4 +10009,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10284,4 +10011,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10289,1 +10013,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10291,1 +10015,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10293,4 +10017,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10298,4 +10019,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10319,1 +10037,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10321,1 +10039,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10323,4 +10041,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10328,4 +10043,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10333,1 +10045,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10335,1 +10047,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10337,4 +10049,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10342,4 +10051,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10363,1 +10069,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10365,1 +10071,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10367,2 +10073,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10370,1 +10077,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10372,1 +10079,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10374,2 +10081,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10377,1 +10085,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10379,1 +10087,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10381,2 +10089,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10384,1 +10093,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10386,1 +10095,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10388,2 +10097,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10407,1 +10117,145 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDoubleM18(double[] data) {\n+        for (int j = 18; j < RANGE; j++) {\n+            data[j + -18] = (double)(data[j] * (double)1.001);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleM18\")\n+    @Warmup(0)\n+    public static void runDoubleM18() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        testDoubleM18(data);\n+        verify(\"testDoubleM18\", data, goldDoubleM18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDoubleP18(double[] data) {\n+        for (int j = 0; j < RANGE - 18; j++) {\n+            data[j + 18] = (double)(data[j] * (double)1.001);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleP18\")\n+    @Warmup(0)\n+    public static void runDoubleP18() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        testDoubleP18(data);\n+        verify(\"testDoubleP18\", data, goldDoubleP18);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDoubleM20(double[] data) {\n+        for (int j = 20; j < RANGE; j++) {\n+            data[j + -20] = (double)(data[j] * (double)1.001);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleM20\")\n+    @Warmup(0)\n+    public static void runDoubleM20() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        testDoubleM20(data);\n+        verify(\"testDoubleM20\", data, goldDoubleM20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"avx512\", \"true\"})\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    public static void testDoubleP20(double[] data) {\n+        for (int j = 0; j < RANGE - 20; j++) {\n+            data[j + 20] = (double)(data[j] * (double)1.001);\n+        }\n+    }\n+\n+    @Run(test = \"testDoubleP20\")\n+    @Warmup(0)\n+    public static void runDoubleP20() {\n+        double[] data = new double[RANGE];\n+        init(data);\n+        testDoubleP20(data);\n+        verify(\"testDoubleP20\", data, goldDoubleP20);\n+    }\n+\n+    @Test\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10409,1 +10263,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10411,0 +10265,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10412,1 +10267,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10414,1 +10269,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10416,1 +10271,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10418,0 +10273,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10419,1 +10275,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10421,1 +10277,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10423,1 +10279,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10425,0 +10281,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10426,1 +10283,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10428,1 +10285,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10430,1 +10287,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10432,0 +10289,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10433,1 +10291,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10451,1 +10309,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10453,1 +10311,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10455,4 +10313,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10460,4 +10315,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10465,1 +10317,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10467,1 +10319,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10469,4 +10321,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10474,4 +10323,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10495,1 +10341,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10497,1 +10343,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10499,4 +10345,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10504,4 +10347,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10509,1 +10349,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10511,1 +10351,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10513,4 +10353,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10518,4 +10355,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10539,1 +10373,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10541,1 +10375,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10543,2 +10377,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10546,1 +10381,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10548,1 +10383,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10550,2 +10385,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10553,1 +10389,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10555,1 +10391,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10557,2 +10393,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10560,1 +10397,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10562,1 +10399,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10564,2 +10401,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10583,1 +10421,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10585,1 +10423,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10587,0 +10425,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10588,1 +10427,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10590,1 +10429,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10592,1 +10431,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10594,0 +10433,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10595,1 +10435,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10597,1 +10437,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10599,1 +10439,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10601,0 +10441,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10602,1 +10443,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10604,1 +10445,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10606,1 +10447,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10608,0 +10449,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10609,1 +10451,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10627,1 +10469,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10629,1 +10471,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10631,4 +10473,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10636,4 +10475,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10641,1 +10477,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10643,1 +10479,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10645,4 +10481,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10650,4 +10483,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10671,1 +10501,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10673,1 +10503,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10675,4 +10505,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10680,4 +10507,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10685,1 +10509,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10687,1 +10511,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10689,4 +10513,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10694,4 +10515,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10715,1 +10533,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10717,1 +10535,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10719,2 +10537,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10722,1 +10541,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10724,1 +10543,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10726,2 +10545,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10729,1 +10549,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10731,1 +10551,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10733,2 +10553,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10736,1 +10557,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10738,1 +10559,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10740,2 +10561,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10759,1 +10581,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10761,1 +10583,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10763,0 +10585,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10764,1 +10587,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10766,1 +10589,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10768,1 +10591,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10770,0 +10593,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10771,1 +10595,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10773,1 +10597,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10775,1 +10599,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10777,0 +10601,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10778,1 +10603,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10780,1 +10605,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10782,1 +10607,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10784,0 +10609,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10785,1 +10611,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10803,1 +10629,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10805,1 +10631,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10807,4 +10633,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10812,4 +10635,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10817,1 +10637,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10819,1 +10639,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10821,4 +10641,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10826,4 +10643,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10847,1 +10661,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10849,1 +10663,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10851,4 +10665,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10856,4 +10667,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10861,1 +10669,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10863,1 +10671,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10865,4 +10673,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10870,4 +10675,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10891,1 +10693,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10893,1 +10695,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10895,2 +10697,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10898,1 +10701,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10900,1 +10703,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10902,2 +10705,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10905,1 +10709,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10907,1 +10711,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10909,2 +10713,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10912,1 +10717,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10914,1 +10719,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10916,2 +10721,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -10935,1 +10741,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10937,1 +10743,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10939,0 +10745,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10940,1 +10747,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10942,1 +10749,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10944,1 +10751,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10946,0 +10753,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10947,1 +10755,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10949,1 +10757,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10951,1 +10759,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10953,0 +10761,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10954,1 +10763,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10956,1 +10765,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -10958,1 +10767,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10960,0 +10769,1 @@\n+    \/\/   Strict alignment not possible.\n@@ -10961,1 +10771,1 @@\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIf = {\"AlignVector\", \"true\"},\n@@ -10979,1 +10789,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -10981,1 +10791,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10983,4 +10793,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -10988,4 +10795,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10993,1 +10797,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -10995,1 +10799,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -10997,4 +10801,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -11002,4 +10803,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11023,1 +10821,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -11025,1 +10823,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11027,4 +10825,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx\", \"false\"})\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -11032,4 +10827,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeatureAnd = {\"avx\", \"true\", \"avx512\", \"false\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11037,1 +10829,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -11039,1 +10831,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11041,4 +10833,1 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n-        applyIfCPUFeature = {\"avx512\", \"true\"})\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -11046,4 +10835,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11067,1 +10853,1 @@\n-    \/\/ cpu: sse4.1 -> vector_width: 16 -> elements in vector: 2\n+    \/\/ CPU: sse4.1 -> vector_width: 16 -> elements in vector: 2\n@@ -11069,1 +10855,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11071,2 +10857,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -11074,1 +10861,1 @@\n-    \/\/ cpu: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: avx and avx2 -> vector_width: 32 -> elements in vector: 4\n@@ -11076,1 +10863,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11078,2 +10865,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -11081,1 +10869,1 @@\n-    \/\/ cpu: avx512 -> vector_width: 64 -> elements in vector: 8\n+    \/\/ CPU: avx512 -> vector_width: 64 -> elements in vector: 8\n@@ -11083,1 +10871,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11085,2 +10873,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n@@ -11088,1 +10877,1 @@\n-    \/\/ cpu: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n@@ -11090,1 +10879,1 @@\n-        applyIf = {\"MaxVectorSize\", \">= 16\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n@@ -11092,2 +10881,3 @@\n-    @IR(failOn = {IRNode.LOAD_VECTOR, IRNode.MUL_V, IRNode.STORE_VECTOR},\n-        applyIf = {\"MaxVectorSize\", \"< 16\"},\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.MUL_V, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestDependencyOffsets.java","additions":4115,"deletions":4325,"binary":false,"changes":8440,"status":"modified"}]}