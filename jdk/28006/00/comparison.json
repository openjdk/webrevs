{"files":[{"patch":"@@ -105,0 +105,12 @@\n+#define CONTAINER_READ_NUMERICAL_KEY_VALUE_CHECKED(controller, filename, key, log_string, retval) \\\n+{                                                                                     \\\n+  bool is_ok;                                                                         \\\n+  is_ok = controller->read_numerical_key_value(filename, key, &retval);               \\\n+  if (!is_ok) {                                                                       \\\n+    log_trace(os, container)(log_string \" failed: %d\", OSCONTAINER_ERROR);            \\\n+    return OSCONTAINER_ERROR;                                                         \\\n+  }                                                                                   \\\n+  log_trace(os, container)(log_string \" is: \" JULONG_FORMAT, retval);                 \\\n+}\n+\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -127,0 +127,6 @@\n+jlong CgroupV1MemoryController::uses_mem_hierarchy() {\n+  julong use_hierarchy;\n+  CONTAINER_READ_NUMBER_CHECKED(reader(), \"\/memory.use_hierarchy\", \"Use Hierarchy\", use_hierarchy);\n+  return (jlong)use_hierarchy;\n+}\n+\n@@ -163,6 +169,4 @@\n-  if (memlimit >= upper_bound) {\n-    verbose_log(memlimit, upper_bound);\n-    return (jlong)-1;\n-  } else {\n-    verbose_log(memlimit, upper_bound);\n-    return (jlong)memlimit;\n+  if (memlimit >= upper_bound && uses_mem_hierarchy()) {\n+    CONTAINER_READ_NUMERICAL_KEY_VALUE_CHECKED(reader(), \"\/memory.stat\",\n+                                               \"hierarchical_memory_limit\", \"Hierarchical Memory Limit\",\n+                                               memlimit);\n@@ -170,0 +174,2 @@\n+  verbose_log(memlimit, upper_bound);\n+  return (jlong)((memlimit < upper_bound) ? memlimit : -1);\n@@ -187,5 +193,4 @@\n-  if (memswlimit >= upper_memsw_bound) {\n-    log_trace(os, container)(\"Memory and Swap Limit is: Unlimited\");\n-    return (jlong)-1;\n-  } else {\n-    return (jlong)memswlimit;\n+  if (memswlimit >= upper_memsw_bound && uses_mem_hierarchy()) {\n+      CONTAINER_READ_NUMERICAL_KEY_VALUE_CHECKED(reader(), \"\/memory.stat\",\n+                                                 \"hierarchical_memsw_limit\", \"Hierarchical Memory and Swap Limit\",\n+                                                 memswlimit);\n@@ -193,0 +198,2 @@\n+  verbose_log(memswlimit, upper_memsw_bound);\n+  return (jlong)((memswlimit < upper_memsw_bound) ? memswlimit : -1);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-      return reader()->needs_hierarchy_adjustment();\n+      return reader()->needs_hierarchy_adjustment() || uses_mem_hierarchy();\n@@ -103,0 +103,1 @@\n+    jlong uses_mem_hierarchy();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}