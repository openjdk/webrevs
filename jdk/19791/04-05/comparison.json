{"files":[{"patch":"@@ -591,1 +591,1 @@\n-  Node_List _worklist_visited; \/\/ visited mergemem nodes\n+  GrowableArray<MergeMemNode*> _worklist_visited; \/\/ visited mergemem nodes\n@@ -625,2 +625,1 @@\n-  DefUseMemStatesQueue(ResourceArea* area) :\n-          _worklist_visited((area)) {\n+  DefUseMemStatesQueue(ResourceArea* area) {\n@@ -632,4 +631,2 @@\n-      \/\/ (Allow phis to be repeated; they can merge two relevant states.)\n-      uint j = _worklist_visited.size();\n-      for (; j > 0; j--) {\n-        if (_worklist_visited.at(j-1) == use_mem_state)  return; \/\/ already on work list; do not repeat\n+      if (!_worklist_visited.append_if_missing(use_mem_state->as_MergeMem())) {\n+        return; \/\/ already on work list; do not repeat\n@@ -637,1 +634,0 @@\n-      _worklist_visited.push(use_mem_state);\n@@ -640,1 +636,1 @@\n-      \/\/ more than once.\n+      \/\/ more than once. We otherwise allow phis to be repeated; they can merge two relevant states.\n@@ -749,1 +745,1 @@\n-  \/\/ returns true.\n+  \/\/ returns false.\n@@ -761,1 +757,1 @@\n-    assert(!use_mem_state->needs_anti_dependence_check(), \"only stores\");\n+    assert(!use_mem_state->needs_anti_dependence_check(), \"no loads\");\n@@ -775,1 +771,0 @@\n-        \/\/ If this is not a store, load can't be anti dependent on this node\n@@ -777,0 +772,2 @@\n+          \/\/ use_mem_state is also a kind of load (i.e. needs_anti_dependence_check), and it is not a memory state\n+          \/\/ modifying node (store, Phi or MergeMem). Hence, load can't be anti dependent on this node.\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"}]}