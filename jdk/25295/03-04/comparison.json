{"files":[{"patch":"@@ -1910,15 +1910,1 @@\n-    \/\/ We should not be here if we have old_trip_count == max_juint, indeed, we enter this branch\n-    \/\/ only if the trip count is exact, which happens only in compute_trip_count, and it is set only\n-    \/\/ if trip_count < (jlong)max_juint. So, the assert should pass.\n-    \/\/ We really need the asserted property: it would be an overall weird situation otherwise:\n-    \/\/ - the case that would make old_trip_count not smaller than max_juint would make\n-    \/\/   the new trip_count as big as 2^31 (due to the ceiling involving stride_m)\n-    \/\/   which makes the multiplication in the rhs of adjust_min_trip's assignment would overflow\n-    \/\/ - the old trip count has its default value (which should not be assigned otherwise\n-    \/\/   since the assignment of the trip count either decrease it, or is guarded with\n-    \/\/   trip_count < max_juint) meaning that it hasn't been assigned, so we can't really\n-    \/\/   trust the current state and compare the old trip count with the new one in a\n-    \/\/   meaningful way. It is not clear what would be the correct behavior wrt adjust_min_trip.\n-    \/\/ Let's check we are in a surprise-free situation, that should be the only one reachable\n-    \/\/ here. => old_trip_count was set, is reliable, and is small enough to be sure that `stride_con`\n-    \/\/ will also be small enough, and no overflow risk.\n+    \/\/ The trip count being exact means it has been set (using CountedLoopNode::set_exact_trip_count in compute_trip_count)\n@@ -1941,0 +1927,2 @@\n+    \/\/ Since old_trip_count has been set to < max_juint (that is at most 2^32-2),\n+    \/\/ new_trip_count is lower than or equal to 2^31-1 and the multiplication cannot overflow.\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -307,1 +307,3 @@\n-  void set_trip_count(uint tc) { _trip_count = tc; }\n+  \/\/ We use max_juint for the default value of _trip_count to signal it wasn't set.\n+  \/\/ We shouldn't set _trip_count to max_juint explicitly.\n+  void set_trip_count(uint tc) { assert(tc < max_juint, \"Cannot set trip count to max_juint\"); _trip_count = tc; }\n@@ -312,0 +314,1 @@\n+    assert(tc < max_juint, \"Cannot set trip count to max_juint\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}