{"files":[{"patch":"@@ -492,1 +492,0 @@\n-java\/awt\/Graphics2D\/CopyAreaOOB.java 8343106 macosx-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * destination parameters are outside the destination bounds.\n+ *          destination parameters are outside the destination bounds.\n@@ -31,1 +31,0 @@\n- * @author campbelc\n@@ -34,2 +33,17 @@\n-import java.awt.*;\n-import java.awt.image.*;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n@@ -38,0 +52,4 @@\n+    private static Frame frame;\n+    private static Robot robot;\n+    private static BufferedImage captureImg;\n+    private static StringBuffer errorLog = new StringBuffer();\n@@ -39,1 +57,39 @@\n-    private static Robot robot = null;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            EventQueue.invokeAndWait(CopyAreaOOB::createTestUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point pt1 = frame.getLocationOnScreen();\n+                Rectangle rect = new Rectangle(pt1.x, pt1.y, 400, 400);\n+                captureImg = robot.createScreenCapture(rect);\n+            });\n+\n+            \/\/ Test pixels\n+            testRegion(\"green\", 0, 0, 400, 10, 0xff00ff00);\n+            testRegion(\"original-red\", 0, 10, 50, 400, 0xffff0000);\n+            testRegion(\"background\", 50, 10, 60, 400, 0xff000000);\n+            testRegion(\"in-between\", 60, 10, 110, 20, 0xff000000);\n+            testRegion(\"copied-red\", 60, 20, 110, 400, 0xffff0000);\n+            testRegion(\"background\", 110, 10, 400, 400, 0xff000000);\n+\n+            if (!errorLog.isEmpty()) {\n+                saveImages();\n+                throw new RuntimeException(\"Test failed: \\n\" + errorLog.toString());\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        frame = new Frame();\n+        CopyAreaOOB test = new CopyAreaOOB();\n+        frame.add(test);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n@@ -53,1 +109,1 @@\n-        g2d.fillRect(0, 10, 50, h-10);\n+        g2d.fillRect(0, 10, 50, h - 10);\n@@ -57,21 +113,2 @@\n-        g2d.copyArea(0, 10, 50, h-10, 60, 10);\n-\n-        Toolkit.getDefaultToolkit().sync();\n-\n-        BufferedImage capture = null;\n-        try {\n-            Thread.sleep(500);\n-            if (robot == null) robot = new Robot();\n-            Point pt1 = getLocationOnScreen();\n-            Rectangle rect = new Rectangle(pt1.x, pt1.y, 400, 400);\n-            capture = robot.createScreenCapture(rect);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Problems handling Robot\");\n-        }\n-        \/\/ Test pixels\n-        testRegion(capture, \"green\",          0,   0, 400,  10, 0xff00ff00);\n-        testRegion(capture, \"original red\",   0,  10,  50, 400, 0xffff0000);\n-        testRegion(capture, \"background\",    50,  10,  60, 400, 0xff000000);\n-        testRegion(capture, \"in-between\",    60,  10, 110,  20, 0xff000000);\n-        testRegion(capture, \"copied red\",    60,  20, 110, 400, 0xffff0000);\n-        testRegion(capture, \"background\",   110,  10, 400, 400, 0xff000000);\n+        g2d.copyArea(0, 10, 50, h - 10, 60, 10);\n+        g2d.dispose();\n@@ -84,1 +121,1 @@\n-    private static void testRegion(BufferedImage bi, String name,\n+    private static void testRegion(String region,\n@@ -86,2 +123,2 @@\n-                                   int expected)\n-    {\n+                                   int expected) {\n+        System.out.print(\"Testing region: \" + region);\n@@ -90,1 +127,1 @@\n-                int actual = bi.getRGB(x, y);\n+                int actual = captureImg.getRGB(x, y);\n@@ -92,7 +129,8 @@\n-                    throw new RuntimeException(\"Test failed for \" + name +\n-                                                       \" region at x=\"+x+\" y=\"+y+\n-                                                       \" (expected=\"+\n-                                                       Integer.toHexString(expected) +\n-                                                       \" actual=\"+\n-                                                       Integer.toHexString(actual) +\n-                                                       \")\");\n+                    System.out.print(\" Status: FAILED\\n\");\n+                    errorLog.append(\"Test failed for \" + region\n+                                               + \" region at x: \" + x + \" y: \" + y\n+                                               + \" (expected: \"\n+                                               + Integer.toHexString(expected)\n+                                               + \" actual: \"\n+                                               + Integer.toHexString(actual) + \")\\n\");\n+                    return;\n@@ -102,0 +140,1 @@\n+        System.out.print(\" Status: PASSED\\n\");\n@@ -104,11 +143,5 @@\n-    public static void main(String[] args) {\n-        boolean show = (args.length == 1) && (\"-show\".equals(args[0]));\n-\n-        CopyAreaOOB test = new CopyAreaOOB();\n-        Frame frame = new Frame();\n-        frame.setUndecorated(true);\n-        frame.add(test);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-\n+    private static void saveImages() {\n+        GraphicsConfiguration ge = GraphicsEnvironment\n+                .getLocalGraphicsEnvironment().getDefaultScreenDevice()\n+                .getDefaultConfiguration();\n+        BufferedImage screenCapture = robot.createScreenCapture(ge.getBounds());\n@@ -116,4 +149,4 @@\n-            Thread.sleep(3000);\n-        } catch (InterruptedException ex) {}\n-        if (!show) {\n-            frame.dispose();\n+            ImageIO.write(screenCapture, \"png\", new File(\"fullscreen.png\"));\n+            ImageIO.write(captureImg, \"png\", new File(\"frame.png\"));\n+        } catch (IOException e) {\n+            System.err.println(\"Can't write image \" + e);\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/CopyAreaOOB.java","additions":87,"deletions":54,"binary":false,"changes":141,"status":"modified"}]}