{"files":[{"patch":"@@ -64,2 +64,0 @@\n-import java.util.function.IntPredicate;\n-\n@@ -68,1 +66,1 @@\n-import jdk.internal.util.ImmutableBitSetPredicate;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -4952,32 +4950,2 @@\n-        static final IntPredicate VALID;\n-        static {\n-            char[] chars = {\n-                    BOOLEAN,\n-                    BOOLEAN_UPPER,\n-                    STRING,\n-                    STRING_UPPER,\n-                    HASHCODE,\n-                    HASHCODE_UPPER,\n-                    CHARACTER,\n-                    CHARACTER_UPPER,\n-                    DECIMAL_INTEGER,\n-                    OCTAL_INTEGER,\n-                    HEXADECIMAL_INTEGER,\n-                    HEXADECIMAL_INTEGER_UPPER,\n-                    SCIENTIFIC,\n-                    SCIENTIFIC_UPPER,\n-                    GENERAL,\n-                    GENERAL_UPPER,\n-                    DECIMAL_FLOAT,\n-                    HEXADECIMAL_FLOAT,\n-                    HEXADECIMAL_FLOAT_UPPER,\n-                    LINE_SEPARATOR,\n-                    PERCENT_SIGN\n-            };\n-            var bitSet = new BitSet(128);\n-            for (char ch : chars) {\n-                bitSet.set(ch);\n-            }\n-            VALID = ImmutableBitSetPredicate.of(bitSet);\n-        }\n-\n+        \/\/ The switch here will generate bytecode with size > 325 bytes, so ForceInline is required.\n+        @ForceInline\n@@ -4985,1 +4953,24 @@\n-            return VALID.test(c);\n+            return switch (c) {\n+                case BOOLEAN,\n+                     BOOLEAN_UPPER,\n+                     STRING,\n+                     STRING_UPPER,\n+                     HASHCODE,\n+                     HASHCODE_UPPER,\n+                     CHARACTER,\n+                     CHARACTER_UPPER,\n+                     DECIMAL_INTEGER,\n+                     OCTAL_INTEGER,\n+                     HEXADECIMAL_INTEGER,\n+                     HEXADECIMAL_INTEGER_UPPER,\n+                     SCIENTIFIC,\n+                     SCIENTIFIC_UPPER,\n+                     GENERAL,\n+                     GENERAL_UPPER,\n+                     DECIMAL_FLOAT,\n+                     HEXADECIMAL_FLOAT,\n+                     HEXADECIMAL_FLOAT_UPPER,\n+                     LINE_SEPARATOR,\n+                     PERCENT_SIGN -> true;\n+                default -> false;\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":27,"deletions":36,"binary":false,"changes":63,"status":"modified"}]}