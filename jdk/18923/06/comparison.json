{"files":[{"patch":"@@ -65,0 +65,5 @@\n+ * Operations that format strings are locale sensitive, using either the\n+ * specified {@code Locale}, or the\n+ * {@link Locale##default_locale default format Locale} to produce localized\n+ * formatted strings.\n+ * <p>\n@@ -150,1 +155,37 @@\n-     * the specified format string and arguments.\n+     * the specified format string and arguments with the\n+     * {@link Locale##default_locale default format locale}.\n+     *\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section\n+     *          of the formatter class specification.\n+     *\n+     * @return  This console\n+     *\/\n+    public Console format(String format, Object ... args) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Writes a formatted string to this console's output stream using\n+     * the specified format string and arguments with the specified\n+     * {@code locale}.\n@@ -152,3 +193,7 @@\n-     * @param  fmt\n-     *         A format string as described in <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     * @param  locale The {@linkplain Locale locale} to apply during\n+     *         formatting.  If {@code locale} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n@@ -163,3 +208,3 @@\n-     *         The behaviour on a\n-     *         {@code null} argument depends on the <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n@@ -172,2 +217,2 @@\n-     *          formatting errors, see the <a\n-     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section\n@@ -177,0 +222,1 @@\n+     * @since   23\n@@ -178,1 +224,1 @@\n-    public Console format(String fmt, Object ...args) {\n+    public Console format(Locale locale, String format, Object ... args) {\n@@ -184,1 +230,2 @@\n-     * output stream using the specified format string and arguments.\n+     * output stream using the specified format string and arguments with\n+     * the {@link Locale##default_locale default format locale}.\n@@ -186,6 +233,1 @@\n-     * <p> An invocation of this method of the form\n-     * {@code con.printf(format, args)} behaves in exactly the same way\n-     * as the invocation of\n-     * {@snippet lang=java :\n-     *     con.format(format, args)\n-     * }\n+     * @implSpec This is the same as calling {@code format(format, args)}.\n@@ -194,2 +236,2 @@\n-     *         A format string as described in <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n@@ -204,3 +246,3 @@\n-     *         The behaviour on a\n-     *         {@code null} argument depends on the <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n@@ -213,2 +255,2 @@\n-     *          formatting errors, see the <a\n-     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n@@ -224,2 +266,46 @@\n-     * Provides a formatted prompt, then reads a single line of text from the\n-     * console.\n+     * A convenience method to write a formatted string to this console's\n+     * output stream using the specified format string and arguments with\n+     * the specified {@code locale}.\n+     *\n+     * @implSpec This is the same as calling\n+     *         {@code format(locale, format, args)}.\n+     *\n+     * @param  locale The {@linkplain Locale locale} to apply during\n+     *         formatting.  If {@code locale} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n+     *          formatter class specification.\n+     *\n+     * @return  This console\n+     * @since   23\n+     *\/\n+    public Console printf(Locale locale, String format, Object ... args) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Provides a formatted prompt using the\n+     * {@link Locale##default_locale default format locale}, then reads a\n+     * single line of text from the console.\n@@ -227,3 +313,3 @@\n-     * @param  fmt\n-     *         A format string as described in <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n@@ -234,1 +320,2 @@\n-     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n@@ -237,0 +324,3 @@\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n@@ -243,3 +333,3 @@\n-     *          formatting errors, see the <a\n-     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n-     *          of the formatter class specification.\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n+     *          formatter class specification.\n@@ -254,1 +344,45 @@\n-    public String readLine(String fmt, Object ... args) {\n+    public String readLine(String format, Object ... args) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Provides a formatted prompt using the specified {@code locale}, then\n+     * reads a single line of text from the console.\n+     *\n+     * @param  locale The {@linkplain Locale locale} to apply during\n+     *         formatting.  If {@code locale} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n+     *          formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     * @since   23\n+     *\/\n+    public String readLine(Locale locale, String format, Object ... args) {\n@@ -273,2 +407,3 @@\n-     * Provides a formatted prompt, then reads a password or passphrase from\n-     * the console with echoing disabled.\n+     * Provides a formatted prompt using the\n+     * {@link Locale##default_locale default format locale}, then reads a\n+     * password or passphrase from the console with echoing disabled.\n@@ -276,3 +411,3 @@\n-     * @param  fmt\n-     *         A format string as described in <a\n-     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}\n@@ -284,1 +419,2 @@\n-     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n@@ -287,0 +423,3 @@\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n@@ -293,3 +432,47 @@\n-     *          formatting errors, see the <a\n-     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a>\n-     *          section of the formatter class specification.\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n+     *          formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A character array containing the password or passphrase read\n+     *          from the console, not including any line-termination characters,\n+     *          or {@code null} if an end of stream has been reached.\n+     *\/\n+    public char[] readPassword(String format, Object ... args) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Provides a formatted prompt using the specified {@code locale}, then\n+     * reads a password or passphrase from the console with echoing disabled.\n+     *\n+     * @param  locale The {@linkplain Locale locale} to apply during\n+     *         formatting.  If {@code locale} is {@code null} then no localization\n+     *         is applied.\n+     *\n+     * @param  format\n+     *         A format string as described in {@link\n+     *         Formatter##syntax Format string syntax}\n+     *         for the prompt text.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behavior on a\n+     *         {@code null} argument depends on the {@link\n+     *         Formatter##syntax conversion}.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the {@link\n+     *          Formatter##detail Details} section of the\n+     *          formatter class specification.\n@@ -303,0 +486,1 @@\n+     * @since   23\n@@ -304,1 +488,1 @@\n-    public char[] readPassword(String fmt, Object ... args) {\n+    public char[] readPassword(Locale locale, String format, Object ... args) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":228,"deletions":44,"binary":false,"changes":272,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.Locale;\n+\n@@ -86,1 +88,9 @@\n-    public Console format(String fmt, Object ... args) {\n+    public Console format(String format, Object ... args) {\n+        return format(Locale.getDefault(Locale.Category.FORMAT), format, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console format(Locale locale, String format, Object ... args) {\n@@ -88,1 +98,1 @@\n-            delegate.format(fmt, args);\n+            delegate.format(locale, format, args);\n@@ -98,0 +108,8 @@\n+        return printf(Locale.getDefault(Locale.Category.FORMAT), format, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console printf(Locale locale, String format, Object ... args) {\n@@ -99,1 +117,1 @@\n-            delegate.printf(format, args);\n+            delegate.format(locale, format, args);\n@@ -108,1 +126,9 @@\n-    public String readLine(String fmt, Object ... args) {\n+    public String readLine(String format, Object ... args) {\n+        return readLine(Locale.getDefault(Locale.Category.FORMAT), format, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine(Locale locale, String format, Object ... args) {\n@@ -111,1 +137,1 @@\n-                return delegate.readLine(fmt, args);\n+                return delegate.readLine(locale, format, args);\n@@ -130,1 +156,9 @@\n-    public char[] readPassword(String fmt, Object ... args) {\n+    public char[] readPassword(String format, Object ... args) {\n+        return readPassword(Locale.getDefault(Locale.Category.FORMAT), format, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword(Locale locale, String format, Object ... args) {\n@@ -133,1 +167,1 @@\n-                return delegate.readPassword(fmt, args);\n+                return delegate.readPassword(locale, format, args);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":42,"deletions":8,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Locale;\n@@ -40,3 +41,2 @@\n-    JdkConsole format(String fmt, Object ... args);\n-    JdkConsole printf(String format, Object ... args);\n-    String readLine(String fmt, Object ... args);\n+    JdkConsole format(Locale locale, String format, Object ... args);\n+    String readLine(Locale locale, String format, Object ... args);\n@@ -44,1 +44,1 @@\n-    char[] readPassword(String fmt, Object ... args);\n+    char[] readPassword(Locale locale, String format, Object ... args);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.Locale;\n@@ -60,2 +61,2 @@\n-    public JdkConsole format(String fmt, Object ... args) {\n-        formatter.format(fmt, args).flush();\n+    public JdkConsole format(Locale locale, String format, Object ... args) {\n+        formatter.format(locale, format, args).flush();\n@@ -66,6 +67,1 @@\n-    public JdkConsole printf(String format, Object ... args) {\n-        return format(format, args);\n-    }\n-\n-    @Override\n-    public String readLine(String fmt, Object ... args) {\n+    public String readLine(Locale locale, String format, Object ... args) {\n@@ -75,2 +71,2 @@\n-                if (!fmt.isEmpty())\n-                    pw.format(fmt, args);\n+                if (!format.isEmpty())\n+                    pw.format(locale, format, args);\n@@ -91,1 +87,1 @@\n-        return readLine(\"\");\n+        return readLine(Locale.getDefault(Locale.Category.FORMAT), \"\");\n@@ -95,1 +91,1 @@\n-    public char[] readPassword(String fmt, Object ... args) {\n+    public char[] readPassword(Locale locale, String format, Object ... args) {\n@@ -107,2 +103,2 @@\n-                    if (!fmt.isEmpty())\n-                        pw.format(fmt, args);\n+                    if (!format.isEmpty())\n+                        pw.format(locale, format, args);\n@@ -167,1 +163,1 @@\n-        return readPassword(\"\");\n+        return readPassword(Locale.getDefault(Locale.Category.FORMAT), \"\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Locale;\n@@ -87,2 +88,2 @@\n-        public JdkConsole format(String fmt, Object ... args) {\n-            writer().format(fmt, args).flush();\n+        public JdkConsole format(Locale locale, String format, Object ... args) {\n+            writer().format(locale, format, args).flush();\n@@ -93,6 +94,1 @@\n-        public JdkConsole printf(String format, Object ... args) {\n-            return format(format, args);\n-        }\n-\n-        @Override\n-        public String readLine(String fmt, Object ... args) {\n+        public String readLine(Locale locale, String format, Object ... args) {\n@@ -101,1 +97,1 @@\n-                return jline.readLine(fmt.formatted(args).replace(\"%\", \"%%\"));\n+                return jline.readLine(String.format(locale, format, args).replace(\"%\", \"%%\"));\n@@ -109,1 +105,1 @@\n-            return readLine(\"\");\n+            return readLine(Locale.getDefault(Locale.Category.FORMAT), \"\");\n@@ -113,1 +109,1 @@\n-        public char[] readPassword(String fmt, Object ... args) {\n+        public char[] readPassword(Locale locale, String format, Object ... args) {\n@@ -116,1 +112,1 @@\n-                return jline.readLine(fmt.formatted(args).replace(\"%\", \"%%\"), '\\0')\n+                return jline.readLine(String.format(locale, format, args).replace(\"%\", \"%%\"), '\\0')\n@@ -127,1 +123,1 @@\n-            return readPassword(\"\");\n+            return readPassword(Locale.getDefault(Locale.Category.FORMAT), \"\");\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -79,1 +79,3 @@\n-            columns = 1;\n+            \/\/ OpenJDK patch. Original code assigned 1 to columns, which ended up\n+            \/\/ appending \" \\b\" to the prompt in certain cases.\n+            columns = Integer.MAX_VALUE - 1;\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/utils\/Display.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import java.util.Locale;\n+\n@@ -196,2 +198,2 @@\n-        public JdkConsole format(String fmt, Object... args) {\n-            writer().format(fmt, args).flush();\n+        public JdkConsole format(Locale locale, String format, Object... args) {\n+            writer().format(locale, format, args).flush();\n@@ -205,9 +207,1 @@\n-        public JdkConsole printf(String format, Object... args) {\n-            return format(format, args);\n-        }\n-\n-        \/**\n-         * {@inheritDoc}\n-         *\/\n-        @Override\n-        public String readLine(String fmt, Object... args) {\n+        public String readLine(Locale locale, String format, Object... args) {\n@@ -217,1 +211,1 @@\n-                    String prompt = fmt.formatted(args);\n+                    String prompt = String.format(locale, format, args);\n@@ -233,1 +227,1 @@\n-            return readLine(\"\");\n+            return readLine(Locale.getDefault(Locale.Category.FORMAT), \"\");\n@@ -240,1 +234,1 @@\n-        public char[] readPassword(String fmt, Object... args) {\n+        public char[] readPassword(Locale locale, String format, Object... args) {\n@@ -244,1 +238,1 @@\n-                    String prompt = fmt.formatted(args);\n+                    String prompt = String.format(locale, format, args);\n@@ -259,1 +253,1 @@\n-            return readPassword(\"\");\n+            return readPassword(Locale.getDefault(Locale.Category.FORMAT), \"\");\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8330276\n+ * @summary Tests Console methods that have Locale as an argument\n+ * @library \/test\/lib\n+ * @modules jdk.internal.le jdk.localedata\n+ *\/\n+public class LocaleTest {\n+    private static Calendar TODAY  = new GregorianCalendar(2024, Calendar.APRIL, 22);\n+    private static String FORMAT = \"%1$tY-%1$tB-%1$te %1$tA\";\n+    \/\/ We want to limit the expected strings within US-ASCII charset, as\n+    \/\/ the native encoding is determined as such, which is used by\n+    \/\/ the `Process` class under jtreg environment.\n+    private static List<String> EXPECTED = List.of(\n+        String.format(Locale.UK, FORMAT, TODAY),\n+        String.format(Locale.FRANCE, FORMAT, TODAY),\n+        String.format(Locale.GERMANY, FORMAT, TODAY),\n+        String.format(Locale.of(\"es\"), FORMAT, TODAY),\n+        String.format((Locale)null, FORMAT, TODAY),\n+        String.format((Locale)null, FORMAT, TODAY),\n+        String.format((Locale)null, FORMAT, TODAY),\n+        String.format((Locale)null, FORMAT, TODAY)\n+    );\n+\n+    public static void main(String... args) throws Throwable {\n+        if (args.length == 0) {\n+            \/\/ no arg will launch the child process that actually perform tests\n+            var pb = ProcessTools.createTestJavaProcessBuilder(\n+                    \"LocaleTest\", \"dummy\");\n+            var input = new File(System.getProperty(\"test.src\", \".\"), \"input.txt\");\n+            pb.redirectInput(input);\n+            var oa = ProcessTools.executeProcess(pb);\n+            if (oa.getExitValue() == -1) {\n+                System.out.println(\"System.console() returns null. Ignoring the test.\");\n+            } else {\n+                var output = oa.asLines();\n+                var resultText =\n+                    \"\"\"\n+                    Actual output: %s\n+                    Expected output: %s\n+                    \"\"\".formatted(output, EXPECTED);\n+                if (!output.equals(EXPECTED)) {\n+                    throw new RuntimeException(\"Standard out had unexpected strings:\\n\" + resultText);\n+                } else {\n+                    oa.shouldHaveExitValue(0);\n+                    System.out.println(\"Formatting with explicit Locale succeeded.\\n\" + resultText);\n+                }\n+            }\n+        } else {\n+            var con = System.console();\n+            if (con != null) {\n+                \/\/ tests these additional methods that take a Locale\n+                con.format(Locale.UK, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.printf(Locale.FRANCE, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.readLine(Locale.GERMANY, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.readPassword(Locale.of(\"es\"), FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+\n+                \/\/ tests null locale\n+                con.format((Locale)null, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.printf((Locale)null, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.readLine((Locale)null, FORMAT, TODAY);\n+                con.printf(\"\\n\");\n+                con.readPassword((Locale)null, FORMAT, TODAY);\n+            } else {\n+                \/\/ Exit with -1\n+                System.exit(-1);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/LocaleTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}