{"files":[{"patch":"@@ -1126,5 +1126,2 @@\n-instruct vand_not(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n-  predicate(UseZvbb &&\n-            (Matcher::vector_element_basic_type(n) == T_BYTE ||\n-             Matcher::vector_element_basic_type(n) == T_SHORT ||\n-             Matcher::vector_element_basic_type(n) == T_INT));\n+instruct vand_notB(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -1132,1 +1129,1 @@\n-  format %{ \"vand_not $dst, $src1, $src2\" %}\n+  format %{ \"vand_notB $dst, $src1, $src2\" %}\n@@ -1134,2 +1131,27 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notS(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n+  format %{ \"vand_notS $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notI(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n+  format %{ \"vand_notI $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1156,5 +1178,2 @@\n-instruct vand_not_masked(vReg dst_src1, vReg src2, immI_M1 m1, vRegMask_V0 v0) %{\n-  predicate(UseZvbb &&\n-            (Matcher::vector_element_basic_type(n) == T_BYTE ||\n-             Matcher::vector_element_basic_type(n) == T_SHORT ||\n-             Matcher::vector_element_basic_type(n) == T_INT));\n+instruct vand_notB_masked(vReg dst_src1, vReg src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -1162,1 +1181,1 @@\n-  format %{ \"vand_not_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n+  format %{ \"vand_notB_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n@@ -1164,2 +1183,29 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notS_masked(vReg dst_src1, vReg src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (Replicate m1))) v0));\n+  format %{ \"vand_notS_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n+    __ vandn_vv(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($src2$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notI_masked(vReg dst_src1, vReg src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (Replicate m1))) v0));\n+  format %{ \"vand_notI_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1188,5 +1234,2 @@\n-instruct vand_not_vx(vReg dst, vReg src1, iRegIorL2I src2, immI_M1 m1) %{\n-  predicate(UseZvbb &&\n-            (Matcher::vector_element_basic_type(n) == T_BYTE ||\n-             Matcher::vector_element_basic_type(n) == T_SHORT ||\n-             Matcher::vector_element_basic_type(n) == T_INT));\n+instruct vand_notB_vx(vReg dst, vReg src1, iRegIorL2I src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -1194,1 +1237,14 @@\n-  format %{ \"vand_not_vx $dst, $src1, $src2\" %}\n+    format %{ \"vand_notB_vx $dst, $src1, $src2\" %}\n+    ins_encode %{\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_Register($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notS_vx(vReg dst, vReg src1, iRegIorL2I src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (AndV src1 (Replicate (XorI src2 m1))));\n+  format %{ \"vand_notS_vx $dst, $src1, $src2\" %}\n@@ -1196,2 +1252,14 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg),\n+                as_Register($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notI_vx(vReg dst, vReg src1, iRegIorL2I src2, immI_M1 m1) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (AndV src1 (Replicate (XorI src2 m1))));\n+  format %{ \"vand_notI_vx $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1218,5 +1286,2 @@\n-instruct vand_not_vx_masked(vReg dst_src1, iRegIorL2I src2, immI_M1 m1, vRegMask_V0 v0) %{\n-  predicate(UseZvbb &&\n-            (Matcher::vector_element_basic_type(n) == T_BYTE ||\n-             Matcher::vector_element_basic_type(n) == T_SHORT ||\n-             Matcher::vector_element_basic_type(n) == T_INT));\n+instruct vand_notB_vx_masked(vReg dst_src1, iRegIorL2I src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -1226,2 +1291,29 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_Register($src2$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notS_vx_masked(vReg dst_src1, iRegIorL2I src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src1 (AndV (Binary dst_src1 (Replicate (XorI src2 m1))) v0));\n+  format %{ \"vand_notS_vx_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n+    __ vandn_vx(as_VectorRegister($dst_src1$$reg),\n+                as_VectorRegister($dst_src1$$reg),\n+                as_Register($src2$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notI_vx_masked(vReg dst_src1, iRegIorL2I src2, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(UseZvbb && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst_src1 (AndV (Binary dst_src1 (Replicate (XorI src2 m1))) v0));\n+  format %{ \"vand_notI_vx_masked $dst_src1, $dst_src1, $src2, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":123,"deletions":31,"binary":false,"changes":154,"status":"modified"}]}