{"files":[{"patch":"@@ -159,0 +159,7 @@\n+  if (!is_power_of_2(value)) {\n+    JVMFlag::printError(verbose,\n+                        \"CodeCacheSegmentSize (%zu) must be \"\n+                        \"a power of two\\n\", CodeCacheSegmentSize);\n+    return JVMFlag::VIOLATES_CONSTRAINT;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8358694\n+ * @summary Verifies that CodeCacheSegmentSize enforces power-of-two constraint:\n+ *          - fails gracefully for invalid value\n+ *          - succeeds for valid value\n+ * @library \/test\/lib\n+ * @run driver CodeCacheSegmentSizeTest\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class CodeCacheSegmentSizeTest {\n+    public static void main(String[] args) throws Exception {\n+        testInvalidValue();\n+        testValidValue();\n+    }\n+\n+    private static void testInvalidValue() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:CodeCacheSegmentSize=65\", \/\/ invalid value (not power of two)\n+            \"-version\"\n+        );\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        \/\/ Ensure no crash (no assert failure)\n+        output.shouldNotContain(\"assert\");\n+\n+        \/\/ Expected graceful error output\n+        output.shouldContain(\"CodeCacheSegmentSize (65) must be a power of two\");\n+        output.shouldContain(\"Error: Could not create the Java Virtual Machine.\");\n+        output.shouldContain(\"Error: A fatal exception has occurred. Program will exit.\");\n+\n+        \/\/ Graceful exit with error code 1\n+        output.shouldHaveExitValue(1);\n+    }\n+\n+    private static void testValidValue() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:CodeCacheSegmentSize=64\", \/\/ a valid power of 2\n+            \"-version\"\n+        );\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        output.shouldContain(\"openjdk version\"); \/\/ typical first line\n+        output.shouldContain(\"OpenJDK Runtime Environment\");\n+        output.shouldHaveExitValue(0);\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CodeCacheSegmentSizeTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}