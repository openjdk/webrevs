{"files":[{"patch":"@@ -59,1 +59,1 @@\n-  size_t start_size_log_2 = MAX2(ceil_log2(table_size), (size_t)2); \/\/ 2 is minimum size even though some dictionaries only have one entry\n+  size_t start_size_log_2 = MAX2((size_t)ceil_log2(table_size), (size_t)2); \/\/ 2 is minimum size even though some dictionaries only have one entry\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,5 +124,11 @@\n-template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n-inline T ceil_log2(T value) {\n-  assert(value > 0, \"Invalid value\");\n-  T ret;\n-  for (ret = 0; ((T)1 << ret) < value; ++ret);\n+template <typename T, typename U = typename std::make_unsigned<T>::type, ENABLE_IF(std::is_integral<T>::value)>\n+inline int ceil_log2(T value) {\n+  assert(value > 0 && \"Invalid value\");\n+  U unsigned_value = static_cast<U>(value);\n+  int max_bits = sizeof(U) * 8;\n+  int ret;\n+  for (ret = 0; ret < max_bits; ++ret) {\n+    if ((U(1) << ret) >= unsigned_value) {\n+      break;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -310,6 +310,14 @@\n-  EXPECT_EQ(ceil_log2(T(1)), T(0)) << \"value = \" << T(1);\n-  EXPECT_EQ(ceil_log2(T(2)), T(1)) << \"value = \" << T(2);\n-  EXPECT_EQ(ceil_log2(T(3)), T(2)) << \"value = \" << T(3);\n-  EXPECT_EQ(ceil_log2(T(4)), T(2)) << \"value = \" << T(4);\n-  EXPECT_EQ(ceil_log2(T(5)), T(3)) << \"value = \" << T(5);\n-  EXPECT_EQ(ceil_log2(T(127)), T(7)) << \"value = \" << T(127);\n+  EXPECT_EQ(ceil_log2(T(1)), 0) << \"value = \" << T(1);\n+  EXPECT_EQ(ceil_log2(T(2)), 1) << \"value = \" << T(2);\n+  EXPECT_EQ(ceil_log2(T(3)), 2) << \"value = \" << T(3);\n+  EXPECT_EQ(ceil_log2(T(4)), 2) << \"value = \" << T(4);\n+  EXPECT_EQ(ceil_log2(T(5)), 3) << \"value = \" << T(5);\n+\n+  \/\/ Test max values\n+  if (std::is_unsigned<T>::value) {\n+    EXPECT_EQ(ceil_log2(std::numeric_limits<T>::max()),\n+            (int)(sizeof(T) * 8)) << \"value = \" << std::numeric_limits<T>::max();\n+  } else {\n+    EXPECT_EQ(ceil_log2(std::numeric_limits<T>::max()),\n+            (int)(sizeof(T) * 8 - 1)) << \"value = \" << std::numeric_limits<T>::max();\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}