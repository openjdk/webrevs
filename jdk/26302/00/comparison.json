{"files":[{"patch":"@@ -641,0 +641,7 @@\n+    LogTarget(Debug, defaultmethods) lt;\n+    if (lt.is_enabled()) {\n+      LogStream ls(lt);\n+      StreamIndentor si(&ls, 2);\n+      ls.print_cr(\"Checking superclass: %s\", super->name()->as_C_string());\n+    }\n+\n@@ -661,0 +668,6 @@\n+        LogTarget(Debug, defaultmethods) lt;\n+        if (lt.is_enabled()) {\n+          LogStream ls(lt);\n+          StreamIndentor si(&ls, 4);\n+          ls.print_cr(\"Processing super default: %s\", m->name()->as_C_string());\n+        }\n@@ -666,0 +679,6 @@\n+          LogTarget(Debug, defaultmethods) lt;\n+          if (lt.is_enabled()) {\n+            LogStream ls(lt);\n+            StreamIndentor si(&ls, 6);\n+            ls.print_cr(\"not already in vtable\");\n+          }\n@@ -667,1 +686,6 @@\n-          if (impl == nullptr || impl->is_overpass() || impl->is_static()) {\n+          if (impl == nullptr || impl->is_overpass() || impl->is_static() || impl->is_private()) {\n+            if (lt.is_enabled()) {\n+              LogStream ls(lt);\n+              StreamIndentor si(&ls, 6);\n+              ls.print_cr(\"appending empty vtable slot\");\n+            }\n@@ -669,0 +693,6 @@\n+          } else {\n+            if (lt.is_enabled()) {\n+              LogStream ls(lt);\n+              StreamIndentor si(&ls, 6);\n+              ls.print_cr(\"found implementation: %s\", impl->name_and_sig_as_C_string());\n+            }\n@@ -672,0 +702,7 @@\n+    } else {\n+        LogTarget(Debug, defaultmethods) lt;\n+        if (lt.is_enabled()) {\n+          LogStream ls(lt);\n+          StreamIndentor si(&ls, 4);\n+          ls.print_cr(\"No super defaults found\");\n+        }\n@@ -767,0 +804,6 @@\n+      LogTarget(Debug, defaultmethods) lt;\n+      if (lt.is_enabled()) {\n+        LogStream ls(lt);\n+        StreamIndentor si(&ls, 4);\n+        ls.print_cr(\"Found candidate: %s\", m->name_and_sig_as_C_string());\n+      }\n@@ -862,0 +905,7 @@\n+  } else {\n+      LogTarget(Debug, defaultmethods) lt;\n+      if (lt.is_enabled()) {\n+        LogStream ls(lt);\n+        StreamIndentor si(&ls, 2);\n+        ls.print_cr(\"No empty slots found\");\n+      }\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -683,0 +683,2 @@\n+     * TEST: { I b = new B(); b.m()I returns 3; }\n+     * TEST: { I c = new C(); c.m()I returns 3; }\n@@ -697,1 +699,5 @@\n-        b.test().privateCallSite(B, C, \"m\", \"()I\").throws_(IllegalAccessError.class).done();\n+        b.test().privateCallSite(B, C, \"m\", \"()I\").throws_(IllegalAccessError.class).done()\n+         .test().       callSite(I, B, \"m\", \"()I\").returns(3).done()\n+         .test().       callSite(I, C, \"m\", \"()I\").returns(3).done()\n+        ;\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/PrivateMethodsTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}