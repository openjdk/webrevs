{"files":[{"patch":"@@ -1166,3 +1166,2 @@\n-        \/\/ We didn't use the upper part of U1 after all.  We'll probably be able to use it later.\n-        if (maxValue <= 0.0) {\n-            return 0.0;\n+        if (maxValue <= DoubleZigguratTables.exponentialX0) {\n+            return maxValue;\n@@ -1170,0 +1169,1 @@\n+        \/\/ We didn't use the upper part of U1 after all.  We'll probably be able to use it later.\n@@ -1171,1 +1171,1 @@\n-        if (maxValue >= MAX_EXPONENTIAL) {\n+        if (maxValue >= Math.nextDown(MAX_EXPONENTIAL)) {\n@@ -1174,2 +1174,2 @@\n-            \/\/ Conversion to long rounds toward zero\n-            maxExtraMinus1 = (long) (maxValue \/ DoubleZigguratTables.exponentialX0);\n+            \/\/ Add 1 because casting to long rounds down, and we want to round up\n+            maxExtraMinus1 = ((long) (maxValue \/ DoubleZigguratTables.exponentialX0)) + 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * @test\n+ * @bug 8326227\n+ * @summary Verify that RandomSupport methods behave as specified\n+ * @modules java.base\/jdk.internal.util.random\n+ * @run junit RandomSupportTest\n+ *\/\n+\n+import org.junit.jupiter.api.*;\n+import java.util.random.RandomGenerator;\n+import jdk.internal.util.random.RandomSupport;\n+import static org.junit.jupiter.api.Assertions.*;\n+public class RandomSupportTest {\n+    private static class WorstCaseRandomGenerator implements RandomGenerator {\n+        boolean havePreviousOutput = false;\n+        @Override\n+        public long nextLong() {\n+            if (havePreviousOutput) {\n+                \/\/ gets shifted to 0x4000_0000_0000_0000, which puts us in the center of the sampling rectangle and\n+                \/\/ ensures that we'll never choose a point under the curve\n+                return Long.MIN_VALUE;\n+            } else {\n+                havePreviousOutput = true;\n+                return Long.MIN_VALUE | 255; \/\/ need high value in last byte in order to skip the fast path\n+            }\n+        }\n+    }\n+    @Test\n+    public void testNextExponentialSoftCapped() {\n+        for (double max = 1.0; max < 20.0; max++) {\n+            WorstCaseRandomGenerator rng = new WorstCaseRandomGenerator();\n+            double val = RandomSupport.computeNextExponentialSoftCapped(rng, max);\n+            System.out.println(\"got \" + val + \" for max \" + max);\n+            assertTrue(val >= max);\n+        }\n+        for (int i = 5; i < 30; i++) {\n+            double max = Math.scalb(1.0, i);\n+            WorstCaseRandomGenerator rng = new WorstCaseRandomGenerator();\n+            double val = RandomSupport.computeNextExponentialSoftCapped(rng, max);\n+            System.out.println(\"got \" + val + \" for max \" + max);\n+            assertTrue(val >= max);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/random\/RandomSupportTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}