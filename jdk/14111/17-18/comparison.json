{"files":[{"patch":"@@ -1406,0 +1406,2 @@\n+  \/\/ Try the max level and let the directives be applied during the compilation.\n+  int comp_level = CompilationPolicy::highest_compile_level();\n@@ -1412,7 +1414,19 @@\n-      \/\/ Try the max level and let the directives be applied during the compilation.\n-      int complevel = CompLevel::CompLevel_full_optimization;\n-\n-      mh->clear_method_flags();\n-      log_trace(codecache)(\"Recompile to level %d because of matching directives %s\", complevel, mh->external_name());\n-      nmethod * comp_nm = CompileBroker::compile_method(mh, InvocationEntryBci, complevel,\n-                                      methodHandle(), 0, CompileTask::Reason_DirectivesChanged, (JavaThread *)thread);\n+      mh->clear_directive_flags();\n+      bool deopt = false;\n+\n+      if (!nm->is_osr_method()) {\n+        log_trace(codecache)(\"Recompile to level %d because of matching directives %s\",\n+                             comp_level, mh->external_name());\n+        nmethod * comp_nm = CompileBroker::compile_method(mh, InvocationEntryBci, comp_level,\n+                                                          methodHandle(), 0,\n+                                                          CompileTask::Reason_DirectivesChanged,\n+                                                          (JavaThread*)thread);\n+        if (comp_nm == nullptr) {\n+          log_trace(codecache)(\"Recompilation to level %d failed, deoptimize %s\",\n+                               comp_level, mh->external_name());\n+          deopt = true;\n+        }\n+      } else {\n+        log_trace(codecache)(\"Deoptimize OSR %s\", mh->external_name());\n+        deopt = true;\n+      }\n@@ -1421,2 +1435,1 @@\n-      if (comp_nm == nullptr) {\n-        log_trace(codecache)(\"Recompilation to level %d failed, go deopt %s\", complevel, mh->external_name());\n+      if (deopt) {\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -740,3 +740,1 @@\n-  bool match_found = false;\n-  {\n-    MutexLocker locker(DirectivesStack_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker locker(DirectivesStack_lock, Mutex::_no_safepoint_check_flag);\n@@ -744,2 +742,2 @@\n-    CompilerDirectives* dir = _top;\n-    assert(dir != nullptr, \"Must be initialized\");\n+  CompilerDirectives* dir = _top;\n+  assert(dir != nullptr, \"Must be initialized\");\n@@ -747,9 +745,6 @@\n-    while (dir != nullptr) {\n-      if (!dir->is_default_directive() && dir->match(method)) {\n-        match_found = true;\n-        break;\n-      }\n-      if (top_only) {\n-        break;\n-      }\n-      dir = dir->next();\n+  while (dir != nullptr) {\n+    if (!dir->is_default_directive() && dir->match(method)) {\n+      return true;\n+    }\n+    if (top_only) {\n+      break;\n@@ -757,0 +752,1 @@\n+    dir = dir->next();\n@@ -758,1 +754,1 @@\n-  return match_found;\n+  return false;\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -820,1 +820,1 @@\n-  void clear_method_flags() {\n+  void clear_directive_flags() {\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-   status(has_matching_directives     , 1 << 16) \/* The method has matching directives *\/ \\\n+   status(has_matching_directives     , 1 << 16) \/* Temporary mark, used only when methods are to be refreshed to reflect a compiler directives update *\/ \\\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}