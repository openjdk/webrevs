{"files":[{"patch":"@@ -2771,1 +2771,1 @@\n-     * @apiNote Note that calling {@code nthRoot(2)} is equivalent to calling {@code sqrt()}.\n+     * @apiNote Note that calling {@code rootn(2)} is equivalent to calling {@code sqrt()}.\n@@ -2773,1 +2773,1 @@\n-    public BigInteger nthRoot(int n) {\n+    public BigInteger rootn(int n) {\n@@ -2781,1 +2781,1 @@\n-        return new MutableBigInteger(this.mag).nthRootRem(n)[0].toBigInteger(signum);\n+        return new MutableBigInteger(this.mag).rootnRem(n)[0].toBigInteger(signum);\n@@ -2796,1 +2796,1 @@\n-     * @see #nthRoot(int)\n+     * @see #rootn(int)\n@@ -2798,1 +2798,1 @@\n-     * @apiNote Note that calling {@code nthRootAndRemainder(2)} is equivalent to calling\n+     * @apiNote Note that calling {@code rootnAndRemainder(2)} is equivalent to calling\n@@ -2801,1 +2801,1 @@\n-    public BigInteger[] nthRootAndRemainder(int n) {\n+    public BigInteger[] rootnAndRemainder(int n) {\n@@ -2809,1 +2809,1 @@\n-        MutableBigInteger[] rootRem = new MutableBigInteger(this.mag).nthRootRem(n);\n+        MutableBigInteger[] rootRem = new MutableBigInteger(this.mag).rootnRem(n);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1909,1 +1909,1 @@\n-    MutableBigInteger[] nthRootRem(int n) {\n+    MutableBigInteger[] rootnRem(int n) {\n@@ -1926,1 +1926,1 @@\n-            long sLong = (long) nthRootApprox(Math.nextUp(x >= 0 ? x : x + 0x1p64), n) + 1L;\n+            long sLong = (long) rootnApprox(Math.nextUp(x >= 0 ? x : x + 0x1p64), n) + 1L;\n@@ -1999,1 +1999,1 @@\n-                approx = nthRootApprox(rad, n);\n+                approx = rootnApprox(rad, n);\n@@ -2053,1 +2053,1 @@\n-                    newtonRecurrenceNthRoot(x, s, n, s.toBigInteger().pow(n - 1));\n+                    newtonRecurrenceRootn(x, s, n, s.toBigInteger().pow(n - 1));\n@@ -2063,1 +2063,1 @@\n-        newtonRecurrenceNthRoot(this, s, n, s.toBigInteger().pow(n - 1));\n+        newtonRecurrenceRootn(this, s, n, s.toBigInteger().pow(n - 1));\n@@ -2072,1 +2072,1 @@\n-            newtonRecurrenceNthRoot(this, s, n, sToN1);\n+            newtonRecurrenceRootn(this, s, n, sToN1);\n@@ -2076,1 +2076,1 @@\n-    private static double nthRootApprox(double x, int n) {\n+    private static double rootnApprox(double x, int n) {\n@@ -2083,1 +2083,1 @@\n-    private static void newtonRecurrenceNthRoot(\n+    private static void newtonRecurrenceRootn(\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}