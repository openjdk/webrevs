[{"commit":{"message":"IR rules for test only on 64 bit"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"687611a0b3ddecf6f304c8335c423533394e5073"},{"commit":{"message":"more tests, more comments, rm trace code"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"cf3ff1554db506c490871a9c240ae81ce203f501"},{"commit":{"message":"more int\/long tests: where offsetPlain moves away"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"78e42d6e311c33548d16c6c74493388d9850238e"},{"commit":{"message":"add long tests"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"54c0cadc69375eed3cd743f30db6c783b3b9d3f9"},{"commit":{"message":"verify cfg case"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"4c743790a4240c2ed093a633bdee474b7bb76646"},{"commit":{"message":"test: handle AlignVector"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"05c210ce00774cccc6f1e69c77f54088e4d5b3fe"},{"commit":{"message":"some int tests"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"52b4c062aa3649c1bb60d6b6e07eb0e424a114a7"},{"commit":{"message":"allow LShift for scaling"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"}],"sha":"4f065fb88185a04c983b51df942167cf05ee3541"},{"commit":{"message":"better comments"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"}],"sha":"3d88fc116cefa77f94203ef178d8ff380e0bbc7b"},{"commit":{"message":"allow add and sub in invar"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"4cb8d6e26fbc52137d54323fa972f243a1cac80a"},{"commit":{"message":"handle int and long sums separately"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"}],"sha":"0d284ef219b7c94fa1d54896ef4ab9cea864af8c"},{"commit":{"message":"invar int overflow test"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"da86f223892f1104769e3ebc7ac665bfef1564bc"},{"commit":{"message":"testArrayBBInvar3"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"7f7482aaf9258964b0c0fb7859f5995da844f33b"},{"commit":{"message":"improve verification"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"7509a0b30d8da45b32b4d2093fd37bbcbdf17cbf"},{"commit":{"message":"8330274"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorization.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectorization.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java"}],"sha":"dda9bd3aa520150addf4feee2bb9f88d12442128"}]