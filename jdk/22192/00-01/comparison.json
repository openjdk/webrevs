{"files":[{"patch":"@@ -95,1 +95,1 @@\n- * Contrarily, a {@code Locale} such as the one returned by {@code\n+ * In contrast, a {@code Locale} such as the one returned by {@code\n@@ -100,0 +100,1 @@\n+ * <p>\n@@ -119,2 +120,2 @@\n- *   <dd> <em>Syntax:<\/em> Well-formed {@code language} values have the form {@code [a-zA-Z]{2,8}}.\n- *   BCP 47 deviation: this is not the full BCP 47 language production, since it excludes\n+ *   <dd> <em>Syntax:<\/em> Well-formed {@code language} values have the form {@code [a-zA-Z]{2,8}}.<\/dd>\n+ *   <dd> <em> BCP 47 deviation:<\/em> this is not the full BCP 47 language production, since it excludes\n@@ -157,2 +158,2 @@\n- *   higher importance values preceding the others. BCP 47 deviation:\n- *   BCP 47 subtags are strictly used to indicate\n+ *   higher importance values preceding the others.<\/dd>\n+ *   <dd> <em>BCP 47 deviation:<\/em> BCP 47 subtags are strictly used to indicate\n@@ -175,1 +176,2 @@\n- *   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}}. BCP 47 deviation: BCP 47 only\n+ *   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}}.<\/dd>\n+ *   <dd> <em>BCP 47 deviation:<\/em> BCP 47 only\n@@ -183,1 +185,2 @@\n- *   extensions apart from language identification. BCP 47 deviation: The {@code\n+ *   extensions apart from language identification.<\/dd>\n+ *   <dd> <em> BCP 47 deviation:<\/em> The {@code\n@@ -210,2 +213,2 @@\n- * itself. Conversely, {@link #of(String, String, String)} and its overloads do not\n- * make any syntactic checks on the input.\n+ * itself. Conversely, {@link #of(String, String, String) Locale::of} and its\n+ * overloads do not make any syntactic checks on the input.\n@@ -232,1 +235,1 @@\n- * {@link #getUnicodeLocaleType} which provides access to the Unicode\n+ * {@link #getUnicodeLocaleType(String)} which provides access to the Unicode\n@@ -329,3 +332,3 @@\n- *  <dd>The {@code Locale} class provides a number of convenient constants\n- *  that return {@code Locale} objects for commonly used locales. For example,\n- *  {@link Locale#US Locale.US} is the {@code Locale} object for the United States.<\/dd>\n+ *  <dd>A number of convenient constants are provided that return {@code Locale}\n+ *  objects for commonly used locales. For example, {@link #US Locale.US} is the\n+ *  {@code Locale} object for the United States.<\/dd>\n@@ -333,1 +336,1 @@\n- *  <dd>The method {@link #of(String, String, String)} and its overloads obtain a\n+ *  <dd>{@link #of(String, String, String) Locale::of} and its overloads obtain a\n@@ -335,1 +338,1 @@\n- *  and\/or {@code variant}. The method {@link #forLanguageTag} obtains a {@code Locale}\n+ *  and\/or {@code variant}. {@link #forLanguageTag(String)} obtains a {@code Locale}\n@@ -341,1 +344,1 @@\n- *\n+ * <p>The following are all equivalent:\n@@ -343,1 +346,0 @@\n- *     \/\/ The following are all equivalent\n@@ -361,1 +363,1 @@\n- * Locale.Category#DISPLAY DISPLAY} locale :\n+ * Locale.Category#DISPLAY DISPLAY} locale, so the following are equivalent :\n@@ -363,1 +365,0 @@\n- *     \/\/ The following are equivalent\n@@ -374,1 +375,1 @@\n- * Locale.Category#FORMAT FORMAT} locale :\n+ * Locale.Category#FORMAT FORMAT} locale, so the following are equivalent :\n@@ -376,1 +377,0 @@\n- *     \/\/ The following are equivalent\n@@ -382,1 +382,2 @@\n- * The following example demonstrates <em>locale-sensitive<\/em> operations with different locales :\n+ * The following example demonstrates <em>locale-sensitive<\/em> currency and\n+ * date related operations under different locales :\n@@ -384,1 +385,0 @@\n- *     \/\/ Localized currency format\n@@ -388,1 +388,0 @@\n- *     \/\/ Localized date format\n@@ -399,2 +398,2 @@\n- * that the term \"language tag\" is used interchangeably with \"locale\" in the following\n- * locale matching documentation.\n+ * that the term \"<dfn>{@index \"language tag\"}<\/dfn>\" is used interchangeably\n+ * with \"locale\" in the following locale matching documentation.\n@@ -475,1 +474,0 @@\n- * <h2>Compatibility<\/h2>\n@@ -477,0 +475,1 @@\n+ * <h2>Compatibility<\/h2>\n@@ -500,1 +499,1 @@\n- * {@link #forLanguageTag} and {@link Locale.Builder} APIs instead.\n+ * {@link #forLanguageTag(String)} and {@link Locale.Builder} APIs instead.\n@@ -1260,2 +1259,2 @@\n-     * {@code Locale} instance equal to {@link Locale#ROOT Locale.ROOT} and\n-     * a {@code Locale} instance equal to {@link Locale#US Locale.US}.\n+     * {@code Locale} instance equal to {@link #ROOT Locale.ROOT} and\n+     * a {@code Locale} instance equal to {@link #US Locale.US}.\n@@ -1274,2 +1273,2 @@\n-     * {@code Locale} instance equal to {@link Locale#ROOT Locale.ROOT} and\n-     * a {@code Locale} instance equal to {@link Locale#US Locale.US}.\n+     * {@code Locale} instance equal to {@link #ROOT Locale.ROOT} and\n+     * a {@code Locale} instance equal to {@link #US Locale.US}.\n@@ -1799,1 +1798,1 @@\n-     * to {@link Locale.Builder#setLanguageTag} which throws an exception\n+     * to {@link Locale.Builder#setLanguageTag(String)} which throws an exception\n@@ -2106,1 +2105,1 @@\n-     * If the name returned cannot be localized according to inLocale.\n+     * If the name returned cannot be localized according to inLocale,\n@@ -2718,1 +2717,1 @@\n-     * {@link Locale#of(String, String, String)}.  However, keep in mind that a {@code Locale}\n+     * {@link #of(String, String, String)}.  However, keep in mind that a {@code Locale}\n@@ -2731,1 +2730,1 @@\n-     * @see Locale#forLanguageTag\n+     * @see Locale#forLanguageTag(String)\n@@ -2781,1 +2780,1 @@\n-         * Locale#forLanguageTag}) are converted to their canonical\n+         * Locale#forLanguageTag(String)}) are converted to their canonical\n@@ -2883,1 +2882,1 @@\n-         * use {@link Locale#of(String, String, String)}.\n+         * use {@link #of(String, String, String)}.\n@@ -2905,1 +2904,1 @@\n-         * <p><b>Note:<\/b> The key {@link Locale#UNICODE_LOCALE_EXTENSION\n+         * <p><b>Note:<\/b> The key {@link #UNICODE_LOCALE_EXTENSION\n@@ -2910,1 +2909,1 @@\n-         * <p><b>Note:<\/b> The key {@link Locale#PRIVATE_USE_EXTENSION\n+         * <p><b>Note:<\/b> The key {@link #PRIVATE_USE_EXTENSION\n@@ -2939,1 +2938,1 @@\n-         * <p><b>Note<\/b>:Setting the 'u' extension via {@link #setExtension}\n+         * <p><b>Note<\/b>:Setting the 'u' extension via {@link #setExtension(char, String)}\n@@ -3031,1 +3030,1 @@\n-         * <p>This applies the conversions listed in {@link Locale#forLanguageTag}\n+         * <p>This applies the conversions listed in {@link #forLanguageTag(String)}\n@@ -3033,1 +3032,1 @@\n-         * {@link #setLanguageTag}.)\n+         * {@link #setLanguageTag(String)}.)\n@@ -3214,4 +3213,4 @@\n-     * @see #filter\n-     * @see #filterTags\n-     * @see #lookup\n-     * @see #lookupTag\n+     * @see #filter(List, Collection, FilteringMode)\n+     * @see #filterTags(List, Collection, FilteringMode)\n+     * @see #lookup(List, Collection)\n+     * @see #lookupTag(List, Collection)\n@@ -3434,1 +3433,1 @@\n-         * @see #mapEquivalents\n+         * @see #mapEquivalents(List, Map)\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":47,"deletions":48,"binary":false,"changes":95,"status":"modified"}]}