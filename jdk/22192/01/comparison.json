{"files":[{"patch":"@@ -48,1 +48,1 @@\n-import java.text.DateFormat;\n+import java.text.NumberFormat;\n@@ -73,9 +73,10 @@\n- * A {@code Locale} object represents a specific geographical, political,\n- * or cultural region. An operation that requires a {@code Locale} to perform\n- * its task is called <em>locale-sensitive<\/em> and uses the {@code Locale}\n- * to tailor information for the user. For example, displaying a number\n- * is a locale-sensitive operation&mdash; the number should be formatted\n- * according to the customs and conventions of the user's native country,\n- * region, or culture.\n- *\n- * <p> The {@code Locale} class implements IETF BCP 47 which is composed of\n+ * A {@code Locale} represents a specific geographical, political,\n+ * or cultural region. An API that requires a {@code Locale} to perform\n+ * its task is <em>locale-sensitive<\/em> and uses the {@code Locale}\n+ * to tailor information for the user. These <em>locale-sensitive<\/em> APIs\n+ * are principally in the <i>java.text<\/i> and <i>java.util<\/i> packages.\n+ * For example, displaying a number is a <em>locale-sensitive<\/em> operation&mdash;\n+ * the number should be formatted according to the customs and conventions of the\n+ * user's native country, region, or culture.\n+ *\n+ * <p>The {@code Locale} class implements IETF BCP 47 which is composed of\n@@ -86,4 +87,22 @@\n- * exchange.\n- *\n- * <p> A {@code Locale} object logically consists of the fields\n- * described below.\n+ * exchange. Each {@code Locale} is associated with locale data which is retrieved\n+ * by the installed {@link java.util.spi.LocaleServiceProvider LocaleServiceProvider}\n+ * implementations. Depending on the implementation, such data may vary by release.\n+ *\n+ * <h2 id=\"loc_comp\">Locale Composition<\/h2>\n+ * <p> A {@code Locale} is composed of the bolded fields described below; note that a\n+ * {@code Locale} need not have all such fields. For example, {@link\n+ * Locale#ENGLISH Locale.ENGLISH} is only comprised of the <em>language<\/em> field.\n+ * In contrast, a {@code Locale} such as the one returned by {@code\n+ * Locale.forLanguageTag(\"en-Latn-US-POSIX-u-nu-latn\")} would be comprised of all\n+ * the fields below. This particular {@code Locale} would represent English in\n+ * the United States using the Latin alphabet and numerics for use in POSIX\n+ * environments.\n+ * <p>\n+ * {@code Locale} implements IETF BCP 47 and any deviations should be observed\n+ * by the comments prefixed by <em>\"BCP 47 deviation:\"<\/em>.\n+ * <a href=\"https:\/\/tools.ietf.org\/html\/rfc5646\">RFC 5646<\/a>\n+ * combines subtags from various ISO (639, 3166, 15924) standards which are also\n+ * included in the composition of {@code Locale}.\n+ * Additionally, the full list of valid codes for each field can be found in the\n+ * <a href=\"https:\/\/www.iana.org\/assignments\/language-subtag-registry\/language-subtag-registry\">\n+ * IANA Language Subtag Registry<\/a> (e.g. search for \"Type: region\").\n@@ -93,3 +112,2 @@\n- *\n- *   <dd>ISO 639 alpha-2 or alpha-3 language code, or registered\n- *   language subtags up to 8 alpha letters (for future enhancements).\n+ *   <dd> ISO 639 alpha-2\/alpha-3 language code or a registered\n+ *   language subtag up to 8 alpha letters (for future enhancements).\n@@ -97,3 +115,3 @@\n- *   alpha-2 code must be used.  You can find a full list of valid\n- *   language codes in the IANA Language Subtag Registry (search for\n- *   \"Type: language\").  The language field is case insensitive, but\n+ *   alpha-2 code must be used.<\/dd>\n+ *\n+ *   <dd> <em>Case convention:<\/em> {@code language} is case insensitive, but\n@@ -102,5 +120,4 @@\n- *   <dd>Well-formed language values have the form\n- *   <code>[a-zA-Z]{2,8}<\/code>.  Note that this is not the full\n- *   BCP47 language production, since it excludes extlang.  They are\n- *   not needed since modern three-letter language codes replace\n- *   them.<\/dd>\n+ *   <dd> <em>Syntax:<\/em> Well-formed {@code language} values have the form {@code [a-zA-Z]{2,8}}.<\/dd>\n+ *   <dd> <em> BCP 47 deviation:<\/em> this is not the full BCP 47 language production, since it excludes\n+ *   <a href=\"https:\/\/datatracker.ietf.org\/doc\/html\/rfc5646#section-2.2.2\">extlang<\/a>\n+ *   (as modern three-letter language codes are preferred).<\/dd>\n@@ -108,1 +125,1 @@\n- *   <dd>Example: \"en\" (English), \"ja\" (Japanese), \"kok\" (Konkani)<\/dd>\n+ *   <dd> <em>Example:<\/em> \"en\" (English), \"ja\" (Japanese), \"kok\" (Konkani)<\/dd>\n@@ -112,3 +129,3 @@\n- *   <dd>ISO 15924 alpha-4 script code.  You can find a full list of\n- *   valid script codes in the IANA Language Subtag Registry (search\n- *   for \"Type: script\").  The script field is case insensitive, but\n+ *   <dd> ISO 15924 alpha-4 script code.<\/dd>\n+ *\n+ *   <dd> <em>Case convention:<\/em> {@code script} is case insensitive, but\n@@ -119,2 +136,2 @@\n- *   <dd>Well-formed script values have the form\n- *   <code>[a-zA-Z]{4}<\/code><\/dd>\n+ *   <dd> <em>Syntax:<\/em> Well-formed {@code script} values have the form {@code\n+ *   [a-zA-Z]{4}}<\/dd>\n@@ -122,1 +139,1 @@\n- *   <dd>Example: \"Latn\" (Latin), \"Cyrl\" (Cyrillic)<\/dd>\n+ *   <dd> <em>Example:<\/em> \"Latn\" (Latin), \"Cyrl\" (Cyrillic)<\/dd>\n@@ -126,4 +143,3 @@\n- *   <dd>ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.\n- *   You can find a full list of valid country and region codes in the\n- *   IANA Language Subtag Registry (search for \"Type: region\").  The\n- *   country (region) field is case insensitive, but\n+ *   <dd> ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.<\/dd>\n+ *\n+ *   <dd> <em>Case convention:<\/em> {@code country (region)} is case insensitive, but\n@@ -132,2 +148,2 @@\n- *   <dd>Well-formed country\/region values have\n- *   the form <code>[a-zA-Z]{2} | [0-9]{3}<\/code><\/dd>\n+ *   <dd> <em>Syntax:<\/em> Well-formed {@code country (region)} values have the form {@code\n+ *   [a-zA-Z]{2} | [0-9]{3}}<\/dd>\n@@ -135,1 +151,1 @@\n- *   <dd>Example: \"US\" (United States), \"FR\" (France), \"029\"\n+ *   <dd> <em>Example:<\/em> \"US\" (United States), \"FR\" (France), \"029\"\n@@ -140,8 +156,4 @@\n- *   <dd>Any arbitrary value used to indicate a variation of a\n- *   {@code Locale}.  Where there are two or more variant values\n- *   each indicating its own semantics, these values should be ordered\n- *   by importance, with most important first, separated by\n- *   underscore('_').  The variant field is case sensitive.<\/dd>\n- *\n- *   <dd>Note: IETF BCP 47 places syntactic restrictions on variant\n- *   subtags.  Also BCP 47 subtags are strictly used to indicate\n+ *   <dd> Any arbitrary value used to indicate a variation of a\n+ *   {@code Locale}. When multiple variants exist, they should be ordered with\n+ *   higher importance values preceding the others.<\/dd>\n+ *   <dd> <em>BCP 47 deviation:<\/em> BCP 47 subtags are strictly used to indicate\n@@ -150,4 +162,1 @@\n- *   region subtags.  You can find a full list of valid variant codes\n- *   in the IANA Language Subtag Registry (search for \"Type: variant\").\n- *\n- *   <p>However, the variant field in {@code Locale} has\n+ *   region subtags. However, the variant field in {@code Locale} has\n@@ -158,1 +167,1 @@\n- *   BCP 47 this kind of information, which does not identify the\n+ *   BCP 47, this kind of information which does not identify the\n@@ -162,4 +171,2 @@\n- *   <dd>Well-formed variant values have the form <code>SUBTAG\n- *   (('_'|'-') SUBTAG)*<\/code> where <code>SUBTAG =\n- *   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}<\/code>. (Note: BCP 47 only\n- *   uses hyphen ('-') as a delimiter, this is more lenient).<\/dd>\n+ *   <dd> <em>Case convention:<\/em> {@code variant} is case sensitive. BCP 47\n+ *   deviation: BCP 47 treats the variant field as case insensitive.<\/dd>\n@@ -167,1 +174,7 @@\n- *   <dd>Example: \"polyton\" (Polytonic Greek), \"POSIX\"<\/dd>\n+ *   <dd> <em>Syntax:<\/em> Well-formed {@code variant} values have the form {@code\n+ *   SUBTAG (('_'|'-') SUBTAG)*} where {@code SUBTAG =\n+ *   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}}.<\/dd>\n+ *   <dd> <em>BCP 47 deviation:<\/em> BCP 47 only\n+ *   uses hyphen ('-') as a delimiter, {@code Locale} is more lenient.<\/dd>\n+ *\n+ *   <dd> <em>Example:<\/em> \"polyton\" (Polytonic Greek), \"POSIX\"<\/dd>\n@@ -171,4 +184,8 @@\n- *   <dd>A map from single character keys to string values, indicating\n- *   extensions apart from language identification.  The extensions in\n- *   {@code Locale} implement the semantics and syntax of BCP 47\n- *   extension subtags and private use subtags. The extensions are\n+ *   <dd> A map from single character keys to string values, indicating\n+ *   extensions apart from language identification.<\/dd>\n+ *   <dd> <em> BCP 47 deviation:<\/em> The {@code\n+ *   extensions} in {@code Locale} implement the semantics and syntax of BCP 47\n+ *   extension subtags <em>and<\/em> private use subtags. The {@code extensions}\n+ *   field cannot have empty values. <\/dd>\n+ *\n+ *   <dd> <em>Case convention:<\/em> {@code extensions} are\n@@ -176,2 +193,1 @@\n- *   extension keys and values to lower case. Note that extensions\n- *   cannot have empty values.<\/dd>\n+ *   extension keys and values to lower case.<\/dd>\n@@ -179,1 +195,1 @@\n- *   <dd>Well-formed keys are single characters from the set\n+ *   <dd> <em>Syntax:<\/em> Well-formed keys are single characters from the set\n@@ -182,2 +198,2 @@\n- *   <code>SUBTAG = [0-9a-zA-Z]{1,8}<\/code> and for other keys\n- *   <code>SUBTAG = [0-9a-zA-Z]{2,8}<\/code> (that is, 'x' allows\n+ *   {@code SUBTAG = [0-9a-zA-Z]{1,8}} and for other keys\n+ *   {@code SUBTAG = [0-9a-zA-Z]{2,8}} (that is, 'x' allows\n@@ -186,1 +202,1 @@\n- *   <dd>Example: key=\"u\"\/value=\"ca-japanese\" (Japanese Calendar),\n+ *   <dd> <em>Example:<\/em> key=\"u\"\/value=\"ca-japanese\" (Japanese Calendar),\n@@ -190,1 +206,1 @@\n- * <b>Note:<\/b> Although BCP 47 requires field values to be registered\n+ * <b>BCP 47 deviation:<\/b> Although BCP 47 requires field values to be registered\n@@ -192,1 +208,3 @@\n- * does not provide any validation features.  The {@code Builder}\n+ * does not validate this requirement. For example, the variant code <em>\"foobar\"<\/em>\n+ * is well-formed since it is composed of 5 to 8 alphanumerics, but is not defined\n+ * the IANA Language Subtag Registry. The {@link Builder}\n@@ -195,1 +213,2 @@\n- * itself.  See {@link Builder} for details.\n+ * itself. Conversely, {@link #of(String, String, String) Locale::of} and its\n+ * overloads do not make any syntactic checks on the input.\n@@ -197,1 +216,1 @@\n- * <h2><a id=\"def_locale_extension\">Unicode locale\/language extension<\/a><\/h2>\n+ * <h3><a id=\"def_locale_extension\">Unicode locale\/language extension<\/a><\/h3>\n@@ -216,1 +235,1 @@\n- * {@link #getUnicodeLocaleType} which allow you to access Unicode\n+ * {@link #getUnicodeLocaleType(String)} which provides access to the Unicode\n@@ -224,2 +243,2 @@\n- * <code>[0-9a-zA-Z]{2}<\/code>.  A well-formed locale type has the\n- * form <code>\"\" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})*<\/code> (it\n+ * {@code [0-9a-zA-Z]{2}}.  A well-formed locale type has the\n+ * form {@code \"\" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})*} (it\n@@ -228,1 +247,1 @@\n- * <code>[0-9a-zA-Z]{3,8}<\/code> (it is a single subtag with the same\n+ * {@code [0-9a-zA-Z]{3,8}} (it is a single subtag with the same\n@@ -237,26 +256,1 @@\n- * <h3><a id=\"ObtainingLocale\">Obtaining a Locale<\/a><\/h3>\n- *\n- * <p>There are several ways to obtain a {@code Locale}\n- * object.\n- *\n- * <h4>Builder<\/h4>\n- *\n- * <p>Using {@link Builder} you can construct a {@code Locale} object\n- * that conforms to BCP 47 syntax.\n- *\n- * <h4>Factory Methods<\/h4>\n- *\n- * <p>The method {@link #forLanguageTag} obtains a {@code Locale}\n- * object for a well-formed BCP 47 language tag. The method\n- * {@link #of(String, String, String)} and its overloads obtain a\n- * {@code Locale} object from given {@code language}, {@code country},\n- * and\/or {@code variant} defined above.\n- *\n- * <h4>Locale Constants<\/h4>\n- *\n- * <p>The {@code Locale} class provides a number of convenient constants\n- * that you can use to obtain {@code Locale} objects for commonly used\n- * locales. For example, {@code Locale.US} is the {@code Locale} object\n- * for the United States.\n- *\n- * <h3><a id=\"default_locale\">Default Locale<\/a><\/h3>\n+ * <h2><a id=\"default_locale\">Default Locale<\/a><\/h2>\n@@ -264,1 +258,1 @@\n- * <p>The default Locale is provided for any locale-sensitive methods if no\n+ * <p>The default Locale is provided for any <em>locale-sensitive<\/em> methods if no\n@@ -266,1 +260,1 @@\n- * {@link DateFormat#getInstance()}. The default Locale is determined at startup\n+ * {@link NumberFormat#getInstance()}. The default Locale is determined at startup\n@@ -319,0 +313,1 @@\n+ * <h3>Locale Category<\/h3>\n@@ -330,1 +325,1 @@\n- * <h3><a id=\"LocaleMatching\">Locale Matching<\/a><\/h3>\n+ * <h2><a id=\"ObtainingLocale\">Obtaining a Locale<\/a><\/h2>\n@@ -332,1 +327,69 @@\n- * <p>If an application or a system is internationalized and provides localized\n+ * <p>There are several ways to obtain a {@code Locale} object.\n+ * It is advised against using the deprecated {@code Locale} constructors.\n+ *\n+ * <dl>\n+ *  <dt><b>Locale Constants<\/b><\/dt>\n+ *  <dd>A number of convenient constants are provided that return {@code Locale}\n+ *  objects for commonly used locales. For example, {@link #US Locale.US} is the\n+ *  {@code Locale} object for the United States.<\/dd>\n+ *  <dt><b>Factory Methods<\/b><\/dt>\n+ *  <dd>{@link #of(String, String, String) Locale::of} and its overloads obtain a\n+ *  {@code Locale} object from the given {@code language}, {@code country},\n+ *  and\/or {@code variant}. {@link #forLanguageTag(String)} obtains a {@code Locale}\n+ *  object for a well-formed BCP 47 language tag.<\/dd>\n+ *  <dt><b>Builder<\/b><\/dt>\n+ *  <dd>{@link Builder} is used to construct a {@code Locale} object that conforms\n+ *  to BCP 47 syntax. Use a builder to enforce syntactic restrictions on the input.<\/dd>\n+ * <\/dl>\n+ * <p>The following are all equivalent:\n+ * {@snippet lang=java :\n+ *     Locale.US;\n+ *     Locale.of(\"en\", \"US\");\n+ *     Locale.forLanguageTag(\"en-US\");\n+ *     new Locale.Builder().setLanguage(\"en\").setRegion(\"US\").build();\n+ * }\n+ *\n+ * <h2>Usage Examples<\/h2>\n+ *\n+ * <p>Once a {@code Locale} is {@linkplain ##ObtainingLocale obtained},\n+ * it can be queried for information about itself. For example, use {@link\n+ * #getCountry} to get the country (or region) code and {@link #getLanguage} to\n+ * get the language. {@link #getDisplayCountry} can be used to get the\n+ * name of the country suitable for displaying to the user. Similarly,\n+ * use {@link #getDisplayLanguage()} to get the name of\n+ * the language suitable for displaying to the user. The {@code getDisplayXXX}\n+ * methods are themselves <em>locale-sensitive<\/em> and have two variants; one with an explicit\n+ * locale parameter, and one without. The latter uses the default {@link\n+ * Locale.Category#DISPLAY DISPLAY} locale, so the following are equivalent :\n+ * {@snippet lang=java :\n+ *     Locale.getDefault().getDisplayCountry();\n+ *     Locale.getDefault().getDisplayCountry(Locale.getDefault(Locale.Category.DISPLAY));\n+ * }\n+ *\n+ * <p>The Java Platform provides a number of classes that perform locale-sensitive\n+ * operations. For example, the {@code NumberFormat} class formats\n+ * numbers, currency, and percentages in a <em>locale-sensitive<\/em> manner. Classes such\n+ * as {@code NumberFormat} have several factory methods for creating a default object\n+ * of that type. These methods generally have two variants; one with an explicit\n+ * locale parameter, and one without. The latter uses the default {@link\n+ * Locale.Category#FORMAT FORMAT} locale, so the following are equivalent :\n+ * {@snippet lang=java :\n+ *     NumberFormat.getCurrencyInstance();\n+ *     NumberFormat.getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT));\n+ * }\n+ *\n+ * <p>\n+ * The following example demonstrates <em>locale-sensitive<\/em> currency and\n+ * date related operations under different locales :\n+ * {@snippet lang = java:\n+ *     var number = 1000;\n+ *     NumberFormat.getCurrencyInstance(Locale.US).format(number); \/\/ returns \"$1,000.00\"\n+ *     NumberFormat.getCurrencyInstance(Locale.JAPAN).format(number); \/\/ returns \"\\u00A51,000\"\"\n+ *     var date = LocalDate.of(2024, 1, 1);\n+ *     DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).localizedBy(Locale.US).format(date); \/\/ returns \"January 1, 2024\"\n+ *     DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).localizedBy(Locale.JAPAN).format(date); \/\/ returns \"2024\\u5e741\\u67081\\u65e5\"\n+ * }\n+ *\n+ * <h2><a id=\"LocaleMatching\">Locale Matching<\/a><\/h2>\n+ *\n+ * <p>If an application is internationalized and provides localized\n@@ -335,2 +398,2 @@\n- * that a term \"language tag\" is used interchangeably with \"locale\" in this\n- * locale matching documentation.\n+ * that the term \"<dfn>{@index \"language tag\"}<\/dfn>\" is used interchangeably\n+ * with \"locale\" in the following locale matching documentation.\n@@ -338,1 +401,1 @@\n- * <p>In order to do matching a user's preferred locales to a set of language\n+ * <p>In order to match a user's preferred locales to a set of language\n@@ -342,1 +405,1 @@\n- * <em>lookup<\/em> is to choose the best matching locale.\n+ * <em>lookup<\/em> is to select the best matching locale.\n@@ -351,1 +414,2 @@\n- * <h4>Filtering<\/h4>\n+ *\n+ * <h3>Filtering<\/h3>\n@@ -369,1 +433,1 @@\n- * <h4>Lookup<\/h4>\n+ * <h3>Lookup<\/h3>\n@@ -401,1 +465,1 @@\n- * <h3>Use of Locale<\/h3>\n+ * <h3>Serialization<\/h3>\n@@ -403,11 +467,2 @@\n- * <p>Once you've obtained a {@code Locale} you can query it for information\n- * about itself. Use {@code getCountry} to get the country (or region)\n- * code and {@code getLanguage} to get the language code.\n- * You can use {@code getDisplayCountry} to get the\n- * name of the country suitable for displaying to the user. Similarly,\n- * you can use {@code getDisplayLanguage} to get the name of\n- * the language suitable for displaying to the user. Interestingly,\n- * the {@code getDisplayXXX} methods are themselves locale-sensitive\n- * and have two versions: one that uses the default\n- * {@link Locale.Category#DISPLAY DISPLAY} locale and one\n- * that uses the locale specified as an argument.\n+ * <p>During serialization, writeObject writes all fields to the output\n+ * stream, including extensions.\n@@ -415,36 +470,19 @@\n- * <p>The Java Platform provides a number of classes that perform locale-sensitive\n- * operations. For example, the {@code NumberFormat} class formats\n- * numbers, currency, and percentages in a locale-sensitive manner. Classes\n- * such as {@code NumberFormat} have several convenience methods\n- * for creating a default object of that type. For example, the\n- * {@code NumberFormat} class provides these three convenience methods\n- * for creating a default {@code NumberFormat} object:\n- * {@snippet lang=java :\n- *     NumberFormat.getInstance();\n- *     NumberFormat.getCurrencyInstance();\n- *     NumberFormat.getPercentInstance();\n- * }\n- * Each of these methods has two variants; one with an explicit locale\n- * and one without; the latter uses the default\n- * {@link Locale.Category#FORMAT FORMAT} locale:\n- * {@snippet lang=java :\n- *     NumberFormat.getInstance(myLocale);\n- *     NumberFormat.getCurrencyInstance(myLocale);\n- *     NumberFormat.getPercentInstance(myLocale);\n- * }\n- * A {@code Locale} is the mechanism for identifying the kind of object\n- * ({@code NumberFormat}) that you would like to get. The locale is\n- * <STRONG>just<\/STRONG> a mechanism for identifying objects,\n- * <STRONG>not<\/STRONG> a container for the objects themselves.\n- *\n- * <h3>Compatibility<\/h3>\n- *\n- * <p>In order to maintain compatibility, Locale's\n- * constructors retain their behavior prior to the Java Runtime\n- * Environment version 1.7.  The same is largely true for the\n- * {@code toString} method. Thus Locale objects can continue to\n- * be used as they were. In particular, clients who parse the output\n- * of toString into language, country, and variant fields can continue\n- * to do so (although this is strongly discouraged), although the\n- * variant field will have additional information in it if script or\n- * extensions are present.\n+ * <p>During deserialization, readResolve adds extensions as described\n+ * in {@linkplain ##special_cases_constructor Special Cases}, only\n+ * for the two cases th_TH_TH and ja_JP_JP.\n+ *\n+ * @implNote\n+ * <h2>Compatibility<\/h2>\n+ * <p> The following commentary is provided for apps that want to ensure\n+ * interoperability with older releases of {@code Locale} provided by the\n+ * reference implementation.\n+ * <h3><a id=\"locale_behavior\">Locale Behavior<\/a><\/h3>\n+ * In order to maintain compatibility, Locale's (deprecated) constructors,\n+ * {@link #of(String, String, String)}, and its overloads retain their behavior prior to the Java Runtime\n+ * Environment version 1.7. That is, a length constraint is not imposed on any of\n+ * the input parameters. Similarly, the same preservation of past behavior is largely true\n+ * for the {@link #toString()} method.\n+ * Apps that previously parsed the output of {@link #toString()} into language,\n+ * country, and variant fields can continue to do so (although this is strongly\n+ * discouraged). A caveat is that the variant field will have additional\n+ * information in it if script or extensions are present.\n@@ -455,1 +493,1 @@\n- * losing information. Thus {@code toLanguageTag} cannot\n+ * losing information. Thus {@link #toLanguageTag} cannot\n@@ -459,1 +497,1 @@\n- * <p>Because of these issues, it is recommended that clients migrate\n+ * <p>Because of these issues, it is recommended that apps migrate\n@@ -461,3 +499,3 @@\n- * {@code forLanguageTag} and {@code Locale.Builder} APIs instead.\n- * Clients desiring a string representation of the complete locale can\n- * then always rely on {@code toLanguageTag} for this purpose.\n+ * {@link #forLanguageTag(String)} and {@link Locale.Builder} APIs instead.\n+ * Apps desiring a string representation of the complete locale can\n+ * then always rely on {@link #toLanguageTag} for this purpose.\n@@ -465,1 +503,1 @@\n- * <h4><a id=\"special_cases_constructor\">Special cases<\/a><\/h4>\n+ * <h3><a id=\"special_cases_constructor\">Special cases<\/a><\/h3>\n@@ -470,1 +508,1 @@\n- * in BCP 47 since the variants are too short. To ease migration to BCP 47,\n+ * in BCP 47 since the {@linkplain ##def_variant variants} are too short. To ease migration to BCP 47,\n@@ -490,10 +528,1 @@\n- * <h4>Serialization<\/h4>\n- *\n- * <p>During serialization, writeObject writes all fields to the output\n- * stream, including extensions.\n- *\n- * <p>During deserialization, readResolve adds extensions as described\n- * in {@linkplain ##special_cases_constructor Special Cases}, only\n- * for the two cases th_TH_TH and ja_JP_JP.\n- *\n- * <h4><a id=\"legacy_language_codes\">Legacy language codes<\/a><\/h4>\n+ * <h3><a id=\"legacy_language_codes\">Legacy language codes<\/a><\/h3>\n@@ -501,1 +530,1 @@\n- * <p>Locale's constructor has always converted three language codes to\n+ * <p>Locale's constructors have always converted three language codes to\n@@ -508,1 +537,1 @@\n- * <p>For the backward compatible behavior, the system property\n+ * <p>For backwards compatible behavior, the system property\n@@ -527,12 +556,0 @@\n- * <h4>Three-letter language\/country(region) codes<\/h4>\n- *\n- * <p>The Locale constructors have always specified that the language\n- * and the country param be two characters in length, although in\n- * practice they have accepted any length.  The specification has now\n- * been relaxed to allow language codes of two to eight characters and\n- * country (region) codes of two to three characters, and in\n- * particular, three-letter language codes and three-digit region\n- * codes as specified in the IANA Language Subtag Registry.  For\n- * compatibility, the implementation still does not impose a length\n- * constraint.\n- *\n@@ -1242,2 +1259,2 @@\n-     * {@code Locale} instance equal to {@link Locale#ROOT Locale.ROOT} and\n-     * a {@code Locale} instance equal to {@link Locale#US Locale.US}.\n+     * {@code Locale} instance equal to {@link #ROOT Locale.ROOT} and\n+     * a {@code Locale} instance equal to {@link #US Locale.US}.\n@@ -1256,2 +1273,2 @@\n-     * {@code Locale} instance equal to {@link Locale#ROOT Locale.ROOT} and\n-     * a {@code Locale} instance equal to {@link Locale#US Locale.US}.\n+     * {@code Locale} instance equal to {@link #ROOT Locale.ROOT} and\n+     * a {@code Locale} instance equal to {@link #US Locale.US}.\n@@ -1539,2 +1556,2 @@\n-     * the empty string, even if the variant, script, or extensions field is present (you\n-     * can't have a locale with just a variant, the variant must accompany a well-formed\n+     * the empty string, even if the variant, script, or extensions field is present\n+     * (a locale with just a variant is not allowed, the variant must accompany a well-formed\n@@ -1620,1 +1637,1 @@\n-     * <li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}<\/code>\n+     * <li>if all sub-segments match {@code [0-9a-zA-Z]{1,8}}\n@@ -1629,1 +1646,1 @@\n-     * <code>[0-9a-zA-Z]{1,8}<\/code>, the variant will be truncated\n+     * {@code [0-9a-zA-Z]{1,8}}, the variant will be truncated\n@@ -1781,1 +1798,1 @@\n-     * to {@link Locale.Builder#setLanguageTag} which throws an exception\n+     * to {@link Locale.Builder#setLanguageTag(String)} which throws an exception\n@@ -2001,1 +2018,0 @@\n-     * (say, we don't have a Japanese name for Croatian),\n@@ -2019,1 +2035,0 @@\n-     * (say, we don't have a Japanese name for Croatian),\n@@ -2074,1 +2089,0 @@\n-     * (say, we don't have a Japanese name for Croatia),\n@@ -2091,2 +2105,1 @@\n-     * If the name returned cannot be localized according to inLocale.\n-     * (say, we don't have a Japanese name for Croatia),\n+     * If the name returned cannot be localized according to inLocale,\n@@ -2704,1 +2717,1 @@\n-     * {@link Locale#of(String, String, String)}.  However, keep in mind that a {@code Locale}\n+     * {@link #of(String, String, String)}.  However, keep in mind that a {@code Locale}\n@@ -2717,1 +2730,1 @@\n-     * @see Locale#forLanguageTag\n+     * @see Locale#forLanguageTag(String)\n@@ -2767,1 +2780,1 @@\n-         * Locale#forLanguageTag}) are converted to their canonical\n+         * Locale#forLanguageTag(String)}) are converted to their canonical\n@@ -2869,1 +2882,1 @@\n-         * use {@link Locale#of(String, String, String)}.\n+         * use {@link #of(String, String, String)}.\n@@ -2891,1 +2904,1 @@\n-         * <p><b>Note:<\/b> The key {@link Locale#UNICODE_LOCALE_EXTENSION\n+         * <p><b>Note:<\/b> The key {@link #UNICODE_LOCALE_EXTENSION\n@@ -2896,1 +2909,1 @@\n-         * <p><b>Note:<\/b> The key {@link Locale#PRIVATE_USE_EXTENSION\n+         * <p><b>Note:<\/b> The key {@link #PRIVATE_USE_EXTENSION\n@@ -2925,1 +2938,1 @@\n-         * <p><b>Note<\/b>:Setting the 'u' extension via {@link #setExtension}\n+         * <p><b>Note<\/b>:Setting the 'u' extension via {@link #setExtension(char, String)}\n@@ -3017,1 +3030,1 @@\n-         * <p>This applies the conversions listed in {@link Locale#forLanguageTag}\n+         * <p>This applies the conversions listed in {@link #forLanguageTag(String)}\n@@ -3019,1 +3032,1 @@\n-         * {@link #setLanguageTag}.)\n+         * {@link #setLanguageTag(String)}.)\n@@ -3200,4 +3213,4 @@\n-     * @see #filter\n-     * @see #filterTags\n-     * @see #lookup\n-     * @see #lookupTag\n+     * @see #filter(List, Collection, FilteringMode)\n+     * @see #filterTags(List, Collection, FilteringMode)\n+     * @see #lookup(List, Collection)\n+     * @see #lookupTag(List, Collection)\n@@ -3420,1 +3433,1 @@\n-         * @see #mapEquivalents\n+         * @see #mapEquivalents(List, Map)\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":231,"deletions":218,"binary":false,"changes":449,"status":"modified"}]}