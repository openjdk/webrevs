{"files":[{"patch":"@@ -84,0 +84,1 @@\n+        LANGUAGE_MODEL,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.SourceVersion;\n+import javax.annotation.processing.SupportedSourceVersion;\n+\n+\/**\n+ * A skeletal visitor for annotation values with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods\n+ * @param <P> the type of the additional parameter to this visitor's methods.\n+ *\n+ * @see <a href=\"AbstractAnnotationValueVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractAnnotationValueVisitor6\n+ * @see AbstractAnnotationValueVisitor7\n+ * @see AbstractAnnotationValueVisitor8\n+ * @see AbstractAnnotationValueVisitor9\n+ * @see AbstractAnnotationValueVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public abstract class AbstractAnnotationValueVisitorPreview<R, P> extends AbstractAnnotationValueVisitor14<R, P> {\n+\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractAnnotationValueVisitorPreview() {\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractAnnotationValueVisitorPreview.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import javax.lang.model.element.RecordComponentElement;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A skeletal visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"AbstractElementVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractElementVisitor6\n+ * @see AbstractElementVisitor7\n+ * @see AbstractElementVisitor8\n+ * @see AbstractElementVisitor9\n+ * @see AbstractElementVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public abstract class AbstractElementVisitorPreview<R, P> extends AbstractElementVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractElementVisitorPreview(){\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractElementVisitorPreview.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A skeletal visitor of types with default behavior appropriate for a\n+ * preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"AbstractTypeVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractTypeVisitor6\n+ * @see AbstractTypeVisitor7\n+ * @see AbstractTypeVisitor8\n+ * @see AbstractTypeVisitor9\n+ * @see AbstractTypeVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public abstract class AbstractTypeVisitorPreview<R, P> extends AbstractTypeVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractTypeVisitorPreview() {\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractTypeVisitorPreview.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.lang.model.element.*;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.SourceVersion;\n+\n+\/**\n+ * A visitor of program elements based on their {@linkplain\n+ * ElementKind kind} with default behavior appropriate for a preview\n+ * source version.\n+ *\n+ * For {@linkplain\n+ * Element elements} <code><i>Xyz<\/i><\/code> that may have more than one\n+ * kind, the <code>visit<i>Xyz<\/i><\/code> methods in this class delegate\n+ * to the <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> method corresponding to the\n+ * first argument's kind.  The <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> methods\n+ * call {@link #defaultAction defaultAction}, passing their arguments\n+ * to {@code defaultAction}'s corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"ElementKindVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see ElementKindVisitor6\n+ * @see ElementKindVisitor7\n+ * @see ElementKindVisitor8\n+ * @see ElementKindVisitor9\n+ * @see ElementKindVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class ElementKindVisitorPreview<R, P> extends ElementKindVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected ElementKindVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected ElementKindVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitorPreview.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.lang.model.element.*;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A scanning visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * The <code>visit<i>Xyz<\/i><\/code> methods in this class scan their\n+ * component elements by calling {@link ElementScanner6#scan(Element,\n+ * Object) scan} on their {@linkplain Element#getEnclosedElements\n+ * enclosed elements}, {@linkplain ExecutableElement#getParameters\n+ * parameters}, etc., as indicated in the individual method\n+ * specifications.  A subclass can control the order elements are\n+ * visited by overriding the <code>visit<i>Xyz<\/i><\/code> methods.\n+ * Note that clients of a scanner may get the desired behavior by\n+ * invoking {@code v.scan(e, p)} rather than {@code v.visit(e, p)} on\n+ * the root objects of interest.\n+ *\n+ * <p>When a subclass overrides a <code>visit<i>Xyz<\/i><\/code> method, the\n+ * new method can cause the enclosed elements to be scanned in the\n+ * default way by calling <code>super.visit<i>Xyz<\/i><\/code>.  In this\n+ * fashion, the concrete visitor can control the ordering of traversal\n+ * over the component elements with respect to the additional\n+ * processing; for example, consistently calling\n+ * <code>super.visit<i>Xyz<\/i><\/code> at the start of the overridden\n+ * methods will yield a preorder traversal, etc.  If the component\n+ * elements should be traversed in some other order, instead of\n+ * calling <code>super.visit<i>Xyz<\/i><\/code>, an overriding visit method\n+ * should call {@code scan} with the elements in the desired order.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"ElementScanner6.html#note_for_subclasses\"><strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see ElementScanner6\n+ * @see ElementScanner7\n+ * @see ElementScanner8\n+ * @see ElementScanner9\n+ * @see ElementScanner14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class ElementScannerPreview<R, P> extends ElementScanner14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected ElementScannerPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the default value\n+     *\/\n+    protected ElementScannerPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScannerPreview.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor for annotation values with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * Visit methods call {@link #defaultAction\n+ * defaultAction} passing their arguments to {@code defaultAction}'s\n+ * corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods\n+ * @param <P> the type of the additional parameter to this visitor's methods.\n+ *\n+ * @see <a href=\"SimpleAnnotationValueVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleAnnotationValueVisitor6\n+ * @see SimpleAnnotationValueVisitor7\n+ * @see SimpleAnnotationValueVisitor8\n+ * @see SimpleAnnotationValueVisitor9\n+ * @see SimpleAnnotationValueVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class SimpleAnnotationValueVisitorPreview<R, P> extends SimpleAnnotationValueVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleAnnotationValueVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleAnnotationValueVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleAnnotationValueVisitorPreview.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import javax.lang.model.element.RecordComponentElement;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * Visit methods corresponding to {@code RELEASE_14} and earlier\n+ * language constructs call {@link #defaultAction defaultAction},\n+ * passing their arguments to {@code defaultAction}'s corresponding\n+ * parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@code Void}\n+ *             for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}\n+ *              for visitors that do not need an additional parameter.\n+ *\n+ * @see <a href=\"SimpleElementVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleElementVisitor6\n+ * @see SimpleElementVisitor7\n+ * @see SimpleElementVisitor8\n+ * @see SimpleElementVisitor9\n+ * @see SimpleElementVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class SimpleElementVisitorPreview<R, P> extends SimpleElementVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleElementVisitorPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleElementVisitorPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleElementVisitorPreview.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor of types with default behavior appropriate for a\n+ * preview source version.\n+ *\n+ * Visit methods corresponding to {@code RELEASE_14} and earlier\n+ * language constructs call {@link #defaultAction defaultAction},\n+ * passing their arguments to {@code defaultAction}'s corresponding\n+ * parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"SimpleTypeVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleTypeVisitor6\n+ * @see SimpleTypeVisitor7\n+ * @see SimpleTypeVisitor8\n+ * @see SimpleTypeVisitor9\n+ * @see SimpleTypeVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class SimpleTypeVisitorPreview<R, P> extends SimpleTypeVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleTypeVisitorPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleTypeVisitorPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleTypeVisitorPreview.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.type.*;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A visitor of types based on their {@linkplain TypeKind kind} with\n+ * default behavior appropriate for a preview source version.\n+ *\n+ * For {@linkplain\n+ * TypeMirror types} <code><i>Xyz<\/i><\/code> that may have more than one\n+ * kind, the <code>visit<i>Xyz<\/i><\/code> methods in this class delegate\n+ * to the <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> method corresponding to the\n+ * first argument's kind.  The <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> methods\n+ * call {@link #defaultAction defaultAction}, passing their arguments\n+ * to {@code defaultAction}'s corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"TypeKindVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see TypeKindVisitor6\n+ * @see TypeKindVisitor7\n+ * @see TypeKindVisitor8\n+ * @see TypeKindVisitor9\n+ * @see TypeKindVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.LANGUAGE_MODEL, reflective=true)\n+public class TypeKindVisitorPreview<R, P> extends TypeKindVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call; uses {@code null}\n+     * for the default value.\n+     *\/\n+    protected TypeKindVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses to call; uses the argument\n+     * for the default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected TypeKindVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/TypeKindVisitorPreview.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -117,1 +117,2 @@\n-    public static abstract class AbstractAnnotationValueVisitor<R, P> extends AbstractAnnotationValueVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractAnnotationValueVisitor<R, P> extends AbstractAnnotationValueVisitorPreview<R, P> {\n@@ -128,1 +129,2 @@\n-    public static abstract class AbstractElementVisitor<R, P> extends AbstractElementVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractElementVisitor<R, P> extends AbstractElementVisitorPreview<R, P> {\n@@ -138,1 +140,2 @@\n-    public static abstract class AbstractTypeVisitor<R, P> extends AbstractTypeVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractTypeVisitor<R, P> extends AbstractTypeVisitorPreview<R, P> {\n@@ -148,1 +151,2 @@\n-    public static class ElementKindVisitor<R, P> extends ElementKindVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class ElementKindVisitor<R, P> extends ElementKindVisitorPreview<R, P> {\n@@ -169,1 +173,2 @@\n-    public static class ElementScanner<R, P> extends ElementScanner14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class ElementScanner<R, P> extends ElementScannerPreview<R, P> {\n@@ -188,1 +193,2 @@\n-    public static class SimpleAnnotationValueVisitor<R, P> extends SimpleAnnotationValueVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleAnnotationValueVisitor<R, P> extends SimpleAnnotationValueVisitorPreview<R, P> {\n@@ -209,1 +215,2 @@\n-    public static class SimpleElementVisitor<R, P> extends SimpleElementVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleElementVisitor<R, P> extends SimpleElementVisitorPreview<R, P> {\n@@ -230,1 +237,2 @@\n-    public static class SimpleTypeVisitor<R, P> extends SimpleTypeVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleTypeVisitor<R, P> extends SimpleTypeVisitorPreview<R, P> {\n@@ -251,1 +259,2 @@\n-    public static class TypeKindVisitor<R, P> extends TypeKindVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class TypeKindVisitor<R, P> extends TypeKindVisitorPreview<R, P> {\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"}]}