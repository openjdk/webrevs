{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,3 @@\n- * This model can reconstruct an annotation, given the location of the modeled structure\n- * in the class file and the definition of the annotation interface.\n+ * This model can reconstruct an annotation, given the location of the modeled\n+ * structure in the {@code class} file and the definition of the annotation\n+ * interface.\n@@ -57,2 +58,2 @@\n- * @see AnnotationElement\n- * @see AnnotationValue\n+ * @see java.lang.annotation.Annotation\n+ * @see java.lang.reflect.AnnotatedElement Annotations in core reflection\n@@ -73,0 +74,2 @@\n+     *\n+     * @see java.lang.annotation.Annotation#annotationType()\n@@ -78,0 +81,2 @@\n+     *\n+     * @see java.lang.annotation.Annotation#annotationType()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n- * @see AnnotationValue\n- *\n+ * @see java.lang.reflect.AnnotatedElement Annotations in core reflection\n+ * @jvms 4.7.16.1 The {@code element_value} structure\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationElement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+ * @see java.lang.reflect.AnnotatedElement Annotations in core reflection\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,8 +34,26 @@\n- * Models a classfile attribute (JVMS {@jvms 4.7}).  Many, though not all, subtypes of\n- * {@linkplain Attribute} will implement {@link ClassElement}, {@link\n- * MethodElement}, {@link FieldElement}, or {@link CodeElement}; attributes that\n- * are also elements will be delivered when traversing the elements of the\n- * corresponding model type. Additionally, all attributes are accessible\n- * directly from the corresponding model type through {@link\n- * AttributedElement#findAttribute(AttributeMapper)}.\n- * @param <A> the attribute type\n+ * Models an attribute (JVMS {@jvms 4.7}) in the {@code class} file format.\n+ * Attributes exist on certain {@code class} file structures modeled by {@link\n+ * AttributedElement}, which provides basic read access to the attributes.\n+ * <p>\n+ * Two special subtypes of {@code Attribute} are {@link CustomAttribute}, which\n+ * all user-defined attributes should extend from, and {@link UnknownAttribute},\n+ * representing attributes read from {@code class} file but are not recognized\n+ * by the {@link ClassFile.AttributeMapperOption}.\n+ * <p>\n+ * Many attributes implement {@link ClassElement}, {@link FieldElement}, {@link\n+ * MethodElement}, or {@link CodeElement} interfaces.  They can be written to\n+ * the {@code class} file as part of those enclosing structures via {@link\n+ * ClassBuilder#with}, {@link FieldBuilder#with}, {@link MethodBuilder#with}, or\n+ * {@link CodeBuilder#with}.  If an attribute does not {@linkplain\n+ * AttributeMapper#allowMultiple allow multiple instances} in one structure,\n+ * the last supplied instance appears on the built structure.  These interfaces\n+ * also allow such attributes to be delivered in the traversal of corresponding\n+ * {@link CompoundElement}; the exact rules are specified in the modeling\n+ * subinterfaces.\n+ * <p>\n+ * Some attributes, like {@link BootstrapMethodsAttribute BootstrapMethods} and\n+ * {@link LocalVariableTableAttribute LocalVariableTable}, are present in\n+ * structures like {@link ClassModel} or {@link CodeModel}, but they do not\n+ * implement {@link ClassElement} or {@link CodeElement}.  Such attributes are\n+ * usually modeled as an integral part to the declaring structure, specified\n+ * in the modeling subinterfaces.\n@@ -43,0 +61,7 @@\n+ * @param <A> the attribute type\n+ * @see java.lang.classfile.attribute\n+ * @see AttributeMapper\n+ * @see AttributedElement\n+ * @see CustomAttribute\n+ * @see UnknownAttribute\n+ * @jvms 4.7 Attributes\n@@ -65,1 +90,7 @@\n-     * {@return the name of the attribute}\n+     * {@return the name of the attribute}  The {@linkplain\n+     * Utf8Entry#stringValue() string value} of the name is equivalent to the\n+     * value of {@link AttributeMapper#name() attributeMapper().name()}.\n+     * <p>\n+     * If this attribute is read from a {@code class} file, this method returns\n+     * the {@link Utf8Entry} indicating the attribute name in the {@code class}\n+     * file.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":41,"deletions":10,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,6 @@\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+\n@@ -28,9 +34,12 @@\n- * Bidirectional mapper between the classfile representation of an attribute and\n- * how that attribute is modeled in the API.  The attribute mapper is used\n- * to parse the classfile representation into a model, and to write the model\n- * representation back to a classfile.  For each standard attribute, there is a\n- * predefined attribute mapper defined in {@link Attributes}. For nonstandard\n- * attributes, clients can define their own {@linkplain AttributeMapper}.\n- * Classes that model nonstandard attributes should extend {@link\n- * CustomAttribute}.\n- * @param <A> the attribute type\n+ * Bidirectional mapper between the {@code class} file representation of an\n+ * attribute and its API model.  The attribute mapper identifies an attribute\n+ * by its {@linkplain Attribute#attributeName name}, and is used to parse the\n+ * {@code class} file representation into a model, and to write the model\n+ * representation back to a {@code class} file.\n+ * <p>\n+ * {@link Attributes} defines the mappers for predefined attributes in the JVMS\n+ * and certain conventional attributes.  For other attributes (JVMS {@jvms\n+ * 4.7.1}), users can define their own {@code AttributeMapper}; classes that\n+ * model those attributes should extend {@link CustomAttribute}.  To read those\n+ * attributes, user-defined {@code AttributeMapper}s must be registered to the\n+ * {@link ClassFile.AttributeMapperOption}.\n@@ -38,0 +47,4 @@\n+ * @param <A> the attribute type\n+ * @see Attributes\n+ * @see ClassFile.AttributeMapperOption\n+ * @see java.lang.classfile.attribute\n@@ -43,1 +56,4 @@\n-     * Attribute stability indicator\n+     * Indicates the data dependency of the {@code class} file representation\n+     * of an attribute.  Whether an attribute can be bulk-copied by its binary\n+     * representation to a new {@code class} file depends on if its data refers\n+     * to other parts of its enclosing {@code class} file.\n@@ -45,0 +61,6 @@\n+     * @apiNote\n+     * This dependency is called \"stability\" because it indicates the conditions\n+     * for a {@code class} file attribute to be eligible for bulk-copying to\n+     * another {@code class} file.\n+     *\n+     * @see AttributeMapper#stability()\n@@ -50,1 +72,6 @@\n-         * The attribute contains only pure data, such as timestamps, and can always be bulk-copied.\n+         * The attribute contains only standalone data, and has no reference to\n+         * other parts of its enclosing {@code class} file, besides the name of\n+         * the attribute.  Thus, its contents can always be bulk-copied to\n+         * another {@code class} file.\n+         * <p>\n+         * For example, a bit mask is standalone data.\n@@ -55,2 +82,12 @@\n-         * The attribute contains only pure data and CP refs, so can be bulk-copied when CP sharing is in effect,\n-         * and need to be exploded and rewritten when CP sharing is not in effect.\n+         * In addition to standalone data, the attribute refers to the constant\n+         * pool, including the {@link BootstrapMethodsAttribute BootstrapMethods}\n+         * attribute, of its enclosing {@code class} file.  Thus, it can be\n+         * bulk-copied when the destination {@code class} file extends its\n+         * constant pool from that of the original {@code class}.  It must be\n+         * expanded to translate constant pool references and rewritten when\n+         * constant pool indices are not compatible.\n+         * <p>\n+         * For example, a {@link Utf8Entry} is a reference to the constant pool.\n+         *\n+         * @see ConstantPoolBuilder#of(ClassModel)\n+         * @see ClassFile.ConstantPoolSharingOption\n@@ -61,1 +98,12 @@\n-         * The attribute may contain labels, so need to be exploded and rewritten when the Code array is perturbed.\n+         * In addition to standalone data and references to the constant pool,\n+         * the attribute refers to positions into the {@code code} array of a\n+         * {@link CodeAttribute Code} attribute.  Thus, it can be bulked-copied\n+         * when the {@code code} array is unchanged, which requires that the\n+         * destination {@code class} file extends its constant pool from that of\n+         * the original {@code class}.  It must be expanded to translate {@link\n+         * Label}s or constant pool references and rewritten if the {@code code}\n+         * array is perturbed, including when constant pool indices are not\n+         * compatible.\n+         * <p>\n+         * For example, a bci value, modeled by a {@link Label}, is a reference\n+         * to a position in the {@code code} array.\n@@ -66,3 +114,10 @@\n-         * The attribute may contain indexes into structured not managed by the library (type variable lists, etc)\n-         * and so we consult the {@link ClassFile.AttributesProcessingOption} option to determine whether to preserve\n-         * or drop it during transformation.\n+         * The attribute refers to structures not managed by the library (type\n+         * variable lists, etc.).  As a result, even when the attribute is\n+         * expanded, those references may not be correctly translated, and the\n+         * rewritten results may be incorrect.\n+         * <p>\n+         * If the attribute is read from a {@code class} file, {@link\n+         * ClassFile.AttributesProcessingOption} determines whether to preserve\n+         * or drop the attribute during transformation.\n+         *\n+         * @see ClassFile.AttributesProcessingOption#DROP_UNSTABLE_ATTRIBUTES\n@@ -73,2 +128,11 @@\n-         * The attribute is completely unknown and so we consult the {@link ClassFile.AttributesProcessingOption} option\n-         * to determine whether to preserve or drop it during transformation.\n+         * The attribute is completely unknown.  As a result, expanding and\n+         * rewriting is not possible, and any difference between the destination\n+         * {@code class} file and its enclosing {@code class} file may make the\n+         * attribute incorrect.\n+         * <p>\n+         * {@link ClassFile.AttributesProcessingOption} determines whether to\n+         * preserve or drop the attribute during transformation.\n+         *\n+         * @see UnknownAttribute\n+         * @see ClassFile.AttributesProcessingOption#DROP_UNSTABLE_ATTRIBUTES\n+         * @see ClassFile.AttributesProcessingOption#DROP_UNKNOWN_ATTRIBUTES\n@@ -85,1 +149,32 @@\n-     * Create an {@link Attribute} instance from a classfile.\n+     * Creates an {@link Attribute} instance from a {@code class} file for the\n+     * Class-File API.\n+     * <p>\n+     * This method is called by the Class-File API to support reading of\n+     * attributes.  Users should never call this method.\n+     * <p>\n+     * The Class-File API makes these promises about the call to this method:\n+     * <ul>\n+     * <li>The {@link Utf8Entry} for the name of the attribute is accessible\n+     * with {@code cf.readEntry(pos - 6, Utf8Entry.class)}, and is validated;\n+     * <li>The length of the attribute is accessible with {@code cf.readInt(pos\n+     * - 4)}, and is validated to be positive and not beyond the length of the\n+     * {@code class} file;\n+     * <li>The {@link AttributedElement} attribute access functionalities on the\n+     * {@code enclosing} model may not be accessed when this method is called,\n+     * but can be accessed later by the returned attribute when it is accessible\n+     * to users.\n+     * <\/ul>\n+     * <p>\n+     * The returned {@code Attribute} must fulfill these requirements:\n+     * <ul>\n+     * <li>{@link Attribute#attributeMapper()} returns this mapper;\n+     * <li>{@link Attribute#attributeName()} returns the attribute name in the\n+     * {@code class} file.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * Implementations of this method should perform minimal work to return an\n+     * attribute, as this method is called even if the resulting attribute is\n+     * never used.  In particular, the implementation should avoid checking the\n+     * validity of the attribute {@code class} file data or performing actions\n+     * that may throw exceptions.\n@@ -87,5 +182,5 @@\n-     * @param enclosing The class, method, field, or code attribute in which\n-     *                  this attribute appears\n-     * @param cf The {@link ClassReader} describing the classfile to read from\n-     * @param pos The offset into the classfile at which the attribute starts\n-     * @return the new attribute\n+     * @param enclosing the structure in which this attribute appears\n+     * @param cf provides access to the {@code class} file to read from\n+     * @param pos the offset into the {@code class} file at which the contents\n+     *            of the attribute starts\n+     * @return the read attribute\n@@ -96,1 +191,31 @@\n-     * Write an {@link Attribute} instance to a classfile.\n+     * Writes an {@link Attribute} instance to a {@code class} file for the\n+     * Class-File API.\n+     * <p>\n+     * This method is called by the Class-File API to support writing of\n+     * attributes.  Users should never call this method.\n+     * <p>\n+     * The Class-File API makes these promises about the call to this method:\n+     * <ul>\n+     * <li>{@link Attribute#attributeMapper() attr.attributeMapper()} returns\n+     * this mapper;\n+     * <li>The {@code buf} may already have data written, that its {@link\n+     * BufWriter#size() size} may not be {@code 0}.\n+     * <\/ul>\n+     * <p>\n+     * The {@code class} file writing must fulfill these requirements:\n+     * <ul>\n+     * <li>The attribute name {@code u2} and attribute length {@code u4} must\n+     * be written to the {@code buf};\n+     * <li>{@link Attribute#attributeName() attr.attributeName()} is written as\n+     * if with {@code buf.writeIndex(attr.attributeName())};\n+     * <li>The attribute length is the length, in bytes, of attribute contents\n+     * written to the {@code buf}, not including the 6 bytes used by the name\n+     * and the length;\n+     * <li>If any information in the API model of the attribute, {@code attr},\n+     * cannot be represented in the {@code class} file format of the attribute,\n+     * an {@link IllegalArgumentException} is thrown.\n+     * <\/ul>\n+     *\n+     * @apiNote\n+     * {@link BufWriter#patchInt} can be used to update the attribute length\n+     * after the attribute contents are written to the {@code buf}.\n@@ -98,2 +223,4 @@\n-     * @param buf The {@link BufWriter} to which the attribute should be written\n-     * @param attr The attribute to write\n+     * @param buf the {@link BufWriter} to which the attribute should be written\n+     * @param attr the attribute to write\n+     * @throws IllegalArgumentException if some data in the API model of the\n+     *         attribute is invalid for the {@code class} file format\n@@ -104,1 +231,7 @@\n-     * {@return whether this attribute may appear more than once in a given location}\n+     * {@return whether this attribute may appear more than once in one\n+     * structure}\n+     * <p>\n+     * If an attribute does not allow multiple instances in one structure,\n+     * can be supplied to a {@link ClassFileBuilder}, and multiple instances of\n+     * the attribute are supplied to the builder, the last supplied attribute\n+     * appears on the built structure.\n@@ -106,1 +239,1 @@\n-     * @implSpec The default implementation returns {@code false}\n+     * @implSpec The default implementation returns {@code false}.\n@@ -113,1 +246,1 @@\n-     * {@return attribute stability indicator}\n+     * {@return the data dependency of this attribute on the {@code class} file}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributeMapper.java","additions":165,"deletions":32,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -38,2 +39,3 @@\n- * A {@link ClassFileElement} describing an entity that has attributes, such\n- * as a class, field, method, code attribute, or record component.\n+ * A {@link ClassFileElement} describing a {@code class} file structure that has\n+ * attributes, such as a {@code class} file, a field, a method, a {@link\n+ * CodeAttribute Code} attribute, or a record component.\n@@ -41,0 +43,1 @@\n+ * @jvms 4.7 Attributes\n@@ -49,1 +52,1 @@\n-     * {@return the attributes of this element}\n+     * {@return the attributes of this structure}\n@@ -54,1 +57,14 @@\n-     * Finds an attribute by name.\n+     * Finds an attribute by name.  This is suitable to find attributes that\n+     * {@linkplain AttributeMapper#allowMultiple() allow at most one instance}\n+     * in one structure.  If this is used to find attributes that allow multiple\n+     * instances in one structure, the first matching instance is returned.\n+     *\n+     * @apiNote\n+     * This can easily find an attribute and send it to another {@link\n+     * ClassFileBuilder}, which is a {@code Consumer}:\n+     * {@snippet lang=java :\n+     * MethodModel method = null; \/\/ @replace substring=null; replacement=...\n+     * MethodBuilder mb = null; \/\/ @replace substring=null; replacement=...\n+     * method.findAttribute(Attributes.code()).ifPresent(mb);\n+     * }\n+     *\n@@ -57,1 +73,1 @@\n-     * @return the attribute, or an empty {@linkplain Optional} if the attribute\n+     * @return the attribute, or {@code Optional.empty()} if the attribute\n@@ -73,1 +89,4 @@\n-     * Finds one or more attributes by name.\n+     * Finds attributes by name.  This is suitable to find attributes that\n+     * {@linkplain AttributeMapper#allowMultiple() allow multiple instances}\n+     * in one structure.\n+     *\n@@ -76,1 +95,1 @@\n-     * @return the attributes, or an empty {@linkplain List} if the attribute\n+     * @return the attributes, or an empty {@code List} if the attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributedElement.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,2 @@\n- * Attribute mappers for standard classfile attributes.\n+ * Attribute mappers for predefined (JVMS {@jvms 4.7}) and JDK-specific\n+ * nonstandard attributes.\n@@ -35,41 +36,1 @@\n- * Unless otherwise specified, mappers returned by each method\n- * do not permit multiple attribute instances in a given location.\n- * <p>\n- * The most stable {@link AttributeStability#STATELESS STATELESS} mappers are:\n- * <ul>\n- * <li>{@link #deprecated()}\n- * <li>{@link #moduleResolution()}\n- * <li>{@link #sourceDebugExtension()}\n- * <li>{@link #synthetic()}\n- * <\/ul>\n- *\n- * The mappers with {@link AttributeStability#CP_REFS CP_REFS} stability are:\n- * <ul>\n- * <li>{@link #annotationDefault()}\n- * <li>{@link #bootstrapMethods()}\n- * <li>{@link #code()}\n- * <li>{@link #compilationId()}\n- * <li>{@link #constantValue()}\n- * <li>{@link #enclosingMethod()}\n- * <li>{@link #exceptions()}\n- * <li>{@link #innerClasses()}\n- * <li>{@link #methodParameters()}\n- * <li>{@link #module()}\n- * <li>{@link #moduleHashes()}\n- * <li>{@link #moduleMainClass()}\n- * <li>{@link #modulePackages()}\n- * <li>{@link #moduleTarget()}\n- * <li>{@link #nestHost()}\n- * <li>{@link #nestMembers()}\n- * <li>{@link #permittedSubclasses()}\n- * <li>{@link #record()}\n- * <li>{@link #runtimeInvisibleAnnotations()}\n- * <li>{@link #runtimeInvisibleParameterAnnotations()}\n- * <li>{@link #runtimeVisibleAnnotations()}\n- * <li>{@link #runtimeVisibleParameterAnnotations()}\n- * <li>{@link #signature()}\n- * <li>{@link #sourceFile()}\n- * <li>{@link #sourceId()}\n- * <\/ul>\n- *\n- * The mappers with {@link AttributeStability#LABELS LABELS} stability are:\n+ * Unless otherwise specified, each mapper returned by methods in this class:\n@@ -77,10 +38,5 @@\n- * <li>{@link #characterRangeTable()}\n- * <li>{@link #lineNumberTable()}\n- * <li>{@link #localVariableTable()}\n- * <li>{@link #localVariableTypeTable()}\n- * <\/ul>\n- *\n- * The {@link AttributeStability#UNSTABLE UNSTABLE} mappers are:\n- * <ul>\n- * <li>{@link #runtimeInvisibleTypeAnnotations()}\n- * <li>{@link #runtimeVisibleTypeAnnotations()}\n+ * <li>is predefined in the JVMS instead of JDK-specific;\n+ * <li>does not permit {@linkplain AttributeMapper#allowMultiple() multiple\n+ * attribute instances} in the same structure;\n+ * <li>the attribute has a {@linkplain AttributeMapper#stability() data\n+ * dependency} on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -90,1 +46,1 @@\n- *\n+ * @see java.lang.classfile.attribute\n@@ -207,1 +163,1 @@\n-     * {@return Attribute mapper for the {@code AnnotationDefault} attribute}\n+     * {@return the mapper for the {@code AnnotationDefault} attribute}\n@@ -214,1 +170,1 @@\n-     * {@return Attribute mapper for the {@code BootstrapMethods} attribute}\n+     * {@return the mapper for the {@code BootstrapMethods} attribute}\n@@ -221,2 +177,5 @@\n-     * {@return Attribute mapper for the {@code CharacterRangeTable} attribute}\n-     * The mapper permits multiple instances in a given location.\n+     * {@return the mapper for the {@code CharacterRangeTable} attribute}\n+     * This is a JDK-specific attribute.\n+     * The mapper permits multiple instances in a {@code Code} attribute, but this\n+     * attribute should be only emitted once.\n+     * This has a data dependency on {@linkplain AttributeStability#LABELS labels}.\n@@ -229,1 +188,1 @@\n-     * {@return Attribute mapper for the {@code Code} attribute}\n+     * {@return the mapper for the {@code Code} attribute}\n@@ -236,1 +195,2 @@\n-     * {@return Attribute mapper for the {@code CompilationID} attribute}\n+     * {@return the mapper for the {@code CompilationID} attribute}\n+     * This is a JDK-specific attribute.\n@@ -243,1 +203,1 @@\n-     * {@return Attribute mapper for the {@code ConstantValue} attribute}\n+     * {@return the mapper for the {@code ConstantValue} attribute}\n@@ -250,1 +210,1 @@\n-     * {@return Attribute mapper for the {@code Deprecated} attribute}\n+     * {@return the mapper for the {@code Deprecated} attribute}\n@@ -252,0 +212,1 @@\n+     * This has {@linkplain AttributeStability#STATELESS no data dependency}.\n@@ -258,1 +219,1 @@\n-     * {@return Attribute mapper for the {@code EnclosingMethod} attribute}\n+     * {@return the mapper for the {@code EnclosingMethod} attribute}\n@@ -265,1 +226,1 @@\n-     * {@return Attribute mapper for the {@code Exceptions} attribute}\n+     * {@return the mapper for the {@code Exceptions} attribute}\n@@ -272,1 +233,1 @@\n-     * {@return Attribute mapper for the {@code InnerClasses} attribute}\n+     * {@return the mapper for the {@code InnerClasses} attribute}\n@@ -279,2 +240,3 @@\n-     * {@return Attribute mapper for the {@code LineNumberTable} attribute}\n-     * The mapper permits multiple instances in a given location.\n+     * {@return the mapper for the {@code LineNumberTable} attribute}\n+     * The mapper permits multiple instances in a {@code Code} attribute.\n+     * This has a data dependency on {@linkplain AttributeStability#LABELS labels}.\n@@ -287,2 +249,3 @@\n-     * {@return Attribute mapper for the {@code LocalVariableTable} attribute}\n-     * The mapper permits multiple instances in a given location.\n+     * {@return the mapper for the {@code LocalVariableTable} attribute}\n+     * The mapper permits multiple instances in a {@code Code} attribute.\n+     * This has a data dependency on {@linkplain AttributeStability#LABELS labels}.\n@@ -295,1 +258,1 @@\n-     * {@return Attribute mapper for the {@code LocalVariableTypeTable} attribute}\n+     * {@return the mapper for the {@code LocalVariableTypeTable} attribute}\n@@ -297,0 +260,1 @@\n+     * This has a data dependency on {@linkplain AttributeStability#LABELS labels}.\n@@ -303,1 +267,1 @@\n-     * {@return Attribute mapper for the {@code MethodParameters} attribute}\n+     * {@return the mapper for the {@code MethodParameters} attribute}\n@@ -310,1 +274,1 @@\n-     * {@return Attribute mapper for the {@code Module} attribute}\n+     * {@return the mapper for the {@code Module} attribute}\n@@ -317,1 +281,2 @@\n-     * {@return Attribute mapper for the {@code ModuleHashes} attribute}\n+     * {@return the mapper for the {@code ModuleHashes} attribute}\n+     * This is a JDK-specific attribute.\n@@ -324,1 +289,1 @@\n-     * {@return Attribute mapper for the {@code ModuleMainClass} attribute}\n+     * {@return the mapper for the {@code ModuleMainClass} attribute}\n@@ -331,1 +296,1 @@\n-     * {@return Attribute mapper for the {@code ModulePackages} attribute}\n+     * {@return the mapper for the {@code ModulePackages} attribute}\n@@ -338,1 +303,3 @@\n-     * {@return Attribute mapper for the {@code ModuleResolution} attribute}\n+     * {@return the mapper for the {@code ModuleResolution} attribute}\n+     * This is a JDK-specific attribute.\n+     * This has {@linkplain AttributeStability#STATELESS no data dependency}.\n@@ -345,1 +312,2 @@\n-     * {@return Attribute mapper for the {@code ModuleTarget} attribute}\n+     * {@return the mapper for the {@code ModuleTarget} attribute}\n+     * This is a JDK-specific attribute.\n@@ -352,1 +320,1 @@\n-     * {@return Attribute mapper for the {@code NestHost} attribute}\n+     * {@return the mapper for the {@code NestHost} attribute}\n@@ -359,1 +327,1 @@\n-     * {@return Attribute mapper for the {@code NestMembers} attribute}\n+     * {@return the mapper for the {@code NestMembers} attribute}\n@@ -366,1 +334,1 @@\n-     * {@return Attribute mapper for the {@code PermittedSubclasses} attribute}\n+     * {@return the mapper for the {@code PermittedSubclasses} attribute}\n@@ -373,1 +341,1 @@\n-     * {@return Attribute mapper for the {@code Record} attribute}\n+     * {@return the mapper for the {@code Record} attribute}\n@@ -380,1 +348,1 @@\n-     * {@return Attribute mapper for the {@code RuntimeInvisibleAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeInvisibleAnnotations} attribute}\n@@ -387,1 +355,1 @@\n-     * {@return Attribute mapper for the {@code RuntimeInvisibleParameterAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeInvisibleParameterAnnotations} attribute}\n@@ -394,1 +362,3 @@\n-     * {@return Attribute mapper for the {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * This has a data dependency on {@linkplain AttributeStability#UNSTABLE\n+     * arbitrary indices} in the {@code class} file format.\n@@ -401,1 +371,1 @@\n-     * {@return Attribute mapper for the {@code RuntimeVisibleAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeVisibleAnnotations} attribute}\n@@ -408,1 +378,1 @@\n-     * {@return Attribute mapper for the {@code RuntimeVisibleParameterAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeVisibleParameterAnnotations} attribute}\n@@ -415,1 +385,3 @@\n-     * {@return Attribute mapper for the {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * {@return the mapper for the {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * This has a data dependency on {@linkplain AttributeStability#UNSTABLE\n+     * arbitrary indices} in the {@code class} file format.\n@@ -422,1 +394,1 @@\n-     * {@return Attribute mapper for the {@code Signature} attribute}\n+     * {@return the mapper for the {@code Signature} attribute}\n@@ -429,1 +401,2 @@\n-     * {@return Attribute mapper for the {@code SourceDebugExtension} attribute}\n+     * {@return the mapper for the {@code SourceDebugExtension} attribute}\n+     * This has {@linkplain AttributeStability#STATELESS no data dependency}.\n@@ -436,1 +409,1 @@\n-     * {@return Attribute mapper for the {@code SourceFile} attribute}\n+     * {@return the mapper for the {@code SourceFile} attribute}\n@@ -443,1 +416,2 @@\n-     * {@return Attribute mapper for the {@code SourceID} attribute}\n+     * {@return the mapper for the {@code SourceID} attribute}\n+     * This is a JDK-specific attribute.\n@@ -450,1 +424,2 @@\n-     * {@return Attribute mapper for the {@code StackMapTable} attribute}\n+     * {@return the mapper for the {@code StackMapTable} attribute}\n+     * This has a data dependency on {@linkplain AttributeStability#LABELS labels}.\n@@ -457,1 +432,1 @@\n-     * {@return Attribute mapper for the {@code Synthetic} attribute}\n+     * {@return the mapper for the {@code Synthetic} attribute}\n@@ -459,0 +434,1 @@\n+     * This has {@linkplain AttributeStability#STATELESS no data dependency}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attributes.java","additions":69,"deletions":93,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.nio.ByteOrder;\n@@ -34,3 +35,12 @@\n- * Supports writing portions of a classfile to a growable buffer.   Methods\n- * are provided to write various standard entities (e.g., {@code u2}, {@code u4})\n- * to the end of the buffer, as well as to create constant pool entries.\n+ * Advanced {@code class} file writing support for {@link AttributeMapper}s.\n+ * Supports writing portions of a {@code class} file to a growable buffer, such\n+ * as writing various numerical types (e.g., {@code u2}, {@code u4}), to the end\n+ * of the buffer, as well as to create constant pool entries.\n+ * <p>\n+ * All numeric values in the {@code class} file format are {@linkplain\n+ * ByteOrder#BIG_ENDIAN big endian}.  Writing larger numeric values to smaller\n+ * numeric values are always done with truncation, that the least significant\n+ * bytes are kept and the other bytes are silently dropped.  As a result,\n+ * numeric value writing methods can write both signed and unsigned values, and\n+ * users should validate their values before writing if silent dropping of most\n+ * significant bytes is not the intended behavior.\n@@ -38,0 +48,1 @@\n+ * @see AttributeMapper#writeAttribute(BufWriter, Attribute)\n@@ -43,1 +54,5 @@\n-    \/** {@return the constant pool builder associated with this buffer} *\/\n+    \/**\n+     * {@return the constant pool builder associated with this buffer}\n+     *\n+     * @see ClassFileBuilder#constantPool()\n+     *\/\n@@ -47,3 +62,4 @@\n-     * {@return whether the provided constant pool is index-compatible with this\n-     * one}  This may be because they are the same constant pool, or because this\n-     * constant pool was copied from the other.\n+     * {@return whether the provided constant pool is index-compatible with the\n+     * constant pool of this buffer}\n+     * <p>\n+     * This is a shortcut for {@code constantPool().canWriteDirect(other)}.\n@@ -52,0 +68,1 @@\n+     * @see ConstantPoolBuilder#canWriteDirect(ConstantPool)\n@@ -56,1 +73,11 @@\n-     * Ensure that the buffer has at least {@code freeBytes} bytes of unused space\n+     * Ensures that the buffer has at least {@code freeBytes} bytes of free space\n+     * in the end of the buffer.\n+     * <p>\n+     * The writing result is the same without calls to this method, but the\n+     * writing process may be slower.\n+     *\n+     * @apiNote\n+     * This is a hint that has changes no visible state of the buffer; it helps\n+     * to reduce reallocation of the underlying storage by allocating sufficient\n+     * space at once.\n+     *\n@@ -62,1 +89,2 @@\n-     * Write an unsigned byte to the buffer\n+     * Writes a byte to the buffer.  {@code x} is truncated to a byte and\n+     * written.\n@@ -64,1 +92,1 @@\n-     * @param x the byte value\n+     * @param x the value to truncate to a byte\n@@ -69,1 +97,2 @@\n-     * Write an unsigned short to the buffer\n+     * Writes 2 bytes, or a short, to the buffer.  {@code x} is truncated to two\n+     * bytes and written.\n@@ -71,1 +100,1 @@\n-     * @param x the short value\n+     * @param x the value to truncate to a short\n@@ -76,1 +105,1 @@\n-     * Write a signed int to the buffer\n+     * Writes 4 bytes, or an int, to the buffer.\n@@ -83,1 +112,4 @@\n-     * Write a float value to the buffer\n+     * Writes a float value, of 4 bytes, to the buffer.\n+     * <p>\n+     * In the conversions, all NaN values of the {@code float} may be collapsed\n+     * into a single {@linkplain Float#NaN \"canonical\" NaN value}.\n@@ -90,1 +122,1 @@\n-     * Write a long value to the buffer\n+     * Writes 8 bytes, or a long, to the buffer.\n@@ -97,1 +129,4 @@\n-     * Write a double value to the buffer\n+     * Writes a double value, of 8 bytes, to the buffer.\n+     * <p>\n+     * In the conversions, all NaN values of the {@code double} may be collapsed\n+     * into a single {@linkplain Double#NaN \"canonical\" NaN value}.\n@@ -99,1 +134,1 @@\n-     * @param x the int value\n+     * @param x the double value\n@@ -104,1 +139,1 @@\n-     * Write the contents of a byte array to the buffer\n+     * Writes the contents of a byte array to the buffer.\n@@ -111,1 +146,1 @@\n-     * Write a range of a byte array to the buffer\n+     * Writes a range of a byte array to the buffer.\n@@ -114,1 +149,1 @@\n-     * @param start the offset within the byte array of the range\n+     * @param start the start offset of the range within the byte array\n@@ -116,1 +151,1 @@\n-     * @throws IndexOutOfBoundsException if range is outside of the array bounds\n+     * @throws IndexOutOfBoundsException if range is outside the array bounds\n@@ -121,2 +156,7 @@\n-     * Patch a previously written integer value.  Depending on the specified\n-     * size, the entire value, or the low 1 or 2 bytes, may be written.\n+     * Patches a previously written integer value.  {@code value} is truncated\n+     * to the given {@code size} number of bytes and written at the given {@code\n+     * offset}.  The end of this buffer stays unchanged.\n+     *\n+     * @apiNote\n+     * The {@code offset} can be obtained by calling {@link #size()} before\n+     * writing the previous integer value.\n@@ -124,1 +164,1 @@\n-     * @param offset the offset at which to patch\n+     * @param offset the offset in this buffer at which to patch\n@@ -126,1 +166,1 @@\n-     * @param value the integer value\n+     * @param value the integer value to be truncated\n@@ -128,0 +168,1 @@\n+     * @see #size()\n@@ -132,3 +173,2 @@\n-     * Write a 1, 2, 4, or 8 byte integer value to the buffer.  Depending on\n-     * the specified size, the entire value, or the low 1, 2, or 4 bytes, may\n-     * be written.\n+     * Writes a multibyte value to the buffer.  {@code intValue} is truncated\n+     * to the given {@code intSize} number of bytes and written.\n@@ -137,1 +177,1 @@\n-     * @param intValue the integer value\n+     * @param intValue the value to be truncated\n@@ -142,2 +182,5 @@\n-     * Write the index of the specified constant pool entry, as a {@code u2},\n-     * to the buffer\n+     * Writes the index of the specified constant pool entry as a {@link\n+     * #writeU2 u2}.  If the {@code entry} does not belong to the {@linkplain\n+     * #constantPool() constant pool} of this buffer, it will be {@linkplain\n+     * ConstantPoolBuilder##alien converted}, and the index of the converted\n+     * pool entry is written instead.\n@@ -151,2 +194,6 @@\n-     * Write the index of the specified constant pool entry, as a {@code u2},\n-     * to the buffer, or zero if the entry is null\n+     * Writes the index of the specified constant pool entry, or the value\n+     * {@code 0} if the specified entry is {@code null}, as a {@link #writeU2\n+     * u2}.  If the {@code entry} does not belong to the {@linkplain\n+     * #constantPool() constant pool} of this buffer, it will be {@linkplain\n+     * ConstantPoolBuilder##alien converted}, and the index of the converted\n+     * pool entry is written instead.\n@@ -154,2 +201,3 @@\n-     * @param entry the constant pool entry\n-     * @throws IllegalArgumentException if the entry has invalid index\n+     * @param entry the constant pool entry, may be {@code null}\n+     * @throws IllegalArgumentException if the entry is not {@code null} and has\n+     *         invalid index\n@@ -161,0 +209,2 @@\n+     *\n+     * @see #patchInt(int, int, int)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BufWriter.java","additions":86,"deletions":36,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,5 +38,13 @@\n- * Supports reading from a classfile.  Methods are provided to read data of\n- * various numeric types (e.g., {@code u2}, {@code u4}) at a given offset within\n- * the classfile, copying raw bytes, and reading constant pool entries.\n- * Encapsulates additional reading context such as mappers for custom attributes\n- * and processing options.\n+ * Advanced {@code class} file reading support for {@link AttributeMapper}s.\n+ * Supports reading arbitrary offsets within a {@code class} file and reading\n+ * data of various numeric types (e.g., {@code u2}, {@code u4}) in addition to\n+ * constant pool access.\n+ * <p>\n+ * All numeric values in the {@code class} file format are {@linkplain\n+ * java.nio.ByteOrder#BIG_ENDIAN big endian}.\n+ * <p>\n+ * Unless otherwise specified, all out-of-bounds access result in an {@link\n+ * IllegalArgumentException} to indicate the {@code class} file data is\n+ * malformed.  Since the {@code class} file data is arbitrary, users should\n+ * sanity-check the structural integrity of the data before attempting to\n+ * interpret the potentially malformed data.\n@@ -44,0 +52,1 @@\n+ * @see AttributeMapper#readAttribute(AttributedElement, ClassReader, int)\n@@ -59,1 +68,5 @@\n-    \/** {@return the access flags for the class, as a bit mask } *\/\n+    \/**\n+     * {@return the access flags for the class, as a bit mask}\n+     *\n+     * @see ClassModel#flags()\n+     *\/\n@@ -62,1 +75,5 @@\n-    \/** {@return the constant pool entry describing the name of class} *\/\n+    \/**\n+     * {@return the constant pool entry describing the name of class}\n+     *\n+     * @see ClassModel#thisClass()\n+     *\/\n@@ -65,1 +82,5 @@\n-    \/** {@return the constant pool entry describing the name of the superclass, if any} *\/\n+    \/**\n+     * {@return the constant pool entry describing the name of the superclass, if any}\n+     *\n+     * @see ClassModel#superclass()\n+     *\/\n@@ -68,1 +89,1 @@\n-    \/** {@return the length of the classfile, in bytes} *\/\n+    \/** {@return the length of the {@code class} file, in number of bytes} *\/\n@@ -75,1 +96,1 @@\n-     * offset within the classfile}\n+     * offset within the {@code class} file}\n@@ -81,1 +102,1 @@\n-     * @param offset the offset of the index within the classfile\n+     * @param offset the offset of the index within the {@code class} file\n@@ -89,1 +110,1 @@\n-     * at the specified offset within the classfile}\n+     * at the specified offset within the {@code class} file}\n@@ -91,1 +112,1 @@\n-     * @param offset the offset of the index within the classfile\n+     * @param offset the offset of the index within the {@code class} file\n@@ -100,2 +121,2 @@\n-     * offset within the classfile, or null if the index at the specified\n-     * offset is zero}\n+     * offset within the {@code class} file, or {@code null} if the index at the\n+     * specified offset is zero}\n@@ -107,1 +128,1 @@\n-     * @param offset the offset of the index within the classfile\n+     * @param offset the offset of the index within the {@code class} file\n@@ -115,2 +136,2 @@\n-     * at the specified offset within the classfile, or null if the index at\n-     * the specified offset is zero}\n+     * at the specified offset within the {@code class} file, or {@code null} if\n+     * the index at the specified offset is zero}\n@@ -119,1 +140,1 @@\n-     * @param offset the offset of the index within the classfile\n+     * @param offset the offset of the index within the {@code class} file\n@@ -127,2 +148,4 @@\n-     * {@return the unsigned byte at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the unsigned byte at the specified offset within the {@code\n+     * class} file}  Reads a byte and zero-extends it to an {@code int}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -133,2 +156,4 @@\n-     * {@return the unsigned short at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the unsigned short at the specified offset within the {@code\n+     * class} file}  Reads a 2-byte value and zero-extends it to an {@code int}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -139,2 +164,4 @@\n-     * {@return the signed byte at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the signed byte at the specified offset within the {@code class}\n+     * file}  Reads a byte and sign-extends it to an {@code int}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -145,2 +172,4 @@\n-     * {@return the signed byte at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the signed byte at the specified offset within the {@code class}\n+     * file}  Reads a 2-byte value and sign-extends it to an {@code int}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -151,2 +180,4 @@\n-     * {@return the signed int at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the signed int at the specified offset within the {@code class}\n+     * file}  Reads 4 bytes of value.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -157,2 +188,4 @@\n-     * {@return the signed long at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the signed long at the specified offset within the {@code class}\n+     * file}  Reads 8 bytes of value.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -163,2 +196,7 @@\n-     * {@return the float value at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the float value at the specified offset within the {@code class}\n+     * file}  Reads 4 bytes of value.\n+     * <p>\n+     * In the conversions, all NaN values of the {@code float} may be collapsed\n+     * into a single {@linkplain Float#NaN \"canonical\" NaN value}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -169,2 +207,7 @@\n-     * {@return the double value at the specified offset within the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return the double value at the specified offset within the {@code\n+     * class} file}  Reads 8 bytes of value.\n+     * <p>\n+     * In the conversions, all NaN values of the {@code double} may be collapsed\n+     * into a single {@linkplain Double#NaN \"canonical\" NaN value}.\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -175,2 +218,4 @@\n-     * {@return a copy of the bytes at the specified range in the classfile}\n-     * @param offset the offset within the classfile\n+     * {@return a copy of the bytes at the specified range in the {@code class}\n+     * file}\n+     *\n+     * @param offset the offset within the {@code class} file\n@@ -182,1 +227,1 @@\n-     * Copy a range of bytes from the classfile to a {@link BufWriter}\n+     * Copy a range of bytes from the {@code class} file to a {@link BufWriter}.\n@@ -185,1 +230,1 @@\n-     * @param offset the offset within the classfile\n+     * @param offset the offset within the {@code class} file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassReader.java","additions":85,"deletions":40,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.attribute.SignatureAttribute;\n@@ -34,1 +35,2 @@\n- * Models the generic signature of a class file, as defined by JVMS {@jvms 4.7.9}.\n+ * Models the generic signature of a class or interface, as defined by JVMS\n+ * {@jvms 4.7.9.1}.\n@@ -36,0 +38,5 @@\n+ * @see Class\n+ * @see SignatureAttribute\n+ * @jls 8.1 Class Declarations\n+ * @jls 9.1 Interface Declarations\n+ * @jvms 4.7.9.1 Signatures\n@@ -41,1 +48,7 @@\n-    \/** {@return the type parameters of this class} *\/\n+    \/**\n+     * {@return the type parameters of this class or interface, may be empty}\n+     *\n+     * @see Class#getTypeParameters()\n+     * @jls 8.1.2 Generic Classes and Type Parameters\n+     * @jls 9.1.2 Generic Interfaces and Type Parameters\n+     *\/\n@@ -44,1 +57,7 @@\n-    \/** {@return the instantiation of the superclass in this signature} *\/\n+    \/**\n+     * {@return the instantiation of the superclass in this signature}\n+     * Interfaces return a signature representing the {@link Object} class.\n+     *\n+     * @see Class#getGenericSuperclass()\n+     * @jls 8.1.4 Superclasses and Subclasses\n+     *\/\n@@ -47,1 +66,8 @@\n-    \/** {@return the instantiation of the interfaces in this signature} *\/\n+    \/**\n+     * {@return the instantiation of the interfaces in this signature, may be\n+     * empty}\n+     *\n+     * @see Class#getGenericInterfaces()\n+     * @jls 8.1.5 Superinterfaces\n+     * @jls 9.1.3 Superinterfaces and Subinterfaces\n+     *\/\n@@ -54,1 +80,2 @@\n-     * {@return a class signature}\n+     * {@return a class signature with no type parameter declaration}\n+     *\n@@ -65,1 +92,1 @@\n-     * @param typeParameters the type parameters\n+     * @param typeParameters the type parameters, may be empty\n@@ -79,1 +106,2 @@\n-     * Parses a raw class signature string into a {@linkplain Signature}\n+     * Parses a raw class signature string into a {@linkplain Signature}.\n+     *\n@@ -82,0 +110,1 @@\n+     * @throws IllegalArgumentException if the string is not a valid class signature string\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassSignature.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -28,0 +29,1 @@\n+\n@@ -31,5 +33,13 @@\n- * Models a non-standard attribute of a classfile.  Clients should extend\n- * this class to provide an implementation class for non-standard attributes,\n- * and provide an {@link AttributeMapper} to mediate between the classfile\n- * format and the {@linkplain CustomAttribute} representation.\n- * @param <T> the custom attribute type\n+ * Models a user-defined attribute in a {@code class} file.  API models for\n+ * user-defined attributes should extend this class.  A user-defined attribute\n+ * should also have an {@link AttributeMapper} defined, which will be returned\n+ * by {@link #attributeMapper}, and registered to the {@link\n+ * ClassFile.AttributeMapperOption} so the user-defined attributes can be read.\n+ * <p>\n+ * User-defined attributes are currently not delivered in the traversal of a\n+ * {@link CodeModel}.\n+ * <p>\n+ * Accessor methods on user-defined attributes read from {@code class} files\n+ * may throw {@link IllegalArgumentException} if the attribute model is lazily\n+ * evaluated, and the evaluation encounters malformed {@code class} file format\n+ * for the attribute.\n@@ -37,0 +47,2 @@\n+ * @param <T> the custom attribute type\n+ * @see java.lang.classfile.attribute\n@@ -45,1 +57,2 @@\n-     * Construct a {@linkplain CustomAttribute}.\n+     * Constructor for subclasses to call.\n+     *\n@@ -57,0 +70,11 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec\n+     * The default implementation returns a {@code Utf8Entry} suitable for\n+     * writing only, which may be {@linkplain PoolEntry##unbound unbound}.\n+     * Subclasses representing attributes read from {@code class} files must\n+     * override this method.\n+     *\n+     * @see AttributeMapper#readAttribute\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":31,"deletions":7,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.attribute.SignatureAttribute;\n@@ -28,0 +29,2 @@\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n@@ -36,1 +39,2 @@\n- * Models the generic signature of a method, as defined by JVMS {@jvms 4.7.9}.\n+ * Models the generic signature of a method or constructor, as defined by JVMS\n+ * {@jvms 4.7.9.1}.\n@@ -38,0 +42,5 @@\n+ * @see Executable\n+ * @see SignatureAttribute\n+ * @jls 8.4 Method Declarations\n+ * @jls 8.8 Constructor Declarations\n+ * @jvms 4.7.9.1 Signatures\n@@ -43,1 +52,7 @@\n-    \/** {@return the type parameters of this method} *\/\n+    \/**\n+     * {@return the type parameters of this method or constructor, may be empty}\n+     *\n+     * @see Executable#getTypeParameters()\n+     * @jls 8.4.4 Generic Methods\n+     * @jls 8.8.4 Generic Constructors\n+     *\/\n@@ -46,1 +61,9 @@\n-    \/** {@return the signatures of the parameters of this method} *\/\n+    \/**\n+     * {@return the signatures of the parameters of this method or constructor,\n+     * may be empty}  The parameters may differ from those in the method\n+     * descriptor because some synthetic or implicit parameters are omitted.\n+     *\n+     * @see Executable#getGenericParameterTypes()\n+     * @jls 8.4.1 Formal Parameters\n+     * @jls 8.8.1 Formal Parameters\n+     *\/\n@@ -49,1 +72,7 @@\n-    \/** {@return the signatures of the return value of this method} *\/\n+    \/**\n+     * {@return the signatures of the return value of this method}  For\n+     * constructors, this returns a signature representing {@code void}.\n+     *\n+     * @see Method#getGenericReturnType()\n+     * @jls 8.4.5 Method Result\n+     *\/\n@@ -52,1 +81,8 @@\n-    \/** {@return the signatures of the exceptions thrown by this method} *\/\n+    \/**\n+     * {@return the signatures of the exceptions thrown by this method or\n+     * constructor}\n+     *\n+     * @see Executable#getGenericExceptionTypes()\n+     * @jls 8.4.6 Method Throws\n+     * @jls 8.8.5 Constructor Throws\n+     *\/\n@@ -59,1 +95,3 @@\n-     * {@return a method signature for a raw (no generic information) method descriptor}\n+     * {@return a method signature for a raw method descriptor}  The resulting\n+     * signature has no type parameter or exception type declared.\n+     *\n@@ -63,1 +101,0 @@\n-\n@@ -73,1 +110,4 @@\n-     * {@return a method signature}\n+     * {@return a method signature with no type parameter or exception type}\n+     * The parameters may differ from those in the method descriptor because\n+     * some synthetic or implicit parameters are omitted.\n+     *\n@@ -75,1 +115,1 @@\n-     * @param arguments signatures for the method arguments\n+     * @param arguments signatures for the method parameters\n@@ -79,1 +119,0 @@\n-\n@@ -87,1 +126,4 @@\n-     * {@return a method signature}\n+     * {@return a method signature}  The parameters may differ from those in\n+     * the method descriptor because some synthetic or implicit parameters are\n+     * omitted.\n+     *\n@@ -91,1 +133,1 @@\n-     * @param arguments signatures for the method arguments\n+     * @param arguments signatures for the method parameters\n@@ -97,1 +139,0 @@\n-\n@@ -106,1 +147,2 @@\n-     * Parses a raw method signature string into a {@linkplain MethodSignature}\n+     * Parses a raw method signature string into a {@code MethodSignature}.\n+     *\n@@ -108,1 +150,3 @@\n-     * @return method signature\n+     * @return the parsed method signature\n+     * @throws IllegalArgumentException if the string is not a valid method\n+     *         signature string\n@@ -111,1 +155,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodSignature.java","additions":60,"deletions":17,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -28,0 +30,6 @@\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.GenericDeclaration;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+import java.lang.reflect.WildcardType;\n@@ -39,0 +47,4 @@\n+ * @see Type\n+ * @see SignatureAttribute\n+ * @jls 4.1 The Kinds of Types and Values\n+ * @jvms 4.7.9.1 Signatures\n@@ -48,1 +60,2 @@\n-     * Parses generic Java type signature from raw string\n+     * Parses generic Java type signature from raw string.\n+     *\n@@ -50,1 +63,3 @@\n-     * @return Java type signature\n+     * @return a Java type signature\n+     * @throws IllegalArgumentException if the string is not a valid Java type\n+     *         signature string\n@@ -57,1 +72,3 @@\n-     * {@return a Java type signature}\n+     * {@return a Java type signature from a field descriptor}  The returned\n+     * signature represents a reifiable type (JLS {@jls 4.7}).\n+     *\n@@ -70,1 +87,1 @@\n-     * Models the signature of a primitive type or void\n+     * Models the signature of a primitive type (JLS {@jls 4.2}) or void.\n@@ -72,0 +89,2 @@\n+     * @jls 4.2 Primitive Types and Values\n+     * @jvms 4.7.9.1 Signatures\n@@ -84,0 +103,2 @@\n+         * @throws IllegalArgumentException if the {@code classDesc} is not\n+         *         primitive\n@@ -95,0 +116,2 @@\n+         * @throws IllegalArgumentException if the {@code baseType} is not a\n+         *         valid descriptor character for a primitive type or void\n@@ -107,0 +130,2 @@\n+     * @jls 4.3 Reference Types and Values\n+     * @jvms 4.7.9.1 Signatures\n@@ -118,0 +143,3 @@\n+     * @see Type\n+     * @see ParameterizedType\n+     * @jvms 4.7.9.1 Signatures\n@@ -124,1 +152,7 @@\n-        \/** {@return the signature of the outer type, if any} *\/\n+        \/**\n+         * {@return the signature of the class that this class is a member of,\n+         * only if this is a member class}  Note that the outer class may be\n+         * absent if it is not a parameterized type.\n+         *\n+         * @jls 4.5 Parameterized Types\n+         *\/\n@@ -127,1 +161,5 @@\n-        \/** {@return the class name} *\/\n+        \/**\n+         * {@return the class or interface name; includes the {@linkplain\n+         * ClassEntry##internalname slash-separated} package name if there is no\n+         * outer type}\n+         *\/\n@@ -130,1 +168,3 @@\n-        \/** {@return the class name, as a symbolic descriptor} *\/\n+        \/**\n+         * {@return this class or interface, as a symbolic descriptor}\n+         *\/\n@@ -137,1 +177,6 @@\n-        \/** {@return the type arguments of the class} *\/\n+        \/**\n+         * {@return the type arguments of this class or interface}\n+         * Note that the outer type may have more type arguments.\n+         *\n+         * @jls 4.5 Parameterized Types\n+         *\/\n@@ -141,3 +186,6 @@\n-         * {@return a class type signature}\n-         * @param className the name of the class\n-         * @param typeArgs signatures of the type arguments\n+         * {@return a class or interface signature without an outer type}\n+         *\n+         * @param className the name of the class or interface\n+         * @param typeArgs the type arguments\n+         * @throws IllegalArgumentException if {@code className} does not\n+         *         represent a class or interface\n@@ -150,4 +198,7 @@\n-         * {@return a class type signature for an inner class}\n-         * @param outerType signature of the outer type\n-         * @param className the name of the class\n-         * @param typeArgs signatures of the type arguments\n+         * {@return a class or interface signature}\n+         *\n+         * @param outerType signature of the outer type, may be {@code null}\n+         * @param className the name of this class or interface\n+         * @param typeArgs the type arguments\n+         * @throws IllegalArgumentException if {@code className} does not\n+         *         represent a class or interface\n@@ -161,3 +212,4 @@\n-         * {@return a class type signature}\n-         * @param className the name of the class\n-         * @param typeArgs signatures of the type arguments\n+         * {@return a class or interface signature without an outer type}\n+         *\n+         * @param className the name of the class or interface\n+         * @param typeArgs the type arguments\n@@ -170,4 +222,5 @@\n-         * {@return a class type signature for an inner class}\n-         * @param outerType signature of the outer type\n-         * @param className the name of the class\n-         * @param typeArgs signatures of the type arguments\n+         * {@return a class type signature}\n+         *\n+         * @param outerType signature of the outer type, may be {@code null}\n+         * @param className the name of this class or interface\n+         * @param typeArgs the type arguments\n@@ -182,1 +235,1 @@\n-     * Models the type argument.\n+     * Models a type argument, an argument to a type parameter.\n@@ -184,0 +237,4 @@\n+     * @see Type\n+     * @see WildcardType\n+     * @jls 4.5.1 Type Arguments of Parameterized Types\n+     * @jvms 4.7.9.1 Signatures\n@@ -190,1 +247,7 @@\n-         * Models an unbounded type argument {@code *}.\n+         * Models an unbounded wildcard type argument {@code *}, or {@code\n+         * ?} in Java programs.  This type argument has an implicit upper\n+         * bound of {@link Object}.\n+         *\n+         * @see WildcardType#getUpperBounds()\n+         * @jls 4.5.1 Type Arguments of Parameterized Types\n+         * @jvms 4.7.9.1 Signatures\n@@ -198,0 +261,3 @@\n+         *\n+         * @jls 4.5.1 Type Arguments of Parameterized Types\n+         * @jvms 4.7.9.1 Signatures\n@@ -204,0 +270,3 @@\n+             *\n+             * @jls 4.5.1 Type Arguments of Parameterized Types\n+             * @jvms 4.7.9.1 Signatures\n@@ -209,2 +278,5 @@\n-                 * No wildcard (empty), an exact type. Also known as\n-                 * {@index invariant}.\n+                 * No wildcard (empty), an exact type.  Also known as\n+                 * {@index invariant}.  This is the direct use of a\n+                 * reference type in Java programs.\n+                 *\n+                 * @see Type\n@@ -215,2 +287,5 @@\n-                 * Upper-bound indicator {@code +}. Also known as\n-                 * {@index covariant}.\n+                 * Upper-bound indicator {@code +}.  Also known as\n+                 * {@index covariant}.  This is the {@code ? extends}\n+                 * prefix in Java programs.\n+                 *\n+                 * @see WildcardType#getUpperBounds()\n@@ -221,2 +296,5 @@\n-                 * Lower-bound indicator {@code -}. Also known as\n-                 * {@index contravariant}.\n+                 * Lower-bound indicator {@code -}.  Also known as\n+                 * {@index contravariant}.  This is the {@code ? super}\n+                 * prefix in Java programs.\n+                 *\n+                 * @see WildcardType#getLowerBounds()\n@@ -235,2 +313,4 @@\n-         * {@return a bounded type arg}\n-         * @param boundType the bound\n+         * {@return a type argument of a reference type}\n+         *\n+         * @param boundType the reference type\n+         * @see Bounded.WildcardIndicator#NONE\n@@ -244,1 +324,1 @@\n-         * {@return an unbounded type arg}\n+         * {@return an unbounded wildcard type argument {@code *}}\n@@ -251,1 +331,2 @@\n-         * {@return an upper-bounded type arg}\n+         * {@return an upper-bounded wildcard type argument}\n+         *\n@@ -253,0 +334,1 @@\n+         * @see Bounded.WildcardIndicator#EXTENDS\n@@ -260,1 +342,2 @@\n-         * {@return a lower-bounded type arg}\n+         * {@return a lower-bounded wildcard type argument}\n+         *\n@@ -262,0 +345,1 @@\n+         * @see Bounded.WildcardIndicator#SUPER\n@@ -269,3 +353,4 @@\n-         * {@return a bounded type arg}\n-         * @param wildcard the wild card\n-         * @param boundType optional bound type\n+         * {@return a bounded type argument}\n+         *\n+         * @param wildcard the wildcard indicator\n+         * @param boundType the bound type\n@@ -281,1 +366,2 @@\n-     * Models the signature of a type variable.\n+     * Models the signature of a type variable.  A type variable is introduced\n+     * by a {@linkplain TypeParam type parameter} declaration.\n@@ -283,0 +369,4 @@\n+     * @see TypeVariable\n+     * @see TypeParam\n+     * @jls 4.4 Type Variables\n+     * @jvms 4.7.9.1 Signatures\n@@ -294,0 +384,1 @@\n+         *\n@@ -304,0 +395,4 @@\n+     * @see Type\n+     * @see GenericArrayType\n+     * @jls 10.1 Array Types\n+     * @jvms 4.7.9.1 Signatures\n@@ -314,1 +409,1 @@\n-         * {@return a signature for an array type}\n+         * {@return an array type with the given component type}\n@@ -325,0 +420,2 @@\n+         * @throws IllegalArgumentException if the resulting array type exceeds\n+         *         255 dimensions\n@@ -337,1 +434,3 @@\n-     * Models a signature for a type parameter of a generic class or method.\n+     * Models a signature for a type parameter of a generic class, interface,\n+     * method, or constructor, which introduces a {@linkplain TypeVarSig type\n+     * variable}.\n@@ -339,0 +438,5 @@\n+     * @see GenericDeclaration#getTypeParameters()\n+     * @see TypeVariable\n+     * @see TypeVarSig\n+     * @jls 4.4 Type Variables\n+     * @jvms 4.7.9.1 Signatures\n@@ -347,1 +451,4 @@\n-        \/** {@return the class bound of the type parameter} *\/\n+        \/**\n+         * {@return the class bound of the type parameter}  This may be empty\n+         * if this type parameter only has interface bounds.\n+         *\/\n@@ -350,1 +457,4 @@\n-        \/** {@return the interface bounds of the type parameter} *\/\n+        \/**\n+         * {@return the interface bounds of the type parameter}  This may be\n+         * empty.\n+         *\/\n@@ -355,0 +465,1 @@\n+         *\n@@ -356,1 +467,1 @@\n-         * @param classBound the class bound of the type parameter\n+         * @param classBound the class bound of the type parameter, may be {@code null}\n@@ -368,0 +479,1 @@\n+         *\n@@ -369,1 +481,1 @@\n-         * @param classBound the class bound of the type parameter\n+         * @param classBound the optional class bound of the type parameter\n@@ -381,1 +493,1 @@\n-     * Models a signature for a throwable type.\n+     * Marker interface for a signature for a throwable type.\n@@ -383,0 +495,2 @@\n+     * @jls 8.4.6 Method Throws\n+     * @jvms 4.7.9.1 Signatures\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Signature.java","additions":161,"deletions":47,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+     * @see TargetInfo#targetType()\n@@ -192,0 +193,1 @@\n+     * @see #targetInfo()\n@@ -443,2 +445,5 @@\n-         * {@return a target for annotations on the type in a formal parameter declaration of a method,\n-         * constructor, or lambda expression}\n+         * {@return a target for annotations on the type in a formal parameter\n+         * declaration of a method, constructor, or lambda expression}  The\n+         * index may differ from the index in the method descriptor because some\n+         * synthetic or implicit parameters are omitted.\n+         *\n@@ -501,1 +506,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -509,1 +514,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -517,1 +522,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -525,1 +530,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -533,1 +538,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -548,1 +553,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -557,1 +562,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -567,1 +572,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -577,1 +582,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -587,1 +592,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -597,1 +602,1 @@\n-         * @param target the code label corresponding to the instruction\n+         * @param target the label right before the instruction\n@@ -610,0 +615,3 @@\n+     * @see #ofTypeParameter(TargetType, int)\n+     * @see #ofClassTypeParameter(int)\n+     * @see #ofMethodTypeParameter(int)\n@@ -628,0 +636,1 @@\n+     * @see #ofClassExtends(int)\n@@ -651,0 +660,3 @@\n+     * @see #ofTypeParameterBound(TargetType, int, int)\n+     * @see #ofClassTypeParameterBound(int, int)\n+     * @see #ofMethodTypeParameterBound(int, int)\n@@ -676,0 +688,4 @@\n+     * @see #of(TargetType)\n+     * @see #ofField()\n+     * @see #ofMethodReturn()\n+     * @see #ofMethodReceiver()\n@@ -686,0 +702,1 @@\n+     * @see #ofMethodFormalParameter(int)\n@@ -692,4 +709,4 @@\n-         * Which formal parameter declaration has an annotated type.\n-         *\n-         * @return the index into the formal parameter declarations, in the order\n-         * declared in the source code\n+         * {@return the index into the formal parameter declarations, in the\n+         * order declared in the source code}  The index may differ from the\n+         * index in the method descriptor because some synthetic or implicit\n+         * parameters are omitted.\n@@ -704,0 +721,1 @@\n+     * @see #ofThrows(int)\n@@ -723,0 +741,1 @@\n+     * @see #ofLocalVariable(List)\n@@ -729,1 +748,1 @@\n-         * {@return the table of local variable location\/indices.}\n+         * {@return the table of local variable location\/indices}\n@@ -739,0 +758,1 @@\n+     * @see LocalVarTarget\n@@ -785,0 +805,1 @@\n+     * @see #ofExceptionParameter(int)\n@@ -803,0 +824,5 @@\n+     * @see #ofOffset(TargetType, Label)\n+     * @see #ofNewExpr(Label)\n+     * @see #ofInstanceofExpr(Label)\n+     * @see #ofConstructorReference(Label)\n+     * @see #ofMethodReference(Label)\n@@ -809,3 +835,3 @@\n-         * The code array offset of either the bytecode instruction\n-         * corresponding to the instanceof expression, the new bytecode instruction corresponding to the new\n-         * expression, or the bytecode instruction corresponding to the method reference expression.\n+         * The label right before the {@link Instruction} corresponding to the\n+         * instanceof expression, the new expression, or the method reference\n+         * expression.\n@@ -813,1 +839,1 @@\n-         * @return the code label corresponding to the instruction\n+         * @return the label right before the instruction\n@@ -824,0 +850,6 @@\n+     * @see #ofTypeArgument(TargetType, Label, int)\n+     * @see #ofCastExpr(Label, int)\n+     * @see #ofConstructorInvocationTypeArgument(Label, int)\n+     * @see #ofConstructorReferenceTypeArgument(Label, int)\n+     * @see #ofMethodInvocationTypeArgument(Label, int)\n+     * @see #ofMethodReferenceTypeArgument(Label, int)\n@@ -830,5 +862,4 @@\n-         * The code array offset of either the bytecode instruction\n-         * corresponding to the cast expression, the new bytecode instruction corresponding to the new expression, the\n-         * bytecode instruction corresponding to the explicit constructor invocation statement, the bytecode\n-         * instruction corresponding to the method invocation expression, or the bytecode instruction corresponding to\n-         * the method reference expression.\n+         * The label right before the {@link Instruction} corresponding to the\n+         * cast expression, the new expression, the explicit constructor\n+         * invocation statement, the method invocation expression, or the method\n+         * reference expression.\n@@ -836,1 +867,1 @@\n-         * @return the code label corresponding to the instruction\n+         * @return the label right before the instruction\n@@ -859,0 +890,1 @@\n+     * @see #targetPath()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeAnnotation.java","additions":61,"deletions":29,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -31,1 +35,1 @@\n-import java.lang.classfile.MethodModel;\n+import java.lang.reflect.Method;\n@@ -37,4 +41,3 @@\n- * Models the {@code AnnotationDefault} attribute (JVMS {@jvms 4.7.22}), which can\n- * appear on methods of annotation types, and records the default value\n- * {@jls 9.6.2} for the element corresponding to this method.  Delivered as a\n- * {@link MethodElement} when traversing the elements of a {@link MethodModel}.\n+ * Models the {@link Attributes#annotationDefault() AnnotationDefault} attribute\n+ * (JVMS {@jvms 4.7.22}), which records the default value (JLS {@jls 9.6.2}) for\n+ * the annotation interface element defined by this method.\n@@ -42,3 +45,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -46,1 +49,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * This attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -48,0 +52,3 @@\n+ * @see Attributes#annotationDefault()\n+ * @jls 9.6.2 Defaults for Annotation Interface Elements\n+ * @jvms 4.7.22 The {@code AnnotationDefault} Attribute\n@@ -56,2 +63,4 @@\n-     * {@return the default value of the annotation type element represented by\n-     * this method}\n+     * {@return the default value of the annotation interface element defined by\n+     * the enclosing method}\n+     *\n+     * @see Method#getDefaultValue()\n@@ -63,1 +72,1 @@\n-     * @param annotationDefault the default value of the annotation type element\n+     * @param annotationDefault the default value of the annotation interface element\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/AnnotationDefaultAttribute.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n@@ -31,0 +36,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -37,3 +43,6 @@\n- * Models the {@code BootstrapMethods} attribute (JVMS {@jvms 4.7.23}), which serves as\n- * an extension to the constant pool of a classfile.  Elements of the bootstrap\n- * method table are accessed through {@link ConstantPool}.\n+ * Models the {@link Attributes#bootstrapMethods() BootstrapMethods} attribute\n+ * (JVMS {@jvms 4.7.23}), which stores symbolic information for the execution of\n+ * bootstrap methods, used by dynamically-computed call sites and constants.\n+ * It is logically a part of the constant pool of a {@code class} file and thus\n+ * not delivered in {@link ClassModel} traversal; its elements are accessible\n+ * through {@link ConstantPool}.\n@@ -41,3 +50,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -45,1 +54,6 @@\n- * The attribute was introduced in the Java SE Platform version 7.\n+ * This attribute cannot be constructed directly; its entries can be constructed\n+ * through {@link ConstantPoolBuilder#bsmEntry}, resulting in at most one\n+ * attribute instance in the built {@code class} file.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 7, major version\n+ * {@value ClassFile#JAVA_7_VERSION}.\n@@ -47,0 +61,3 @@\n+ * @see Attributes#bootstrapMethods()\n+ * @see java.lang.invoke##bsm Execution of bootstrap methods\n+ * @jvms 4.7.23 The {@code BootstrapMethods} Attribute\n@@ -60,2 +77,1 @@\n-     * {@return the size of the bootstrap methods table}.  Calling this method\n-     * does not necessarily inflate the entire table.\n+     * {@return the size of the bootstrap methods table}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/BootstrapMethodsAttribute.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.CodeBuilder;\n@@ -32,1 +33,9 @@\n- * Models a single character range in the {@link CharacterRangeTableAttribute}.\n+ * Models a single character range entry in the {@link\n+ * CharacterRangeTableAttribute}.\n+ * <p>\n+ * Each character range entry associates a range of indices in the code array\n+ * with a range of character positions in the source file.  A character position\n+ * in the source file is represented by a line number and a column number, and\n+ * its value is encoded as {@code lineNumber << 10 + columnNumber}.  Note that\n+ * column numbers are not the same as byte indices in a column as multibyte\n+ * characters may be present in the source file.\n@@ -34,0 +43,6 @@\n+ * Each character range entry includes a\n+ * flag which indicates what kind of range is described: statement, assignment,\n+ * method call, etc.\n+ *\n+ * @see CharacterRangeTableAttribute#characterRangeTable()\n+ * @see CharacterRange\n@@ -40,3 +55,3 @@\n-     * {@return the start of the character range region (inclusive)}  This is\n-     * the index into the code array at which the code for this character range\n-     * begins.\n+     * {@return the start of indices in the code array, inclusive}\n+     *\n+     * @see CharacterRange#startScope()\n@@ -47,3 +62,3 @@\n-     * {@return the end of the character range region (exclusive)}  This is the\n-     * index into the code array after which the code for this character range\n-     * ends.\n+     * {@return the end of indices in the code array, exclusive}\n+     *\n+     * @see CharacterRange#endScope()\n@@ -54,4 +69,2 @@\n-     * {@return the encoded start of the character range region (inclusive)}\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n+     * {@return the encoded start of character positions in the source file,\n+     * inclusive}\n@@ -62,4 +75,2 @@\n-     * {@return the encoded end of the character range region (exclusive)}.\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n+     * {@return the encoded end of character positions in the source file,\n+     * exclusive}\n@@ -70,0 +81,2 @@\n+     * {@return the flags of this character range entry}\n+     * <p>\n@@ -74,6 +87,5 @@\n-     * (except ExpressionStatement), StatementExpression {@jls 14.8}, as well as each\n-     * VariableDeclaratorId = VariableInitializer of\n-     * LocalVariableDeclarationStatement {@jls 14.4} or FieldDeclaration {@jls 8.3} in the\n-     * grammar.\n-     * <li>{@link CharacterRange#FLAG_BLOCK} Range is a Block in the\n-     * grammar.\n+     * (except ExpressionStatement), StatementExpression (JLS {@jls 14.8}), as\n+     * well as each {@code VariableDeclaratorId = VariableInitializer} of\n+     * LocalVariableDeclarationStatement (JLS {@jls 14.4}) or FieldDeclaration\n+     * (JLS {@jls 8.3}) in the grammar.\n+     * <li>{@link CharacterRange#FLAG_BLOCK} Range is a Block in the grammar.\n@@ -81,2 +93,3 @@\n-     * expression - Expression1 AssignmentOperator Expression1 in the grammar as\n-     * well as increment and decrement expressions (both prefix and postfix).\n+     * expression - {@code Expression1 AssignmentOperator Expression1} in the\n+     * grammar as well as increment and decrement expressions (both prefix and\n+     * postfix).\n@@ -84,1 +97,1 @@\n-     * whose value will effect control flow. {@code Flowcon} in the following:\n+     * whose value will affect control flow. {@code Flowcon} in the following:\n@@ -134,1 +147,3 @@\n-     * All bits of the flags item not assigned above are reserved for future use. They should be set to zero in generated class files and should be ignored by Java virtual machine implementations.\n+     * All bits of the flags item not assigned above are reserved for future use.\n+     * They should be set to zero in generated class files and should be ignored\n+     * by Java virtual machine implementations.\n@@ -136,1 +151,0 @@\n-     * @return the flags\n@@ -142,8 +156,13 @@\n-     * {@return a character range description}\n-     * @param startPc the start of the bytecode range, inclusive\n-     * @param endPc the end of the bytecode range, exclusive\n-     * @param characterRangeStart the start of the character range, inclusive,\n-     *                            encoded as {@code line_number << 10 + column_number}\n-     * @param characterRangeEnd the end of the character range, exclusive,\n-     *                          encoded as {@code line_number << 10 + column_number}\n-     * @param flags the range flags\n+     * {@return a character range entry}\n+     *\n+     * @apiNote\n+     * The created entry cannot be written to a {@link CodeBuilder}.  Use\n+     * {@link CodeBuilder#characterRange CodeBuilder::characterRange} instead.\n+     *\n+     * @param startPc the start of indices in the code array, inclusive\n+     * @param endPc the end of indices in the code array, exclusive\n+     * @param characterRangeStart the encoded start of character positions in\n+     *        the source file, inclusive\n+     * @param characterRangeEnd the encoded end of character positions in the\n+     *        source file, exclusive\n+     * @param flags the flags of this entry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CharacterRangeInfo.java","additions":54,"deletions":35,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,7 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.instruction.CharacterRange;\n@@ -35,22 +42,5 @@\n- * The CharacterRangeTable attribute is an optional variable-length attribute in\n- * the attributes table of a {@code Code} attribute. It may be used by debuggers\n- * to determine which part of the Java virtual machine code array corresponds to\n- * a given position in the source file or to determine what section of source\n- * code corresponds to a given index into the code array. The\n- * CharacterRangeTable attribute consists of an array of character range entries.\n- * Each character range entry within the table associates a range of indices in\n- * the code array with a range of character indices in the source file. If the\n- * source file is viewed as an array of characters, a character index is the\n- * corresponding index into this array. Note that character indices are not the\n- * same as byte indices as multi-byte characters may be present in the source\n- * file. Each character range entry includes a flag which indicates what kind of\n- * range is described: statement, assignment, method call, etc. Both code index\n- * ranges and character ranges may nest within other ranges, but they may not\n- * partially overlap. Thus, a given code index may correspond to several\n- * character range entries and in turn several character ranges, but there will\n- * be a smallest character range, and for each kind of range in which it is\n- * enclosed there will be a smallest character range. Similarly, a given\n- * character index may correspond to several character range entries and in turn\n- * several code index ranges, but there will be a smallest code index range, and\n- * for each kind of range in which it is enclosed there will be a smallest code\n- * index range. The character range entries may appear in any order.\n+ * Models the {@link Attributes#characterRangeTable() CharacterRangeTable}\n+ * attribute, which is a bidirectional mapping from ranges of positions in the\n+ * source file to ranges of indices into the {@code code} array.  Its entries\n+ * are delivered as {@link CharacterRange}s when traversing the elements of a\n+ * {@link CodeModel}, toggled by {@link ClassFile.DebugElementsOption}.\n@@ -58,1 +48,19 @@\n- * The attribute permits multiple instances in a given location.\n+ * The {@code CharacterRangeTable} attribute consists of an array of {@linkplain\n+ * CharacterRangeInfo character range entries}.  The character range entries\n+ * form a forest data structure: any two range entries are either disjoint, or\n+ * if they overlap, then one entry must be enclosed within the other, both in\n+ * {@code code} array indices and source file character positions.  The\n+ * character range entries may appear in any order.\n+ * <p>\n+ * This attribute only appears on {@code Code} attributes, permits multiple\n+ * appearances but should only {@linkplain AttributeMapper#allowMultiple()\n+ * appear once} in a {@code Code} attribute.  It has a data dependency on\n+ * {@linkplain AttributeStability#LABELS labels}.\n+ * <p>\n+ * This attribute cannot be sent to a {@link CodeBuilder}; its entries can be\n+ * constructed with {@link CharacterRange}, resulting in at most one\n+ * attribute instance in the built {@code Code} attribute.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.compiler\/\n+ * implementation of the system Java compiler}.\n@@ -60,0 +68,3 @@\n+ * @see Attributes#characterRangeTable()\n+ * @see CompilationIDAttribute\n+ * @see SourceIDAttribute\n@@ -62,0 +73,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -74,0 +86,5 @@\n+     *\n+     * @apiNote\n+     * The created attribute cannot be written to a {@link CodeBuilder}.  Use\n+     * {@link CodeBuilder#characterRange CodeBuilder::characterRange} instead.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CharacterRangeTableAttribute.java","additions":41,"deletions":24,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.CodeModel;\n-import java.lang.classfile.Label;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n@@ -35,4 +34,2 @@\n- * Models the {@code Code} attribute (JVMS {@jvms 4.7.3}), appears on non-native,\n- * non-abstract methods and contains the bytecode of the method body.  Delivered\n- * as a {@link java.lang.classfile.MethodElement} when traversing the elements of a\n- * {@link java.lang.classfile.MethodModel}.\n+ * Models the {@link Attributes#code() Code} attribute (JVMS {@jvms 4.7.3}),\n+ * which contains the bytecode of this method.\n@@ -40,3 +37,13 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute was introduced in the Java SE Platform version 1.0.2, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n+ *\n+ * @apiNote\n+ * {@code CodeAttribute} models properties of a {@code Code} attribute read\n+ * from {@code class} files.  General {@code class} file transformation should\n+ * process and traverse a {@link CodeModel} in the traversal of a {@link\n+ * MethodModel}, to support transformation of {@code Code} attributes currently\n+ * being built.\n@@ -44,0 +51,2 @@\n+ * @see Attributes#code()\n+ * @jvms 4.7.3 The {@code Code} Attribute\n@@ -71,0 +80,3 @@\n+     * The label represents a cursor pointing at immediately before the returned\n+     * index into the {@code code} array.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -37,4 +40,2 @@\n- * Models the {@code CompilationID} attribute (@@@ need reference), which can\n- * appear on classes and records the compilation time of the class.  Delivered\n- * as a {@link java.lang.classfile.ClassElement} when traversing the elements of\n- * a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#compilationId() CompilationID} attribute, which\n+ * records the compilation time of the {@code class} file.\n@@ -42,3 +43,7 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.compiler\/\n+ * implementation of the system Java compiler}.\n@@ -46,0 +51,3 @@\n+ * @see Attributes#compilationId()\n+ * @see CharacterRangeTableAttribute\n+ * @see SourceIDAttribute\n@@ -48,0 +56,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -54,2 +63,2 @@\n-     * {@return the compilation ID}  The compilation ID is the value of\n-     * {@link System#currentTimeMillis()} when the classfile is generated.\n+     * {@return the compilation ID}  The compilation ID is the string value of\n+     * {@link System#currentTimeMillis()} when the {@code class} file is generated.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CompilationIDAttribute.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -37,4 +41,3 @@\n- * Models the {@code ConstantValue} attribute (JVMS {@jvms 4.7.2}), which can appear on\n- * fields and indicates that the field's value is a constant.  Delivered as a\n- * {@link java.lang.classfile.FieldElement} when traversing the elements of a\n- * {@link java.lang.classfile.FieldModel}.\n+ * Models the {@link Attributes#constantValue() ConstantValue} attribute (JVMS\n+ * {@jvms 4.7.2}), which indicates this field's value is a constant and that\n+ * constant value.\n@@ -42,3 +45,6 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on fields, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a field.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute was introduced in the Java SE Platform version 1.0.2, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n@@ -46,0 +52,2 @@\n+ * @see Attributes#constantValue()\n+ * @jvms 4.7.2 The {@code ConstantValue} Attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ConstantValueAttribute.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,2 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n@@ -36,4 +34,2 @@\n- * Models the {@code Deprecated} attribute (JVMS {@jvms 4.7.15}), which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n+ * Models the {@link Attributes#deprecated() Deprecated} attribute (JVMS {@jvms\n+ * 4.7.15}), which indicates this structure has been superseded.\n@@ -41,1 +37,14 @@\n- * The attribute permits multiple instances in a given location.\n+ * This attribute can appear on classes, methods, and fields, and permits\n+ * {@linkplain AttributeMapper#allowMultiple multiple instances} in a structure.\n+ * It has {@linkplain AttributeStability#STATELESS no data dependency}.\n+ * <p>\n+ * This attribute was introduced in the Java SE Platform version 1.1, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n+ *\n+ * @apiNote\n+ * When this attribute is present, the {@link Deprecated} annotation should\n+ * also be present in the {@link RuntimeVisibleAnnotationsAttribute\n+ * RuntimeVisibleAnnotations} attribute to provide more obvious alerts.\n+ * The {@linkplain jdk.compiler\/ implementation of the system Java compiler}\n+ * emits this attribute without the annotation when a {@code @deprecated} tag\n+ * is present in the documentation comments without the annotation.\n@@ -43,0 +52,3 @@\n+ * @see Attributes#deprecated()\n+ * @see Deprecated\n+ * @jvms 4.7.15 The {@code Deprecated} Attribute\n@@ -45,0 +57,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/DeprecatedAttribute.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -29,0 +32,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -33,0 +37,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -42,4 +47,4 @@\n- * Models the {@code EnclosingMethod} attribute (JVMS {@jvms 4.7.7}), which can appear\n- * on classes, and indicates that the class is a local or anonymous class.\n- * Delivered as a {@link ClassElement} when traversing the elements of a {@link\n- * java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#enclosingMethod() EnclosingMethod} attribute\n+ * (JVMS {@jvms 4.7.7}), which indicates that this class is a local or\n+ * anonymous class, and indicates the enclosing method or constructor of this\n+ * class if this class is enclosed in exactly one method or constructor.\n@@ -47,3 +52,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -51,1 +56,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -53,0 +59,2 @@\n+ * @see Attributes#enclosingMethod()\n+ * @jvms 4.7.7 The {@code EnclosingMethod} Attribute\n@@ -61,2 +69,5 @@\n-     * {@return the innermost class that encloses the declaration of the current\n-     * class}\n+     * {@return the class that encloses the declaration of the current\n+     * class}  If the {@link #enclosingMethod()} is present, this is the\n+     * declaring class of that enclosing method or constructor.\n+     *\n+     * @see Class#getEnclosingClass()\n@@ -68,1 +79,8 @@\n-     * immediately enclosed by a method or constructor}\n+     * immediately enclosed by exactly one method or constructor}  This may\n+     * be empty if the anonymous or local class appears in a field initializer\n+     * (JLS {@jls 8.3.2}), an instance initializer (JLS {@jls 8.6}), or a static\n+     * initializer (JLS {@jls 8.7}).  As a result, this never describes a class\n+     * initialization method {@value ConstantDescs#CLASS_INIT_NAME}.\n+     *\n+     * @see Class#getEnclosingMethod()\n+     * @see Class#getEnclosingConstructor()\n@@ -73,2 +91,4 @@\n-     * {@return the name of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n+     * {@return the name of the enclosing method, if the class is immediately\n+     * enclosed by exactly one method or constructor}\n+     *\n+     * @see #enclosingMethod()\n@@ -81,2 +101,4 @@\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n+     * {@return the name of the enclosing method, if the class is immediately\n+     * enclosed by exactly one method or constructor}\n+     *\n+     * @see #enclosingMethod()\n@@ -89,2 +111,4 @@\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n+     * {@return the name of the enclosing method, if the class is immediately\n+     * enclosed by exactly one method or constructor}\n+     *\n+     * @see #enclosingMethod()\n@@ -99,2 +123,2 @@\n-     * @param method the name and type of the enclosing method or {@code empty} if\n-     *               the class is not immediately enclosed by a method or constructor\n+     * @param method the name and type of the enclosing method or {@code Optional.empty()} if\n+     *               the class is not immediately enclosed by exactly one method or constructor\n@@ -110,4 +134,4 @@\n-     * @param methodName the name of the enclosing method or {@code empty} if\n-     *                   the class is not immediately enclosed by a method or constructor\n-     * @param methodType the type of the enclosing method or {@code empty} if\n-     *                   the class is not immediately enclosed by a method or constructor\n+     * @param methodName the name of the enclosing method or {@code Optional.empty()} if\n+     *                   the class is not immediately enclosed by exactly one method or constructor\n+     * @param methodType the type of the enclosing method or {@code Optional.empty()} if\n+     *                   the class is not immediately enclosed by exactly one method or constructor\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/EnclosingMethodAttribute.java","additions":48,"deletions":24,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -31,0 +35,1 @@\n+import java.lang.reflect.Executable;\n@@ -39,4 +44,3 @@\n- * Models the {@code Exceptions} attribute (JVMS {@jvms 4.7.5}), which can appear on\n- * methods, and records the exceptions declared to be thrown by this method.\n- * Delivered as a {@link MethodElement} when traversing the elements of a\n- * {@link java.lang.classfile.MethodModel}.\n+ * Models the {@link Attributes#exceptions() Exceptions} attribute (JVMS {@jvms\n+ * 4.7.5}), which records the exceptions declared to be thrown by this\n+ * method.\n@@ -44,3 +48,12 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 1.0.2, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n+ *\n+ * @apiNote\n+ * Generic exceptions types thrown by a method and potentially annotated use of\n+ * those types are defined by {@link SignatureAttribute} and {@link\n+ * RuntimeVisibleTypeAnnotationsAttribute} respectively, which requires this\n+ * attribute to be present.\n@@ -48,0 +61,2 @@\n+ * @see Attributes#exceptions()\n+ * @jvms 4.7.5 The {@code Exceptions} Attribute\n@@ -57,0 +72,2 @@\n+     *\n+     * @see Executable#getExceptionTypes()\n@@ -62,1 +79,1 @@\n-     * @param exceptions the checked exceptions that may be thrown from this method\n+     * @param exceptions the exceptions that may be thrown from this method\n@@ -70,1 +87,1 @@\n-     * @param exceptions the checked exceptions that may be thrown from this method\n+     * @param exceptions the exceptions that may be thrown from this method\n@@ -78,1 +95,1 @@\n-     * @param exceptions the checked exceptions that may be thrown from this method\n+     * @param exceptions the exceptions that may be thrown from this method\n@@ -86,1 +103,1 @@\n-     * @param exceptions the checked exceptions that may be thrown from this method\n+     * @param exceptions the exceptions that may be thrown from this method\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ExceptionsAttribute.java","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * Models a single inner class in the {@link InnerClassesAttribute}.\n+ * Models a single entry in the {@link InnerClassesAttribute}.\n@@ -41,0 +41,2 @@\n+ * @see InnerClassesAttribute#classes()\n+ * @jvms 4.7.6 The {@code InnerClasses} Attribute\n@@ -47,1 +49,1 @@\n-     * {@return the class described by this inner class description}\n+     * {@return the nested class described by this entry}\n@@ -52,2 +54,5 @@\n-     * {@return the class or interface of which this class is a member, if it is a\n-     * member of a class or interface}\n+     * {@return the class or interface of which this class is a member, if it is\n+     * a member of a class or interface}  This may be empty if this class is\n+     * local or anonymous.\n+     *\n+     * @see Class#getDeclaringClass()\n@@ -59,0 +64,2 @@\n+     *\n+     * @see Class#getSimpleName()\n@@ -65,0 +72,3 @@\n+     *\n+     * @see Class#getModifiers()\n+     * @see AccessFlag.Location#INNER_CLASS\n@@ -70,1 +80,5 @@\n-     * of the inner class}\n+     * of the nested class}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see Class#accessFlags()\n+     * @see AccessFlag.Location#INNER_CLASS\n@@ -78,0 +92,1 @@\n+     *\n@@ -79,0 +94,1 @@\n+     * @see AccessFlag.Location#INNER_CLASS\n@@ -85,4 +101,4 @@\n-     * {@return an inner class description}\n-     * @param innerClass the inner class being described\n-     * @param outerClass the class containing the inner class, if any\n-     * @param innerName the name of the inner class, if it is not anonymous\n+     * {@return a nested class description}\n+     * @param innerClass the nested class being described\n+     * @param outerClass the class that has the nested class as a member, if it exists\n+     * @param innerName the simple name of the nested class, if it is not anonymous\n@@ -97,4 +113,4 @@\n-     * {@return an inner class description}\n-     * @param innerClass the inner class being described\n-     * @param outerClass the class containing the inner class, if any\n-     * @param innerName the name of the inner class, if it is not anonymous\n+     * {@return a nested class description}\n+     * @param innerClass the nested class being described\n+     * @param outerClass the class that has the nested class as a member, if it exists\n+     * @param innerName the simple name of the nested class, if it is not anonymous\n@@ -112,4 +128,4 @@\n-     * {@return an inner class description}\n-     * @param innerClass the inner class being described\n-     * @param outerClass the class containing the inner class, if any\n-     * @param innerName the name of the inner class, if it is not anonymous\n+     * {@return a nested class description}\n+     * @param innerClass the nested class being described\n+     * @param outerClass the class that has the nested class as a member, if it exists\n+     * @param innerName the name of the nested class, if it is not anonymous\n@@ -117,1 +133,3 @@\n-     * @throws IllegalArgumentException if {@code innerClass} or {@code outerClass} represents a primitive type\n+     * @throws IllegalArgumentException if {@code innerClass} or {@code outerClass}\n+     *         represents a primitive type, or if any flag cannot be applied to\n+     *         the {@link AccessFlag.Location#INNER_CLASS} location\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassInfo.java","additions":37,"deletions":19,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -36,4 +40,3 @@\n- * Models the {@code InnerClasses} attribute (JVMS {@jvms 4.7.6}), which can\n- * appear on classes, and records which classes referenced by this classfile\n- * are inner classes. Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#innerClasses() InnerClasses} attribute (JVMS\n+ * {@jvms 4.7.6}), which records which classes referenced by this {@code class}\n+ * file are nested classes.\n@@ -41,3 +44,6 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 1.1, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n@@ -45,0 +51,2 @@\n+ * @see Attributes#innerClasses()\n+ * @jvms 4.7.6 The {@code InnerClasses} Attribute\n@@ -53,1 +61,1 @@\n-     * {@return the inner classes used by this class}\n+     * {@return the nested classes used by this {@code class} file}\n@@ -59,1 +67,1 @@\n-     * @param innerClasses descriptions of the inner classes\n+     * @param innerClasses descriptions of the nested classes\n@@ -67,1 +75,1 @@\n-     * @param innerClasses descriptions of the inner classes\n+     * @param innerClasses descriptions of the nested classes\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassesAttribute.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.instruction.LineNumber;\n+\n@@ -30,1 +33,1 @@\n- * Models a single line number in the {@link LineNumberTableAttribute}.\n+ * Models a single line number entry in the {@link LineNumberTableAttribute}.\n@@ -32,0 +35,2 @@\n+ * @see LineNumberTableAttribute#lineNumbers()\n+ * @see LineNumber\n@@ -50,0 +55,6 @@\n+     *\n+     * @apiNote\n+     * The created entry cannot be written to a {@link CodeBuilder}.  Call\n+     * {@link CodeBuilder#lineNumber CodeBuilder::lineNumber} in the correct\n+     * order instead.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LineNumberInfo.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.instruction.LineNumber;\n@@ -34,6 +41,5 @@\n- * Models the {@code LineNumberTable} attribute (JVMS {@jvms 4.7.12}), which can appear\n- * on a {@code Code} attribute, and records the mapping between indexes into\n- * the code table and line numbers in the source file.\n- * Delivered as a {@link java.lang.classfile.instruction.LineNumber} when traversing the\n- * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n- * {@link java.lang.classfile.ClassFile.LineNumbersOption} option.\n+ * Models the {@link Attributes#lineNumberTable() LineNumberTable} attribute\n+ * (JVMS {@jvms 4.7.12}), which records the mapping between indexes into\n+ * the {@code code} array and line numbers in the source file.  Its entries are\n+ * delivered as {@link LineNumber} when traversing the elements of a {@link\n+ * CodeModel}, which is toggled by {@link ClassFile.LineNumbersOption}.\n@@ -41,1 +47,11 @@\n- * The attribute permits multiple instances in a given location.\n+ * This attribute only appears on {@code Code} attributes, and permits {@linkplain\n+ * AttributeMapper#allowMultiple() multiple instances} in a {@code Code}\n+ * attribute.  It has a data dependency on {@linkplain AttributeStability#LABELS\n+ * labels}.\n+ * <p>\n+ * This attribute cannot be sent to a {@link CodeBuilder}; its entries can be\n+ * constructed with {@link LineNumber}, resulting in at most one attribute\n+ * instance in the built {@code Code} attribute.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 1.0.2, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n@@ -43,0 +59,2 @@\n+ * @see Attributes#lineNumberTable()\n+ * @jvms 4.7.12 The {@code LineNumberTable} Attribute\n@@ -57,0 +75,6 @@\n+     *\n+     * @apiNote\n+     * The created attribute cannot be written to a {@link CodeBuilder}.  Call\n+     * {@link CodeBuilder#lineNumber CodeBuilder::lineNumber} in the correct\n+     * order instead.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LineNumberTableAttribute.java","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.instruction.LocalVariable;\n@@ -37,0 +38,3 @@\n+ * @see LocalVariableTableAttribute#localVariables()\n+ * @see LocalVariable\n+ * @jvms 4.7.13 The {@code LocalVaribleTable} Attribute\n@@ -43,1 +47,1 @@\n-     * {@return the index into the code array (inclusive) at which the scope of\n+     * {@return the index into the code array, inclusive, at which the scope of\n@@ -50,1 +54,1 @@\n-     * variable is in scope.}\n+     * variable is in scope}\n@@ -60,1 +64,1 @@\n-     * {@return the field descriptor of the local variable}\n+     * {@return the field descriptor string of the local variable}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableInfo.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.instruction.LocalVariable;\n@@ -34,6 +41,5 @@\n- * Models the {@code LocalVariableTable} attribute (JVMS {@jvms 4.7.13}), which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link java.lang.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n- * {@link java.lang.classfile.ClassFile.DebugElementsOption} option.\n+ * Models the {@link Attributes#localVariableTable() LocalVariableTable}\n+ * attribute (JVMS {@jvms 4.7.13}), which records debug information about local\n+ * variables.  Its entries are delivered as {@link LocalVariable}s when\n+ * traversing the elements of a {@link CodeModel}, which is toggled by {@link\n+ * ClassFile.DebugElementsOption}.\n@@ -41,1 +47,17 @@\n- * The attribute permits multiple instances in a given location.\n+ * This attribute only appears on {@code Code} attributes, and permits {@linkplain\n+ * AttributeMapper#allowMultiple() multiple instances} in a {@code Code}\n+ * attribute.  It has a data dependency on {@linkplain AttributeStability#LABELS\n+ * labels}.\n+ * <p>\n+ * This attribute cannot be sent to a {@link CodeBuilder}; its entries can be\n+ * constructed with {@link LocalVariable}, resulting in at most one attribute\n+ * instance in the built {@code Code} attribute.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 1.0.2, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n+ *\n+ * @apiNote\n+ * Generic local variable types and potentially annotated use of those types are\n+ * defined by {@link LocalVariableTypeTableAttribute} and {@link\n+ * RuntimeVisibleTypeAnnotationsAttribute} respectively, which requires this\n+ * attribute to be present.\n@@ -43,0 +65,2 @@\n+ * @see Attributes#localVariableTable()\n+ * @jvms 4.7.13 The {@code LocalVaribleTable} Attribute\n@@ -56,0 +80,5 @@\n+     *\n+     * @apiNote\n+     * The created attribute cannot be written to a {@link CodeBuilder}.  Use\n+     * {@link CodeBuilder#localVariable CodeBuilder::localVariable} instead.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.instruction.LocalVariableType;\n@@ -35,0 +36,3 @@\n+ * @see LocalVariableTypeTableAttribute#localVariableTypes()\n+ * @see LocalVariableType\n+ * @jvms 4.7.14 The {@code LocalVariableTypeTable} Attribute\n@@ -41,1 +45,1 @@\n-     * {@return the index into the code array (inclusive) at which the scope of\n+     * {@return the index into the code array, inclusive at which the scope of\n@@ -48,1 +52,1 @@\n-     * variable is in scope.}\n+     * variable is in scope}\n@@ -59,1 +63,1 @@\n-     * {@return the field signature of the local variable}\n+     * {@return the field signature string of the local variable}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTypeInfo.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,7 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.instruction.LocalVariableType;\n@@ -35,6 +42,5 @@\n- * Models the {@code LocalVariableTypeTable} attribute (JVMS {@jvms 4.7.14}), which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link java.lang.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n- * {@link java.lang.classfile.ClassFile.LineNumbersOption} option.\n+ * Models the {@link Attributes#localVariableTypeTable() LocalVariableTypeTable}\n+ * attribute (JVMS {@jvms 4.7.14}), which records debug information about local\n+ * variables with generic types.  Its entries are delivered as {@link\n+ * LocalVariableType}s when traversing the elements of a {@link CodeModel},\n+ * which can be toggled by {@link ClassFile.DebugElementsOption}.\n@@ -42,1 +48,4 @@\n- * The attribute permits multiple instances in a given location.\n+ * This attribute only appears on {@code Code} attributes, and permits {@linkplain\n+ * AttributeMapper#allowMultiple() multiple instances} in a {@code Code}\n+ * attribute.  It has a data dependency on {@linkplain AttributeStability#LABELS\n+ * labels}.\n@@ -44,1 +53,12 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * This attribute cannot be sent to a {@link CodeBuilder}; its entries can be\n+ * constructed with {@link LocalVariableType}, resulting in at most one attribute\n+ * instance in the built {@code Code} attribute.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n+ *\n+ * @apiNote\n+ * Only local variables that have generic field types need to be described by\n+ * this attribute.  If a local variable is described in a {@code\n+ * LocalVariableTypeTable} attribute, it must also be described in a {@link\n+ * LocalVariableTableAttribute LocalVariableTable} attribute.\n@@ -46,0 +66,2 @@\n+ * @see Attributes#localVariableTypeTable()\n+ * @jvms 4.7.14 The {@code LocalVariableTypeTable} Attribute\n@@ -53,1 +75,1 @@\n-     * {@return debug information for the local variables in this method}\n+     * {@return debug information for the local variables with generic types in this method}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -30,0 +29,1 @@\n+import java.lang.reflect.Parameter;\n@@ -40,0 +40,3 @@\n+ * @see MethodParametersAttribute#parameters()\n+ * @see Parameter\n+ * @jvms 4.7.24 The {@code MethodParameters} Attribute\n@@ -45,1 +48,1 @@\n-     * The name of the method parameter, if there is one.\n+     * {@return the parameter name, if it has one}\n@@ -47,1 +50,2 @@\n-     * @return the parameter name, if it has one\n+     * @see Parameter#getName()\n+     * @see Parameter#isNamePresent()\n@@ -52,3 +56,1 @@\n-     * Parameter access flags for this parameter, as a bit mask.  Valid\n-     * parameter flags include {@link ClassFile#ACC_FINAL},\n-     * {@link ClassFile#ACC_SYNTHETIC}, and {@link ClassFile#ACC_MANDATED}.\n+     * {@return the access flags, as a bit mask}\n@@ -56,1 +58,2 @@\n-     * @return the access flags, as a bit mask\n+     * @see Parameter#getModifiers()\n+     * @see AccessFlag.Location#METHOD_PARAMETER\n@@ -61,1 +64,1 @@\n-     * Parameter access flags for this parameter.\n+     * {@return the access flags, as a set of flag enums}\n@@ -63,1 +66,3 @@\n-     * @return the access flags, as a bit mask\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see Parameter#accessFlags()\n+     * @see AccessFlag.Location#METHOD_PARAMETER\n@@ -72,0 +77,1 @@\n+     * @see AccessFlag.Location#METHOD_PARAMETER\n@@ -79,1 +85,1 @@\n-     * @param name the method parameter name\n+     * @param name the method parameter name, may be empty\n@@ -88,1 +94,1 @@\n-     * @param name the method parameter name\n+     * @param name the method parameter name, may be empty\n@@ -90,0 +96,2 @@\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#METHOD_PARAMETER} location\n@@ -97,1 +105,1 @@\n-     * @param name the method parameter name\n+     * @param name the method parameter name, may be empty\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParameterInfo.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -30,0 +33,1 @@\n+import java.lang.reflect.Executable;\n@@ -36,4 +40,3 @@\n- * Models the {@code MethodParameters} attribute (JVMS {@jvms 4.7.24}), which can\n- * appear on methods, and records optional information about the method's\n- * parameters.  Delivered as a {@link java.lang.classfile.MethodElement} when\n- * traversing the elements of a {@link java.lang.classfile.MethodModel}.\n+ * Models the {@link Attributes#methodParameters() MethodParameters} attribute\n+ * (JVMS {@jvms 4.7.24}), which records reflective information about this\n+ * method's parameters such as access modifiers.\n@@ -41,3 +44,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeMapper.AttributeStability#CP_REFS\n+ * constant pool}.\n@@ -45,1 +49,2 @@\n- * The attribute was introduced in the Java SE Platform version 8.\n+ * The attribute was introduced in the Java SE Platform version 8, major version\n+ * {@value ClassFile#JAVA_8_VERSION}.\n@@ -47,0 +52,3 @@\n+ * @see Attributes#methodParameters()\n+ * @see Executable#getParameters()\n+ * @jvms 4.7.24 The {@code MethodParameters} Attribute\n@@ -56,1 +64,1 @@\n-     * in the list corresponds to the i'th parameter in the method declaration.\n+     * in the list corresponds to the i'th parameter in the method descriptor.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParametersAttribute.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.Attributes;\n@@ -29,0 +31,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n@@ -35,0 +39,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.module.ModuleDescriptor;\n@@ -39,0 +45,1 @@\n+import java.util.ServiceLoader;\n@@ -48,4 +55,3 @@\n- * Models the {@code Module} attribute (JVMS {@jvms 4.7.25}), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#module() Module} attribute (JVMS {@jvms 4.7.25}),\n+ * which always appears on classes that {@linkplain ClassModel#isModuleInfo()\n+ * represent} module descriptors.\n@@ -53,3 +59,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeMapper.AttributeStability#CP_REFS\n+ * constant pool}.\n@@ -57,1 +64,2 @@\n- * The attribute was introduced in the Java SE Platform version 9.\n+ * The attribute was introduced in the Java SE Platform version 9, major version\n+ * {@value ClassFile#JAVA_9_VERSION}.\n@@ -59,0 +67,3 @@\n+ * @see Attributes#module()\n+ * @see ModuleDescriptor\n+ * @jvms 4.7.25 The {@code Module} Attribute\n@@ -67,0 +78,2 @@\n+     *\n+     * @see ModuleDescriptor#name()\n@@ -71,1 +84,4 @@\n-     * {@return the the module flags of the module, as a bit mask}\n+     * {@return the module flags of the module, as a bit mask}\n+     *\n+     * @see ModuleDescriptor#modifiers()\n+     * @see AccessFlag.Location#MODULE\n@@ -76,1 +92,5 @@\n-     * {@return the the module flags of the module, as a set of enum constants}\n+     * {@return the module flags of the module, as a set of enum constants}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see ModuleDescriptor#accessFlags()\n+     * @see AccessFlag.Location#MODULE\n@@ -83,1 +103,2 @@\n-     * Tests presence of module flag\n+     * Tests presence of module flag.\n+     *\n@@ -86,0 +107,1 @@\n+     * @see AccessFlag.Location#MODULE\n@@ -93,0 +115,2 @@\n+     *\n+     * @see ModuleDescriptor#version()\n@@ -98,0 +122,2 @@\n+     *\n+     * @see ModuleDescriptor#requires()\n@@ -103,0 +129,2 @@\n+     *\n+     * @see ModuleDescriptor#packages()\n@@ -108,0 +136,7 @@\n+     *\n+     * @apiNote\n+     * Opening a package to another module allows that other module to gain\n+     * the same full privilege access as members in this module.  See {@link\n+     * MethodHandles#privateLookupIn} for more details.\n+     *\n+     * @see ModuleDescriptor#opens()\n@@ -113,1 +148,3 @@\n-     * {@link java.util.ServiceLoader}.\n+     * {@link ServiceLoader}.\n+     *\n+     * @see ModuleDescriptor#uses()\n@@ -119,0 +156,2 @@\n+     *\n+     * @see ModuleDescriptor#provides()\n@@ -127,1 +166,1 @@\n-     * @param moduleVersion the module version\n+     * @param moduleVersion the module version, may be {@code null}\n@@ -171,1 +210,1 @@\n-     * A builder for module attributes.\n+     * A builder for {@link ModuleAttribute Module} attributes.\n@@ -173,0 +212,2 @@\n+     * @see ModuleDescriptor.Builder\n+     * @jvms 4.7.25 The {@code Module} Attribute\n@@ -179,1 +220,2 @@\n-         * Sets the module name\n+         * Sets the module name.\n+         *\n@@ -186,1 +228,2 @@\n-         * Sets the module flags\n+         * Sets the module flags.\n+         *\n@@ -193,1 +236,2 @@\n-         * Sets the module flags\n+         * Sets the module flags.\n+         *\n@@ -196,0 +240,2 @@\n+         * @throws IllegalArgumentException if any flag cannot be applied to the\n+         *         {@link AccessFlag.Location#MODULE} location\n@@ -202,2 +248,3 @@\n-         * Sets the module version\n-         * @param version the module version\n+         * Sets the module version, which may be {@code null}.\n+         *\n+         * @param version the module version, may be {@code null}\n@@ -209,1 +256,2 @@\n-         * Adds module requirement\n+         * Adds a module requirement.\n+         *\n@@ -212,1 +260,1 @@\n-         * @param version the required module version\n+         * @param version the required module version, may be {@code null}\n@@ -218,1 +266,2 @@\n-         * Adds module requirement\n+         * Adds a module requirement.\n+         *\n@@ -221,1 +270,1 @@\n-         * @param version the required module version\n+         * @param version the required module version, may be {@code null}\n@@ -223,0 +272,2 @@\n+         * @throws IllegalArgumentException if any flag cannot be applied to the\n+         *         {@link AccessFlag.Location#MODULE_REQUIRES} location\n@@ -229,1 +280,2 @@\n-         * Adds module requirement\n+         * Adds module requirement.\n+         *\n@@ -236,1 +288,2 @@\n-         * Adds exported package\n+         * Adds an exported package.\n+         *\n@@ -239,1 +292,1 @@\n-         * @param exportsToModules the modules to export to\n+         * @param exportsToModules the modules to export to, or empty for an unqualified export\n@@ -245,1 +298,2 @@\n-         * Adds exported package\n+         * Adds an exported package.\n+         *\n@@ -248,1 +302,1 @@\n-         * @param exportsToModules the modules to export to\n+         * @param exportsToModules the modules to export to, or empty for an unqualified export\n@@ -250,0 +304,2 @@\n+         * @throws IllegalArgumentException if any flag cannot be applied to the\n+         *         {@link AccessFlag.Location#MODULE_EXPORTS} location\n@@ -256,1 +312,2 @@\n-         * Adds exported package\n+         * Adds an exported package.\n+         *\n@@ -263,1 +320,7 @@\n-         * Opens package\n+         * Opens a package.\n+         *\n+         * @apiNote\n+         * Opening a package to another module allows that other module to gain\n+         * the same full privilege access as members in this module.  See {@link\n+         * MethodHandles#privateLookupIn} for more details.\n+         *\n@@ -266,1 +329,1 @@\n-         * @param opensToModules the modules to open to\n+         * @param opensToModules the modules to open to, or empty for an unqualified open\n@@ -272,1 +335,7 @@\n-         * Opens package\n+         * Opens a package.\n+         *\n+         * @apiNote\n+         * Opening a package to another module allows that other module to gain\n+         * the same full privilege access as members in this module.  See {@link\n+         * MethodHandles#privateLookupIn} for more details.\n+         *\n@@ -275,1 +344,1 @@\n-         * @param opensToModules the modules to open to\n+         * @param opensToModules the modules to open to, or empty for an unqualified open\n@@ -277,0 +346,2 @@\n+         * @throws IllegalArgumentException if any flag cannot be applied to the\n+         *         {@link AccessFlag.Location#MODULE_OPENS} location\n@@ -283,1 +354,7 @@\n-         * Opens package\n+         * Opens a package.\n+         *\n+         * @apiNote\n+         * Opening a package to another module allows that other module to gain\n+         * the same full privilege access as members in this module.  See {@link\n+         * MethodHandles#privateLookupIn} for more details.\n+         *\n@@ -290,1 +367,2 @@\n-         * Declares use of a service\n+         * Declares use of a service.\n+         *\n@@ -298,1 +376,2 @@\n-         * Declares use of a service\n+         * Declares use of a service.\n+         *\n@@ -305,1 +384,2 @@\n-         * Declares provision of a service\n+         * Declares provision of a service.\n+         *\n@@ -314,1 +394,2 @@\n-         * Declares provision of a service\n+         * Declares provision of a service.\n+         *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleAttribute.java","additions":120,"deletions":39,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -32,0 +31,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -44,0 +44,3 @@\n+ * @see ModuleAttribute#exports()\n+ * @see ModuleDescriptor.Exports\n+ * @jvms 4.7.25 The {@code Module} Attribute\n@@ -51,0 +54,2 @@\n+     *\n+     * @see ModuleDescriptor.Exports#source()\n@@ -56,2 +61,3 @@\n-     * Valid flags include {@link ClassFile#ACC_SYNTHETIC} and\n-     * {@link ClassFile#ACC_MANDATED}.\n+     *\n+     * @see ModuleDescriptor.Exports#modifiers()\n+     * @see AccessFlag.Location#MODULE_EXPORTS\n@@ -63,1 +69,5 @@\n-     * flag values}\n+     * flag enums}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see ModuleDescriptor.Exports#accessFlags()\n+     * @see AccessFlag.Location#MODULE_EXPORTS\n@@ -70,7 +80,2 @@\n-     * {@return the list of modules to which this package is exported, if it is a\n-     * qualified export}\n-     *\/\n-    List<ModuleEntry> exportsTo();\n-\n-    \/**\n-     * {@return whether the module has the specified access flag set}\n+     * {@return whether the export declaration has the specified access flag set}\n+     *\n@@ -78,0 +83,1 @@\n+     * @see AccessFlag.Location#MODULE_EXPORTS\n@@ -83,0 +89,9 @@\n+    \/**\n+     * {@return the list of modules to which this package is exported, or empty\n+     * if this is an unqualified export}\n+     *\n+     * @see ModuleDescriptor.Exports#isQualified()\n+     * @see ModuleDescriptor.Exports#targets()\n+     *\/\n+    List<ModuleEntry> exportsTo();\n+\n@@ -85,0 +100,1 @@\n+     *\n@@ -87,1 +103,2 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n@@ -96,0 +113,1 @@\n+     *\n@@ -98,1 +116,4 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_EXPORTS} location\n@@ -107,0 +128,1 @@\n+     *\n@@ -109,1 +131,2 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n@@ -119,0 +142,1 @@\n+     *\n@@ -121,1 +145,4 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_EXPORTS} location\n@@ -131,0 +158,1 @@\n+     *\n@@ -133,1 +161,2 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n@@ -144,0 +173,1 @@\n+     *\n@@ -146,1 +176,4 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_EXPORTS} location\n@@ -155,0 +188,1 @@\n+     *\n@@ -157,1 +191,2 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n@@ -167,0 +202,1 @@\n+     *\n@@ -169,1 +205,4 @@\n-     * @param exportsTo the modules to which this package is exported\n+     * @param exportsTo the modules to which this package is exported, or empty\n+     *        if this is an unqualified export\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_EXPORTS} location\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleExportInfo.java","additions":59,"deletions":20,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @see ModuleHashesAttribute#hashes()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleHashInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassModel;\n@@ -38,7 +42,5 @@\n- * Models the {@code ModuleHashes} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- * attribute, which captures the hashes of a set of co-delivered modules.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n- *\n- *  <p>The specification of the {@code ModuleHashes} attribute is:\n+ * Models the {@link Attributes#moduleHashes() ModuleHashes} attribute, which\n+ * appears on classes that {@linkplain ClassModel#isModuleInfo() represent}\n+ * module descriptors to capture the hashes of a set of co-delivered modules.\n+ * <p>\n+ * The specification of the {@code ModuleHashes} attribute is:\n@@ -66,3 +68,7 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.jlink\/\n+ * jlink and jmod tools} and used by the implementation.\n@@ -70,0 +76,3 @@\n+ * @see Attributes#moduleHashes()\n+ * @see ModuleResolutionAttribute\n+ * @see ModuleTargetAttribute\n@@ -72,0 +81,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleHashesAttribute.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n@@ -32,0 +37,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -38,4 +44,4 @@\n- * Models the {@code ModuleMainClass} attribute (JVMS {@jvms 4.7.27}), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#moduleMainClass() ModuleMainClass} attribute\n+ * (JVMS {@jvms 4.7.27}), which appears on classes that {@linkplain\n+ * ClassModel#isModuleInfo() represent} module descriptors to indicate the main\n+ * class of the module.\n@@ -43,3 +49,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -47,1 +53,2 @@\n- * The attribute was introduced in the Java SE Platform version 9.\n+ * The attribute was introduced in the Java SE Platform version 9, major version\n+ * {@value ClassFile#JAVA_9_VERSION}.\n@@ -49,0 +56,3 @@\n+ * @see Attributes#moduleMainClass()\n+ * @see ModuleDescriptor#mainClass()\n+ * @jvms 4.7.27 The {@code ModuleMainClass} Attribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.module.ModuleDescriptor;\n@@ -43,0 +45,8 @@\n+ * @apiNote\n+ * Opening a package to another module allows that other module to gain\n+ * the same full privilege access as members in this module.  See {@link\n+ * MethodHandles#privateLookupIn} for more details.\n+ *\n+ * @see ModuleAttribute#exports()\n+ * @see ModuleDescriptor.Opens\n+ * @jvms 4.7.25 The {@code Module} Attribute\n@@ -50,0 +60,2 @@\n+     *\n+     * @see ModuleDescriptor.Opens#source()\n@@ -55,2 +67,3 @@\n-     * Valid flags include {@link java.lang.classfile.ClassFile#ACC_SYNTHETIC} and\n-     * {@link java.lang.classfile.ClassFile#ACC_MANDATED}\n+     *\n+     * @see ModuleDescriptor.Opens#modifiers()\n+     * @see AccessFlag.Location#MODULE_OPENS\n@@ -61,1 +74,6 @@\n-     * {@return the access flags}\n+     * {@return the flags associated with this open declaration, as a set of\n+     * flag enums}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see ModuleDescriptor.Opens#accessFlags()\n+     * @see AccessFlag.Location#MODULE_OPENS\n@@ -68,1 +86,2 @@\n-     * {@return whether the specified access flag is set}\n+     * {@return whether the open declaration has the specified access flag set}\n+     *\n@@ -70,0 +89,1 @@\n+     * @see AccessFlag.Location#MODULE_OPENS\n@@ -76,2 +96,2 @@\n-     * The list of modules to which this package is opened, if it is a\n-     * qualified open.\n+     * {@return the modules to which this package is opened, or empty if this\n+     * is an unqualified open}\n@@ -79,1 +99,2 @@\n-     * @return the modules to which this package is opened\n+     * @see ModuleDescriptor.Opens#isQualified()\n+     * @see ModuleDescriptor.Opens#targets()\n@@ -85,0 +106,1 @@\n+     *\n@@ -87,1 +109,2 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, or empty if\n+     *               this is an unqualified open\n@@ -96,0 +119,1 @@\n+     *\n@@ -98,1 +122,4 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, or empty if\n+     *               this is an unqualified open\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_OPENS} location\n@@ -107,0 +134,1 @@\n+     *\n@@ -109,1 +137,2 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, or empty if\n+     *               this is an unqualified open\n@@ -119,0 +148,1 @@\n+     *\n@@ -121,1 +151,4 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, or empty if\n+     *               this is an unqualified open\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_OPENS} location\n@@ -133,1 +166,2 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, if it is a\n+     *                qualified open, or empty\n@@ -146,1 +180,4 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the modules to which this package is opened, if it is a\n+     *               qualified open, or empty\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_OPENS} location\n@@ -157,1 +194,2 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the packages to which this package is opened, or empty if\n+     *               this is an unqualified open\n@@ -169,1 +207,4 @@\n-     * @param opensTo the packages to which this package is opened, if it is a qualified open\n+     * @param opensTo the packages to which this package is opened, or empty if\n+     *               this is an unqualified open\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_OPENS} location\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleOpenInfo.java","additions":57,"deletions":16,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -29,0 +32,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n@@ -31,0 +36,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -39,4 +45,4 @@\n- * Models the {@code ModulePackages} attribute (JVMS {@jvms 4.7.26}), which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#modulePackages() ModulePackages} attribute (JVMS\n+ * {@jvms 4.7.26}), which can appear on classes that {@linkplain\n+ * ClassModel#isModuleInfo() represent} module descriptors to indicate packages\n+ * in the module used by the module descriptor.\n@@ -44,3 +50,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -48,1 +54,2 @@\n- * The attribute was introduced in the Java SE Platform version 9.\n+ * The attribute was introduced in the Java SE Platform version 9, major version\n+ * {@value ClassFile#JAVA_9_VERSION}.\n@@ -50,0 +57,3 @@\n+ * @see Attributes#modulePackages()\n+ * @see ModuleDescriptor#packages()\n+ * @jvms 4.7.26 The {@code ModulePackages} Attribute\n@@ -58,1 +68,3 @@\n-     * {@return the packages that are opened or exported by this module}\n+     * {@return the packages used by the module descriptor}  This must include\n+     * all packages opened or exported by the module, as well as the packages of\n+     * any service providers, and the package for the main class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModulePackagesAttribute.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -39,0 +40,3 @@\n+ * @see ModuleAttribute#provides()\n+ * @see ModuleDescriptor.Provides\n+ * @jvms 4.7.25 The {@code Module} Attribute\n@@ -46,0 +50,2 @@\n+     *\n+     * @see ModuleDescriptor.Provides#service()\n@@ -50,1 +56,4 @@\n-     * {@return the classes providing the service implementation}\n+     * {@return the classes providing the service implementation}  The list\n+     * should not be empty.\n+     *\n+     * @see ModuleDescriptor.Provides#providers()\n@@ -57,1 +66,1 @@\n-     * @param providesWith the service class implementations\n+     * @param providesWith the service class implementations, must not be empty\n@@ -67,1 +76,1 @@\n-     * @param providesWith the service class implementations\n+     * @param providesWith the service class implementations, must not be empty\n@@ -77,2 +86,3 @@\n-     * @param providesWith the service class implementations\n-     * @throws IllegalArgumentException if {@code provides} represents a primitive type\n+     * @param providesWith the service class implementations, must not be empty\n+     * @throws IllegalArgumentException if {@code provides} or any of {@code\n+     *         providesWith} represents a primitive type\n@@ -81,1 +91,1 @@\n-                                       List<ClassDesc> providesWith) {\n+                                List<ClassDesc> providesWith) {\n@@ -88,2 +98,3 @@\n-     * @param providesWith the service class implementations\n-     * @throws IllegalArgumentException if {@code provides} or any of {@code providesWith} represents a primitive type\n+     * @param providesWith the service class implementations, must not be empty\n+     * @throws IllegalArgumentException if {@code provides} or any of {@code\n+     *         providesWith} represents a primitive type\n@@ -92,1 +103,1 @@\n-                                       ClassDesc... providesWith) {\n+                                ClassDesc... providesWith) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleProvideInfo.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.lang.module.ModuleDescriptor;\n@@ -42,0 +43,3 @@\n+ * @see ModuleAttribute#requires()\n+ * @see ModuleDescriptor#requires()\n+ * @jvms 4.7.25 The {@code Module} Attribute\n@@ -54,4 +58,3 @@\n-     * Valid flags include {@link java.lang.classfile.ClassFile#ACC_TRANSITIVE},\n-     * {@link java.lang.classfile.ClassFile#ACC_STATIC_PHASE},\n-     * {@link java.lang.classfile.ClassFile#ACC_SYNTHETIC} and\n-     * {@link java.lang.classfile.ClassFile#ACC_MANDATED}\n+     *\n+     * @see ModuleDescriptor.Requires#modifiers()\n+     * @see AccessFlag.Location#MODULE_REQUIRES\n@@ -62,1 +65,6 @@\n-     * {@return the access flags}\n+     * {@return the flags associated with this require declaration, as a set of\n+     * flag enums}\n+     *\n+     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @see ModuleDescriptor.Requires#accessFlags()\n+     * @see AccessFlag.Location#MODULE_REQUIRES\n@@ -70,0 +78,2 @@\n+     *\n+     * @see ModuleDescriptor.Requires#rawCompiledVersion()\n@@ -75,0 +85,1 @@\n+     *\n@@ -76,0 +87,1 @@\n+     * @see AccessFlag.Location#MODULE_REQUIRES\n@@ -83,0 +95,1 @@\n+     *\n@@ -85,1 +98,1 @@\n-     * @param requiresVersion the required version\n+     * @param requiresVersion the required version, may be {@code null}\n@@ -93,0 +106,1 @@\n+     *\n@@ -95,1 +109,3 @@\n-     * @param requiresVersion the required version\n+     * @param requiresVersion the required version, may be {@code null}\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_REQUIRES} location\n@@ -103,0 +119,1 @@\n+     *\n@@ -105,1 +122,1 @@\n-     * @param requiresVersion the required version\n+     * @param requiresVersion the required version, may be {@code null}\n@@ -113,0 +130,1 @@\n+     *\n@@ -115,1 +133,3 @@\n-     * @param requiresVersion the required version\n+     * @param requiresVersion the required version, may be {@code null}\n+     * @throws IllegalArgumentException if any flag cannot be applied to the\n+     *         {@link AccessFlag.Location#MODULE_REQUIRES} location\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleRequireInfo.java","additions":30,"deletions":10,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassModel;\n@@ -35,7 +39,5 @@\n- * Models the {@code ModuleResolution} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- *  * attribute, which captures resolution metadata for modules.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n- *\n- *  <p>The specification of the {@code ModuleResolution} attribute is:\n+ * Models the {@link Attributes#moduleResolution() ModuleResolution} attribute,\n+ * which can appear on classes that {@linkplain ClassModel#isModuleInfo()\n+ * represent} module descriptors, to capture resolution metadata for modules.\n+ * <p>\n+ * The specification of the {@code ModuleResolution} attribute is:\n@@ -61,3 +63,7 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has\n+ * {@linkplain AttributeStability#STATELESS no data dependency}.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.jlink\/\n+ * jlink and jmod tools} and used by the implementation.\n@@ -65,0 +71,3 @@\n+ * @see Attributes#moduleResolution()\n+ * @see ModuleHashesAttribute\n+ * @see ModuleTargetAttribute\n@@ -67,0 +76,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -72,2 +82,4 @@\n-     *  The value of the resolution_flags item is a mask of flags used to denote\n-     *  properties of module resolution. The flags are as follows:\n+     * {@return the module resolution flags}\n+     * <p>\n+     * The value of the resolution_flags item is a mask of flags used to denote\n+     * properties of module resolution. The flags are as follows:\n@@ -83,1 +95,0 @@\n-     * @return the module resolution flags\n@@ -89,0 +100,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassModel;\n@@ -37,7 +41,5 @@\n- * Models the {@code ModuleTarget} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- * attribute, which captures constraints on the target platform.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n- *\n- * <p>The specification of the {@code ModuleTarget} attribute is:\n+ * Models the {@link Attributes#moduleTarget() ModuleTarget} attribute, which\n+ * can appear on classes that {@linkplain ClassModel#isModuleInfo() represent}\n+ * module descriptors, to represent constraints on the target platform.\n+ * <p>\n+ * The specification of the {@code ModuleTarget} attribute is:\n@@ -56,3 +58,7 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.jlink\/\n+ * jlink and jmod tools} and used by the implementation.\n@@ -60,0 +66,3 @@\n+ * @see Attributes#moduleTarget()\n+ * @see ModuleHashesAttribute\n+ * @see ModuleResolutionAttribute\n@@ -62,0 +71,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -73,0 +83,1 @@\n+     *\n@@ -81,0 +92,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleTargetAttribute.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -38,4 +42,3 @@\n- * Models the {@code NestHost} attribute (JVMS {@jvms 4.7.28}), which can\n- * appear on classes to indicate that this class is a member of a nest.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#nestHost() NestHost} attribute (JVMS {@jvms\n+ * 4.7.28}), which indicates this class is a member of a nest and the host\n+ * class of the nest.\n@@ -43,3 +46,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -47,1 +50,2 @@\n- * The attribute was introduced in the Java SE Platform version 11.\n+ * The attribute was introduced in the Java SE Platform version 11, major\n+ * version {@value ClassFile#JAVA_11_VERSION}.\n@@ -49,0 +53,5 @@\n+ * @see Attributes#nestHost()\n+ * @see NestMembersAttribute\n+ * @see Class#getNestHost()\n+ * @see Class#isNestmateOf(Class)\n+ * @jvms 4.7.28 The {@code NestHost} Attribute\n@@ -57,0 +66,2 @@\n+     *\n+     * @see Class#getNestHost()\n@@ -62,0 +73,1 @@\n+     *\n@@ -70,0 +82,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/NestHostAttribute.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -29,0 +32,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -39,4 +43,3 @@\n- * Models the {@code NestMembers} attribute (JVMS {@jvms 4.7.29}), which can\n- * appear on classes to indicate that this class is the host of a nest.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#nestMembers() NestMembers} attribute (JVMS\n+ * {@jvms 4.7.29}), which indicates that this class is the host of a nest\n+ * and the other nest members.\n@@ -44,3 +47,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -48,1 +51,2 @@\n- * The attribute was introduced in the Java SE Platform version 11.\n+ * The attribute was introduced in the Java SE Platform version 11, major\n+ * version {@value ClassFile#JAVA_11_VERSION}.\n@@ -50,0 +54,5 @@\n+ * @see Attributes#nestMembers()\n+ * @see NestHostAttribute\n+ * @see Class#getNestMembers()\n+ * @see Class#isNestmateOf(Class)\n+ * @jvms 4.7.29 The {@code NestMembers} Attribute\n@@ -57,0 +66,2 @@\n+     *\n+     * @see Class#getNestMembers()\n@@ -62,0 +73,1 @@\n+     *\n@@ -70,0 +82,1 @@\n+     *\n@@ -78,0 +91,1 @@\n+     *\n@@ -79,0 +93,1 @@\n+     * @throws IllegalArgumentException if any of {@code nestMembers} is primitive\n@@ -86,0 +101,1 @@\n+     *\n@@ -87,0 +103,1 @@\n+     * @throws IllegalArgumentException if any of {@code nestMembers} is primitive\n@@ -89,1 +106,1 @@\n-        \/\/ List view, since ref to nestMembers is temporary\n+        \/\/ List version does defensive copy\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/NestMembersAttribute.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -29,0 +32,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -39,4 +43,5 @@\n- * Models the {@code PermittedSubclasses} attribute (JVMS {@jvms 4.7.31}), which can\n- * appear on classes to indicate which classes may extend this class.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#permittedSubclasses() PermittedSubclasses}\n+ * attribute (JVMS {@jvms 4.7.31}), which indicates this class or interface\n+ * is {@linkplain java.compiler\/javax.lang.model.element.Modifier#SEALED sealed},\n+ * and which classes or interfaces may extend or implement this class or\n+ * interface.\n@@ -44,3 +49,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -48,1 +53,2 @@\n- * The attribute was introduced in the Java SE Platform version 17.\n+ * The attribute was introduced in the Java SE Platform version 17, major\n+ * version {@value ClassFile#JAVA_17_VERSION}.\n@@ -50,0 +56,6 @@\n+ * @see Attributes#permittedSubclasses()\n+ * @see Class#isSealed()\n+ * @see Class#getPermittedSubclasses()\n+ * @jls 8.1.1.2 {@code sealed}, {@code non-sealed}, and {@code final} Classes\n+ * @jls 9.1.1.4 {@code sealed} and {@code non-sealed} Interfaces\n+ * @jvms 4.7.31 The {@code PermittedSubclasses} Attribute\n@@ -52,0 +64,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -57,1 +70,3 @@\n-     * {@return the list of permitted subclasses}\n+     * {@return the list of permitted subclasses or subinterfaces}\n+     *\n+     * @see Class#getPermittedSubclasses()\n@@ -63,1 +78,2 @@\n-     * @param permittedSubclasses the permitted subclasses\n+     *\n+     * @param permittedSubclasses the permitted subclasses or subinterfaces\n@@ -71,1 +87,2 @@\n-     * @param permittedSubclasses the permitted subclasses\n+     *\n+     * @param permittedSubclasses the permitted subclasses or subinterfaces\n@@ -79,1 +96,3 @@\n-     * @param permittedSubclasses the permitted subclasses\n+     *\n+     * @param permittedSubclasses the permitted subclasses or subinterfaces\n+     * @throws IllegalArgumentException if any of {@code permittedSubclasses} is primitive\n@@ -87,1 +106,3 @@\n-     * @param permittedSubclasses the permitted subclasses\n+     *\n+     * @param permittedSubclasses the permitted subclasses or subinterfaces\n+     * @throws IllegalArgumentException if any of {@code permittedSubclasses} is primitive\n@@ -90,1 +111,1 @@\n-        \/\/ List view, since ref to nestMembers is temporary\n+        \/\/ List version does defensive copy\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/PermittedSubclassesAttribute.java","additions":36,"deletions":15,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +33,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -36,4 +40,3 @@\n- * Models the {@code Record} attribute (JVMS {@jvms 4.7.30}), which can\n- * appear on classes to indicate that this class is a record class.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#record() Record} attribute (JVMS {@jvms 4.7.30}),\n+ * which indicates that this class is a record class and the record\n+ * components.\n@@ -41,3 +44,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -45,1 +48,2 @@\n- * The attribute was introduced in the Java SE Platform version 16.\n+ * The attribute was introduced in the Java SE Platform version 16, major\n+ * version {@value ClassFile#JAVA_16_VERSION}.\n@@ -47,0 +51,4 @@\n+ * @see Attributes#record()\n+ * @see Class#isRecord()\n+ * @see Class#getRecordComponents()\n+ * @jvms 4.7.30 The {@code Record} Attribute\n@@ -54,0 +62,2 @@\n+     *\n+     * @see Class#getRecordComponents()\n@@ -59,0 +69,1 @@\n+     *\n@@ -67,0 +78,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RecordAttribute.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.reflect.RecordComponent;\n@@ -39,1 +40,7 @@\n- * Models a single record component in the {@link java.lang.classfile.attribute.RecordAttribute}.\n+ * Models a single record component in the {@link RecordAttribute}.\n+ * <p>\n+ * {@link SignatureAttribute}, {@link RuntimeVisibleAnnotationsAttribute},\n+ * {@link RuntimeInvisibleAnnotationsAttribute}, {@link\n+ * RuntimeVisibleTypeAnnotationsAttribute}, and {@link\n+ * RuntimeInvisibleTypeAnnotationsAttribute} are the only predefined attributes\n+ * that may exist on record components.\n@@ -41,0 +48,3 @@\n+ * @see RecordAttribute#components()\n+ * @see RecordComponent\n+ * @jvms 4.7.30 The {@code Record} Attribute\n@@ -48,0 +58,2 @@\n+     *\n+     * @see RecordComponent#getName()\n@@ -52,1 +64,7 @@\n-     * {@return the field descriptor of this component}\n+     * {@return the field descriptor string of this component}\n+     *\n+     * @apiNote\n+     * A record component may have a generic type; this information is stored\n+     * in the {@link SignatureAttribute Signature} attribute in this component.\n+     *\n+     * @see RecordComponent#getType()\n@@ -57,1 +75,7 @@\n-     * {@return the field descriptor of this component, as a {@linkplain ClassDesc}}\n+     * {@return the symbolic field descriptor of this component}\n+     *\n+     * @apiNote\n+     * A record component may have a generic type; this information is stored\n+     * in the {@link SignatureAttribute Signature} attribute in this component.\n+     *\n+     * @see RecordComponent#getType()\n@@ -65,0 +89,1 @@\n+     *\n@@ -66,1 +91,1 @@\n-     * @param descriptor the component field descriptor\n+     * @param descriptor the component field descriptor string\n@@ -77,0 +102,1 @@\n+     *\n@@ -78,1 +104,1 @@\n-     * @param descriptor the component field descriptor\n+     * @param descriptor the component field descriptor sting\n@@ -89,0 +115,1 @@\n+     *\n@@ -90,1 +117,1 @@\n-     * @param descriptor the component field descriptor\n+     * @param descriptor the component symbolic field descriptor\n@@ -103,0 +130,1 @@\n+     *\n@@ -104,1 +132,1 @@\n-     * @param descriptor the component field descriptor\n+     * @param descriptor the component symbolic field descriptor\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RecordComponentInfo.java","additions":36,"deletions":8,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.reflect.AnnotatedElement;\n@@ -39,4 +39,5 @@\n- * Models the {@code RuntimeInvisibleAnnotations} attribute (JVMS {@jvms 4.7.17}), which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n- * {@link java.lang.classfile.MethodElement} when traversing the corresponding model type.\n+ * Models the {@link Attributes#runtimeInvisibleAnnotations()\n+ * RuntimeInvisibleAnnotations} attribute (JVMS {@jvms 4.7.17}), which stores\n+ * declaration annotations on this structure that are visible to {@code\n+ * class} file consumers but are not visible to {@linkplain AnnotatedElement\n+ * core reflection}.\n@@ -44,3 +45,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute appears on classes, fields, methods, and record components,\n+ * and does not permit {@linkplain AttributeMapper#allowMultiple multiple\n+ * instances} in one structure.  It has a data dependency on the {@linkplain\n+ * AttributeStability#CP_REFS constant pool}.\n@@ -48,1 +50,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -50,0 +53,5 @@\n+ * @see Attributes#runtimeInvisibleAnnotations()\n+ * @see java.compiler\/javax.lang.model.element.Element\n+ * @see ElementType\n+ * @see RetentionPolicy#CLASS\n+ * @jvms 4.7.17 The {@code RuntimeInvisibleAnnotations} Attribute\n@@ -52,0 +60,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -59,1 +68,1 @@\n-     * {@return the non-runtime-visible annotations on this class, field, or method}\n+     * {@return the run-time invisible declaration annotations on this structure}\n@@ -65,0 +74,1 @@\n+     *\n@@ -73,0 +83,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleAnnotationsAttribute.java","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n@@ -30,0 +32,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -31,1 +37,1 @@\n-import java.lang.classfile.MethodModel;\n+import java.lang.reflect.AnnotatedElement;\n@@ -38,3 +44,5 @@\n- * Models the {@code RuntimeInvisibleParameterAnnotations} attribute\n- * (JVMS {@jvms 4.7.19}), which can appear on methods. Delivered as a {@link\n- * java.lang.classfile.MethodElement} when traversing a {@link MethodModel}.\n+ * Models the {@link Attributes#runtimeInvisibleParameterAnnotations()\n+ * RuntimeInvisibleParameterAnnotations} attribute (JVMS {@jvms 4.7.19}), which\n+ * stores declaration annotations on the method parameters of this method\n+ * that are visible to {@code class} file consumers but are not visible to\n+ * {@linkplain AnnotatedElement core reflection}.\n@@ -42,3 +50,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -46,1 +54,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -48,0 +57,4 @@\n+ * @see Attributes#runtimeInvisibleParameterAnnotations()\n+ * @see ElementType#PARAMETER\n+ * @see RetentionPolicy#CLASS\n+ * @jvms 4.7.19 The {@code RuntimeInvisibleParameterAnnotations} Attribute\n@@ -56,1 +69,1 @@\n-     * {@return the list of annotations corresponding to each method parameter}\n+     * {@return the list of run-time invisible annotations on the method parameters}\n@@ -58,1 +71,7 @@\n-     * parameter.\n+     * formal parameter, but note that some synthetic or implicit parameters\n+     * may be omitted by this list.  If a parameter has no annotations, that\n+     * element is left empty, but is not omitted; thus, the list will never be\n+     * truncated because trailing parameters are not annotated.\n+     *\n+     * @see java.lang.reflect##LanguageJvmModel Java programming language and\n+     *      JVM modeling in core reflection\n@@ -64,1 +83,6 @@\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     * The {@code parameterAnnotations} list should not be truncated, and must\n+     * have a length equal to the number of formal parameters; elements for\n+     * unannotated parameters may be empty, but may not be omitted.  It may omit\n+     * some synthetic or implicit parameters.\n+     *\n+     * @param parameterAnnotations a list of run-time invisible annotations for each parameter\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleParameterAnnotationsAttribute.java","additions":36,"deletions":12,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,5 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n-import java.lang.classfile.TypeAnnotation;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.reflect.AnnotatedType;\n@@ -40,5 +39,7 @@\n- * Models the {@code RuntimeInvisibleTypeAnnotations} attribute (JVMS {@jvms 4.7.21}), which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement},\n- * {@link java.lang.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n+ * Models the {@link Attributes#runtimeInvisibleTypeAnnotations()\n+ * RuntimeInvisibleTypeAnnotations} attribute (JVMS {@jvms 4.7.21}), which\n+ * stores type-use annotations for the annotated uses of types in this\n+ * structure that are visible to {@code class} file consumers but are not\n+ * visible to {@linkplain AnnotatedType core reflection}.  Its delivery in the\n+ * traversal of a {@link CodeModel} may be toggled by {@link\n+ * ClassFile.DebugElementsOption}.\n@@ -46,3 +47,6 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute appears on classes, fields, methods, {@code Code} attributes,\n+ * and record components, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in one structure.  It has a\n+ * data dependency on {@linkplain AttributeStability#UNSTABLE arbitrary indices}\n+ * in the {@code class} file format, so users must take great care to ensure\n+ * this attribute is still correct after a {@code class} file has been transformed.\n@@ -50,1 +54,2 @@\n- * The attribute was introduced in the Java SE Platform version 8.\n+ * The attribute was introduced in the Java SE Platform version 8, major version\n+ * {@value ClassFile#JAVA_8_VERSION}.\n@@ -52,0 +57,6 @@\n+ * @see Attributes#runtimeInvisibleTypeAnnotations()\n+ * @see java.compiler\/javax.lang.model.type.TypeMirror\n+ * @see ElementType#TYPE_PARAMETER\n+ * @see ElementType#TYPE_USE\n+ * @see RetentionPolicy#CLASS\n+ * @jvms 4.7.21 The {@code RuntimeInvisibleTypeAnnotations} Attribute\n@@ -54,0 +65,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -61,1 +73,2 @@\n-     * {@return the non-runtime-visible type annotations on parts of this class, field, or method}\n+     * {@return the run-time invisible annotations on uses of types in this\n+     * structure}\n@@ -67,0 +80,1 @@\n+     *\n@@ -75,0 +89,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleTypeAnnotationsAttribute.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import java.lang.classfile.Annotation;\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.reflect.AnnotatedElement;\n@@ -39,4 +39,4 @@\n- * Models the {@code RuntimeVisibleAnnotations} attribute (JVMS {@jvms 4.7.16}), which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n- * {@link java.lang.classfile.MethodElement} when traversing the corresponding model type.\n+ * Models the {@link Attributes#runtimeVisibleAnnotations()\n+ * RuntimeVisibleAnnotations} attribute (JVMS {@jvms 4.7.16}), which stores\n+ * declaration annotations on this structure that are visible to both\n+ * {@code class} file consumers and {@linkplain AnnotatedElement core reflection}.\n@@ -44,3 +44,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute appears on classes, fields, methods, and record components,\n+ * and does not permit {@linkplain AttributeMapper#allowMultiple multiple\n+ * instances} in one structure.  It has a data dependency on the {@linkplain\n+ * AttributeStability#CP_REFS constant pool}.\n@@ -48,1 +49,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -50,0 +52,6 @@\n+ * @see Attributes#runtimeVisibleAnnotations()\n+ * @see java.compiler\/javax.lang.model.element.Element\n+ * @see AnnotatedElement\n+ * @see ElementType\n+ * @see RetentionPolicy#RUNTIME\n+ * @jvms 4.7.16 The {@code RuntimeVisibleAnnotations} Attribute\n@@ -52,0 +60,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -59,1 +68,1 @@\n-     * {@return the runtime-visible annotations on this class, field, or method}\n+     * {@return the run-time visible declaration annotations on this structure}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.java","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n@@ -30,0 +32,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -31,1 +37,2 @@\n-import java.lang.classfile.MethodModel;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Executable;\n@@ -38,7 +45,9 @@\n- * Models the {@code RuntimeVisibleParameterAnnotations} attribute (JVMS {@jvms 4.7.18}), which\n- * can appear on methods. Delivered as a {@link java.lang.classfile.MethodElement}\n- * when traversing a {@link MethodModel}.\n- *\n- * @apiNote The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * Models the {@link Attributes#runtimeVisibleParameterAnnotations()\n+ * RuntimeVisibleParameterAnnotations} attribute (JVMS {@jvms 4.7.18}), which\n+ * stores declaration annotations on the method parameters of this method\n+ * that are visible to both {@code class} file consumers and {@linkplain\n+ * AnnotatedElement core reflection}.\n+ * <p>\n+ * This attribute only appears on methods, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a method.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n@@ -46,1 +55,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -48,0 +58,5 @@\n+ * @see Attributes#runtimeVisibleParameterAnnotations()\n+ * @see Executable#getParameterAnnotations()\n+ * @see ElementType#PARAMETER\n+ * @see RetentionPolicy#RUNTIME\n+ * @jvms 4.7.18 The {@code RuntimeVisibleParameterAnnotations} Attribute\n@@ -56,1 +71,1 @@\n-     * {@return the list of annotations corresponding to each method parameter}\n+     * {@return the list of run-time visible annotations on the method parameters}\n@@ -58,1 +73,7 @@\n-     * parameter.\n+     * formal parameter, but note that some synthetic or implicit parameters\n+     * may be omitted by this list.  If a parameter has no annotations, that\n+     * element is left empty, but is not omitted; thus, the list will never be\n+     * truncated because trailing parameters are not annotated.\n+     *\n+     * @see java.lang.reflect##LanguageJvmModel Java programming language and\n+     *      JVM modeling in core reflection\n@@ -64,1 +85,6 @@\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     * The {@code parameterAnnotations} list should not be truncated, and must\n+     * have a length equal to the number of formal parameters; elements for\n+     * unannotated parameters may be empty, but may not be omitted.  It may omit\n+     * some synthetic or implicit parameters.\n+     *\n+     * @param parameterAnnotations a list of run-time visible annotations for each parameter\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleParameterAnnotationsAttribute.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,5 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n-import java.lang.classfile.TypeAnnotation;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.reflect.AnnotatedType;\n@@ -40,5 +39,6 @@\n- * Models the {@code RuntimeVisibleTypeAnnotations} attribute (JVMS {@jvms 4.7.20}), which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement},\n- * {@link java.lang.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n+ * Models the {@link Attributes#runtimeVisibleTypeAnnotations()\n+ * RuntimeVisibleTypeAnnotations} attribute (JVMS {@jvms 4.7.20}), which\n+ * stores type-use annotations for the annotated uses of types in this\n+ * structure that are visible to both {@code class} file consumers and\n+ * {@linkplain AnnotatedType core reflection}.  Its delivery in the traversal of\n+ * a {@link CodeModel} may be toggled by {@link ClassFile.DebugElementsOption}.\n@@ -46,3 +46,6 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute appears on classes, fields, methods, {@code Code} attributes,\n+ * and record components, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in one structure.  It has a\n+ * data dependency on {@linkplain AttributeStability#UNSTABLE arbitrary indices}\n+ * in the {@code class} file format, so users must take great care to ensure\n+ * this attribute is still correct after a {@code class} file has been transformed.\n@@ -50,1 +53,2 @@\n- * The attribute was introduced in the Java SE Platform version 8.\n+ * The attribute was introduced in the Java SE Platform version 8, major version\n+ * {@value ClassFile#JAVA_8_VERSION}.\n@@ -52,0 +56,7 @@\n+ * @see Attributes#runtimeVisibleTypeAnnotations()\n+ * @see java.compiler\/javax.lang.model.type.TypeMirror\n+ * @see AnnotatedType\n+ * @see ElementType#TYPE_PARAMETER\n+ * @see ElementType#TYPE_USE\n+ * @see RetentionPolicy#RUNTIME\n+ * @jvms 4.7.20 the {@code RuntimeVisibleTypeAnnotations} Attribute\n@@ -54,0 +65,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -61,1 +73,2 @@\n-     * {@return the runtime-visible type annotations on parts of this class, field, or method}\n+     * {@return the run-time visible annotations on uses of types in this\n+     * structure}\n@@ -67,0 +80,1 @@\n+     *\n@@ -75,0 +89,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleTypeAnnotationsAttribute.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.lang.reflect.Field;\n+import java.lang.reflect.RecordComponent;\n@@ -36,5 +38,2 @@\n- * Models the {@code Signature} attribute (JVMS {@jvms 4.7.9}), which\n- * can appear on classes, methods, or fields. Delivered as a\n- * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n- * {@link java.lang.classfile.MethodElement} when traversing\n- * the corresponding model type.\n+ * Models the {@link Attributes#signature() Signature} attribute (JVMS {@jvms\n+ * 4.7.9}), which indicates the generic signature of this structure.\n@@ -42,3 +41,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute appears on classes, fields, methods, and record components,\n+ * and does not permit {@linkplain AttributeMapper#allowMultiple multiple\n+ * instances} in one structure.  It has a data dependency on the {@linkplain\n+ * AttributeMapper.AttributeStability#CP_REFS constant pool}.\n@@ -46,1 +46,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -48,0 +49,4 @@\n+ * @see Signature\n+ * @see ClassSignature\n+ * @see MethodSignature\n+ * @jvms 4.7.9 The {@code Signature} Attribute\n@@ -56,1 +61,7 @@\n-     * {@return the signature for the class, method, or field}\n+     * {@return the signature string for the class, method, field, or record\n+     * component}  It is a class signature string if this attribute is on a\n+     * class, a method signature string if this attribute is on a method, or\n+     * a field signature string if this attribute is on a field or a record\n+     * component.\n+     *\n+     * @jvms 4.7.9.1 Signatures\n@@ -61,1 +72,2 @@\n-     * Parse the signature as a class signature.\n+     * Parses the signature string as a class signature.\n+     *\n@@ -63,0 +75,2 @@\n+     * @throws IllegalArgumentException if the signature string is not a valid\n+     *         class signature string\n@@ -69,1 +83,2 @@\n-     * Parse the signature as a method signature.\n+     * Parse the signature string as a method signature.\n+     *\n@@ -71,0 +86,2 @@\n+     * @throws IllegalArgumentException if the signature string is not a valid\n+     *         method signature string\n@@ -77,1 +94,2 @@\n-     * Parse the signature as a type signature.\n+     * Parses the signature string as a Java type signature.\n+     *\n@@ -79,0 +97,4 @@\n+     * @throws IllegalArgumentException if the signature string is not a valid\n+     *         Java type signature string\n+     * @see Field#getGenericType()\n+     * @see RecordComponent#getGenericType()\n@@ -86,1 +108,2 @@\n-     * @param classSignature the signature\n+     *\n+     * @param classSignature the class signature\n@@ -94,1 +117,2 @@\n-     * @param methodSignature the signature\n+     *\n+     * @param methodSignature the method signature\n@@ -101,2 +125,3 @@\n-     * {@return a {@code Signature} attribute}\n-     * @param signature the signature\n+     * {@return a {@code Signature} attribute for a field or a record component}\n+     *\n+     * @param signature the Java type signature\n@@ -110,1 +135,2 @@\n-     * @param signature the signature\n+     *\n+     * @param signature the signature string\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SignatureAttribute.java","additions":45,"deletions":19,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.DataInput;\n@@ -29,0 +30,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,0 +34,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -35,3 +40,3 @@\n- * Models the {@code SourceDebugExtension} attribute.\n- * Delivered as a {@link java.lang.classfile.ClassElement} when traversing the elements of\n- * a {@link java.lang.classfile.ClassModel}.\n+ * Models the {@link Attributes#sourceDebugExtension() SourceDebugExtension}\n+ * attribute (JVMS {@jvms 4.7.11}), which stores arbitrary {@linkplain\n+ * DataInput##modified-utf-8 modified UTF-8} data.\n@@ -39,3 +44,3 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has\n+ * {@linkplain AttributeStability#STATELESS no data dependency}.\n@@ -43,1 +48,2 @@\n- * The attribute was introduced in the Java SE Platform version 5.0.\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -45,0 +51,2 @@\n+ * @see Attributes#sourceDebugExtension()\n+ * @jvms 4.7.11 The {@code SourceDebugExtension} Attribute\n@@ -52,1 +60,2 @@\n-     * {@return the debug extension payload}\n+     * {@return the debug extension payload}  The payload may denote a string\n+     * longer than that which can be represented with a {@link String}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,1 +33,1 @@\n-import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -38,3 +41,3 @@\n- * Models the {@code SourceFile} attribute (JVMS {@jvms 4.7.10}), which\n- * can appear on classes. Delivered as a {@link java.lang.classfile.ClassElement}\n- * when traversing a {@link ClassModel}.\n+ * Models the {@link Attributes#sourceFile() SourceFile} attribute (JVMS {@jvms\n+ * 4.7.10}), which indicates the name of the source file from which this {@code\n+ * class} file was compiled.\n@@ -42,3 +45,6 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a data\n+ * dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0, major\n+ * version {@value ClassFile#JAVA_5_VERSION}.\n@@ -46,0 +52,2 @@\n+ * @see Attributes#sourceFile()\n+ * @jvms 4.7.10 The {@code SourceFile} Attribute\n@@ -59,0 +67,1 @@\n+     *\n@@ -67,0 +76,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceFileAttribute.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n@@ -30,1 +33,0 @@\n-import java.lang.classfile.ClassModel;\n@@ -38,3 +40,3 @@\n- * Models the {@code SourceID} attribute, which can\n- * appear on classes. Delivered as a {@link java.lang.classfile.ClassElement} when\n- * traversing a {@link ClassModel}.\n+ * Models the {@link Attributes#sourceId() SourceID} attribute, which records\n+ * the last modified time of the source file from which this {@code class} file\n+ * was compiled.\n@@ -42,3 +44,7 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute only appears on classes, and does not permit {@linkplain\n+ * AttributeMapper#allowMultiple multiple instances} in a class.  It has a\n+ * data dependency on the {@linkplain AttributeStability#CP_REFS constant pool}.\n+ * <p>\n+ * This attribute is not predefined in the Java SE Platform.  This is a\n+ * JDK-specific nonstandard attribute produced by the {@linkplain jdk.compiler\/\n+ * implementation of the system Java compiler}.\n@@ -46,0 +52,3 @@\n+ * @see Attributes#sourceId()\n+ * @see CompilationIDAttribute\n+ * @see CharacterRangeTableAttribute\n@@ -48,0 +57,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n@@ -54,2 +64,2 @@\n-     * source file (as reported by the filesystem, in milliseconds) when the\n-     * classfile is compiled.\n+     * source file (as reported by the file system, in milliseconds) when this\n+     * {@code class} file is compiled.\n@@ -61,0 +71,1 @@\n+     *\n@@ -69,0 +80,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceIDAttribute.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.Opcode;\n@@ -30,0 +32,1 @@\n+import java.lang.classfile.instruction.BranchInstruction;\n@@ -37,1 +40,3 @@\n- * Models stack map frame of {@code StackMapTable} attribute (JVMS {@jvms 4.7.4}).\n+ * Models a stack map frame in a {@link StackMapTableAttribute StackMapTable}\n+ * attribute (JVMS {@jvms 4.7.4}).  A stack map frame must appear at the\n+ * beginning of each basic block in a method (JVMS {@jvms 4.10.1}).\n@@ -39,0 +44,11 @@\n+ * @apiNote\n+ * In general, a stack map frame should be defined for each target of a\n+ * {@link BranchInstruction}, or unreachable code right after an unconditional\n+ * branch instruction like {@link Opcode#GOTO goto}.  The automatic stack map\n+ * generation cannot handle unreachable code right after an unconditional jump;\n+ * The {@link ClassFile.DeadCodeOption} allows substituting such code, or\n+ * advanced users can provide their own stack maps for dead code.\n+ *\n+ * @see StackMapTableAttribute#entries()\n+ * @jvms 4.7.4 The {@code StackMapTable} Attribute\n+ * @jvms 4.10.1 Verification by Type Checking\n@@ -45,1 +61,1 @@\n-     * {@return the frame compact form type}\n+     * {@return the raw {@code u1 frame_type}}\n@@ -60,1 +76,1 @@\n-     * {@return the expanded stack types}\n+     * {@return the expanded operand stack types}\n@@ -66,0 +82,1 @@\n+     *\n@@ -73,1 +90,0 @@\n-\n@@ -78,1 +94,1 @@\n-     * The type of a stack value.\n+     * The type of a stack or local variable value.\n@@ -80,0 +96,3 @@\n+     * @see #locals()\n+     * @see #stack()\n+     * @jvms 4.7.4 The {@code StackMapTable} Attribute\n@@ -128,1 +147,1 @@\n-        \/** verification type top *\/\n+        \/** Verification type top. *\/\n@@ -131,1 +150,1 @@\n-        \/** verification type int *\/\n+        \/** Verification type int. *\/\n@@ -134,1 +153,1 @@\n-        \/** verification type float *\/\n+        \/** Verification type float. *\/\n@@ -137,1 +156,1 @@\n-        \/** verification type double *\/\n+        \/** Verification type double. *\/\n@@ -140,1 +159,1 @@\n-        \/** verification type long *\/\n+        \/** Verification type long. *\/\n@@ -143,1 +162,1 @@\n-        \/** verification type null *\/\n+        \/** Verification type null. *\/\n@@ -146,1 +165,1 @@\n-        \/** verification type uninitializedThis *\/\n+        \/** Verification type uninitializedThis. *\/\n@@ -165,0 +184,1 @@\n+     * @jvms 4.7.4 The {@code StackMapTable} Attribute\n@@ -193,1 +213,1 @@\n-         * {@return the class of the object}\n+         * {@return the class of the object, as a symbolic descriptor}\n@@ -203,0 +223,1 @@\n+     * @jvms 4.7.4 The {@code StackMapTable} Attribute\n@@ -209,1 +230,2 @@\n-         * {@return the {@code new} instruction position that creates this unitialized object}\n+         * {@return the label immediately before the {@link Opcode#NEW new}\n+         * instruction that creates this uninitialized object}\n@@ -214,2 +236,3 @@\n-         * {@return an unitialized verification type info}\n-         * @param newTarget the {@code new} instruction position that creates this unitialized object\n+         * {@return an uninitialized verification type info}\n+         * @param newTarget the label immediately before the {@link Opcode#NEW new}\n+         *                  instruction that creates this uninitialized object\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/StackMapFrameInfo.java","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -30,0 +34,1 @@\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n@@ -36,2 +41,3 @@\n- * Models the {@code StackMapTable} attribute (JVMS {@jvms 4.7.4}), which can appear\n- * on a {@code Code} attribute.\n+ * Models the {@link Attributes#stackMapTable() StackMapTable} attribute (JVMS\n+ * {@jvms 4.7.4}), which is used for verification by type checking ({@jvms\n+ * 4.10.1}).\n@@ -39,3 +45,4 @@\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n+ * This attribute is not delivered in the traversal of a {@link CodeAttribute},\n+ * but instead automatically generated upon {@code class} file writing.\n+ * Advanced users can supply their own stack maps according to the {@link\n+ * ClassFile.StackMapsOption}.\n@@ -43,1 +50,7 @@\n- * The attribute was introduced in the Java SE Platform version 6.\n+ * This attribute only appears on {@code Code} attributes, and does not permit\n+ * {@linkplain AttributeMapper#allowMultiple multiple instances} in a {@code\n+ * Code} attribute.  It has a data dependency on {@linkplain\n+ * AttributeStability#LABELS labels} in the {@code code} array.\n+ * <p>\n+ * This attribute was introduced in the Java SE Platform version 6, major\n+ * version {@value ClassFile#JAVA_6_VERSION}.\n@@ -45,0 +58,5 @@\n+ * @see Attributes#stackMapTable()\n+ * @see DiscontinuedInstruction.JsrInstruction\n+ * @see DiscontinuedInstruction.RetInstruction\n+ * @jvms 4.7.4 The {@code StackMapTable} Attribute\n+ * @jvms 4.10.1 Verification by Type Checking\n@@ -58,0 +76,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/StackMapTableAttribute.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n+import java.lang.reflect.AccessFlag;\n@@ -37,4 +36,2 @@\n- * Models the {@code Synthetic} attribute (JVMS {@jvms 4.7.8}), which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n+ * Models the {@link Attributes#synthetic() Synthetic} attribute (JVMS {@jvms\n+ * 4.7.8}), which marks a class member as implementation-specific artifacts.\n@@ -42,1 +39,13 @@\n- * The attribute permits multiple instances in a given location.\n+ * This attribute can appear on classes, methods, and fields, and permits\n+ * {@linkplain AttributeMapper#allowMultiple multiple instances} in a structure.\n+ * It has {@linkplain AttributeStability#STATELESS no data dependency}.\n+ * <p>\n+ * This attribute was introduced in the Java SE Platform version 1.1, major\n+ * version {@value ClassFile#JAVA_1_VERSION}.\n+ *\n+ * @apiNote\n+ * This attribute has been largely superseded by the {@link AccessFlag#SYNTHETIC\n+ * ACC_SYNTHETIC} modifier in newer {@code class} files.  See {@link\n+ * java.compiler\/javax.lang.model.util.Elements.Origin} for a more in-depth\n+ * description about the differences between synthetic and implicit (mandated)\n+ * constructs generated by compilers.\n@@ -44,0 +53,3 @@\n+ * @see Attributes#synthetic()\n+ * @see AccessFlag#SYNTHETIC\n+ * @jvms 4.7.8 The {@code Synthetic} Attribute\n@@ -46,0 +58,1 @@\n+@SuppressWarnings(\"doclint:reference\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SyntheticAttribute.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,2 @@\n-import java.lang.classfile.Attribute;\n-import java.lang.classfile.ClassElement;\n-import java.lang.classfile.FieldElement;\n-import java.lang.classfile.MethodElement;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AttributeMapper.AttributeStability;\n@@ -36,1 +34,8 @@\n- * Models an unknown attribute on a class, method, or field.\n+ * Models an unknown attribute read from a {@code class} file.  An attribute is\n+ * unknown if it is not recognized by one of the mappers in {@link Attributes}\n+ * and is not recognized by the {@link ClassFile.AttributesProcessingOption}.\n+ * <p>\n+ * This attribute is not delivered in the traversal of a {@link CodeModel}.\n+ * <p>\n+ * An unknown attribute may appear anywhere where an attribute may appear, and\n+ * has an {@linkplain AttributeStability#UNKNOWN unknown} data dependency.\n@@ -38,0 +43,1 @@\n+ * @see CustomAttribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/UnknownAttribute.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * <h2>Provides interfaces describing classfile attributes for the {@link java.lang.classfile} library.<\/h2>\n+ * <h2>Provides interfaces describing {@code class} file attributes for the {@link java.lang.classfile} library.<\/h2>\n@@ -29,1 +29,7 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing classfile attributes.\n+ * The {@code java.lang.classfile.attribute} package contains interfaces describing specific {@code class} file attributes.\n+ * General and user-defined attributes reside in {@link java.lang.classfile}, including {@link Attributes}, {@link\n+ * AttributeMapper}, and {@link CustomAttribute}.\n+ * <p>\n+ * Unless otherwise specified, passing {@code null} or an array or collection containing a {@code null} element as an\n+ * argument to a constructor or method of any Class-File API class or interface will cause a {@link NullPointerException}\n+ * to be thrown.\n@@ -31,0 +37,47 @@\n+ * <h2 id=\"reading\">Reading attributes<\/h2>\n+ * The general way to obtain attributes is through {@link AttributedElement}.  In addition to that, many attributes\n+ * implement {@link ClassElement}, {@link FieldElement}, {@link MethodElement}, or {@link CodeElement}, and these\n+ * attributes are generally delivered when their enclosing elements are viewed as {@link CompoundElement}s in streaming\n+ * traversal, unless otherwise specified.\n+ * <p>\n+ * When read from {@code class} files, the attributes are lazily inflated; the contents of these attributes are not\n+ * evaluated to speed up parsing, and user-defined attributes from {@link AttributeMapper#readAttribute} should be\n+ * lazy too.  Contents to users interest can be read on demand, so errors in one attribute does not prevent access to\n+ * other attributes.\n+ * <p>\n+ * Attribute contents are represented with constant pool entries to closely represent the original {@code class} file.\n+ * These entries provide conversion methods to view them as validated symbolic descriptors.  Check {@link\n+ * java.lang.classfile.constantpool} for effective reading of constant pool entries, which can affect attribute reading\n+ * speed as well.  See this example of checking the presence of a {@link Deprecated} annotation:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"hasDeprecated\"}\n+ * <p>\n+ * Due to the lazy nature of {@code class} file parsing, {@link IllegalArgumentException} indicating malformed\n+ * {@code class} file data can be thrown at any method invocation, either from the attribute itself due to structural\n+ * corruption, or from a constant pool entry referred by the attribute.  Some attributes, such as annotation attributes,\n+ * must be ignored silently if they are malformed per JVMS; as a result, attribute processing code should anticipate\n+ * {@link IllegalArgumentException} and skip, instead of propagating the failure, on such attributes.\n+ *\n+ * <h2 id=\"writing\">Writing attributes<\/h2>\n+ * Most attributes implement at least one of {@link ClassElement}, {@link FieldElement}, {@link MethodElement}, or\n+ * {@link CodeElement}, so they can be sent to the respective {@link ClassFileBuilder} to be written as part of those\n+ * structure.  Attributes define if they can {@linkplain AttributeMapper#allowMultiple() appear multiple times} in one\n+ * structure; if they cannot, the last attribute instance supplied to the builder is the one written to the final\n+ * structure.  Some attributes, such as {@link BootstrapMethodsAttribute}, implement none of those interfaces.  They are\n+ * created through other means, specified in the modeling interface for each of the attributes.  Attributes for a {@link\n+ * RecordComponentInfo} are supplied through its factory methods.\n+ * <p>\n+ * The attribute factories generally have two sets of factory methods: one that accepts symbolic information\n+ * representing the uses, and another that accepts constant pool entries.  Most of time, the symbolic factories are\n+ * sufficent, but the constant pool entry ones can be used for fine-grained control over {@code class} file generation;\n+ * see \"{@linkplain java.lang.classfile.constantpool##writing Writing the constant pool entries}\" for more details.\n+ * <p>\n+ * Many attributes can be bulk-copied if the data it depends on does not change; this information is exposed in {@link\n+ * AttributeMapper#stability()} and is documented for each attribute on its modeling interface.  Ability to bulk-copy\n+ * can massively speed up {@code class} file generation or transformation.  In addition, in conjunction with {@link\n+ * ClassFile.AttributesProcessingOption}, attributes read from other {@code class} files that cannot confirm its data\n+ * is still valid for the currently building {@code class} file may be dropped.\n+ *\n+ * @see Attribute\n+ * @see AttributeMapper\n+ * @see Attributes\n+ * @jvms 4.7 Attributes\n@@ -35,0 +88,13 @@\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.AttributedElement;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileBuilder;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CompoundElement;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/package-info.java","additions":69,"deletions":3,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute.snippet;\n+\n+import java.lang.classfile.AttributedElement;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.util.List;\n+\n+class PackageSnippets {\n+\n+    \/\/ @start region=hasDeprecated\n+    private static final String DEPRECATED_DESC = Deprecated.class.descriptorString();\n+\n+    static boolean hasDeprecated(AttributedElement element) {\n+        var annotations = element.findAttribute(Attributes.runtimeVisibleAnnotations())\n+                .map(RuntimeVisibleAnnotationsAttribute::annotations)\n+                .orElse(List.of());\n+        for (var anno : annotations) {\n+            \/\/ equalsString reduces extra computations for raw UTF-8 entries\n+            if (anno.className().equalsString(DEPRECATED_DESC)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \/\/ @end\n+\n+    \/\/ @start region=reuseStackMaps\n+    static void reuseStackMaps(MethodModel oldMethod, CodeBuilder cob) {\n+        var oldCode = oldMethod.code().orElseThrow();\n+        \/\/ The StackMapTable attribute is not streamed in CodeModel, so this is\n+        \/\/ the only way to obtain it\n+        \/\/ @link substring=\"findAttribute\" target=\"AttributedElement#findAttribute\" :\n+        var stackMaps = oldCode.findAttribute(Attributes.stackMapTable());\n+        stackMaps.ifPresent(cob); \/\/ Note: CodeBuilder is a Consumer<CodeElement>\n+    }\n+    \/\/ @end\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/snippet-files\/PackageSnippets.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -74,0 +75,5 @@\n+     * @apiNote\n+     * Jump subroutine instructions are discontinued to enforce verification by\n+     * type checking (JVMS {@jvms 4.10.1}) using the {@link StackMapTableAttribute\n+     * StackMapTable} attribute.\n+     *\n@@ -75,0 +81,1 @@\n+     * @see StackMapTableAttribute\n@@ -133,0 +140,5 @@\n+     * @apiNote\n+     * Return from subroutine instructions are discontinued to enforce\n+     * verification by type checking (JVMS {@jvms 4.10.1}) using the {@link\n+     * StackMapTableAttribute StackMapTable} attribute.\n+     *\n@@ -135,0 +147,1 @@\n+     * @see StackMapTableAttribute\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        \"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/snippet-files\/PackageSnippets.java\",\n","filename":"test\/jdk\/jdk\/classfile\/SnippetsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}