{"files":[{"patch":"@@ -38,4 +38,7 @@\n- * Two special subtypes of {@code Attribute} are {@link CustomAttribute}, which\n- * all user-defined attributes should extend from, and {@link UnknownAttribute},\n- * representing attributes read from {@code class} file but are not recognized\n- * by the {@link ClassFile.AttributeMapperOption}.\n+ * This sealed interface hierarchy includes attributes predefined in the JVMS\n+ * and JDK-specific nonstandard attributes.  Their {@linkplain #attributeMapper()\n+ * mappers} are available in {@link Attributes}.  Two special subtypes of {@code\n+ * Attribute} are {@link CustomAttribute}, which all user-defined attributes\n+ * should extend from, and {@link UnknownAttribute}, representing attributes\n+ * read from {@code class} file but are not recognized by the {@link\n+ * ClassFile.AttributeMapperOption}.\n@@ -43,17 +46,5 @@\n- * Many attributes implement {@link ClassElement}, {@link FieldElement}, {@link\n- * MethodElement}, or {@link CodeElement} interfaces.  They can be written to\n- * the {@code class} file as part of those enclosing structures via {@link\n- * ClassBuilder#with}, {@link FieldBuilder#with}, {@link MethodBuilder#with}, or\n- * {@link CodeBuilder#with}.  If an attribute does not {@linkplain\n- * AttributeMapper#allowMultiple allow multiple instances} in one structure,\n- * the last supplied instance appears on the built structure.  These interfaces\n- * also allow such attributes to be delivered in the traversal of corresponding\n- * {@link CompoundElement}; the exact rules are specified in the modeling\n- * subinterfaces.\n- * <p>\n- * Some attributes, like {@link BootstrapMethodsAttribute BootstrapMethods} and\n- * {@link LocalVariableTableAttribute LocalVariableTable}, are present in\n- * structures like {@link ClassModel} or {@link CodeModel}, but they do not\n- * implement {@link ClassElement} or {@link CodeElement}.  Such attributes are\n- * usually modeled as an integral part to the declaring structure, specified\n- * in the modeling subinterfaces.\n+ * Attributes are read through {@link AttributedElement} or element traversal of\n+ * a {@link CompoundElement}; they are written through {@link ClassFileBuilder}.\n+ * See {@linkplain java.lang.classfile.attribute##reading Reading Attributes}\n+ * and {@linkplain java.lang.classfile.attribute##writing Writing Attributes}\n+ * for more details.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParameterInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleExportInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleOpenInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-     * @throws IllegalArgumentException if the flags mask has any unused bit set\n+     * @throws IllegalArgumentException if the flags mask has any undefined bit set\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleRequireInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,5 @@\n- * The {@code java.lang.classfile.attribute} package contains interfaces describing specific {@code class} file attributes.\n- * General and user-defined attributes reside in {@link java.lang.classfile}, including {@link Attributes}, {@link\n- * AttributeMapper}, and {@link CustomAttribute}.\n+ * The {@code java.lang.classfile.attribute} package contains interfaces describing specific {@code class} file\n+ * attributes, including predefined (JVMS {@jvms 4.7}) and JDK-specific nonstandard attributes, whose mappers are\n+ * defined in {@link Attributes}.  This package summary provides an overview to the {@code class} file attribute system,\n+ * including {@link Attribute}, {@link AttributedElement}, {@link AttributeMapper}, and {@link CustomAttribute}, which\n+ * do not reside in this package.\n@@ -37,1 +39,1 @@\n- * <h2 id=\"reading\">Reading attributes<\/h2>\n+ * <h2 id=\"reading\">Reading Attributes<\/h2>\n@@ -60,1 +62,1 @@\n- * <h2 id=\"writing\">Writing attributes<\/h2>\n+ * <h2 id=\"writing\">Writing Attributes<\/h2>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/package-info.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}