[{"commit":{"message":"JDK-8327650 Test java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java timed out — updates based comments from PR"},"files":[{"filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java"}],"sha":"2cdaa0f4c24301e36ab7d02261d2c7badde4d721"},{"commit":{"message":"JDK-8327650 Test java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java timed -- out remove trailing whitespace"},"files":[{"filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java"}],"sha":"94a2731c66b1eec8e3a125ff3b8ff1071b63c474"},{"commit":{"message":"JDK-8327650 Test java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java timed out — Test only fix to alleviate a race condition within the test.\nA race condition exists in the Test due to the setting of a condition variable, shouldTerminate, in the main thread’s invocation of UDPThread::terminate and the setting of shouldTerminate in the main run method of UDPThread.  A similar scenario exists for the ServerSocketThread.  The variable shouldTerminate is a member variable, and is by default set to false, so the setting to false in the run methods is not required. Removing shouldTerminate = false; statement mitigates the race condition.\n\nAdditionally, a number of other minor changes have been added to the test:\n* it is desired to test the asynchronous close of the DatagramChannel::receive method which may trigger the NativeThread::signal issue, thus the while loop has been changed to a do { } while(); loop to invoke the DC receive method.\n\n* The Thread::sleep has been replaced with a CountDownLatch to make the test slightly more deterministic.\n\nIt is noted in passing the ServerSocket::run method contains a redundant while loop for reading from an established connection stream, which is never created. This code is never reached as there is no peer to connect to the ServerSocket and the test is on the ServerSocket::accept method.\n\nAnother issue of note is that the test is using a hardcoded IANA assigned port 1122 (availant-mgr). But, this has not been altered. I think the ServerSocket test scenario could use an ephemeral port i.e. new ServerSocket(0);"},"files":[{"filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java"}],"sha":"13f48d7d2d67b9d1eb37f3e8ecfb3215a4f133a9"}]