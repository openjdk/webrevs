{"files":[{"patch":"@@ -29,2 +29,7 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.StandardSocketOptions;\n@@ -43,0 +48,4 @@\n+        } catch (Exception z) {\n+            System.err.println(\"failed to create and start a ServerSocketThread\");\n+            z.printStackTrace();\n+        }\n@@ -44,0 +53,1 @@\n+        try {\n@@ -47,0 +57,1 @@\n+            System.err.println(\"failed to create and start a UDPThread\");\n@@ -58,12 +69,7 @@\n-        udpThread.terminate();\n-        try {\n-            udpThread.join();\n-        } catch (Exception z) {\n-            z.printStackTrace(System.err);\n-        }\n-\n-        serverSocketThread.terminate();\n-        try {\n-            serverSocketThread.join();\n-        } catch (Exception z) {\n-            z.printStackTrace(System.err);\n+        if ((udpThread != null) && udpThread.isAlive()) {\n+            udpThread.terminate();\n+            try {\n+                udpThread.join();\n+            } catch (Exception z) {\n+                z.printStackTrace(System.err);\n+            }\n@@ -71,0 +77,8 @@\n+        if ((serverSocketThread != null) && (serverSocketThread.isAlive())) {\n+            serverSocketThread.terminate();\n+            try {\n+                serverSocketThread.join();\n+            } catch (Exception z) {\n+                z.printStackTrace(System.err);\n+            }\n+        }        \n@@ -74,3 +88,6 @@\n-\n-        udpThread.waitTestThreadStart();\n-        serverSocketThread.waitTestThreadStart();\n+        if ((udpThread != null) && udpThread.isAlive()) {\n+            udpThread.waitTestThreadStart();\n+        }\n+        if ((serverSocketThread != null) && (serverSocketThread.isAlive())) {\n+            serverSocketThread.waitTestThreadStart();\n+        }\n@@ -82,1 +99,6 @@\n-        private volatile CountDownLatch threadStarted = new CountDownLatch(1);\n+        private final CountDownLatch threadStarted = new CountDownLatch(1);\n+\n+        public ServerSocketThread () throws Exception {\n+\n+            socket = new ServerSocket(1122);\n+        }\n@@ -85,6 +107,0 @@\n-            try {\n-                socket = new ServerSocket(1122);\n-            } catch (Exception ignore) {\n-                System.err.println(\"ServerSocketThread: caught exception \" + ignore.getClass().getName());\n-                System.err.println(\"continue ...\");\n-            }\n@@ -133,1 +149,9 @@\n-        private volatile CountDownLatch threadStarted = new CountDownLatch(1);\n+        private final CountDownLatch threadStarted = new CountDownLatch(1);\n+\n+\n+        public UDPThread () throws Exception {\n+\n+            channel = DatagramChannel.open();\n+            channel.setOption(StandardSocketOptions.SO_RCVBUF, 6553600);\n+            channel.bind(new InetSocketAddress(19870));\n+        }\n@@ -137,7 +161,0 @@\n-            try {\n-                channel = DatagramChannel.open();\n-                channel.setOption(StandardSocketOptions.SO_RCVBUF, 6553600);\n-                channel.bind(new InetSocketAddress(19870));\n-            } catch (IOException z) {\n-                z.printStackTrace(System.err);\n-            }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java","additions":49,"deletions":32,"binary":false,"changes":81,"status":"modified"}]}