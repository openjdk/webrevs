{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,7 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.StandardSocketOptions;\n@@ -33,0 +38,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -42,0 +48,4 @@\n+        } catch (Exception z) {\n+            System.err.println(\"failed to create and start a ServerSocketThread\");\n+            z.printStackTrace();\n+        }\n@@ -43,0 +53,1 @@\n+        try {\n@@ -46,0 +57,1 @@\n+            System.err.println(\"failed to create and start a UDPThread\");\n@@ -52,6 +64,1 @@\n-        try {\n-            Thread.sleep(3000);\n-        } catch (Exception z) {\n-            z.printStackTrace(System.err);\n-        }\n-\n+        test.waitForTestThreadsToStart();\n@@ -62,5 +69,15 @@\n-        udpThread.terminate();\n-        try {\n-            udpThread.join();\n-        } catch (Exception z) {\n-            z.printStackTrace(System.err);\n+        if ((udpThread != null) && udpThread.isAlive()) {\n+            udpThread.terminate();\n+            try {\n+                udpThread.join();\n+            } catch (Exception z) {\n+                z.printStackTrace(System.err);\n+            }\n+        }\n+        if ((serverSocketThread != null) && (serverSocketThread.isAlive())) {\n+            serverSocketThread.terminate();\n+            try {\n+                serverSocketThread.join();\n+            } catch (Exception z) {\n+                z.printStackTrace(System.err);\n+            }\n@@ -68,0 +85,1 @@\n+    }\n@@ -69,5 +87,6 @@\n-        serverSocketThread.terminate();\n-        try {\n-            serverSocketThread.join();\n-        } catch (Exception z) {\n-            z.printStackTrace(System.err);\n+    public void waitForTestThreadsToStart() {\n+        if ((udpThread != null) && udpThread.isAlive()) {\n+            udpThread.waitTestThreadStart();\n+        }\n+        if ((serverSocketThread != null) && (serverSocketThread.isAlive())) {\n+            serverSocketThread.waitTestThreadStart();\n@@ -80,0 +99,6 @@\n+        private final CountDownLatch threadStarted = new CountDownLatch(1);\n+\n+        public ServerSocketThread () throws Exception {\n+\n+            socket = new ServerSocket(1122);\n+        }\n@@ -82,0 +107,1 @@\n+\n@@ -83,1 +109,1 @@\n-                socket = new ServerSocket(1122);\n+                threadStarted.countDown();\n@@ -86,1 +112,2 @@\n-                shouldTerminate = false;\n+                \/\/ the test never reaches here as the close will affect the blocking accept call\n+                \/\/ and there are no clients to connect to this serversocket\n@@ -91,0 +118,2 @@\n+                System.err.println(\"ServerSocketThread: caught exception \" + z.getClass().getName());\n+                z.printStackTrace();\n@@ -106,0 +135,9 @@\n+\n+        public void waitTestThreadStart() {\n+            try {\n+                threadStarted.await();\n+            } catch (Exception z) {\n+                z.printStackTrace(System.err);\n+                \/\/ ignore\n+            }\n+        }\n@@ -111,0 +149,9 @@\n+        private final CountDownLatch threadStarted = new CountDownLatch(1);\n+\n+\n+        public UDPThread () throws Exception {\n+\n+            channel = DatagramChannel.open();\n+            channel.setOption(StandardSocketOptions.SO_RCVBUF, 6553600);\n+            channel.bind(new InetSocketAddress(19870));\n+        }\n@@ -114,7 +161,0 @@\n-            try {\n-                channel = DatagramChannel.open();\n-                channel.setOption(StandardSocketOptions.SO_RCVBUF, 6553600);\n-                channel.bind(new InetSocketAddress(19870));\n-            } catch (IOException z) {\n-                z.printStackTrace(System.err);\n-            }\n@@ -123,2 +163,2 @@\n-            shouldTerminate = false;\n-            while (!shouldTerminate) {\n+            threadStarted.countDown();\n+            do {\n@@ -129,0 +169,1 @@\n+                    System.err.println(\"UDPThread: caught exception \" + z.getClass().getName());\n@@ -133,1 +174,1 @@\n-            }\n+            } while (!shouldTerminate);\n@@ -140,0 +181,10 @@\n+            } catch (Exception z) {\n+                System.err.println(\"UDPThread: caught exception \" + z.getClass().getName());\n+                z.printStackTrace(System.err);\n+                \/\/ ignore\n+            }\n+        }\n+\n+        public void waitTestThreadStart() {\n+            try {\n+                threadStarted.await();\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/StressNativeSignal.java","additions":82,"deletions":31,"binary":false,"changes":113,"status":"modified"}]}