{"files":[{"patch":"@@ -336,8 +336,1 @@\n-            var serviceInstallerResource = initServiceInstallerResource(params);\n-            if (serviceInstallerResource != null) {\n-                if (!Files.exists(serviceInstallerResource.getExternalPath())) {\n-                    throw new ConfigException(I18N.getString(\n-                            \"error.missing-service-installer\"), I18N.getString(\n-                                    \"error.missing-service-installer.advice\"));\n-                }\n-            }\n+            initServiceInstallerResource(params);\n@@ -410,5 +403,9 @@\n-        var serviceInstallerResource = initServiceInstallerResource(params);\n-        if (serviceInstallerResource != null) {\n-            var serviceInstallerPath = serviceInstallerResource.getExternalPath();\n-            params.put(SERVICE_INSTALLER.getID(), new InstallableFile(\n-                    serviceInstallerPath, serviceInstallerPath.getFileName()));\n+        try {\n+            var serviceInstallerResource = initServiceInstallerResource(params);\n+            if (serviceInstallerResource != null) {\n+                var serviceInstallerPath = serviceInstallerResource.getExternalPath();\n+                params.put(SERVICE_INSTALLER.getID(), new InstallableFile(\n+                        serviceInstallerPath, serviceInstallerPath.getFileName()));\n+            }\n+        } catch (ConfigException ex) {\n+            throw new PackagerException(ex);\n@@ -766,1 +763,1 @@\n-            Map<String, ? super Object> params) {\n+            Map<String, ? super Object> params) throws ConfigException {\n@@ -784,2 +781,6 @@\n-        if (result.getResourceDir() == null) {\n-            return null;\n+        if (result.getResourceDir() != null) {\n+            result.setExternal(result.getResourceDir().resolve(result.getPublicName()));\n+\n+            if (Files.exists(result.getExternalPath())) {\n+                return result;\n+            }\n@@ -788,2 +789,2 @@\n-        return result.setExternal(result.getResourceDir().resolve(\n-                result.getPublicName()));\n+        throw new ConfigException(I18N.getString(\"error.missing-service-installer\"),\n+                I18N.getString(\"error.missing-service-installer.advice\"));\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+error.missing-service-installer='service-installer.exe' service installer not found in the resource directory\n+error.missing-service-installer.advice=Add 'service-installer.exe' service installer to the resource directory\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+error.missing-service-installer='service-installer.exe' service installer not found in the resource directory\n+error.missing-service-installer.advice=Add 'service-installer.exe' service installer to the resource directory\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+error.missing-service-installer='service-installer.exe' service installer not found in the resource directory\n+error.missing-service-installer.advice=Add 'service-installer.exe' service installer to the resource directory\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+error.missing-service-installer='service-installer.exe' service installer not found in the resource directory\n+error.missing-service-installer.advice=Add 'service-installer.exe' service installer to the resource directory\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,6 @@\n-        return MessageFormat.format(getString(key), args);\n+        var str = getString(key);\n+        if (args.length != 0) {\n+            return MessageFormat.format(str, args);\n+        } else {\n+            return str;\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageStringBundle.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.RunnablePackageTest;\n@@ -35,0 +37,1 @@\n+import static jdk.internal.util.OperatingSystem.WINDOWS;\n@@ -116,8 +119,3 @@\n-        var cmd = JPackageCommand.helloAppImage(javaAppDesc)\n-                \/\/ Disable default logic adding `--verbose` option\n-                \/\/ to jpackage command line.\n-                \/\/ It will affect jpackage error messages if the command line is malformed.\n-                .ignoreDefaultVerbose(true)\n-                \/\/ Ignore external runtime as it will interfer\n-                \/\/ with jpackage arguments in this test.\n-                .ignoreDefaultRuntime(true);\n+        var cmd = JPackageCommand.helloAppImage(javaAppDesc);\n+\n+        defaultInit(cmd, expectedErrors);\n@@ -132,0 +130,31 @@\n+        cmd.execute(1);\n+    }\n+\n+    @Test(ifOS = WINDOWS)\n+    public static void testWinService() {\n+\n+        CannedFormattedString[] expectedErrors = new CannedFormattedString[] {\n+            JPackageStringBundle.MAIN.cannedFormattedString(\"error.missing-service-installer\"),\n+            JPackageStringBundle.MAIN.cannedFormattedString(\"error.missing-service-installer.advice\")\n+        };\n+\n+        new PackageTest().configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    defaultInit(cmd, expectedErrors);\n+                    cmd.addArgument(\"--launcher-as-service\");\n+                })\n+                .setExpectedExitCode(1)\n+                .run(RunnablePackageTest.Action.CREATE);\n+    }\n+\n+    private static void defaultInit(JPackageCommand cmd, CannedFormattedString... expectedErrors) {\n+\n+        \/\/ Disable default logic adding `--verbose` option\n+        \/\/ to jpackage command line.\n+        \/\/ It will affect jpackage error messages if the command line is malformed.\n+        cmd.ignoreDefaultVerbose(true);\n+\n+        \/\/ Ignore external runtime as it will interfer\n+        \/\/ with jpackage arguments in this test.\n+        cmd.ignoreDefaultRuntime(true);\n+\n@@ -133,1 +162,1 @@\n-        \/\/ errors in the order they specified.\n+        \/\/ errors in the order they are specified.\n@@ -138,2 +167,0 @@\n-\n-        cmd.execute(1);\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":38,"deletions":11,"binary":false,"changes":49,"status":"modified"}]}