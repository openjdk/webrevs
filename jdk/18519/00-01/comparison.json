{"files":[{"patch":"@@ -234,0 +234,11 @@\n+        \/\/ preprocess for links\n+        switch (kind) {\n+            case CONSTRUCTORS, METHODS -> {\n+                for (var m : members) {\n+                    \/\/ nit picking: constructors are not members, see JLS 8.2. Class Members\n+                    htmlIds.register(typeElement, (ExecutableElement) m);\n+                }\n+                htmlIds.endRegistration(typeElement, kind == CONSTRUCTORS ?\n+                        ElementKind.CONSTRUCTOR : ElementKind.METHOD);\n+            }\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                writer.tableOfContents.addLink(htmlIds.forMember(typeElement, currentConstructor),\n+                writer.tableOfContents.addLink(htmlIds.forMember(currentConstructor),\n@@ -192,0 +192,6 @@\n+        HtmlId memberAnchor = htmlIds.forMember(constructor);\n+        HtmlId erasureAnchor = htmlIds.forErasure(constructor);\n+        if (erasureAnchor != null\n+                && !erasureAnchor.name().equals(memberAnchor.name())) {\n+            heading.setId(erasureAnchor);\n+        }\n@@ -194,1 +200,1 @@\n-                .setId(htmlIds.forMember(typeElement, constructor));\n+                .setId(memberAnchor);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriter.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1040,1 +1040,1 @@\n-            HtmlId id = isProperty ? htmlIds.forProperty(ee) : htmlIds.forMember(typeElement, ee);\n+            HtmlId id = isProperty ? htmlIds.forProperty(ee) : htmlIds.forMember(ee);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n@@ -31,0 +34,2 @@\n+import java.util.Optional;\n+import java.util.SequencedSet;\n@@ -32,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -34,0 +38,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -40,1 +45,0 @@\n-import javax.lang.model.type.ExecutableType;\n@@ -163,0 +167,20 @@\n+    \/**\n+     * Returns an id for an executable element, suitable for use when the\n+     * simple name and argument list will be unique within the page, such as\n+     * in the page for the declaration of the enclosing class or interface.\n+     *\n+     * @param element the element\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forMember(ExecutableElement element) {\n+        return forExecutable((TypeElement) element.getEnclosingElement(), element);\n+    }\n+\n+    private HtmlId forMember0(ExecutableElement element) {\n+        String a = element.getSimpleName()\n+                        + utils.makeSignature(element, null, true, true);\n+        \/\/ utils.makeSignature includes spaces\n+        return HtmlId.of(a.replaceAll(\"\\\\s\", \"\"));\n+    }\n+\n@@ -173,1 +197,1 @@\n-        return HtmlId.of(forErasure(typeElement, member).replaceAll(\"\\\\s\", \"\"));\n+        return HtmlId.of(utils.getSimpleName(member) + utils.signature(member, typeElement));\n@@ -208,1 +232,6 @@\n-     * Returns a string id for the erasure of an executable element.\n+     * Returns an id for the erasure of an executable element,\n+     * or {@code null} if there are no type variables in the signature.\n+     *\n+     * For backward compatibility, include an anchor using the erasures of the\n+     * parameters.  NOTE:  We won't need this method anymore after we fix\n+     * {@code @see} tags so that they use the type instead of the erasure.\n@@ -210,1 +239,2 @@\n-     * @param executable the element to anchor to\n+     * @param executableElement the element to anchor to\n+     * @return the 1.4.x style anchor for the executable element\n@@ -212,13 +242,8 @@\n-    private String forErasure(TypeElement site, ExecutableElement executable) {\n-        var parameterTypes = ((ExecutableType) utils.typeUtils\n-                .erasure(utils.asInstantiatedMethodType(site, executable)))\n-                .getParameterTypes();\n-        var stv = new SimpleTypeVisitor9<String, Void>() {\n-            @Override\n-            public String visitArray(ArrayType t, Void p) {\n-                return visit(t.getComponentType()) + utils.getDimension(t);\n-            }\n-\n-            @Override\n-            public String visitDeclared(DeclaredType t, Void p) {\n-                return utils.getQualifiedTypeName(t);\n+    protected HtmlId forErasure(ExecutableElement executableElement) {\n+        final StringBuilder buf = new StringBuilder(executableElement.getSimpleName().toString());\n+        buf.append(\"(\");\n+        List<? extends VariableElement> parameters = executableElement.getParameters();\n+        boolean foundTypeVariable = false;\n+        for (int i = 0; i < parameters.size(); i++) {\n+            if (i > 0) {\n+                buf.append(\",\");\n@@ -226,4 +251,34 @@\n-\n-            @Override\n-            public String defaultAction(TypeMirror e, Void p) {\n-                return String.valueOf(e);\n+            TypeMirror t = parameters.get(i).asType();\n+            SimpleTypeVisitor9<Boolean, Void> stv = new SimpleTypeVisitor9<>() {\n+                boolean foundTypeVariable = false;\n+\n+                @Override\n+                public Boolean visitArray(ArrayType t, Void p) {\n+                    visit(t.getComponentType());\n+                    buf.append(utils.getDimension(t));\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                public Boolean visitTypeVariable(TypeVariable t, Void p) {\n+                    buf.append(utils.asTypeElement(t).getQualifiedName().toString());\n+                    foundTypeVariable = true;\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                public Boolean visitDeclared(DeclaredType t, Void p) {\n+                    buf.append(utils.getQualifiedTypeName(t));\n+                    return foundTypeVariable;\n+                }\n+\n+                @Override\n+                protected Boolean defaultAction(TypeMirror e, Void p) {\n+                    buf.append(e);\n+                    return foundTypeVariable;\n+                }\n+            };\n+\n+            boolean isTypeVariable = stv.visit(t);\n+            if (!foundTypeVariable) {\n+                foundTypeVariable = isTypeVariable;\n@@ -231,4 +286,3 @@\n-        };\n-        return executable.getSimpleName() + parameterTypes.stream()\n-                .map(stv::visit)\n-                .collect(Collectors.joining(\",\", \"(\", \")\"));\n+        }\n+        buf.append(\")\");\n+        return foundTypeVariable ? HtmlId.of(buf.toString()) : null;\n@@ -442,1 +496,1 @@\n-            case CONSTRUCTOR, METHOD -> forMember((TypeElement) el.getEnclosingElement(), (ExecutableElement) el).name(); \/\/ fixme?\n+            case CONSTRUCTOR, METHOD -> forMember((ExecutableElement) el).name();\n@@ -456,1 +510,1 @@\n-        return HtmlId.of(\"restricted-\" + forMember((TypeElement) el.getEnclosingElement(), el).name()); \/\/ fixme?\n+        return HtmlId.of(\"restricted-\" + forMember(el).name());\n@@ -494,0 +548,94 @@\n+\n+    private final Map<TypeElement, Map<ExecutableElement, String>> ids = new HashMap<>();\n+    \/*\n+     * This map is transient in a sense that it keeps its elements until\n+     * the registration is over. The order of the elements is important\n+     * for reproducibility of ids.\n+     *\/\n+    private final Map<Key, Optional<SequencedSet<ExecutableElement>>> registered = new HashMap<>();\n+    \/*\n+     * Registration key to differentiate between methods and constructors,\n+     * whose registration ends at different times.\n+     *\/\n+    private record Key(TypeElement typeElement, ElementKind elementKind) { }\n+\n+    \/*\n+     * Returns an id to a constructor or a method, from a centralised\n+     * registry. Use to get an anchor to a constructor or method.\n+     *\n+     * The primary goal is to provide coordination, not cache.\n+     *\/\n+    private HtmlId forExecutable(TypeElement t, ExecutableElement e) {\n+        var map = ids.get(t);\n+        if (map != null) {\n+            assert !map.isEmpty();\n+            String name = map.get(e);\n+            \/\/ name == null can happen when a link is processed before the\n+            \/\/ page\/element-type it refers to. For example, a class constructor\n+            \/\/ can @link to a class method which has not been registered yet\n+            \/\/ (because methods of a class are registered after the constructors\n+            \/\/ of that class).\n+            if (name != null)\n+                return HtmlId.of(name);\n+        }\n+        \/\/ must be an external @link\/@see, which might be processed before the\n+        \/\/ methods from the page it links to has been registered; cannot do\n+        \/\/ much about it, unless all constructors and methods register before\n+        \/\/ even the first page is generated -- something to think about (i.e.\n+        \/\/ \"TODO\")\n+        return forMember0(e);\n+    }\n+\n+    public void register(TypeElement t, ExecutableElement e) {\n+        var opt = registered.computeIfAbsent(new Key(t, e.getKind()),\n+                t_ -> Optional.of(new LinkedHashSet<>()));\n+        if (opt.isEmpty())\n+            throw new IllegalStateException(\"Registration for \" + t + \" has ended\");\n+        else\n+            opt.get().add(e);\n+    }\n+\n+    \/*\n+     * Declares that there won't be any more executable elements (of the\n+     * specified kind) registered for the specified type element.\n+     *\/\n+    public void endRegistration(TypeElement t, ElementKind k) {\n+        var prev = registered.put(new Key(t, k), Optional.empty());\n+        if (prev == null)\n+            return;\n+        var map = ids.computeIfAbsent(t, t_ -> new HashMap<>());\n+        var dups = new HashSet<>();\n+        \/\/ Use simple id, unless we have to use erased id; for that, do the\n+        \/\/ following _in order_:\n+        \/\/ 1. Map all elements that can _only_ be addressed by the simple id\n+        for (var e : prev.get()) {\n+            if (forErasure(e) == null) {\n+                var id = forMember0(e).name();\n+                map.put(e, id);\n+                boolean added = dups.add(id);\n+                \/\/ we assume that the simple id for an executable member that\n+                \/\/ does not use type parameters is unique\n+                assert added;\n+            }\n+        }\n+        \/\/ 2. Map all elements that can be addressed by simple id or erased id;\n+        \/\/ if the simple id is not yet used, use it, otherwise use the erased id\n+        for (var e : prev.get()) {\n+            var erasure = forErasure(e);\n+            if (erasure != null) {\n+                var simpleId = forMember0(e).name();\n+                if (dups.add(simpleId)) {\n+                    map.put(e, simpleId);\n+                } else {\n+                    map.put(e, erasure.name());\n+                    boolean added = dups.add(erasure.name());\n+                    \/\/ Not only must an erased id not clash with any simple id,\n+                    \/\/ but it must also not clash with any other erased id.\n+                    \/\/ The latter is because JLS 8.4.2. Method Signature:\n+                    \/\/ it is a compile-time error to declare two methods\n+                    \/\/ with override-equivalent signatures in a class\n+                    assert added;\n+                }\n+            }\n+        }\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":176,"deletions":28,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-                    String url = HtmlTree.encodeURL(htmlIds.forMember(item.getContainingTypeElement(), (ExecutableElement) element).name());\n+                    String url = HtmlTree.encodeURL(htmlIds.forMember((ExecutableElement) element).name());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIndexBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                writer.tableOfContents.addLink(htmlIds.forMember(typeElement, currentMethod),\n+                writer.tableOfContents.addLink(htmlIds.forMember(currentMethod),\n@@ -207,0 +207,6 @@\n+        HtmlId memberAnchor = htmlIds.forMember(method);\n+        HtmlId erasureAnchor = htmlIds.forErasure(method);\n+        if (erasureAnchor != null\n+                && !erasureAnchor.name().equals(memberAnchor.name())) {\n+            heading.setId(erasureAnchor);\n+        }\n@@ -209,1 +215,1 @@\n-                .setId(htmlIds.forMember(typeElement, method));\n+                .setId(htmlIds.forMember(method));\n@@ -374,1 +380,1 @@\n-                        .fragment(writer.htmlIds.forMember((TypeElement) utils.typeUtils.asElement(overriddenType), method).name())\n+                        .fragment(writer.htmlIds.forMember(method).name())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                <a href=\"#%3Cinit%3E(java.lang.Object)\" class=\"member-name-link\">Foo<\/a>\\\n+                <a href=\"#%3Cinit%3E(T)\" class=\"member-name-link\">Foo<\/a>\\\n@@ -206,1 +206,1 @@\n-                <li><a href=\"#%3Cinit%3E(java.lang.Object)\" tabindex=\"0\">Foo(T)<\/a><\/li>\n+                <li><a href=\"#%3Cinit%3E(T)\" tabindex=\"0\">Foo(T)<\/a><\/li>\n@@ -211,1 +211,1 @@\n-                <dt><a href=\"Foo.html#%3Cinit%3E(java.lang.Object)\" class=\"member-name-link\">Foo(T)<\/a>\\\n+                <dt><a href=\"Foo.html#%3Cinit%3E(T)\" class=\"member-name-link\">Foo(T)<\/a>\\\n@@ -218,1 +218,1 @@\n-                {\"p\":\"<Unnamed>\",\"c\":\"Foo\",\"l\":\"Foo(T)\",\"u\":\"%3Cinit%3E(java.lang.Object)\"},\\\n+                {\"p\":\"<Unnamed>\",\"c\":\"Foo\",\"l\":\"Foo(T)\",\"u\":\"%3Cinit%3E(T)\"},\\\n@@ -225,1 +225,1 @@\n-                method-summary-table-tab3\"><code><a href=\"#m(java.lang.Object)\" class=\"member-name-link\">m<\/a>\\\n+                method-summary-table-tab3\"><code><a href=\"#m(T)\" class=\"member-name-link\">m<\/a>\\\n@@ -238,1 +238,1 @@\n-                <li><a href=\"#m(java.lang.Object)\" tabindex=\"0\">m(T)<\/a><\/li>\n+                <li><a href=\"#m(T)\" tabindex=\"0\">m(T)<\/a><\/li>\n@@ -243,1 +243,1 @@\n-                <dt><a href=\"Foo.html#m(java.lang.Object)\" class=\"member-name-link\">m(T)<\/a>\\\n+                <dt><a href=\"Foo.html#m(T)\" class=\"member-name-link\">m(T)<\/a>\\\n@@ -250,1 +250,1 @@\n-                {\"p\":\"<Unnamed>\",\"c\":\"Foo\",\"l\":\"m(T)\",\"u\":\"m(java.lang.Object)\"},\\\n+                {\"p\":\"<Unnamed>\",\"c\":\"Foo\",\"l\":\"m(T)\"},\\\n@@ -360,2 +360,2 @@\n-                <a href=\"java.base\/p\/Foo.html#m(p.X)\">p.Foo.m<wbr>(T)<\/a><sup>\\\n-                <a href=\"java.base\/p\/Foo.html#preview-m(p.X)\">PREVIEW<\/a><\/sup><\/div>\n+                <a href=\"java.base\/p\/Foo.html#m(T)\">p.Foo.m<wbr>(T)<\/a><sup>\\\n+                <a href=\"java.base\/p\/Foo.html#preview-m(T)\">PREVIEW<\/a><\/sup><\/div>\n@@ -371,2 +371,2 @@\n-                <a href=\"java.base\/p\/Foo.html#%3Cinit%3E(p.X)\">p.Foo<wbr>(T)<\/a><sup>\\\n-                <a href=\"java.base\/p\/Foo.html#preview-%3Cinit%3E(p.X)\">PREVIEW<\/a><\/sup><\/div>\n+                <a href=\"java.base\/p\/Foo.html#%3Cinit%3E(T)\">p.Foo<wbr>(T)<\/a><sup>\\\n+                <a href=\"java.base\/p\/Foo.html#preview-%3Cinit%3E(T)\">PREVIEW<\/a><\/sup><\/div>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testErasure\/TestErasure.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-                    method-summary-table-tab3\"><code><a href=\"#parentMethod(java.lang.String)\" class=\"member-name-link\">\\\n+                    method-summary-table-tab3\"><code><a href=\"#parentMethod(T)\" class=\"member-name-link\">\\\n@@ -145,2 +145,2 @@\n-                    <section class=\"detail\" id=\"parentMethod(java.lang.String)\">\n-                    <h3>parentMethod<\/h3>\n+                    <section class=\"detail\" id=\"parentMethod(T)\">\n+                    <h3 id=\"parentMethod(java.lang.Object)\">parentMethod<\/h3>\n@@ -188,1 +188,1 @@\n-                    tab2 method-summary-table-tab4\"><code><a href=\"#method(java.lang.String)\" class=\"member-name-li\\\n+                    tab2 method-summary-table-tab4\"><code><a href=\"#method(T)\" class=\"member-name-li\\\n@@ -191,2 +191,2 @@\n-                    <section class=\"detail\" id=\"method(java.lang.String)\">\n-                    <h3>method<\/h3>\n+                    <section class=\"detail\" id=\"method(T)\">\n+                    <h3 id=\"method(java.lang.Object)\">method<\/h3>\n@@ -210,1 +210,1 @@\n-                    <dt><a href=\"pkg2\/DocumentedNonGenericChild.html#parentMethod(java.lang.String)\" class=\"member-\\\n+                    <dt><a href=\"pkg2\/DocumentedNonGenericChild.html#parentMethod(T)\" class=\"member-\\\n@@ -220,1 +220,1 @@\n-                    {\"p\":\"pkg2\",\"c\":\"DocumentedNonGenericChild\",\"l\":\"parentMethod(String)\",\"u\":\"parentMethod(java.lang.String)\"}\"\"\");\n+                    {\"p\":\"pkg2\",\"c\":\"DocumentedNonGenericChild\",\"l\":\"parentMethod(String)\",\"u\":\"parentMethod(T)\"}\"\"\");\n@@ -239,2 +239,2 @@\n-                    <section class=\"detail\" id=\"parentMethod(java.lang.String)\">\n-                    <h3>parentMethod<\/h3>\n+                    <section class=\"detail\" id=\"parentMethod(T)\">\n+                    <h3 id=\"parentMethod(java.lang.Object)\">parentMethod<\/h3>\n@@ -262,1 +262,1 @@\n-                    <dt><a href=\"..\/pkg2\/DocumentedNonGenericChild.html#parentMethod(java.lang.String)\" class=\"memb\\\n+                    <dt><a href=\"..\/pkg2\/DocumentedNonGenericChild.html#parentMethod(T)\" class=\"memb\\\n@@ -272,1 +272,1 @@\n-                    {\"p\":\"pkg2\",\"c\":\"DocumentedNonGenericChild\",\"l\":\"parentMethod(String)\",\"u\":\"parentMethod(java.lang.String)\"}\"\"\");\n+                    {\"p\":\"pkg2\",\"c\":\"DocumentedNonGenericChild\",\"l\":\"parentMethod(String)\",\"u\":\"parentMethod(T)\"}\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMemberInheritance\/TestMemberInheritance.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,2 @@\n-                    <section class=\"detail\" id=\"f(java.lang.Object[])\">\n+                    <section class=\"detail\" id=\"f(T[])\">\n+                    <h3 id=\"f(java.lang.Object[])\">f<\/h3>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMemberSummary\/TestMemberSummary.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-                    java.lang.Object%5B%5D)\" class=\"member-name-link\">methodThatReturnsTypeParameterA<\/a><wbr>(<a h\\\n+                    E%5B%5D)\" class=\"member-name-link\">methodThatReturnsTypeParameterA<\/a><wbr>(<a h\\\n@@ -267,1 +267,1 @@\n-                    t1.<\/span><code><a href=\"..\/ClassUseTest1.html#method(pkg2.Foo)\" class=\"member-name-lin\\\n+                    t1.<\/span><code><a href=\"..\/ClassUseTest1.html#method(T)\" class=\"member-name-lin\\\n@@ -306,1 +306,1 @@\n-                    t1.<\/span><code><a href=\"..\/ClassUseTest1.html#method(pkg2.Foo)\" class=\"member-name-lin\\\n+                    t1.<\/span><code><a href=\"..\/ClassUseTest1.html#method(T)\" class=\"member-name-lin\\\n@@ -327,1 +327,1 @@\n-                    t2.<\/span><code><a href=\"..\/ClassUseTest2.html#method(pkg2.ParamTest)\" class=\"member-name-lin\\\n+                    t2.<\/span><code><a href=\"..\/ClassUseTest2.html#method(T)\" class=\"member-name-lin\\\n@@ -365,1 +365,1 @@\n-                    t2.<\/span><code><a href=\"..\/ClassUseTest2.html#method(pkg2.ParamTest)\" class=\"member-name-lin\\\n+                    t2.<\/span><code><a href=\"..\/ClassUseTest2.html#method(T)\" class=\"member-name-lin\\\n@@ -397,1 +397,1 @@\n-                    t3.<\/span><code><a href=\"..\/ClassUseTest3.html#method(pkg2.ParamTest2)\" class=\"member-name-lin\\\n+                    t3.<\/span><code><a href=\"..\/ClassUseTest3.html#method(T)\" class=\"member-name-lin\\\n@@ -424,1 +424,1 @@\n-                    t3.<\/span><code><a href=\"..\/ClassUseTest3.html#method(pkg2.ParamTest2)\" class=\"member-name-lin\\\n+                    t3.<\/span><code><a href=\"..\/ClassUseTest3.html#method(T)\" class=\"member-name-lin\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNewLanguageFeatures\/TestNewLanguageFeatures.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-                    \"..\/MethodOrder.html#m(long,java.lang.Long%5B%5D)\",\n+                    \"..\/MethodOrder.html#m(long,java.lang.Long...)\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testOrdering\/TestOrdering.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,1 +140,1 @@\n-                \"Classes.P.html#m4(java.lang.Object,java.lang.Object)\\\">m4\",\n+                \"Classes.P.html#m4(K,V)\\\">m4\",\n@@ -297,1 +297,1 @@\n-                    <a href=\"pkg5\/Classes.P.html#m4(java.lang.Object,java.lang.Object)\" class=\"member-name-link\">m4(K, V)<\/a>\"\"\",\n+                    <a href=\"pkg5\/Classes.P.html#m4(K,V)\" class=\"member-name-link\">m4(K, V)<\/a>\"\"\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testOverriddenMethods\/TestOverrideMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n-                    java.util.List,java.lang.Object,java.util.List)\">methodOverriddenFromParent<\/a><\/code>&nbsp;in class&nbsp;<c\\\n+                    T,V,java.util.List)\">methodOverriddenFromParent<\/a><\/code>&nbsp;in class&nbsp;<c\\\n@@ -228,1 +228,1 @@\n-                    a href=\"I.html#hello(java.lang.Object)\">I<\/a><\/code><\/span>\"\"\",\n+                    a href=\"I.html#hello(T)\">I<\/a><\/code><\/span>\"\"\",\n@@ -231,1 +231,1 @@\n-                    <dd><code><a href=\"I.html#hello(java.lang.Object)\">hello<\/a><\/code>&nbsp;in interface&nbsp;<cod\\\n+                    <dd><code><a href=\"I.html#hello(T)\">hello<\/a><\/code>&nbsp;in interface&nbsp;<cod\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPrivateClasses\/TestPrivateClasses.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                <li><a href=\"Test.InnerOne.html#format(java.lang.String,java.lang.Object%5B%5D)\"><code>\\\n+                <li><a href=\"Test.InnerOne.html#format(java.lang.String,java.lang.Object...)\"><code>\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -581,1 +581,1 @@\n-                    <code><a href=\"#%3Cinit%3E(java.lang.String,java.lang.String%5B%5D)\" class=\"member-\\\n+                    <code><a href=\"#%3Cinit%3E(java.lang.String,java.lang.String...)\" class=\"member-\\\n@@ -753,1 +753,1 @@\n-                    String%5B%5D)\" class=\"member-name-link\">test5<\/a><wbr>(java.lang.String&nbsp;parameter,\n+                    String...)\" class=\"member-name-link\">test5<\/a><wbr>(java.lang.String&nbsp;parameter,\n@@ -826,1 +826,1 @@\n-                    tab2 method-summary-table-tab4\"><code><a href=\"#genericMethod(java.lang.Object)\" class=\"member-\\\n+                    tab2 method-summary-table-tab4\"><code><a href=\"#genericMethod(T)\" class=\"member-\\\n@@ -832,1 +832,1 @@\n-                    ab2 method-summary-table-tab4\"><code><a href=\"#genericMethod2(java.lang.Object)\" class=\"member-\\\n+                    ab2 method-summary-table-tab4\"><code><a href=\"#genericMethod2(T)\" class=\"member-\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeAnnotations\/TestTypeAnnotations.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-                <a href=\"..\/C10.html#addAll(pkg1.UsedInterface%5B%5D)\" class=\"member-name-link\">addAll<\/a>\"\"\"\n+                <a href=\"..\/C10.html#addAll(pkg1.UsedInterface...)\" class=\"member-name-link\">addAll<\/a>\"\"\"\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUseOption\/TestUseOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -320,1 +320,1 @@\n-                \"Do you see me\", \"QLong.html#forEach(java.lang.Object)\",\n+                \"Do you see me\", \"QLong.html#forEach(Q)\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testVisibleMembers\/TestVisibleMembers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}