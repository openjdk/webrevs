{"files":[{"patch":"@@ -79,1 +79,2 @@\n-    \/\/ update() calls were made so far)\n+    \/\/ update() calls were made so far) in an XOF or the class was initialized\n+    \/\/ as a hash.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8338587\n+ * @summary Ensure squeeze and digest always have the same output\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.provider\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.provider.SHA3;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Arrays;\n+\n+public class SHAKEsqueeze {\n+    public static void main(String[] args) throws Exception {\n+        var r = SeededSecureRandom.one();\n+        var atlast = 0;\n+        \/\/ Random test on SHAKE\n+        for (var i = 0; i < 1_000_000; i++) {\n+            var s = new SHA3.SHAKE256(0);\n+            var in = new ByteArrayOutputStream();\n+            while (r.nextBoolean()) {\n+                var b = r.nBytes(r.nextInt(200));\n+                if (b.length > 0 && r.nextBoolean()) {\n+                    \/\/ Test update(b)\n+                    s.update(b[0]);\n+                    in.write(b[0]);\n+                } else if (r.nextBoolean()) {\n+                    \/\/ Test update(byte[])\n+                    s.update(b);\n+                    in.write(b);\n+                } else {\n+                    \/\/ Test update(byte[], offset, len)\n+                    var prepend = r.nextInt(100);\n+                    var append = r.nextInt(100);\n+                    var bb = new byte[prepend + b.length + append];\n+                    r.nextBytes(bb);\n+                    System.arraycopy(b, 0, bb, prepend, b.length);\n+                    s.update(bb, prepend, b.length);\n+                    in.write(b);\n+                }\n+            }\n+\n+            \/\/ Squeeze for multiple times\n+            var out = new ByteArrayOutputStream();\n+            do {\n+                var n = r.nextInt(200);\n+                out.write(s.squeeze(n));\n+            } while (out.size() == 0 || r.nextBoolean());\n+            var b1 = out.toByteArray();\n+\n+            \/\/ Digest for one time\n+            var s2 = new SHA3.SHAKE256(b1.length);\n+            s2.update(in.toByteArray());\n+            var b2 = s2.digest();\n+\n+            atlast = Arrays.hashCode(b2) * 17 + atlast;\n+            Asserts.assertEqualsByteArray(b1, b2);\n+        }\n+        \/\/ Just to provide a visual clue to show that the same\n+        \/\/ SeededSecureRandom seed results in same final result\n+        \/\/ so that the test can be exactly reproduced.\n+        System.out.println(\"Final hash: \" + atlast);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHAKEsqueeze.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -68,0 +68,6 @@\n+\n+    public byte[] nBytes(int n) {\n+        var out = new byte[n];\n+        nextBytes(out);\n+        return out;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SeededSecureRandom.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}