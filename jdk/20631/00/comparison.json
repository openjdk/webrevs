{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import sun.security.provider.SHAKE256;\n+import sun.security.provider.SHA3.SHAKE256;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSAParameters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-import sun.security.provider.SHAKE256;\n+import sun.security.provider.SHA3.SHAKE256;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import sun.security.provider.SHAKE256;\n+import sun.security.provider.SHA3.SHAKE256;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import static java.lang.Math.min;\n+\n@@ -49,1 +51,1 @@\n-abstract class SHA3 extends DigestBase {\n+public abstract class SHA3 extends DigestBase {\n@@ -70,0 +72,1 @@\n+    private int squeezeOffset = -1;\n@@ -78,1 +81,1 @@\n-    SHA3(String name, int digestLength, byte suffix, int c) {\n+    private SHA3(String name, int digestLength, byte suffix, int c) {\n@@ -106,0 +109,9 @@\n+     void finishAbsorb() {\n+        int numOfPadding =\n+                setPaddingBytes(suffix, buffer, (int)(bytesProcessed % blockSize));\n+        if (numOfPadding < 1) {\n+            throw new ProviderException(\"Incorrect pad size: \" + numOfPadding);\n+        }\n+        implCompress(buffer, 0);\n+    }\n+\n@@ -112,4 +124,3 @@\n-        int numOfPadding =\n-            setPaddingBytes(suffix, buffer, (int)(bytesProcessed % blockSize));\n-        if (numOfPadding < 1) {\n-            throw new ProviderException(\"Incorrect pad size: \" + numOfPadding);\n+        if (engineGetDigestLength() == 0) {\n+            \/\/ This is an XOF, so the digest() call is illegal.\n+            throw new ProviderException(\"Calling digest() is not allowed in an XOF\");\n@@ -117,2 +128,4 @@\n-        implCompress(buffer, 0);\n-        int availableBytes = blockSize; \/\/ i.e. buffer.length\n+\n+        finishAbsorb();\n+\n+        int availableBytes = blockSize;\n@@ -120,0 +133,1 @@\n+\n@@ -121,1 +135,1 @@\n-            for (int i = 0; i < availableBytes \/ 8 ; i++) {\n+            for (int i = 0; i < availableBytes \/ 8; i++) {\n@@ -143,0 +157,80 @@\n+    void implSqueeze(byte[]output, int offset, int numBytes) {\n+        byte[] byteState = new byte[8];\n+        if (engineGetDigestLength() != 0) {\n+            \/\/ This is not an XOF, so the squeeze() call is illegal.\n+            throw new ProviderException(\"Squeezing is only allowed in XOF mode.\");\n+        }\n+\n+        if (squeezeOffset == -1) {\n+            finishAbsorb();\n+            squeezeOffset = 0;\n+        }\n+\n+        int availableBytes = blockSize - squeezeOffset;\n+\n+        if (availableBytes == 0) {\n+            keccak();\n+            squeezeOffset = 0;\n+            availableBytes = blockSize;\n+        }\n+\n+        while (numBytes > availableBytes) {\n+            int longOffset = squeezeOffset \/ 8;\n+            int bytesToCopy = 0;\n+\n+            if (longOffset * 8 < squeezeOffset) {\n+                asLittleEndian.set(byteState, 0, state[longOffset]);\n+                longOffset++;\n+                bytesToCopy = longOffset * 8 - squeezeOffset;\n+                System.arraycopy(byteState, 8 - bytesToCopy,\n+                        output, offset, bytesToCopy);\n+                offset += bytesToCopy;\n+            }\n+            for (int i = longOffset; i < blockSize \/ 8; i++) {\n+                asLittleEndian.set(output, offset, state[i]);\n+                offset += 8;\n+            }\n+            keccak();\n+            squeezeOffset = 0;\n+            numBytes -= availableBytes;\n+            availableBytes = blockSize;\n+        }\n+        \/\/ now numBytes <= availableBytes\n+        int longOffset = squeezeOffset \/ 8;\n+\n+        if (longOffset * 8 < squeezeOffset) {\n+            asLittleEndian.set(byteState, 0, state[longOffset]);\n+            int bytesToCopy = min((longOffset + 1) * 8 - squeezeOffset, numBytes);\n+            System.arraycopy(byteState, squeezeOffset - 8 * longOffset,\n+                    output, offset, bytesToCopy);\n+            longOffset++;\n+            numBytes -= bytesToCopy;\n+            offset += bytesToCopy;\n+            squeezeOffset += bytesToCopy;\n+        }\n+\n+        int longsToConvert =\n+                ((squeezeOffset + numBytes - longOffset * 8) + 7) \/ 8;\n+\n+        int limit = longOffset + longsToConvert - (numBytes % 8 == 0 ? 0 : 1);\n+\n+        for (int i = longOffset; i < limit; i++) {\n+            asLittleEndian.set(output, offset, state[i]);\n+            offset += 8;\n+            numBytes -= 8;\n+            squeezeOffset += 8;\n+        }\n+\n+        if (numBytes > 0) {\n+            asLittleEndian.set(byteState, 0, state[squeezeOffset \/ 8]);\n+            System.arraycopy(byteState, 0, output, offset, numBytes);\n+            squeezeOffset += numBytes;\n+        }\n+    }\n+\n+    byte[] implSqueeze(int numBytes) {\n+        byte[] result = new byte[numBytes];\n+        implSqueeze(result, 0, numBytes);\n+        return result;\n+    }\n+\n@@ -148,0 +242,1 @@\n+        squeezeOffset = -1;\n@@ -172,0 +267,4 @@\n+        keccak(state);\n+    }\n+\n+    public static void keccak(long[] stateArr) {\n@@ -175,5 +274,5 @@\n-        a0 = state[0]; a1 = state[1]; a2 = state[2]; a3 = state[3]; a4 = state[4];\n-        a5 = state[5]; a6 = state[6]; a7 = state[7]; a8 = state[8]; a9 = state[9];\n-        a10 = state[10]; a11 = state[11]; a12 = state[12]; a13 = state[13]; a14 = state[14];\n-        a15 = state[15]; a16 = state[16]; a17 = state[17]; a18 = state[18]; a19 = state[19];\n-        a20 = state[20]; a21 = state[21]; a22 = state[22]; a23 = state[23]; a24 = state[24];\n+        a0 = stateArr[0]; a1 = stateArr[1]; a2 = stateArr[2]; a3 = stateArr[3]; a4 = stateArr[4];\n+        a5 = stateArr[5]; a6 = stateArr[6]; a7 = stateArr[7]; a8 = stateArr[8]; a9 = stateArr[9];\n+        a10 = stateArr[10]; a11 = stateArr[11]; a12 = stateArr[12]; a13 = stateArr[13]; a14 = stateArr[14];\n+        a15 = stateArr[15]; a16 = stateArr[16]; a17 = stateArr[17]; a18 = stateArr[18]; a19 = stateArr[19];\n+        a20 = stateArr[20]; a21 = stateArr[21]; a22 = stateArr[22]; a23 = stateArr[23]; a24 = stateArr[24];\n@@ -181,1 +280,1 @@\n-        \/\/ process the lanes through step mappings\n+        \/\/ process the stateArr through step mappings\n@@ -283,5 +382,5 @@\n-        state[0] = a0; state[1] = a1; state[2] = a2; state[3] = a3; state[4] = a4;\n-        state[5] = a5; state[6] = a6; state[7] = a7; state[8] = a8; state[9] = a9;\n-        state[10] = a10; state[11] = a11; state[12] = a12; state[13] = a13; state[14] = a14;\n-        state[15] = a15; state[16] = a16; state[17] = a17; state[18] = a18; state[19] = a19;\n-        state[20] = a20; state[21] = a21; state[22] = a22; state[23] = a23; state[24] = a24;\n+        stateArr[0] = a0; stateArr[1] = a1; stateArr[2] = a2; stateArr[3] = a3; stateArr[4] = a4;\n+        stateArr[5] = a5; stateArr[6] = a6; stateArr[7] = a7; stateArr[8] = a8; stateArr[9] = a9;\n+        stateArr[10] = a10; stateArr[11] = a11; stateArr[12] = a12; stateArr[13] = a13; stateArr[14] = a14;\n+        stateArr[15] = a15; stateArr[16] = a16; stateArr[17] = a17; stateArr[18] = a18; stateArr[19] = a19;\n+        stateArr[20] = a20; stateArr[21] = a21; stateArr[22] = a22; stateArr[23] = a23; stateArr[24] = a24;\n@@ -331,0 +430,93 @@\n+\n+\n+    \/*\n+     * The SHAKE128 extendable output function.\n+     *\/\n+    public static final class SHAKE128 extends SHA3 {\n+        \/\/ d is the required number of output bytes.\n+        \/\/ If this constructor is used with d > 0, the squeezing methods\n+        \/\/ will throw a ProviderException.\n+        public SHAKE128(int d) {\n+            super(\"SHAKE128\", d, (byte) 0x1F, 32);\n+        }\n+\n+        \/\/ If this constructor is used to get an instance of the class, then,\n+        \/\/ after the last update, one can get the generated bytes using the\n+        \/\/ squeezing methods.\n+        \/\/ Calling digest method will throw a ProviderException.\n+        public SHAKE128() {\n+            super(\"SHAKE128\", 0, (byte) 0x1F, 32);\n+        }\n+\n+        public void update(byte in) {\n+            engineUpdate(in);\n+        }\n+        public void update(byte[] in, int off, int len) {\n+            engineUpdate(in, off, len);\n+        }\n+\n+        public void update(byte[] in) {\n+            engineUpdate(in, 0, in.length);\n+        }\n+\n+        public byte[] digest() {\n+            return engineDigest();\n+        }\n+\n+        public void squeeze(byte[] output, int offset, int numBytes) {\n+            implSqueeze(output, offset, numBytes);\n+        }\n+        public byte[] squeeze(int numBytes) {\n+            return implSqueeze(numBytes);\n+        }\n+\n+        public void reset() {\n+            engineReset();\n+        }\n+    }\n+    \/*\n+     * The SHAKE256 extendable output function.\n+     *\/\n+    public static final class SHAKE256 extends SHA3 {\n+        \/\/ d is the required number of output bytes.\n+        \/\/ If this constructor is used with d > 0, the squeezing methods will\n+        \/\/ throw a ProviderException.\n+        public SHAKE256(int d) {\n+            super(\"SHAKE256\", d, (byte) 0x1F, 64);\n+        }\n+\n+        \/\/ If this constructor is used to get an instance of the class, then,\n+        \/\/ after the last update, one can get the generated bytes using the\n+        \/\/ squeezing methods.\n+        \/\/ Calling a digest method will throw a ProviderException.\n+        public SHAKE256() {\n+            super(\"SHAKE256\", 0, (byte) 0x1F, 64);\n+        }\n+\n+        public void update(byte in) {\n+            engineUpdate(in);\n+        }\n+        public void update(byte[] in, int off, int len) {\n+            engineUpdate(in, off, len);\n+        }\n+\n+        public void update(byte[] in) {\n+            engineUpdate(in, 0, in.length);\n+        }\n+\n+        public byte[] digest() {\n+            return engineDigest();\n+        }\n+\n+        public void squeeze(byte[] output, int offset, int numBytes) {\n+            implSqueeze(output, offset, numBytes);\n+        }\n+        public byte[] squeeze(int numBytes) {\n+            return implSqueeze(numBytes);\n+        }\n+\n+        public void reset() {\n+            engineReset();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":212,"deletions":20,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.security.provider;\n-\n-\/*\n- * The SHAKE128 extendable output function.\n- *\/\n-public final class SHAKE128 extends SHA3 {\n-    public SHAKE128(int d) {\n-        super(\"SHAKE128\", d, (byte) 0x1F, 32);\n-    }\n-\n-    public void update(byte in) {\n-        engineUpdate(in);\n-    }\n-    public void update(byte[] in, int off, int len) {\n-        engineUpdate(in, off, len);\n-    }\n-\n-    public byte[] digest() {\n-        return engineDigest();\n-    }\n-\n-    public void reset() {\n-        engineReset();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE128.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.security.provider;\n-\n-\/*\n- * The SHAKE256 extendable output function.\n- *\/\n-public final class SHAKE256 extends SHA3 {\n-    public SHAKE256(int d) {\n-        super(\"SHAKE256\", d, (byte) 0x1F, 64);\n-    }\n-\n-    public void update(byte in) {\n-        engineUpdate(in);\n-    }\n-    public void update(byte[] in, int off, int len) {\n-        engineUpdate(in, off, len);\n-    }\n-\n-    public byte[] digest() {\n-        return engineDigest();\n-    }\n-\n-    public void reset() {\n-        engineReset();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE256.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-import sun.security.provider.SHAKE256;\n+import sun.security.provider.SHA3.SHAKE256;\n","filename":"test\/jdk\/sun\/security\/ec\/ed\/TestEdOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}