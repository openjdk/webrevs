{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    Signature.RefTypeSig superclassSignature();\n+    Signature.ClassTypeSig superclassSignature();\n@@ -44,1 +44,1 @@\n-    List<Signature.RefTypeSig> superinterfaceSignatures();\n+    List<Signature.ClassTypeSig> superinterfaceSignatures();\n@@ -54,2 +54,2 @@\n-    public static ClassSignature of(Signature.RefTypeSig superclassSignature,\n-                                    Signature.RefTypeSig... superinterfaceSignatures) {\n+    public static ClassSignature of(Signature.ClassTypeSig superclassSignature,\n+                                    Signature.ClassTypeSig... superinterfaceSignatures) {\n@@ -66,2 +66,2 @@\n-                                    Signature.RefTypeSig superclassSignature,\n-                                    Signature.RefTypeSig... superinterfaceSignatures) {\n+                                    Signature.ClassTypeSig superclassSignature,\n+                                    Signature.ClassTypeSig... superinterfaceSignatures) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassSignature.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-                        .map(this::mapSignature).toArray(Signature.RefTypeSig[]::new));\n+                        .map(this::mapSignature).toArray(Signature.ClassTypeSig[]::new));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n-        RefTypeSig superclass = referenceTypeSig();\n-        ArrayList<RefTypeSig> superinterfaces = null;\n+        ClassTypeSig superclass = classTypeSig();\n+        ArrayList<ClassTypeSig> superinterfaces = null;\n@@ -53,1 +53,1 @@\n-            superinterfaces.add(referenceTypeSig());\n+            superinterfaces.add(classTypeSig());\n@@ -175,0 +175,8 @@\n+    private ClassTypeSig classTypeSig() {\n+        var t = typeSig();\n+        if (t instanceof ClassTypeSig cts)\n+            return cts;\n+        else\n+            throw new IllegalArgumentException(\"not a valid type signature: \" + sig);\n+    }\n+\n@@ -259,2 +267,2 @@\n-    public static record ClassSignatureImpl(List<TypeParam> typeParameters, RefTypeSig superclassSignature,\n-            List<RefTypeSig> superinterfaceSignatures) implements ClassSignature {\n+    public static record ClassSignatureImpl(List<TypeParam> typeParameters, ClassTypeSig superclassSignature,\n+            List<ClassTypeSig> superinterfaceSignatures) implements ClassSignature {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}