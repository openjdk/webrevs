{"files":[{"patch":"@@ -2324,0 +2324,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return true;\n+}\n+\n@@ -7909,0 +7913,2 @@\n+  \/\/ We still assign cost here because two-address instructions may bring\n+  \/\/ side impact, i.e., spilling.\n@@ -7910,2 +7916,2 @@\n-  format %{ \"mov $dst, $src\\t# long -> ptr\" %}\n-\n+  format %{ \"castX2P $src\\t# long -> ptr\" %}\n+  size(0);\n@@ -7913,3 +7919,2 @@\n-    if ($dst$$reg != $src$$reg) {\n-      __ mov(as_Register($dst$$reg), as_Register($src$$reg));\n-    }\n+    \/* empty encoding *\/\n+    assert($dst$$reg == $src$$reg, \"We can't remove it when dst != src\");\n@@ -7917,2 +7922,1 @@\n-\n-  ins_pipe(ialu_reg);\n+  ins_pipe(pipe_class_empty);\n@@ -7924,0 +7928,2 @@\n+  \/\/ We still assign cost here because two-address instructions may bring\n+  \/\/ side impact, i.e., spilling.\n@@ -7925,2 +7931,2 @@\n-  format %{ \"mov $dst, $src\\t# ptr -> long\" %}\n-\n+  format %{ \"castP2X $src\\t# ptr -> long\" %}\n+  size(0);\n@@ -7928,3 +7934,2 @@\n-    if ($dst$$reg != $src$$reg) {\n-      __ mov(as_Register($dst$$reg), as_Register($src$$reg));\n-    }\n+    \/* empty encoding *\/\n+    assert($dst$$reg == $src$$reg, \"We can't remove it when dst != src\");\n@@ -7932,2 +7937,1 @@\n-\n-  ins_pipe(ialu_reg);\n+  ins_pipe(pipe_class_empty);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1020,0 +1020,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2167,0 +2167,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1961,0 +1961,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1492,0 +1492,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1401,0 +1401,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1600,0 +1600,4 @@\n+bool Matcher::use_same_src_and_dest_reg_for_CastX2P(void) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1691,0 +1691,13 @@\n+    \/\/ Allocate the same src and dest register for CastX2P and CastP2X\n+    \/\/ on some target platforms, then we can remove the instructions in\n+    \/\/ the final assembly.\n+    if (strcmp(\"CastX2P\", instr->ideal_Opcode(_globalNames)) == 0 ||\n+        strcmp(\"CastP2X\", instr->ideal_Opcode(_globalNames)) == 0) {\n+      assert(matching_input == 0, \"\");\n+      fprintf(fp,\"  virtual uint           two_adr() const  {\\n\");\n+      fprintf(fp,\"    if (Matcher::use_same_src_and_dest_reg_for_CastX2P())\\n\");\n+      fprintf(fp,\"      return oper_input_base();\\n\");\n+      fprintf(fp,\"    return 0;\\n\");\n+      fprintf(fp,\"  }\\n\");\n+    }\n+\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -459,0 +459,4 @@\n+  \/\/ Is it preferred to use the same src and dest register for CastX2P and\n+  \/\/ CastP2X? If true, we can remove the instructions in the final assembly.\n+  static bool use_same_src_and_dest_reg_for_CastX2P();\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}