[{"commit":{"message":"Use an interface function instead of macro"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"},{"filename":"src\/hotspot\/cpu\/s390\/s390.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_32.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/output_h.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.hpp"}],"sha":"daf42b40b5cad43e680c139a9332f3b109f9022e"},{"commit":{"message":"Force `CastX2P` to be a two-address instruction\n\nThis patch forces `CastX2P` to be a two-address instruction,\nso that C2 could allocate the same register for dst and\nsrc. Then we can remove the instruction completely in the\nassembly.\n\nThe motivation comes from some cast operations like `castPP`.\nThe difference for ADLC between `castPP` and `CastX2P` lies in\nthat `CastX2P` always has different types for dst and src.\nWe can force ADLC to generate an extra `two_adr()` for `CastX2P`\nlike it does automatically for `castPP`, which could tell register\nallocator that the instruction needs the same register for dst\nand src.\n\nHowever, sometimes, RA and GCM in C2 can't work as we expected.\n\nFor example, we have Assembly on the existing code:\n```\n  ldp    x10, x11, [x17,#136]\n  add    x10, x10, x15\n  add    x11, x11, x10\n  ldr    x12, [x17,#152]\n  str    x16, [x10]\n  add    x10, x12, x15\n  str    x16, [x11]\n  str    x16, [x10]\n```\n\nAfter applying the patch, the assembly is:\n```\n  ldr    x10, [x16,#136]  <--- 1\n  add    x10, x10, x15\n  ldr    x11, [x16,#144]  <--- 2\n  mov    x13, x10         <--- 3\n  str    x17, [x13]\n  ldr    x12, [x16,#152]\n  add    x10, x11, x10\n  str    x17, [x10]\n  add    x10, x12, x15\n  str    x17, [x10]\n```\n\nC2 generate a totally extra mov, see 3, and we even lost the chance\nto merge load pair, see 1 and 2. That's terrible.\n\nAlthough this scenario would disappear after combining with\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/20157, I'm\nstill not sure if this patch is worthwhile."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/adlc\/output_h.cpp"}],"sha":"ac9f3821dd9a3b36b0fa6311f9198b2851cf6d50"}]