{"files":[{"patch":"@@ -1371,2 +1371,2 @@\n-JVM_ENTRY(jobject, VH_UOE(JNIEnv* env, jobject mh, jobjectArray args)) {\n-  THROW_MSG_NULL(vmSymbols::java_lang_UnsupportedOperationException(), \"VarHandle access mode method a cannot be invoked reflectively\");\n+JVM_ENTRY(jobject, VH_UOE(JNIEnv* env, jobject vh, jobjectArray args)) {\n+  THROW_MSG_NULL(vmSymbols::java_lang_UnsupportedOperationException(), \"VarHandle access mode methods cannot be invoked reflectively\");\n@@ -1419,0 +1419,9 @@\n+  {CC \"get\",                        CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"set\",                        CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n+  {CC \"getVolatile\",                CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"setVolatile\",                CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n+  {CC \"getAcquire\",                 CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"setRelease\",                 CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n+  {CC \"getOpaque\",                  CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"setOpaque\",                  CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n+  {CC \"compareAndSet\",              CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n@@ -1422,3 +1431,7 @@\n-  {CC \"compareAndSet\",              CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n-  {CC \"get\",                        CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAcquire\",                 CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"weakCompareAndSetPlain\",     CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n+  {CC \"weakCompareAndSet\",          CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n+  {CC \"weakCompareAndSetAcquire\",   CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n+  {CC \"weakCompareAndSetRelease\",   CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n+  {CC \"getAndSet\",                  CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"getAndSetAcquire\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"getAndSetRelease\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n@@ -1428,3 +1441,0 @@\n-  {CC \"getAndBitwiseAnd\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAndBitwiseAndAcquire\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAndBitwiseAndRelease\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n@@ -1434,0 +1444,3 @@\n+  {CC \"getAndBitwiseAnd\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"getAndBitwiseAndAcquire\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n+  {CC \"getAndBitwiseAndRelease\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n@@ -1436,14 +1449,1 @@\n-  {CC \"getAndBitwiseXorRelease\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAndSet\",                  CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAndSetAcquire\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getAndSetRelease\",           CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getOpaque\",                  CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"getVolatile\",                CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)},\n-  {CC \"set\",                        CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n-  {CC \"setOpaque\",                  CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n-  {CC \"setRelease\",                 CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n-  {CC \"setVolatile\",                CC \"([\" OBJ \")V\",       FN_PTR(VH_UOE)},\n-  {CC \"weakCompareAndSet\",          CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n-  {CC \"weakCompareAndSetAcquire\",   CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n-  {CC \"weakCompareAndSetPlain\",     CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)},\n-  {CC \"weakCompareAndSetRelease\",   CC \"([\" OBJ \")Z\",       FN_PTR(VH_UOE)}\n+  {CC \"getAndBitwiseXorRelease\",    CC \"([\" OBJ \")\" OBJ,    FN_PTR(VH_UOE)}\n@@ -1458,0 +1458,1 @@\n+  assert(vmClasses::VarHandle_klass() != nullptr, \"should be present\");\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        \/\/ Try a reflective invoke using a Method, with an array of 0 arguments\n+        \/\/ Try a reflective invoke using a Method, with the minimal required arguments\n@@ -72,1 +72,1 @@\n-        Object args = new Object[0];\n+        Object arg = new Object[0];\n@@ -74,1 +74,1 @@\n-            vhm.invoke(v, args);\n+            vhm.invoke(v, arg);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestReflection.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}