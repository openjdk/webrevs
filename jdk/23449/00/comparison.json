{"files":[{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug 8020443 6899304\n-  @summary Test to check if the frame is created on the specified GraphicsDevice\n-  and if getScreenInsets()returns the correct values across multiple monitors.\n-  @library \/test\/lib\n-  @build jdk.test.lib.Platform jtreg.SkippedException\n-  @run main MultiScreenInsetsTest\n- *\/\n-\n-import java.awt.Frame;\n-import java.awt.GraphicsConfiguration;\n-import java.awt.GraphicsDevice;\n-import java.awt.GraphicsEnvironment;\n-import java.awt.Insets;\n-import java.awt.Rectangle;\n-import java.awt.Toolkit;\n-\n-import jdk.test.lib.Platform;\n-import jtreg.SkippedException;\n-\n-public class MultiScreenInsetsTest {\n-    private static final int SIZE = 100;\n-    \/\/ Allow a margin tolerance of 1 pixel due to scaling\n-    private static final int MARGIN_TOLERANCE = 1;\n-\n-    public static void main(String[] args) throws InterruptedException {\n-        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n-        GraphicsDevice[] gds = ge.getScreenDevices();\n-        if (gds.length < 2) {\n-            throw new SkippedException(\"It's a multi-screen test... skipping!\");\n-        }\n-\n-        for (int screen = 0; screen < gds.length; ++screen) {\n-            GraphicsDevice gd = gds[screen];\n-            GraphicsConfiguration gc = gd.getDefaultConfiguration();\n-            Rectangle bounds = gc.getBounds();\n-            Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n-            System.out.println(\"Screen #\" + screen);\n-            System.out.println(\"Screen Bounds: \" + bounds);\n-            System.out.println(\"Insets: \" + insets);\n-\n-            Frame frame = new Frame(gc);\n-            frame.setLocation(bounds.x + (bounds.width - SIZE) \/ 2,\n-                              bounds.y + (bounds.height - SIZE) \/ 2);\n-            frame.setSize(SIZE, SIZE);\n-\n-            \/*\n-             * On Windows, undecorated maximized frames are placed over the taskbar.\n-             * Use a decorated frame instead.\n-             *\/\n-            if (Platform.isWindows()) {\n-                frame.setUndecorated(false);\n-            } else {\n-                frame.setUndecorated(true);\n-            }\n-\n-            frame.setVisible(true);\n-\n-            \/\/ Maximize Frame to reach the struts\n-            frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);\n-            Thread.sleep(2000);\n-\n-            Rectangle frameBounds = frame.getBounds();\n-            System.out.println(\"Frame bounds: \" + frameBounds);\n-\n-            frame.dispose();\n-\n-            \/*\n-             * On Windows, the top-left corner of an undecorated maximized frame\n-             * may have negative coordinates (x, y).\n-             * Adjust the frame bounds accordingly.\n-             *\/\n-            if (frameBounds.x < bounds.x) {\n-                frameBounds.width -= (bounds.x - frameBounds.x) * 2;\n-                frameBounds.x = bounds.x;\n-            }\n-            if (frameBounds.y < bounds.y) {\n-                frameBounds.height -= (bounds.y - frameBounds.y) * 2;\n-                frameBounds.y = bounds.y;\n-            }\n-            System.out.println(\"Adjusted Frame bounds: \" + frameBounds);\n-\n-            if (bounds.x + insets.left != frameBounds.x\n-                || bounds.y + insets.top != frameBounds.y\n-                || Math.abs((bounds.width - insets.right - insets.left) - frameBounds.width) > MARGIN_TOLERANCE\n-                || Math.abs((bounds.height - insets.bottom - insets.top) - frameBounds.height) > MARGIN_TOLERANCE) {\n-                throw new RuntimeException(\"Test FAILED! Wrong screen #\" +\n-                                           screen + \" insets: \" + insets);\n-            }\n-        }\n-        System.out.println(\"Test PASSED!\");\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/MultiScreenInsetsTest\/MultiScreenInsetsTest.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-  @bug 4737732\n+  @bug 8020443 6899304 4737732\n@@ -29,3 +29,2 @@\n-  @author artem.ananiev: area=awt.toplevel\n-  @library ..\/..\/regtesthelpers\n-  @build Util\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -33,1 +32,1 @@\n-*\/\n+ *\/\n@@ -43,1 +42,1 @@\n-import test.java.awt.regtesthelpers.Util;\n+import jdk.test.lib.Platform;\n@@ -45,5 +44,4 @@\n-public class ScreenInsetsTest\n-{\n-    public static void main(String[] args)\n-    {\n-        boolean passed = true;\n+public class ScreenInsetsTest {\n+    private static final int SIZE = 100;\n+    \/\/ Allow a margin tolerance of 1 pixel due to scaling\n+    private static final int MARGIN_TOLERANCE = 1;\n@@ -51,0 +49,1 @@\n+    public static void main(String[] args) throws InterruptedException {\n@@ -53,1 +52,3 @@\n-        for (GraphicsDevice gd : gds) {\n+\n+        for (int screen = 0; screen < gds.length; ++screen) {\n+            GraphicsDevice gd = gds[screen];\n@@ -55,14 +56,10 @@\n-            Rectangle gcBounds = gc.getBounds();\n-            Insets gcInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n-            int left = gcInsets.left;\n-            int right = gcInsets.right;\n-            int bottom = gcInsets.bottom;\n-            int top = gcInsets.top;\n-            if (left < 0 || right < 0 || bottom < 0 || top < 0) {\n-                throw new RuntimeException(\"Negative value: \" + gcInsets);\n-            }\n-            int maxW = gcBounds.width \/ 3;\n-            int maxH = gcBounds.height \/ 3;\n-            if (left > maxW || right > maxW || bottom > maxH || top > maxH) {\n-                throw new RuntimeException(\"Big value: \" + gcInsets);\n-            }\n+            Rectangle bounds = gc.getBounds();\n+            Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+            System.out.println(\"Screen #\" + screen);\n+            System.out.println(\"Screen Bounds: \" + bounds);\n+            System.out.println(\"Insets: \" + insets);\n+\n+            Frame frame = new Frame(gc);\n+            frame.setLocation(bounds.x + (bounds.width - SIZE) \/ 2,\n+                    bounds.y + (bounds.height - SIZE) \/ 2);\n+            frame.setSize(SIZE, SIZE);\n@@ -70,4 +67,8 @@\n-            if (!Toolkit.getDefaultToolkit().isFrameStateSupported(Frame.MAXIMIZED_BOTH))\n-            {\n-                \/\/ this state is used in the test - sorry\n-                continue;\n+            \/*\n+             * On Windows, undecorated maximized frames are placed over the taskbar.\n+             * Use a decorated frame instead.\n+             *\/\n+            if (Platform.isWindows()) {\n+                frame.setUndecorated(false);\n+            } else {\n+                frame.setUndecorated(true);\n@@ -76,5 +77,1 @@\n-            Frame f = new Frame(\"Test\", gc);\n-            f.setUndecorated(true);\n-            f.setBounds(gcBounds.x + 100, gcBounds.y + 100, 320, 240);\n-            f.setVisible(true);\n-            Util.waitForIdle(null);\n+            frame.setVisible(true);\n@@ -82,2 +79,3 @@\n-            f.setExtendedState(Frame.MAXIMIZED_BOTH);\n-            Util.waitForIdle(null);\n+            \/\/ Maximize Frame to reach the struts\n+            frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);\n+            Thread.sleep(2000);\n@@ -85,6 +83,13 @@\n-            Rectangle fBounds = f.getBounds();\n-            \/\/ workaround: on Windows maximized windows have negative coordinates\n-            if (fBounds.x < gcBounds.x)\n-            {\n-                fBounds.width -= (gcBounds.x - fBounds.x) * 2; \/\/ width is decreased\n-                fBounds.x = gcBounds.x;\n+            Rectangle frameBounds = frame.getBounds();\n+            System.out.println(\"Frame bounds: \" + frameBounds);\n+\n+            frame.dispose();\n+\n+            \/*\n+             * On Windows, the top-left corner of an undecorated maximized frame\n+             * may have negative coordinates (x, y).\n+             * Adjust the frame bounds accordingly.\n+             *\/\n+            if (frameBounds.x < bounds.x) {\n+                frameBounds.width -= (bounds.x - frameBounds.x) * 2;\n+                frameBounds.x = bounds.x;\n@@ -92,4 +97,3 @@\n-            if (fBounds.y < gcBounds.y)\n-            {\n-                fBounds.height -= (gcBounds.y - fBounds.y) * 2; \/\/ height is decreased\n-                fBounds.y = gcBounds.y;\n+            if (frameBounds.y < bounds.y) {\n+                frameBounds.height -= (bounds.y - frameBounds.y) * 2;\n+                frameBounds.y = bounds.y;\n@@ -97,4 +101,1 @@\n-            Insets expected = new Insets(fBounds.y - gcBounds.y,\n-                                         fBounds.x - gcBounds.x,\n-                                         gcBounds.y + gcBounds.height - fBounds.y - fBounds.height,\n-                                         gcBounds.x + gcBounds.width - fBounds.x - fBounds.width);\n+            System.out.println(\"Adjusted Frame bounds: \" + frameBounds);\n@@ -102,12 +103,6 @@\n-            \/\/ On Windows 10 and up system allows undecorated maximized windows\n-            \/\/ to be placed over the taskbar so calculated insets might\n-            \/\/ be smaller than reported ones depending on the taskbar position\n-            if (gcInsets.top < expected.top\n-                    || gcInsets.bottom < expected.bottom\n-                    || gcInsets.left < expected.left\n-                    || gcInsets.right < expected.right)\n-            {\n-                passed = false;\n-                System.err.println(\"Wrong insets for GraphicsConfig: \" + gc);\n-                System.err.println(\"\\tExpected: \" + expected);\n-                System.err.println(\"\\tActual: \" + gcInsets);\n+            if (bounds.x + insets.left != frameBounds.x\n+                    || bounds.y + insets.top != frameBounds.y\n+                    || Math.abs((bounds.width - insets.right - insets.left) - frameBounds.width) > MARGIN_TOLERANCE\n+                    || Math.abs((bounds.height - insets.bottom - insets.top) - frameBounds.height) > MARGIN_TOLERANCE) {\n+                throw new RuntimeException(\"Test FAILED! Wrong screen #\" +\n+                        screen + \" insets: \" + insets);\n@@ -115,7 +110,0 @@\n-\n-            f.dispose();\n-        }\n-\n-        if (!passed)\n-        {\n-            throw new RuntimeException(\"TEST FAILED: Toolkit.getScreenInsets() returns wrong value for some screens\");\n@@ -123,0 +111,1 @@\n+        System.out.println(\"Test PASSED!\");\n","filename":"test\/jdk\/java\/awt\/Toolkit\/ScreenInsetsTest\/ScreenInsetsTest.java","additions":60,"deletions":71,"binary":false,"changes":131,"status":"modified"}]}