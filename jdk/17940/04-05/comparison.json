{"files":[{"patch":"@@ -24,1 +24,0 @@\n-import java.io.File;\n@@ -26,1 +25,0 @@\n-import java.io.FileNotFoundException;\n@@ -30,0 +28,1 @@\n+import java.net.Socket;\n@@ -36,1 +35,0 @@\n-import java.nio.file.Path;\n@@ -39,0 +37,2 @@\n+import java.security.Principal;\n+import java.security.PrivateKey;\n@@ -40,0 +40,1 @@\n+import java.security.cert.X509Certificate;\n@@ -46,0 +47,2 @@\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n@@ -47,0 +50,1 @@\n+import javax.net.ssl.SSLEngine;\n@@ -50,0 +54,1 @@\n+import javax.net.ssl.X509ExtendedKeyManager;\n@@ -65,0 +70,1 @@\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n@@ -103,1 +109,1 @@\n-     * sets {@link HttpsParameters#setNeedClientAuth(boolean)} to true and verifies\n+     * sets {@link HttpsParameters#setNeedClientAuth(boolean)} and verifies\n@@ -105,1 +111,1 @@\n-     * true and {@link HttpsParameters#getWantClientAuth()} returns false\n+     * the set value and {@link HttpsParameters#getWantClientAuth()} returns false\n@@ -119,0 +125,7 @@\n+        \/\/ now set needClientAuth = false and verify that both needClientAuth and wantClientAuth\n+        \/\/ are now false\n+        needClientAuthParams.setNeedClientAuth(false);\n+        assertFalse(needClientAuthParams.getNeedClientAuth(),\n+                \"needClientAuth was expected to be false but wasn't\");\n+        assertFalse(needClientAuthParams.getWantClientAuth(),\n+                \"wantClientAuth was expected to be false but wasn't\");\n@@ -122,1 +135,1 @@\n-     * sets {@link HttpsParameters#setWantClientAuth(boolean)} to true and verifies\n+     * sets {@link HttpsParameters#setWantClientAuth(boolean)} and verifies\n@@ -124,1 +137,1 @@\n-     * true and {@link HttpsParameters#getNeedClientAuth()} returns false\n+     * the set value and {@link HttpsParameters#getNeedClientAuth()} returns false\n@@ -138,0 +151,7 @@\n+        \/\/ now set wantClientAuth = false and verify that both wantClientAuth and needClientAuth\n+        \/\/ are now false\n+        wantClientAuthParams.setWantClientAuth(false);\n+        assertFalse(wantClientAuthParams.getWantClientAuth(),\n+                \"wantClientAuth was expected to be false but wasn't\");\n+        assertFalse(wantClientAuthParams.getNeedClientAuth(),\n+                \"needClientAuth was expected to be false but wasn't\");\n@@ -178,2 +198,2 @@\n-                final SSLContext clientSSLCtx = presentClientCerts\n-                        ? serverSSLCtx : onlyTrustStoreContext();\n+                final SSLCtx clientSSLCtx = presentClientCerts\n+                        ? keyAndTrustStoreContext() : onlyTrustStoreContext();\n@@ -181,1 +201,1 @@\n-                try (final HttpClient client = builder.sslContext(clientSSLCtx)\n+                try (final HttpClient client = builder.sslContext(clientSSLCtx.sslContext)\n@@ -202,0 +222,3 @@\n+                        \/\/ verify that the server asked the client to present the certificates\n+                        assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n+                                \"server was expected to request client certs, but didn't\");\n@@ -207,0 +230,3 @@\n+                        \/\/ verify that the server asked the client to present the certificates\n+                        assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n+                                \"server was expected to request client certs, but didn't\");\n@@ -274,2 +300,2 @@\n-                final SSLContext clientSSLCtx = presentClientCerts\n-                        ? serverSSLCtx : onlyTrustStoreContext();\n+                final SSLCtx clientSSLCtx = presentClientCerts ?\n+                        keyAndTrustStoreContext() : onlyTrustStoreContext();\n@@ -277,1 +303,1 @@\n-                try (final HttpClient client = builder.sslContext(clientSSLCtx)\n+                try (final HttpClient client = builder.sslContext(clientSSLCtx.sslContext)\n@@ -290,0 +316,3 @@\n+                    \/\/ verify that the server asked the client to present the certificates\n+                    assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n+                            \"server was expected to request client certs, but didn't\");\n@@ -316,2 +345,17 @@\n-     * Creates and returns a {@link SSLContext} which only has trust material\n-     * and doesn't have any test specific keys.\n+     * Creates and returns a SSLContext which only has trust material sourced from\n+     * {@link #loadTestKeyStore() test keystore} and doesn't have any keys.\n+     *\/\n+    private static SSLCtx onlyTrustStoreContext() throws Exception {\n+        final KeyStore keyStore = loadTestKeyStore();\n+        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(keyStore);\n+        final SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        \/\/ KeyManager with no keys\n+        final DelegatingKeyManager keyManager = new DelegatingKeyManager(null);\n+        ctx.init(new KeyManager[]{keyManager}, tmf.getTrustManagers(), null);\n+        return new SSLCtx(ctx, keyManager);\n+    }\n+\n+    \/**\n+     * Creates and returns a SSLContext which has both key and trust material\n+     * sourced from {@link #loadTestKeyStore() test keystore}\n@@ -319,1 +363,1 @@\n-    private static SSLContext onlyTrustStoreContext() throws Exception {\n+    private static SSLCtx keyAndTrustStoreContext() throws Exception {\n@@ -321,0 +365,2 @@\n+        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n+        kmf.init(keyStore, \"passphrase\".toCharArray());\n@@ -324,3 +370,5 @@\n-        \/\/ initialize with only trust managers\n-        ctx.init(null, tmf.getTrustManagers(), null);\n-        return ctx;\n+        final X509ExtendedKeyManager x509km = assertInstanceOf(X509ExtendedKeyManager.class,\n+                kmf.getKeyManagers()[0]);\n+        final DelegatingKeyManager keyManager = new DelegatingKeyManager(x509km);\n+        ctx.init(new KeyManager[]{keyManager}, tmf.getTrustManagers(), null);\n+        return new SSLCtx(ctx, keyManager);\n@@ -329,0 +377,3 @@\n+    \/**\n+     * loads a test specific keystore from {@code test\/lib\/jdk\/test\/lib\/net\/testkeys}\n+     *\/\n@@ -379,0 +430,83 @@\n+\n+    private record SSLCtx(SSLContext sslContext, DelegatingKeyManager keyManager) {\n+    }\n+\n+    private static final class DelegatingKeyManager extends X509ExtendedKeyManager {\n+\n+        private final X509ExtendedKeyManager underlying;\n+        private boolean clientAuthInitiated;\n+\n+        \/\/ km can be null\n+        private DelegatingKeyManager(final X509ExtendedKeyManager km) {\n+            this.underlying = km;\n+        }\n+\n+        @Override\n+        public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,\n+                                              SSLEngine engine) {\n+            clientAuthInitiated = true; \/\/ keep track that client alias selection was requested\n+            if (this.underlying != null) {\n+                return this.underlying.chooseEngineClientAlias(keyType, issuers, engine);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public String chooseEngineServerAlias(String keyType, Principal[] issuers,\n+                                              SSLEngine engine) {\n+            if (this.underlying != null) {\n+                return this.underlying.chooseEngineServerAlias(keyType, issuers, engine);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getClientAliases(String keyType, Principal[] issuers) {\n+            if (this.underlying != null) {\n+                return this.underlying.getClientAliases(keyType, issuers);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n+            clientAuthInitiated = true; \/\/ keep track that client alias selection was requested\n+            if (this.underlying != null) {\n+                return this.underlying.chooseClientAlias(keyType, issuers, socket);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public String[] getServerAliases(String keyType, Principal[] issuers) {\n+            if (this.underlying != null) {\n+                return this.underlying.getServerAliases(keyType, issuers);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+            if (this.underlying != null) {\n+                return this.underlying.chooseServerAlias(keyType, issuers, socket);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public X509Certificate[] getCertificateChain(String alias) {\n+            clientAuthInitiated = true; \/\/ keep track that client certs was requested\n+            if (this.underlying != null) {\n+                return this.underlying.getCertificateChain(alias);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public PrivateKey getPrivateKey(String alias) {\n+            if (this.underlying != null) {\n+                return this.underlying.getPrivateKey(alias);\n+            }\n+            return null;\n+        }\n+    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HttpsParametersClientAuthTest.java","additions":153,"deletions":19,"binary":false,"changes":172,"status":"modified"}]}