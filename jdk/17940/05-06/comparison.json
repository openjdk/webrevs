{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.net.Socket;\n@@ -37,2 +36,0 @@\n-import java.security.Principal;\n-import java.security.PrivateKey;\n@@ -40,1 +37,0 @@\n-import java.security.cert.X509Certificate;\n@@ -47,2 +43,0 @@\n-import javax.net.ssl.KeyManager;\n-import javax.net.ssl.KeyManagerFactory;\n@@ -50,1 +44,0 @@\n-import javax.net.ssl.SSLEngine;\n@@ -54,1 +47,0 @@\n-import javax.net.ssl.X509ExtendedKeyManager;\n@@ -70,1 +62,0 @@\n-import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n@@ -198,2 +189,2 @@\n-                final SSLCtx clientSSLCtx = presentClientCerts\n-                        ? keyAndTrustStoreContext() : onlyTrustStoreContext();\n+                final SSLContext clientSSLCtx = presentClientCerts\n+                        ? serverSSLCtx : onlyTrustStoreContext();\n@@ -201,1 +192,1 @@\n-                try (final HttpClient client = builder.sslContext(clientSSLCtx.sslContext)\n+                try (final HttpClient client = builder.sslContext(clientSSLCtx)\n@@ -222,3 +213,4 @@\n-                        \/\/ verify that the server asked the client to present the certificates\n-                        assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n-                                \"server was expected to request client certs, but didn't\");\n+                        \/\/ verify the client did present the certs\n+                        assertTrue(resp.sslSession().isPresent(), \"missing SSLSession on response\");\n+                        assertNotNull(resp.sslSession().get().getLocalCertificates(),\n+                                \"client was expected to present certs to the server, but didn't\");\n@@ -230,3 +222,0 @@\n-                        \/\/ verify that the server asked the client to present the certificates\n-                        assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n-                                \"server was expected to request client certs, but didn't\");\n@@ -245,1 +234,1 @@\n-                                assertTrue(msg != null && msg.contains(\"bad_certificate\"),\n+                                assertTrue(msg != null && msg.contains(\"certificate_required\"),\n@@ -300,2 +289,2 @@\n-                final SSLCtx clientSSLCtx = presentClientCerts ?\n-                        keyAndTrustStoreContext() : onlyTrustStoreContext();\n+                final SSLContext clientSSLCtx = presentClientCerts\n+                        ? serverSSLCtx : onlyTrustStoreContext();\n@@ -303,1 +292,1 @@\n-                try (final HttpClient client = builder.sslContext(clientSSLCtx.sslContext)\n+                try (final HttpClient client = builder.sslContext(clientSSLCtx)\n@@ -316,3 +305,6 @@\n-                    \/\/ verify that the server asked the client to present the certificates\n-                    assertTrue(clientSSLCtx.keyManager.clientAuthInitiated,\n-                            \"server was expected to request client certs, but didn't\");\n+                    if (presentClientCerts) {\n+                        \/\/ verify the client did present the certs\n+                        assertTrue(resp.sslSession().isPresent(), \"missing SSLSession on response\");\n+                        assertNotNull(resp.sslSession().get().getLocalCertificates(),\n+                                \"client was expected to present certs to the server, but didn't\");\n+                    }\n@@ -345,2 +337,2 @@\n-     * Creates and returns a SSLContext which only has trust material sourced from\n-     * {@link #loadTestKeyStore() test keystore} and doesn't have any keys.\n+     * Creates and returns a {@link SSLContext} which only has trust material\n+     * and doesn't have any test specific keys.\n@@ -348,1 +340,1 @@\n-    private static SSLCtx onlyTrustStoreContext() throws Exception {\n+    private static SSLContext onlyTrustStoreContext() throws Exception {\n@@ -353,4 +345,3 @@\n-        \/\/ KeyManager with no keys\n-        final DelegatingKeyManager keyManager = new DelegatingKeyManager(null);\n-        ctx.init(new KeyManager[]{keyManager}, tmf.getTrustManagers(), null);\n-        return new SSLCtx(ctx, keyManager);\n+        \/\/ initialize with only trust managers\n+        ctx.init(null, tmf.getTrustManagers(), null);\n+        return ctx;\n@@ -359,21 +350,0 @@\n-    \/**\n-     * Creates and returns a SSLContext which has both key and trust material\n-     * sourced from {@link #loadTestKeyStore() test keystore}\n-     *\/\n-    private static SSLCtx keyAndTrustStoreContext() throws Exception {\n-        final KeyStore keyStore = loadTestKeyStore();\n-        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n-        kmf.init(keyStore, \"passphrase\".toCharArray());\n-        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(keyStore);\n-        final SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        final X509ExtendedKeyManager x509km = assertInstanceOf(X509ExtendedKeyManager.class,\n-                kmf.getKeyManagers()[0]);\n-        final DelegatingKeyManager keyManager = new DelegatingKeyManager(x509km);\n-        ctx.init(new KeyManager[]{keyManager}, tmf.getTrustManagers(), null);\n-        return new SSLCtx(ctx, keyManager);\n-    }\n-\n-    \/**\n-     * loads a test specific keystore from {@code test\/lib\/jdk\/test\/lib\/net\/testkeys}\n-     *\/\n@@ -430,83 +400,0 @@\n-\n-    private record SSLCtx(SSLContext sslContext, DelegatingKeyManager keyManager) {\n-    }\n-\n-    private static final class DelegatingKeyManager extends X509ExtendedKeyManager {\n-\n-        private final X509ExtendedKeyManager underlying;\n-        private boolean clientAuthInitiated;\n-\n-        \/\/ km can be null\n-        private DelegatingKeyManager(final X509ExtendedKeyManager km) {\n-            this.underlying = km;\n-        }\n-\n-        @Override\n-        public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,\n-                                              SSLEngine engine) {\n-            clientAuthInitiated = true; \/\/ keep track that client alias selection was requested\n-            if (this.underlying != null) {\n-                return this.underlying.chooseEngineClientAlias(keyType, issuers, engine);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public String chooseEngineServerAlias(String keyType, Principal[] issuers,\n-                                              SSLEngine engine) {\n-            if (this.underlying != null) {\n-                return this.underlying.chooseEngineServerAlias(keyType, issuers, engine);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public String[] getClientAliases(String keyType, Principal[] issuers) {\n-            if (this.underlying != null) {\n-                return this.underlying.getClientAliases(keyType, issuers);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n-            clientAuthInitiated = true; \/\/ keep track that client alias selection was requested\n-            if (this.underlying != null) {\n-                return this.underlying.chooseClientAlias(keyType, issuers, socket);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public String[] getServerAliases(String keyType, Principal[] issuers) {\n-            if (this.underlying != null) {\n-                return this.underlying.getServerAliases(keyType, issuers);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n-            if (this.underlying != null) {\n-                return this.underlying.chooseServerAlias(keyType, issuers, socket);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public X509Certificate[] getCertificateChain(String alias) {\n-            clientAuthInitiated = true; \/\/ keep track that client certs was requested\n-            if (this.underlying != null) {\n-                return this.underlying.getCertificateChain(alias);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public PrivateKey getPrivateKey(String alias) {\n-            if (this.underlying != null) {\n-                return this.underlying.getPrivateKey(alias);\n-            }\n-            return null;\n-        }\n-    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HttpsParametersClientAuthTest.java","additions":23,"deletions":136,"binary":false,"changes":159,"status":"modified"}]}