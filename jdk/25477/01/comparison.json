{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.jpackage.internal.model.ExternalApplication;\n@@ -33,3 +34,3 @@\n-    MacAppImageFileExtras(AppImageFile appImageFile) {\n-        this(getBooleanExtraFieldValue(ExtraAppImageFileField.SIGNED.fieldName(), appImageFile),\n-                getBooleanExtraFieldValue(ExtraAppImageFileField.APP_STORE.fieldName(), appImageFile));\n+    MacAppImageFileExtras(ExternalApplication app) {\n+        this(getBooleanExtraFieldValue(ExtraAppImageFileField.SIGNED.fieldName(), app),\n+                getBooleanExtraFieldValue(ExtraAppImageFileField.APP_STORE.fieldName(), app));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageFileExtras.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import jdk.jpackage.internal.model.ExternalApplication;\n@@ -58,1 +59,1 @@\n-final class AppImageFile {\n+final class AppImageFile implements ExternalApplication {\n@@ -75,6 +76,2 @@\n-    \/**\n-     * Returns list of additional launchers configured for the application.\n-     *\n-     * Returns empty list for application without additional launchers.\n-     *\/\n-    List<LauncherInfo> getAddLaunchers() {\n+    @Override\n+    public List<LauncherInfo> getAddLaunchers() {\n@@ -84,4 +81,2 @@\n-    \/**\n-     * Returns application version. Never returns null or empty value.\n-     *\/\n-    String getAppVersion() {\n+    @Override\n+    public String getAppVersion() {\n@@ -91,4 +86,2 @@\n-    \/**\n-     * Returns application name. Never returns null or empty value.\n-     *\/\n-    String getAppName() {\n+    @Override\n+    public String getAppName() {\n@@ -98,4 +91,2 @@\n-    \/**\n-     * Returns main application launcher name. Never returns null or empty value.\n-     *\/\n-    String getLauncherName() {\n+    @Override\n+    public String getLauncherName() {\n@@ -105,4 +96,2 @@\n-    \/**\n-     * Returns main class name. Never returns null or empty value.\n-     *\/\n-    String getMainClass() {\n+    @Override\n+    public String getMainClass() {\n@@ -112,4 +101,2 @@\n-    \/**\n-     * Returns additional properties. Never returns null.\n-     *\/\n-    Map<String, String> getExtra() {\n+    @Override\n+    public Map<String, String> getExtra() {\n@@ -226,1 +213,1 @@\n-    static boolean getBooleanExtraFieldValue(String fieldId, AppImageFile appImageFile) {\n+    static boolean getBooleanExtraFieldValue(String fieldId, ExternalApplication appImageFile) {\n@@ -321,10 +308,0 @@\n-    record LauncherInfo(String name, boolean service, Map<String, String> extra) {\n-        LauncherInfo {\n-            Objects.requireNonNull(name);\n-            Objects.requireNonNull(extra);\n-            if (name.isBlank()) {\n-                throw new IllegalArgumentException();\n-            }\n-        }\n-    }\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":15,"deletions":38,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n@@ -41,0 +40,2 @@\n+import jdk.jpackage.internal.model.ExternalApplication;\n+import jdk.jpackage.internal.model.ExternalApplication.LauncherInfo;\n@@ -86,1 +87,1 @@\n-    ApplicationBuilder initFromAppImage(AppImageFile appImageFile,\n+    ApplicationBuilder initFromExternalApplication(ExternalApplication app,\n@@ -89,1 +90,1 @@\n-            version = appImageFile.getAppVersion();\n+            version = app.getAppVersion();\n@@ -92,1 +93,1 @@\n-            name = appImageFile.getAppName();\n+            name = app.getAppName();\n@@ -96,1 +97,1 @@\n-        var mainLauncherInfo = new LauncherInfo(appImageFile.getLauncherName(), false, Map.of());\n+        var mainLauncherInfo = new LauncherInfo(app.getLauncherName(), false, Map.of());\n@@ -100,1 +101,1 @@\n-                appImageFile.getAddLaunchers().stream().map(mapper).toList());\n+                app.getAddLaunchers().stream().map(mapper).toList());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ApplicationBuilder.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.jpackage.internal.util.CollectionUtils;\n@@ -116,1 +115,1 @@\n-            mimeTypes = CollectionUtils.toSet(v);\n+            mimeTypes = Set.copyOf(v);\n@@ -121,1 +120,1 @@\n-            extensions = CollectionUtils.toSet(v);\n+            extensions = Set.copyOf(v);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FileAssociationGroup.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n@@ -65,0 +64,1 @@\n+import jdk.jpackage.internal.model.ExternalApplication.LauncherInfo;\n@@ -106,1 +106,1 @@\n-                appBuilder.initFromAppImage(appImageFile, launcherInfo -> {\n+                appBuilder.initFromExternalApplication(appImageFile, launcherInfo -> {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/FromParams.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.util.OperatingSystem;\n@@ -31,2 +30,0 @@\n-import java.io.Reader;\n-import java.lang.module.ModuleDescriptor;\n@@ -41,1 +38,0 @@\n-import java.util.Objects;\n@@ -43,1 +39,0 @@\n-import java.util.Properties;\n@@ -79,1 +74,1 @@\n-        return moduleInfo.name;\n+        return moduleInfo.name();\n@@ -98,1 +93,1 @@\n-            return moduleInfo.version;\n+            return moduleInfo.version().orElse(null);\n@@ -148,2 +143,1 @@\n-            launcherData.moduleInfo = ModuleInfo.fromModuleDescriptor(\n-                    moduleRef.descriptor());\n+            launcherData.moduleInfo = ModuleInfo.fromModuleReference(moduleRef);\n@@ -156,1 +150,1 @@\n-                    cookedRuntime);\n+                    cookedRuntime).orElse(null);\n@@ -165,1 +159,1 @@\n-            launcherData.qualifiedClassName = launcherData.moduleInfo.mainClass;\n+            launcherData.qualifiedClassName = launcherData.moduleInfo.mainClass().orElse(null);\n@@ -313,72 +307,0 @@\n-\n-    private static final class ModuleInfo {\n-        String name;\n-        String version;\n-        String mainClass;\n-\n-        static ModuleInfo fromModuleDescriptor(ModuleDescriptor md) {\n-            ModuleInfo result = new ModuleInfo();\n-            result.name = md.name();\n-            result.mainClass = md.mainClass().orElse(null);\n-\n-            ModuleDescriptor.Version ver = md.version().orElse(null);\n-            if (ver != null) {\n-                result.version = ver.toString();\n-            } else {\n-                result.version = md.rawVersion().orElse(null);\n-            }\n-\n-            return result;\n-        }\n-\n-        static ModuleInfo fromCookedRuntime(String moduleName,\n-                Path cookedRuntime) {\n-            Objects.requireNonNull(moduleName);\n-\n-            \/\/ We can't extract info about version and main class of a module\n-            \/\/ linked in external runtime without running ModuleFinder in that\n-            \/\/ runtime. But this is too much work as the runtime might have been\n-            \/\/ coocked without native launchers. So just make sure the module\n-            \/\/ is linked in the runtime by simply analysing the data\n-            \/\/ of `release` file.\n-\n-            final Path releaseFile;\n-            if (!OperatingSystem.isMacOS()) {\n-                releaseFile = cookedRuntime.resolve(\"release\");\n-            } else {\n-                \/\/ On Mac `cookedRuntime` can be runtime root or runtime home.\n-                Path runtimeHome = cookedRuntime.resolve(\"Contents\/Home\");\n-                if (!Files.isDirectory(runtimeHome)) {\n-                    runtimeHome = cookedRuntime;\n-                }\n-                releaseFile = runtimeHome.resolve(\"release\");\n-            }\n-\n-            try (Reader reader = Files.newBufferedReader(releaseFile)) {\n-                Properties props = new Properties();\n-                props.load(reader);\n-                String moduleList = props.getProperty(\"MODULES\");\n-                if (moduleList == null) {\n-                    return null;\n-                }\n-\n-                if ((moduleList.startsWith(\"\\\"\") && moduleList.endsWith(\"\\\"\"))\n-                        || (moduleList.startsWith(\"\\'\") && moduleList.endsWith(\n-                        \"\\'\"))) {\n-                    moduleList = moduleList.substring(1, moduleList.length() - 1);\n-                }\n-\n-                if (!List.of(moduleList.split(\"\\\\s+\")).contains(moduleName)) {\n-                    return null;\n-                }\n-            } catch (IOException|IllegalArgumentException ex) {\n-                Log.verbose(ex);\n-                return null;\n-            }\n-\n-            ModuleInfo result = new ModuleInfo();\n-            result.name = moduleName;\n-\n-            return result;\n-        }\n-    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java","additions":5,"deletions":83,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-            decorator = new ModuleStartupInfo(launcherData.moduleName(),\n-                    launcherData.modulePath());\n+            decorator = new ModuleStartupInfo(launcherData.moduleName());\n@@ -67,2 +66,1 @@\n-    private static record ModuleStartupInfo(String moduleName,\n-            List<Path> modulePath) implements UnaryOperator<LauncherStartupInfo> {\n+    private static record ModuleStartupInfo(String moduleName) implements UnaryOperator<LauncherStartupInfo> {\n@@ -73,2 +71,1 @@\n-                    new LauncherModularStartupInfoMixin.Stub(moduleName,\n-                            modulePath));\n+                    new LauncherModularStartupInfoMixin.Stub(moduleName));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherStartupInfoBuilder.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.lang.module.ModuleDescriptor;\n+import java.lang.module.ModuleReference;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Properties;\n+import jdk.internal.util.OperatingSystem;\n+\n+record ModuleInfo(String name, Optional<String> version, Optional<String> mainClass, Optional<URI> location) {\n+\n+    Optional<Path> fileLocation() {\n+        return location.filter(loc -> {\n+            return loc.getScheme().equals(\"file\");\n+        }).map(Path::of);\n+    }\n+\n+    static ModuleInfo fromModuleReference(ModuleReference mr) {\n+        final var md = mr.descriptor();\n+        return new ModuleInfo(md.name(), md.version().map(ModuleDescriptor.Version::toString).or(md::rawVersion), md.mainClass(), mr.location());\n+    }\n+\n+    static Optional<ModuleInfo> fromCookedRuntime(String moduleName, Path cookedRuntime) {\n+        Objects.requireNonNull(moduleName);\n+        Objects.requireNonNull(cookedRuntime);\n+\n+        \/\/ We can't extract info about version and main class of a module\n+        \/\/ linked in external runtime without running ModuleFinder in that\n+        \/\/ runtime. But this is too much work as the runtime might have been\n+        \/\/ coocked without native launchers. So just make sure the module\n+        \/\/ is linked in the runtime by simply analysing the data\n+        \/\/ of `release` file.\n+\n+        final Path releaseFile;\n+        if (!OperatingSystem.isMacOS()) {\n+            releaseFile = cookedRuntime.resolve(\"release\");\n+        } else {\n+            \/\/ On Mac `cookedRuntime` can be runtime root or runtime home.\n+            Path runtimeHome = cookedRuntime.resolve(\"Contents\/Home\");\n+            if (!Files.isDirectory(runtimeHome)) {\n+                runtimeHome = cookedRuntime;\n+            }\n+            releaseFile = runtimeHome.resolve(\"release\");\n+        }\n+\n+        try (Reader reader = Files.newBufferedReader(releaseFile)) {\n+            Properties props = new Properties();\n+            props.load(reader);\n+            String moduleList = props.getProperty(\"MODULES\");\n+            if (moduleList == null) {\n+                return Optional.empty();\n+            }\n+\n+            if ((moduleList.startsWith(\"\\\"\") && moduleList.endsWith(\"\\\"\"))\n+                    || (moduleList.startsWith(\"\\'\") && moduleList.endsWith(\n+                    \"\\'\"))) {\n+                moduleList = moduleList.substring(1, moduleList.length() - 1);\n+            }\n+\n+            if (!List.of(moduleList.split(\"\\\\s+\")).contains(moduleName)) {\n+                return Optional.empty();\n+            }\n+        } catch (IOException|IllegalArgumentException ex) {\n+            Log.verbose(ex);\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(new ModuleInfo(moduleName, Optional.empty(), Optional.empty(), Optional.empty()));\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ModuleInfo.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.internal.model.ExternalApplication;\n@@ -96,2 +97,2 @@\n-    static final BundlerParamInfo<AppImageFile> PREDEFINED_APP_IMAGE_FILE = BundlerParamInfo.createBundlerParam(\n-            AppImageFile.class, params -> {\n+    static final BundlerParamInfo<ExternalApplication> PREDEFINED_APP_IMAGE_FILE = BundlerParamInfo.createBundlerParam(\n+            ExternalApplication.class, params -> {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public interface Application {\n+public interface Application extends BundleSpec {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Application.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal.model;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-\n-\n-\/**\n- * Creates app image directory from the given {@link Application} object.\n- *\n- *  @ see PackageWriter\n- *\/\n-@FunctionalInterface\n-public interface ApplicationWriter {\n-\n-    \/**\n-     * Creates app image directory from the given {@link Application} object in the given directory.\n-     *\n-     * @param app the source application\n-     * @param dst the directory where to create app image of the source application\n-     * @throws PackagerException if packaging error occurs\n-     * @throws IOException if an I\/O error occurs\n-     *\/\n-    void write(Application app, Path dst) throws PackagerException, IOException;\n-}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/ApplicationWriter.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal.model;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+\n+\/**\n+ * Creates a bundle from the given specification.\n+ *\/\n+@FunctionalInterface\n+public interface BundleCreator<T extends BundleSpec> {\n+\n+    \/**\n+     * Creates a bundle from the given specification in the given directory.\n+     *\n+     * @param spec the bundle specification\n+     * @param dst the directory where to create the bundle\n+     * @throws PackagerException if packaging error occurs\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n+    void create(T spec, Path dst) throws PackagerException, IOException;\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/BundleCreator.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * Application launcher icon.\n+ * A generic bundle specification.\n@@ -30,1 +30,1 @@\n-public interface LauncherIcon {\n+public interface BundleSpec {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/BundleSpec.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/LauncherIcon.java","status":"copied"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.model;\n+\n+import java.util.Set;\n+\n+\/**\n+ * Bundling environment. Defines available bundling operations.\n+ *\/\n+public interface BundlingEnvironment {\n+\n+    \/**\n+     * Returns the default bundling operation.\n+     * <p>\n+     * The returned value should be one of the elements in the collection returned by {@link #enabledOperations()} method.\n+     * @return the default bundling operation\n+     * @throws ConfigException in not a single bundling operation can be performed.\n+     *\/\n+    BundlingOperation defaultOperation() throws ConfigException;\n+\n+    \/**\n+     * Returns supported bundling operations.\n+     * @return the supported bundling operations\n+     *\/\n+    Set<BundlingOperation> supportedOperations();\n+\n+    \/**\n+     * Returns enabled bundling operations.\n+     * <p>\n+     * The returned value should be a subset of the set returned by {@link #supportedOperations()} method.\n+     * @return the enabled bundling operations\n+     *\/\n+    default Set<BundlingOperation> enabledOperations() {\n+        return supportedOperations();\n+    }\n+\n+    \/**\n+     * Returns a bundle creator corresponding to the given bundling operation in this bundling environment.\n+     * @param op the bundling operation\n+     * @return bundle creator corresponding to the given bundling operation in this bundling environment\n+     * @throws IllegalArgumentException if the given bundling operation is not enabled in this bundling environment\n+     *\/\n+    BundleCreator<?> getBundleCreator(BundlingOperation op);\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/BundlingEnvironment.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.model;\n+\n+\/**\n+ * Generic bundling operation.\n+ * <p>\n+ * Bundling operation is comprised of creating of {@link BundleSpec} instance\n+ * and using it as an input for {@link BundleCreator#create()} method to create\n+ * a bundle.\n+ *\/\n+public interface BundlingOperation {\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/BundlingOperation.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+\n+\/**\n+ * Description of an external application image.\n+ *\/\n+public interface ExternalApplication {\n+\n+    \/**\n+     * Returns the list of additional launchers configured for the application.\n+     * <p>\n+     * Returns an empty list for an application without additional launchers.\n+     * @return the list of additional launchers configured for the application\n+     *\/\n+    List<LauncherInfo> getAddLaunchers();\n+\n+    \/**\n+     * Returns application version.\n+     * @return the application version\n+     *\/\n+    String getAppVersion();\n+\n+    \/**\n+     * Returns application name.\n+     * @return the application name\n+     *\/\n+    String getAppName();\n+\n+    \/**\n+     * Returns main launcher name.\n+     * @return the main launcher name\n+     *\/\n+    String getLauncherName();\n+\n+    \/**\n+     * Returns main class name.\n+     * @return the main class name\n+     *\/\n+    String getMainClass();\n+\n+    \/**\n+     * Returns additional properties.\n+     * @return the additional properties\n+     *\/\n+    Map<String, String> getExtra();\n+\n+    \/**\n+     * Additional launcher description.\n+     *\/\n+    record LauncherInfo(String name, boolean service, Map<String, String> extra) {\n+        public LauncherInfo {\n+            Objects.requireNonNull(name);\n+            Objects.requireNonNull(extra);\n+            if (name.isBlank()) {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/ExternalApplication.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -27,3 +27,0 @@\n-import java.nio.file.Path;\n-import java.util.List;\n-\n@@ -41,6 +38,0 @@\n-    \/**\n-     * Gets the path to the input module location.\n-     * @return the path to the input module location\n-     *\/\n-    List<Path> modulePath();\n-\n@@ -50,1 +41,1 @@\n-    record Stub(String moduleName, List<Path> modulePath) implements LauncherModularStartupInfoMixin {\n+    record Stub(String moduleName) implements LauncherModularStartupInfoMixin {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/LauncherModularStartupInfoMixin.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-public interface Package {\n+public interface Package extends BundleSpec {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/Package.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal.model;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-\n-\n-\/**\n- * Creates native package from the given {@link jdk.jpackage.internal.model.Package} object.\n- *\n- * @ see ApplicationWriter\n- *\/\n-@FunctionalInterface\n-public interface PackageWriter {\n-    \/**\n-     * Creates native package from the given {@link jdk.jpackage.internal.model.Package} object in the given directory.\n-     * @param pkg the source package\n-     * @param dst the directory where to create a native package\n-     * @throws PackagerException if packaging error occurs\n-     * @throws IOException if an I\/O error occurs\n-     *\/\n-    void write(Package pkg, Path dst) throws PackagerException, IOException;\n-}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/model\/PackageWriter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -28,4 +28,0 @@\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -67,16 +63,0 @@\n-\n-    \/**\n-     * Converts the given collection to {@link Set}.\n-     *\n-     * @param <T> the type of elements in this output collection\n-     * @param col the input collection. Null is permitted.\n-     * @return the input collection if it is of type {@link Set} or a new\n-     *         {@link Set} instance created from the input collection\n-     *\/\n-    public static <T> Set<T> toSet(Collection<T> col) {\n-        if (col instanceof Set<T> set) {\n-            return set;\n-        } else {\n-            return Optional.ofNullable(col).map(Collection::stream).orElseGet(Stream::of).collect(Collectors.toSet());\n-        }\n-    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/CollectionUtils.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    private final static Object NULL_SUPPLIED = new Object();\n+    private static final Object NULL_SUPPLIED = new Object();\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/TokenReplace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n@@ -47,0 +46,1 @@\n+import jdk.jpackage.internal.model.ExternalApplication.LauncherInfo;\n","filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}