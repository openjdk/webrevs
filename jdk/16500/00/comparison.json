{"files":[{"patch":"@@ -178,1 +178,1 @@\n- void clear_array_v(Register base, Register cnt);\n+  void clear_array_v(Register base, Register cnt);\n@@ -180,2 +180,2 @@\n- void byte_array_inflate_v(Register src, Register dst,\n-                           Register len, Register tmp);\n+  void byte_array_inflate_v(Register src, Register dst,\n+                            Register len, Register tmp);\n@@ -183,1 +183,1 @@\n- void char_array_compress_v(Register src, Register dst,\n+  void char_array_compress_v(Register src, Register dst,\n@@ -187,3 +187,3 @@\n- void encode_iso_array_v(Register src, Register dst,\n-                         Register len, Register result,\n-                         Register tmp, bool ascii);\n+  void encode_iso_array_v(Register src, Register dst,\n+                          Register len, Register result,\n+                          Register tmp, bool ascii);\n@@ -191,1 +191,1 @@\n- void count_positives_v(Register ary, Register len,\n+  void count_positives_v(Register ary, Register len,\n@@ -194,1 +194,1 @@\n- void string_indexof_char_v(Register str1, Register cnt1,\n+  void string_indexof_char_v(Register str1, Register cnt1,\n@@ -199,1 +199,1 @@\n- void minmax_fp_v(VectorRegister dst,\n+  void minmax_fp_v(VectorRegister dst,\n@@ -203,3 +203,3 @@\n- void minmax_fp_masked_v(VectorRegister dst, VectorRegister src1, VectorRegister src2,\n-                         VectorRegister vmask, VectorRegister tmp1, VectorRegister tmp2,\n-                         BasicType bt, bool is_min, int vector_length);\n+  void minmax_fp_masked_v(VectorRegister dst, VectorRegister src1, VectorRegister src2,\n+                          VectorRegister vmask, VectorRegister tmp1, VectorRegister tmp2,\n+                          BasicType bt, bool is_min, int vector_length);\n@@ -207,5 +207,5 @@\n- void reduce_minmax_fp_v(FloatRegister dst,\n-                         FloatRegister src1, VectorRegister src2,\n-                         VectorRegister tmp1, VectorRegister tmp2,\n-                         bool is_double, bool is_min, int vector_length,\n-                         VectorMask vm = Assembler::unmasked);\n+  void reduce_minmax_fp_v(FloatRegister dst,\n+                          FloatRegister src1, VectorRegister src2,\n+                          VectorRegister tmp1, VectorRegister tmp2,\n+                          bool is_double, bool is_min, int vector_length,\n+                          VectorMask vm = Assembler::unmasked);\n@@ -213,1 +213,1 @@\n- void reduce_integral_v(Register dst, Register src1,\n+  void reduce_integral_v(Register dst, Register src1,\n@@ -218,1 +218,1 @@\n- void vsetvli_helper(BasicType bt, int vector_length, LMUL vlmul = Assembler::m1, Register tmp = t0);\n+  void vsetvli_helper(BasicType bt, int vector_length, LMUL vlmul = Assembler::m1, Register tmp = t0);\n@@ -220,2 +220,2 @@\n- void compare_integral_v(VectorRegister dst, VectorRegister src1, VectorRegister src2, int cond,\n-                         BasicType bt, int vector_length, VectorMask vm = Assembler::unmasked);\n+  void compare_integral_v(VectorRegister dst, VectorRegister src1, VectorRegister src2, int cond,\n+                          BasicType bt, int vector_length, VectorMask vm = Assembler::unmasked);\n@@ -223,2 +223,2 @@\n- void compare_fp_v(VectorRegister dst, VectorRegister src1, VectorRegister src2, int cond,\n-                   BasicType bt, int vector_length, VectorMask vm = Assembler::unmasked);\n+  void compare_fp_v(VectorRegister dst, VectorRegister src1, VectorRegister src2, int cond,\n+                    BasicType bt, int vector_length, VectorMask vm = Assembler::unmasked);\n@@ -226,8 +226,8 @@\n- \/\/ In Matcher::scalable_predicate_reg_slots,\n- \/\/ we assume each predicate register is one-eighth of the size of\n- \/\/ scalable vector register, one mask bit per vector byte.\n- void spill_vmask(VectorRegister v, int offset){\n-   vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n-   add(t0, sp, offset);\n-   vse8_v(v, t0);\n- }\n+  \/\/ In Matcher::scalable_predicate_reg_slots,\n+  \/\/ we assume each predicate register is one-eighth of the size of\n+  \/\/ scalable vector register, one mask bit per vector byte.\n+  void spill_vmask(VectorRegister v, int offset){\n+    vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n+    add(t0, sp, offset);\n+    vse8_v(v, t0);\n+  }\n@@ -235,5 +235,5 @@\n- void unspill_vmask(VectorRegister v, int offset){\n-   vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n-   add(t0, sp, offset);\n-   vle8_v(v, t0);\n- }\n+  void unspill_vmask(VectorRegister v, int offset){\n+    vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n+    add(t0, sp, offset);\n+    vle8_v(v, t0);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"}]}