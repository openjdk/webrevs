{"files":[{"patch":"@@ -100,0 +100,1 @@\n+        ANNOTATED_TYPE(\"annotated-type\", \"AnnotatedType\", \"com.sun.tools.javac.util.JCDiagnostic\"),\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-                            annotationFragment, annotated.tsym.owner, annotated));\n+                            annotationFragment, annotated.tsym.owner, new JCDiagnostic.AnnotatedType(annotated)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5871,0 +5871,2 @@\n+                            JCDiagnostic.AnnotatedType annotatedType = new JCDiagnostic.AnnotatedType(\n+                                    type.stripMetadata().annotatedType(onlyTypeAnnotations));\n@@ -5872,1 +5874,1 @@\n-                                    type.tsym.owner, type.stripMetadata().annotatedType(onlyTypeAnnotations)));\n+                                    type.tsym.owner, annotatedType));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3261,1 +3261,1 @@\n-# 0: fragment, 1: symbol, 2: type\n+# 0: fragment, 1: symbol, 2: annotated-type\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,4 @@\n-            return printer.visit(type, l);\n+            return printer.visit(type.stripMetadata(), l);\n+        }\n+        else if (arg instanceof JCDiagnostic.AnnotatedType type) {\n+            return printer.visit(type.type(), l);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractDiagnosticFormatter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import com.sun.tools.javac.code.Type;\n@@ -609,0 +610,3 @@\n+    \/** A diagnostic argument that is a type, which will be printed with type annotations. *\/\n+    public record AnnotatedType(Type type) {}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,17 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8291643\n+ * @summary Consider omitting type annotations from type error diagnostics\n+ * @compile\/fail\/ref=IncompatibleTypes.out -XDrawDiagnostics IncompatibleTypes.java\n+ *\/\n+import java.lang.annotation.*;\n+import java.util.List;\n+\n+class IncompatibleTypes {\n+  List<@A Number> f(List<String> xs) {\n+    return xs;\n+  }\n+}\n+\n+@Target(ElementType.TYPE_USE)\n+@interface A { }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/IncompatibleTypes.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+IncompatibleTypes.java:12:12: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<java.lang.String>, java.util.List<java.lang.Number>)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/IncompatibleTypes.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-LambdaConv25.java:19:15: compiler.err.prob.found.req: (compiler.misc.invalid.generic.lambda.target: <X>()void, kindname.interface, LambdaConv25.C)\n+LambdaConv25.java:19:15: compiler.err.prob.found.req: (compiler.misc.invalid.generic.lambda.target: ()void, kindname.interface, LambdaConv25.C)\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaConv25.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-T6747671.java:36:9: compiler.warn.raw.class.use: @T6747671.TA T6747671.B, T6747671.B<X>\n+T6747671.java:36:9: compiler.warn.raw.class.use: T6747671.B, T6747671.B<X>\n","filename":"test\/langtools\/tools\/javac\/warnings\/6747671\/T6747671.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}