{"files":[{"patch":"@@ -100,0 +100,1 @@\n+        ANNOTATED_TYPE(\"annotated-type\", \"AnnotatedType\", \"com.sun.tools.javac.util.JCDiagnostic\"),\n","filename":"make\/langtools\/tools\/propertiesparser\/parser\/MessageType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -203,1 +203,4 @@\n-            return printer.visit(type, l);\n+            return printer.visit(type.stripMetadata(), l);\n+        }\n+        else if (arg instanceof JCDiagnostic.AnnotatedType type) {\n+            return printer.visit(type.type(), l);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractDiagnosticFormatter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -312,7 +312,4 @@\n-                        Stream.of(diagnosticInfo.args).map(o ->\n-                                switch (o) {\n-                                    case Fragment frag -> fragment(frag);\n-                                    case Type type -> type.stripMetadata();\n-                                    case null -> null;\n-                                    default -> o;\n-                                }).toArray());\n+                        Stream.of(diagnosticInfo.args).map(o -> {\n+                            return (o instanceof Fragment frag) ?\n+                                    fragment(frag) : o;\n+                        }).toArray());\n@@ -613,0 +610,3 @@\n+    \/** A diagnostic argument that is a type, which will be printed with type annotations. *\/\n+    public record AnnotatedType(Type type) {}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}