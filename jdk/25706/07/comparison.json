{"files":[{"patch":"@@ -821,1 +821,1 @@\n-    if (nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize)) {\n+    if (nm->make_not_entrant(nmethod::InvalidationReason::C1_DEOPTIMIZE)) {\n@@ -1113,1 +1113,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::C1_codepatch);\n+      nm->make_not_entrant(nmethod::InvalidationReason::C1_CODEPATCH);\n@@ -1361,1 +1361,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize_for_patching);\n+      nm->make_not_entrant(nmethod::InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING);\n@@ -1489,1 +1489,1 @@\n-  nm->make_not_entrant(nmethod::ChangeReason::C1_predicate_failed_trap);\n+  nm->make_not_entrant(nmethod::InvalidationReason::C1_PREDICATE_FAILED_TRAP);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::CI_replay);\n+      nm->make_not_entrant(nmethod::InvalidationReason::CI_REPLAY);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1364,1 +1364,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::marked_for_deoptimization);\n+      nm->make_not_entrant(nmethod::InvalidationReason::MARKED_FOR_DEOPTIMIZATION);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1978,1 +1978,1 @@\n-void nmethod::log_state_change(ChangeReason change_reason) const {\n+void nmethod::log_state_change(InvalidationReason invalidation_reason) const {\n@@ -1983,1 +1983,1 @@\n-                       os::current_thread_id(), change_reason_to_string(change_reason));\n+                       os::current_thread_id(), invalidation_reason_to_string(invalidation_reason));\n@@ -1992,1 +1992,1 @@\n-  ss.print(\"made not entrant: %s\", change_reason_to_string(change_reason));\n+  ss.print(\"made not entrant: %s\", invalidation_reason_to_string(invalidation_reason));\n@@ -2007,1 +2007,1 @@\n-bool nmethod::make_not_entrant(ChangeReason change_reason) {\n+bool nmethod::make_not_entrant(InvalidationReason invalidation_reason) {\n@@ -2076,1 +2076,1 @@\n-    log_state_change(change_reason);\n+    log_state_change(invalidation_reason);\n@@ -2087,1 +2087,1 @@\n-    nmethod_data->invalidate_nmethod_mirror(this);\n+    nmethod_data->invalidate_nmethod_mirror(this, invalidation_reason);\n@@ -2125,1 +2125,3 @@\n-    nmethod_data->invalidate_nmethod_mirror(this);\n+    nmethod_data->invalidate_nmethod_mirror(this, is_cold() ?\n+            nmethod::InvalidationReason::UNLOADING_COLD :\n+            nmethod::InvalidationReason::UNLOADING);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -474,23 +474,27 @@\n-  enum class ChangeReason : u1 {\n-    C1_codepatch,\n-    C1_deoptimize,\n-    C1_deoptimize_for_patching,\n-    C1_predicate_failed_trap,\n-    CI_replay,\n-    JVMCI_invalidate_nmethod,\n-    JVMCI_invalidate_nmethod_mirror,\n-    JVMCI_materialize_virtual_object,\n-    JVMCI_new_installation,\n-    JVMCI_register_method,\n-    JVMCI_replacing_with_new_code,\n-    JVMCI_reprofile,\n-    marked_for_deoptimization,\n-    missing_exception_handler,\n-    not_used,\n-    OSR_invalidation_back_branch,\n-    OSR_invalidation_for_compiling_with_C1,\n-    OSR_invalidation_of_lower_level,\n-    set_native_function,\n-    uncommon_trap,\n-    whitebox_deoptimization,\n-    zombie,\n+  \/\/ If you change anything in this enum please patch\n+  \/\/ vmStructs_jvmci.cpp accordingly.\n+  enum class InvalidationReason : s1 {\n+    NOT_INVALIDATED = -1,\n+    UNKNOWN,\n+    C1_CODEPATCH,\n+    C1_DEOPTIMIZE,\n+    C1_DEOPTIMIZE_FOR_PATCHING,\n+    C1_PREDICATE_FAILED_TRAP,\n+    CI_REPLAY,\n+    UNLOADING,\n+    UNLOADING_COLD,\n+    JVMCI_INVALIDATE,\n+    JVMCI_MATERIALIZE_VIRTUAL_OBJECT,\n+    JVMCI_REPLACED_WITH_NEW_CODE,\n+    JVMCI_REPROFILE,\n+    MARKED_FOR_DEOPTIMIZATION,\n+    MISSING_EXCEPTION_HANDLER,\n+    NOT_USED,\n+    OSR_INVALIDATION_BACK_BRANCH,\n+    OSR_INVALIDATION_FOR_COMPILING_WITH_C1,\n+    OSR_INVALIDATION_OF_LOWER_LEVEL,\n+    SET_NATIVE_FUNCTION,\n+    UNCOMMON_TRAP,\n+    WHITEBOX_DEOPTIMIZATION,\n+    ZOMBIE,\n+    LAST_REASON\n@@ -500,3 +504,3 @@\n-  static const char* change_reason_to_string(ChangeReason change_reason) {\n-    switch (change_reason) {\n-      case ChangeReason::C1_codepatch:\n+  static const char* invalidation_reason_to_string(InvalidationReason invalidation_reason) {\n+    switch (invalidation_reason) {\n+      case InvalidationReason::C1_CODEPATCH:\n@@ -504,1 +508,1 @@\n-      case ChangeReason::C1_deoptimize:\n+      case InvalidationReason::C1_DEOPTIMIZE:\n@@ -506,1 +510,1 @@\n-      case ChangeReason::C1_deoptimize_for_patching:\n+      case InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING:\n@@ -508,1 +512,1 @@\n-      case ChangeReason::C1_predicate_failed_trap:\n+      case InvalidationReason::C1_PREDICATE_FAILED_TRAP:\n@@ -510,1 +514,1 @@\n-      case ChangeReason::CI_replay:\n+      case InvalidationReason::CI_REPLAY:\n@@ -512,5 +516,3 @@\n-      case ChangeReason::JVMCI_invalidate_nmethod:\n-        return \"JVMCI invalidate nmethod\";\n-      case ChangeReason::JVMCI_invalidate_nmethod_mirror:\n-        return \"JVMCI invalidate nmethod mirror\";\n-      case ChangeReason::JVMCI_materialize_virtual_object:\n+      case InvalidationReason::JVMCI_INVALIDATE:\n+        return \"JVMCI invalidate\";\n+      case InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT:\n@@ -518,7 +520,3 @@\n-      case ChangeReason::JVMCI_new_installation:\n-        return \"JVMCI new installation\";\n-      case ChangeReason::JVMCI_register_method:\n-        return \"JVMCI register method\";\n-      case ChangeReason::JVMCI_replacing_with_new_code:\n-        return \"JVMCI replacing with new code\";\n-      case ChangeReason::JVMCI_reprofile:\n+      case InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE:\n+        return \"JVMCI replaced with new code\";\n+      case InvalidationReason::JVMCI_REPROFILE:\n@@ -526,1 +524,1 @@\n-      case ChangeReason::marked_for_deoptimization:\n+      case InvalidationReason::MARKED_FOR_DEOPTIMIZATION:\n@@ -528,1 +526,1 @@\n-      case ChangeReason::missing_exception_handler:\n+      case InvalidationReason::MISSING_EXCEPTION_HANDLER:\n@@ -530,1 +528,1 @@\n-      case ChangeReason::not_used:\n+      case InvalidationReason::NOT_USED:\n@@ -532,1 +530,1 @@\n-      case ChangeReason::OSR_invalidation_back_branch:\n+      case InvalidationReason::OSR_INVALIDATION_BACK_BRANCH:\n@@ -534,1 +532,1 @@\n-      case ChangeReason::OSR_invalidation_for_compiling_with_C1:\n+      case InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1:\n@@ -536,1 +534,1 @@\n-      case ChangeReason::OSR_invalidation_of_lower_level:\n+      case InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL:\n@@ -538,1 +536,1 @@\n-      case ChangeReason::set_native_function:\n+      case InvalidationReason::SET_NATIVE_FUNCTION:\n@@ -540,1 +538,1 @@\n-      case ChangeReason::uncommon_trap:\n+      case InvalidationReason::UNCOMMON_TRAP:\n@@ -542,1 +540,1 @@\n-      case ChangeReason::whitebox_deoptimization:\n+      case InvalidationReason::WHITEBOX_DEOPTIMIZATION:\n@@ -544,1 +542,1 @@\n-      case ChangeReason::zombie:\n+      case InvalidationReason::ZOMBIE:\n@@ -715,2 +713,2 @@\n-  bool  make_not_entrant(ChangeReason change_reason);\n-  bool  make_not_used() { return make_not_entrant(ChangeReason::not_used); }\n+  bool  make_not_entrant(InvalidationReason invalidation_reason);\n+  bool  make_not_used() { return make_not_entrant(InvalidationReason::NOT_USED); }\n@@ -1029,1 +1027,1 @@\n-  void log_state_change(ChangeReason change_reason) const;\n+  void log_state_change(InvalidationReason invalidation_reason) const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":53,"deletions":55,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -927,1 +927,1 @@\n-          osr_nm->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_for_compiling_with_C1);\n+          osr_nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1);\n@@ -1519,1 +1519,1 @@\n-            nm->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_back_branch);\n+            nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_BACK_BRANCH);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1210,1 +1210,1 @@\n-        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::ChangeReason::JVMCI_replacing_with_new_code, JVMCI_CHECK_0);\n+        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE, JVMCI_CHECK_0);\n@@ -1221,0 +1221,8 @@\n+C2V_VMENTRY_0(jobject, getInvalidationReasonDescription, (JNIEnv *env, jobject, jint invalidation_reason))\n+  HandleMark hm(THREAD);\n+  JNIHandleMark jni_hm(thread);\n+  nmethod::InvalidationReason reason = static_cast<nmethod::InvalidationReason>(invalidation_reason);\n+  JVMCIObject desc = JVMCIENV->create_string(nmethod::invalidation_reason_to_string(reason), JVMCI_CHECK_NULL);\n+  return JVMCIENV->get_jobject(desc);\n+C2V_END\n+\n@@ -1386,1 +1394,1 @@\n-    code->make_not_entrant(nmethod::ChangeReason::JVMCI_reprofile);\n+    code->make_not_entrant(nmethod::InvalidationReason::JVMCI_REPROFILE);\n@@ -1399,1 +1407,8 @@\n-C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod, jboolean deoptimize))\n+C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod, jboolean deoptimize, jint invalidation_reason))\n+#ifdef ASSERT\n+  int first = static_cast<int>(nmethod::InvalidationReason::UNKNOWN);\n+  int last = static_cast<int>(nmethod::InvalidationReason::LAST_REASON);\n+  assert(invalidation_reason >= first && invalidation_reason < last,\n+          \"invalidation_reason (%d) outside valid range [%d, %d)\",\n+          invalidation_reason, first, last);\n+#endif\n@@ -1401,1 +1416,1 @@\n-  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, nmethod::ChangeReason::JVMCI_invalidate_nmethod, JVMCI_CHECK);\n+  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, static_cast<nmethod::InvalidationReason>(invalidation_reason), JVMCI_CHECK);\n@@ -1826,1 +1841,1 @@\n-    fst.current()->cb()->as_nmethod()->make_not_entrant(nmethod::ChangeReason::JVMCI_materialize_virtual_object);\n+    fst.current()->cb()->as_nmethod()->make_not_entrant(nmethod::InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT);\n@@ -3355,0 +3370,1 @@\n+  {CC \"getInvalidationReasonDescription\",             CC \"(I)\" STRING,                                                                      FN_PTR(getInvalidationReasonDescription)},\n@@ -3363,1 +3379,1 @@\n-  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \"Z)V\",                                                              FN_PTR(invalidateHotSpotNmethod)},\n+  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \"ZI)V\",                                                             FN_PTR(invalidateHotSpotNmethod)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1753,1 +1753,1 @@\n-void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, nmethod::ChangeReason change_reason, JVMCI_TRAPS) {\n+void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, nmethod::InvalidationReason invalidation_reason, JVMCI_TRAPS) {\n@@ -1776,1 +1776,1 @@\n-    nm->make_not_entrant(change_reason);\n+    nm->make_not_entrant(invalidation_reason);\n@@ -1785,1 +1785,1 @@\n-    nm->make_not_entrant(change_reason);\n+    nm->make_not_entrant(invalidation_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-  void invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimze, nmethod::ChangeReason change_reason, JVMCI_TRAPS);\n+  void invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimze, nmethod::InvalidationReason invalidation_reason, JVMCI_TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+    int_field(HotSpotNmethod, invalidationReason)                                                             \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -800,1 +800,1 @@\n-void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm) {\n+void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm, nmethod::InvalidationReason invalidation_reason) {\n@@ -819,0 +819,4 @@\n+      if (HotSpotJVMCI::HotSpotNmethod::invalidationReason(jvmciEnv, nmethod_mirror) ==\n+        static_cast<int>(nmethod::InvalidationReason::NOT_INVALIDATED)) {\n+        HotSpotJVMCI::HotSpotNmethod::set_invalidationReason(jvmciEnv, nmethod_mirror, static_cast<int>(invalidation_reason));\n+      }\n@@ -825,0 +829,4 @@\n+      if (HotSpotJVMCI::HotSpotNmethod::invalidationReason(jvmciEnv, nmethod_mirror) ==\n+        static_cast<int>(nmethod::InvalidationReason::NOT_INVALIDATED)) {\n+        HotSpotJVMCI::HotSpotNmethod::set_invalidationReason(jvmciEnv, nmethod_mirror, static_cast<int>(invalidation_reason));\n+      }\n@@ -2187,1 +2195,1 @@\n-              old->make_not_entrant(nmethod::ChangeReason::JVMCI_register_method);\n+              old->make_not_entrant(nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  void invalidate_nmethod_mirror(nmethod* nm);\n+  void invalidate_nmethod_mirror(nmethod* nm, nmethod::InvalidationReason invalidation_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -567,1 +567,25 @@\n-                                                                          \\\n+                                                                                          \\\n+  declare_constant(nmethod::InvalidationReason::NOT_INVALIDATED)                          \\\n+  declare_constant(nmethod::InvalidationReason::UNKNOWN)                                  \\\n+  declare_constant(nmethod::InvalidationReason::C1_CODEPATCH)                             \\\n+  declare_constant(nmethod::InvalidationReason::C1_DEOPTIMIZE)                            \\\n+  declare_constant(nmethod::InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING)               \\\n+  declare_constant(nmethod::InvalidationReason::C1_PREDICATE_FAILED_TRAP)                 \\\n+  declare_constant(nmethod::InvalidationReason::CI_REPLAY)                                \\\n+  declare_constant(nmethod::InvalidationReason::UNLOADING)                                \\\n+  declare_constant(nmethod::InvalidationReason::UNLOADING_COLD)                           \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_INVALIDATE)                         \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT)         \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE)             \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_REPROFILE)                          \\\n+  declare_constant(nmethod::InvalidationReason::MARKED_FOR_DEOPTIMIZATION)                \\\n+  declare_constant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER)                \\\n+  declare_constant(nmethod::InvalidationReason::NOT_USED)                                 \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_BACK_BRANCH)             \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1)   \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL)          \\\n+  declare_constant(nmethod::InvalidationReason::SET_NATIVE_FUNCTION)                      \\\n+  declare_constant(nmethod::InvalidationReason::UNCOMMON_TRAP)                            \\\n+  declare_constant(nmethod::InvalidationReason::WHITEBOX_DEOPTIMIZATION)                  \\\n+  declare_constant(nmethod::InvalidationReason::ZOMBIE)                                   \\\n+                                                                                          \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3495,1 +3495,1 @@\n-      inv->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_of_lower_level);\n+      inv->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1031,1 +1031,1 @@\n-    nm->make_not_entrant(nmethod::ChangeReason::set_native_function);\n+    nm->make_not_entrant(nmethod::InvalidationReason::SET_NATIVE_FUNCTION);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-                nm->make_not_entrant(nmethod::ChangeReason::whitebox_deoptimization);\n+                nm->make_not_entrant(nmethod::InvalidationReason::WHITEBOX_DEOPTIMIZATION);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1829,1 +1829,1 @@\n-  nm->make_not_entrant(nmethod::ChangeReason::missing_exception_handler);\n+  nm->make_not_entrant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER);\n@@ -2458,1 +2458,1 @@\n-      if (!nm->make_not_entrant(nmethod::ChangeReason::uncommon_trap)) {\n+      if (!nm->make_not_entrant(nmethod::InvalidationReason::UNCOMMON_TRAP)) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::zombie);\n+      nm->make_not_entrant(nmethod::InvalidationReason::ZOMBIE);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -657,0 +657,2 @@\n+    native String getInvalidationReasonDescription(int invalidationReason);\n+\n@@ -845,1 +847,1 @@\n-    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize);\n+    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int invalidationReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,2 +157,1 @@\n-    @Override\n-    public void invalidateInstalledCode(InstalledCode installedCode) {\n+    public void invalidateInstalledCode(InstalledCode installedCode, int invalidationReason) {\n@@ -161,1 +160,1 @@\n-            nmethod.invalidate(true);\n+            nmethod.invalidate(true, invalidationReason);\n@@ -167,0 +166,5 @@\n+    @Override\n+    public void invalidateInstalledCode(InstalledCode installedCode) {\n+        invalidateInstalledCode(installedCode, jvmciInvalidationReason());\n+    }\n+\n@@ -204,0 +208,4 @@\n+\n+    private static int jvmciInvalidationReason() {\n+        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::InvalidationReason::JVMCI_INVALIDATE\", Integer.class);\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.vm.ci.common.JVMCIError;\n@@ -79,0 +80,6 @@\n+    \/**\n+     * Identify the reason that caused this nmethod to be invalidated.\n+     * A value of -1 means that the nmethod was not invalidated.\n+     *\/\n+    private int invalidationReason;\n+\n@@ -85,0 +92,1 @@\n+        this.invalidationReason = -1;\n@@ -125,0 +133,10 @@\n+    \/**\n+     * Invalidate this nmethod using the reason specified in {@code invalidationReason} and\n+     * optionally deoptimize the method if {@code deoptimize} is set.\n+     * @param deoptimize whether or not to deoptimize the method.\n+     * @param invalidationReason invalidation reason code.\n+     *\/\n+    public void invalidate(boolean deoptimize, int invalidationReason) {\n+        compilerToVM().invalidateHotSpotNmethod(this, deoptimize, invalidationReason);\n+    }\n+\n@@ -127,1 +145,1 @@\n-        compilerToVM().invalidateHotSpotNmethod(this, deoptimize);\n+        invalidate(deoptimize, jvmciInvalidationReason());\n@@ -191,0 +209,18 @@\n+\n+    \/**\n+     * @return an integer representing the reason why this nmethod was invalidated.\n+     *\/\n+    public int getInvalidationReason() {\n+        return invalidationReason;\n+    }\n+\n+    \/**\n+     * @return a String describing the reason why this nmethod was invalidated.\n+     *\/\n+    public String getInvalidationReasonDescription() {\n+        return compilerToVM().getInvalidationReasonDescription(this.getInvalidationReason());\n+    }\n+\n+    private static int jvmciInvalidationReason() {\n+        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::InvalidationReason::JVMCI_INVALIDATE\", Integer.class);\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -232,2 +232,2 @@\n-    public static void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize) {\n-        CTVM.invalidateHotSpotNmethod(nmethodMirror, deoptimize);\n+    public static void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int invalidationReason) {\n+        CTVM.invalidateHotSpotNmethod(nmethodMirror, deoptimize, invalidationReason);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.jvmci\n+ * @requires vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\" | vm.simpleArch == \"riscv64\"\n+ * @library \/test\/lib \/\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.aarch64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.amd64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.riscv64\n+ * @compile CodeInstallationTest.java DebugInfoTest.java TestAssembler.java TestHotSpotVMConfig.java amd64\/AMD64TestAssembler.java aarch64\/AArch64TestAssembler.java riscv64\/RISCV64TestAssembler.java\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:-UseJVMCICompiler jdk.vm.ci.code.test.CodeInvalidationReasonTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.vm.ci.code.Register;\n+import jdk.vm.ci.hotspot.HotSpotNmethod;\n+\n+import org.junit.Test;\n+\n+import java.lang.reflect.Method;\n+\n+\/**\n+ * Test if setting HotSpotNmethod invalidation reason around works.\n+ *\/\n+public class CodeInvalidationReasonTest extends CodeInstallationTest {\n+\n+    public static int add(int a, int b) {\n+        return a + b;\n+    }\n+\n+    private static void compileAdd(TestAssembler asm) {\n+        Register arg0 = asm.emitIntArg0();\n+        Register arg1 = asm.emitIntArg1();\n+        Register ret = asm.emitIntAdd(arg0, arg1);\n+        asm.emitIntRet(ret);\n+    }\n+\n+    @Test\n+    public void test() {\n+        Method method = getMethod(\"add\", int.class, int.class);\n+\n+        HotSpotNmethod nmethod = test(CodeInvalidationReasonTest::compileAdd, method, 5, 7);\n+        Asserts.assertEquals(-1 \/* since it was not invalidated yet. *\/, nmethod.getInvalidationReason());\n+\n+        nmethod.invalidate(true, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n+        Asserts.assertEquals(config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE, nmethod.getInvalidationReason());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInvalidationReasonTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        nmethod.invalidate(false);\n+        nmethod.invalidate(false, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n@@ -80,1 +80,1 @@\n-        nmethod.invalidate(true);\n+        nmethod.invalidate(true, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,2 @@\n+    public final int NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE = getConstant(\"nmethod::InvalidationReason::JVMCI_INVALIDATE\", Integer.class);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}