{"files":[{"patch":"@@ -821,1 +821,1 @@\n-    if (nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize)) {\n+    if (nm->make_not_entrant(nmethod::InvalidationReason::C1_DEOPTIMIZE)) {\n@@ -1113,1 +1113,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::C1_codepatch);\n+      nm->make_not_entrant(nmethod::InvalidationReason::C1_CODEPATCH);\n@@ -1361,1 +1361,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::C1_deoptimize_for_patching);\n+      nm->make_not_entrant(nmethod::InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING);\n@@ -1489,1 +1489,1 @@\n-  nm->make_not_entrant(nmethod::ChangeReason::C1_predicate_failed_trap);\n+  nm->make_not_entrant(nmethod::InvalidationReason::C1_PREDICATE_FAILED_TRAP);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::CI_replay);\n+      nm->make_not_entrant(nmethod::InvalidationReason::CI_REPLAY);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1364,1 +1364,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::marked_for_deoptimization);\n+      nm->make_not_entrant(nmethod::InvalidationReason::MARKED_FOR_DEOPTIMIZATION);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1978,1 +1978,1 @@\n-void nmethod::log_state_change(ChangeReason change_reason) const {\n+void nmethod::log_state_change(InvalidationReason invalidation_reason) const {\n@@ -1983,1 +1983,1 @@\n-                       os::current_thread_id(), change_reason_to_string(change_reason));\n+                       os::current_thread_id(), invalidation_reason_to_string(invalidation_reason));\n@@ -1992,1 +1992,1 @@\n-  ss.print(\"made not entrant: %s\", change_reason_to_string(change_reason));\n+  ss.print(\"made not entrant: %s\", invalidation_reason_to_string(invalidation_reason));\n@@ -2007,1 +2007,1 @@\n-bool nmethod::make_not_entrant(ChangeReason change_reason) {\n+bool nmethod::make_not_entrant(InvalidationReason invalidation_reason) {\n@@ -2076,1 +2076,1 @@\n-    log_state_change(change_reason);\n+    log_state_change(invalidation_reason);\n@@ -2087,1 +2087,1 @@\n-    nmethod_data->invalidate_nmethod_mirror(this, change_reason);\n+    nmethod_data->invalidate_nmethod_mirror(this, invalidation_reason);\n@@ -2125,1 +2125,1 @@\n-    nmethod_data->invalidate_nmethod_mirror(this, is_cold() ? nmethod::ChangeReason::GC_unlinking_cold : nmethod::ChangeReason::GC_unlinking);\n+    nmethod_data->invalidate_nmethod_mirror(this, is_cold() ? nmethod::InvalidationReason::GC_UNLINKING_COLD : nmethod::InvalidationReason::GC_UNLINKING);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -476,23 +476,23 @@\n-  enum class ChangeReason : u1 {\n-    unknown,\n-    C1_codepatch,\n-    C1_deoptimize,\n-    C1_deoptimize_for_patching,\n-    C1_predicate_failed_trap,\n-    CI_replay,\n-    GC_unlinking,\n-    GC_unlinking_cold,\n-    JVMCI_invalidate_nmethod,\n-    JVMCI_materialize_virtual_object,\n-    JVMCI_replaced_with_new_code,\n-    JVMCI_reprofile,\n-    marked_for_deoptimization,\n-    missing_exception_handler,\n-    not_used,\n-    OSR_invalidation_back_branch,\n-    OSR_invalidation_for_compiling_with_C1,\n-    OSR_invalidation_of_lower_level,\n-    set_native_function,\n-    uncommon_trap,\n-    whitebox_deoptimization,\n-    zombie,\n+  enum class InvalidationReason : u1 {\n+    UNKNOWN,\n+    C1_CODEPATCH,\n+    C1_DEOPTIMIZE,\n+    C1_DEOPTIMIZE_FOR_PATCHING,\n+    C1_PREDICATE_FAILED_TRAP,\n+    CI_REPLAY,\n+    GC_UNLINKING,\n+    GC_UNLINKING_COLD,\n+    JVMCI_INVALIDATE,\n+    JVMCI_MATERIALIZE_VIRTUAL_OBJECT,\n+    JVMCI_REPLACED_WITH_NEW_CODE,\n+    JVMCI_REPROFILE,\n+    MARKED_FOR_DEOPTIMIZATION,\n+    MISSING_EXCEPTION_HANDLER,\n+    NOT_USED,\n+    OSR_INVALIDATION_BACK_BRANCH,\n+    OSR_INVALIDATION_FOR_COMPILING_WITH_C1,\n+    OSR_INVALIDATION_OF_LOWER_LEVEL,\n+    SET_NATIVE_FUNCTION,\n+    UNCOMMON_TRAP,\n+    WHITEBOX_DEOPTIMIZATION,\n+    ZOMBIE,\n@@ -502,3 +502,3 @@\n-  static const char* change_reason_to_string(ChangeReason change_reason) {\n-    switch (change_reason) {\n-      case ChangeReason::C1_codepatch:\n+  static const char* invalidation_reason_to_string(InvalidationReason invalidation_reason) {\n+    switch (invalidation_reason) {\n+      case InvalidationReason::C1_CODEPATCH:\n@@ -506,1 +506,1 @@\n-      case ChangeReason::C1_deoptimize:\n+      case InvalidationReason::C1_DEOPTIMIZE:\n@@ -508,1 +508,1 @@\n-      case ChangeReason::C1_deoptimize_for_patching:\n+      case InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING:\n@@ -510,1 +510,1 @@\n-      case ChangeReason::C1_predicate_failed_trap:\n+      case InvalidationReason::C1_PREDICATE_FAILED_TRAP:\n@@ -512,1 +512,1 @@\n-      case ChangeReason::CI_replay:\n+      case InvalidationReason::CI_REPLAY:\n@@ -514,3 +514,3 @@\n-      case ChangeReason::JVMCI_invalidate_nmethod:\n-        return \"JVMCI invalidate nmethod\";\n-      case ChangeReason::JVMCI_materialize_virtual_object:\n+      case InvalidationReason::JVMCI_INVALIDATE:\n+        return \"JVMCI invalidate\";\n+      case InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT:\n@@ -518,1 +518,1 @@\n-      case ChangeReason::JVMCI_replaced_with_new_code:\n+      case InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE:\n@@ -520,1 +520,1 @@\n-      case ChangeReason::JVMCI_reprofile:\n+      case InvalidationReason::JVMCI_REPROFILE:\n@@ -522,1 +522,1 @@\n-      case ChangeReason::marked_for_deoptimization:\n+      case InvalidationReason::MARKED_FOR_DEOPTIMIZATION:\n@@ -524,1 +524,1 @@\n-      case ChangeReason::missing_exception_handler:\n+      case InvalidationReason::MISSING_EXCEPTION_HANDLER:\n@@ -526,1 +526,1 @@\n-      case ChangeReason::not_used:\n+      case InvalidationReason::NOT_USED:\n@@ -528,1 +528,1 @@\n-      case ChangeReason::OSR_invalidation_back_branch:\n+      case InvalidationReason::OSR_INVALIDATION_BACK_BRANCH:\n@@ -530,1 +530,1 @@\n-      case ChangeReason::OSR_invalidation_for_compiling_with_C1:\n+      case InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1:\n@@ -532,1 +532,1 @@\n-      case ChangeReason::OSR_invalidation_of_lower_level:\n+      case InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL:\n@@ -534,1 +534,1 @@\n-      case ChangeReason::set_native_function:\n+      case InvalidationReason::SET_NATIVE_FUNCTION:\n@@ -536,1 +536,1 @@\n-      case ChangeReason::uncommon_trap:\n+      case InvalidationReason::UNCOMMON_TRAP:\n@@ -538,1 +538,1 @@\n-      case ChangeReason::whitebox_deoptimization:\n+      case InvalidationReason::WHITEBOX_DEOPTIMIZATION:\n@@ -540,1 +540,1 @@\n-      case ChangeReason::zombie:\n+      case InvalidationReason::ZOMBIE:\n@@ -711,2 +711,2 @@\n-  bool  make_not_entrant(ChangeReason change_reason);\n-  bool  make_not_used() { return make_not_entrant(ChangeReason::not_used); }\n+  bool  make_not_entrant(InvalidationReason invalidation_reason);\n+  bool  make_not_used() { return make_not_entrant(InvalidationReason::NOT_USED); }\n@@ -1025,1 +1025,1 @@\n-  void log_state_change(ChangeReason change_reason) const;\n+  void log_state_change(InvalidationReason invalidation_reason) const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":48,"deletions":48,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -927,1 +927,1 @@\n-          osr_nm->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_for_compiling_with_C1);\n+          osr_nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1);\n@@ -1519,1 +1519,1 @@\n-            nm->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_back_branch);\n+            nm->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_BACK_BRANCH);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1210,1 +1210,1 @@\n-        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::ChangeReason::JVMCI_replaced_with_new_code, JVMCI_CHECK_0);\n+        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE, JVMCI_CHECK_0);\n@@ -1221,1 +1221,1 @@\n-C2V_VMENTRY_0(jobject, getInvalidationReasonString, (JNIEnv *env, jobject, jint invalidation_reason))\n+C2V_VMENTRY_0(jobject, getInvalidationReasonDescription, (JNIEnv *env, jobject, jint invalidation_reason))\n@@ -1224,2 +1224,2 @@\n-  nmethod::ChangeReason reason = static_cast<nmethod::ChangeReason>(invalidation_reason);\n-  JVMCIObject desc = JVMCIENV->create_string(nmethod::change_reason_to_string(reason), JVMCI_CHECK_NULL);\n+  nmethod::InvalidationReason reason = static_cast<nmethod::InvalidationReason>(invalidation_reason);\n+  JVMCIObject desc = JVMCIENV->create_string(nmethod::invalidation_reason_to_string(reason), JVMCI_CHECK_NULL);\n@@ -1394,1 +1394,1 @@\n-    code->make_not_entrant(nmethod::ChangeReason::JVMCI_reprofile);\n+    code->make_not_entrant(nmethod::InvalidationReason::JVMCI_REPROFILE);\n@@ -1409,1 +1409,1 @@\n-  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, static_cast<nmethod::ChangeReason>(invalidation_reason), JVMCI_CHECK);\n+  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, static_cast<nmethod::InvalidationReason>(invalidation_reason), JVMCI_CHECK);\n@@ -1834,1 +1834,1 @@\n-    fst.current()->cb()->as_nmethod()->make_not_entrant(nmethod::ChangeReason::JVMCI_materialize_virtual_object);\n+    fst.current()->cb()->as_nmethod()->make_not_entrant(nmethod::InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT);\n@@ -3363,1 +3363,1 @@\n-  {CC \"getInvalidationReasonString\",                  CC \"(I)\" STRING,                                                                      FN_PTR(getInvalidationReasonString)},\n+  {CC \"getInvalidationReasonDescription\",             CC \"(I)\" STRING,                                                                      FN_PTR(getInvalidationReasonDescription)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1747,1 +1747,0 @@\n-  set_HotSpotNmethod_invalidationReason(installed_code, static_cast<int>(nmethod::ChangeReason::unknown));\n@@ -1754,1 +1753,1 @@\n-void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, nmethod::ChangeReason change_reason, JVMCI_TRAPS) {\n+void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, nmethod::InvalidationReason invalidation_reason, JVMCI_TRAPS) {\n@@ -1777,1 +1776,1 @@\n-    nm->make_not_entrant(change_reason);\n+    nm->make_not_entrant(invalidation_reason);\n@@ -1786,1 +1785,1 @@\n-    nm->make_not_entrant(change_reason);\n+    nm->make_not_entrant(invalidation_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-  void invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimze, nmethod::ChangeReason change_reason, JVMCI_TRAPS);\n+  void invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimze, nmethod::InvalidationReason invalidation_reason, JVMCI_TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -800,1 +800,1 @@\n-void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm, nmethod::ChangeReason invalidation_reason) {\n+void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm, nmethod::InvalidationReason invalidation_reason) {\n@@ -2189,1 +2189,1 @@\n-              old->make_not_entrant(nmethod::ChangeReason::JVMCI_replaced_with_new_code);\n+              old->make_not_entrant(nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  void invalidate_nmethod_mirror(nmethod* nm, nmethod::ChangeReason invalidation_reason);\n+  void invalidate_nmethod_mirror(nmethod* nm, nmethod::InvalidationReason invalidation_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -567,24 +567,24 @@\n-                                                                                                           \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::UNKNOWN\", nmethod::ChangeReason::unknown)                                                       \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::C1_CODEPATCH\", nmethod::ChangeReason::C1_codepatch)                                             \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::C1_DEOPTIMIZE\", nmethod::ChangeReason::C1_deoptimize)                                           \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::C1_DEOPTIMIZE_FOR_PATCHING\", nmethod::ChangeReason::C1_deoptimize_for_patching)                 \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::C1_PREDICATE_FAILED_TRAP\", nmethod::ChangeReason::C1_predicate_failed_trap)                     \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::CI_REPLAY\", nmethod::ChangeReason::CI_replay)                                                   \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::GC_UNLINKING\", nmethod::ChangeReason::GC_unlinking)                                             \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::GC_UNLINKING_COLD\", nmethod::ChangeReason::GC_unlinking_cold)                                   \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", nmethod::ChangeReason::JVMCI_invalidate_nmethod)                     \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT\", nmethod::ChangeReason::JVMCI_materialize_virtual_object)     \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPLACED_WITH_NEW_CODE\", nmethod::ChangeReason::JVMCI_replaced_with_new_code)             \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPROFILE\", nmethod::ChangeReason::JVMCI_reprofile)                                       \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::MARKED_FOR_DEOPTIMIZATION\", nmethod::ChangeReason::marked_for_deoptimization)                   \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::MISSING_EXCEPTION_HANDLER\", nmethod::ChangeReason::missing_exception_handler)                   \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::NOT_USED\", nmethod::ChangeReason::not_used)                                                     \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_BACK_BRANCH\", nmethod::ChangeReason::OSR_invalidation_back_branch)             \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1\", nmethod::ChangeReason::OSR_invalidation_for_compiling_with_C1)   \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_OF_LOWER_LEVEL\", nmethod::ChangeReason::OSR_invalidation_of_lower_level)                 \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::SET_NATIVE_FUNCTION\", nmethod::ChangeReason::set_native_function)            \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::UNCOMMON_TRAP\", nmethod::ChangeReason::uncommon_trap)                        \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::WHITEBOX_DEOPTIMIZATION\", nmethod::ChangeReason::whitebox_deoptimization)    \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::ZOMBIE\", nmethod::ChangeReason::zombie)                                      \\\n-                                                                                    \\\n+                                                                                          \\\n+  declare_constant(nmethod::InvalidationReason::UNKNOWN)                                  \\\n+  declare_constant(nmethod::InvalidationReason::C1_CODEPATCH)                             \\\n+  declare_constant(nmethod::InvalidationReason::C1_DEOPTIMIZE)                            \\\n+  declare_constant(nmethod::InvalidationReason::C1_DEOPTIMIZE_FOR_PATCHING)               \\\n+  declare_constant(nmethod::InvalidationReason::C1_PREDICATE_FAILED_TRAP)                 \\\n+  declare_constant(nmethod::InvalidationReason::CI_REPLAY)                                \\\n+  declare_constant(nmethod::InvalidationReason::GC_UNLINKING)                             \\\n+  declare_constant(nmethod::InvalidationReason::GC_UNLINKING_COLD)                        \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_INVALIDATE)                         \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT)         \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_REPLACED_WITH_NEW_CODE)             \\\n+  declare_constant(nmethod::InvalidationReason::JVMCI_REPROFILE)                          \\\n+  declare_constant(nmethod::InvalidationReason::MARKED_FOR_DEOPTIMIZATION)                \\\n+  declare_constant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER)                \\\n+  declare_constant(nmethod::InvalidationReason::NOT_USED)                                 \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_BACK_BRANCH)             \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1)   \\\n+  declare_constant(nmethod::InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL)          \\\n+  declare_constant(nmethod::InvalidationReason::SET_NATIVE_FUNCTION)                      \\\n+  declare_constant(nmethod::InvalidationReason::UNCOMMON_TRAP)                            \\\n+  declare_constant(nmethod::InvalidationReason::WHITEBOX_DEOPTIMIZATION)                  \\\n+  declare_constant(nmethod::InvalidationReason::ZOMBIE)                                   \\\n+                                                                                          \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -3495,1 +3495,1 @@\n-      inv->make_not_entrant(nmethod::ChangeReason::OSR_invalidation_of_lower_level);\n+      inv->make_not_entrant(nmethod::InvalidationReason::OSR_INVALIDATION_OF_LOWER_LEVEL);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1031,1 +1031,1 @@\n-    nm->make_not_entrant(nmethod::ChangeReason::set_native_function);\n+    nm->make_not_entrant(nmethod::InvalidationReason::SET_NATIVE_FUNCTION);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-                nm->make_not_entrant(nmethod::ChangeReason::whitebox_deoptimization);\n+                nm->make_not_entrant(nmethod::InvalidationReason::WHITEBOX_DEOPTIMIZATION);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1829,1 +1829,1 @@\n-  nm->make_not_entrant(nmethod::ChangeReason::missing_exception_handler);\n+  nm->make_not_entrant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER);\n@@ -2458,1 +2458,1 @@\n-      if (!nm->make_not_entrant(nmethod::ChangeReason::uncommon_trap)) {\n+      if (!nm->make_not_entrant(nmethod::InvalidationReason::UNCOMMON_TRAP)) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-      nm->make_not_entrant(nmethod::ChangeReason::zombie);\n+      nm->make_not_entrant(nmethod::InvalidationReason::ZOMBIE);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -657,1 +657,1 @@\n-    native String getInvalidationReasonString(int invalidationReason);\n+    native String getInvalidationReasonDescription(int invalidationReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+     * A value of -1 means that the nmethod was not invalidated.\n@@ -91,1 +92,1 @@\n-        this.invalidationReason = 0;\n+        this.invalidationReason = -1;\n@@ -219,2 +220,2 @@\n-    public String getInvalidationReasonString() {\n-        return compilerToVM().getInvalidationReasonString(this.getInvalidationReason());\n+    public String getInvalidationReasonDescription() {\n+        return compilerToVM().getInvalidationReasonDescription(this.getInvalidationReason());\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        Asserts.assertEquals(config.NMETHOD_CHANGE_REASON_UNKNOWN, nmethod.getInvalidationReason());\n+        Asserts.assertEquals(-1 \/* since it was not invalidated yet. *\/, nmethod.getInvalidationReason());\n@@ -74,2 +74,2 @@\n-        nmethod.invalidate(true, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n-        Asserts.assertEquals(config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE, nmethod.getInvalidationReason());\n+        nmethod.invalidate(true, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n+        Asserts.assertEquals(config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE, nmethod.getInvalidationReason());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInvalidationReasonTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        nmethod.invalidate(false, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n+        nmethod.invalidate(false, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n@@ -80,1 +80,1 @@\n-        nmethod.invalidate(true, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n+        nmethod.invalidate(true, config.NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-    public final int NMETHOD_CHANGE_REASON_UNKNOWN = getConstant(\"nmethod::ChangeReason::UNKNOWN\", Integer.class);\n-    public final int NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE = getConstant(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", Integer.class);\n+    public final int NMETHOD_INVALIDATION_REASON_JVMCI_INVALIDATE = getConstant(\"nmethod::InvalidationReason::JVMCI_INVALIDATE\", Integer.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}