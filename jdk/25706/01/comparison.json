{"files":[{"patch":"@@ -2087,1 +2087,1 @@\n-    nmethod_data->invalidate_nmethod_mirror(this);\n+    nmethod_data->invalidate_nmethod_mirror(this, change_reason);\n@@ -2125,1 +2125,1 @@\n-    nmethod_data->invalidate_nmethod_mirror(this);\n+    nmethod_data->invalidate_nmethod_mirror(this, is_cold() ? nmethod::ChangeReason::GC_unlinking_cold : nmethod::ChangeReason::GC_unlinking);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -474,0 +474,2 @@\n+  \/\/ If you change anything in this enum please patch\n+  \/\/ vmStructs_jvmci.cpp and HotSpotNmethod.java accordingly.\n@@ -475,0 +477,1 @@\n+    unknown,\n@@ -480,0 +483,2 @@\n+    GC_unlinking,\n+    GC_unlinking_cold,\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1221,0 +1221,8 @@\n+C2V_VMENTRY_0(jobject,  getChangeReasonDescription, (JNIEnv *env, jobject, jint change_reason))\n+  HandleMark hm(THREAD);\n+  JNIHandleMark jni_hm(thread);\n+  nmethod::ChangeReason reason = static_cast<nmethod::ChangeReason>(change_reason);\n+  JVMCIObject desc = JVMCIENV->create_string(nmethod::change_reason_to_string(reason), JVMCI_CHECK_NULL);\n+  return JVMCIENV->get_jobject(desc);\n+C2V_END\n+\n@@ -1399,1 +1407,1 @@\n-C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod, jboolean deoptimize))\n+C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod, jboolean deoptimize, jint change_reason))\n@@ -1401,1 +1409,1 @@\n-  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, nmethod::ChangeReason::JVMCI_invalidate_nmethod, JVMCI_CHECK);\n+  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, static_cast<nmethod::ChangeReason>(change_reason), JVMCI_CHECK);\n@@ -3355,0 +3363,1 @@\n+  {CC \"getChangeReasonDescription\",                   CC \"(I)\" STRING,                                                                      FN_PTR(getChangeReasonDescription)},\n@@ -3363,1 +3372,1 @@\n-  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \"Z)V\",                                                              FN_PTR(invalidateHotSpotNmethod)},\n+  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \"ZI)V\",                                                             FN_PTR(invalidateHotSpotNmethod)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1747,0 +1747,1 @@\n+  set_InstalledCode_changeReason(installed_code, static_cast<int>(nmethod::ChangeReason::JVMCI_new_installation));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+    int_field(InstalledCode, changeReason)                                                                    \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -800,1 +800,1 @@\n-void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm) {\n+void JVMCINMethodData::invalidate_nmethod_mirror(nmethod* nm, nmethod::ChangeReason change_reason) {\n@@ -818,0 +818,1 @@\n+      HotSpotJVMCI::InstalledCode::set_changeReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n@@ -824,0 +825,1 @@\n+      HotSpotJVMCI::InstalledCode::set_changeReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  void invalidate_nmethod_mirror(nmethod* nm);\n+  void invalidate_nmethod_mirror(nmethod* nm, nmethod::ChangeReason change_reason);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -567,1 +567,27 @@\n-                                                                          \\\n+                                                                                                           \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::UNKNOWN\", nmethod::ChangeReason::unknown)                                                       \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::C1_CODEPATCH\", nmethod::ChangeReason::C1_codepatch)                                             \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::C1_DEOPTIMIZE\", nmethod::ChangeReason::C1_deoptimize)                                           \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::C1_DEOPTIMIZE_FOR_PATCHING\", nmethod::ChangeReason::C1_deoptimize_for_patching)                 \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::C1_PREDICATE_FAILED_TRAP\", nmethod::ChangeReason::C1_predicate_failed_trap)                     \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::CI_REPLAY\", nmethod::ChangeReason::CI_replay)                                                   \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::GC_UNLINKING\", nmethod::ChangeReason::GC_unlinking)                                             \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::GC_UNLINKING_COLD\", nmethod::ChangeReason::GC_unlinking_cold)                                   \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", nmethod::ChangeReason::JVMCI_invalidate_nmethod)                     \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD_MIRROR\", nmethod::ChangeReason::JVMCI_invalidate_nmethod_mirror)       \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_MATERIALIZE_VIRTUAL_OBJECT\", nmethod::ChangeReason::JVMCI_materialize_virtual_object)     \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_NEW_INSTALLATION\", nmethod::ChangeReason::JVMCI_new_installation)                         \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REGISTER_METHOD\", nmethod::ChangeReason::JVMCI_register_method)                           \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPLACING_WITH_NEW_CODE\", nmethod::ChangeReason::JVMCI_replacing_with_new_code)           \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPROFILE\", nmethod::ChangeReason::JVMCI_reprofile)                                       \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::MARKED_FOR_DEOPTIMIZATION\", nmethod::ChangeReason::marked_for_deoptimization)                   \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::MISSING_EXCEPTION_HANDLER\", nmethod::ChangeReason::missing_exception_handler)                   \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::NOT_USED\", nmethod::ChangeReason::not_used)                                                     \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_BACK_BRANCH\", nmethod::ChangeReason::OSR_invalidation_back_branch)             \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_FOR_COMPILING_WITH_C1\", nmethod::ChangeReason::OSR_invalidation_for_compiling_with_C1)   \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::OSR_INVALIDATION_OF_LOWER_LEVEL\", nmethod::ChangeReason::OSR_invalidation_of_lower_level)                 \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::SET_NATIVE_FUNCTION\", nmethod::ChangeReason::set_native_function)            \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::UNCOMMON_TRAP\", nmethod::ChangeReason::uncommon_trap)                        \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::WHITEBOX_DEOPTIMIZATION\", nmethod::ChangeReason::whitebox_deoptimization)    \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::ZOMBIE\", nmethod::ChangeReason::zombie)                                      \\\n+                                                                                    \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    void invalidateInstalledCode(InstalledCode installedCode);\n+    void invalidateInstalledCode(InstalledCode installedCode, int changeReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/CodeCacheProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,5 @@\n+    \/**\n+     * Identify the reason that caused this installed code to change.\n+     *\/\n+    protected int changeReason;\n+\n@@ -122,0 +127,14 @@\n+    \/**\n+     * @return an integer representing the reason why this InstalledCode changed.\n+     *\/\n+    public int getChangeReason() {\n+        return changeReason;\n+    }\n+\n+    \/**\n+     * @return a String describing the reason why this InstalledCode changed.\n+     *\/\n+    public String getChangeReasonDescription() {\n+        return null;\n+    }\n+\n@@ -130,1 +149,1 @@\n-     * Equivalent to calling {@link #invalidate(boolean)} with a {@code true} argument.\n+     * Equivalent to calling {@link #invalidate(boolean, int)} with {@code true} and {@code 0} as arguments.\n@@ -133,1 +152,1 @@\n-        invalidate(true);\n+        invalidate(true, 0);\n@@ -149,0 +168,1 @@\n+     * @param changeReason an integer code representing the reason why this InstalledCode is being marked as invalidated.\n@@ -150,1 +170,1 @@\n-    public void invalidate(boolean deoptimize) {\n+    public void invalidate(boolean deoptimize, int statusReason) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/InstalledCode.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -657,0 +657,2 @@\n+    native String getChangeReasonDescription(int changeReason);\n+\n@@ -845,1 +847,1 @@\n-    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize);\n+    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int changeReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-    public void invalidateInstalledCode(InstalledCode installedCode) {\n+    public void invalidateInstalledCode(InstalledCode installedCode, int changeReason) {\n@@ -161,1 +161,1 @@\n-            nmethod.invalidate(true);\n+            nmethod.invalidate(true, changeReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,5 @@\n+\n+    @Override\n+    public String getChangeReasonDescription() {\n+        return compilerToVM().getChangeReasonDescription(this.getChangeReason());\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotInstalledCode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.vm.ci.common.JVMCIError;\n@@ -79,0 +80,41 @@\n+    \/**\n+     * This is a mirror of the ChangeReason enum defined in nmethod.hpp.\n+     * It defines constants representing different reasons why an nmethod\n+     * changed or was invalidated.\n+     *\/\n+    public enum ChangeReason {\n+        UNKNOWN,\n+        C1_CODEPATCH,\n+        C1_DEOPTIMIZE,\n+        C1_DEOPTIMIZE_FOR_PATCHING,\n+        C1_PREDICATE_FAILED_TRAP,\n+        CI_REPLAY,\n+        GC_UNLINKING,\n+        GC_UNLINKING_COLD,\n+        JVMCI_INVALIDATE_NMETHOD,\n+        JVMCI_INVALIDATE_NMETHOD_MIRROR,\n+        JVMCI_MATERIALIZE_VIRTUAL_OBJECT,\n+        JVMCI_NEW_INSTALLATION,\n+        JVMCI_REGISTER_METHOD,\n+        JVMCI_REPLACING_WITH_NEW_CODE,\n+        JVMCI_REPROFILE,\n+        MARKED_FOR_DEOPTIMIZATION,\n+        MISSING_EXCEPTION_HANDLER,\n+        NOT_USED,\n+        OSR_INVALIDATION_BACK_BRANCH,\n+        OSR_INVALIDATION_FOR_COMPILING_WITH_C1,\n+        OSR_INVALIDATION_OF_LOWER_LEVEL,\n+        SET_NATIVE_FUNCTION,\n+        UNCOMMON_TRAP,\n+        WHITEBOX_DEOPTIMIZATION,\n+        ZOMBIE;\n+\n+        ChangeReason() {\n+            int expect = ordinal();\n+            int actual = nmethodChangeReasonValue(name());\n+            if (expect != actual) {\n+                throw new JVMCIError(\"%s: expected %d, got %d\", name(), expect, actual);\n+            }\n+        }\n+    }\n+\n@@ -126,2 +168,2 @@\n-    public void invalidate(boolean deoptimize) {\n-        compilerToVM().invalidateHotSpotNmethod(this, deoptimize);\n+    public void invalidate(boolean deoptimize, int changeReason) {\n+        compilerToVM().invalidateHotSpotNmethod(this, deoptimize, changeReason);\n@@ -191,0 +233,4 @@\n+\n+    private static int nmethodChangeReasonValue(String name) {\n+        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::ChangeReason::\" + name, Integer.class);\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -232,2 +232,2 @@\n-    public static void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize) {\n-        CTVM.invalidateHotSpotNmethod(nmethodMirror, deoptimize);\n+    public static void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int changeReason) {\n+        CTVM.invalidateHotSpotNmethod(nmethodMirror, deoptimize, changeReason);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.jvmci\n+ * @requires vm.simpleArch == \"x64\" | vm.simpleArch == \"aarch64\" | vm.simpleArch == \"riscv64\"\n+ * @library \/test\/lib \/\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.aarch64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.amd64\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.riscv64\n+ * @compile CodeInstallationTest.java DebugInfoTest.java TestAssembler.java TestHotSpotVMConfig.java amd64\/AMD64TestAssembler.java aarch64\/AArch64TestAssembler.java riscv64\/RISCV64TestAssembler.java\n+ * @run junit\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:-UseJVMCICompiler jdk.vm.ci.code.test.CodeInvalidationReasonTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.vm.ci.code.Register;\n+import jdk.vm.ci.hotspot.HotSpotNmethod;\n+\n+import org.junit.Test;\n+\n+import java.lang.reflect.Method;\n+\n+\/**\n+ * Test if passing InstalledCode changeReason around works.\n+ *\/\n+public class CodeInvalidationReasonTest extends CodeInstallationTest {\n+\n+    public static int add(int a, int b) {\n+        return a + b;\n+    }\n+\n+    private static void compileAdd(TestAssembler asm) {\n+        Register arg0 = asm.emitIntArg0();\n+        Register arg1 = asm.emitIntArg1();\n+        Register ret = asm.emitIntAdd(arg0, arg1);\n+        asm.emitIntRet(ret);\n+    }\n+\n+    @Test\n+    public void test() {\n+        Method method = getMethod(\"add\", int.class, int.class);\n+\n+        HotSpotNmethod nmethod = test(CodeInvalidationReasonTest::compileAdd, method, 5, 7);\n+        Asserts.assertEquals(config.JVMCI_new_installation, nmethod.getChangeReason());\n+\n+        nmethod.invalidate(true, config.JVMCI_invalidate_nmethod);\n+        Asserts.assertEquals(config.JVMCI_invalidate_nmethod, nmethod.getChangeReason());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInvalidationReasonTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        nmethod.invalidate(false);\n+        nmethod.invalidate(false, config.JVMCI_invalidate_nmethod);\n@@ -80,1 +80,1 @@\n-        nmethod.invalidate(true);\n+        nmethod.invalidate(true, config.JVMCI_invalidate_nmethod);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,3 @@\n+    public final int JVMCI_new_installation = getConstant(\"nmethod::ChangeReason::JVMCI_NEW_INSTALLATION\", Integer.class);\n+    public final int JVMCI_invalidate_nmethod = getConstant(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", Integer.class);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}