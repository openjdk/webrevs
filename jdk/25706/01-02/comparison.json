{"files":[{"patch":"@@ -475,1 +475,1 @@\n-  \/\/ vmStructs_jvmci.cpp and HotSpotNmethod.java accordingly.\n+  \/\/ vmStructs_jvmci.cpp accordingly.\n@@ -486,1 +486,0 @@\n-    JVMCI_invalidate_nmethod_mirror,\n@@ -488,3 +487,1 @@\n-    JVMCI_new_installation,\n-    JVMCI_register_method,\n-    JVMCI_replacing_with_new_code,\n+    JVMCI_replaced_with_new_code,\n@@ -519,2 +516,0 @@\n-      case ChangeReason::JVMCI_invalidate_nmethod_mirror:\n-        return \"JVMCI invalidate nmethod mirror\";\n@@ -523,6 +518,2 @@\n-      case ChangeReason::JVMCI_new_installation:\n-        return \"JVMCI new installation\";\n-      case ChangeReason::JVMCI_register_method:\n-        return \"JVMCI register method\";\n-      case ChangeReason::JVMCI_replacing_with_new_code:\n-        return \"JVMCI replacing with new code\";\n+      case ChangeReason::JVMCI_replaced_with_new_code:\n+        return \"JVMCI replaced with new code\";\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1210,1 +1210,1 @@\n-        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::ChangeReason::JVMCI_replacing_with_new_code, JVMCI_CHECK_0);\n+        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, nmethod::ChangeReason::JVMCI_replaced_with_new_code, JVMCI_CHECK_0);\n@@ -1221,1 +1221,1 @@\n-C2V_VMENTRY_0(jobject,  getChangeReasonDescription, (JNIEnv *env, jobject, jint change_reason))\n+C2V_VMENTRY_0(jobject, getInvalidationReasonString, (JNIEnv *env, jobject, jint invalidation_reason))\n@@ -1224,1 +1224,1 @@\n-  nmethod::ChangeReason reason = static_cast<nmethod::ChangeReason>(change_reason);\n+  nmethod::ChangeReason reason = static_cast<nmethod::ChangeReason>(invalidation_reason);\n@@ -3363,1 +3363,1 @@\n-  {CC \"getChangeReasonDescription\",                   CC \"(I)\" STRING,                                                                      FN_PTR(getChangeReasonDescription)},\n+  {CC \"getInvalidationReasonString\",                  CC \"(I)\" STRING,                                                                      FN_PTR(getInvalidationReasonString)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1747,1 +1747,1 @@\n-  set_InstalledCode_changeReason(installed_code, static_cast<int>(nmethod::ChangeReason::JVMCI_new_installation));\n+  set_HotSpotNmethod_invalidationReason(installed_code, static_cast<int>(nmethod::ChangeReason::unknown));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-    int_field(InstalledCode, changeReason)                                                                    \\\n@@ -106,0 +105,1 @@\n+    int_field(HotSpotNmethod, invalidationReason)                                                             \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -818,1 +818,1 @@\n-      HotSpotJVMCI::InstalledCode::set_changeReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n+      HotSpotJVMCI::HotSpotNmethod::set_invalidationReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n@@ -825,1 +825,1 @@\n-      HotSpotJVMCI::InstalledCode::set_changeReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n+      HotSpotJVMCI::HotSpotNmethod::set_invalidationReason(jvmciEnv, nmethod_mirror, static_cast<int>(change_reason));\n@@ -2189,1 +2189,1 @@\n-              old->make_not_entrant(nmethod::ChangeReason::JVMCI_register_method);\n+              old->make_not_entrant(nmethod::ChangeReason::JVMCI_replaced_with_new_code);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -577,1 +577,0 @@\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD_MIRROR\", nmethod::ChangeReason::JVMCI_invalidate_nmethod_mirror)       \\\n@@ -579,3 +578,1 @@\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_NEW_INSTALLATION\", nmethod::ChangeReason::JVMCI_new_installation)                         \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REGISTER_METHOD\", nmethod::ChangeReason::JVMCI_register_method)                           \\\n-  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPLACING_WITH_NEW_CODE\", nmethod::ChangeReason::JVMCI_replacing_with_new_code)           \\\n+  declare_constant_with_value(\"nmethod::ChangeReason::JVMCI_REPLACED_WITH_NEW_CODE\", nmethod::ChangeReason::JVMCI_replaced_with_new_code)             \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    void invalidateInstalledCode(InstalledCode installedCode, int changeReason);\n+    void invalidateInstalledCode(InstalledCode installedCode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/CodeCacheProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,5 +49,0 @@\n-    \/**\n-     * Identify the reason that caused this installed code to change.\n-     *\/\n-    protected int changeReason;\n-\n@@ -127,14 +122,0 @@\n-    \/**\n-     * @return an integer representing the reason why this InstalledCode changed.\n-     *\/\n-    public int getChangeReason() {\n-        return changeReason;\n-    }\n-\n-    \/**\n-     * @return a String describing the reason why this InstalledCode changed.\n-     *\/\n-    public String getChangeReasonDescription() {\n-        return null;\n-    }\n-\n@@ -152,1 +133,1 @@\n-        invalidate(true, 0);\n+        invalidate(true);\n@@ -168,1 +149,0 @@\n-     * @param changeReason an integer code representing the reason why this InstalledCode is being marked as invalidated.\n@@ -170,1 +150,1 @@\n-    public void invalidate(boolean deoptimize, int statusReason) {\n+    public void invalidate(boolean deoptimize) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/InstalledCode.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -657,1 +657,1 @@\n-    native String getChangeReasonDescription(int changeReason);\n+    native String getInvalidationReasonString(int invalidationReason);\n@@ -847,1 +847,1 @@\n-    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int changeReason);\n+    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize, int invalidationReason);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,2 +157,1 @@\n-    @Override\n-    public void invalidateInstalledCode(InstalledCode installedCode, int changeReason) {\n+    public void invalidateInstalledCode(InstalledCode installedCode, int invalidationReason) {\n@@ -161,1 +160,1 @@\n-            nmethod.invalidate(true, changeReason);\n+            nmethod.invalidate(true, invalidationReason);\n@@ -167,0 +166,5 @@\n+    @Override\n+    public void invalidateInstalledCode(InstalledCode installedCode) {\n+        invalidateInstalledCode(installedCode, unknownInvalidationReason());\n+    }\n+\n@@ -204,0 +208,4 @@\n+\n+    private static int unknownInvalidationReason() {\n+        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::ChangeReason::Unknown\", Integer.class);\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-\n-    @Override\n-    public String getChangeReasonDescription() {\n-        return compilerToVM().getChangeReasonDescription(this.getChangeReason());\n-    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotInstalledCode.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -81,3 +81,1 @@\n-     * This is a mirror of the ChangeReason enum defined in nmethod.hpp.\n-     * It defines constants representing different reasons why an nmethod\n-     * changed or was invalidated.\n+     * Identify the reason that caused this nmethod to be invalidated.\n@@ -85,35 +83,1 @@\n-    public enum ChangeReason {\n-        UNKNOWN,\n-        C1_CODEPATCH,\n-        C1_DEOPTIMIZE,\n-        C1_DEOPTIMIZE_FOR_PATCHING,\n-        C1_PREDICATE_FAILED_TRAP,\n-        CI_REPLAY,\n-        GC_UNLINKING,\n-        GC_UNLINKING_COLD,\n-        JVMCI_INVALIDATE_NMETHOD,\n-        JVMCI_INVALIDATE_NMETHOD_MIRROR,\n-        JVMCI_MATERIALIZE_VIRTUAL_OBJECT,\n-        JVMCI_NEW_INSTALLATION,\n-        JVMCI_REGISTER_METHOD,\n-        JVMCI_REPLACING_WITH_NEW_CODE,\n-        JVMCI_REPROFILE,\n-        MARKED_FOR_DEOPTIMIZATION,\n-        MISSING_EXCEPTION_HANDLER,\n-        NOT_USED,\n-        OSR_INVALIDATION_BACK_BRANCH,\n-        OSR_INVALIDATION_FOR_COMPILING_WITH_C1,\n-        OSR_INVALIDATION_OF_LOWER_LEVEL,\n-        SET_NATIVE_FUNCTION,\n-        UNCOMMON_TRAP,\n-        WHITEBOX_DEOPTIMIZATION,\n-        ZOMBIE;\n-\n-        ChangeReason() {\n-            int expect = ordinal();\n-            int actual = nmethodChangeReasonValue(name());\n-            if (expect != actual) {\n-                throw new JVMCIError(\"%s: expected %d, got %d\", name(), expect, actual);\n-            }\n-        }\n-    }\n+    private int invalidationReason;\n@@ -127,0 +91,1 @@\n+        this.invalidationReason = 0;\n@@ -167,0 +132,4 @@\n+    public void invalidate(boolean deoptimize, int invalidationReason) {\n+        compilerToVM().invalidateHotSpotNmethod(this, deoptimize, invalidationReason);\n+    }\n+\n@@ -168,2 +137,2 @@\n-    public void invalidate(boolean deoptimize, int changeReason) {\n-        compilerToVM().invalidateHotSpotNmethod(this, deoptimize, changeReason);\n+    public void invalidate(boolean deoptimize) {\n+        invalidate(deoptimize, unknownInvalidationReason());\n@@ -234,2 +203,16 @@\n-    private static int nmethodChangeReasonValue(String name) {\n-        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::ChangeReason::\" + name, Integer.class);\n+    \/**\n+     * @return an integer representing the reason why this nmethod was invalidated.\n+     *\/\n+    public int getInvalidationReason() {\n+        return invalidationReason;\n+    }\n+\n+    \/**\n+     * @return a String describing the reason why this nmethod was invalidated.\n+     *\/\n+    public String getInvalidationReasonString() {\n+        return compilerToVM().getInvalidationReasonString(this.getInvalidationReason());\n+    }\n+\n+    private static int unknownInvalidationReason() {\n+        return HotSpotJVMCIRuntime.runtime().config.getConstant(\"nmethod::ChangeReason::Unknown\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":25,"deletions":42,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * Test if passing InstalledCode changeReason around works.\n+ * Test if setting HotSpotNmethod invalidation reason around works.\n@@ -72,1 +72,1 @@\n-        Asserts.assertEquals(config.JVMCI_new_installation, nmethod.getChangeReason());\n+        Asserts.assertEquals(config.NMETHOD_CHANGE_REASON_UNKNOWN, nmethod.getInvalidationReason());\n@@ -74,2 +74,2 @@\n-        nmethod.invalidate(true, config.JVMCI_invalidate_nmethod);\n-        Asserts.assertEquals(config.JVMCI_invalidate_nmethod, nmethod.getChangeReason());\n+        nmethod.invalidate(true, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n+        Asserts.assertEquals(config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE, nmethod.getInvalidationReason());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInvalidationReasonTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        nmethod.invalidate(false, config.JVMCI_invalidate_nmethod);\n+        nmethod.invalidate(false, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n@@ -80,1 +80,1 @@\n-        nmethod.invalidate(true, config.JVMCI_invalidate_nmethod);\n+        nmethod.invalidate(true, config.NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    public final int JVMCI_new_installation = getConstant(\"nmethod::ChangeReason::JVMCI_NEW_INSTALLATION\", Integer.class);\n-    public final int JVMCI_invalidate_nmethod = getConstant(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", Integer.class);\n+    public final int NMETHOD_CHANGE_REASON_UNKNOWN = getConstant(\"nmethod::ChangeReason::UNKNOWN\", Integer.class);\n+    public final int NMETHOD_CHANGE_REASON_JVMCI_INVALIDATE = getConstant(\"nmethod::ChangeReason::JVMCI_INVALIDATE_NMETHOD\", Integer.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}