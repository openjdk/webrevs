{"files":[{"patch":"@@ -44,0 +44,3 @@\n+    private static final boolean ALLOW_DELETE_READ_ONLY_FILES =\n+        Boolean.getBoolean(\"jdk.io.File.allowDeleteReadOnlyFiles\");\n+\n@@ -568,1 +571,1 @@\n-        return delete0(f);\n+        return delete0(f, ALLOW_DELETE_READ_ONLY_FILES);\n@@ -570,1 +573,1 @@\n-    private native boolean delete0(File f);\n+    private native boolean delete0(File f, boolean allowDeleteReadOnlyFiles);\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -652,1 +652,1 @@\n-removeFileOrDirectory(const jchar *path)\n+removeFileOrDirectory(const jchar *path, jboolean allowDeleteReadOnlyFiles)\n@@ -655,4 +655,1 @@\n-    DWORD a;\n-\n-    SetFileAttributesW(path, FILE_ATTRIBUTE_NORMAL);\n-    a = GetFileAttributesW(path);\n+    DWORD a = GetFileAttributesW(path);\n@@ -662,0 +659,1 @@\n+        \/\/ read-only attribute cannot be set on directories\n@@ -664,1 +662,14 @@\n-        return !DeleteFileW(path);\n+        \/\/ unset read-only attribute if deleting read-only files is enabled\n+        BOOL readOnlyAttrCleared = FALSE;\n+        if (allowDeleteReadOnlyFiles && ((a & FILE_ATTRIBUTE_READONLY) != 0)) {\n+            DWORD notReadOnlyAttr = a & (~FILE_ATTRIBUTE_READONLY);\n+            readOnlyAttrCleared = SetFileAttributesW(path, notReadOnlyAttr);\n+        }\n+\n+        BOOL deleted = !DeleteFileW(path);\n+\n+        \/\/ reinstate the read-only attribute if it was unset but deletion failed\n+        if (!deleted && readOnlyAttrCleared)\n+            SetFileAttributesW(path, a);\n+\n+        return deleted;\n@@ -669,1 +680,2 @@\n-Java_java_io_WinNTFileSystem_delete0(JNIEnv *env, jobject this, jobject file)\n+Java_java_io_WinNTFileSystem_delete0(JNIEnv *env, jobject this, jobject file,\n+                                     jboolean allowDeleteReadOnlyFiles)\n@@ -676,1 +688,1 @@\n-    if (removeFileOrDirectory(pathbuf) == 0) {\n+    if (removeFileOrDirectory(pathbuf, allowDeleteReadOnlyFiles) == 0) {\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8355954\n+ * @summary Verify correct behavior of File.delete\n+ * @run junit DeleteReadOnly\n+ * @run junit\/othervm -Djdk.io.File.allowDeleteReadOnlyFiles=true DeleteReadOnly\n+ *\/\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeleteReadOnly {\n+    private static final String PROP = \"jdk.io.File.allowDeleteReadOnlyFiles\";\n+    private static final boolean DELETE_READ_ONLY = Boolean.getBoolean(PROP);\n+\n+    private static final File DIR = new File(\".\", \"dir\");\n+    private static final File FILE = new File(DIR, \"file\");\n+\n+    @BeforeAll\n+    static void createFiles() throws IOException {\n+        DIR.mkdir();\n+        FILE.createNewFile();\n+    }\n+\n+    \/\/ This test must be run first\n+    @Test\n+    @Order(1)\n+    @EnabledOnOs({OS.AIX, OS.LINUX, OS.MAC})\n+    void deleteReadOnlyFile() {\n+        FILE.setReadOnly();\n+        assertTrue(FILE.delete());\n+    }\n+\n+    \/\/ This test must be run first\n+    @Test\n+    @Order(1)\n+    @EnabledOnOs({OS.WINDOWS})\n+    void deleteReadOnlyFileWin() {\n+        FILE.setReadOnly();\n+\n+        boolean deleted = FILE.delete();\n+        assertEquals(DELETE_READ_ONLY, deleted);\n+\n+        if (!deleted) {\n+            FILE.setWritable(true);\n+            assertTrue(FILE.delete());\n+        }\n+    }\n+\n+    \/\/ This test must be run after DIR is empty\n+    @Test\n+    @Order(2)\n+    @EnabledOnOs({OS.AIX, OS.LINUX, OS.MAC})\n+    void deleteReadOnlyDir() {\n+        DIR.setReadOnly();\n+        assertTrue(DIR.delete());\n+    }\n+\n+    \/\/ This test must be run after DIR is empty\n+    @Test\n+    @Order(2)\n+    @EnabledOnOs({OS.WINDOWS})\n+    void deleteReadOnlyDirWin() {\n+        DIR.setReadOnly();\n+        assertTrue(DIR.delete());\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/File\/DeleteReadOnly.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @library \/test\/lib\n@@ -31,3 +32,9 @@\n-import java.io.*;\n-import java.nio.file.*;\n-import java.nio.file.attribute.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import jtreg.SkippedException;\n@@ -38,2 +45,1 @@\n-            System.out.println(\"Unable to test file permissions when running with privileges\");\n-            return;\n+            throw new SkippedException(\"Unable to test file permissions when running with privileges\");\n@@ -67,1 +73,1 @@\n-                throw new Exception(f + \": setWritable(true, ture) Failed\");\n+                throw new Exception(f + \": setWritable(true, true) Failed\");\n@@ -82,1 +88,1 @@\n-                throw new Exception(f + \": setWritable(true, ture) Failed\");\n+                throw new Exception(f + \": setWritable(true, true) Failed\");\n@@ -131,1 +137,1 @@\n-            \/\/Windows platform\n+            \/\/ Windows platform\n@@ -136,1 +142,1 @@\n-                    throw new Exception(f + \": setWritable(true, ture) Failed\");\n+                    throw new Exception(f + \": setWritable(true, true) Failed\");\n@@ -140,1 +146,1 @@\n-                    throw new Exception(f + \": setWritable(true, ture) Failed\");\n+                    throw new Exception(f + \": setWritable(true, true) Failed\");\n@@ -155,2 +161,2 @@\n-                \/\/ setWritable should fail on directories because the DOS readonly\n-                \/\/ attribute prevents a directory from being deleted.\n+                \/\/ setWritable should fail on directories because the DOS\n+                \/\/ readonly attribute prevents a directory from being deleted.\n@@ -183,0 +189,6 @@\n+            if (f.isFile() && !f.canWrite()) {\n+                \/\/ Files must not be left in a read-only state as the\n+                \/\/ jdk.io.File.deleteReadOnly property is not set\n+                if (!f.setWritable(true))\n+                    throw new Exception(f + \": setWritable(true, true) Failed\");\n+            }\n","filename":"test\/jdk\/java\/io\/File\/SetAccess.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"}]}