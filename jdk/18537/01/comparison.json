{"files":[{"patch":"@@ -38,6 +38,0 @@\n-FindSrcDirsForLib += \\\n-  $(call uniq, $(wildcard \\\n-      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS)\/native\/lib$(strip $2) \\\n-      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS_TYPE)\/native\/lib$(strip $2) \\\n-      $(TOPDIR)\/src\/$(strip $1)\/share\/native\/lib$(strip $2)))\n-\n@@ -107,2 +101,3 @@\n-# Setup make rules for creating a native shared library with suitable defaults\n-# for the OpenJDK project.\n+# Setup make rules for creating a native binary with suitable defaults\n+# for the OpenJDK project. This macro is mostly considered to be an internal\n+# support version. Please use SetupJdkLibrary or SetupJdkExecutable instead.\n@@ -114,1 +109,3 @@\n-# SetupNativeCompilation, except for\n+# SetupNativeCompilation. This macro also adds the following additional\n+# arguments:\n+#\n@@ -125,2 +122,25 @@\n-SetupJdkLibrary = $(NamedParamsMacroTemplate)\n-define SetupJdkLibraryBody\n+#   JDK_LIBS -- libraries generated by the JDK build system to link against\n+#   JDK_LIBS_<os> or JDK_LIBS_<osType> -- additional JDK_LIBS for the given OS\n+#     or OS type only\n+#   DEFAULT_CFLAGS -- if false, do not add default CFLAGS and CXXFLAGS\n+#   CFLAGS_FILTER_OUT -- flags to filter out from default CFLAGS\n+#   CXXFLAGS_FILTER_OUT -- flags to filter out from default CXXFLAGS\n+#   LDFLAGS_FILTER_OUT -- flags to filter out from default LDFLAGS\n+#   LD_SET_ORIGIN -- if false, do not add SET_*_ORIGIN flags to LDFLAGS\n+#   APPEND_LDFLAGS -- a quirk to have additional LDFLAGS that will be set after\n+#     the origin flags\n+#\n+SetupJdkNativeCompilation = $(NamedParamsMacroTemplate)\n+define SetupJdkNativeCompilationBody\n+  ifeq ($$($1_TYPE), EXECUTABLE)\n+    $1_NATIVE_DIR_PREFIX :=\n+    $1_MODULES_PATH := modules_cmds\n+    $1_RC_EXT := exe\n+    $1_RC_FTYPE := 0x1L\n+  else\n+    $1_NATIVE_DIR_PREFIX := lib\n+    $1_MODULES_PATH := modules_libs\n+    $1_RC_EXT := dll\n+    $1_RC_FTYPE := 0x2L\n+  endif\n+\n@@ -132,1 +152,1 @@\n-        $1_OUTPUT_DIR := $$(call FindLibDirForModule, $$(MODULE))\n+        $1_OUTPUT_DIR := $$(SUPPORT_OUTPUTDIR)\/$$($1_MODULES_PATH)\/$$(strip $$(MODULE))\n@@ -141,1 +161,1 @@\n-      $1_OBJECT_DIR := $$(SUPPORT_OUTPUTDIR)\/native\/$$(MODULE)\/lib$$($1_NAME)\n+      $1_OBJECT_DIR := $$(SUPPORT_OUTPUTDIR)\/native\/$$(MODULE)\/$$($1_NATIVE_DIR_PREFIX)$$($1_NAME)\n@@ -153,1 +173,1 @@\n-      $1_SRC := $$(call FindSrcDirsForLib, $$(MODULE), $$($1_NAME))\n+      $1_SRC := $$(call FindSrcDirsForComponent, $$(MODULE), $$($1_NATIVE_DIR_PREFIX)$$($1_NAME))\n@@ -178,1 +198,0 @@\n-\n@@ -180,2 +199,2 @@\n-      -D\"JDK_FILEDESC=$$(strip $$($1_RC_FILEDESC))\" \\\n-      -D\"JDK_FNAME=$$($1_NAME).dll\" \\\n+      -D\"JDK_FILEDESC=$$($1_RC_FILEDESC)\" \\\n+      -D\"JDK_FNAME=$$($1_NAME).$$($1_RC_EXT)\" \\\n@@ -183,1 +202,1 @@\n-      -D\"JDK_FTYPE=0x2L\" \\\n+      -D\"JDK_FTYPE=$$($1_RC_FTYPE)\" \\\n@@ -206,2 +225,3 @@\n-    # Set the default flags first to be able to override\n-    $1_CFLAGS := $$(filter-out $$($1_CFLAGS_FILTER_OUT), $$(CFLAGS_JDKLIB)) $$($1_CFLAGS)\n+    ifeq ($$($1_TYPE), EXECUTABLE)\n+      # Set the default flags first to be able to override\n+      $1_CFLAGS := $$(filter-out $$($1_CFLAGS_FILTER_OUT), $$(CFLAGS_JDKEXE)) $$($1_CFLAGS)\n@@ -209,2 +229,9 @@\n-    # Set the default flags first to be able to override\n-    $1_CXXFLAGS := $$(filter-out $$($1_CXXFLAGS_FILTER_OUT), $$(CXXFLAGS_JDKLIB)) $$($1_CXXFLAGS)\n+      # Set the default flags first to be able to override\n+      $1_CXXFLAGS := $$(filter-out $$($1_CXXFLAGS_FILTER_OUT), $$(CXXFLAGS_JDKEXE)) $$($1_CXXFLAGS)\n+    else\n+      # Set the default flags first to be able to override\n+      $1_CFLAGS := $$(filter-out $$($1_CFLAGS_FILTER_OUT), $$(CFLAGS_JDKLIB)) $$($1_CFLAGS)\n+\n+      # Set the default flags first to be able to override\n+      $1_CXXFLAGS := $$(filter-out $$($1_CXXFLAGS_FILTER_OUT), $$(CXXFLAGS_JDKLIB)) $$($1_CXXFLAGS)\n+    endif\n@@ -224,2 +251,7 @@\n-    # Set the default flags first to be able to override\n-    $1_LDFLAGS := $$(filter-out $$($1_LDFLAGS_FILTER_OUT), $$(LDFLAGS_JDKLIB)) $$($1_LDFLAGS)\n+    ifeq ($$($1_TYPE), EXECUTABLE)\n+      # Set the default flags first to be able to override\n+      $1_LDFLAGS := $$(filter-out $$($1_LDFLAGS_FILTER_OUT), $$(LDFLAGS_JDKEXE)) $$($1_LDFLAGS)\n+    else\n+      # Set the default flags first to be able to override\n+      $1_LDFLAGS := $$(filter-out $$($1_LDFLAGS_FILTER_OUT), $$(LDFLAGS_JDKLIB)) $$($1_LDFLAGS)\n+    endif\n@@ -229,1 +261,5 @@\n-    $1_LDFLAGS += $$(call SET_SHARED_LIBRARY_ORIGIN)\n+    ifeq ($$($1_TYPE), EXECUTABLE)\n+      $1_LDFLAGS += $$(call SET_EXECUTABLE_ORIGIN)\n+    else\n+      $1_LDFLAGS += $$(call SET_SHARED_LIBRARY_ORIGIN)\n+    endif\n@@ -237,1 +273,1 @@\n-  $$(eval $$(call SetupNativeCompilation, $1, ))\n+  $$(eval $$(call SetupNativeCompilation, $1))\n@@ -240,2 +276,3 @@\n-# Setup make rules for creating a native executable with suitable defaults for\n-# the OpenJDK project.\n+# Setup make rules for creating a native library with suitable defaults\n+# for the OpenJDK project. The default is to create a shared library,\n+# but by passing TYPE := STATIC_LIBARY, a static library can be created.\n@@ -247,82 +284,6 @@\n-# SetupNativeCompilation, except for\n-#   EXTRA_RCFLAGS -- additional RCFLAGS to append.\n-SetupJdkExecutable = $(NamedParamsMacroTemplate)\n-define SetupJdkExecutableBody\n-  $1_TYPE := EXECUTABLE\n-\n-  ifeq ($$($1_OUTPUT_DIR), )\n-    ifneq ($$(MODULE), )\n-      $1_OUTPUT_DIR := $$(call FindExecutableDirForModule, $$(MODULE))\n-    else\n-      $$(error Must specify OUTPUT_DIR in a MODULE free context)\n-    endif\n-  endif\n-\n-  ifeq ($$($1_OBJECT_DIR), )\n-    ifneq ($$(MODULE), )\n-      $1_OBJECT_DIR := $$(SUPPORT_OUTPUTDIR)\/native\/$$(MODULE)\/$$($1_NAME)\n-    else\n-      $$(error Must specify OBJECT_DIR in a MODULE free context)\n-    endif\n-  endif\n-\n-  ifeq ($$($1_LINK_TYPE), C++)\n-    $1_LIBS += $(LIBCXX)\n-  endif\n-\n-  ifeq ($$($1_SRC), )\n-    ifneq ($$(MODULE), )\n-      $1_SRC := $$(call FindSrcDirsForComponent, $$(MODULE), $$($1_NAME))\n-    else\n-      $$(error Must specify SRC in a MODULE free context)\n-    endif\n-  else\n-    $1_SRC := $$(foreach dir, $$($1_SRC), $$(call ProcessDir, $$(dir)))\n-  endif\n-  ifneq ($$($1_EXTRA_SRC), )\n-    $1_SRC += $$(foreach dir, $$($1_EXTRA_SRC), $$(call ProcessDir, $$(dir)))\n-  endif\n-\n-  ifeq ($$($1_VERSIONINFO_RESOURCE), )\n-    $1_VERSIONINFO_RESOURCE := $$(GLOBAL_VERSION_INFO_RESOURCE)\n-  endif\n-\n-  $1_RCFLAGS := $(JDK_RCFLAGS) \\\n-      -D\"JDK_FILEDESC=$(JDK_RC_NAME) binary\" \\\n-      -D\"JDK_FNAME=$$($1_NAME).exe\" \\\n-      -D\"JDK_INTERNAL_NAME=$$($1_NAME)\" \\\n-      -D\"JDK_FTYPE=0x1L\" \\\n-      -I$(TOPDIR)\/src\/java.base\/windows\/native\/common \\\n-      $$($1_EXTRA_RCFLAGS)\n-\n-  ifneq ($$($1_HEADERS_FROM_SRC), false)\n-    $1_SRC_HEADER_FLAGS := $$(addprefix -I, $$(wildcard $$($1_SRC)))\n-  endif\n-\n-  $1_JDK_LIBS += $$($1_JDK_LIBS_$$(OPENJDK_TARGET_OS))\n-  $1_JDK_LIBS += $$($1_JDK_LIBS_$$(OPENJDK_TARGET_OS_TYPE))\n-  # Prepend JDK libs before external libs\n-  $1_LIBS := $$($1_JDK_LIBS) $$($1_LIBS)\n-\n-  ifneq ($$($1_EXTRA_HEADER_DIRS), )\n-    $1_PROCESSED_EXTRA_HEADER_DIRS := $$(foreach dir, $$($1_EXTRA_HEADER_DIRS), \\\n-        $$(call ProcessDir, $$(dir)))\n-    $1_EXTRA_HEADER_FLAGS := $$(addprefix -I, $$($1_PROCESSED_EXTRA_HEADER_DIRS))\n-  endif\n-\n-  ifneq ($$($1_DEFAULT_CFLAGS), false)\n-    # Set the default flags first to be able to override\n-    $1_CFLAGS := $$(filter-out $$($1_CFLAGS_FILTER_OUT), $$(CFLAGS_JDKEXE)) $$($1_CFLAGS)\n-\n-    # Set the default flags first to be able to override\n-    $1_CXXFLAGS := $$(filter-out $$($1_CXXFLAGS_FILTER_OUT), $$(CXXFLAGS_JDKEXE)) $$($1_CXXFLAGS)\n-  endif\n-\n-  ifneq ($$($1_CFLAGS), )\n-    $1_CFLAGS += $$($1_SRC_HEADER_FLAGS) $$($1_EXTRA_HEADER_FLAGS)\n-  endif\n-  ifneq ($$($1_CXXFLAGS), )\n-    $1_CXXFLAGS += $$($1_SRC_HEADER_FLAGS) $$($1_EXTRA_HEADER_FLAGS)\n-  endif\n-  ifeq ($$($1_CFLAGS)$$($1_CXXFLAGS), )\n-    $1_CFLAGS += $$($1_SRC_HEADER_FLAGS) $$($1_EXTRA_HEADER_FLAGS)\n+# SetupJdkNativeCompilation. Please see that macro for details.\n+SetupJdkLibrary = $(NamedParamsMacroTemplate)\n+define SetupJdkLibraryBody\n+  # If type is unspecified, default to LIBRARY\n+  ifeq ($$($1_TYPE), )\n+    $1_TYPE := LIBRARY\n@@ -331,4 +292,4 @@\n-  ifneq ($$($1_DEFAULT_LDFLAGS), false)\n-    # Set the default flags first to be able to override\n-    $1_LDFLAGS := $$(filter-out $$($1_LDFLAGS_FILTER_OUT), $$(LDFLAGS_JDKEXE)) $$($1_LDFLAGS)\n-  endif\n+  # Since we reuse the rule name ($1), all our arguments will pass through.\n+  # We lose in transparency, but gain in brevity in this call...\n+  $$(eval $$(call SetupJdkNativeCompilation, $1))\n+endef\n@@ -336,3 +297,11 @@\n-  ifneq ($$($1_LD_SET_ORIGIN), false)\n-    $1_LDFLAGS += $$(call SET_EXECUTABLE_ORIGIN)\n-  endif\n+# Setup make rules for creating a native executable with suitable defaults\n+# for the OpenJDK project.\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# Remaining parameters are named arguments. These are all passed on to\n+# SetupJdkNativeCompilation. Please see that macro for details.\n+SetupJdkExecutable = $(NamedParamsMacroTemplate)\n+define SetupJdkExecutableBody\n+  $1_TYPE := EXECUTABLE\n@@ -342,1 +311,1 @@\n-  $$(eval $$(call SetupNativeCompilation, $1))\n+  $$(eval $$(call SetupJdkNativeCompilation, $1))\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":87,"deletions":118,"binary":false,"changes":205,"status":"modified"}]}