{"files":[{"patch":"@@ -193,5 +193,0 @@\n-    \/\/ Check if the secondary index definition is still ~x, otherwise\n-    \/\/ we have to change the following assembler code to calculate the\n-    \/\/ plain index.\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    eonw(index, index, zr);  \/\/ convert to plain index\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -214,5 +214,0 @@\n-    \/\/ Check if the secondary index definition is still ~x, otherwise\n-    \/\/ we have to change the following assembler code to calculate the\n-    \/\/ plain index.\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    mvn_32(index, index);  \/\/ convert to plain index\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -447,2 +447,0 @@\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    nand(Rdst, Rdst, Rdst); \/\/ convert to plain index\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,7 +219,0 @@\n-\n-    \/\/ Check if the secondary index definition is still ~x, otherwise\n-    \/\/ we have to change the following assembler code to calculate the\n-    \/\/ plain index.\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    xori(index, index, -1);\n-    sign_extend(index, index, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -327,6 +327,0 @@\n-\n-    \/\/ Check if the secondary index definition is still ~x, otherwise\n-    \/\/ we have to change the following assembler code to calculate the\n-    \/\/ plain index.\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    not_(index);  \/\/ Convert to plain index.\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -466,5 +466,0 @@\n-    \/\/ Check if the secondary index definition is still ~x, otherwise\n-    \/\/ we have to change the following assembler code to calculate the\n-    \/\/ plain index.\n-    assert(ConstantPool::decode_invokedynamic_index(~123) == 123, \"else change next line\");\n-    notl(index);  \/\/ convert to plain index\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1062,2 +1062,1 @@\n-        int indy_index = pool->decode_invokedynamic_index(index);\n-        appendix = Handle(current, pool->cache()->set_dynamic_call(info, indy_index));\n+        appendix = Handle(current, pool->cache()->set_dynamic_call(info, index));\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-                                       ConstantPool::encode_invokedynamic_index(indy_index),\n+                                       indy_index,\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -872,4 +872,2 @@\n-    int indy_index = cpool->decode_invokedynamic_index(index);\n-    assert (indy_index >= 0, \"should be\");\n-    assert(indy_index < cpool->cache()->resolved_indy_entries_length(), \"impossible\");\n-    Method* adapter = cpool->resolved_indy_entry_at(indy_index)->method();\n+    assert(index < cpool->cache()->resolved_indy_entries_length(), \"impossible\");\n+    Method* adapter = cpool->resolved_indy_entry_at(index)->method();\n@@ -1502,2 +1500,1 @@\n-  int index = cp->decode_invokedynamic_index(indy_index);\n-  ResolvedIndyEntry* indy_info = cp->resolved_indy_entry_at(index);\n+  ResolvedIndyEntry* indy_info = cp->resolved_indy_entry_at(indy_index);\n@@ -1509,1 +1506,1 @@\n-    oop appendix = cp->resolved_reference_from_indy(index);\n+    oop appendix = cp->resolved_reference_from_indy(indy_index);\n@@ -1516,1 +1513,1 @@\n-    BootstrapInfo bootstrap_specifier(cp, pool_index, index);\n+    BootstrapInfo bootstrap_specifier(cp, pool_index, indy_index);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -419,1 +419,0 @@\n-        index = cp->decode_invokedynamic_index(index);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -473,1 +473,1 @@\n-  return ConstantPool::has_appendix_at_if_loaded(cpool, get_method_index());\n+  return ConstantPool::has_appendix_at_if_loaded(cpool, get_method_index(), cur_bc());\n@@ -484,1 +484,1 @@\n-  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cpool, get_method_index());\n+  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cpool, get_method_index(), cur_bc());\n@@ -496,1 +496,1 @@\n-    return ConstantPool::has_local_signature_at_if_loaded(cpool, get_method_index());\n+    return ConstantPool::has_local_signature_at_if_loaded(cpool, get_method_index(), cur_bc());\n@@ -546,1 +546,0 @@\n-\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  \/\/ constant pool index.  It assumes it is being called with a index that is less than 0\n+  \/\/ constant pool index.\n@@ -62,1 +62,0 @@\n-    assert(index < 0, \"Unexpected non-negative cpCache index\");\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        int method_index = cpool->decode_invokedynamic_index(invoke_bc.get_index_u4(code));\n+        int method_index = invoke_bc.get_index_u4(code);\n@@ -397,2 +397,1 @@\n-        int indy_index = method->constants()->decode_invokedynamic_index(index);\n-        method->constants()->resolved_indy_entry_at(indy_index)->set_num_parameters(callee_parameters);\n+        method->constants()->resolved_indy_entry_at(index)->set_num_parameters(callee_parameters);\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    int encoded_index = ResolutionErrorTable::encode_indy_index(ConstantPool::encode_invokedynamic_index(_indy_index));\n+    int encoded_index = ResolutionErrorTable::encode_indy_index(_indy_index);\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,0 @@\n-  int decode_indy_index() const         { return ConstantPool::decode_invokedynamic_index(_indy_index); }\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  return cpcache()->resolved_indy_entry_at(ConstantPool::decode_invokedynamic_index(index));\n+  return cpcache()->resolved_indy_entry_at(index);\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -558,2 +558,1 @@\n-          int i = get_native_index_u4();\n-          indy_index = ConstantPool::decode_invokedynamic_index(i);\n+          indy_index = get_native_index_u4();\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -962,1 +962,1 @@\n-  pool->cache()->set_dynamic_call(info, pool->decode_invokedynamic_index(index));\n+  pool->cache()->set_dynamic_call(info, index);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1782,2 +1782,1 @@\n-  int index = pool->decode_invokedynamic_index(indy_index);\n-  int pool_index = pool->resolved_indy_entry_at(index)->constant_pool_index();\n+  int pool_index = pool->resolved_indy_entry_at(indy_index)->constant_pool_index();\n@@ -1786,1 +1785,1 @@\n-  BootstrapInfo bootstrap_specifier(pool, pool_index, index);\n+  BootstrapInfo bootstrap_specifier(pool, pool_index, indy_index);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-    Bytes::put_native_u4(p, ConstantPool::encode_invokedynamic_index(_invokedynamic_index));\n+    Bytes::put_native_u4(p, (u2)_invokedynamic_index);\n@@ -315,2 +315,1 @@\n-    int cache_index = ConstantPool::decode_invokedynamic_index(\n-                        Bytes::get_native_u4(p));\n+    int cache_index = Bytes::get_native_u4(p);\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2250,1 +2250,1 @@\n-        u4 index = cp->constant_pool()->decode_invokedynamic_index(Bytes::get_native_u4(pc+1)); \/\/ index is originally negative\n+        u4 index = Bytes::get_native_u4(pc+1);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -911,1 +911,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which))\n+C2V_VMENTRY_NULL(jobject, lookupAppendixInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which, jint opcode))\n@@ -913,1 +913,1 @@\n-  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, which);\n+  oop appendix_oop = ConstantPool::appendix_at_if_loaded(cp, which, Bytecodes::Code(opcode));\n@@ -1626,5 +1626,1 @@\n-C2V_VMENTRY_0(int, decodeIndyIndexToCPIndex, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint encoded_indy_index, jboolean resolve))\n-  if (!ConstantPool::is_invokedynamic_index(encoded_indy_index)) {\n-    JVMCI_THROW_MSG_0(IllegalStateException, err_msg(\"not an encoded indy index %d\", encoded_indy_index));\n-  }\n-\n+C2V_VMENTRY_0(int, decodeIndyIndexToCPIndex, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint indy_index, jboolean resolve))\n@@ -1633,1 +1629,0 @@\n-  int indy_index = cp->decode_invokedynamic_index(encoded_indy_index);\n@@ -1635,1 +1630,1 @@\n-    LinkResolver::resolve_invoke(callInfo, Handle(), cp, encoded_indy_index, Bytecodes::_invokedynamic, CHECK_0);\n+    LinkResolver::resolve_invoke(callInfo, Handle(), cp, indy_index, Bytecodes::_invokedynamic, CHECK_0);\n@@ -1668,1 +1663,1 @@\n-C2V_VMENTRY_0(jint, isResolvedInvokeHandleInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))\n+C2V_VMENTRY_0(jint, isResolvedInvokeHandleInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index, jint opcode))\n@@ -1702,2 +1697,2 @@\n-  if (cp->is_invokedynamic_index(index)) {\n-    if (cp->resolved_indy_entry_at(cp->decode_invokedynamic_index(index))->is_resolved()) {\n+  if ((Bytecodes::Code)opcode == Bytecodes::_invokedynamic) {\n+    if (cp->resolved_indy_entry_at(index)->is_resolved()) {\n@@ -3222,1 +3217,1 @@\n-  {CC \"lookupAppendixInPool\",                         CC \"(\" HS_CONSTANT_POOL2 \"I)\" OBJECTCONSTANT,                                         FN_PTR(lookupAppendixInPool)},\n+  {CC \"lookupAppendixInPool\",                         CC \"(\" HS_CONSTANT_POOL2 \"II)\" OBJECTCONSTANT,                                        FN_PTR(lookupAppendixInPool)},\n@@ -3234,1 +3229,1 @@\n-  {CC \"isResolvedInvokeHandleInPool\",                 CC \"(\" HS_CONSTANT_POOL2 \"I)I\",                                                       FN_PTR(isResolvedInvokeHandleInPool)},\n+  {CC \"isResolvedInvokeHandleInPool\",                 CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(isResolvedInvokeHandleInPool)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1859,3 +1859,2 @@\n-    int indy_index = cpool->decode_invokedynamic_index(index);\n-    if (cpool->resolved_indy_entry_at(indy_index)->is_resolved()) {\n-      return cpool->resolved_indy_entry_at(indy_index)->method();\n+    if (cpool->resolved_indy_entry_at(index)->is_resolved()) {\n+      return cpool->resolved_indy_entry_at(index)->method();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-bool ConstantPool::has_appendix_at_if_loaded(const constantPoolHandle& cpool, int which) {\n+bool ConstantPool::has_appendix_at_if_loaded(const constantPoolHandle& cpool, int which, Bytecodes::Code code) {\n@@ -657,3 +657,2 @@\n-  if (is_invokedynamic_index(which)) {\n-    int indy_index = decode_invokedynamic_index(which);\n-    return cpool->resolved_indy_entry_at(indy_index)->has_appendix();\n+  if (code == Bytecodes::_invokedynamic) {\n+    return cpool->resolved_indy_entry_at(which)->has_appendix();\n@@ -665,1 +664,1 @@\n-oop ConstantPool::appendix_at_if_loaded(const constantPoolHandle& cpool, int which) {\n+oop ConstantPool::appendix_at_if_loaded(const constantPoolHandle& cpool, int which, Bytecodes::Code code) {\n@@ -667,3 +666,2 @@\n-  if (is_invokedynamic_index(which)) {\n-    int indy_index = decode_invokedynamic_index(which);\n-    return cpool->resolved_reference_from_indy(indy_index);\n+  if (code == Bytecodes::_invokedynamic) {\n+    return cpool->resolved_reference_from_indy(which);\n@@ -676,1 +674,1 @@\n-bool ConstantPool::has_local_signature_at_if_loaded(const constantPoolHandle& cpool, int which) {\n+bool ConstantPool::has_local_signature_at_if_loaded(const constantPoolHandle& cpool, int which, Bytecodes::Code code) {\n@@ -678,3 +676,2 @@\n-  if (is_invokedynamic_index(which)) {\n-    int indy_index = decode_invokedynamic_index(which);\n-    return cpool->resolved_indy_entry_at(indy_index)->has_local_signature();\n+  if (code == Bytecodes::_invokedynamic) {\n+    return cpool->resolved_indy_entry_at(which)->has_local_signature();\n@@ -742,2 +739,0 @@\n-  guarantee(!ConstantPool::is_invokedynamic_index(index),\n-            \"an invokedynamic instruction does not have a klass\");\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -251,8 +251,0 @@\n-  \/\/ Invokedynamic indexes.\n-  \/\/ They must look completely different from normal indexes.\n-  \/\/ The main reason is that byte swapping is sometimes done on normal indexes.\n-  \/\/ Finally, it is helpful for debugging to tell the two apart.\n-  static bool is_invokedynamic_index(int i) { return (i < 0); }\n-  static int  decode_invokedynamic_index(int i) { assert(is_invokedynamic_index(i),  \"\"); return ~i; }\n-  static int  encode_invokedynamic_index(int i) { assert(!is_invokedynamic_index(i), \"\"); return ~i; }\n-\n@@ -764,3 +756,3 @@\n-  static bool       has_appendix_at_if_loaded      (const constantPoolHandle& this_cp, int which);\n-  static oop            appendix_at_if_loaded      (const constantPoolHandle& this_cp, int which);\n-  static bool has_local_signature_at_if_loaded     (const constantPoolHandle& this_cp, int which);\n+  static bool       has_appendix_at_if_loaded      (const constantPoolHandle& this_cp, int which, Bytecodes::Code code);\n+  static oop            appendix_at_if_loaded      (const constantPoolHandle& this_cp, int which, Bytecodes::Code code);\n+  static bool has_local_signature_at_if_loaded     (const constantPoolHandle& this_cp, int which, Bytecodes::Code code);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  return cache()->resolved_indy_entry_at(decode_invokedynamic_index(indy_index))->constant_pool_index();\n+  return cache()->resolved_indy_entry_at(indy_index)->constant_pool_index();\n","filename":"src\/hotspot\/share\/oops\/constantPool.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -573,2 +573,1 @@\n-  int encoded_index = ResolutionErrorTable::encode_indy_index(\n-                          ConstantPool::encode_invokedynamic_index(index));\n+  int encoded_index = ResolutionErrorTable::encode_indy_index(index);\n@@ -593,2 +592,1 @@\n-    int encoded_index = ResolutionErrorTable::encode_indy_index(\n-                          ConstantPool::encode_invokedynamic_index(index));\n+    int encoded_index = ResolutionErrorTable::encode_indy_index(index);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n-          pool_index = mh->constants()->resolved_indy_entry_at(mh->constants()->decode_invokedynamic_index(cpci))->constant_pool_index();\n+          pool_index = mh->constants()->resolved_indy_entry_at(cpci)->constant_pool_index();\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,3 +123,0 @@\n-    int indy_index_old = old_cp->decode_invokedynamic_index(index_old);\n-    int indy_index_new = new_cp->decode_invokedynamic_index(index_new);\n-\n@@ -134,2 +131,2 @@\n-    int cpi_old = old_cp->cache()->resolved_indy_entry_at(indy_index_old)->constant_pool_index();\n-    int cpi_new = new_cp->cache()->resolved_indy_entry_at(indy_index_new)->constant_pool_index();\n+    int cpi_old = old_cp->cache()->resolved_indy_entry_at(index_old)->constant_pool_index();\n+    int cpi_new = new_cp->cache()->resolved_indy_entry_at(index_new)->constant_pool_index();\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1886,4 +1886,0 @@\n-WB_ENTRY(jint, WB_ConstantPoolEncodeIndyIndex(JNIEnv* env, jobject wb, jint index))\n-  return ConstantPool::encode_invokedynamic_index(index);\n-WB_END\n-\n@@ -2847,2 +2843,0 @@\n-  {CC\"encodeConstantPoolIndyIndex0\",\n-      CC\"(I)I\",                      (void*)&WB_ConstantPoolEncodeIndyIndex},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.runtime.*;\n+import sun.jvm.hotspot.oops.ConstantPoolCache;\n+import sun.jvm.hotspot.oops.Method;\n@@ -40,6 +40,1 @@\n-      int index = getIndexU4();\n-      if (ConstantPool.isInvokedynamicIndex(index)) {\n-        return ConstantPool.decodeInvokedynamicIndex(index);\n-      } else {\n-        return index;\n-      }\n+      return getIndexU4();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeWithCPIndex.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -309,12 +309,0 @@\n-  public static boolean isInvokedynamicIndex(int i) { return (i < 0); }\n-\n-  public static int  decodeInvokedynamicIndex(int i) { Assert.that(isInvokedynamicIndex(i),  \"\"); return ~i; }\n-\n-  \/\/ The invokedynamic points at a CP cache entry.  This entry points back\n-  \/\/ at the original CP entry (CONSTANT_InvokeDynamic) and also (via f2) at an entry\n-  \/\/ in the resolved_references array (which provides the appendix argument).\n-  public int invokedynamicCPCacheIndex(int index) {\n-    Assert.that(isInvokedynamicIndex(index), \"should be a invokedynamic index\");\n-    return decodeInvokedynamicIndex(index);\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,4 +27,0 @@\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.interpreter.*;\n-import sun.jvm.hotspot.utilities.*;\n-import sun.jvm.hotspot.runtime.*;\n@@ -34,0 +30,8 @@\n+import sun.jvm.hotspot.interpreter.Bytecodes;\n+import sun.jvm.hotspot.oops.ConstantPool;\n+import sun.jvm.hotspot.oops.ConstantPoolCache;\n+import sun.jvm.hotspot.oops.Method;\n+import sun.jvm.hotspot.runtime.Bytes;\n+import sun.jvm.hotspot.runtime.VM;\n+import sun.jvm.hotspot.utilities.Assert;\n+\n@@ -136,2 +140,2 @@\n-                    int cpci = method.getNativeIntArg(bci + 1);\n-                    cpoolIndex = (short) cpCache.getIndyEntryAt(~cpci).getConstantPoolIndex();\n+                    int indy_index = method.getNativeIntArg(bci + 1);\n+                    cpoolIndex = (short) cpCache.getIndyEntryAt(indy_index).getConstantPoolIndex();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/jcore\/ByteCodeRewriter.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import static jdk.vm.ci.common.InitTimer.timer;\n-import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;\n-\n@@ -38,0 +35,1 @@\n+import static jdk.vm.ci.common.InitTimer.timer;\n@@ -40,0 +38,1 @@\n+import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;\n@@ -432,1 +431,1 @@\n-     * Converts the encoded indy index operand of an invokedynamic instruction\n+     * Converts the indy index operand of an invokedynamic instruction\n@@ -436,1 +435,0 @@\n-     * @throws IllegalArgumentException if {@code encoded_indy_index} is not an encoded indy index\n@@ -538,2 +536,2 @@\n-    int isResolvedInvokeHandleInPool(HotSpotConstantPool constantPool, int cpi) {\n-        return isResolvedInvokeHandleInPool(constantPool, constantPool.getConstantPoolPointer(), cpi);\n+    int isResolvedInvokeHandleInPool(HotSpotConstantPool constantPool, int cpi, int opcode) {\n+        return isResolvedInvokeHandleInPool(constantPool, constantPool.getConstantPoolPointer(), cpi, opcode);\n@@ -542,1 +540,1 @@\n-    private native int isResolvedInvokeHandleInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi);\n+    private native int isResolvedInvokeHandleInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi, int opcode);\n@@ -599,2 +597,2 @@\n-    HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, int which) {\n-        return lookupAppendixInPool(constantPool, constantPool.getConstantPoolPointer(), which);\n+    HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, int which, int opcode) {\n+        return lookupAppendixInPool(constantPool, constantPool.getConstantPoolPointer(), which, opcode);\n@@ -603,1 +601,1 @@\n-    private native HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which);\n+    private native HotSpotObjectConstantImpl lookupAppendixInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which, int opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,5 +25,0 @@\n-import static jdk.vm.ci.hotspot.CompilerToVM.compilerToVM;\n-import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;\n-import static jdk.vm.ci.hotspot.HotSpotVMConfig.config;\n-import static jdk.vm.ci.hotspot.UnsafeAccess.UNSAFE;\n-\n@@ -31,2 +26,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n@@ -38,0 +31,4 @@\n+import static jdk.vm.ci.hotspot.CompilerToVM.compilerToVM;\n+import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;\n+import static jdk.vm.ci.hotspot.HotSpotVMConfig.config;\n+import static jdk.vm.ci.hotspot.UnsafeAccess.UNSAFE;\n@@ -262,7 +259,0 @@\n-    \/**\n-     * See {@code ConstantPool::is_invokedynamic_index}.\n-     *\/\n-    private static boolean isInvokedynamicIndex(int index) {\n-        return index < 0;\n-    }\n-\n@@ -711,9 +701,1 @@\n-\n-        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n-          if (!isInvokedynamicIndex(rawIndex)) {\n-              throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n-          }\n-          return compilerToVM().lookupAppendixInPool(this, rawIndex);\n-        } else {\n-          return compilerToVM().lookupAppendixInPool(this, rawIndex);\n-        }\n+        return compilerToVM().lookupAppendixInPool(this, rawIndex, opcode);\n@@ -738,10 +720,1 @@\n-        int which; \/\/ interpretation depends on opcode\n-        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n-            if (!isInvokedynamicIndex(rawIndex)) {\n-                throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n-            }\n-            which = rawIndex;\n-        } else {\n-            which = rawIndex;\n-        }\n-        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, which, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n+        final HotSpotResolvedJavaMethod method = compilerToVM().lookupMethodInPool(this, rawIndex, (byte) opcode, (HotSpotResolvedJavaMethodImpl) caller);\n@@ -752,2 +725,2 @@\n-            String name = compilerToVM().lookupNameInPool(this, which, opcode);\n-            HotSpotSignature signature = new HotSpotSignature(runtime(), compilerToVM().lookupSignatureInPool(this, which, opcode));\n+            String name = compilerToVM().lookupNameInPool(this, rawIndex, opcode);\n+            HotSpotSignature signature = new HotSpotSignature(runtime(), compilerToVM().lookupSignatureInPool(this, rawIndex, opcode));\n@@ -757,1 +730,1 @@\n-                final int klassIndex = getKlassRefIndexAt(which, opcode);\n+                final int klassIndex = getKlassRefIndexAt(rawIndex, opcode);\n@@ -856,7 +829,2 @@\n-        if (isInvokedynamicIndex(rawIndex)) {\n-            if (opcode != Bytecodes.INVOKEDYNAMIC) {\n-                throw new IllegalArgumentException(\"expected INVOKEDYNAMIC at \" + rawIndex + \", got \" + opcode);\n-            }\n-            return compilerToVM().decodeIndyIndexToCPIndex(this, rawIndex, false);\n-        } else {\n-          throw new IllegalArgumentException(\"expected a raw index for INVOKEDYNAMIC but got \" + rawIndex);\n+        if (opcode != Bytecodes.INVOKEDYNAMIC) {\n+            throw new IllegalArgumentException(\"expected INVOKEDYNAMIC at \" + rawIndex + \", got \" + opcode);\n@@ -864,0 +832,1 @@\n+        return compilerToVM().decodeIndyIndexToCPIndex(this, rawIndex, false);\n@@ -887,4 +856,0 @@\n-                \/\/ invokedynamic indices are different from constant pool cache indices\n-                if (!isInvokedynamicIndex(rawIndex)) {\n-                    throw new IllegalArgumentException(\"must use invokedynamic index but got \" + rawIndex);\n-                }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":12,"deletions":47,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -147,2 +147,2 @@\n-            ConstantPool constantPool, int cpi) {\n-        return CTVM.lookupAppendixInPool((HotSpotConstantPool) constantPool, cpi);\n+            ConstantPool constantPool, int cpi, int opcode) {\n+        return CTVM.lookupAppendixInPool((HotSpotConstantPool) constantPool, cpi, opcode);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                        return ~indy_index;\n+                        return indy_index;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ConstantPoolTestsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}