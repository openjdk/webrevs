{"files":[{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This is pluggable context used by test for 6398614\n- *\/\n-\n-import javax.script.*;\n-import java.util.*;\n-import java.io.*;\n-\n-public class MyContext  implements ScriptContext {\n-\n-    public static final int APP_SCOPE = 125;\n-\n-    protected Writer writer;\n-\n-    protected Writer errorWriter;\n-\n-    protected Reader reader;\n-\n-\n-    protected Bindings appScope;\n-    protected Bindings engineScope;\n-    protected Bindings globalScope;\n-\n-\n-    public MyContext() {\n-        appScope = new SimpleBindings();\n-        engineScope = new SimpleBindings();\n-        globalScope = null;\n-        reader = new InputStreamReader(System.in);\n-        writer = new PrintWriter(System.out , true);\n-        errorWriter = new PrintWriter(System.err, true);\n-    }\n-\n-    public void setBindings(Bindings bindings, int scope) {\n-\n-        switch (scope) {\n-            case APP_SCOPE:\n-                if (bindings == null) {\n-                    throw new NullPointerException(\"App scope cannot be null.\");\n-                }\n-                appScope = bindings;\n-                break;\n-\n-            case ENGINE_SCOPE:\n-                if (bindings == null) {\n-                    throw new NullPointerException(\"Engine scope cannot be null.\");\n-                }\n-                engineScope = bindings;\n-                break;\n-            case GLOBAL_SCOPE:\n-                globalScope = bindings;\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Invalid scope value.\");\n-        }\n-    }\n-\n-    public Object getAttribute(String name) {\n-        if (engineScope.containsKey(name)) {\n-            return getAttribute(name, ENGINE_SCOPE);\n-        } else if (appScope.containsKey(name)) {\n-            return getAttribute(name, APP_SCOPE);\n-        } else if (globalScope != null && globalScope.containsKey(name)) {\n-            return getAttribute(name, GLOBAL_SCOPE);\n-        }\n-\n-        return null;\n-    }\n-\n-    public Object getAttribute(String name, int scope) {\n-\n-        switch (scope) {\n-            case APP_SCOPE:\n-                return appScope.get(name);\n-\n-            case ENGINE_SCOPE:\n-                return engineScope.get(name);\n-\n-            case GLOBAL_SCOPE:\n-                if (globalScope != null) {\n-                    return globalScope.get(name);\n-                }\n-                return null;\n-\n-            default:\n-                throw new IllegalArgumentException(\"Illegal scope value.\");\n-        }\n-    }\n-\n-    public Object removeAttribute(String name, int scope) {\n-\n-        switch (scope) {\n-            case APP_SCOPE:\n-                if (getBindings(APP_SCOPE) != null) {\n-                    return getBindings(APP_SCOPE).remove(name);\n-                }\n-                return null;\n-\n-\n-            case ENGINE_SCOPE:\n-                if (getBindings(ENGINE_SCOPE) != null) {\n-                    return getBindings(ENGINE_SCOPE).remove(name);\n-                }\n-                return null;\n-\n-            case GLOBAL_SCOPE:\n-                if (getBindings(GLOBAL_SCOPE) != null) {\n-                    return getBindings(GLOBAL_SCOPE).remove(name);\n-                }\n-                return null;\n-\n-            default:\n-                throw new IllegalArgumentException(\"Illegal scope value.\");\n-        }\n-    }\n-\n-    public void setAttribute(String name, Object value, int scope) {\n-\n-        switch (scope) {\n-            case APP_SCOPE:\n-                appScope.put(name, value);\n-                return;\n-\n-            case ENGINE_SCOPE:\n-                engineScope.put(name, value);\n-                return;\n-\n-            case GLOBAL_SCOPE:\n-                if (globalScope != null) {\n-                    globalScope.put(name, value);\n-                }\n-                return;\n-\n-            default:\n-                throw new IllegalArgumentException(\"Illegal scope value.\");\n-        }\n-    }\n-\n-    public Writer getWriter() {\n-        return writer;\n-    }\n-\n-    public Reader getReader() {\n-        return reader;\n-    }\n-\n-    public void setReader(Reader reader) {\n-        this.reader = reader;\n-    }\n-\n-    public void setWriter(Writer writer) {\n-        this.writer = writer;\n-    }\n-\n-    public Writer getErrorWriter() {\n-        return errorWriter;\n-    }\n-\n-    public void setErrorWriter(Writer writer) {\n-        this.errorWriter = writer;\n-    }\n-\n-    public int getAttributesScope(String name) {\n-        if (engineScope.containsKey(name)) {\n-            return ENGINE_SCOPE;\n-        } else if (appScope.containsKey(name)) {\n-            return APP_SCOPE;\n-        } else if (globalScope != null && globalScope.containsKey(name)) {\n-            return GLOBAL_SCOPE;\n-        } else {\n-            return -1;\n-        }\n-    }\n-\n-    public Bindings getBindings(int scope) {\n-        if (scope == ENGINE_SCOPE) {\n-            return engineScope;\n-        } else if (scope == APP_SCOPE) {\n-            return appScope;\n-        } else if (scope == GLOBAL_SCOPE) {\n-            return globalScope;\n-        } else {\n-            throw new IllegalArgumentException(\"Illegal scope value.\");\n-        }\n-    }\n-\n-    public List<Integer> getScopes() {\n-        return scopes;\n-    }\n-\n-    private static List<Integer> scopes;\n-    static {\n-        scopes = new ArrayList<Integer>(3);\n-        scopes.add(ENGINE_SCOPE);\n-        scopes.add(APP_SCOPE);\n-        scopes.add(GLOBAL_SCOPE);\n-        scopes = Collections.unmodifiableList(scopes);\n-    }\n-}\n","filename":"test\/jdk\/javax\/script\/MyContext.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"}]}