{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      VirtualMemoryTracker::Locker l;\n@@ -153,1 +153,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      VirtualMemoryTracker::Locker l;\n@@ -164,1 +164,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      VirtualMemoryTracker::Locker l;\n@@ -172,1 +172,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -180,1 +180,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -189,1 +189,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -198,1 +198,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -212,1 +212,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      VirtualMemoryTracker::Locker l;\n@@ -221,1 +221,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -142,9 +142,0 @@\n-\/\/ Same as MutexLocker but can be used during VM init.\n-\/\/ Performs no action if given a null mutex or with detached threads.\n-class NmtVirtualMemoryLocker: public ConditionalMutexLocker {\n-public:\n-    NmtVirtualMemoryLocker() :\n-            ConditionalMutexLocker(NmtVirtualMemory_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n-    }\n-};\n-\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  VirtualMemoryTracker::Locker l;\n@@ -65,1 +65,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+PlatformMutex* VirtualMemoryTracker::Locker::_lock = nullptr;\n+Thread* VirtualMemoryTracker::Locker::_owner = nullptr;\n+\n@@ -325,0 +328,6 @@\n+\n+void VirtualMemoryTracker::Locker::initialize() {\n+  _lock = new PlatformMutex();\n+  _owner = nullptr;\n+}\n+\n@@ -327,0 +336,1 @@\n+  Locker::initialize();\n@@ -623,1 +633,1 @@\n-    assert_lock_strong(NmtVirtualMemory_lock);\n+    assert(VirtualMemoryTracker::Locker::owned_by(Thread::current_or_null_safe()), \"must be\");\n@@ -664,1 +674,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  Locker l;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -381,0 +381,31 @@\n+  class Locker {\n+    static PlatformMutex* _lock;\n+    static Thread* _owner;\n+  public:\n+    static void initialize();\n+\n+    Locker(Thread* owner = Thread::current_or_null_safe()) {\n+      assert(_lock != nullptr, \"must\");\n+      assert(_owner == nullptr, \"lock is not recursive\");\n+      _lock->lock();\n+      _owner = owner;\n+    }\n+    ~Locker() {\n+      _lock->unlock();\n+      _owner = nullptr;\n+    }\n+\n+    static bool owned_by(Thread* thr) {\n+      return thr == _owner;\n+    }\n+\n+    static bool is_initialized() {\n+      return _lock != nullptr;\n+    }\n+\n+    static void force_unlock() {\n+      assert(Thread::current_or_null_safe() == _owner, \"must own the lock to force unlock\");\n+      _lock->unlock();\n+    }\n+  };\n+\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -297,1 +296,1 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , service-5); \/\/ Must be lower than NmtVirtualMemory_lock due to MemTracker::print_containing_region\n+  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , service-5);\n@@ -301,1 +300,0 @@\n-  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2169,1 +2169,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -2191,1 +2191,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -2276,1 +2276,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n@@ -2315,1 +2315,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    VirtualMemoryTracker::Locker l;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,1 +720,2 @@\n-  if (MemTracker::enabled() && NmtVirtualMemory_lock != nullptr && NmtVirtualMemory_lock->owned_by_self()) {\n+  if (MemTracker::enabled() && VirtualMemoryTracker::Locker::is_initialized() &&\n+      VirtualMemoryTracker::Locker::owned_by(Thread::current_or_null_safe())) {\n@@ -722,1 +723,1 @@\n-    NmtVirtualMemory_lock->unlock();\n+    VirtualMemoryTracker::Locker::force_unlock();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}