{"files":[{"patch":"@@ -159,1 +159,0 @@\n-        java.se, \/\/ for ParticipatesInPreview\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import jdk.internal.javac.ParticipatesInPreview;\n-\n@@ -43,1 +41,0 @@\n-@ParticipatesInPreview\n","filename":"src\/java.se\/share\/classes\/module-info.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            return String.format(\"ACC_%s (0x%04x\", name(), value);\n+            return String.format(\"ACC_%s (0x%04x)\", name(), value);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Directive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,3 @@\n-                .anyMatch(ed -> ed.modules.contains(m));\n+                .anyMatch(ed -> ed.modules.contains(m)) ||\n+               \/\/the specification lists the java.se module as participating in preview:\n+               m.name == names.java_se;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3776,1 +3776,1 @@\n-    bad requires flag: {0}\n+    invalid flag for \"requires java.base\": {0}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    public final Name java_se;\n@@ -318,0 +319,1 @@\n+        java_se = fromString(\"java.se\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8328481 8332236 8332890\n+ * @bug 8328481 8332236 8332890 8344647\n@@ -36,1 +36,1 @@\n-*\/\n+ *\/\n@@ -832,0 +832,1 @@\n+    @Test\n@@ -922,0 +923,46 @@\n+\n+    @Test \/\/JDK-8344647\n+    public void testJavaBaseOverride(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path javaBaseClasses = current.resolve(\"javaBaseClasses\");\n+        Path javaBase = src.resolve(\"java.base\");\n+        tb.writeJavaFiles(javaBase,\n+                          \"\"\"\n+                          module java.base {\n+                             exports java.lang;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package java.lang;\n+                          public class Object {}\n+                          \"\"\");\n+\n+        Files.createDirectories(javaBaseClasses);\n+\n+        new JavacTask(tb)\n+                .options(\"--patch-module\", \"java.base=\" + src.toString())\n+                .outdir(javaBaseClasses)\n+                .files(tb.findJavaFiles(src))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path test = current.resolve(\"test\");\n+        tb.writeJavaFiles(test,\n+                          \"\"\"\n+                          module test {\n+                              requires java.se;\n+                          }\n+                          \"\"\");\n+\n+        Path classes = current.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+                .options(\"--patch-module\", \"java.base=\" + javaBaseClasses.toString())\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(test))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll();\n+    }\n","filename":"test\/langtools\/tools\/javac\/ImportModule.java","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -809,1 +809,1 @@\n-            \"- compiler.err.cant.access: m.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.bad.requires.flag: ACC_TRANSITIVE (0x0020))\",\n+            \"- compiler.err.cant.access: m.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.bad.requires.flag: ACC_TRANSITIVE (0x0020)))\",\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}