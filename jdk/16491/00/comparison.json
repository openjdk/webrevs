{"files":[{"patch":"@@ -318,1 +318,4 @@\n-        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n+        \/\/ A year that is a multiple of 100, 200 and 300 is not divisible by 16, but 400 is.\n+        \/\/ So for a year that's divisible by 4, checking that it's also divisible by 16\n+        \/\/ is sufficient to determine it must be a leap year.\n+        return (year & 15) == 0 ? (year & 3) == 0 : (year & 3) == 0 && year % 100 != 0;\n","filename":"src\/java.base\/share\/classes\/java\/time\/Year.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -478,1 +478,1 @@\n-        return ((prolepticYear & 3) == 0) && ((prolepticYear % 100) != 0 || (prolepticYear % 400) == 0);\n+        return Year.isLeap(prolepticYear);\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/IsoChronology.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.time;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.Year;\n+import java.time.chrono.IsoChronology;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+\/**\n+ * Examine Year.leapYear-related operations\n+ *\/\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Thread)\n+public class LeapYearBench {\n+\n+    private long[] years;\n+\n+    @Setup\n+    public void createInstants() {\n+        \/\/ Large enough number of years to guarantee that the distribution of\n+        \/\/ leap years is reasonably realistic\n+        years = new long[2048];\n+        final Random random = new Random(0);\n+        for (int i = 0; i < years.length; i++) {\n+            years[i] = random.nextLong(2000) + 2000;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void isLeapYear(Blackhole bh) {\n+        for (long year : years) {\n+            bh.consume(Year.isLeap(year));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void isLeapYearChrono(Blackhole bh) {\n+        for (long year : years) {\n+            bh.consume(IsoChronology.INSTANCE.isLeapYear(year));\n+        }\n+    }\n+\n+    public static boolean isLeapNeriSchneider(long year) {\n+        int d = year % 100 != 0 ? 4 : 16;\n+        return (year & (d - 1)) == 0;\n+    }\n+\n+    @Benchmark\n+    public void isLeapYearNS(Blackhole bh) {\n+        for (long year : years) {\n+            bh.consume(isLeapNeriSchneider(year));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/LeapYearBench.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}