{"files":[{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.vm.ci.hotspot;\n-\n-import jdk.vm.ci.meta.JavaType;\n-import jdk.vm.ci.runtime.JVMCICompilerFactory;\n-\n-\/**\n- * HotSpot extensions to {@link JVMCICompilerFactory}.\n- *\/\n-public abstract class HotSpotJVMCICompilerFactory implements JVMCICompilerFactory {\n-\n-    public enum CompilationLevelAdjustment {\n-        \/**\n-         * No adjustment.\n-         *\/\n-        None,\n-\n-        \/**\n-         * Adjust based on declaring class of method.\n-         *\/\n-        ByHolder,\n-\n-        \/**\n-         * Adjust based on declaring class, name and signature of method.\n-         *\/\n-        ByFullSignature\n-    }\n-\n-    \/**\n-     * Determines if this object may want to adjust the compilation level for a method that is being\n-     * scheduled by the VM for compilation.\n-     *\/\n-    public CompilationLevelAdjustment getCompilationLevelAdjustment() {\n-        return CompilationLevelAdjustment.None;\n-    }\n-\n-    public enum CompilationLevel {\n-        None,\n-        Simple,\n-        LimitedProfile,\n-        FullProfile,\n-        FullOptimization\n-    }\n-\n-    \/**\n-     * Potentially modifies the compilation level currently selected by the VM compilation policy\n-     * for a method.\n-     *\n-     * @param declaringClass the class in which the method is declared. This value is either a\n-     *            {@code Class} instance or a {@code String} representing the\n-     *            {@link JavaType#toJavaName() name} of the class.\n-     * @param name the name of the method or {@code null} depending on the value that was returned\n-     *            by {@link #getCompilationLevelAdjustment()}\n-     * @param signature the signature of the method or {@code null} depending on the value that was\n-     *            returned by {@link #getCompilationLevelAdjustment()}\n-     * @param isOsr specifies if the compilation being scheduled in an OSR compilation\n-     * @param level the compilation level currently selected by the VM compilation policy\n-     * @return the compilation level to use for the compilation being scheduled (must be a valid\n-     *         {@code CompLevel} enum value)\n-     *\/\n-    public CompilationLevel adjustCompilationLevel(Object declaringClass, String name, String signature, boolean isOsr, CompilationLevel level) {\n-        throw new InternalError(getClass().getName() + \" must override adjustCompilationLevel(...) since it returned a value other than \" + CompilationLevel.class.getName() + \".\" +\n-                        CompilationLevel.None + \" from getCompilationLevelAdjustment()\");\n-    }\n-}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCICompilerFactory.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -26,1 +26,0 @@\n-import static jdk.vm.ci.hotspot.HotSpotJVMCICompilerFactory.CompilationLevelAdjustment.None;\n@@ -471,1 +470,0 @@\n-    private final HotSpotJVMCICompilerFactory hsCompilerFactory;\n@@ -575,12 +573,0 @@\n-        if (compilerFactory instanceof HotSpotJVMCICompilerFactory) {\n-            hsCompilerFactory = (HotSpotJVMCICompilerFactory) compilerFactory;\n-            if (hsCompilerFactory.getCompilationLevelAdjustment() != None) {\n-                String name = HotSpotJVMCICompilerFactory.class.getName();\n-                String msg = String.format(\"%s.getCompilationLevelAdjustment() is no longer supported. \" +\n-                                \"Use %s.excludeFromJVMCICompilation() instead.\", name, name);\n-                throw new UnsupportedOperationException(msg);\n-            }\n-        } else {\n-            hsCompilerFactory = null;\n-        }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}