{"files":[{"patch":"@@ -67,0 +67,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -293,1 +294,1 @@\n-    private final ConcurrentHashMap<String, Object> parallelLockMap;\n+    private @Stable ConcurrentHashMap<String, Object> parallelLockMap;\n@@ -296,1 +297,1 @@\n-    private final ConcurrentHashMap<String, Certificate[]> package2certs;\n+    private @Stable ConcurrentHashMap<String, Certificate[]> package2certs;\n@@ -325,1 +326,1 @@\n-    private final ConcurrentHashMap<String, NamedPackage> packages\n+    private @Stable ConcurrentHashMap<String, NamedPackage> packages\n@@ -2575,1 +2576,5 @@\n-     * Called by the VM, during -Xshare:dump\n+     * Called only by the VM, during -Xshare:dump.\n+     *\n+     * @implNote This is done while the JVM is running in single-threaded mode,\n+     * and at the very end of Java bytecode execution. We know that no more classes\n+     * will be loaded and none of the fields modified by this method will be used again.\n@@ -2579,1 +2584,1 @@\n-            parallelLockMap.clear();\n+            parallelLockMap = new ConcurrentHashMap<>();\n@@ -2581,3 +2586,4 @@\n-        packages.clear();\n-        package2certs.clear();\n-        classes.clear();\n+        packages = new ConcurrentHashMap<>();\n+        package2certs = new ConcurrentHashMap<>();\n+\tclasses.clear();\n+        classes.trimToSize();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"}]}