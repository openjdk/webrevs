{"files":[{"patch":"@@ -70,0 +70,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -301,1 +302,1 @@\n-    private final ConcurrentHashMap<String, Object> parallelLockMap;\n+    private @Stable ConcurrentHashMap<String, Object> parallelLockMap;\n@@ -304,1 +305,1 @@\n-    private final ConcurrentHashMap<String, Certificate[]> package2certs;\n+    private @Stable ConcurrentHashMap<String, Certificate[]> package2certs;\n@@ -311,1 +312,1 @@\n-    private final ArrayList<Class<?>> classes = new ArrayList<>();\n+    private @Stable ArrayList<Class<?>> classes = new ArrayList<>();\n@@ -333,1 +334,1 @@\n-    private final ConcurrentHashMap<String, NamedPackage> packages\n+    private @Stable ConcurrentHashMap<String, NamedPackage> packages\n@@ -2732,1 +2733,5 @@\n-     * Called by the VM, during -Xshare:dump\n+     * Called only by the VM, during -Xshare:dump.\n+     *\n+     * @implNote This is done while the JVM is running in single-threaded mode,\n+     * and at the very end of Java bytecode execution. We know that no more classes\n+     * will be loaded and none of the fields modified by this method will be used again.\n@@ -2736,1 +2741,1 @@\n-            parallelLockMap.clear();\n+            parallelLockMap = new ConcurrentHashMap<>();\n@@ -2738,3 +2743,3 @@\n-        packages.clear();\n-        package2certs.clear();\n-        classes.clear();\n+        packages = new ConcurrentHashMap<>();\n+        package2certs = new ConcurrentHashMap<>();\n+        classes = new ArrayList<>();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}