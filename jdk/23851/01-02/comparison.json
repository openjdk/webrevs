{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import compiler.lib.generators.Generator;\n@@ -26,0 +27,1 @@\n+import compiler.lib.generators.RestrictableGenerator;\n@@ -42,0 +44,8 @@\n+\n+    public static final RestrictableGenerator<Integer> GEN_CHAR = Generators.G.safeRestrict(Generators.G.ints(), Character.MIN_VALUE, Character.MAX_VALUE);\n+    public static final RestrictableGenerator<Integer> GEN_SHORT = Generators.G.safeRestrict(Generators.G.ints(), Short.MIN_VALUE, Short.MAX_VALUE);\n+    public static final RestrictableGenerator<Long> GEN_LONG = Generators.G.longs();\n+    public static final RestrictableGenerator<Integer> GEN_INT = Generators.G.ints();\n+    public static final Generator<Float> GEN_FLOAT = Generators.G.floats();\n+    public static final Generator<Double> GEN_DOUBLE = Generators.G.doubles();\n+\n@@ -49,0 +59,2 @@\n+        \"testS1\",\n+        \"testUS1\",\n@@ -53,1 +65,1 @@\n-        int ai = Generators.G.ints().next();\n+        int ai = GEN_INT.next();\n@@ -63,1 +75,1 @@\n-        long al = Generators.G.longs().next();\n+        long al = GEN_LONG.next();\n@@ -73,1 +85,21 @@\n-        float af = Generators.G.floats().next();\n+        short as = GEN_SHORT.next().shortValue();\n+\n+        short mins = Short.MIN_VALUE;\n+        short maxs = Short.MAX_VALUE;\n+\n+        assertResultS((short) 0);\n+        assertResultS(as);\n+        assertResultS(mins);\n+        assertResultS(maxs);\n+\n+        char ac = (char) GEN_CHAR.next().intValue();\n+\n+        char minc = Character.MIN_VALUE;\n+        char maxc = Character.MAX_VALUE;\n+\n+        assertResultUS((char) 0);\n+        assertResultUS(ac);\n+        assertResultUS(minc);\n+        assertResultUS(maxc);\n+\n+        float af = GEN_FLOAT.next();\n@@ -83,1 +115,1 @@\n-        double ad = Generators.G.doubles().next();\n+        double ad = GEN_DOUBLE.next();\n@@ -107,0 +139,10 @@\n+    @DontCompile\n+    public void assertResultS(short a) {\n+        Asserts.assertEQ(Short.reverseBytes(Short.reverseBytes(a)), testS1(a));\n+    }\n+\n+    @DontCompile\n+    public void assertResultUS(char a) {\n+        Asserts.assertEQ(Character.reverseBytes(Character.reverseBytes(a)), testUS1(a));\n+    }\n+\n@@ -141,0 +183,12 @@\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S})\n+    public short testS1(short x) {\n+        return Short.reverseBytes(Short.reverseBytes(x));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US})\n+    public char testUS1(char x) {\n+        return Character.reverseBytes(Character.reverseBytes(x));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/InvolutionIdentityTests.java","additions":58,"deletions":4,"binary":false,"changes":62,"status":"modified"}]}