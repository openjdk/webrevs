{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2149,12 +2149,5 @@\n-    \/**\n-     *  Selects all rows, columns, and cells in the table.\n-     *\/\n-    public void selectAll() {\n-        \/\/ If I'm currently editing, then I should stop editing\n-        if (isEditing()) {\n-            removeEditor();\n-        }\n-        if (getRowCount() > 0 && getColumnCount() > 0) {\n-            int oldLead;\n-            int oldAnchor;\n-            ListSelectionModel selModel;\n+    private void selectRows(int rowCount) {\n+        ListSelectionModel selModel = selectionModel;\n+        selModel.setValueIsAdjusting(true);\n+        int oldLead = getAdjustedIndex(selModel.getLeadSelectionIndex(), true);\n+        int oldAnchor = getAdjustedIndex(selModel.getAnchorSelectionIndex(), true);\n@@ -2162,4 +2155,1 @@\n-            selModel = selectionModel;\n-            selModel.setValueIsAdjusting(true);\n-            oldLead = getAdjustedIndex(selModel.getLeadSelectionIndex(), true);\n-            oldAnchor = getAdjustedIndex(selModel.getAnchorSelectionIndex(), true);\n+        setRowSelectionInterval(0, rowCount - 1);\n@@ -2167,1 +2157,2 @@\n-            setRowSelectionInterval(0, getRowCount()-1);\n+        \/\/ this is done to restore the anchor and lead\n+        SwingUtilities2.setLeadAnchorWithoutSelection(selModel, oldLead, oldAnchor);\n@@ -2169,2 +2160,2 @@\n-            \/\/ this is done to restore the anchor and lead\n-            SwingUtilities2.setLeadAnchorWithoutSelection(selModel, oldLead, oldAnchor);\n+        selModel.setValueIsAdjusting(false);\n+    }\n@@ -2172,1 +2163,5 @@\n-            selModel.setValueIsAdjusting(false);\n+    private void selectColumns(int columnCount) {\n+        ListSelectionModel selModel = columnModel.getSelectionModel();\n+        selModel.setValueIsAdjusting(true);\n+        int oldLead = getAdjustedIndex(selModel.getLeadSelectionIndex(), false);\n+        int oldAnchor = getAdjustedIndex(selModel.getAnchorSelectionIndex(), false);\n@@ -2174,4 +2169,1 @@\n-            selModel = columnModel.getSelectionModel();\n-            selModel.setValueIsAdjusting(true);\n-            oldLead = getAdjustedIndex(selModel.getLeadSelectionIndex(), false);\n-            oldAnchor = getAdjustedIndex(selModel.getAnchorSelectionIndex(), false);\n+        setColumnSelectionInterval(0, columnCount - 1);\n@@ -2179,1 +2171,2 @@\n-            setColumnSelectionInterval(0, getColumnCount()-1);\n+        \/\/ this is done to restore the anchor and lead\n+        SwingUtilities2.setLeadAnchorWithoutSelection(selModel, oldLead, oldAnchor);\n@@ -2181,2 +2174,2 @@\n-            \/\/ this is done to restore the anchor and lead\n-            SwingUtilities2.setLeadAnchorWithoutSelection(selModel, oldLead, oldAnchor);\n+        selModel.setValueIsAdjusting(false);\n+    }\n@@ -2184,1 +2177,20 @@\n-            selModel.setValueIsAdjusting(false);\n+    \/**\n+     *  Selects all rows, columns, and cells in the table.\n+     *\/\n+    public void selectAll() {\n+        int rowCount = getRowCount();\n+        int columnCount = getColumnCount();\n+\n+        \/\/ If I'm currently editing, then I should stop editing\n+        if (isEditing()) {\n+            removeEditor();\n+        }\n+        if (rowCount > 0 && columnCount > 0) {\n+            selectRows(rowCount);\n+            selectColumns(columnCount);\n+        } else if (rowCount > 0 && columnCount == 0\n+                   && getRowSelectionAllowed()) {\n+            selectRows(rowCount);\n+        } else if (columnCount > 0  && rowCount == 0\n+                   && getColumnSelectionAllowed()) {\n+            selectColumns(columnCount);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":41,"deletions":29,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4466930\n+ * @key headful\n+ * @summary Verifies selectAll selects all available rows and columns\n+ *          irrespective of presence of columns and rows respectively\n+ * @run main TestTableSelectAll\n+ *\/\n+\n+import javax.swing.JTable;\n+import javax.swing.table.DefaultTableModel;\n+\n+public class TestTableSelectAll {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        testColumnSelect();\n+        testRowSelect();\n+    }\n+\n+    private static void testColumnSelect() {\n+        boolean colSelNoRow;\n+        boolean colSelWithRow;\n+\n+        \/\/ TableModel with no rows, but 10 columns\n+        DefaultTableModel data = new DefaultTableModel(0, 10);\n+\n+        JTable table = new JTable(data);\n+\n+        \/\/ columns can be selected\n+        table.setColumnSelectionAllowed(true);\n+        table.setRowSelectionAllowed(false);\n+\n+        table.selectAll();\n+\n+        colSelNoRow = table.isColumnSelected(0);\n+\n+        \/\/ After selectAll(), I would expect all columns to be selected, no matter\n+        \/\/ whether there are rows or not.\n+        System.out.println(\"Column 0 is selected: \" + colSelNoRow);\n+\n+        data.addRow(new Object[0]);\n+\n+        table.selectAll();\n+\n+        colSelWithRow = table.isColumnSelected(0);\n+        System.out.println(\"Column 0 is selected: \" + colSelWithRow);\n+\n+        if (!(colSelNoRow && colSelWithRow)) {\n+            throw new RuntimeException(\"selectAll did not select column\");\n+        }\n+    }\n+\n+    private static void testRowSelect() {\n+        boolean rowSelNoColumn;\n+        boolean rowSelWithColumn;\n+\n+        \/\/ TableModel with 10 rows, but no columns\n+        DefaultTableModel data = new DefaultTableModel(10, 0);\n+\n+        JTable table = new JTable(data);\n+\n+        \/\/ rows can be selected\n+        table.setRowSelectionAllowed(true);\n+        table.setColumnSelectionAllowed(false);\n+\n+        table.selectAll();\n+\n+        rowSelNoColumn = table.isRowSelected(0);\n+\n+        \/\/ After selectAll(), I would expect all rows to be selected, no matter\n+        \/\/ whether there are columns or not.\n+        System.out.println(\"Row 0 is selected: \" + rowSelNoColumn);\n+\n+        data.addColumn(new Object[0]);\n+        table.selectAll();\n+\n+        rowSelWithColumn = table.isRowSelected(0);\n+        System.out.println(\"Row 0 is selected: \" + rowSelWithColumn);\n+\n+        if (!(rowSelNoColumn && rowSelWithColumn)) {\n+            throw new RuntimeException(\"selectAll did not select row\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/TestTableSelectAll.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}