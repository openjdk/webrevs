{"files":[{"patch":"@@ -47,1 +47,2 @@\n-  return CountLeadingZerosImpl<U>{}(static_cast<U>(x));\n+  using P = std::conditional_t<(sizeof(U) < sizeof(unsigned int)), unsigned int, U>;\n+  return CountLeadingZerosImpl<U>{}(static_cast<P>(static_cast<U>(x)));\n@@ -57,2 +58,0 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned int.\n-\n@@ -86,1 +85,3 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned long.\n+  inline unsigned operator()(unsigned int x) const {\n+    return (*this)(static_cast<unsigned long>(x));\n+  }\n@@ -106,1 +107,3 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned long.\n+  inline unsigned operator()(unsigned int x) const {\n+    return (*this)(static_cast<unsigned long>(x));\n+  }\n","filename":"src\/hotspot\/share\/utilities\/count_leading_zeros.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-  return CountTrailingZerosImpl<U>{}(static_cast<U>(x));\n+  using P = std::conditional_t<(sizeof(U) < sizeof(unsigned int)), unsigned int, U>;\n+  return CountTrailingZerosImpl<U>{}(static_cast<P>(static_cast<U>(x)));\n@@ -57,2 +58,0 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned int.\n-\n@@ -86,1 +85,3 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned long.\n+  inline unsigned operator()(unsigned int x) const {\n+    return (*this)(static_cast<unsigned long>(x));\n+  }\n","filename":"src\/hotspot\/share\/utilities\/count_trailing_zeros.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-  return PopulationCountImpl<U>{}(static_cast<U>(x));\n+  using P = std::conditional_t<(sizeof(U) < sizeof(unsigned int)), unsigned int, U>;\n+  return PopulationCountImpl<U>{}(static_cast<P>(static_cast<U>(x)));\n@@ -54,1 +55,2 @@\n-  inline unsigned operator()(T x) const {\n+  template <typename U>\n+  inline unsigned operator()(U x) const {\n@@ -90,2 +92,0 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned int.\n-\n@@ -135,1 +135,3 @@\n-  \/\/ Smaller integer types will be handled via integer promotion to unsigned long.\n+  inline unsigned operator()(unsigned int x) const {\n+    return (*this)(static_cast<unsigned long>(x));\n+  }\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}