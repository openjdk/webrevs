{"files":[{"patch":"@@ -63,1 +63,1 @@\n-    private static final int PageSize = 1024 * 4;\n+    private static final int PAGE_SIZE = 1024 * 4;\n@@ -86,4 +86,4 @@\n-    private static long reserve (long size           ) { return WhiteBoxHolder.WB.NMTReserveMemory (size                           ); }\n-    private static void commit  (long base, int pno  ) {        WhiteBoxHolder.WB.NMTCommitMemory  (base + pno * PageSize, PageSize); }\n-    private static void uncommit(long base, int pno  ) {        WhiteBoxHolder.WB.NMTUncommitMemory(base + pno * PageSize, PageSize); }\n-    private static void release (long base, long size) {        WhiteBoxHolder.WB.NMTReleaseMemory (base                 , size    ); }\n+    private static long reserve (long size           ) { return WhiteBoxHolder.WB.NMTReserveMemory (size                             ); }\n+    private static void commit  (long base, int pno  ) {        WhiteBoxHolder.WB.NMTCommitMemory  (base + pno * PAGE_SIZE, PAGE_SIZE); }\n+    private static void uncommit(long base, int pno  ) {        WhiteBoxHolder.WB.NMTUncommitMemory(base + pno * PAGE_SIZE, PAGE_SIZE); }\n+    private static void release (long base, long size) {        WhiteBoxHolder.WB.NMTReleaseMemory (base                  , size     ); }\n@@ -91,4 +91,5 @@\n-    public static void doAllMemoryOps(int nR, int region_count) {\n-        long region_size = region_count * PageSize;\n-        long[] base_array = new long[nR];\n-        for (int i = 0; i < nR; i++)\n+    public static void doAllMemoryOps(int reserved_regions_count, int committed_regions_count) {\n+        long region_size = committed_regions_count * PAGE_SIZE;\n+        long[] base_array = new long[reserved_regions_count];\n+\n+        for (int i = 0; i < reserved_regions_count; i++)\n@@ -97,2 +98,2 @@\n-        for (int R = 0; R < nR; R++) {\n-          long base = base_array[R];\n+        for (int r = 0; r < reserved_regions_count; r++) {\n+          long base = base_array[r];\n@@ -107,1 +108,1 @@\n-        for (int i = 0; i < nR; i++)\n+        for (int i = 0; i < reserved_regions_count; i++)\n@@ -110,5 +111,6 @@\n-    public static void doTest(int nR, int nT, int nr) throws InterruptedException{\n-        int RT = nR \/ nT;\n-        Thread[] threads =  new Thread[nT];\n-        for (int t = 0; t < nT; t++) {\n-            threads[t] = new Thread(() -> doAllMemoryOps(RT, nr));\n+\n+    public static void doTest(int reserved_regions_count, int threads_count, int committed_regions_count) throws InterruptedException{\n+        int regions_per_thread = reserved_regions_count \/ threads_count;\n+        Thread[] threads =  new Thread[threads_count];\n+        for (int t = 0; t < threads_count; t++) {\n+            threads[t] = new Thread(() -> doAllMemoryOps(regions_per_thread, committed_regions_count));\n@@ -145,1 +147,1 @@\n-    public static class NMTDetails extends NMTBenchmark_wb { }\n+    public static class NMTDetail extends NMTBenchmark_wb { }\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/runtime\/NMTBenchmark_wb.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"}]}