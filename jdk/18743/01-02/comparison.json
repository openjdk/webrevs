{"files":[{"patch":"@@ -38,1 +38,0 @@\n-include lib\/2dLibraries.gmk\n@@ -40,0 +39,1 @@\n+include lib\/ClientLibraries.gmk\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,393 +0,0 @@\n-#\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-################################################################################\n-## Build libmlib_image\n-################################################################################\n-\n-ifeq ($(call isTargetCpuBits, 64), true)\n-  LIBMLIB_IMAGE_CFLAGS := -DMLIB_OS64BIT\n-endif\n-\n-$(eval $(call SetupJdkLibrary, BUILD_LIBMLIB_IMAGE, \\\n-    NAME := mlib_image, \\\n-    EXTRA_SRC := common\/awt\/medialib, \\\n-    EXTRA_HEADER_DIRS := java.base:libjava, \\\n-    EXCLUDE_FILES := mlib_c_ImageBlendTable.c, \\\n-    OPTIMIZATION := HIGHEST, \\\n-    CFLAGS := -D__USE_J2D_NAMES -D__MEDIALIB_OLD_NAMES -DMLIB_NO_LIBSUNMATH \\\n-        $(LIBMLIB_IMAGE_CFLAGS), \\\n-    DISABLED_WARNINGS_gcc := unused-function, \\\n-    LIBS_unix := $(LIBDL) $(LIBM), \\\n-))\n-\n-TARGETS += $(BUILD_LIBMLIB_IMAGE)\n-\n-################################################################################\n-## Build liblcms\n-################################################################################\n-\n-ifeq ($(USE_EXTERNAL_LCMS), true)\n-  # If we're using an external library, we'll just need the wrapper part.\n-  # By including it explicitly, all other files will be excluded.\n-  LIBLCMS_INCLUDE_FILES := LCMS.c\n-  # If we're using an external library, we can't include our own SRC path\n-  # as includes, instead the system headers should be used.\n-  LIBLCMS_HEADERS_FROM_SRC := false\n-  # FIXME: Keep old behavior and reset LCMS_CFLAGS. This is likely a bug.\n-  LCMS_CFLAGS :=\n-endif\n-\n-ifeq ($(TOOLCHAIN_TYPE)+$(TOOLCHAIN_VERSION), clang+10.1)\n-  # Work around an optimizer bug seen with Xcode 10.1, but fixed by 10.3\n-  BUILD_LIBLCMS_cmsopt.c_CFLAGS := -O0\n-endif\n-\n-# We use CMS_DONT_USE_FAST_FLOOR and CMS_NO_HALF_SUPPORT since the fast floor\n-# code loses precision.\n-$(eval $(call SetupJdkLibrary, BUILD_LIBLCMS, \\\n-    NAME := lcms, \\\n-    INCLUDE_FILES := $(LIBLCMS_INCLUDE_FILES), \\\n-    OPTIMIZATION := HIGHEST, \\\n-    CFLAGS := -DCMS_DONT_USE_FAST_FLOOR -DCMS_NO_HALF_SUPPORT $(LCMS_CFLAGS), \\\n-    CFLAGS_windows := -DCMS_IS_WINDOWS_, \\\n-    EXTRA_HEADER_DIRS := \\\n-        common\/awt\/debug \\\n-        libawt\/java2d \\\n-        java.base:libjvm, \\\n-    HEADERS_FROM_SRC := $(LIBLCMS_HEADERS_FROM_SRC), \\\n-    DISABLED_WARNINGS_gcc := format-nonliteral type-limits \\\n-        stringop-truncation, \\\n-    DISABLED_WARNINGS_clang := format-nonliteral, \\\n-    JDK_LIBS := libawt java.base:libjava, \\\n-    LIBS_unix := $(LCMS_LIBS) $(LIBM), \\\n-))\n-\n-TARGETS += $(BUILD_LIBLCMS)\n-\n-################################################################################\n-## Build libjavajpeg\n-################################################################################\n-\n-ifeq ($(USE_EXTERNAL_LIBJPEG), true)\n-  LIBJAVAJPEG_INCLUDE_FILES := \\\n-      imageioJPEG.c \\\n-      jpegdecoder.c\n-  # If we're using an external library, we can't include our own SRC path\n-  # as includes, instead the system headers should be used.\n-  LIBJAVAJPEG_HEADERS_FROM_SRC := false\n-endif\n-\n-# \"DISABLED_WARNINGS_gcc := clobbered\" rationale:\n-# Suppress gcc warnings like \"variable might be clobbered by 'longjmp'\n-# or 'vfork'\": this warning indicates that some variable is placed to\n-# a register by optimized compiler and it's value might be lost on longjmp().\n-# Recommended way to avoid such warning is to declare the variable as\n-# volatile to prevent the optimization. However, this approach does not\n-# work because we have to declare all variables as volatile in result.\n-$(eval $(call SetupJdkLibrary, BUILD_LIBJAVAJPEG, \\\n-    NAME := javajpeg, \\\n-    INCLUDE_FILES := $(LIBJAVAJPEG_INCLUDE_FILES), \\\n-    OPTIMIZATION := HIGHEST, \\\n-    HEADERS_FROM_SRC := $(LIBJAVAJPEG_HEADERS_FROM_SRC), \\\n-    DISABLED_WARNINGS_gcc_imageioJPEG.c := clobbered array-bounds, \\\n-    DISABLED_WARNINGS_gcc_jcmaster.c := implicit-fallthrough, \\\n-    DISABLED_WARNINGS_gcc_jdphuff.c := shift-negative-value, \\\n-    JDK_LIBS := java.base:libjava, \\\n-    LIBS := $(LIBJPEG_LIBS), \\\n-))\n-\n-TARGETS += $(BUILD_LIBJAVAJPEG)\n-\n-################################################################################\n-## Build libsplashscreen\n-################################################################################\n-\n-ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-  LIBSPLASHSCREEN_EXTRA_SRC := \\\n-      common\/awt\/systemscale \\\n-      #\n-\n-  LIBSPLASHSCREEN_HEADER_DIRS := \\\n-      common\/awt\/utility \\\n-      libosxapp \\\n-      java.base:libjava \\\n-      java.base:libjvm \\\n-      #\n-\n-  ifeq ($(USE_EXTERNAL_LIBGIF), false)\n-    LIBSPLASHSCREEN_HEADER_DIRS += libsplashscreen\/giflib\n-  else\n-    LIBSPLASHSCREEN_EXCLUDES += giflib\n-  endif\n-\n-  ifeq ($(USE_EXTERNAL_LIBJPEG), false)\n-    LIBSPLASHSCREEN_EXTRA_SRC += libjavajpeg\n-  endif\n-\n-  ifeq ($(USE_EXTERNAL_LIBPNG), false)\n-    LIBSPLASHSCREEN_HEADER_DIRS += libsplashscreen\/libpng\n-  else\n-    LIBSPLASHSCREEN_EXCLUDES += libpng\n-  endif\n-\n-  ifeq ($(USE_EXTERNAL_LIBZ), false)\n-    LIBSPLASHSCREEN_EXTRA_SRC += java.base:libzip\/zlib\n-  endif\n-\n-  LIBSPLASHSCREEN_CFLAGS += -DSPLASHSCREEN -DPNG_NO_MMX_CODE \\\n-      -DPNG_ARM_NEON_OPT=0 -DPNG_ARM_NEON_IMPLEMENTATION=0\n-\n-  ifeq ($(call isTargetOs, linux)+$(call isTargetCpuArch, ppc), true+true)\n-    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n-  endif\n-\n-  # The external libpng submitted in the jdk is a reduced version\n-  # which does not contain .png_init_filter_functions_vsx.\n-  # Therefore we need to disable PNG_POWERPC_VSX_OPT explicitly by setting\n-  # it to 0. If this define is not set, it would be automatically set to 2,\n-  # because\n-  #   \"#if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)\"\n-  # expands to true. This would results in the fact that\n-  # .png_init_filter_functions_vsx is needed in libpng.\n-  ifeq ($(call isTargetOs, aix), true)\n-    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n-  endif\n-\n-  ifeq ($(call isTargetOs, macosx), true)\n-    # libsplashscreen on macosx does not use the unix code\n-    LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS := \/unix\/\n-\n-    BUILD_LIBSPLASHSCREEN_java_awt_SplashScreen.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_gfx_impl.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_gif.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_impl.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_jpeg.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_png.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_sys.m_CFLAGS := -O0\n-  endif\n-\n-  ifeq ($(call isTargetOs, macosx), true)\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_MACOSX\n-  else ifeq ($(call isTargetOs, windows), true)\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_WIN32\n-  else\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_X11 $(X_CFLAGS)\n-  endif\n-\n-  $(eval $(call SetupJdkLibrary, BUILD_LIBSPLASHSCREEN, \\\n-      NAME := splashscreen, \\\n-      EXTRA_SRC := $(LIBSPLASHSCREEN_EXTRA_SRC), \\\n-      EXCLUDE_SRC_PATTERNS := $(LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS), \\\n-      EXCLUDE_FILES := imageioJPEG.c jpegdecoder.c pngtest.c, \\\n-      EXCLUDES := $(LIBSPLASHSCREEN_EXCLUDES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(LIBSPLASHSCREEN_CFLAGS) \\\n-          $(GIFLIB_CFLAGS) $(LIBJPEG_CFLAGS) $(PNG_CFLAGS) $(LIBZ_CFLAGS), \\\n-      CXXFLAGS := $(LIBSPLASHSCREEN_CFLAGS) \\\n-          $(GIFLIB_CFLAGS) $(LIBJPEG_CFLAGS) $(PNG_CFLAGS) $(LIBZ_CFLAGS), \\\n-      EXTRA_HEADER_DIRS := $(LIBSPLASHSCREEN_HEADER_DIRS), \\\n-      DISABLED_WARNINGS_gcc_dgif_lib.c := sign-compare, \\\n-      DISABLED_WARNINGS_gcc_jcmaster.c := implicit-fallthrough, \\\n-      DISABLED_WARNINGS_gcc_jdphuff.c := shift-negative-value, \\\n-      DISABLED_WARNINGS_gcc_png.c := maybe-uninitialized, \\\n-      DISABLED_WARNINGS_gcc_pngerror.c := maybe-uninitialized, \\\n-      DISABLED_WARNINGS_gcc_splashscreen_gfx_impl.c := implicit-fallthrough \\\n-          maybe-uninitialized, \\\n-      DISABLED_WARNINGS_gcc_splashscreen_impl.c := implicit-fallthrough \\\n-          sign-compare unused-function, \\\n-      DISABLED_WARNINGS_gcc_splashscreen_sys.c := type-limits unused-result, \\\n-      DISABLED_WARNINGS_clang := deprecated-non-prototype, \\\n-      DISABLED_WARNINGS_clang_dgif_lib.c := sign-compare, \\\n-      DISABLED_WARNINGS_clang_gzwrite.c := format-nonliteral, \\\n-      DISABLED_WARNINGS_clang_splashscreen_impl.c := sign-compare, \\\n-      DISABLED_WARNINGS_clang_splashscreen_png.c := \\\n-          incompatible-pointer-types, \\\n-      DISABLED_WARNINGS_clang_splashscreen_sys.m := deprecated-declarations, \\\n-      DISABLED_WARNINGS_microsoft_dgif_lib.c := 4018 4267, \\\n-      DISABLED_WARNINGS_microsoft_splashscreen_impl.c := 4018 4267 4244, \\\n-      DISABLED_WARNINGS_microsoft_splashscreen_png.c := 4267, \\\n-      DISABLED_WARNINGS_microsoft_splashscreen_sys.c := 4267 4244, \\\n-      LDFLAGS_windows := -delayload:user32.dll, \\\n-      JDK_LIBS_windows := java.base:libjava, \\\n-      JDK_LIBS_macosx := libosxapp, \\\n-      LIBS := $(GIFLIB_LIBS) $(LIBJPEG_LIBS) $(LIBZ_LIBS) $(PNG_LIBS), \\\n-      LIBS_unix := $(LIBM) -lpthread, \\\n-      LIBS_linux := $(LIBDL) $(X_LIBS) -lX11 -lXext, \\\n-      LIBS_macosx := -liconv \\\n-          -framework ApplicationServices \\\n-          -framework Cocoa \\\n-          -framework Foundation \\\n-          -framework Metal \\\n-          -framework Security, \\\n-      LIBS_aix := $(LIBDL) -liconv $(X_LIBS) -lX11 -lXext, \\\n-      LIBS_windows := delayimp.lib gdi32.lib kernel32.lib user32.lib, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBSPLASHSCREEN)\n-endif\n-\n-################################################################################\n-## Build libfreetype\n-################################################################################\n-\n-ifeq ($(FREETYPE_TO_USE), bundled)\n-  # freetype requires you to manually define DLL_EXPORT for windows (see ftconfig.h)\n-  $(eval $(call SetupJdkLibrary, BUILD_LIBFREETYPE, \\\n-      NAME := freetype, \\\n-      OPTIMIZATION := HIGHEST, \\\n-      CFLAGS := -DFT2_BUILD_LIBRARY, \\\n-      CFLAGS_windows := -DDLL_EXPORT, \\\n-      EXTRA_HEADER_DIRS := libfreetype\/include, \\\n-      DISABLED_WARNINGS_microsoft := 4267 4244 4996, \\\n-      DISABLED_WARNINGS_gcc := dangling-pointer stringop-overflow, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBFREETYPE)\n-endif\n-\n-################################################################################\n-## Build libfontmanager\n-################################################################################\n-\n-ifeq ($(USE_EXTERNAL_HARFBUZZ), true)\n-   LIBFONTMANAGER_EXTRA_SRC =\n-   LIBFONTMANAGER_LIBS += $(HARFBUZZ_LIBS)\n-else\n-   LIBFONTMANAGER_EXTRA_SRC = libharfbuzz\n-\n-   ifeq ($(call isTargetOs, windows), false)\n-     HARFBUZZ_CFLAGS += -DGETPAGESIZE -DHAVE_MPROTECT -DHAVE_PTHREAD \\\n-        -DHAVE_SYSCONF -DHAVE_SYS_MMAN_H -DHAVE_UNISTD_H \\\n-        -DHB_NO_PRAGMA_GCC_DIAGNOSTIC\n-   endif\n-   ifeq ($(call isTargetOs, linux macosx), true)\n-     HARFBUZZ_CFLAGS += -DHAVE_INTEL_ATOMIC_PRIMITIVES -DHB_NO_VISIBILITY\n-   endif\n-\n-   # hb-ft.cc is not presently needed, and requires freetype 2.4.2 or later.\n-   # hb-subset and hb-style APIs are not needed, excluded to cut on compilation\n-   # time.\n-   LIBFONTMANAGER_EXCLUDE_FILES += gsubgpos-context.cc hb-ft.cc hb-style.cc \\\n-      hb-subset-cff-common.cc hb-subset-cff1.cc hb-subset-cff2.cc \\\n-      hb-subset-input.cc hb-subset-instancer-solver.cc hb-subset-plan.cc \\\n-      hb-subset.cc\n-\n-   # list of disabled warnings and the compilers for which it was specifically\n-   # added.\n-   # array-bounds         -> GCC 12 on Alpine Linux\n-   # parentheses          -> GCC 6\n-   # range-loop-analysis  -> clang on Xcode12\n-\n-   HARFBUZZ_DISABLED_WARNINGS_gcc := missing-field-initializers \\\n-       strict-aliasing unused-result array-bounds parentheses\n-   # noexcept-type required for GCC 7 builds. Not required for GCC 8+.\n-   # expansion-to-defined required for GCC 9 builds. Not required for GCC 10+.\n-   # maybe-uninitialized required for GCC 8 builds. Not required for GCC 9+.\n-   # calloc-transposed-args required for GCC 14 builds. (fixed upstream in\n-   #  Harfbuzz 032c931e1c0cfb20f18e5acb8ba005775242bd92)\n-   HARFBUZZ_DISABLED_WARNINGS_CXX_gcc := class-memaccess noexcept-type \\\n-       expansion-to-defined dangling-reference maybe-uninitialized \\\n-       calloc-transposed-args\n-   HARFBUZZ_DISABLED_WARNINGS_clang := missing-field-initializers \\\n-      range-loop-analysis\n-   HARFBUZZ_DISABLED_WARNINGS_microsoft := 4267 4244\n-\n-   LIBFONTMANAGER_CFLAGS += $(HARFBUZZ_CFLAGS)\n-endif\n-\n-LIBFONTMANAGER_EXTRA_HEADER_DIRS := \\\n-    common\/awt \\\n-    common\/awt\/utility \\\n-    common\/font \\\n-    libawt\/java2d \\\n-    libawt\/java2d\/pipe \\\n-    libawt\/java2d\/loops \\\n-    #\n-\n-ifeq ($(FREETYPE_TO_USE), system)\n-  LIBFONTMANAGER_CFLAGS += $(FREETYPE_CFLAGS)\n-  LIBFONTMANAGER_LIBS += $(FREETYPE_LIBS)\n-else\n-  LIBFONTMANAGER_EXTRA_HEADER_DIRS += libfreetype\/include\n-  LIBFONTMANAGER_JDK_LIBS += libfreetype\n-endif\n-\n-LIBFONTMANAGER_OPTIMIZATION := HIGHEST\n-\n-ifneq ($(filter $(TOOLCHAIN_TYPE), gcc clang), )\n-  # gcc (and to an extent clang) is particularly bad at optimizing these files,\n-  # causing a massive spike in compile time. We don't care about these\n-  # particular files anyway, so lower optimization level.\n-  BUILD_LIBFONTMANAGER_hb-subset.cc_OPTIMIZATION := SIZE\n-  BUILD_LIBFONTMANAGER_hb-subset-plan.cc_OPTIMIZATION := SIZE\n-endif\n-\n-ifeq ($(call isTargetOs, windows), true)\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c\n-  LIBFONTMANAGER_OPTIMIZATION := HIGHEST\n-else ifeq ($(call isTargetOs, macosx), true)\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c \\\n-      fontpath.c lcdglyph.c\n-else\n-  LIBFONTMANAGER_EXCLUDE_FILES += fontpath.c lcdglyph.c\n-endif\n-\n-LIBFONTMANAGER_CFLAGS += $(X_CFLAGS) -DLE_STANDALONE -DHEADLESS\n-\n-# LDFLAGS clarification:\n-#   Filter relevant linker flags disallowing unresolved symbols as we cannot\n-#   build-time decide to which library to link against (libawt_headless or\n-#   libawt_xawt). See JDK-8196516 for details.\n-$(eval $(call SetupJdkLibrary, BUILD_LIBFONTMANAGER, \\\n-    NAME := fontmanager, \\\n-    LINK_TYPE := C++, \\\n-    EXCLUDE_FILES := $(LIBFONTMANAGER_EXCLUDE_FILES) \\\n-        AccelGlyphCache.c, \\\n-    CFLAGS := $(LIBFONTMANAGER_CFLAGS), \\\n-    CXXFLAGS := $(LIBFONTMANAGER_CFLAGS), \\\n-    OPTIMIZATION := $(LIBFONTMANAGER_OPTIMIZATION), \\\n-    CFLAGS_windows = -DCC_NOEX, \\\n-    EXTRA_HEADER_DIRS := $(LIBFONTMANAGER_EXTRA_HEADER_DIRS), \\\n-    EXTRA_SRC := $(LIBFONTMANAGER_EXTRA_SRC), \\\n-    DISABLED_WARNINGS_gcc := $(HARFBUZZ_DISABLED_WARNINGS_gcc), \\\n-    DISABLED_WARNINGS_CXX_gcc := $(HARFBUZZ_DISABLED_WARNINGS_CXX_gcc), \\\n-    DISABLED_WARNINGS_clang := $(HARFBUZZ_DISABLED_WARNINGS_clang), \\\n-    DISABLED_WARNINGS_microsoft := $(HARFBUZZ_DISABLED_WARNINGS_microsoft), \\\n-    LDFLAGS := $(LDFLAGS_CXX_JDK), \\\n-    LDFLAGS_FILTER_OUT :=-Wl$(COMMA)-z$(COMMA)defs, \\\n-    LDFLAGS_aix := -Wl$(COMMA)-berok, \\\n-    JDK_LIBS := libawt java.base:libjava $(LIBFONTMANAGER_JDK_LIBS), \\\n-    JDK_LIBS_macosx := libawt_lwawt, \\\n-    LIBS := $(LIBFONTMANAGER_LIBS), \\\n-    LIBS_unix := $(LIBM), \\\n-    LIBS_macosx := \\\n-        -framework CoreFoundation \\\n-        -framework CoreGraphics \\\n-        -framework CoreText, \\\n-    LIBS_windows := advapi32.lib gdi32.lib user32.lib, \\\n-))\n-\n-TARGETS += $(BUILD_LIBFONTMANAGER)\n","filename":"make\/modules\/java.desktop\/lib\/2dLibraries.gmk","additions":0,"deletions":393,"binary":false,"changes":393,"status":"deleted"},{"patch":"@@ -28,0 +28,5 @@\n+################################################################################\n+# This file will build all AWT\/2D native libraries with \"awt\" in the name.\n+# Note that this does not imply that the code they bring in belong to AWT.\n+# This split is purely made to keep the size of the Makefiles reasonable.\n+\n@@ -343,52 +348,0 @@\n-\n-  ##############################################################################\n-  ## Build libosxui\n-  ##############################################################################\n-\n-  SHADERS_SRC := \\\n-      $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal\n-  SHADERS_SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/java.desktop\/libosxui\n-  SHADERS_AIR := $(SHADERS_SUPPORT_DIR)\/shaders.air\n-  SHADERS_LIB := $(call FindLibDirForModule, $(MODULE))\/shaders.metallib\n-\n-  $(eval $(call SetupExecute, metal_shaders, \\\n-      INFO := Running metal on $(notdir $(SHADERS_SRC)) (for libosxui.dylib), \\\n-      DEPS := $(SHADERS_SRC), \\\n-      OUTPUT_FILE := $(SHADERS_AIR), \\\n-      SUPPORT_DIR := $(SHADERS_SUPPORT_DIR), \\\n-      COMMAND := $(METAL) -c -std=osx-metal2.0 \\\n-          -mmacosx-version-min=$(MACOSX_VERSION_MIN) \\\n-          -o $(SHADERS_AIR) $(SHADERS_SRC), \\\n-  ))\n-\n-  $(eval $(call SetupExecute, metallib_shaders, \\\n-      INFO := Running metallib on $(notdir $(SHADERS_AIR)) (for libosxui.dylib), \\\n-      DEPS := $(SHADERS_AIR), \\\n-      OUTPUT_FILE := $(SHADERS_LIB), \\\n-      SUPPORT_DIR := $(SHADERS_SUPPORT_DIR), \\\n-      COMMAND := $(METALLIB) -o $(SHADERS_LIB) $(SHADERS_AIR), \\\n-  ))\n-\n-  TARGETS += $(SHADERS_LIB)\n-\n-  $(eval $(call SetupJdkLibrary, BUILD_LIBOSXUI, \\\n-      NAME := osxui, \\\n-      OPTIMIZATION := LOW, \\\n-      EXTRA_HEADER_DIRS := \\\n-          libawt_lwawt\/awt, \\\n-      DISABLED_WARNINGS_clang_AquaFileView.m := deprecated-declarations \\\n-          sign-compare, \\\n-      DISABLED_WARNINGS_clang_ScreenMenu.m := deprecated-declarations, \\\n-      APPEND_LDFLAGS := -Wl$(COMMA)-rpath$(COMMA)@loader_path, \\\n-      JDK_LIBS := java.base:libjava libosxapp, \\\n-      LIBS_macosx := \\\n-          -framework ApplicationServices \\\n-          -framework Carbon \\\n-          -framework Cocoa \\\n-          -framework JavaRuntimeSupport \\\n-          -framework Metal, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBOSXUI)\n-\n-  $(BUILD_LIBOSXUI): $(SHADERS_LIB)\n","filename":"make\/modules\/java.desktop\/lib\/AwtLibraries.gmk","additions":5,"deletions":52,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,453 @@\n+#\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This file will build all AWT\/2D native libraries that does not have \"awt\" in\n+# the name. Note that this does not imply anything about the logical ownership\n+# of the code they compile.\n+# This split is purely made to keep the size of the Makefiles reasonable.\n+\n+################################################################################\n+## Build libmlib_image\n+################################################################################\n+\n+ifeq ($(call isTargetCpuBits, 64), true)\n+  LIBMLIB_IMAGE_CFLAGS := -DMLIB_OS64BIT\n+endif\n+\n+$(eval $(call SetupJdkLibrary, BUILD_LIBMLIB_IMAGE, \\\n+    NAME := mlib_image, \\\n+    EXTRA_SRC := common\/awt\/medialib, \\\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n+    EXCLUDE_FILES := mlib_c_ImageBlendTable.c, \\\n+    OPTIMIZATION := HIGHEST, \\\n+    CFLAGS := -D__USE_J2D_NAMES -D__MEDIALIB_OLD_NAMES -DMLIB_NO_LIBSUNMATH \\\n+        $(LIBMLIB_IMAGE_CFLAGS), \\\n+    DISABLED_WARNINGS_gcc := unused-function, \\\n+    LIBS_unix := $(LIBDL) $(LIBM), \\\n+))\n+\n+TARGETS += $(BUILD_LIBMLIB_IMAGE)\n+\n+################################################################################\n+## Build liblcms\n+################################################################################\n+\n+ifeq ($(USE_EXTERNAL_LCMS), true)\n+  # If we're using an external library, we'll just need the wrapper part.\n+  # By including it explicitly, all other files will be excluded.\n+  LIBLCMS_INCLUDE_FILES := LCMS.c\n+  # If we're using an external library, we can't include our own SRC path\n+  # as includes, instead the system headers should be used.\n+  LIBLCMS_HEADERS_FROM_SRC := false\n+  # FIXME: Keep old behavior and reset LCMS_CFLAGS. This is likely a bug.\n+  LCMS_CFLAGS :=\n+endif\n+\n+ifeq ($(TOOLCHAIN_TYPE)+$(TOOLCHAIN_VERSION), clang+10.1)\n+  # Work around an optimizer bug seen with Xcode 10.1, but fixed by 10.3\n+  BUILD_LIBLCMS_cmsopt.c_CFLAGS := -O0\n+endif\n+\n+# We use CMS_DONT_USE_FAST_FLOOR and CMS_NO_HALF_SUPPORT since the fast floor\n+# code loses precision.\n+$(eval $(call SetupJdkLibrary, BUILD_LIBLCMS, \\\n+    NAME := lcms, \\\n+    INCLUDE_FILES := $(LIBLCMS_INCLUDE_FILES), \\\n+    OPTIMIZATION := HIGHEST, \\\n+    CFLAGS := -DCMS_DONT_USE_FAST_FLOOR -DCMS_NO_HALF_SUPPORT $(LCMS_CFLAGS), \\\n+    CFLAGS_windows := -DCMS_IS_WINDOWS_, \\\n+    EXTRA_HEADER_DIRS := \\\n+        common\/awt\/debug \\\n+        libawt\/java2d \\\n+        java.base:libjvm, \\\n+    HEADERS_FROM_SRC := $(LIBLCMS_HEADERS_FROM_SRC), \\\n+    DISABLED_WARNINGS_gcc := format-nonliteral type-limits \\\n+        stringop-truncation, \\\n+    DISABLED_WARNINGS_clang := format-nonliteral, \\\n+    JDK_LIBS := libawt java.base:libjava, \\\n+    LIBS_unix := $(LCMS_LIBS) $(LIBM), \\\n+))\n+\n+TARGETS += $(BUILD_LIBLCMS)\n+\n+################################################################################\n+## Build libjavajpeg\n+################################################################################\n+\n+ifeq ($(USE_EXTERNAL_LIBJPEG), true)\n+  LIBJAVAJPEG_INCLUDE_FILES := \\\n+      imageioJPEG.c \\\n+      jpegdecoder.c\n+  # If we're using an external library, we can't include our own SRC path\n+  # as includes, instead the system headers should be used.\n+  LIBJAVAJPEG_HEADERS_FROM_SRC := false\n+endif\n+\n+# \"DISABLED_WARNINGS_gcc := clobbered\" rationale:\n+# Suppress gcc warnings like \"variable might be clobbered by 'longjmp'\n+# or 'vfork'\": this warning indicates that some variable is placed to\n+# a register by optimized compiler and it's value might be lost on longjmp().\n+# Recommended way to avoid such warning is to declare the variable as\n+# volatile to prevent the optimization. However, this approach does not\n+# work because we have to declare all variables as volatile in result.\n+$(eval $(call SetupJdkLibrary, BUILD_LIBJAVAJPEG, \\\n+    NAME := javajpeg, \\\n+    INCLUDE_FILES := $(LIBJAVAJPEG_INCLUDE_FILES), \\\n+    OPTIMIZATION := HIGHEST, \\\n+    HEADERS_FROM_SRC := $(LIBJAVAJPEG_HEADERS_FROM_SRC), \\\n+    DISABLED_WARNINGS_gcc_imageioJPEG.c := clobbered array-bounds, \\\n+    DISABLED_WARNINGS_gcc_jcmaster.c := implicit-fallthrough, \\\n+    DISABLED_WARNINGS_gcc_jdphuff.c := shift-negative-value, \\\n+    JDK_LIBS := java.base:libjava, \\\n+    LIBS := $(LIBJPEG_LIBS), \\\n+))\n+\n+TARGETS += $(BUILD_LIBJAVAJPEG)\n+\n+################################################################################\n+## Build libsplashscreen\n+################################################################################\n+\n+ifeq ($(ENABLE_HEADLESS_ONLY), false)\n+  LIBSPLASHSCREEN_EXTRA_SRC := \\\n+      common\/awt\/systemscale \\\n+      #\n+\n+  LIBSPLASHSCREEN_HEADER_DIRS := \\\n+      common\/awt\/utility \\\n+      libosxapp \\\n+      java.base:libjava \\\n+      java.base:libjvm \\\n+      #\n+\n+  ifeq ($(USE_EXTERNAL_LIBGIF), false)\n+    LIBSPLASHSCREEN_HEADER_DIRS += libsplashscreen\/giflib\n+  else\n+    LIBSPLASHSCREEN_EXCLUDES += giflib\n+  endif\n+\n+  ifeq ($(USE_EXTERNAL_LIBJPEG), false)\n+    LIBSPLASHSCREEN_EXTRA_SRC += libjavajpeg\n+  endif\n+\n+  ifeq ($(USE_EXTERNAL_LIBPNG), false)\n+    LIBSPLASHSCREEN_HEADER_DIRS += libsplashscreen\/libpng\n+  else\n+    LIBSPLASHSCREEN_EXCLUDES += libpng\n+  endif\n+\n+  ifeq ($(USE_EXTERNAL_LIBZ), false)\n+    LIBSPLASHSCREEN_EXTRA_SRC += java.base:libzip\/zlib\n+  endif\n+\n+  LIBSPLASHSCREEN_CFLAGS += -DSPLASHSCREEN -DPNG_NO_MMX_CODE \\\n+      -DPNG_ARM_NEON_OPT=0 -DPNG_ARM_NEON_IMPLEMENTATION=0\n+\n+  ifeq ($(call isTargetOs, linux)+$(call isTargetCpuArch, ppc), true+true)\n+    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n+  endif\n+\n+  # The external libpng submitted in the jdk is a reduced version\n+  # which does not contain .png_init_filter_functions_vsx.\n+  # Therefore we need to disable PNG_POWERPC_VSX_OPT explicitly by setting\n+  # it to 0. If this define is not set, it would be automatically set to 2,\n+  # because\n+  #   \"#if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)\"\n+  # expands to true. This would results in the fact that\n+  # .png_init_filter_functions_vsx is needed in libpng.\n+  ifeq ($(call isTargetOs, aix), true)\n+    LIBSPLASHSCREEN_CFLAGS += -DPNG_POWERPC_VSX_OPT=0\n+  endif\n+\n+  ifeq ($(call isTargetOs, macosx), true)\n+    # libsplashscreen on macosx does not use the unix code\n+    LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS := \/unix\/\n+\n+    BUILD_LIBSPLASHSCREEN_java_awt_SplashScreen.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_gfx_impl.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_gif.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_impl.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_jpeg.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_png.c_CFLAGS := -x objective-c -O0\n+    BUILD_LIBSPLASHSCREEN_splashscreen_sys.m_CFLAGS := -O0\n+  endif\n+\n+  ifeq ($(call isTargetOs, macosx), true)\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_MACOSX\n+  else ifeq ($(call isTargetOs, windows), true)\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_WIN32\n+  else\n+    LIBSPLASHSCREEN_CFLAGS += -DWITH_X11 $(X_CFLAGS)\n+  endif\n+\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBSPLASHSCREEN, \\\n+      NAME := splashscreen, \\\n+      EXTRA_SRC := $(LIBSPLASHSCREEN_EXTRA_SRC), \\\n+      EXCLUDE_SRC_PATTERNS := $(LIBSPLASHSCREEN_EXCLUDE_SRC_PATTERNS), \\\n+      EXCLUDE_FILES := imageioJPEG.c jpegdecoder.c pngtest.c, \\\n+      EXCLUDES := $(LIBSPLASHSCREEN_EXCLUDES), \\\n+      OPTIMIZATION := LOW, \\\n+      CFLAGS := $(LIBSPLASHSCREEN_CFLAGS) \\\n+          $(GIFLIB_CFLAGS) $(LIBJPEG_CFLAGS) $(PNG_CFLAGS) $(LIBZ_CFLAGS), \\\n+      CXXFLAGS := $(LIBSPLASHSCREEN_CFLAGS) \\\n+          $(GIFLIB_CFLAGS) $(LIBJPEG_CFLAGS) $(PNG_CFLAGS) $(LIBZ_CFLAGS), \\\n+      EXTRA_HEADER_DIRS := $(LIBSPLASHSCREEN_HEADER_DIRS), \\\n+      DISABLED_WARNINGS_gcc_dgif_lib.c := sign-compare, \\\n+      DISABLED_WARNINGS_gcc_jcmaster.c := implicit-fallthrough, \\\n+      DISABLED_WARNINGS_gcc_jdphuff.c := shift-negative-value, \\\n+      DISABLED_WARNINGS_gcc_png.c := maybe-uninitialized, \\\n+      DISABLED_WARNINGS_gcc_pngerror.c := maybe-uninitialized, \\\n+      DISABLED_WARNINGS_gcc_splashscreen_gfx_impl.c := implicit-fallthrough \\\n+          maybe-uninitialized, \\\n+      DISABLED_WARNINGS_gcc_splashscreen_impl.c := implicit-fallthrough \\\n+          sign-compare unused-function, \\\n+      DISABLED_WARNINGS_gcc_splashscreen_sys.c := type-limits unused-result, \\\n+      DISABLED_WARNINGS_clang := deprecated-non-prototype, \\\n+      DISABLED_WARNINGS_clang_dgif_lib.c := sign-compare, \\\n+      DISABLED_WARNINGS_clang_gzwrite.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_splashscreen_impl.c := sign-compare, \\\n+      DISABLED_WARNINGS_clang_splashscreen_png.c := \\\n+          incompatible-pointer-types, \\\n+      DISABLED_WARNINGS_clang_splashscreen_sys.m := deprecated-declarations, \\\n+      DISABLED_WARNINGS_microsoft_dgif_lib.c := 4018 4267, \\\n+      DISABLED_WARNINGS_microsoft_splashscreen_impl.c := 4018 4267 4244, \\\n+      DISABLED_WARNINGS_microsoft_splashscreen_png.c := 4267, \\\n+      DISABLED_WARNINGS_microsoft_splashscreen_sys.c := 4267 4244, \\\n+      LDFLAGS_windows := -delayload:user32.dll, \\\n+      JDK_LIBS_windows := java.base:libjava, \\\n+      JDK_LIBS_macosx := libosxapp, \\\n+      LIBS := $(GIFLIB_LIBS) $(LIBJPEG_LIBS) $(LIBZ_LIBS) $(PNG_LIBS), \\\n+      LIBS_unix := $(LIBM) -lpthread, \\\n+      LIBS_linux := $(LIBDL) $(X_LIBS) -lX11 -lXext, \\\n+      LIBS_macosx := -liconv \\\n+          -framework ApplicationServices \\\n+          -framework Cocoa \\\n+          -framework Foundation \\\n+          -framework Metal \\\n+          -framework Security, \\\n+      LIBS_aix := $(LIBDL) -liconv $(X_LIBS) -lX11 -lXext, \\\n+      LIBS_windows := delayimp.lib gdi32.lib kernel32.lib user32.lib, \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBSPLASHSCREEN)\n+endif\n+\n+################################################################################\n+## Build libfreetype\n+################################################################################\n+\n+ifeq ($(FREETYPE_TO_USE), bundled)\n+  # freetype requires you to manually define DLL_EXPORT for windows (see ftconfig.h)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBFREETYPE, \\\n+      NAME := freetype, \\\n+      OPTIMIZATION := HIGHEST, \\\n+      CFLAGS := -DFT2_BUILD_LIBRARY, \\\n+      CFLAGS_windows := -DDLL_EXPORT, \\\n+      EXTRA_HEADER_DIRS := libfreetype\/include, \\\n+      DISABLED_WARNINGS_microsoft := 4267 4244 4996, \\\n+      DISABLED_WARNINGS_gcc := dangling-pointer stringop-overflow, \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBFREETYPE)\n+endif\n+\n+################################################################################\n+## Build libfontmanager\n+################################################################################\n+\n+ifeq ($(USE_EXTERNAL_HARFBUZZ), true)\n+   LIBFONTMANAGER_EXTRA_SRC =\n+   LIBFONTMANAGER_LIBS += $(HARFBUZZ_LIBS)\n+else\n+   LIBFONTMANAGER_EXTRA_SRC = libharfbuzz\n+\n+   ifeq ($(call isTargetOs, windows), false)\n+     HARFBUZZ_CFLAGS += -DGETPAGESIZE -DHAVE_MPROTECT -DHAVE_PTHREAD \\\n+        -DHAVE_SYSCONF -DHAVE_SYS_MMAN_H -DHAVE_UNISTD_H \\\n+        -DHB_NO_PRAGMA_GCC_DIAGNOSTIC\n+   endif\n+   ifeq ($(call isTargetOs, linux macosx), true)\n+     HARFBUZZ_CFLAGS += -DHAVE_INTEL_ATOMIC_PRIMITIVES -DHB_NO_VISIBILITY\n+   endif\n+\n+   # hb-ft.cc is not presently needed, and requires freetype 2.4.2 or later.\n+   # hb-subset and hb-style APIs are not needed, excluded to cut on compilation\n+   # time.\n+   LIBFONTMANAGER_EXCLUDE_FILES += gsubgpos-context.cc hb-ft.cc hb-style.cc \\\n+      hb-subset-cff-common.cc hb-subset-cff1.cc hb-subset-cff2.cc \\\n+      hb-subset-input.cc hb-subset-instancer-solver.cc hb-subset-plan.cc \\\n+      hb-subset.cc\n+\n+   # list of disabled warnings and the compilers for which it was specifically\n+   # added.\n+   # array-bounds         -> GCC 12 on Alpine Linux\n+   # parentheses          -> GCC 6\n+   # range-loop-analysis  -> clang on Xcode12\n+\n+   HARFBUZZ_DISABLED_WARNINGS_gcc := missing-field-initializers \\\n+       strict-aliasing unused-result array-bounds parentheses\n+   # noexcept-type required for GCC 7 builds. Not required for GCC 8+.\n+   # expansion-to-defined required for GCC 9 builds. Not required for GCC 10+.\n+   # maybe-uninitialized required for GCC 8 builds. Not required for GCC 9+.\n+   # calloc-transposed-args required for GCC 14 builds. (fixed upstream in\n+   #  Harfbuzz 032c931e1c0cfb20f18e5acb8ba005775242bd92)\n+   HARFBUZZ_DISABLED_WARNINGS_CXX_gcc := class-memaccess noexcept-type \\\n+       expansion-to-defined dangling-reference maybe-uninitialized \\\n+       calloc-transposed-args\n+   HARFBUZZ_DISABLED_WARNINGS_clang := missing-field-initializers \\\n+      range-loop-analysis\n+   HARFBUZZ_DISABLED_WARNINGS_microsoft := 4267 4244\n+\n+   LIBFONTMANAGER_CFLAGS += $(HARFBUZZ_CFLAGS)\n+endif\n+\n+LIBFONTMANAGER_EXTRA_HEADER_DIRS := \\\n+    common\/awt \\\n+    common\/awt\/utility \\\n+    common\/font \\\n+    libawt\/java2d \\\n+    libawt\/java2d\/pipe \\\n+    libawt\/java2d\/loops \\\n+    #\n+\n+ifeq ($(FREETYPE_TO_USE), system)\n+  LIBFONTMANAGER_CFLAGS += $(FREETYPE_CFLAGS)\n+  LIBFONTMANAGER_LIBS += $(FREETYPE_LIBS)\n+else\n+  LIBFONTMANAGER_EXTRA_HEADER_DIRS += libfreetype\/include\n+  LIBFONTMANAGER_JDK_LIBS += libfreetype\n+endif\n+\n+LIBFONTMANAGER_OPTIMIZATION := HIGHEST\n+\n+ifneq ($(filter $(TOOLCHAIN_TYPE), gcc clang), )\n+  # gcc (and to an extent clang) is particularly bad at optimizing these files,\n+  # causing a massive spike in compile time. We don't care about these\n+  # particular files anyway, so lower optimization level.\n+  BUILD_LIBFONTMANAGER_hb-subset.cc_OPTIMIZATION := SIZE\n+  BUILD_LIBFONTMANAGER_hb-subset-plan.cc_OPTIMIZATION := SIZE\n+endif\n+\n+ifeq ($(call isTargetOs, windows), true)\n+  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c\n+  LIBFONTMANAGER_OPTIMIZATION := HIGHEST\n+else ifeq ($(call isTargetOs, macosx), true)\n+  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c X11TextRenderer.c \\\n+      fontpath.c lcdglyph.c\n+else\n+  LIBFONTMANAGER_EXCLUDE_FILES += fontpath.c lcdglyph.c\n+endif\n+\n+LIBFONTMANAGER_CFLAGS += $(X_CFLAGS) -DLE_STANDALONE -DHEADLESS\n+\n+# LDFLAGS clarification:\n+#   Filter relevant linker flags disallowing unresolved symbols as we cannot\n+#   build-time decide to which library to link against (libawt_headless or\n+#   libawt_xawt). See JDK-8196516 for details.\n+$(eval $(call SetupJdkLibrary, BUILD_LIBFONTMANAGER, \\\n+    NAME := fontmanager, \\\n+    LINK_TYPE := C++, \\\n+    EXCLUDE_FILES := $(LIBFONTMANAGER_EXCLUDE_FILES) \\\n+        AccelGlyphCache.c, \\\n+    CFLAGS := $(LIBFONTMANAGER_CFLAGS), \\\n+    CXXFLAGS := $(LIBFONTMANAGER_CFLAGS), \\\n+    OPTIMIZATION := $(LIBFONTMANAGER_OPTIMIZATION), \\\n+    CFLAGS_windows = -DCC_NOEX, \\\n+    EXTRA_HEADER_DIRS := $(LIBFONTMANAGER_EXTRA_HEADER_DIRS), \\\n+    EXTRA_SRC := $(LIBFONTMANAGER_EXTRA_SRC), \\\n+    DISABLED_WARNINGS_gcc := $(HARFBUZZ_DISABLED_WARNINGS_gcc), \\\n+    DISABLED_WARNINGS_CXX_gcc := $(HARFBUZZ_DISABLED_WARNINGS_CXX_gcc), \\\n+    DISABLED_WARNINGS_clang := $(HARFBUZZ_DISABLED_WARNINGS_clang), \\\n+    DISABLED_WARNINGS_microsoft := $(HARFBUZZ_DISABLED_WARNINGS_microsoft), \\\n+    LDFLAGS := $(LDFLAGS_CXX_JDK), \\\n+    LDFLAGS_FILTER_OUT :=-Wl$(COMMA)-z$(COMMA)defs, \\\n+    LDFLAGS_aix := -Wl$(COMMA)-berok, \\\n+    JDK_LIBS := libawt java.base:libjava $(LIBFONTMANAGER_JDK_LIBS), \\\n+    JDK_LIBS_macosx := libawt_lwawt, \\\n+    LIBS := $(LIBFONTMANAGER_LIBS), \\\n+    LIBS_unix := $(LIBM), \\\n+    LIBS_macosx := \\\n+        -framework CoreFoundation \\\n+        -framework CoreGraphics \\\n+        -framework CoreText, \\\n+    LIBS_windows := advapi32.lib gdi32.lib user32.lib, \\\n+))\n+\n+TARGETS += $(BUILD_LIBFONTMANAGER)\n+\n+ifeq ($(call isTargetOs, macosx), true)\n+  ##############################################################################\n+  ## Build libosxui\n+  ##############################################################################\n+\n+  SHADERS_SRC := \\\n+      $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal\n+  SHADERS_SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/java.desktop\/libosxui\n+  SHADERS_AIR := $(SHADERS_SUPPORT_DIR)\/shaders.air\n+  SHADERS_LIB := $(call FindLibDirForModule, $(MODULE))\/shaders.metallib\n+\n+  $(eval $(call SetupExecute, metal_shaders, \\\n+      INFO := Running metal on $(notdir $(SHADERS_SRC)) (for libosxui.dylib), \\\n+      DEPS := $(SHADERS_SRC), \\\n+      OUTPUT_FILE := $(SHADERS_AIR), \\\n+      SUPPORT_DIR := $(SHADERS_SUPPORT_DIR), \\\n+      COMMAND := $(METAL) -c -std=osx-metal2.0 \\\n+          -mmacosx-version-min=$(MACOSX_VERSION_MIN) \\\n+          -o $(SHADERS_AIR) $(SHADERS_SRC), \\\n+  ))\n+\n+  $(eval $(call SetupExecute, metallib_shaders, \\\n+      INFO := Running metallib on $(notdir $(SHADERS_AIR)) (for libosxui.dylib), \\\n+      DEPS := $(SHADERS_AIR), \\\n+      OUTPUT_FILE := $(SHADERS_LIB), \\\n+      SUPPORT_DIR := $(SHADERS_SUPPORT_DIR), \\\n+      COMMAND := $(METALLIB) -o $(SHADERS_LIB) $(SHADERS_AIR), \\\n+  ))\n+\n+  TARGETS += $(SHADERS_LIB)\n+\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBOSXUI, \\\n+      NAME := osxui, \\\n+      OPTIMIZATION := LOW, \\\n+      EXTRA_HEADER_DIRS := \\\n+          libawt_lwawt\/awt, \\\n+      DISABLED_WARNINGS_clang_AquaFileView.m := deprecated-declarations \\\n+          sign-compare, \\\n+      DISABLED_WARNINGS_clang_ScreenMenu.m := deprecated-declarations, \\\n+      APPEND_LDFLAGS := -Wl$(COMMA)-rpath$(COMMA)@loader_path, \\\n+      JDK_LIBS := java.base:libjava libosxapp, \\\n+      LIBS_macosx := \\\n+          -framework ApplicationServices \\\n+          -framework Carbon \\\n+          -framework Cocoa \\\n+          -framework JavaRuntimeSupport \\\n+          -framework Metal, \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBOSXUI)\n+\n+  $(BUILD_LIBOSXUI): $(SHADERS_LIB)\n+endif\n","filename":"make\/modules\/java.desktop\/lib\/ClientLibraries.gmk","additions":453,"deletions":0,"binary":false,"changes":453,"status":"added"}]}