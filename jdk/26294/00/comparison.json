{"files":[{"patch":"@@ -370,1 +370,1 @@\n-  CompileTask* next = _first;\n+  CompileTask* current = _first;\n@@ -373,18 +373,3 @@\n-  while (next != nullptr) {\n-    CompileTask* current = next;\n-    next = current->next();\n-    bool found_waiter = false;\n-    {\n-      MutexLocker ct_lock(CompileTaskWait_lock);\n-      assert(current->waiting_for_completion_count() <= 1, \"more than one thread are waiting for task\");\n-      if (current->waiting_for_completion_count() > 0) {\n-        \/\/ If another thread waits for this task, we must wake them up\n-        \/\/ so they will stop waiting and free the task.\n-        CompileTaskWait_lock->notify_all();\n-        found_waiter = true;\n-      }\n-    }\n-    if (!found_waiter) {\n-      \/\/ If no one was waiting for this task, we need to delete it ourselves.\n-      \/\/ In this case, the task is also certainly unlocked, because, again, there is no waiter.\n-      \/\/ Otherwise, by convention, it's the waiters responsibility to delete the task.\n+  while (current != nullptr) {\n+    if (!current->is_blocking()) {\n+      \/\/ Non-blocking task. No one is waiting for it, delete it now.\n@@ -392,0 +377,4 @@\n+    } else {\n+      \/\/ Blocking task. By convention, it is the waiters responsibility\n+      \/\/ to delete the task. We cannot delete it here, because we do not\n+      \/\/ coordinate with waiters. We will notify the waiters later.\n@@ -393,0 +382,1 @@\n+    current = current->next();\n@@ -397,0 +387,8 @@\n+  \/\/ Wake up all blocking task waiters to delete all remaining blocking\n+  \/\/ tasks. This is not a performance sensitive path, so we do this\n+  \/\/ unconditionally to simplify coding.\n+  {\n+    MonitorLocker ml(Thread::current(), CompileTaskWait_lock);\n+    ml.notify_all();\n+  }\n+\n@@ -1725,1 +1723,0 @@\n-    task->inc_waiting_for_completion();\n@@ -1729,1 +1726,0 @@\n-    task->dec_waiting_for_completion();\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-  _waiting_count = 0;\n-\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-  int                  _waiting_count;  \/\/ See waiting_for_completion_count()\n@@ -167,17 +166,0 @@\n-  \/\/ See how many threads are waiting for this task. Must have lock to read this.\n-  int waiting_for_completion_count() {\n-    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use waiting_for_completion_count()\");\n-    return _waiting_count;\n-  }\n-  \/\/ Indicates that a thread is waiting for this task to complete. Must have lock to use this.\n-  void inc_waiting_for_completion() {\n-    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use inc_waiting_for_completion()\");\n-    _waiting_count++;\n-  }\n-  \/\/ Indicates that a thread stopped waiting for this task to complete. Must have lock to use this.\n-  void dec_waiting_for_completion() {\n-    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use dec_waiting_for_completion()\");\n-    assert(_waiting_count > 0, \"waiting count is not positive\");\n-    _waiting_count--;\n-  }\n-\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -85,2 +85,0 @@\n-compiler\/debug\/TestStressBailout.java 8361752 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}