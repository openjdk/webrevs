{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n- * @bug 8235459\n- * @summary Confirm that HttpRequest.BodyPublishers#ofFile(Path)\n- *          assumes the default file system\n+ * @bug 8235459 8358688\n+ * @summary Verifies `HttpRequest.BodyPublishers#ofFile(Path)` against file\n+ *          systems that support `Path#toFile()` and also those that don't\n@@ -42,0 +42,1 @@\n+import java.io.FileNotFoundException;\n@@ -64,0 +65,1 @@\n+import static org.testng.Assert.fail;\n@@ -159,0 +161,21 @@\n+    @Test\n+    public void testFileNotFound() throws Exception {\n+        out.printf(\"\\n\\n--- testFileNotFound(): starting\\n\");\n+        try (FileSystem fs = newZipFs()) {\n+            Path fileInZip = zipFsFile(fs);\n+            Files.deleteIfExists(fileInZip);\n+            BodyPublishers.ofFile(fileInZip);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+        var path = Path.of(\"fileNotFound.txt\");\n+        try {\n+            Files.deleteIfExists(path);\n+            BodyPublishers.ofFile(path);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * @bug 8226303\n+ * @bug 8226303 8358688\n","filename":"test\/jdk\/java\/net\/httpclient\/RelayingPublishers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}