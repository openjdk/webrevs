{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.io.FileInputStream;\n@@ -38,0 +37,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -51,1 +51,0 @@\n-import java.util.function.Function;\n@@ -231,1 +230,0 @@\n-        private final Function<Path, InputStream> inputStreamSupplier;\n@@ -238,1 +236,0 @@\n-            boolean defaultFS = true;\n@@ -240,8 +237,0 @@\n-            try {\n-                path.toFile().getPath();\n-            } catch (UnsupportedOperationException uoe) {\n-                \/\/ path not associated with the default file system provider\n-                defaultFS = false;\n-            }\n-\n-            \/\/ existence check must be after FS checks\n@@ -251,4 +240,0 @@\n-            boolean finalDefaultFS = defaultFS;\n-            Function<Path, InputStream> inputStreamSupplier = (p) ->\n-                    createInputStream(p, finalDefaultFS);\n-\n@@ -262,1 +247,1 @@\n-            return new FilePublisher(path, length, inputStreamSupplier);\n+            return new FilePublisher(path, length);\n@@ -265,14 +250,1 @@\n-        private static InputStream createInputStream(Path path,\n-                                                     boolean defaultFS) {\n-            try {\n-                return defaultFS\n-                            ? new FileInputStream(path.toFile())\n-                            : Files.newInputStream(path);\n-            } catch (IOException io) {\n-                throw new UncheckedIOException(io);\n-            }\n-        }\n-\n-        private FilePublisher(Path name,\n-                              long length,\n-                              Function<Path, InputStream> inputStreamSupplier) {\n+        private FilePublisher(Path name, long length) {\n@@ -281,1 +253,0 @@\n-            this.inputStreamSupplier = inputStreamSupplier;\n@@ -289,1 +260,8 @@\n-                is = inputStreamSupplier.apply(path);\n+                \/\/ Throw `FileNotFoundException` to match the specification of `BodyPublishers::ofFile\n+                if (!Files.isRegularFile(path)) {\n+                    throw new FileNotFoundException(path + \" (Not a regular file)\");\n+                }\n+                is = Files.newInputStream(path);\n+            } catch (NoSuchFileException nsfe) {\n+                \/\/ Throw `FileNotFoundException` to match the specification of `BodyPublishers::ofFile`\n+                t = new FileNotFoundException(path + \" (No such file or directory)\");\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":11,"deletions":33,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n- * @bug 8235459\n- * @summary Confirm that HttpRequest.BodyPublishers#ofFile(Path)\n- *          assumes the default file system\n+ * @bug 8235459 8358688\n+ * @summary Verifies `HttpRequest.BodyPublishers#ofFile(Path)` against file\n+ *          systems that support `Path#toFile()` and also those that don't\n@@ -42,0 +42,1 @@\n+import java.io.FileNotFoundException;\n@@ -64,0 +65,1 @@\n+import static org.testng.Assert.fail;\n@@ -159,0 +161,21 @@\n+    @Test\n+    public void testFileNotFound() throws Exception {\n+        out.printf(\"\\n\\n--- testFileNotFound(): starting\\n\");\n+        try (FileSystem fs = newZipFs()) {\n+            Path fileInZip = zipFsFile(fs);\n+            Files.deleteIfExists(fileInZip);\n+            BodyPublishers.ofFile(fileInZip);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+        var path = Path.of(\"fileNotFound.txt\");\n+        try {\n+            Files.deleteIfExists(path);\n+            BodyPublishers.ofFile(path);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * @bug 8226303\n+ * @bug 8226303 8358688\n","filename":"test\/jdk\/java\/net\/httpclient\/RelayingPublishers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}