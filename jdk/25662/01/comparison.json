{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.io.FileInputStream;\n@@ -38,0 +37,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -51,1 +51,0 @@\n-import java.util.function.Function;\n@@ -231,1 +230,0 @@\n-        private final Function<Path, InputStream> inputStreamSupplier;\n@@ -238,1 +236,0 @@\n-            boolean defaultFS = true;\n@@ -240,8 +237,0 @@\n-            try {\n-                path.toFile().getPath();\n-            } catch (UnsupportedOperationException uoe) {\n-                \/\/ path not associated with the default file system provider\n-                defaultFS = false;\n-            }\n-\n-            \/\/ existence check must be after FS checks\n@@ -251,4 +240,0 @@\n-            boolean finalDefaultFS = defaultFS;\n-            Function<Path, InputStream> inputStreamSupplier = (p) ->\n-                    createInputStream(p, finalDefaultFS);\n-\n@@ -262,1 +247,1 @@\n-            return new FilePublisher(path, length, inputStreamSupplier);\n+            return new FilePublisher(path, length);\n@@ -265,14 +250,1 @@\n-        private static InputStream createInputStream(Path path,\n-                                                     boolean defaultFS) {\n-            try {\n-                return defaultFS\n-                            ? new FileInputStream(path.toFile())\n-                            : Files.newInputStream(path);\n-            } catch (IOException io) {\n-                throw new UncheckedIOException(io);\n-            }\n-        }\n-\n-        private FilePublisher(Path name,\n-                              long length,\n-                              Function<Path, InputStream> inputStreamSupplier) {\n+        private FilePublisher(Path name, long length) {\n@@ -281,1 +253,0 @@\n-            this.inputStreamSupplier = inputStreamSupplier;\n@@ -289,1 +260,10 @@\n-                is = inputStreamSupplier.apply(path);\n+                \/\/ The old code was using `FileInputStream::new`, which throws `FNFE` unless passed a file.\n+                \/\/ Preserving that behaviour after migrating to `Files::newInputStream`:\n+                if (!Files.isRegularFile(path)) {\n+                    throw new FileNotFoundException(path + \" (Not a regular file)\");\n+                }\n+                is = Files.newInputStream(path);\n+            } catch (NoSuchFileException nsfe) {\n+                \/\/ The old code was using `FileInputStream::new`, which throws `FNFE` if file doesn't exist.\n+                \/\/ Preserving that behaviour after migrating to `Files::newInputStream`:\n+                t = new FileNotFoundException(path + \" (No such file or directory)\");\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":13,"deletions":33,"binary":false,"changes":46,"status":"modified"}]}