{"files":[{"patch":"@@ -1635,0 +1635,2 @@\n+    } else if (VectorNode::is_move_opcode(opc)) {\n+      retValue = VectorReinterpretNode::implemented(opc, size, velt_basic_type(p0->in(1)), velt_basic_type(p0));\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,0 +166,1 @@\n+           VectorNode::is_move_opcode(opc) ||\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -574,0 +574,12 @@\n+bool VectorNode::is_move_opcode(int opc) {\n+  switch (opc) {\n+    case Op_MoveF2I:\n+    case Op_MoveD2L:\n+    case Op_MoveL2D:\n+    case Op_MoveI2F:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n@@ -1818,0 +1830,11 @@\n+bool VectorReinterpretNode::implemented(int opc, uint vlen, BasicType src_type, BasicType dst_type) {\n+  if ((src_type == T_FLOAT && dst_type == T_INT) ||\n+      (src_type == T_DOUBLE && dst_type == T_LONG) ||\n+      (src_type == T_LONG && dst_type == T_DOUBLE) ||\n+      (src_type == T_INT && dst_type == T_FLOAT)) {\n+    int vopc = Op_VectorReinterpret;\n+    return Matcher::match_rule_supported_auto_vectorization(vopc, vlen, dst_type);\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+  static bool is_move_opcode(int opc);\n@@ -1825,0 +1826,1 @@\n+  static bool implemented(int opc, uint vlen, BasicType src_type, BasicType dst_type);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-  } else if (VectorNode::is_reinterpret_opcode(opc)) {\n+  } else if (VectorNode::is_reinterpret_opcode(opc) || VectorNode::is_move_opcode(opc)) {\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-    \/\/ Would be nice to vectorize: Missing support for CmpF, CMove and MoveF2I.\n+    \/\/ Would be nice to vectorize: Missing support for CmpF and CMove.\n@@ -407,1 +407,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -410,1 +410,0 @@\n-    \/\/ Missing support for MoveF2I\n@@ -419,1 +418,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -422,1 +421,0 @@\n-    \/\/ Missing support for MoveI2F\n@@ -434,1 +432,1 @@\n-    \/\/ Missing support for Needs CmpD, CMove and MoveD2L\n+    \/\/ Missing support for needs CmpD and CMove\n@@ -443,1 +441,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -446,1 +444,0 @@\n-    \/\/ Missing support for MoveD2L\n@@ -455,1 +452,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -458,1 +455,0 @@\n-    \/\/ Missing support for MoveL2D\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 4, time = 5)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.Throughput)\n+public class VectorBitConversion {\n+    @Param({\"2048\"})\n+    public int size;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    private double[] doubles;\n+    private float[] floats;\n+    private int[] ints;\n+    private long[] longs;\n+    private double[] resultDoubles;\n+    private float[] resultFloats;\n+    private int[] resultInts;\n+    private long[] resultLongs;\n+\n+    @Setup\n+    public void init() {\n+        resultDoubles = new double[size];\n+        resultFloats = new float[size];\n+        resultInts = new int[size];\n+        resultLongs = new long[size];\n+\n+        doubles = new double[size];\n+        for (int i = 0; i < size; i++) {\n+            doubles[i] = r.nextDouble();\n+        }\n+        floats = new float[size];\n+        for (int i = 0; i < size; i++) {\n+            floats[i] = r.nextFloat();\n+        }\n+        ints = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            ints[i] = r.nextInt();\n+        }\n+        longs = new long[size];\n+        for (int i = 0; i < size; i++) {\n+            longs[i] = r.nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public long[] doubleToLongBits() {\n+        for (int i = 0; i < doubles.length; i++) {\n+            final double aDouble = doubles[i];\n+            final long bits = Double.doubleToLongBits(aDouble);\n+            resultLongs[i] = bits;\n+        }\n+        return resultLongs;\n+    }\n+\n+    @Benchmark\n+    public long[] doubleToRawLongBits() {\n+        for (int i = 0; i < doubles.length; i++) {\n+            final double v = doubles[i];\n+            final long bits = Double.doubleToRawLongBits(v);\n+            resultLongs[i] = bits;\n+        }\n+        return resultLongs;\n+    }\n+\n+    @Benchmark\n+    public int[] floatToIntBits() {\n+        for (int i = 0; i < floats.length; i++) {\n+            final float aFloat = floats[i];\n+            final int bits = Float.floatToIntBits(aFloat);\n+            resultInts[i] = bits;\n+        }\n+        return resultInts;\n+    }\n+\n+    @Benchmark\n+    public int[] floatToRawIntBits() {\n+        for (int i = 0; i < floats.length; i++) {\n+            final float aFloat = floats[i];\n+            final int bits = Float.floatToRawIntBits(aFloat);\n+            resultInts[i] = bits;\n+        }\n+        return resultInts;\n+    }\n+\n+    @Benchmark\n+    public float[] intBitsToFloat() {\n+        for (int i = 0; i < ints.length; i++) {\n+            final int bits = ints[i];\n+            final float v = Float.intBitsToFloat(bits);\n+            resultFloats[i] = v;\n+        }\n+        return resultFloats;\n+    }\n+\n+    @Benchmark\n+    public double[] longBitsToDouble() {\n+        for (int i = 0; i < longs.length; i++) {\n+            final long bits = longs[i];\n+            final double v = Double.longBitsToDouble(bits);\n+            resultDoubles[i] = v;\n+        }\n+        return resultDoubles;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/VectorBitConversion.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}