[{"commit":{"message":"Merge branch 'master' into topic.fp-bits-vector"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"e7e4d801ca9b1aede9f7c74272a142f5d39d690a"},{"commit":{"message":"Add more IR node positive assertions"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java"}],"sha":"01fd5ba0d6ca29ca6524fbc1d95df59886650b14"},{"commit":{"message":"Fix source of data for benchmarks"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TypeVectorOperations.java"}],"sha":"89d9bbb7d33edcd2971ca7a3cb7b436664a394e8"},{"commit":{"message":"Refactor benchmarks to TypeVectorOperations"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TypeVectorOperations.java"}],"sha":"cfe998c1a2f221938a0d6cae5bb3258b46ac7f7b"},{"commit":{"message":"Check at the very least that auto vectorization is supported"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"}],"sha":"147633f9b587832a0dc5ef137f6ddf9e6ba5d9e9"},{"commit":{"message":"Avoid VectorReinterpret::implemented"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"dde8699bc0363d38cdabeadae7f5e335fdc40a5f"},{"commit":{"message":"Refactor and add copyright header"},"files":[],"sha":"879eddbabb1ed5d242c528f3c5f78c093f38ca32"},{"commit":{"message":"Rephrase comment"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java"}],"sha":"1b8babdcced5cb3dcbff14aec8a1ad2a2ad6a8a9"},{"commit":{"message":"Removed unnecessary assert methods"},"files":[],"sha":"b6ec784ec6e3cf23926b5a806db1ecf490ba6d1b"},{"commit":{"message":"Adjust IR test after adding Move* vector support"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java"}],"sha":"7e0e70b03bcc471f2c4d4108cbc1541de99ce434"},{"commit":{"message":"Delete IR test because it's already covered by other test"},"files":[],"sha":"3e527c27018e6b6b17fc0128f01d37b1efda9fa2"},{"commit":{"message":"Merge branch 'master' into topic.fp-bits-vector"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"cae1f0816329e39ecc111f5973e20a45eb133214"},{"commit":{"message":"Add longBitsToDouble and intBitsToFloat"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"25199da0098b01f6b28c01ebb2801456ebcfdb35"},{"commit":{"message":"Fix test for vectorized and add floatToRawIntBits"},"files":[],"sha":"18e8ce2fe87b5501dd4e41df3bf42be4b860927a"},{"commit":{"message":"Add basic IR test"},"files":[],"sha":"2bace0c97529ed4ea6ef9c651fc3eced41b1704d"},{"commit":{"message":"Add JMH benchmark for doubleTo*LongBits"},"files":[],"sha":"d69ecad14a29c076f0386a9ad6837a650519d50c"},{"commit":{"message":"Support doubleToRawLongBits"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"61625fe8521bb715311e459f811c41563353c29c"},{"commit":{"message":"add floatToIntBits benchmark"},"files":[],"sha":"e15c143341c9fe3c93dd6a23e61b91d1ac7364fe"},{"commit":{"message":"floatToRawIntBits: switch benchmark to float"},"files":[],"sha":"8666ca0bb2d97de8176656e9b7bd72e7c16ef583"},{"commit":{"message":"floatToRawIntBits: add missing @State in benchmark"},"files":[],"sha":"4a86185f51e60efa22f176179294e3728e520ddf"},{"commit":{"message":"floatToRawIntBits: vectorized JMH microbenchmark"},"files":[],"sha":"6b1a1eb6b11a607d2c29b7ef17b8a8659ebf2444"},{"commit":{"message":"floatToRawIntBits: initial impl"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"f747a0ac8e5292047521f9ad310116659215f95f"}]