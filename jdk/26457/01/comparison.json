{"files":[{"patch":"@@ -1635,0 +1635,2 @@\n+    } else if (VectorNode::is_reinterpret_opcode(opc)) {\n+      retValue = true;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -985,0 +985,4 @@\n+    case Op_MoveF2I:\n+    case Op_MoveD2L:\n+    case Op_MoveL2D:\n+    case Op_MoveI2F:\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-    \/\/ Would be nice to vectorize: Missing support for CmpF, CMove and MoveF2I.\n+    \/\/ Would be nice to vectorize: Missing support for CmpF and CMove.\n@@ -407,1 +407,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -410,1 +410,0 @@\n-    \/\/ Missing support for MoveF2I\n@@ -419,1 +418,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -422,1 +421,0 @@\n-    \/\/ Missing support for MoveI2F\n@@ -434,1 +432,1 @@\n-    \/\/ Missing support for Needs CmpD, CMove and MoveD2L\n+    \/\/ Missing support to vectorize CmpD and CMove\n@@ -443,1 +441,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -446,1 +444,0 @@\n-    \/\/ Missing support for MoveD2L\n@@ -455,1 +452,1 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n@@ -458,1 +455,0 @@\n-    \/\/ Missing support for MoveL2D\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2025 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 5)\n+@Measurement(iterations = 4, time = 5)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.Throughput)\n+public class VectorBitConversion {\n+    @Param({\"2048\"})\n+    public int size;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    private double[] doubles;\n+    private float[] floats;\n+    private int[] ints;\n+    private long[] longs;\n+    private double[] resultDoubles;\n+    private float[] resultFloats;\n+    private int[] resultInts;\n+    private long[] resultLongs;\n+\n+    @Setup\n+    public void init() {\n+        resultDoubles = new double[size];\n+        resultFloats = new float[size];\n+        resultInts = new int[size];\n+        resultLongs = new long[size];\n+\n+        doubles = new double[size];\n+        for (int i = 0; i < size; i++) {\n+            doubles[i] = r.nextDouble();\n+        }\n+        floats = new float[size];\n+        for (int i = 0; i < size; i++) {\n+            floats[i] = r.nextFloat();\n+        }\n+        ints = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            ints[i] = r.nextInt();\n+        }\n+        longs = new long[size];\n+        for (int i = 0; i < size; i++) {\n+            longs[i] = r.nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public long[] doubleToLongBits() {\n+        for (int i = 0; i < doubles.length; i++) {\n+            final double aDouble = doubles[i];\n+            final long bits = Double.doubleToLongBits(aDouble);\n+            resultLongs[i] = bits;\n+        }\n+        return resultLongs;\n+    }\n+\n+    @Benchmark\n+    public long[] doubleToRawLongBits() {\n+        for (int i = 0; i < doubles.length; i++) {\n+            final double v = doubles[i];\n+            final long bits = Double.doubleToRawLongBits(v);\n+            resultLongs[i] = bits;\n+        }\n+        return resultLongs;\n+    }\n+\n+    @Benchmark\n+    public int[] floatToIntBits() {\n+        for (int i = 0; i < floats.length; i++) {\n+            final float aFloat = floats[i];\n+            final int bits = Float.floatToIntBits(aFloat);\n+            resultInts[i] = bits;\n+        }\n+        return resultInts;\n+    }\n+\n+    @Benchmark\n+    public int[] floatToRawIntBits() {\n+        for (int i = 0; i < floats.length; i++) {\n+            final float aFloat = floats[i];\n+            final int bits = Float.floatToRawIntBits(aFloat);\n+            resultInts[i] = bits;\n+        }\n+        return resultInts;\n+    }\n+\n+    @Benchmark\n+    public float[] intBitsToFloat() {\n+        for (int i = 0; i < ints.length; i++) {\n+            final int bits = ints[i];\n+            final float v = Float.intBitsToFloat(bits);\n+            resultFloats[i] = v;\n+        }\n+        return resultFloats;\n+    }\n+\n+    @Benchmark\n+    public double[] longBitsToDouble() {\n+        for (int i = 0; i < longs.length; i++) {\n+            final long bits = longs[i];\n+            final double v = Double.longBitsToDouble(bits);\n+            resultDoubles[i] = v;\n+        }\n+        return resultDoubles;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitConversion.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}