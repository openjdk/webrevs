{"files":[{"patch":"@@ -407,1 +407,3 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\",\n+                  IRNode.STORE_VECTOR, \"> 0\",\n+                  IRNode.VECTOR_REINTERPRET, \"> 0\"},\n@@ -418,1 +420,3 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.STORE_VECTOR, \"> 0\",\n+                  IRNode.VECTOR_REINTERPRET, \"> 0\"},\n@@ -441,1 +445,3 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\",\n+                  IRNode.STORE_VECTOR, \"> 0\",\n+                  IRNode.VECTOR_REINTERPRET, \"> 0\"},\n@@ -452,1 +458,3 @@\n-    @IR(counts = {IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.STORE_VECTOR, \"> 0\",\n+                  IRNode.VECTOR_REINTERPRET, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestCompatibleUseDefTypeSize.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025 IBM Corporation. All rights reserved.\n@@ -265,0 +266,14 @@\n+    @Benchmark\n+    public void convertD2LBits() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resL[i] = Double.doubleToLongBits(doubles[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void convertD2LBitsRaw() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resL[i] = Double.doubleToRawLongBits(doubles[i]);\n+        }\n+    }\n+\n@@ -272,0 +287,14 @@\n+    @Benchmark\n+    public void convertF2IBits() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resI[i] = Float.floatToIntBits(floats[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void convertF2IBitsRaw() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resI[i] = (int) Float.floatToRawIntBits(floats[i]);\n+        }\n+    }\n+\n@@ -307,0 +336,7 @@\n+    @Benchmark\n+    public void convertIBits2F() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resF[i] = Float.intBitsToFloat(ints[i]);\n+        }\n+    }\n+\n@@ -328,0 +364,7 @@\n+    @Benchmark\n+    public void convertLBits2D() {\n+        for (int i = 0; i < COUNT; i++) {\n+            resD[i] = Double.longBitsToDouble(longs[i]);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TypeVectorOperations.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (c) 2025 IBM Corporation. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.vm.compiler;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n-\n-@Warmup(iterations = 3, time = 5)\n-@Measurement(iterations = 4, time = 5)\n-@Fork(2)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@State(Scope.Thread)\n-@BenchmarkMode(Mode.Throughput)\n-public class VectorBitConversion {\n-    @Param({\"2048\"})\n-    public int size;\n-\n-    @Param(\"0\")\n-    private int seed;\n-    private Random r = new Random(seed);\n-\n-    private double[] doubles;\n-    private float[] floats;\n-    private int[] ints;\n-    private long[] longs;\n-    private double[] resultDoubles;\n-    private float[] resultFloats;\n-    private int[] resultInts;\n-    private long[] resultLongs;\n-\n-    @Setup\n-    public void init() {\n-        resultDoubles = new double[size];\n-        resultFloats = new float[size];\n-        resultInts = new int[size];\n-        resultLongs = new long[size];\n-\n-        doubles = new double[size];\n-        for (int i = 0; i < size; i++) {\n-            doubles[i] = r.nextDouble();\n-        }\n-        floats = new float[size];\n-        for (int i = 0; i < size; i++) {\n-            floats[i] = r.nextFloat();\n-        }\n-        ints = new int[size];\n-        for (int i = 0; i < size; i++) {\n-            ints[i] = r.nextInt();\n-        }\n-        longs = new long[size];\n-        for (int i = 0; i < size; i++) {\n-            longs[i] = r.nextLong();\n-        }\n-    }\n-\n-    @Benchmark\n-    public long[] doubleToLongBits() {\n-        for (int i = 0; i < doubles.length; i++) {\n-            final double aDouble = doubles[i];\n-            final long bits = Double.doubleToLongBits(aDouble);\n-            resultLongs[i] = bits;\n-        }\n-        return resultLongs;\n-    }\n-\n-    @Benchmark\n-    public long[] doubleToRawLongBits() {\n-        for (int i = 0; i < doubles.length; i++) {\n-            final double v = doubles[i];\n-            final long bits = Double.doubleToRawLongBits(v);\n-            resultLongs[i] = bits;\n-        }\n-        return resultLongs;\n-    }\n-\n-    @Benchmark\n-    public int[] floatToIntBits() {\n-        for (int i = 0; i < floats.length; i++) {\n-            final float aFloat = floats[i];\n-            final int bits = Float.floatToIntBits(aFloat);\n-            resultInts[i] = bits;\n-        }\n-        return resultInts;\n-    }\n-\n-    @Benchmark\n-    public int[] floatToRawIntBits() {\n-        for (int i = 0; i < floats.length; i++) {\n-            final float aFloat = floats[i];\n-            final int bits = Float.floatToRawIntBits(aFloat);\n-            resultInts[i] = bits;\n-        }\n-        return resultInts;\n-    }\n-\n-    @Benchmark\n-    public float[] intBitsToFloat() {\n-        for (int i = 0; i < ints.length; i++) {\n-            final int bits = ints[i];\n-            final float v = Float.intBitsToFloat(bits);\n-            resultFloats[i] = v;\n-        }\n-        return resultFloats;\n-    }\n-\n-    @Benchmark\n-    public double[] longBitsToDouble() {\n-        for (int i = 0; i < longs.length; i++) {\n-            final long bits = longs[i];\n-            final double v = Double.longBitsToDouble(bits);\n-            resultDoubles[i] = v;\n-        }\n-        return resultDoubles;\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorBitConversion.java","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"}]}