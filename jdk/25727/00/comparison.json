{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.util.List;\n@@ -43,0 +44,1 @@\n+import java.util.Objects;\n@@ -47,0 +49,1 @@\n+import java.util.function.Supplier;\n@@ -350,2 +353,2 @@\n-                ClassLoader cl = ClassLoader.getSystemClassLoader();\n-                ServiceLoader<CharsetProvider> sl =\n+                final ClassLoader cl = ClassLoader.getSystemClassLoader();\n+                final ServiceLoader<CharsetProvider> sl =\n@@ -353,1 +356,1 @@\n-                Iterator<CharsetProvider> i = sl.iterator();\n+                final Iterator<CharsetProvider> i = sl.iterator();\n@@ -377,4 +380,0 @@\n-                public void remove() {\n-                    throw new UnsupportedOperationException();\n-                }\n-\n@@ -384,3 +383,2 @@\n-    private static class ThreadTrackHolder {\n-        static final ThreadTracker TRACKER = new ThreadTracker();\n-    }\n+    private static final Supplier<ThreadTracker> TRACKER = StableValue.supplier(\n+            new Supplier<>() { public ThreadTracker get() { return new ThreadTracker(); }});\n@@ -389,1 +387,1 @@\n-        return ThreadTrackHolder.TRACKER.tryBegin();\n+        return TRACKER.get().tryBegin();\n@@ -393,1 +391,1 @@\n-        ThreadTrackHolder.TRACKER.end(key);\n+        TRACKER.get().end(key);\n@@ -428,7 +426,7 @@\n-    private static class ExtendedProviderHolder {\n-        static final CharsetProvider[] extendedProviders = extendedProviders();\n-        \/\/ returns ExtendedProvider, if installed\n-        private static CharsetProvider[] extendedProviders() {\n-            CharsetProvider[] cps = new CharsetProvider[1];\n-            int n = 0;\n-            ServiceLoader<CharsetProvider> sl =\n+    private static final Supplier<List<CharsetProvider>> EXTENDED_PROVIDERS = StableValue.supplier(\n+            new Supplier<>() { public List<CharsetProvider> get() { return extendedProviders0(); }});\n+\n+    private static List<CharsetProvider> extendedProviders0() {\n+        CharsetProvider[] cps = new CharsetProvider[1];\n+        int n = 0;\n+        final ServiceLoader<CharsetProvider> sl =\n@@ -436,5 +434,3 @@\n-            for (CharsetProvider cp : sl) {\n-                if (n + 1 > cps.length) {\n-                    cps = Arrays.copyOf(cps, cps.length << 1);\n-                }\n-                cps[n++] = cp;\n+        for (CharsetProvider cp : sl) {\n+            if (n + 1 > cps.length) {\n+                cps = Arrays.copyOf(cps, cps.length << 1);\n@@ -442,1 +438,1 @@\n-            return n == cps.length ? cps : Arrays.copyOf(cps, n);\n+            cps[n++] = cp;\n@@ -444,0 +440,1 @@\n+        return List.of(n == cps.length ? cps : Arrays.copyOf(cps, n));\n@@ -449,2 +446,1 @@\n-        CharsetProvider[] ecps = ExtendedProviderHolder.extendedProviders;\n-        for (CharsetProvider cp : ecps) {\n+        for (CharsetProvider cp : EXTENDED_PROVIDERS.get()) {\n@@ -611,2 +607,1 @@\n-        CharsetProvider[] ecps = ExtendedProviderHolder.extendedProviders;\n-        for (CharsetProvider ecp :ecps) {\n+        for (CharsetProvider ecp : EXTENDED_PROVIDERS.get()) {\n@@ -622,1 +617,8 @@\n-    private @Stable static Charset defaultCharset;\n+    private static final Supplier<Charset> defaultCharset = StableValue.supplier(\n+            new Supplier<>() { public Charset get() { return defaultCharset0(); }});\n+\n+    private static Charset defaultCharset0() {\n+        return Objects.requireNonNullElse(\n+                standardProvider.charsetForName(StaticProperty.fileEncoding()),\n+                sun.nio.cs.UTF_8.INSTANCE);\n+    }\n@@ -643,11 +645,1 @@\n-        if (defaultCharset == null) {\n-            synchronized (Charset.class) {\n-                \/\/ do not look for providers other than the standard one\n-                Charset cs = standardProvider.charsetForName(StaticProperty.fileEncoding());\n-                if (cs != null)\n-                    defaultCharset = cs;\n-                else\n-                    defaultCharset = sun.nio.cs.UTF_8.INSTANCE;\n-            }\n-        }\n-        return defaultCharset;\n+        return defaultCharset.get();\n@@ -659,0 +651,1 @@\n+    @Stable\n@@ -660,2 +653,2 @@\n-    private final String[] aliases;     \/\/ tickles a bug in oldjavac\n-    private Set<String> aliasSet;\n+    @Stable\n+    private final Set<String> aliasSet;\n@@ -677,6 +670,1 @@\n-        String[] as =\n-            aliases == null ?\n-                zeroAliases :\n-                VM.isSystemDomainLoader(getClass().getClassLoader()) ?\n-                    aliases :\n-                    Arrays.copyOf(aliases, aliases.length);\n+        final String[] as = Objects.requireNonNullElse(aliases, zeroAliases);\n@@ -690,2 +678,2 @@\n-            for (int i = 0; i < as.length; i++) {\n-                checkName(as[i]);\n+            for (String a : as) {\n+                checkName(a);\n@@ -695,1 +683,1 @@\n-        this.aliases = as;\n+        this.aliasSet = Set.of(as);\n@@ -713,6 +701,1 @@\n-        Set<String> set = this.aliasSet;\n-        if (set == null) {\n-            set = Set.of(aliases);\n-            this.aliasSet = set;\n-        }\n-        return set;\n+        return aliasSet;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset.java","additions":41,"deletions":58,"binary":false,"changes":99,"status":"modified"}]}