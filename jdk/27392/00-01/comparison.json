{"files":[{"patch":"@@ -405,1 +405,1 @@\n-         * result of a successful subtask only after it has {@linkplain #join() joined}.\n+         * result of a successful subtask after it has {@linkplain #join() joined}.\n@@ -411,0 +411,4 @@\n+         * <p> This method may be invoked by any thread after the scope owner has joined.\n+         * The only case where this method can be used to get the result before the scope\n+         * owner has joined is when called from the {@code onComplete(Subtask)} method.\n+         *\n@@ -412,3 +416,3 @@\n-         * @throws IllegalStateException if the subtask has not completed, did not complete\n-         * successfully, or the current thread is the scope owner invoking this\n-         * method before {@linkplain #join() joining}\n+         * @throws IllegalStateException if the subtask has not completed or did not\n+         * complete successfully, or this method if invoked outside the context of the\n+         * {@code onComplete(Subtask)} method before the owner thread has joined\n@@ -427,1 +431,1 @@\n-         * exception thrown by a failed subtask only after it has {@linkplain #join() joined}.\n+         * exception thrown by a failed subtask after it has {@linkplain #join() joined}.\n@@ -433,3 +437,7 @@\n-         * @throws IllegalStateException if the subtask has not completed, completed with\n-         * a result, or the current thread is the scope owner invoking this method\n-         * before {@linkplain #join() joining}\n+         * <p> This method may be invoked by any thread after the scope owner has joined.\n+         * The only case where this method can be used to get the exception before the scope\n+         * owner has joined is when called from the {@code onComplete(Subtask)} method.\n+         *\n+         * @throws IllegalStateException if the subtask has not completed or completed\n+         * with a result, or this method if invoked outside the context of the {@code\n+         * onComplete(Subtask)} method before the owner thread has joined\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -46,3 +47,2 @@\n-    \/\/ state, only accessed by owner thread\n-    private static final int ST_NEW            = 0,\n-                             ST_FORKED         = 1,   \/\/ subtasks forked, need to join\n+    \/\/ scope state, set by owner thread, read by any thread\n+    private static final int ST_FORKED         = 1,   \/\/ subtasks forked, need to join\n@@ -52,4 +52,1 @@\n-    private int state;\n-\n-    \/\/ timer task, only accessed by owner thread\n-    private Future<?> timerTask;\n+    private volatile int state;\n@@ -60,0 +57,3 @@\n+    \/\/ timer task, only accessed by owner thread\n+    private Future<?> timerTask;\n+\n@@ -70,1 +70,0 @@\n-        this.state = ST_NEW;\n@@ -112,2 +111,1 @@\n-     * Throws IllegalStateException if invoked by the owner thread and the owner thread\n-     * has not joined.\n+     * Returns true if join has been invoked and there is an outcome.\n@@ -115,4 +113,2 @@\n-    private void ensureJoinedIfOwner() {\n-        if (Thread.currentThread() == flock.owner() && state < ST_JOIN_STARTED) {\n-            throw new IllegalStateException(\"join not called\");\n-        }\n+    private boolean isJoinCompleted() {\n+        return state >= ST_JOIN_COMPLETED;\n@@ -188,1 +184,2 @@\n-        if (state > ST_FORKED) {\n+        int s = state;\n+        if (s > ST_FORKED) {\n@@ -207,0 +204,1 @@\n+            subtask.setThread(thread);\n@@ -216,1 +214,3 @@\n-        state = ST_FORKED;\n+        if (s < ST_FORKED) {\n+            state = ST_FORKED;\n+        }\n@@ -233,3 +233,0 @@\n-        \/\/ join started\n-        state = ST_JOIN_STARTED;\n-\n@@ -237,1 +234,6 @@\n-        flock.awaitAll();\n+        try {\n+            flock.awaitAll();\n+        } catch (InterruptedException e) {\n+            state = ST_JOIN_STARTED;  \/\/ joining not completed, prevent new forks\n+            throw e;\n+        }\n@@ -310,0 +312,1 @@\n+        @Stable private Thread thread;\n@@ -316,0 +319,18 @@\n+        \/**\n+         * Sets the thread for this subtask.\n+         *\/\n+        void setThread(Thread thread) {\n+            assert thread.getState() == Thread.State.NEW;\n+            this.thread = thread;\n+        }\n+\n+        \/**\n+         * Throws IllegalStateException if the caller thread is not the subtask and\n+         * the scope owner has not joined.\n+         *\/\n+        private void ensureJoinedIfNotSubtask() {\n+            if (Thread.currentThread() != thread && !scope.isJoinCompleted()) {\n+                throw new IllegalStateException();\n+            }\n+        }\n+\n@@ -318,0 +339,4 @@\n+            if (Thread.currentThread() != thread) {\n+                throw new WrongThreadException();\n+            }\n+\n@@ -354,1 +379,1 @@\n-            scope.ensureJoinedIfOwner();\n+            ensureJoinedIfNotSubtask();\n@@ -369,1 +394,1 @@\n-            scope.ensureJoinedIfOwner();\n+            ensureJoinedIfNotSubtask();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScopeImpl.java","additions":47,"deletions":22,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -1127,1 +1127,0 @@\n-\n@@ -1130,1 +1129,1 @@\n-            \/\/ before join\n+            \/\/ before join, owner thread\n@@ -1134,0 +1133,4 @@\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n+\n@@ -1136,1 +1139,0 @@\n-            \/\/ after join\n@@ -1138,0 +1140,2 @@\n+\n+            \/\/ after join, owner thread\n@@ -1140,0 +1144,4 @@\n+\n+            \/\/ after join, another thread\n+            assertEquals(\"foo\", callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n@@ -1154,1 +1162,1 @@\n-            \/\/ before join\n+            \/\/ before join, owner thread\n@@ -1158,0 +1166,4 @@\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n+\n@@ -1160,1 +1172,0 @@\n-            \/\/ after join\n@@ -1162,0 +1173,2 @@\n+\n+            \/\/ after join, owner thread\n@@ -1164,0 +1177,4 @@\n+\n+            \/\/ after join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertTrue(callInOtherThread(subtask::exception) instanceof FooException);\n@@ -1179,2 +1196,0 @@\n-\n-            \/\/ before join\n@@ -1182,0 +1197,2 @@\n+\n+            \/\/ before join, owner thread\n@@ -1185,0 +1202,4 @@\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n+\n@@ -1189,1 +1210,0 @@\n-            \/\/ after join\n@@ -1191,0 +1211,2 @@\n+\n+            \/\/ after join, owner thread\n@@ -1193,0 +1215,4 @@\n+\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n@@ -1208,2 +1234,1 @@\n-            \/\/ before join\n-            assertEquals(Subtask.State.UNAVAILABLE, subtask.state());\n+            \/\/ before join, owner thread\n@@ -1213,0 +1238,4 @@\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n+\n@@ -1215,1 +1244,0 @@\n-            \/\/ after join\n@@ -1217,0 +1245,2 @@\n+\n+            \/\/ after join, owner thread\n@@ -1219,0 +1249,4 @@\n+\n+            \/\/ before join, another thread\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::get));\n+            assertThrows(IllegalStateException.class, () -> callInOtherThread(subtask::exception));\n@@ -1990,0 +2024,34 @@\n+    \/**\n+     * Calls a result returning task from another thread.\n+     *\/\n+    private <V> V callInOtherThread(Callable<V> task) throws Exception {\n+        var result = new AtomicReference<V>();\n+        var exc = new AtomicReference<Exception>();\n+        Thread thread = Thread.ofVirtual().start(() -> {\n+            try {\n+                result.set(task.call());\n+            } catch (Exception e) {\n+                exc.set(e);\n+            }\n+        });\n+        boolean interrupted = false;\n+        boolean terminated = false;\n+        while (!terminated) {\n+            try {\n+                thread.join();\n+                terminated = true;\n+            } catch (InterruptedException e) {\n+                interrupted = true;\n+            }\n+        }\n+        if (interrupted) {\n+            Thread.currentThread().interrupt();\n+        }\n+        Exception e = exc.get();\n+        if (e != null) {\n+            throw e;\n+        } else {\n+            return result.get();\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/StructuredTaskScope\/StructuredTaskScopeTest.java","additions":79,"deletions":11,"binary":false,"changes":90,"status":"modified"}]}