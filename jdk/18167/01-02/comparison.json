{"files":[{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package org.openjdk.bench.vm.compiler;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Benchmark)\n-@Warmup(iterations = 8, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 8, time = 2, timeUnit = TimeUnit.SECONDS)\n-public abstract class C1PreserveFramePointer {\n-\n-    @Benchmark\n-    public long calculate() {\n-        return calculate(12345678L);\n-    }\n-\n-    public static long calculate(long x) {\n-        long v0 = x + 1L;\n-        long v1 = x + 2L;\n-        long v2 = x + 3L;\n-        long v3 = x + 4L;\n-        long v4 = x + 5L;\n-        long v5 = x + 6L;\n-        long v6 = x + 7L;\n-        long v7 = x + 8L;\n-        long v8 = x + 9L;\n-        long v9 = x + 10L;\n-        long v10 = x + 11L;\n-        long v11 = x + 12L;\n-        long v12 = x + 13L;\n-        return v0 + v1 + v2 + v3 + v4 + v5 + v6 +\n-               v7 + v8 + v9 + v10 + v11 + v12;\n-    }\n-\n-    @Fork(value = 2, jvmArgsPrepend = { \"-XX:+PreserveFramePointer\", \"-XX:-Inline\", \"-XX:TieredStopAtLevel=1\"})\n-    public static class WithPreserveFramePointer extends C1PreserveFramePointer {}\n-\n-    @Fork(value = 2, jvmArgsPrepend = { \"-XX:-PreserveFramePointer\", \"-XX:-Inline\", \"-XX:TieredStopAtLevel=1\"})\n-    public static class WithoutPreserveFramePointer extends C1PreserveFramePointer {}\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/C1PreserveFramePointer.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"}]}