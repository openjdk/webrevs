{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.io.ByteArrayInputStream;\n@@ -37,0 +38,1 @@\n+import java.lang.classfile.ClassHierarchyResolver;\n@@ -88,3 +90,1 @@\n-        super.load(Stream.of(cbcs)\n-                .map(cbc -> new ClassBytecodes(cbc.name(), instrument(cbc.bytecodes())))\n-                .toArray(ClassBytecodes[]::new));\n+        super.load(instrument(cbcs));\n@@ -98,2 +98,20 @@\n-    private static byte[] instrument(byte[] classFile) {\n-        var cc = ClassFile.of();\n+    private static ClassBytecodes[] instrument(ClassBytecodes[] cbcs) {\n+        var cc = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(\n+                ClassHierarchyResolver.defaultResolver().orElse(\n+                        ClassHierarchyResolver.ofResourceParsing(cd -> {\n+                            String cName = cd.descriptorString();\n+                            cName = cName.substring(1, cName.length() - 1).replace('\/', '.');\n+                            for (ClassBytecodes cbc : cbcs) {\n+                                if (cName.equals(cbc.name())) {\n+                                    return new ByteArrayInputStream(cbc.bytecodes());\n+                                }\n+                            }\n+                            return null;\n+                        }))));\n+\n+        return Stream.of(cbcs)\n+                .map(cbc -> new ClassBytecodes(cbc.name(), instrument(cc, cbc.bytecodes())))\n+                .toArray(ClassBytecodes[]::new);\n+    }\n+\n+    private static byte[] instrument(ClassFile cc, byte[] classFile) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8366926\n+ * @summary Verify the instrumenation class hierarchy resolution works properly in local execution mode\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build KullaTesting\n+ * @run junit\/othervm LocalExecutionInstrumentationCHRTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class LocalExecutionInstrumentationCHRTest extends ReplToolTesting {\n+\n+    @Test\n+    public void verifyMyClassFoundOnClassPath() {\n+        test(new String[] { \"--execution\", \"local\" },\n+            a -> assertCommand(a, \"public interface TestInterface {}\", \"|  created interface TestInterface\"),\n+            a -> assertCommand(a,\n+                      \"public class TestClass {\"\n+                        + \"public TestInterface foo(boolean b) {\"\n+                            + \"TestInterface test; \"\n+                            + \"if (b) {\"\n+                                + \"test = new TestInterfaceImpl1();\"\n+                            + \"} else {\"\n+                                + \"test = new TestInterfaceImpl2();\"\n+                            + \"}\"\n+                            + \"return test;\"\n+                        + \"}\"\n+                        + \"private class TestInterfaceImpl1 implements TestInterface {}\"\n+                        + \"private class TestInterfaceImpl2 implements TestInterface {}\"\n+                    + \"}\", \"|  created class TestClass\"),\n+            a -> assertCommand(a, \"new TestClass().foo(true).getClass();\", \"$3 ==> class TestClass$TestInterfaceImpl1\"),\n+            a -> assertCommand(a, \"new TestClass().foo(false).getClass();\", \"$4 ==> class TestClass$TestInterfaceImpl2\")\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionInstrumentationCHRTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}