{"files":[{"patch":"@@ -279,4 +279,1 @@\n-  if (!_object.is_null()) {\n-    \/\/ Release object's oop storage if it hasn't already been done.\n-    release_object();\n-  }\n+  _object.release(_oop_storage);\n@@ -287,3 +284,0 @@\n-  if (_object.is_null()) {\n-    return nullptr;\n-  }\n@@ -294,3 +288,0 @@\n-  if (_object.is_null()) {\n-    return nullptr;\n-  }\n@@ -591,3 +582,0 @@\n-  \/\/ Release object's oop storage since the ObjectMonitor has been deflated:\n-  release_object();\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -367,1 +367,0 @@\n-  void      release_object() { _object.release(_oop_storage); }\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1584,1 +1584,2 @@\n-static size_t delete_monitors(GrowableArray<ObjectMonitor*>* delete_list) {\n+static size_t delete_monitors(JavaThread* current, GrowableArray<ObjectMonitor*>* delete_list,\n+                              LogStream* ls, elapsedTimer* timer_p) {\n@@ -1586,1 +1587,1 @@\n-  size_t count = 0;\n+  size_t deleted_count = 0;\n@@ -1589,1 +1590,4 @@\n-    count++;\n+    deleted_count++;\n+    \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n+    ObjectSynchronizer::chk_for_block_req(current, \"deletion\", \"deleted_count\",\n+                                          deleted_count, ls, timer_p);\n@@ -1591,1 +1595,1 @@\n-  return count;\n+  return deleted_count;\n@@ -1665,24 +1669,1 @@\n-    if (current->is_Java_thread()) {\n-      if (ls != NULL) {\n-        timer.stop();\n-        ls->print_cr(\"before setting blocked: unlinked_count=\" SIZE_FORMAT\n-                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     unlinked_count, in_use_list_ceiling(),\n-                     _in_use_list.count(), _in_use_list.max());\n-      }\n-      \/\/ Mark the calling JavaThread blocked (safepoint safe) while we free\n-      \/\/ the ObjectMonitors so we don't delay safepoints whilst doing that.\n-      ThreadBlockInVM tbivm(JavaThread::cast(current));\n-      if (ls != NULL) {\n-        ls->print_cr(\"after setting blocked: in_use_list stats: ceiling=\"\n-                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-        timer.start();\n-      }\n-      deleted_count = delete_monitors(&delete_list);\n-      \/\/ ThreadBlockInVM is destroyed here\n-    } else {\n-      \/\/ A non-JavaThread can just free the ObjectMonitors:\n-      deleted_count = delete_monitors(&delete_list);\n-    }\n+    deleted_count = delete_monitors(JavaThread::cast(current), &delete_list, ls, &timer);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"}]}