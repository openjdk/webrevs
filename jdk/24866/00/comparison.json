{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @test\n- * @summary Dump time resolution of constant pool entries.\n+ * @test id=static\n+ * @summary Dump time resolution of constant pool entries (Static CDS archive).\n@@ -39,1 +39,20 @@\n- * @run driver ResolvedConstants\n+ * @run driver ResolvedConstants STATIC\n+ *\/\n+\n+\/*\n+ * @test id=dynamic\n+ * @summary Dump time resolution of constant pool entries (Dynamic CDS archive)\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/\n+ * @build OldProvider OldClass OldConsumer StringConcatTestOld\n+ * @build ResolvedConstants\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *                 ResolvedConstantsApp ResolvedConstantsFoo ResolvedConstantsBar\n+ *                 MyInterface InterfaceWithClinit NormalClass\n+ *                 OldProvider OldClass OldConsumer SubOfOldClass\n+ *                 StringConcatTest StringConcatTestOld\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Dcds.app.tester.workflow=DYNAMIC -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. ResolvedConstants DYNAMIC\n@@ -45,0 +64,1 @@\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n@@ -55,2 +75,2 @@\n-        test(false);\n-        test(true);\n+        test(args, false);\n+        test(args, true);\n@@ -59,1 +79,1 @@\n-    static void test(boolean testMode) throws Exception {\n+    static void test(String[] args, boolean testMode) throws Exception {\n@@ -61,15 +81,0 @@\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass)\n-            .assertNormalExit(output -> {\n-                output.shouldContain(\"Hello ResolvedConstantsApp\");\n-            });\n-\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", appJar,\n-                       \"-Xlog:cds+resolve=trace\",\n-                       \"-Xlog:cds+class=debug\");\n-        if (aotClassLinking) {\n-            opts.addPrefix(\"-XX:+AOTClassLinking\");\n-        } else {\n-            opts.addPrefix(\"-XX:-AOTClassLinking\");\n-        }\n@@ -77,2 +82,14 @@\n-        OutputAnalyzer out = CDSTestUtils.createArchiveAndCheck(opts);\n-          \/\/ Class References ---\n+        SimpleCDSAppTester.of(\"ResolvedConstantsApp\" + (aotClassLinking ? \"1\" : \"0\"))\n+            .addVmArgs(aotClassLinking ? \"-XX:+AOTClassLinking\" : \"-XX:-AOTClassLinking\",\n+                       \"-Xlog:cds+resolve=trace\",\n+                       \"-Xlog:cds+class=debug\")\n+            .classpath(appJar)\n+            .appCommandLine(mainClass)\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    checkAssemblyOutput(args, out);\n+                })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Hello ResolvedConstantsApp\");\n+                })\n+            .run(args);\n+    }\n@@ -80,0 +97,2 @@\n+    static void checkAssemblyOutput(String args[], OutputAnalyzer out) {\n+        testGroup(\"Class References\", out)\n@@ -81,1 +100,1 @@\n-        out.shouldMatch(ALWAYS(\"klass.* ResolvedConstantsApp app => ResolvedConstantsApp app\"))\n+            .shouldMatch(ALWAYS(\"klass.* ResolvedConstantsApp app => ResolvedConstantsApp app\"))\n@@ -95,3 +114,1 @@\n-            .shouldMatch(AOTLINK_ONLY(\"klass.* ResolvedConstantsApp .*java\/lang\/System\"))\n-\n-          \/\/ Field References ---\n+            .shouldMatch(AOTLINK_ONLY(\"klass.* ResolvedConstantsApp .*java\/lang\/System\"));\n@@ -99,0 +116,1 @@\n+        testGroup(\"Field References\", out)\n@@ -111,1 +129,1 @@\n-            .shouldMatch(AOTLINK_ONLY(\"field.* ResolvedConstantsApp => ResolvedConstantsBar.b:I\"))\n+            .shouldMatch(AOTLINK_ONLY(\"field.* ResolvedConstantsApp => ResolvedConstantsBar.b:I\"));\n@@ -113,1 +131,4 @@\n-          \/\/ Method References ---\n+        if (args[0].equals(\"DYNAMIC\")) {\n+            \/\/ AOT resolution of CP methods\/indy references is not implemeted\n+            return;\n+        }\n@@ -115,0 +136,1 @@\n+        testGroup(\"Method References\", out)\n@@ -151,1 +173,2 @@\n-            out.shouldContain(\"Cannot aot-resolve Lambda proxy because OldConsumer is excluded\")\n+            testGroup(\"Indy References\", out)\n+               .shouldContain(\"Cannot aot-resolve Lambda proxy because OldConsumer is excluded\")\n@@ -173,0 +196,5 @@\n+\n+    static OutputAnalyzer testGroup(String name, OutputAnalyzer out) {\n+        System.out.println(\"Checking for: \" + name);\n+        return out;\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/ResolvedConstants.java","additions":59,"deletions":31,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -176,0 +176,5 @@\n+\n+    public SimpleCDSAppTester run(String args[])  throws Exception {\n+        (new Tester(name)).run(args);\n+        return this;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/SimpleCDSAppTester.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}