{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -63,1 +64,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -610,42 +610,0 @@\n-double percent_of(double component_cpu_time, double process_cpu_time) {\n-  return process_cpu_time == 0 ? 0 : 100 * component_cpu_time \/ process_cpu_time;\n-}\n-\n-void CollectedHeap::log_cpu_time() const {\n-  LogTarget(Info, cpu) cpuLog;\n-  if (!os::is_thread_cpu_time_supported() || !cpuLog.is_enabled()) {\n-    return;\n-  }\n-\n-  double process_cpu_time = os::elapsed_process_cpu_time();\n-  if (process_cpu_time == 0 || process_cpu_time == -1) {\n-    \/\/ 0 can happen e.g. for short running processes with\n-    \/\/ low CPU utilization\n-    return;\n-  }\n-\n-  double vm_thread_cpu_time = (double) CPUTimeUsage::Runtime::vm_thread() \/ NANOSECS_PER_SEC;\n-  CPUTimeUsage::GCStatistics gc_stats = CPUTimeUsage::GC::statisics();\n-  double gc_cpu_time = (double) gc_stats.total \/ NANOSECS_PER_SEC;\n-  double gc_threads_cpu_time = (double) gc_stats.gc_threads \/ NANOSECS_PER_SEC;\n-  double gc_vm_thread_cpu_time = (double) gc_stats.vm_thread \/ NANOSECS_PER_SEC;\n-\n-  if (gc_cpu_time < process_cpu_time) {\n-    cpuLog.print(\"=== CPU time Statistics =============================================================\");\n-    cpuLog.print(\"                                                                            CPUs\");\n-    cpuLog.print(\"                                                               s       %%  utilized\");\n-    cpuLog.print(\"   Process\");\n-    cpuLog.print(\"     Total                        %30.4f  %6.2f  %8.1f\", process_cpu_time, 100.0, process_cpu_time \/ os::elapsedTime());\n-    cpuLog.print(\"     VM Thread                    %30.4f  %6.2f  %8.1f\", vm_thread_cpu_time, percent_of(vm_thread_cpu_time, process_cpu_time), vm_thread_cpu_time \/ os::elapsedTime());\n-    cpuLog.print(\"     Garbage Collection           %30.4f  %6.2f  %8.1f\", gc_cpu_time, percent_of(gc_cpu_time, process_cpu_time), gc_cpu_time \/ os::elapsedTime());\n-    cpuLog.print(\"       GC Threads                 %30.4f  %6.2f  %8.1f\", gc_threads_cpu_time, percent_of(gc_threads_cpu_time, process_cpu_time), gc_threads_cpu_time \/ os::elapsedTime());\n-    cpuLog.print(\"       VM Thread                  %30.4f  %6.2f  %8.1f\", gc_vm_thread_cpu_time, percent_of(gc_vm_thread_cpu_time, process_cpu_time), gc_vm_thread_cpu_time \/ os::elapsedTime());\n-\n-    if (UseStringDeduplication) {\n-      double string_dedup_cpu_time = (double) gc_stats.stringdedup \/ NANOSECS_PER_SEC;\n-      cpuLog.print(\"       String Deduplication       %30.4f  %6.2f  %8.1f\", string_dedup_cpu_time, percent_of(string_dedup_cpu_time, process_cpu_time), string_dedup_cpu_time \/ os::elapsedTime());\n-    }\n-    cpuLog.print(\"=====================================================================================\");\n-  }\n-}\n-\n@@ -655,2 +613,0 @@\n-  log_cpu_time();\n-\n@@ -659,0 +615,12 @@\n+\n+  \/\/ Print GC\/heap related information.\n+  Log(gc, exit) log;\n+  if (log.is_info()) {\n+    LogStream ls_info(log.info());\n+    Universe::print_on(&ls_info);\n+    if (log.is_trace()) {\n+      LogStream ls_trace(log.trace());\n+      MutexLocker mcld(ClassLoaderDataGraph_lock);\n+      ClassLoaderDataGraph::print_on(&ls_trace);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":13,"deletions":45,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -1303,0 +1304,44 @@\n+static void log_cpu_time() {\n+  LogTarget(Info, cpu) cpuLog;\n+  if (!cpuLog.is_enabled()) {\n+    return;\n+  }\n+\n+  const double process_cpu_time = os::elapsed_process_cpu_time();\n+  if (process_cpu_time == 0 || process_cpu_time == -1) {\n+    \/\/ 0 can happen e.g. for short running processes with\n+    \/\/ low CPU utilization\n+    return;\n+  }\n+\n+  const double vm_thread_cpu_time = (double) CPUTimeUsage::Runtime::vm_thread() \/ NANOSECS_PER_SEC;\n+  CPUTimeUsage::GCStatistics gc_stats = CPUTimeUsage::GC::statisics();\n+  const double gc_cpu_time = (double) gc_stats.total \/ NANOSECS_PER_SEC;\n+  const double gc_threads_cpu_time = (double) gc_stats.gc_threads \/ NANOSECS_PER_SEC;\n+  const double gc_vm_thread_cpu_time = (double) gc_stats.vm_thread \/ NANOSECS_PER_SEC;\n+\n+  const double elasped_time = os::elapsedTime();\n+\n+  if (gc_cpu_time < process_cpu_time) {\n+    cpuLog.print(\"=== CPU time Statistics =============================================================\");\n+    cpuLog.print(\"                                                                            CPUs\");\n+    cpuLog.print(\"                                                               s       %%  utilized\");\n+    cpuLog.print(\"   Process\");\n+    cpuLog.print(\"     Total                        %30.4f  %6.2f  %8.1f\", process_cpu_time, 100.0, process_cpu_time \/ elasped_time);\n+    cpuLog.print(\"     VM Thread                    %30.4f  %6.2f  %8.1f\", vm_thread_cpu_time, percent_of(vm_thread_cpu_time, process_cpu_time), vm_thread_cpu_time \/ elasped_time);\n+    cpuLog.print(\"     Garbage Collection           %30.4f  %6.2f  %8.1f\", gc_cpu_time, percent_of(gc_cpu_time, process_cpu_time), gc_cpu_time \/ elasped_time);\n+    cpuLog.print(\"       GC Threads                 %30.4f  %6.2f  %8.1f\", gc_threads_cpu_time, percent_of(gc_threads_cpu_time, process_cpu_time), gc_threads_cpu_time \/ elasped_time);\n+    cpuLog.print(\"       VM Thread                  %30.4f  %6.2f  %8.1f\", gc_vm_thread_cpu_time, percent_of(gc_vm_thread_cpu_time, process_cpu_time), gc_vm_thread_cpu_time \/ elasped_time);\n+\n+    if (UseStringDeduplication) {\n+      double string_dedup_cpu_time = (double) gc_stats.stringdedup \/ NANOSECS_PER_SEC;\n+      cpuLog.print(\"       String Deduplication       %30.4f  %6.2f  %8.1f\", string_dedup_cpu_time, percent_of(string_dedup_cpu_time, process_cpu_time), string_dedup_cpu_time \/ elasped_time);\n+    }\n+    cpuLog.print(\"=====================================================================================\");\n+  }\n+}\n+\n+void Universe::before_exit() {\n+  log_cpu_time();\n+  heap()->before_exit();\n+}\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -299,0 +299,2 @@\n+  static void before_exit();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -478,13 +478,1 @@\n-  Universe::heap()->before_exit();\n-\n-  \/\/ Print GC\/heap related information.\n-  Log(gc, exit) log;\n-  if (log.is_info()) {\n-    LogStream ls_info(log.info());\n-    Universe::print_on(&ls_info);\n-    if (log.is_trace()) {\n-      LogStream ls_trace(log.trace());\n-      MutexLocker mcld(ClassLoaderDataGraph_lock);\n-      ClassLoaderDataGraph::print_on(&ls_trace);\n-    }\n-  }\n+  Universe::before_exit();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"}]}