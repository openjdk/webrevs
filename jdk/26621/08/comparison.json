{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -58,0 +59,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -204,28 +206,0 @@\n-class CPUTimeThreadClosure : public ThreadClosure {\n-private:\n-  jlong _cpu_time = 0;\n-\n-public:\n-  virtual void do_thread(Thread* thread) {\n-    jlong cpu_time = os::thread_cpu_time(thread);\n-    if (cpu_time != -1) {\n-      _cpu_time += cpu_time;\n-    }\n-  }\n-  jlong cpu_time() { return _cpu_time; };\n-};\n-\n-double CollectedHeap::elapsed_gc_cpu_time() const {\n-  double string_dedup_cpu_time = UseStringDeduplication ?\n-    os::thread_cpu_time((Thread*)StringDedup::_processor->_thread) : 0;\n-\n-  if (string_dedup_cpu_time == -1) {\n-    string_dedup_cpu_time = 0;\n-  }\n-\n-  CPUTimeThreadClosure cl;\n-  gc_threads_do(&cl);\n-\n-  return (double)(cl.cpu_time() + _vmthread_cpu_time + string_dedup_cpu_time) \/ NANOSECS_PER_SEC;\n-}\n-\n@@ -636,24 +610,0 @@\n-void CollectedHeap::log_gc_cpu_time() const {\n-  LogTarget(Info, gc, cpu) out;\n-  if (os::is_thread_cpu_time_supported() && out.is_enabled()) {\n-    double process_cpu_time = os::elapsed_process_cpu_time();\n-    double gc_cpu_time = elapsed_gc_cpu_time();\n-\n-    if (process_cpu_time == -1 || gc_cpu_time == -1) {\n-      log_warning(gc, cpu)(\"Could not sample CPU time\");\n-      return;\n-    }\n-\n-    double usage;\n-    if (gc_cpu_time > process_cpu_time ||\n-        process_cpu_time == 0 || gc_cpu_time == 0) {\n-      \/\/ This can happen e.g. for short running processes with\n-      \/\/ low CPU utilization\n-      usage = 0;\n-    } else {\n-      usage = 100 * gc_cpu_time \/ process_cpu_time;\n-    }\n-    out.print(\"GC CPU usage: %.2f%% (Process: %.4fs GC: %.4fs)\", usage, process_cpu_time, gc_cpu_time);\n-  }\n-}\n-\n@@ -663,3 +613,0 @@\n-  \/\/ Log GC CPU usage.\n-  log_gc_cpu_time();\n-\n@@ -668,0 +615,12 @@\n+\n+  \/\/ Print GC\/heap related information.\n+  Log(gc, exit) log;\n+  if (log.is_info()) {\n+    LogStream ls_info(log.info());\n+    Universe::print_on(&ls_info);\n+    if (log.is_trace()) {\n+      LogStream ls_trace(log.trace());\n+      MutexLocker mcld(ClassLoaderDataGraph_lock);\n+      ClassLoaderDataGraph::print_on(&ls_trace);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":14,"deletions":55,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -92,0 +93,1 @@\n+  friend class CPUTimeUsage::GC;\n@@ -432,1 +434,1 @@\n-  void log_gc_cpu_time() const;\n+  void log_cpu_time() const;\n@@ -466,2 +468,0 @@\n-  double elapsed_gc_cpu_time() const;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -108,1 +109,0 @@\n-class CollectedHeap;\n@@ -119,1 +119,1 @@\n-  friend class CollectedHeap;\n+  friend class CPUTimeUsage::GC;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -32,1 +33,0 @@\n-class CollectedHeap;\n@@ -46,1 +46,1 @@\n-  friend class CollectedHeap;\n+  friend class CPUTimeUsage::GC;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -89,0 +90,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -1303,0 +1305,48 @@\n+static void log_cpu_time() {\n+  LogTarget(Info, cpu) cpuLog;\n+  if (!cpuLog.is_enabled()) {\n+    return;\n+  }\n+\n+  const double process_cpu_time = os::elapsed_process_cpu_time();\n+  if (process_cpu_time == 0 || process_cpu_time == -1) {\n+    \/\/ 0 can happen e.g. for short running processes with\n+    \/\/ low CPU utilization\n+    return;\n+  }\n+\n+  const double vm_thread_cpu_time = (double) CPUTimeUsage::Runtime::vm_thread() \/ NANOSECS_PER_SEC;\n+  CPUTimeUsage::GCStatistics gc_stats = CPUTimeUsage::GC::statisics();\n+  const double gc_cpu_time = (double) gc_stats.total \/ NANOSECS_PER_SEC;\n+  const double gc_threads_cpu_time = (double) gc_stats.gc_threads \/ NANOSECS_PER_SEC;\n+  const double gc_vm_thread_cpu_time = (double) gc_stats.vm_thread \/ NANOSECS_PER_SEC;\n+\n+  const double elasped_time = os::elapsedTime();\n+  const bool has_error = CPUTimeUsage::Error::has_error();\n+\n+  if (gc_cpu_time < process_cpu_time) {\n+    cpuLog.print(\"=== CPU time Statistics =============================================================\");\n+    if (has_error) {\n+      cpuLog.print(\"WARNING: CPU time sampling reported errors, numbers may be unreliable\");\n+    }\n+    cpuLog.print(\"                                                                            CPUs\");\n+    cpuLog.print(\"                                                               s       %%  utilized\");\n+    cpuLog.print(\"   Process\");\n+    cpuLog.print(\"     Total                        %30.4f  %6.2f  %8.1f\", process_cpu_time, 100.0, process_cpu_time \/ elasped_time);\n+    cpuLog.print(\"     VM Thread                    %30.4f  %6.2f  %8.1f\", vm_thread_cpu_time, percent_of(vm_thread_cpu_time, process_cpu_time), vm_thread_cpu_time \/ elasped_time);\n+    cpuLog.print(\"     Garbage Collection           %30.4f  %6.2f  %8.1f\", gc_cpu_time, percent_of(gc_cpu_time, process_cpu_time), gc_cpu_time \/ elasped_time);\n+    cpuLog.print(\"       GC Threads                 %30.4f  %6.2f  %8.1f\", gc_threads_cpu_time, percent_of(gc_threads_cpu_time, process_cpu_time), gc_threads_cpu_time \/ elasped_time);\n+    cpuLog.print(\"       VM Thread                  %30.4f  %6.2f  %8.1f\", gc_vm_thread_cpu_time, percent_of(gc_vm_thread_cpu_time, process_cpu_time), gc_vm_thread_cpu_time \/ elasped_time);\n+\n+    if (UseStringDeduplication) {\n+      double string_dedup_cpu_time = (double) gc_stats.stringdedup \/ NANOSECS_PER_SEC;\n+      cpuLog.print(\"       String Deduplication       %30.4f  %6.2f  %8.1f\", string_dedup_cpu_time, percent_of(string_dedup_cpu_time, process_cpu_time), string_dedup_cpu_time \/ elasped_time);\n+    }\n+    cpuLog.print(\"=====================================================================================\");\n+  }\n+}\n+\n+void Universe::before_exit() {\n+  log_cpu_time();\n+  heap()->before_exit();\n+}\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -299,0 +299,2 @@\n+  static void before_exit();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -478,13 +478,1 @@\n-  Universe::heap()->before_exit();\n-\n-  \/\/ Print GC\/heap related information.\n-  Log(gc, exit) log;\n-  if (log.is_info()) {\n-    LogStream ls_info(log.info());\n-    Universe::print_on(&ls_info);\n-    if (log.is_trace()) {\n-      LogStream ls_trace(log.trace());\n-      MutexLocker mcld(ClassLoaderDataGraph_lock);\n-      ClassLoaderDataGraph::print_on(&ls_trace);\n-    }\n-  }\n+  Universe::before_exit();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"logging\/logStream.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"logging\/logStream.hpp\"\n@@ -49,1 +49,0 @@\n-#include \"runtime\/vmThread.hpp\"\n@@ -51,0 +50,1 @@\n+#include \"runtime\/vmThread.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/perfDataTypes.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"runtime\/perfDataTypes.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"gc\/shared\/collectedHeap.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedupProcessor.hpp\"\n+#include \"memory\/universe.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"runtime\/perfData.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n+#include \"services\/cpuTimeUsage.hpp\"\n+\n+volatile bool CPUTimeUsage::Error::_has_error = false;\n+\n+class CPUTimeThreadClosure : public ThreadClosure {\n+private:\n+  jlong _cpu_time = 0;\n+\n+public:\n+  virtual void do_thread(Thread* thread) {\n+    jlong cpu_time = os::thread_cpu_time(thread);\n+    if (cpu_time != -1) {\n+      _cpu_time += cpu_time;\n+    } else {\n+      CPUTimeUsage::Error::mark_error();\n+    }\n+  }\n+  jlong cpu_time() { return _cpu_time; };\n+};\n+\n+jlong CPUTimeUsage::GC::vm_thread() {\n+  return Universe::heap()->_vmthread_cpu_time;\n+}\n+\n+jlong CPUTimeUsage::GC::gc_threads() {\n+  CPUTimeThreadClosure cl;\n+  Universe::heap()->gc_threads_do(&cl);\n+  return cl.cpu_time();\n+}\n+\n+CPUTimeUsage::GCStatistics CPUTimeUsage::GC::statisics() {\n+  jlong gc_threads_sample = gc_threads();\n+  jlong vm_thread_sample = vm_thread();\n+  jlong stringdedup_sample = stringdedup();\n+  return {\n+    gc_threads_sample + vm_thread_sample + stringdedup_sample,\n+    gc_threads_sample,\n+    vm_thread_sample,\n+    stringdedup_sample\n+  };\n+}\n+\n+jlong CPUTimeUsage::GC::total() {\n+  return gc_threads() + vm_thread() + stringdedup();\n+}\n+\n+jlong CPUTimeUsage::GC::stringdedup() {\n+  if (UseStringDeduplication) {\n+    jlong cpu_time = os::thread_cpu_time((Thread*)StringDedup::_processor->_thread);\n+    if (cpu_time == -1) {\n+      CPUTimeUsage::Error::mark_error();\n+    }\n+    return cpu_time;\n+  }\n+  return 0;\n+}\n+\n+jlong CPUTimeUsage::Runtime::vm_thread() {\n+  return VMThread::perf_accumulated_vm_operation_time()->get_value();\n+}\n+\n+bool CPUTimeUsage::Error::has_error() {\n+  return Atomic::load(&_has_error);\n+}\n+\n+void CPUTimeUsage::Error::mark_error() {\n+  Atomic::store(&_has_error, true);\n+}\n","filename":"src\/hotspot\/share\/services\/cpuTimeUsage.cpp","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_SERVICES_CPUTIMEUSAGE_HPP\n+#define SHARE_SERVICES_CPUTIMEUSAGE_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\n+namespace CPUTimeUsage {\n+  struct GCStatistics {\n+    jlong total;\n+    jlong gc_threads;\n+    jlong vm_thread;\n+    jlong stringdedup;\n+  };\n+\n+  class GC : public AllStatic {\n+  public:\n+    static GCStatistics statisics();\n+\n+    static jlong total();\n+    static jlong gc_threads();\n+    static jlong vm_thread();\n+    static jlong stringdedup();\n+  };\n+\n+  class Runtime : public AllStatic {\n+  public:\n+    static jlong vm_thread();\n+  };\n+\n+  class Error : public AllStatic {\n+  private:\n+    static volatile bool _has_error;\n+\n+  public:\n+    static bool has_error();\n+    static void mark_error();\n+  };\n+}\n+\n+#endif \/\/ SHARE_SERVICES_CPUTIMEUSAGE_HPP\n","filename":"src\/hotspot\/share\/services\/cpuTimeUsage.hpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}