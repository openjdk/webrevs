{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import jdk.internal.foreign.LayoutPath.PathElementImpl.PathKind;\n@@ -850,1 +849,7 @@\n-    sealed interface PathElement permits LayoutPath.PathElementImpl {\n+    sealed interface PathElement\n+            permits LayoutPath.DereferenceElement,\n+            LayoutPath.GroupElementByIndex,\n+            LayoutPath.GroupElementByName,\n+            LayoutPath.SequenceElement,\n+            LayoutPath.SequenceElementByIndex,\n+            LayoutPath.SequenceElementByRange {\n@@ -865,4 +870,1 @@\n-            Objects.requireNonNull(name);\n-            return new LayoutPath.PathElementImpl(PathKind.GROUP_ELEMENT,\n-                                                  path -> path.groupElement(name),\n-                                                  \"groupElement(\\\"\" + name + \"\\\")\");\n+            return new LayoutPath.GroupElementByName(name);\n@@ -879,6 +881,1 @@\n-            if (index < 0) {\n-                throw new IllegalArgumentException(\"Index < 0\");\n-            }\n-            return new LayoutPath.PathElementImpl(PathKind.GROUP_ELEMENT,\n-                                                  path -> path.groupElement(index),\n-                                                  \"groupElement(\" + index + \")\");\n+            return new LayoutPath.GroupElementByIndex(index);\n@@ -895,6 +892,1 @@\n-            if (index < 0) {\n-                throw new IllegalArgumentException(\"Index must be positive: \" + index);\n-            }\n-            return new LayoutPath.PathElementImpl(PathKind.SEQUENCE_ELEMENT_INDEX,\n-                                                  path -> path.sequenceElement(index),\n-                                                  \"sequenceElement(\" + index + \")\");\n+            return new LayoutPath.SequenceElementByIndex(index);\n@@ -926,9 +918,1 @@\n-            if (start < 0) {\n-                throw new IllegalArgumentException(\"Start index must be positive: \" + start);\n-            }\n-            if (step == 0) {\n-                throw new IllegalArgumentException(\"Step must be != 0: \" + step);\n-            }\n-            return new LayoutPath.PathElementImpl(PathKind.SEQUENCE_RANGE,\n-                                                  path -> path.sequenceElement(start, step),\n-                                                  \"sequenceElement(\" + start + \", \" + step + \")\");\n+            return new LayoutPath.SequenceElementByRange(start, step);\n@@ -946,3 +930,1 @@\n-            return new LayoutPath.PathElementImpl(PathKind.SEQUENCE_ELEMENT,\n-                                                  LayoutPath::sequenceElement,\n-                                                  \"sequenceElement()\");\n+            return LayoutPath.SequenceElement.instance();\n@@ -956,3 +938,1 @@\n-            return new LayoutPath.PathElementImpl(PathKind.DEREF_ELEMENT,\n-                                                  LayoutPath::derefElement,\n-                                                  \"dereferenceElement()\");\n+            return LayoutPath.DereferenceElement.instance();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":14,"deletions":34,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -366,5 +366,2 @@\n-    \/**\n-     * This class provides an immutable implementation for the {@code PathElement} interface. A path element implementation\n-     * is simply a pointer to one of the selector methods provided by the {@code LayoutPath} class.\n-     *\/\n-    public static final class PathElementImpl implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+    public record GroupElementByName(String name)\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n@@ -372,6 +369,30 @@\n-        public enum PathKind {\n-            SEQUENCE_ELEMENT(\"unbound sequence element\"),\n-            SEQUENCE_ELEMENT_INDEX(\"bound sequence element\"),\n-            SEQUENCE_RANGE(\"sequence range\"),\n-            GROUP_ELEMENT(\"group element\"),\n-            DEREF_ELEMENT(\"dereference element\");\n+        \/\/ Assert invariants\n+        public GroupElementByName {\n+            Objects.requireNonNull(name);\n+        }\n+\n+        @Override\n+        public LayoutPath apply(LayoutPath layoutPath) {\n+            return layoutPath.groupElement(name);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"groupElement(\\\"\" + name + \"\\\")\";\n+        }\n+    }\n+\n+    public record GroupElementByIndex(long index)\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+\n+        \/\/ Assert invariants\n+        public GroupElementByIndex {\n+            if (index < 0) {\n+                throw new IllegalArgumentException(\"Index < 0\");\n+            }\n+        }\n+\n+        @Override\n+        public LayoutPath apply(LayoutPath layoutPath) {\n+            return layoutPath.groupElement(index);\n+        }\n@@ -379,1 +400,4 @@\n-            final String description;\n+        @Override\n+        public String toString() {\n+            return \"groupElement(\" + index + \")\";\n+        }\n@@ -381,2 +405,9 @@\n-            PathKind(String description) {\n-                this.description = description;\n+    }\n+\n+    public record SequenceElementByIndex(long index)\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+\n+        \/\/ Assert invariants\n+        public SequenceElementByIndex {\n+            if (index < 0) {\n+                throw new IllegalArgumentException(\"Index < 0\");\n@@ -384,0 +415,16 @@\n+        }\n+\n+        @Override\n+        public LayoutPath apply(LayoutPath layoutPath) {\n+            return layoutPath.sequenceElement(index);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"sequenceElement(\" + index + \")\";\n+        }\n+\n+    }\n+\n+    public record SequenceElementByRange(long start, long step)\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n@@ -385,2 +432,7 @@\n-            public String description() {\n-                return description;\n+        \/\/ Assert invariants\n+        public SequenceElementByRange {\n+            if (start < 0) {\n+                throw new IllegalArgumentException(\"Start index must be positive: \" + start);\n+            }\n+            if (step == 0) {\n+                throw new IllegalArgumentException(\"Step must be != 0: \" + step);\n@@ -390,3 +442,26 @@\n-        final PathKind kind;\n-        final UnaryOperator<LayoutPath> pathOp;\n-        final String stringRepresentation;\n+        @Override\n+        public LayoutPath apply(LayoutPath layoutPath) {\n+            return layoutPath.sequenceElement(start, step);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"sequenceElement(\" + start + \", \" + step + \")\";\n+        }\n+\n+    }\n+\n+    public static final class SequenceElement\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+\n+        private static final SequenceElement INSTANCE = new SequenceElement();\n+\n+        @Override\n+        public LayoutPath apply(LayoutPath layoutPath) {\n+            return layoutPath.sequenceElement();\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return 31;\n+        }\n@@ -394,6 +469,7 @@\n-        public PathElementImpl(PathKind kind,\n-                               UnaryOperator<LayoutPath> pathOp,\n-                               String stringRepresentation) {\n-            this.kind = kind;\n-            this.pathOp = pathOp;\n-            this.stringRepresentation = stringRepresentation;\n+        @Override\n+        public String toString() {\n+            return \"sequenceElement()\";\n+        }\n+\n+        public static MemoryLayout.PathElement instance() {\n+            return INSTANCE;\n@@ -402,0 +478,7 @@\n+    }\n+\n+    public static final class DereferenceElement\n+            implements MemoryLayout.PathElement, UnaryOperator<LayoutPath> {\n+\n+        private static final DereferenceElement INSTANCE = new DereferenceElement();\n+\n@@ -404,1 +487,1 @@\n-            return pathOp.apply(layoutPath);\n+            return layoutPath.derefElement();\n@@ -407,2 +490,3 @@\n-        public PathKind kind() {\n-            return kind;\n+        @Override\n+        public int hashCode() {\n+            return 63;\n@@ -413,1 +497,1 @@\n-            return stringRepresentation;\n+            return \"dereferenceElement()\";\n@@ -415,0 +499,5 @@\n+\n+        public static MemoryLayout.PathElement instance() {\n+            return INSTANCE;\n+        }\n+\n@@ -416,0 +505,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":120,"deletions":30,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import jdk.internal.foreign.LayoutPath.PathElementImpl.PathKind;\n@@ -43,1 +42,0 @@\n-import java.util.EnumSet;\n@@ -48,0 +46,1 @@\n+import java.util.function.UnaryOperator;\n@@ -177,1 +176,2 @@\n-                EnumSet.of(PathKind.SEQUENCE_ELEMENT, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n+                Set.of(LayoutPath.SequenceElement.class, LayoutPath.SequenceElementByRange.class, LayoutPath.DereferenceElement.class),\n+                elements);\n@@ -182,1 +182,2 @@\n-                EnumSet.of(PathKind.DEREF_ELEMENT), elements);\n+                Set.of(LayoutPath.DereferenceElement.class),\n+                elements);\n@@ -200,1 +201,2 @@\n-                Set.of(PathKind.DEREF_ELEMENT), elements);\n+                Set.of(LayoutPath.DereferenceElement.class),\n+                elements);\n@@ -205,1 +207,2 @@\n-                EnumSet.of(PathKind.SEQUENCE_ELEMENT_INDEX, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n+                Set.of(LayoutPath.SequenceElementByIndex.class, LayoutPath.SequenceElementByRange.class, LayoutPath.DereferenceElement.class),\n+                elements);\n@@ -209,1 +212,1 @@\n-                                       Set<PathKind> badKinds, PathElement... elements) {\n+                                       Set<Class<?>> badTypes, PathElement... elements) {\n@@ -212,3 +215,3 @@\n-            LayoutPath.PathElementImpl pathElem = (LayoutPath.PathElementImpl)Objects.requireNonNull(e);\n-            if (badKinds.contains(pathElem.kind())) {\n-                throw new IllegalArgumentException(String.format(\"Invalid %s selection in layout path\", pathElem.kind().description()));\n+            Objects.requireNonNull(e);\n+            if (badTypes.contains(e.getClass())) {\n+                throw new IllegalArgumentException(\"Invalid selection in layout path: \" + e);\n@@ -216,1 +219,3 @@\n-            path = pathElem.apply(path);\n+            @SuppressWarnings(\"unchecked\")\n+            UnaryOperator<LayoutPath> pathOp = (UnaryOperator<LayoutPath>) e;\n+            path = pathOp.apply(path);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"}]}