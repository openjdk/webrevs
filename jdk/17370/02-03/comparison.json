{"files":[{"patch":"@@ -47,1 +47,1 @@\n-  if (!can_represent_sync(reg)) {\n+  if (!RegMask::can_represent(reg, Compile::current()->sync_stack_slots())) {\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,7 +60,0 @@\n-  \/\/ Check if a RegMask is big enough to represent a synchronization entry at\n-  \/\/ the index reg. Analogous to can_represent and can_represent_arg in\n-  \/\/ regmask.hpp.\n-  static bool can_represent_sync(OptoReg::Name reg) {\n-    return (int)reg < (int)(RegMask::CHUNK_SIZE - 1 - Compile::current()->sync_stack_slots());\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -362,5 +363,4 @@\n-  static bool can_represent(OptoReg::Name reg) {\n-    \/\/ NOTE: -1 in computation reflects the usage of the last\n-    \/\/       bit of the regmask as an infinite stack flag and\n-    \/\/       -7 is to keep mask aligned for largest value (VecZ).\n-    return (int)reg < (int)(CHUNK_SIZE - 1);\n+  static bool can_represent(OptoReg::Name reg, unsigned int size = 1) {\n+    \/\/ NOTE: MAX2(1U,size) in computation reflects the usage of the last\n+    \/\/       bit of the regmask as an infinite stack flag.\n+    return (int)reg < (int)(CHUNK_SIZE - MAX2(1U,size));\n@@ -369,1 +369,1 @@\n-    \/\/ NOTE: -SlotsPerVecZ in computation reflects the need\n+    \/\/ NOTE: SlotsPerVecZ in computation reflects the need\n@@ -371,1 +371,1 @@\n-    return (int)reg < (int)(CHUNK_SIZE - SlotsPerVecZ);\n+    return can_represent(reg, SlotsPerVecZ);\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}