{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3472,0 +3472,2 @@\n+  \/\/ Check for bailout after new BoxLockNode\n+  if (failing()) { return nullptr; }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,4 @@\n+  if (!can_represent_sync(reg)) {\n+    Compile::current()->record_method_not_compilable(\"must be able to represent all monitor slots in reg mask\");\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,0 +60,7 @@\n+  \/\/ Check if a RegMask is big enough to represent a synchronization entry at\n+  \/\/ the index reg. Analogous to can_represent and can_represent_arg in\n+  \/\/ regmask.hpp.\n+  static bool can_represent_sync(OptoReg::Name reg) {\n+    return (int)reg < (int)(RegMask::CHUNK_SIZE - 1 - Compile::current()->sync_stack_slots());\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,0 +228,2 @@\n+    \/\/ Check for bailout after new BoxLockNode\n+    if (failing()) { return; }\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8322996\n+ * @summary Ensure no assert error in C2 with deeply nested synchronize\n+ *          statements.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.c2.TestNestedSynchronize::test\n+ *                   -XX:-TieredCompilation -Xcomp\n+ *                   compiler.c2.TestNestedSynchronize\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestNestedSynchronize {\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+\n+    public static void test() {\n+\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+        synchronized (TestNestedSynchronize.class) {\n+\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestNestedSynchronize.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"}]}