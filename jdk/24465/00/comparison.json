{"files":[{"patch":"@@ -268,3 +268,1 @@\n-            if (isRegularFile) {\n-                path = path.toRealPath();\n-            } else if (Files.isDirectory(path)) {\n+            if (!isRegularFile && Files.isDirectory(path)) {\n@@ -272,2 +270,0 @@\n-            } else {\n-                path = path.toAbsolutePath();\n@@ -275,0 +271,10 @@\n+            \/\/ For path canonicalization, we prefer\n+            \/\/ java.io.File::getCanonicalPath over\n+            \/\/ java.nio.file.Path::toRealPath because of the following reasons:\n+            \/\/   1. In Windows, File::getCanonicalPath handles restricted\n+            \/\/      permissions in parent directories. Contrarily,\n+            \/\/      Path::toRealPath fails with AccessDeniedException.\n+            \/\/   2. In Linux, File::getCanonicalPath handles non-regular files\n+            \/\/      (e.g. \/dev\/stdin). Contrarily, Path::toRealPath fails with\n+            \/\/      NoSuchFileException.\n+            path = Path.of(path.toFile().getCanonicalPath());\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryType;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @summary Ensures java.security is loadable in Windows, even when the user\n+ * does not have permissions on one of the parent directories.\n+ * @bug 8352728\n+ * @requires os.family == \"windows\"\n+ * @library \/test\/lib\n+ * @run main ConfigFileTestDirPermissions\n+ *\/\n+\n+public class ConfigFileTestDirPermissions {\n+    public static void main(String[] args) throws Exception {\n+        Path temp = Files.createTempDirectory(\"JDK-8352728-tmp-\");\n+        try {\n+            \/\/ Copy the jdk to a different directory\n+            Path originalJdk = Path.of(System.getProperty(\"test.jdk\"));\n+            Path jdk = temp.resolve(\"jdk-parent-dir\", \"jdk\");\n+            Files.createDirectories(jdk);\n+            FileUtils.copyDirectory(originalJdk, jdk);\n+\n+            \/\/ Remove current user permissions from jdk-parent-dir\n+            Path parent = jdk.getParent();\n+            AclFileAttributeView view = Files.getFileAttributeView(parent,\n+                    AclFileAttributeView.class);\n+            List<AclEntry> originalAcl = List.copyOf(view.getAcl());\n+            view.setAcl(List.of(AclEntry.newBuilder().setType(AclEntryType.DENY)\n+                    .setPrincipal(Files.getOwner(parent)).build()));\n+\n+            try {\n+                \/\/ Make sure the permissions are affecting the current user\n+                try {\n+                    jdk.toRealPath();\n+                    throw new jtreg.SkippedException(\"Must run non-elevated!\");\n+                } catch (IOException expected) { }\n+\n+                \/\/ Execute the copied jdk, ensuring java.security.Security is\n+                \/\/ loaded (i.e. use -XshowSettings:security:properties)\n+                ProcessTools.executeProcess(new ProcessBuilder(\n+                        List.of(jdk.resolve(\"bin\", \"java.exe\").toString(),\n+                                \"-Djava.security.debug=properties\",\n+                                \"-XshowSettings:security:properties\",\n+                                \"-version\"))).shouldHaveExitValue(0);\n+            } finally {\n+                view.setAcl(originalAcl);\n+            }\n+        } finally {\n+            FileUtils.deleteFileTreeUnchecked(temp);\n+        }\n+\n+        System.out.println(\"TEST PASS - OK\");\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTestDirPermissions.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}