{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,0 +256,4 @@\n+                    \/\/ Inside loadFromPath, we have performed symlinks\n+                    \/\/ resolution on currentFile under the rationale that\n+                    \/\/ the original file writer is the one who decided\n+                    \/\/ where the relative includes should resolve.\n@@ -268,3 +272,1 @@\n-            if (isRegularFile) {\n-                path = path.toRealPath();\n-            } else if (Files.isDirectory(path)) {\n+            if (!isRegularFile && Files.isDirectory(path)) {\n@@ -272,2 +274,0 @@\n-            } else {\n-                path = path.toAbsolutePath();\n@@ -275,0 +275,5 @@\n+            \/\/ JDK-8352728: we prefer java.io.File::getCanonicalFile over\n+            \/\/ java.nio.file.Path::toRealPath because the former is more\n+            \/\/ fault-tolerant, since the canonical form of a pathname is\n+            \/\/ specified to exist even for nonexistent\/inaccessible files.\n+            path = path.toFile().getCanonicalFile().toPath();\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.FileUtils;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryType;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.util.List;\n+\n+import static java.nio.file.StandardOpenOption.APPEND;\n+\n+\/*\n+ * @test\n+ * @summary Ensures java.security is loadable in Windows and filesystem\n+ * soft-links are resolved, even when the user does not have permissions\n+ * on one of the parent directories.\n+ * @bug 8352728\n+ * @requires os.family == \"windows\"\n+ * @library \/test\/lib\n+ * @run main ConfigFileTestDirPermissions\n+ *\/\n+\n+public class ConfigFileTestDirPermissions {\n+    private static final String LF = System.lineSeparator();\n+    private static final String TEST_PROPERTY =\n+            \"test.property.name=test_property_value\";\n+\n+    \/\/ Unlike symbolic links, directory junctions do not require elevation\n+    private static void createJunction(Path target, Path link)\n+            throws IOException, InterruptedException {\n+        if (!Files.isDirectory(target)) {\n+            throw new IOException(\"The target must be a directory: \" + target);\n+        }\n+        int exitCode =\n+                new ProcessBuilder(\"cmd\", \"\/c\", \"MKLINK\", \"\/J\", link.toString(),\n+                        target.toString()).inheritIO().start().waitFor();\n+        if (exitCode != 0) {\n+            throw new IOException(\"Unexpected exit code: \" + exitCode);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path temp = Files.createTempDirectory(\"JDK-8352728-tmp-\");\n+        \/\/ We will create the following directories structure:\n+        \/\/\n+        \/\/ üìÅ JDK-8352728-tmp-*\/\n+        \/\/ ‚îú‚îÄüîí jdk-parent-dir\/         (ACL with REMOVED-PERMISSIONS)\n+        \/\/ ‚îÇ ‚îî‚îÄüìÅ jdk\/\n+        \/\/ ‚îÇ   ‚îú‚îÄüìÅ conf\/\n+        \/\/ ‚îÇ   ‚îÇ ‚îú‚îÄüìÅ security\/\n+        \/\/ ‚îÇ   ‚îÇ ‚îÇ ‚îú‚îÄüìÑ java.security\n+        \/\/ ‚îÇ   ‚îÇ ‚îÇ ‚îÇ    üìù include link-to-other-dir\/other.properties\n+        \/\/ ‚îÇ   ‚îÇ ‚îÇ ‚îú‚îÄüîó link-to-other-dir\/ ‚üπ üìÅ JDK-8352728-tmp-*\/other-dir\n+        \/\/ ‚îÇ   ‚îÇ ‚îÇ ‚îî‚îÄ...               (JUNCTION)\n+        \/\/ ‚îÇ   ‚îÇ ‚îî‚îÄ...\n+        \/\/ ‚îÇ   ‚îî‚îÄ...\n+        \/\/ ‚îú‚îÄüìÅ other-dir\/\n+        \/\/ ‚îÇ ‚îî‚îÄüìÑ other.properties\n+        \/\/ ‚îÇ      üìù include ..\/relatively.included.properties\n+        \/\/ ‚îî‚îÄüìÑ relatively.included.properties\n+        \/\/      üìù test.property.name=test_property_value\n+        try {\n+            \/\/ Copy the jdk to a different directory\n+            Path originalJdk = Path.of(System.getProperty(\"test.jdk\"));\n+            Path jdk = temp.resolve(\"jdk-parent-dir\", \"jdk\");\n+            Files.createDirectories(jdk);\n+            FileUtils.copyDirectory(originalJdk, jdk);\n+\n+            \/\/ Create a properties file with a relative include in it\n+            Path otherDir = temp.resolve(\"other-dir\");\n+            Files.createDirectories(otherDir);\n+            Path other = otherDir.resolve(\"other.properties\");\n+            Path included = temp.resolve(\"relatively.included.properties\");\n+            Files.writeString(included, TEST_PROPERTY + LF);\n+            Files.writeString(other,\n+                    \"include ..\/\" + included.getFileName() + LF);\n+\n+            \/\/ Create a junction to the properties file dir, from the jdk dir\n+            Path javaSec = jdk.resolve(\"conf\", \"security\", \"java.security\");\n+            Path linkDir = javaSec.resolveSibling(\"link-to-other-dir\");\n+            createJunction(otherDir, linkDir);\n+\n+            \/\/ Include the properties file from java.security (through the link)\n+            Files.writeString(javaSec,\n+                    LF + \"include \" + linkDir.getFileName() + \"\/\" +\n+                            other.getFileName() + LF, APPEND);\n+\n+            \/\/ Remove current user permissions from jdk-parent-dir\n+            Path parent = jdk.getParent();\n+            AclFileAttributeView view = Files.getFileAttributeView(parent,\n+                    AclFileAttributeView.class);\n+            List<AclEntry> originalAcl = List.copyOf(view.getAcl());\n+            view.setAcl(List.of(AclEntry.newBuilder().setType(AclEntryType.DENY)\n+                    .setPrincipal(Files.getOwner(parent)).build()));\n+\n+            try {\n+                \/\/ Make sure the permissions are affecting the current user\n+                try {\n+                    jdk.toRealPath();\n+                    throw new jtreg.SkippedException(\"Must run non-elevated!\");\n+                } catch (IOException expected) { }\n+\n+                \/\/ Execute the copied jdk, ensuring java.security.Security is\n+                \/\/ loaded (i.e. use -XshowSettings:security:properties)\n+                ProcessTools.executeProcess(new ProcessBuilder(\n+                                jdk.resolve(\"bin\", \"java.exe\").toString(),\n+                                \"-Djava.security.debug=properties\",\n+                                \"-XshowSettings:security:properties\",\n+                                \"-version\"))\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(TEST_PROPERTY);\n+            } finally {\n+                view.setAcl(originalAcl);\n+            }\n+        } finally {\n+            FileUtils.deleteFileTreeUnchecked(temp);\n+        }\n+\n+        System.out.println(\"TEST PASS - OK\");\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTestDirPermissions.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}