{"files":[{"patch":"@@ -36,0 +36,2 @@\n+import static java.nio.file.StandardOpenOption.APPEND;\n+\n@@ -38,2 +40,3 @@\n- * @summary Ensures java.security is loadable in Windows, even when the user\n- * does not have permissions on one of the parent directories.\n+ * @summary Ensures java.security is loadable in Windows and filesystem\n+ * soft-links are resolved, even when the user does not have permissions\n+ * on one of the parent directories.\n@@ -47,0 +50,18 @@\n+    private static final String LF = System.lineSeparator();\n+    private static final String TEST_PROPERTY =\n+            \"test.property.name=test_property_value\";\n+\n+    \/\/ Unlike symbolic links, directory junctions do not require elevation\n+    private static void createJunction(Path target, Path link)\n+            throws IOException, InterruptedException {\n+        if (!Files.isDirectory(target)) {\n+            throw new IOException(\"The target must be a directory: \" + target);\n+        }\n+        int exitCode =\n+                new ProcessBuilder(\"cmd\", \"\/c\", \"MKLINK\", \"\/J\", link.toString(),\n+                        target.toString()).inheritIO().start().waitFor();\n+        if (exitCode != 0) {\n+            throw new IOException(\"Unexpected exit code: \" + exitCode);\n+        }\n+    }\n+\n@@ -49,0 +70,18 @@\n+        \/\/ We will create the following directories structure:\n+        \/\/\n+        \/\/ 📁 JDK-8352728-tmp-*\/\n+        \/\/ ├─🔒 jdk-parent-dir\/         (ACL with REMOVED-PERMISSIONS)\n+        \/\/ │ └─📁 jdk\/\n+        \/\/ │   ├─📁 conf\/\n+        \/\/ │   │ ├─📁 security\/\n+        \/\/ │   │ │ ├─📄 java.security\n+        \/\/ │   │ │ │    📝 include link-to-other-dir\/other.properties\n+        \/\/ │   │ │ ├─🔗 link-to-other-dir\/ ⟹ 📁 JDK-8352728-tmp-*\/other-dir\n+        \/\/ │   │ │ └─...               (JUNCTION)\n+        \/\/ │   │ └─...\n+        \/\/ │   └─...\n+        \/\/ ├─📁 other-dir\/\n+        \/\/ │ └─📄 other.properties\n+        \/\/ │      📝 include ..\/relatively.included.properties\n+        \/\/ └─📄 relatively.included.properties\n+        \/\/      📝 test.property.name=test_property_value\n@@ -56,0 +95,19 @@\n+            \/\/ Create a properties file with a relative include in it\n+            Path otherDir = temp.resolve(\"other-dir\");\n+            Files.createDirectories(otherDir);\n+            Path other = otherDir.resolve(\"other.properties\");\n+            Path included = temp.resolve(\"relatively.included.properties\");\n+            Files.writeString(included, TEST_PROPERTY + LF);\n+            Files.writeString(other,\n+                    \"include ..\/\" + included.getFileName() + LF);\n+\n+            \/\/ Create a junction to the properties file dir, from the jdk dir\n+            Path javaSec = jdk.resolve(\"conf\", \"security\", \"java.security\");\n+            Path linkDir = javaSec.resolveSibling(\"link-to-other-dir\");\n+            createJunction(otherDir, linkDir);\n+\n+            \/\/ Include the properties file from java.security (through the link)\n+            Files.writeString(javaSec,\n+                    LF + \"include \" + linkDir.getFileName() + \"\/\" +\n+                            other.getFileName() + LF, APPEND);\n+\n@@ -74,1 +132,1 @@\n-                        List.of(jdk.resolve(\"bin\", \"java.exe\").toString(),\n+                                jdk.resolve(\"bin\", \"java.exe\").toString(),\n@@ -77,1 +135,3 @@\n-                                \"-version\"))).shouldHaveExitValue(0);\n+                                \"-version\"))\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(TEST_PROPERTY);\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTestDirPermissions.java","additions":64,"deletions":4,"binary":false,"changes":68,"status":"modified"}]}