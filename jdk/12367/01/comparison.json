{"files":[{"patch":"@@ -374,0 +374,14 @@\n+    \/\/ There's no good way to detect partial maximization (e.g. Aero Snap),\n+    \/\/ but by inspecting SWP_* flags we can guess it and reset\n+    \/\/ prevScaleRec to neutralize the CheckWindowDPIChange logic.\n+    \/\/ Here are the flags, observed on Windows 11 for reference:\n+    \/\/ Restore\/maximize:        SWP_NOZORDER | SWP_DRAWFRAME\n+    \/\/ Partial Aero Snap:       SWP_NOZORDER | SWP_NOREPOSITION\n+    \/\/ DPI change (new screen): SWP_NOZORDER | SWP_NOACTIVATE | SWP_NOCOPYBITS\n+    if (!(wp->flags & (SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE)) &&\n+        prevScaleRec.screen != -1 && prevScaleRec.screen != m_screenNum) {\n+        prevScaleRec.screen = -1;\n+        prevScaleRec.scaleX = -1.0f;\n+        prevScaleRec.scaleY = -1.0f;\n+    }\n+\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}