{"files":[{"patch":"@@ -741,1 +741,0 @@\n-jdk\/jfr\/event\/compiler\/TestCodeSweeper.java                     8225209 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Collections;\n@@ -32,1 +33,2 @@\n-import jdk.jfr.Recording;\n+import jdk.jfr.Event;\n+import jdk.jfr.consumer.RecordingStream;\n@@ -42,1 +44,1 @@\n- * Test for events: vm\/code_cache\/full vm\/compiler\/failure\n+ * Test for events: jdk.CodeCacheFull jdk.CompilationFailure\n@@ -61,0 +63,2 @@\n+    static class ProvocationEvent extends Event {\n+    }\n@@ -66,2 +70,2 @@\n-    private static final String pathFull = EventNames.CodeCacheFull;\n-    private static final String pathFailure = EventNames.CompilationFailure;\n+    private static final String EVENT_CODE_CACHE_FULL = EventNames.CodeCacheFull;\n+    private static final String EVENT_COMPILATION_FAILURE = EventNames.CompilationFailure;\n@@ -80,7 +84,24 @@\n-\n-        Recording r = new Recording();\n-        r.enable(pathFull);\n-        r.enable(pathFailure);\n-        r.start();\n-        provokeEvents();\n-        r.stop();\n+        List<RecordedEvent> events = Collections.synchronizedList(new ArrayList<>());\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.setReuse(false);\n+            rs.enable(EVENT_CODE_CACHE_FULL);\n+            rs.enable(EVENT_COMPILATION_FAILURE);\n+            rs.onEvent(EVENT_CODE_CACHE_FULL, events::add);\n+            rs.onEvent(EVENT_COMPILATION_FAILURE, events::add);\n+            rs.onEvent(ProvocationEvent.class.getName(), e -> {\n+                if (!events.isEmpty()) {\n+                    rs.close();\n+                    return;\n+                }\n+                \/\/ Retry if CodeCacheFull or CompilationFailure events weren't provoked\n+                try {\n+                    provokeEvents();\n+                } catch (Exception ex) {\n+                    ex.printStackTrace();\n+                    rs.close();\n+                }\n+            });\n+            rs.startAsync();\n+            provokeEvents();\n+            rs.awaitTermination();\n+        }\n@@ -90,2 +111,0 @@\n-\n-        List<RecordedEvent> events = Events.fromRecording(r);\n@@ -93,1 +112,1 @@\n-        for (RecordedEvent event : events) {\n+        for (RecordedEvent event : new ArrayList<>(events)) {\n@@ -95,1 +114,1 @@\n-            case pathFull:\n+            case EVENT_CODE_CACHE_FULL:\n@@ -99,1 +118,1 @@\n-            case pathFailure:\n+            case EVENT_COMPILATION_FAILURE:\n@@ -118,0 +137,2 @@\n+        System.out.println(\"provokeEvents()\");\n+        ProvocationEvent provocationEvent = new ProvocationEvent();\n@@ -162,0 +183,1 @@\n+        provocationEvent.commit();\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeSweeper.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"}]}