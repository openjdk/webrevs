{"files":[{"patch":"@@ -63,1 +63,0 @@\n-  _n_idx_list(arena(), 8),                                  \/\/ scratch list of (node,index) pairs\n@@ -2402,4 +2401,1 @@\n-  \/\/ Insert extract (unpack) operations for scalar uses\n-  for (int i = 0; i < _packset.length(); i++) {\n-    insert_extracts(_packset.at(i));\n-  }\n+  DEBUG_ONLY(verify_no_extract());\n@@ -2856,20 +2852,22 @@\n-\/\/------------------------------insert_extracts---------------------------\n-\/\/ If a use of pack p is not a vector use, then replace the\n-\/\/ use with an extract operation.\n-void SuperWord::insert_extracts(Node_List* p) {\n-  if (p->at(0)->is_Store()) return;\n-  assert(_n_idx_list.is_empty(), \"empty (node,index) list\");\n-\n-  \/\/ Inspect each use of each pack member.  For each use that is\n-  \/\/ not a vector use, replace the use with an extract operation.\n-\n-  for (uint i = 0; i < p->size(); i++) {\n-    Node* def = p->at(i);\n-    for (DUIterator_Fast jmax, j = def->fast_outs(jmax); j < jmax; j++) {\n-      Node* use = def->fast_out(j);\n-      for (uint k = 0; k < use->req(); k++) {\n-        Node* n = use->in(k);\n-        if (def == n) {\n-          Node_List* u_pk = my_pack(use);\n-          if ((u_pk == nullptr || use->is_CMove()) && !is_vector_use(use, k)) {\n-              _n_idx_list.push(use, k);\n+#ifdef ASSERT\n+\/\/ We check that every packset (name it p_def) only has vector uses (p_use),\n+\/\/ which are proper vector uses of def.\n+void SuperWord::verify_no_extract() {\n+  for (int i = 0; i < _packset.length(); i++) {\n+    Node_List* p_def = _packset.at(i);\n+\n+    \/\/ A vector store has no uses\n+    if (p_def->at(0)->is_Store()) { continue; }\n+\n+    \/\/ for every def in p_def, and every use:\n+    for (uint i = 0; i < p_def->size(); i++) {\n+      Node* def = p_def->at(i);\n+      for (DUIterator_Fast jmax, j = def->fast_outs(jmax); j < jmax; j++) {\n+        Node* use = def->fast_out(j);\n+        \/\/ find every use->def edge:\n+        for (uint k = 0; k < use->req(); k++) {\n+          Node* maybe_def = use->in(k);\n+          if (def == maybe_def) {\n+            Node_List* p_use = my_pack(use);\n+            if (is_marked_reduction(def)) { continue; }\n+            assert(p_use != nullptr && is_vector_use(use, k), \"all uses must be vector uses\");\n@@ -2881,23 +2879,0 @@\n-\n-  while (_n_idx_list.is_nonempty()) {\n-    Node* use = _n_idx_list.node();\n-    int   idx = _n_idx_list.index();\n-    _n_idx_list.pop();\n-    Node* def = use->in(idx);\n-\n-    if (is_marked_reduction(def)) continue;\n-\n-    \/\/ Insert extract operation\n-    _igvn.hash_delete(def);\n-    int def_pos = alignment(def) \/ data_size(def);\n-\n-    ConINode* def_pos_con = _igvn.intcon(def_pos)->as_ConI();\n-    Node* ex = ExtractNode::make(def, def_pos_con, velt_basic_type(def));\n-    _igvn.register_new_node_with_optimizer(ex);\n-    _phase->set_ctrl(ex, _phase->get_ctrl(def));\n-    _igvn.replace_input_of(use, idx, ex);\n-    _igvn._worklist.push(def);\n-\n-    bb_insert_after(ex, bb_idx(def));\n-    set_velt_type(ex, velt_type(def));\n-  }\n@@ -2905,0 +2880,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":24,"deletions":48,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -259,1 +259,0 @@\n-  Node_Stack   _n_idx_list;    \/\/ List of (node,index) pairs\n@@ -516,2 +515,2 @@\n-  \/\/ If a use of pack p is not a vector use, then replace the use with an extract operation.\n-  void insert_extracts(Node_List* p);\n+  \/\/ Verify that all uses of packs are also packs, i.e. we do not need extract operations.\n+  DEBUG_ONLY(void verify_no_extract();)\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}