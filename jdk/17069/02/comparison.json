{"files":[{"patch":"@@ -496,0 +496,1 @@\n+            boolean explicitType = ref.qualifierExpression != null;\n@@ -498,1 +499,1 @@\n-                    : findMethod(sym, memberName, paramTypes, true);\n+                    : findMethod(sym, memberName, paramTypes, true, explicitType);\n@@ -503,1 +504,1 @@\n-                        : findMethod(sym, memberName, paramTypes, false);\n+                        : findMethod(sym, memberName, paramTypes, false, explicitType);\n@@ -511,1 +512,1 @@\n-            VarSymbol vsym = (ref.paramTypes != null) ? null : findField(sym, memberName);\n+            VarSymbol vsym = (ref.paramTypes != null) ? null : findField(sym, memberName, explicitType);\n@@ -553,2 +554,2 @@\n-    private VarSymbol findField(ClassSymbol tsym, Name fieldName) {\n-        return searchField(tsym, fieldName, new HashSet<>());\n+    private VarSymbol findField(ClassSymbol tsym, Name fieldName, boolean explicitType) {\n+        return searchField(tsym, fieldName, explicitType, new HashSet<>());\n@@ -557,1 +558,1 @@\n-    private VarSymbol searchField(ClassSymbol tsym, Name fieldName, Set<ClassSymbol> searched) {\n+    private VarSymbol searchField(ClassSymbol tsym, Name fieldName, boolean explicitType, Set<ClassSymbol> searched) {\n@@ -572,5 +573,7 @@\n-        ClassSymbol encl = tsym.owner.enclClass();\n-        if (encl != null) {\n-            VarSymbol vsym = searchField(encl, fieldName, searched);\n-            if (vsym != null) {\n-                return vsym;\n+        if (!explicitType) {\n+            ClassSymbol encl = tsym.owner.enclClass();\n+            if (encl != null) {\n+                VarSymbol vsym = searchField(encl, fieldName, explicitType, searched);\n+                if (vsym != null) {\n+                    return vsym;\n+                }\n@@ -583,1 +586,1 @@\n-            VarSymbol vsym = searchField((ClassSymbol) superclass.tsym, fieldName, searched);\n+            VarSymbol vsym = searchField((ClassSymbol) superclass.tsym, fieldName, explicitType, searched);\n@@ -594,1 +597,1 @@\n-            VarSymbol vsym = searchField((ClassSymbol) intf.tsym, fieldName, searched);\n+            VarSymbol vsym = searchField((ClassSymbol) intf.tsym, fieldName, explicitType, searched);\n@@ -614,2 +617,3 @@\n-    private MethodSymbol findMethod(ClassSymbol tsym, Name methodName, List<Type> paramTypes, boolean strict) {\n-        return searchMethod(tsym, methodName, paramTypes, strict, new HashSet<>());\n+    private MethodSymbol findMethod(ClassSymbol tsym, Name methodName, List<Type> paramTypes,\n+                                    boolean strict, boolean explicitType) {\n+        return searchMethod(tsym, methodName, paramTypes, strict, explicitType, new HashSet<>());\n@@ -618,3 +622,2 @@\n-    private MethodSymbol searchMethod(ClassSymbol tsym, Name methodName,\n-                                       List<Type> paramTypes, boolean strict,\n-                                       Set<ClassSymbol> searched) {\n+    private MethodSymbol searchMethod(ClassSymbol tsym, Name methodName, List<Type> paramTypes,\n+                                      boolean strict, boolean explicitType, Set<ClassSymbol> searched) {\n@@ -671,1 +674,2 @@\n-            MethodSymbol msym = searchMethod((ClassSymbol) superclass.tsym, methodName, paramTypes, strict, searched);\n+            MethodSymbol msym = searchMethod((ClassSymbol) superclass.tsym, methodName, paramTypes,\n+                    strict, explicitType, searched);\n@@ -682,1 +686,2 @@\n-            MethodSymbol msym = searchMethod((ClassSymbol) intf.tsym, methodName, paramTypes, strict, searched);\n+            MethodSymbol msym = searchMethod((ClassSymbol) intf.tsym, methodName, paramTypes,\n+                    strict, explicitType, searched);\n@@ -689,5 +694,8 @@\n-        ClassSymbol encl = tsym.owner.enclClass();\n-        if (encl != null) {\n-            MethodSymbol msym = searchMethod(encl, methodName, paramTypes, strict, searched);\n-            if (msym != null) {\n-                return msym;\n+        if (!explicitType) {\n+            ClassSymbol encl = tsym.owner.enclClass();\n+            if (encl != null) {\n+                MethodSymbol msym = searchMethod(encl, methodName, paramTypes, strict,\n+                        explicitType, searched);\n+                if (msym != null) {\n+                    return msym;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7021614 8278373\n+ * @bug 7021614 8278373 8164094\n@@ -133,0 +133,6 @@\n+            for (Element enc: e.getEnclosedElements()) {\n+                TreePath path = trees.getPath(enc);\n+                if (trees.getDocCommentTree(path) != null) {\n+                    new DocCommentScanner(path).scan();\n+                }\n+            }\n@@ -250,0 +256,4 @@\n+ *\n+ * @see Inner#X    Bad\n+ * @see Inner#X()  Bad\n+ * @see Inner#m    Bad\n@@ -279,0 +289,10 @@\n+\n+    \/**\n+     * @see #X         Field\n+     * @see #X()       Method\n+     * @see #m         Method\n+     * @see Inner#X    Bad\n+     * @see Inner#X()  Bad\n+     * @see Inner#m    Bad\n+     *\/\n+    interface Inner {}\n","filename":"test\/langtools\/tools\/javac\/doctree\/ReferenceTest.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"}]}