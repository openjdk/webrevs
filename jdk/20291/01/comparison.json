{"files":[{"patch":"@@ -35,18 +35,4 @@\n-public final class AnnotationImpl implements Annotation, Util.Writable {\n-    private final Utf8Entry className;\n-    private final List<AnnotationElement> elements;\n-\n-    public AnnotationImpl(Utf8Entry className,\n-                          List<AnnotationElement> elems) {\n-        this.className = className;\n-        this.elements = List.copyOf(elems);\n-    }\n-\n-    @Override\n-    public Utf8Entry className() {\n-        return className;\n-    }\n-\n-    @Override\n-    public List<AnnotationElement> elements() {\n-        return elements;\n+public record AnnotationImpl(Utf8Entry className, List<AnnotationElement> elements)\n+        implements Annotation, Util.Writable {\n+    public AnnotationImpl {\n+        elements = List.copyOf(elements);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,0 +210,23 @@\n+\n+    @Test\n+    void testEquality() {\n+        assertEquals(Annotation.of(CD_Object), Annotation.of(ClassDesc.of(\"java.lang.Object\")));\n+        assertNotEquals(Annotation.of(CD_Object), Annotation.of(CD_String));\n+        assertEquals(Annotation.of(CD_Object, AnnotationElement.of(\"fly\", AnnotationValue.ofInt(5))),\n+                Annotation.of(CD_Object, AnnotationElement.ofInt(\"fly\", 5)));\n+        assertEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"one\", 1.2F));\n+        assertEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.of(\"one\", AnnotationValue.ofFloat(1.2F)));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"two\", 1.2F));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"one\", 2.1F));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofDouble(\"one\", 1.2F));\n+        assertEquals(AnnotationValue.ofInt(23), AnnotationValue.ofInt(23));\n+        assertNotEquals(AnnotationValue.ofInt(23), AnnotationValue.ofInt(42));\n+        assertNotEquals(AnnotationValue.ofInt(23), AnnotationValue.ofLong(23));\n+        assertEquals(AnnotationValue.ofAnnotation(Annotation.of(CD_Object)),\n+                AnnotationValue.ofAnnotation(Annotation.of(Object.class.describeConstable().orElseThrow())));\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}