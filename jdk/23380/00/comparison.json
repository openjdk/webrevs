{"files":[{"patch":"@@ -4040,0 +4040,104 @@\n+## Ahead-of-Time Cache\n+\n+The JDK supports ahead-of-time (AOT) optimizations that can be performed before an\n+application is executed. One example is Class Data Sharing (CDS), as described above,\n+that parses classes ahead of time. AOT optimizations can improve the start-up and\n+warm-up performance of Java applications.\n+\n+The Ahead-of-Time Cache (AOTCache) is a container introduced in JDK 24 for\n+storing artifacts produced by AOT optimizations. The AOTCache currently contains\n+Java classes and heap objects. The plans is to include other types of artifacts,\n+such as execution profiles and compiled methods, in future JDK releases.\n+\n+An AOTCache is specific to a combination of the following:\n+\n+-   A particular application (as expressed by `-classpath`, `-jar`, or `--module-path`.)\n+-   A particular JDK release.\n+-   A particular OS and CPU architecture.\n+\n+If any of the above changes, you must recreate the AOTCache.\n+\n+The deployment of the AOTCache is divided into three phases:\n+\n+-   **Training:** We execute the application with a representative work-load\n+    to gather statistical data that tell us what artifacts should be included\n+    into the AOTCache. The data are saved in an *AOT Configuration* file.\n+\n+-   **Assembly:** We use the AOT Configuration file to produce an AOTCache.\n+\n+-   **Production:** We execute the application with the AOTCache for better\n+    start-up and warm-up performance.\n+\n+The AOTCache can be used with the following command-line options:\n+\n+`-XX:AOTCache:=`*cachefile*\n+:   Specifies the location of the AOTCache. The standard extension for *cachefile* is `.aot`.\n+    If `-XX:AOTCache` is specified but `-XX:AOTMode` is not specified,\n+    then `AOTMode` will be given the value of `auto`.\n+\n+`-XX:AOTConfiguration:=`*configfile*\n+:   Specifies the AOT Configuration file for the JVM to write to or read from.\n+    This option can be used only with `-XX:AOTMode=record` and `-XX:AOTMode=create`.\n+    The standard extension for *configfile* is `.aotconfig`.\n+\n+`-XX:+AOTMode:=`*mode*\n+:   *mode* must be one of the following: `off`, `record`, `create`, `auto`, or `on`.\n+\n+-   `off`: AOTCache is not used.\n+\n+-   `record`: Execute the application in the Training phase.\n+    `-XX:AOTConfiguration=`*configfile* must be specified. The JVM gathers\n+     statistical data and stores them into *configfile*.\n+\n+-   `create`: Perform the Assembly phase. `-XX:AOTConfiguration=`*configfile*\n+     and `-XX:AOTCache=`*cachefile*  must be specified. The JVM reads the statistical\n+     data from *configfile* and writes the optimization artifacts into *cachefile*.\n+     Note that the application itself is not executed in this phase.\n+\n+-   `auto` or `on`: These modes should be used in the Production phase.\n+     If `-XX:AOTCache=`*cachefile* is specified, the JVM tries to\n+     load *cachefile* as the AOTCache. Otherwise, the JVM tries to load\n+     a *default CDS archive* from the JDK installation directory as the AOTCache.\n+\n+     The loading of an AOTCache can fail for a number of reasons:\n+\n+     - You are trying to use the AOTCache with an incompatible application, JDK release,\n+       or OS\/CPU.\n+\n+     - The specified AOTCache file does not exist or is not accessible.\n+\n+     - Incompatible JVM options are used (for example, certain JVMTI options).\n+\n+       Since AOTCache is an optimization feature, there's no guarantee that it will be\n+       compatible with all possible JVM options. See [JEP 483](https:\/\/openjdk.org\/jeps\/483),\n+       section **Consistency of training and subsequent runs** for a representitive\n+       list of scenarios that may be incompatible with the AOTCache for JDK 24.\n+\n+       These scenarios usually involve arbitrary modification of classes for diagnostic\n+       purposes and are typically not relevant for production environments.\n+\n+     When the AOTCache fails to load:\n+\n+     - If `AOTMode` is `auto`, the JVM will continue execution without using the\n+       AOTCache. This is the recommended mode for production environments, especially\n+       when you may not have complete control of the command-line (e.g., your\n+       application's launch script may allow users to inject options to the command-line).\n+       This allows your application to function correctly, although sometimes it may not\n+       benefit from the AOTCache.\n+\n+     - If `AOTMode` is `on`, the JVM will print an error message and exit immediately. This\n+       mode should be used only as a \"fail-fast\" debugging aid to check if your command-line\n+       options are compatible with the AOTCache. An alternative is to run your application with\n+       `-XX:AOTMode=auto -Xlog:cds` to see if the AOTCache can be used or not.\n+\n+`-XX:+AOTClassLinking`\n+:   If this options is specified with `-XX:AOTMode=create`, the JVM will perform more\n+    advanced optimizations (such as ahead-of-time resolution of invokedynamic instructions)\n+    when creating the AOTCache. As a result, the appication will see further improvements\n+    in start-up and warm-up performance.\n+\n+    Using `-XX:+AOTClassLinking` will impose further restrictions on command-line options\n+    that can be used in the Production phase. Please see [JEP 483](https:\/\/openjdk.org\/jeps\/483) for a\n+    detailed discussion of `-XX:+AOTClassLinking` and its restrictions.\n+\n+\n","filename":"src\/java.base\/share\/man\/java.md","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"}]}