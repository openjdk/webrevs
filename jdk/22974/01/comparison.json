{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -85,4 +87,4 @@\n-        ClassUnloadCommon.triggerUnloading();  \/\/ should not unload anything\n-        System.out.println(\"Should unload MyTest and p2.c2 just now\");\n-        ClassUnloadCommon.failIf(wb.isClassAlive(MY_TEST), \"should be unloaded\");\n-        ClassUnloadCommon.failIf(wb.isClassAlive(\"p2.c2\"), \"should be unloaded\");\n+\n+        \/\/ Now unload MY_TEST and p2.c2\n+        Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(MY_TEST, \"p2.c2\"));\n+        ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/DictionaryDependsTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -63,1 +65,0 @@\n-\n@@ -74,6 +75,2 @@\n-    {\n-        boolean isAlive = wb.isClassAlive(className);\n-        System.out.println(\"testClass (3) alive: \" + isAlive);\n-        ClassUnloadCommon.failIf(isAlive, \"should be unloaded\");\n-    }\n-\n+    Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+    ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"testClass (3) should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveClass.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -71,7 +73,0 @@\n-    ClassUnloadCommon.triggerUnloading();\n-\n-    {\n-        boolean isAlive = wb.isClassAlive(className);\n-        System.out.println(\"testClassLoader (3) alive: \" + isAlive);\n-        ClassUnloadCommon.failIf(isAlive, \"should be unloaded\");\n-    }\n@@ -79,0 +74,2 @@\n+    Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+    ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"testClassLoader (3) should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveClassLoader.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -71,7 +73,0 @@\n-    ClassUnloadCommon.triggerUnloading();\n-\n-    {\n-        boolean isAlive = wb.isClassAlive(className);\n-        System.out.println(\"testObject (3) alive: \" + isAlive);\n-        ClassUnloadCommon.failIf(isAlive, \"should be unloaded\");\n-    }\n@@ -79,0 +74,2 @@\n+    Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+    ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"testObject (3) should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveObject.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -72,2 +74,1 @@\n-    ClassUnloadCommon.triggerUnloading();\n-\n+    ClassUnloadCommon.triggerUnloading(List.of(className));\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/KeepAliveSoftReference.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -78,1 +80,0 @@\n-        ClassUnloadCommon.triggerUnloading();  \/\/ should not unload anything\n@@ -80,2 +81,2 @@\n-        ClassUnloadCommon.failIf(wb.isClassAlive(MY_TEST), \"should be unloaded\");\n-        ClassUnloadCommon.failIf(wb.isClassAlive(\"p2.c2\"), \"should be unloaded\");\n+        Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(MY_TEST, \"p2.c2\"));\n+        ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/SuperDependsTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -89,2 +91,5 @@\n-        ClassUnloadCommon.triggerUnloading();\n-        ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should have been unloaded\");\n+\n+        \/\/ Now unload className. This calls triggerUnloading but we only pass the class we expect to be unloaded\n+        \/\/ otherwise the test will take too long.\n+        Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+        ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should be unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadInterfaceTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -111,1 +113,0 @@\n-        ClassUnloadCommon.triggerUnloading();\n@@ -113,1 +114,2 @@\n-        ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should have been unloaded\");\n+        Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+        ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should have been unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -103,1 +105,1 @@\n-            ClassUnloadCommon.triggerUnloading();\n+            Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n@@ -105,1 +107,1 @@\n-            ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should have been unloaded\");\n+            ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should have been unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/HelloUnload.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.List;\n+import java.util.Set;\n@@ -42,2 +44,2 @@\n-            ClassUnloadCommon.triggerUnloading();\n-            ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should have been unloaded\");\n+            Set<String> aliveClasses = ClassUnloadCommon.triggerUnloading(List.of(className));\n+            ClassUnloadCommon.failIf(!aliveClasses.isEmpty(), \"should have been unloaded: \" + aliveClasses);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/UnloadUnregisteredLoader.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-            ClassUnloadCommon.triggerUnloading();\n+            ClassUnloadCommon.triggerUnloading(List.of(className));\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}