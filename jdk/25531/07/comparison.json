{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,0 +330,2 @@\n+        IOUtil.acquireScope(dst, true);\n+\n@@ -352,0 +354,1 @@\n+                    IOUtil.releaseScope(dst);\n@@ -384,0 +387,2 @@\n+        IOUtil.acquireScope(src, true);\n+\n@@ -406,0 +411,1 @@\n+                    IOUtil.releaseScope(src);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -413,2 +413,4 @@\n-        void releaseBufferIfSubstituted() {\n-            if (buf != dst && RELEASED.compareAndSet(this, false, true)) {\n+        void releaseScopeOrCacheSubstitute() {\n+            if (buf == dst) {\n+                IOUtil.releaseScope(dst);\n+            } else if (RELEASED.compareAndSet(this, false, true)) {\n@@ -447,1 +449,1 @@\n-            if (dst instanceof DirectBuffer) {\n+            if (dst.isDirect()) {\n@@ -449,1 +451,2 @@\n-                address = ((DirectBuffer)dst).address() + pos;\n+                IOUtil.acquireScope(dst, true);\n+                address = IOUtil.bufferAddress(dst) + pos;\n@@ -452,1 +455,1 @@\n-                address = ((DirectBuffer)buf).address();\n+                address = IOUtil.bufferAddress(buf) + pos;\n@@ -482,1 +485,1 @@\n-                    releaseBufferIfSubstituted();\n+                    releaseScopeOrCacheSubstitute();\n@@ -497,2 +500,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n@@ -515,2 +518,2 @@\n-                \/\/ return direct buffer to cache if substituted\n-                releaseBufferIfSubstituted();\n+                \/\/ release direct buffer scope or return substitute to cache\n+                releaseScopeOrCacheSubstitute();\n@@ -603,2 +606,4 @@\n-        void releaseBufferIfSubstituted() {\n-            if (buf != src && RELEASED.compareAndSet(this, false, true)) {\n+        void releaseScopeOrCacheSubstitute() {\n+            if (buf == src) {\n+                IOUtil.releaseScope(src);\n+            } else if (RELEASED.compareAndSet(this, false, true)) {\n@@ -627,1 +632,1 @@\n-            if (src instanceof DirectBuffer) {\n+            if (src.isDirect()) {\n@@ -629,1 +634,2 @@\n-                address = ((DirectBuffer)src).address() + pos;\n+                IOUtil.acquireScope(src, true);\n+                address = IOUtil.bufferAddress(src) + pos;\n@@ -637,1 +643,1 @@\n-                address = ((DirectBuffer)buf).address();\n+                address = IOUtil.bufferAddress(buf) + pos;\n@@ -660,1 +666,1 @@\n-                releaseBufferIfSubstituted();\n+                releaseScopeOrCacheSubstitute();\n@@ -679,2 +685,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n@@ -693,2 +699,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run main\/othervm Basic\n@@ -568,1 +569,2 @@\n-        return switch (rand.nextInt(3)) {\n+        rand.nextBytes(buf);\n+        return switch (rand.nextInt(5)) {\n@@ -573,1 +575,7 @@\n-            case 2 -> Arena.ofAuto().allocate(buf.length).asByteBuffer()\n+            case 2 -> Arena.global().allocate(buf.length).asByteBuffer()\n+                    .put(buf)\n+                    .flip();\n+            case 3 -> Arena.ofAuto().allocate(buf.length).asByteBuffer()\n+                    .put(buf)\n+                    .flip();\n+            case 4 -> Arena.ofShared().allocate(buf.length).asByteBuffer()\n@@ -609,1 +617,1 @@\n-                       long position)\n+                        long position)\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run junit MemorySegments\n+ * @run junit\/othervm MemorySegments\n@@ -57,1 +57,0 @@\n-import org.junit.jupiter.api.Disabled;\n@@ -59,2 +58,0 @@\n-import org.junit.jupiter.api.condition.DisabledOnOs;\n-import org.junit.jupiter.api.condition.OS;\n@@ -656,1 +653,0 @@\n-    @DisabledOnOs(OS.WINDOWS)\n@@ -704,1 +700,0 @@\n-    @Disabled\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/MemorySegments.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}