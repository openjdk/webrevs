{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,0 +330,4 @@\n+        if (dst.isDirect()) {\n+            IOUtil.acquireScope(dst, true);\n+        }\n+\n@@ -352,0 +356,2 @@\n+                    if (dst.isDirect())\n+                        IOUtil.releaseScope(dst);\n@@ -384,0 +390,4 @@\n+        if (src.isDirect()) {\n+            IOUtil.acquireScope(src, true);\n+        }\n+\n@@ -406,0 +416,2 @@\n+                    if (src.isDirect())\n+                        IOUtil.releaseScope(src);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -413,2 +413,4 @@\n-        void releaseBufferIfSubstituted() {\n-            if (buf != dst && RELEASED.compareAndSet(this, false, true)) {\n+        void releaseScopeOrCacheSubstitute() {\n+            if (buf == dst) {\n+                IOUtil.releaseScope(dst);\n+            } else if (RELEASED.compareAndSet(this, false, true)) {\n@@ -447,1 +449,1 @@\n-            if (dst instanceof DirectBuffer) {\n+            if (dst.isDirect()) {\n@@ -449,1 +451,2 @@\n-                address = ((DirectBuffer)dst).address() + pos;\n+                IOUtil.acquireScope(dst, true);\n+                address = IOUtil.bufferAddress(dst) + pos;\n@@ -452,1 +455,1 @@\n-                address = ((DirectBuffer)buf).address();\n+                address = IOUtil.bufferAddress(buf) + pos;\n@@ -482,1 +485,1 @@\n-                    releaseBufferIfSubstituted();\n+                    releaseScopeOrCacheSubstitute();\n@@ -497,2 +500,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n@@ -515,2 +518,2 @@\n-                \/\/ return direct buffer to cache if substituted\n-                releaseBufferIfSubstituted();\n+                \/\/ release direct buffer scope or return substitute to cache\n+                releaseScopeOrCacheSubstitute();\n@@ -603,2 +606,4 @@\n-        void releaseBufferIfSubstituted() {\n-            if (buf != src && RELEASED.compareAndSet(this, false, true)) {\n+        void releaseScopeOrCacheSubstitute() {\n+            if (buf == src) {\n+                IOUtil.releaseScope(src);\n+            } else if (RELEASED.compareAndSet(this, false, true)) {\n@@ -627,1 +632,1 @@\n-            if (src instanceof DirectBuffer) {\n+            if (src.isDirect()) {\n@@ -629,1 +634,2 @@\n-                address = ((DirectBuffer)src).address() + pos;\n+                IOUtil.acquireScope(src, true);\n+                address = IOUtil.bufferAddress(src) + pos;\n@@ -637,1 +643,1 @@\n-                address = ((DirectBuffer)buf).address();\n+                address = IOUtil.bufferAddress(buf) + pos;\n@@ -660,1 +666,1 @@\n-                releaseBufferIfSubstituted();\n+                releaseScopeOrCacheSubstitute();\n@@ -679,2 +685,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n@@ -693,2 +699,2 @@\n-            \/\/ return direct buffer to cache if substituted\n-            releaseBufferIfSubstituted();\n+            \/\/ release direct buffer scope or return substitute to cache\n+            releaseScopeOrCacheSubstitute();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,1 @@\n+        testViewsOfConfinedArenas(blah.toPath());\n@@ -564,0 +565,27 @@\n+    \/\/ tests unsupported MemorySegment view buffers\n+    static void testViewsOfConfinedArenas(Path file) throws IOException {\n+        System.out.println(\"testViewsOfConfinedArenas\");\n+\n+        AsynchronousFileChannel ch = AsynchronousFileChannel\n+            .open(file, CREATE, READ, WRITE, TRUNCATE_EXISTING);\n+\n+        writeFully(ch, genBuffer(), 0L);\n+        long size = ch.size();\n+\n+        try {\n+            readAll(ch, genConfinedBuffer(), 0L);\n+            throw new RuntimeException(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException expected) {\n+            \/\/ ignore\n+        }\n+\n+        try {\n+            writeFully(ch, genConfinedBuffer(), size);\n+            throw new RuntimeException(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException expected) {\n+            \/\/ ignore\n+        } finally {\n+            ch.close();\n+        }\n+    }\n+\n@@ -568,1 +596,2 @@\n-        return switch (rand.nextInt(3)) {\n+        rand.nextBytes(buf);\n+        return switch (rand.nextInt(5)) {\n@@ -573,1 +602,7 @@\n-            case 2 -> Arena.ofAuto().allocate(buf.length).asByteBuffer()\n+            case 2 -> Arena.global().allocate(buf.length).asByteBuffer()\n+                    .put(buf)\n+                    .flip();\n+            case 3 -> Arena.ofAuto().allocate(buf.length).asByteBuffer()\n+                    .put(buf)\n+                    .flip();\n+            case 4 -> Arena.ofShared().allocate(buf.length).asByteBuffer()\n@@ -580,0 +615,9 @@\n+    \/\/ returns ByteBuffer view of confined arena\n+    static ByteBuffer genConfinedBuffer() {\n+        int size = 1024 + rand.nextInt(16000);\n+        byte[] buf = new byte[size];\n+        rand.nextBytes(buf);\n+        Arena arena = Arena.ofConfined();\n+        return arena.allocate(buf.length).asByteBuffer().put(buf).flip();\n+    }\n+\n@@ -609,1 +653,1 @@\n-                       long position)\n+                        long position)\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":48,"deletions":4,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -656,1 +656,0 @@\n-    @DisabledOnOs(OS.WINDOWS)\n@@ -704,1 +703,0 @@\n-    @Disabled\n","filename":"test\/jdk\/java\/nio\/channels\/etc\/MemorySegments.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}