{"files":[{"patch":"@@ -90,1 +90,0 @@\n-        testViewsOfConfinedArenas(blah.toPath());\n@@ -565,27 +564,0 @@\n-    \/\/ tests unsupported MemorySegment view buffers\n-    static void testViewsOfConfinedArenas(Path file) throws IOException {\n-        System.out.println(\"testViewsOfConfinedArenas\");\n-\n-        AsynchronousFileChannel ch = AsynchronousFileChannel\n-            .open(file, CREATE, READ, WRITE, TRUNCATE_EXISTING);\n-\n-        writeFully(ch, genBuffer(), 0L);\n-        long size = ch.size();\n-\n-        try {\n-            readAll(ch, genConfinedBuffer(), 0L);\n-            throw new RuntimeException(\"IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException expected) {\n-            \/\/ ignore\n-        }\n-\n-        try {\n-            writeFully(ch, genConfinedBuffer(), size);\n-            throw new RuntimeException(\"IllegalArgumentException expected\");\n-        } catch (IllegalArgumentException expected) {\n-            \/\/ ignore\n-        } finally {\n-            ch.close();\n-        }\n-    }\n-\n@@ -615,9 +587,0 @@\n-    \/\/ returns ByteBuffer view of confined arena\n-    static ByteBuffer genConfinedBuffer() {\n-        int size = 1024 + rand.nextInt(16000);\n-        byte[] buf = new byte[size];\n-        rand.nextBytes(buf);\n-        Arena arena = Arena.ofConfined();\n-        return arena.allocate(buf.length).asByteBuffer().put(buf).flip();\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Basic.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"modified"}]}