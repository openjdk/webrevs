{"files":[{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a any-bits double distribution random generator, i.e. the bits are uniformly sampled,\n+ * thus creating any possible double value, including the multiple different NaN representations.\n+ *\/\n+public final class AnyBitsDoubleGenerator extends DoubleGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public AnyBitsDoubleGenerator() {}\n+\n+    @Override\n+    public double nextDouble() {\n+        return Double.longBitsToDouble(RANDOM.nextLong());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsDoubleGenerator.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a any-bits float distribution random generator, i.e. the bits are uniformly sampled,\n+ * thus creating any possible float value, including the multiple different NaN representations.\n+ *\/\n+public final class AnyBitsFloatGenerator extends FloatGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public AnyBitsFloatGenerator() {}\n+\n+    @Override\n+    public float nextFloat() {\n+        return Float.intBitsToFloat(RANDOM.nextInt());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsFloatGenerator.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Define interface of double generators.\n+ *\/\n+public abstract class DoubleGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/**\n+     * Generate a random double, the distribution can be arbitrarily defined by the generator.\n+     *\/\n+    public abstract double nextDouble();\n+\n+    \/**\n+     * Fill the memory segments with doubles using the distribution of nextDouble.\n+     *\/\n+    public final void fill(MemorySegment ms) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+            ms.set(ValueLayout.JAVA_DOUBLE_UNALIGNED, 8L * i, nextDouble());\n+        }\n+    }\n+\n+    \/**\n+     * Fill the array with doubles using the distribution of nextDouble.\n+     *\/\n+    public final void fill(double[] a) {\n+        fill(MemorySegment.ofArray(a));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/DoubleGenerator.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Define interface of float generators.\n+ *\/\n+public abstract class FloatGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/**\n+     * Generate a random float, the distribution can be arbitrarily defined by the generator.\n+     *\/\n+    public abstract float nextFloat();\n+\n+    \/**\n+     * Fill the memory segments with floats using the distribution of nextFloat.\n+     *\/\n+    public final void fill(MemorySegment ms) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+            ms.set(ValueLayout.JAVA_FLOAT_UNALIGNED, 4L * i, nextFloat());\n+        }\n+    }\n+\n+    \/**\n+     * Fill the array with floats using the distribution of nextFloat.\n+     *\/\n+    public final void fill(float[] a) {\n+        fill(MemorySegment.ofArray(a));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/FloatGenerator.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * The generators class provides a set of generator functions for testing.\n+ * The goal is to cover many special cases, such as NaNs in Floats or values\n+ * close to overflow in ints. They should produce values from specific\n+ * \"intersting\" distributions which might trigger various behaviours in\n+ * optimizations.\n+ *\/\n+public final class Generators {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/**\n+     * Randomly pick an int generator.\n+     *\/\n+    public static IntGenerator ints() {\n+        switch(RANDOM.nextInt(6)) {\n+            case 0  -> { return new UniformIntGenerator(); }\n+            case 1  -> { return new SpecialIntGenerator(0); }\n+            case 2  -> { return new SpecialIntGenerator(2); }\n+            case 3  -> { return new SpecialIntGenerator(16); }\n+            case 4  -> { return new MixedIntGenerator(1, 1, 16); }\n+            case 5  -> { return new MixedIntGenerator(1, 2, 2); }\n+            default -> { throw new RuntimeException(\"impossible\"); }\n+        }\n+    }\n+\n+    \/**\n+     * Randomly pick a long generator.\n+     *\/\n+    public static LongGenerator longs() {\n+        switch(RANDOM.nextInt(6)) {\n+            case 0  -> { return new UniformLongGenerator(); }\n+            case 1  -> { return new SpecialLongGenerator(0); }\n+            case 2  -> { return new SpecialLongGenerator(2); }\n+            case 3  -> { return new SpecialLongGenerator(16); }\n+            case 4  -> { return new MixedLongGenerator(1, 1, 16); }\n+            case 5  -> { return new MixedLongGenerator(1, 2, 2); }\n+            default -> { throw new RuntimeException(\"impossible\"); }\n+        }\n+    }\n+\n+    \/**\n+     * Randomly pick a float generator.\n+     *\/\n+    public static FloatGenerator floats() {\n+        switch(RANDOM.nextInt(5)) {\n+            case 0  -> { return new UniformFloatGenerator(-1, 1); }\n+            \/\/ Well balanced, so that multiplication reduction never explodes or collapses to zero:\n+            case 1  -> { return new UniformFloatGenerator(0.999f, 1.001f); }\n+            case 2  -> { return new AnyBitsFloatGenerator(); }\n+            \/\/ A tame distribution, mixed in with the occasional special float value:\n+            case 3  -> { return new SpecialFloatGenerator(new UniformFloatGenerator(0.999f, 1.001f), 10, 1000); }\n+            \/\/ Generating any bits, but special values are more frequent.\n+            case 4  -> { return new SpecialFloatGenerator(new AnyBitsFloatGenerator(), 100, 200); }\n+            default -> { throw new RuntimeException(\"impossible\"); }\n+        }\n+    }\n+\n+    \/**\n+     * Randomly pick a double generator.\n+     *\/\n+    public static DoubleGenerator doubles() {\n+        switch(RANDOM.nextInt(5)) {\n+            case 0  -> { return new UniformDoubleGenerator(-1, 1); }\n+            \/\/ Well balanced, so that multiplication reduction never explodes or collapses to zero:\n+            case 1  -> { return new UniformDoubleGenerator(0.999f, 1.001f); }\n+            case 2  -> { return new AnyBitsDoubleGenerator(); }\n+            \/\/ A tame distribution, mixed in with the occasional special double value:\n+            case 3  -> { return new SpecialDoubleGenerator(new UniformDoubleGenerator(0.999f, 1.001f), 10, 1000); }\n+            \/\/ Generating any bits, but special values are more frequent.\n+            case 4  -> { return new SpecialDoubleGenerator(new AnyBitsDoubleGenerator(), 100, 200); }\n+            default -> { throw new RuntimeException(\"impossible\"); }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.lang.foreign.*;\n+\n+\/**\n+ * Define interface of int generators.\n+ *\/\n+public abstract class IntGenerator {\n+    \/**\n+     * Generate a random int from [lo, hi], where the bounds are inclusive.\n+     *\/\n+    public abstract int nextInt(int lo, int hi);\n+\n+    \/**\n+     * Generate a random integer from the whole int range.\n+     *\/\n+    public final int nextInt() {\n+        return nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+    }\n+\n+    \/**\n+     * Generate a random integer in the range [0, hi], where the bounds are inclusive.\n+     *\/\n+    public final int nextInt(int hi) {\n+        return nextInt(0, hi);\n+    }\n+\n+    \/**\n+     * Fill the memory segments with ints in range [lo, hi], where the bounds are inclusive,\n+     * Fill it with ints from the generators distribution.\n+     *\/\n+    public void fill(MemorySegment ms, int lo, int hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+            ms.set(ValueLayout.JAVA_INT_UNALIGNED, 4L * i, nextInt(lo, hi));\n+        }\n+    }\n+\n+    \/**\n+     * Fill the array with ints in range [lo, hi], where the bounds are inclusive,\n+     * Fill it with ints from the generators distribution.\n+     *\/\n+    public void fill(int[] a, int lo, int hi) {\n+        fill(MemorySegment.ofArray(a), lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/IntGenerator.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.lang.foreign.*;\n+\n+\/**\n+ * Define interface of long generators.\n+ *\/\n+public abstract class LongGenerator {\n+    \/**\n+     * Generate a random long from [lo, hi], where the bounds are inclusive.\n+     *\/\n+    public abstract long nextLong(long lo, long hi);\n+\n+    \/**\n+     * Generate a random long from the whole long range.\n+     *\/\n+    public final long nextLong() {\n+        return nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+    }\n+\n+    \/**\n+     * Generate a random long in the range [0, hi], where the bounds are inclusive.\n+     *\/\n+    public final long nextLong(long hi) {\n+        return nextLong(0, hi);\n+    }\n+\n+    \/**\n+     * Fill the memory segments with longs in range [lo, hi], where the bounds are inclusive,\n+     * Fill it with longs from the generators distribution.\n+     *\/\n+    public void fill(MemorySegment ms, long lo, long hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+            ms.set(ValueLayout.JAVA_LONG_UNALIGNED, 8L * i, nextLong(lo, hi));\n+        }\n+    }\n+\n+    \/**\n+     * Fill the array with longs in range [lo, hi], where the bounds are inclusive,\n+     * Fill it with longs from the generators distribution.\n+     *\/\n+    public void fill(long[] a, long lo, long hi) {\n+        fill(MemorySegment.ofArray(a), lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/LongGenerator.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.HashSet;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Mixed results between UniformIntGenerator and SpecialIntGenerator.\n+ *\/\n+public final class MixedIntGenerator extends IntGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private final UniformIntGenerator uniform;\n+    private final SpecialIntGenerator special;\n+    private final int weightUniform;\n+    private final int weightSpecial;\n+\n+    public MixedIntGenerator(int weightUniform, int weightSpecial, int rangeSpecial) {\n+        this.weightUniform = weightUniform;\n+        this.weightSpecial = weightSpecial;\n+        this.uniform = new UniformIntGenerator();\n+        this.special = new SpecialIntGenerator(rangeSpecial);\n+    }\n+\n+    @Override\n+    public int nextInt(int lo, int hi) {\n+        int r = RANDOM.nextInt(weightUniform + weightSpecial);\n+        if (r < weightUniform) {\n+            return uniform.nextInt(lo, hi);\n+        } else {\n+            return special.nextInt(lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedIntGenerator.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.HashSet;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Mixed results between UniformLongGenerator and SpecialLongGenerator.\n+ *\/\n+public final class MixedLongGenerator extends LongGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private final UniformLongGenerator uniform;\n+    private final SpecialLongGenerator special;\n+    private final int weightUniform;\n+    private final int weightSpecial;\n+\n+    public MixedLongGenerator(int weightUniform, int weightSpecial, int rangeSpecial) {\n+        this.weightUniform = weightUniform;\n+        this.weightSpecial = weightSpecial;\n+        this.uniform = new UniformLongGenerator();\n+        this.special = new SpecialLongGenerator(rangeSpecial);\n+    }\n+\n+    @Override\n+    public long nextLong(long lo, long hi) {\n+        int r = RANDOM.nextInt(weightUniform + weightSpecial);\n+        if (r < weightUniform) {\n+            return uniform.nextLong(lo, hi);\n+        } else {\n+            return special.nextLong(lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedLongGenerator.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a double distribution picked from a list of special values, including NaN, zero, int, etc.\n+ *\/\n+public final class SpecialDoubleGenerator extends DoubleGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/\/ Pre-generated values we can chose from.\n+    private static final double[] VALUES = new double[] {\n+        0,\n+        1,\n+        -1,\n+        Double.POSITIVE_INFINITY,\n+        Double.NEGATIVE_INFINITY,\n+        Double.NaN,\n+        Double.MAX_VALUE,\n+        Double.MIN_NORMAL,\n+        Double.MIN_VALUE,\n+    };\n+\n+    \/\/ We also mix in other values at a certain percentage.\n+    private final DoubleGenerator backgroundGenerator;\n+\n+    \/\/ specialCountDown detemines in how many iterations we generate the next special value.\n+    private final int specialMinFrequency;\n+    private final int specialMaxFrequency;\n+    private int specialCountDown;\n+\n+    public SpecialDoubleGenerator(DoubleGenerator backgroundGenerator, int specialMinFrequency, int specialMaxFrequency) {\n+        this.backgroundGenerator = backgroundGenerator;\n+        this.specialMinFrequency = specialMinFrequency;\n+        this.specialMaxFrequency = specialMaxFrequency;\n+        this.specialCountDown = RANDOM.nextInt(specialMaxFrequency);\n+    }\n+\n+    @Override\n+    public double nextDouble() {\n+        specialCountDown--;\n+        if (specialCountDown <= 0) {\n+            specialCountDown = RANDOM.nextInt(specialMinFrequency, specialMaxFrequency);\n+            int r = RANDOM.nextInt(VALUES.length);\n+            return VALUES[r];\n+        } else {\n+            return backgroundGenerator.nextDouble();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialDoubleGenerator.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a float distribution picked from a list of special values, including NaN, zero, int, etc.\n+ *\/\n+public final class SpecialFloatGenerator extends FloatGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/\/ Pre-generated values we can chose from.\n+    private static final float[] VALUES = new float[] {\n+        0,\n+        1,\n+        -1,\n+        Float.POSITIVE_INFINITY,\n+        Float.NEGATIVE_INFINITY,\n+        Float.NaN,\n+        Float.MAX_VALUE,\n+        Float.MIN_NORMAL,\n+        Float.MIN_VALUE,\n+    };\n+\n+    \/\/ We also mix in other values at a certain percentage.\n+    private final FloatGenerator backgroundGenerator;\n+\n+    \/\/ specialCountDown detemines in how many iterations we generate the next special value.\n+    private final int specialMinFrequency;\n+    private final int specialMaxFrequency;\n+    private int specialCountDown;\n+\n+    public SpecialFloatGenerator(FloatGenerator backgroundGenerator, int specialMinFrequency, int specialMaxFrequency) {\n+        this.backgroundGenerator = backgroundGenerator;\n+        this.specialMinFrequency = specialMinFrequency;\n+        this.specialMaxFrequency = specialMaxFrequency;\n+        this.specialCountDown = RANDOM.nextInt(specialMaxFrequency);\n+    }\n+\n+    @Override\n+    public float nextFloat() {\n+        specialCountDown--;\n+        if (specialCountDown <= 0) {\n+            specialCountDown = RANDOM.nextInt(specialMinFrequency, specialMaxFrequency);\n+            int r = RANDOM.nextInt(VALUES.length);\n+            return VALUES[r];\n+        } else {\n+            return backgroundGenerator.nextFloat();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialFloatGenerator.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.HashSet;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a distribution over values close to the powers of 2.\n+ *\/\n+public final class SpecialIntGenerator extends IntGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/\/ Pre-generated values we can chose from.\n+    private final int[] values;\n+\n+    \/\/ Fall-back generator if values does not contain any value in the\n+    \/\/ expected range.\n+    private final UniformIntGenerator uniform = new UniformIntGenerator();\n+\n+    public SpecialIntGenerator(int range) {\n+        HashSet<Integer> set = new HashSet<Integer>();\n+        for (int i = 0; i < 32; i++) {\n+            int pow2 = 1 << i;\n+            for (int j = -range; j <= range; j++) {\n+                set.add(+pow2 + j);\n+                set.add(-pow2 + j);\n+            }\n+        }\n+        this.values = set.stream().mapToInt(Number::intValue).toArray();\n+        Arrays.sort(this.values);\n+    }\n+\n+    @Override\n+    public int nextInt(int lo, int hi) {\n+        \/\/ Find indices in values.\n+        int loIndex = Arrays.binarySearch(values, lo);\n+        int hiIndex = Arrays.binarySearch(values, hi);\n+        if (loIndex < 0) {\n+            \/\/ Not found, but we know that any values higher than lo\n+            \/\/ must be at loIndex or higher.\n+            loIndex = -(loIndex + 1);\n+        }\n+        if (hiIndex < 0) {\n+            \/\/ Not found, but we know that any values lower than hi\n+            \/\/ must be at less than hiIndex.\n+            hiIndex = -(hiIndex + 1);\n+        } else {\n+            hiIndex++;\n+        }\n+        if (loIndex < hiIndex) {\n+            int r = RANDOM.nextInt(hiIndex - loIndex);\n+            return values[loIndex + r];\n+        }\n+\n+        \/\/ No element in values is in the required range.\n+        \/\/ Fall-back to uniform.\n+        return uniform.nextInt(lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialIntGenerator.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.HashSet;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a distribution over values close to the powers of 2.\n+ *\/\n+public final class SpecialLongGenerator extends LongGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/\/ Pre-generated values we can chose from.\n+    private final long[] values;\n+\n+    \/\/ Fall-back generator if values does not contain any value in the\n+    \/\/ expected range.\n+    private final UniformLongGenerator uniform = new UniformLongGenerator();\n+\n+    public SpecialLongGenerator(int range) {\n+        HashSet<Long> set = new HashSet<Long>();\n+        for (int i = 0; i < 64; i++) {\n+            long pow2 = 1L << i;\n+            for (int j = -range; j <= range; j++) {\n+                set.add(+pow2 + j);\n+                set.add(-pow2 + j);\n+            }\n+        }\n+        this.values = set.stream().mapToLong(Number::longValue).toArray();\n+        Arrays.sort(this.values);\n+    }\n+\n+    @Override\n+    public long nextLong(long lo, long hi) {\n+        \/\/ Find indices in values.\n+        int loIndex = Arrays.binarySearch(values, lo);\n+        int hiIndex = Arrays.binarySearch(values, hi);\n+        if (loIndex < 0) {\n+            \/\/ Not found, but we know that any values higher than lo\n+            \/\/ must be at loIndex or higher.\n+            loIndex = -(loIndex + 1);\n+        }\n+        if (hiIndex < 0) {\n+            \/\/ Not found, but we know that any values lower than hi\n+            \/\/ must be at less than hiIndex.\n+            hiIndex = -(hiIndex + 1);\n+        } else {\n+            hiIndex++;\n+        }\n+        if (loIndex < hiIndex) {\n+            int r = RANDOM.nextInt(hiIndex - loIndex);\n+            return values[loIndex + r];\n+        }\n+\n+        \/\/ No element in values is in the required range.\n+        \/\/ Fall-back to uniform.\n+        return uniform.nextLong(lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialLongGenerator.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a uniform double distribution random generator, in the provided range [lo, hi).\n+ *\/\n+public final class UniformDoubleGenerator extends DoubleGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private final double lo;\n+    private final double hi;\n+\n+    public UniformDoubleGenerator(double lo, double hi) {\n+        this.lo = lo;\n+        this.hi = hi;\n+    }\n+\n+    @Override\n+    public double nextDouble() {\n+        return RANDOM.nextDouble(lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformDoubleGenerator.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a uniform float distribution random generator, in the provided range [lo, hi).\n+ *\/\n+public final class UniformFloatGenerator extends FloatGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private final float lo;\n+    private final float hi;\n+\n+    public UniformFloatGenerator(float lo, float hi) {\n+        this.lo = lo;\n+        this.hi = hi;\n+    }\n+\n+    @Override\n+    public float nextFloat() {\n+        return RANDOM.nextFloat(lo, hi);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloatGenerator.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a uniform int distribution random generator.\n+ *\/\n+public final class UniformIntGenerator extends IntGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public UniformIntGenerator() {}\n+\n+    @Override\n+    public int nextInt(int lo, int hi) {\n+        if (hi == Integer.MAX_VALUE) {\n+            if (lo == Integer.MIN_VALUE) {\n+                return RANDOM.nextInt();\n+            }\n+            return RANDOM.nextInt(lo - 1, hi) + 1;\n+        }\n+        return RANDOM.nextInt(lo, hi + 1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformIntGenerator.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.generators;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * Provide a uniform long distribution random generator.\n+ *\/\n+public final class UniformLongGenerator extends LongGenerator {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public UniformLongGenerator() {}\n+\n+    @Override\n+    public long nextLong(long lo, long hi) {\n+        if (hi == Long.MAX_VALUE) {\n+            if (lo == Long.MIN_VALUE) {\n+                return RANDOM.nextLong();\n+            }\n+            return RANDOM.nextLong(lo - 1, hi) + 1;\n+        }\n+        return RANDOM.nextLong(lo, hi + 1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformLongGenerator.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test functionality of DoubleGenerator implementations.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver generators.tests.TestDoubleGenerators\n+ *\/\n+\n+package generators.tests;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+import compiler.lib.generators.*;\n+\n+public class TestDoubleGenerators {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        \/\/ Test every specific distribution.\n+        testGeneral(new UniformDoubleGenerator(-1, 1));\n+        testGeneral(new UniformDoubleGenerator(0.99f, 1.01f));\n+        testGeneral(new AnyBitsDoubleGenerator());\n+        testGeneral(new SpecialDoubleGenerator(new UniformDoubleGenerator(0.999f, 1.001f), 10, 1000));\n+        testGeneral(new SpecialDoubleGenerator(new AnyBitsDoubleGenerator(), 100, 200));\n+\n+        \/\/ Test randomly picked generators.\n+        for (int i = 0; i < 10; i++) {\n+            testGeneral(Generators.doubles());\n+        }\n+\n+        \/\/ Test specific distributions for their qualities.\n+        testUniform(-1, 1);\n+        testUniform(0.99f, 1.01f);\n+        testUniform(Double.MIN_VALUE, Double.MAX_VALUE);\n+\n+        \/\/ Test for a distribution that does not degenerate to inf or NaN.\n+        testUniformReduction();\n+\n+        \/\/ Check that the special distribution has the expected frequency of special values.\n+        testSpecial();\n+    }\n+\n+    public static void testGeneral(DoubleGenerator g) {\n+        \/\/ Generate doubles from unknown distribution - cannot test anything.\n+        for (int i = 0; i < 1000; i++) {\n+             g.nextDouble();\n+        }\n+        for (int i = 0; i < 10; i++) {\n+             double[] a = new double[1000];\n+             g.fill(a);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             double[] a = new double[1000];\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms);\n+        }\n+    }\n+\n+    public static void testUniform(double lo, double hi) {\n+        DoubleGenerator g = new UniformDoubleGenerator(lo, hi);\n+        for (int i = 0; i < 1000; i++) {\n+             double v = g.nextDouble();\n+             checkRange(v, lo, hi);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+             double[] a = new double[1000];\n+             g.fill(a);\n+             checkRange(a, lo, hi);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             double[] a = new double[1000];\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms);\n+             checkRange(a, lo, hi);\n+             checkRange(ms, lo, hi);\n+        }\n+    }\n+\n+    public static void testUniformReduction() {\n+        DoubleGenerator g1 = new UniformDoubleGenerator(0.998f, 0.999f);\n+        DoubleGenerator g2 = new UniformDoubleGenerator(1.001f, 1.002f);\n+        double v1 = 1;\n+        double v2 = 1;\n+        for (int i = 0; i < 10_000; i++) {\n+            v1 *= g1.nextDouble();\n+            v2 *= g2.nextDouble();\n+        }\n+        checkRange(v1, 1e-10f, 1e-4f);\n+        checkRange(v2, 1e4f,   1e10f);\n+    }\n+\n+    public static void testSpecial() {\n+        \/\/ Generate \"safe\" values that do not overlap the special values.\n+        \/\/ Generate about 10% special values.\n+        DoubleGenerator g1 = new UniformDoubleGenerator(100, 200);\n+        DoubleGenerator g = new SpecialDoubleGenerator(g1, 10, 11);\n+        int specialCount = 0;\n+        for (int i = 0; i < 10_000; i++) {\n+            double v = g.nextDouble();\n+            if (!(100 <= v && v < 200)) { specialCount++; }\n+        }\n+        \/\/ Expect special count to be close to 10%\n+        if (specialCount < 1000 - 10 || 1000 + 10 < specialCount) {\n+            throw new RuntimeException(\"Special count too far away from 1000: \" + specialCount);\n+        }\n+    }\n+\n+    public static void checkRange(double v, double lo, double hi) {\n+        if (!(lo <= v && v < hi)) {\n+            throw new RuntimeException(\"Out of bounds: \" + v + \"not in [\" + lo + \",\" + hi + \")\");\n+        }\n+    }\n+\n+    public static void checkRange(double[] a, double lo, double hi) {\n+        checkRange(MemorySegment.ofArray(a), lo, hi);\n+    }\n+\n+    public static void checkRange(MemorySegment ms, double lo, double hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+            double v = ms.get(ValueLayout.JAVA_DOUBLE_UNALIGNED, 8L * i);\n+            checkRange(v, lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestDoubleGenerators.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test functionality of FloatGenerator implementations.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver generators.tests.TestFloatGenerators\n+ *\/\n+\n+package generators.tests;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+import compiler.lib.generators.*;\n+\n+public class TestFloatGenerators {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        \/\/ Test every specific distribution.\n+        testGeneral(new UniformFloatGenerator(-1, 1));\n+        testGeneral(new UniformFloatGenerator(0.99f, 1.01f));\n+        testGeneral(new AnyBitsFloatGenerator());\n+        testGeneral(new SpecialFloatGenerator(new UniformFloatGenerator(0.999f, 1.001f), 10, 1000));\n+        testGeneral(new SpecialFloatGenerator(new AnyBitsFloatGenerator(), 100, 200));\n+\n+        \/\/ Test randomly picked generators.\n+        for (int i = 0; i < 10; i++) {\n+            testGeneral(Generators.floats());\n+        }\n+\n+        \/\/ Test specific distributions for their qualities.\n+        testUniform(-1, 1);\n+        testUniform(0.99f, 1.01f);\n+        testUniform(Float.MIN_VALUE, Float.MAX_VALUE);\n+\n+        \/\/ Test for a distribution that does not degenerate to inf or NaN.\n+        testUniformReduction();\n+\n+        \/\/ Check that the special distribution has the expected frequency of special values.\n+        testSpecial();\n+    }\n+\n+    public static void testGeneral(FloatGenerator g) {\n+        \/\/ Generate floats from unknown distribution - cannot test anything.\n+        for (int i = 0; i < 1000; i++) {\n+             g.nextFloat();\n+        }\n+        for (int i = 0; i < 10; i++) {\n+             float[] a = new float[1000];\n+             g.fill(a);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             float[] a = new float[1000];\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms);\n+        }\n+    }\n+\n+    public static void testUniform(float lo, float hi) {\n+        FloatGenerator g = new UniformFloatGenerator(lo, hi);\n+        for (int i = 0; i < 1000; i++) {\n+             float v = g.nextFloat();\n+             checkRange(v, lo, hi);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+             float[] a = new float[1000];\n+             g.fill(a);\n+             checkRange(a, lo, hi);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             float[] a = new float[1000];\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms);\n+             checkRange(a, lo, hi);\n+             checkRange(ms, lo, hi);\n+        }\n+    }\n+\n+    public static void testUniformReduction() {\n+        FloatGenerator g1 = new UniformFloatGenerator(0.998f, 0.999f);\n+        FloatGenerator g2 = new UniformFloatGenerator(1.001f, 1.002f);\n+        float v1 = 1;\n+        float v2 = 1;\n+        for (int i = 0; i < 10_000; i++) {\n+            v1 *= g1.nextFloat();\n+            v2 *= g2.nextFloat();\n+        }\n+        checkRange(v1, 1e-10f, 1e-4f);\n+        checkRange(v2, 1e4f,   1e10f);\n+    }\n+\n+    public static void testSpecial() {\n+        \/\/ Generate \"safe\" values that do not overlap the special values.\n+        \/\/ Generate about 10% special values.\n+        FloatGenerator g1 = new UniformFloatGenerator(100, 200);\n+        FloatGenerator g = new SpecialFloatGenerator(g1, 10, 11);\n+        int specialCount = 0;\n+        for (int i = 0; i < 10_000; i++) {\n+            float v = g.nextFloat();\n+            if (!(100 <= v && v < 200)) { specialCount++; }\n+        }\n+        \/\/ Expect special count to be close to 10%\n+        if (specialCount < 1000 - 10 || 1000 + 10 < specialCount) {\n+            throw new RuntimeException(\"Special count too far away from 1000: \" + specialCount);\n+        }\n+    }\n+\n+    public static void checkRange(float v, float lo, float hi) {\n+        if (!(lo <= v && v < hi)) {\n+            throw new RuntimeException(\"Out of bounds: \" + v + \"not in [\" + lo + \",\" + hi + \")\");\n+        }\n+    }\n+\n+    public static void checkRange(float[] a, float lo, float hi) {\n+        checkRange(MemorySegment.ofArray(a), lo, hi);\n+    }\n+\n+    public static void checkRange(MemorySegment ms, float lo, float hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+            float v = ms.get(ValueLayout.JAVA_FLOAT_UNALIGNED, 4L * i);\n+            checkRange(v, lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestFloatGenerators.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test functionality of IntGenerator implementations.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver generators.tests.TestIntGenerators\n+ *\/\n+\n+package generators.tests;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+import compiler.lib.generators.*;\n+\n+public class TestIntGenerators {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        \/\/ Test every specific distribution.\n+        test(new UniformIntGenerator());\n+        test(new SpecialIntGenerator(0));\n+        test(new SpecialIntGenerator(2));\n+        test(new SpecialIntGenerator(16));\n+        test(new MixedIntGenerator(1, 1, 16));\n+        test(new MixedIntGenerator(1, 2, 2));\n+\n+        \/\/ Test randomly picked generators.\n+        for (int i = 0; i < 10; i++) {\n+            test(Generators.ints());\n+        }\n+    }\n+\n+    public static void test(IntGenerator g) {\n+        testIndividual(g);\n+        testFill(g);\n+    }\n+\n+    public static void testIndividual(IntGenerator g) {\n+        \/\/ Just generate some full range integers - cannot test anything.\n+        for (int i = 0; i < 1000; i++) {\n+             g.nextInt();\n+        }\n+\n+        \/\/ Test positive values.\n+        for (int i = 0; i < 1000; i++) {\n+             int hi = RANDOM.nextInt(Integer.MAX_VALUE);\n+             int v = g.nextInt(hi);\n+             checkRange(v, 0, hi);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+             int v = g.nextInt(Integer.MAX_VALUE);\n+             checkRange(v, 0, Integer.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+             int v = g.nextInt(i);\n+             checkRange(v, 0, i);\n+        }\n+\n+        \/\/ Any range.\n+        for (int i = 0; i < 1000; i++) {\n+             int v = g.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+             \/\/ hi in [min_int+1, max_int]\n+             \/\/ lo in [min_int, hi-1]\n+             int hi = RANDOM.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE) + 1;\n+             int lo = RANDOM.nextInt(Integer.MIN_VALUE, hi);\n+             int v = g.nextInt(lo, hi);\n+             checkRange(v, lo, hi);\n+        }\n+    }\n+\n+    public static void testFill(IntGenerator g) {\n+        for (int i = 0; i < 10; i++) {\n+             int[] a = new int[1000];\n+             g.fill(a, Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             int[] a = new int[1000];\n+             \/\/ hi in [min_int+1, max_int]\n+             \/\/ lo in [min_int, hi-1]\n+             int hi = RANDOM.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE) + 1;\n+             int lo = RANDOM.nextInt(Integer.MIN_VALUE, hi);\n+             g.fill(a, lo, hi);\n+             checkRange(a, lo, hi);\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms, lo, hi);\n+             checkRange(ms, lo, hi);\n+        }\n+    }\n+\n+    public static void checkRange(int v, int lo, int hi) {\n+        if (v < lo || v > hi) {\n+            throw new RuntimeException(\"Out of bounds: \" + v + \"not in [\" + lo + \",\" + hi + \"]\");\n+        }\n+    }\n+\n+    public static void checkRange(int[] a, int lo, int hi) {\n+        checkRange(MemorySegment.ofArray(a), lo, hi);\n+    }\n+\n+    public static void checkRange(MemorySegment ms, int lo, int hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+            int v = ms.get(ValueLayout.JAVA_INT_UNALIGNED, 4L * i);\n+            checkRange(v, lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestIntGenerators.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test functionality of LongGenerator implementations.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver generators.tests.TestLongGenerators\n+ *\/\n+\n+package generators.tests;\n+\n+import java.lang.foreign.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+import compiler.lib.generators.*;\n+\n+public class TestLongGenerators {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        \/\/ Test every specific distribution.\n+        test(new UniformLongGenerator());\n+        test(new SpecialLongGenerator(0));\n+        test(new SpecialLongGenerator(2));\n+        test(new SpecialLongGenerator(16));\n+        test(new MixedLongGenerator(1, 1, 16));\n+        test(new MixedLongGenerator(1, 2, 2));\n+\n+        \/\/ Test randomly picked generators.\n+        for (int i = 0; i < 10; i++) {\n+            test(Generators.longs());\n+        }\n+    }\n+\n+    public static void test(LongGenerator g) {\n+        testIndividual(g);\n+        testFill(g);\n+    }\n+\n+    public static void testIndividual(LongGenerator g) {\n+        \/\/ Just generate some full range longs - cannot test anything.\n+        for (int i = 0; i < 1000; i++) {\n+             g.nextLong();\n+        }\n+\n+        \/\/ Test positive values.\n+        for (int i = 0; i < 1000; i++) {\n+             long hi = RANDOM.nextLong(Long.MAX_VALUE);\n+             long v = g.nextLong(hi);\n+             checkRange(v, 0, hi);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+             long v = g.nextLong(Long.MAX_VALUE);\n+             checkRange(v, 0, Long.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+             long v = g.nextLong(i);\n+             checkRange(v, 0, i);\n+        }\n+\n+        \/\/ Any range.\n+        for (int i = 0; i < 1000; i++) {\n+             long v = g.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+             \/\/ hi in [min_long+1, max_long]\n+             \/\/ lo in [min_long, hi-1]\n+             long hi = RANDOM.nextLong(Long.MIN_VALUE, Long.MAX_VALUE) + 1;\n+             long lo = RANDOM.nextLong(Long.MIN_VALUE, hi);\n+             long v = g.nextLong(lo, hi);\n+             checkRange(v, lo, hi);\n+        }\n+    }\n+\n+    public static void testFill(LongGenerator g) {\n+        for (int i = 0; i < 10; i++) {\n+             long[] a = new long[1000];\n+             g.fill(a, Long.MIN_VALUE, Long.MAX_VALUE);\n+        }\n+        for (int i = 0; i < 100; i++) {\n+             long[] a = new long[1000];\n+             \/\/ hi in [min_long+1, max_long]\n+             \/\/ lo in [min_long, hi-1]\n+             long hi = RANDOM.nextLong(Long.MIN_VALUE, Long.MAX_VALUE) + 1;\n+             long lo = RANDOM.nextLong(Long.MIN_VALUE, hi);\n+             g.fill(a, lo, hi);\n+             checkRange(a, lo, hi);\n+             MemorySegment ms = MemorySegment.ofArray(a);\n+             g.fill(ms, lo, hi);\n+             checkRange(ms, lo, hi);\n+        }\n+    }\n+\n+    public static void checkRange(long v, long lo, long hi) {\n+        if (v < lo || v > hi) {\n+            throw new RuntimeException(\"Out of bounds: \" + v + \"not in [\" + lo + \",\" + hi + \"]\");\n+        }\n+    }\n+\n+    public static void checkRange(long[] a, long lo, long hi) {\n+        checkRange(MemorySegment.ofArray(a), lo, hi);\n+    }\n+\n+    public static void checkRange(MemorySegment ms, long lo, long hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+            long v = ms.get(ValueLayout.JAVA_LONG_UNALIGNED, 8L * i);\n+            checkRange(v, lo, hi);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestLongGenerators.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}