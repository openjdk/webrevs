{"files":[{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a any-bits double distribution random generator, i.e. the bits are uniformly sampled,\n+ * Provides an any-bits double distribution random generator, i.e. the bits are uniformly sampled,\n@@ -34,1 +31,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -36,0 +32,3 @@\n+    \/**\n+     * Create a new {@link AnyBitsDoubleGenerator}.\n+     *\/\n@@ -40,1 +39,1 @@\n-        return Double.longBitsToDouble(RANDOM.nextLong());\n+        return Double.longBitsToDouble(Generators.RANDOM.nextLong());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsDoubleGenerator.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a any-bits float distribution random generator, i.e. the bits are uniformly sampled,\n+ * Provides an any-bits float distribution random generator, i.e. the bits are uniformly sampled,\n@@ -34,1 +31,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -36,0 +32,3 @@\n+    \/**\n+     * Creates a new {@link AnyBitsFloatGenerator}.\n+     *\/\n@@ -40,1 +39,1 @@\n-        return Float.intBitsToFloat(RANDOM.nextInt());\n+        return Float.intBitsToFloat(Generators.RANDOM.nextInt());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/AnyBitsFloatGenerator.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n@@ -31,1 +29,1 @@\n- * Define interface of double generators.\n+ * Base class of double generators.\n@@ -34,1 +32,5 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/**\n+     * Creates a new {@link DoubleGenerator}.\n+     *\/\n+    public DoubleGenerator() {}\n@@ -38,0 +40,2 @@\n+     *\n+     * @return Random double value.\n@@ -43,0 +47,2 @@\n+     *\n+     * @param ms Memory segment to be filled with random values.\n@@ -45,1 +51,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++) {\n@@ -52,0 +58,2 @@\n+     *\n+     * @param a Array to be filled with random values.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/DoubleGenerator.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n@@ -31,1 +29,1 @@\n- * Define interface of float generators.\n+ * Base class of float generators.\n@@ -34,1 +32,5 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/**\n+     * Creates a new {@link FloatGenerator}.\n+     *\/\n+    public FloatGenerator() {}\n@@ -38,0 +40,2 @@\n+     *\n+     * @return Random float value.\n@@ -43,0 +47,2 @@\n+     *\n+     * @param ms Memory segment to be filled with random values.\n@@ -45,1 +51,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++) {\n@@ -52,0 +58,2 @@\n+     *\n+     * @param a Array to be filled with random values.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/FloatGenerator.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,5 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n+    static final Random RANDOM = Utils.getRandomInstance();\n+\n+    private Generators() {\n+        throw new AssertionError();\n+    }\n@@ -41,0 +45,2 @@\n+     *\n+     * @return Random int generator.\n@@ -56,0 +62,2 @@\n+     *\n+     * @return Random long generator.\n@@ -71,0 +79,2 @@\n+     *\n+     * @return Random float generator.\n@@ -88,0 +98,2 @@\n+     *\n+     * @return Random double generator.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/Generators.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * Define interface of int generators.\n+ * Base class for int generators.\n@@ -32,0 +32,6 @@\n+\n+    \/**\n+     * Creates a new {@link IntGenerator}.\n+     *\/\n+    public IntGenerator() {}\n+\n@@ -33,1 +39,5 @@\n-     * Generate a random int from [lo, hi], where the bounds are inclusive.\n+     * Generates a random int from [lo, hi], where the bounds are inclusive.\n+     *\n+     * @param lo Lower bound of the sampling range (inclusive).\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @return Value sampled between [lo, hi].\n@@ -38,1 +48,3 @@\n-     * Generate a random integer from the whole int range.\n+     * Generates a random integer from the whole int range.\n+     *\n+     * @return Value sampled from the whole long range.\n@@ -45,1 +57,4 @@\n-     * Generate a random integer in the range [0, hi], where the bounds are inclusive.\n+     * Generates a random integer in the range [0, hi], where the bounds are inclusive.\n+     *\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @return Value sampled from {0, hi}.\n@@ -54,0 +69,4 @@\n+     *\n+     * @param ms Memory segment to be filled.\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @param lo Lower bound of the sampling range (inclusive).\n@@ -55,2 +74,2 @@\n-    public void fill(MemorySegment ms, int lo, int hi) {\n-        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+    public final void fill(MemorySegment ms, int lo, int hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++) {\n@@ -64,0 +83,4 @@\n+     *\n+     * @param a Array to be filled.\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @param lo Lower bound of the sampling range (inclusive).\n@@ -65,1 +88,1 @@\n-    public void fill(int[] a, int lo, int hi) {\n+    public final void fill(int[] a, int lo, int hi) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/IntGenerator.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * Define interface of long generators.\n+ * Base class for long generators.\n@@ -32,0 +32,6 @@\n+\n+    \/**\n+     * Creates a new {@link LongGenerator}.\n+     *\/\n+    public LongGenerator() {}\n+\n@@ -33,1 +39,5 @@\n-     * Generate a random long from [lo, hi], where the bounds are inclusive.\n+     * Generates a random long from [lo, hi], where the bounds are inclusive.\n+     *\n+     * @param lo Lower bound of the sampling range (inclusive).\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @return Value sampled between [lo, hi].\n@@ -38,1 +48,3 @@\n-     * Generate a random long from the whole long range.\n+     * Generates a random long from the whole long range.\n+     *\n+     * @return Value sampled from the whole long range.\n@@ -45,1 +57,4 @@\n-     * Generate a random long in the range [0, hi], where the bounds are inclusive.\n+     * Generates a random long in the range [0, hi], where the bounds are inclusive.\n+     *\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @return Value sampled from {0, hi}.\n@@ -54,0 +69,4 @@\n+     *\n+     * @param ms Memory segment to be filled.\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @param lo Lower bound of the sampling range (inclusive).\n@@ -55,2 +74,2 @@\n-    public void fill(MemorySegment ms, long lo, long hi) {\n-        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+    public final void fill(MemorySegment ms, long lo, long hi) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++) {\n@@ -64,0 +83,4 @@\n+     *\n+     * @param a Array to be filled.\n+     * @param hi Higher bound of the sampling range (inclusive).\n+     * @param lo Lower bound of the sampling range (inclusive).\n@@ -65,1 +88,1 @@\n-    public void fill(long[] a, long lo, long hi) {\n+    public final void fill(long[] a, long lo, long hi) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/LongGenerator.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Random;\n@@ -29,1 +28,0 @@\n-import jdk.test.lib.Utils;\n@@ -32,1 +30,1 @@\n- * Mixed results between UniformIntGenerator and SpecialIntGenerator.\n+ * Mixed results between {@link UniformIntGenerator} and {@link SpecialIntGenerator}.\n@@ -35,2 +33,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n-\n@@ -42,0 +38,8 @@\n+    \/**\n+     * Creates a new {@link MixedIntGenerator}, which samples from {@link UniformIntGenerator} and {@link SpecialIntGenerator},\n+     * according to specified weights.\n+     *\n+     * @param weightUniform Weight for the uniform distribution.\n+     * @param weightSpecial Weight for the special distribution.\n+     * @param rangeSpecial Range for the special distribution.\n+     *\/\n@@ -51,1 +55,1 @@\n-        int r = RANDOM.nextInt(weightUniform + weightSpecial);\n+        int r = Generators.RANDOM.nextInt(weightUniform + weightSpecial);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedIntGenerator.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Random;\n@@ -29,1 +28,0 @@\n-import jdk.test.lib.Utils;\n@@ -32,1 +30,1 @@\n- * Mixed results between UniformLongGenerator and SpecialLongGenerator.\n+ * Mixed results between {@link UniformLongGenerator} and {@link SpecialLongGenerator}.\n@@ -35,2 +33,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n-\n@@ -42,0 +38,8 @@\n+    \/**\n+     * Creates a new {@link MixedLongGenerator}, which samples from {@link UniformLongGenerator} and {@link SpecialLongGenerator},\n+     * according to specified weights.\n+     *\n+     * @param weightUniform Weight for the uniform distribution.\n+     * @param weightSpecial Weight for the special distribution.\n+     * @param rangeSpecial Range for the special distribution.\n+     *\/\n@@ -51,1 +55,1 @@\n-        int r = RANDOM.nextInt(weightUniform + weightSpecial);\n+        int r = Generators.RANDOM.nextInt(weightUniform + weightSpecial);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/MixedLongGenerator.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a double distribution picked from a list of special values, including NaN, zero, int, etc.\n+ * Provides a double distribution picked from a list of special values, including NaN, zero, int, etc.\n@@ -33,1 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -35,1 +31,3 @@\n-    \/\/ Pre-generated values we can chose from.\n+    \/*\n+     * Pre-generated values we can chose from.\n+     *\/\n@@ -48,1 +46,3 @@\n-    \/\/ We also mix in other values at a certain percentage.\n+    \/*\n+     * We also mix in other values at a certain percentage.\n+     *\/\n@@ -51,3 +51,5 @@\n-    \/\/ specialCountDown detemines in how many iterations we generate the next special value.\n-    private final int specialMinFrequency;\n-    private final int specialMaxFrequency;\n+    \/*\n+     * {@link specialCountDown} detemines in how many iterations we generate the next special value.\n+     *\/\n+    private final int specialMinDistance;\n+    private final int specialMaxDistance;\n@@ -56,1 +58,10 @@\n-    public SpecialDoubleGenerator(DoubleGenerator backgroundGenerator, int specialMinFrequency, int specialMaxFrequency) {\n+    \/**\n+     * Creates a new {@link SpecialDoubleGenerator}. It periodically generates a special value (NaN, zero, infinity, etc).\n+     * The distance between two special values is chosen randomly between {@code specialMinDistance} and\n+     * {@code specialMaxDistance}. All other values in between are chosen from a {@code backgroundGenerator}.\n+     *\n+     * @param backgroundGenerator Provides the random values between the special values.\n+     * @param specialMinDistance Minimum distance between special values.\n+     * @param specialMaxDistance Maximum distance between special values.\n+     *\/\n+    public SpecialDoubleGenerator(DoubleGenerator backgroundGenerator, int specialMinDistance, int specialMaxDistance) {\n@@ -58,3 +69,3 @@\n-        this.specialMinFrequency = specialMinFrequency;\n-        this.specialMaxFrequency = specialMaxFrequency;\n-        this.specialCountDown = RANDOM.nextInt(specialMaxFrequency);\n+        this.specialMinDistance = specialMinDistance;\n+        this.specialMaxDistance = specialMaxDistance;\n+        this.specialCountDown = Generators.RANDOM.nextInt(specialMaxDistance);\n@@ -67,2 +78,2 @@\n-            specialCountDown = RANDOM.nextInt(specialMinFrequency, specialMaxFrequency);\n-            int r = RANDOM.nextInt(VALUES.length);\n+            specialCountDown = Generators.RANDOM.nextInt(specialMinDistance, specialMaxDistance);\n+            int r = Generators.RANDOM.nextInt(VALUES.length);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialDoubleGenerator.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a float distribution picked from a list of special values, including NaN, zero, int, etc.\n+ * Provides a float distribution picked from a list of special values, including NaN, zero, int, etc.\n@@ -33,1 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -35,1 +31,3 @@\n-    \/\/ Pre-generated values we can chose from.\n+    \/*\n+     * Pre-generated values we can chose from.\n+     *\/\n@@ -48,1 +46,3 @@\n-    \/\/ We also mix in other values at a certain percentage.\n+    \/*\n+     * We also mix in other values at a certain percentage.\n+     *\/\n@@ -51,3 +51,5 @@\n-    \/\/ specialCountDown detemines in how many iterations we generate the next special value.\n-    private final int specialMinFrequency;\n-    private final int specialMaxFrequency;\n+    \/*\n+     * {@link specialCountDown} detemines in how many iterations we generate the next special value.\n+     *\/\n+    private final int specialMinDistance;\n+    private final int specialMaxDistance;\n@@ -56,1 +58,10 @@\n-    public SpecialFloatGenerator(FloatGenerator backgroundGenerator, int specialMinFrequency, int specialMaxFrequency) {\n+    \/**\n+     * Creates a new {@link SpecialFloatGenerator}. It periodically generates a special value (NaN, zero, infinity, etc).\n+     * The distance between two special values is chosen randomly between {@code specialMinDistance} and\n+     * {@code specialMaxDistance}. All other values in between are chosen from a {@code backgroundGenerator}.\n+     *\n+     * @param backgroundGenerator Provides the random values between the special values.\n+     * @param specialMinDistance Minimum distance between special values.\n+     * @param specialMaxDistance Maximum distance between special values.\n+     *\/\n+    public SpecialFloatGenerator(FloatGenerator backgroundGenerator, int specialMinDistance, int specialMaxDistance) {\n@@ -58,3 +69,3 @@\n-        this.specialMinFrequency = specialMinFrequency;\n-        this.specialMaxFrequency = specialMaxFrequency;\n-        this.specialCountDown = RANDOM.nextInt(specialMaxFrequency);\n+        this.specialMinDistance = specialMinDistance;\n+        this.specialMaxDistance = specialMaxDistance;\n+        this.specialCountDown = Generators.RANDOM.nextInt(specialMaxDistance);\n@@ -67,2 +78,2 @@\n-            specialCountDown = RANDOM.nextInt(specialMinFrequency, specialMaxFrequency);\n-            int r = RANDOM.nextInt(VALUES.length);\n+            specialCountDown = Generators.RANDOM.nextInt(specialMinDistance, specialMaxDistance);\n+            int r = Generators.RANDOM.nextInt(VALUES.length);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialFloatGenerator.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Random;\n@@ -29,1 +28,0 @@\n-import jdk.test.lib.Utils;\n@@ -32,1 +30,1 @@\n- * Provide a distribution over values close to the powers of 2.\n+ * Provides a distribution over values close to the powers of 2.\n@@ -35,1 +33,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -37,1 +34,3 @@\n-    \/\/ Pre-generated values we can chose from.\n+    \/*\n+     * Pre-generated values we can chose from.\n+     *\/\n@@ -40,2 +39,4 @@\n-    \/\/ Fall-back generator if values does not contain any value in the\n-    \/\/ expected range.\n+    \/*\n+     * Fall-back generator if values does not contain any value in the\n+     * expected range.\n+     *\/\n@@ -44,0 +45,6 @@\n+    \/**\n+     * Creates a new {@link SpecialIntGenerator}. Generates only powers of 2, and\n+     * values that are not more than {@code range} away from powers of 2.\n+     *\n+     * @param range How far away from the powers of 2 the values should be generated.\n+     *\/\n@@ -75,1 +82,1 @@\n-            int r = RANDOM.nextInt(hiIndex - loIndex);\n+            int r = Generators.RANDOM.nextInt(hiIndex - loIndex);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialIntGenerator.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Random;\n@@ -29,1 +28,0 @@\n-import jdk.test.lib.Utils;\n@@ -32,1 +30,1 @@\n- * Provide a distribution over values close to the powers of 2.\n+ * Provides a distribution over values close to the powers of 2.\n@@ -35,1 +33,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -37,1 +34,3 @@\n-    \/\/ Pre-generated values we can chose from.\n+    \/*\n+     * Pre-generated values we can chose from.\n+     *\/\n@@ -40,2 +39,4 @@\n-    \/\/ Fall-back generator if values does not contain any value in the\n-    \/\/ expected range.\n+    \/*\n+     * Fall-back generator if values does not contain any value in the\n+     * expected range.\n+     *\/\n@@ -44,0 +45,6 @@\n+    \/**\n+     * Creates a new {@link SpecialLongGenerator}. Generates only powers of 2, and\n+     * values that are not more than {@code range} away from powers of 2.\n+     *\n+     * @param range How far away from the powers of 2 the values should be generated.\n+     *\/\n@@ -75,1 +82,1 @@\n-            int r = RANDOM.nextInt(hiIndex - loIndex);\n+            int r = Generators.RANDOM.nextInt(hiIndex - loIndex);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/SpecialLongGenerator.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a uniform double distribution random generator, in the provided range [lo, hi).\n+ * Provides a uniform double distribution random generator, in the provided range [lo, hi).\n@@ -33,2 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n-\n@@ -38,0 +33,6 @@\n+    \/**\n+     * Creates a new {@link UniformFloatGenerator}.\n+     *\n+     * @param lo Lower bound of the range (inclusive).\n+     * @param hi Higher bound of the range (exclusive).\n+     *\/\n@@ -45,1 +46,1 @@\n-        return RANDOM.nextDouble(lo, hi);\n+        return Generators.RANDOM.nextDouble(lo, hi);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformDoubleGenerator.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a uniform float distribution random generator, in the provided range [lo, hi).\n+ * Provides a uniform float distribution random generator, in the provided range [lo, hi).\n@@ -33,2 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n-\n@@ -38,0 +33,6 @@\n+    \/**\n+     * Creates a new {@link UniformFloatGenerator}.\n+     *\n+     * @param lo Lower bound of the range (inclusive).\n+     * @param hi Higher bound of the range (exclusive).\n+     *\/\n@@ -45,1 +46,1 @@\n-        return RANDOM.nextFloat(lo, hi);\n+        return Generators.RANDOM.nextFloat(lo, hi);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformFloatGenerator.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a uniform int distribution random generator.\n+ * Provides a uniform int distribution random generator.\n@@ -33,1 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -35,0 +31,3 @@\n+    \/**\n+     * Creates a new {@link UniformIntGenerator}.\n+     *\/\n@@ -41,1 +40,1 @@\n-                return RANDOM.nextInt();\n+                return Generators.RANDOM.nextInt();\n@@ -43,1 +42,1 @@\n-            return RANDOM.nextInt(lo - 1, hi) + 1;\n+            return Generators.RANDOM.nextInt(lo - 1, hi) + 1;\n@@ -45,1 +44,1 @@\n-        return RANDOM.nextInt(lo, hi + 1);\n+        return Generators.RANDOM.nextInt(lo, hi + 1);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformIntGenerator.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -30,1 +27,1 @@\n- * Provide a uniform long distribution random generator.\n+ * Provides a uniform long distribution random generator.\n@@ -33,1 +30,0 @@\n-    private static final Random RANDOM = Utils.getRandomInstance();\n@@ -35,0 +31,3 @@\n+    \/**\n+     * Creates a new {@link UniformLongGenerator}.\n+     *\/\n@@ -41,1 +40,1 @@\n-                return RANDOM.nextLong();\n+                return Generators.RANDOM.nextLong();\n@@ -43,1 +42,1 @@\n-            return RANDOM.nextLong(lo - 1, hi) + 1;\n+            return Generators.RANDOM.nextLong(lo - 1, hi) + 1;\n@@ -45,1 +44,1 @@\n-        return RANDOM.nextLong(lo, hi + 1);\n+        return Generators.RANDOM.nextLong(lo, hi + 1);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/generators\/UniformLongGenerator.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++) {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestDoubleGenerators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++) {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestFloatGenerators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 4; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 4; i++) {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestIntGenerators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        for (long i = 0; i < ms.byteSize() \/ 8; i++ ) {\n+        for (long i = 0; i < ms.byteSize() \/ 8; i++) {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/generators\/tests\/TestLongGenerators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}