{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6225679\n+ * @summary Tests that checkbox changes into radiobutton dynamically\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DynamicChangeTest\n+ *\/\n+\n+import java.awt.Checkbox;\n+import java.awt.CheckboxGroup;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+\n+public class DynamicChangeTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test is primarily for Windows platform, but should pass\n+                on other platforms as well. Ensure that 'This is checkbox' is\n+                checkbox, and 'This is radiobutton' is radiobutton.\n+                If it is so, press pass else fail.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(DynamicChangeTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"Dynamic Change Checkbox Test\");\n+        f.setSize(200, 200);\n+\n+        f.setLayout(new GridLayout(2, 1));\n+        Checkbox ch1 = new Checkbox(\"This is checkbox\",\n+                new CheckboxGroup(), true);\n+        f.add(ch1);\n+        Checkbox ch2 = new Checkbox(\"This is radiobutton\", null, true);\n+        f.add(ch2);\n+\n+        ch1.setCheckboxGroup(null);\n+        ch2.setCheckboxGroup(new CheckboxGroup());\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Checkbox\/DynamicChangeTest\/DynamicChangeTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4313052\n+ * @summary Test cursor changes after mouse dragging ends\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListDragCursor\n+ *\/\n+\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+\n+public class ListDragCursor {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Move mouse to the TextArea.\n+                2. Press the left mouse button.\n+                3. Drag mouse to the list.\n+                4. Release the left mouse button.\n+\n+                If the mouse cursor starts as a Text Line Cursor and changes\n+                to a regular Pointer Cursor, then Hand Cursor when hovering\n+                the list, pass the test. This test fails if the cursor does\n+                not update at all when pointing over the different components.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(ListDragCursor::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame frame = new Frame(\"Cursor change after drag\");\n+        Panel panel = new Panel();\n+\n+        List list = new List(2);\n+        list.add(\"List1\");\n+        list.add(\"List2\");\n+        list.add(\"List3\");\n+        list.add(\"List4\");\n+        list.setCursor(new Cursor(Cursor.HAND_CURSOR));\n+\n+        TextArea textArea = new TextArea(3, 5);\n+        textArea.setCursor(new Cursor(Cursor.TEXT_CURSOR));\n+\n+        panel.add(textArea);\n+        panel.add(list);\n+\n+        frame.add(panel);\n+        frame.setBounds(300, 100, 300, 150);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/CursorDragTest\/ListDragCursor.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5079694\n+ * @summary Test if JDialog respects setCursor\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HiddenDialogParentTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.border.LineBorder;\n+\n+public class HiddenDialogParentTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                 You can see a label area in the center of JDialog.\n+                 Verify that the cursor is a hand cursor in this area.\n+                 If so, press pass, else press fail.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(HiddenDialogParentTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JDialog createUI() {\n+        JDialog dialog = new JDialog();\n+        dialog.setTitle(\"JDialog Cursor Test\");\n+        dialog.setLayout(new BorderLayout());\n+        JLabel centerLabel = new JLabel(\"Cursor should be a hand in this \" +\n+                \"label area\");\n+        centerLabel.setBorder(new LineBorder(Color.BLACK));\n+        centerLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+        dialog.add(centerLabel, BorderLayout.CENTER);\n+        dialog.setSize(300, 200);\n+\n+        return dialog;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/HiddenDialogParentTest\/HiddenDialogParentTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4212593\n+ * @summary The Toolkit.createCustomCursor does not check absence of the\n+ *          image of cursor\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual InvalidImageCustomCursorTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+\n+public class InvalidImageCustomCursorTest {\n+    static Cursor cursor;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Press 'Hide' button to hide (set transparent) cursor for the\n+                green panel. Move the pointer over the green panel - pointer\n+                should disappear. Press 'Default' button to set default cursor\n+                for the green panel.\n+\n+                If you see any exceptions or cursor is not transparent,\n+                test failed, otherwise it passed.\n+                \"\"\";\n+\n+        Toolkit tk = Toolkit.getDefaultToolkit();\n+        Image image = tk.getImage(\"NON_EXISTING_FILE.gif\");\n+        Point p = new Point(0, 0);\n+\n+        cursor = tk.createCustomCursor(image, p, \"Test\");\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(InvalidImageCustomCursorTest::createUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"Invalid Cursor Image Test\");\n+        f.setLayout(new BorderLayout());\n+        f.setSize(200, 200);\n+\n+        Button def = new Button(\"Default\");\n+        Button hide = new Button(\"Hide\");\n+        Panel panel = new Panel();\n+\n+        def.addActionListener(e -> panel.setCursor(Cursor.getDefaultCursor()));\n+        hide.addActionListener(e -> panel.setCursor(cursor));\n+\n+        panel.setBackground(Color.green);\n+        panel.setSize(100, 100);\n+        f.add(\"Center\", panel);\n+        f.add(\"North\", hide);\n+        f.add(\"South\", def);\n+\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/InvalidImageCustomCursorTest\/InvalidImageCustomCursorTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4111379\n+ * @summary Test for setting cursor to null for lightweight components\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NullCursorTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class NullCursorTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                 1. Hover over each colored area as described:\n+                        Green area shows a CrossCursor.\n+                        Red area shows a TextCursor.\n+                        Yellow area shows a HandCursor.\n+                 2. Click once in red area, then:\n+                        Green area shows a HandCursor.\n+                        Red area shows a BusyCursor.\n+                        Yellow area shows a HandCursor.\n+                 3. Click again in red area, then:\n+                        Green area shows a CrossCursor.\n+                        Red area shows a HandCursor.\n+                        Yellow area shows a HandCursor.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(NullCursorTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"Null Cursor Test Frame\");\n+        f.setSize(200, 200);\n+        final Container p = f;\n+        p.setName(\"parent\");\n+        p.setLayout(null);\n+\n+        final Component green = p.add(new Component() {\n+            public void paint(Graphics g) {\n+                Rectangle r = getBounds();\n+                g.setColor(Color.green);\n+                g.fillRect(0, 0, r.width, r.height);\n+            }\n+        });\n+        green.setName(\"green\");\n+        green.setBackground(Color.red);\n+        green.setBounds(50, 50, 75, 75);\n+        green.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\n+\n+        Container h = new Container() {\n+            public void paint(Graphics g) {\n+                Rectangle r = getBounds();\n+                g.setColor(Color.yellow);\n+                g.fillRect(0, 0, r.width, r.height);\n+                super.paint(g);\n+            }\n+        };\n+        h.setBounds(15, 25, 150, 150);\n+        h.setName(\"container\");\n+        h.setBackground(Color.yellow);\n+        h.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+        final Component red = new Component() {\n+            public void paint(Graphics g) {\n+                Rectangle r = getBounds();\n+                Color c = getBackground();\n+                g.setColor(c);\n+                g.fillRect(0, 0, r.width, r.height);\n+                super.paint(g);\n+            }\n+        };\n+        red.setName(\"red\");\n+        red.setBackground(Color.red);\n+        red.setBounds(10, 10, 120, 120);\n+        red.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n+\n+        final Button b = (Button)h.add(new Button(\"Test\"));\n+        b.setBounds(10, 10, 40, 20);\n+        h.add(red);\n+        p.add(h);\n+\n+        b.addActionListener(new ActionListener() {\n+            boolean f = false;\n+            public void actionPerformed(ActionEvent e) {\n+                if (f) {\n+                    b.setCursor(null);\n+                } else {\n+                    b.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+                }\n+                f = !f;\n+            }\n+        });\n+        red.addMouseListener(new MouseAdapter() {\n+            boolean f = true;\n+\n+            public void mouseClicked(MouseEvent e) {\n+                Component c = (Component)e.getSource();\n+                if (f) {\n+                    c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n+                    p.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n+                    green.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n+                    f = false;\n+                } else {\n+                    c.setCursor(null);\n+                    p.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n+                    green.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\n+                    f = true;\n+                }\n+            }\n+        });\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/NullCursorTest\/NullCursorTest.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"}]}