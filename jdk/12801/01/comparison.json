{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.source.tree.PrimitiveTypeTree;\n@@ -143,0 +144,2 @@\n+        Path internalAPIDigestFile;\n+        Map<String, String> internalAPI = new HashMap<>();\n@@ -144,0 +147,2 @@\n+        Context context = ((BasicJavacTask) jt).getContext();\n+        JavaCompiler compiler = JavaCompiler.instance(context);\n@@ -145,1 +150,0 @@\n-            Context context = ((BasicJavacTask) jt).getContext();\n@@ -160,2 +164,12 @@\n-            Path internalAPIDigestFile = Paths.get(internalAPIPath);\n-            JavaCompiler compiler = JavaCompiler.instance(context);\n+            internalAPIDigestFile = Paths.get(internalAPIPath);\n+            if (Files.isReadable(internalAPIDigestFile)) {\n+                try {\n+                    Files.readAllLines(internalAPIDigestFile, StandardCharsets.UTF_8)\n+                         .forEach(line -> {\n+                             String[] keyAndValue = line.split(\"=\");\n+                             internalAPI.put(keyAndValue[0], keyAndValue[1]);\n+                         });\n+                } catch (IOException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+            }\n@@ -172,1 +186,1 @@\n-                                                                         internalAPIDigestFile,\n+                                                                         internalAPI,\n@@ -216,1 +230,11 @@\n-                if (te.getKind() == Kind.COMPILATION && !noApiChange.get()) {\n+                if (te.getKind() == Kind.COMPILATION && !noApiChange.get() &&\n+                    compiler.errorCount() == 0) {\n+                    try (OutputStream out = Files.newOutputStream(internalAPIDigestFile)) {\n+                        String hashes = internalAPI.entrySet()\n+                                                   .stream()\n+                                                   .map(e -> e.getKey() + \"=\" + e.getValue())\n+                                                   .collect(Collectors.joining(\"\\n\"));\n+                        out.write(hashes.getBytes(StandardCharsets.UTF_8));\n+                    } catch (IOException ex) {\n+                        throw new IllegalStateException(ex);\n+                    }\n@@ -261,1 +285,1 @@\n-            Path internalAPIDigestFile, AtomicBoolean noApiChange,\n+            Map<String, String> internalAPI, AtomicBoolean noApiChange,\n@@ -263,12 +287,0 @@\n-        Map<String, String> internalAPI = new LinkedHashMap<>();\n-        if (Files.isReadable(internalAPIDigestFile)) {\n-            try {\n-                Files.readAllLines(internalAPIDigestFile, StandardCharsets.UTF_8)\n-                     .forEach(line -> {\n-                         String[] keyAndValue = line.split(\"=\");\n-                         internalAPI.put(keyAndValue[0], keyAndValue[1]);\n-                     });\n-            } catch (IOException ex) {\n-                throw new IllegalStateException(ex);\n-            }\n-        }\n@@ -292,1 +304,0 @@\n-\n@@ -304,9 +315,0 @@\n-            try (OutputStream out = Files.newOutputStream(internalAPIDigestFile)) {\n-                String hashes = internalAPI.entrySet()\n-                                           .stream()\n-                                           .map(e -> e.getKey() + \"=\" + e.getValue())\n-                                           .collect(Collectors.joining(\"\\n\"));\n-                out.write(hashes.getBytes(StandardCharsets.UTF_8));\n-            } catch (IOException ex) {\n-                throw new IllegalStateException(ex);\n-            }\n@@ -838,1 +840,1 @@\n-                default -> throw new IllegalStateException(\"Unexpected tree kind: \" + m.getKind());\n+                default -> false;\n@@ -881,0 +883,6 @@\n+        @Override\n+        public Void visitPrimitiveType(PrimitiveTypeTree node, Void p) {\n+            update(node.getPrimitiveTypeKind().name());\n+            return super.visitPrimitiveType(node, p);\n+        }\n+\n@@ -887,1 +895,1 @@\n-        private final Path internalAPIDigestFile;\n+        private final Map<String, String> internalAPI;\n@@ -893,1 +901,1 @@\n-                                         Path internalAPIDigestFile,\n+                                         Map<String, String> internalAPI,\n@@ -898,1 +906,1 @@\n-            this.internalAPIDigestFile = internalAPIDigestFile;\n+            this.internalAPI = internalAPI;\n@@ -910,1 +918,1 @@\n-                                                internalAPIDigestFile,\n+                                                internalAPI,\n","filename":"make\/jdk\/src\/classes\/build\/tools\/depend\/Depend.java","additions":41,"deletions":33,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.Writer;\n@@ -57,0 +58,2 @@\n+        test.testPrimitiveTypeChanges();\n+        test.testWithErrors();\n@@ -305,0 +308,21 @@\n+        doOrdinaryTest(\"package test; public record Test (int x) { }\",\n+                       \"package test; public record Test (long x) { unresolved f; }\", \/\/erroneous record member, should not crash\n+                       false);\n+    }\n+\n+    public void testPrimitiveTypeChanges() throws Exception {\n+        doOrdinaryTest(\"package test; public record Test (int x) { }\",\n+                       \"package test; public record Test (long x) { }\",\n+                       true);\n+        doOrdinaryTest(\"package test; public record Test (int x) { }\",\n+                       \"package test; public record Test (Integer x) { }\",\n+                       true);\n+        doOrdinaryTest(\"package test; public record Test (Integer x) { }\",\n+                       \"package test; public record Test (int x) { }\",\n+                       true);\n+    }\n+\n+    public void testWithErrors() throws Exception {\n+        doOrdinaryTest(\"package test; public record Test (int x) { }\",\n+                       \"package test; public record Test (long x) { static unresolved f; }\",\n+                       false); \/\/the API change should not be recorded for code with errors\n@@ -313,0 +337,1 @@\n+    private Path modifiedFiles;\n@@ -331,0 +356,1 @@\n+        modifiedFiles = scratch.resolve(\"modified-files\");\n@@ -338,0 +364,4 @@\n+        try (Writer out = Files.newBufferedWriter(modifiedFiles)) {\n+            out.append(\"module-info.java\\n\");\n+            out.append(\"test.Test.java\\n\");\n+        }\n@@ -341,2 +371,3 @@\n-                              \"-Xplugin:depend \" + apiHash.toString() + \" \" + treeHash.toString(),\n-                              \"-XDmodifiedInputs=build-all\");\n+                              \"-Xplugin:depend \" + apiHash.toString(),\n+                              \"-XDinternalAPIPath=\" + treeHash.toString(),\n+                              \"-XDmodifiedInputs=\" + modifiedFiles.toString());\n@@ -372,0 +403,7 @@\n+        try (Writer out = Files.newBufferedWriter(modifiedFiles)) {\n+            out.append(\"module-info.java\\n\");\n+            out.append(\"test.Test1.java\\n\");\n+            out.append(\"test.Test2.java\\n\");\n+            out.append(\"test.TestImpl1.java\\n\");\n+            out.append(\"test.TestImpl2.java\\n\");\n+        }\n@@ -376,1 +414,2 @@\n-                              \"-XDmodifiedInputs=build-all\");\n+                              \"-XDinternalAPIPath=\" + treeHash.toString(),\n+                              \"-XDmodifiedInputs=\" + modifiedFiles.toString());\n@@ -409,0 +448,1 @@\n+        private final String className;\n@@ -413,0 +453,1 @@\n+            this.className = className;\n@@ -421,0 +462,5 @@\n+        @Override\n+        public String getName() {\n+            return className + \".java\";\n+        }\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/depend\/DependTest.java","additions":49,"deletions":3,"binary":false,"changes":52,"status":"modified"}]}