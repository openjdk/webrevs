{"files":[{"patch":"@@ -1571,1 +1571,2 @@\n-      ShenandoahGenerationalHeap::cast(_heap)->transfer_to_young(old_collector_regions);\n+      bool succeeded = ShenandoahGenerationalHeap::cast(_heap)->transfer_to_young(old_collector_regions);\n+      assert(succeeded, \"Expected to transfer %zu regions from old to young\", old_collector_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -120,1 +120,2 @@\n-    gen_heap->transfer_to_young(excess_old_regions);\n+    bool succeeded = gen_heap->transfer_to_young(excess_old_regions);\n+    assert(succeeded, \"Expected to transfer %zu regions from old to young\", excess_old_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,4 +134,1 @@\n-  \/\/ Max capacity is the maximum _allowed_ capacity. This means the sum of the maximum\n-  \/\/ allowed for old and young could exceed the total heap size. It remains the case that the\n-  \/\/ _actual_ capacity of young + old = total.\n-  const size_t max_heap_capacity = max_capacity();\n+  \/\/ Initial capacity for young and old generations is based on ShenandoahInitYoungPercentage.\n@@ -139,1 +136,1 @@\n-  const size_t initial_capacity_old = max_heap_capacity - initial_capacity_young;\n+  const size_t initial_capacity_old = max_capacity() - initial_capacity_young;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}