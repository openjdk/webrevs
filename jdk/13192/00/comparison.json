{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -537,13 +537,0 @@\n-                            if (hasJoinedNull) {\n-                                JCPattern pattern = label.pat;\n-                                while (pattern instanceof JCParenthesizedPattern parenthesized) {\n-                                    pattern = parenthesized.pattern;\n-                                }\n-                                Assert.check(pattern.hasTag(Tag.BINDINGPATTERN));\n-                                BindingSymbol binding = (BindingSymbol) ((JCBindingPattern) pattern).var.sym;\n-                                guard = makeBinary(Tag.OR,\n-                                                   makeBinary(Tag.EQ,\n-                                                              make.Ident(bindingContext.getBindingFor(binding)),\n-                                                              makeNull()),\n-                                                   guard);\n-                            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8291769 8301858\n+ * @bug 8291769 8301858 8304883\n@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -48,0 +49,13 @@\n+        assertEquals(switchNullable1(new R6(0, 0)), \"int: 0, int: 0\");\n+        assertEquals(switchNullable1(new R6(0L, 0)), \"obj: 0, obj: 0\");\n+        assertEquals(switchNullable2(new R6(0, 0)), \"int: 0, int: 0\");\n+        assertEquals(switchNullable2(new R6(0L, 0)), \"obj: 0, int: 0\");\n+        assertEquals(switchNullable2(new R6(0, 0L)), \"int: 0, obj: 0\");\n+        assertEquals(switchNullable2(new R6(0L, 0L)), \"obj: 0, obj: 0\");\n+        assertEquals(switchNullableNPE(new R6(1, 1)), \"obj: 1, obj: 1\");\n+        try {\n+            switchNullableNPE(new R6(null, 1));\n+            throw new AssertionError(\"Expected NPE, but got none.\");\n+        } catch (NullPointerException ex) {\n+            \/\/expected.\n+        }\n@@ -116,0 +130,24 @@\n+\n+    private String switchNullable1(R6 r) {\n+        return switch (r) {\n+            case R6(Integer i1, Integer i2) -> \"int: \" + i1 + \", int: \" + i2;\n+            case R6(Object o1, Object o2) -> \"obj: \" + o1 + \", obj: \" + o2;\n+        };\n+    }\n+\n+    private String switchNullable2(R6 r) {\n+        return switch (r) {\n+            case R6(Integer i1, Integer i2) -> \"int: \" + i1 + \", int: \" + i2;\n+            case R6(Integer i1, Object o2) -> \"int: \" + i1 + \", obj: \" + o2;\n+            case R6(Object o1, Integer i2) -> \"obj: \" + o1 + \", int: \" + i2;\n+            case R6(Object o1, Object o2) -> \"obj: \" + o1 + \", obj: \" + o2;\n+        };\n+    }\n+\n+    private String switchNullableNPE(R6 r) {\n+        return switch (r) {\n+            case R6(Object o1, Object o2) when ((int) o1) == 0 && ((int) o2) == 0 -> \"int: \" + o1 + \", int: \" + o2;\n+            case R6(Object o1, Object o2) -> \"obj: \" + o1 + \", obj: \" + o2;\n+        };\n+    }\n+\n@@ -126,0 +164,7 @@\n+    private void assertEquals(String expected, String actual) {\n+        if (!Objects.equals(expected, actual)) {\n+            throw new AssertionError(\"expected: \" + expected + \", \" +\n+                                     \"actual: \" + actual);\n+        }\n+    }\n+\n@@ -137,0 +182,1 @@\n+    record R6(Object o1, Object o2) {}\n","filename":"test\/langtools\/tools\/javac\/patterns\/DeconstructionDesugaring.java","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"}]}