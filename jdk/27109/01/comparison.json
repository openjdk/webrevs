{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import static sun.nio.fs.MacOSXNativeDispatcher.*;\n-\n@@ -38,12 +36,0 @@\n-    private static final String PROPERTY_NORMALIZE_FILE_PATHS =\n-        \"jdk.nio.path.useNormalizationFormD\";\n-\n-    private static final boolean NORMALIZE_FILE_PATHS;\n-\n-    static {\n-        final String name = PROPERTY_NORMALIZE_FILE_PATHS;\n-        String value = System.getProperty(name);\n-        NORMALIZE_FILE_PATHS = (value != null)\n-            && (\"\".equals(value) || Boolean.parseBoolean(value));\n-    }\n-\n@@ -62,26 +48,0 @@\n-\n-    @Override\n-    String normalizeNativePath(String path) {\n-        if (NORMALIZE_FILE_PATHS) {\n-            for (int i = 0; i < path.length(); i++) {\n-                char c = path.charAt(i);\n-                if (c > 0x80)\n-                    return new String(normalizepath(path.toCharArray(),\n-                                  kCFStringNormalizationFormD));\n-            }\n-        }\n-        return path;\n-    }\n-\n-    @Override\n-    String normalizeJavaPath(String path) {\n-        if (NORMALIZE_FILE_PATHS) {\n-            for (int i = 0; i < path.length(); i++) {\n-                if (path.charAt(i) > 0x80)\n-                    return new String(normalizepath(path.toCharArray(),\n-                                      kCFStringNormalizationFormC));\n-            }\n-        }\n-        return path;\n-    }\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystem.java","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.nio.fs;\n-\n-\/**\n- * MacOSX specific system calls.\n- *\/\n-\n-class MacOSXNativeDispatcher extends BsdNativeDispatcher {\n-    private MacOSXNativeDispatcher() { }\n-\n-    static final int kCFStringNormalizationFormC = 2;\n-    static final int kCFStringNormalizationFormD = 0;\n-    static native char[] normalizepath(char[] path, int form);\n-}\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXNativeDispatcher.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-#include \"jlong.h\"\n-\n-#include <stdlib.h>\n-#include <string.h>\n-\n-#include <CoreFoundation\/CoreFoundation.h>\n-\n-JNIEXPORT jcharArray JNICALL\n-Java_sun_nio_fs_MacOSXNativeDispatcher_normalizepath(JNIEnv* env, jclass this,\n-                                                     jcharArray path,\n-                                                     jint form)\n-{\n-    jcharArray result = NULL;\n-    char *chars;\n-    CFMutableStringRef csref = CFStringCreateMutable(NULL, 0);\n-    if (csref == NULL) {\n-        JNU_ThrowOutOfMemoryError(env, \"native heap\");\n-        return NULL;\n-    }\n-    chars = (char*)(*env)->GetPrimitiveArrayCritical(env, path, 0);\n-    if (chars != NULL) {\n-        char chars_buf[(PATH_MAX + 1) * 2];     \/\/ utf16 + zero padding\n-        jsize len = (*env)->GetArrayLength(env, path);\n-        CFStringAppendCharacters(csref, (const UniChar*)chars, len);\n-        (*env)->ReleasePrimitiveArrayCritical(env, path, chars, 0);\n-        CFStringNormalize(csref, form);\n-        len = CFStringGetLength(csref);\n-        if (len < PATH_MAX) {\n-            if (CFStringGetCString(csref, chars_buf, sizeof(chars_buf), kCFStringEncodingUTF16)) {\n-                result = (*env)->NewCharArray(env, len);\n-                if (result != NULL) {\n-                    (*env)->SetCharArrayRegion(env, result, 0, len, (jchar*)&chars_buf);\n-                }\n-            }\n-        } else {\n-            int ulen = (len + 1) * 2;\n-            chars = malloc(ulen);\n-            if (chars == NULL) {\n-                JNU_ThrowOutOfMemoryError(env, \"native heap\");\n-            } else {\n-                if (CFStringGetCString(csref, chars, ulen, kCFStringEncodingUTF16)) {\n-                    result = (*env)->NewCharArray(env, len);\n-                    if (result != NULL) {\n-                        (*env)->SetCharArrayRegion(env, result, 0, len, (jchar*)chars);\n-                    }\n-                }\n-                free(chars);\n-            }\n-        }\n-    }\n-    CFRelease(csref);\n-    return result;\n-}\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/MacOSXNativeDispatcher.c","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -340,14 +340,0 @@\n-    \/\/ Override if the platform uses different Unicode normalization form\n-    \/\/ for native file path. For example on MacOSX, the native path is stored\n-    \/\/ in Unicode NFD form.\n-    String normalizeNativePath(String path) {\n-        return path;\n-    }\n-\n-    \/\/ Override if the native file path use non-NFC form. For example on MacOSX,\n-    \/\/ the native path is stored in Unicode NFD form, the path need to be\n-    \/\/ normalized back to NFC before passed back to Java level.\n-    String normalizeJavaPath(String path) {\n-        return path;\n-    }\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -62,1 +63,1 @@\n-    private String stringValue;\n+    private @Stable String stringValue;\n@@ -127,1 +128,0 @@\n-        input = fs.normalizeNativePath(input);\n@@ -817,1 +817,1 @@\n-            this.stringValue = stringValue = fs.normalizeJavaPath(Util.toString(path));     \/\/ platform encoding\n+            this.stringValue = stringValue = Util.toString(path);     \/\/ platform encoding\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,15 @@\n+\/* @test\n+ * @bug 7130915 8289689 8366911\n+ * @summary Tests file path names with standard encoding on macOS\n+ * @requires (os.family == \"mac\")\n+ * @library \/test\/lib ..\n+ * @build jdk.test.lib.Utils\n+ *        jdk.test.lib.Asserts\n+ *        jdk.test.lib.JDKToolFinder\n+ *        jdk.test.lib.JDKToolLauncher\n+ *        jdk.test.lib.Platform\n+ *        jdk.test.lib.process.*\n+ *        TestUtil MacPath\n+ * @run main MacPath\n+ *\/\n+\n@@ -29,2 +44,0 @@\n-import java.text.Normalizer;\n-import java.text.Normalizer.Form;\n@@ -35,3 +48,0 @@\n-    private static final String PROPERTY_NORMALIZE_FILE_PATHS =\n-        \"jdk.nio.path.useNormalizationFormD\";\n-\n@@ -86,5 +96,2 @@\n-        String fname = null;\n-        Normalizer.Form form = Boolean.getBoolean(PROPERTY_NORMALIZE_FILE_PATHS)\n-            ? Normalizer.Form.NFD : Normalizer.Form.NFC;\n-        String dname_nfd = Normalizer.normalize(dname, form);\n-        String fname_nfd = Normalizer.normalize(fname_nfc, form);\n+        String dname_nfd = dname;\n+        String fname_nfd = fname_nfc;\n@@ -103,1 +110,1 @@\n-        fname = dpath.toString();\n+        String fname = dpath.toString();\n@@ -145,1 +152,1 @@\n-        if (!found_dir || !found_file_nfc || !found_file_nfd) {\n+        if (!found_dir || !found_file_nfc || !found_file_nfd)\n@@ -147,1 +154,1 @@\n-        }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacPath.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 7130915 8289689\n- * @summary Tests file path with nfc\/nfd forms on MacOSX\n- * @requires (os.family == \"mac\")\n- * @library \/test\/lib ..\n- * @build jdk.test.lib.Utils\n- *        jdk.test.lib.Asserts\n- *        jdk.test.lib.JDKToolFinder\n- *        jdk.test.lib.JDKToolLauncher\n- *        jdk.test.lib.Platform\n- *        jdk.test.lib.process.*\n- *        TestUtil MacPath\n- * @run main MacPathTest\n- * @run main\/othervm -Djdk.nio.path.useNormalizationFormD=true MacPathTest\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class MacPathTest {\n-    private static final String PROPERTY_NORMALIZE_FILE_PATHS =\n-        \"jdk.nio.path.useNormalizationFormD\";\n-    private static final boolean NORMALIZE_FILE_PATHS =\n-        Boolean.getBoolean(PROPERTY_NORMALIZE_FILE_PATHS);\n-\n-    public static void main(String args[]) throws Exception {\n-        ProcessBuilder pb;\n-        if (NORMALIZE_FILE_PATHS) {\n-            String option = \"-D\" + PROPERTY_NORMALIZE_FILE_PATHS + \"=true\";\n-            pb = ProcessTools.createTestJavaProcessBuilder(option, MacPath.class.getName());\n-        } else {\n-            pb = ProcessTools.createTestJavaProcessBuilder(MacPath.class.getName());\n-        }\n-        pb.environment().put(\"LC_ALL\", \"en_US.UTF-8\");\n-        ProcessTools.executeProcess(pb)\n-                    .outputTo(System.out)\n-                    .errorTo(System.err)\n-                    .shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacPathTest.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"}]}