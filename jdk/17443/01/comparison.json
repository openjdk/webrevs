{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider;\n@@ -48,0 +47,8 @@\n+\n+    \/\/ Standard header offsets\n+    private static final int MAGIC_OFFSET = 0; \/\/ 4 bytes\n+    private static final int UNCOMPRESSED_OFFSET = 4; \/\/ 8 bytes\n+    private static final int COMPRESSED_OFFSET = 12; \/\/ 8 bytes\n+    private static final int DECOMPRESSOR_NAME_OFFSET = 20; \/\/ 4 bytes, followed by 4 byte gap\n+    private static final int IS_TERMINAL_OFFSET = 28; \/\/ 1 byte\n+\n@@ -51,1 +58,0 @@\n-    private final int contentOffset;\n@@ -55,1 +61,1 @@\n-            long uncompressedSize, int decompressorNameOffset, int contentOffset,\n+            long uncompressedSize, int decompressorNameOffset,\n@@ -60,1 +66,0 @@\n-        this.contentOffset = contentOffset;\n@@ -72,12 +77,0 @@\n-    public int getContentOffset() {\n-        return contentOffset;\n-    }\n-\n-    public String getStoredContent(StringsProvider provider) {\n-        Objects.requireNonNull(provider);\n-        if(contentOffset == -1) {\n-            return null;\n-        }\n-        return provider.getString(contentOffset);\n-    }\n-\n@@ -100,1 +93,2 @@\n-        buffer.putInt(contentOffset);\n+        \/\/ Compatibility\n+        buffer.putInt(-1);\n@@ -118,2 +112,2 @@\n-        int magic = buffer.getInt();\n-        if(magic != MAGIC) {\n+        int magic = buffer.getInt(MAGIC_OFFSET);\n+        if (magic != MAGIC) {\n@@ -122,5 +116,5 @@\n-        long size = buffer.getLong();\n-        long uncompressedSize = buffer.getLong();\n-        int decompressorNameOffset = buffer.getInt();\n-        int contentIndex = buffer.getInt();\n-        byte isTerminal = buffer.get();\n+        long size = buffer.getLong(COMPRESSED_OFFSET);\n+        long uncompressedSize = buffer.getLong(UNCOMPRESSED_OFFSET);\n+        int decompressorNameOffset = buffer.getInt(DECOMPRESSOR_NAME_OFFSET);\n+        \/\/ skip unused 'contentOffset' int\n+        byte isTerminal = buffer.get(IS_TERMINAL_OFFSET);\n@@ -128,1 +122,1 @@\n-                decompressorNameOffset, contentIndex, isTerminal == 1);\n+                decompressorNameOffset, isTerminal == 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/CompressedResourceHeader.java","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -78,9 +78,0 @@\n-                    String storedContent = header.getStoredContent(provider);\n-                    Properties props = new Properties();\n-                    if (storedContent != null) {\n-                        try (ByteArrayInputStream stream\n-                                = new ByteArrayInputStream(storedContent.\n-                                        getBytes(StandardCharsets.UTF_8));) {\n-                            props.loadFromXML(stream);\n-                        }\n-                    }\n@@ -88,1 +79,1 @@\n-                            newResourceDecompressor(props, pluginName);\n+                            newResourceDecompressor(pluginName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/Decompressor.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Properties;\n@@ -57,1 +56,0 @@\n-     * @param properties Contains configuration.\n@@ -61,2 +59,1 @@\n-    public abstract ResourceDecompressor newDecompressor(Properties properties)\n-            throws IOException;\n+    public abstract ResourceDecompressor newDecompressor() throws IOException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/ResourceDecompressorFactory.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-     * @param properties Contains plugin configuration.\n@@ -62,2 +61,1 @@\n-    public static ResourceDecompressor newResourceDecompressor(Properties properties,\n-            String name) throws IOException {\n+    public static ResourceDecompressor newResourceDecompressor(String name) throws IOException {\n@@ -67,1 +65,1 @@\n-            return fact.newDecompressor(properties);\n+            return fact.newDecompressor();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/ResourceDecompressorRepository.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.Properties;\n@@ -231,3 +230,1 @@\n-    public StringSharingDecompressor(Properties properties) {\n-\n-    }\n+    public StringSharingDecompressor() {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/StringSharingDecompressor.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Properties;\n@@ -48,1 +47,1 @@\n-    public ResourceDecompressor newDecompressor(Properties properties)\n+    public ResourceDecompressor newDecompressor()\n@@ -50,1 +49,1 @@\n-        return new StringSharingDecompressor(properties);\n+        return new StringSharingDecompressor();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/StringSharingDecompressorFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.io.ByteArrayOutputStream;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/ZipDecompressor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Properties;\n@@ -47,1 +46,1 @@\n-    public ResourceDecompressor newDecompressor(Properties properties)\n+    public ResourceDecompressor newDecompressor()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/decompressor\/ZipDecompressorFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,1 +451,2 @@\n-            String plugin, String pluginConfig, StringTable strings,\n+            String plugin,\n+            StringTable strings,\n@@ -464,4 +465,0 @@\n-        int configOffset = -1;\n-        if (pluginConfig != null) {\n-            configOffset = strings.addString(plugin);\n-        }\n@@ -470,1 +467,1 @@\n-                        nameOffset, configOffset, isTerminal);\n+                        nameOffset, isTerminal);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ResourcePoolManager.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-                        ByteBuffer.wrap(compressed), getName(), null,\n+                        ByteBuffer.wrap(compressed), getName(),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-                        ByteBuffer.wrap(compressed), getName(), null,\n+                        ByteBuffer.wrap(compressed), getName(),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-                                ByteBuffer.allocate(99), \"bitcruncher\", null,\n+                                ByteBuffer.allocate(99), \"bitcruncher\",\n@@ -210,1 +210,1 @@\n-                ByteBuffer.allocate(7), \"zip\", null, resources1.getStringTable(),\n+                ByteBuffer.allocate(7), \"zip\", resources1.getStringTable(),\n","filename":"test\/jdk\/tools\/jlink\/ResourcePoolTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}