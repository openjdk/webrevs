{"files":[{"patch":"@@ -72,0 +72,1 @@\n+  uint exp_req = 3;\n@@ -73,1 +74,8 @@\n-    assert(req == 3, \"\");\n+    if (n->is_predicated_vector()) {\n+      assert(k->is_predicated_vector(), \"\");\n+      if (n->in(3) != k->in(3)) {\n+        return true;\n+      }\n+      exp_req = 4;\n+    }\n+    assert(req == exp_req, \"\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,1 +78,2 @@\n-      assert(req() == 3, \"\");\n+      uint exp_req = is_predicated_vector() ? 4 : 3;\n+      assert(req() == exp_req, \"\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -409,0 +409,60 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing19(int index) {\n+        VectorMask<Integer> vmask = VectorMask.fromLong(I_SPECIES, 15);\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec2, vmask)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing19\")\n+    public void testVectorIRSharingDriver19() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing19(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"sve\", \"true\"})\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"}, applyIfCPUFeature = {\"avx512f\", \"false\"})\n+    public void testVectorIRSharing20(int index) {\n+        VectorMask<Integer> vmask1 = VectorMask.fromLong(I_SPECIES, 15);\n+        VectorMask<Integer> vmask2 = VectorMask.fromLong(I_SPECIES, 17);\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec2, vmask1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing20\")\n+    public void testVectorIRSharingDriver20() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing20(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing21(int index) {\n+        VectorMask<Integer> vmask1 = VectorMask.fromLong(I_SPECIES, 15);\n+        VectorMask<Integer> vmask2 = VectorMask.fromLong(I_SPECIES, 15);\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec2, vmask1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing21\")\n+    public void testVectorIRSharingDriver21() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing21(i);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}