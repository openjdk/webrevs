{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.verify.*;\n@@ -64,2 +65,2 @@\n-            ia[i] = RD.nextInt(25);\n-            ib[i] = RD.nextInt(25);\n+            ia[i] = RD.nextInt(Integer.MAX_VALUE);\n+            ib[i] = RD.nextInt(Integer.MAX_VALUE);\n@@ -100,0 +101,10 @@\n+        checkVectorIRSharing1();\n+    }\n+\n+    public void checkVectorIRSharing1() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ib[i]) + (ib[i] + ia[i]));\n+            Verify.checkEQ(ir2[i], (ia[i] * ib[i]) * (ib[i] * ia[i]));\n+            Verify.checkEQ(ir3[i], Integer.max(Integer.max(ia[i], ib[i]), Integer.max(ib[i], ia[i])));\n+            Verify.checkEQ(ir4[i], Integer.min(Integer.max(ia[i], ib[i]), Integer.min(ib[i], ia[i])));\n+        }\n@@ -125,0 +136,9 @@\n+        checkVectorIRSharing2();\n+    }\n+\n+    public void checkVectorIRSharing2() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] ^ ib[i]) ^ (ib[i] ^ ia[i]));\n+            Verify.checkEQ(ir2[i], (ia[i] & ib[i]) & (ib[i] & ia[i]));\n+            Verify.checkEQ(ir3[i], (ia[i] | ib[i]) | (ib[i] | ia[i]));\n+        }\n@@ -142,0 +162,8 @@\n+        checkVectorIRSharing3();\n+    }\n+\n+    public void checkVectorIRSharing3() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir4[i], VectorMath.addSaturating(VectorMath.addSaturating(ia[i], ib[i]),\n+                                                            VectorMath.addSaturating(ib[i], ia[i])));\n+        }\n@@ -160,0 +188,7 @@\n+        checkVectorIRSharing4();\n+    }\n+\n+    public void checkVectorIRSharing4() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ia[i]) + (ia[i] + ia[i]));\n+        }\n@@ -178,0 +213,7 @@\n+        checkVectorIRSharing5();\n+    }\n+\n+    public void checkVectorIRSharing5() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ia[i]) + (ia[i] + ib[i]));\n+        }\n@@ -196,0 +238,7 @@\n+        checkVectorIRSharing6();\n+    }\n+\n+    public void checkVectorIRSharing6() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ia[i]) + (ib[i] + ia[i]));\n+        }\n@@ -214,0 +263,7 @@\n+        checkVectorIRSharing7();\n+    }\n+\n+    public void checkVectorIRSharing7() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ia[i]) + (ib[i] + ib[i]));\n+        }\n@@ -232,0 +288,7 @@\n+        checkVectorIRSharing8();\n+    }\n+\n+    public void checkVectorIRSharing8() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ib[i]) + (ia[i] + ia[i]));\n+        }\n@@ -250,0 +313,7 @@\n+        checkVectorIRSharing9();\n+    }\n+\n+    public void checkVectorIRSharing9() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ib[i]) + (ia[i] + ib[i]));\n+        }\n@@ -268,0 +338,7 @@\n+        checkVectorIRSharing10();\n+    }\n+\n+    public void checkVectorIRSharing10() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ib[i]) + (ib[i] + ia[i]));\n+        }\n@@ -286,0 +363,7 @@\n+        checkVectorIRSharing11();\n+    }\n+\n+    public void checkVectorIRSharing11() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ia[i] + ib[i]) + (ib[i] + ib[i]));\n+        }\n@@ -304,0 +388,7 @@\n+        checkVectorIRSharing12();\n+    }\n+\n+    public void checkVectorIRSharing12() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ia[i]) + (ia[i] + ia[i]));\n+        }\n@@ -322,0 +413,7 @@\n+        checkVectorIRSharing13();\n+    }\n+\n+    public void checkVectorIRSharing13() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ia[i]) + (ia[i] + ib[i]));\n+        }\n@@ -340,0 +438,7 @@\n+        checkVectorIRSharing14();\n+    }\n+\n+    public void checkVectorIRSharing14() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ia[i]) + (ib[i] + ia[i]));\n+        }\n@@ -358,0 +463,7 @@\n+        checkVectorIRSharing15();\n+    }\n+\n+    public void checkVectorIRSharing15() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ia[i]) + (ib[i] + ib[i]));\n+        }\n@@ -376,0 +488,7 @@\n+        checkVectorIRSharing16();\n+    }\n+\n+    public void checkVectorIRSharing16() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ib[i]) + (ia[i] + ia[i]));\n+        }\n@@ -394,0 +513,7 @@\n+        checkVectorIRSharing17();\n+    }\n+\n+    public void checkVectorIRSharing17() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ib[i]) + (ia[i] + ib[i]));\n+        }\n@@ -412,0 +538,7 @@\n+        checkVectorIRSharing18();\n+    }\n+\n+    public void checkVectorIRSharing18() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i++) {\n+            Verify.checkEQ(ir1[i], (ib[i] + ib[i]) + (ib[i] + ia[i]));\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":135,"deletions":2,"binary":false,"changes":137,"status":"modified"}]}