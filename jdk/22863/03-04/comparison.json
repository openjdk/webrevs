{"files":[{"patch":"@@ -835,1 +835,1 @@\n-    Flag_is_commutative_operation    = 1 << 18,\n+    Flag_is_commutative_vector_oper  = 1 << 18,\n@@ -1073,1 +1073,1 @@\n-  bool is_commutative_operation() const { return (_flags & Flag_is_commutative_operation) != 0; }\n+  bool is_commutative_vector_operation() const { return (_flags & Flag_is_commutative_vector_oper) != 0; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,0 +65,25 @@\n+\/\/-----------------------------------------------------------------------------\n+\n+bool NodeHash::check_for_collision(const Node* n, const Node* k) {\n+  \/\/ For commutative operations with same controlling edge\n+  \/\/ perform order agnostic input edge comparison to promote\n+  \/\/ node sharing.\n+  uint req = n->req();\n+  if (n->is_commutative_vector_operation()) {\n+    assert(req == 3, \"\");\n+    assert(k->is_commutative_vector_operation(), \"\");\n+    if ((k->in(0) != n->in(0)) ||\n+        ((k->in(1) != n->in(1) || k->in(2) != n->in(2)) &&\n+         (k->in(1) != n->in(2) || k->in(2) != n->in(1)))) {\n+      return true;\n+    }\n+  } else {\n+    for(uint i=0; i<req; i++) {\n+      if(n->in(i) != k->in(i)) { \/\/ Different inputs?\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -88,4 +113,2 @@\n-      for( uint i=0; i<req; i++ )\n-        if( n->in(i)!=k->in(i)) \/\/ Different inputs?\n-          goto collision;       \/\/ \"goto\" is a speed hack...\n-      if( n->cmp(*k) ) {        \/\/ Check for any special bits\n+      bool collision = check_for_collision(n, k);\n+      if(collision == false && n->cmp(*k) ) {  \/\/ Check for any special bits\n@@ -96,1 +119,0 @@\n-  collision:\n@@ -140,19 +162,2 @@\n-      \/\/ For commutative operation with same controlling edges\n-      \/\/ perform order agnostic input edge comparison to promote\n-      \/\/ node sharing.\n-      if (n->is_commutative_operation()) {\n-        assert(k->is_commutative_operation(), \"\");\n-        assert(req == 3, \"\");\n-        if (k->in(0) == n->in(0) &&\n-            (k->in(1) == n->in(1) || k->in(1) == n->in(2)) &&\n-            (k->in(2) == n->in(1) || k->in(2) == n->in(2))) {\n-          \/\/ nodes are equal\n-        } else {\n-          goto collision;\n-        }\n-      } else {\n-        for( uint i=0; i<req; i++ )\n-          if( n->in(i)!=k->in(i)) \/\/ Different inputs?\n-            goto collision;       \/\/ \"goto\" is a speed hack...\n-      }\n-      if( n->cmp(*k) ) {        \/\/ Check for any special bits\n+      bool collision = check_for_collision(n, k);\n+      if (collision == false && n->cmp(*k)) {        \/\/ Check for any special bits\n@@ -163,1 +168,0 @@\n-  collision:\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":29,"deletions":25,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+  bool   check_for_collision(const Node* n, const Node* k);\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    if (is_commutative_operation()) {\n+    if (is_commutative_vector_operation()) {\n@@ -190,1 +190,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -200,1 +200,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -210,1 +210,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -220,1 +220,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -230,1 +230,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -240,1 +240,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -412,1 +412,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -446,1 +446,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -456,1 +456,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -466,1 +466,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -477,1 +477,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -489,1 +489,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -499,1 +499,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -643,1 +643,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -652,1 +652,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -662,1 +662,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -671,1 +671,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -945,1 +945,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -964,1 +964,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -983,1 +983,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -1393,1 +1393,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -1402,1 +1402,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n@@ -1411,1 +1411,1 @@\n-    add_flag(Node::Flag_is_commutative_operation);\n+    add_flag(Node::Flag_is_commutative_vector_oper);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -139,0 +139,270 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing4(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec1) + (vec1 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing4\")\n+    public void testVectorIRSharingDriver4() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing4(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing5(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec1) + (vec1 + vec2)\n+        vec1.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing5\")\n+    public void testVectorIRSharingDriver5() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing5(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing6(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec1) + (vec2 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing6\")\n+    public void testVectorIRSharingDriver6() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing6(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing7(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec1) + (vec2 + vec2)\n+        vec1.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing7\")\n+    public void testVectorIRSharingDriver7() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing7(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing8(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec2) + (vec1 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing8\")\n+    public void testVectorIRSharingDriver8() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing8(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing9(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec2) + (vec1 + vec2)\n+        vec1.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing9\")\n+    public void testVectorIRSharingDriver9() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing9(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing10(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec2) + (vec2 + vec1)\n+        vec1.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing10\")\n+    public void testVectorIRSharingDriver10() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing10(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing11(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec1 + vec2) + (vec2 + vec2)\n+        vec1.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing11\")\n+    public void testVectorIRSharingDriver11() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing11(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing12(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec1) + (vec1 + vec1)\n+        vec2.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing12\")\n+    public void testVectorIRSharingDriver12() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing12(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing13(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec1) + (vec1 + vec2)\n+        vec2.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing13\")\n+    public void testVectorIRSharingDriver13() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing13(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    public void testVectorIRSharing14(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec1) + (vec2 + vec1)\n+        vec2.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing14\")\n+    public void testVectorIRSharingDriver14() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing14(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing15(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec1) + (vec2 + vec2)\n+        vec2.lanewise(VectorOperators.ADD, vec1)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing15\")\n+    public void testVectorIRSharingDriver15() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing15(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing16(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec2) + (vec1 + vec1)\n+        vec2.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing16\")\n+    public void testVectorIRSharingDriver16() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing16(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing17(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec2) + (vec1 + vec2)\n+        vec2.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec1.lanewise(VectorOperators.ADD, vec2))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing17\")\n+    public void testVectorIRSharingDriver17() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing17(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    public void testVectorIRSharing18(int index) {\n+        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n+        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n+        \/\/ (vec2 + vec2) + (vec2 + vec1)\n+        vec2.lanewise(VectorOperators.ADD, vec2)\n+            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1))\n+            .intoArray(ir1, index);\n+    }\n+\n+    @Run(test = \"testVectorIRSharing18\")\n+    public void testVectorIRSharingDriver18() {\n+        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n+            testVectorIRSharing18(i);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"modified"}]}