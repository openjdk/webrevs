{"files":[{"patch":"@@ -72,1 +72,0 @@\n-  uint exp_req = 3;\n@@ -74,8 +73,1 @@\n-    if (n->is_predicated_vector()) {\n-      assert(k->is_predicated_vector(), \"\");\n-      if (n->in(3) != k->in(3)) {\n-        return true;\n-      }\n-      exp_req = 4;\n-    }\n-    assert(req == exp_req, \"\");\n+    assert(req == 3, \"\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-      uint exp_req = is_predicated_vector() ? 4 : 3;\n-      assert(req() == exp_req, \"\");\n+      assert(req() == 3, \"\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,2 +74,4 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \", IRNode.MUL_VI, \" 2 \", IRNode.MAX_VI, \" 2 \",\n-                  IRNode.MIN_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \",\n+                  IRNode.MUL_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \",\n+                  IRNode.MAX_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \",\n+                  IRNode.MIN_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -101,1 +103,3 @@\n-    @IR(counts = {IRNode.XOR_VI, \" 0 \", IRNode.OR_VI, \" 1 \", IRNode.AND_VI, \" 1 \"})\n+    @IR(counts = {IRNode.XOR_VI, IRNode.VECTOR_SIZE_ANY, \" 0 \",\n+                  IRNode.OR_VI, IRNode.VECTOR_SIZE_ANY, \" 1 \",\n+                  IRNode.AND_VI, IRNode.VECTOR_SIZE_ANY, \" 1 \"})\n@@ -124,1 +128,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VI, \" 2 \"}, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"}, applyIfCPUFeature = {\"avx2\", \"true\"})\n@@ -141,1 +145,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -159,1 +163,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -177,1 +181,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -195,1 +199,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -213,1 +217,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -231,1 +235,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -249,1 +253,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -267,1 +271,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -285,1 +289,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -303,1 +307,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -321,1 +325,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"})\n@@ -339,1 +343,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -357,1 +361,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -375,1 +379,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -393,1 +397,1 @@\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"})\n+    @IR(counts = {IRNode.ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 3 \"})\n@@ -409,60 +413,0 @@\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n-    public void testVectorIRSharing19(int index) {\n-        VectorMask<Integer> vmask = VectorMask.fromLong(I_SPECIES, 15);\n-        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n-        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n-        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n-        vec1.lanewise(VectorOperators.ADD, vec2, vmask)\n-            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask))\n-            .intoArray(ir1, index);\n-    }\n-\n-    @Run(test = \"testVectorIRSharing19\")\n-    public void testVectorIRSharingDriver19() {\n-        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n-            testVectorIRSharing19(i);\n-        }\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \" 3 \"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"sve\", \"true\"})\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"}, applyIfCPUFeature = {\"avx512f\", \"false\"})\n-    public void testVectorIRSharing20(int index) {\n-        VectorMask<Integer> vmask1 = VectorMask.fromLong(I_SPECIES, 15);\n-        VectorMask<Integer> vmask2 = VectorMask.fromLong(I_SPECIES, 17);\n-        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n-        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n-        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n-        vec1.lanewise(VectorOperators.ADD, vec2, vmask1)\n-            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask2))\n-            .intoArray(ir1, index);\n-    }\n-\n-    @Run(test = \"testVectorIRSharing20\")\n-    public void testVectorIRSharingDriver20() {\n-        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n-            testVectorIRSharing20(i);\n-        }\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.ADD_VI, \" 2 \"})\n-    public void testVectorIRSharing21(int index) {\n-        VectorMask<Integer> vmask1 = VectorMask.fromLong(I_SPECIES, 15);\n-        VectorMask<Integer> vmask2 = VectorMask.fromLong(I_SPECIES, 15);\n-        IntVector vec1 = IntVector.fromArray(I_SPECIES, ia, index);\n-        IntVector vec2 = IntVector.fromArray(I_SPECIES, ib, index);\n-        \/\/ predicated (vec1 + vec2) + (vec2 + vec1)\n-        vec1.lanewise(VectorOperators.ADD, vec2, vmask1)\n-            .lanewise(VectorOperators.ADD, vec2.lanewise(VectorOperators.ADD, vec1, vmask2))\n-            .intoArray(ir1, index);\n-    }\n-\n-    @Run(test = \"testVectorIRSharing21\")\n-    public void testVectorIRSharingDriver21() {\n-        for (int i = 0; i < I_SPECIES.loopBound(LENGTH); i += I_SPECIES.length()) {\n-            testVectorIRSharing21(i);\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":23,"deletions":79,"binary":false,"changes":102,"status":"modified"}]}