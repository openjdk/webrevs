{"files":[{"patch":"@@ -111,13 +111,9 @@\n-        \/\/ Check for unexpected plaintext alert message during TLSv1.3 handshake, @bug 8331682\n-        if (srcsLength == 1 && context.handshakeContext != null &&\n-                ProtocolVersion.TLS13.equals(context.handshakeContext.negotiatedProtocol)) {\n-            ByteBuffer packet = srcs[srcsOffset].slice();\n-            byte contentType = packet.get();                   \/\/ pos: 0\n-            byte majorVersion = packet.get();                  \/\/ pos: 1\n-            byte minorVersion = packet.get();                  \/\/ pos: 2\n-            int contentLen = Record.getInt16(packet);          \/\/ pos: 3, 4\n-\n-            if (contentLen == 2 && ContentType.ALERT.equals(ContentType.valueOf(contentType))) {\n-                plaintexts = new Plaintext[]{\n-                        new Plaintext(contentType, majorVersion, minorVersion, -1, -1L, packet)\n-                };\n+        try {\n+            plaintexts = context.inputRecord.decode(srcs, srcsOffset, srcsLength);\n+        } catch (UnsupportedOperationException unsoe) {         \/\/ SSLv2Hello\n+            \/\/ Code to deliver SSLv2 error message for SSL\/TLS connections.\n+            if (!context.sslContext.isDTLS()) {\n+                context.outputRecord.encodeV2NoCipher();\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n+                    SSLLogger.finest(\"may be talking to SSLv2\");\n+                }\n@@ -125,1 +121,0 @@\n-        }\n@@ -127,10 +122,18 @@\n-        if (plaintexts == null) {\n-            try {\n-                plaintexts = context.inputRecord.decode(srcs, srcsOffset, srcsLength);\n-            } catch (UnsupportedOperationException unsoe) {         \/\/ SSLv2Hello\n-                \/\/ Code to deliver SSLv2 error message for SSL\/TLS connections.\n-                if (!context.sslContext.isDTLS()) {\n-                    context.outputRecord.encodeV2NoCipher();\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n-                        SSLLogger.finest(\"may be talking to SSLv2\");\n-                    }\n+            throw context.fatal(Alert.UNEXPECTED_MESSAGE, unsoe);\n+        } catch (AEADBadTagException bte) {\n+            throw context.fatal(Alert.BAD_RECORD_MAC, bte);\n+        } catch (BadPaddingException bpe) {\n+            \/\/ Check for unexpected plaintext alert message during TLSv1.3 handshake, @bug 8331682\n+            if (srcsLength == 1 && !context.isNegotiated && context.handshakeContext != null &&\n+                    ProtocolVersion.TLS13.equals(context.handshakeContext.negotiatedProtocol)) {\n+                ByteBuffer packet = srcs[srcsOffset].duplicate();\n+                packet.position(0);\n+                byte contentType = packet.get();                   \/\/ pos: 0\n+                byte majorVersion = packet.get();                  \/\/ pos: 1\n+                byte minorVersion = packet.get();                  \/\/ pos: 2\n+                int contentLen = Record.getInt16(packet);          \/\/ pos: 3, 4\n+\n+                if (contentLen == 2 && ContentType.ALERT.equals(ContentType.valueOf(contentType))) {\n+                    plaintexts = new Plaintext[]{\n+                            new Plaintext(contentType, majorVersion, minorVersion, -1, -1L, packet)\n+                    };\n@@ -138,0 +141,1 @@\n+            }\n@@ -139,4 +143,1 @@\n-                throw context.fatal(Alert.UNEXPECTED_MESSAGE, unsoe);\n-            } catch (AEADBadTagException bte) {\n-                throw context.fatal(Alert.BAD_RECORD_MAC, bte);\n-            } catch (BadPaddingException bpe) {\n+            if (plaintexts == null) {\n@@ -153,11 +154,0 @@\n-            } catch (SSLHandshakeException she) {\n-                \/\/ may be record sequence number overflow\n-                throw context.fatal(Alert.HANDSHAKE_FAILURE, she);\n-            } catch (EOFException eofe) {\n-                \/\/ rethrow EOFException, the call will handle it if needed.\n-                throw eofe;\n-            } catch (InterruptedIOException | SocketException se) {\n-                \/\/ don't close the Socket in case of timeouts or interrupts or SocketException.\n-                throw se;\n-            } catch (IOException ioe) {\n-                throw context.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n@@ -165,0 +155,11 @@\n+        } catch (SSLHandshakeException she) {\n+            \/\/ may be record sequence number overflow\n+            throw context.fatal(Alert.HANDSHAKE_FAILURE, she);\n+        } catch (EOFException eofe) {\n+            \/\/ rethrow EOFException, the call will handle it if needed.\n+            throw eofe;\n+        } catch (InterruptedIOException | SocketException se) {\n+            \/\/ don't close the Socket in case of timeouts or interrupts or SocketException.\n+            throw se;\n+        } catch (IOException ioe) {\n+            throw context.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTransport.java","additions":40,"deletions":39,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-        log(\"---Client Wrap closeOutbound---\");\n+        log(\"---Client closeOutbound---\");\n@@ -196,0 +196,1 @@\n+        log(\"---Client Wrap user_cancelled---\");\n@@ -209,0 +210,14 @@\n+\n+        \/\/ Sends an unencrypted close_notify\n+        log(\"---Client Wrap close_notify---\");\n+        clientResult = clientEngine.wrap(clientOut, cTOs);\n+        logEngineStatus(clientEngine, clientResult);\n+        runDelegatedTasks(clientEngine);\n+\n+        cTOs.flip();\n+\n+        \/\/ Server unwrap should process an unencrypted 2 byte packet,\n+        log(\"---Server Unwrap close_notify alert---\");\n+        serverResult = serverEngine.unwrap(cTOs, serverIn);\n+        logEngineStatus(serverEngine, serverResult);\n+        runDelegatedTasks(serverEngine);\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv13\/SSLEngineNoServerHelloClientShutdown.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}