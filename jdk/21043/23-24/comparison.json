{"files":[{"patch":"@@ -1863,4 +1863,8 @@\n-                    if (ContentType.ALERT.equals(ContentType.valueOf(contentType))) {\n-                        \/\/ In TLSv1.3 alert level can be ignored, we only get the alert.\n-                        final String msg = \"Unexpected plaintext alert received: \"\n-                                + Alert.nameOf(bb.get(bb.position() + 1));\n+                    if (contentType == ContentType.ALERT.id\n+                        && bb.remaining() == 2) {\n+\n+                        final String msg = String.format(\n+                            \"Unexpected plaintext alert received: \" +\n+                            \"Level: %s; Alert: %s\",\n+                            Alert.Level.nameOf(bb.get(bb.position())),\n+                            Alert.nameOf(bb.get(bb.position() + 1)));\n@@ -1875,3 +1879,3 @@\n-                                \"Insufficient buffer remaining for AEAD cipher \" +\n-                                        \"fragment (\" + bb.remaining() + \"). Needs to be \" +\n-                                        \"more than tag size (\" + tagSize + \")\");\n+                            \"Insufficient buffer remaining for AEAD cipher \" +\n+                            \"fragment (\" + bb.remaining() + \"). Needs to be \" +\n+                            \"more than tag size (\" + tagSize + \")\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCipher.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n-            \"Unexpected plaintext alert received: user_canceled\";\n+        \"Unexpected plaintext alert received: \" +\n+        \"Level: warning; Alert: user_canceled\";\n@@ -74,2 +75,2 @@\n-    protected ByteBuffer cTOs;      \/\/ \"reliable\" transport client->server\n-    protected final ByteBuffer sTOc;      \/\/ \"reliable\" transport server->client\n+    protected ByteBuffer cTOs;        \/\/ \"reliable\" transport client->server\n+    protected final ByteBuffer sTOc;  \/\/ \"reliable\" transport server->client\n@@ -96,1 +97,2 @@\n-        \/\/ Make it larger so subsequent server wraps won't generate BUFFER_OVERFLOWS\n+        \/\/ Make it larger so subsequent server wraps won't generate\n+        \/\/ BUFFER_OVERFLOWS\n@@ -199,1 +201,2 @@\n-            assertEquals(GeneralSecurityException.class, e.getCause().getClass());\n+            assertEquals(\n+                GeneralSecurityException.class, e.getCause().getClass());\n@@ -228,1 +231,3 @@\n-    protected static void runDelegatedTasks(SSLEngine engine) throws Exception {\n+    protected static void runDelegatedTasks(SSLEngine engine)\n+        throws Exception {\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLCipher\/SSLEngineNoServerHelloClientShutdown.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n- * To reproduce @bug 8331682 (client sends an unencrypted TLS alert during 1.3 handshake)\n- * with SSLSockets we use an SSLSocket on the server side and a plain TCP socket backed by\n- * SSLEngine on the client side.\n+ * To reproduce @bug 8331682 (client sends an unencrypted TLS alert during\n+ * TLSv1.3 handshake) with SSLSockets we use an SSLSocket on the server side\n+ * and a plain TCP socket backed by SSLEngine on the client side.\n@@ -56,1 +56,2 @@\n-public class SSLSocketNoServerHelloClientShutdown extends SSLEngineNoServerHelloClientShutdown {\n+public class SSLSocketNoServerHelloClientShutdown\n+    extends SSLEngineNoServerHelloClientShutdown {\n@@ -74,1 +75,2 @@\n-        try (SSLServerSocket serverSocket = (SSLServerSocket) sslssf.createServerSocket()) {\n+        try (SSLServerSocket serverSocket =\n+            (SSLServerSocket) sslssf.createServerSocket()) {\n@@ -101,3 +103,6 @@\n-                assertEquals(SSLProtocolException.class, serverException.getClass());\n-                assertEquals(GeneralSecurityException.class, serverException.getCause().getClass());\n-                assertEquals(EXCEPTION_MSG, serverException.getCause().getMessage());\n+                assertEquals(\n+                    SSLProtocolException.class, serverException.getClass());\n+                assertEquals(GeneralSecurityException.class,\n+                             serverException.getCause().getClass());\n+                assertEquals(\n+                    EXCEPTION_MSG, serverException.getCause().getMessage());\n@@ -151,3 +156,4 @@\n-                    \/\/ Send client_hello, user_canceled alert and close_notify alert\n-                    \/\/ to server. Server should throw a proper exception when\n-                    \/\/ receiving an unencrypted 2 byte packet user_canceled alert.\n+                    \/\/ Send client_hello, user_canceled alert and close_notify\n+                    \/\/ alert to server. Server should throw a proper exception\n+                    \/\/ when receiving an unencrypted 2 byte packet user_canceled\n+                    \/\/ alert.\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLCipher\/SSLSocketNoServerHelloClientShutdown.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -136,1 +136,2 @@\n-        System.err.printf(\"---TLS Buffer Inspection. Bytes Remaining: %d---\\n\", packet.remaining());\n+        System.err.printf(\"---TLS Buffer Inspection. Bytes Remaining: %d---\\n\",\n+                          packet.remaining());\n@@ -145,2 +146,3 @@\n-                    \"Flight %d: contentType: %d; majorVersion: %d; minorVersion: %d; contentLen: %d\\n\",\n-                    i, (int) contentType, (int) majorVersion, (int) minorVersion, contentLen);\n+                \"Flight %d: contentType: %d; majorVersion: %d; \"\n+                + \"minorVersion: %d; contentLen: %d\\n\", i, (int) contentType,\n+                (int) majorVersion, (int) minorVersion, contentLen);\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}