{"files":[{"patch":"@@ -225,2 +225,2 @@\n-        \/\/ Client receives delayed serverHello\n-        log(\"---Client Unwrap serverHello---\");\n+        \/\/ Client receives delayed server_hello\n+        log(\"---Client Unwrap server_hello---\");\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv13\/SSLEngineNoServerHelloClientShutdown.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.io.IOException;\n@@ -40,1 +39,0 @@\n-import java.io.OutputStream;\n@@ -42,4 +40,2 @@\n-import java.net.Socket;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayDeque;\n-import java.util.Queue;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.SocketChannel;\n@@ -64,1 +60,1 @@\n-    private volatile Socket clientSocket;\n+    private volatile SocketChannel clientSocketChannel;\n@@ -119,1 +115,0 @@\n-                    Queue<ByteBuffer> delayed = new ArrayDeque<>() {};\n@@ -122,2 +117,3 @@\n-                    clientSocket = new Socket(\"localhost\", port);\n-                    clientSocket.setSoTimeout(500);\n+                    clientSocketChannel = SocketChannel.open(\n+                            new InetSocketAddress(\"localhost\", port));\n+                    clientSocketChannel.socket().setSoTimeout(500);\n@@ -133,9 +129,0 @@\n-                    \/\/ Send client_hello, read and store all available messages from the server.\n-                    while (delayed.size() < 6) {\n-                        ByteBuffer msg = clientWriteRead();\n-                        if (msg == null) {\n-                            break;\n-                        }\n-                        delayed.add(msg);\n-                    }\n-\n@@ -156,0 +143,1 @@\n+                    runDelegatedTasks(clientEngine);\n@@ -158,5 +146,0 @@\n-                    runDelegatedTasks(clientEngine);\n-\n-                    \/\/ Send user_canceled and close_notify alerts to server. Server should process\n-                    \/\/ 2 unencrypted alerts and send its own close_notify alert back to the client.\n-                    ByteBuffer serverCloseNotify = clientWriteRead();\n@@ -164,4 +147,15 @@\n-                    \/\/ Consume delayed messages.\n-                    for (int i = 1; !delayed.isEmpty(); i++) {\n-                        ByteBuffer msg = delayed.remove();\n-                        inspectTlsBuffer(msg);\n+                    \/\/ Send client_hello, user_canceled alert and close_notify alert to server.\n+                    \/\/ Server should process 2 unencrypted alerts.\n+                    cTOs.flip();\n+                    inspectTlsBuffer(cTOs);\n+                    int len = clientSocketChannel.write(cTOs);\n+                    log(\"---Client wrote \" + len + \" bytes---\");\n+\n+                    \/\/ Read all the messages from the server.\n+                    \/\/ Server should reply with server_hello, CCS, EE and its own close_notify\n+                    \/\/ alert back to the client.\n+                    while ((len = clientSocketChannel.read(sTOc)) != -1) {\n+                        log(\"---Client read \" + len + \" bytes---\");\n+                    }\n+                    sTOc.flip();\n+                    inspectTlsBuffer(sTOc);\n@@ -169,2 +163,4 @@\n-                        log(\"---Client Unwrap delayed flight \" + i + \"---\");\n-                        clientResult = clientEngine.unwrap(msg, clientIn);\n+                    \/\/ Consume server messages.\n+                    for (int i = 1; sTOc.hasRemaining(); i++) {\n+                        log(\"---Client Unwrap server flight \" + i + \"---\");\n+                        clientResult = clientEngine.unwrap(sTOc, clientIn);\n@@ -175,7 +171,0 @@\n-                    \/\/ Consume close_notify alert from server.\n-                    assert serverCloseNotify != null;\n-                    inspectTlsBuffer(serverCloseNotify);\n-\n-                    log(\"---Client Unwrap close_notify response---\");\n-                    clientResult = clientEngine.unwrap(serverCloseNotify, clientIn);\n-                    logEngineStatus(clientEngine, clientResult);\n@@ -184,1 +173,0 @@\n-                    runDelegatedTasks(clientEngine);\n@@ -195,35 +183,0 @@\n-\n-    protected ByteBuffer clientWriteRead() throws IOException {\n-        OutputStream os = clientSocket.getOutputStream();\n-        InputStream is = clientSocket.getInputStream();\n-        byte[] inbound = new byte[8192];\n-\n-        cTOs.flip();\n-        inspectTlsBuffer(cTOs);\n-\n-        byte[] outbound = new byte[cTOs.limit() - cTOs.position()];\n-        cTOs.get(outbound);\n-        cTOs.compact();\n-\n-        log(\"---Client writes \" + outbound.length + \" bytes---\");\n-        os.write(outbound);\n-        os.flush();\n-\n-        int len = 0;\n-\n-        try {\n-            len = is.read(inbound);\n-            log(\"---Client reads \" + len + \" bytes---\");\n-        } catch (Exception e) {\n-            log(e.getMessage());\n-            return null;\n-        }\n-\n-        if (len < 1) {\n-            return null;\n-        }\n-\n-        ByteBuffer flight = ByteBuffer.wrap(inbound);\n-        flight.limit(len);\n-        return flight;\n-    }\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv13\/SSLSocketNoServerHelloClientShutdown.java","additions":26,"deletions":73,"binary":false,"changes":99,"status":"modified"}]}