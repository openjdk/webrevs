{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2022, Red Hat Inc.\n+ * Copyright (c) 2020, 2025, Red Hat Inc.\n@@ -37,1 +37,0 @@\n-import jdk.internal.javac.PreviewFeature;\n@@ -240,1 +239,1 @@\n- * @since 21\n+ * @since 25\n@@ -242,1 +241,0 @@\n-@PreviewFeature(feature = PreviewFeature.Feature.SCOPED_VALUES)\n@@ -313,1 +311,1 @@\n-     * @since 21\n+     * @since 25\n@@ -315,1 +313,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.SCOPED_VALUES)\n@@ -416,1 +413,0 @@\n-         * @since 23\n@@ -500,1 +496,1 @@\n-     * @since 23\n+     * @since 25\n@@ -502,1 +498,0 @@\n-    @PreviewFeature(feature = PreviewFeature.Feature.SCOPED_VALUES)\n@@ -615,1 +610,1 @@\n-     * @param other the value to return if not bound, can be {@code null}\n+     * @param other the value to return if not bound\n@@ -619,0 +614,1 @@\n+        Objects.requireNonNull(other);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-        return SCOPED_SUBJECT.orElse(null);\n+        return SCOPED_SUBJECT.isBound() ? SCOPED_SUBJECT.get() : null;\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-        @JEP(number=487, title=\"Scoped Values\", status=\"Fourth Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/ManyBindings.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @enablePreview\n@@ -178,1 +177,0 @@\n-            assertNull(name.orElse(null));\n@@ -183,1 +181,0 @@\n-                assertEquals(\"duke\", name.orElse(null));\n@@ -189,1 +186,0 @@\n-                assertEquals(\"duke\", name.orElse(null));\n@@ -419,0 +415,1 @@\n+        assertThrows(NullPointerException.class, () -> name.orElse(null));\n@@ -426,0 +423,1 @@\n+        assertThrows(NullPointerException.class, () -> carrier.run(() -> name.orElse(null)));\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/ScopedValueAPI.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @enablePreview\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/UnboundValueAfterOOME.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}