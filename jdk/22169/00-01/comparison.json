{"files":[{"patch":"@@ -213,1 +213,1 @@\n-        var mtype = methodType(method.getReturnType(), method.getParameterTypes());\n+        var mtype = methodType(method.getReturnType(), reflectionFactory.getExecutableSharedParameterTypes(method));\n@@ -235,1 +235,1 @@\n-        MethodType mtype = methodType(method.getReturnType(), method.getParameterTypes())\n+        MethodType mtype = methodType(method.getReturnType(), reflectionFactory.getExecutableSharedParameterTypes(method))\n@@ -373,4 +373,7 @@\n-        \/\/ java.lang.invoke fails to create MH for bad ACC_VARARGS methods with no\n-        \/\/ trailing array,  but core reflection ignores ACC_VARARGS flag like the JVM does.\n-        \/\/ Fall back to use the native implementation instead.\n-        if (isInvalidVarArgs(member))\n+        \/\/ Lookup always calls MethodHandle::setVarargs on a member with ACC_VARARGS\n+        \/\/ bit set, which verifies that the last parameter of the member must be\n+        \/\/ an array type.  Such restriction does not exist in core reflection\n+        \/\/ and the JVM.  Fall back to use the native implementation instead.\n+        int paramCount = member.getParameterCount();\n+        if (member.isVarArgs() &&\n+                (paramCount == 0 || !(reflectionFactory.getExecutableSharedParameterTypes(member)[paramCount-1].isArray()))) {\n@@ -378,0 +381,1 @@\n+        }\n@@ -398,1 +402,1 @@\n-        Class<?>[] ptypes = member.getParameterTypes();\n+        Class<?>[] ptypes = reflectionFactory.getExecutableSharedParameterTypes(member);\n@@ -433,18 +437,0 @@\n-    \/**\n-     * Lookup always calls MethodHandle::setVarargs on a member with varargs modifier\n-     * bit set, which verifies that the last parameter of the member must be an array type.\n-     * Thus, Lookup cannot create MethodHandle for such methods or constructors.\n-     * The JVMS does not require that the last parameter descriptor of the method descriptor\n-     * is an array type if the ACC_VARARGS flag is set in the access_flags item.\n-     * Core reflection also has no variable arity support and ignores the ACC_VARARGS flag,\n-     * treating them as regular arguments.\n-     *\/\n-    private static boolean isInvalidVarArgs(Executable member) {\n-        if (!member.isVarArgs())\n-            return false;\n-\n-        Class<?>[] parameters = reflectionFactory.getExecutableSharedParameterTypes(member);\n-        var count = parameters.length;\n-        return count == 0 || !parameters[count - 1].isArray();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.java","additions":11,"deletions":25,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,1 @@\n-\/*\n- * @test\n- * @bug 8343377\n+\/* @test\n@@ -34,0 +32,1 @@\n+import org.testng.*;\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleInvokeUOE.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8335638 8343377\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestReflection.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmark for regression in native method invocation.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class NativeMethodInvoke {\n+\n+    private Method objectHashCode;\n+    private Method threadCurrentThread;\n+\n+    private Object[] objects;\n+\n+    @Setup\n+    public void setup() throws ReflectiveOperationException {\n+        objects = new Object[]{\n+                1, 5L,\n+                5.6d, 23.11f,\n+                Boolean.TRUE, 'd'\n+        };\n+\n+        objectHashCode = Object.class.getDeclaredMethod(\"hashCode\");\n+        threadCurrentThread = Thread.class.getDeclaredMethod(\"currentThread\");\n+    }\n+\n+    @Benchmark\n+    public void objectHashCode(Blackhole bh) throws ReflectiveOperationException {\n+        for (var obj : objects) {\n+            bh.consume(objectHashCode.invoke(obj));\n+        }\n+    }\n+\n+    @Benchmark\n+    public Object threadCurrentThread() throws ReflectiveOperationException {\n+        return threadCurrentThread.invoke(null);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/NativeMethodInvoke.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}