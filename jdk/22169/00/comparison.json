{"files":[{"patch":"@@ -50,1 +50,1 @@\n-        assert !Modifier.isNative(method.getModifiers());\n+        assert !MethodHandleAccessorFactory.isSignaturePolymorphicMethod(method);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.lang.invoke.VarHandle;\n@@ -350,2 +351,2 @@\n-     * 2. a Java native method\n-     * 3. -Djdk.reflect.useNativeAccessorOnly=true is set\n+     * 2. -Djdk.reflect.useNativeAccessorOnly=true is set\n+     * 3. a signature polymorphic method\n@@ -356,0 +357,1 @@\n+     * Conditions 3-5 are due to the restrictions of method handles.\n@@ -362,1 +364,1 @@\n-        if (Modifier.isNative(member.getModifiers()))\n+        if (ReflectionFactory.useNativeAccessorOnly())  \/\/ for testing only\n@@ -365,1 +367,4 @@\n-        if (ReflectionFactory.useNativeAccessorOnly())  \/\/ for testing only\n+        \/\/ java.lang.invoke cannot find the underlying native stubs of signature\n+        \/\/ polymorphic methods that core reflection must invoke.\n+        \/\/ Fall back to use the native implementation instead.\n+        if (member instanceof Method method && isSignaturePolymorphicMethod(method))\n@@ -368,10 +373,4 @@\n-        \/\/ MethodHandle::withVarargs on a member with varargs modifier bit set\n-        \/\/ verifies that the last parameter of the member must be an array type.\n-        \/\/ The JVMS does not require the last parameter descriptor of the method descriptor\n-        \/\/ is an array type if the ACC_VARARGS flag is set in the access_flags item.\n-        \/\/ Hence the reflection implementation does not check the last parameter type\n-        \/\/ if ACC_VARARGS flag is set.  Workaround this by invoking through\n-        \/\/ the native accessor.\n-        int paramCount = member.getParameterCount();\n-        if (member.isVarArgs() &&\n-                (paramCount == 0 || !(member.getParameterTypes()[paramCount-1].isArray()))) {\n+        \/\/ java.lang.invoke fails to create MH for bad ACC_VARARGS methods with no\n+        \/\/ trailing array,  but core reflection ignores ACC_VARARGS flag like the JVM does.\n+        \/\/ Fall back to use the native implementation instead.\n+        if (isInvalidVarArgs(member))\n@@ -379,1 +378,1 @@\n-        }\n+\n@@ -409,0 +408,43 @@\n+    \/**\n+     * Signature-polymorphic methods.  Lookup has special rules for these methods,\n+     * but core reflection must observe them as they are declared, and reflective\n+     * invocation must invoke the native method stubs that throw UOE.\n+     *\n+     * @param method the method to check\n+     * @return {@code true} if this method is signature polymorphic\n+     * @jls 15.12.3 Compile-Time Step 3: Is the Chosen Method Appropriate?\n+     * @jvms 2.9.3 Signature Polymorphic Methods\n+     *\/\n+    public static boolean isSignaturePolymorphicMethod(Method method) {\n+        \/\/ ACC_NATIVE and ACC_VARARGS\n+        if (!method.isVarArgs() || !Modifier.isNative(method.getModifiers())) {\n+            return false;\n+        }\n+        \/\/ Declared in MethodHandle or VarHandle\n+        var declaringClass = method.getDeclaringClass();\n+        if (declaringClass != MethodHandle.class && declaringClass != VarHandle.class) {\n+            return false;\n+        }\n+        \/\/ Single parameter of declared type Object[]\n+        Class<?>[] parameters = reflectionFactory.getExecutableSharedParameterTypes(method);\n+        return parameters.length == 1 && parameters[0] == Object[].class;\n+    }\n+\n+    \/**\n+     * Lookup always calls MethodHandle::setVarargs on a member with varargs modifier\n+     * bit set, which verifies that the last parameter of the member must be an array type.\n+     * Thus, Lookup cannot create MethodHandle for such methods or constructors.\n+     * The JVMS does not require that the last parameter descriptor of the method descriptor\n+     * is an array type if the ACC_VARARGS flag is set in the access_flags item.\n+     * Core reflection also has no variable arity support and ignores the ACC_VARARGS flag,\n+     * treating them as regular arguments.\n+     *\/\n+    private static boolean isInvalidVarArgs(Executable member) {\n+        if (!member.isVarArgs())\n+            return false;\n+\n+        Class<?>[] parameters = reflectionFactory.getExecutableSharedParameterTypes(member);\n+        var count = parameters.length;\n+        return count == 0 || !parameters[count - 1].isArray();\n+    }\n+\n@@ -417,0 +459,1 @@\n+    private static final ReflectionFactory reflectionFactory = ReflectionFactory.getReflectionFactory();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.java","additions":59,"deletions":16,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,3 @@\n-\/* @test\n+\/*\n+ * @test\n+ * @bug 8343377\n@@ -32,1 +34,0 @@\n-import org.testng.*;\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleInvokeUOE.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8335638 8343377\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestReflection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}