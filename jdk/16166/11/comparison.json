{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import javax.print.attribute.standard.OutputBin;\n@@ -73,0 +74,2 @@\n+    private String outputBin = null;\n+\n@@ -194,0 +197,2 @@\n+        outputBin = getOutputBinValue(attributes.get(OutputBin.class));\n+\n@@ -661,0 +666,35 @@\n+    private String getOutputBin() {\n+        return outputBin;\n+    }\n+\n+    private void setOutputBin(String outputBinName) {\n+\n+        OutputBin outputBin = toOutputBin(outputBinName);\n+        if (outputBin != null) {\n+            attributes.add(outputBin);\n+        }\n+    }\n+\n+    private OutputBin toOutputBin(String outputBinName) {\n+\n+        PrintService ps = getPrintService();\n+        if (ps == null) {\n+            return null;\n+        }\n+\n+        OutputBin[] supportedBins = (OutputBin[]) ps.getSupportedAttributeValues(OutputBin.class, null, null);\n+        if (supportedBins == null || supportedBins.length == 0) {\n+            return null;\n+        }\n+\n+        for (OutputBin bin : supportedBins) {\n+            if (bin instanceof CustomOutputBin customBin){\n+                if (customBin.getChoiceName().equals(outputBinName)) {\n+                    return customBin;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+    DECLARE_METHOD(jm_setOutputBin, sjc_CPrinterJob, \"setOutputBin\", \"(Ljava\/lang\/String;)V\");\n@@ -452,0 +453,7 @@\n+\n+        NSString* outputBin = [[src printSettings] objectForKey:@\"OutputBin\"];\n+        if (outputBin != nil) {\n+            jstring outputBinName = NSStringToJavaString(env, outputBin);\n+            (*env)->CallVoidMethod(env, dstPrinterJob, jm_setOutputBin, outputBinName);\n+            CHECK_EXCEPTION();\n+        }\n@@ -471,0 +479,1 @@\n+    DECLARE_METHOD(jm_getOutputBin, sjc_CPrinterJob, \"getOutputBin\", \"()Ljava\/lang\/String;\");\n@@ -541,0 +550,9 @@\n+\n+    jobject outputBin = (*env)->CallObjectMethod(env, srcPrinterJob, jm_getOutputBin);\n+    CHECK_EXCEPTION();\n+    if (outputBin != NULL) {\n+        NSString *nsOutputBinStr = JavaStringToNSString(env, outputBin);\n+        if (nsOutputBinStr != nil) {\n+            [[dst printSettings] setObject:nsOutputBinStr forKey:@\"OutputBin\"];\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.print.attribute.standard;\n+\n+import java.io.Serial;\n+\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.DocAttribute;\n+import javax.print.attribute.EnumSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+import sun.print.CustomOutputBin;\n+\n+\/**\n+ * Class {@code OutputBin} is a printing attribute class, an enumeration, that\n+ * specifies the output bin for the job.\n+ * <p>\n+ * Class {@code OutputBin} declares keywords for standard output bin kind values.\n+ * <p>\n+ * <b>IPP Compatibility:<\/b> This attribute is not an IPP 1.1 attribute; it is\n+ * an attribute in the \"output-bin\" attribute extension\n+ * (<a href=\"https:\/\/ftp.pwg.org\/pub\/pwg\/candidates\/cs-ippoutputbin10-20010207-5100.2.pdf\">\n+ * PDF<\/a>) of IPP 1.1. The category name returned by {@code getName()} is the\n+ * IPP attribute name. The enumeration's integer value is the IPP enum value.\n+ * The {@code toString()} method returns the IPP string representation of the\n+ * attribute value.\n+ *\/\n+public sealed class OutputBin extends EnumSyntax implements PrintRequestAttribute, PrintJobAttribute permits CustomOutputBin {\n+\n+    @Serial\n+    private static final long serialVersionUID = -3718893309873137109L;\n+\n+    \/**\n+     * The top output bin in the printer.\n+     *\/\n+    public static final OutputBin TOP = new OutputBin(0);\n+\n+    \/**\n+     * The middle output bin in the printer.\n+     *\/\n+    public static final OutputBin MIDDLE = new OutputBin(1);\n+\n+    \/**\n+     * The bottom output bin in the printer.\n+     *\/\n+    public static final OutputBin BOTTOM = new OutputBin(2);\n+\n+    \/**\n+     * The side output bin in the printer.\n+     *\/\n+    public static final OutputBin SIDE = new OutputBin(3);\n+\n+    \/**\n+     * The left output bin in the printer.\n+     *\/\n+    public static final OutputBin LEFT = new OutputBin(4);\n+\n+    \/**\n+     * The right output bin in the printer.\n+     *\/\n+    public static final OutputBin RIGHT = new OutputBin(5);\n+\n+    \/**\n+     * The center output bin in the printer.\n+     *\/\n+    public static final OutputBin CENTER = new OutputBin(6);\n+\n+    \/**\n+     * The rear output bin in the printer.\n+     *\/\n+    public static final OutputBin REAR = new OutputBin(7);\n+\n+    \/**\n+     * The face up output bin in the printer.\n+     *\/\n+    public static final OutputBin FACE_UP = new OutputBin(8);\n+\n+    \/**\n+     * The face down output bin in the printer.\n+     *\/\n+    public static final OutputBin FACE_DOWN = new OutputBin(9);\n+\n+    \/**\n+     * The large-capacity output bin in the printer.\n+     *\/\n+    public static final OutputBin LARGE_CAPACITY = new OutputBin(10);\n+\n+    \/**\n+     * Construct a new output bin enumeration value with the given integer\n+     * value.\n+     *\n+     * @param value Integer value\n+     *\/\n+    protected OutputBin(int value) {\n+        super(value);\n+    }\n+\n+    \/**\n+     * The string table for class {@code OutputBin}.\n+     *\/\n+    private static final String[] myStringTable = {\n+            \"top\",\n+            \"middle\",\n+            \"bottom\",\n+            \"side\",\n+            \"left\",\n+            \"right\",\n+            \"center\",\n+            \"rear\",\n+            \"face-up\",\n+            \"face-down\",\n+            \"large-capacity\",\n+    };\n+\n+    \/**\n+     * The enumeration value table for class {@code OutputBin}.\n+     *\/\n+    private static final OutputBin[] myEnumValueTable = {\n+            TOP,\n+            MIDDLE,\n+            BOTTOM,\n+            SIDE,\n+            LEFT,\n+            RIGHT,\n+            CENTER,\n+            REAR,\n+            FACE_UP,\n+            FACE_DOWN,\n+            LARGE_CAPACITY,\n+    };\n+\n+    \/**\n+     * Returns the string table for class {@code OutputBin}.\n+     *\/\n+    @Override\n+    protected String[] getStringTable() {\n+        return myStringTable.clone();\n+    }\n+\n+    \/**\n+     * Returns the enumeration value table for class {@code OutputBin}.\n+     *\/\n+    @Override\n+    protected EnumSyntax[] getEnumValueTable() {\n+        return (EnumSyntax[]) myEnumValueTable.clone();\n+    }\n+\n+    \/**\n+     * Get the printing attribute class which is to be used as the \"category\"\n+     * for this printing attribute value.\n+     * <p>\n+     * For class {@code OutputBin} and any vendor-defined subclasses, the category\n+     * is class {@code OutputBin} itself.\n+     *\n+     * @return printing attribute class (category), an instance of class\n+     *         {@link Class java.lang.Class}\n+     *\/\n+    @Override\n+    public final Class<? extends Attribute> getCategory() {\n+        return OutputBin.class;\n+    }\n+\n+    \/**\n+     * Get the name of the category of which this attribute value is an\n+     * instance.\n+     * <p>\n+     * For class {@code OutputBin} and any vendor-defined subclasses, the category\n+     * name is {@code \"output-bin\"}.\n+     *\n+     * @return attribute category name\n+     *\/\n+    @Override\n+    public final String getName() {\n+        return \"output-bin\";\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/OutputBin.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -338,0 +338,7 @@\n+ *     <th scope=\"row\"><a href=\"OutputBin.html\">OutputBin<\/a>\n+ *     <td>&nbsp;\n+ *     <td>X\n+ *     <td>X\n+ *     <td>&nbsp;\n+ *     <td>&nbsp;\n+ *   <tr>\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/package-info.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.print;\n+\n+import java.io.Serial;\n+import java.util.ArrayList;\n+\n+import javax.print.attribute.EnumSyntax;\n+import javax.print.attribute.standard.Media;\n+import javax.print.attribute.standard.OutputBin;\n+\n+public final class CustomOutputBin extends OutputBin {\n+    private static ArrayList<String> customStringTable = new ArrayList<>();\n+    private static ArrayList<CustomOutputBin> customEnumTable = new ArrayList<>();\n+    private String choiceName;\n+\n+    private CustomOutputBin(int x) {\n+        super(x);\n+    }\n+\n+    private static synchronized int nextValue(String name) {\n+      customStringTable.add(name);\n+      return (customStringTable.size()-1);\n+    }\n+\n+    private CustomOutputBin(String name, String choice) {\n+        super(nextValue(name));\n+        choiceName = choice;\n+        customEnumTable.add(this);\n+    }\n+\n+    \/**\n+     * Creates a custom output bin\n+     *\/\n+    public static synchronized CustomOutputBin createOutputBin(String name, String choice) {\n+        for (CustomOutputBin bin : customEnumTable) {\n+            if (bin.getChoiceName().equals(choice) && bin.getCustomName().equals(name)) {\n+                return bin;\n+            }\n+        }\n+        return new CustomOutputBin(name, choice);\n+    }\n+\n+    private static final long serialVersionUID = 3018751086294120717L;\n+\n+    \/**\n+     * Returns the command string for this media tray.\n+     *\/\n+    public String getChoiceName() {\n+        return choiceName;\n+    }\n+\n+    \/**\n+     * Returns the string table for super class MediaTray.\n+     *\/\n+    public OutputBin[] getSuperEnumTable() {\n+      return (OutputBin[])super.getEnumValueTable();\n+    }\n+\n+    \/**\n+     * Returns the string table for class CustomOutputBin.\n+     *\/\n+    @Override\n+    protected String[] getStringTable() {\n+      String[] nameTable = new String[customStringTable.size()];\n+      return customStringTable.toArray(nameTable);\n+    }\n+\n+    \/**\n+     * Returns a custom bin name\n+     *\/\n+    public String getCustomName() {\n+        return customStringTable.get(getValue() - getOffset());\n+    }\n+\n+    \/**\n+     * Returns the enumeration value table for class CustomOutputBin.\n+     *\/\n+    @Override\n+    protected CustomOutputBin[] getEnumValueTable() {\n+        CustomOutputBin[] enumTable = new CustomOutputBin[customEnumTable.size()];\n+      return customEnumTable.toArray(enumTable);\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/CustomOutputBin.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -64,0 +64,1 @@\n+import javax.print.attribute.standard.OutputBin;\n@@ -494,0 +495,1 @@\n+        mOptions = \"\";\n@@ -499,1 +501,1 @@\n-                mOptions = \" InputSlot=\"+ choice;\n+                mOptions += \" InputSlot=\"+ choice;\n@@ -502,0 +504,4 @@\n+        String outputBin = getOutputBinValue(outputBinAttr);\n+        if (outputBin != null) {\n+            mOptions += \" output-bin=\" + outputBin;\n+        }\n@@ -1646,1 +1652,3 @@\n-                execCmd[n++] = \"-o\" + options;\n+                for(String option: options.trim().split(\" \")) {\n+                    execCmd[n++] = \"-o \" + option;\n+                }\n@@ -1669,1 +1677,3 @@\n-                execCmd[n++] = \"-o\" + options;\n+                for(String option: options.trim().split(\" \")) {\n+                    execCmd[n++] = \"-o \" + option;\n+                }\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPrinterJob.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+import javax.print.attribute.standard.OutputBin;\n@@ -282,0 +283,1 @@\n+    protected OutputBin outputBinAttr;\n@@ -1231,0 +1233,1 @@\n+        outputBinAttr = null;\n@@ -1277,0 +1280,5 @@\n+        outputBinAttr = (OutputBin)attributes.get(OutputBin.class);\n+        if (!isSupportedValue(outputBinAttr,  attributes)) {\n+            outputBinAttr = null;\n+        }\n+\n@@ -2620,0 +2628,21 @@\n+\n+    protected String getOutputBinValue(Attribute attr) {\n+        if (attr instanceof CustomOutputBin customOutputBin) {\n+            return customOutputBin.getChoiceName();\n+        } else if (attr instanceof OutputBin outputBin) {\n+            String name = outputBin.toString().replace('-', ' ');\n+            PrintService ps = getPrintService();\n+            if (ps == null) {\n+                return name;\n+            }\n+            OutputBin[] supportedBins = (OutputBin[]) ps.getSupportedAttributeValues(OutputBin.class, null, null);\n+            for (OutputBin bin : supportedBins) {\n+                CustomOutputBin customBin = (CustomOutputBin) bin;\n+                if (customBin.getCustomName().equalsIgnoreCase(name)) {\n+                    return customBin.getChoiceName();\n+                }\n+            }\n+            return name;\n+        }\n+        return null;\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/RasterPrinterJob.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import sun.awt.OSInfo;\n@@ -2303,0 +2304,1 @@\n+        private OutputPanel pnlOutput;\n@@ -2333,0 +2335,5 @@\n+            if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+                c.gridwidth = GridBagConstraints.REMAINDER;\n+                pnlOutput = new OutputPanel();\n+                addToGB(pnlOutput, this, gridbag, c);\n+            }\n@@ -2340,0 +2347,3 @@\n+            if (pnlOutput != null) {\n+                pnlOutput.updateInfo();\n+            }\n@@ -2821,0 +2831,13 @@\n+    @SuppressWarnings(\"serial\") \/\/ Superclass is not serializable across versions\n+    private class OutputPanel extends JPanel implements ItemListener {\n+\n+        private final String strTitle = getMsg(\"border.output\");\n+        private JLabel lblOutput;\n+        private JComboBox<Object> cbOutput;\n+        private Vector<OutputBin> outputs = new Vector<>();\n+\n+        public OutputPanel() {\n+            super();\n+\n+            GridBagLayout gridbag = new GridBagLayout();\n+            GridBagConstraints c = new GridBagConstraints();\n@@ -2822,0 +2845,2 @@\n+            setLayout(gridbag);\n+            setBorder(BorderFactory.createTitledBorder(strTitle));\n@@ -2823,0 +2848,82 @@\n+            cbOutput = new JComboBox<>();\n+\n+            c.fill = GridBagConstraints.BOTH;\n+            c.insets = compInsets;\n+            c.weighty = 1.0;\n+\n+            c.weightx = 0.0;\n+            lblOutput = new JLabel(getMsg(\"label.outputbins\"), JLabel.TRAILING);\n+            lblOutput.setDisplayedMnemonic(getMnemonic(\"label.outputbins\"));\n+            lblOutput.setLabelFor(cbOutput);\n+            addToGB(lblOutput, this, gridbag, c);\n+            c.weightx = 1.0;\n+            c.gridwidth = GridBagConstraints.REMAINDER;\n+            addToGB(cbOutput, this, gridbag, c);\n+        }\n+\n+        public void itemStateChanged(ItemEvent e) {\n+\n+            Object source = e.getSource();\n+            if (e.getStateChange() == ItemEvent.SELECTED) {\n+                if (source == cbOutput) {\n+                    int index = cbOutput.getSelectedIndex();\n+                    if ((index >= 0) && (index < outputs.size())) {\n+                        asCurrent.add(outputs.get(index));\n+                    } else if (index == cbOutput.getItemCount() - 1) {\n+                        asCurrent.remove(OutputBin.class);\n+                    }\n+                }\n+            }\n+        }\n+\n+        public void updateInfo() {\n+\n+            Class<OutputBin> obCategory = OutputBin.class;\n+\n+            cbOutput.removeItemListener(this);\n+            cbOutput.removeAllItems();\n+\n+            outputs.clear();\n+\n+            boolean outputEnabled = false;\n+\n+            if (psCurrent.isAttributeCategorySupported(obCategory)) {\n+\n+                Object values =\n+                        psCurrent.getSupportedAttributeValues(obCategory,\n+                                docFlavor,\n+                                asCurrent);\n+\n+                if (values instanceof OutputBin[]) {\n+                    OutputBin[] outputBins = (OutputBin[])values;\n+\n+                    for (OutputBin outputBin: outputBins) {\n+                        outputs.add(outputBin);\n+                        cbOutput.addItem(outputBin.toString());\n+                    }\n+\n+                    cbOutput.addItem(\"\");\n+                    cbOutput.setSelectedIndex(cbOutput.getItemCount() - 1);\n+\n+                    OutputBin current = (OutputBin) asCurrent.get(obCategory);\n+                    if (current != null) {\n+                        for (int i = 0; i < outputs.size(); i++) {\n+                            if (current.equals(outputs.get(i))) {\n+                                cbOutput.setSelectedIndex(i);\n+                                break;\n+                            }\n+                        }\n+                    } else if (outputBins.length == 1) {\n+                        cbOutput.setSelectedIndex(0);\n+                    }\n+\n+                    outputEnabled = outputBins.length > 1;\n+                }\n+            }\n+\n+            cbOutput.setEnabled(outputEnabled);\n+            lblOutput.setEnabled(outputEnabled);\n+\n+            cbOutput.addItemListener(this);\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/ServiceDialog.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Output\n@@ -65,0 +66,1 @@\n+label.outputbins=Out&put trays:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Ausgabe\n@@ -65,0 +66,1 @@\n+label.outputbins=A&usgabefächer:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_de.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Salida\n@@ -65,0 +66,1 @@\n+label.outputbins=Band&ejas de salida:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_es.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Sortir\n@@ -65,0 +66,1 @@\n+label.outputbins=Bacs de s&ortie :\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_fr.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Output\n@@ -65,0 +66,1 @@\n+label.outputbins=&Vassoi di uscita:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_it.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=出力\n@@ -65,0 +66,1 @@\n+label.outputbins=出力トレイ(&P):\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_ja.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=출력물\n@@ -65,0 +66,1 @@\n+label.outputbins=출력 트레이(&P):\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_ko.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Saída\n@@ -65,0 +66,1 @@\n+label.outputbins=Bande&jas de saída:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_pt_BR.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Utmatning\n@@ -65,0 +66,1 @@\n+label.outputbins=Utma&tningsfack:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_sv.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=出纸\n@@ -65,0 +66,1 @@\n+label.outputbins=出纸托盘(&P):\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_zh_CN.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=出紙\n@@ -65,0 +66,1 @@\n+label.outputbins=输出纸盒(&P):\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui_zh_TW.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import sun.print.CustomOutputBin;\n@@ -41,0 +42,1 @@\n+import javax.print.attribute.standard.OutputBin;\n@@ -63,0 +65,1 @@\n+    private static synchronized native String[] getOutputBins(String printer);\n@@ -71,0 +74,1 @@\n+    private OutputBin[] cupsOutputBins;\n@@ -75,0 +79,1 @@\n+    private  String[] outputBins;\n@@ -147,0 +152,2 @@\n+\n+            outputBins = getOutputBins(printer);\n@@ -188,0 +195,8 @@\n+    \/**\n+     * Returns array of OutputBins derived from PPD.\n+     *\/\n+    OutputBin[] getOutputBins() {\n+        initMedia();\n+        return cupsOutputBins;\n+    }\n+\n@@ -264,0 +279,9 @@\n+        if (outputBins == null) {\n+            cupsOutputBins = new OutputBin[0];\n+        } else {\n+            int nBins = outputBins.length \/ 2;\n+            cupsOutputBins = new OutputBin[nBins];\n+            for (int i = 0; i < nBins; i++) {\n+                cupsOutputBins[i] = CustomOutputBin.createOutputBin(outputBins[i*2], outputBins[i*2+1]);\n+            }\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/CUPSPrinter.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+import javax.print.attribute.standard.OutputBin;\n@@ -141,0 +142,1 @@\n+    private OutputBin[] outputBins;\n@@ -214,0 +216,1 @@\n+        OutputBin.TOP,\n@@ -443,0 +446,1 @@\n+                outputBins = new OutputBin[0];\n@@ -463,0 +467,3 @@\n+                        outputBins = PrintServiceLookupProvider.isMac()\n+                                ? cps.getOutputBins()\n+                                : getSupportedOutputBins();\n@@ -496,0 +503,5 @@\n+\n+            if (outputBins == null) {\n+                outputBins = getSupportedOutputBins();\n+            }\n+\n@@ -830,0 +842,2 @@\n+        } else if (category == OutputBin.class) {\n+            return Arrays.copyOf(outputBins, outputBins.length);\n@@ -1056,0 +1070,19 @@\n+    private OutputBin[] getSupportedOutputBins() {\n+        if ((getAttMap != null) && getAttMap.containsKey(\"output-bin-supported\")) {\n+\n+            AttributeClass attribClass = getAttMap.get(\"output-bin-supported\");\n+\n+            if (attribClass != null) {\n+                String[] values = attribClass.getArrayOfStringValues();\n+                if (values == null || values.length == 0) {\n+                    return null;\n+                }\n+                OutputBin[] outputBinNames = new OutputBin[values.length];\n+                for (int i = 0; i < values.length; i++) {\n+                    outputBinNames[i] = CustomOutputBin.createOutputBin(values[i], values[i]);\n+                }\n+                return outputBinNames;\n+            }\n+        }\n+        return null;\n+    }\n@@ -1073,0 +1106,5 @@\n+\n+                if (pra == OutputBin.TOP && (outputBins == null || outputBins.length == 0)) {\n+                    continue;\n+                }\n+\n@@ -1151,0 +1189,5 @@\n+        if (category == OutputBin.class\n+                && (outputBins == null || outputBins.length == 0)) {\n+            return false;\n+        }\n+\n@@ -1649,0 +1692,4 @@\n+        } else if (category == OutputBin.class) {\n+            if (attribClass != null) {\n+                return CustomOutputBin.createOutputBin(attribClass.getStringValue(), attribClass.getStringValue());\n+            }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/IPPPrintService.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -418,0 +418,90 @@\n+\/*\n+ * Returns list of output bins\n+ *\/\n+JNIEXPORT jobjectArray JNICALL\n+Java_sun_print_CUPSPrinter_getOutputBins(JNIEnv *env,\n+                                         jobject printObj,\n+                                         jstring printer)\n+{\n+    ppd_file_t *ppd;\n+    ppd_choice_t *choice;\n+    ppd_option_t *outputBin;\n+    const char *name;\n+    const char *filename;\n+    int i, nBins=0;\n+    jstring utf_str;\n+    jclass cls;\n+    jobjectArray nameArray = NULL;\n+\n+    name = (*env)->GetStringUTFChars(env, printer, NULL);\n+    if (name == NULL) {\n+        (*env)->ExceptionClear(env);\n+        JNU_ThrowOutOfMemoryError(env, \"Could not create printer name\");\n+        return NULL;\n+    }\n+\n+    \/\/ NOTE: cupsGetPPD returns a pointer to a filename of a temporary file.\n+    \/\/ unlink() must be caled to remove the file when finished using it.\n+    filename = j2d_cupsGetPPD(name);\n+    (*env)->ReleaseStringUTFChars(env, printer, name);\n+    CHECK_NULL_RETURN(filename, NULL);\n+\n+    cls = (*env)->FindClass(env, \"java\/lang\/String\");\n+    CHECK_NULL_RETURN(cls, NULL);\n+\n+    if ((ppd = j2d_ppdOpenFile(filename)) == NULL) {\n+        unlink(filename);\n+        DPRINTF(\"CUPSfuncs::unable to open PPD %s\\n\", filename);\n+        return NULL;\n+    }\n+\n+    outputBin = j2d_ppdFindOption(ppd, \"OutputBin\");\n+    if (outputBin != NULL) {\n+        nBins = outputBin->num_choices;\n+    }\n+\n+    if (nBins > 0) {\n+        nameArray = (*env)->NewObjectArray(env, nBins * 2, cls, NULL);\n+        if (nameArray == NULL) {\n+            unlink(filename);\n+            j2d_ppdClose(ppd);\n+            DPRINTF(\"CUPSfuncs::bad alloc new array\\n\", \"\")\n+            if (!(*env)->ExceptionCheck(env)) {\n+                JNU_ThrowOutOfMemoryError(env, \"OutOfMemoryError\");\n+            }\n+            return NULL;\n+        }\n+\n+        for (i = 0; outputBin!=NULL && i<nBins; i++) {\n+            choice = (outputBin->choices)+i;\n+            utf_str = JNU_NewStringPlatform(env, choice->text);\n+            if (utf_str == NULL) {\n+                unlink(filename);\n+                j2d_ppdClose(ppd);\n+                DPRINTF(\"CUPSfuncs::bad alloc new string text\\n\", \"\")\n+                if (!(*env)->ExceptionCheck(env)) {\n+                    JNU_ThrowOutOfMemoryError(env, \"OutOfMemoryError\");\n+                }\n+                return NULL;\n+            }\n+            (*env)->SetObjectArrayElement(env, nameArray, i*2, utf_str);\n+            (*env)->DeleteLocalRef(env, utf_str);\n+            utf_str = JNU_NewStringPlatform(env, choice->choice);\n+            if (utf_str == NULL) {\n+                unlink(filename);\n+                j2d_ppdClose(ppd);\n+                DPRINTF(\"CUPSfuncs::bad alloc new string choice\\n\", \"\")\n+                if (!(*env)->ExceptionCheck(env)) {\n+                    JNU_ThrowOutOfMemoryError(env, \"OutOfMemoryError\");\n+                }\n+                return NULL;\n+            }\n+            (*env)->SetObjectArrayElement(env, nameArray, i*2+1, utf_str);\n+            (*env)->DeleteLocalRef(env, utf_str);\n+        }\n+    }\n+\n+    j2d_ppdClose(ppd);\n+    unlink(filename);\n+    return nameArray;\n+}\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/CUPSfuncs.c","additions":90,"deletions":0,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -0,0 +1,323 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug JDK-8314070\n+ * @key printer\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @summary javax.print: Support IPP output-bin attribute extension\n+ * @run main\/manual OutputBinAttributePrintDialogTest COMMON\n+ * @run main\/manual OutputBinAttributePrintDialogTest NATIVE\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.print.PrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.DialogTypeSelection;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.print.attribute.standard.OutputBin;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Window;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class OutputBinAttributePrintDialogTest {\n+\n+    private static final long TIMEOUT = 10 * 60_000;\n+    private static volatile boolean testPassed = true;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean timeout = false;\n+\n+    private static volatile int testCount;\n+    private static volatile int testTotalCount;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"COMMON or NATIVE print dialog type argument is not provided!\");\n+        }\n+\n+        final DialogTypeSelection dialogTypeSelection = getDialogTypeSelection(args[0]);\n+\n+        if (dialogTypeSelection == DialogTypeSelection.NATIVE) {\n+            String os = System.getProperty(\"os.name\").toLowerCase();\n+            if (os.startsWith(\"linux\")) {\n+                System.out.println(\"Skip the native print dialog type test on Linux as it is the same as the common.\");\n+                return;\n+            }\n+        }\n+\n+        final OutputBin[] supportedOutputBins = getSupportedOutputBinttributes();\n+        if (supportedOutputBins.length < 2) {\n+            System.out.println(\"Skip the test as the number of supported output bins less than 2.\");\n+            return;\n+        }\n+\n+        SwingUtilities.invokeLater(() -> {\n+            testTotalCount = supportedOutputBins.length;\n+            for (OutputBin outputBin : supportedOutputBins) {\n+                testPrint(dialogTypeSelection, outputBin, supportedOutputBins);\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (System.currentTimeMillis() < time) {\n+            if (!testPassed || testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        timeout = true;\n+\n+        closeDialogs();\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+\n+        if (testCount != testTotalCount) {\n+            throw new Exception(\n+                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n+        }\n+    }\n+\n+    private static void print(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(MediaSizeName.ISO_A4);\n+        attr.add(dialogTypeSelection);\n+\n+        for (Attribute attribute : attr.toArray()) {\n+            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n+        }\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(\"Print to \" + outputBin + \" output bin through \" + dialogTypeSelection + \" print dialog\");\n+        job.setPrintable(new OutputBinAttributePrintable(outputBin));\n+\n+        if (job.printDialog(attr)) {\n+            job.print();\n+        } else {\n+            throw new RuntimeException(dialogTypeSelection + \" print dialog for \" + outputBin + \" is canceled!\");\n+        }\n+    }\n+\n+    private static class OutputBinAttributePrintable implements Printable {\n+\n+        private final OutputBin outputBinAttr;\n+\n+        public OutputBinAttributePrintable(OutputBin outputBinAttr) {\n+            this.outputBinAttr = outputBinAttr;\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+\n+            if (pageIndex != 0) {\n+                return NO_SUCH_PAGE;\n+            }\n+\n+            int x = (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() \/ 10);\n+            int y = (int) (pageFormat.getImageableY() + pageFormat.getImageableHeight() \/ 5);\n+\n+            Graphics2D g = (Graphics2D) graphics;\n+            g.setColor(Color.BLACK);\n+            g.drawString(getPageText(outputBinAttr), x, y);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    private static String getPageText(OutputBin outputBin) {\n+        return String.format(\"Output bin: %s\", outputBin);\n+    }\n+\n+    private static OutputBin[] getSupportedOutputBinttributes() {\n+\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PrintService service = printerJob.getPrintService();\n+        if (service == null) {\n+            return new OutputBin[0];\n+        }\n+\n+        Object obj = service.getSupportedAttributeValues(OutputBin.class, null, null);\n+\n+        if (obj instanceof Attribute[]) {\n+            return (OutputBin[]) obj;\n+        }\n+\n+        return new OutputBin[0];\n+    }\n+\n+    private static void pass() {\n+        testCount++;\n+    }\n+\n+    private static void fail(OutputBin outputBin) {\n+        System.out.printf(\"Failed test: %s%n\", getPageText(outputBin));\n+        testPassed = false;\n+    }\n+\n+    private static void runPrint(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) {\n+        try {\n+            print(dialogTypeSelection, outputBin);\n+        } catch (PrinterException e) {\n+            e.printStackTrace();\n+            fail(outputBin);\n+        }\n+    }\n+\n+    private static void testPrint(DialogTypeSelection dialogTypeSelection, OutputBin outputBin, OutputBin[] supportedOutputBins) {\n+\n+        System.out.printf(\"Test dialog: %s%n\", dialogTypeSelection);\n+\n+        String[] instructions = {\n+                \"Up to \" + testTotalCount + \" tests will run and it will test all output bins:\",\n+                Arrays.toString(supportedOutputBins),\n+                \"supported by the printer.\",\n+                \"\",\n+                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n+                \"\",\n+                \"On-screen inspection is not possible for this printing-specific\",\n+                \"test therefore its only output is a page printed to the printer\",\n+                outputBin + \" output bin.\",\n+                \"\",\n+                \"To be able to run this test it is required to have a default\",\n+                \"printer configured in your user environment.\",\n+                \"\",\n+                \" - Press 'Start Test' button.\",\n+                \"   The \" + dialogTypeSelection + \" print dialog should appear.\",\n+                String.join(\"\\n\", getPrintDialogInstructions(dialogTypeSelection, outputBin)),\n+                \"\",\n+                \"Visual inspection of the printed pages is needed.\",\n+                \"\",\n+                \"A passing test will print the page with the text: '\" + getPageText(outputBin) + \"'\",\n+                \"to the corresponding printer \" + outputBin + \" ouput bin.\",\n+                \"\",\n+                \"The test fails if the page is not printed in to the corresponding output bin.\",\n+        };\n+\n+        String title = String.format(\"Print %s dialog with %s output bin test: %d from %d\",\n+                dialogTypeSelection, outputBin, testCount + 1, testTotalCount);\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail(outputBin);\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            runPrint(dialogTypeSelection, outputBin);\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"Dialog closing\");\n+                fail(outputBin);\n+            }\n+        });\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+\n+    private static DialogTypeSelection getDialogTypeSelection(String dialogTypeSelection) {\n+        switch (dialogTypeSelection) {\n+            case \"COMMON\":\n+                return DialogTypeSelection.COMMON;\n+            case \"NATIVE\":\n+                return DialogTypeSelection.NATIVE;\n+            default:\n+                throw new RuntimeException(\"Unknown dialog type selection: \" + dialogTypeSelection);\n+        }\n+    }\n+\n+    private static String[] getPrintDialogInstructions(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) {\n+        if (dialogTypeSelection == DialogTypeSelection.COMMON) {\n+            return new String[]{\n+                    \" - Select 'Appearance' tab.\",\n+                    \" - Select '\" + outputBin + \"' output tray from 'Output trays' combo box.\",\n+                    \" - Pres 'Print' button.\"\n+            };\n+        } else if (dialogTypeSelection == DialogTypeSelection.NATIVE) {\n+            return new String[]{\n+                    \" - Press 'Show Details' buttons if the details are hidded.\",\n+                    \" - Select 'Finishing Options' from the drop-down list.\",\n+                    \" - Select '\" + outputBin + \"' Output Bin.\",\n+                    \" - Press 'Print' button.\"\n+            };\n+        }\n+        throw new RuntimeException(\"Unknown dialog type selection: \" + dialogTypeSelection);\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/attribute\/OutputBinAttributePrintDialogTest.java","additions":323,"deletions":0,"binary":false,"changes":323,"status":"added"},{"patch":"@@ -0,0 +1,267 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug JDK-8314070\n+ * @key printer\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @summary javax.print: Support IPP output-bin attribute extension\n+ * @run main\/manual OutputBinAttributeTest\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.print.PrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.print.attribute.standard.OutputBin;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Window;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class OutputBinAttributeTest {\n+\n+    private static final long TIMEOUT = 10 * 60_000;\n+    private static volatile boolean testPassed = true;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean timeout = false;\n+\n+    private static volatile int testCount;\n+    private static volatile int testTotalCount;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SwingUtilities.invokeLater(() -> {\n+            Set<OutputBin> supportedOutputBins = getSupportedOutputBinttributes();\n+            if (supportedOutputBins.size() > 1) {\n+                testTotalCount = supportedOutputBins.size();\n+                for(OutputBin outputBin: supportedOutputBins) {\n+                    testPrint(outputBin, supportedOutputBins);\n+                }\n+            } else {\n+                System.out.println(\"Skip the test as the number of supported output bins less than 2.\");\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (System.currentTimeMillis() < time) {\n+            if (!testPassed || testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        timeout = true;\n+\n+        closeDialogs();\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+\n+        if (testCount != testTotalCount) {\n+            throw new Exception(\n+                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n+        }\n+    }\n+\n+    private static void print(OutputBin outputBin) throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(MediaSizeName.ISO_A4);\n+        attr.add(outputBin);\n+\n+        for (Attribute attribute : attr.toArray()) {\n+            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n+        }\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(\"Print to \" + outputBin + \" output bin\");\n+        job.setPrintable(new OutputBinAttributePrintable(outputBin));\n+\n+        job.print(attr);\n+    }\n+\n+    private static class OutputBinAttributePrintable implements Printable {\n+\n+        private final OutputBin outputBinAttr;\n+\n+        public OutputBinAttributePrintable(OutputBin outputBinAttr) {\n+            this.outputBinAttr = outputBinAttr;\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+\n+            if (pageIndex != 0) {\n+                return NO_SUCH_PAGE;\n+            }\n+\n+            int x = (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() \/ 10);\n+            int y = (int) (pageFormat.getImageableY() + pageFormat.getImageableHeight() \/ 5);\n+\n+            Graphics2D g = (Graphics2D) graphics;\n+            g.setColor(Color.BLACK);\n+            g.drawString(getPageText(outputBinAttr), x, y);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    private static String getPageText(OutputBin outputBin) {\n+        return String.format(\"Output bin: %s\", outputBin);\n+    }\n+\n+    private static Set<OutputBin> getSupportedOutputBinttributes() {\n+        Set<OutputBin> supportedOutputBins = new HashSet<>();\n+\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PrintService service = printerJob.getPrintService();\n+        if (service == null) {\n+            return supportedOutputBins;\n+        }\n+\n+        Object obj = service.getSupportedAttributeValues(OutputBin.class, null, null);\n+\n+        if (obj instanceof Attribute[]) {\n+            OutputBin[] attrs = (OutputBin[]) obj;\n+            Collections.addAll(supportedOutputBins, attrs);\n+        }\n+\n+        return supportedOutputBins;\n+    }\n+\n+    private static void pass() {\n+        testCount++;\n+    }\n+\n+    private static void fail(OutputBin outputBin) {\n+        System.out.printf(\"Failed test: %s%n\", getPageText(outputBin));\n+        testPassed = false;\n+    }\n+\n+    private static void runPrint(OutputBin outputBin) {\n+        try {\n+            print(outputBin);\n+        } catch (PrinterException e) {\n+            e.printStackTrace();\n+            fail(outputBin);\n+        }\n+    }\n+\n+    private static void testPrint(OutputBin outputBin, Set<OutputBin> supportedOutputBins) {\n+\n+        String[] instructions = {\n+                \"Up to \" + testTotalCount + \" tests will run and it will test all output bins:\",\n+                supportedOutputBins.toString(),\n+                \"supported by the printer.\",\n+                \"\",\n+                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n+                \"\",\n+                \"On-screen inspection is not possible for this printing-specific\",\n+                \"test therefore its only output is a page printed to the printer\",\n+                outputBin + \" output bin.\",\n+                \"To be able to run this test it is required to have a default\",\n+                \"printer configured in your user environment.\",\n+                \"\",\n+                \"Visual inspection of the printed pages is needed.\",\n+                \"\",\n+                \"A passing test will print the page with the text: '\" + getPageText(outputBin) + \"'\",\n+                \"to the corresponding printer \" + outputBin + \" ouput bin.\",\n+                \"\",\n+                \"The test fails if the page is not printed in to the corresponding output bin.\",\n+        };\n+\n+        String title = String.format(\"Print %s output bin test: %d from %d\",\n+                outputBin, testCount + 1, testTotalCount);\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail(outputBin);\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            runPrint(outputBin);\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"Dialog closing\");\n+                fail(outputBin);\n+            }\n+        });\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/attribute\/OutputBinAttributeTest.java","additions":267,"deletions":0,"binary":false,"changes":267,"status":"added"}]}