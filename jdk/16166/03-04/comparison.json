{"files":[{"patch":"@@ -691,0 +691,31 @@\n+    private void setOutputBin(String outputBinName) {\n+\n+        OutputBin outputBin = toOutputBin(outputBinName);\n+        if (outputBin != null) {\n+            attributes.add(outputBin);\n+        }\n+    }\n+\n+    private OutputBin toOutputBin(String outputBinName) {\n+\n+        PrintService ps = getPrintService();\n+        if (ps == null) {\n+            return null;\n+        }\n+\n+        OutputBin[] supportedBins = (OutputBin[]) ps.getSupportedAttributeValues(OutputBin.class, null, null);\n+        if (supportedBins == null || supportedBins.length == 0) {\n+            return null;\n+        }\n+\n+        for (OutputBin bin : supportedBins) {\n+            if (bin instanceof CustomOutputBin customBin){\n+                if (customBin.getChoiceName().equals(outputBinName)) {\n+                    return customBin;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+    DECLARE_METHOD(jm_setOutputBin, sjc_CPrinterJob, \"setOutputBin\", \"(Ljava\/lang\/String;)V\");\n@@ -451,0 +452,7 @@\n+        }\n+\n+        NSString* outputBin = [[src printSettings] objectForKey:@\"OutputBin\"];\n+        if (outputBin != nil) {\n+            jstring outputBinName = NSStringToJavaString(env, outputBin);\n+            (*env)->CallVoidMethod(env, dstPrinterJob, jm_setOutputBin, outputBinName);\n+            CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import sun.awt.OSInfo;\n@@ -1332,0 +1333,1 @@\n+        private OutputPanel pnlOutput;\n@@ -1352,0 +1354,6 @@\n+            if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+                c.gridwidth = GridBagConstraints.REMAINDER;\n+                pnlOutput = new OutputPanel();\n+                addToGB(pnlOutput, this, gridbag, c);\n+            }\n+\n@@ -1365,0 +1373,3 @@\n+            if (pnlOutput != null) {\n+                pnlOutput.updateInfo();\n+            }\n@@ -2137,0 +2148,94 @@\n+    @SuppressWarnings(\"serial\") \/\/ Superclass is not serializable across versions\n+    private class OutputPanel extends JPanel implements ItemListener {\n+\n+        private final String strTitle = getMsg(\"border.output\");\n+        private JLabel lblOutput;\n+        private JComboBox<Object> cbOutput;\n+        private Vector<OutputBin> outputs = new Vector<>();\n+\n+        public OutputPanel() {\n+            super();\n+\n+            GridBagLayout gridbag = new GridBagLayout();\n+            GridBagConstraints c = new GridBagConstraints();\n+\n+            setLayout(gridbag);\n+            setBorder(BorderFactory.createTitledBorder(strTitle));\n+\n+            cbOutput = new JComboBox<>();\n+\n+            c.fill = GridBagConstraints.BOTH;\n+            c.insets = compInsets;\n+            c.weighty = 1.0;\n+\n+            c.weightx = 0.0;\n+            lblOutput = new JLabel(getMsg(\"label.outputbins\"), JLabel.TRAILING);\n+            lblOutput.setDisplayedMnemonic(getMnemonic(\"label.outputbins\"));\n+            lblOutput.setLabelFor(cbOutput);\n+            addToGB(lblOutput, this, gridbag, c);\n+            c.weightx = 1.0;\n+            c.gridwidth = GridBagConstraints.REMAINDER;\n+            addToGB(cbOutput, this, gridbag, c);\n+        }\n+\n+        public void itemStateChanged(ItemEvent e) {\n+\n+            Object source = e.getSource();\n+            if (e.getStateChange() == ItemEvent.SELECTED) {\n+                if (source == cbOutput) {\n+                    int index = cbOutput.getSelectedIndex();\n+                    if ((index >= 0) && (index < outputs.size())) {\n+                        asCurrent.add(outputs.get(index));\n+                    }\n+                }\n+            }\n+        }\n+\n+        public void updateInfo() {\n+\n+            Class<OutputBin> obCategory = OutputBin.class;\n+\n+            cbOutput.removeItemListener(this);\n+            cbOutput.removeAllItems();\n+\n+            outputs.clear();\n+\n+            if (psCurrent.isAttributeCategorySupported(obCategory)) {\n+\n+                Object values =\n+                    psCurrent.getSupportedAttributeValues(obCategory,\n+                                                          docFlavor,\n+                                                          asCurrent);\n+\n+                if (values instanceof OutputBin[]) {\n+                    OutputBin[] outputBins = (OutputBin[])values;\n+\n+                    for (int i = 0; i < outputBins.length; i++) {\n+                        OutputBin outputBin = outputBins[i];\n+                        outputs.add(outputBin);\n+                        cbOutput.addItem(outputBin.toString());\n+                    }\n+\n+                    OutputBin current = (OutputBin) asCurrent.get(obCategory);\n+                    if (current != null) {\n+                        for (int i = 0; i < outputs.size(); i++) {\n+                            if (i != 0 && current.equals(outputs.get(i))) {\n+                                cbOutput.setSelectedIndex(i);\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    boolean outputEnabled = cbOutput.getItemCount() != 0;\n+                    cbOutput.setEnabled(outputEnabled);\n+                    lblOutput.setEnabled(outputEnabled);\n+                }\n+            } else {\n+                cbOutput.setEnabled(false);\n+                lblOutput.setEnabled(false);\n+            }\n+\n+            cbOutput.addItemListener(this);\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/ServiceDialog.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+border.output=Output\n@@ -65,0 +66,1 @@\n+label.outputbins=&Output trays:\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/resources\/serviceui.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,307 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug JDK-8314070\n+ * @key printer\n+ * @requires (os.family == \"mac\")\n+ * @summary javax.print: Support IPP output-bin attribute extension\n+ * @run main\/manual OutputBinAttributePrintDialogTest COMMON\n+ * @run main\/manual OutputBinAttributePrintDialogTest NATIVE\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.DialogTypeSelection;\n+import javax.print.attribute.standard.MediaSizeName;\n+import javax.print.attribute.standard.OutputBin;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class OutputBinAttributePrintDialogTest {\n+\n+    private static final long TIMEOUT = 10 * 60_000;\n+    private static volatile boolean testPassed = true;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean timeout = false;\n+\n+    private static volatile int testCount;\n+    private static volatile int testTotalCount;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"COMMON or NATIVE print dialog type argument is not provided!\");\n+        }\n+\n+        final DialogTypeSelection dialogTypeSelection = getDialogTypeSelection(args[0]);\n+\n+        OutputBin[] supportedOutputBins = getSupportedOutputBinttributes();\n+        if (supportedOutputBins.length < 1) {\n+            return;\n+        }\n+\n+        \/\/ Test only the first and the last output bins to reduce number of tests\n+        final Set<OutputBin> outputBins = new HashSet<>();\n+        outputBins.add(supportedOutputBins[0]);\n+        outputBins.add(supportedOutputBins[supportedOutputBins.length - 1]);\n+\n+\n+        SwingUtilities.invokeLater(() -> {\n+            testTotalCount = outputBins.size();\n+            for (OutputBin outputBin : outputBins) {\n+                testPrint(dialogTypeSelection, outputBin, outputBins);\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (System.currentTimeMillis() < time) {\n+            if (!testPassed || testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        timeout = true;\n+\n+        closeDialogs();\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+\n+        if (testCount != testTotalCount) {\n+            throw new Exception(\n+                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n+        }\n+    }\n+\n+    private static void print(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(MediaSizeName.ISO_A4);\n+        attr.add(dialogTypeSelection);\n+\n+        for (Attribute attribute : attr.toArray()) {\n+            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n+        }\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(\"Print to \" + outputBin + \" output bin through \" + dialogTypeSelection + \" print dialog\");\n+        job.setPrintable(new OutputBinAttributePrintable(outputBin));\n+\n+        if (job.printDialog(attr)) {\n+            job.print();\n+        } else {\n+            throw new RuntimeException(dialogTypeSelection + \" print dialog for \" + outputBin + \" is canceled!\");\n+        }\n+    }\n+\n+    private static class OutputBinAttributePrintable implements Printable {\n+\n+        private final OutputBin outputBinAttr;\n+\n+        public OutputBinAttributePrintable(OutputBin outputBinAttr) {\n+            this.outputBinAttr = outputBinAttr;\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+\n+            if (pageIndex != 0) {\n+                return NO_SUCH_PAGE;\n+            }\n+\n+            int x = (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() \/ 10);\n+            int y = (int) (pageFormat.getImageableY() + pageFormat.getImageableHeight() \/ 5);\n+\n+            Graphics2D g = (Graphics2D) graphics;\n+            g.setColor(Color.BLACK);\n+            g.drawString(getPageText(outputBinAttr), x, y);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    private static String getPageText(OutputBin outputBin) {\n+        return String.format(\"Output bin: %s\", outputBin);\n+    }\n+\n+    private static OutputBin[] getSupportedOutputBinttributes() {\n+\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PrintService service = printerJob.getPrintService();\n+        if (service == null) {\n+            return new OutputBin[0];\n+        }\n+\n+        Object obj = service.getSupportedAttributeValues(OutputBin.class, null, null);\n+\n+        if (obj instanceof Attribute[]) {\n+            return (OutputBin[]) obj;\n+        }\n+\n+        return new OutputBin[0];\n+    }\n+\n+    private static void pass() {\n+        testCount++;\n+    }\n+\n+    private static void fail(OutputBin outputBin) {\n+        System.out.printf(\"Failed test: %s%n\", getPageText(outputBin));\n+        testPassed = false;\n+    }\n+\n+    private static void runPrint(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) {\n+        try {\n+            print(dialogTypeSelection, outputBin);\n+        } catch (PrinterException e) {\n+            e.printStackTrace();\n+            fail(outputBin);\n+        }\n+    }\n+\n+    private static void testPrint(DialogTypeSelection dialogTypeSelection, OutputBin outputBin, Set<OutputBin> supportedOutputBins) {\n+\n+        System.out.printf(\"Test dialog: %s%n\", dialogTypeSelection);\n+\n+        String[] instructions = {\n+                \"Up to \" + testTotalCount + \" tests will run and it will test all output bins:\",\n+                supportedOutputBins.toString(),\n+                \"supported by the printer.\",\n+                \"\",\n+                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n+                \"\",\n+                \"On-screen inspection is not possible for this printing-specific\",\n+                \"test therefore its only output is a page printed to the printer\",\n+                outputBin + \" output bin.\",\n+                \"\",\n+                \"To be able to run this test it is required to have a default\",\n+                \"printer configured in your user environment.\",\n+                \"\",\n+                \" - Press 'Start Test' button.\",\n+                \"   The \" + dialogTypeSelection + \" print dialog should appear.\",\n+                String.join(\"\\n\", getPrintDialogInstructions(dialogTypeSelection, outputBin)),\n+                \"\",\n+                \"Visual inspection of the printed pages is needed.\",\n+                \"\",\n+                \"A passing test will print the page with the text: '\" + getPageText(outputBin) + \"'\",\n+                \"to the corresponding printer \" + outputBin + \" ouput bin.\",\n+                \"\",\n+                \"The test fails if the page is not printed in to the corresponding output bin.\",\n+        };\n+\n+        String title = String.format(\"Print %s dialog with %s output bin test: %d from %d\",\n+                dialogTypeSelection, outputBin, testCount + 1, testTotalCount);\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail(outputBin);\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            runPrint(dialogTypeSelection, outputBin);\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"Dialog closing\");\n+                fail(outputBin);\n+            }\n+        });\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+\n+    private static DialogTypeSelection getDialogTypeSelection(String dialogTypeSelection) {\n+        switch (dialogTypeSelection) {\n+            case \"COMMON\":\n+                return DialogTypeSelection.COMMON;\n+            case \"NATIVE\":\n+                return DialogTypeSelection.NATIVE;\n+            default:\n+                throw new RuntimeException(\"Unknown dialog type selection: \" + dialogTypeSelection);\n+        }\n+    }\n+\n+    private static String[] getPrintDialogInstructions(DialogTypeSelection dialogTypeSelection, OutputBin outputBin) {\n+        if (dialogTypeSelection == DialogTypeSelection.COMMON) {\n+            return new String[]{\n+                    \" - Select 'Page Setup' tab.\",\n+                    \" - Select '\" + outputBin + \"' output tray from 'Output trays' combo box.\",\n+                    \" - Pres 'Print' button.\"\n+            };\n+        } else if (dialogTypeSelection == DialogTypeSelection.NATIVE) {\n+            return new String[]{\n+                    \" - Press 'Show Details' buttons if the details are hidded.\",\n+                    \" - Select 'Finishing Options' from the drop-down list.\",\n+                    \" - Select '\" + outputBin + \"' Output Bin.\",\n+                    \" - Press 'Print' button.\"\n+            };\n+        }\n+        throw new RuntimeException(\"Unknown dialog type selection: \" + dialogTypeSelection);\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/attribute\/OutputBinAttributePrintDialogTest.java","additions":307,"deletions":0,"binary":false,"changes":307,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+ * @key printer\n","filename":"test\/jdk\/javax\/print\/attribute\/OutputBinAttributeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}