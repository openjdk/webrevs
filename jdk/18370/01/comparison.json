{"files":[{"patch":"@@ -1539,8 +1539,7 @@\n-void C2_MacroAssembler::arrays_equals(Register a1, Register a2, Register tmp3,\n-                                      Register tmp4, Register tmp5, Register tmp6, Register result,\n-                                      Register cnt1, int elem_size) {\n-  Label DONE, SAME, NEXT_DWORD, SHORT, TAIL, TAIL2, IS_TMP5_ZR;\n-  Register tmp1 = t0;\n-  Register tmp2 = t1;\n-  Register cnt2 = tmp2;  \/\/ cnt2 only used in array length compare\n-  Register elem_per_word = tmp6;\n+void C2_MacroAssembler::arrays_equals(Register a1, Register a2,\n+                                      Register tmp1, Register tmp2, Register tmp3,\n+                                      Register result, int elem_size) {\n+  assert(elem_size == 1 || elem_size == 2, \"must be char or byte\");\n+  assert_different_registers(a1, a2, result, tmp1, tmp2, tmp3, t0);\n+\n+  int elem_per_word = wordSize\/elem_size;\n@@ -1551,3 +1550,3 @@\n-  assert(elem_size == 1 || elem_size == 2, \"must be char or byte\");\n-  assert_different_registers(a1, a2, result, cnt1, t0, t1, tmp3, tmp4, tmp5, tmp6);\n-  mv(elem_per_word, wordSize \/ elem_size);\n+  Register cnt1 = tmp3;\n+  Register cnt2 = tmp1;  \/\/ cnt2 only used in array length compare\n+  Label DONE, SAME, NEXT_WORD, SHORT, TAIL03, TAIL01;\n@@ -1561,0 +1560,2 @@\n+  \/\/ if (a1 == nullptr || a2 == nullptr)\n+  \/\/     return false;\n@@ -1563,0 +1564,3 @@\n+\n+  \/\/ if (a1.length != a2.length)\n+  \/\/      return false;\n@@ -1565,25 +1569,1 @@\n-  bne(cnt2, cnt1, DONE);\n-  beqz(cnt1, SAME);\n-\n-  slli(tmp5, cnt1, 3 + log_elem_size);\n-  sub(tmp5, zr, tmp5);\n-  add(a1, a1, base_offset);\n-  add(a2, a2, base_offset);\n-  ld(tmp3, Address(a1, 0));\n-  ld(tmp4, Address(a2, 0));\n-  ble(cnt1, elem_per_word, SHORT); \/\/ short or same\n-\n-  \/\/ Main 16 byte comparison loop with 2 exits\n-  bind(NEXT_DWORD); {\n-    ld(tmp1, Address(a1, wordSize));\n-    ld(tmp2, Address(a2, wordSize));\n-    sub(cnt1, cnt1, 2 * wordSize \/ elem_size);\n-    blez(cnt1, TAIL);\n-    bne(tmp3, tmp4, DONE);\n-    ld(tmp3, Address(a1, 2 * wordSize));\n-    ld(tmp4, Address(a2, 2 * wordSize));\n-    add(a1, a1, 2 * wordSize);\n-    add(a2, a2, 2 * wordSize);\n-    ble(cnt1, elem_per_word, TAIL2);\n-  } beq(tmp1, tmp2, NEXT_DWORD);\n-  j(DONE);\n+  bne(cnt1, cnt2, DONE);\n@@ -1591,6 +1571,5 @@\n-  bind(TAIL);\n-  xorr(tmp4, tmp3, tmp4);\n-  xorr(tmp2, tmp1, tmp2);\n-  sll(tmp2, tmp2, tmp5);\n-  orr(tmp5, tmp4, tmp2);\n-  j(IS_TMP5_ZR);\n+  la(a1, Address(a1, base_offset));\n+  la(a2, Address(a2, base_offset));\n+  \/\/ Check for short strings, i.e. smaller than wordSize.\n+  addi(cnt1, cnt1, -elem_per_word);\n+  bltz(cnt1, SHORT);\n@@ -1598,2 +1577,12 @@\n-  bind(TAIL2);\n-  bne(tmp1, tmp2, DONE);\n+  \/\/ Main 8 byte comparison loop.\n+  bind(NEXT_WORD); {\n+    ld(tmp1, Address(a1));\n+    ld(tmp2, Address(a2));\n+    addi(cnt1, cnt1, -elem_per_word);\n+    addi(a1, a1, wordSize);\n+    addi(a2, a2, wordSize);\n+    bne(tmp1, tmp2, DONE);\n+  } bgez(cnt1, NEXT_WORD);\n+\n+  addi(tmp1, cnt1, elem_per_word);\n+  beqz(tmp1, SAME);\n@@ -1602,2 +1591,9 @@\n-  xorr(tmp4, tmp3, tmp4);\n-  sll(tmp5, tmp4, tmp5);\n+  test_bit(tmp1, cnt1, 2 - log_elem_size);\n+  beqz(tmp1, TAIL03); \/\/ 0-7 bytes left.\n+  {\n+    lwu(tmp1, Address(a1));\n+    lwu(tmp2, Address(a2));\n+    addi(a1, a1, 4);\n+    addi(a2, a2, 4);\n+    bne(tmp1, tmp2, DONE);\n+  }\n@@ -1605,2 +1601,21 @@\n-  bind(IS_TMP5_ZR);\n-  bnez(tmp5, DONE);\n+  bind(TAIL03);\n+  test_bit(tmp1, cnt1, 1 - log_elem_size);\n+  beqz(tmp1, TAIL01); \/\/ 0-3 bytes left.\n+  {\n+    lhu(tmp1, Address(a1));\n+    lhu(tmp2, Address(a2));\n+    addi(a1, a1, 2);\n+    addi(a2, a2, 2);\n+    bne(tmp1, tmp2, DONE);\n+  }\n+\n+  bind(TAIL01);\n+  if (elem_size == 1) { \/\/ Only needed when comparing byte arrays.\n+    test_bit(tmp1, cnt1, 0);\n+    beqz(tmp1, SAME); \/\/ 0-1 bytes left.\n+    {\n+      lbu(tmp1, Address(a1));\n+      lbu(tmp2, Address(a2));\n+      bne(tmp1, tmp2, DONE);\n+    }\n+  }\n@@ -1613,1 +1628,1 @@\n-  BLOCK_COMMENT(\"} array_equals\");\n+  BLOCK_COMMENT(\"} arrays_equals\");\n@@ -1618,8 +1633,5 @@\n-\/\/ For Strings we're passed the address of the first characters in a1\n-\/\/ and a2 and the length in cnt1.\n-\/\/ There are two implementations.  For arrays >= 8 bytes, all\n-\/\/ comparisons (for hw supporting unaligned access: including the final one,\n-\/\/ which may overlap) are performed 8 bytes at a time.\n-\/\/ For strings < 8 bytes (and for tails of long strings when\n-\/\/ AvoidUnalignedAccesses is true), we compare a\n-\/\/ halfword, then a short, and then a byte.\n+\/\/ For Strings we're passed the address of the first characters in a1 and a2\n+\/\/ and the length in cnt1. There are two implementations.\n+\/\/ For arrays >= 8 bytes, all comparisons (except for the tail) are performed\n+\/\/ 8 bytes at a time. For the tail, we compare a halfword, then a short, and then a byte.\n+\/\/ For strings < 8 bytes, we compare a halfword, then a short, and then a byte.\n@@ -1638,1 +1650,0 @@\n-  beqz(cnt1, SAME);\n@@ -1642,1 +1653,1 @@\n-  sub(cnt1, cnt1, wordSize);\n+  addi(cnt1, cnt1, -wordSize);\n@@ -1647,5 +1658,5 @@\n-    ld(tmp1, Address(a1, 0));\n-    add(a1, a1, wordSize);\n-    ld(tmp2, Address(a2, 0));\n-    add(a2, a2, wordSize);\n-    sub(cnt1, cnt1, wordSize);\n+    ld(tmp1, Address(a1));\n+    ld(tmp2, Address(a2));\n+    addi(cnt1, cnt1, -wordSize);\n+    addi(a1, a1, wordSize);\n+    addi(a2, a2, wordSize);\n@@ -1655,16 +1666,2 @@\n-  if (!AvoidUnalignedAccesses) {\n-    \/\/ Last longword.  In the case where length == 4 we compare the\n-    \/\/ same longword twice, but that's still faster than another\n-    \/\/ conditional branch.\n-    \/\/ cnt1 could be 0, -1, -2, -3, -4 for chars; -4 only happens when\n-    \/\/ length == 4.\n-    add(tmp1, a1, cnt1);\n-    ld(tmp1, Address(tmp1, 0));\n-    add(tmp2, a2, cnt1);\n-    ld(tmp2, Address(tmp2, 0));\n-    bne(tmp1, tmp2, DONE);\n-    j(SAME);\n-  } else {\n-    add(tmp1, cnt1, wordSize);\n-    beqz(tmp1, SAME);\n-  }\n+  addi(tmp1, cnt1, wordSize);\n+  beqz(tmp1, SAME);\n@@ -1679,4 +1676,4 @@\n-    lwu(tmp1, Address(a1, 0));\n-    add(a1, a1, 4);\n-    lwu(tmp2, Address(a2, 0));\n-    add(a2, a2, 4);\n+    lwu(tmp1, Address(a1));\n+    lwu(tmp2, Address(a2));\n+    addi(a1, a1, 4);\n+    addi(a2, a2, 4);\n@@ -1691,4 +1688,4 @@\n-    lhu(tmp1, Address(a1, 0));\n-    add(a1, a1, 2);\n-    lhu(tmp2, Address(a2, 0));\n-    add(a2, a2, 2);\n+    lhu(tmp1, Address(a1));\n+    lhu(tmp2, Address(a2));\n+    addi(a1, a1, 2);\n+    addi(a2, a2, 2);\n@@ -1703,2 +1700,2 @@\n-    lbu(tmp1, Address(a1, 0));\n-    lbu(tmp2, Address(a2, 0));\n+    lbu(tmp1, Address(a1));\n+    lbu(tmp2, Address(a2));\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":87,"deletions":90,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -82,4 +82,2 @@\n-                     Register tmp3, Register tmp4,\n-                     Register tmp5, Register tmp6,\n-                     Register result, Register cnt1,\n-                     int elem_size);\n+                     Register tmp1, Register tmp2, Register tmp3,\n+                     Register result, int elem_size);\n@@ -92,0 +90,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3289,11 +3289,0 @@\n-operand iRegP_R16()\n-%{\n-  constraint(ALLOC_IN_RC(r16_reg));\n-  match(RegP);\n-  \/\/ match(iRegP);\n-  match(iRegPNoSp);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -10339,2 +10328,1 @@\n-                       iRegP_R13 tmp1, iRegP_R14 tmp2, iRegP_R15 tmp3,\n-                       iRegP_R16 tmp4, iRegP_R28 tmp5, rFlagsReg cr)\n+                       iRegP_R13 tmp1, iRegP_R14 tmp2, iRegP_R15 tmp3)\n@@ -10344,1 +10332,1 @@\n-  effect(USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp5, KILL cr);\n+  effect(USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -10346,1 +10334,1 @@\n-  format %{ \"Array Equals $ary1, ary2 -> $result\\t#@array_equalsB \/\/ KILL $tmp5\" %}\n+  format %{ \"Array Equals $ary1, $ary2 -> $result\\t#@array_equalsB \/\/ KILL all\" %}\n@@ -10349,2 +10337,2 @@\n-                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n-                     $result$$Register, $tmp5$$Register, 1);\n+                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                     $result$$Register, 1);\n@@ -10356,2 +10344,1 @@\n-                       iRegP_R13 tmp1, iRegP_R14 tmp2, iRegP_R15 tmp3,\n-                       iRegP_R16 tmp4, iRegP_R28 tmp5, rFlagsReg cr)\n+                       iRegP_R13 tmp1, iRegP_R14 tmp2, iRegP_R15 tmp3)\n@@ -10361,1 +10348,1 @@\n-  effect(USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp5, KILL cr);\n+  effect(USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -10363,1 +10350,1 @@\n-  format %{ \"Array Equals $ary1, ary2 -> $result\\t#@array_equalsC \/\/ KILL $tmp5\" %}\n+  format %{ \"Array Equals $ary1, $ary2 -> $result\\t#@array_equalsC \/\/ KILL all\" %}\n@@ -10366,2 +10353,2 @@\n-                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register, $tmp4$$Register,\n-                     $result$$Register, $tmp5$$Register, 2);\n+                     $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                     $result$$Register, 2);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"}]}