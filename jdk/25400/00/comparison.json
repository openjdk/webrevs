{"files":[{"patch":"@@ -56,0 +56,1 @@\n+import java.util.stream.IntStream;\n@@ -129,2 +130,2 @@\n-    public PackageTest setExpectedInstallExitCode(int v) {\n-        expectedInstallExitCode = v;\n+    public PackageTest setExpectedInstallExitCode(int... v) {\n+        expectedInstallExitCodes = IntStream.of(v).mapToObj(Integer::valueOf).collect(Collectors.toSet());\n@@ -486,1 +487,1 @@\n-            int expectedInstallExitCode, PackageHandlers packageHandlers, Handler handler,\n+            Set<Integer> expectedInstallExitCodes, PackageHandlers packageHandlers, Handler handler,\n@@ -491,0 +492,4 @@\n+            Objects.requireNonNull(expectedInstallExitCodes);\n+            if (expectedInstallExitCodes.isEmpty()) {\n+                throw new IllegalArgumentException();\n+            }\n@@ -498,1 +503,1 @@\n-                int expectedInstallExitCode, PackageHandlers packageHandlers,\n+                Set<Integer> expectedInstallExitCodes, PackageHandlers packageHandlers,\n@@ -500,1 +505,1 @@\n-            this(type, expectedJPackageExitCode, expectedInstallExitCode,\n+            this(type, expectedJPackageExitCode, expectedInstallExitCodes,\n@@ -535,3 +540,4 @@\n-                    final int installExitCode = packageHandlers.install(cmd);\n-                    TKit.assertEquals(expectedInstallExitCode, installExitCode,\n-                            String.format(\"Check installer exited with %d code\", expectedInstallExitCode));\n+                    final int actualInstallExitCode = packageHandlers.install(cmd);\n+                    state.actualInstallExitCode = Optional.of(actualInstallExitCode);\n+                    TKit.assertTrue(expectedInstallExitCodes.contains(actualInstallExitCode),\n+                            String.format(\"Check installer exit code %d is one of %s\", actualInstallExitCode, expectedInstallExitCodes));\n@@ -627,1 +633,1 @@\n-            return processed(Action.INSTALL) && expectedInstallExitCode != 0;\n+            return processed(Action.INSTALL) && state.actualInstallExitCode.orElseThrow() != 0;\n@@ -639,0 +645,1 @@\n+            private Optional<Integer> actualInstallExitCode = Optional.empty();\n@@ -652,1 +659,1 @@\n-                expectedInstallExitCode, getPackageHandlers(type), handler.copy(), cmd);\n+                expectedInstallExitCodes, getPackageHandlers(type), handler.copy(), cmd);\n@@ -932,1 +939,1 @@\n-    private int expectedInstallExitCode;\n+    private Set<Integer> expectedInstallExitCodes;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -65,0 +65,11 @@\n+            \/\/ Installation could have ended up with 1603 or 1625 error codes.\n+            \/\/ MSI error code 1625 indicates the test is being executed in an environment\n+            \/\/ that doesn't allow per-user installations. This means the test should be skipped.\n+            try (final var lines = cmd.winMsiLogFileContents().orElseThrow()) {\n+                if (lines.anyMatch(line -> {\n+                    return line.endsWith(\"Installation success or error status: 1625.\");\n+                })) {\n+                    TKit.throwSkippedException(\"Installation of per-user packages by the current user is forbidden by system policy\");\n+                }\n+            }\n+\n@@ -75,1 +86,1 @@\n-        .setExpectedInstallExitCode(1603)\n+        .setExpectedInstallExitCode(1603, 1625)\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinOSConditionTest.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}