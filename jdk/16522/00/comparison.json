{"files":[{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1EVACFAILURE_HPP\n-#define SHARE_GC_G1_G1EVACFAILURE_HPP\n-\n-#include \"gc\/shared\/workerThread.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/bitMap.hpp\"\n-\n-class G1CollectedHeap;\n-class G1ConcurrentMark;\n-class G1EvacFailureRegions;\n-\n-\/\/ Task to fixup self-forwarding pointers within the objects installed as a result\n-\/\/ of an evacuation failure.\n-class G1RemoveSelfForwardsTask : public WorkerTask {\n-  G1CollectedHeap* _g1h;\n-  G1ConcurrentMark* _cm;\n-\n-  G1EvacFailureRegions* _evac_failure_regions;\n-  CHeapBitMap _chunk_bitmap;\n-\n-  uint _num_chunks_per_region;\n-  uint _num_evac_fail_regions;\n-  size_t _chunk_size;\n-\n-  bool claim_chunk(uint chunk_idx) {\n-    return _chunk_bitmap.par_set_bit(chunk_idx);\n-  }\n-\n-  void process_chunk(uint worker_id, uint chunk_idx);\n-\n-public:\n-  explicit G1RemoveSelfForwardsTask(G1EvacFailureRegions* evac_failure_regions);\n-\n-  void work(uint worker_id);\n-};\n-\n-#endif \/\/ SHARE_GC_G1_G1EVACFAILURE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.hpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1EvacFailure.hpp\"\n+#include \"gc\/g1\/g1RemoveSelfForwardsTask.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemoveSelfForwardsTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","status":"renamed"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1REMOVESELFFORWARDSTASK_HPP\n+#define SHARE_GC_G1_G1REMOVESELFFORWARDSTASK_HPP\n+\n+#include \"gc\/shared\/workerThread.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/bitMap.hpp\"\n+\n+class G1CollectedHeap;\n+class G1ConcurrentMark;\n+class G1EvacFailureRegions;\n+\n+\/\/ Task to fixup self-forwarding pointers within the objects installed as a result\n+\/\/ of an evacuation failure.\n+class G1RemoveSelfForwardsTask : public WorkerTask {\n+  G1CollectedHeap* _g1h;\n+  G1ConcurrentMark* _cm;\n+\n+  G1EvacFailureRegions* _evac_failure_regions;\n+  CHeapBitMap _chunk_bitmap;\n+\n+  uint _num_chunks_per_region;\n+  uint _num_evac_fail_regions;\n+  size_t _chunk_size;\n+\n+  bool claim_chunk(uint chunk_idx) {\n+    return _chunk_bitmap.par_set_bit(chunk_idx);\n+  }\n+\n+  void process_chunk(uint worker_id, uint chunk_idx);\n+\n+public:\n+  explicit G1RemoveSelfForwardsTask(G1EvacFailureRegions* evac_failure_regions);\n+\n+  void work(uint worker_id);\n+};\n+\n+#endif \/\/ SHARE_GC_G1_G1REMOVESELFFORWARDSTASK_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemoveSelfForwardsTask.hpp","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1EvacFailure.hpp\"\n+#include \"gc\/g1\/g1RemoveSelfForwardsTask.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}