{"files":[{"patch":"@@ -3965,1 +3965,1 @@\n-                semiList.append(toP(F.at(token.pos).Skip()));\n+                int pos = token.pos;\n@@ -3967,0 +3967,1 @@\n+                semiList.append(toP(F.at(pos).Skip()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8324736\n+ * @summary Verify starting and ending source positions are not backwards\n+ * @modules jdk.compiler\/com.sun.tools.javac.tree\n+ * @run main ReversedSourcePositions\n+ *\/\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreeScanner;\n+import com.sun.tools.javac.tree.JCTree;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+public class ReversedSourcePositions {\n+\n+    public static void main(String... args) throws Exception {\n+\n+        \/\/ Create test case source\n+        var source = new SimpleJavaFileObject(URI.create(\"file:\/\/T.java\"), JavaFileObject.Kind.SOURCE) {\n+            @Override\n+            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n+                return \"\"\"\n+                    package errorpronecrash;\n+                    ;\n+                    public class ReproFile {}\n+                \"\"\";\n+            }\n+        };\n+\n+        \/\/ Parse source\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, null, null, List.of(), List.of(), List.of(source));\n+        Iterable<? extends CompilationUnitTree> units = ((JavacTask)task).parse();\n+\n+        \/\/ Look for reversed source positions\n+        JCTree.JCCompilationUnit unit = (JCTree.JCCompilationUnit)units.iterator().next();\n+        unit.accept(new TreeScanner<Void, Void>() {\n+            @Override\n+            public Void scan(Tree node, Void aVoid) {\n+                if (node instanceof JCTree tree) {\n+                    int start = tree.getStartPosition();\n+                    int end = tree.getEndPosition(unit.endPositions);\n+                    if (start >= end) {\n+                        throw new AssertionError(\n+                          String.format(\"[%d, %d] %s %s\\n\", start, end, tree.getKind(), tree));\n+                    }\n+                }\n+                return super.scan(node, aVoid);\n+            }\n+        }, null);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/parser\/ReversedSourcePositions.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}