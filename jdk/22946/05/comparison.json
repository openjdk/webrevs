{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-\t    -exclude 'jdk.internal.org.objectweb.**' \\\n","filename":"make\/Coverage.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1342 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package jdk.internal.org.objectweb.asm.util;\n-\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.List;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n-\n-\/**\n- * An abstract converter from visit events to text.\n- *\n- * @author Eric Bruneton\n- *\/\n-public abstract class Printer {\n-\n-    \/** The names of the Java Virtual Machine opcodes. *\/\n-    public static final String[] OPCODES = {\n-        \"NOP\", \/\/ 0 (0x0)\n-        \"ACONST_NULL\", \/\/ 1 (0x1)\n-        \"ICONST_M1\", \/\/ 2 (0x2)\n-        \"ICONST_0\", \/\/ 3 (0x3)\n-        \"ICONST_1\", \/\/ 4 (0x4)\n-        \"ICONST_2\", \/\/ 5 (0x5)\n-        \"ICONST_3\", \/\/ 6 (0x6)\n-        \"ICONST_4\", \/\/ 7 (0x7)\n-        \"ICONST_5\", \/\/ 8 (0x8)\n-        \"LCONST_0\", \/\/ 9 (0x9)\n-        \"LCONST_1\", \/\/ 10 (0xa)\n-        \"FCONST_0\", \/\/ 11 (0xb)\n-        \"FCONST_1\", \/\/ 12 (0xc)\n-        \"FCONST_2\", \/\/ 13 (0xd)\n-        \"DCONST_0\", \/\/ 14 (0xe)\n-        \"DCONST_1\", \/\/ 15 (0xf)\n-        \"BIPUSH\", \/\/ 16 (0x10)\n-        \"SIPUSH\", \/\/ 17 (0x11)\n-        \"LDC\", \/\/ 18 (0x12)\n-        \"LDC_W\", \/\/ 19 (0x13)\n-        \"LDC2_W\", \/\/ 20 (0x14)\n-        \"ILOAD\", \/\/ 21 (0x15)\n-        \"LLOAD\", \/\/ 22 (0x16)\n-        \"FLOAD\", \/\/ 23 (0x17)\n-        \"DLOAD\", \/\/ 24 (0x18)\n-        \"ALOAD\", \/\/ 25 (0x19)\n-        \"ILOAD_0\", \/\/ 26 (0x1a)\n-        \"ILOAD_1\", \/\/ 27 (0x1b)\n-        \"ILOAD_2\", \/\/ 28 (0x1c)\n-        \"ILOAD_3\", \/\/ 29 (0x1d)\n-        \"LLOAD_0\", \/\/ 30 (0x1e)\n-        \"LLOAD_1\", \/\/ 31 (0x1f)\n-        \"LLOAD_2\", \/\/ 32 (0x20)\n-        \"LLOAD_3\", \/\/ 33 (0x21)\n-        \"FLOAD_0\", \/\/ 34 (0x22)\n-        \"FLOAD_1\", \/\/ 35 (0x23)\n-        \"FLOAD_2\", \/\/ 36 (0x24)\n-        \"FLOAD_3\", \/\/ 37 (0x25)\n-        \"DLOAD_0\", \/\/ 38 (0x26)\n-        \"DLOAD_1\", \/\/ 39 (0x27)\n-        \"DLOAD_2\", \/\/ 40 (0x28)\n-        \"DLOAD_3\", \/\/ 41 (0x29)\n-        \"ALOAD_0\", \/\/ 42 (0x2a)\n-        \"ALOAD_1\", \/\/ 43 (0x2b)\n-        \"ALOAD_2\", \/\/ 44 (0x2c)\n-        \"ALOAD_3\", \/\/ 45 (0x2d)\n-        \"IALOAD\", \/\/ 46 (0x2e)\n-        \"LALOAD\", \/\/ 47 (0x2f)\n-        \"FALOAD\", \/\/ 48 (0x30)\n-        \"DALOAD\", \/\/ 49 (0x31)\n-        \"AALOAD\", \/\/ 50 (0x32)\n-        \"BALOAD\", \/\/ 51 (0x33)\n-        \"CALOAD\", \/\/ 52 (0x34)\n-        \"SALOAD\", \/\/ 53 (0x35)\n-        \"ISTORE\", \/\/ 54 (0x36)\n-        \"LSTORE\", \/\/ 55 (0x37)\n-        \"FSTORE\", \/\/ 56 (0x38)\n-        \"DSTORE\", \/\/ 57 (0x39)\n-        \"ASTORE\", \/\/ 58 (0x3a)\n-        \"ISTORE_0\", \/\/ 59 (0x3b)\n-        \"ISTORE_1\", \/\/ 60 (0x3c)\n-        \"ISTORE_2\", \/\/ 61 (0x3d)\n-        \"ISTORE_3\", \/\/ 62 (0x3e)\n-        \"LSTORE_0\", \/\/ 63 (0x3f)\n-        \"LSTORE_1\", \/\/ 64 (0x40)\n-        \"LSTORE_2\", \/\/ 65 (0x41)\n-        \"LSTORE_3\", \/\/ 66 (0x42)\n-        \"FSTORE_0\", \/\/ 67 (0x43)\n-        \"FSTORE_1\", \/\/ 68 (0x44)\n-        \"FSTORE_2\", \/\/ 69 (0x45)\n-        \"FSTORE_3\", \/\/ 70 (0x46)\n-        \"DSTORE_0\", \/\/ 71 (0x47)\n-        \"DSTORE_1\", \/\/ 72 (0x48)\n-        \"DSTORE_2\", \/\/ 73 (0x49)\n-        \"DSTORE_3\", \/\/ 74 (0x4a)\n-        \"ASTORE_0\", \/\/ 75 (0x4b)\n-        \"ASTORE_1\", \/\/ 76 (0x4c)\n-        \"ASTORE_2\", \/\/ 77 (0x4d)\n-        \"ASTORE_3\", \/\/ 78 (0x4e)\n-        \"IASTORE\", \/\/ 79 (0x4f)\n-        \"LASTORE\", \/\/ 80 (0x50)\n-        \"FASTORE\", \/\/ 81 (0x51)\n-        \"DASTORE\", \/\/ 82 (0x52)\n-        \"AASTORE\", \/\/ 83 (0x53)\n-        \"BASTORE\", \/\/ 84 (0x54)\n-        \"CASTORE\", \/\/ 85 (0x55)\n-        \"SASTORE\", \/\/ 86 (0x56)\n-        \"POP\", \/\/ 87 (0x57)\n-        \"POP2\", \/\/ 88 (0x58)\n-        \"DUP\", \/\/ 89 (0x59)\n-        \"DUP_X1\", \/\/ 90 (0x5a)\n-        \"DUP_X2\", \/\/ 91 (0x5b)\n-        \"DUP2\", \/\/ 92 (0x5c)\n-        \"DUP2_X1\", \/\/ 93 (0x5d)\n-        \"DUP2_X2\", \/\/ 94 (0x5e)\n-        \"SWAP\", \/\/ 95 (0x5f)\n-        \"IADD\", \/\/ 96 (0x60)\n-        \"LADD\", \/\/ 97 (0x61)\n-        \"FADD\", \/\/ 98 (0x62)\n-        \"DADD\", \/\/ 99 (0x63)\n-        \"ISUB\", \/\/ 100 (0x64)\n-        \"LSUB\", \/\/ 101 (0x65)\n-        \"FSUB\", \/\/ 102 (0x66)\n-        \"DSUB\", \/\/ 103 (0x67)\n-        \"IMUL\", \/\/ 104 (0x68)\n-        \"LMUL\", \/\/ 105 (0x69)\n-        \"FMUL\", \/\/ 106 (0x6a)\n-        \"DMUL\", \/\/ 107 (0x6b)\n-        \"IDIV\", \/\/ 108 (0x6c)\n-        \"LDIV\", \/\/ 109 (0x6d)\n-        \"FDIV\", \/\/ 110 (0x6e)\n-        \"DDIV\", \/\/ 111 (0x6f)\n-        \"IREM\", \/\/ 112 (0x70)\n-        \"LREM\", \/\/ 113 (0x71)\n-        \"FREM\", \/\/ 114 (0x72)\n-        \"DREM\", \/\/ 115 (0x73)\n-        \"INEG\", \/\/ 116 (0x74)\n-        \"LNEG\", \/\/ 117 (0x75)\n-        \"FNEG\", \/\/ 118 (0x76)\n-        \"DNEG\", \/\/ 119 (0x77)\n-        \"ISHL\", \/\/ 120 (0x78)\n-        \"LSHL\", \/\/ 121 (0x79)\n-        \"ISHR\", \/\/ 122 (0x7a)\n-        \"LSHR\", \/\/ 123 (0x7b)\n-        \"IUSHR\", \/\/ 124 (0x7c)\n-        \"LUSHR\", \/\/ 125 (0x7d)\n-        \"IAND\", \/\/ 126 (0x7e)\n-        \"LAND\", \/\/ 127 (0x7f)\n-        \"IOR\", \/\/ 128 (0x80)\n-        \"LOR\", \/\/ 129 (0x81)\n-        \"IXOR\", \/\/ 130 (0x82)\n-        \"LXOR\", \/\/ 131 (0x83)\n-        \"IINC\", \/\/ 132 (0x84)\n-        \"I2L\", \/\/ 133 (0x85)\n-        \"I2F\", \/\/ 134 (0x86)\n-        \"I2D\", \/\/ 135 (0x87)\n-        \"L2I\", \/\/ 136 (0x88)\n-        \"L2F\", \/\/ 137 (0x89)\n-        \"L2D\", \/\/ 138 (0x8a)\n-        \"F2I\", \/\/ 139 (0x8b)\n-        \"F2L\", \/\/ 140 (0x8c)\n-        \"F2D\", \/\/ 141 (0x8d)\n-        \"D2I\", \/\/ 142 (0x8e)\n-        \"D2L\", \/\/ 143 (0x8f)\n-        \"D2F\", \/\/ 144 (0x90)\n-        \"I2B\", \/\/ 145 (0x91)\n-        \"I2C\", \/\/ 146 (0x92)\n-        \"I2S\", \/\/ 147 (0x93)\n-        \"LCMP\", \/\/ 148 (0x94)\n-        \"FCMPL\", \/\/ 149 (0x95)\n-        \"FCMPG\", \/\/ 150 (0x96)\n-        \"DCMPL\", \/\/ 151 (0x97)\n-        \"DCMPG\", \/\/ 152 (0x98)\n-        \"IFEQ\", \/\/ 153 (0x99)\n-        \"IFNE\", \/\/ 154 (0x9a)\n-        \"IFLT\", \/\/ 155 (0x9b)\n-        \"IFGE\", \/\/ 156 (0x9c)\n-        \"IFGT\", \/\/ 157 (0x9d)\n-        \"IFLE\", \/\/ 158 (0x9e)\n-        \"IF_ICMPEQ\", \/\/ 159 (0x9f)\n-        \"IF_ICMPNE\", \/\/ 160 (0xa0)\n-        \"IF_ICMPLT\", \/\/ 161 (0xa1)\n-        \"IF_ICMPGE\", \/\/ 162 (0xa2)\n-        \"IF_ICMPGT\", \/\/ 163 (0xa3)\n-        \"IF_ICMPLE\", \/\/ 164 (0xa4)\n-        \"IF_ACMPEQ\", \/\/ 165 (0xa5)\n-        \"IF_ACMPNE\", \/\/ 166 (0xa6)\n-        \"GOTO\", \/\/ 167 (0xa7)\n-        \"JSR\", \/\/ 168 (0xa8)\n-        \"RET\", \/\/ 169 (0xa9)\n-        \"TABLESWITCH\", \/\/ 170 (0xaa)\n-        \"LOOKUPSWITCH\", \/\/ 171 (0xab)\n-        \"IRETURN\", \/\/ 172 (0xac)\n-        \"LRETURN\", \/\/ 173 (0xad)\n-        \"FRETURN\", \/\/ 174 (0xae)\n-        \"DRETURN\", \/\/ 175 (0xaf)\n-        \"ARETURN\", \/\/ 176 (0xb0)\n-        \"RETURN\", \/\/ 177 (0xb1)\n-        \"GETSTATIC\", \/\/ 178 (0xb2)\n-        \"PUTSTATIC\", \/\/ 179 (0xb3)\n-        \"GETFIELD\", \/\/ 180 (0xb4)\n-        \"PUTFIELD\", \/\/ 181 (0xb5)\n-        \"INVOKEVIRTUAL\", \/\/ 182 (0xb6)\n-        \"INVOKESPECIAL\", \/\/ 183 (0xb7)\n-        \"INVOKESTATIC\", \/\/ 184 (0xb8)\n-        \"INVOKEINTERFACE\", \/\/ 185 (0xb9)\n-        \"INVOKEDYNAMIC\", \/\/ 186 (0xba)\n-        \"NEW\", \/\/ 187 (0xbb)\n-        \"NEWARRAY\", \/\/ 188 (0xbc)\n-        \"ANEWARRAY\", \/\/ 189 (0xbd)\n-        \"ARRAYLENGTH\", \/\/ 190 (0xbe)\n-        \"ATHROW\", \/\/ 191 (0xbf)\n-        \"CHECKCAST\", \/\/ 192 (0xc0)\n-        \"INSTANCEOF\", \/\/ 193 (0xc1)\n-        \"MONITORENTER\", \/\/ 194 (0xc2)\n-        \"MONITOREXIT\", \/\/ 195 (0xc3)\n-        \"WIDE\", \/\/ 196 (0xc4)\n-        \"MULTIANEWARRAY\", \/\/ 197 (0xc5)\n-        \"IFNULL\", \/\/ 198 (0xc6)\n-        \"IFNONNULL\" \/\/ 199 (0xc7)\n-    };\n-\n-    \/**\n-      * The names of the {@code operand} values of the {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitIntInsn} method when {@code opcode} is {@code NEWARRAY}.\n-      *\/\n-    public static final String[] TYPES = {\n-        \"\",\n-        \"\",\n-        \"\",\n-        \"\",\n-        \"T_BOOLEAN\",\n-        \"T_CHAR\",\n-        \"T_FLOAT\",\n-        \"T_DOUBLE\",\n-        \"T_BYTE\",\n-        \"T_SHORT\",\n-        \"T_INT\",\n-        \"T_LONG\"\n-    };\n-\n-    \/** The names of the {@code tag} field values for {@link jdk.internal.org.objectweb.asm.Handle}. *\/\n-    public static final String[] HANDLE_TAG = {\n-        \"\",\n-        \"H_GETFIELD\",\n-        \"H_GETSTATIC\",\n-        \"H_PUTFIELD\",\n-        \"H_PUTSTATIC\",\n-        \"H_INVOKEVIRTUAL\",\n-        \"H_INVOKESTATIC\",\n-        \"H_INVOKESPECIAL\",\n-        \"H_NEWINVOKESPECIAL\",\n-        \"H_INVOKEINTERFACE\"\n-    };\n-\n-    \/** Message of the UnsupportedOperationException thrown by methods which must be overridden. *\/\n-    private static final String UNSUPPORTED_OPERATION = \"Must be overridden\";\n-\n-    \/**\n-      * The ASM API version implemented by this class. The value of this field must be one of the\n-      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n-      *\/\n-    protected final int api;\n-\n-    \/** The builder used to build strings in the various visit methods. *\/\n-    protected final StringBuilder stringBuilder;\n-\n-    \/**\n-      * The text to be printed. Since the code of methods is not necessarily visited in sequential\n-      * order, one method after the other, but can be interlaced (some instructions from method one,\n-      * then some instructions from method two, then some instructions from method one again...), it is\n-      * not possible to print the visited instructions directly to a sequential stream. A class is\n-      * therefore printed in a two steps process: a string tree is constructed during the visit, and\n-      * printed to a sequential stream at the end of the visit. This string tree is stored in this\n-      * field, as a string list that can contain other string lists, which can themselves contain other\n-      * string lists, and so on.\n-      *\/\n-    public final List<Object> text;\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Constructor\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Constructs a new {@link Printer}.\n-      *\n-      * @param api the ASM API version implemented by this printer. Must be one of the {@code\n-      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n-      *\/\n-    protected Printer(final int api) {\n-        this.api = api;\n-        this.stringBuilder = new StringBuilder();\n-        this.text = new ArrayList<>();\n-    }\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Classes\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Class header. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visit}.\n-      *\n-      * @param version the class version. The minor version is stored in the 16 most significant bits,\n-      *     and the major version in the 16 least significant bits.\n-      * @param access the class's access flags (see {@link Opcodes}). This parameter also indicates if\n-      *     the class is deprecated.\n-      * @param name the internal name of the class (see {@link Type#getInternalName()}).\n-      * @param signature the signature of this class. May be {@literal null} if the class is not a\n-      *     generic one, and does not extend or implement generic classes or interfaces.\n-      * @param superName the internal of name of the super class (see {@link Type#getInternalName()}).\n-      *     For interfaces, the super class is {@link Object}. May be {@literal null}, but only for the\n-      *     {@link Object} class.\n-      * @param interfaces the internal names of the class's interfaces (see {@link\n-      *     Type#getInternalName()}). May be {@literal null}.\n-      *\/\n-    public abstract void visit(\n-            int version,\n-            int access,\n-            String name,\n-            String signature,\n-            String superName,\n-            String[] interfaces);\n-\n-    \/**\n-      * Class source. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitSource}.\n-      *\n-      * @param source the name of the source file from which the class was compiled. May be {@literal\n-      *     null}.\n-      * @param debug additional debug information to compute the correspondence between source and\n-      *     compiled elements of the class. May be {@literal null}.\n-      *\/\n-    public abstract void visitSource(String source, String debug);\n-\n-    \/**\n-      * Module. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitModule}.\n-      *\n-      * @param name the fully qualified name (using dots) of the module.\n-      * @param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\n-      *     ACC_MANDATED}.\n-      * @param version the module version, or {@literal null}.\n-      * @return the printer.\n-      *\/\n-    public Printer visitModule(final String name, final int access, final String version) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Visits the nest host class of the class. A nest is a set of classes of the same package that\n-      * share access to their private members. One of these classes, called the host, lists the other\n-      * members of the nest, which in turn should link to the host of their nest. This method must be\n-      * called only once and only if the visited class is a non-host member of a nest. A class is\n-      * implicitly its own nest, so it's invalid to call this method with the visited class name as\n-      * argument.\n-      *\n-      * @param nestHost the internal name of the host class of the nest (see {@link\n-      *     Type#getInternalName()}).\n-      *\/\n-    public void visitNestHost(final String nestHost) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Class outer class. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitOuterClass}.\n-      *\n-      * @param owner internal name of the enclosing class of the class (see {@link\n-      *     Type#getInternalName()}).\n-      * @param name the name of the method that contains the class, or {@literal null} if the class is\n-      *     not enclosed in a method of its enclosing class.\n-      * @param descriptor the descriptor of the method that contains the class, or {@literal null} if\n-      *     the class is not enclosed in a method of its enclosing class.\n-      *\/\n-    public abstract void visitOuterClass(String owner, String name, String descriptor);\n-\n-    \/**\n-      * Class annotation. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitAnnotation}.\n-      *\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitClassAnnotation(String descriptor, boolean visible);\n-\n-    \/**\n-      * Class type annotation. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitTypeAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n-      *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n-      *     {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitClassTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Class attribute. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitAttribute}.\n-      *\n-      * @param attribute an attribute.\n-      *\/\n-    public abstract void visitClassAttribute(Attribute attribute);\n-\n-    \/**\n-      * Visits a member of the nest. A nest is a set of classes of the same package that share access\n-      * to their private members. One of these classes, called the host, lists the other members of the\n-      * nest, which in turn should link to the host of their nest. This method must be called only if\n-      * the visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\n-      * it's invalid to call this method with the visited class name as argument.\n-      *\n-      * @param nestMember the internal name of a nest member (see {@link Type#getInternalName()}).\n-      *\/\n-    public void visitNestMember(final String nestMember) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\n-      * current class. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitPermittedSubclass(String)}.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass (see {@link\n-      *     Type#getInternalName()}).\n-      *\/\n-    public void visitPermittedSubclass(final String permittedSubclass) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Class inner name. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitInnerClass}.\n-      *\n-      * @param name the internal name of an inner class (see {@link Type#getInternalName()}).\n-      * @param outerName the internal name of the class to which the inner class belongs (see {@link\n-      *     Type#getInternalName()}). May be {@literal null} for not member classes.\n-      * @param innerName the (simple) name of the inner class inside its enclosing class. May be\n-      *     {@literal null} for anonymous inner classes.\n-      * @param access the access flags of the inner class as originally declared in the enclosing\n-      *     class.\n-      *\/\n-    public abstract void visitInnerClass(String name, String outerName, String innerName, int access);\n-\n-    \/**\n-      * Visits a record component of the class. See {@link\n-      * jdk.internal.org.objectweb.asm.ClassVisitor#visitRecordComponent(String, String, String)}.\n-      *\n-      * @param name the field's name.\n-      * @param descriptor the record component descriptor (see {@link Type}).\n-      * @param signature the record component signature. May be {@literal null} if the record component\n-      *     type does not use generic types.\n-      * @return a visitor to visit this record component annotations and attributes, or {@literal null}\n-      *     if this class visitor is not interested in visiting these annotations and attributes.\n-      *\/\n-    public Printer visitRecordComponent(\n-            final String name, final String descriptor, final String signature) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Class field. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitField}.\n-      *\n-      * @param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\n-      *     the field is synthetic and\/or deprecated.\n-      * @param name the field's name.\n-      * @param descriptor the field's descriptor (see {@link Type}).\n-      * @param signature the field's signature. May be {@literal null} if the field's type does not use\n-      *     generic types.\n-      * @param value the field's initial value. This parameter, which may be {@literal null} if the\n-      *     field does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\n-      *     Long}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\n-      *     or {@code String} fields respectively). <i>This parameter is only used for static\n-      *     fields<\/i>. Its value is ignored for non static fields, which must be initialized through\n-      *     bytecode instructions in constructors or methods.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitField(\n-            int access, String name, String descriptor, String signature, Object value);\n-\n-    \/**\n-      * Class method. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitMethod}.\n-      *\n-      * @param access the method's access flags (see {@link Opcodes}). This parameter also indicates if\n-      *     the method is synthetic and\/or deprecated.\n-      * @param name the method's name.\n-      * @param descriptor the method's descriptor (see {@link Type}).\n-      * @param signature the method's signature. May be {@literal null} if the method parameters,\n-      *     return type and exceptions do not use generic types.\n-      * @param exceptions the internal names of the method's exception classes (see {@link\n-      *     Type#getInternalName()}). May be {@literal null}.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitMethod(\n-            int access, String name, String descriptor, String signature, String[] exceptions);\n-\n-    \/** Class end. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitEnd}. *\/\n-    public abstract void visitClassEnd();\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Modules\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Module main class. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitMainClass}.\n-      *\n-      * @param mainClass the internal name of the main class of the current module (see {@link\n-      *     Type#getInternalName()}).\n-      *\/\n-    public void visitMainClass(final String mainClass) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module package. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitPackage}.\n-      *\n-      * @param packaze the internal name of a package (see {@link Type#getInternalName()}).\n-      *\/\n-    public void visitPackage(final String packaze) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module require. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitRequire}.\n-      *\n-      * @param module the fully qualified name (using dots) of the dependence.\n-      * @param access the access flag of the dependence among {@code ACC_TRANSITIVE}, {@code\n-      *     ACC_STATIC_PHASE}, {@code ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n-      * @param version the module version at compile time, or {@literal null}.\n-      *\/\n-    public void visitRequire(final String module, final int access, final String version) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module export. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitExport}.\n-      *\n-      * @param packaze the internal name of the exported package (see {@link Type#getInternalName()}).\n-      * @param access the access flag of the exported package, valid values are among {@code\n-      *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n-      * @param modules the fully qualified names (using dots) of the modules that can access the public\n-      *     classes of the exported package, or {@literal null}.\n-      *\/\n-    public void visitExport(final String packaze, final int access, final String... modules) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module open. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitOpen}.\n-      *\n-      * @param packaze the internal name of the opened package (see {@link Type#getInternalName()}).\n-      * @param access the access flag of the opened package, valid values are among {@code\n-      *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n-      * @param modules the fully qualified names (using dots) of the modules that can use deep\n-      *     reflection to the classes of the open package, or {@literal null}.\n-      *\/\n-    public void visitOpen(final String packaze, final int access, final String... modules) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module use. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitUse}.\n-      *\n-      * @param service the internal name of the service (see {@link Type#getInternalName()}).\n-      *\/\n-    public void visitUse(final String service) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Module provide. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitProvide}.\n-      *\n-      * @param service the internal name of the service (see {@link Type#getInternalName()}).\n-      * @param providers the internal names of the implementations of the service (there is at least\n-      *     one provider).\n-      *\/\n-    public void visitProvide(final String service, final String... providers) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/** Module end. See {@link jdk.internal.org.objectweb.asm.ModuleVisitor#visitEnd}. *\/\n-    public void visitModuleEnd() {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Annotations\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Annotation value. See {@link jdk.internal.org.objectweb.asm.AnnotationVisitor#visit}.\n-      *\n-      * @param name the value name.\n-      * @param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\n-      *     Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n-      *     {@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\n-      *     value can also be an array of byte, boolean, short, char, int, long, float or double values\n-      *     (this is equivalent to using {@link #visitArray} and visiting each array element in turn,\n-      *     but is more convenient).\n-      *\/\n-    \/\/ DontCheck(OverloadMethodsDeclarationOrder): overloads are semantically different.\n-    public abstract void visit(String name, Object value);\n-\n-    \/**\n-      * Annotation enum value. See {@link jdk.internal.org.objectweb.asm.AnnotationVisitor#visitEnum}.\n-      *\n-      * @param name the value name.\n-      * @param descriptor the class descriptor of the enumeration class.\n-      * @param value the actual enumeration value.\n-      *\/\n-    public abstract void visitEnum(String name, String descriptor, String value);\n-\n-    \/**\n-      * Nested annotation value. See {@link jdk.internal.org.objectweb.asm.AnnotationVisitor#visitAnnotation}.\n-      *\n-      * @param name the value name.\n-      * @param descriptor the class descriptor of the nested annotation class.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitAnnotation(String name, String descriptor);\n-\n-    \/**\n-      * Annotation array value. See {@link jdk.internal.org.objectweb.asm.AnnotationVisitor#visitArray}.\n-      *\n-      * @param name the value name.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitArray(String name);\n-\n-    \/** Annotation end. See {@link jdk.internal.org.objectweb.asm.AnnotationVisitor#visitEnd}. *\/\n-    public abstract void visitAnnotationEnd();\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Record components\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Visits an annotation of the record component. See {@link\n-      * jdk.internal.org.objectweb.asm.RecordComponentVisitor#visitAnnotation}.\n-      *\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n-      *     interested in visiting this annotation.\n-      *\/\n-    public Printer visitRecordComponentAnnotation(final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Visits an annotation on a type in the record component signature. See {@link\n-      * jdk.internal.org.objectweb.asm.RecordComponentVisitor#visitTypeAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n-      *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n-      *     {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n-      *     interested in visiting this annotation.\n-      *\/\n-    public Printer visitRecordComponentTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Visits a non standard attribute of the record component. See {@link\n-      * jdk.internal.org.objectweb.asm.RecordComponentVisitor#visitAttribute}.\n-      *\n-      * @param attribute an attribute.\n-      *\/\n-    public void visitRecordComponentAttribute(final Attribute attribute) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Visits the end of the record component. See {@link\n-      * jdk.internal.org.objectweb.asm.RecordComponentVisitor#visitEnd}. This method, which is the last one to be\n-      * called, is used to inform the visitor that everything have been visited.\n-      *\/\n-    public void visitRecordComponentEnd() {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Fields\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Field annotation. See {@link jdk.internal.org.objectweb.asm.FieldVisitor#visitAnnotation}.\n-      *\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitFieldAnnotation(String descriptor, boolean visible);\n-\n-    \/**\n-      * Field type annotation. See {@link jdk.internal.org.objectweb.asm.FieldVisitor#visitTypeAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#FIELD}. See {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitFieldTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Field attribute. See {@link jdk.internal.org.objectweb.asm.FieldVisitor#visitAttribute}.\n-      *\n-      * @param attribute an attribute.\n-      *\/\n-    public abstract void visitFieldAttribute(Attribute attribute);\n-\n-    \/** Field end. See {@link jdk.internal.org.objectweb.asm.FieldVisitor#visitEnd}. *\/\n-    public abstract void visitFieldEnd();\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Methods\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Method parameter. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitParameter(String, int)}.\n-      *\n-      * @param name parameter name or {@literal null} if none is provided.\n-      * @param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\n-      *     or\/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).\n-      *\/\n-    public void visitParameter(final String name, final int access) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method default annotation. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitAnnotationDefault}.\n-      *\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitAnnotationDefault();\n-\n-    \/**\n-      * Method annotation. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitAnnotation}.\n-      *\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitMethodAnnotation(String descriptor, boolean visible);\n-\n-    \/**\n-      * Method type annotation. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitTypeAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\n-      *     TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\n-      *     TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\n-      *     TypeReference#THROWS}. See {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitMethodTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Number of method parameters that can have annotations. See {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitAnnotableParameterCount}.\n-      *\n-      * @param parameterCount the number of method parameters than can have annotations. This number\n-      *     must be less or equal than the number of parameter types in the method descriptor. It can\n-      *     be strictly less when a method has synthetic parameters and when these parameters are\n-      *     ignored when computing parameter indices for the purpose of parameter annotations (see\n-      *     https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.7.18).\n-      * @param visible {@literal true} to define the number of method parameters that can have\n-      *     annotations visible at runtime, {@literal false} to define the number of method parameters\n-      *     that can have annotations invisible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitAnnotableParameterCount(final int parameterCount, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method parameter annotation. See {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitParameterAnnotation}.\n-      *\n-      * @param parameter the parameter index. This index must be strictly smaller than the number of\n-      *     parameters in the method descriptor, and strictly smaller than the parameter count\n-      *     specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i\n-      *     is not required to correspond to the i'th parameter descriptor in the method\n-      *     descriptor<\/i>, in particular in case of synthetic parameters (see\n-      *     https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.7.18).\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public abstract Printer visitParameterAnnotation(\n-            int parameter, String descriptor, boolean visible);\n-\n-    \/**\n-      * Method attribute. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitAttribute}.\n-      *\n-      * @param attribute an attribute.\n-      *\/\n-    public abstract void visitMethodAttribute(Attribute attribute);\n-\n-    \/** Method start. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitCode}. *\/\n-    public abstract void visitCode();\n-\n-    \/**\n-      * Method stack frame. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitFrame}.\n-      *\n-      * @param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded\n-      *     frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link\n-      *     Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames.\n-      * @param numLocal the number of local variables in the visited frame.\n-      * @param local the local variable types in this frame. This array must not be modified. Primitive\n-      *     types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\n-      *     Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or\n-      *     {@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element).\n-      *     Reference types are represented by String objects (representing internal names, see {@link\n-      *     Type#getInternalName()}), and uninitialized types by Label objects (this label designates\n-      *     the NEW instruction that created this uninitialized value).\n-      * @param numStack the number of operand stack elements in the visited frame.\n-      * @param stack the operand stack types in this frame. This array must not be modified. Its\n-      *     content has the same format as the \"local\" array.\n-      *\/\n-    public abstract void visitFrame(\n-            int type, int numLocal, Object[] local, int numStack, Object[] stack);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitInsn}\n-      *\n-      * @param opcode the opcode of the instruction to be visited. This opcode is either NOP,\n-      *     ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,\n-      *     LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,\n-      *     FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,\n-      *     AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,\n-      *     SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,\n-      *     FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,\n-      *     LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,\n-      *     D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,\n-      *     DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.\n-      *\/\n-    public abstract void visitInsn(int opcode);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitIntInsn}.\n-      *\n-      * @param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH\n-      *     or NEWARRAY.\n-      * @param operand the operand of the instruction to be visited.<br>\n-      *     When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE.\n-      *     <br>\n-      *     When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE.\n-      *     <br>\n-      *     When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link\n-      *     Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},\n-      *     {@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.\n-      *\/\n-    public abstract void visitIntInsn(int opcode, int operand);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitVarInsn}.\n-      *\n-      * @param opcode the opcode of the local variable instruction to be visited. This opcode is either\n-      *     ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.\n-      * @param varIndex the operand of the instruction to be visited. This operand is the index of a\n-      *     local variable.\n-      *\/\n-    public abstract void visitVarInsn(int opcode, int varIndex);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitTypeInsn}.\n-      *\n-      * @param opcode the opcode of the type instruction to be visited. This opcode is either NEW,\n-      *     ANEWARRAY, CHECKCAST or INSTANCEOF.\n-      * @param type the operand of the instruction to be visited. This operand must be the internal\n-      *     name of an object or array class (see {@link Type#getInternalName()}).\n-      *\/\n-    public abstract void visitTypeInsn(int opcode, String type);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitFieldInsn}.\n-      *\n-      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n-      *     GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n-      * @param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n-      * @param name the field's name.\n-      * @param descriptor the field's descriptor (see {@link Type}).\n-      *\/\n-    public abstract void visitFieldInsn(int opcode, String owner, String name, String descriptor);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitMethodInsn}.\n-      *\n-      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n-      *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n-      * @param owner the internal name of the method's owner class (see {@link\n-      *     Type#getInternalName()}).\n-      * @param name the method's name.\n-      * @param descriptor the method's descriptor (see {@link Type}).\n-      * @deprecated use {@link #visitMethodInsn(int, String, String, String, boolean)} instead.\n-      *\/\n-    @Deprecated\n-    public void visitMethodInsn(\n-            final int opcode, final String owner, final String name, final String descriptor) {\n-        \/\/ This method was abstract before ASM5, and was therefore always overridden (without any\n-        \/\/ call to 'super'). Thus, at this point we necessarily have api >= ASM5, and we must then\n-        \/\/ redirect the method call to the ASM5 visitMethodInsn() method.\n-        visitMethodInsn(opcode, owner, name, descriptor, opcode == Opcodes.INVOKEINTERFACE);\n-    }\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitMethodInsn}.\n-      *\n-      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n-      *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n-      * @param owner the internal name of the method's owner class (see {@link\n-      *     Type#getInternalName()}).\n-      * @param name the method's name.\n-      * @param descriptor the method's descriptor (see {@link Type}).\n-      * @param isInterface if the method's owner class is an interface.\n-      *\/\n-    public void visitMethodInsn(\n-            final int opcode,\n-            final String owner,\n-            final String name,\n-            final String descriptor,\n-            final boolean isInterface) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn}.\n-      *\n-      * @param name the method's name.\n-      * @param descriptor the method's descriptor (see {@link Type}).\n-      * @param bootstrapMethodHandle the bootstrap method.\n-      * @param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\n-      *     an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\n-      *     Type} or {@link Handle} value. This method is allowed to modify the content of the array so\n-      *     a caller should expect that this array may change.\n-      *\/\n-    public abstract void visitInvokeDynamicInsn(\n-            String name,\n-            String descriptor,\n-            Handle bootstrapMethodHandle,\n-            Object... bootstrapMethodArguments);\n-\n-    \/**\n-      * Method jump instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitJumpInsn}.\n-      *\n-      * @param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\n-      *     IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\n-      *     IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n-      * @param label the operand of the instruction to be visited. This operand is a label that\n-      *     designates the instruction to which the jump instruction may jump.\n-      *\/\n-    public abstract void visitJumpInsn(int opcode, Label label);\n-\n-    \/**\n-      * Method label. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitLabel}.\n-      *\n-      * @param label a {@link Label} object.\n-      *\/\n-    public abstract void visitLabel(Label label);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitLdcInsn}.\n-      *\n-      * @param value the constant to be loaded on the stack. This parameter must be a non null {@link\n-      *     Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link\n-      *     Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is\n-      *     49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle\n-      *     constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant\n-      *     dynamic for classes whose version is 55.\n-      *\/\n-    public abstract void visitLdcInsn(Object value);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitIincInsn}.\n-      *\n-      * @param varIndex index of the local variable to be incremented.\n-      * @param increment amount to increment the local variable by.\n-      *\/\n-    public abstract void visitIincInsn(int varIndex, int increment);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitTableSwitchInsn}.\n-      *\n-      * @param min the minimum key value.\n-      * @param max the maximum key value.\n-      * @param dflt beginning of the default handler block.\n-      * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\n-      *     handler block for the {@code min + i} key.\n-      *\/\n-    public abstract void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn}.\n-      *\n-      * @param dflt beginning of the default handler block.\n-      * @param keys the values of the keys.\n-      * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\n-      *     handler block for the {@code keys[i]} key.\n-      *\/\n-    public abstract void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);\n-\n-    \/**\n-      * Method instruction. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn}.\n-      *\n-      * @param descriptor an array type descriptor (see {@link Type}).\n-      * @param numDimensions the number of dimensions of the array to allocate.\n-      *\/\n-    public abstract void visitMultiANewArrayInsn(String descriptor, int numDimensions);\n-\n-    \/**\n-      * Instruction type annotation. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitInsnAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link\n-      *     TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link\n-      *     TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link\n-      *     TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\n-      *     TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link\n-      *     TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitInsnAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method exception handler. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitTryCatchBlock}.\n-      *\n-      * @param start the beginning of the exception handler's scope (inclusive).\n-      * @param end the end of the exception handler's scope (exclusive).\n-      * @param handler the beginning of the exception handler's code.\n-      * @param type the internal name of the type of exceptions handled by the handler (see {@link\n-      *     Type#getInternalName()}), or {@literal null} to catch any exceptions (for \"finally\"\n-      *     blocks).\n-      *\/\n-    public abstract void visitTryCatchBlock(Label start, Label end, Label handler, String type);\n-\n-    \/**\n-      * Try catch block type annotation. See {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitTryCatchAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method debug info. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitLocalVariable}.\n-      *\n-      * @param name the name of a local variable.\n-      * @param descriptor the type descriptor of this local variable.\n-      * @param signature the type signature of this local variable. May be {@literal null} if the local\n-      *     variable type does not use generic types.\n-      * @param start the first instruction corresponding to the scope of this local variable\n-      *     (inclusive).\n-      * @param end the last instruction corresponding to the scope of this local variable (exclusive).\n-      * @param index the local variable's index.\n-      *\/\n-    public abstract void visitLocalVariable(\n-            String name, String descriptor, String signature, Label start, Label end, int index);\n-\n-    \/**\n-      * Local variable type annotation. See {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation}.\n-      *\n-      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n-      *     {@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\n-      *     TypeReference}.\n-      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n-      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n-      *     'typeRef' as a whole.\n-      * @param start the fist instructions corresponding to the continuous ranges that make the scope\n-      *     of this local variable (inclusive).\n-      * @param end the last instructions corresponding to the continuous ranges that make the scope of\n-      *     this local variable (exclusive). This array must have the same size as the 'start' array.\n-      * @param index the local variable's index in each range. This array must have the same size as\n-      *     the 'start' array.\n-      * @param descriptor the class descriptor of the annotation class.\n-      * @param visible {@literal true} if the annotation is visible at runtime.\n-      * @return the printer.\n-      *\/\n-    public Printer visitLocalVariableAnnotation(\n-            final int typeRef,\n-            final TypePath typePath,\n-            final Label[] start,\n-            final Label[] end,\n-            final int[] index,\n-            final String descriptor,\n-            final boolean visible) {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n-    }\n-\n-    \/**\n-      * Method debug info. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitLineNumber}.\n-      *\n-      * @param line a line number. This number refers to the source file from which the class was\n-      *     compiled.\n-      * @param start the first instruction corresponding to this line number.\n-      *\/\n-    public abstract void visitLineNumber(int line, Label start);\n-\n-    \/**\n-      * Method max stack and max locals. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitMaxs}.\n-      *\n-      * @param maxStack maximum stack size of the method.\n-      * @param maxLocals maximum number of local variables for the method.\n-      *\/\n-    public abstract void visitMaxs(int maxStack, int maxLocals);\n-\n-    \/** Method end. See {@link jdk.internal.org.objectweb.asm.MethodVisitor#visitEnd}. *\/\n-    public abstract void visitMethodEnd();\n-\n-    \/\/ -----------------------------------------------------------------------------------------------\n-    \/\/ Print and utility methods\n-    \/\/ -----------------------------------------------------------------------------------------------\n-\n-    \/**\n-      * Returns the text constructed by this visitor.\n-      *\n-      * @return the text constructed by this visitor. See {@link #text}.\n-      *\/\n-    public List<Object> getText() {\n-        return text;\n-    }\n-\n-    \/**\n-      * Prints the text constructed by this visitor.\n-      *\n-      * @param printWriter the print writer to be used.\n-      *\/\n-    public void print(final PrintWriter printWriter) {\n-        printList(printWriter, text);\n-    }\n-\n-    \/**\n-      * Prints the given string tree.\n-      *\n-      * @param printWriter the writer to be used to print the tree.\n-      * @param list a string tree, i.e., a string list that can contain other string lists, and so on\n-      *     recursively.\n-      *\/\n-    static void printList(final PrintWriter printWriter, final List<?> list) {\n-        for (Object o : list) {\n-            if (o instanceof List) {\n-                printList(printWriter, (List<?>) o);\n-            } else {\n-                printWriter.print(o.toString());\n-            }\n-        }\n-    }\n-\n-    \/**\n-      * Appends a quoted string to the given string builder.\n-      *\n-      * @param stringBuilder the buffer where the string must be added.\n-      * @param string the string to be added.\n-      *\/\n-    public static void appendString(final StringBuilder stringBuilder, final String string) {\n-        stringBuilder.append('\\\"');\n-        for (int i = 0; i < string.length(); ++i) {\n-            char c = string.charAt(i);\n-            if (c == '\\n') {\n-                stringBuilder.append(\"\\\\n\");\n-            } else if (c == '\\r') {\n-                stringBuilder.append(\"\\\\r\");\n-            } else if (c == '\\\\') {\n-                stringBuilder.append(\"\\\\\\\\\");\n-            } else if (c == '\"') {\n-                stringBuilder.append(\"\\\\\\\"\");\n-            } else if (c < 0x20 || c > 0x7f) {\n-                stringBuilder.append(\"\\\\u\");\n-                if (c < 0x10) {\n-                    stringBuilder.append(\"000\");\n-                } else if (c < 0x100) {\n-                    stringBuilder.append(\"00\");\n-                } else if (c < 0x1000) {\n-                    stringBuilder.append('0');\n-                }\n-                stringBuilder.append(Integer.toString(c, 16));\n-            } else {\n-                stringBuilder.append(c);\n-            }\n-        }\n-        stringBuilder.append('\\\"');\n-    }\n-\n-    \/**\n-      * Prints the given class to the given output.\n-      *\n-      * <p>Command line arguments: [-nodebug] &lt;binary class name or class file name &gt;\n-      *\n-      * @param args the command line arguments.\n-      * @param usage the help message to show when command line arguments are incorrect.\n-      * @param printer the printer to convert the class into text.\n-      * @param output where to print the result.\n-      * @param logger where to log errors.\n-      * @throws IOException if the class cannot be found, or if an IOException occurs.\n-      *\/\n-    static void main(\n-            final String[] args,\n-            final String usage,\n-            final Printer printer,\n-            final PrintWriter output,\n-            final PrintWriter logger)\n-            throws IOException {\n-        if (args.length < 1\n-                || args.length > 2\n-                || ((args[0].equals(\"-debug\") || args[0].equals(\"-nodebug\")) && args.length != 2)) {\n-            logger.println(usage);\n-            return;\n-        }\n-\n-        TraceClassVisitor traceClassVisitor = new TraceClassVisitor(null, printer, output);\n-\n-        String className;\n-        int parsingOptions;\n-        if (args[0].equals(\"-nodebug\")) {\n-            className = args[1];\n-            parsingOptions = ClassReader.SKIP_DEBUG;\n-        } else {\n-            className = args[0];\n-            parsingOptions = 0;\n-        }\n-\n-        if (className.endsWith(\".class\")\n-                || className.indexOf('\\\\') != -1\n-                || className.indexOf('\/') != -1) {\n-            \/\/ Can't fix PMD warning for 1.5 compatibility.\n-            try (InputStream inputStream = new FileInputStream(className)) { \/\/ NOPMD(AvoidFileStream)\n-                new ClassReader(inputStream).accept(traceClassVisitor, parsingOptions);\n-            }\n-        } else {\n-            new ClassReader(className).accept(traceClassVisitor, parsingOptions);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Printer.java","additions":0,"deletions":1342,"binary":false,"changes":1342,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -37,6 +37,6 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/Test6932496.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,7 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/common\/InvokeDynamicPatcher.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromCompiled\/CompiledInvokeDynamic2CompiledTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromCompiled\/CompiledInvokeDynamic2InterpretedTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromCompiled\/CompiledInvokeDynamic2NativeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromInterpreted\/InterpretedInvokeDynamic2CompiledTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromInterpreted\/InterpretedInvokeDynamic2InterpretedTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -29,1 +30,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/fromInterpreted\/InterpretedInvokeDynamic2NativeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -30,0 +29,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/AbstractRootMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -30,0 +29,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/DefaultRootMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -31,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/StrengthReduceInterfaceCall.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n@@ -42,3 +42,3 @@\n-import static jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n-import static jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_MAXS;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n+import static org.objectweb.asm.ClassWriter.COMPUTE_MAXS;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/Utils.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -41,3 +41,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n@@ -57,5 +57,5 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.H_INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.IRETURN;\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/CallSiteDepContextTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -30,0 +29,1 @@\n+ * @library \/testlibrary\/asm\n@@ -50,2 +50,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n@@ -62,4 +62,4 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.IRETURN;\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/NonInlinedCall\/RedefineTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.compiler\n+ * @library \/testlibrary\/asm\n+ * @modules java.compiler\n@@ -40,5 +40,5 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/RedefineMethodUsedByMultipleMethodHandles.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -51,4 +51,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -61,12 +61,12 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PRIVATE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.LLOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ILOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.IRETURN;\n+import static org.objectweb.asm.Opcodes.LLOAD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/methodHandleExceptions\/TestAMEnotNPE.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,7 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.tree.ClassNode;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.tree.ClassNode;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/CTVMUtilities.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,3 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/AllocateCompileIdTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/AsResolvedJavaMethodTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ConstantPoolTestsHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.code\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.code\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/DisassembleCodeBlobTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/DoNotInlineOrCompileTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,3 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ExecuteInstalledCodeTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/FindUniqueConcreteMethodTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n@@ -48,1 +47,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetBytecodeTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,3 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetConstantPoolTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetExceptionTableTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,3 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetLineNumberTableTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetLocalVariableTableTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetStackTraceElementTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,2 +32,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetSymbolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetVtableIndexForInterfaceTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,3 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/HasCompiledCodeForOSRTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/HasNeverInlineDirectiveTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n@@ -51,0 +50,1 @@\n+ * @library \/testlibrary\/asm\n@@ -52,3 +52,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/IsCompilableTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,2 +32,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/IsMatureVsReprofileTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/testlibrary\/asm\n@@ -33,3 +34,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/IterateFramesNative.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -33,2 +34,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupConstantInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -33,2 +34,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupKlassInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupKlassRefIndexInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupMethodInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameAndTypeRefIndexInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupSignatureInPoolTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+ * @library \/testlibrary\/asm\n@@ -38,3 +39,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MaterializeVirtualObjectTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -32,2 +33,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MethodIsIgnoredBySecurityStackWalkTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ReprofileTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -33,2 +34,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n@@ -54,1 +53,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ResolveFieldInPoolTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ResolveMethodTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/testlibrary\/asm\n@@ -33,1 +34,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ResolveTypeInPoolTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,3 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ShouldInlineMethodTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,2 +32,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/events\/JvmciNotifyBootstrapFinishedEventTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot:+open\n+ * @library \/testlibrary\/asm\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot:+open\n@@ -57,6 +57,6 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestDynamicConstant.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -34,2 +35,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.reflect\n+ * @modules java.base\/jdk.internal.reflect\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -35,3 +35,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n@@ -42,12 +42,12 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IADD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_0;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IF_ICMPLT;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ISTORE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.POP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.IADD;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IF_ICMPLT;\n+import static org.objectweb.asm.Opcodes.ILOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.ISTORE;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.RETURN;\n","filename":"test\/hotspot\/jtreg\/compiler\/osr\/TestOSRWithNonEmptyStack.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -42,1 +42,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -54,2 +54,2 @@\n-import static jdk.internal.org.objectweb.asm.ClassWriter.*;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.ClassWriter.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/TestConstantDynamic.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -35,1 +35,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -49,2 +49,2 @@\n-import static jdk.internal.org.objectweb.asm.ClassWriter.*;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.ClassWriter.*;\n+import static org.objectweb.asm.Opcodes.*;\n@@ -251,1 +251,0 @@\n-                \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/TestConstantsInError.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -34,0 +34,7 @@\n+ *             org.objectweb.asm.ClassWriter org.objectweb.asm.ClassVisitor\n+ *             org.objectweb.asm.SymbolTable org.objectweb.asm.SymbolTable$Entry\n+ *             org.objectweb.asm.Symbol org.objectweb.asm.ByteVector\n+ *             org.objectweb.asm.MethodWriter org.objectweb.asm.MethodVisitor\n+ *             org.objectweb.asm.Type org.objectweb.asm.Label\n+ *             org.objectweb.asm.Handler org.objectweb.asm.Attribute\n+ *             org.objectweb.asm.AnnotationWriter org.objectweb.asm.AnnotationVisitor\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/unloaded\/TestMHUnloaded.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriter;\n@@ -34,1 +34,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/unloaded\/TestMHUnloadedHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n@@ -85,2 +85,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n@@ -93,14 +93,14 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.AALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ASTORE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_0;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.AALOAD;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ARETURN;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.GETSTATIC;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestMeetIncompatibleInterfaceArrays.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -70,4 +70,4 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n@@ -84,12 +84,12 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_VOLATILE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GOTO;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IADD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IFEQ;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ISUB;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_VOLATILE;\n+import static org.objectweb.asm.Opcodes.GETSTATIC;\n+import static org.objectweb.asm.Opcodes.GOTO;\n+import static org.objectweb.asm.Opcodes.IADD;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IFEQ;\n+import static org.objectweb.asm.Opcodes.ILOAD;\n+import static org.objectweb.asm.Opcodes.ISUB;\n+import static org.objectweb.asm.Opcodes.RETURN;\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestUnstableIfTrap.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,2 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.vm.annotation\n+ * @modules java.base\/jdk.internal.vm.annotation\n@@ -61,5 +61,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n@@ -78,16 +78,16 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_FINAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETFIELD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.NEW;\n-import static jdk.internal.org.objectweb.asm.Opcodes.PUTFIELD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.PUTSTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.ACC_FINAL;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ARETURN;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.GETSTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.PUTSTATIC;\n+import static org.objectweb.asm.Opcodes.RETURN;\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeGetConstantField.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -40,2 +40,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestClasses.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -32,1 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/AccModule\/ACCModule52.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -33,1 +33,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/AccModule\/ConstModule.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -37,0 +37,1 @@\n+ * @library \/testlibrary\/asm\n@@ -38,1 +39,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -46,2 +46,2 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n-import jdk.internal.org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/BootstrapMethod\/BSMCalledTwice.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,3 +35,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/UnsupportedClassFileVersion.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,1 +35,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -41,1 +41,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/ConstantPool\/BadMethodHandles.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -38,1 +38,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -41,1 +41,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/ConstantPool\/IntfMethod.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.management\n+ * @library \/testlibrary\/asm\n+ * @modules java.management\n@@ -33,3 +33,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n@@ -46,11 +46,11 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PRIVATE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETFIELD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.PUTFIELD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ARETURN;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/HiddenDefMeths.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -44,2 +44,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -57,2 +57,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -75,1 +75,0 @@\n-            \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invocationC1Tests.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokeinterface\/ClassGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokeinterface\/Generator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -45,2 +45,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -59,2 +59,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -77,1 +77,0 @@\n-            \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokeinterfaceTests.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokespecial\/ClassGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,1 +242,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokespecial\/Generator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -44,2 +44,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -57,2 +57,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -74,1 +74,0 @@\n-            \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokespecialTests.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokevirtual\/ClassGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokevirtual\/Generator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -44,2 +44,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -57,2 +57,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -74,1 +74,0 @@\n-            \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invokevirtualTests.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/shared\/AccessCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/shared\/AccessType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,6 +27,6 @@\n-import static jdk.internal.org.objectweb.asm.ClassWriter.*;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.ClassWriter.*;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/shared\/ExecutorGenerator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import static jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n-import static jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_MAXS;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import static org.objectweb.asm.ClassWriter.COMPUTE_FRAMES;\n+import static org.objectweb.asm.ClassWriter.COMPUTE_MAXS;\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/shared\/GenericClassGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/MirrorFrame\/Asmator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/hotspot\/jtreg\/runtime\/MirrorFrame\/Test8003720.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/AsmClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/ParallelSuperTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/AbstractMethodErrorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/IllegalAccessErrorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeInterfaceICCE.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeInterfaceSuccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeSpecialICCE.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeSpecialSuccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeStaticICCE.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeStaticSuccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeVirtualICCE.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/InvokeVirtualSuccessTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/NoSuchMethodErrorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,5 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PRIVATE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PROTECTED;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PROTECTED;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/ClassBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/ClassConstruct.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/Clazz.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_INTERFACE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.ACC_ABSTRACT;\n+import static org.objectweb.asm.Opcodes.ACC_INTERFACE;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/Interface.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n@@ -34,18 +34,18 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.DUP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.POP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.NEW;\n-import static jdk.internal.org.objectweb.asm.Opcodes.SWAP;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ASTORE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKEINTERFACE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ARETURN;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.SWAP;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.H_INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.H_INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.H_INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.H_INVOKEVIRTUAL;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/Method.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n@@ -28,2 +28,2 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n","filename":"test\/hotspot\/jtreg\/runtime\/SelectionResolution\/classes\/selectionresolution\/TestBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n@@ -36,6 +36,6 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/StackTrace\/LargeClassTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -33,4 +33,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/TransitiveOverrideCFV50\/TransitiveOverrideCFV50.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -43,1 +43,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -137,1 +137,1 @@\n-java jdk.internal.org.objectweb.asm.util.ASMifier Hello.class\n+java org.objectweb.asm.util.ASMifier Hello.class\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldClassTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import jdk.internal.org.objectweb.asm.*;\n+import org.objectweb.asm.*;\n@@ -333,1 +333,1 @@\n-    \/\/ This was obtained using JDK8: java jdk.internal.org.objectweb.asm.util.ASMifier tmpclasses\/UnverifiableBase.class\n+    \/\/ This was obtained using JDK8: java org.objectweb.asm.util.ASMifier tmpclasses\/UnverifiableBase.class\n@@ -371,1 +371,1 @@\n-    \/\/ This was obtained using JDK8: java jdk.internal.org.objectweb.asm.util.ASMifier tmpclasses\/UnverifiableIntf.class\n+    \/\/ This was obtained using JDK8: java org.objectweb.asm.util.ASMifier tmpclasses\/UnverifiableIntf.class\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest_0.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest_1A.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest_1B.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest_2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -47,3 +47,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/IllegalAccessError\/IllegalAccessErrorTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -46,1 +46,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -60,3 +60,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n@@ -67,14 +67,14 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ASTORE;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETFIELD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_2;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ARETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.IRETURN;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.GETSTATIC;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.ICONST_2;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.ARETURN;\n+import static org.objectweb.asm.Opcodes.IRETURN;\n+import static org.objectweb.asm.Opcodes.RETURN;\n@@ -1598,1 +1598,1 @@\n-    \/\/   java jdk.internal.org.objectweb.asm.util.ASMifier E0.class\n+    \/\/   java org.objectweb.asm.util.ASMifier E0.class\n@@ -1820,1 +1820,1 @@\n-    \/\/   java jdk.internal.org.objectweb.asm.util.ASMifier Sub2G.class\n+    \/\/   java org.objectweb.asm.util.ASMifier Sub2G.class\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/NullPointerException\/NullPointerExceptionTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -33,3 +33,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/finalStatic\/FinalStatic.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -32,4 +32,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/runtime\/invokedynamic\/BootstrapMethodErrorTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -32,2 +32,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n@@ -35,1 +35,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/lambda-features\/TestConcreteClassWithAbstractMethod.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -34,2 +34,2 @@\n-import jdk.internal.org.objectweb.asm.*;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/runtime\/lambda-features\/TestStaticandInstance.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n@@ -36,2 +36,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/OverriderMsg.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n@@ -39,1 +39,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestANewArray.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n@@ -36,2 +36,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @library \/testlibrary\/asm\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestMultiANewArray.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-     * 765       3       jdk.internal.org.objectweb.asm.MethodVisitor::<init> (35 bytes)\n+     * 765       3       org.objectweb.asm.MethodVisitor::<init> (35 bytes)\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerQueueTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -36,4 +36,4 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/MissedStackMapFrames\/MissedStackMapFrames.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/testlibrary\/asm\n@@ -30,2 +31,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.instrument\n+ * @modules java.instrument\n@@ -64,5 +64,5 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ASM7;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import static org.objectweb.asm.Opcodes.ASM7;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineAnnotations.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.instrument\n+ * @modules java.instrument\n+ * @library \/testlibrary\/asm\n@@ -45,4 +45,4 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineGenericSignatureTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,1 +32,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n@@ -51,3 +51,3 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n@@ -55,2 +55,2 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ASM6;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_8;\n+import static org.objectweb.asm.Opcodes.ASM6;\n+import static org.objectweb.asm.Opcodes.V1_8;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineObject.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -46,6 +46,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRetransform\/RedefineRetransform.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,2 +32,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.instrument\n+ * @modules java.instrument\n@@ -38,4 +38,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineRunningMethodsWithResolutionErrors.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/testlibrary\/asm\n@@ -31,1 +32,0 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n@@ -42,13 +42,13 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineVerifyError.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n@@ -36,4 +36,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SetBreakpoint\/TestManyBreakpoints.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/AnnotationVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/AnnotationVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/AnnotationWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/AnnotationWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Attribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Attribute.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ByteVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ByteVector.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n@@ -78,1 +78,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n@@ -88,1 +88,1 @@\n-      * Returns the internal name of the class (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * Returns the internal name of the class (see {@link org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ClassTooLargeException.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassTooLargeException.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ClassVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ClassWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ConstantDynamic.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ConstantDynamic.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Constants.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Constants.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Context.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Context.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/CurrentFrame.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/CurrentFrame.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Edge.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Edge.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/FieldVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/FieldVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/FieldWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/FieldWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Frame.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Frame.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Handle.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Handle.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Handler.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Handler.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Label.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Label.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/MethodTooLargeException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodTooLargeException.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/MethodVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/MethodWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ModuleVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ModuleVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/ModuleWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ModuleWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/RecordComponentVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/RecordComponentVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/RecordComponentWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/RecordComponentWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Symbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Symbol.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/SymbolTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/SymbolTable.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/TypePath.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/TypePath.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/TypeReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/TypeReference.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -66,6 +66,6 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/AdviceAdapter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AdviceAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -66,6 +66,6 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n@@ -76,1 +76,1 @@\n- * jdk.internal.org.objectweb.asm.ClassReader#EXPAND_FRAMES} option. Each visit<i>X<\/i> instruction delegates to\n+ * org.objectweb.asm.ClassReader#EXPAND_FRAMES} option. Each visit<i>X<\/i> instruction delegates to\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/AnalyzerAdapter.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnalyzerAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,2 +62,2 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/AnnotationRemapper.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnnotationRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -63,9 +63,9 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/ClassRemapper.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ClassRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,5 +62,5 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/CodeSizeEvaluator.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/CodeSizeEvaluator.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,4 +62,4 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/FieldRemapper.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/FieldRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -65,7 +65,7 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/GeneratorAdapter.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/GeneratorAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,6 +62,6 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/InstructionAdapter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/InstructionAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -70,13 +70,13 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InsnList;\n-import jdk.internal.org.objectweb.asm.tree.InsnNode;\n-import jdk.internal.org.objectweb.asm.tree.JumpInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LabelNode;\n-import jdk.internal.org.objectweb.asm.tree.LocalVariableNode;\n-import jdk.internal.org.objectweb.asm.tree.LookupSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.TableSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.InsnList;\n+import org.objectweb.asm.tree.InsnNode;\n+import org.objectweb.asm.tree.JumpInsnNode;\n+import org.objectweb.asm.tree.LabelNode;\n+import org.objectweb.asm.tree.LocalVariableNode;\n+import org.objectweb.asm.tree.LookupSwitchInsnNode;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.TableSwitchInsnNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n@@ -85,1 +85,1 @@\n- * A {@link jdk.internal.org.objectweb.asm.MethodVisitor} that removes JSR instructions and inlines the\n+ * A {@link org.objectweb.asm.MethodVisitor} that removes JSR instructions and inlines the\n@@ -124,1 +124,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      *     org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -160,1 +160,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      *     org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/JSRInlinerAdapter.java","additions":17,"deletions":17,"binary":false,"changes":34,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/JSRInlinerAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,6 +62,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/LocalVariablesSorter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/LocalVariablesSorter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -64,1 +64,1 @@\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/Method.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Method.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,6 +62,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/MethodRemapper.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/MethodRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -64,5 +64,5 @@\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ByteVector;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ByteVector;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/ModuleHashesAttribute.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleHashesAttribute.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,2 +62,2 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/ModuleRemapper.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,5 +62,5 @@\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ByteVector;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ByteVector;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/ModuleResolutionAttribute.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleResolutionAttribute.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,5 +62,5 @@\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ByteVector;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ByteVector;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/ModuleTargetAttribute.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleTargetAttribute.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,4 +62,4 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n@@ -94,1 +94,1 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      *     org.objectweb.asm.Opcodes#ASM8} or {@link org.objectweb.asm.Opcodes#ASM9}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/RecordComponentRemapper.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RecordComponentRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,7 +62,7 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.signature.SignatureReader;\n-import jdk.internal.org.objectweb.asm.signature.SignatureVisitor;\n-import jdk.internal.org.objectweb.asm.signature.SignatureWriter;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.signature.SignatureReader;\n+import org.objectweb.asm.signature.SignatureVisitor;\n+import org.objectweb.asm.signature.SignatureWriter;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/Remapper.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Remapper.java","status":"renamed"},{"patch":"@@ -59,1 +59,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -61,2 +61,2 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/RemappingAnnotationAdapter.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingAnnotationAdapter.java","status":"renamed"},{"patch":"@@ -59,1 +59,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -61,6 +61,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/RemappingMethodAdapter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingMethodAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -71,4 +71,4 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/SerialVersionUIDAdder.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SerialVersionUIDAdder.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.signature.SignatureVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.signature.SignatureVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/SignatureRemapper.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SignatureRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -88,1 +88,1 @@\n-      *           internal name (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *           internal name (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -101,1 +101,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/SimpleRemapper.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SimpleRemapper.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,3 +62,3 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/StaticInitMerger.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/StaticInitMerger.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Label;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/TableSwitchGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/TableSwitchGenerator.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.commons;\n+package org.objectweb.asm.commons;\n@@ -64,4 +64,4 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n@@ -91,1 +91,1 @@\n-      * @param descriptor the method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the method's descriptor (see {@link org.objectweb.asm.Type}).\n@@ -95,1 +95,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      *     org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/commons\/TryCatchBlockSorter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/TryCatchBlockSorter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.signature;\n+package org.objectweb.asm.signature;\n@@ -89,1 +89,1 @@\n-      * the <code>signature<\/code> parameter of the {@link jdk.internal.org.objectweb.asm.ClassVisitor#visit}\n+      * the <code>signature<\/code> parameter of the {@link org.objectweb.asm.ClassVisitor#visit}\n@@ -91,1 +91,1 @@\n-      * jdk.internal.org.objectweb.asm.ClassVisitor#visitMethod} method).\n+      * org.objectweb.asm.ClassVisitor#visitMethod} method).\n@@ -166,2 +166,2 @@\n-      * jdk.internal.org.objectweb.asm.ClassVisitor#visitField} or {@link\n-      * jdk.internal.org.objectweb.asm.MethodVisitor#visitLocalVariable} methods.\n+      * org.objectweb.asm.ClassVisitor#visitField} or {@link\n+      * org.objectweb.asm.MethodVisitor#visitLocalVariable} methods.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/signature\/SignatureReader.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureReader.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.signature;\n+package org.objectweb.asm.signature;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n@@ -215,1 +215,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/signature\/SignatureVisitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.signature;\n+package org.objectweb.asm.signature;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/signature\/SignatureWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureWriter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -65,1 +65,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/AbstractInsnNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/AbstractInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,2 +64,2 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -81,1 +81,1 @@\n-      * {@link Double}, {@link String} or {@link jdk.internal.org.objectweb.asm.Type}, or a two elements String\n+      * {@link Double}, {@link String} or {@link org.objectweb.asm.Type}, or a two elements String\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/AnnotationNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/AnnotationNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,9 +64,9 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n@@ -88,1 +88,1 @@\n-      * The class's access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). This field also indicates if\n+      * The class's access flags (see {@link org.objectweb.asm.Opcodes}). This field also indicates if\n@@ -93,1 +93,1 @@\n-    \/** The internal name of this class (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}). *\/\n+    \/** The internal name of this class (see {@link org.objectweb.asm.Type#getInternalName()}). *\/\n@@ -100,1 +100,1 @@\n-      * The internal of name of the super class (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * The internal of name of the super class (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -108,1 +108,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * org.objectweb.asm.Type#getInternalName()}).\n@@ -125,1 +125,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). Must be {@literal null} if this class has no\n+      * org.objectweb.asm.Type#getInternalName()}). Must be {@literal null} if this class has no\n@@ -166,1 +166,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -172,1 +172,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -178,1 +178,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ClassNode.java","additions":18,"deletions":18,"binary":false,"changes":36,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ClassNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n@@ -75,1 +75,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * org.objectweb.asm.Type#getInternalName()}).\n@@ -82,1 +82,1 @@\n-    \/** The field's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** The field's descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -91,1 +91,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n@@ -93,1 +93,1 @@\n-      * @param descriptor the field's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the field's descriptor (see {@link org.objectweb.asm.Type}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/FieldInsnNode.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FieldInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,6 +63,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n@@ -78,1 +78,1 @@\n-      * The field's access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). This field also indicates if\n+      * The field's access flags (see {@link org.objectweb.asm.Opcodes}). This field also indicates if\n@@ -86,1 +86,1 @@\n-    \/** The field's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** The field's descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -118,1 +118,1 @@\n-      * @param access the field's access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). This parameter\n+      * @param access the field's access flags (see {@link org.objectweb.asm.Opcodes}). This parameter\n@@ -121,1 +121,1 @@\n-      * @param descriptor the field's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the field's descriptor (see {@link org.objectweb.asm.Type}).\n@@ -145,1 +145,1 @@\n-      * @param access the field's access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). This parameter\n+      * @param access the field's access flags (see {@link org.objectweb.asm.Opcodes}). This parameter\n@@ -148,1 +148,1 @@\n-      * @param descriptor the field's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the field's descriptor (see {@link org.objectweb.asm.Type}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/FieldNode.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FieldNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -65,2 +65,2 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/FrameNode.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FrameNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/IincInsnNode.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/IincInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassVisitor;\n@@ -75,1 +75,1 @@\n-    \/** The internal name of an inner class (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}). *\/\n+    \/** The internal name of an inner class (see {@link org.objectweb.asm.Type#getInternalName()}). *\/\n@@ -80,1 +80,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -99,1 +99,1 @@\n-      * @param name the internal name of C (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * @param name the internal name of C (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -101,1 +101,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}). Must be {@literal null} if C is not the member\n+      *     org.objectweb.asm.Type#getInternalName()}). Must be {@literal null} if C is not the member\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/InnerClassNode.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InnerClassNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,1 +64,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/InsnList.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InsnList.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/InsnNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/IntInsnNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/IntInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,3 +63,3 @@\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -77,1 +77,1 @@\n-    \/** The method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** The method's descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -90,1 +90,1 @@\n-      * @param descriptor the method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the method's descriptor (see {@link org.objectweb.asm.Type}).\n@@ -94,1 +94,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type} or {@link Handle} value. This method is allowed to modify the\n+      *     org.objectweb.asm.Type} or {@link Handle} value. This method is allowed to modify the\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/InvokeDynamicInsnNode.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InvokeDynamicInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/JumpInsnNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/JumpInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LabelNode.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LabelNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,5 +63,5 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LdcInsnNode.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LdcInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LineNumberNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LineNumberNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,4 +63,4 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n@@ -99,1 +99,1 @@\n-      * @param typeRef a reference to the annotated type. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      * @param typeRef a reference to the annotated type. See {@link org.objectweb.asm.TypeReference}.\n@@ -126,1 +126,1 @@\n-      * @param typeRef a reference to the annotated type. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      * @param typeRef a reference to the annotated type. See {@link org.objectweb.asm.TypeReference}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LocalVariableAnnotationNode.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LocalVariableAnnotationNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LocalVariableNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LocalVariableNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,3 +64,3 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/LookupSwitchInsnNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LookupSwitchInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -76,1 +76,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * org.objectweb.asm.Type#getInternalName()}).\n@@ -85,1 +85,1 @@\n-    \/** The method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** The method's descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -97,1 +97,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n@@ -99,1 +99,1 @@\n-      * @param descriptor the method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the method's descriptor (see {@link org.objectweb.asm.Type}).\n@@ -112,1 +112,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n@@ -114,1 +114,1 @@\n-      * @param descriptor the method's descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the method's descriptor (see {@link org.objectweb.asm.Type}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/MethodInsnNode.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MethodInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,10 +64,10 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/MethodNode.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MethodNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n@@ -74,1 +74,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * org.objectweb.asm.Type#getInternalName()}).\n@@ -79,1 +79,1 @@\n-      * The access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). Valid values are {@code\n+      * The access flags (see {@link org.objectweb.asm.Opcodes}). Valid values are {@code\n@@ -94,1 +94,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ModuleExportNode.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleExportNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,3 +64,3 @@\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -89,1 +89,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -95,1 +95,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -110,1 +110,1 @@\n-      * jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      * org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n@@ -151,1 +151,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n+      *     org.objectweb.asm.Type#getInternalName()}). May be {@literal null}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ModuleNode.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n@@ -73,1 +73,1 @@\n-      * The internal name of the opened package (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * The internal name of the opened package (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -93,1 +93,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ModuleOpenNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleOpenNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n@@ -72,1 +72,1 @@\n-    \/** The internal name of the service (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}). *\/\n+    \/** The internal name of the service (see {@link org.objectweb.asm.Type#getInternalName()}). *\/\n@@ -77,1 +77,1 @@\n-      * {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}.\n+      * {@link org.objectweb.asm.Type#getInternalName()}.\n@@ -86,1 +86,1 @@\n-      *     one provider). See {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}.\n+      *     one provider). See {@link org.objectweb.asm.Type#getInternalName()}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ModuleProvideNode.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleProvideNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ModuleRequireNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleRequireNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -73,1 +73,1 @@\n-    \/** An array type descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** An array type descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -82,1 +82,1 @@\n-      * @param descriptor an array type descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor an array type descriptor (see {@link org.objectweb.asm.Type}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/MultiANewArrayInsnNode.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MultiANewArrayInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n@@ -75,1 +75,1 @@\n-      * The parameter's access flags (see {@link jdk.internal.org.objectweb.asm.Opcodes}). Valid values are {@code\n+      * The parameter's access flags (see {@link org.objectweb.asm.Opcodes}). Valid values are {@code\n@@ -84,1 +84,1 @@\n-      *     ACC_SYNTHETIC} or\/and {@code ACC_MANDATED} (see {@link jdk.internal.org.objectweb.asm.Opcodes}).\n+      *     ACC_SYNTHETIC} or\/and {@code ACC_MANDATED} (see {@link org.objectweb.asm.Opcodes}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/ParameterNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ParameterNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,6 +63,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n@@ -80,1 +80,1 @@\n-    \/** The record component descriptor (see {@link jdk.internal.org.objectweb.asm.Type}). *\/\n+    \/** The record component descriptor (see {@link org.objectweb.asm.Type}). *\/\n@@ -106,1 +106,1 @@\n-      * @param descriptor the record component descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the record component descriptor (see {@link org.objectweb.asm.Type}).\n@@ -123,1 +123,1 @@\n-      * @param descriptor the record component descriptor (see {@link jdk.internal.org.objectweb.asm.Type}).\n+      * @param descriptor the record component descriptor (see {@link org.objectweb.asm.Type}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/RecordComponentNode.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/RecordComponentNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -64,3 +64,3 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/TableSwitchInsnNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TableSwitchInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n@@ -102,1 +102,1 @@\n-      *     jdk.internal.org.objectweb.asm.Type#getInternalName()}), or {@literal null} to catch any exceptions (for\n+      *     org.objectweb.asm.Type#getInternalName()}), or {@literal null} to catch any exceptions (for\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/TryCatchBlockNode.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TryCatchBlockNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -62,2 +62,2 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n@@ -72,1 +72,1 @@\n-    \/** A reference to the annotated type. See {@link jdk.internal.org.objectweb.asm.TypeReference}. *\/\n+    \/** A reference to the annotated type. See {@link org.objectweb.asm.TypeReference}. *\/\n@@ -86,1 +86,1 @@\n-      * @param typeRef a reference to the annotated type. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      * @param typeRef a reference to the annotated type. See {@link org.objectweb.asm.TypeReference}.\n@@ -105,1 +105,1 @@\n-      * @param typeRef a reference to the annotated type. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      * @param typeRef a reference to the annotated type. See {@link org.objectweb.asm.TypeReference}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/TypeAnnotationNode.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TypeAnnotationNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n@@ -67,1 +67,1 @@\n- * internal name as parameter (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+ * internal name as parameter (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -75,1 +75,1 @@\n-      * an internal name (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      * an internal name (see {@link org.objectweb.asm.Type#getInternalName()}).\n@@ -85,1 +85,1 @@\n-      *     (see {@link jdk.internal.org.objectweb.asm.Type#getInternalName()}).\n+      *     (see {@link org.objectweb.asm.Type#getInternalName()}).\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/TypeInsnNode.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TypeInsnNode.java","status":"renamed"},{"patch":"@@ -59,1 +59,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/UnsupportedClassVersionException.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/UnsupportedClassVersionException.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/Util.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/Util.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree;\n+package org.objectweb.asm.tree;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.MethodVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/VarInsnNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/VarInsnNode.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -66,12 +66,12 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.IincInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InsnList;\n-import jdk.internal.org.objectweb.asm.tree.JumpInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LabelNode;\n-import jdk.internal.org.objectweb.asm.tree.LookupSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.TableSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n-import jdk.internal.org.objectweb.asm.tree.VarInsnNode;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.IincInsnNode;\n+import org.objectweb.asm.tree.InsnList;\n+import org.objectweb.asm.tree.JumpInsnNode;\n+import org.objectweb.asm.tree.LabelNode;\n+import org.objectweb.asm.tree.LookupSwitchInsnNode;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.TableSwitchInsnNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.tree.VarInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/Analyzer.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Analyzer.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/AnalyzerException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/AnalyzerException.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -63,12 +63,12 @@\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.FieldInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.IntInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InvokeDynamicInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LdcInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MultiANewArrayInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.TypeInsnNode;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.FieldInsnNode;\n+import org.objectweb.asm.tree.IntInsnNode;\n+import org.objectweb.asm.tree.InvokeDynamicInsnNode;\n+import org.objectweb.asm.tree.LdcInsnNode;\n+import org.objectweb.asm.tree.MethodInsnNode;\n+import org.objectweb.asm.tree.MultiANewArrayInsnNode;\n+import org.objectweb.asm.tree.TypeInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/BasicInterpreter.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicInterpreter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -62,1 +62,1 @@\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/BasicValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicValue.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -63,6 +63,6 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.FieldInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InvokeDynamicInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodInsnNode;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.FieldInsnNode;\n+import org.objectweb.asm.tree.InvokeDynamicInsnNode;\n+import org.objectweb.asm.tree.MethodInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/BasicVerifier.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicVerifier.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -64,9 +64,9 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.IincInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InvokeDynamicInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LabelNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MultiANewArrayInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.VarInsnNode;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.IincInsnNode;\n+import org.objectweb.asm.tree.InvokeDynamicInsnNode;\n+import org.objectweb.asm.tree.LabelNode;\n+import org.objectweb.asm.tree.MethodInsnNode;\n+import org.objectweb.asm.tree.MultiANewArrayInsnNode;\n+import org.objectweb.asm.tree.VarInsnNode;\n@@ -165,1 +165,1 @@\n-      * method is called by {@link Analyzer#analyze(String, jdk.internal.org.objectweb.asm.tree.MethodNode)} while\n+      * method is called by {@link Analyzer#analyze(String, org.objectweb.asm.tree.MethodNode)} while\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/Frame.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Frame.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -63,4 +63,4 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/Interpreter.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Interpreter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/SimpleVerifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SimpleVerifier.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/SmallSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SmallSet.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -65,7 +65,7 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.FieldInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.InvokeDynamicInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LdcInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodInsnNode;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.FieldInsnNode;\n+import org.objectweb.asm.tree.InvokeDynamicInsnNode;\n+import org.objectweb.asm.tree.LdcInsnNode;\n+import org.objectweb.asm.tree.MethodInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/SourceInterpreter.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceInterpreter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/SourceValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceValue.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n@@ -64,2 +64,2 @@\n-import jdk.internal.org.objectweb.asm.tree.JumpInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LabelNode;\n+import org.objectweb.asm.tree.JumpInsnNode;\n+import org.objectweb.asm.tree.LabelNode;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/Subroutine.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Subroutine.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.tree.analysis;\n+package org.objectweb.asm.tree.analysis;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/tree\/analysis\/Value.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Value.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -69,7 +69,7 @@\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n@@ -239,13 +239,13 @@\n-        text.add(\"import jdk.internal.org.objectweb.asm.AnnotationVisitor;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.Attribute;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.ClassReader;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.ClassWriter;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.ConstantDynamic;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.FieldVisitor;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.Handle;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.Label;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.MethodVisitor;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.Opcodes;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.Type;\\n\");\n-        text.add(\"import jdk.internal.org.objectweb.asm.TypePath;\\n\");\n+        text.add(\"import org.objectweb.asm.AnnotationVisitor;\\n\");\n+        text.add(\"import org.objectweb.asm.Attribute;\\n\");\n+        text.add(\"import org.objectweb.asm.ClassReader;\\n\");\n+        text.add(\"import org.objectweb.asm.ClassWriter;\\n\");\n+        text.add(\"import org.objectweb.asm.ConstantDynamic;\\n\");\n+        text.add(\"import org.objectweb.asm.FieldVisitor;\\n\");\n+        text.add(\"import org.objectweb.asm.Handle;\\n\");\n+        text.add(\"import org.objectweb.asm.Label;\\n\");\n+        text.add(\"import org.objectweb.asm.MethodVisitor;\\n\");\n+        text.add(\"import org.objectweb.asm.Opcodes;\\n\");\n+        text.add(\"import org.objectweb.asm.RecordComponentVisitor;\\n\");\n+        text.add(\"import org.objectweb.asm.Type;\\n\");\n+        text.add(\"import org.objectweb.asm.TypePath;\\n\");\n@@ -1203,1 +1203,1 @@\n-      *     {@link jdk.internal.org.objectweb.asm.TypeReference#FIELD}. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      *     {@link org.objectweb.asm.TypeReference#FIELD}. See {@link org.objectweb.asm.TypeReference}.\n@@ -1221,1 +1221,1 @@\n-      *     {@link jdk.internal.org.objectweb.asm.TypeReference#FIELD}. See {@link jdk.internal.org.objectweb.asm.TypeReference}.\n+      *     {@link org.objectweb.asm.TypeReference#FIELD}. See {@link org.objectweb.asm.TypeReference}.\n@@ -1586,1 +1586,1 @@\n-      *     jdk.internal.org.objectweb.asm.MethodVisitor#visitFrame}.\n+      *     org.objectweb.asm.MethodVisitor#visitFrame}.\n@@ -1601,1 +1601,1 @@\n-      *     jdk.internal.org.objectweb.asm.MethodVisitor#visitFrame}.\n+      *     org.objectweb.asm.MethodVisitor#visitFrame}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/ASMifier.java","additions":25,"deletions":25,"binary":false,"changes":50,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifier.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Label;\n@@ -66,1 +66,1 @@\n- * An {@link jdk.internal.org.objectweb.asm.Attribute} that can generate the ASM code to create an equivalent\n+ * An {@link org.objectweb.asm.Attribute} that can generate the ASM code to create an equivalent\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/ASMifierSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifierSupport.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,3 +62,3 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckAnnotationAdapter.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckAnnotationAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -70,22 +70,22 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n-import jdk.internal.org.objectweb.asm.tree.ClassNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Analyzer;\n-import jdk.internal.org.objectweb.asm.tree.analysis.AnalyzerException;\n-import jdk.internal.org.objectweb.asm.tree.analysis.BasicValue;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Frame;\n-import jdk.internal.org.objectweb.asm.tree.analysis.SimpleVerifier;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n+import org.objectweb.asm.tree.ClassNode;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.tree.analysis.Analyzer;\n+import org.objectweb.asm.tree.analysis.AnalyzerException;\n+import org.objectweb.asm.tree.analysis.BasicValue;\n+import org.objectweb.asm.tree.analysis.Frame;\n+import org.objectweb.asm.tree.analysis.SimpleVerifier;\n@@ -124,3 +124,3 @@\n- * jdk.internal.org.objectweb.asm.tree.analysis.AnalyzerException: Error at instruction 71: Expected I, but found .\n- *   at jdk.internal.org.objectweb.asm.tree.analysis.Analyzer.analyze(Analyzer.java:...)\n- *   at jdk.internal.org.objectweb.asm.util.CheckClassAdapter.verify(CheckClassAdapter.java:...)\n+ * org.objectweb.asm.tree.analysis.AnalyzerException: Error at instruction 71: Expected I, but found .\n+ *   at org.objectweb.asm.tree.analysis.Analyzer.analyze(Analyzer.java:...)\n+ *   at org.objectweb.asm.util.CheckClassAdapter.verify(CheckClassAdapter.java:...)\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckClassAdapter.java","additions":26,"deletions":26,"binary":false,"changes":52,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckClassAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,6 +62,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckFieldAdapter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckFieldAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -64,18 +64,18 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.tree.AbstractInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.FrameNode;\n-import jdk.internal.org.objectweb.asm.tree.InsnList;\n-import jdk.internal.org.objectweb.asm.tree.InsnNode;\n-import jdk.internal.org.objectweb.asm.tree.JumpInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.LabelNode;\n-import jdk.internal.org.objectweb.asm.tree.LookupSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.TableSwitchInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;\n-import jdk.internal.org.objectweb.asm.tree.TypeInsnNode;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Analyzer;\n-import jdk.internal.org.objectweb.asm.tree.analysis.AnalyzerException;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Frame;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Interpreter;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Value;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.tree.AbstractInsnNode;\n+import org.objectweb.asm.tree.FrameNode;\n+import org.objectweb.asm.tree.InsnList;\n+import org.objectweb.asm.tree.InsnNode;\n+import org.objectweb.asm.tree.JumpInsnNode;\n+import org.objectweb.asm.tree.LabelNode;\n+import org.objectweb.asm.tree.LookupSwitchInsnNode;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.TableSwitchInsnNode;\n+import org.objectweb.asm.tree.TryCatchBlockNode;\n+import org.objectweb.asm.tree.TypeInsnNode;\n+import org.objectweb.asm.tree.analysis.Analyzer;\n+import org.objectweb.asm.tree.analysis.AnalyzerException;\n+import org.objectweb.asm.tree.analysis.Frame;\n+import org.objectweb.asm.tree.analysis.Interpreter;\n+import org.objectweb.asm.tree.analysis.Value;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckFrameAnalyzer.java","additions":19,"deletions":19,"binary":false,"changes":38,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckFrameAnalyzer.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -70,16 +70,16 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ConstantDynamic;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n-import jdk.internal.org.objectweb.asm.tree.MethodNode;\n-import jdk.internal.org.objectweb.asm.tree.analysis.Analyzer;\n-import jdk.internal.org.objectweb.asm.tree.analysis.AnalyzerException;\n-import jdk.internal.org.objectweb.asm.tree.analysis.BasicValue;\n-import jdk.internal.org.objectweb.asm.tree.analysis.BasicVerifier;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n+import org.objectweb.asm.tree.MethodNode;\n+import org.objectweb.asm.tree.analysis.Analyzer;\n+import org.objectweb.asm.tree.analysis.AnalyzerException;\n+import org.objectweb.asm.tree.analysis.BasicValue;\n+import org.objectweb.asm.tree.analysis.BasicVerifier;\n@@ -93,1 +93,1 @@\n- * jdk.internal.org.objectweb.asm.tree.analysis.BasicVerifier}). For instance in a method whose signature is\n+ * org.objectweb.asm.tree.analysis.BasicVerifier}). For instance in a method whose signature is\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckMethodAdapter.java","additions":18,"deletions":18,"binary":false,"changes":36,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckMethodAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n@@ -102,1 +102,1 @@\n-      *     Opcodes#ACC_OPEN} access flag set in {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitModule}.\n+      *     Opcodes#ACC_OPEN} access flag set in {@link org.objectweb.asm.ClassVisitor#visitModule}.\n@@ -119,1 +119,1 @@\n-      *     Opcodes#ACC_OPEN} access flag set in {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitModule}.\n+      *     Opcodes#ACC_OPEN} access flag set in {@link org.objectweb.asm.ClassVisitor#visitModule}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckModuleAdapter.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckModuleAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,6 +62,6 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckRecordComponentAdapter.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckRecordComponentAdapter.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -63,2 +63,2 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.signature.SignatureVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.signature.SignatureVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/CheckSignatureAdapter.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckSignatureAdapter.java","status":"renamed"},{"patch":"@@ -0,0 +1,1342 @@\n+\/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * This file is available under and governed by the GNU General Public\n+ * License version 2 only, as published by the Free Software Foundation.\n+ * However, the following notice accompanied the original version of this\n+ * file:\n+ *\n+ * ASM: a very small and fast Java bytecode manipulation framework\n+ * Copyright (c) 2000-2011 INRIA, France Telecom\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ * 3. Neither the name of the copyright holders nor the names of its\n+ *    contributors may be used to endorse or promote products derived from\n+ *    this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+package org.objectweb.asm.util;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ConstantDynamic;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n+\n+\/**\n+ * An abstract converter from visit events to text.\n+ *\n+ * @author Eric Bruneton\n+ *\/\n+public abstract class Printer {\n+\n+    \/** The names of the Java Virtual Machine opcodes. *\/\n+    public static final String[] OPCODES = {\n+        \"NOP\", \/\/ 0 (0x0)\n+        \"ACONST_NULL\", \/\/ 1 (0x1)\n+        \"ICONST_M1\", \/\/ 2 (0x2)\n+        \"ICONST_0\", \/\/ 3 (0x3)\n+        \"ICONST_1\", \/\/ 4 (0x4)\n+        \"ICONST_2\", \/\/ 5 (0x5)\n+        \"ICONST_3\", \/\/ 6 (0x6)\n+        \"ICONST_4\", \/\/ 7 (0x7)\n+        \"ICONST_5\", \/\/ 8 (0x8)\n+        \"LCONST_0\", \/\/ 9 (0x9)\n+        \"LCONST_1\", \/\/ 10 (0xa)\n+        \"FCONST_0\", \/\/ 11 (0xb)\n+        \"FCONST_1\", \/\/ 12 (0xc)\n+        \"FCONST_2\", \/\/ 13 (0xd)\n+        \"DCONST_0\", \/\/ 14 (0xe)\n+        \"DCONST_1\", \/\/ 15 (0xf)\n+        \"BIPUSH\", \/\/ 16 (0x10)\n+        \"SIPUSH\", \/\/ 17 (0x11)\n+        \"LDC\", \/\/ 18 (0x12)\n+        \"LDC_W\", \/\/ 19 (0x13)\n+        \"LDC2_W\", \/\/ 20 (0x14)\n+        \"ILOAD\", \/\/ 21 (0x15)\n+        \"LLOAD\", \/\/ 22 (0x16)\n+        \"FLOAD\", \/\/ 23 (0x17)\n+        \"DLOAD\", \/\/ 24 (0x18)\n+        \"ALOAD\", \/\/ 25 (0x19)\n+        \"ILOAD_0\", \/\/ 26 (0x1a)\n+        \"ILOAD_1\", \/\/ 27 (0x1b)\n+        \"ILOAD_2\", \/\/ 28 (0x1c)\n+        \"ILOAD_3\", \/\/ 29 (0x1d)\n+        \"LLOAD_0\", \/\/ 30 (0x1e)\n+        \"LLOAD_1\", \/\/ 31 (0x1f)\n+        \"LLOAD_2\", \/\/ 32 (0x20)\n+        \"LLOAD_3\", \/\/ 33 (0x21)\n+        \"FLOAD_0\", \/\/ 34 (0x22)\n+        \"FLOAD_1\", \/\/ 35 (0x23)\n+        \"FLOAD_2\", \/\/ 36 (0x24)\n+        \"FLOAD_3\", \/\/ 37 (0x25)\n+        \"DLOAD_0\", \/\/ 38 (0x26)\n+        \"DLOAD_1\", \/\/ 39 (0x27)\n+        \"DLOAD_2\", \/\/ 40 (0x28)\n+        \"DLOAD_3\", \/\/ 41 (0x29)\n+        \"ALOAD_0\", \/\/ 42 (0x2a)\n+        \"ALOAD_1\", \/\/ 43 (0x2b)\n+        \"ALOAD_2\", \/\/ 44 (0x2c)\n+        \"ALOAD_3\", \/\/ 45 (0x2d)\n+        \"IALOAD\", \/\/ 46 (0x2e)\n+        \"LALOAD\", \/\/ 47 (0x2f)\n+        \"FALOAD\", \/\/ 48 (0x30)\n+        \"DALOAD\", \/\/ 49 (0x31)\n+        \"AALOAD\", \/\/ 50 (0x32)\n+        \"BALOAD\", \/\/ 51 (0x33)\n+        \"CALOAD\", \/\/ 52 (0x34)\n+        \"SALOAD\", \/\/ 53 (0x35)\n+        \"ISTORE\", \/\/ 54 (0x36)\n+        \"LSTORE\", \/\/ 55 (0x37)\n+        \"FSTORE\", \/\/ 56 (0x38)\n+        \"DSTORE\", \/\/ 57 (0x39)\n+        \"ASTORE\", \/\/ 58 (0x3a)\n+        \"ISTORE_0\", \/\/ 59 (0x3b)\n+        \"ISTORE_1\", \/\/ 60 (0x3c)\n+        \"ISTORE_2\", \/\/ 61 (0x3d)\n+        \"ISTORE_3\", \/\/ 62 (0x3e)\n+        \"LSTORE_0\", \/\/ 63 (0x3f)\n+        \"LSTORE_1\", \/\/ 64 (0x40)\n+        \"LSTORE_2\", \/\/ 65 (0x41)\n+        \"LSTORE_3\", \/\/ 66 (0x42)\n+        \"FSTORE_0\", \/\/ 67 (0x43)\n+        \"FSTORE_1\", \/\/ 68 (0x44)\n+        \"FSTORE_2\", \/\/ 69 (0x45)\n+        \"FSTORE_3\", \/\/ 70 (0x46)\n+        \"DSTORE_0\", \/\/ 71 (0x47)\n+        \"DSTORE_1\", \/\/ 72 (0x48)\n+        \"DSTORE_2\", \/\/ 73 (0x49)\n+        \"DSTORE_3\", \/\/ 74 (0x4a)\n+        \"ASTORE_0\", \/\/ 75 (0x4b)\n+        \"ASTORE_1\", \/\/ 76 (0x4c)\n+        \"ASTORE_2\", \/\/ 77 (0x4d)\n+        \"ASTORE_3\", \/\/ 78 (0x4e)\n+        \"IASTORE\", \/\/ 79 (0x4f)\n+        \"LASTORE\", \/\/ 80 (0x50)\n+        \"FASTORE\", \/\/ 81 (0x51)\n+        \"DASTORE\", \/\/ 82 (0x52)\n+        \"AASTORE\", \/\/ 83 (0x53)\n+        \"BASTORE\", \/\/ 84 (0x54)\n+        \"CASTORE\", \/\/ 85 (0x55)\n+        \"SASTORE\", \/\/ 86 (0x56)\n+        \"POP\", \/\/ 87 (0x57)\n+        \"POP2\", \/\/ 88 (0x58)\n+        \"DUP\", \/\/ 89 (0x59)\n+        \"DUP_X1\", \/\/ 90 (0x5a)\n+        \"DUP_X2\", \/\/ 91 (0x5b)\n+        \"DUP2\", \/\/ 92 (0x5c)\n+        \"DUP2_X1\", \/\/ 93 (0x5d)\n+        \"DUP2_X2\", \/\/ 94 (0x5e)\n+        \"SWAP\", \/\/ 95 (0x5f)\n+        \"IADD\", \/\/ 96 (0x60)\n+        \"LADD\", \/\/ 97 (0x61)\n+        \"FADD\", \/\/ 98 (0x62)\n+        \"DADD\", \/\/ 99 (0x63)\n+        \"ISUB\", \/\/ 100 (0x64)\n+        \"LSUB\", \/\/ 101 (0x65)\n+        \"FSUB\", \/\/ 102 (0x66)\n+        \"DSUB\", \/\/ 103 (0x67)\n+        \"IMUL\", \/\/ 104 (0x68)\n+        \"LMUL\", \/\/ 105 (0x69)\n+        \"FMUL\", \/\/ 106 (0x6a)\n+        \"DMUL\", \/\/ 107 (0x6b)\n+        \"IDIV\", \/\/ 108 (0x6c)\n+        \"LDIV\", \/\/ 109 (0x6d)\n+        \"FDIV\", \/\/ 110 (0x6e)\n+        \"DDIV\", \/\/ 111 (0x6f)\n+        \"IREM\", \/\/ 112 (0x70)\n+        \"LREM\", \/\/ 113 (0x71)\n+        \"FREM\", \/\/ 114 (0x72)\n+        \"DREM\", \/\/ 115 (0x73)\n+        \"INEG\", \/\/ 116 (0x74)\n+        \"LNEG\", \/\/ 117 (0x75)\n+        \"FNEG\", \/\/ 118 (0x76)\n+        \"DNEG\", \/\/ 119 (0x77)\n+        \"ISHL\", \/\/ 120 (0x78)\n+        \"LSHL\", \/\/ 121 (0x79)\n+        \"ISHR\", \/\/ 122 (0x7a)\n+        \"LSHR\", \/\/ 123 (0x7b)\n+        \"IUSHR\", \/\/ 124 (0x7c)\n+        \"LUSHR\", \/\/ 125 (0x7d)\n+        \"IAND\", \/\/ 126 (0x7e)\n+        \"LAND\", \/\/ 127 (0x7f)\n+        \"IOR\", \/\/ 128 (0x80)\n+        \"LOR\", \/\/ 129 (0x81)\n+        \"IXOR\", \/\/ 130 (0x82)\n+        \"LXOR\", \/\/ 131 (0x83)\n+        \"IINC\", \/\/ 132 (0x84)\n+        \"I2L\", \/\/ 133 (0x85)\n+        \"I2F\", \/\/ 134 (0x86)\n+        \"I2D\", \/\/ 135 (0x87)\n+        \"L2I\", \/\/ 136 (0x88)\n+        \"L2F\", \/\/ 137 (0x89)\n+        \"L2D\", \/\/ 138 (0x8a)\n+        \"F2I\", \/\/ 139 (0x8b)\n+        \"F2L\", \/\/ 140 (0x8c)\n+        \"F2D\", \/\/ 141 (0x8d)\n+        \"D2I\", \/\/ 142 (0x8e)\n+        \"D2L\", \/\/ 143 (0x8f)\n+        \"D2F\", \/\/ 144 (0x90)\n+        \"I2B\", \/\/ 145 (0x91)\n+        \"I2C\", \/\/ 146 (0x92)\n+        \"I2S\", \/\/ 147 (0x93)\n+        \"LCMP\", \/\/ 148 (0x94)\n+        \"FCMPL\", \/\/ 149 (0x95)\n+        \"FCMPG\", \/\/ 150 (0x96)\n+        \"DCMPL\", \/\/ 151 (0x97)\n+        \"DCMPG\", \/\/ 152 (0x98)\n+        \"IFEQ\", \/\/ 153 (0x99)\n+        \"IFNE\", \/\/ 154 (0x9a)\n+        \"IFLT\", \/\/ 155 (0x9b)\n+        \"IFGE\", \/\/ 156 (0x9c)\n+        \"IFGT\", \/\/ 157 (0x9d)\n+        \"IFLE\", \/\/ 158 (0x9e)\n+        \"IF_ICMPEQ\", \/\/ 159 (0x9f)\n+        \"IF_ICMPNE\", \/\/ 160 (0xa0)\n+        \"IF_ICMPLT\", \/\/ 161 (0xa1)\n+        \"IF_ICMPGE\", \/\/ 162 (0xa2)\n+        \"IF_ICMPGT\", \/\/ 163 (0xa3)\n+        \"IF_ICMPLE\", \/\/ 164 (0xa4)\n+        \"IF_ACMPEQ\", \/\/ 165 (0xa5)\n+        \"IF_ACMPNE\", \/\/ 166 (0xa6)\n+        \"GOTO\", \/\/ 167 (0xa7)\n+        \"JSR\", \/\/ 168 (0xa8)\n+        \"RET\", \/\/ 169 (0xa9)\n+        \"TABLESWITCH\", \/\/ 170 (0xaa)\n+        \"LOOKUPSWITCH\", \/\/ 171 (0xab)\n+        \"IRETURN\", \/\/ 172 (0xac)\n+        \"LRETURN\", \/\/ 173 (0xad)\n+        \"FRETURN\", \/\/ 174 (0xae)\n+        \"DRETURN\", \/\/ 175 (0xaf)\n+        \"ARETURN\", \/\/ 176 (0xb0)\n+        \"RETURN\", \/\/ 177 (0xb1)\n+        \"GETSTATIC\", \/\/ 178 (0xb2)\n+        \"PUTSTATIC\", \/\/ 179 (0xb3)\n+        \"GETFIELD\", \/\/ 180 (0xb4)\n+        \"PUTFIELD\", \/\/ 181 (0xb5)\n+        \"INVOKEVIRTUAL\", \/\/ 182 (0xb6)\n+        \"INVOKESPECIAL\", \/\/ 183 (0xb7)\n+        \"INVOKESTATIC\", \/\/ 184 (0xb8)\n+        \"INVOKEINTERFACE\", \/\/ 185 (0xb9)\n+        \"INVOKEDYNAMIC\", \/\/ 186 (0xba)\n+        \"NEW\", \/\/ 187 (0xbb)\n+        \"NEWARRAY\", \/\/ 188 (0xbc)\n+        \"ANEWARRAY\", \/\/ 189 (0xbd)\n+        \"ARRAYLENGTH\", \/\/ 190 (0xbe)\n+        \"ATHROW\", \/\/ 191 (0xbf)\n+        \"CHECKCAST\", \/\/ 192 (0xc0)\n+        \"INSTANCEOF\", \/\/ 193 (0xc1)\n+        \"MONITORENTER\", \/\/ 194 (0xc2)\n+        \"MONITOREXIT\", \/\/ 195 (0xc3)\n+        \"WIDE\", \/\/ 196 (0xc4)\n+        \"MULTIANEWARRAY\", \/\/ 197 (0xc5)\n+        \"IFNULL\", \/\/ 198 (0xc6)\n+        \"IFNONNULL\" \/\/ 199 (0xc7)\n+    };\n+\n+    \/**\n+      * The names of the {@code operand} values of the {@link\n+      * org.objectweb.asm.MethodVisitor#visitIntInsn} method when {@code opcode} is {@code NEWARRAY}.\n+      *\/\n+    public static final String[] TYPES = {\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"T_BOOLEAN\",\n+        \"T_CHAR\",\n+        \"T_FLOAT\",\n+        \"T_DOUBLE\",\n+        \"T_BYTE\",\n+        \"T_SHORT\",\n+        \"T_INT\",\n+        \"T_LONG\"\n+    };\n+\n+    \/** The names of the {@code tag} field values for {@link org.objectweb.asm.Handle}. *\/\n+    public static final String[] HANDLE_TAG = {\n+        \"\",\n+        \"H_GETFIELD\",\n+        \"H_GETSTATIC\",\n+        \"H_PUTFIELD\",\n+        \"H_PUTSTATIC\",\n+        \"H_INVOKEVIRTUAL\",\n+        \"H_INVOKESTATIC\",\n+        \"H_INVOKESPECIAL\",\n+        \"H_NEWINVOKESPECIAL\",\n+        \"H_INVOKEINTERFACE\"\n+    };\n+\n+    \/** Message of the UnsupportedOperationException thrown by methods which must be overridden. *\/\n+    private static final String UNSUPPORTED_OPERATION = \"Must be overridden\";\n+\n+    \/**\n+      * The ASM API version implemented by this class. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n+      *\/\n+    protected final int api;\n+\n+    \/** The builder used to build strings in the various visit methods. *\/\n+    protected final StringBuilder stringBuilder;\n+\n+    \/**\n+      * The text to be printed. Since the code of methods is not necessarily visited in sequential\n+      * order, one method after the other, but can be interlaced (some instructions from method one,\n+      * then some instructions from method two, then some instructions from method one again...), it is\n+      * not possible to print the visited instructions directly to a sequential stream. A class is\n+      * therefore printed in a two steps process: a string tree is constructed during the visit, and\n+      * printed to a sequential stream at the end of the visit. This string tree is stored in this\n+      * field, as a string list that can contain other string lists, which can themselves contain other\n+      * string lists, and so on.\n+      *\/\n+    public final List<Object> text;\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Constructor\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Constructs a new {@link Printer}.\n+      *\n+      * @param api the ASM API version implemented by this printer. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n+      *\/\n+    protected Printer(final int api) {\n+        this.api = api;\n+        this.stringBuilder = new StringBuilder();\n+        this.text = new ArrayList<>();\n+    }\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Classes\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Class header. See {@link org.objectweb.asm.ClassVisitor#visit}.\n+      *\n+      * @param version the class version. The minor version is stored in the 16 most significant bits,\n+      *     and the major version in the 16 least significant bits.\n+      * @param access the class's access flags (see {@link Opcodes}). This parameter also indicates if\n+      *     the class is deprecated.\n+      * @param name the internal name of the class (see {@link Type#getInternalName()}).\n+      * @param signature the signature of this class. May be {@literal null} if the class is not a\n+      *     generic one, and does not extend or implement generic classes or interfaces.\n+      * @param superName the internal of name of the super class (see {@link Type#getInternalName()}).\n+      *     For interfaces, the super class is {@link Object}. May be {@literal null}, but only for the\n+      *     {@link Object} class.\n+      * @param interfaces the internal names of the class's interfaces (see {@link\n+      *     Type#getInternalName()}). May be {@literal null}.\n+      *\/\n+    public abstract void visit(\n+            int version,\n+            int access,\n+            String name,\n+            String signature,\n+            String superName,\n+            String[] interfaces);\n+\n+    \/**\n+      * Class source. See {@link org.objectweb.asm.ClassVisitor#visitSource}.\n+      *\n+      * @param source the name of the source file from which the class was compiled. May be {@literal\n+      *     null}.\n+      * @param debug additional debug information to compute the correspondence between source and\n+      *     compiled elements of the class. May be {@literal null}.\n+      *\/\n+    public abstract void visitSource(String source, String debug);\n+\n+    \/**\n+      * Module. See {@link org.objectweb.asm.ClassVisitor#visitModule}.\n+      *\n+      * @param name the fully qualified name (using dots) of the module.\n+      * @param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\n+      *     ACC_MANDATED}.\n+      * @param version the module version, or {@literal null}.\n+      * @return the printer.\n+      *\/\n+    public Printer visitModule(final String name, final int access, final String version) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Visits the nest host class of the class. A nest is a set of classes of the same package that\n+      * share access to their private members. One of these classes, called the host, lists the other\n+      * members of the nest, which in turn should link to the host of their nest. This method must be\n+      * called only once and only if the visited class is a non-host member of a nest. A class is\n+      * implicitly its own nest, so it's invalid to call this method with the visited class name as\n+      * argument.\n+      *\n+      * @param nestHost the internal name of the host class of the nest (see {@link\n+      *     Type#getInternalName()}).\n+      *\/\n+    public void visitNestHost(final String nestHost) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Class outer class. See {@link org.objectweb.asm.ClassVisitor#visitOuterClass}.\n+      *\n+      * @param owner internal name of the enclosing class of the class (see {@link\n+      *     Type#getInternalName()}).\n+      * @param name the name of the method that contains the class, or {@literal null} if the class is\n+      *     not enclosed in a method of its enclosing class.\n+      * @param descriptor the descriptor of the method that contains the class, or {@literal null} if\n+      *     the class is not enclosed in a method of its enclosing class.\n+      *\/\n+    public abstract void visitOuterClass(String owner, String name, String descriptor);\n+\n+    \/**\n+      * Class annotation. See {@link org.objectweb.asm.ClassVisitor#visitAnnotation}.\n+      *\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitClassAnnotation(String descriptor, boolean visible);\n+\n+    \/**\n+      * Class type annotation. See {@link org.objectweb.asm.ClassVisitor#visitTypeAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n+      *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n+      *     {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitClassTypeAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Class attribute. See {@link org.objectweb.asm.ClassVisitor#visitAttribute}.\n+      *\n+      * @param attribute an attribute.\n+      *\/\n+    public abstract void visitClassAttribute(Attribute attribute);\n+\n+    \/**\n+      * Visits a member of the nest. A nest is a set of classes of the same package that share access\n+      * to their private members. One of these classes, called the host, lists the other members of the\n+      * nest, which in turn should link to the host of their nest. This method must be called only if\n+      * the visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\n+      * it's invalid to call this method with the visited class name as argument.\n+      *\n+      * @param nestMember the internal name of a nest member (see {@link Type#getInternalName()}).\n+      *\/\n+    public void visitNestMember(final String nestMember) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\n+      * current class. See {@link org.objectweb.asm.ClassVisitor#visitPermittedSubclass(String)}.\n+      *\n+      * @param permittedSubclass the internal name of a permitted subclass (see {@link\n+      *     Type#getInternalName()}).\n+      *\/\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Class inner name. See {@link org.objectweb.asm.ClassVisitor#visitInnerClass}.\n+      *\n+      * @param name the internal name of an inner class (see {@link Type#getInternalName()}).\n+      * @param outerName the internal name of the class to which the inner class belongs (see {@link\n+      *     Type#getInternalName()}). May be {@literal null} for not member classes.\n+      * @param innerName the (simple) name of the inner class inside its enclosing class. May be\n+      *     {@literal null} for anonymous inner classes.\n+      * @param access the access flags of the inner class as originally declared in the enclosing\n+      *     class.\n+      *\/\n+    public abstract void visitInnerClass(String name, String outerName, String innerName, int access);\n+\n+    \/**\n+      * Visits a record component of the class. See {@link\n+      * org.objectweb.asm.ClassVisitor#visitRecordComponent(String, String, String)}.\n+      *\n+      * @param name the field's name.\n+      * @param descriptor the record component descriptor (see {@link Type}).\n+      * @param signature the record component signature. May be {@literal null} if the record component\n+      *     type does not use generic types.\n+      * @return a visitor to visit this record component annotations and attributes, or {@literal null}\n+      *     if this class visitor is not interested in visiting these annotations and attributes.\n+      *\/\n+    public Printer visitRecordComponent(\n+            final String name, final String descriptor, final String signature) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Class field. See {@link org.objectweb.asm.ClassVisitor#visitField}.\n+      *\n+      * @param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\n+      *     the field is synthetic and\/or deprecated.\n+      * @param name the field's name.\n+      * @param descriptor the field's descriptor (see {@link Type}).\n+      * @param signature the field's signature. May be {@literal null} if the field's type does not use\n+      *     generic types.\n+      * @param value the field's initial value. This parameter, which may be {@literal null} if the\n+      *     field does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\n+      *     Long}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\n+      *     or {@code String} fields respectively). <i>This parameter is only used for static\n+      *     fields<\/i>. Its value is ignored for non static fields, which must be initialized through\n+      *     bytecode instructions in constructors or methods.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitField(\n+            int access, String name, String descriptor, String signature, Object value);\n+\n+    \/**\n+      * Class method. See {@link org.objectweb.asm.ClassVisitor#visitMethod}.\n+      *\n+      * @param access the method's access flags (see {@link Opcodes}). This parameter also indicates if\n+      *     the method is synthetic and\/or deprecated.\n+      * @param name the method's name.\n+      * @param descriptor the method's descriptor (see {@link Type}).\n+      * @param signature the method's signature. May be {@literal null} if the method parameters,\n+      *     return type and exceptions do not use generic types.\n+      * @param exceptions the internal names of the method's exception classes (see {@link\n+      *     Type#getInternalName()}). May be {@literal null}.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitMethod(\n+            int access, String name, String descriptor, String signature, String[] exceptions);\n+\n+    \/** Class end. See {@link org.objectweb.asm.ClassVisitor#visitEnd}. *\/\n+    public abstract void visitClassEnd();\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Modules\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Module main class. See {@link org.objectweb.asm.ModuleVisitor#visitMainClass}.\n+      *\n+      * @param mainClass the internal name of the main class of the current module (see {@link\n+      *     Type#getInternalName()}).\n+      *\/\n+    public void visitMainClass(final String mainClass) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module package. See {@link org.objectweb.asm.ModuleVisitor#visitPackage}.\n+      *\n+      * @param packaze the internal name of a package (see {@link Type#getInternalName()}).\n+      *\/\n+    public void visitPackage(final String packaze) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module require. See {@link org.objectweb.asm.ModuleVisitor#visitRequire}.\n+      *\n+      * @param module the fully qualified name (using dots) of the dependence.\n+      * @param access the access flag of the dependence among {@code ACC_TRANSITIVE}, {@code\n+      *     ACC_STATIC_PHASE}, {@code ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n+      * @param version the module version at compile time, or {@literal null}.\n+      *\/\n+    public void visitRequire(final String module, final int access, final String version) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module export. See {@link org.objectweb.asm.ModuleVisitor#visitExport}.\n+      *\n+      * @param packaze the internal name of the exported package (see {@link Type#getInternalName()}).\n+      * @param access the access flag of the exported package, valid values are among {@code\n+      *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n+      * @param modules the fully qualified names (using dots) of the modules that can access the public\n+      *     classes of the exported package, or {@literal null}.\n+      *\/\n+    public void visitExport(final String packaze, final int access, final String... modules) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module open. See {@link org.objectweb.asm.ModuleVisitor#visitOpen}.\n+      *\n+      * @param packaze the internal name of the opened package (see {@link Type#getInternalName()}).\n+      * @param access the access flag of the opened package, valid values are among {@code\n+      *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.\n+      * @param modules the fully qualified names (using dots) of the modules that can use deep\n+      *     reflection to the classes of the open package, or {@literal null}.\n+      *\/\n+    public void visitOpen(final String packaze, final int access, final String... modules) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module use. See {@link org.objectweb.asm.ModuleVisitor#visitUse}.\n+      *\n+      * @param service the internal name of the service (see {@link Type#getInternalName()}).\n+      *\/\n+    public void visitUse(final String service) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Module provide. See {@link org.objectweb.asm.ModuleVisitor#visitProvide}.\n+      *\n+      * @param service the internal name of the service (see {@link Type#getInternalName()}).\n+      * @param providers the internal names of the implementations of the service (there is at least\n+      *     one provider).\n+      *\/\n+    public void visitProvide(final String service, final String... providers) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/** Module end. See {@link org.objectweb.asm.ModuleVisitor#visitEnd}. *\/\n+    public void visitModuleEnd() {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Annotations\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Annotation value. See {@link org.objectweb.asm.AnnotationVisitor#visit}.\n+      *\n+      * @param name the value name.\n+      * @param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\n+      *     Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n+      *     {@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\n+      *     value can also be an array of byte, boolean, short, char, int, long, float or double values\n+      *     (this is equivalent to using {@link #visitArray} and visiting each array element in turn,\n+      *     but is more convenient).\n+      *\/\n+    \/\/ DontCheck(OverloadMethodsDeclarationOrder): overloads are semantically different.\n+    public abstract void visit(String name, Object value);\n+\n+    \/**\n+      * Annotation enum value. See {@link org.objectweb.asm.AnnotationVisitor#visitEnum}.\n+      *\n+      * @param name the value name.\n+      * @param descriptor the class descriptor of the enumeration class.\n+      * @param value the actual enumeration value.\n+      *\/\n+    public abstract void visitEnum(String name, String descriptor, String value);\n+\n+    \/**\n+      * Nested annotation value. See {@link org.objectweb.asm.AnnotationVisitor#visitAnnotation}.\n+      *\n+      * @param name the value name.\n+      * @param descriptor the class descriptor of the nested annotation class.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitAnnotation(String name, String descriptor);\n+\n+    \/**\n+      * Annotation array value. See {@link org.objectweb.asm.AnnotationVisitor#visitArray}.\n+      *\n+      * @param name the value name.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitArray(String name);\n+\n+    \/** Annotation end. See {@link org.objectweb.asm.AnnotationVisitor#visitEnd}. *\/\n+    public abstract void visitAnnotationEnd();\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Record components\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Visits an annotation of the record component. See {@link\n+      * org.objectweb.asm.RecordComponentVisitor#visitAnnotation}.\n+      *\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n+      *     interested in visiting this annotation.\n+      *\/\n+    public Printer visitRecordComponentAnnotation(final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Visits an annotation on a type in the record component signature. See {@link\n+      * org.objectweb.asm.RecordComponentVisitor#visitTypeAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n+      *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n+      *     {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n+      *     interested in visiting this annotation.\n+      *\/\n+    public Printer visitRecordComponentTypeAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Visits a non standard attribute of the record component. See {@link\n+      * org.objectweb.asm.RecordComponentVisitor#visitAttribute}.\n+      *\n+      * @param attribute an attribute.\n+      *\/\n+    public void visitRecordComponentAttribute(final Attribute attribute) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Visits the end of the record component. See {@link\n+      * org.objectweb.asm.RecordComponentVisitor#visitEnd}. This method, which is the last one to be\n+      * called, is used to inform the visitor that everything have been visited.\n+      *\/\n+    public void visitRecordComponentEnd() {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Fields\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Field annotation. See {@link org.objectweb.asm.FieldVisitor#visitAnnotation}.\n+      *\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitFieldAnnotation(String descriptor, boolean visible);\n+\n+    \/**\n+      * Field type annotation. See {@link org.objectweb.asm.FieldVisitor#visitTypeAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#FIELD}. See {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitFieldTypeAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Field attribute. See {@link org.objectweb.asm.FieldVisitor#visitAttribute}.\n+      *\n+      * @param attribute an attribute.\n+      *\/\n+    public abstract void visitFieldAttribute(Attribute attribute);\n+\n+    \/** Field end. See {@link org.objectweb.asm.FieldVisitor#visitEnd}. *\/\n+    public abstract void visitFieldEnd();\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Methods\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Method parameter. See {@link org.objectweb.asm.MethodVisitor#visitParameter(String, int)}.\n+      *\n+      * @param name parameter name or {@literal null} if none is provided.\n+      * @param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\n+      *     or\/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).\n+      *\/\n+    public void visitParameter(final String name, final int access) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method default annotation. See {@link org.objectweb.asm.MethodVisitor#visitAnnotationDefault}.\n+      *\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitAnnotationDefault();\n+\n+    \/**\n+      * Method annotation. See {@link org.objectweb.asm.MethodVisitor#visitAnnotation}.\n+      *\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitMethodAnnotation(String descriptor, boolean visible);\n+\n+    \/**\n+      * Method type annotation. See {@link org.objectweb.asm.MethodVisitor#visitTypeAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\n+      *     TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\n+      *     TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\n+      *     TypeReference#THROWS}. See {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitMethodTypeAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Number of method parameters that can have annotations. See {@link\n+      * org.objectweb.asm.MethodVisitor#visitAnnotableParameterCount}.\n+      *\n+      * @param parameterCount the number of method parameters than can have annotations. This number\n+      *     must be less or equal than the number of parameter types in the method descriptor. It can\n+      *     be strictly less when a method has synthetic parameters and when these parameters are\n+      *     ignored when computing parameter indices for the purpose of parameter annotations (see\n+      *     https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.7.18).\n+      * @param visible {@literal true} to define the number of method parameters that can have\n+      *     annotations visible at runtime, {@literal false} to define the number of method parameters\n+      *     that can have annotations invisible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitAnnotableParameterCount(final int parameterCount, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method parameter annotation. See {@link\n+      * org.objectweb.asm.MethodVisitor#visitParameterAnnotation}.\n+      *\n+      * @param parameter the parameter index. This index must be strictly smaller than the number of\n+      *     parameters in the method descriptor, and strictly smaller than the parameter count\n+      *     specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i\n+      *     is not required to correspond to the i'th parameter descriptor in the method\n+      *     descriptor<\/i>, in particular in case of synthetic parameters (see\n+      *     https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.7.18).\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public abstract Printer visitParameterAnnotation(\n+            int parameter, String descriptor, boolean visible);\n+\n+    \/**\n+      * Method attribute. See {@link org.objectweb.asm.MethodVisitor#visitAttribute}.\n+      *\n+      * @param attribute an attribute.\n+      *\/\n+    public abstract void visitMethodAttribute(Attribute attribute);\n+\n+    \/** Method start. See {@link org.objectweb.asm.MethodVisitor#visitCode}. *\/\n+    public abstract void visitCode();\n+\n+    \/**\n+      * Method stack frame. See {@link org.objectweb.asm.MethodVisitor#visitFrame}.\n+      *\n+      * @param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded\n+      *     frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link\n+      *     Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames.\n+      * @param numLocal the number of local variables in the visited frame.\n+      * @param local the local variable types in this frame. This array must not be modified. Primitive\n+      *     types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\n+      *     Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or\n+      *     {@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element).\n+      *     Reference types are represented by String objects (representing internal names, see {@link\n+      *     Type#getInternalName()}), and uninitialized types by Label objects (this label designates\n+      *     the NEW instruction that created this uninitialized value).\n+      * @param numStack the number of operand stack elements in the visited frame.\n+      * @param stack the operand stack types in this frame. This array must not be modified. Its\n+      *     content has the same format as the \"local\" array.\n+      *\/\n+    public abstract void visitFrame(\n+            int type, int numLocal, Object[] local, int numStack, Object[] stack);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitInsn}\n+      *\n+      * @param opcode the opcode of the instruction to be visited. This opcode is either NOP,\n+      *     ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,\n+      *     LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,\n+      *     FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,\n+      *     AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,\n+      *     SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,\n+      *     FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,\n+      *     LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,\n+      *     D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,\n+      *     DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.\n+      *\/\n+    public abstract void visitInsn(int opcode);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitIntInsn}.\n+      *\n+      * @param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH\n+      *     or NEWARRAY.\n+      * @param operand the operand of the instruction to be visited.<br>\n+      *     When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE.\n+      *     <br>\n+      *     When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE.\n+      *     <br>\n+      *     When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link\n+      *     Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},\n+      *     {@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.\n+      *\/\n+    public abstract void visitIntInsn(int opcode, int operand);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitVarInsn}.\n+      *\n+      * @param opcode the opcode of the local variable instruction to be visited. This opcode is either\n+      *     ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET.\n+      * @param varIndex the operand of the instruction to be visited. This operand is the index of a\n+      *     local variable.\n+      *\/\n+    public abstract void visitVarInsn(int opcode, int varIndex);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitTypeInsn}.\n+      *\n+      * @param opcode the opcode of the type instruction to be visited. This opcode is either NEW,\n+      *     ANEWARRAY, CHECKCAST or INSTANCEOF.\n+      * @param type the operand of the instruction to be visited. This operand must be the internal\n+      *     name of an object or array class (see {@link Type#getInternalName()}).\n+      *\/\n+    public abstract void visitTypeInsn(int opcode, String type);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitFieldInsn}.\n+      *\n+      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n+      *     GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n+      * @param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n+      * @param name the field's name.\n+      * @param descriptor the field's descriptor (see {@link Type}).\n+      *\/\n+    public abstract void visitFieldInsn(int opcode, String owner, String name, String descriptor);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitMethodInsn}.\n+      *\n+      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n+      *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n+      * @param owner the internal name of the method's owner class (see {@link\n+      *     Type#getInternalName()}).\n+      * @param name the method's name.\n+      * @param descriptor the method's descriptor (see {@link Type}).\n+      * @deprecated use {@link #visitMethodInsn(int, String, String, String, boolean)} instead.\n+      *\/\n+    @Deprecated\n+    public void visitMethodInsn(\n+            final int opcode, final String owner, final String name, final String descriptor) {\n+        \/\/ This method was abstract before ASM5, and was therefore always overridden (without any\n+        \/\/ call to 'super'). Thus, at this point we necessarily have api >= ASM5, and we must then\n+        \/\/ redirect the method call to the ASM5 visitMethodInsn() method.\n+        visitMethodInsn(opcode, owner, name, descriptor, opcode == Opcodes.INVOKEINTERFACE);\n+    }\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitMethodInsn}.\n+      *\n+      * @param opcode the opcode of the type instruction to be visited. This opcode is either\n+      *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n+      * @param owner the internal name of the method's owner class (see {@link\n+      *     Type#getInternalName()}).\n+      * @param name the method's name.\n+      * @param descriptor the method's descriptor (see {@link Type}).\n+      * @param isInterface if the method's owner class is an interface.\n+      *\/\n+    public void visitMethodInsn(\n+            final int opcode,\n+            final String owner,\n+            final String name,\n+            final String descriptor,\n+            final boolean isInterface) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn}.\n+      *\n+      * @param name the method's name.\n+      * @param descriptor the method's descriptor (see {@link Type}).\n+      * @param bootstrapMethodHandle the bootstrap method.\n+      * @param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\n+      *     an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\n+      *     Type} or {@link Handle} value. This method is allowed to modify the content of the array so\n+      *     a caller should expect that this array may change.\n+      *\/\n+    public abstract void visitInvokeDynamicInsn(\n+            String name,\n+            String descriptor,\n+            Handle bootstrapMethodHandle,\n+            Object... bootstrapMethodArguments);\n+\n+    \/**\n+      * Method jump instruction. See {@link org.objectweb.asm.MethodVisitor#visitJumpInsn}.\n+      *\n+      * @param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\n+      *     IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\n+      *     IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n+      * @param label the operand of the instruction to be visited. This operand is a label that\n+      *     designates the instruction to which the jump instruction may jump.\n+      *\/\n+    public abstract void visitJumpInsn(int opcode, Label label);\n+\n+    \/**\n+      * Method label. See {@link org.objectweb.asm.MethodVisitor#visitLabel}.\n+      *\n+      * @param label a {@link Label} object.\n+      *\/\n+    public abstract void visitLabel(Label label);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitLdcInsn}.\n+      *\n+      * @param value the constant to be loaded on the stack. This parameter must be a non null {@link\n+      *     Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link\n+      *     Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is\n+      *     49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle\n+      *     constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant\n+      *     dynamic for classes whose version is 55.\n+      *\/\n+    public abstract void visitLdcInsn(Object value);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitIincInsn}.\n+      *\n+      * @param varIndex index of the local variable to be incremented.\n+      * @param increment amount to increment the local variable by.\n+      *\/\n+    public abstract void visitIincInsn(int varIndex, int increment);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitTableSwitchInsn}.\n+      *\n+      * @param min the minimum key value.\n+      * @param max the maximum key value.\n+      * @param dflt beginning of the default handler block.\n+      * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\n+      *     handler block for the {@code min + i} key.\n+      *\/\n+    public abstract void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn}.\n+      *\n+      * @param dflt beginning of the default handler block.\n+      * @param keys the values of the keys.\n+      * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\n+      *     handler block for the {@code keys[i]} key.\n+      *\/\n+    public abstract void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);\n+\n+    \/**\n+      * Method instruction. See {@link org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn}.\n+      *\n+      * @param descriptor an array type descriptor (see {@link Type}).\n+      * @param numDimensions the number of dimensions of the array to allocate.\n+      *\/\n+    public abstract void visitMultiANewArrayInsn(String descriptor, int numDimensions);\n+\n+    \/**\n+      * Instruction type annotation. See {@link org.objectweb.asm.MethodVisitor#visitInsnAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link\n+      *     TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link\n+      *     TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link\n+      *     TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\n+      *     TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link\n+      *     TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitInsnAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method exception handler. See {@link org.objectweb.asm.MethodVisitor#visitTryCatchBlock}.\n+      *\n+      * @param start the beginning of the exception handler's scope (inclusive).\n+      * @param end the end of the exception handler's scope (exclusive).\n+      * @param handler the beginning of the exception handler's code.\n+      * @param type the internal name of the type of exceptions handled by the handler (see {@link\n+      *     Type#getInternalName()}), or {@literal null} to catch any exceptions (for \"finally\"\n+      *     blocks).\n+      *\/\n+    public abstract void visitTryCatchBlock(Label start, Label end, Label handler, String type);\n+\n+    \/**\n+      * Try catch block type annotation. See {@link\n+      * org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitTryCatchAnnotation(\n+            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method debug info. See {@link org.objectweb.asm.MethodVisitor#visitLocalVariable}.\n+      *\n+      * @param name the name of a local variable.\n+      * @param descriptor the type descriptor of this local variable.\n+      * @param signature the type signature of this local variable. May be {@literal null} if the local\n+      *     variable type does not use generic types.\n+      * @param start the first instruction corresponding to the scope of this local variable\n+      *     (inclusive).\n+      * @param end the last instruction corresponding to the scope of this local variable (exclusive).\n+      * @param index the local variable's index.\n+      *\/\n+    public abstract void visitLocalVariable(\n+            String name, String descriptor, String signature, Label start, Label end, int index);\n+\n+    \/**\n+      * Local variable type annotation. See {@link\n+      * org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation}.\n+      *\n+      * @param typeRef a reference to the annotated type. The sort of this type reference must be\n+      *     {@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\n+      *     TypeReference}.\n+      * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n+      *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n+      *     'typeRef' as a whole.\n+      * @param start the fist instructions corresponding to the continuous ranges that make the scope\n+      *     of this local variable (inclusive).\n+      * @param end the last instructions corresponding to the continuous ranges that make the scope of\n+      *     this local variable (exclusive). This array must have the same size as the 'start' array.\n+      * @param index the local variable's index in each range. This array must have the same size as\n+      *     the 'start' array.\n+      * @param descriptor the class descriptor of the annotation class.\n+      * @param visible {@literal true} if the annotation is visible at runtime.\n+      * @return the printer.\n+      *\/\n+    public Printer visitLocalVariableAnnotation(\n+            final int typeRef,\n+            final TypePath typePath,\n+            final Label[] start,\n+            final Label[] end,\n+            final int[] index,\n+            final String descriptor,\n+            final boolean visible) {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);\n+    }\n+\n+    \/**\n+      * Method debug info. See {@link org.objectweb.asm.MethodVisitor#visitLineNumber}.\n+      *\n+      * @param line a line number. This number refers to the source file from which the class was\n+      *     compiled.\n+      * @param start the first instruction corresponding to this line number.\n+      *\/\n+    public abstract void visitLineNumber(int line, Label start);\n+\n+    \/**\n+      * Method max stack and max locals. See {@link org.objectweb.asm.MethodVisitor#visitMaxs}.\n+      *\n+      * @param maxStack maximum stack size of the method.\n+      * @param maxLocals maximum number of local variables for the method.\n+      *\/\n+    public abstract void visitMaxs(int maxStack, int maxLocals);\n+\n+    \/** Method end. See {@link org.objectweb.asm.MethodVisitor#visitEnd}. *\/\n+    public abstract void visitMethodEnd();\n+\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Print and utility methods\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Returns the text constructed by this visitor.\n+      *\n+      * @return the text constructed by this visitor. See {@link #text}.\n+      *\/\n+    public List<Object> getText() {\n+        return text;\n+    }\n+\n+    \/**\n+      * Prints the text constructed by this visitor.\n+      *\n+      * @param printWriter the print writer to be used.\n+      *\/\n+    public void print(final PrintWriter printWriter) {\n+        printList(printWriter, text);\n+    }\n+\n+    \/**\n+      * Prints the given string tree.\n+      *\n+      * @param printWriter the writer to be used to print the tree.\n+      * @param list a string tree, i.e., a string list that can contain other string lists, and so on\n+      *     recursively.\n+      *\/\n+    static void printList(final PrintWriter printWriter, final List<?> list) {\n+        for (Object o : list) {\n+            if (o instanceof List) {\n+                printList(printWriter, (List<?>) o);\n+            } else {\n+                printWriter.print(o.toString());\n+            }\n+        }\n+    }\n+\n+    \/**\n+      * Appends a quoted string to the given string builder.\n+      *\n+      * @param stringBuilder the buffer where the string must be added.\n+      * @param string the string to be added.\n+      *\/\n+    public static void appendString(final StringBuilder stringBuilder, final String string) {\n+        stringBuilder.append('\\\"');\n+        for (int i = 0; i < string.length(); ++i) {\n+            char c = string.charAt(i);\n+            if (c == '\\n') {\n+                stringBuilder.append(\"\\\\n\");\n+            } else if (c == '\\r') {\n+                stringBuilder.append(\"\\\\r\");\n+            } else if (c == '\\\\') {\n+                stringBuilder.append(\"\\\\\\\\\");\n+            } else if (c == '\"') {\n+                stringBuilder.append(\"\\\\\\\"\");\n+            } else if (c < 0x20 || c > 0x7f) {\n+                stringBuilder.append(\"\\\\u\");\n+                if (c < 0x10) {\n+                    stringBuilder.append(\"000\");\n+                } else if (c < 0x100) {\n+                    stringBuilder.append(\"00\");\n+                } else if (c < 0x1000) {\n+                    stringBuilder.append('0');\n+                }\n+                stringBuilder.append(Integer.toString(c, 16));\n+            } else {\n+                stringBuilder.append(c);\n+            }\n+        }\n+        stringBuilder.append('\\\"');\n+    }\n+\n+    \/**\n+      * Prints the given class to the given output.\n+      *\n+      * <p>Command line arguments: [-nodebug] &lt;binary class name or class file name &gt;\n+      *\n+      * @param args the command line arguments.\n+      * @param usage the help message to show when command line arguments are incorrect.\n+      * @param printer the printer to convert the class into text.\n+      * @param output where to print the result.\n+      * @param logger where to log errors.\n+      * @throws IOException if the class cannot be found, or if an IOException occurs.\n+      *\/\n+    static void main(\n+            final String[] args,\n+            final String usage,\n+            final Printer printer,\n+            final PrintWriter output,\n+            final PrintWriter logger)\n+            throws IOException {\n+        if (args.length < 1\n+                || args.length > 2\n+                || ((args[0].equals(\"-debug\") || args[0].equals(\"-nodebug\")) && args.length != 2)) {\n+            logger.println(usage);\n+            return;\n+        }\n+\n+        TraceClassVisitor traceClassVisitor = new TraceClassVisitor(null, printer, output);\n+\n+        String className;\n+        int parsingOptions;\n+        if (args[0].equals(\"-nodebug\")) {\n+            className = args[1];\n+            parsingOptions = ClassReader.SKIP_DEBUG;\n+        } else {\n+            className = args[0];\n+            parsingOptions = 0;\n+        }\n+\n+        if (className.endsWith(\".class\")\n+                || className.indexOf('\\\\') != -1\n+                || className.indexOf('\/') != -1) {\n+            \/\/ Can't fix PMD warning for 1.5 compatibility.\n+            try (InputStream inputStream = new FileInputStream(className)) { \/\/ NOPMD(AvoidFileStream)\n+                new ClassReader(inputStream).accept(traceClassVisitor, parsingOptions);\n+            }\n+        } else {\n+            new ClassReader(className).accept(traceClassVisitor, parsingOptions);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/Printer.java","additions":1342,"deletions":0,"binary":false,"changes":1342,"status":"added"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -69,8 +69,8 @@\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-import jdk.internal.org.objectweb.asm.TypeReference;\n-import jdk.internal.org.objectweb.asm.signature.SignatureReader;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.TypePath;\n+import org.objectweb.asm.TypeReference;\n+import org.objectweb.asm.signature.SignatureReader;\n@@ -1591,1 +1591,1 @@\n-      *     jdk.internal.org.objectweb.asm.MethodVisitor#visitFrame}.\n+      *     org.objectweb.asm.MethodVisitor#visitFrame}.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/Textifier.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Textifier.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -63,1 +63,1 @@\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.Label;\n@@ -66,1 +66,1 @@\n- * An {@link jdk.internal.org.objectweb.asm.Attribute} that can print a readable representation of itself.\n+ * An {@link org.objectweb.asm.Attribute} that can print a readable representation of itself.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TextifierSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TextifierSupport.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,2 +62,2 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceAnnotationVisitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceAnnotationVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -63,9 +63,9 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceClassVisitor.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceClassVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,5 +62,5 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceFieldVisitor.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceFieldVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,7 +62,7 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceMethodVisitor.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceMethodVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,2 +62,2 @@\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ModuleVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceModuleVisitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceModuleVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -62,5 +62,5 @@\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.RecordComponentVisitor;\n-import jdk.internal.org.objectweb.asm.TypePath;\n+import org.objectweb.asm.AnnotationVisitor;\n+import org.objectweb.asm.Attribute;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.RecordComponentVisitor;\n+import org.objectweb.asm.TypePath;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceRecordComponentVisitor.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceRecordComponentVisitor.java","status":"renamed"},{"patch":"@@ -60,1 +60,1 @@\n-package jdk.internal.org.objectweb.asm.util;\n+package org.objectweb.asm.util;\n@@ -65,2 +65,2 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.signature.SignatureVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.signature.SignatureVisitor;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/util\/TraceSignatureVisitor.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceSignatureVisitor.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/testlibrary\/asm\/org\/objectweb\/asm\/version.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/version.txt","status":"renamed"},{"patch":"@@ -99,1 +99,1 @@\n-\t$(JAVAC) -XDignore.symbol.file --add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED -Xlint $(TESTLIBRARY_SRC_FILES) -d $(CLASSES_DIR)\n+\t$(JAVAC) -XDignore.symbol.file --add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base\/org.objectweb.asm=ALL-UNNAMED -Xlint $(TESTLIBRARY_SRC_FILES) -d $(CLASSES_DIR)\n@@ -102,1 +102,1 @@\n-\t$(JAVAC) -cp $(CLASSES_DIR) -XDignore.symbol.file --add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED -Xlint -sourcepath $(SRC_DIR) -d $(CLASSES_DIR) @filelist\n+\t$(JAVAC) -cp $(CLASSES_DIR) -XDignore.symbol.file --add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base\/org.objectweb.asm=ALL-UNNAMED -Xlint -sourcepath $(SRC_DIR) -d $(CLASSES_DIR) @filelist\n@@ -113,1 +113,1 @@\n-\t$(JAVA) --add-exports=java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-opens java.base\/java.util=ALL-UNNAMED -ea -jar $(DIST_JAR) $(APPLICATION_ARGS)\n+\t$(JAVA) --add-exports=java.base\/org.objectweb.asm=ALL-UNNAMED --add-opens java.base\/java.util=ALL-UNNAMED -ea -jar $(DIST_JAR) $(APPLICATION_ARGS)\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/Makefile","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,5 +37,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/visitors\/ByteCodeVisitor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,4 +45,4 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/GenClassPoolJar.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_class\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_inMemoryCompilation_keep_obj\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_cl\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_class\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *          java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/g1\/unloading\/tests\/unloading_keepRef_rootClass_keep_obj\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,4 @@\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassFields\/getclfld007\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.misc:+open\n@@ -47,0 +46,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/coverage\/parentheses\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n@@ -31,1 +31,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/coverage\/parentheses\/share\/HotspotInstructionsExecutor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,5 +26,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ClassWriterExt;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Handle;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriterExt;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Handle;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenCPFullOfMH.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,5 +26,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ClassWriterExt;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriterExt;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenCPFullOfMT.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,6 @@\n-import jdk.internal.org.objectweb.asm.ByteVector;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ClassWriterExt;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ByteVector;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriterExt;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenFullCP.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,6 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ClassWriterExt;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriterExt;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenManyIndyCorrectBootstrap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,7 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.ClassWriterExt;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-import jdk.internal.org.objectweb.asm.Label;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ClassWriterExt;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.objectweb.asm.Label;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenManyIndyIncorrectBootstrap.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,4 +26,4 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Handle;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Handle;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/GenManyIndyOneCPX.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/share\/HandleType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -37,0 +36,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/stress\/classfmt\/correctBootstrap\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -38,0 +37,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/stress\/classfmt\/incorrectBootstrap\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -37,0 +36,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/stress\/classfmt\/manyIndyOneCPX\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -37,0 +36,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/stress\/classfmt\/mh\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -37,0 +36,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/cp\/stress\/classfmt\/mt\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/regression\/b7127687\/Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -40,0 +39,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/regression\/b7127687\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -37,0 +36,1 @@\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/gc\/createLotsOfMHConsts\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package jdk.internal.org.objectweb.asm;\n+package org.objectweb.asm;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/patches\/java.base\/jdk\/internal\/org\/objectweb\/asm\/ClassWriterExt.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/AccessibilityFlagsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -53,1 +53,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/BasicTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n+import static org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/ConflictingDefaultsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -47,1 +47,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n+import static org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/DefaultVsAbstractTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/MethodResolutionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/ObjectMethodOverridesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n+import static org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/PrivateMethodsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -58,1 +58,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/RedefineTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/StaticMethodsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -58,1 +58,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/StressTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm:+open java.base\/jdk.internal.org.objectweb.asm.util:+open\n+ * @library \/testlibrary\/asm\n@@ -48,1 +48,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n+import static org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/SuperCallTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.Type;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Type;\n@@ -31,2 +31,2 @@\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n@@ -35,3 +35,3 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import static jdk.internal.org.objectweb.asm.ClassWriter.*;\n+import static org.objectweb.asm.Opcodes.*;\n+import org.objectweb.asm.ClassWriter;\n+import static org.objectweb.asm.ClassWriter.*;\n@@ -507,5 +507,5 @@\n-        \/\/   at jdk.internal.org.objectweb.asm.ClassWriter.getCommonSuperClass(ClassWriter.java:1588)\n-        \/\/   at jdk.internal.org.objectweb.asm.ClassWriter.getMergedType(ClassWriter.java:1559)\n-        \/\/   at jdk.internal.org.objectweb.asm.Frame.merge(Frame.java:1407)\n-        \/\/   at jdk.internal.org.objectweb.asm.Frame.merge(Frame.java:1308)\n-        \/\/   at jdk.internal.org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1353)\n+        \/\/   at org.objectweb.asm.ClassWriter.getCommonSuperClass(ClassWriter.java:1588)\n+        \/\/   at org.objectweb.asm.ClassWriter.getMergedType(ClassWriter.java:1559)\n+        \/\/   at org.objectweb.asm.Frame.merge(Frame.java:1407)\n+        \/\/   at org.objectweb.asm.Frame.merge(Frame.java:1308)\n+        \/\/   at org.objectweb.asm.MethodWriter.visitMaxs(MethodWriter.java:1353)\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/ClassFileGenerator.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.V17;\n-import static jdk.internal.org.objectweb.asm.Opcodes.V1_5;\n+import static org.objectweb.asm.Opcodes.V17;\n+import static org.objectweb.asm.Opcodes.V1_5;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/DefMethTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/Printer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,1 @@\n-        int flags =  jdk.internal.org.objectweb.asm.ClassReader.SKIP_DEBUG;\n+        int flags = org.objectweb.asm.ClassReader.SKIP_DEBUG;\n@@ -139,2 +139,2 @@\n-        jdk.internal.org.objectweb.asm.ClassReader cr =\n-                new  jdk.internal.org.objectweb.asm.ClassReader(classFile);\n+        org.objectweb.asm.ClassReader cr =\n+                new  org.objectweb.asm.ClassReader(classFile);\n@@ -142,1 +142,1 @@\n-        cr.accept(new  jdk.internal.org.objectweb.asm.util.TraceClassVisitor(new PrintWriter(System.out)), flags);\n+        cr.accept(new  org.objectweb.asm.util.TraceClassVisitor(new PrintWriter(System.out)), flags);\n@@ -152,1 +152,1 @@\n-        int flags =  jdk.internal.org.objectweb.asm.ClassReader.SKIP_DEBUG;\n+        int flags =  org.objectweb.asm.ClassReader.SKIP_DEBUG;\n@@ -154,2 +154,2 @@\n-        jdk.internal.org.objectweb.asm.ClassReader cr =\n-                new  jdk.internal.org.objectweb.asm.ClassReader(classFile);\n+        org.objectweb.asm.ClassReader cr =\n+                new  org.objectweb.asm.ClassReader(classFile);\n@@ -158,2 +158,2 @@\n-        cr.accept(new jdk.internal.org.objectweb.asm.util.TraceClassVisitor(null,\n-                        new jdk.internal.org.objectweb.asm.util.ASMifier(),\n+        cr.accept(new org.objectweb.asm.util.TraceClassVisitor(null,\n+                        new org.objectweb.asm.util.ASMifier(),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/Util.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/AccessFlag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/ClassBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/ConcreteClassBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/MethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/TestBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n@@ -40,1 +40,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/TesterBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/data\/ConcreteClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/data\/method\/AbstractMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/data\/method\/ConcreteMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/data\/method\/DefaultMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Opcodes;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/data\/method\/body\/CallMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static org.objectweb.asm.Opcodes.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/executor\/ReflectionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-        arguments.get(\"options\").setValue(\"--add-exports java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=info -Xlog:gc\");\n+        arguments.get(\"options\").setValue(\"-Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=info -Xlog:gc\");\n","filename":"test\/jdk\/com\/sun\/jdi\/ClassUnloadEventTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}