{"files":[{"patch":"@@ -161,0 +161,2 @@\n+  _rw_ptrmap(mtClassShared),\n+  _ro_ptrmap(mtClassShared),\n@@ -1278,0 +1280,3 @@\n+  \/\/ Split pointer map into read-write and read-only bitmaps\n+  ArchivePtrMarker::initialize_rw_ro_maps(&_rw_ptrmap, &_ro_ptrmap);\n+\n@@ -1279,1 +1284,1 @@\n-  char* bitmap = mapinfo->write_bitmap_region(ArchivePtrMarker::ptrmap(), heap_info,\n+  char* bitmap = mapinfo->write_bitmap_region(ArchivePtrMarker::rw_ptrmap(), ArchivePtrMarker::ro_ptrmap(), heap_info,\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -207,1 +207,8 @@\n-  CHeapBitMap _ptrmap;    \/\/ bitmap used by ArchivePtrMarker\n+\n+  \/\/ Combined bitmap to track pointers in both RW and RO regions. This is updated\n+  \/\/ as objects are copied into RW and RO.\n+  CHeapBitMap _ptrmap;\n+\n+  \/\/ _ptrmap is split into these two bitmaps which are written into the archive.\n+  CHeapBitMap _rw_ptrmap;   \/\/ marks pointers in the RW region\n+  CHeapBitMap _ro_ptrmap;   \/\/ marks pointers in the RO region\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+CHeapBitMap* ArchivePtrMarker::_rw_ptrmap = nullptr;\n+CHeapBitMap* ArchivePtrMarker::_ro_ptrmap = nullptr;\n@@ -55,0 +57,2 @@\n+  assert(_rw_ptrmap == nullptr, \"initialize only once\");\n+  assert(_ro_ptrmap == nullptr, \"initialize only once\");\n@@ -70,0 +74,30 @@\n+void ArchivePtrMarker::initialize_rw_ro_maps(CHeapBitMap* rw_ptrmap, CHeapBitMap* ro_ptrmap) {\n+  address* rw_bottom = (address*)ArchiveBuilder::current()->rw_region()->base();\n+  address* ro_bottom = (address*)ArchiveBuilder::current()->ro_region()->base();\n+\n+  _rw_ptrmap = rw_ptrmap;\n+  _ro_ptrmap = ro_ptrmap;\n+\n+  size_t rw_size = ArchiveBuilder::current()->rw_region()->used() \/ sizeof(address);\n+  size_t ro_size = ArchiveBuilder::current()->ro_region()->used() \/ sizeof(address);\n+  \/\/ ro_start is the first bit in _ptrmap that covers the pointer that would sit at ro_bottom.\n+  \/\/ E.g., if rw_bottom = (address*)100\n+  \/\/          ro_bottom = (address*)116\n+  \/\/       then ro_bottom - rw_bottom = (116 - 100) \/ sizeof(address) = 4;\n+  size_t ro_start = ro_bottom - rw_bottom;\n+\n+  \/\/ Note: ptrmap is big enough only to cover the last pointer in ro_region.\n+  \/\/ See ArchivePtrMarker::compact()\n+  _rw_ptrmap->initialize(rw_size);\n+  _ro_ptrmap->initialize(_ptrmap->size() - ro_start);\n+\n+  for (size_t rw_bit = 0; rw_bit < _rw_ptrmap->size(); rw_bit++) {\n+    _rw_ptrmap->at_put(rw_bit, _ptrmap->at(rw_bit));\n+  }\n+\n+  for(size_t ro_bit = ro_start; ro_bit < _ptrmap->size(); ro_bit++) {\n+    _ro_ptrmap->at_put(ro_bit-ro_start, _ptrmap->at(ro_bit));\n+  }\n+  assert(_ptrmap->size() - ro_start == _ro_ptrmap->size(), \"must be\");\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static CHeapBitMap*  _rw_ptrmap;\n+  static CHeapBitMap*  _ro_ptrmap;\n@@ -56,0 +58,1 @@\n+  static void initialize_rw_ro_maps(CHeapBitMap* rw_ptrmap, CHeapBitMap* ro_ptrmap);\n@@ -76,0 +79,8 @@\n+  static CHeapBitMap* rw_ptrmap() {\n+    return _rw_ptrmap;\n+  }\n+\n+  static CHeapBitMap* ro_ptrmap() {\n+    return _ro_ptrmap;\n+  }\n+\n@@ -78,0 +89,2 @@\n+    _rw_ptrmap = nullptr;\n+    _ro_ptrmap = nullptr;\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -297,1 +297,2 @@\n-  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+  st->print_cr(\"- rw_ptrmap_size_in_bits:         \" SIZE_FORMAT, region_at(MetaspaceShared::rw)->ptrmap_size_in_bits());\n+  st->print_cr(\"- ro_ptrmap_size_in_bits:         \" SIZE_FORMAT, region_at(MetaspaceShared::ro)->ptrmap_size_in_bits());\n@@ -1589,1 +1590,1 @@\n-char* FileMapInfo::write_bitmap_region(const CHeapBitMap* ptrmap, ArchiveHeapInfo* heap_info,\n+char* FileMapInfo::write_bitmap_region(const CHeapBitMap* rw_ptrmap, const CHeapBitMap* ro_ptrmap, ArchiveHeapInfo* heap_info,\n@@ -1591,1 +1592,1 @@\n-  size_in_bytes = ptrmap->size_in_bytes();\n+  size_in_bytes = rw_ptrmap->size_in_bytes() + ro_ptrmap->size_in_bytes();\n@@ -1605,2 +1606,3 @@\n-  \/\/ The bitmap region contains up to 3 parts:\n-  \/\/ ptrmap:              metaspace pointers inside the ro\/rw regions\n+  \/\/ The bitmap region contains up to 4 parts:\n+  \/\/ rw_ptrmap:              metaspace pointers inside the read-write region\n+  \/\/ ro_ptrmap:              metaspace pointers inside the read-only region\n@@ -1611,2 +1613,6 @@\n-  written = write_bitmap(ptrmap, buffer, written);\n-  header()->set_ptrmap_size_in_bits(ptrmap->size());\n+\n+  region_at(MetaspaceShared::rw)->init_ptrmap(0, rw_ptrmap->size());\n+  written = write_bitmap(rw_ptrmap, buffer, written);\n+\n+  region_at(MetaspaceShared::ro)->init_ptrmap(written, ro_ptrmap->size());\n+  written = write_bitmap(ro_ptrmap, buffer, written);\n@@ -1907,3 +1913,3 @@\n-    size_t ptrmap_size_in_bits = header()->ptrmap_size_in_bits();\n-    log_debug(cds, reloc)(\"mapped relocation bitmap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n-                          p2i(bitmap_base), ptrmap_size_in_bits);\n+    BitMapView rw_ptrmap = region_at(MetaspaceShared::rw)->ptrmap_view();\n+    char* ro_bitmap_base = bitmap_base + rw_ptrmap.size_in_bytes();\n+    BitMapView ro_ptrmap = region_at(MetaspaceShared::ro)->ptrmap_view();\n@@ -1911,1 +1917,7 @@\n-    BitMapView ptrmap((BitMap::bm_word_t*)bitmap_base, ptrmap_size_in_bits);\n+    log_debug(cds, reloc)(\"mapped relocation rw bitmap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n+                          p2i(bitmap_base), rw_ptrmap.size());\n+    log_debug(cds, reloc)(\"mapped relocation ro bitmap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n+                          p2i(ro_bitmap_base), ro_ptrmap.size());\n+\n+    FileMapRegion* rw_region = first_core_region();\n+    FileMapRegion* ro_region = last_core_region();\n@@ -1914,2 +1926,4 @@\n-    address patch_base = (address)mapped_base();\n-    address patch_end  = (address)mapped_end();\n+    address rw_patch_base = (address)mapped_base();\n+    address rw_patch_end  = (address)rw_region->mapped_end();\n+    address ro_patch_base = (address)ro_region->mapped_base();\n+    address ro_patch_end  = (address)mapped_end();\n@@ -1928,1 +1942,3 @@\n-    SharedDataRelocator patcher((address*)patch_base, (address*)patch_end, valid_old_base, valid_old_end,\n+    SharedDataRelocator rw_patcher((address*)rw_patch_base, (address*)rw_patch_end, valid_old_base, valid_old_end,\n+                                valid_new_base, valid_new_end, addr_delta);\n+    SharedDataRelocator ro_patcher((address*)ro_patch_base, (address*)ro_patch_end, valid_old_base, valid_old_end,\n@@ -1930,1 +1946,2 @@\n-    ptrmap.iterate(&patcher);\n+    rw_ptrmap.iterate(&rw_patcher);\n+    ro_ptrmap.iterate(&ro_patcher);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+  size_t ptrmap_size_in_bits()      const { return _ptrmap_size_in_bits; }\n@@ -228,1 +229,0 @@\n-  size_t _ptrmap_size_in_bits;          \/\/ Size of pointer relocation bitmap\n@@ -270,1 +270,0 @@\n-  size_t ptrmap_size_in_bits()             const { return _ptrmap_size_in_bits; }\n@@ -285,1 +284,0 @@\n-  void set_ptrmap_size_in_bits(size_t s)         { _ptrmap_size_in_bits = s; }\n@@ -446,1 +444,1 @@\n-  char* write_bitmap_region(const CHeapBitMap* ptrmap, ArchiveHeapInfo* heap_info,\n+  char* write_bitmap_region(const CHeapBitMap* rw_ptrmap, const CHeapBitMap* ro_ptrmap, ArchiveHeapInfo* heap_info,\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}