{"files":[{"patch":"@@ -468,0 +468,3 @@\n+java\/awt\/dnd\/DragSourceMotionListenerTest.java 8225131 windows-all\n+java\/awt\/dnd\/RejectDragTest.java 7124259 macosx-all\n+java\/awt\/dnd\/DnDHTMLToOutlookTest\/DnDHTMLToOutlookTest.java 8027424 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+\n+\/*\n+ * @test\n+ * @bug 6392086\n+ * @summary Tests dnd to another screen\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DnDHTMLToOutlookTest\n+ *\/\n+\n+public class DnDHTMLToOutlookTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The window contains a yellow button. Click on the button\n+            to copy HTML from DnDSource.html file into the clipboard or drag\n+            HTML context. Paste into or drop over the HTML capable editor in\n+            external application such as Outlook, Word.\n+\n+            When the mouse enters the editor, cursor should change to indicate\n+            that copy operation is about to happen and then release the mouse\n+            button. HTML text without tags should appear inside the document.\n+\n+            You should be able to repeat this operation multiple times.\n+            Please select Pass just in case of success or Fail for another.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .columns(40)\n+                      .testUI(DnDHTMLToOutlookTest::createAndShowUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Frame createAndShowUI() {\n+        Frame frame = new Frame(\"DnDHTMLToOutlookTest\");\n+        Panel mainPanel;\n+        Component dragSource;\n+\n+        mainPanel = new Panel();\n+        mainPanel.setLayout(new FlowLayout());\n+\n+        mainPanel.setBackground(Color.YELLOW);\n+        dragSource = new DnDSource(\"Drag ME (HTML)!\");\n+\n+        mainPanel.add(dragSource);\n+        frame.add(mainPanel);\n+        frame.pack();\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDHTMLToOutlookTest\/DnDHTMLToOutlookTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+<!--\n+ Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ This code is free software; you can redistribute it and\/or modify it\n+ under the terms of the GNU General Public License version 2 only, as\n+ published by the Free Software Foundation.\n+\n+ This code is distributed in the hope that it will be useful, but WITHOUT\n+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ version 2 for more details (a copy is included in the LICENSE file that\n+ accompanied this code).\n+\n+ You should have received a copy of the GNU General Public License version\n+ 2 along with this work; if not, write to the Free Software Foundation,\n+ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ or visit www.oracle.com if you need additional information or have any\n+ questions.\n+-->\n+\n+<h1>DnDHTMLToOutlookTest<br>HTML Drag & Paste problem<\/h1>\n+<p>if you see the bold header above without HTML tags and without StartHTML as the first word, press PASS<\/p>\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDHTMLToOutlookTest\/DnDSource.html","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.InvalidDnDOperationException;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+class DnDSource extends Button implements Transferable,\n+                                          DragGestureListener,\n+                                          DragSourceListener {\n+    private DataFlavor m_df;\n+    private transient int m_dropAction;\n+    private ByteArrayInputStream m_data = null;\n+\n+    DnDSource(String label) {\n+        super(label);\n+        setBackground(Color.yellow);\n+        setForeground(Color.blue);\n+        setSize(200, 120);\n+\n+        try {\n+            m_df = new DataFlavor(\"text\/html; Class=\" + InputStream.class.getName() + \"; charset=UTF-8\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        DragSource dragSource = new DragSource();\n+        dragSource.createDefaultDragGestureRecognizer(\n+                this,\n+                DnDConstants.ACTION_COPY_OR_MOVE,\n+                this\n+        );\n+        dragSource.addDragSourceListener(this);\n+\n+        String dir = System.getProperty(\"test.src\", \".\");\n+\n+        try {\n+            m_data = new ByteArrayInputStream(Files.readAllBytes(\n+                    Paths.get(dir, \"DnDSource.html\")));\n+            m_data.mark(m_data.available());\n+            addActionListener(\n+                new ActionListener(){\n+                    public void actionPerformed(ActionEvent ae){\n+                        Toolkit.getDefaultToolkit().getSystemClipboard()\n+                               .setContents( DnDSource.this, null);\n+                    }\n+                }\n+            );\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        System.err.println(\"starting Drag\");\n+        try {\n+            dge.startDrag(null, this, this);\n+        } catch (InvalidDnDOperationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragEnter\");\n+    }\n+\n+    public void dragOver(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragOver\");\n+        m_dropAction = dsde.getDropAction();\n+        System.out.println(\"m_dropAction = \" + m_dropAction);\n+    }\n+\n+    public void dragExit(DragSourceEvent dsde) {\n+        System.err.println(\"[Source] dragExit\");\n+    }\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {\n+        System.err.println(\"[Source] dragDropEnd\");\n+    }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dropActionChanged\");\n+        m_dropAction = dsde.getDropAction();\n+        System.out.println(\"m_dropAction = \" + m_dropAction);\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] {m_df};\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor sdf) {\n+        System.err.println(\"[Source] isDataFlavorSupported\" + m_df.equals(sdf));\n+        return m_df.equals(sdf);\n+    }\n+\n+    public Object getTransferData(DataFlavor tdf) throws UnsupportedFlavorException {\n+        if (!m_df.equals(tdf)) {\n+            throw new UnsupportedFlavorException(tdf);\n+        }\n+        System.err.println(\"[Source] Ok\");\n+        m_data.reset();\n+        return m_data;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDHTMLToOutlookTest\/DnDSource.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4422345\n+ * @summary tests that DragSourceMotionListeners work correctly and\n+           DragSourceEvents position is correct\n+ *\/\n+\n+public class DragSourceMotionListenerTest implements AWTEventListener {\n+    static class TestPanel extends Panel {\n+        final Dimension preferredDimension = new Dimension(200, 200);\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+    }\n+\n+    private static Frame frame;\n+    private static final Panel source = new TestPanel();\n+    private static final Panel target = new TestPanel();\n+    private static final DragSource ds = DragSource.getDefaultDragSource();\n+    private static volatile CountDownLatch mouseReleaseEvent;\n+\n+    static volatile boolean passedTest1 = false;\n+    static volatile boolean passedTest2 = false;\n+\n+    private static final Point testPoint1 = new Point();\n+    private static final Point testPoint2 = new Point();\n+    private static volatile Point srcPoint;\n+    private static volatile Dimension d;\n+    private static volatile Point dstOutsidePoint;\n+    private static volatile Point dstInsidePoint;\n+\n+    private static final Transferable t = new StringSelection(\"TEXT\");\n+    private static final DragGestureListener gestureListener = e -> e.startDrag(null, t);\n+\n+    private static final DragSourceAdapter sourceAdapter = new DragSourceAdapter() {\n+        public void dragMouseMoved(DragSourceDragEvent dsde) {\n+            if (Math.abs(dsde.getX() - testPoint1.getX()) < 5) {\n+                passedTest1 = true;\n+            }\n+        }\n+\n+        public void dragDropEnd(DragSourceDropEvent dsde) {\n+            if (Math.abs(dsde.getX() - testPoint2.getX()) < 5) {\n+                passedTest2 = true;\n+            }\n+        }\n+    };\n+\n+    private static final DropTargetListener targetAdapter = new DropTargetAdapter() {\n+        public void drop(DropTargetDropEvent e) {\n+            e.acceptDrop(DnDConstants.ACTION_COPY);\n+            try {\n+                final Transferable t = e.getTransferable();\n+                final String str =\n+                        (String) t.getTransferData(DataFlavor.stringFlavor);\n+                e.dropComplete(true);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+                e.dropComplete(false);\n+            }\n+        }\n+    };\n+\n+    private static final DropTarget dropTarget = new DropTarget(target, targetAdapter);\n+    Component clickedComponent = null;\n+\n+    private void createAndShowUI() {\n+        frame = new Frame(\"DragSourceMotionListenerTest\");\n+        ds.addDragSourceListener(sourceAdapter);\n+        ds.addDragSourceMotionListener(sourceAdapter);\n+        ds.createDefaultDragGestureRecognizer(source, DnDConstants.ACTION_COPY, gestureListener);\n+        target.setDropTarget(dropTarget);\n+\n+        frame.setLayout(new GridLayout(1, 2));\n+\n+        frame.add(source);\n+        frame.add(target);\n+\n+        Toolkit.getDefaultToolkit()\n+               .addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(10);\n+\n+            DragSourceMotionListenerTest dsmObj = new DragSourceMotionListenerTest();\n+            EventQueue.invokeAndWait(dsmObj::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                srcPoint = source.getLocationOnScreen();\n+                d = source.getSize();\n+                srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+            });\n+            robot.waitForIdle();\n+\n+            if (!dsmObj.pointInComponent(robot, srcPoint, source)) {\n+                throw new RuntimeException(\"WARNING: Couldn't locate source panel.\");\n+            }\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dstOutsidePoint = frame.getLocationOnScreen();\n+                d = frame.getSize();\n+                dstOutsidePoint.translate(3 * d.width \/ 2, d.height \/ 2);\n+             });\n+            testPoint1.setLocation(dstOutsidePoint);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dstInsidePoint = target.getLocationOnScreen();\n+                d = target.getSize();\n+                dstInsidePoint.translate(d.width \/ 2, d.height \/ 2);\n+            });\n+            testPoint2.setLocation(dstInsidePoint);\n+\n+            if (!dsmObj.pointInComponent(robot, dstInsidePoint, target)) {\n+                throw new RuntimeException(\"WARNING: Couldn't locate target panel.\");\n+            }\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (; !srcPoint.equals(dstOutsidePoint);\n+                 srcPoint.translate(sign(dstOutsidePoint.x - srcPoint.x),\n+                                    sign(dstOutsidePoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+            }\n+\n+            for (int i = 0; i < 10; i++) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y++);\n+            }\n+\n+            for (;!srcPoint.equals(dstInsidePoint);\n+                 srcPoint.translate(sign(dstInsidePoint.x - srcPoint.x),\n+                                    sign(dstInsidePoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+        if (!passedTest1) {\n+            throw new RuntimeException(\"Failed first test.\");\n+        }\n+\n+        if (!passedTest2) {\n+            throw new RuntimeException(\"Failed second test.\");\n+        }\n+    } finally {\n+        EventQueue.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+}\n+\n+    public static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            mouseReleaseEvent.countDown();\n+            clickedComponent = (Component)e.getSource();\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp) throws Exception {\n+        mouseReleaseEvent = new CountDownLatch(1);\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(500);\n+        if (!mouseReleaseEvent.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Mouse Release Event not received\");\n+        }\n+\n+        Component c = clickedComponent;\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragSourceMotionListenerTest.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Label;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 6179157\n+ * @summary Tests dnd to another screen\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DragToAnotherScreenTest\n+ *\/\n+\n+public class DragToAnotherScreenTest {\n+    private static Label label0;\n+    private static Label label1;\n+    private static final int HGAP = 20;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                The following test is applicable for Single as well\n+                as Multi-monitor screens.\n+\n+                If on multi-monitor screens then please position\n+                the drag and drop windows on different screens.\n+\n+                If you can not move the mouse from the frame \"Drag Source\"\n+                to the frame \"Drop Target\" press PASS.\n+\n+                Otherwise drag the label \"Drag me\" and\n+                drop it on the label \"Drop on me\".\n+\n+                If you can not drag to the second label (for example\n+                if you can not drag across screens) press FAIL.\n+\n+                If the second label changes its text to drag me\n+                after the drop and you DO NOT see any error messages\n+                in the log area press PASS else FAIL.\n+                \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"Test Instructions\")\n+                      .instructions(INSTRUCTIONS)\n+                      .columns(35)\n+                      .testUI(DragToAnotherScreenTest::createAndShowUI)\n+                      .positionTestUI(DragToAnotherScreenTest::positionMultiTestUI)\n+                      .logArea(10)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static List<Frame> createAndShowUI() {\n+        PassFailJFrame.log(\"----- System Configuration ----\");\n+        PassFailJFrame.log(\"Toolkit:\" + Toolkit.getDefaultToolkit()\n+                                               .getClass()\n+                                               .getName());\n+\n+        GraphicsDevice[] gd = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                 .getScreenDevices();\n+        if (gd.length == 1) {\n+            PassFailJFrame.log(\"Single Monitor\");\n+        } else {\n+            PassFailJFrame.log(\"Multi-Monitor\");\n+        }\n+        PassFailJFrame.log(\"--------------\");\n+        PassFailJFrame.log(\"Test logs:\\n\");\n+        Frame frame0 = new Frame(\"Drag Source\", gd[0].getDefaultConfiguration());\n+        frame0.setSize(300, 300);\n+        frame0.setLocation(200, 300);\n+        label0 = new Label(\"Drag me\");\n+        frame0.add(label0);\n+\n+        Frame frame1 = new Frame(\"Drop Target\", gd[(gd.length > 1 ? 1 : 0)].getDefaultConfiguration());\n+        frame1.setSize(300, 300);\n+        frame1.setLocation(500 + HGAP, 300);\n+        label1 = new Label(\"Drop on me\");\n+        frame1.add(label1);\n+\n+        DragGestureListener dragGestureListener = dge -> dge.startDrag(null, new StringSelection(label0.getText()), null);\n+        new DragSource().createDefaultDragGestureRecognizer(label0,\n+                                                            DnDConstants.ACTION_COPY, dragGestureListener);\n+\n+        DropTargetAdapter dropTargetAdapter = new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                Transferable t = dtde.getTransferable();\n+                if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n+                    dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+                    try {\n+                        String str = (String) t.getTransferData(DataFlavor.stringFlavor);\n+                        PassFailJFrame.log(\"getTransferData was successful\");\n+                        label1.setText(str);\n+                    } catch (Exception e) {\n+                        PassFailJFrame.log(\"ERROR !!! Can't getTransferData: \" + e);\n+                        dtde.dropComplete(false);\n+                    }\n+                    dtde.dropComplete(true);\n+                } else {\n+                    PassFailJFrame.log(\"ERROR !!! stringFlavor is not supported by Transferable\");\n+                    dtde.rejectDrop();\n+                }\n+            }\n+        };\n+        new DropTarget(label1, dropTargetAdapter);\n+        return List.of(frame0, frame1);\n+    }\n+\n+    private static void positionMultiTestUI(List<? extends Window> windows,\n+                                            PassFailJFrame.InstructionUI instructionUI) {\n+        int x = instructionUI.getLocation().x + instructionUI.getSize().width + HGAP;\n+        for (Window w : windows) {\n+            w.setLocation(x, instructionUI.getLocation().y);\n+            x += w.getWidth() + HGAP;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragToAnotherScreenTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4407521\n+ * @summary Tests that DragSourceListener.dragEnter() and\n+            DragSourceListener.dragOver() are not called after\n+            drag rejecting, but DragSourceListener.dragExit() is.\n+ *\/\n+\n+public class RejectDragTest {\n+    private static Frame frame;\n+    private static Robot robot;\n+    private static volatile boolean dragEnterCalled;\n+    private static volatile boolean dragOverCalled;\n+    private static volatile boolean dragExitCalledAtFirst;\n+    private static volatile Point startPoint;\n+    private static volatile Point endPoint;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+\n+            EventQueue.invokeAndWait(RejectDragTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(RejectDragTest::addDnDListeners);\n+            robot.waitForIdle();\n+\n+            testDnD();\n+            robot.waitForIdle();\n+            robot.delay(200);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void addDnDListeners() {\n+        final DragSourceListener dragSourceListener = new DragSourceAdapter() {\n+            private boolean first = true;\n+\n+            public void dragEnter(DragSourceDragEvent dsde) {\n+                first = false;\n+                dragEnterCalled = true;\n+            }\n+\n+            public void dragExit(DragSourceEvent dse) {\n+                if (first) {\n+                    dragExitCalledAtFirst = true;\n+                    first = false;\n+                }\n+            }\n+\n+            public void dragDropEnd(DragSourceDropEvent dsde) {\n+                first = false;\n+            }\n+\n+            public void dragOver(DragSourceDragEvent dsde) {\n+                first = false;\n+                dragOverCalled = true;\n+            }\n+\n+            public void dropActionChanged(DragSourceDragEvent dsde) {\n+                first = false;\n+            }\n+        };\n+\n+        DragGestureListener dragGestureListener =\n+                dge -> dge.startDrag(null, new StringSelection(\"OKAY\"),\n+                                     dragSourceListener);\n+        new DragSource().createDefaultDragGestureRecognizer(frame,\n+                                                            DnDConstants.ACTION_COPY,\n+                                                            dragGestureListener);\n+\n+        DropTargetAdapter dropTargetListener = new DropTargetAdapter() {\n+            public void dragEnter(DropTargetDragEvent dtde) {\n+               dtde.rejectDrag();\n+            }\n+\n+            public void drop(DropTargetDropEvent dtde) {\n+               dtde.rejectDrop();\n+            }\n+        };\n+\n+        new DropTarget(frame, dropTargetListener);\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"RejectDragTest\");\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void testDnD() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            startPoint = frame.getLocationOnScreen();\n+            endPoint = new Point(startPoint);\n+            startPoint.translate(50, 50);\n+            endPoint.translate(150, 150);\n+        });\n+\n+        robot.mouseMove(startPoint.x, startPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        for (Point p = new Point(startPoint); !p.equals(endPoint);\n+             p.translate(sign(endPoint.x - p.x),\n+                         sign(endPoint.y - p.y))) {\n+            robot.mouseMove(p.x, p.y);\n+            robot.delay(30);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        if (dragEnterCalled || dragOverCalled) {\n+            throw new RuntimeException(\"Test failed: \" +\n+                                       (dragEnterCalled ? \"DragSourceListener.dragEnter() was called; \" : \"\") +\n+                                       (dragOverCalled ? \"DragSourceListener.dragOver() was called; \" : \"\") +\n+                                       (!dragExitCalledAtFirst ? \"DragSourceListener.dragExit() was not \" +\n+                                                                 \"called immediately after rejectDrag() \" : \"\"));\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/RejectDragTest.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"}]}