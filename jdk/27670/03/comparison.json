{"files":[{"patch":"@@ -127,0 +127,3 @@\n+        \/\/ taking start time before entering completeExchange to account for possible\n+        \/\/ delays in reaching server.stop().\n+        final long startTime = System.nanoTime();\n@@ -131,1 +134,1 @@\n-        final Duration delayDuration = Duration.ofSeconds(Utils.adjustTimeout(5));\n+        final Duration delayDuration = Duration.ofSeconds(Utils.adjustTimeout(20));\n@@ -133,1 +136,1 @@\n-        final long elapsed = timeShutdown(delayDuration);\n+        final long elapsed = timeShutdown(delayDuration, startTime);\n@@ -154,1 +157,1 @@\n-    public void shouldCompeteAfterDelay() throws InterruptedException {\n+    public void shouldCompleteAfterDelay() throws InterruptedException {\n@@ -161,7 +164,0 @@\n-        \/\/ Complete the exchange 10 second into the future.\n-        \/\/ Runs in parallel, so won't block the server stop\n-        final Duration exchangeDuration = Duration.ofSeconds(Utils.adjustTimeout(10));\n-        completeExchange(exchangeDuration);\n-        log(\"Complete Exchange triggered\");\n-\n-\n@@ -173,6 +169,2 @@\n-\n-\n-        \/\/ The shutdown should not await the exchange to complete\n-        if (elapsed >= exchangeDuration.toNanos()) {\n-            fail(\"HttpServer.stop terminated too late\");\n-        }\n+        complete.countDown();\n+        log(\"Exchange completed\");\n@@ -280,0 +272,2 @@\n+        return timeShutdown(delayDuration, startTime);\n+    }\n@@ -281,0 +275,5 @@\n+    \/**\n+     * This allows passing a custom start time\n+     *\/\n+    private long timeShutdown(Duration delayDuration,\n+                              long startTime) {\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ServerStopTerminationTest.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"}]}