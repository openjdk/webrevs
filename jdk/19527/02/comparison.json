{"files":[{"patch":"@@ -103,0 +103,2 @@\n+    private static final Object[] EMPTY_ELEMENTDATA = {};\n+\n@@ -131,1 +133,1 @@\n-        setArray(new Object[0]);\n+        setArray(EMPTY_ELEMENTDATA);\n@@ -146,0 +148,2 @@\n+        else if (c.isEmpty())\n+            es = EMPTY_ELEMENTDATA;\n@@ -162,1 +166,4 @@\n-        setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));\n+        if (toCopyIn.length == 0)\n+            setArray(EMPTY_ELEMENTDATA);\n+        else\n+            setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));\n@@ -621,0 +628,5 @@\n+            if (len == 1) {\n+                \/\/ one element exists and that element should be removed\n+                setArray(EMPTY_ELEMENTDATA);\n+                return true;\n+            }\n@@ -807,1 +819,1 @@\n-            setArray(new Object[0]);\n+            setArray(EMPTY_ELEMENTDATA);\n@@ -1025,1 +1037,1 @@\n-        Object[] es = new Object[len];\n+        Object[] es = (len == 0 ? EMPTY_ELEMENTDATA : new Object[len]);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.concurrent;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(1)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+public class CopyOnWriteArrayListBenchmark {\n+\n+    private static byte[] getSerializedBytes(CopyOnWriteArrayList<?> list) throws IOException {\n+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n+        ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut);\n+        objectOut.writeObject(list);\n+\n+        objectOut.close();\n+        return bytesOut.toByteArray();\n+    }\n+\n+    private Collection<Object> emptyCollection = new ArrayList<>();\n+    private Object[] emptyArray = new Object[0];\n+\n+    private Collection<Object> oneItemCollection = Arrays.asList(\"\");\n+    private Object[] oneItemArray = new Object[] { \"\" };\n+\n+    private CopyOnWriteArrayList<?> emptyInstance = new CopyOnWriteArrayList<>();\n+    private CopyOnWriteArrayList<?> oneItemInstance = new CopyOnWriteArrayList<>(oneItemArray);\n+\n+    private byte[] emptyInstanceBytes;\n+    private byte[] oneInstanceBytes;\n+\n+    public CopyOnWriteArrayListBenchmark() {\n+        try {\n+            emptyInstanceBytes = getSerializedBytes(emptyInstance);\n+            oneInstanceBytes = getSerializedBytes(oneItemInstance);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void clear() {\n+        \/\/ have to create a new instance on each execution\n+        ((CopyOnWriteArrayList<?>) oneItemInstance.clone()).clear();\n+    }\n+\n+    @Benchmark\n+    public void clearEmpty() {\n+        emptyInstance.clear();\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> createInstanceArray() {\n+        return new CopyOnWriteArrayList<>(oneItemArray);\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> createInstanceArrayEmpty() {\n+        return new CopyOnWriteArrayList<>(emptyArray);\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> createInstanceCollection() {\n+        return new CopyOnWriteArrayList<>(oneItemCollection);\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> createInstanceCollectionEmpty() {\n+        return new CopyOnWriteArrayList<>(emptyCollection);\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> createInstanceDefault() {\n+        return new CopyOnWriteArrayList<Object>();\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> readInstance() throws IOException, ClassNotFoundException {\n+        try (ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(oneInstanceBytes))) {\n+            return (CopyOnWriteArrayList<?>) objIn.readObject();\n+        }\n+    }\n+\n+    @Benchmark\n+    public CopyOnWriteArrayList<?> readInstanceEmpty() throws IOException, ClassNotFoundException {\n+        try (ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(emptyInstanceBytes))) {\n+            return (CopyOnWriteArrayList<?>) objIn.readObject();\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/CopyOnWriteArrayListBenchmark.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}