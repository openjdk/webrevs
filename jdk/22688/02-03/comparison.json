{"files":[{"patch":"@@ -663,2 +663,0 @@\n-  init_gclabs.do_thread(control_thread());\n-\n@@ -1262,3 +1260,3 @@\n-  _gc_state.set_cond(EVACUATION, false);\n-  _gc_state.set_cond(WEAK_ROOTS, false);\n-  _gc_state.set_cond(UPDATEREFS, true);\n+  set_gc_state_concurrent(EVACUATION, false);\n+  set_gc_state_concurrent(WEAK_ROOTS, false);\n+  set_gc_state_concurrent(UPDATEREFS, true);\n@@ -1444,0 +1442,4 @@\n+\n+  if (safepoint_workers() != nullptr) {\n+    safepoint_workers()->threads_do(&cl);\n+  }\n@@ -1479,1 +1481,0 @@\n-  workers()->threads_do(&cl);\n@@ -1481,1 +1482,1 @@\n-  cl.do_thread(control_thread());\n+  workers()->threads_do(&cl);\n@@ -2005,0 +2006,4 @@\n+void ShenandoahHeap::set_gc_state_concurrent(uint mask, bool value) {\n+  _gc_state.set_cond(mask, value);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -369,0 +369,6 @@\n+  \/\/ This also updates the global gc state, but does not need to be called on a safepoint.\n+  \/\/ Critically, this method will _not_ flag that the global gc state has changed and threads\n+  \/\/ will continue to use their thread local copy. This is expected to be used in conjunction\n+  \/\/ with a handshake operation to propagate the new gc state.\n+  void set_gc_state_concurrent(uint mask, bool value);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}