{"files":[{"patch":"@@ -47,2 +47,0 @@\n-    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n-    private static final boolean IS_PODMAN = Container.ENGINE_COMMAND.contains(\"podman\");\n@@ -73,6 +71,3 @@\n-        if (IS_DOCKER && ContainerRuntimeVersionTestUtils.DOCKER_VERSION_20_10_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n-            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n-        }\n-        if (IS_PODMAN && ContainerRuntimeVersionTestUtils.PODMAN_VERSION_1_5_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n-            throw new SkippedException(\"Podman version too old for this test. Expected >= 1.5.0\");\n-        }\n+\n+        ContainerRuntimeVersionTestUtils.checkContainerVersionSupported();\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithSubgroups.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.test.lib.Container;\n@@ -50,2 +49,0 @@\n-    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n-    private static final boolean IS_PODMAN = Container.ENGINE_COMMAND.contains(\"podman\");\n@@ -66,6 +63,3 @@\n-        if (IS_DOCKER && ContainerRuntimeVersionTestUtils.DOCKER_VERSION_20_10_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n-            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n-        }\n-        if (IS_PODMAN && ContainerRuntimeVersionTestUtils.PODMAN_VERSION_1_5_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n-            throw new SkippedException(\"Podman version too old for this test. Expected >= 1.5.0\");\n-        }\n+\n+        ContainerRuntimeVersionTestUtils.checkContainerVersionSupported();\n+\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetricsSubgroup.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jtreg.SkippedException;\n@@ -37,3 +38,4 @@\n-    private static final ContainerRuntimeVersionTestUtils DEFAULT = new ContainerRuntimeVersionTestUtils(0, 0, 0);\n-    public static final ContainerRuntimeVersionTestUtils DOCKER_VERSION_20_10_0 = new ContainerRuntimeVersionTestUtils(20, 10, 0);\n-    public static final ContainerRuntimeVersionTestUtils PODMAN_VERSION_1_5_0 = new ContainerRuntimeVersionTestUtils(1, 5, 0);\n+    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n+    private static final boolean IS_PODMAN = Container.ENGINE_COMMAND.contains(\"podman\");\n+    public static final ContainerRuntimeVersionTestUtils DOCKER_MINIMAL_SUPPORTED_VERSION_CGROUPNS = new ContainerRuntimeVersionTestUtils(20, 10, 0);\n+    public static final ContainerRuntimeVersionTestUtils PODMAN_MINIMAL_SUPPORTED_VERSION_CGROUPNS = new ContainerRuntimeVersionTestUtils(1, 5, 0);\n@@ -47,0 +49,9 @@\n+    public static void checkContainerVersionSupported() {\n+        if (IS_DOCKER && ContainerRuntimeVersionTestUtils.DOCKER_MINIMAL_SUPPORTED_VERSION_CGROUPNS.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n+        }\n+        if (IS_PODMAN && ContainerRuntimeVersionTestUtils.PODMAN_MINIMAL_SUPPORTED_VERSION_CGROUPNS.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Podman version too old for this test. Expected >= 1.5.0\");\n+        }\n+    }\n+\n@@ -53,15 +64,11 @@\n-        } else { \/\/ equal major\n-            if (this.minor > other.minor) {\n-                return 1;\n-            } else if (this.minor < other.minor) {\n-                return -1;\n-            } else { \/\/ equal majors and minors\n-                if (this.micro > other.micro) {\n-                    return 1;\n-                } else if (this.micro < other.micro) {\n-                    return -1;\n-                } else {\n-                    \/\/ equal majors, minors, micro\n-                    return 0;\n-                }\n-            }\n+        } else if (this.minor > other.minor) {\n+            return 1;\n+        } else if (this.minor < other.minor) {\n+            return -1;\n+        } else if (this.micro > other.micro) {\n+            return 1;\n+        } else if (this.micro < other.micro) {\n+            return -1;\n+        } else {\n+            \/\/ equal majors, minors, micro\n+            return 0;\n@@ -80,2 +87,1 @@\n-            System.out.println(\"Failed to parse container runtime version: \" + version);\n-            return DEFAULT;\n+            throw new RuntimeException(\"Failed to parse container runtime version: \" + version);\n@@ -84,0 +90,1 @@\n+\n@@ -93,2 +100,1 @@\n-            System.out.println(Container.ENGINE_COMMAND + \" --version command failed. Returning null\");\n-            return null;\n+            throw new RuntimeException(Container.ENGINE_COMMAND + \" --version command failed.\");\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/ContainerRuntimeVersionTestUtils.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"}]}