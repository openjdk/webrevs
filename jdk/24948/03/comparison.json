{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.containers.docker.ContainerRuntimeVersionTestUtils;\n@@ -29,1 +30,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -47,1 +47,0 @@\n-\n@@ -49,0 +48,2 @@\n+    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n+    private static final boolean IS_PODMAN = Container.ENGINE_COMMAND.contains(\"podman\");\n@@ -73,0 +74,6 @@\n+        if (IS_DOCKER && ContainerRuntimeVersionTestUtils.DOCKER_VERSION_20_10_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n+        }\n+        if (IS_PODMAN && ContainerRuntimeVersionTestUtils.PODMAN_VERSION_1_5_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Podman version too old for this test. Expected >= 1.5.0\");\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithSubgroups.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.test.lib.Container;\n@@ -30,0 +31,1 @@\n+import jdk.test.lib.containers.docker.ContainerRuntimeVersionTestUtils;\n@@ -48,0 +50,2 @@\n+    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n+    private static final boolean IS_PODMAN = Container.ENGINE_COMMAND.contains(\"podman\");\n@@ -62,0 +66,6 @@\n+        if (IS_DOCKER && ContainerRuntimeVersionTestUtils.DOCKER_VERSION_20_10_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n+        }\n+        if (IS_PODMAN && ContainerRuntimeVersionTestUtils.PODMAN_VERSION_1_5_0.compareTo(ContainerRuntimeVersionTestUtils.getContainerRuntimeVersion()) > 0) {\n+            throw new SkippedException(\"Podman version too old for this test. Expected >= 1.5.0\");\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetricsSubgroup.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Methods and definitions related to container runtime version to test container in this directory\n+ *\/\n+\n+package jdk.test.lib.containers.docker;\n+\n+import jdk.test.lib.Container;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ContainerRuntimeVersionTestUtils implements Comparable<ContainerRuntimeVersionTestUtils> {\n+    private final int major;\n+    private final int minor;\n+    private final int micro;\n+    private static final ContainerRuntimeVersionTestUtils DEFAULT = new ContainerRuntimeVersionTestUtils(0, 0, 0);\n+    public static final ContainerRuntimeVersionTestUtils DOCKER_VERSION_20_10_0 = new ContainerRuntimeVersionTestUtils(20, 10, 0);\n+    public static final ContainerRuntimeVersionTestUtils PODMAN_VERSION_1_5_0 = new ContainerRuntimeVersionTestUtils(1, 5, 0);\n+\n+    private ContainerRuntimeVersionTestUtils(int major, int minor, int micro) {\n+        this.major = major;\n+        this.minor = minor;\n+        this.micro = micro;\n+    }\n+\n+    @Override\n+    public int compareTo(ContainerRuntimeVersionTestUtils other) {\n+        if (this.major > other.major) {\n+            return 1;\n+        } else if (this.major < other.major) {\n+            return -1;\n+        } else { \/\/ equal major\n+            if (this.minor > other.minor) {\n+                return 1;\n+            } else if (this.minor < other.minor) {\n+                return -1;\n+            } else { \/\/ equal majors and minors\n+                if (this.micro > other.micro) {\n+                    return 1;\n+                } else if (this.micro < other.micro) {\n+                    return -1;\n+                } else {\n+                    \/\/ equal majors, minors, micro\n+                    return 0;\n+                }\n+            }\n+        }\n+    }\n+\n+    public static ContainerRuntimeVersionTestUtils fromVersionString(String version) {\n+        try {\n+            \/\/ Example 'docker version 20.10.0 or podman version 4.9.4-rhel'\n+            String versNums = version.split(\"\\\\s+\", 3)[2];\n+            String[] numbers = versNums.split(\"-\")[0].split(\"\\\\.\", 3);\n+            return new ContainerRuntimeVersionTestUtils(Integer.parseInt(numbers[0]),\n+                    Integer.parseInt(numbers[1]),\n+                    Integer.parseInt(numbers[2]));\n+        } catch (Exception e) {\n+            System.out.println(\"Failed to parse container runtime version: \" + version);\n+            return DEFAULT;\n+        }\n+    }\n+    public static String getContainerRuntimeVersionStr() {\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(Container.ENGINE_COMMAND, \"--version\");\n+            OutputAnalyzer out = new OutputAnalyzer(pb.start())\n+                    .shouldHaveExitValue(0);\n+            String result = out.asLines().get(0);\n+            System.out.println(Container.ENGINE_COMMAND + \" --version returning: \" + result);\n+            return result;\n+        } catch (Exception e) {\n+            System.out.println(Container.ENGINE_COMMAND + \" --version command failed. Returning null\");\n+            return null;\n+        }\n+    }\n+\n+    public static ContainerRuntimeVersionTestUtils getContainerRuntimeVersion() {\n+        return ContainerRuntimeVersionTestUtils.fromVersionString(getContainerRuntimeVersionStr());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/ContainerRuntimeVersionTestUtils.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}