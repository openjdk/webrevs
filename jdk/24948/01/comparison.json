{"files":[{"patch":"@@ -49,0 +49,1 @@\n+    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n@@ -73,0 +74,3 @@\n+        if (IS_DOCKER && TestMemoryWithSubgroups.DockerVersion.VERSION_20_10_0.compareTo(getDockerVersion()) > 0) {\n+            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n+        }\n@@ -143,0 +147,73 @@\n+    \/\/ pre: IS_DOCKER == true\n+    private static String getDockerVersionStr() {\n+        if (!IS_DOCKER) {\n+            return null;\n+        }\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(Container.ENGINE_COMMAND, \"--version\");\n+            OutputAnalyzer out = new OutputAnalyzer(pb.start())\n+                    .shouldHaveExitValue(0);\n+            String result = out.asLines().get(0);\n+            System.out.println(Container.ENGINE_COMMAND + \" --version returning: \" + result);\n+            return result;\n+        } catch (Exception e) {\n+            System.out.println(Container.ENGINE_COMMAND + \" --version command failed. Returning null\");\n+            return null;\n+        }\n+    }\n+\n+    private static TestMemoryWithSubgroups.DockerVersion getDockerVersion() {\n+        return TestMemoryWithSubgroups.DockerVersion.fromVersionString(getDockerVersionStr());\n+    }\n+\n+    private static class DockerVersion implements Comparable<TestMemoryWithSubgroups.DockerVersion> {\n+        private static final TestMemoryWithSubgroups.DockerVersion DEFAULT = new TestMemoryWithSubgroups.DockerVersion(0, 0, 0);\n+        private static final TestMemoryWithSubgroups.DockerVersion VERSION_20_10_0 = new TestMemoryWithSubgroups.DockerVersion(20, 10, 0);\n+        private final int major;\n+        private final int minor;\n+        private final int micro;\n+\n+        private DockerVersion(int major, int minor, int micro) {\n+            this.major = major;\n+            this.minor = minor;\n+            this.micro = micro;\n+        }\n+\n+        @Override\n+        public int compareTo(TestMemoryWithSubgroups.DockerVersion other) {\n+            if (this.major > other.major) {\n+                return 1;\n+            } else if (this.major < other.major) {\n+                return -1;\n+            } else { \/\/ equal major\n+                if (this.minor > other.minor) {\n+                    return 1;\n+                } else if (this.minor < other.minor) {\n+                    return -1;\n+                } else { \/\/ equal majors and minors\n+                    if (this.micro > other.micro) {\n+                        return 1;\n+                    } else if (this.micro < other.micro) {\n+                        return -1;\n+                    } else {\n+                        \/\/ equal majors, minors, micro\n+                        return 0;\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static TestMemoryWithSubgroups.DockerVersion fromVersionString(String version) {\n+            try {\n+                \/\/ Example 'docker version 3.2.1'\n+                String versNums = version.split(\"\\\\s+\", 3)[2];\n+                String[] numbers = versNums.split(\"\\\\.\", 3);\n+                return new TestMemoryWithSubgroups.DockerVersion(Integer.parseInt(numbers[0]),\n+                        Integer.parseInt(numbers[1]),\n+                        Integer.parseInt(numbers[2]));\n+            } catch (Exception e) {\n+                System.out.println(\"Failed to parse docker version: \" + version);\n+                return DEFAULT;\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithSubgroups.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.test.lib.Container;\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -48,0 +50,1 @@\n+    private static final boolean IS_DOCKER = Container.ENGINE_COMMAND.contains(\"docker\");\n@@ -62,0 +65,3 @@\n+        if (IS_DOCKER && TestDockerMemoryMetricsSubgroup.DockerVersion.VERSION_20_10_0.compareTo(getDockerVersion()) > 0) {\n+            throw new SkippedException(\"Docker version too old for this test. Expected >= 20.10.0\");\n+        }\n@@ -120,0 +126,74 @@\n+\n+    \/\/ pre: IS_DOCKER == true\n+    private static String getDockerVersionStr() {\n+        if (!IS_DOCKER) {\n+            return null;\n+        }\n+        try {\n+            ProcessBuilder pb = new ProcessBuilder(Container.ENGINE_COMMAND, \"--version\");\n+            OutputAnalyzer out = new OutputAnalyzer(pb.start())\n+                    .shouldHaveExitValue(0);\n+            String result = out.asLines().get(0);\n+            System.out.println(Container.ENGINE_COMMAND + \" --version returning: \" + result);\n+            return result;\n+        } catch (Exception e) {\n+            System.out.println(Container.ENGINE_COMMAND + \" --version command failed. Returning null\");\n+            return null;\n+        }\n+    }\n+\n+    private static TestDockerMemoryMetricsSubgroup.DockerVersion getDockerVersion() {\n+        return TestDockerMemoryMetricsSubgroup.DockerVersion.fromVersionString(getDockerVersionStr());\n+    }\n+\n+    private static class DockerVersion implements Comparable<TestDockerMemoryMetricsSubgroup.DockerVersion> {\n+        private static final TestDockerMemoryMetricsSubgroup.DockerVersion DEFAULT = new TestDockerMemoryMetricsSubgroup.DockerVersion(0, 0, 0);\n+        private static final TestDockerMemoryMetricsSubgroup.DockerVersion VERSION_20_10_0 = new TestDockerMemoryMetricsSubgroup.DockerVersion(20, 10, 0);\n+        private final int major;\n+        private final int minor;\n+        private final int micro;\n+\n+        private DockerVersion(int major, int minor, int micro) {\n+            this.major = major;\n+            this.minor = minor;\n+            this.micro = micro;\n+        }\n+\n+        @Override\n+        public int compareTo(TestDockerMemoryMetricsSubgroup.DockerVersion other) {\n+            if (this.major > other.major) {\n+                return 1;\n+            } else if (this.major < other.major) {\n+                return -1;\n+            } else { \/\/ equal major\n+                if (this.minor > other.minor) {\n+                    return 1;\n+                } else if (this.minor < other.minor) {\n+                    return -1;\n+                } else { \/\/ equal majors and minors\n+                    if (this.micro > other.micro) {\n+                        return 1;\n+                    } else if (this.micro < other.micro) {\n+                        return -1;\n+                    } else {\n+                        \/\/ equal majors, minors, micro\n+                        return 0;\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static TestDockerMemoryMetricsSubgroup.DockerVersion fromVersionString(String version) {\n+            try {\n+                \/\/ Example 'docker version 3.2.1'\n+                String versNums = version.split(\"\\\\s+\", 3)[2];\n+                String[] numbers = versNums.split(\"\\\\.\", 3);\n+                return new TestDockerMemoryMetricsSubgroup.DockerVersion(Integer.parseInt(numbers[0]),\n+                        Integer.parseInt(numbers[1]),\n+                        Integer.parseInt(numbers[2]));\n+            } catch (Exception e) {\n+                System.out.println(\"Failed to parse docker version: \" + version);\n+                return DEFAULT;\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetricsSubgroup.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"}]}