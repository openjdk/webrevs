{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -102,0 +103,1 @@\n+    @ForceInline\n@@ -286,0 +288,1 @@\n+    @ForceInline\n@@ -290,1 +293,1 @@\n-            throw new IllegalArgumentException(idx + \" is not a valid index. Entry: \" + entry);\n+            throw invalidIndex(idx, entry);\n@@ -294,0 +297,4 @@\n+    static IllegalArgumentException invalidIndex(int idx, PoolEntry entry) {\n+        return new IllegalArgumentException(idx + \" is not a valid index. Entry: \" + entry);\n+    }\n+\n@@ -301,0 +308,10 @@\n+\n+    \/**\n+     * Join head and tail into an exact-size buffer\n+     *\/\n+    static byte[] join(BufWriterImpl head, BufWriterImpl tail) {\n+        byte[] result = new byte[head.size() + tail.size()];\n+        head.copyTo(result, 0);\n+        tail.copyTo(result, head.size());\n+        return result;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+        var constantPool = this.constantPool;\n@@ -183,3 +184,4 @@\n-        List<ClassEntry> ies = new ArrayList<>(interfaceEntries.size());\n-        for (ClassEntry ce : interfaceEntries)\n-            ies.add(AbstractPoolEntry.maybeClone(constantPool, ce));\n+        int interfaceEntriesSize = interfaceEntries.size();\n+        List<ClassEntry> ies = new ArrayList<>(interfaceEntriesSize);\n+        for (int i = 0; i < interfaceEntriesSize; i++)\n+            ies.add(AbstractPoolEntry.maybeClone(constantPool, interfaceEntries.get(i)));\n@@ -200,2 +202,1 @@\n-        boolean written = constantPool.writeBootstrapMethods(tail);\n-        if (written) {\n+        if (constantPool.writeBootstrapMethods(tail)) {\n@@ -207,3 +208,1 @@\n-        head.writeInt(ClassFile.MAGIC_NUMBER);\n-        head.writeU2(minorVersion);\n-        head.writeU2(majorVersion);\n+        head.writeLong((((long) ClassFile.MAGIC_NUMBER) << 32) | ((minorVersion & 0xFFFFL) << 16) | majorVersion);\n@@ -217,4 +216,1 @@\n-        byte[] result = new byte[head.size() + tail.size()];\n-        head.copyTo(result, 0);\n-        tail.copyTo(result, head.size());\n-        return result;\n+        return BufWriterImpl.join(head, tail);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -193,0 +193,7 @@\n+        if (handlersSize > 0) {\n+            writeExceptionHandlers(buf, pos);\n+        }\n+    }\n+\n+    private void writeExceptionHandlers(BufWriterImpl buf, int pos) {\n+        int handlersSize = handlers.size();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -251,0 +252,1 @@\n+    @ForceInline\n@@ -252,3 +254,4 @@\n-        buf.writeU2(list.size());\n-        for (var e : list) {\n-            writeAttribute(buf, e);\n+        int size = list.size();\n+        buf.writeU2(size);\n+        for (int i = 0; i < size; i++) {\n+            writeAttribute(buf, list.get(i));\n@@ -258,0 +261,1 @@\n+    @ForceInline\n@@ -259,3 +263,4 @@\n-        buf.writeU2(list.size());\n-        for (var e : list) {\n-            e.writeTo(buf);\n+        int size = list.size();\n+        buf.writeU2(size);\n+        for (int i = 0; i < size; i++) {\n+            list.get(i).writeTo(buf);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}