{"files":[{"patch":"@@ -64,1 +64,1 @@\n-        if (!(paramSpec instanceof GCMParameterSpec)) {\n+        if (!(paramSpec instanceof GCMParameterSpec gps)) {\n@@ -68,1 +68,0 @@\n-        GCMParameterSpec gps = (GCMParameterSpec) paramSpec;\n@@ -71,0 +70,5 @@\n+        if (this.tLen < 12 || this.tLen > 16 ) {\n+            throw new InvalidParameterSpecException\n+                (\"GCM parameter parsing error: unsupported tag len: \" +\n+                 this.tLen);\n+        }\n@@ -123,1 +127,4 @@\n-        bytes.putInteger(tLen);\n+        \/\/ Only put non-default values\n+        if (tLen != 12) {\n+            bytes.putInteger(tLen);\n+        }\n@@ -139,3 +146,0 @@\n-        StringBuilder sb\n-            = new StringBuilder(LINE_SEP + \"    iv:\" + LINE_SEP + \"[\"\n-                + encoder.encodeBuffer(iv) + \"]\");\n@@ -143,2 +147,3 @@\n-        sb.append(LINE_SEP + \"tLen(bits):\" + LINE_SEP + tLen*8 + LINE_SEP);\n-        return sb.toString();\n+        return LINE_SEP + \"    iv:\" + LINE_SEP + \"[\"\n+                + encoder.encodeBuffer(iv) + \"]\" + LINE_SEP + \"tLen(bits):\"\n+                + LINE_SEP + tLen * 8 + LINE_SEP;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GCMParameters.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.util;\n-\n-import java.io.IOException;\n-import java.security.AlgorithmParametersSpi;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n-import javax.crypto.spec.GCMParameterSpec;\n-\n-\/**\n- * This class implements the parameter set used with\n- * GCM encryption, which is defined in RFC 5084 as follows:\n- *\n- * <pre>\n- *    GCMParameters ::= SEQUENCE {\n- *      aes-iv      OCTET STRING, -- recommended size is 12 octets\n- *      aes-tLen    AES-GCM-ICVlen DEFAULT 12 }\n- *\n- *    AES-GCM-ICVlen ::= INTEGER (12 | 13 | 14 | 15 | 16)\n- *\n- * <\/pre>\n- *\n- * @since 13\n- *\/\n-public final class GCMParameters extends AlgorithmParametersSpi {\n-\n-    \/\/ the iv\n-    private byte[] iv;\n-    \/\/ the tag length in bytes\n-    private int tLen;\n-\n-    public GCMParameters() {}\n-\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n-        throws InvalidParameterSpecException {\n-\n-        if (!(paramSpec instanceof GCMParameterSpec gps)) {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter specification\");\n-        }\n-        \/\/ need to convert from bits to bytes for ASN.1 encoding\n-        this.tLen = gps.getTLen()\/8;\n-        if (this.tLen < 12 || this.tLen > 16 ) {\n-            throw new InvalidParameterSpecException\n-                (\"GCM parameter parsing error: unsupported tag len: \" +\n-                 this.tLen);\n-        }\n-        this.iv = gps.getIV();\n-    }\n-\n-    protected void engineInit(byte[] encoded) throws IOException {\n-        DerValue val = new DerValue(encoded);\n-        \/\/ check if IV or params\n-        if (val.tag == DerValue.tag_Sequence) {\n-            byte[] iv = val.data.getOctetString();\n-            int tLen;\n-            if (val.data.available() != 0) {\n-                tLen = val.data.getInteger();\n-                if (tLen < 12 || tLen > 16 ) {\n-                    throw new IOException\n-                        (\"GCM parameter parsing error: unsupported tag len: \" +\n-                         tLen);\n-                }\n-                if (val.data.available() != 0) {\n-                    throw new IOException\n-                        (\"GCM parameter parsing error: extra data\");\n-                }\n-            } else {\n-                tLen = 12;\n-            }\n-            this.iv = iv.clone();\n-            this.tLen = tLen;\n-        } else {\n-            throw new IOException(\"GCM parameter parsing error: no SEQ tag\");\n-        }\n-    }\n-\n-    protected void engineInit(byte[] encoded, String decodingMethod)\n-        throws IOException {\n-        engineInit(encoded);\n-    }\n-\n-    protected <T extends AlgorithmParameterSpec>\n-            T engineGetParameterSpec(Class<T> paramSpec)\n-        throws InvalidParameterSpecException {\n-\n-        if (paramSpec.isAssignableFrom(GCMParameterSpec.class)) {\n-            return paramSpec.cast(new GCMParameterSpec(tLen * 8, iv));\n-        } else {\n-            throw new InvalidParameterSpecException\n-                (\"Inappropriate parameter specification\");\n-        }\n-    }\n-\n-    protected byte[] engineGetEncoded() throws IOException {\n-        DerOutputStream out = new DerOutputStream();\n-        DerOutputStream bytes = new DerOutputStream();\n-\n-        bytes.putOctetString(iv);\n-        \/\/ Only put non-default values\n-        if (tLen != 12) {\n-            bytes.putInteger(tLen);\n-        }\n-        out.write(DerValue.tag_Sequence, bytes);\n-        return out.toByteArray();\n-    }\n-\n-    protected byte[] engineGetEncoded(String encodingMethod)\n-        throws IOException {\n-        return engineGetEncoded();\n-    }\n-\n-    \/*\n-     * Returns a formatted string describing the parameters.\n-     *\/\n-    protected String engineToString() {\n-        String LINE_SEP = System.lineSeparator();\n-        HexDumpEncoder encoder = new HexDumpEncoder();\n-\n-        return LINE_SEP + \"    iv:\" + LINE_SEP + \"[\"\n-                + encoder.encodeBuffer(iv) + \"]\" + LINE_SEP + \"tLen(bits):\"\n-                + LINE_SEP + tLen * 8 + LINE_SEP;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/GCMParameters.java","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"},{"patch":"@@ -703,1 +703,2 @@\n-        d(AGP, \"GCM\",            \"sun.security.util.GCMParameters\",\n+        d(AGP, \"GCM\",\n+                \"com.sun.crypto.provider.GCMParameters\",\n@@ -1496,1 +1497,1 @@\n-                    return new sun.security.util.GCMParameters();\n+                    return new com.sun.crypto.provider.GCMParameters();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}