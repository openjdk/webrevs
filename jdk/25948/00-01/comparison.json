{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-   return Agent_Initialize(jvm, options, reserved);\n+  return Agent_Initialize(jvm, options, reserved);\n@@ -47,1 +47,1 @@\n-    return Agent_Initialize(jvm, options, reserved);\n+  return Agent_Initialize(jvm, options, reserved);\n@@ -52,1 +52,1 @@\n-    return JNI_VERSION_9;\n+  return JNI_VERSION_9;\n@@ -56,2 +56,2 @@\n-    jvmtiError err;\n-    jvmtiPhase phase;\n+  jvmtiError err;\n+  jvmtiPhase phase;\n@@ -59,1 +59,1 @@\n-    RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n+  RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n@@ -61,2 +61,2 @@\n-    err = jvmti->GetPhase(&phase);\n-    check_jvmti_status(jni, err, \"GetPhase\");\n+  err = jvmti->GetPhase(&phase);\n+  check_jvmti_status(jni, err, \"GetPhase\");\n@@ -64,5 +64,5 @@\n-    if (phase == JVMTI_PHASE_START) {\n-        thread_start_events_vm_start++;\n-        LOG(\">>>    ThreadStart event: phase: %s\\n\", TranslatePhase(phase));\n-    }\n-    agent_locker.notify(); \/\/ notify VM_INIT thread\n+  if (phase == JVMTI_PHASE_START) {\n+    thread_start_events_vm_start++;\n+    LOG(\">>>    ThreadStart event: phase: %s\\n\", TranslatePhase(phase));\n+  }\n+  agent_locker.notify(); \/\/ notify VM_INIT thread\n@@ -73,6 +73,8 @@\n-    RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n-\n-    if (thread_start_events_vm_start == 0) {\n-        \/\/ wait for at least one thread to start in early VM_START phase\n-        agent_locker.wait(200);\n-    }\n+  RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n+\n+  LOG(\">>>    VMInit event\\n\");\n+  if (thread_start_events_vm_start == 0) {\n+    \/\/ wait for at least one thread to start in early VM_START phase\n+    LOG(\">>>    VMInit event: waiting for any ThreadStart event\\n\");\n+    agent_locker.wait(200);\n+  }\n@@ -83,4 +85,4 @@\n-    jint res, size;\n-    jvmtiCapabilities caps;\n-    jvmtiEventCallbacks callbacks;\n-    jvmtiError err;\n+  jint res, size;\n+  jvmtiCapabilities caps;\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiError err;\n@@ -88,5 +90,5 @@\n-    res = jvm->GetEnv((void **)(&jvmti), JVMTI_VERSION_9);\n-    if (res != JNI_OK || jvmti == NULL) {\n-        LOG(\"    Error: wrong result of a valid call to GetEnv!\\n\");\n-        return JNI_ERR;\n-    }\n+  res = jvm->GetEnv((void **)(&jvmti), JVMTI_VERSION_9);\n+  if (res != JNI_OK || jvmti == NULL) {\n+    LOG(\"    Error: wrong result of a valid call to GetEnv!\\n\");\n+      return JNI_ERR;\n+  }\n@@ -94,3 +96,3 @@\n-    LOG(\"Enabling following capability: can_generate_early_vmstart\\n\");\n-    memset(&caps, 0, sizeof(caps));\n-    caps.can_generate_early_vmstart = 1;\n+  LOG(\"Enabling following capability: can_generate_early_vmstart\\n\");\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_generate_early_vmstart = 1;\n@@ -98,2 +100,2 @@\n-    err = jvmti->AddCapabilities(&caps);\n-    check_jvmti_error(jvmti->AddCapabilities(&caps), \"AddCapabilities\");\n+  err = jvmti->AddCapabilities(&caps);\n+  check_jvmti_error(jvmti->AddCapabilities(&caps), \"AddCapabilities\");\n@@ -101,4 +103,4 @@\n-    size = (jint)sizeof(callbacks);\n-    memset(&callbacks, 0, sizeof(callbacks));\n-    callbacks.VMInit = VMInit;\n-    callbacks.ThreadStart = ThreadStart;\n+  size = (jint)sizeof(callbacks);\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.VMInit = VMInit;\n+  callbacks.ThreadStart = ThreadStart;\n@@ -106,2 +108,2 @@\n-    err = jvmti->SetEventCallbacks(&callbacks, size);\n-    check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventCallbacks\");\n+  err = jvmti->SetEventCallbacks(&callbacks, size);\n+  check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventCallbacks\");\n@@ -109,2 +111,2 @@\n-    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_START, NULL);\n-    check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventNotificationMode for VM_START\");\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_INIT, NULL);\n+  check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventNotificationMode for VM_INIT\");\n@@ -112,2 +114,2 @@\n-    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL);\n-    check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventNotificationMode for THREAD_START\");\n+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL);\n+  check_jvmti_error(jvmti->AddCapabilities(&caps), \"SetEventNotificationMode for THREAD_START\");\n@@ -115,2 +117,2 @@\n-    agent_lock = create_raw_monitor(jvmti, \"agent_lock\");\n-    return JNI_OK;\n+  agent_lock = create_raw_monitor(jvmti, \"agent_lock\");\n+  return JNI_OK;\n@@ -121,18 +123,18 @@\n-    jobject loader = NULL;\n-\n-    RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n-\n-    if (jvmti == NULL) {\n-        fatal(jni, \"JVMTI client was not properly loaded!\\n\");\n-        return FAILED;\n-    }\n-\n-    \/*\n-     * Expecting that ThreadStart events are sent during VM Start phase when\n-     * can_generate_early_vmstart capability is enabled.\n-     *\/\n-    if (thread_start_events_vm_start == 0) {\n-        fatal(jni, \"Didn't get ThreadStart events in VM early start phase!\\n\");\n-        return FAILED;\n-    }\n-    return PASSED;\n+  jobject loader = NULL;\n+\n+  RawMonitorLocker agent_locker(jvmti, jni, agent_lock);\n+\n+  if (jvmti == NULL) {\n+    fatal(jni, \"JVMTI client was not properly loaded!\\n\");\n+    return FAILED;\n+  }\n+\n+  \/*\n+   * Expecting that ThreadStart events are sent during VM Start phase when\n+   * can_generate_early_vmstart capability is enabled.\n+   *\/\n+  if (thread_start_events_vm_start == 0) {\n+    fatal(jni, \"Didn't get ThreadStart events in VM early start phase!\\n\");\n+      return FAILED;\n+  }\n+  return PASSED;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ModuleAwareAgents\/ThreadStart\/libMAAThreadStart.cpp","additions":66,"deletions":64,"binary":false,"changes":130,"status":"modified"}]}