{"files":[{"patch":"@@ -1427,0 +1427,1 @@\n+  assert(post_head->in(1)->is_IfProj(), \"must be zero-trip guard If node projection of the post loop\");\n@@ -1432,0 +1433,1 @@\n+  const uint last_node_index_in_pre_loop_body = Compile::current()->unique() - 1;\n@@ -1444,0 +1446,1 @@\n+  DEBUG_ONLY(const uint last_node_index_from_backedge_goo = Compile::current()->unique() - 1);\n@@ -1445,2 +1448,0 @@\n-  const uint last_node_index_in_pre_loop_body = Compile::current()->unique() - 1;\n-  assert(post_head->in(1)->is_IfProj(), \"must be zero-trip guard If node projection of the post loop\");\n@@ -1450,1 +1451,2 @@\n-                                                  last_node_index_in_pre_loop_body, old_new);\n+                                                  last_node_index_in_pre_loop_body,\n+                                                  DEBUG_ONLY(last_node_index_from_backedge_goo COMMA) old_new);\n@@ -1726,0 +1728,1 @@\n+                                                                   DEBUG_ONLY(const uint last_node_index_from_backedge_goo COMMA)\n@@ -1728,3 +1731,4 @@\n-  const NodeInMainLoopBody node_in_original_loop_body(first_node_index_in_pre_loop_body,\n-                                                      last_node_index_in_pre_loop_body, old_new);\n-  create_assertion_predicates_at_main_or_post_loop(pre_loop_head, main_loop_head, node_in_original_loop_body, true);\n+  const NodeInMainLoopBody node_in_main_loop_body(first_node_index_in_pre_loop_body,\n+                                                  last_node_index_in_pre_loop_body,\n+                                                  DEBUG_ONLY(last_node_index_from_backedge_goo COMMA) old_new);\n+  create_assertion_predicates_at_main_or_post_loop(pre_loop_head, main_loop_head, node_in_main_loop_body, true);\n@@ -1770,1 +1774,3 @@\n-\/\/ target loop entry which corresponds to the tail of the last Assertion Predicate before the target loop.\n+\/\/ target loop entry which corresponds to the tail of the last Assertion Predicate before the target loop. This is safe\n+\/\/ to do because these control dependent nodes on the old target loop entry created by clone_up_backedge_goo() were\n+\/\/ pinned on the loop backedge before. The Assertion Predicates are not control dependent on these nodes in any way.\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -955,1 +955,3 @@\n-                                                     uint last_node_index_in_pre_loop_body, const Node_List& old_new);\n+                                                     uint last_node_index_in_pre_loop_body,\n+                                                     DEBUG_ONLY(uint last_node_index_from_backedge_goo COMMA)\n+                                                     const Node_List& old_new);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -969,0 +969,1 @@\n+      \/\/ Check that the clone is actually part of the cloned loop body and not from some earlier cloning.\n@@ -970,2 +971,0 @@\n-    } else {\n-      return false;\n@@ -973,0 +972,1 @@\n+    return false;\n@@ -982,0 +982,1 @@\n+  DEBUG_ONLY(const uint _last_node_index_from_backedge_goo;)\n@@ -986,1 +987,1 @@\n-                 const Node_List& old_new)\n+                     DEBUG_ONLY(const uint last_node_index_from_backedge_goo COMMA) const Node_List& old_new)\n@@ -989,0 +990,1 @@\n+        DEBUG_ONLY(_last_node_index_from_backedge_goo(last_node_index_from_backedge_goo) COMMA)\n@@ -999,1 +1001,5 @@\n-      return cloned_node != nullptr && cloned_node->_idx >= _first_node_index_in_pre_loop_body;\n+      \/\/ Check that the clone is actually part of the cloned loop body and not from some earlier cloning.\n+      bool cloned_node_in_pre_loop_body = cloned_node != nullptr && cloned_node->_idx >= _first_node_index_in_pre_loop_body;\n+      assert(!cloned_node_in_pre_loop_body || cloned_node->_idx <= _last_node_index_in_pre_loop_body,\n+             \"clone must be part of pre loop body\");\n+      return cloned_node_in_pre_loop_body;\n@@ -1002,1 +1008,4 @@\n-    return node->_idx > _last_node_index_in_pre_loop_body;\n+    bool node_created_by_backedge_goo = node->_idx > _last_node_index_in_pre_loop_body;\n+    assert(!node_created_by_backedge_goo || node->_idx <= _last_node_index_from_backedge_goo,\n+           \"cloned node must have been created in PhaseIdealLoop::clone_up_backedge_goo()\");\n+    return node_created_by_backedge_goo;\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"}]}