{"files":[{"patch":"@@ -60,11 +60,56 @@\n-        \/\/ ------------ byte -------------\n-        ops.add(Expression.make(BYTES, \"(byte)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", INTS,    \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(BYTES, \"(byte)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(BYTES, \"(\", BOOLEANS, \"?\", BYTES, \":\", BYTES, \")\"));\n+        \/\/ Cast between all primitive types. Escept for Boolean, we cannot cast from and to.\n+        CodeGenerationDataNameType.INTEGRAL_AND_FLOATING_TYPES.stream().forEach(src -> {\n+            CodeGenerationDataNameType.INTEGRAL_AND_FLOATING_TYPES.stream().forEach(dst -> {\n+                ops.add(Expression.make(dst, \"(\" + dst.name() + \")(\", src,   \")\"));\n+            });\n+        });\n+\n+        \/\/ Ternary operator.\n+        CodeGenerationDataNameType.INTEGRAL_AND_FLOATING_TYPES.stream().forEach(type -> {\n+            ops.add(Expression.make(type, \"(\", BOOLEANS, \"?\", type, \":\", type, \")\"));\n+        });\n+\n+        List.of(INTS, LONGS).stream().forEach(type -> {\n+            \/\/ Arithmetic operators\n+            ops.add(Expression.make(type, \"(-(\", type, \"))\"));\n+            ops.add(Expression.make(type, \"(\", type, \" + \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" - \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" * \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" \/ \", type, \")\", withArithmeticException));\n+            ops.add(Expression.make(type, \"(\", type, \" % \", type, \")\", withArithmeticException));\n+\n+            \/\/ Bitwise Operators (non short-circuit)\n+            ops.add(Expression.make(type, \"(~(\", type, \"))\"));\n+            ops.add(Expression.make(type, \"(\", type, \" & \",   type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" | \",   type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" ^ \",   type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" << \",  type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" >> \",  type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" >>> \", type, \")\"));\n+\n+            \/\/ Relational \/ Comparison Operators\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" == \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" != \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" > \",  type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" < \",  type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" >= \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" <= \", type, \")\"));\n+        });\n+\n+        CodeGenerationDataNameType.FLOATING_TYPES.stream().forEach(type -> {\n+            \/\/ Arithmetic operators\n+            ops.add(Expression.make(type, \"(-(\", type, \"))\"));\n+            ops.add(Expression.make(type, \"(\", type, \" + \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" - \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" * \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" \/ \", type, \")\"));\n+            ops.add(Expression.make(type, \"(\", type, \" % \", type, \")\"));\n+\n+            \/\/ Relational \/ Comparison Operators\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" == \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" != \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" > \",  type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" < \",  type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" >= \", type, \")\"));\n+            ops.add(Expression.make(BOOLEANS, \"(\", type, \" <= \", type, \")\"));\n+        });\n@@ -72,0 +117,2 @@\n+        \/\/ ------------ byte -------------\n+        \/\/ Cast and ternary operator handled above.\n@@ -81,11 +128,1 @@\n-        ops.add(Expression.make(CHARS, \"(char)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", INTS,    \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(CHARS, \"(char)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(CHARS, \"(\", BOOLEANS, \"?\", CHARS, \":\", CHARS, \")\"));\n-\n+        \/\/ Cast and ternary operator handled above.\n@@ -99,11 +136,1 @@\n-        ops.add(Expression.make(SHORTS, \"(short)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", INTS,    \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(SHORTS, \"(short)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(SHORTS, \"(\", BOOLEANS, \"?\", SHORTS, \":\", SHORTS, \")\"));\n-\n+        \/\/ Cast and ternary operator handled above.\n@@ -120,35 +147,2 @@\n-        ops.add(Expression.make(INTS, \"(int)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", INTS,    \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(INTS, \"(int)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(INTS, \"(\", BOOLEANS, \"?\", INTS, \":\", INTS, \")\"));\n-\n-        \/\/ Arithmetic operators\n-        ops.add(Expression.make(INTS, \"(-(\", INTS, \"))\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" + \", INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" - \", INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" * \", INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" \/ \", INTS, \")\", withArithmeticException));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" % \", INTS, \")\", withArithmeticException));\n-\n-        \/\/ Bitwise Operators (non short-circuit)\n-        ops.add(Expression.make(INTS, \"(~(\", INTS, \"))\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" & \",   INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" | \",   INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" ^ \",   INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" << \",  INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" >> \",  INTS, \")\"));\n-        ops.add(Expression.make(INTS, \"(\", INTS, \" >>> \", INTS, \")\"));\n-\n-        \/\/ Relational \/ Comparison Operators\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" == \", INTS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" != \", INTS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" > \",  INTS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" < \",  INTS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" >= \", INTS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", INTS, \" <= \", INTS, \")\"));\n+        \/\/ Cast and ternary operator handled above.\n+        \/\/ Arithmetic, Bitwise, Relational \/ Comparison handled above.\n@@ -179,35 +173,2 @@\n-        ops.add(Expression.make(LONGS, \"(long)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", INTS,    \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(LONGS, \"(long)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(LONGS, \"(\", BOOLEANS, \"?\", LONGS, \":\", LONGS, \")\"));\n-\n-        \/\/ Arithmetic operators\n-        ops.add(Expression.make(LONGS, \"(-(\", LONGS, \"))\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" + \", LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" - \", LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" * \", LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" \/ \", LONGS, \")\", withArithmeticException));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" % \", LONGS, \")\", withArithmeticException));\n-\n-        \/\/ Bitwise Operators (non short-circuit)\n-        ops.add(Expression.make(LONGS, \"(~(\", LONGS, \"))\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" & \",   LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" | \",   LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" ^ \",   LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" << \",  LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" >> \",  LONGS, \")\"));\n-        ops.add(Expression.make(LONGS, \"(\", LONGS, \" >>> \", LONGS, \")\"));\n-\n-        \/\/ Relational \/ Comparison Operators\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" == \", LONGS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" != \", LONGS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" > \",  LONGS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" < \",  LONGS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" >= \", LONGS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", LONGS, \" <= \", LONGS, \")\"));\n+        \/\/ Cast and ternary operator handled above.\n+        \/\/ Arithmetic, Bitwise, Relational \/ Comparison handled above.\n@@ -237,27 +198,2 @@\n-        ops.add(Expression.make(FLOATS, \"(float)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", INTS,    \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(FLOATS, \"(float)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(FLOATS, \"(\", BOOLEANS, \"?\", FLOATS, \":\", FLOATS, \")\"));\n-\n-        \/\/ Arithmetic operators\n-        ops.add(Expression.make(FLOATS, \"(-(\", FLOATS, \"))\"));\n-        ops.add(Expression.make(FLOATS, \"(\", FLOATS, \" + \", FLOATS, \")\"));\n-        ops.add(Expression.make(FLOATS, \"(\", FLOATS, \" - \", FLOATS, \")\"));\n-        ops.add(Expression.make(FLOATS, \"(\", FLOATS, \" * \", FLOATS, \")\"));\n-        ops.add(Expression.make(FLOATS, \"(\", FLOATS, \" \/ \", FLOATS, \")\"));\n-        ops.add(Expression.make(FLOATS, \"(\", FLOATS, \" % \", FLOATS, \")\"));\n-\n-\n-        \/\/ Relational \/ Comparison Operators\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" == \", FLOATS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" != \", FLOATS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" > \",  FLOATS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" < \",  FLOATS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" >= \", FLOATS, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", FLOATS, \" <= \", FLOATS, \")\"));\n+        \/\/ Cast and ternary operator handled above.\n+        \/\/ Arithmetic and Relational \/ Comparison handled above.\n@@ -280,26 +216,2 @@\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", BYTES,   \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", SHORTS,  \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", CHARS,   \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", INTS,    \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", LONGS,   \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", FLOATS,  \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(double)(\", DOUBLES, \")\"));\n-        \/\/ There is no cast from boolean.\n-\n-        ops.add(Expression.make(DOUBLES, \"(\", BOOLEANS, \"?\", DOUBLES, \":\", DOUBLES, \")\"));\n-\n-        \/\/ Arithmetic operators\n-        ops.add(Expression.make(DOUBLES, \"(-(\", DOUBLES, \"))\"));\n-        ops.add(Expression.make(DOUBLES, \"(\", DOUBLES, \" + \", DOUBLES, \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(\", DOUBLES, \" - \", DOUBLES, \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(\", DOUBLES, \" * \", DOUBLES, \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(\", DOUBLES, \" \/ \", DOUBLES, \")\"));\n-        ops.add(Expression.make(DOUBLES, \"(\", DOUBLES, \" % \", DOUBLES, \")\"));\n-\n-        \/\/ Relational \/ Comparison Operators\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" == \", DOUBLES, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" != \", DOUBLES, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" > \",  DOUBLES, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" < \",  DOUBLES, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" >= \", DOUBLES, \")\"));\n-        ops.add(Expression.make(BOOLEANS, \"(\", DOUBLES, \" <= \", DOUBLES, \")\"));\n+        \/\/ Cast and ternary operator handled above.\n+        \/\/ Arithmetic and Relational \/ Comparison handled above.\n@@ -321,4 +233,1 @@\n-        \/\/ There is no cast to boolean.\n-\n-        ops.add(Expression.make(BOOLEANS, \"(\", BOOLEANS, \"?\", BOOLEANS, \":\", BOOLEANS, \")\"));\n-\n+        \/\/ Cast and ternary operator handled above.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/library\/Operations.java","additions":69,"deletions":160,"binary":false,"changes":229,"status":"modified"}]}