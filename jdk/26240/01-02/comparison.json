{"files":[{"patch":"@@ -35,1 +35,0 @@\n-class G1HeapSizingPolicy;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  if (result == nullptr) {\n-    result = mutator_alloc_region(node_index)->attempt_allocation(min_word_size, desired_word_size, actual_word_size);\n+  if (result != nullptr) {\n+    return result;\n@@ -61,1 +61,1 @@\n-  return result;\n+  return mutator_alloc_region(node_index)->attempt_allocation(min_word_size, desired_word_size, actual_word_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-ï»¿\n@@ -42,2 +41,0 @@\n-#include \"gc\/g1\/g1HeapSizingPolicy.hpp\"  \/\/ Include this first to avoid include cycle\n-#include \"gc\/g1\/g1HeapEvaluationTask.hpp\"\n@@ -51,0 +48,1 @@\n+#include \"gc\/g1\/g1HeapEvaluationTask.hpp\"\n@@ -55,0 +53,1 @@\n+#include \"gc\/g1\/g1HeapSizingPolicy.hpp\"\n@@ -1078,1 +1077,1 @@\n-    log_info(gc, heap)(\"Heap shrink completed: uncommitted %u regions (%zuMB), heap size now %zuMB\",\n+    log_info(gc, heap)(\"Heap shrink flagged: uncommitted %u regions (%zuMB), heap size now %zuMB\",\n@@ -1511,1 +1510,1 @@\n-    _heap_evaluation_task = nullptr;\n+    assert(_heap_evaluation_task == nullptr, \"pre-condition\");\n@@ -1575,1 +1574,1 @@\n-  if (G1UseTimeBasedHeapSizing && _heap_evaluation_task != nullptr) {\n+  if (G1UseTimeBasedHeapSizing) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/task.hpp\"  \/\/ Changed from g1ServiceThread.hpp\n+#include \"runtime\/task.hpp\"\n@@ -34,2 +34,5 @@\n-\/\/ Time-based heap evaluation task that runs during idle periods\n-class G1HeapEvaluationTask : public PeriodicTask {  \/\/ Changed from G1ServiceTask\n+\/\/ Time-based heap evaluation task that runs during idle periods.\n+\/\/ Uses PeriodicTask rather than G1ServiceTask due to build compatibility issues\n+\/\/ in JDK 25+. PeriodicTask's 10ms granularity is adequate for heap evaluation\n+\/\/ which typically runs on intervals of seconds or longer.\n+class G1HeapEvaluationTask : public PeriodicTask {\n@@ -41,1 +44,1 @@\n-  virtual void task() override;  \/\/ Changed from execute() to task()\n+  virtual void task() override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapEvaluationTask.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  record_activity(); \/\/ Record region initialization\n+  record_activity(); \/\/ Update timestamp when region becomes available\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,5 +44,0 @@\n-void G1HeapSizingPolicy::initialize() {\n-  \/\/ Flag values are available at this point\n-  _uncommit_delay_ms = (jlong)G1UncommitDelayMillis;\n-}\n-\n@@ -61,0 +56,2 @@\n+  \/\/ Initialize static uncommit delay from flag value\n+  _uncommit_delay_ms = (jlong)G1UncommitDelayMillis;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n-  static void initialize();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -173,0 +173,4 @@\n+\n+void VM_G1ShrinkHeap::doit() {\n+  _g1h->shrink(_bytes);\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+class G1CollectedHeap;\n+\n@@ -109,0 +111,13 @@\n+class VM_G1ShrinkHeap : public VM_Operation {\n+ private:\n+  G1CollectedHeap* _g1h;\n+  size_t _bytes;\n+ public:\n+  VM_G1ShrinkHeap(G1CollectedHeap* g1h, size_t bytes)\n+    : _g1h(g1h), _bytes(bytes) {}\n+  VMOp_Type type() const override { return VMOp_G1ShrinkHeap; }\n+  const char* name() const override { return \"G1ShrinkHeap\"; }\n+  bool is_gc_operation() const override { return true; }\n+  void doit() override;\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -644,6 +644,0 @@\n-#if INCLUDE_G1GC\n-void VM_G1ShrinkHeap::doit() {\n-  _g1h->shrink(_bytes);\n-}\n-#endif \/\/ INCLUDE_G1GC\n-\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -296,15 +296,0 @@\n-#if INCLUDE_G1GC\n-class VM_G1ShrinkHeap : public VM_Operation {\n- private:\n-  G1CollectedHeap* _g1h;\n-  size_t _bytes;\n- public:\n-  VM_G1ShrinkHeap(G1CollectedHeap* g1h, size_t bytes)\n-    : _g1h(g1h), _bytes(bytes) {}\n-  VMOp_Type type() const override { return VMOp_G1ShrinkHeap; }\n-  const char* name() const override { return \"G1ShrinkHeap\"; }\n-  bool is_gc_operation() const override { return true; }\n-  void doit() override;\n-};\n-#endif \/\/ INCLUDE_G1GC\n-\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}