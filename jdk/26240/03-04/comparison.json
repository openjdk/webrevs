{"files":[{"patch":"@@ -1136,1 +1136,1 @@\n-    return true;                     \/\/ we *did* something\n+    return true;                     \/\/ We did something.\n@@ -1142,1 +1142,1 @@\n-  return true;                       \/\/ pages were at least *requested* to be released\n+  return true;                       \/\/ Pages were at least requested to be released.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -929,2 +929,0 @@\n-  \/\/ The heap sizing policy.\n-  G1HeapSizingPolicy* heap_sizing_policy() const { return _heap_sizing_policy; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-﻿\/*\n+\/*\n@@ -43,1 +43,1 @@\n-  \/\/ This runs on WatcherThread during idle periods - perfect for time-based evaluation!\n+  \/\/ This runs on WatcherThread during idle periods - perfect for uncommit evaluation!\n@@ -52,1 +52,1 @@\n-    log_trace(gc, sizing)(\"GC active, skipping time-based evaluation\");\n+    log_trace(gc, sizing)(\"GC active, skipping uncommit evaluation\");\n@@ -62,1 +62,1 @@\n-    \/\/ Time-based evaluation only handles uncommit\/shrinking, never expansion\n+    \/\/ Uncommit-based sizing only handles shrinking, never expansion\n@@ -64,3 +64,3 @@\n-      log_warning(gc, sizing)(\"Time-based evaluation unexpected expansion request ignored (resize_amount=%zuB)\", resize_amount);\n-      \/\/ This should not happen since time-based policy only handles uncommit\n-      assert(false, \"Time-based heap sizing should never request expansion\");\n+      log_warning(gc, sizing)(\"Uncommit evaluation: unexpected expansion request ignored (resize_amount=%zuB)\", resize_amount);\n+      \/\/ This should not happen since uncommit-based policy only handles shrinking\n+      assert(false, \"Uncommit-based heap sizing should never request expansion\");\n@@ -68,2 +68,2 @@\n-      log_info(gc, sizing)(\"Time-based evaluation: shrinking heap by %zuMB\", resize_amount \/ M);\n-      log_debug(gc, sizing)(\"Time-based evaluation recommends shrinking by %zuB\", resize_amount);\n+      log_info(gc, sizing)(\"Uncommit evaluation: shrinking heap by %zuMB\", resize_amount \/ M);\n+      log_debug(gc, sizing)(\"Uncommit evaluation: policy recommends shrinking by %zuB\", resize_amount);\n@@ -76,1 +76,1 @@\n-      log_info(gc, sizing)(\"Time-based evaluation: no heap uncommit needed (evaluation #%d)\", evaluation_count);\n+      log_info(gc, sizing)(\"Uncommit evaluation: no heap uncommit needed (evaluation #%d)\", evaluation_count);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapEvaluationTask.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-  _last_access_timestamp(os::javaTimeMillis()), \/\/ Initialize timestamp with milliseconds to match uncommit check\n+  _last_access_timestamp(Ticks::now()), \/\/ Initialize timestamp with current time\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-﻿\/*\n+\/*\n@@ -40,0 +40,1 @@\n+#include \"utilities\/ticks.hpp\"\n@@ -257,1 +258,1 @@\n-  jlong _last_access_timestamp;\n+  Ticks _last_access_timestamp;\n@@ -562,1 +563,1 @@\n-    _last_access_timestamp = os::javaTimeMillis();  \/\/ Use milliseconds to match uncommit check\n+    _last_access_timestamp = Ticks::now();\n@@ -565,1 +566,1 @@\n-  jlong last_access_time() const {\n+  Ticks last_access_time() const {\n@@ -570,1 +571,1 @@\n-  bool should_uncommit(uint64_t delay) const {\n+  bool should_uncommit(Tickspan delay) const {\n@@ -574,3 +575,3 @@\n-    jlong current_time = os::javaTimeMillis();\n-    jlong elapsed = current_time - _last_access_timestamp;\n-    return elapsed > (jlong)delay;\n+    Ticks current_time = Ticks::now();\n+    Tickspan elapsed = current_time - _last_access_timestamp;\n+    return elapsed > delay;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"utilities\/ticks.hpp\"\n@@ -42,1 +43,1 @@\n-jlong G1HeapSizingPolicy::_uncommit_delay_ms = 0;\n+Tickspan G1HeapSizingPolicy::_uncommit_delay;\n@@ -57,1 +58,1 @@\n-  _uncommit_delay_ms = (jlong)G1UncommitDelayMillis;\n+  _uncommit_delay = Tickspan();\n@@ -494,3 +495,3 @@\n-  jlong current_time = os::javaTimeMillis();\n-  jlong last_access = hr->last_access_time();\n-  jlong elapsed = current_time - last_access;\n+  Ticks current_time = Ticks::now();\n+  Ticks last_access = hr->last_access_time();\n+  Tickspan elapsed = current_time - last_access;\n@@ -499,1 +500,1 @@\n-                     hr->hrm_index(), elapsed, (jlong)_uncommit_delay_ms, last_access, current_time,\n+                     hr->hrm_index(), elapsed.milliseconds(), (jlong)G1UncommitDelayMillis, last_access.value(), current_time.value(),\n@@ -502,1 +503,1 @@\n-  bool should_uncommit = elapsed > (jlong)_uncommit_delay_ms;\n+  bool should_uncommit = elapsed.milliseconds() > G1UncommitDelayMillis;\n@@ -505,1 +506,1 @@\n-                  hr->hrm_index(), elapsed);\n+                  hr->hrm_index(), (jlong)elapsed.milliseconds());\n@@ -544,1 +545,1 @@\n-    log_trace(gc, sizing)(\"Time-based evaluation details: current_heap=%zuB min_heap=%zuB \"\n+    log_trace(gc, sizing)(\"Uncommit evaluation: current_heap=%zuB min_heap=%zuB \"\n@@ -568,1 +569,1 @@\n-        log_info(gc, sizing)(\"Time-based uncommit skipped: would reduce heap below initial size (%zuMB < %zuMB)\",\n+        log_info(gc, sizing)(\"Uncommit evaluation: skipped, would reduce heap below initial size (%zuMB < %zuMB)\",\n@@ -578,1 +579,1 @@\n-        log_info(gc, sizing)(\"Time-based uncommit: found %u inactive regions, uncommitting %zu regions (%zuMB)\",\n+        log_info(gc, sizing)(\"Uncommit evaluation: found %u inactive regions, uncommitting %zu regions (%zuMB)\",\n@@ -580,1 +581,1 @@\n-        log_debug(gc, sizing)(\"Time-based heap uncommit evaluation: Found %u inactive regions out of %u total regions, \"\n+        log_debug(gc, sizing)(\"Uncommit evaluation: Found %u inactive regions out of %u total regions, \"\n@@ -591,1 +592,1 @@\n-  log_trace(gc, sizing)(\"Time-based heap evaluation: no uncommit needed \"\n+  log_trace(gc, sizing)(\"Uncommit evaluation: no uncommit needed \"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-﻿\/*\n+\/*\n@@ -36,0 +36,1 @@\n+#include \"utilities\/ticks.hpp\"\n@@ -74,1 +75,1 @@\n-  static jlong _uncommit_delay_ms;  \/\/ Delay before uncommitting inactive regions\n+  static Tickspan _uncommit_delay;  \/\/ Delay before uncommitting inactive regions\n@@ -122,1 +123,1 @@\n-  static jlong uncommit_delay() { return _uncommit_delay_ms; }\n+  static Tickspan uncommit_delay() { return _uncommit_delay; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-  product(bool, G1UseTimeBasedHeapSizing, false, EXPERIMENTAL,              \\\n+  product(bool, G1UseTimeBasedHeapSizing, true, DIAGNOSTIC,                 \\\n@@ -387,1 +387,1 @@\n-  product(size_t, G1MinRegionsToUncommit, 10, EXPERIMENTAL,                 \\\n+  product(size_t, G1MinRegionsToUncommit, 10, DIAGNOSTIC,                   \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- *                   -XX:+UnlockExperimentalVMOptions -XX:+G1UseTimeBasedHeapSizing\n+ *                   -XX:+UnlockDiagnosticVMOptions\n@@ -69,1 +69,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -78,1 +78,1 @@\n-        \/\/ Verify the time-based evaluation logic is working\n+        \/\/ Verify the uncommit evaluation logic is working\n@@ -84,1 +84,1 @@\n-        output.shouldContain(\"Time-based heap uncommit evaluation:\");\n+        output.shouldContain(\"Uncommit evaluation: Found\");\n@@ -134,1 +134,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -156,1 +156,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestG1RegionUncommit.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+G1UseTimeBasedHeapSizing\n+ * @run main\/othervm -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions\n@@ -59,2 +59,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -105,2 +104,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -119,2 +117,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -135,2 +132,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestTimeBasedHeapConfig.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+G1UseTimeBasedHeapSizing\n+ * @run main\/othervm -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions\n@@ -50,2 +50,1 @@\n-        \"-XX:+UnlockExperimentalVMOptions \" +\n-        \"-XX:+G1UseTimeBasedHeapSizing \" +\n+        \"-XX:+UnlockDiagnosticVMOptions \" +\n@@ -152,2 +151,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestTimeBasedHeapSizing.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+G1UseTimeBasedHeapSizing\n+ * @run main\/othervm -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions\n@@ -50,2 +50,1 @@\n-        \"-XX:+UnlockExperimentalVMOptions \" +\n-        \"-XX:+G1UseTimeBasedHeapSizing \" +\n+        \"-XX:+UnlockDiagnosticVMOptions \" +\n@@ -140,2 +139,1 @@\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+G1UseTimeBasedHeapSizing\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestTimeBasedRegionTracking.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}