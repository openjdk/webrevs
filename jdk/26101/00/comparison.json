{"files":[{"patch":"@@ -73,1 +73,1 @@\n-    _exception_handler_size = DEBUG_ONLY(256) NOT_DEBUG(32), \/\/ or smaller\n+    _exception_handler_size = DEBUG_ONLY(256) NOT_DEBUG(64), \/\/ or smaller\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"code\/aotCodeCache.hpp\"\n@@ -761,1 +762,3 @@\n-  BLOCK_COMMENT(msg);\n+  \/\/ Skip AOT caching C strings in scratch buffer.\n+  const char* str = (code_section()->scratch_emit()) ? msg : AOTCodeCache::add_C_string(msg);\n+  BLOCK_COMMENT(str);\n@@ -763,1 +766,1 @@\n-  emit_int64((uintptr_t)msg);\n+  emit_int64((uintptr_t)str);\n@@ -793,1 +796,0 @@\n-  int32_t offset = 0;\n@@ -795,2 +797,2 @@\n-  movptr(t1, entry_point, offset, t0);\n-  jalr(t1, offset);\n+  movptr(t1, RuntimeAddress(entry_point), t0);\n+  jalr(t1);\n@@ -3398,0 +3400,13 @@\n+void MacroAssembler::decode_klass_not_null_for_aot(Register dst, Register src, Register tmp) {\n+  \/\/ we have to load the klass base from the AOT constants area but\n+  \/\/ not the shift because it is not allowed to change\n+  int shift = CompressedKlassPointers::shift();\n+  assert(shift >= 0 && shift <= CompressedKlassPointers::max_shift(), \"unexpected compressed klass shift!\");\n+  assert_different_registers(src, tmp);\n+  la(tmp, ExternalAddress(CompressedKlassPointers::base_addr()));\n+  ld(tmp, tmp);\n+  Register t = src == dst ? dst : t0;\n+  assert_different_registers(t, tmp);\n+  shadd(dst, src, tmp, t, shift);\n+}\n+\n@@ -3406,0 +3421,5 @@\n+  if (AOTCodeCache::is_on_for_dump()) {\n+    decode_klass_not_null_for_aot(dst, src, tmp);\n+    return;\n+  }\n+\n@@ -3432,0 +3452,18 @@\n+void MacroAssembler::encode_klass_not_null_for_aot(Register dst, Register src, Register tmp) {\n+  \/\/ we have to load the klass base from the AOT constants area but\n+  \/\/ not the shift because it is not allowed to change\n+  int shift = CompressedKlassPointers::shift();\n+  assert(shift >= 0 && shift <= CompressedKlassPointers::max_shift(), \"unexpected compressed klass shift!\");\n+  assert_different_registers(src, tmp);\n+  Register xbase = dst;\n+  if (dst == src) {\n+    xbase = tmp;\n+  }\n+  la(xbase, ExternalAddress(CompressedKlassPointers::base_addr()));\n+  ld(xbase, xbase);\n+  sub(dst, src, xbase);\n+  if (shift != 0) {\n+    srli(dst, dst, shift);\n+  }\n+}\n+\n@@ -3440,0 +3478,5 @@\n+  if (AOTCodeCache::is_on_for_dump()) {\n+    encode_klass_not_null_for_aot(dst, src, tmp);\n+    return;\n+  }\n+\n@@ -4885,1 +4928,1 @@\n-  mv(t1, CAST_FROM_FN_PTR(address, Thread::current));\n+  movptr(t1, ExternalAddress(CAST_FROM_FN_PTR(address, Thread::current)));\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -202,0 +202,2 @@\n+  void decode_klass_not_null_for_aot(Register dst, Register src, Register tmp);\n+  void encode_klass_not_null_for_aot(Register dst, Register src, Register tmp);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"code\/aotCodeCache.hpp\"\n@@ -65,0 +66,5 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  if (blob != nullptr) {\n+    return blob->as_uncommon_trap_blob();\n+  }\n+\n@@ -246,2 +252,4 @@\n-  return UncommonTrapBlob::create(&buffer, oop_maps,\n-                                                  SimpleRuntimeFrame::framesize >> 1);\n+  UncommonTrapBlob *ut_blob = UncommonTrapBlob::create(&buffer, oop_maps,\n+                                                       SimpleRuntimeFrame::framesize >> 1);\n+  AOTCodeCache::store_code_blob(*ut_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::uncommon_trap_id, name);\n+  return ut_blob;\n@@ -287,0 +295,5 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  if (blob != nullptr) {\n+    return blob->as_exception_blob();\n+  }\n+\n@@ -385,1 +398,3 @@\n-  return ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n+  ExceptionBlob* ex_blob = ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n+  AOTCodeCache::store_code_blob(*ex_blob, AOTCodeEntry::C2Blob, (uint)OptoStubId::exception_id, name);\n+  return ex_blob;\n","filename":"src\/hotspot\/cpu\/riscv\/runtime_riscv.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"code\/aotCodeCache.hpp\"\n@@ -2104,0 +2105,6 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n+  if (blob != nullptr) {\n+    _deopt_blob = blob->as_deoptimization_blob();\n+    return;\n+  }\n+\n@@ -2463,0 +2470,2 @@\n+\n+  AOTCodeCache::store_code_blob(*_deopt_blob, AOTCodeEntry::SharedBlob, (uint)SharedStubId::deopt_id, name);\n@@ -2496,0 +2505,5 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  if (blob != nullptr) {\n+    return blob->as_safepoint_blob();\n+  }\n+\n@@ -2600,1 +2614,4 @@\n-  return SafepointBlob::create(&buffer, oop_maps, frame_size_in_words);\n+  SafepointBlob* sp_blob = SafepointBlob::create(&buffer, oop_maps, frame_size_in_words);\n+\n+  AOTCodeCache::store_code_blob(*sp_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  return sp_blob;\n@@ -2619,0 +2636,5 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  if (blob != nullptr) {\n+    return blob->as_runtime_stub();\n+  }\n+\n@@ -2689,1 +2711,4 @@\n-  return RuntimeStub::new_runtime_stub(name, &buffer, frame_complete, frame_size_in_words, oop_maps, true);\n+  RuntimeStub* rs_blob = RuntimeStub::new_runtime_stub(name, &buffer, frame_complete, frame_size_in_words, oop_maps, true);\n+\n+  AOTCodeCache::store_code_blob(*rs_blob, AOTCodeEntry::SharedBlob, (uint)id, name);\n+  return rs_blob;\n@@ -2734,0 +2759,5 @@\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::SharedBlob, (uint)id, name);\n+  if (blob != nullptr) {\n+    return blob->as_runtime_stub();\n+  }\n+\n@@ -2792,0 +2822,2 @@\n+\n+  AOTCodeCache::store_code_blob(*stub, AOTCodeEntry::SharedBlob, (uint)id, name);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-#if defined(ZERO) || !(defined(AMD64) || defined(AARCH64))\n+#if defined(ZERO) || !(defined(AMD64) || defined(AARCH64) || defined(RISCV64))\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -485,1 +485,1 @@\n-          (Platform.isX64() || Platform.isAArch64())) {\n+          (Platform.isX64() || Platform.isAArch64() || Platform.isRISCV64())) {\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}