{"files":[{"patch":"@@ -803,0 +803,1 @@\n+java\/awt\/Frame\/SizeMinimizedTest.java 4065534 linux-x64\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    public static void main (String args[]) throws Exception {\n+    public static void main (String[] args) throws Exception {\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameMaximizedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String[] args) throws Exception {\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameMinimizeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,1 @@\n-import java.awt.BorderLayout;\n-import java.awt.Button;\n+import java.awt.Dimension;\n@@ -28,2 +27,7 @@\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.awt.Robot;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.SwingUtilities;\n@@ -33,0 +37,1 @@\n+ * @key headful\n@@ -35,3 +40,1 @@\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @run main\/manual SizeMinimizedTest\n+ * @run main SizeMinimizedTest\n@@ -41,1 +44,13 @@\n-    private static Frame frame2;\n+    private static Frame frame;\n+    private static final int INITIAL_WIDTH = 100;\n+    private static final int INITIAL_HEIGHT = 100;\n+    private static final int INITIAL_X = 150;\n+    private static final int INITIAL_Y = 50;\n+    private static final int RESET_WIDTH = 200;\n+    private static final int RESET_HEIGHT = 200;\n+    private static final int OFFSET = 10;\n+    private static int iterationCnt = 0;\n+    private static Dimension expectedSize;\n+    private static Dimension frameSize;\n+    private static Point expectedLoc;\n+    private static Point frameLoc;\n@@ -44,12 +59,6 @@\n-        String INSTRUCTIONS = \"\"\"\n-                        (While this test runs, frame2 size and position will\n-                        continuously be logged, so you can verify its changes)\n-                        1. When the test starts, two frame windows will appear.\n-                        Note the size of frame2.\n-                        2. Minimize frame2 then click the resize button\n-                        3. Restore frame2, it should be square and 200x200 pixels.\n-                        4. Note the position of frame2.\n-                        5. Minimize frame2 and click the move button several times.\n-                        6. Restore frame2, it should have shifted to the right by\n-                        about 10 pixels for every time move was clicked.\n-                \"\"\";\n+        Robot robot = new Robot();\n+        try {\n+            frame = new Frame(\"frame size test\");\n+            frame.setSize(INITIAL_WIDTH, INITIAL_HEIGHT);\n+            frame.setLocation(INITIAL_X, INITIAL_Y);\n+            frame.setVisible(true);\n@@ -57,9 +66,26 @@\n-        PassFailJFrame.builder()\n-                .instructions(INSTRUCTIONS)\n-                .rows(11)\n-                .columns(50)\n-                .testUI(SizeMinimizedTest::initialize)\n-                .logArea()\n-                .build()\n-                .awaitAndCheck();\n-    }\n+            frame.addWindowListener(new WindowAdapter() {\n+                @Override\n+                public void windowOpened(WindowEvent e) {\n+                    System.out.println(\"Initial Frame Size: \" + frame.getSize());\n+                    System.out.println(\"Initial Frame Location: \" + frame.getLocationOnScreen());\n+                }\n+            });\n+            frame.addComponentListener(new ComponentAdapter() {\n+                @Override\n+                public void componentResized(ComponentEvent e) {\n+                    System.out.println(\"Frame Size: \" + frame.getSize());\n+\n+                    expectedSize = new Dimension(RESET_WIDTH, RESET_HEIGHT);\n+                    frameSize = frame.getSize();\n+\n+                    if (!expectedSize.equals(frameSize)) {\n+                        throw new RuntimeException(\"Test Failed due to size mismatch.\");\n+                    }\n+                }\n+\n+                @Override\n+                public void componentMoved(ComponentEvent e) {\n+                    System.out.println(\"Frame Location: \" + frame.getLocationOnScreen());\n+\n+                    expectedLoc = new Point(INITIAL_X + OFFSET * iterationCnt, INITIAL_Y);\n+                    frameLoc = frame.getLocationOnScreen();\n@@ -67,18 +93,5 @@\n-    public static List<Frame> initialize() {\n-        Frame frame1 = new Frame(\"frame1\");\n-        Button resize = new Button(\"resize\");\n-        frame1.add(resize, BorderLayout.NORTH);\n-        resize.addActionListener(actionEvent -> {\n-            PassFailJFrame.log(\"** Setting size to 200, 200 **\");\n-            frame2.setSize(200, 200);\n-        });\n-        Button move = new Button(\"move\");\n-        frame1.add(move, BorderLayout.CENTER);\n-        move.addActionListener(actionEvent -> {\n-            PassFailJFrame.log(\"** Moving right 10 pixels **\");\n-            Point pt = frame2.getLocation();\n-            frame2.setLocation(pt.x + 10, pt.y);\n-        });\n-        Button quit = new Button(\"quit\");\n-        frame1.add(quit, BorderLayout.SOUTH);\n-        quit.addActionListener(actionEvent -> System.exit(0));\n+                    if (!expectedLoc.equals(frameLoc)) {\n+                        throw new RuntimeException(\"Test Failed due to location mismatch.\");\n+                    }\n+                }\n+            });\n@@ -86,2 +99,3 @@\n-        frame1.setSize(100, 100);\n-        frame1.setLocation(10, 10);\n+            frame.setSize(RESET_WIDTH, RESET_HEIGHT);\n+            robot.waitForIdle();\n+            robot.delay(100);\n@@ -89,9 +103,17 @@\n-        frame2 = new Frame(\"frame2\");\n-        frame2.setSize(100, 100);\n-        frame2.setLocation(150, 50);\n-        frame1.setVisible(true);\n-        frame2.setVisible(true);\n-        List<Frame> frameList = new ArrayList<>();\n-        frameList.add(frame1);\n-        frameList.add(frame2);\n-        return frameList;\n+            for (int i = 0; i < 5; i++) {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    Point pt = frame.getLocation();\n+                    frame.setLocation(pt.x + OFFSET, pt.y);\n+                });\n+                iterationCnt++;\n+                robot.waitForIdle();\n+                robot.delay(100);\n+            }\n+            System.out.println(\"Test Passed!\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n","filename":"test\/jdk\/java\/awt\/Frame\/SizeMinimizedTest.java","additions":80,"deletions":58,"binary":false,"changes":138,"status":"modified"}]}