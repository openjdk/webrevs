{"files":[{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Label;\n+\n+\/*\n+ * @test\n+ * @bug 4106068\n+ * @summary Test to verify maximized window is not too big\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameMaximizedTest\n+ *\/\n+\n+public class FrameMaximizedTest {\n+    public static void main (String args[]) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Maximize the frame window. Check that the right and bottom edges of the\n+                window are not off the edge of the screen. If they are not, the test\n+                is successful and the bug is fixed.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(4)\n+                .columns(40)\n+                .testUI(new TestFrame())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class TestFrame extends Frame {\n+    public TestFrame() {\n+        setTitle(\"FrameMaximizedTest\");\n+        setSize(500, 300);\n+        add(\"North\", new Label(\"Maximize me and check if my \" +\n+                \"bottom and right edge are on screen.\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameMaximizedTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+\n+\/*\n+ * @test\n+ * @bug 4172782\n+ * @summary Test if non-resizable frame is minimizable\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FrameMinimizeTest\n+ *\/\n+\n+public class FrameMinimizeTest {\n+    public static void main(String args[]) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                When the blank FrameMinimizeTest frame is shown, verify that\n+                  1. It is not resizable;\n+                  2. It is minimizable.\n+                                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(4)\n+                .columns(35)\n+                .testUI(FrameMinimizeTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame f = new Frame(\"FrameMinimizeTest\");\n+        f.setSize(200, 200);\n+        f.setResizable(false);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameMinimizeTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,271 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.Image;\n+import java.awt.Label;\n+import java.awt.MediaTracker;\n+import java.awt.Panel;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.ImageProducer;\n+import java.net.URL;\n+\n+\/*\n+ * @test\n+ * @bug 4175560\n+ * @summary Test use of user-defined icons\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MegaIconTest\n+ *\/\n+\n+public class MegaIconTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Each of the buttons in the main window represents a test\n+                of certain icon functionality - transparency\/opacity, scaling etc.\n+                Clicking on each button brings up a window displaying the graphic\n+                that should appear in the corresponding icon.\n+                Click on each button, minimize the resulting window, and check that\n+                the icon is displayed as the test name indicates.\n+                On Win32, icons should also be displayed correctly in the title bar.\n+                If all the test pass, then this test passes, else fail.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(10)\n+                .columns(35)\n+                .testUI(MegaIconTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        \/\/Create the iconTestFrames and add to IconTestButtons\n+        IconTestButtons itb = new IconTestButtons(new IconTestFrame[]{\n+                new IconTestFrame(\"Opaque, Scaled Icon Test\",\n+                        \"fight.gif\"),\n+\n+                new IconTestFrame(\"Transparent Icon\",\n+                        \"dukeWave.gif\"),\n+\n+                new IconTestFrameBG(\"Transparent, Scaled Icon with bg\",\n+                        \"fight.gif\", Color.red),\n+\n+                new IconTestFrameDlg(\"Transparent icon w\/ Dialog\",\n+                        \"dukeWave.gif\")\n+        });\n+        itb.pack();\n+        return itb;\n+    }\n+}\n+\n+class IconTestButtons extends Frame {\n+    public IconTestButtons(IconTestFrame[] iconTests) {\n+        IconTestFrame tempTest;\n+        Button newBtn;\n+        Panel newPnl;\n+        DoneLabel newLbl;\n+\n+        setTitle(\"MegaIconTest\");\n+\n+        setLayout(new GridLayout(iconTests.length, 1));\n+\n+        \/\/For each icon test frame\n+        \/\/Get name, add button with name and action to\n+        \/\/display the window, and add label \"done\" after\n+\n+        for (int i = 0; i < iconTests.length; i++) {\n+            tempTest = iconTests[i];\n+            newBtn = new Button(tempTest.getTestName());\n+            newLbl = new DoneLabel();\n+            newBtn.addActionListener(new IconTestActionListener(tempTest,\n+                    newLbl));\n+            newPnl = new Panel();\n+            newPnl.add(newBtn);\n+            newPnl.add(newLbl);\n+            add(newPnl);\n+        }\n+    }\n+\n+    protected class DoneLabel extends Label {\n+        public DoneLabel() {\n+            super(\"Done\");\n+            setVisible(false);\n+        }\n+    }\n+\n+    protected class IconTestActionListener implements ActionListener {\n+        IconTestFrame f;\n+        DoneLabel l;\n+\n+        public IconTestActionListener(IconTestFrame frame, DoneLabel label) {\n+            this.f = frame;\n+            this.l = label;\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            f.pack();\n+            f.setVisible(true);\n+            l.setVisible(true);\n+            IconTestButtons.this.pack();\n+        }\n+    }\n+}\n+\n+class IconTestFrame extends Frame {\n+    private String testName;\n+    int width, height;\n+    Image iconImage;\n+    MediaTracker tracker;\n+\n+    public IconTestFrame(String testName, String iconFileName) {\n+        super(testName);\n+        this.testName = testName;\n+        tracker = new MediaTracker(this);\n+\n+        \/\/Set icon image\n+        URL url = MegaIconTest.class.getResource(iconFileName);\n+        Toolkit tk = Toolkit.getDefaultToolkit();\n+        if (tk == null) {\n+            System.out.println(\"Toolkit is null!\");\n+        }\n+        if (url == null) {\n+            System.out.println(\"Can't load icon is null!\");\n+            return;\n+        }\n+        try {\n+            iconImage = tk.createImage((ImageProducer) url.getContent());\n+        } catch (java.io.IOException e) {\n+            System.out.println(\"Unable to load icon image from url: \" + url);\n+        }\n+        tracker.addImage(iconImage, 0);\n+        try {\n+            tracker.waitForAll();\n+        } catch (java.lang.InterruptedException e) {\n+            System.err.println(e);\n+        }\n+        width = iconImage.getWidth(this);\n+        height = iconImage.getHeight(this);\n+        setIconImage(iconImage);\n+\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                setVisible(false);\n+            }\n+        });\n+\n+        setLayout(new BorderLayout());\n+\n+        \/\/Add the icon graphic and instructions to the Frame\n+        add(new IconCanvas(), \"Center\");\n+        pack();\n+    }\n+\n+    class IconCanvas extends Canvas {\n+        public void paint(Graphics g) {\n+            if (IconTestFrame.this.iconImage == null) {\n+                throw new NullPointerException();\n+            }\n+            g.drawImage(IconTestFrame.this.iconImage, 0, 0, this);\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(IconTestFrame.this.width,\n+                    IconTestFrame.this.height);\n+        }\n+\n+        public Dimension getMinimumSize() {\n+            return getPreferredSize();\n+        }\n+\n+        public Dimension getMaximumSize() {\n+            return getPreferredSize();\n+        }\n+    }\n+\n+    public String getTestName() {\n+        return testName;\n+    }\n+}\n+\n+class IconTestFrameBG extends IconTestFrame {\n+    public IconTestFrameBG(String testName, String iconFileName, Color bg) {\n+        super(testName, iconFileName);\n+        setBackground(bg);\n+        Panel p = new Panel();\n+        p.setLayout(new GridLayout(3, 1));\n+        p.add(new Label(\"The background of this window has been set.\"));\n+        p.add(new Label(\"Unless the default icon background is the same color,\"));\n+        p.add(new Label(\"the icon background should NOT be this color.\"));\n+        add(p, \"North\");\n+        pack();\n+    }\n+}\n+\n+class IconTestFrameDlg extends IconTestFrame implements ActionListener {\n+    Dialog dlg;\n+    Button dlgBtn;\n+\n+    public IconTestFrameDlg(String testName, String iconFilename) {\n+        super(testName, iconFilename);\n+        Panel p = new Panel();\n+        p.setLayout(new GridLayout(4, 1));\n+        p.add(new Label(\"Click on the button below to display a child dialog.\"));\n+        p.add(new Label(\"On Win32, the Dialog's titlebar icon should match\"));\n+        p.add(new Label(\"the titlebar icon of this window.\"));\n+        p.add(new Label(\"Minimizing this Frame should yield only one icon.\"));\n+        add(p, \"North\");\n+\n+        dlg = new Dialog(this);\n+        dlg.setSize(200, 200);\n+        dlg.add(new Label(\"Dialog stuff.\"));\n+        dlg.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                setVisible(false);\n+            }\n+        });\n+\n+        dlgBtn = new Button(\"Display Dialog\");\n+        dlgBtn.addActionListener(this);\n+        add(dlgBtn, \"South\");\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        dlg.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MegaIconTest\/MegaIconTest.java","additions":271,"deletions":0,"binary":false,"changes":271,"status":"added"},{"filename":"test\/jdk\/java\/awt\/Frame\/MegaIconTest\/dukeWave.gif","binary":true,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Frame\/MegaIconTest\/fight.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/demo\/share\/jfc\/J2Ddemo\/images\/fight.gif","status":"copied"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4065534\n+ * @summary Frame.setSize() doesn't change size if window is in an iconified state\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SizeMinimizedTest\n+ *\/\n+\n+public class SizeMinimizedTest {\n+    private static Frame frame2;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                        (While this test runs, frame2 size and position will\n+                        continuously be logged, so you can verify its changes)\n+                        1. When the test starts, two frame windows will appear.\n+                        Note the size of frame2.\n+                        2. Minimize frame2 then click the resize button\n+                        3. Restore frame2, it should be square and 200x200 pixels.\n+                        4. Note the position of frame2.\n+                        5. Minimize frame2 and click the move button several times.\n+                        6. Restore frame2, it should have shifted to the right by\n+                        about 10 pixels for every time move was clicked.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows(11)\n+                .columns(50)\n+                .testUI(SizeMinimizedTest::initialize)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static List<Frame> initialize() {\n+        Frame frame1 = new Frame(\"frame1\");\n+        Button resize = new Button(\"resize\");\n+        frame1.add(resize, BorderLayout.NORTH);\n+        resize.addActionListener(actionEvent -> {\n+            PassFailJFrame.log(\"** Setting size to 200, 200 **\");\n+            frame2.setSize(200, 200);\n+        });\n+        Button move = new Button(\"move\");\n+        frame1.add(move, BorderLayout.CENTER);\n+        move.addActionListener(actionEvent -> {\n+            PassFailJFrame.log(\"** Moving right 10 pixels **\");\n+            Point pt = frame2.getLocation();\n+            frame2.setLocation(pt.x + 10, pt.y);\n+        });\n+        Button quit = new Button(\"quit\");\n+        frame1.add(quit, BorderLayout.SOUTH);\n+        quit.addActionListener(actionEvent -> System.exit(0));\n+\n+        frame1.setSize(100, 100);\n+        frame1.setLocation(10, 10);\n+\n+        frame2 = new Frame(\"frame2\");\n+        frame2.setSize(100, 100);\n+        frame2.setLocation(150, 50);\n+        frame1.setVisible(true);\n+        frame2.setVisible(true);\n+        List<Frame> frameList = new ArrayList<>();\n+        frameList.add(frame1);\n+        frameList.add(frame2);\n+        return frameList;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/SizeMinimizedTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}