{"files":[{"patch":"@@ -49,0 +49,1 @@\n+        manager.setLayoutSelfEdges(true);\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalCFGLayoutManager.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    private boolean layoutSelfEdges = false;\n@@ -43,0 +44,5 @@\n+        setLayoutSelfEdges(false);\n+    }\n+\n+    public void setLayoutSelfEdges(boolean layoutSelfEdges) {\n+        this.layoutSelfEdges = layoutSelfEdges;\n@@ -54,1 +60,3 @@\n-        \/\/ STEP 1: Remove self edges and reverse edges\n+        removeSelfEdges(layoutGraph);\n+\n+        \/\/ STEP 1: Reverse edges\n@@ -72,0 +80,32 @@\n+    \/**\n+     * Removes self-edges from nodes in the graph. If self-edges are to be included in the layout\n+     * (`layoutSelfEdges` is true), it stores them in the node for later processing and marks the graph\n+     * to display self-edges\n+     *\/\n+    private void removeSelfEdges(LayoutGraph graph) {\n+        for (LayoutNode node : graph.getLayoutNodes()) {\n+            \/\/ Collect self-edges first to avoid concurrent modification\n+            List<LayoutEdge> selfEdges = new ArrayList<>();\n+            for (LayoutEdge edge : node.getSuccessors()) {\n+                if (edge.getTo() == node) {\n+                    selfEdges.add(edge);\n+                }\n+            }\n+\n+            \/\/ Remove each self-edge\n+            for (LayoutEdge edge : selfEdges) {\n+                node.removeSuccessor(edge);\n+                node.removePredecessor(edge);\n+            }\n+            if (layoutSelfEdges) {\n+                for (LayoutEdge selfEdge : selfEdges) {\n+                    node.setSelfEdge(selfEdge);\n+                }\n+                graph.setShowSelfEdges(true);\n+            }\n+        }\n+        if (layoutSelfEdges) {\n+            graph.setShowSelfEdges(true);\n+        }\n+    }\n+\n@@ -79,1 +119,0 @@\n-            removeSelfEdges(graph);\n@@ -88,18 +127,0 @@\n-        private static void removeSelfEdges(LayoutGraph graph) {\n-            for (LayoutNode node : graph.getLayoutNodes()) {\n-                \/\/ Collect self-edges first to avoid concurrent modification\n-                List<LayoutEdge> selfEdges = new ArrayList<>();\n-                for (LayoutEdge edge : node.getSuccessors()) {\n-                    if (edge.getTo() == node) {\n-                        selfEdges.add(edge);\n-                    }\n-                }\n-\n-                \/\/ Remove each self-edge\n-                for (LayoutEdge edge : selfEdges) {\n-                    node.removeSuccessor(edge);\n-                    node.removePredecessor(edge);\n-                }\n-            }\n-        }\n-\n@@ -680,0 +701,13 @@\n+            if (graph.showSelfEdges()) {\n+                for (LayoutNode layoutNode : graph.getLayoutNodes()) {\n+                    if (layoutNode.hasSelfEdge()) {\n+                        LayoutEdge selfEdge = layoutNode.getSelfEdge();\n+                        ArrayList<Point> points = layoutNode.getSelfEdgePoints();\n+                        for (Point point : points) {\n+                            point.setLocation(point.getX() + layoutNode.getLeft(), point.getY() + layoutNode.getTop());\n+                        }\n+                        linkPositions.put(selfEdge.getLink(), points);\n+                    }\n+                }\n+            }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/HierarchicalLayoutManager.java","additions":54,"deletions":20,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private boolean showSelfEdges = false;\n@@ -99,0 +100,8 @@\n+    public boolean showSelfEdges() {\n+        return showSelfEdges;\n+    }\n+\n+    public void setShowSelfEdges(boolean showSelfEdges) {\n+        this.showSelfEdges = showSelfEdges;\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/LayoutGraph.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    public static final int REVERSE_EDGE_OFFSET = NODE_OFFSET + LayoutNode.DUMMY_WIDTH;\n@@ -53,0 +54,1 @@\n+    private LayoutEdge selfEdge = null;\n@@ -68,0 +70,16 @@\n+    public boolean hasSelfEdge() {\n+        return selfEdge != null;\n+    }\n+\n+    public void setSelfEdge(LayoutEdge selfEdge) {\n+        this.selfEdge = selfEdge;\n+        if (selfEdge != null) {\n+            topMargin += REVERSE_EDGE_OFFSET;\n+            bottomMargin += REVERSE_EDGE_OFFSET;\n+            rightMargin += REVERSE_EDGE_OFFSET;\n+        }\n+    }\n+\n+    public LayoutEdge getSelfEdge() {\n+        return selfEdge;\n+    }\n@@ -105,0 +123,5 @@\n+        if (hasSelfEdge()) {\n+            topMargin += REVERSE_EDGE_OFFSET;\n+            bottomMargin += REVERSE_EDGE_OFFSET;\n+            rightMargin += REVERSE_EDGE_OFFSET;\n+        }\n@@ -422,1 +445,1 @@\n-        int offset = NODE_OFFSET + LayoutNode.DUMMY_WIDTH;\n+        int offset = REVERSE_EDGE_OFFSET;\n@@ -462,1 +485,1 @@\n-        int offset = NODE_OFFSET + LayoutNode.DUMMY_WIDTH;\n+        int offset = REVERSE_EDGE_OFFSET;\n@@ -501,0 +524,12 @@\n+\n+    public ArrayList<Point> getSelfEdgePoints() {\n+        ArrayList<Point> points = new ArrayList<>();\n+\n+        Link selfEdgeLink = getSelfEdge().getLink();\n+\n+        points.add(new Point(selfEdgeLink.getFrom().getRelativePosition().x,  selfEdgeLink.getFrom().getRelativePosition().y-REVERSE_EDGE_OFFSET));\n+        points.add(new Point(width + REVERSE_EDGE_OFFSET,  selfEdgeLink.getFrom().getRelativePosition().y-REVERSE_EDGE_OFFSET));\n+        points.add(new Point(width + REVERSE_EDGE_OFFSET, height + REVERSE_EDGE_OFFSET));\n+        points.add(new Point(selfEdgeLink.getTo().getRelativePosition().x,  height + REVERSE_EDGE_OFFSET));\n+        return points;\n+    }\n","filename":"src\/utils\/IdealGraphVisualizer\/HierarchicalLayout\/src\/main\/java\/com\/sun\/hotspot\/igv\/hierarchicallayout\/LayoutNode.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"}]}