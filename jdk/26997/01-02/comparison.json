{"files":[{"patch":"@@ -340,1 +340,1 @@\n-void Assembler::emit_arith(int op1, int op2, Register dst, Register src, bool swap) {\n+void Assembler::emit_arith(int op1, int op2, Register dst, Register src) {\n@@ -342,1 +342,1 @@\n-  emit_int16(op1, (op2 | encode(swap ? src : dst) << 3 | encode(swap ? dst : src)));\n+  emit_int16(op1, (op2 | encode(dst) << 3 | encode(src)));\n@@ -1431,2 +1431,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x03, 0xC0, no_flags, false \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_32bit, 0x03, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -1664,2 +1663,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x23, 0xC0, no_flags, false \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_32bit, 0x23, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -4417,2 +4415,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_66, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x0B, 0xC0, no_flags, false \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_66, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_16bit, 0x0B, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -4462,2 +4459,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x0B, 0xC0, no_flags, false \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_32bit, 0x0B, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -7307,2 +7303,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x33, 0xC0, no_flags, false \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_32bit, 0x33, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -12931,0 +12926,2 @@\n+    \/\/ Opcode byte adjustment due to mismatch between NDD and equivalent demotable variant\n+    opcode_byte += 2;\n@@ -12932,1 +12929,1 @@\n-      emit_prefix_and_int8(get_prefixq(src1, dst, is_map1), opcode_byte + 2);\n+      emit_prefix_and_int8(get_prefixq(src1, dst, is_map1), opcode_byte);\n@@ -12939,1 +12936,1 @@\n-      emit_int8(opcode_byte + 2);\n+      emit_int8(opcode_byte);\n@@ -13080,3 +13077,2 @@\n-                                               InstructionAttr *attributes, bool no_flags, bool use_prefixq, bool second_operand_demotable) {\n-  bool first_operand_demotable = is_demotable(no_flags, dst_enc, nds_enc);\n-  if (first_operand_demotable || second_operand_demotable) {\n+                                               InstructionAttr *attributes, bool no_flags, bool use_prefixq, bool demotable) {\n+  if (demotable || is_demotable(no_flags, dst_enc, nds_enc)) {\n@@ -13086,5 +13082,1 @@\n-    if (second_operand_demotable) {\n-      return use_prefixq ? prefixq_and_encode(nds_enc, dst_enc) : prefix_and_encode(nds_enc, dst_enc);\n-    } else {\n-      return use_prefixq ? prefixq_and_encode(dst_enc, src_enc) : prefix_and_encode(dst_enc, src_enc);\n-    }\n+    return use_prefixq ? prefixq_and_encode(dst_enc, src_enc) : prefix_and_encode(dst_enc, src_enc);\n@@ -13118,2 +13110,14 @@\n-                                               InstructionAttr *attributes, int op1, int op2, bool no_flags, bool use_prefixq, bool is_commutative) {\n-  bool second_operand_demotable = is_commutative && is_demotable(no_flags, dst->encoding(), src2->encoding());\n+                                                      int size, int op1, int op2, bool no_flags, bool is_commutative) {\n+  bool demotable = is_demotable(no_flags, dst->encoding(), src1->encoding());\n+  if (!demotable && is_commutative) {\n+    if (is_demotable(no_flags, dst->encoding(), src2->encoding())) {\n+      demotable = true;\n+      \/\/ swap src1 and src2\n+      Register tmp = src1;\n+      src1 = src2;\n+      src2 = tmp;\n+    }\n+  }\n+  bool vex_w = (size == EVEX_64bit) ? true : false;\n+  bool use_prefixq = vex_w;\n+  InstructionAttr attributes(AVX_128bit, vex_w, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n@@ -13122,2 +13126,2 @@\n-  (void)emit_eevex_prefix_or_demote_ndd(src1->encoding(), dst->encoding(), src2->encoding(), pre, opc \/* MAP4 *\/, attributes, no_flags, use_prefixq, second_operand_demotable);\n-  emit_arith(op1, op2, src1, src2, second_operand_demotable);\n+  (void)emit_eevex_prefix_or_demote_ndd(src1->encoding(), dst->encoding(), src2->encoding(), pre, opc \/* MAP4 *\/, &attributes, no_flags, use_prefixq, demotable);\n+  emit_arith(op1, op2, src1, src2);\n@@ -13136,1 +13140,0 @@\n-    \/\/attributes.set_address_attributes(\/* tuple_type *\/ EVEX_NOSCALE, size);\n@@ -14664,2 +14667,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x03, 0xC0, no_flags, true \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_64bit, 0x03, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -14758,2 +14760,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x23, 0xC0, no_flags, true \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_64bit, 0x23, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -15618,2 +15619,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x0B, 0xC0, no_flags, true \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_64bit, 0x0B, 0xC0, no_flags, true \/* is_commutative *\/);\n@@ -16362,2 +16362,1 @@\n-  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n-  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, &attributes, 0x33, 0xC0, no_flags, true \/* use_prefixq *\/, true \/* is_commutative *\/);\n+  emit_eevex_prefix_or_demote_arith_ndd(dst, src1, src2, VEX_SIMD_NONE, VEX_OPCODE_0F_3C \/* MAP4 *\/, EVEX_64bit, 0x33, 0xC0, no_flags, true \/* is_commutative *\/);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":34,"deletions":35,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-                                      InstructionAttr *attributes, bool no_flags = false, bool use_prefixq = false, bool second_operand_demotable = false);\n+                                      InstructionAttr *attributes, bool no_flags = false, bool use_prefixq = false, bool demotable = false);\n@@ -811,1 +811,1 @@\n-                                      InstructionAttr *attributes, int op1, int op2, bool no_flags = false, bool use_prefixq = false, bool is_commutative = false);\n+                                             int size, int op1, int op2, bool no_flags = false, bool is_commutative = false);\n@@ -841,1 +841,1 @@\n-  void emit_arith(int op1, int op2, Register dst, Register src, bool swap = false);\n+  void emit_arith(int op1, int op2, Register dst, Register src);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}