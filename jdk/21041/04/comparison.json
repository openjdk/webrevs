{"files":[{"patch":"@@ -261,1 +261,1 @@\n- *     a layout supported by {@code NL}, and<\/li>\n+ *     a layout supported by {@code NL};<\/li>\n@@ -263,1 +263,2 @@\n- *      its non-padding layout elements, or to satisfy (2).<\/li>\n+ *      its non-padding layout elements, or to satisfy (2), and<\/li>\n+ * <li>not all elements in {@code G.memberLayouts()} are padding layouts.<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import java.nio.ByteOrder;\n@@ -203,1 +202,1 @@\n-            checkGroupSize(sl, lastUnpaddedOffset);\n+            checkGroup(sl, lastUnpaddedOffset);\n@@ -213,1 +212,1 @@\n-            checkGroupSize(ul, maxUnpaddedLayout);\n+            checkGroup(ul, maxUnpaddedLayout);\n@@ -216,0 +215,4 @@\n+            if (sl.elementLayout() instanceof PaddingLayout pl) {\n+                throw memberException(sl, pl,\n+                        \"not supported because a sequence of a padding layout is not allowed\");\n+            }\n@@ -220,2 +223,5 @@\n-    \/\/ check for trailing padding\n-    private void checkGroupSize(GroupLayout gl, long maxUnpaddedOffset) {\n+    \/\/ check elements are not all padding layouts and for trailing padding\n+    private void checkGroup(GroupLayout gl, long maxUnpaddedOffset) {\n+        if (!gl.memberLayouts().isEmpty() && gl.memberLayouts().stream().allMatch(e -> e instanceof PaddingLayout)) {\n+            throw new IllegalArgumentException(\"Layout '\" + gl + \"' is non-empty and only has padding layouts\");\n+        }\n@@ -235,2 +241,2 @@\n-            throw new IllegalArgumentException(\"Member layout '\" + memberLayout + \"', of '\" + parent + \"'\" +\n-                    \" found at unexpected offset: \" + offset + \" != \" + expectedOffset);\n+            throw memberException(parent, memberLayout,\n+                    \"found at unexpected offset: \" + offset + \" != \" + expectedOffset);\n@@ -240,0 +246,7 @@\n+    private static IllegalArgumentException memberException(MemoryLayout parent,\n+                                                            MemoryLayout member,\n+                                                            String info) {\n+        return new IllegalArgumentException(\n+                \"Member layout '\" + member + \"', of '\" + parent + \"' \" + info);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,3 @@\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.StructLayout;\n@@ -52,0 +55,1 @@\n+import static org.testng.Assert.expectThrows;\n@@ -154,0 +158,21 @@\n+    @Test\n+    public void embeddedPaddingLayout() {\n+        PaddingLayout padding = MemoryLayout.paddingLayout(64).withByteAlignment(64);\n+        SequenceLayout sequence = MemoryLayout.sequenceLayout(2, padding);\n+        StructLayout struct = MemoryLayout.structLayout(sequence);\n+        FunctionDescriptor fd = FunctionDescriptor.of(struct, struct);\n+        Linker linker = Linker.nativeLinker();\n+        var x = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertTrue(x.getMessage().contains(\"not supported because a sequence of a padding layout is not allowed\"));\n+    }\n+\n+    @Test\n+    public void groupLayoutWithOnlyPadding() {\n+        PaddingLayout padding = MemoryLayout.paddingLayout(1);\n+        StructLayout struct = MemoryLayout.structLayout(padding);\n+        FunctionDescriptor fd = FunctionDescriptor.of(struct, struct);\n+        Linker linker = Linker.nativeLinker();\n+        var x = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertTrue(x.getMessage().contains(\"is non-empty and only has padding layouts\"));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}