{"files":[{"patch":"@@ -217,1 +217,9 @@\n-            long maxUnpaddedLayout = 0;\n+            \/\/ We need to know this up front\n+            long maxUnpaddedLayout = ul.memberLayouts().stream()\n+                    .filter(l -> !(l instanceof PaddingLayout))\n+                    .mapToLong(MemoryLayout::byteSize)\n+                    .max()\n+                    .orElse(0);\n+\n+            boolean hasPadding = false;\n+\n@@ -220,4 +228,6 @@\n-                if (!(member instanceof PaddingLayout pl)) {\n-                    maxUnpaddedLayout = Long.max(maxUnpaddedLayout, member.byteSize());\n-                } else {\n-                    if (pl.byteSize() != ul.byteSize()) {\n+                if (member instanceof PaddingLayout pl) {\n+                    if (hasPadding) {\n+                        throw new IllegalArgumentException(\"More than one padding\" + inMessage(ul));\n+                    }\n+                    hasPadding = true;\n+                    if (pl.byteSize() <= maxUnpaddedLayout) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-    public void paddingUnion() {\n+    public void paddingUnionByteSize3() {\n@@ -214,0 +214,31 @@\n+    @Test\n+    public void paddingUnionByteSize4() {\n+        Linker linker = Linker.nativeLinker();\n+        var union = MemoryLayout.unionLayout(MemoryLayout.paddingLayout(4), ValueLayout.JAVA_INT);\n+        var fd = FunctionDescriptor.of(union, union, union);\n+        var e = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertEquals(e.getMessage(), \"Superfluous padding x4 in [x4|i4]\");\n+    }\n+\n+    @Test\n+    public void paddingUnionByteSize5() {\n+        Linker linker = Linker.nativeLinker();\n+        var union = MemoryLayout.unionLayout(MemoryLayout.paddingLayout(5), ValueLayout.JAVA_INT);\n+        var fd = FunctionDescriptor.of(union, union, union);\n+        var e = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertEquals(e.getMessage(), \"Layout '[x5|i4]' has unexpected size: 5 != 4\");\n+    }\n+\n+    @Test\n+    public void paddingUnionSeveral() {\n+        Linker linker = Linker.nativeLinker();\n+        var union = MemoryLayout.unionLayout(\n+                MemoryLayout.sequenceLayout(3, ValueLayout.JAVA_INT),\n+                ValueLayout.JAVA_LONG,\n+                MemoryLayout.paddingLayout(16),\n+                MemoryLayout.paddingLayout(16));\n+        var fd = FunctionDescriptor.of(union, union, union);\n+        var e = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertEquals(e.getMessage(), \"More than one padding in [[3:i4]|j8|x16|x16]\");\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}