{"files":[{"patch":"@@ -244,2 +244,2 @@\n- * All native linker implementations support a well-defined subset of layouts. More formally,\n- * a layout {@code L} is supported by a native linker {@code NL} if:\n+ * A native linker only supports function descriptors whose argument\/return layouts are\n+ * <em>well-formed<\/em> layouts. More formally, a layout `L`is well-formed if:\n@@ -247,1 +247,2 @@\n- * <li>{@code L} is a value layout {@code V} and {@code V.withoutName()} is a canonical layout<\/li>\n+ * <li>{@code L} is a value layout and {@code L} is derived from a canonical layout\n+ *     {@code C} such that {@code L.byteAlignment() <= C.byteAlignment()}<\/li>\n@@ -250,3 +251,3 @@\n- * <li>the alignment constraint of {@code S} is set to its\n- *     <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>, and<\/li>\n- * <li>{@code S.elementLayout()} is a layout supported by {@code NL}.<\/li>\n+ * <li>{@code L.byteAlignment()} is equal to the sequence layout's <em>natural alignment<\/em>\n+ *     , and<\/li>\n+ * <li>{@code S.elementLayout()} is a well-defined layout.<\/li>\n@@ -257,7 +258,9 @@\n- * <li>the alignment constraint of {@code G} is set to its\n- *     <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>;<\/li>\n- * <li>the size of {@code G} is a multiple of its alignment constraint;<\/li>\n- * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or\n- *     a layout supported by {@code NL}, and<\/li>\n- * <li>{@code G} does not contain padding other than what is strictly required to align\n- *      its non-padding layout elements, or to satisfy (2).<\/li>\n+ * <li>{@code G.byteAlignment()} is equal to the group layout's <em>natural alignment<\/em><\/li>\n+ * <li>{@code G.byteSize()} is a multiple of {@code G.byteAlignment()}<\/li>\n+ * <li>Each member layout in {@code G.memberLayouts()} is either a padding layout or a\n+ *     well-defined layout<\/li>\n+ * <li>Each non-padding member layout {@code E} in {@code G.memberLayouts()} follows an\n+ *     optional padding member layout, whose size is the minimum size required to\n+ *     align {@code E}<\/li>\n+ * <li>{@code G} contains an optional trailing padding member layout, whose size is the\n+ *     minimum size that satisfies (2)<\/li>\n@@ -268,0 +271,3 @@\n+ * Linker implementations may optionally impose additional platform-specific constraints\n+ * on functional descriptors despite being <em>well-formed<\/em>.\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import java.nio.ByteOrder;\n@@ -203,1 +202,1 @@\n-            checkGroupSize(sl, lastUnpaddedOffset);\n+            checkGroup(sl, lastUnpaddedOffset);\n@@ -213,1 +212,1 @@\n-            checkGroupSize(ul, maxUnpaddedLayout);\n+            checkGroup(ul, maxUnpaddedLayout);\n@@ -216,0 +215,4 @@\n+            if (sl.elementLayout() instanceof PaddingLayout pl) {\n+                throw memberException(sl, pl,\n+                        \"not supported because a sequence of a padding layout is not allowed\");\n+            }\n@@ -220,2 +223,5 @@\n-    \/\/ check for trailing padding\n-    private void checkGroupSize(GroupLayout gl, long maxUnpaddedOffset) {\n+    \/\/ check elements are not all padding layouts and for trailing padding\n+    private void checkGroup(GroupLayout gl, long maxUnpaddedOffset) {\n+        if (!gl.memberLayouts().isEmpty() && gl.memberLayouts().stream().allMatch(e -> e instanceof PaddingLayout)) {\n+            throw new IllegalArgumentException(\"Layout '\" + gl + \"' is non-empty and only has padding layouts\");\n+        }\n@@ -235,2 +241,2 @@\n-            throw new IllegalArgumentException(\"Member layout '\" + memberLayout + \"', of '\" + parent + \"'\" +\n-                    \" found at unexpected offset: \" + offset + \" != \" + expectedOffset);\n+            throw memberException(parent, memberLayout,\n+                    \"found at unexpected offset: \" + offset + \" != \" + expectedOffset);\n@@ -240,0 +246,7 @@\n+    private static IllegalArgumentException memberException(MemoryLayout parent,\n+                                                            MemoryLayout member,\n+                                                            String info) {\n+        return new IllegalArgumentException(\n+                \"Member layout '\" + member + \"', of '\" + parent + \"' \" + info);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,3 @@\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.StructLayout;\n@@ -52,0 +55,1 @@\n+import static org.testng.Assert.expectThrows;\n@@ -154,0 +158,21 @@\n+    @Test\n+    public void embeddedPaddingLayout() {\n+        PaddingLayout padding = MemoryLayout.paddingLayout(64).withByteAlignment(64);\n+        SequenceLayout sequence = MemoryLayout.sequenceLayout(2, padding);\n+        StructLayout struct = MemoryLayout.structLayout(sequence);\n+        FunctionDescriptor fd = FunctionDescriptor.of(struct, struct);\n+        Linker linker = Linker.nativeLinker();\n+        var x = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertTrue(x.getMessage().contains(\"not supported because a sequence of a padding layout is not allowed\"));\n+    }\n+\n+    @Test\n+    public void groupLayoutWithOnlyPadding() {\n+        PaddingLayout padding = MemoryLayout.paddingLayout(1);\n+        StructLayout struct = MemoryLayout.structLayout(padding);\n+        FunctionDescriptor fd = FunctionDescriptor.of(struct, struct);\n+        Linker linker = Linker.nativeLinker();\n+        var x = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+        assertTrue(x.getMessage().contains(\"is non-empty and only has padding layouts\"));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}