{"files":[{"patch":"@@ -244,2 +244,2 @@\n- * All native linker implementations support a well-defined subset of layouts. More formally,\n- * a layout {@code L} is supported by a native linker {@code NL} if:\n+ * A native linker only supports function descriptors whose argument\/return layouts are\n+ * <em>well-formed<\/em> layouts. More formally, a layout `L`is well-formed if:\n@@ -247,1 +247,2 @@\n- * <li>{@code L} is a value layout {@code V} and {@code V.withoutName()} is a canonical layout<\/li>\n+ * <li>{@code L} is a value layout and {@code L} is derived from a canonical layout\n+ *     {@code C} such that {@code L.byteAlignment() <= C.byteAlignment()}<\/li>\n@@ -250,3 +251,3 @@\n- * <li>the alignment constraint of {@code S} is set to its\n- *     <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>, and<\/li>\n- * <li>{@code S.elementLayout()} is a layout supported by {@code NL}.<\/li>\n+ * <li>{@code L.byteAlignment()} is equal to the sequence layout's <em>natural alignment<\/em>\n+ *     , and<\/li>\n+ * <li>{@code S.elementLayout()} is a well-defined layout.<\/li>\n@@ -257,8 +258,9 @@\n- * <li>the alignment constraint of {@code G} is set to its\n- *     <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>;<\/li>\n- * <li>the size of {@code G} is a multiple of its alignment constraint;<\/li>\n- * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or\n- *     a layout supported by {@code NL};<\/li>\n- * <li>{@code G} does not contain padding other than what is strictly required to align\n- *      its non-padding layout elements, or to satisfy (2), and<\/li>\n- * <li>not all elements in {@code G.memberLayouts()} are padding layouts.<\/li>\n+ * <li>{@code G.byteAlignment()} is equal to the group layout's <em>natural alignment<\/em><\/li>\n+ * <li>{@code G.byteSize()} is a multiple of {@code G.byteAlignment()}<\/li>\n+ * <li>Each member layout in {@code G.memberLayouts()} is either a padding layout or a\n+ *     well-defined layout<\/li>\n+ * <li>Each non-padding member layout {@code E} in {@code G.memberLayouts()} follows an\n+ *     optional padding member layout, whose size is the minimum size required to\n+ *     align {@code E}<\/li>\n+ * <li>{@code G} contains an optional trailing padding member layout, whose size is the\n+ *     minimum size that satisfies (2)<\/li>\n@@ -269,0 +271,3 @@\n+ * Linker implementations may optionally impose additional platform-specific constraints\n+ * on functional descriptors despite being <em>well-formed<\/em>.\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"}]}