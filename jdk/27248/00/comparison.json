{"files":[{"patch":"@@ -120,4 +120,0 @@\n-  if (c != nullptr) {\n-    ASAN_UNPOISON_MEMORY_REGION(c->base(), c->word_size() * BytesPerWord);\n-  }\n-\n@@ -246,3 +242,0 @@\n-  \/\/ It is valid to poison the chunk payload area at this point since its physically separated from\n-  \/\/ the chunk meta info.\n-  ASAN_POISON_MEMORY_REGION(c->base(), c->word_size() * BytesPerWord);\n@@ -306,3 +299,0 @@\n-  if (enlarged) {\n-    ASAN_UNPOISON_MEMORY_REGION(c->base() + old_word_size, (c->word_size() - old_word_size) * BytesPerWord);\n-  }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -116,0 +116,2 @@\n+  ASAN_UNPOISON_MEMORY_REGION((char*)p, word_size * BytesPerWord);\n+\n@@ -196,0 +198,2 @@\n+  ASAN_POISON_MEMORY_REGION((char*)p, word_size * BytesPerWord);\n+\n@@ -241,4 +245,0 @@\n-  \/\/ Poison the memory region. It will be unpoisoned later on a per-chunk base for chunks that are\n-  \/\/ handed to arenas.\n-  ASAN_POISON_MEMORY_REGION(rs.base(), rs.size());\n-\n@@ -293,4 +293,0 @@\n-  \/\/ Undo the poisoning before potentially unmapping memory. This ensures that future mappings at\n-  \/\/ the same address do not unexpectedly fail with use-after-poison.\n-  ASAN_UNPOISON_MEMORY_REGION(_rs.base(), _rs.size());\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}