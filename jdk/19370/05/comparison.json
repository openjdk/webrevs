{"files":[{"patch":"@@ -1397,7 +1397,0 @@\n-\n-\n-#ifndef PRODUCT\n-void ArchiveBuilder::assert_is_vm_thread() {\n-  assert(Thread::current()->is_VM_thread(), \"ArchiveBuilder should be used only inside the VMThread\");\n-}\n-#endif\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -346,2 +346,0 @@\n-  static void assert_is_vm_thread() PRODUCT_RETURN;\n-\n@@ -430,1 +428,0 @@\n-    assert_is_vm_thread();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1409,1 +1409,2 @@\n-    MetaspaceShared::unrecoverable_writing_error();\n+    MetaspaceShared::writing_error();\n+    return;\n@@ -1662,1 +1663,1 @@\n-    MetaspaceShared::unrecoverable_writing_error(\"Unable to write to shared archive file.\");\n+    MetaspaceShared::writing_error(\"Unable to write to shared archive file.\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -439,0 +439,2 @@\n+  FileMapInfo* _map_info;\n+  StaticArchiveBuilder& _builder;\n@@ -449,1 +451,2 @@\n-  VM_PopulateDumpSharedSpace() : VM_Operation(), _heap_info() {}\n+  VM_PopulateDumpSharedSpace(StaticArchiveBuilder& b) :\n+    VM_Operation(), _heap_info(), _map_info(nullptr), _builder(b) {}\n@@ -454,0 +457,2 @@\n+  ArchiveHeapInfo* heap_info()  { return &_heap_info; }\n+  FileMapInfo* map_info() const { return _map_info; }\n@@ -510,3 +515,2 @@\n-  StaticArchiveBuilder builder;\n-  builder.gather_source_objs();\n-  builder.reserve_buffer();\n+  _builder.gather_source_objs();\n+  _builder.reserve_buffer();\n@@ -514,1 +518,1 @@\n-  CppVtables::dumptime_init(&builder);\n+  CppVtables::dumptime_init(&_builder);\n@@ -516,4 +520,4 @@\n-  builder.sort_metadata_objs();\n-  builder.dump_rw_metadata();\n-  builder.dump_ro_metadata();\n-  builder.relocate_metaspaceobj_embedded_pointers();\n+  _builder.sort_metadata_objs();\n+  _builder.dump_rw_metadata();\n+  _builder.dump_ro_metadata();\n+  _builder.relocate_metaspaceobj_embedded_pointers();\n@@ -521,2 +525,2 @@\n-  dump_java_heap_objects(builder.klasses());\n-  dump_shared_symbol_table(builder.symbols());\n+  dump_java_heap_objects(_builder.klasses());\n+  dump_shared_symbol_table(_builder.symbols());\n@@ -525,1 +529,1 @@\n-  builder.make_klasses_shareable();\n+  _builder.make_klasses_shareable();\n@@ -535,4 +539,0 @@\n-  \/\/ relocate the data so that it can be mapped to MetaspaceShared::requested_base_address()\n-  \/\/ without runtime relocation.\n-  builder.relocate_to_requested();\n-\n@@ -542,15 +542,4 @@\n-  FileMapInfo* mapinfo = new FileMapInfo(static_archive, true);\n-  mapinfo->populate_header(MetaspaceShared::core_region_alignment());\n-  mapinfo->set_serialized_data(serialized_data);\n-  mapinfo->set_cloned_vtables(CppVtables::vtables_serialized_base());\n-  mapinfo->open_for_write();\n-  builder.write_archive(mapinfo, &_heap_info);\n-\n-  if (PrintSystemDictionaryAtExit) {\n-    SystemDictionary::print();\n-  }\n-\n-  if (AllowArchivingWithJavaAgent) {\n-    log_warning(cds)(\"This archive was created with AllowArchivingWithJavaAgent. It should be used \"\n-            \"for testing purposes only and should not be used in a production environment\");\n-  }\n+  _map_info = new FileMapInfo(static_archive, true);\n+  _map_info->populate_header(MetaspaceShared::core_region_alignment());\n+  _map_info->set_serialized_data(serialized_data);\n+  _map_info->set_cloned_vtables(CppVtables::vtables_serialized_base());\n@@ -658,2 +647,1 @@\n-void MetaspaceShared::preload_and_dump() {\n-  EXCEPTION_MARK;\n+void MetaspaceShared::preload_and_dump(TRAPS) {\n@@ -661,1 +649,2 @@\n-  preload_and_dump_impl(THREAD);\n+  StaticArchiveBuilder builder;\n+  preload_and_dump_impl(builder, THREAD);\n@@ -666,2 +655,1 @@\n-      CLEAR_PENDING_EXCEPTION;\n-      MetaspaceShared::unrecoverable_writing_error();\n+      MetaspaceShared::writing_error();\n@@ -671,2 +659,1 @@\n-      CLEAR_PENDING_EXCEPTION;\n-      MetaspaceShared::unrecoverable_writing_error(\"VM exits due to exception, use -Xlog:cds,exceptions=trace for detail\");\n+      MetaspaceShared::writing_error(\"Unexpected exception, use -Xlog:cds,exceptions=trace for detail\");\n@@ -764,1 +751,1 @@\n-void MetaspaceShared::preload_and_dump_impl(TRAPS) {\n+void MetaspaceShared::preload_and_dump_impl(StaticArchiveBuilder& builder, TRAPS) {\n@@ -801,1 +788,1 @@\n-  VM_PopulateDumpSharedSpace op;\n+  VM_PopulateDumpSharedSpace op(builder);\n@@ -803,0 +790,22 @@\n+\n+  if (!write_static_archive(&builder, op.map_info(), op.heap_info())) {\n+    THROW_MSG(vmSymbols::java_io_IOException(), \"Encountered error while dumping\");\n+  }\n+}\n+\n+bool MetaspaceShared::write_static_archive(ArchiveBuilder* builder, FileMapInfo* map_info, ArchiveHeapInfo* heap_info) {\n+  \/\/ relocate the data so that it can be mapped to MetaspaceShared::requested_base_address()\n+  \/\/ without runtime relocation.\n+  builder->relocate_to_requested();\n+\n+  map_info->open_for_write();\n+  if (!map_info->is_open()) {\n+    return false;\n+  }\n+  builder->write_archive(map_info, heap_info);\n+\n+  if (AllowArchivingWithJavaAgent) {\n+    log_warning(cds)(\"This archive was created with AllowArchivingWithJavaAgent. It should be used \"\n+            \"for testing purposes only and should not be used in a production environment\");\n+  }\n+  return true;\n@@ -912,0 +921,7 @@\n+  writing_error(message);\n+  vm_direct_exit(1);\n+}\n+\n+\/\/ This function is called when the JVM is unable to write the specified CDS archive due to a\n+\/\/ an error. The error will be propagated\n+void MetaspaceShared::writing_error(const char* message) {\n@@ -916,1 +932,0 @@\n-  vm_direct_exit(1);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":56,"deletions":41,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+class ArchiveBuilder;\n+class ArchiveHeapInfo;\n@@ -37,0 +39,1 @@\n+class StaticArchiveBuilder;\n@@ -69,1 +72,1 @@\n-  static void preload_and_dump() NOT_CDS_RETURN;\n+  static void preload_and_dump(TRAPS) NOT_CDS_RETURN;\n@@ -75,1 +78,1 @@\n-  static void preload_and_dump_impl(TRAPS) NOT_CDS_RETURN;\n+  static void preload_and_dump_impl(StaticArchiveBuilder& builder, TRAPS) NOT_CDS_RETURN;\n@@ -108,0 +111,1 @@\n+  static void writing_error(const char* message = nullptr);\n@@ -169,0 +173,1 @@\n+  static bool write_static_archive(ArchiveBuilder* builder, FileMapInfo* map_info, ArchiveHeapInfo* heap_info);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -828,1 +828,1 @@\n-    MetaspaceShared::preload_and_dump();\n+    MetaspaceShared::preload_and_dump(CHECK_JNI_ERR);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8306580\n+ * @summary Test the writing error when archive file cannot be created\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @run driver StaticWritingError\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class StaticWritingError {\n+    public static void main(String[] args) throws Exception {\n+        String directoryName = \"nosuchdir\";\n+        String archiveName = \"staticWritingError.jsa\";\n+\n+        \/\/ Perform static dump and attempt to write archive in unwritable directory\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-Xlog:cds\")\n+            .setArchiveName(directoryName + File.separator + archiveName);\n+        OutputAnalyzer out = CDSTestUtils.createArchive(opts);\n+        out.shouldHaveExitValue(1);\n+        out.shouldContain(\"Unable to create shared archive file\");\n+        out.shouldContain(\"Encountered error while dumping\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/StaticWritingError.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}