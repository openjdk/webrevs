{"files":[{"patch":"@@ -2897,0 +2897,1 @@\n+    assert(Rd != x5 && Rs != x5, \"Register x5 must not be used for calls\/jumps.\");\n@@ -2911,0 +2912,1 @@\n+    assert(Rd != x5, \"Register x5 must not be used for calls\/jumps.\");\n@@ -2918,1 +2920,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-  \/\/ so use ra as the tmp register for rt_call.\n-  __ rt_call(Runtime1::entry_for(stub_id), ra);\n+  \/\/ so use x9 as the tmp register for rt_call.\n+  __ rt_call(Runtime1::entry_for(stub_id), x9);\n@@ -278,1 +278,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(_stub)), t1);\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(_stub)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-  __ mov_metadata(t1, method->holder()->constant_encoding());\n-  __ clinit_barrier(t1, t0, &L_skip_barrier \/* L_fast_path *\/);\n+  __ mov_metadata(t0, method->holder()->constant_encoding());\n+  __ clinit_barrier(t0, t1, &L_skip_barrier \/* L_fast_path *\/);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -274,2 +274,2 @@\n-  __ mv(t0, runtime_path);\n-  __ jalr(t0);\n+  __ mv(t1, runtime_path);\n+  __ jalr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -342,2 +342,2 @@\n-    __ mv(t0, stub->slow_path());\n-    __ jalr(t0);\n+    __ mv(t1, stub->slow_path());\n+    __ jalr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/xBarrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -727,2 +727,2 @@\n-    __ mv(t0, stub->slow_path());\n-    __ jalr(t0);\n+    __ mv(t1, stub->slow_path());\n+    __ jalr(t1);\n@@ -761,1 +761,1 @@\n-      __ la(t0, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_native_oop_field_without_healing_addr()));\n+      __ la(t1, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_native_oop_field_without_healing_addr()));\n@@ -763,1 +763,1 @@\n-      __ la(t0, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_oop_field_with_healing_addr()));\n+      __ la(t1, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_oop_field_with_healing_addr()));\n@@ -765,1 +765,1 @@\n-      __ la(t0, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_oop_field_without_healing_addr()));\n+      __ la(t1, RuntimeAddress(ZBarrierSetRuntime::store_barrier_on_oop_field_without_healing_addr()));\n@@ -767,1 +767,1 @@\n-    __ jalr(t0);\n+    __ jalr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -424,2 +424,2 @@\n-    ld(t0, Address(method, Method::interpreter_entry_offset()));\n-    jr(t0);\n+    ld(t1, Address(method, Method::interpreter_entry_offset()));\n+    jr(t1);\n@@ -429,2 +429,2 @@\n-  ld(t0, Address(method, Method::from_interpreted_offset()));\n-  jr(t0);\n+  ld(t1, Address(method, Method::from_interpreted_offset()));\n+  jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -460,2 +460,2 @@\n-      la(t0, target.target(), offset);\n-      jr(t0, offset);\n+      la(t1, target.target(), offset);\n+      jr(t1, offset);\n@@ -763,2 +763,2 @@\n-  movptr(t0, 0, offset, t1); \/\/ lui + lui + slli + add\n-  jr(t0, offset);\n+  movptr(t1, 0, offset, t0); \/\/ lui + lui + slli + add\n+  jr(t1, offset);\n@@ -771,3 +771,3 @@\n-  push_reg(RegSet::of(t0, xmethod), sp);   \/\/ push << t0 & xmethod >> to sp\n-  mv(t0, entry_point, offset);\n-  jalr(t0, offset);\n+  push_reg(RegSet::of(t1, xmethod), sp);   \/\/ push << t0 & xmethod >> to sp\n+  mv(t1, entry_point, offset);\n+  jalr(t1, offset);\n@@ -777,1 +777,1 @@\n-  pop_reg(RegSet::of(t0, xmethod), sp);   \/\/ pop << t0 & xmethod >> from sp\n+  pop_reg(RegSet::of(t1, xmethod), sp);   \/\/ pop << t0 & xmethod >> from sp\n@@ -944,0 +944,1 @@\n+  assert(temp != x5 && temp != x1, \"temp register must not be x1\/x5.\");\n@@ -971,1 +972,2 @@\n-    assert(temp != noreg && temp != x0, \"expecting a register\");\n+    assert(temp != noreg && temp != x0, \"Expecting a register\");\n+    assert(temp != x1 && temp != x5, \"temp register must not be x1\/x5.\");\n@@ -1009,0 +1011,1 @@\n+  assert(Rd != x1 && Rd != x5, \"Rd register must not be x1\/x5.\");\n@@ -1015,0 +1018,1 @@\n+  assert(temp != x1 && temp != x5, \"temp register must not be x1\/x5.\");\n@@ -1022,0 +1026,1 @@\n+  assert(Rs != x1 && Rs != x5, \"Rs register must not be x1\/x5.\");\n@@ -1026,0 +1031,1 @@\n+  assert(tmp != x1 && tmp != x5, \"tmp register must not be x1\/x5.\");\n@@ -4075,1 +4081,1 @@\n-  assert_different_registers(r_sub_klass, r_super_klass, tmp1, tmp2, tmp3, result, t0);\n+  assert_different_registers(r_sub_klass, r_super_klass, tmp1, tmp2, tmp3, result, t0, t1);\n@@ -4142,2 +4148,2 @@\n-  mv(ra, CAST_FROM_FN_PTR(address, Thread::current));\n-  jalr(ra);\n+  mv(t1, CAST_FROM_FN_PTR(address, Thread::current));\n+  jalr(t1);\n@@ -4190,2 +4196,2 @@\n-  la(t0, RuntimeAddress(SharedRuntime::throw_delayed_StackOverflowError_entry()));\n-  jr(t0);\n+  la(t1, RuntimeAddress(SharedRuntime::throw_delayed_StackOverflowError_entry()));\n+  jr(t1);\n@@ -4302,1 +4308,1 @@\n-    load_link_jump(target);\n+    load_link_jump(target, t1);\n@@ -4312,1 +4318,1 @@\n-  movptr(t1, (address)Universe::non_oop_word(), t0);\n+  movptr(t0, (address)Universe::non_oop_word(), t1);\n@@ -4326,1 +4332,1 @@\n-  Register data = t1;\n+  Register data = t0;\n@@ -4328,1 +4334,1 @@\n-  Register tmp1 = t0; \/\/ t0 always scratch\n+  Register tmp1 = t1; \/\/ scratch\n@@ -4426,2 +4432,2 @@\n-    ld(t0, target);  \/\/ auipc + ld\n-    jr(t0);          \/\/ jalr\n+    ld(t1, target);  \/\/ auipc + ld\n+    jr(t1);          \/\/ jalr\n@@ -5151,1 +5157,1 @@\n-\/\/ ptr, cnt, and t0 are clobbered.\n+\/\/ ptr, cnt, t1, and t0 are clobbered.\n@@ -5155,1 +5161,1 @@\n-  assert_different_registers(cnt, t0);\n+  assert_different_registers(cnt, t0, t1);\n@@ -5173,0 +5179,1 @@\n+      \/\/ Clobbers t1\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-  void load_link_jump(const address source, Register temp = t0);\n+  void load_link_jump(const address source, Register temp);\n@@ -641,3 +641,3 @@\n-  void j(const address dest, Register temp = t0);\n-  void j(const Address &adr, Register temp = t0);\n-  void j(Label &l, Register temp = t0);\n+  void j(const address dest, Register temp = t1);\n+  void j(const Address &adr, Register temp = t1);\n+  void j(Label &l, Register temp = noreg);\n@@ -649,1 +649,1 @@\n-  void call(const address dest, Register temp = t0);\n+  void call(const address dest, Register temp = t1);\n@@ -657,1 +657,2 @@\n-  void rt_call(address dest, Register tmp = t0);\n+  \/\/ Clobebrs t1\n+  void rt_call(address dest, Register tmp = t1);\n@@ -1168,2 +1169,3 @@\n-  void far_call(const Address &entry, Register tmp = t0);\n-  void far_jump(const Address &entry, Register tmp = t0);\n+  \/\/ Clobbers t1 default.\n+  void far_call(const Address &entry, Register tmp = t1);\n+  void far_jump(const Address &entry, Register tmp = t1);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -112,4 +112,4 @@\n-    __ lwu(t0, Address(xthread, JavaThread::interp_only_mode_offset()));\n-    __ beqz(t0, run_compiled_code);\n-    __ ld(t0, Address(method, Method::interpreter_entry_offset()));\n-    __ jr(t0);\n+    __ lwu(t1, Address(xthread, JavaThread::interp_only_mode_offset()));\n+    __ beqz(t1, run_compiled_code);\n+    __ ld(t1, Address(method, Method::interpreter_entry_offset()));\n+    __ jr(t1);\n@@ -121,2 +121,2 @@\n-  __ ld(t0,Address(method, entry_offset));\n-  __ jr(t0);\n+  __ ld(t1, Address(method, entry_offset));\n+  __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/methodHandles_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -94,4 +94,4 @@\n-      (MacroAssembler::extract_rd(addr)                    == x5) &&\n-      (MacroAssembler::extract_rd(addr + instr_size)       == x5) &&\n-      (MacroAssembler::extract_rs1(addr + instr_size)      == x5) &&\n-      (MacroAssembler::extract_rs1(addr + 2 * instr_size)  == x5) &&\n+      (MacroAssembler::extract_rd(addr)                    == x6) &&\n+      (MacroAssembler::extract_rd(addr + instr_size)       == x6) &&\n+      (MacroAssembler::extract_rs1(addr + instr_size)      == x6) &&\n+      (MacroAssembler::extract_rs1(addr + 2 * instr_size)  == x6) &&\n@@ -463,4 +463,4 @@\n-      (MacroAssembler::extract_rd(addr)                    == x5) &&\n-      (MacroAssembler::extract_rd(addr + instr_size)       == x5) &&\n-      (MacroAssembler::extract_rs1(addr + instr_size)      == x5) &&\n-      (MacroAssembler::extract_rs1(addr + 2 * instr_size)  == x5) &&\n+      (MacroAssembler::extract_rd(addr)                    == x6) &&\n+      (MacroAssembler::extract_rd(addr + instr_size)       == x6) &&\n+      (MacroAssembler::extract_rs1(addr + instr_size)      == x6) &&\n+      (MacroAssembler::extract_rs1(addr + 2 * instr_size)  == x6) &&\n@@ -792,2 +792,2 @@\n-  a.movptr(t0, entry, offset, t1); \/\/ lui, lui, slli, add\n-  a.jr(t0, offset); \/\/ jalr\n+  a.movptr(t1, entry, offset, t0); \/\/ lui, lui, slli, add\n+  a.jr(t1, offset); \/\/ jalr\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1264,2 +1264,2 @@\n-  \/\/   la(t1, retaddr)                ->  auipc + addi\n-  \/\/   la(t0, RuntimeAddress(addr))   ->  lui + addi + slli + addi + slli + addi\n+  \/\/   la(t0, retaddr)                ->  auipc + addi\n+  \/\/   la(t1, RuntimeAddress(addr))   ->  lui + addi + slli + addi + slli + addi\n@@ -1268,1 +1268,1 @@\n-  \/\/   jalr(t0)                       ->  jalr\n+  \/\/   jalr(t1)                       ->  jalr\n@@ -1421,2 +1421,2 @@\n-    __ mov_metadata(t1, C->method()->holder()->constant_encoding());\n-    __ clinit_barrier(t1, t0, &L_skip_barrier);\n+    __ mov_metadata(t0, C->method()->holder()->constant_encoding());\n+    __ clinit_barrier(t0, t1, &L_skip_barrier);\n@@ -1860,2 +1860,2 @@\n-  \/\/ auipc t0, #exception_blob_entry_point\n-  \/\/ jr (offset)t0\n+  \/\/ auipc t1, #exception_blob_entry_point\n+  \/\/ jr (offset)t1\n@@ -2507,2 +2507,2 @@\n-      __ la(t1, retaddr);\n-      __ la(t0, RuntimeAddress(entry));\n+      __ la(t0, retaddr);\n+      __ la(t1, RuntimeAddress(entry));\n@@ -2511,2 +2511,2 @@\n-      __ sd(t1, Address(sp, wordSize));\n-      __ jalr(t0);\n+      __ sd(t0, Address(sp, wordSize));\n+      __ jalr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -354,1 +354,1 @@\n-  __ mv(t0, x10);\n+  __ mv(t1, x10);\n@@ -368,1 +368,1 @@\n-  \/\/ t0:  exception handler\n+  \/\/ t1:  exception handler\n@@ -372,1 +372,1 @@\n-  __ jr(t0);\n+  __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/runtime_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -471,2 +471,2 @@\n-  __ ld(t0, Address(xmethod, in_bytes(Method::interpreter_entry_offset())));\n-  __ jr(t0);\n+  __ ld(t1, Address(xmethod, in_bytes(Method::interpreter_entry_offset())));\n+  __ jr(t1);\n@@ -613,1 +613,1 @@\n-  const Register data = t1;\n+  const Register data = t0;\n@@ -1143,2 +1143,2 @@\n-  __ la(t0, RuntimeAddress(StubRoutines::forward_exception_entry()));\n-  __ jr(t0);\n+  __ la(t1, RuntimeAddress(StubRoutines::forward_exception_entry()));\n+  __ jr(t1);\n@@ -1455,2 +1455,0 @@\n-\n-  const Register ic_reg = t1;\n@@ -1740,0 +1738,1 @@\n+  \/\/ Clobbers t1\n@@ -2634,2 +2633,2 @@\n-\n-  __ jr(t0);\n+  __ mv(t1, t0);\n+  __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3785,2 +3785,2 @@\n-    __ la(t0, RuntimeAddress(SharedRuntime::throw_StackOverflowError_entry()));\n-    __ jr(t0);\n+    __ la(t1, RuntimeAddress(SharedRuntime::throw_StackOverflowError_entry()));\n+    __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,1 +169,0 @@\n-  Register continuation = ra;\n@@ -188,1 +187,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -195,0 +193,1 @@\n+      __ mv(ra, x9);\n@@ -201,1 +200,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -208,0 +206,1 @@\n+      __ mv(ra, x9);\n@@ -214,1 +213,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -221,0 +219,1 @@\n+      __ mv(ra, x9);\n@@ -227,1 +226,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -234,0 +232,1 @@\n+      __ mv(ra, x9);\n@@ -240,1 +239,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -247,0 +245,1 @@\n+      __ mv(ra, x9);\n@@ -253,1 +252,0 @@\n-      continuation = x9;  \/\/ The first callee-saved register\n@@ -260,0 +258,1 @@\n+      __ mv(ra, x9);\n@@ -264,1 +263,0 @@\n-      continuation = x9;\n@@ -274,0 +272,1 @@\n+      __ mv(ra, x9);\n@@ -299,1 +298,1 @@\n-    __ jr(continuation);\n+    __ ret();\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -708,1 +708,1 @@\n-  \/\/ destroys x11, t0\n+  \/\/ destroys x11, t0, t1\n@@ -721,2 +721,2 @@\n-  __ mv(t0, Interpreter::_throw_ArrayIndexOutOfBoundsException_entry);\n-  __ jr(t0);\n+  __ mv(t1, Interpreter::_throw_ArrayIndexOutOfBoundsException_entry);\n+  __ jr(t1);\n@@ -1316,2 +1316,2 @@\n-  __ mv(t0, Interpreter::_throw_ArithmeticException_entry);\n-  __ jr(t0);\n+  __ mv(t1, Interpreter::_throw_ArithmeticException_entry);\n+  __ jr(t1);\n@@ -1329,2 +1329,2 @@\n-  __ mv(t0, Interpreter::_throw_ArithmeticException_entry);\n-  __ jr(t0);\n+  __ mv(t1, Interpreter::_throw_ArithmeticException_entry);\n+  __ jr(t1);\n@@ -1348,2 +1348,2 @@\n-  __ mv(t0, Interpreter::_throw_ArithmeticException_entry);\n-  __ jr(t0);\n+  __ mv(t1, Interpreter::_throw_ArithmeticException_entry);\n+  __ jr(t1);\n@@ -1361,2 +1361,2 @@\n-  __ mv(t0, Interpreter::_throw_ArithmeticException_entry);\n-  __ jr(t0);\n+  __ mv(t1, Interpreter::_throw_ArithmeticException_entry);\n+  __ jr(t1);\n@@ -1771,2 +1771,2 @@\n-    __ ld(t0, Address(x9, nmethod::osr_entry_point_offset()));\n-    __ jr(t0);\n+    __ ld(t1, Address(x9, nmethod::osr_entry_point_offset()));\n+    __ jr(t1);\n@@ -2174,1 +2174,1 @@\n-  const Register temp = x9;\n+  const Register temp = x9; \/\/ s1\n@@ -3965,2 +3965,2 @@\n-  __ ld(t0, Address(t0));\n-  __ jr(t0);\n+  __ ld(t1, Address(t0));\n+  __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -270,2 +270,2 @@\n-  __ ld(t0, Address(xmethod, Method::from_compiled_offset()));\n-  __ jalr(t0);\n+  __ ld(t1, Address(xmethod, Method::from_compiled_offset()));\n+  __ jalr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-  __ ld(t0, Address(xmethod, Method::from_compiled_offset()));\n-  __ jr(t0);\n+  __ ld(t1, Address(xmethod, Method::from_compiled_offset()));\n+  __ jr(t1);\n@@ -174,1 +174,1 @@\n-  \/\/  t1: CompiledICData\n+  \/\/  t0: CompiledICData\n@@ -184,1 +184,1 @@\n-  const Register icdata_reg         = t1;\n+  const Register icdata_reg         = t0;\n@@ -223,2 +223,2 @@\n-  __ ld(t0, Address(xmethod, Method::from_compiled_offset()));\n-  __ jr(t0);\n+  __ ld(t1, Address(xmethod, Method::from_compiled_offset()));\n+  __ jr(t1);\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}