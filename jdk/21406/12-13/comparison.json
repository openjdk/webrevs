{"files":[{"patch":"@@ -96,2 +96,2 @@\n-  \/\/ so use x9 as the tmp register for rt_call.\n-  __ rt_call(Runtime1::entry_for(stub_id), x9);\n+  \/\/ so use x1\/ra as the tmp register for rt_call.\n+  __ rt_call(Runtime1::entry_for(stub_id), ra);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -944,1 +944,1 @@\n-  assert(temp != x5 && temp != x1, \"temp register must not be x1\/x5.\");\n+  assert(temp != x5, \"temp register must not be x5.\");\n@@ -1018,1 +1018,1 @@\n-  assert(temp != x1 && temp != x5, \"temp register must not be x1\/x5.\");\n+  assert(temp != x5, \"temp register must not be x5.\");\n@@ -1026,1 +1026,1 @@\n-  assert(Rs != x1 && Rs != x5, \"Rs register must not be x1\/x5.\");\n+  assert(Rs != x5, \"Rs register must not be x5.\");\n@@ -1031,1 +1031,1 @@\n-  assert(tmp != x1 && tmp != x5, \"tmp register must not be x1\/x5.\");\n+  assert(tmp != x5, \"tmp register must not be x5.\");\n@@ -1771,1 +1771,1 @@\n-         \"offset is too large to be patched in one jal instruction!\\n\");\n+         \"offset (%ld) is too large to be patched in one jal instruction!\\n\", offset);\n@@ -3667,0 +3667,1 @@\n+  assert(tmp != x5, \"tmp register must not be x5.\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -638,0 +638,24 @@\n+  \/\/ Hotspot only use the standard calling convention using x1\/ra.\n+  \/\/ The alternative calling convection using x5\/t0 is not used.\n+  \/\/ Using x5 as a temp causes the CPU to mispredict returns.\n+\n+  \/\/ JALR, return address stack updates:\n+  \/\/ | rd is x1\/x5 | rs1 is x1\/x5 | rd=rs1 | RAS action\n+  \/\/ | ----------- | ------------ | ------ |-------------\n+  \/\/ |     No      |      No      |   —    | None\n+  \/\/ |     No      |      Yes     |   —    | Pop\n+  \/\/ |     Yes     |      No      |   —    | Push\n+  \/\/ |     Yes     |      Yes     |   No   | Pop, then push\n+  \/\/ |     Yes     |      Yes     |   Yes  | Push\n+  \/\/\n+  \/\/ JAL, return address stack updates:\n+  \/\/ | rd is x1\/x5 | RAS action\n+  \/\/ | ----------- | ----------\n+  \/\/ |     Yes     | Push\n+  \/\/ |     No      | None\n+  \/\/\n+  \/\/ JUMPs   uses Rd = x0\/zero and Rs = x6\/t1 or imm\n+  \/\/ CALLS   uses Rd = x1\/ra   and Rs = x6\/t1 or imm (or x1\/ra*)\n+  \/\/ RETURNS uses Rd = x0\/zero and Rs = x1\/ra\n+  \/\/ *use of x1\/ra should not normally be used, special case only.\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}