{"files":[{"patch":"@@ -87,1 +87,1 @@\n-      jvmtiClassFileReconstituter.cpp jvmtiTagMapTable.cpp jvmtiAgent.cpp jvmtiAgentList.cpp\n+      jvmtiClassFileReconstituter.cpp jvmtiTagMapTable.cpp jvmtiAgent.cpp jvmtiAgentList.cpp jfrJvmtiAgent.cpp\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-  static bool create();\n-  static void destroy();\n+  static bool create() NOT_JVMTI_RETURN_(true);\n+  static void destroy() NOT_JVMTI_RETURN;\n@@ -38,1 +38,1 @@\n-  static void retransform_classes(JNIEnv* env, jobjectArray classes, TRAPS);\n+  static void retransform_classes(JNIEnv* env, jobjectArray classes, TRAPS) NOT_JVMTI_RETURN;\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,0 +283,1 @@\n+#if INCLUDE_JVMTI\n@@ -319,0 +320,4 @@\n+#else  \/\/ INCLUDE_JVMTI\n+TRACE_REQUEST_FUNC(JavaAgent)   {}\n+TRACE_REQUEST_FUNC(NativeAgent) {}\n+#endif \/\/ INCLUDE_JVMTI\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,1 +241,1 @@\n-  assert(JvmtiEnvBase::get_phase() == JVMTI_PHASE_LIVE, \"invalid init sequence\");\n+  JVMTI_ONLY( assert(JvmtiEnvBase::get_phase() == JVMTI_PHASE_LIVE, \"invalid init sequence\"); )\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+#if INCLUDE_JVMTI\n@@ -135,0 +136,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-int* CompilerToVM::Data::_should_notify_object_alloc;\n+JVMTI_ONLY( int* CompilerToVM::Data::_should_notify_object_alloc; )\n@@ -233,1 +233,1 @@\n-  _should_notify_object_alloc = &JvmtiExport::_should_notify_object_alloc;\n+  JVMTI_ONLY( _should_notify_object_alloc = &JvmtiExport::_should_notify_object_alloc; )\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  static_field(CompilerToVM::Data,             _should_notify_object_alloc,            int*)                                         \\\n+  JVMTI_ONLY(static_field(CompilerToVM::Data,  _should_notify_object_alloc,            int*))                                         \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n- * @requires vm.hasJFR\n+ * @requires vm.hasJFR & vm.jvmti\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestAgentEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}