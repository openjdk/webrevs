{"files":[{"patch":"@@ -1394,0 +1394,1 @@\n+    if (nm == nullptr) return nm;\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2042,0 +2042,1 @@\n+    if (nm == nullptr) return nm;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1274,0 +1274,1 @@\n+    if (nm == nullptr) return nm;\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1747,0 +1747,1 @@\n+    if (nm == nullptr) return nm;\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1088,7 +1088,0 @@\n-  if (resolved_method->is_continuation_native_intrinsic()\n-      && resolved_method->from_interpreted_entry() == nullptr) { \/\/ does a load_acquire\n-    methodHandle mh(THREAD, resolved_method);\n-    \/\/ Generate a compiled form of the enterSpecial intrinsic.\n-    AdapterHandlerLibrary::create_native_wrapper(mh);\n-  }\n-\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+#include \"runtime\/threads.hpp\"\n@@ -1252,1 +1253,0 @@\n-    \/\/ the entry points to this method will be set in set_code, called when first resolving this method\n@@ -1256,0 +1256,8 @@\n+    if (Continuations::enabled()) {\n+      assert(!Threads::is_vm_complete(), \"should only be called during vm init\");\n+      AdapterHandlerLibrary::create_native_wrapper(h_method);\n+      if (!h_method->has_compiled_code()) {\n+        THROW_MSG(vmSymbols::java_lang_OutOfMemoryError(), \"Initial size of CodeCache is too small\");\n+      }\n+      assert(_from_interpreted_entry == get_i2c_entry(), \"invariant\");\n+    }\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -752,0 +752,7 @@\n+  if (Continuations::enabled()) {\n+    \/\/ Initialize Continuation class now so that failure to create enterSpecial\/doYield\n+    \/\/ special nmethods due to limited CodeCache size can be treated as a fatal error at\n+    \/\/ startup with the proper message that CodeCache size is too small.\n+    initialize_class(vmSymbols::jdk_internal_vm_Continuation(), CHECK_JNI_ERR);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}