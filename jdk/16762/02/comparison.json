{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,0 +192,4 @@\n+    private static IllegalArgumentException outOfBoundsError(IndexOutOfBoundsException cause) {\n+        return new IllegalArgumentException(\"Reading beyond classfile bounds\", cause);\n+    }\n+\n@@ -194,1 +198,5 @@\n-        return buffer[p] & 0xFF;\n+        try {\n+            return buffer[p] & 0xFF;\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -199,3 +207,7 @@\n-        int b1 = buffer[p] & 0xFF;\n-        int b2 = buffer[p + 1] & 0xFF;\n-        return (b1 << 8) + b2;\n+        try {\n+            int b1 = buffer[p] & 0xFF;\n+            int b2 = buffer[p + 1] & 0xFF;\n+            return (b1 << 8) + b2;\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -206,1 +218,5 @@\n-        return buffer[p];\n+        try {\n+            return buffer[p];\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -211,3 +227,7 @@\n-        int b1 = buffer[p];\n-        int b2 = buffer[p + 1] & 0xFF;\n-        return (b1 << 8) + b2;\n+        try {\n+            int b1 = buffer[p];\n+            int b2 = buffer[p + 1] & 0xFF;\n+            return (b1 << 8) + b2;\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -218,5 +238,9 @@\n-        int ch1 = buffer[p] & 0xFF;\n-        int ch2 = buffer[p + 1] & 0xFF;\n-        int ch3 = buffer[p + 2] & 0xFF;\n-        int ch4 = buffer[p + 3] & 0xFF;\n-        return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4;\n+        try {\n+            int ch1 = buffer[p] & 0xFF;\n+            int ch2 = buffer[p + 1] & 0xFF;\n+            int ch3 = buffer[p + 2] & 0xFF;\n+            int ch4 = buffer[p + 3] & 0xFF;\n+            return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + ch4;\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -227,4 +251,8 @@\n-        return ((long) buffer[p + 0] << 56) + ((long) (buffer[p + 1] & 255) << 48) +\n-               ((long) (buffer[p + 2] & 255) << 40) + ((long) (buffer[p + 3] & 255) << 32) +\n-               ((long) (buffer[p + 4] & 255) << 24) + ((buffer[p + 5] & 255) << 16) + ((buffer[p + 6] & 255) << 8) +\n-               (buffer[p + 7] & 255);\n+        try {\n+            return ((long) buffer[p + 0] << 56) + ((long) (buffer[p + 1] & 255) << 48) +\n+                   ((long) (buffer[p + 2] & 255) << 40) + ((long) (buffer[p + 3] & 255) << 32) +\n+                   ((long) (buffer[p + 4] & 255) << 24) + ((buffer[p + 5] & 255) << 16) + ((buffer[p + 6] & 255) << 8) +\n+                   (buffer[p + 7] & 255);\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -245,1 +273,5 @@\n-        return Arrays.copyOfRange(buffer, p, p + len);\n+        try {\n+            return Arrays.copyOfRange(buffer, p, p + len);\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -250,1 +282,5 @@\n-        buf.writeBytes(buffer, p, len);\n+        try {\n+            buf.writeBytes(buffer, p, len);\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n@@ -449,3 +485,7 @@\n-        return Arrays.equals(((BufWriterImpl) bufWriter).elems,\n-                             bufWriterOffset, bufWriterOffset + length,\n-                             buffer, classReaderOffset, classReaderOffset + length);\n+        try {\n+            return Arrays.equals(((BufWriterImpl) bufWriter).elems,\n+                                 bufWriterOffset, bufWriterOffset + length,\n+                                 buffer, classReaderOffset, classReaderOffset + length);\n+        } catch (IndexOutOfBoundsException e) {\n+            throw outOfBoundsError(e);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":63,"deletions":23,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8320360\n@@ -88,0 +89,6 @@\n+\n+    @Test\n+    void testReadingOutOfBounds() {\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().parse(new byte[]{(byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE}), \"reading magic only\");\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().parse(new byte[]{(byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE, 0, 0, 0, 0, 0, 2}), \"reading invalid CP size\");\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}