{"files":[{"patch":"@@ -1566,0 +1566,5 @@\n+    if (ld->is_DecodeN()) {\n+      \/\/ Also record the actual load (LoadN) in case ld is DecodeN\n+      assert(ld->in(1)->Opcode() == Op_LoadN, \"Assumption invalid: input to DecodeN is not LoadN\");\n+      record_for_igvn(ld->in(1));\n+    }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests.igvn;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8310524\n+ * @summary Test that IGVN optimizes away one of two identical LoadNs.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.igvn.TestLoadNIdeal\n+ *\/\n+\n+public class TestLoadNIdeal {\n+\n+    public static void main(String[] args) {\n+        \/\/ Ensure that we run with compressed oops\n+        TestFramework.runWithFlags(\"-XX:+UseCompressedOops\");\n+    }\n+\n+    static class A { int x; }\n+\n+    @DontInline\n+    void dummy(A p[]) { }\n+\n+    @Test\n+    @IR(applyIf = { \"UseCompressedOops\", \"true\" }, counts = { IRNode.LOAD_N, \"1\" })\n+    int test() {\n+        A p[] = new A[1];\n+        p[0] = new A();\n+\n+        \/\/ The dummy method is not inlined => Escape analysis\n+        \/\/ cannot ensure that p[0] is unmodified after the call.\n+        dummy(p);\n+\n+        \/\/ We should only need to load p[0] once here. Storing A within an\n+        \/\/ array adds range checks for the first load and ensures the second\n+        \/\/ load is not optimized already at bytecode parsing.\n+        return p[0].x + p[0].x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/igvn\/TestLoadNIdeal.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}