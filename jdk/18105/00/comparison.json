{"files":[{"patch":"@@ -520,2 +520,10 @@\n-    AIX_ONLY(SIZE_256M)  \/\/ Known shm boundary alignment.\n-    NOT_AIX(os::vm_allocation_granularity());\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1895,1 +1895,12 @@\n-  const size_t alignment_adjusted = MAX2(alignment, os::vm_allocation_granularity());\n+  const size_t system_allocation_granularity =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n+  const size_t alignment_adjusted = MAX2(alignment, system_allocation_granularity);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,4 +38,0 @@\n-\/\/ On AIX, these tests make no sense as long as JDK-8315321 remains unfixed since the attach\n-\/\/ addresses are not predictable.\n-#ifndef AIX\n-\n@@ -65,1 +61,10 @@\n-    EXPECT_TRUE(is_aligned(addr, os::vm_allocation_granularity())) << ERRINFO;\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      EXPECT_TRUE(is_aligned(addr, os::vm_page_size() == 4*K ? 4*K : 256*M)) << ERRINFO;\n+#else\n+      EXPECT_TRUE(is_aligned(addr, os::vm_allocation_granularity())) << ERRINFO;\n+#endif\n@@ -181,1 +186,11 @@\n-  const size_t ag = os::vm_allocation_granularity();\n+  const size_t ag =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n@@ -260,1 +275,11 @@\n-  const size_t ag = os::vm_allocation_granularity();\n+  const size_t ag =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n@@ -278,1 +303,12 @@\n-  for (size_t range_size = os::vm_allocation_granularity(); range_size <= large_end; range_size *= 2) {\n+  const size_t system_allocation_granularity =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n+  for (size_t range_size = system_allocation_granularity; range_size <= large_end; range_size *= 2) {\n@@ -283,1 +319,1 @@\n-        for (size_t alignment = os::vm_allocation_granularity(); alignment < large_end; alignment *= 2) {\n+        for (size_t alignment = system_allocation_granularity; alignment < large_end; alignment *= 2) {\n@@ -294,1 +330,11 @@\n-  const size_t ag = os::vm_allocation_granularity();\n+  const size_t ag =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n@@ -334,1 +380,11 @@\n-  const size_t ag = os::vm_allocation_granularity();\n+  const size_t ag =\n+#ifdef AIX\n+  \/\/ AIX is the only platform that uses System V shm for reserving virtual memory.\n+  \/\/ In this case, the required alignment of the allocated size (64K) and the alignment\n+  \/\/ of possible start points of the memory region (256M) differ.\n+  \/\/ This is not reflected by os_allocation_granularity().\n+  \/\/ The logic here is dual to the one in pd_reserve_memory in os_aix.cpp\n+      os::vm_page_size() == 4*K ? 4*K : 256*M;\n+#else\n+      os::vm_allocation_granularity();\n+#endif\n@@ -345,2 +401,0 @@\n-\n-#endif \/\/ AIX\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":67,"deletions":13,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-runtime\/CompressedOops\/CompressedClassPointers.java 8322943 aix-ppc64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}