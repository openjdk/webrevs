{"files":[{"patch":"@@ -92,0 +92,1 @@\n+        failures += testWorstAtan2();\n@@ -95,0 +96,1 @@\n+        failures += testWorstHypot();\n@@ -484,0 +486,26 @@\n+    \/*\n+     * 2 ulp stated error bound\n+     *\/\n+    private static int testWorstAtan2() {\n+        int failures = 0;\n+        double [][] testCases = {\n+            \/\/ Input with large worst-case observed error for another math library\n+            {-0x0.00000000039a2p-1022, 0x0.000fdf02p-1022, -0x1.d0ce6fac85de8p-27},\n+        };\n+\n+        for(double[] testCase: testCases) {\n+            failures += testAtan2Case(testCase[0], testCase[1], testCase[2]);\n+        }\n+\n+        return failures;\n+    }\n+\n+    private static int testAtan2Case(double input1, double input2, double expected) {\n+        int failures = 0;\n+         \/\/ Cannot represent exact result, allow 1 additional ulp on top of documented bound.\n+        double ulps = 2.0 + 1.0;\n+        failures += Tests.testUlpDiff(\"Math.atan2\",       input1, input2, Math::atan2,       expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.atan2\", input1, input2, StrictMath::atan2, expected, ulps);\n+        return failures;\n+    }\n+\n@@ -573,0 +601,26 @@\n+\n+    \/*\n+     * 1.5 ulp stated error bound\n+     *\/\n+    private static int testWorstHypot() {\n+        int failures = 0;\n+        double [][] testCases = {\n+            \/\/ Input with large worst-case observed error for another math library\n+            {-0x0.fffffffffffffp-1022, 0x0.0000000000001p-1022, 0x0.fffffffffffffp-1022},\n+        };\n+\n+        for(double[] testCase: testCases) {\n+            failures += testHypotCase(testCase[0], testCase[1], testCase[2]);\n+        }\n+\n+        return failures;\n+    }\n+\n+    private static int testHypotCase(double input1, double input2, double expected) {\n+        int failures = 0;\n+         \/\/ Cannot represent exact result, allow 1 additional ulp on top of documented bound, rounding up.\n+        double ulps = 3.0; \/\/ 1.5 + 1.0, rounded up\n+        failures += Tests.testUlpDiff(\"Math.hypot\",       input1, input2, Math::hypot,       expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.hypot\", input1, input2, StrictMath::hypot, expected, ulps);\n+        return failures;\n+    }\n","filename":"test\/jdk\/java\/lang\/Math\/WorstCaseTests.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}