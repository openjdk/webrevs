{"files":[{"patch":"@@ -697,0 +697,5 @@\n+\n+  const Type* joined = r0->join(r1);\n+  if (joined == Type::TOP) {\n+    return TypeInt::CC_NE;\n+  }\n@@ -801,0 +806,6 @@\n+\n+  const Type* joined = r0->join(r1);\n+  if (joined == Type::TOP) {\n+    return TypeInt::CC_NE;\n+  }\n+\n@@ -942,0 +953,6 @@\n+\n+  const Type* joined = r0->join(r1);\n+  if (joined == Type::TOP) {\n+    return TypeInt::CC_NE;\n+  }\n+\n@@ -996,0 +1013,5 @@\n+  const Type* joined = r0->join(r1);\n+  if (joined == Type::TOP) {\n+    return TypeInt::CC_NE;\n+  }\n+\n@@ -1371,0 +1393,4 @@\n+  if( CC == TypeInt::CC_NE ) {\n+    if( _test == ne ) return TypeInt::ONE;\n+    if( _test == eq ) return TypeInt::ZERO;\n+  }\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360561\n+ * @summary Ranges can be proven to be disjoint but not orderable (thanks to unsigned range)\n+ *          Comparing such values in such range with != should always be true.\n+ * @run main\/othervm -Xcomp\n+ *                   -XX:CompileCommand=compileonly,compiler.igvn.CmpDisjointButNonOrderedRanges::*\n+ *                   compiler.igvn.CmpDisjointButNonOrderedRanges\n+ * @run main compiler.igvn.CmpDisjointButNonOrderedRanges\n+ *\/\n+package compiler.igvn;\n+\n+public class CmpDisjointButNonOrderedRanges {\n+    static boolean bFld;\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int x = 7;\n+        int y = 4;\n+        for (int i = 3; i < 12; i++) {\n+            \/\/ x = 7 \\\/ x = -195 => x \\in [-195, 7] as a signed value\n+            \/\/ but [7, bitwise_cast_uint(-195)] as unsigned\n+            \/\/ So 0 is not possible.\n+            if (x != 0) {\n+                A.foo();\n+                \/\/ Because A is not loaded, A.foo() traps and this point is not reachable.\n+            }\n+            \/\/ x is tighten to be in the meet (so Hotspot's join) of [0, 0] and [7, bitwise_cast_uint(-195)]\n+            \/\/ that is bottom (Hotspot's top). Data is dead, control needs to be dead as well.\n+            for (int j = 1; j < 8; j++) {\n+                x = -195;\n+                if (bFld) {\n+                    y += 2;\n+                }\n+            }\n+        }\n+    }\n+\n+    static void foo() {\n+    }\n+}\n+\n+\n+class A {\n+    static void foo() {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/igvn\/CmpDisjointButNonOrderedRanges.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360561\n+ * @summary Ranges can be proven to be disjoint but not orderable (thanks to unsigned range)\n+ *          Comparing such values in such range with != should always be true.\n+ * @run main\/othervm -Xbatch\n+ *                   -XX:CompileCommand=compileonly,compiler.igvn.CmpDisjointButNonOrderedRanges2::*\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:+UnlockExperimentalVMOptions\n+ *                   -XX:PerMethodTrapLimit=0\n+ *                   compiler.igvn.CmpDisjointButNonOrderedRanges2\n+ * @run main compiler.igvn.CmpDisjointButNonOrderedRanges2\n+ *\/\n+package compiler.igvn;\n+\n+public class CmpDisjointButNonOrderedRanges2 {\n+    int array[];\n+\n+    void test() {\n+        int val = 2;\n+        for (int i = 0; i < 10; i++) {\n+            \/\/ val = 2 \\\/ val = -12 => val \\in [-12, 2] as a signed value\n+            \/\/ but [2, bitwise_cast_uint(-12)] as unsigned\n+            \/\/ So 0 is not possible.\n+            if (val != 0) {\n+                return;\n+            }\n+            \/\/ val is tighten to be in the meet (so Hotspot's join) of [0, 0] and [2, bitwise_cast_uint(-12)]\n+            \/\/ that is bottom (Hotspot's top). Data is dead, control needs to be dead as well.\n+            for (int j = 0; j < 10; j++) {\n+                array[1] = val;\n+                val = -12;\n+            }\n+        }\n+    }\n+\n+    static public void main(String[] args) {\n+        var c = new CmpDisjointButNonOrderedRanges2();\n+        for (int i = 0; i < 1000; ++i) {\n+            c.test();\n+            for (int j = 0; j < 100; ++j) {\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/igvn\/CmpDisjointButNonOrderedRanges2.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8360561\n+ * @summary Ranges can be proven to be disjoint but not orderable (thanks to unsigned range)\n+ *          Comparing such values in such range with != should always be true.\n+ * @library \/test\/lib \/\n+ * @run main compiler.igvn.CmpDisjointButNonOrderedRangesLong\n+ *\/\n+package compiler.igvn;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class CmpDisjointButNonOrderedRangesLong {\n+    static boolean bFld;\n+    static double dFld1;\n+    static double dFld2;\n+\n+    public static void main(String[] strArr) {\n+        TestFramework.runWithFlags(\"-Xcomp\", \"-XX:CompileCommand=compileonly,compiler.igvn.CmpDisjointButNonOrderedRangesLong::test\");\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.PHI})\n+    static int test() {\n+        long x = 7;\n+        if (bFld) {\n+            x = -195;\n+        }\n+\n+        dFld1 = dFld2 % 2.5;\n+\n+        if (x == 0) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/igvn\/CmpDisjointButNonOrderedRangesLong.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}