{"files":[{"patch":"@@ -913,1 +913,1 @@\n-                        ClassSymbol clazz = (ClassSymbol) sup.tsym;\n+                        ClassSymbol clazz = (ClassSymbol) types.erasure(sup).tsym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340145\n+ * @summary Problem with generic pattern matching results in internal compiler error\n+ * @compile T8340145.java\n+ * @run main T8340145\n+ *\/\n+public class T8340145 {\n+    public static void main(String[] args) {\n+        Option<Integer> optionInteger = new Option.Some<>(21);\n+        Number number = Option.unwrapOrElse(optionInteger, 5.2);\n+\n+        Option2<Impl> optionBound = new Option2.Some<>(new Impl (){});\n+        Bound number2 = Option2.unwrapOrElse(optionBound, new Impl(){});\n+    }\n+\n+    sealed interface Option<T> permits Option.Some, Option.None {\n+        record Some<T>(T value) implements Option<T> {}\n+        record None<T>() implements Option<T> {}\n+\n+        static <T, T2 extends T> T unwrapOrElse(Option<T2> option, T defaultValue) {\n+            return switch (option) {\n+                case Option.Some(T2 value) -> value;\n+                case Option.None<T2> _ -> defaultValue;\n+            };\n+        }\n+    }\n+\n+    interface Bound {}\n+    interface Bound2 {}\n+    static class Impl implements Bound, Bound2 {}\n+    sealed interface Option2<T> permits Option2.Some, Option2.None {\n+        record Some<T>(T value) implements Option2<T> {}\n+        record None<T>() implements Option2<T> {}\n+\n+        static <T extends Bound & Bound2> T unwrapOrElse(Option2<T> option, T defaultValue) {\n+            return switch (option) {\n+                case Option2.Some(T value) -> value;\n+                case Option2.None<T> _ -> defaultValue;\n+            };\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8340145.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}