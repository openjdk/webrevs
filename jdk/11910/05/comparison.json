{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,12 @@\n+\/*\n+ * @test\n+ * @bug 5016500\n+ * @summary Test SslRmi[Client|Server]SocketFactory SSL socket parameters.\n+ * @run main\/othervm SSLSocketParametersTest 1\n+ * @run main\/othervm SSLSocketParametersTest 2\n+ * @run main\/othervm SSLSocketParametersTest 3\n+ * @run main\/othervm SSLSocketParametersTest 4\n+ * @run main\/othervm SSLSocketParametersTest 5\n+ * @run main\/othervm SSLSocketParametersTest 6\n+ * @run main\/othervm SSLSocketParametersTest 7\n+ *\/\n@@ -80,1 +92,1 @@\n-    public class ClientFactory extends SslRMIClientSocketFactory {\n+    public static class ClientFactory extends SslRMIClientSocketFactory {\n@@ -93,1 +105,1 @@\n-    public class ServerFactory extends SslRMIServerSocketFactory {\n+    public static class ServerFactory extends SslRMIServerSocketFactory {\n@@ -119,43 +131,12 @@\n-    public void runTest(String[] args) {\n-\n-        int test = Integer.parseInt(args[0]);\n-\n-        String msg1 = \"Running SSLSocketParametersTest [\" + test + \"]\";\n-        String msg2 = \"SSLSocketParametersTest [\" + test + \"] PASSED!\";\n-        String msg3 = \"SSLSocketParametersTest [\" + test + \"] FAILED!\";\n-\n-        switch (test) {\n-        case 1: \/* default constructor - default config *\/\n-            System.out.println(msg1);\n-            try {\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory());\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg2);\n-            } catch (Exception e) {\n-                System.out.println(msg3 + \" Exception: \" + e.toString());\n-                e.printStackTrace(System.out);\n-                System.exit(1);\n-            }\n-            break;\n-        case 2: \/* non-default constructor - default config *\/\n-            System.out.println(msg1);\n-            try {\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory(null,\n-                                            null,\n-                                            false));\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg2);\n-            } catch (Exception e) {\n-                System.out.println(msg3 + \" Exception: \" + e.toString());\n-                e.printStackTrace(System.out);\n-                System.exit(1);\n+    public void testRmiCommunication(RMIServerSocketFactory serverFactory, boolean expectException) {\n+\n+        HelloImpl server = null;\n+        try {\n+            server = new HelloImpl(0,\n+                                    new ClientFactory(),\n+                                    serverFactory);\n+            Remote stub = server.runServer();\n+            HelloClient client = new HelloClient();\n+            client.runClient(stub);\n+            if (expectException) {\n+                throw new RuntimeException(\"Test completed without throwing an expected exception.\");\n@@ -163,39 +144,6 @@\n-            break;\n-        case 3: \/* needClientAuth=true *\/\n-            System.out.println(msg1);\n-            try {\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory(null,\n-                                            null,\n-                                            null,\n-                                            true));\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg2);\n-            } catch (Exception e) {\n-                System.out.println(msg3 + \" Exception: \" + e.toString());\n-                e.printStackTrace(System.out);\n-                System.exit(1);\n-            }\n-            break;\n-        case 4: \/* server side dummy_ciphersuite *\/\n-            System.out.println(msg1);\n-            try {\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory(SSLContext.getDefault(),\n-                                            new String[] {\"dummy_ciphersuite\"},\n-                                            null,\n-                                            false));\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg3);\n-                System.exit(1);\n-            } catch (Exception e) {\n-                System.out.println(msg2 + \" Exception: \" + e.toString());\n-                System.exit(0);\n+\n+        } catch (IOException exc) {\n+            if (!expectException) {\n+                throw new RuntimeException(\"An error occurred during test execution\", exc);\n+            } else {\n+                System.out.println(\"Caught expected exception: \" + exc);\n@@ -203,18 +151,15 @@\n-            break;\n-        case 5: \/* server side dummy_protocol *\/\n-            System.out.println(msg1);\n-            try {\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory(null,\n-                                            new String[] {\"dummy_protocol\"},\n-                                            false));\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg3);\n-                System.exit(1);\n-            } catch (Exception e) {\n-                System.out.println(msg2 + \" Exception: \" + e.toString());\n-                System.exit(0);\n+\n+        }\n+    }\n+\n+    private static void testServerFactory(String[] cipherSuites, String[] protocol, String expectedMessage) throws Exception {\n+        try {\n+            new ServerFactory(SSLContext.getDefault(),\n+                    cipherSuites, protocol, false);\n+            throw new RuntimeException(\n+                    \"The expected exception for \"+ expectedMessage + \" was not thrown.\");\n+        } catch (IllegalArgumentException exc) {\n+            \/\/ expecting an exception with a specific message\n+            \/\/ anything else is an error\n+            if (!exc.getMessage().toLowerCase().contains(expectedMessage)) {\n+                throw exc;\n@@ -222,4 +167,26 @@\n-            break;\n-        case 6: \/* client side dummy_ciphersuite *\/\n-            System.out.println(msg1);\n-            try {\n+        }\n+    }\n+\n+    public void runTest(int testNumber) throws Exception {\n+        System.out.println(\"Running test \" + testNumber);\n+\n+        switch (testNumber) {\n+            \/* default constructor - default config *\/\n+            case 1 -> testRmiCommunication(new ServerFactory(), false);\n+\n+            \/* non-default constructor - default config *\/\n+            case 2 -> testRmiCommunication(new ServerFactory(null, null, false), false);\n+\n+            \/* needClientAuth=true *\/\n+            case 3 -> testRmiCommunication(new ServerFactory(null, null, null, true), false);\n+\n+            \/* server side dummy_ciphersuite *\/\n+            case 4 ->\n+                testServerFactory(new String[]{\"dummy_ciphersuite\"}, null, \"unsupported ciphersuite\");\n+\n+            \/* server side dummy_protocol *\/\n+            case 5 ->\n+                testServerFactory(null, new String[]{\"dummy_protocol\"}, \"unsupported protocol\");\n+\n+            \/* client side dummy_ciphersuite *\/\n+            case 6 -> {\n@@ -227,13 +194,2 @@\n-                                   \"dummy_ciphersuite\");\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory());\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg3);\n-                System.exit(1);\n-            } catch (Exception e) {\n-                System.out.println(msg2 + \" Exception: \" + e.toString());\n-                System.exit(0);\n+                        \"dummy_ciphersuite\");\n+                testRmiCommunication(new ServerFactory(), true);\n@@ -241,4 +197,3 @@\n-            break;\n-        case 7: \/* client side dummy_protocol *\/\n-            System.out.println(msg1);\n-            try {\n+\n+            \/* client side dummy_protocol *\/\n+            case 7 -> {\n@@ -246,13 +201,2 @@\n-                                   \"dummy_protocol\");\n-                HelloImpl server = new HelloImpl(\n-                          0,\n-                          new ClientFactory(),\n-                          new ServerFactory());\n-                Remote stub = server.runServer();\n-                HelloClient client = new HelloClient();\n-                client.runClient(stub);\n-                System.out.println(msg3);\n-                System.exit(1);\n-            } catch (Exception e) {\n-                System.out.println(msg2 + \" Exception: \" + e.toString());\n-                System.exit(0);\n+                        \"dummy_protocol\");\n+                testRmiCommunication(new ServerFactory(), true);\n@@ -260,3 +204,3 @@\n-            break;\n-        default:\n-            throw new IllegalArgumentException(\"invalid test number\");\n+\n+            default ->\n+                    throw new RuntimeException(\"Unknown test number: \" + testNumber);\n@@ -266,1 +210,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -270,1 +214,1 @@\n-            File.separator + \"keystore\";\n+                File.separator + \"keystore\";\n@@ -278,1 +222,1 @@\n-            File.separator + \"truststore\";\n+                File.separator + \"truststore\";\n@@ -283,2 +227,0 @@\n-        \/\/ Run test\n-        \/\/\n@@ -286,2 +228,1 @@\n-        test.runTest(args);\n-        System.exit(0);\n+        test.runTest(Integer.parseInt(args[0]));\n@@ -289,1 +230,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.java","additions":89,"deletions":148,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-#\n-# Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug 5016500\n-# @summary Test SslRmi[Client|Server]SocketFactory SSL socket parameters.\n-# @author Luis-Miguel Alventosa\n-# @run clean SSLSocketParametersTest\n-# @run build SSLSocketParametersTest\n-# @run shell\/timeout=300 SSLSocketParametersTest.sh\n-\n-echo -------------------------------------------------------------\n-echo Launching test for `basename $0 .sh`\n-echo -------------------------------------------------------------\n-\n-# case 1: \/* default constructor - default config *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 1 || exit $?\n-\n-# case 2: \/* non-default constructor - default config *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 2 || exit $?\n-\n-# case 3: \/* needClientAuth=true *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 3 || exit $?\n-\n-# case 4: \/* server side dummy_ciphersuite *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 4 || exit $?\n-\n-# case 5: \/* server side dummy_protocol *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 5 || exit $?\n-\n-# case 6: \/* client side dummy_ciphersuite *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 6 || exit $?\n-\n-# case 7: \/* client side dummy_protocol *\/\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -classpath ${TESTCLASSES} -Dtest.src=${TESTSRC} SSLSocketParametersTest 7 || exit $?\n","filename":"test\/jdk\/javax\/rmi\/ssl\/SSLSocketParametersTest.sh","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"}]}