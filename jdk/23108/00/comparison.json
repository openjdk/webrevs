{"files":[{"patch":"@@ -181,1 +181,1 @@\n-    log_debug(codecache)(\"Code heap (%s) size \" SIZE_FORMAT \"K below required minimal size \" SIZE_FORMAT \"K\",\n+    log_debug(codecache)(\"Code heap (%s) size %zuK below required minimal size %zuK\",\n@@ -184,1 +184,1 @@\n-    err_msg message(SIZE_FORMAT \"K < \" SIZE_FORMAT \"K\", size\/K, required_size\/K);\n+    err_msg message(SIZE_FORMAT \"K < %zuK\", size\/K, required_size\/K);\n@@ -259,2 +259,2 @@\n-    log_info(codecache)(\"ReservedCodeCache size \" SIZE_FORMAT \"K changed to total segments size NonNMethod \"\n-                        SIZE_FORMAT \"K NonProfiled \" SIZE_FORMAT \"K Profiled \" SIZE_FORMAT \"K = \" SIZE_FORMAT \"K\",\n+    log_info(codecache)(\"ReservedCodeCache size %zuK changed to total segments size NonNMethod \"\n+                        \"%zuK NonProfiled %zuK Profiled %zuK = %zuK\",\n@@ -266,2 +266,2 @@\n-  log_debug(codecache)(\"Initializing code heaps ReservedCodeCache \" SIZE_FORMAT \"K NonNMethod \" SIZE_FORMAT \"K\"\n-                       \" NonProfiled \" SIZE_FORMAT \"K Profiled \" SIZE_FORMAT \"K\",\n+  log_debug(codecache)(\"Initializing code heaps ReservedCodeCache %zuK NonNMethod %zuK\"\n+                       \" NonProfiled %zuK Profiled %zuK\",\n@@ -285,1 +285,1 @@\n-    err_msg message(\"NonNMethodCodeHeapSize (\" SIZE_FORMAT \"K)\", non_nmethod.size\/K);\n+    err_msg message(\"NonNMethodCodeHeapSize (%zuK)\", non_nmethod.size\/K);\n@@ -287,1 +287,1 @@\n-      message.append(\" + ProfiledCodeHeapSize (\" SIZE_FORMAT \"K)\", profiled.size\/K);\n+      message.append(\" + ProfiledCodeHeapSize (%zuK)\", profiled.size\/K);\n@@ -290,1 +290,1 @@\n-      message.append(\" + NonProfiledCodeHeapSize (\" SIZE_FORMAT \"K)\", non_profiled.size\/K);\n+      message.append(\" + NonProfiledCodeHeapSize (%zuK)\", non_profiled.size\/K);\n@@ -292,1 +292,1 @@\n-    message.append(\" = \" SIZE_FORMAT \"K\", total\/K);\n+    message.append(\" = %zuK\", total\/K);\n@@ -294,1 +294,1 @@\n-    message.append(\"ReservedCodeCacheSize (\" SIZE_FORMAT \"K).\", cache_size\/K);\n+    message.append(\"ReservedCodeCacheSize (%zuK).\", cache_size\/K);\n@@ -359,1 +359,1 @@\n-    vm_exit_during_initialization(err_msg(\"Could not reserve enough space for code cache (\" SIZE_FORMAT \"K)\",\n+    vm_exit_during_initialization(err_msg(\"Could not reserve enough space for code cache (%zuK)\",\n@@ -440,1 +440,1 @@\n-    vm_exit_during_initialization(err_msg(\"Could not reserve enough space in %s (\" SIZE_FORMAT \"K)\",\n+    vm_exit_during_initialization(err_msg(\"Could not reserve enough space in %s (%zuK)\",\n@@ -1730,2 +1730,2 @@\n-    st->print_cr(\" size=\" SIZE_FORMAT \"Kb used=\" SIZE_FORMAT\n-                 \"Kb max_used=\" SIZE_FORMAT \"Kb free=\" SIZE_FORMAT \"Kb\",\n+    st->print_cr(\" size=%zuKb used=%zu\"\n+                 \"Kb max_used=%zuKb free=%zuKb\",\n@@ -1791,1 +1791,1 @@\n-            \" adapters='\" UINT32_FORMAT \"' free_code_cache='\" SIZE_FORMAT \"'\",\n+            \" adapters='\" UINT32_FORMAT \"' free_code_cache='%zu'\",\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -373,1 +373,1 @@\n-    out->print_cr(\"Current granularity is \" SIZE_FORMAT \" bytes. Try a coarser granularity.\", granularity);\n+    out->print_cr(\"Current granularity is %zu bytes. Try a coarser granularity.\", granularity);\n@@ -624,1 +624,1 @@\n-  ast->print_cr(\"   CodeHeap committed size \" SIZE_FORMAT \"K (\" SIZE_FORMAT \"M), reserved size \" SIZE_FORMAT \"K (\" SIZE_FORMAT \"M), %d%% occupied.\",\n+  ast->print_cr(\"   CodeHeap committed size %zuK (%zuM), reserved size %zuK (%zuM), %d%% occupied.\",\n@@ -626,3 +626,3 @@\n-  ast->print_cr(\"   CodeHeap allocation segment size is \" SIZE_FORMAT \" bytes. This is the smallest possible granularity.\", seg_size);\n-  ast->print_cr(\"   CodeHeap (committed part) is mapped to \" SIZE_FORMAT \" granules of size \" SIZE_FORMAT \" bytes.\", granules, granularity);\n-  ast->print_cr(\"   Each granule takes \" SIZE_FORMAT \" bytes of C heap, that is \" SIZE_FORMAT \"K in total for statistics data.\", sizeof(StatElement), (sizeof(StatElement)*granules)\/(size_t)K);\n+  ast->print_cr(\"   CodeHeap allocation segment size is %zu bytes. This is the smallest possible granularity.\", seg_size);\n+  ast->print_cr(\"   CodeHeap (committed part) is mapped to %zu granules of size %zu bytes.\", granules, granularity);\n+  ast->print_cr(\"   Each granule takes %zu bytes of C heap, that is %zuK in total for statistics data.\", sizeof(StatElement), (sizeof(StatElement)*granules)\/(size_t)K);\n@@ -700,1 +700,1 @@\n-        insane = true; ast->print_cr(\"Sanity check: end index (%d) out of bounds (\" SIZE_FORMAT \")\", ix_end, granules);\n+        insane = true; ast->print_cr(\"Sanity check: end index (%d) out of bounds (%zu)\", ix_end, granules);\n@@ -703,1 +703,1 @@\n-        insane = true; ast->print_cr(\"Sanity check: code heap capacity has changed (\" SIZE_FORMAT \"K to \" SIZE_FORMAT \"K)\", size\/(size_t)K, heap->capacity()\/(size_t)K);\n+        insane = true; ast->print_cr(\"Sanity check: code heap capacity has changed (%zuK to %zuK)\", size\/(size_t)K, heap->capacity()\/(size_t)K);\n@@ -1137,1 +1137,1 @@\n-    ast->print_cr(\"   Each free block takes \" SIZE_FORMAT \" bytes of C heap for statistics data, that is \" SIZE_FORMAT \"K in total.\", sizeof(FreeBlk), (sizeof(FreeBlk)*nBlocks_free)\/K);\n+    ast->print_cr(\"   Each free block takes %zu bytes of C heap for statistics data, that is %zuK in total.\", sizeof(FreeBlk), (sizeof(FreeBlk)*nBlocks_free)\/K);\n@@ -2104,1 +2104,1 @@\n-      ast->print_cr(\"Address range [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"), \" SIZE_FORMAT \"k\", p2i(low_bound+ix*granule_size), p2i(low_bound + end_ix*granule_size), (end_ix - ix)*granule_size\/(size_t)K);\n+      ast->print_cr(\"Address range [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"), %zuk\", p2i(low_bound+ix*granule_size), p2i(low_bound + end_ix*granule_size), (end_ix - ix)*granule_size\/(size_t)K);\n","filename":"src\/hotspot\/share\/code\/codeHeapState.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2113,1 +2113,1 @@\n-                       \"\/Free CodeCache:\" SIZE_FORMAT \"Kb\",\n+                       \"\/Free CodeCache:%zuKb\",\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        tty->print_cr(\"Decoding VtableStub %s[%d]@\" PTR_FORMAT \" [\" PTR_FORMAT \", \" PTR_FORMAT \"] (\" SIZE_FORMAT \" bytes)\",\n+        tty->print_cr(\"Decoding VtableStub %s[%d]@\" PTR_FORMAT \" [\" PTR_FORMAT \", \" PTR_FORMAT \"] (%zu bytes)\",\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -645,1 +645,1 @@\n-  if (log)  log->done(\"parse nodes='%d' live='%d' memory='\" SIZE_FORMAT \"'\",\n+  if (log)  log->done(\"parse nodes='%d' live='%d' memory='%zu'\",\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}