{"files":[{"patch":"@@ -257,3 +257,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger_with_type(OTHER);\n@@ -272,3 +270,1 @@\n-      _previous_trigger_declinations = _declined_trigger_count;\n-      _declined_trigger_count = 0;\n-      _start_gc_is_pending = true;\n+      accept_trigger_with_type(OTHER);\n@@ -306,4 +302,1 @@\n-    _last_trigger = RATE;\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger_with_type(RATE);\n@@ -320,4 +313,1 @@\n-    _last_trigger = SPIKE;\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger_with_type(SPIKE);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -148,0 +148,5 @@\n+\n+  inline void accept_trigger_with_type(Trigger trigger_type) {\n+    _last_trigger = trigger_type;\n+    ShenandoahHeuristics::accept_trigger();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,3 +56,1 @@\n-  _previous_trigger_declinations = _declined_trigger_count;\n-  _declined_trigger_count = 0;\n-  _start_gc_is_pending = true;\n+  accept_trigger();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,3 +65,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n@@ -76,3 +74,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -198,3 +198,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n@@ -209,3 +207,1 @@\n-      _previous_trigger_declinations = _declined_trigger_count;\n-      _declined_trigger_count = 0;\n-      _start_gc_is_pending = true;\n+      accept_trigger();\n@@ -215,1 +211,1 @@\n-  _declined_trigger_count++;\n+  decline_trigger();\n@@ -227,2 +223,2 @@\n-  if ((_previous_trigger_declinations < 16) && (step > 0)) {\n-    \/\/ Don't penalize if heuristics are not responsible for a negative outcome.  Allow 16 checks following\n+  if ((_previous_trigger_declinations <= Penalty_Free_Declinations) && (step > 0)) {\n+    \/\/ Don't penalize if heuristics are not responsible for a negative outcome.  Allow Penalty_Free_Declinations following\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+  \/\/ How many times can I decline a trigger opportunity without being penalized for excessive idle span before trigger?\n+  static const size_t Penalty_Free_Declinations = 16;\n+\n@@ -81,3 +84,10 @@\n-  bool _start_gc_is_pending;\n-  size_t _declined_trigger_count;\n-  size_t _previous_trigger_declinations;\n+  bool _start_gc_is_pending;              \/\/ True denotes that GC has been triggered, so no need to trigger again.\n+  size_t _declined_trigger_count;         \/\/ This counts how many times since previous GC finished that this\n+                                          \/\/  heuristic has answered false to should_start_gc().\n+  size_t _previous_trigger_declinations;  \/\/ This represents the value of _declined_trigger_count as captured at the\n+                                          \/\/  moment the most recent GC effort was triggered.  In case the most recent\n+                                          \/\/  concurrent GC effort degenerates, the value of this variable allows us to\n+                                          \/\/  differentiate between degeneration because heuristic was overly optimistic\n+                                          \/\/  in delaying the trigger vs. degeneration for other reasons (such as the\n+                                          \/\/  most recent GC triggered \"immediately\" after previous GC finished, but there\n+                                          \/\/  the free headroom has already been depleted).\n@@ -174,0 +184,10 @@\n+  inline void accept_trigger() {\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n+  }\n+\n+  inline void decline_trigger() {\n+    _declined_trigger_count++;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  _declined_trigger_count++;\n+  decline_trigger();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,3 +59,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,2 @@\n-        \/\/ Do not increment _declined_trigger_count when waiting for minimum quantum of Old-gen marking\n+        \/\/ Do not decline_trigger() when waiting for minimum quantum of Old-gen marking.  It is not at our discretion\n+        \/\/ to trigger at this time.\n@@ -146,3 +147,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n@@ -159,3 +158,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n-    _declined_trigger_count = 0;\n-    _start_gc_is_pending = true;\n+    accept_trigger();\n@@ -165,1 +162,1 @@\n-  \/\/ Don't increment _declined_trigger_count.  That was done in ShenandoahAdaptiveHeuristics::should_start_gc()\n+  \/\/ Don't decline_trigger() here  That was done in ShenandoahAdaptiveHeuristics::should_start_gc()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"}]}