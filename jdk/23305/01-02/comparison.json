{"files":[{"patch":"@@ -52,1 +52,1 @@\n-  _previous_trigger_declinations(0),\n+  _most_recent_declined_trigger_count(0),\n@@ -223,1 +223,1 @@\n-  if ((_previous_trigger_declinations <= Penalty_Free_Declinations) && (step > 0)) {\n+  if ((_most_recent_declined_trigger_count <= Penalty_Free_Declinations) && (step > 0)) {\n@@ -261,1 +261,0 @@\n-  _start_gc_is_pending = false;\n@@ -269,1 +268,0 @@\n-  _start_gc_is_pending = false;\n@@ -274,1 +272,0 @@\n-  _start_gc_is_pending = false;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-  size_t _previous_trigger_declinations;  \/\/ This represents the value of _declined_trigger_count as captured at the\n+  size_t _most_recent_declined_trigger_count;\n+                                       ;  \/\/ This represents the value of _declined_trigger_count as captured at the\n@@ -92,2 +93,2 @@\n-                                          \/\/  most recent GC triggered \"immediately\" after previous GC finished, but there\n-                                          \/\/  the free headroom has already been depleted).\n+                                          \/\/  most recent GC triggered \"immediately\" after previous GC finished, but the\n+                                          \/\/  free headroom has already been depleted).\n@@ -185,1 +186,1 @@\n-    _previous_trigger_declinations = _declined_trigger_count;\n+    _most_recent_declined_trigger_count = _declined_trigger_count;\n@@ -212,0 +213,4 @@\n+  inline void cancel_trigger_request() {\n+    _start_gc_is_pending = false;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -135,0 +135,2 @@\n+      heuristics->cancel_trigger_request();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-  if (!metrics.is_good_progress()) {\n+  if (!metrics.is_good_progress(_generation)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  if (metrics.is_good_progress()) {\n+  if (metrics.is_good_progress(heap->global_generation())) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-bool ShenandoahMetricsSnapshot::is_good_progress() {\n+bool ShenandoahMetricsSnapshot::is_good_progress(ShenandoahGeneration* generation) {\n@@ -50,1 +50,1 @@\n-  size_t free_expected = _heap->max_capacity() \/ 100 * ShenandoahCriticalFreeThreshold;\n+  size_t free_expected = (generation->max_capacity() \/ 100) * ShenandoahCriticalFreeThreshold;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  bool is_good_progress();\n+  bool is_good_progress(ShenandoahGeneration* generation);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+          _global_heuristics->cancel_trigger_request();\n@@ -76,0 +77,1 @@\n+            _young_heuristics->cancel_trigger_request();\n@@ -78,0 +80,1 @@\n+            _young_heuristics->cancel_trigger_request();\n@@ -84,0 +87,1 @@\n+        _young_heuristics->cancel_trigger_request();\n@@ -97,0 +101,1 @@\n+        _global_heuristics->cancel_trigger_request();\n@@ -99,0 +104,1 @@\n+        _young_heuristics->cancel_trigger_request();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}