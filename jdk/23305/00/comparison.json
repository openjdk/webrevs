{"files":[{"patch":"@@ -244,0 +244,4 @@\n+  if (_start_gc_is_pending) {\n+    return true;\n+  }\n+\n@@ -253,0 +257,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -265,0 +272,3 @@\n+      _previous_trigger_declinations = _declined_trigger_count;\n+      _declined_trigger_count = 0;\n+      _start_gc_is_pending = true;\n@@ -297,0 +307,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -308,0 +321,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -311,1 +327,6 @@\n-  return ShenandoahHeuristics::should_start_gc();\n+  if (ShenandoahHeuristics::should_start_gc()) {\n+    _start_gc_is_pending = true;\n+    return true;\n+  } else {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -56,0 +56,3 @@\n+  _previous_trigger_declinations = _declined_trigger_count;\n+  _declined_trigger_count = 0;\n+  _start_gc_is_pending = true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -73,0 +76,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,3 @@\n+  _start_gc_is_pending(false),\n+  _declined_trigger_count(0),\n+  _previous_trigger_declinations(0),\n@@ -188,0 +191,3 @@\n+  if (_start_gc_is_pending) {\n+    return true;\n+  }\n@@ -192,0 +198,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -200,0 +209,3 @@\n+      _previous_trigger_declinations = _declined_trigger_count;\n+      _declined_trigger_count = 0;\n+      _start_gc_is_pending = true;\n@@ -203,1 +215,1 @@\n-\n+  _declined_trigger_count++;\n@@ -215,0 +227,6 @@\n+  if ((_previous_trigger_declinations < 16) && (step > 0)) {\n+    \/\/ Don't penalize if heuristics are not responsible for a negative outcome.  Allow 16 checks following\n+    \/\/ previous GC for self calibration without penalty.\n+    step = 0;\n+  }\n+\n@@ -247,0 +265,1 @@\n+  _start_gc_is_pending = false;\n@@ -254,0 +273,1 @@\n+  _start_gc_is_pending = false;\n@@ -258,0 +278,1 @@\n+  _start_gc_is_pending = false;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -81,0 +81,4 @@\n+  bool _start_gc_is_pending;\n+  size_t _declined_trigger_count;\n+  size_t _previous_trigger_declinations;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+  _declined_trigger_count++;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+        \/\/ Do not increment _declined_trigger_count when waiting for minimum quantum of Old-gen marking\n@@ -145,0 +146,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -155,0 +159,3 @@\n+    _previous_trigger_declinations = _declined_trigger_count;\n+    _declined_trigger_count = 0;\n+    _start_gc_is_pending = true;\n@@ -158,0 +165,1 @@\n+  \/\/ Don't increment _declined_trigger_count.  That was done in ShenandoahAdaptiveHeuristics::should_start_gc()\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -440,0 +440,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}