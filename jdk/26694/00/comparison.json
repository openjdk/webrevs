{"files":[{"patch":"@@ -131,0 +131,1 @@\n+        ensureEntered(\"getAllModuleElements\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341342\n+ * @summary Test Elements methods programmatically\n+ * @modules jdk.compiler\n+ * @run junit TestElementsProgrammatic\n+ *\/\n+\n+import com.sun.source.util.JavacTask;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+import org.junit.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * Programmatically test workings of various methods of Elements.\n+ *\/\n+public class TestElementsProgrammatic {\n+\n+    private final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler();\n+\n+    @Test\n+    public void automaticallyEnter() {\n+        \/\/make sure the get{All,}{Module,Package,Type}Element{s,} methods will automatically enter:\n+        List<Consumer<JavacTask>> testCases = List.of(\n+                task -> assertFalse(task.getElements().getAllModuleElements().isEmpty()),\n+                task -> assertNotNull(task.getElements().getModuleElement(\"java.base\")),\n+                task -> assertNotNull(task.getElements().getPackageElement(\"java.lang\")),\n+                task -> assertFalse(task.getElements().getAllPackageElements(\"java.lang\").isEmpty()),\n+                task -> assertNotNull(task.getElements().getTypeElement(\"java.lang.Object\")),\n+                task -> assertFalse(task.getElements().getAllTypeElements(\"java.lang.Object\").isEmpty())\n+        );\n+        for (Consumer<JavacTask> testCase : testCases) {\n+            JavaFileObject input =\n+                    SimpleJavaFileObject.forSource(URI.create(\"mem:\/\/Test.java\"), \"\");\n+            List<JavaFileObject> inputs = List.of(input);\n+            JavacTask task = (JavacTask) systemCompiler.getTask(null, null, null, null, null, inputs);\n+            testCase.accept(task);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestElementsProgrammatic.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}