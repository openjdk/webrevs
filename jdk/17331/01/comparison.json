{"files":[{"patch":"@@ -2004,1 +2004,1 @@\n-    if (cgr != nullptr && cgr->not_global_escape(obj_node())) {\n+    if (cgr != nullptr && cgr->can_eliminate_lock(this)) {\n@@ -2200,1 +2200,1 @@\n-    if (cgr != nullptr && cgr->not_global_escape(obj_node())) {\n+    if (cgr != nullptr && cgr->can_eliminate_lock(this)) {\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"opto\/locknode.hpp\"\n@@ -2549,6 +2550,5 @@\n-        if (!alock->is_non_esc_obj()) {\n-          if (not_global_escape(alock->obj_node())) {\n-            assert(!alock->is_eliminated() || alock->is_coarsened(), \"sanity\");\n-            \/\/ The lock could be marked eliminated by lock coarsening\n-            \/\/ code during first IGVN before EA. Replace coarsened flag\n-            \/\/ to eliminate all associated locks\/unlocks.\n+        if (!alock->is_non_esc_obj() && can_eliminate_lock(alock)) {\n+          assert(!alock->is_eliminated() || alock->is_coarsened(), \"sanity\");\n+          \/\/ The lock could be marked eliminated by lock coarsening\n+          \/\/ code during first IGVN before EA. Replace coarsened flag\n+          \/\/ to eliminate all associated locks\/unlocks.\n@@ -2556,1 +2556,1 @@\n-            alock->log_lock_optimization(C, \"eliminate_lock_set_non_esc3\");\n+          alock->log_lock_optimization(C, \"eliminate_lock_set_non_esc3\");\n@@ -2558,2 +2558,1 @@\n-            alock->set_non_esc_obj();\n-          }\n+          alock->set_non_esc_obj();\n@@ -2854,1 +2853,1 @@\n-bool ConnectionGraph::not_global_escape(Node *n) {\n+bool ConnectionGraph::not_global_escape(Node *n) const {\n@@ -2883,0 +2882,37 @@\n+\/*\n+ * The lock\/unlock is unnecessary if we are locking a non-escaped object,\n+ * unless synchronized block (defined by BoxLock node) has other escaped objects\n+ * (for example, locked object come from Interpreter in OSR compilation).\n+ *\n+ * Return true if lock\/unlock can be eliminated.\n+ *\/\n+bool ConnectionGraph::can_eliminate_lock(AbstractLockNode* alock) const {\n+  BoxLockNode* box = alock->box_node()->as_BoxLock();\n+  if (box->has_escaped_object()) {\n+    \/\/ Already found that this synchronized block has escaped objects.\n+    return false;\n+  }\n+  bool not_esc_obj = not_global_escape(alock->obj_node());\n+  if (not_esc_obj) {\n+    \/\/ Now check all associated objects in this synchronized block.\n+    for (uint i = 0; i < box->outcnt(); i++) {\n+      Node* n = box->raw_out(i);\n+      assert(!n->is_Phi(), \"should not merge BoxLock nodes\");\n+      if (n->is_AbstractLock()) {\n+        alock = n->as_AbstractLock();\n+        \/\/ Check Lock's box since box could be referenced by other\n+        \/\/ not related Lock's debug info.\n+        if (alock->box_node() == box) {\n+          if (!not_global_escape(alock->obj_node())) {\n+            not_esc_obj = false;\n+            break;\n+          }\n+        }\n+      }\n+    }\n+  }\n+  if (!not_esc_obj) { \/\/ has escaped object\n+    box->set_has_escaped_object(); \/\/ Cache result\n+  }\n+  return not_esc_obj;\n+}\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":46,"deletions":10,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,1 @@\n+class  AbstractLockNode;\n@@ -631,1 +632,4 @@\n-  bool not_global_escape(Node *n);\n+  bool not_global_escape(Node *n) const;\n+\n+  \/\/ Check that lock\/unlock can be eliminated.\n+  bool can_eliminate_lock(AbstractLockNode* alock) const;\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,2 @@\n-                                       _slot(slot), _is_eliminated(false) {\n+                                       _slot(slot), _is_eliminated(false),\n+                                       _has_esc_obj(false) {\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+  bool   _has_esc_obj; \/\/ Associated locks are used for escaped object\n@@ -64,0 +65,3 @@\n+  bool has_escaped_object() const { return _has_esc_obj; }\n+  void set_has_escaped_object()   { _has_esc_obj = true; }\n+\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322743\n+ * @summary EA incorrectly marks locks for elimination for escaped object which comes from Interpreter in OSR compilation.\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestLocksInOSR*::* -XX:CompileCommand=quiet TestLocksInOSR\n+ *\/\n+\n+public class TestLocksInOSR {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Triggers assert(this->held_monitor_count() == this->jni_monitor_count()) failed: held monitor count should be equal to jni: 1 != 0\n+        test1();\n+\n+        \/\/ Triggers assert(current->held_monitor_count() == 0) failed: Should not be possible\n+        test2();\n+    }\n+\n+    static void test1() throws Exception {\n+        Thread writeThread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                for (int i = 0; i < 2; ++i) {\n+                    synchronized (new Object()) {\n+                        \/\/ Trigger OSR compilation\n+                        for (int j = 0; j < 100_000; ++j) {\n+                          \/\/ We still have safepoint left in code\n+                        }\n+                    }\n+                }\n+            }\n+        });\n+        writeThread.start();\n+        writeThread.join();\n+    }\n+\n+    static void test2() {\n+        for (int i = 0; i < 2; ++i) {\n+            synchronized (new Object()) {\n+                \/\/ Trigger OSR compilation\n+                for (int j = 0; j < 100_000; ++j) {\n+                  \/\/ We still have safepoint left in code\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestLocksInOSR.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}