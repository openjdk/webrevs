{"files":[{"patch":"@@ -4882,0 +4882,1 @@\n+        \/\/  - it is OSR locking region (no Lock node)\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-    Node *box = new BoxLockNode(next_monitor());\n+    BoxLockNode* osr_box = new BoxLockNode(next_monitor());\n@@ -230,1 +230,0 @@\n-    box = _gvn.transform(box);\n@@ -232,0 +231,10 @@\n+    \/\/ This OSR locking region is unbalanced because it does not have Lock node:\n+    \/\/ locking was done in Interpreter.\n+    \/\/ This is similar to Coarsened case when Lock node is eliminated\n+    \/\/ and as result the region is marked as Unbalanced.\n+\n+    \/\/ Emulate Coarsened state transition from Regular to Unbalanced.\n+    osr_box->set_coarsened();\n+    osr_box->set_unbalanced();\n+\n+    Node* box = _gvn.transform(osr_box);\n@@ -1808,1 +1817,1 @@\n-              \/\/ BoxLock nodes are not commoning.\n+              \/\/ BoxLock nodes are not commoning when EliminateNestedLocks is on.\n@@ -1813,0 +1822,13 @@\n+              BoxLockNode* old_box = m->as_BoxLock();\n+              if (n->as_BoxLock()->is_unbalanced() && !old_box->is_unbalanced()) {\n+                \/\/ Preserve Unbalanced status.\n+                \/\/\n+                \/\/ `old_box` can have only Regular or Coarsened status\n+                \/\/ because this code is executed only during Parse phase and\n+                \/\/ Incremental Inlining before EA and Macro nodes elimination.\n+                \/\/\n+                \/\/ Incremental Inlining is executed after IGVN optimizations\n+                \/\/ during which BoxLock can be marked as Coarsened.\n+                old_box->set_coarsened(); \/\/ Verifies state\n+                old_box->set_unbalanced();\n+              }\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322743\n+ * @summary EA incorrectly marks locks for elimination for escaped object which comes from Interpreter in OSR compilation.\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestLocksInOSR*::* -XX:CompileCommand=quiet TestLocksInOSR\n+ *\/\n+\n+public class TestLocksInOSR {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Triggers assert(this->held_monitor_count() == this->jni_monitor_count()) failed: held monitor count should be equal to jni: 1 != 0\n+        test1();\n+\n+        \/\/ Triggers assert(current->held_monitor_count() == 0) failed: Should not be possible\n+        test2();\n+    }\n+\n+    static void test1() throws Exception {\n+        Thread writeThread = new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                for (int i = 0; i < 2; ++i) {\n+                    synchronized (new Object()) {\n+                        \/\/ Trigger OSR compilation\n+                        for (int j = 0; j < 100_000; ++j) {\n+                          \/\/ We still have safepoint left in code\n+                        }\n+                    }\n+                }\n+            }\n+        });\n+        writeThread.start();\n+        writeThread.join();\n+    }\n+\n+    static void test2() {\n+        for (int i = 0; i < 2; ++i) {\n+            synchronized (new Object()) {\n+                \/\/ Trigger OSR compilation\n+                for (int j = 0; j < 100_000; ++j) {\n+                  \/\/ We still have safepoint left in code\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestLocksInOSR.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}