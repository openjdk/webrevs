{"files":[{"patch":"@@ -207,1 +207,1 @@\n-        \/\/ Optionally create module layer for all modules on the module path.\n+        \/\/ Optionally create module layer with all missing modules from the module path.\n@@ -209,1 +209,5 @@\n-        var modulePathModules = modulePathFinder.findAll().stream().map(ModuleReference::descriptor).map(ModuleDescriptor::name).toList();\n+        var modulePathModules = modulePathFinder.findAll().stream()\n+                .map(ModuleReference::descriptor)\n+                .map(ModuleDescriptor::name)\n+                .filter(name -> bootLayer.findModule(name).isEmpty())\n+                .toList();\n@@ -211,1 +215,1 @@\n-            var modulePathConfiguration = bootLayer.configuration().resolveAndBind(modulePathFinder, ModuleFinder.of(), Set.copyOf(modulePathModules));\n+            var modulePathConfiguration = bootLayer.configuration().resolve(modulePathFinder, ModuleFinder.of(), Set.copyOf(modulePathModules));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8304400 8332226\n+ * @bug 8304400 8332226 8334761\n@@ -224,0 +224,62 @@\n+    @Test\n+    void testAutomaticModuleAlreadyInModuleGraph(@TempDir Path base) throws Exception {\n+        Files.createDirectories(base.resolve(\"foo\", \"foo\"));\n+        Files.writeString(base.resolve(\"foo\", \"module-info.java\"),\n+                \"\"\"\n+                module foo {\n+                  exports foo;\n+                }\n+                \"\"\");\n+        Files.writeString(base.resolve(\"foo\", \"foo\", \"Foo.java\"),\n+                \"\"\"\n+                package foo;\n+                public record Foo() {}\n+                \"\"\");\n+        var javac = ToolProvider.findFirst(\"javac\").orElseThrow();\n+        javac.run(System.out, System.err, \"--module-source-path\", base.toString(), \"--module\", \"foo\", \"-d\", base.toString());\n+        var jar =  ToolProvider.findFirst(\"jar\").orElseThrow();\n+        jar.run(System.out, System.err, \"--create\", \"--file\", base.resolve(\"foo.jar\").toString(), \"-C\", base.resolve(\"foo\").toString(), \"foo\/Foo.class\");\n+\n+        Files.createDirectories(base.resolve(\"bar\", \"bar\"));\n+        Files.writeString(base.resolve(\"bar\", \"module-info.java\"),\n+                \"\"\"\n+                module bar {\n+                  requires foo;\n+                }\n+                \"\"\");\n+        Files.writeString(base.resolve(\"bar\", \"bar\",\"Prog1.java\"),\n+                \"\"\"\n+                package bar;\n+                class Prog1 {\n+                  public static void main(String... args) {\n+                    System.out.println(new foo.Foo());\n+                  }\n+                }\n+                \"\"\");\n+\n+        var command = List.of(\n+                Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+                \"-p\", base.resolve(\"foo.jar\").toString(),\n+                \"--add-modules\", \"foo\", \/\/ JDK-8334761\n+                \"bar\/bar\/Prog1.java\");\n+        var redirectedOut = base.resolve(\"out.redirected\");\n+        var redirectedErr = base.resolve(\"err.redirected\");\n+        var process = new ProcessBuilder(command)\n+                .directory(base.toFile())\n+                .redirectOutput(redirectedOut.toFile())\n+                .redirectError(redirectedErr.toFile())\n+                .start();\n+        var code = process.waitFor();\n+        var out = Files.readAllLines(redirectedOut);\n+        var err = Files.readAllLines(redirectedErr);\n+\n+        assertAll(\n+                () -> assertEquals(0, code, out + \"\\n\" + err),\n+                () -> assertLinesMatch(\n+                        \"\"\"\n+                        Foo[]\n+                        \"\"\".lines(), out.stream()),\n+                () -> assertTrue(err.isEmpty())\n+        );\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/launcher\/ModuleSourceLauncherTests.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"}]}