{"files":[{"patch":"@@ -1545,1 +1545,1 @@\n-        AddOption(\"--add-modules=ALL-DEFAULT\", NULL);\n+        AddOption(\"--add-modules=ALL-DEFAULT,ALL-MODULE-PATH\", NULL);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    ClassLoader newClassLoaderFor(ClassLoader parent, String mainClassName) throws ClassNotFoundException, Fault {\n+    ClassLoader newClassLoaderFor(ClassLoader parentLoader, String mainClassName) throws ClassNotFoundException, Fault {\n@@ -194,1 +194,1 @@\n-            return new MemoryClassLoader(inMemoryClasses, parent, null, descriptor, this::compileJavaFileByName);\n+            return new MemoryClassLoader(inMemoryClasses, parentLoader, null, descriptor, this::compileJavaFileByName);\n@@ -203,18 +203,0 @@\n-        var bootLayer = ModuleLayer.boot();\n-        var parentLayer = bootLayer;\n-        var parentLoader = parent;\n-\n-        \/\/ Optionally create module layer with all missing modules from the module path.\n-        var modulePathFinder = createModuleFinderFromModulePath();\n-        var modulePathModules = modulePathFinder.findAll().stream()\n-                .map(ModuleReference::descriptor)\n-                .map(ModuleDescriptor::name)\n-                .filter(name -> bootLayer.findModule(name).isEmpty())\n-                .toList();\n-        if (!modulePathModules.isEmpty()) {\n-            var modulePathConfiguration = bootLayer.configuration().resolve(modulePathFinder, ModuleFinder.of(), Set.copyOf(modulePathModules));\n-            var modulePathLayer = ModuleLayer.defineModulesWithOneLoader(modulePathConfiguration, List.of(bootLayer), parent).layer();\n-            parentLayer = modulePathLayer;\n-            parentLoader = modulePathLayer.findLoader(modulePathModules.getFirst());\n-        }\n-\n@@ -222,0 +204,1 @@\n+        var bootLayer = ModuleLayer.boot();\n@@ -224,1 +207,1 @@\n-        var memoryConfig = parentLayer.configuration().resolveAndBind(memoryFinder, ModuleFinder.of(), Set.of(applicationModule.name()));\n+        var memoryConfig = bootLayer.configuration().resolveAndBind(memoryFinder, ModuleFinder.of(), Set.of(applicationModule.name()));\n@@ -226,1 +209,1 @@\n-        var memoryController = ModuleLayer.defineModules(memoryConfig, List.of(parentLayer), __ -> memoryClassLoader);\n+        var memoryController = ModuleLayer.defineModules(memoryConfig, List.of(bootLayer), __ -> memoryClassLoader);\n@@ -237,9 +220,0 @@\n-    private static ModuleFinder createModuleFinderFromModulePath() {\n-        var elements = System.getProperty(\"jdk.module.path\");\n-        if (elements == null) {\n-            return ModuleFinder.of();\n-        }\n-        var paths = Arrays.stream(elements.split(File.pathSeparator)).map(Path::of);\n-        return ModuleFinder.of(paths.toArray(Path[]::new));\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"}]}