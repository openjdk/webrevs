{"files":[{"patch":"@@ -1334,3 +1334,5 @@\n-            assert(vt != nullptr, \"vthread should not be null when vthread is mounted\");\n-            st->print_cr(\"   Mounted virtual thread \\\"%s\\\" #\" INT64_FORMAT, JavaThread::name_for(vt), (int64_t)java_lang_Thread::thread_id(vt));\n-            p->print_vthread_stack_on(st);\n+            if (vt != thread_oop) {\n+              assert(vt != nullptr, \"vthread should not be null when vthread is mounted\");\n+              st->print_cr(\"   Mounted virtual thread \\\"%s\\\" #\" INT64_FORMAT, JavaThread::name_for(vt), (int64_t)java_lang_Thread::thread_id(vt));\n+              p->print_vthread_stack_on(st);\n+            }\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -44,1 +43,1 @@\n-        var started = new CountDownLatch(1);\n+        var started = new AtomicBoolean();\n@@ -48,1 +47,3 @@\n-            started.await();\n+            while (!started.get()) {\n+                Thread.sleep(10);\n+            }\n@@ -66,1 +67,0 @@\n-\n@@ -68,1 +68,1 @@\n-        private final CountDownLatch started;\n+        private final AtomicBoolean started;\n@@ -70,1 +70,1 @@\n-        public DummyRunnable(AtomicBoolean shouldFinish, CountDownLatch started) {\n+        public DummyRunnable(AtomicBoolean shouldFinish, AtomicBoolean started) {\n@@ -80,1 +80,1 @@\n-            started.countDown();\n+            started.set(true);\n@@ -87,1 +87,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/thread\/PrintMountedVirtualThread.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}