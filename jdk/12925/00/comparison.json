{"files":[{"patch":"@@ -1359,0 +1359,18 @@\n+namespace {\n+  class ForkAndExecCheckPoint : public StackObj {\n+    NONCOPYABLE( ForkAndExecCheckPoint );\n+    static int _in_progress;\n+  public:\n+    ForkAndExecCheckPoint() {\n+      assert(Atomic::load(&_in_progress) == 0, \"fork_and_exec() is already in progress\");\n+      Atomic::store(&_in_progress, 1);\n+    }\n+    ~ForkAndExecCheckPoint() {\n+      assert(Atomic::load(&_in_progress) == 1, \"no fork_and_exec() in progress\");\n+      Atomic::store(&_in_progress, 0);\n+    }\n+    static bool in_progress() { return Atomic::load(&_in_progress) == 1; }\n+  };\n+  int ForkAndExecCheckPoint::_in_progress = 0;\n+}\n+\n@@ -1671,1 +1689,7 @@\n-      if (os::fork_and_exec(cmd) < 0) {\n+      int fork_and_exec_res = 0;\n+      {\n+        \/\/ suspend timeout detection and run the command\n+        ForkAndExecCheckPoint chechpoint;\n+        fork_and_exec_res = os::fork_and_exec(cmd);\n+      }\n+      if (fork_and_exec_res < 0) {\n@@ -1675,0 +1699,2 @@\n+      \/\/ check if timeout took place during fork_and_exec()\n+      if (check_timeout()) break;\n@@ -1763,1 +1789,1 @@\n-      || (OnError != nullptr && OnError[0] != '\\0')\n+      || ForkAndExecCheckPoint::in_progress()\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}