{"files":[{"patch":"@@ -4330,1 +4330,1 @@\n-    \/\/ Bail out if length is negative.\n+    \/\/ Bail out if length is negative (i.e., if start > end).\n@@ -4336,0 +4336,4 @@\n+    \/\/ Bail out if start is larger than the original length\n+    Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));\n+    generate_negative_guard(orig_tail, bailout, &orig_tail);\n+\n@@ -4345,2 +4349,1 @@\n-      \/\/ The answer is MinI(orig_length - start, length).\n-      Node* orig_tail = _gvn.transform(new SubINode(orig_length, start));\n+      \/\/ The answer is MinI(orig_tail, length).\n@@ -4394,1 +4397,1 @@\n-        ArrayCopyNode* ac = ArrayCopyNode::make(this, true, original, start, newcopy, intcon(0), moved, true, false,\n+        ArrayCopyNode* ac = ArrayCopyNode::make(this, true, original, start, newcopy, intcon(0), moved, true, true,\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1269,1 +1269,1 @@\n-                       true, !ac->is_copyofrange());\n+                       true, ac->has_negative_length_guard());\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8323682\n+ * @summary Test that the appropriate guards are generated for the copyOfRange\n+ *          intrinsic, even if the result of the array copy is not used.\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.arraycopy.TestArrayCopyOfRangeGuards::test\n+ *                   -Xbatch\n+ *                   compiler.arraycopy.TestArrayCopyOfRangeGuards\n+ *\/\n+\n+package compiler.arraycopy;\n+\n+import java.util.Arrays;\n+\n+public class TestArrayCopyOfRangeGuards {\n+    static int counter = 0;\n+\n+    public static void main(String[] args) {\n+        Object[] array = new Object[10];\n+        for (int i = 0; i < 50_000; i++) {\n+            test(array);\n+        }\n+        if (counter != 50_000) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+\n+    static void test(Object[] array) {\n+        try {\n+            Arrays.copyOfRange(array, 15, 20, Object[].class);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            \/\/ Expected\n+            counter++;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestArrayCopyOfRangeGuards.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}