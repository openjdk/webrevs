{"files":[{"patch":"@@ -5542,1 +5542,0 @@\n-  Register cnt2 = tmp2;  \/\/ cnt2 only used in array length compare\n@@ -5545,0 +5544,1 @@\n+  int klass_offset  = arrayOopDesc::klass_offset_in_bytes();\n@@ -5548,0 +5548,12 @@\n+  \/\/ When the base is not aligned to 8 bytes, then we let\n+  \/\/ the compare loop include the array length, and skip\n+  \/\/ the explicit comparison of length.\n+  bool length_is_8aligned = is_aligned(length_offset, BytesPerWord);\n+  assert(is_aligned(base_offset, BytesPerWord) || is_aligned(length_offset, BytesPerWord),\n+         \"base_offset or length_offset must be 8-byte aligned\");\n+  assert(is_aligned(base_offset, BytesPerWord) || base_offset == length_offset + BytesPerInt,\n+         \"base_offset must be 8-byte aligned or no padding between base and length\");\n+  int start_offset = length_is_8aligned ? length_offset : klass_offset;\n+  assert(is_aligned(start_offset, BytesPerWord), \"start offset must be 8-byte-aligned\");\n+  int extra_length = length_is_8aligned ? base_offset - length_offset : base_offset - klass_offset;\n+  extra_length = extra_length \/ elem_size; \/\/ We count in elements, not bytes.\n@@ -5581,5 +5593,5 @@\n-    ldrw(cnt2, Address(a2, length_offset));\n-    eorw(tmp5, cnt1, cnt2);\n-    cbnzw(tmp5, DONE);\n-    lea(a1, Address(a1, base_offset));\n-    lea(a2, Address(a2, base_offset));\n+    assert(extra_length != 0, \"expect extra length\");\n+    \/\/ Increase loop counter by size of length field.\n+    addw(cnt1, cnt1, extra_length);\n+    lea(a1, Address(a1, start_offset));\n+    lea(a2, Address(a2, start_offset));\n@@ -5648,1 +5660,4 @@\n-    ldrw(cnt2, Address(a2, length_offset));\n+    assert(extra_length != 0, \"expect extra length\");\n+    \/\/ Increase loop counter by size of length field.\n+    addw(cnt1, cnt1, extra_length);\n+\n@@ -5653,1 +5668,1 @@\n-    ldr(tmp3, Address(pre(a1, base_offset)));\n+    ldr(tmp3, Address(pre(a1, start_offset)));\n@@ -5656,1 +5671,1 @@\n-    ldr(tmp4, Address(pre(a2, base_offset)));\n+    ldr(tmp4, Address(pre(a2, start_offset)));\n@@ -5658,2 +5673,0 @@\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n@@ -5691,3 +5704,1 @@\n-    ldr(tmp4, Address(pre(a2, base_offset)));\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n+    ldr(tmp4, Address(pre(a2, start_offset)));\n@@ -5714,3 +5725,0 @@\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n-    cbz(cnt1, SAME);\n@@ -5718,2 +5726,2 @@\n-    ldr(tmp3, Address(a1, base_offset));\n-    ldr(tmp4, Address(a2, base_offset));\n+    ldr(tmp3, Address(a1, start_offset));\n+    ldr(tmp4, Address(a2, start_offset));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":27,"deletions":19,"binary":false,"changes":46,"status":"modified"}]}