{"files":[{"patch":"@@ -5542,1 +5542,0 @@\n-  Register cnt2 = tmp2;  \/\/ cnt2 only used in array length compare\n@@ -5545,0 +5544,1 @@\n+  int klass_offset  = arrayOopDesc::klass_offset_in_bytes();\n@@ -5548,0 +5548,10 @@\n+  \/\/ When the length offset is not aligned to 8 bytes,\n+  \/\/ then we align it down. This is valid because the new\n+  \/\/ offset will always be the klass which is the same\n+  \/\/ for type arrays.\n+  int start_offset = align_down(length_offset, BytesPerWord);\n+  int extra_length = base_offset - start_offset;\n+  assert(start_offset == length_offset || start_offset == klass_offset, \n+         \"start offset must be 8-byte-aligned or be the klass offset\");\n+  assert(base_offset != start_offset, \"must include the length field\");\n+  extra_length = extra_length \/ elem_size; \/\/ We count in elements, not bytes.\n@@ -5581,5 +5591,4 @@\n-    ldrw(cnt2, Address(a2, length_offset));\n-    eorw(tmp5, cnt1, cnt2);\n-    cbnzw(tmp5, DONE);\n-    lea(a1, Address(a1, base_offset));\n-    lea(a2, Address(a2, base_offset));\n+    \/\/ Increase loop counter by size of length field.\n+    addw(cnt1, cnt1, extra_length);\n+    lea(a1, Address(a1, start_offset));\n+    lea(a2, Address(a2, start_offset));\n@@ -5648,1 +5657,3 @@\n-    ldrw(cnt2, Address(a2, length_offset));\n+    \/\/ Increase loop counter by size of length field.\n+    addw(cnt1, cnt1, extra_length);\n+\n@@ -5653,1 +5664,1 @@\n-    ldr(tmp3, Address(pre(a1, base_offset)));\n+    ldr(tmp3, Address(pre(a1, start_offset)));\n@@ -5656,1 +5667,1 @@\n-    ldr(tmp4, Address(pre(a2, base_offset)));\n+    ldr(tmp4, Address(pre(a2, start_offset)));\n@@ -5658,2 +5669,0 @@\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n@@ -5691,3 +5700,1 @@\n-    ldr(tmp4, Address(pre(a2, base_offset)));\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n+    ldr(tmp4, Address(pre(a2, start_offset)));\n@@ -5714,3 +5721,0 @@\n-    cmp(cnt2, cnt1);\n-    br(NE, DONE);\n-    cbz(cnt1, SAME);\n@@ -5718,2 +5722,2 @@\n-    ldr(tmp3, Address(a1, base_offset));\n-    ldr(tmp4, Address(a2, base_offset));\n+    ldr(tmp3, Address(a1, start_offset));\n+    ldr(tmp4, Address(a2, start_offset));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"}]}