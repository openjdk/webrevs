{"files":[{"patch":"@@ -72,0 +72,5 @@\n+ *\n+ * From https:\/\/openlibm.org\/, \"The OpenLibm code derives from the\n+ * FreeBSD msun and OpenBSD libm implementations, which in turn derive\n+ * from FDLIBM 5.3.\" Java's StrictMath libraries use the FDLIBM 5.3\n+ * algorithms.\n@@ -137,1 +142,1 @@\n-            \/\/ Worst-case observed error for FDLIBM\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -183,1 +188,1 @@\n-            \/\/ Worst-case observed error for FDLIBM\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -194,1 +199,1 @@\n-            {+0x1.5556123e8a2bp-1,      -0x1.9f300810f7d7dp-2}, \/\/ check\n+            {+0x1.5556123e8a2bp-1,      -0x1.9f300810f7d7dp-2},  \/\/ check\n@@ -232,1 +237,1 @@\n-            \/\/ Worst-case observed error\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -234,0 +239,10 @@\n+            \/\/ Other worst-case observed errors\n+            {-0x1.f8b791cafcdefp+4,     -0x1.073ca87470df9p-3 },\n+            {-0x1.0e16eb809a35dp+944,   +0x1.b5e361ed01dacp-2},\n+            {-0x1.85e624577c23ep-1,     -0x1.614ac15b6df5bp-1}, \/\/ check\n+            {-0x1.842d8ec8f752fp+21,    -0x1.6ce864edeaffdp-1},\n+            {-0x1.07e4c92b5349dp+4,     +0x1.6a096375ffb23p-1}, \/\/ check\n+            {-0x1.13a5ccd87c9bbp+1008,  -0x1.27b3964185d8dp-1}, \/\/ check\n+            {-0x1.11b624b546894p+9,     -0x1.6a35f2416aba9p-1}, \/\/ check\n+            {-0x1.1c49ad613ff3bp+19,    -0x1.fffe203cfabe1p-2},\n+            {-0x1.f05e952d81b89p+5,     +0x1.6a2319a85a545p-1}, \/\/ check\n@@ -270,1 +285,1 @@\n-            \/\/ Worst-case observed error\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -272,0 +287,9 @@\n+            \/\/ Other worst-case observed errors\n+            {-0x1.0000045b2c904p-3,     -0x1.00abe5252746dp-3}, \/\/ check\n+            {+0x1.6c042a6378102p-1,     +0x1.94eda53f72c5ap-1}, \/\/ check\n+            {-0x1.00d44cccfa99p-1,      -0x1.0d0a6a0e79e15p-1}, \/\/ check\n+            {+0x1.eae75e3d82b6fp-2,     +0x1.fff7d74b1ea5p-2},  \/\/ check\n+            {-0x1.0239000439deep-1,     -0x1.0ea71ea2a7cd7p-1}, \/\/ check\n+            {+0x1.0479b37d95e5cp-1,     +0x1.1143fafdc5b2cp-1}, \/\/ check\n+            {-0x1.2ef2481799c7cp-1,     -0x1.442d10aa50906p-1}, \/\/ check\n+            {+0x1.df27e1c764802p-2,     +0x1.f2a0f0c96deefp-2}, \/\/ check\n@@ -309,1 +333,1 @@\n-            \/\/ Worst-case observed error\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -311,0 +335,10 @@\n+            \/\/ Other worst-case observed errors\n+            {-0x1.7120161c92674p+0,     +0x1.0741fb7683849p-3},\n+            {-0x1.d19ebc5567dcdp+311,   -0x1.b5d2f45f68958p-2},\n+            {+0x1.91e60af551108p-1,     +0x1.6a32aaa34b119p-1}, \/\/ check\n+            {-0x1.4ae182c1ab422p+21,    -0x1.6c9c3831b6e3bp-1},\n+            {-0x1.34e729fd08086p+21,    +0x1.6a6a0d6a17f0fp-1}, \/\/ check\n+            {+0x1.2f29eb4e99fa2p+7,     +0x1.6a0751dc5d2bbp-1}, \/\/ check\n+            {-0x1.9200634d4471fp-1,     +0x1.6a200b493230dp-1}, \/\/ check\n+            {+0x1.25133ca3904dfp+20,    -0x1.fb399cd6fe564p-3}, \/\/ check\n+            {+0x1.2a33ae49ab15dp+1,     -0x1.60524e89bbcb3p-1}, \/\/ check\n@@ -339,1 +373,1 @@\n-            \/\/ Worst-case observed error\n+            \/\/ Worst-case observed error for OpenLibm\n@@ -341,0 +375,9 @@\n+            \/\/ Other worst-case observed errors\n+            {+0x1.dffffb3488a4p-1,      0x1.6bf3a4a4f4dcbp-2}, \/\/ check\n+            {+0x1.6c05eb219ec46p-1,     0x1.8f4f472807261p-1}, \/\/ check\n+            {+0x1.35b03e336a82bp-1,     0x1.d7a84ec2f6707p-1}, \/\/ check\n+            {-0x1.8d313198a2e03p-53,    0x1.921fb54442d19p0},  \/\/ check\n+            {-0x1.010fd0ad6aa41p-1,     0x1.0c63a8cd23befp1},  \/\/ check\n+            {+0x1.251869c3f7881p-1,     0x1.ec2ff0c102684p-1}, \/\/ check\n+            {+0x1.266637a3d2bbcp-1,     0x1.ea98637533648p-1}, \/\/ check\n+            {-0x1.36b1482765f6dp-1,     0x1.1c8666ca1cab1p1},  \/\/ check\n@@ -374,2 +417,2 @@\n-            \/\/ Worst-case observed error for FDLIBM, outside of 1 ulp error\n-            \/\/ {0x1.3f9605aaeb51bp+21,     -0x1.9678ee5d64934p-1},\n+            \/\/ Worst-case observed error for OpenLibm, outside of 1 ulp error\n+            \/\/ {0x1.3f9605aaeb51bp+21,     -0x1.9678ee5d64934p-1}, \/\/ 1.02\n@@ -414,0 +457,10 @@\n+            \/\/ Other worst-case observed errors\n+            {+0x1.f9004c4fef9eap-4,  0x1.f67727f5618f2p-4},\n+            {-0x1.ffff8020d3d1dp-7, -0x1.fff4d5e4886c7p-7},\n+            {+0x1.0103fc4ebaaa8p+1,  0x1.1bd5c375c97b5p0},\n+            {+0x1.01e0be37af68fp+1,  0x1.1c2d45ec82765p0},\n+            {-0x1.60370d15396b7p-1, -0x1.348461c347fd9p-1},\n+            {+0x1.032b4811f3dc5p+0,  0x1.9545fd233ee14p-1},\n+            {+0x1.52184b1b9bd9bp+0,  0x1.d86de33c93814p-1},\n+            {-0x1.0684fa9fa7481p+0, -0x1.988f9da70b11ap-1},\n+\n","filename":"test\/jdk\/java\/lang\/Math\/WorstCaseTests.java","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -85,0 +85,5 @@\n+            \/\/ Cases observed to differ between FDLIBM and other implementations.\n+            {+0x1.2e8f20cf3cbe7p+8,                0x1.6a2a59cc78bf8p436},\n+            {-0x1.49f33ad2c1c58p+9,                0x1.f3ccc815431b6p-953},\n+            {+0x1.fce66609f7428p+5,                0x1.b59724cb0bc4cp91},\n+            {-0x1.49f33ad2c1c58p+9,                0x1.f3ccc815431b6p-953},\n","filename":"test\/jdk\/java\/lang\/StrictMath\/ExpTests.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -343,0 +343,5 @@\n+            \/\/ Empirical worst-case points in other libraries with\n+            \/\/ larger worst-case errors than FDLIBM\n+            {-0x1.633c654fee2bap+9,    -0x1.fdf25fc26e7cp1023},\n+            {-0x1.633cae1335f26p+9,    -0x1.ff149489e50a1p1023},\n+            { 0x1.9fcba01feb507p-2,     0x1.ab50d8e4d8c56p-2},\n@@ -384,0 +389,7 @@\n+            \/\/ Empirical worst-case points in other libraries with\n+            \/\/ larger worst-case errors than FDLIBM\n+            {-0x1.633c654fee2bap+9,     0x1.fdf25fc26e7cp1023},\n+            { 0x1.ff76fb3f476d5p+0,     0x1.e0976c8f0ebdfp1},\n+            { 0x1.633cc2ae1c934p+9,     0x1.ff66e0de4dc6fp1023},\n+            {-0x1.1ff088806d82ep+3,     0x1.f97ccb0aef314p11},\n+            {-0x1.628af341989dap+9,     0x1.fdf28623ef923p1021},\n@@ -453,0 +465,3 @@\n+            \/\/ Empirical worst-case points in other libraries with\n+            \/\/ larger worst-case errors than FDLIBM\n+            {-0x1.c41e527b70f43p-3,    -0x1.bcea047cc736cp-3},\n","filename":"test\/jdk\/java\/lang\/StrictMath\/HyperbolicTests.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,3 +59,3 @@\n-        failures += testAgainstTranslitAsin();\n-        failures += testAgainstTranslitAcos();\n-        failures += testAgainstTranslitAtan();\n+        failures += testAsin();\n+        failures += testAcos();\n+        failures += testAtan();\n@@ -116,1 +116,1 @@\n-    private static int testAgainstTranslitAsin() {\n+    private static int testAsin() {\n@@ -135,0 +135,12 @@\n+        \/\/ Empirical worst-case points in other libraries with larger\n+        \/\/ worst-case error than FDLIBM\n+        double [][] testCases = {\n+            {-0x1.00d44cccfa99p-1,  -0x1.0d0a6a0e79e15p-1},\n+            {-0x1.0239000439deep-1, -0x1.0ea71ea2a7cd7p-1},\n+            {+0x1.0479b37d95e5cp-1,  0x1.1143fafdc5b2cp-1},\n+            {-0x1.2ef2481799c7cp-1, -0x1.442d10aa50906p-1},\n+        };\n+        for (double[] testCase : testCases) {\n+            failures += testAsinCase(testCase[0], testCase[1]);\n+        }\n+\n@@ -141,1 +153,1 @@\n-    private static int testAgainstTranslitAcos() {\n+    private static int testAcos() {\n@@ -157,0 +169,13 @@\n+        \/\/ Empirical worst-case points in other libraries with larger\n+        \/\/ worst-case error than FDLIBM\n+        double [][] testCases = {\n+            {+0x1.35b03e336a82bp-1,  0x1.d7a84ec2f6707p-1},\n+            {-0x1.8d313198a2e03p-53, 0x1.921fb54442d19p0},\n+            {-0x1.010fd0ad6aa41p-1,  0x1.0c63a8cd23befp1},\n+            {+0x1.251869c3f7881p-1,  0x1.ec2ff0c102684p-1},\n+            {+0x1.266637a3d2bbcp-1,  0x1.ea98637533648p-1},\n+        };\n+        for (double[] testCase : testCases) {\n+            failures += testAcosCase(testCase[0], testCase[1]);\n+        }\n+\n@@ -163,1 +188,1 @@\n-    private static int testAgainstTranslitAtan() {\n+    private static int testAtan() {\n@@ -180,1 +205,15 @@\n-            failures += testRangeMidpoint(testPoint, Math.ulp(testPoint), 1000,  InverseTrigTest.ATAN);\n+            failures += testRangeMidpoint(testPoint, Math.ulp(testPoint), 1000, InverseTrigTest.ATAN);\n+        }\n+\n+        \/\/ Empirical worst-case points in other libraries with larger\n+        \/\/ worst-case error than FDLIBM\n+        double [][] testCases = {\n+            {+0x1.0103fc4ebaaa8p+1,  0x1.1bd5c375c97b5p0},\n+            {+0x1.01e0be37af68fp+1,  0x1.1c2d45ec82765p0},\n+            {-0x1.60370d15396b7p-1, -0x1.348461c347fd9p-1},\n+            {+0x1.032b4811f3dc5p+0,  0x1.9545fd233ee14p-1},\n+            {+0x1.52184b1b9bd9bp+0,  0x1.d86de33c93814p-1},\n+            {-0x1.0684fa9fa7481p+0, -0x1.988f9da70b11ap-1},\n+        };\n+        for (double[] testCase : testCases) {\n+            failures += testAtanCase(testCase[0], testCase[1]);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/InverseTrigTests.java","additions":47,"deletions":8,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,4 @@\n+            \/\/ Empirical worst-case points\n+            {0x1.0ffea3878db6bp+0,   0x1.f07a0cca521fp-5},\n+            {0x1.490af72a25a81p-1,  -0x1.c4bf7ae48f078p-2},\n+            {0x1.69e7aa6da2df5p-1,  -0x1.634508c9adfp-2},\n","filename":"test\/jdk\/java\/lang\/StrictMath\/LogTests.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,5 @@\n+            \/\/ Empirical worst-case points\n+            {-0x1.f8b791cafcdefp+4,  -0x1.073ca87470dfap-3},\n+            {-0x1.0e16eb809a35dp+944, 0x1.b5e361ed01dadp-2},\n+            {-0x1.842d8ec8f752fp+21, -0x1.6ce864edeaffep-1},\n+            {-0x1.1c49ad613ff3bp+19, -0x1.fffe203cfabe1p-2},\n@@ -268,1 +273,9 @@\n-            {0x1.00000000000ep1023, -0x1.d52c4ec04f108p-2}\n+            {0x1.00000000000ep1023, -0x1.d52c4ec04f108p-2},\n+            \/\/ Empirical worst-case points in other libraries with\n+            \/\/ larger worst-case errors than FDLIBM\n+            {+0x1.371a47b7e4eb2p+11,    0x1.9ded57c9ff46ap-1},\n+            {-0x1.a81d98fc58537p+6 ,    0x1.ffd83332326fdp-1},\n+            {-0x1.13a5ccd87c9bbp+1008, -0x1.6a3815320e5cfp-1},\n+            {-0x1.4d7c8b8320237p+11,   -0x1.9dec1f1b36ecdp-1},\n+            {+0x1.da7a85a88bbecp+11,    0x1.ff7ae7631230ep-1},\n+            {-0x1.66af736e8555p+18,    -0x1.fc3d1cb02536bp-1},\n","filename":"test\/jdk\/java\/lang\/StrictMath\/TrigTests.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}