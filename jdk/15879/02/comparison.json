{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,2 +91,2 @@\n-        if (d > 0.0)\n-            return Math.nextUp(d);\n+        if (d != 0.0)\n+            return (d > 0.0) ? Math.nextUp(d) : Math.nextDown(d);\n@@ -94,1 +94,1 @@\n-            return -Math.nextUp(-d);\n+            return Math.copySign(Double.MIN_VALUE, d);\n","filename":"test\/jdk\/java\/lang\/Math\/Tests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4900206\n+ * @bug 4900206 8316708\n@@ -35,3 +35,14 @@\n- * Use \"Table Maker's Dilemma\" results from Jean-Michel Muller and\n- * Vincent Lef&egrave;vre, to test the math library.  See\n- * http:\/\/perso.ens-lyon.fr\/jean-michel.muller\/TMD.html for original\n+ * This test containst two distinct kinds of worst-case inputs:\n+ *\n+ * 1) Exact numerical results that are nearly half-way between\n+ * representable numbers or very close to a representable\n+ * number. (Half-way caess are hardest for round to nearest even;\n+ * close to a representable number cases are hard for directed\n+ * roundings.)\n+ *\n+ * 2) Worst-case errors as observed emprically across different\n+ * implementations that are not correctly rounded.\n+ *\n+ * For the first categpory, the \"Table Maker's Dilemma\" results from\n+ * Jean-Michel Muller and Vincent Lef&egrave;vre, are used.\n+ * See http:\/\/perso.ens-lyon.fr\/jean-michel.muller\/TMD.html for original\n@@ -55,0 +66,6 @@\n+ *\n+ * For the second category, worst-case observed error inputs for the\n+ * FDLIBM-derived OpenLibm 0.8.1 and other math libraries are added\n+ * from \"Accuracy of Mathematical Functions in Single, Double, Double\n+ * Extended, and Quadruple Precision\" by Brian Gladman, Vincenzo\n+ * Innocente and Paul Zimmermann.\n@@ -80,0 +97,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -116,0 +136,11 @@\n+\n+            \/\/ Worst-case observed error for FDLIBM\n+            {+0x1.2e8f20cf3cbe7p+8,     0x1.6a2a59cc78bf7p436},\n+            \/\/ Other worst-case observed errors\n+            {-0x1.49f33ad2c1c58p+9,     0x1.f3ccc815431b5p-953},\n+            {+0x1.fce66609f7428p+5,     0x1.b59724cb0bc4cp91},\n+            {+0x1.b97dc8345c55p+5,      0x1.88ab482dafdd8p79},    \/\/ check\n+            {-0x1.18209ecd19a8cp+6,     0x1.f3dcee4c90dfap-102},  \/\/ check\n+            {-0x1.4133f4fd79c1cp-13,    0x1.ffebed256fadp-1},     \/\/ check\n+            {-0x1.74046dfefd9d1p+9,     0x0.0000000000001p-1022}, \/\/ check\n+            {-0x1.49f33ad2c1c58p+9,     0x1.f3ccc815431b5p-953},\n@@ -133,0 +164,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -148,0 +182,13 @@\n+\n+            \/\/ Worst-case observed error for FDLIBM\n+            {+0x1.48ae5a67204f5p+0,     0x1.ffd10abffc3fep-3},\n+            \/\/ Other worst-case observed errors\n+            {+0x1.1211bef8f68e9p+0,     +0x1.175caeca67f85p-4},  \/\/ check\n+            {+0x1.008000db2e8bep+0,     +0x1.ff83959f5cc1fp-10}, \/\/ check\n+            {+0x1.0ffea3878db6bp+0,     +0x1.f07a0cca521efp-5},\n+            {+0x1.dc0b586f2b26p-1,      -0x1.2a3eaaa6e8d73p-4},  \/\/ check\n+            {+0x1.490af72a25a81p-1,     -0x1.c4bf7ae48f078p-2},\n+            {+0x1.5b6e7e4e96f86p+2,     +0x1.b11240cba290ep0},   \/\/ check\n+            {+0x1.0ffc349469a2fp+0,     +0x1.f030c2507cd81p-5},  \/\/ check\n+            {+0x1.69e7aa6da2df5p-1,     -0x1.634508c9adfp-2},\n+            {+0x1.5556123e8a2bp-1,      -0x1.9f300810f7d7dp-2}, \/\/ check\n@@ -165,0 +212,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -181,0 +231,3 @@\n+\n+            \/\/ Worst-case observed error\n+            {+0x1.4d84db080b9fdp+21,    +0x1.6e21c4ff6aec3p-1},\n@@ -198,0 +251,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -213,0 +269,3 @@\n+\n+            \/\/ Worst-case observed error\n+            {-0x1.004d1c5a9400bp-1,    -0x1.0c6e322e8a28bp-1},\n@@ -230,0 +289,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -246,0 +308,3 @@\n+\n+            \/\/ Worst-case observed error\n+            {-0x1.34e729fd08086p+21,    +0x1.6a6a0d6a17f0fp-1},\n@@ -263,0 +328,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -270,0 +338,3 @@\n+\n+            \/\/ Worst-case observed error\n+            {-0x1.0068b067c6feep-1,     +0x1.0c335e2f0726fp1},\n@@ -287,0 +358,3 @@\n+    \/*\n+     * 1.25 ulp stated error bound\n+     *\/\n@@ -299,0 +373,3 @@\n+\n+            \/\/ Worst-case observed error for FDLIBM, outside of 1 ulp error\n+            \/\/ {0x1.3f9605aaeb51bp+21,     -0x1.9678ee5d64934p-1},\n@@ -316,0 +393,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n@@ -331,0 +411,3 @@\n+\n+            \/\/ Worst-case observed error\n+            {0x1.62ff6a1682c25p-1,      +0x1.3666b15c8756ap-1},\n@@ -348,0 +431,3 @@\n+    \/*\n+     * 1 ulp stated error bound\n+     *\/\n","filename":"test\/jdk\/java\/lang\/Math\/WorstCaseTests.java","additions":91,"deletions":5,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,3 @@\n+\n+            \/\/ FDLIBM exp(1.0) does *not* return Math.E\n+            {1.0,                                  Math.nextUp(Math.E)},\n","filename":"test\/jdk\/java\/lang\/StrictMath\/ExpTests.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}