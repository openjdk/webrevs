{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+    private boolean birthtime_available = true;\n@@ -166,1 +167,1 @@\n-        if (UnixNativeDispatcher.birthtimeSupported()) {\n+        if (UnixNativeDispatcher.birthtimeSupported() && birthtime_available) {\n@@ -169,1 +170,1 @@\n-            \/\/ return last modified when birth time not supported\n+            \/\/ return last modified when birth time unsupported or unavailable\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -186,0 +186,1 @@\n+static jfieldID attrs_birthtime_available;\n@@ -334,0 +335,3 @@\n+\n+    attrs_birthtime_available = (*env)->GetFieldID(env, clazz, \"birthtime_available\", \"Z\");\n+    CHECK_NULL_RETURN(attrs_birthtime_available, 0);\n@@ -623,13 +627,12 @@\n-    if ((buf->stx_mask & STATX_BTIME) != 0) {\n-        \/\/  Birth time was filled in so use it\n-        (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec,\n-                             (jlong)buf->stx_btime.tv_sec);\n-        (*env)->SetLongField(env, attrs, attrs_st_birthtime_nsec,\n-                             (jlong)buf->stx_btime.tv_nsec);\n-    } else {\n-        \/\/  Birth time was not filled in: fall back to last modification time\n-        (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec,\n-                             (jlong)buf->stx_mtime.tv_sec);\n-        (*env)->SetLongField(env, attrs, attrs_st_birthtime_nsec,\n-                             (jlong)buf->stx_mtime.tv_nsec);\n-    }\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)buf->stx_btime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_nsec, (jlong)buf->stx_btime.tv_nsec);\n+\n+    \/\/ Check mask for birth time and set flag accordingly. The birth time is\n+    \/\/ filled in if and only if the STATX_BTIME bit is set in the mask.\n+    \/\/ Although the statx system call might be supported by the operating\n+    \/\/ system, the birth time is not necessarily supported by the file system.\n+    jboolean birthtime_available = (buf->stx_mask & STATX_BTIME) != 0 ?\n+        JNI_TRUE : JNI_FALSE;\n+    (*env)->SetBooleanField(env, attrs, attrs_birthtime_available,\n+                            birthtime_available);\n+\n@@ -667,0 +670,5 @@\n+#if defined(__linux__)\n+    \/\/ stat(2) does not support birthtime so set the availability to false.\n+    (*env)->SetBooleanField(env, attrs, attrs_birthtime_available,\n+                            (jboolean)JNI_FALSE);\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"}]}