{"files":[{"patch":"@@ -50,0 +50,1 @@\n+static bool deprecated_usage[MAX_SIGNALS]; \/* usage of signal\/sigset *\/\n@@ -72,0 +73,1 @@\n+static bool warning_printed = false;\n@@ -92,0 +94,9 @@\n+static void print_deprecation_warning() {\n+  if (!warning_printed) {\n+    warning_printed = true;\n+    fprintf(stderr, HOTSPOT_VM_DISTRO \" VM warning: the use of signal() and sigset() \"\n+            \"for signal chaining was deprecated in version 16.0 and will \"\n+            \"be removed in a future release. Use sigaction() instead.\\n\");\n+  }\n+}\n+\n@@ -97,4 +108,0 @@\n-    \/\/ Deprecation warning first time through\n-    fprintf(stderr, HOTSPOT_VM_DISTRO \" VM warning: the use of signal() and sigset() \"\n-            \"for signal chaining was deprecated in version 16.0 and will \"\n-            \"be removed in a future release. Use sigaction() instead.\\n\");\n@@ -143,0 +150,2 @@\n+  deprecated_usage[sig] = true;\n+\n@@ -145,0 +154,1 @@\n+    print_deprecation_warning();\n@@ -253,0 +263,3 @@\n+    if (deprecated_usage[sig] == true) {\n+      print_deprecation_warning();\n+    }\n","filename":"src\/java.base\/unix\/native\/libjsig\/jsig.c","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+        String failureMessage = null;\n@@ -97,1 +98,2 @@\n-            for (String scenario : new String[] {\"nojvm\", \"prepre\", \"prepost\", \"postpre\", \"postpost\"}) {\n+            for (String scenario : new String[] {\"nojvm\", \"prepre\", \"prepost\", \"postpre#libjsig\", \"postpost#libjsig\",\n+                    \"nojvm#libjsig\", \"prepre#libjsig\", \"prepost#libjsig\", }) {\n@@ -99,1 +101,1 @@\n-                cmd.set(scenarioIdx, scenario);\n+                cmd.set(scenarioIdx, scenario.replace(\"#libjsig\", \"\"));\n@@ -108,6 +110,4 @@\n-                switch (scenario) {\n-                    case \"postpre\":\n-                    case \"postpost\": {\n-                        pb.environment().merge(\"LD_PRELOAD\", libjsig().toString(),\n-                                (x, y) -> y + File.pathSeparator + x);\n-                    }\n+                boolean useLibjsig = scenario.endsWith(\"#libjsig\");\n+                if (useLibjsig) {\n+                    pb.environment().merge(\"LD_PRELOAD\", libjsig().toString(),\n+                            (x, y) -> y + File.pathSeparator + x);\n@@ -121,1 +121,22 @@\n-                        System.out.println(\"PASSED with exit code 0\");\n+                        \/\/ Skip deprecation warning check on MacOSX (see JDK-8346381)\n+                        if (useLibjsig && !Platform.isOSX()) {\n+                            \/\/ verify that deprecation warning for sigset\/signal is printed\n+                            \/\/ only in the correct scenarios\n+                            boolean deprecatedSigFunctionUsed = mode.equals(\"sigset\");\n+                            boolean jvmInvolved = !scenario.contains(\"nojvm\");\n+                            boolean warningPrinted = oa.contains(\"VM warning\");\n+                            boolean sigUsedByJVM = sigIsUsedByJVM(signame);\n+                            if (deprecatedSigFunctionUsed && jvmInvolved && sigUsedByJVM) {\n+                                if (!warningPrinted) {\n+                                    failureMessage = \"FAILED Missing deprecation warning for mode \" + mode +\n+                                                     \", scenario: \"+ scenario + \", signal \" + signame;\n+                                    passed = false;\n+                                }\n+                            } else if (warningPrinted) {\n+                                failureMessage = \"FAILED Deprecation warning shouldn't be printed for mode \" + mode +\n+                                                 \", scenario: \"+ scenario + \", signal \" + signame;\n+                                passed = false;\n+                            }\n+                        } else {\n+                            System.out.println(\"PASSED with exit code 0\");\n+                        }\n@@ -123,1 +144,1 @@\n-                        System.out.println(\"FAILED with exit code \" + exitCode);\n+                        failureMessage = \"FAILED with exit code \" + exitCode;\n@@ -126,0 +147,3 @@\n+                    if (!passed) {\n+                        System.out.println(failureMessage);\n+                    }\n@@ -133,1 +157,1 @@\n-            throw new Error(\"test failed\");\n+            throw new Error(failureMessage != null ? failureMessage : \"test failed\");\n@@ -149,0 +173,23 @@\n+\n+    \/**\n+     * Return true for all signals used by the JVM. This only covers the\n+     * case where the JVM is started normally, and not with -Xrs.\n+     * See src\/hotspot\/os\/posix\/signals_posix.cpp\n+     * @param signame\n+     * @return true if signal is used by JVM, false otherwise\n+     *\/\n+    private static boolean sigIsUsedByJVM(String signame) {\n+        switch(signame) {\n+            case \"SIGSEGV\":\n+            case \"SIGPIPE\":\n+            case \"SIGBUS\":\n+            case \"SIGILL\":\n+            case \"SIGFPE\":\n+            case \"SIGXFSZ\":\n+                return true;\n+            case \"SIGTRAP\":\n+                return Platform.isPPC();\n+            default:\n+                return false;\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/signal\/SigTestDriver.java","additions":58,"deletions":11,"binary":false,"changes":69,"status":"modified"}]}