{"files":[{"patch":"@@ -1215,0 +1215,3 @@\n+#ifdef ASSERT\n+    const bool exact_trip_count = cl->has_exact_trip_count();\n+    const uint trip_count = cl->trip_count();\n@@ -1216,0 +1219,3 @@\n+    assert(exact_trip_count == cl->has_exact_trip_count() && trip_count == cl->trip_count(),\n+           \"should have computed trip count on Loop Predication entry\");\n+#endif\n@@ -1324,1 +1330,3 @@\n-  max_value = new CastIINode(max_value, loop->_head->as_CountedLoop()->phi()->bottom_type());\n+  const Type* type_iv = loop->_head->as_CountedLoop()->phi()->bottom_type();\n+  assert(!type_iv->is_int()->is_con(), \"constant indicates one loop iteration for which we bailed out earlier\");\n+  max_value = new CastIINode(max_value, type_iv);\n@@ -1353,2 +1361,10 @@\n-    \/\/ do nothing for iteration-splitted loops\n-    if (!cl->is_normal_loop()) return false;\n+    if (!cl->is_normal_loop()) {\n+      \/\/ Do nothing for iteration-splitted loops\n+      return false;\n+    }\n+    loop->compute_trip_count(this);\n+    if (cl->trip_count() == 1) {\n+      \/\/ Not worth to hoist checks out of a loop that is only run for one iteration since the checks are only going to\n+      \/\/ be executed once anyway.\n+      return false;\n+    }\n@@ -1357,1 +1373,1 @@\n-    if (bt != BoolTest::lt && bt != BoolTest::gt)\n+    if (bt != BoolTest::lt && bt != BoolTest::gt) {\n@@ -1359,0 +1375,1 @@\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8333252\n+ * @summary Test that no Template Assertion Predicate is created in Loop Prediction for one iteration loop.\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,*TestTemplateWithoutOpaqueLoopNodes::test\n+ *                   compiler.predicates.assertion.TestTemplateWithoutOpaqueLoopNodes\n+ *\/\n+package compiler.predicates.assertion;\n+\n+public class TestTemplateWithoutOpaqueLoopNodes {\n+    static long lFld;\n+    static long lArr[] = new long[10];\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int i16 = 1, i17, i19, i20 = 1, i22;\n+        for (i17 = 6; i17 < 7; i17++) {\n+            switch ((i16 >> 1) + 38) {\n+                case 38:\n+                    for (i19 = 1; i19 < 200000; i19++) {\n+                    }\n+                case 1:\n+                    for (i22 = 1; i22 < 2; i22 += 2) {\n+                        lArr[i22] = i20;\n+                    }\n+                    break;\n+                case 4:\n+                    lFld = 42;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/assertion\/TestTemplateWithoutOpaqueLoopNodes.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}