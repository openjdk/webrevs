{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.io.Serial;\n@@ -32,0 +33,1 @@\n+import java.util.function.Consumer;\n@@ -320,0 +322,4 @@\n+     * @throws RuntimeException if an exception is thrown while executing a custom cleanup action\n+     *                          associated with this arena (e.g. as a result of calling\n+     *                          {@link MemorySegment#reinterpret(long, Arena, Consumer)} or\n+     *                          {@link MemorySegment#reinterpret(Arena, Consumer)}).\n@@ -323,1 +329,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -257,0 +257,1 @@\n+            RuntimeException pendingException = null;\n@@ -259,1 +260,10 @@\n-                current.cleanup();\n+                try {\n+                    current.cleanup();\n+                } catch (RuntimeException ex) {\n+                    if (pendingException == null) {\n+                        pendingException = ex;\n+                    } else if (ex != pendingException) {\n+                        \/\/ note: self-suppression is not supported\n+                        pendingException.addSuppressed(ex);\n+                    }\n+                }\n@@ -262,0 +272,3 @@\n+            if (pendingException != null) {\n+                throw pendingException;\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.HashSet;\n@@ -38,0 +39,1 @@\n+import java.util.Set;\n@@ -384,0 +386,40 @@\n+    @Test\n+    void testThrowInCleanup() {\n+        AtomicInteger counter = new AtomicInteger();\n+        RuntimeException thrown = null;\n+        Set<String> expected = new HashSet<>();\n+        try (Arena arena = Arena.ofConfined()) {\n+            for (int i = 0 ; i < 10 ; i++) {\n+                String msg = \"exception#\" + i;\n+                expected.add(msg);\n+                MemorySegment.ofAddress(42).reinterpret(arena, seg -> {\n+                    throw new IllegalArgumentException(msg);\n+                });\n+            }\n+            for (int i = 10 ; i < 20 ; i++) {\n+                String msg = \"exception#\" + i;\n+                expected.add(msg);\n+                MemorySegment.ofAddress(42).reinterpret(100, arena, seg -> {\n+                    throw new IllegalArgumentException(msg);\n+                });\n+            }\n+            MemorySegment.ofAddress(42).reinterpret(arena, seg -> counter.incrementAndGet());\n+        } catch (RuntimeException ex) {\n+            thrown = ex;\n+        }\n+        assertNotNull(thrown);\n+        assertEquals(counter.get(), 1);\n+        assertEquals(thrown.getSuppressed().length, 19);\n+        Throwable[] errors = new IllegalArgumentException[20];\n+        assertTrue(thrown instanceof IllegalArgumentException);\n+        errors[0] = thrown;\n+        for (int i = 0 ; i < 19 ; i++) {\n+            assertTrue(thrown.getSuppressed()[i] instanceof IllegalArgumentException);\n+            errors[i + 1] = thrown.getSuppressed()[i];\n+        }\n+        for (Throwable t : errors) {\n+            assertTrue(expected.remove(t.getMessage()));\n+        }\n+        assertTrue(expected.isEmpty());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}