{"files":[{"patch":"@@ -723,1 +723,2 @@\n-     * cleanup action is {@link #byteSize()}.\n+     * cleanup action is {@link #byteSize()}. All exceptions thrown by the cleanup action are ignored,\n+     * and do not affect other cleanup actions associated with the provided arena.\n@@ -768,1 +769,2 @@\n-     * cleanup action is {@code newSize}.\n+     * cleanup action is {@code newSize}. All exceptions thrown by the cleanup action are ignored,\n+     * and do not affect other cleanup actions associated with the provided arena.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -280,1 +280,5 @@\n-                        cleanupAction.run();\n+                        try {\n+                            cleanupAction.run();\n+                        } catch (Throwable ex) {\n+                            \/\/ swallow\n+                        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -384,0 +384,11 @@\n+    @Test\n+    void testThrowInCleanup() {\n+        AtomicInteger counter = new AtomicInteger();\n+        try (Arena arena = Arena.ofConfined()){\n+            MemorySegment.ofAddress(42).reinterpret(arena, seg -> { throw new AssertionError(); });\n+            MemorySegment.ofAddress(42).reinterpret(100, arena, seg -> { throw new AssertionError(); });\n+            MemorySegment.ofAddress(42).reinterpret(arena, seg -> counter.incrementAndGet());\n+        } \/\/ no exception should occur here!\n+        assertEquals(counter.get(), 1);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}