{"files":[{"patch":"@@ -322,1 +322,1 @@\n-     * @throws CleanupException if an exception is thrown while executing a custom cleanup action\n+     * @throws RuntimeException if an exception is thrown while executing a custom cleanup action\n@@ -329,39 +329,0 @@\n-\n-    \/**\n-     * Thrown when an arena is {@linkplain Arena#close() closed explicitly} to indicate that an exception has occurred\n-     * while executing a custom cleanup action associated with the arena. Custom cleanup actions can be attached\n-     * to an arena when calling {@link MemorySegment#reinterpret(long, Arena, Consumer)} or\n-     * {@link MemorySegment#reinterpret(Arena, Consumer)}. If more than one cleanup action fails,\n-     * then this exception models the first failure whereas subsequent failures are\n-     * {@linkplain Throwable#addSuppressed(Throwable) suppressed}. The order in which cleanup actions\n-     * are executed is unspecified.\n-     *\n-     * @see MemorySegment#reinterpret(Arena, Consumer)\n-     * @see MemorySegment#reinterpret(long, Arena, Consumer)\n-     * @since 22\n-     *\/\n-    final class CleanupException extends RuntimeException {\n-        @Serial\n-        private static final long serialVersionUID = -403985082231157866L;\n-\n-        \/**\n-         * Constructs a {@code CleanupException} with the given detail message and cause.\n-         *\n-         * @param  message the detail message, can be null\n-         * @param  cause the cause, can be null\n-         *\/\n-        public CleanupException(String message, Throwable cause) {\n-            super(message, cause);\n-        }\n-\n-        \/**\n-         * Constructs a {@code CleanupException} with the given cause and a detail\n-         * message of {@code (cause==null ? null : cause.toString())} (which\n-         * typically contains the class and detail message of {@code cause}).\n-         *\n-         * @param  cause the cause, can be null\n-         *\/\n-        public CleanupException(Throwable cause) {\n-            super(cause);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -723,3 +723,1 @@\n-     * cleanup action is {@link #byteSize()}. If the provided arena is {@linkplain Arena#close() closed explicitly},\n-     * any exception thrown by the cleanup action is rethrown as a {@link Arena.CleanupException} when\n-     * the arena is closed.\n+     * cleanup action is {@link #byteSize()}.\n@@ -770,3 +768,1 @@\n-     * cleanup action is {@code newSize}. If the provided arena is {@linkplain Arena#close() closed explicitly},\n-     * any exception thrown by the cleanup action is rethrown as a {@link Arena.CleanupException} when\n-     * the arena is closed.\n+     * cleanup action is {@code newSize}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.foreign.Arena.CleanupException;\n@@ -258,1 +257,1 @@\n-            CleanupException pendingException = null;\n+            RuntimeException pendingException = null;\n@@ -263,1 +262,1 @@\n-                } catch (Throwable ex) {\n+                } catch (RuntimeException ex) {\n@@ -265,2 +264,3 @@\n-                        pendingException = new CleanupException(ex);\n-                    } else {\n+                        pendingException = ex;\n+                    } else if (ex != pendingException) {\n+                        \/\/ note: self-suppression is not supported\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.foreign.Arena.CleanupException;\n@@ -390,1 +389,1 @@\n-        CleanupException thrown = null;\n+        RuntimeException thrown = null;\n@@ -397,1 +396,1 @@\n-                    throw new AssertionError(msg);\n+                    throw new IllegalArgumentException(msg);\n@@ -404,1 +403,1 @@\n-                    throw new AssertionError(msg);\n+                    throw new IllegalArgumentException(msg);\n@@ -408,1 +407,1 @@\n-        } catch (CleanupException ex) {\n+        } catch (RuntimeException ex) {\n@@ -414,3 +413,3 @@\n-        Throwable[] errors = new AssertionError[20];\n-        assertTrue(thrown.getCause() instanceof AssertionError);\n-        errors[0] = thrown.getCause();\n+        Throwable[] errors = new IllegalArgumentException[20];\n+        assertTrue(thrown instanceof IllegalArgumentException);\n+        errors[0] = thrown;\n@@ -418,1 +417,1 @@\n-            assertTrue(thrown.getSuppressed()[i] instanceof AssertionError);\n+            assertTrue(thrown.getSuppressed()[i] instanceof IllegalArgumentException);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}