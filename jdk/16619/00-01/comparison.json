{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.io.Serial;\n@@ -32,0 +33,1 @@\n+import java.util.function.Consumer;\n@@ -320,0 +322,4 @@\n+     * @throws CleanupException if an exception is thrown while executing a custom cleanup action\n+     *                          associated with this arena (e.g. as a result of calling\n+     *                          {@link MemorySegment#reinterpret(long, Arena, Consumer)} or\n+     *                          {@link MemorySegment#reinterpret(Arena, Consumer)}).\n@@ -324,0 +330,38 @@\n+    \/**\n+     * Thrown when an arena is {@linkplain Arena#close() closed explicitly} to indicate that an exception has occurred\n+     * while executing a custom cleanup action associated with the arena. Custom cleanup actions can be attached\n+     * to an arena when calling {@link MemorySegment#reinterpret(long, Arena, Consumer)} or\n+     * {@link MemorySegment#reinterpret(Arena, Consumer)}. If more than one cleanup action fails,\n+     * then this exception models the first failure whereas subsequent failures are\n+     * {@linkplain Throwable#addSuppressed(Throwable) suppressed}. The order in which cleanup actions\n+     * are executed is unspecified.\n+     *\n+     * @see MemorySegment#reinterpret(Arena, Consumer)\n+     * @see MemorySegment#reinterpret(long, Arena, Consumer)\n+     * @since 22\n+     *\/\n+    final class CleanupException extends RuntimeException {\n+        @Serial\n+        private static final long serialVersionUID = -403985082231157866L;\n+\n+        \/**\n+         * Constructs a {@code CleanupException} with the given detail message and cause.\n+         *\n+         * @param  message the detail message, can be null\n+         * @param  cause the cause, can be null\n+         *\/\n+        public CleanupException(String message, Throwable cause) {\n+            super(message, cause);\n+        }\n+\n+        \/**\n+         * Constructs a {@code CleanupException} with the given cause and a detail\n+         * message of {@code (cause==null ? null : cause.toString())} (which\n+         * typically contains the class and detail message of {@code cause}).\n+         *\n+         * @param  cause the cause, can be null\n+         *\/\n+        public CleanupException(Throwable cause) {\n+            super(cause);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -723,2 +723,3 @@\n-     * cleanup action is {@link #byteSize()}. All exceptions thrown by the cleanup action are ignored,\n-     * and do not affect other cleanup actions associated with the provided arena.\n+     * cleanup action is {@link #byteSize()}. If the provided arena is {@linkplain Arena#close() closed explicitly},\n+     * any exception thrown by the cleanup action is rethrown as a {@link Arena.CleanupException} when\n+     * the arena is closed.\n@@ -769,2 +770,3 @@\n-     * cleanup action is {@code newSize}. All exceptions thrown by the cleanup action are ignored,\n-     * and do not affect other cleanup actions associated with the provided arena.\n+     * cleanup action is {@code newSize}. If the provided arena is {@linkplain Arena#close() closed explicitly},\n+     * any exception thrown by the cleanup action is rethrown as a {@link Arena.CleanupException} when\n+     * the arena is closed.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena.CleanupException;\n@@ -257,0 +258,1 @@\n+            CleanupException pendingException = null;\n@@ -259,1 +261,9 @@\n-                current.cleanup();\n+                try {\n+                    current.cleanup();\n+                } catch (Throwable ex) {\n+                    if (pendingException == null) {\n+                        pendingException = new CleanupException(ex);\n+                    } else {\n+                        pendingException.addSuppressed(ex);\n+                    }\n+                }\n@@ -262,0 +272,3 @@\n+            if (pendingException != null) {\n+                throw pendingException;\n+            }\n@@ -280,5 +293,1 @@\n-                        try {\n-                            cleanupAction.run();\n-                        } catch (Throwable ex) {\n-                            \/\/ swallow\n-                        }\n+                        cleanupAction.run();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.foreign.Arena.CleanupException;\n@@ -37,0 +38,1 @@\n+import java.util.HashSet;\n@@ -38,0 +40,1 @@\n+import java.util.Set;\n@@ -387,3 +390,17 @@\n-        try (Arena arena = Arena.ofConfined()){\n-            MemorySegment.ofAddress(42).reinterpret(arena, seg -> { throw new AssertionError(); });\n-            MemorySegment.ofAddress(42).reinterpret(100, arena, seg -> { throw new AssertionError(); });\n+        CleanupException thrown = null;\n+        Set<String> expected = new HashSet<>();\n+        try (Arena arena = Arena.ofConfined()) {\n+            for (int i = 0 ; i < 10 ; i++) {\n+                String msg = \"exception#\" + i;\n+                expected.add(msg);\n+                MemorySegment.ofAddress(42).reinterpret(arena, seg -> {\n+                    throw new AssertionError(msg);\n+                });\n+            }\n+            for (int i = 10 ; i < 20 ; i++) {\n+                String msg = \"exception#\" + i;\n+                expected.add(msg);\n+                MemorySegment.ofAddress(42).reinterpret(100, arena, seg -> {\n+                    throw new AssertionError(msg);\n+                });\n+            }\n@@ -391,1 +408,4 @@\n-        } \/\/ no exception should occur here!\n+        } catch (CleanupException ex) {\n+            thrown = ex;\n+        }\n+        assertNotNull(thrown);\n@@ -393,0 +413,12 @@\n+        assertEquals(thrown.getSuppressed().length, 19);\n+        Throwable[] errors = new AssertionError[20];\n+        assertTrue(thrown.getCause() instanceof AssertionError);\n+        errors[0] = thrown.getCause();\n+        for (int i = 0 ; i < 19 ; i++) {\n+            assertTrue(thrown.getSuppressed()[i] instanceof AssertionError);\n+            errors[i + 1] = thrown.getSuppressed()[i];\n+        }\n+        for (Throwable t : errors) {\n+            assertTrue(expected.remove(t.getMessage()));\n+        }\n+        assertTrue(expected.isEmpty());\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"}]}