{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,1 +190,7 @@\n-  void do_NewInstance    (NewInstance*     x) { \/* nothing to do *\/ }\n+  void do_NewInstance    (NewInstance*     x) {\n+    ciInstanceKlass* c = x->klass();\n+    if (c != nullptr && !c->is_initialized() &&\n+        (!c->is_loaded() || c->has_class_initializer()) {\n+      kill_memory();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -552,0 +552,5 @@\n+bool ciInstanceKlass::has_class_initializer() {\n+  VM_ENTRY_MARK;\n+  return get_instanceKlass()->class_initializer() != nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -234,0 +234,2 @@\n+  bool has_class_initializer();\n+\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that C1 respects that static initializers can have memory side effects.\n+ * @bug 8357782\n+ * @requires vm.compiler1.enabled\n+ * @comment Since static initializers only execute in the first execution of the class initializer, we need -Xcomp.\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -XX:CompileCommand=compileonly,compiler\/c1\/A$B.test compiler.c1.TestStaticInitializerSideEffect\n+ *\/\n+\n+package compiler.c1;\n+\n+public class TestStaticInitializerSideEffect {\n+    public static void main(String[] args) {\n+        A.B.test();\n+    }\n+}\n+\n+class A {\n+    static class B {\n+        static String field;\n+\n+        static void test() {\n+            \/\/ This unused variable triggers local value numbering to remove\n+            \/\/ the field load in the constructor below if it is not killed\n+            \/\/ before.\n+            String tmp = field;\n+            \/\/ The class initializer of C should kill the LVN effect of tmp due\n+            \/\/ to the memory side effects of the static initializer.\n+            new C(field);\n+        }\n+    }\n+\n+    static class C {\n+        \/\/ When executing the class initializer, this has a side effect.\n+        static {\n+            B.field = \"Hello\";\n+        }\n+\n+        C(String val) {\n+            \/\/ If C1 does not respect that side effect, we crash here.\n+            if (val == null) {\n+                throw new RuntimeException(\"Should not reach here\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestStaticInitializerSideEffect.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}