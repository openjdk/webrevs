{"files":[{"patch":"@@ -1017,3 +1017,1 @@\n-      if (ik->is_linked()) {\n-        ik->constants()->add_dumped_interned_strings();\n-      }\n+      ik->constants()->add_dumped_interned_strings();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#include \"oops\/fieldStreams.inline.hpp\"\n@@ -64,0 +65,1 @@\n+#include \"runtime\/fieldDescriptor.inline.hpp\"\n@@ -406,8 +408,20 @@\n-  objArrayOop rr = resolved_references();\n-  if (rr != nullptr) {\n-    int rr_len = rr->length();\n-    for (int i = 0; i < rr_len; i++) {\n-      oop p = rr->obj_at(i);\n-      if (java_lang_String::is_instance(p) &&\n-          !ArchiveHeapWriter::is_string_too_large_to_archive(p)) {\n-        HeapShared::add_to_dumped_interned_strings(p);\n+  InstanceKlass* ik = pool_holder();\n+  if (!ik->is_linked()) {\n+    \/\/ resolved_references() doesn't exist yet, so we have no resolved CONSTANT_String entries. However,\n+    \/\/ Some static final fields may have default values that were initialized when the class was parsed.\n+    \/\/ We need to enter those into the CDS archived strings table.\n+    for (JavaFieldStream fs(ik); !fs.done(); fs.next()) {\n+      if (fs.access_flags().is_static()) {\n+        fieldDescriptor& fd = fs.field_descriptor();\n+        if (fd.field_type() == T_OBJECT) {\n+          int offset = fd.offset();\n+          check_and_add_dumped_interned_string(ik->java_mirror()->obj_field(offset));\n+        }\n+      }\n+    }\n+  } else {\n+    objArrayOop rr = resolved_references();\n+    if (rr != nullptr) {\n+      int rr_len = rr->length();\n+      for (int i = 0; i < rr_len; i++) {\n+        check_and_add_dumped_interned_string(rr->obj_at(i));\n@@ -418,0 +432,8 @@\n+\n+void ConstantPool::check_and_add_dumped_interned_string(oop obj) {\n+  if (obj != nullptr && java_lang_String::is_instance(obj) &&\n+      !ArchiveHeapWriter::is_string_too_large_to_archive(obj)) {\n+    HeapShared::add_to_dumped_interned_strings(obj);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+  static void check_and_add_dumped_interned_string(oop obj);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+\n+class OldClassWithStaticString {\n+    static final String s = \"xxxx123yyyy456\";\n+    static final String t = \"OldClassWithStaticString\";\n+}\n+\n+*\/\n+\n+public super class OldClassWithStaticString\n+    version 49:0\n+{\n+    public static final Field s:\"Ljava\/lang\/String;\" = String \"xxxx123yyyy456\";\n+    public static final Field t:\"Ljava\/lang\/String;\" = String \"OldClassWithStaticString\";\n+\n+    Method \"<init>\":\"()V\"\n+        stack 1 locals 1\n+    {\n+        aload_0;\n+        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/OldClassWithStaticString.jasm","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8344904\n+ * @summary make sure all interned strings in old classes are archived.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @build OldClassWithStaticString\n+ * @build StaticStringInOldClass\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller\n+ *                 -jar StaticStringInOldClass.jar StaticStringInOldClass StaticStringInOldClassApp OldClassWithStaticString\n+ * @run driver StaticStringInOldClass\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class StaticStringInOldClass {\n+    static final String appClass = StaticStringInOldClassApp.class.getName();\n+    static String[] classes = {\n+        appClass,\n+        OldClassWithStaticString.class.getName(),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"StaticStringInOldClass.jar\");\n+        OutputAnalyzer output;\n+        output = TestCommon.testDump(appJar, TestCommon.list(classes));\n+        output = TestCommon.exec(appJar, appClass);\n+        TestCommon.checkExec(output, \"Hello\");\n+    }\n+}\n+\n+class StaticStringInOldClassApp {\n+    static String a = \"xxxx123\";\n+    public static void main(String args[]) throws Exception {\n+        System.out.println(\"Hello\");\n+        String x = (a + \"yyyy456\").intern();\n+        Class c = OldClassWithStaticString.class;\n+        Field f = c.getField(\"s\");\n+        String y = (String)(f.get(null));\n+        if (x != y) {\n+            throw new RuntimeException(\"Interned strings not equal: \" +\n+                                       \"\\\"\" + x + \"\\\" @ \" + System.identityHashCode(x) + \" vs \" +\n+                                       \"\\\"\" + y + \"\\\" @ \" + System.identityHashCode(y));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/StaticStringInOldClass.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}