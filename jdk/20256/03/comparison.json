{"files":[{"patch":"@@ -874,0 +874,1 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_JDK_LIBS_libVThreadEventTest := java.base:libjvm\n@@ -1512,0 +1513,1 @@\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_JDK_LIBS_libVThreadEventTest := java.base:libjvm\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -851,0 +851,6 @@\n+            if (currentLookAndFeel.name.contains(\"GTK\")) {\n+                this.setPreferredSize(new Dimension(PREFERRED_WIDTH + 260, PREFERRED_HEIGHT + 80));\n+            } else {\n+                this.setPreferredSize(new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT));\n+            }\n+\n@@ -852,0 +858,1 @@\n+            frame.pack();\n","filename":"src\/demo\/share\/jfc\/SwingSet2\/SwingSet2.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2748,4 +2748,1 @@\n-      \/* If we get an out-of-range offset it is a bug in the compiler,\n-         so we assert here. *\/\n-      assert(Address::offset_ok_for_immed(disp, exact_log2(size_in_memory)), \"c2 compiler bug\");\n-      \/* Fix up any out-of-range offsets. *\/\n+      \/\/ Fix up any out-of-range offsets.\n@@ -3351,1 +3348,5 @@\n-      __ prfm(Address(base, disp), PSTL1KEEP);\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch1, base);\n+      Address addr = Address(base, disp);\n+      addr = __ legitimize_address(addr, 8, rscratch1);\n+      __ prfm(addr, PSTL1KEEP);\n@@ -4232,1 +4233,1 @@\n-operand immLoffset()\n+operand immLOffset()\n@@ -4234,1 +4235,1 @@\n-  predicate(Address::offset_ok_for_immed(n->get_long(), 0));\n+  predicate(n->get_long() >= -256 && n->get_long() <= 65520);\n@@ -5344,0 +5345,28 @@\n+operand indirectX2P(iRegL reg)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(CastX2P reg);\n+  op_cost(0);\n+  format %{ \"[$reg]\\t# long -> ptr\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp(0x0);\n+  %}\n+%}\n+\n+operand indOffX2P(iRegL reg, immLOffset off)\n+%{\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP (CastX2P reg) off);\n+  op_cost(0);\n+  format %{ \"[$reg, $off]\\t# long -> ptr\" %}\n+  interface(MEMORY_INTER) %{\n+    base($reg);\n+    index(0xffffffff);\n+    scale(0x0);\n+    disp($off);\n+  %}\n+%}\n+\n@@ -5434,1 +5463,1 @@\n-operand indOffLN(iRegN reg, immLoffset off)\n+operand indOffLN(iRegN reg, immLOffset off)\n@@ -5667,0 +5696,11 @@\n+operand iRegL2P(iRegL reg) %{\n+\n+  op_cost(0);\n+\n+  match(CastX2P reg);\n+\n+  format %{ \"l2p($reg)\" %}\n+\n+  interface(REG_INTER)\n+%}\n+\n@@ -5683,1 +5723,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indirectX2P, indOffX2P);\n@@ -5686,1 +5726,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indirectX2P, indOffX2P);\n@@ -5689,1 +5729,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n@@ -5692,1 +5732,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+                indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n@@ -5697,1 +5737,1 @@\n-               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN);\n+               indirectN, indIndexScaledN, indIndexScaledI2LN, indIndexI2LN, indIndexN, indOffIN, indOffLN, indirectX2P, indOffX2P);\n@@ -5714,0 +5754,1 @@\n+opclass iRegPorL2P(iRegP, iRegL2P);\n@@ -9814,1 +9855,1 @@\n-instruct addP_reg_reg(iRegPNoSp dst, iRegP src1, iRegL src2) %{\n+instruct addP_reg_reg(iRegPNoSp dst, iRegPorL2P src1, iRegL src2) %{\n@@ -9829,1 +9870,1 @@\n-instruct addP_reg_reg_ext(iRegPNoSp dst, iRegP src1, iRegIorL2I src2) %{\n+instruct addP_reg_reg_ext(iRegPNoSp dst, iRegPorL2P src1, iRegIorL2I src2) %{\n@@ -9844,1 +9885,1 @@\n-instruct addP_reg_reg_lsl(iRegPNoSp dst, iRegP src1, iRegL src2, immIScale scale) %{\n+instruct addP_reg_reg_lsl(iRegPNoSp dst, iRegPorL2P src1, iRegL src2, immIScale scale) %{\n@@ -9859,1 +9900,1 @@\n-instruct addP_reg_reg_ext_shift(iRegPNoSp dst, iRegP src1, iRegIorL2I src2, immIScale scale) %{\n+instruct addP_reg_reg_ext_shift(iRegPNoSp dst, iRegPorL2P src1, iRegIorL2I src2, immIScale scale) %{\n@@ -9892,1 +9933,1 @@\n-instruct addP_reg_imm(iRegPNoSp dst, iRegP src1, immLAddSub src2) %{\n+instruct addP_reg_imm(iRegPNoSp dst, iRegPorL2P src1, immLAddSub src2) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":59,"deletions":18,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, rscratch2);\n-\n@@ -105,4 +103,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -303,8 +303,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, rscratch1, true, false);\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -401,2 +393,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,3 +63,0 @@\n-\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,7 @@\n-    const Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    if (ref_addr.getMode() == Address::base_plus_offset) {\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch1, as_Register($mem$$base));\n+      assert_different_registers(rscratch1, $dst$$Register);\n+      ref_addr = __ legitimize_address(ref_addr, 8, rscratch1);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,7 @@\n-    const Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    Address ref_addr = mem2address($mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+    if (ref_addr.getMode() == Address::base_plus_offset) {\n+      \/\/ Fix up any out-of-range offsets.\n+      assert_different_registers(rscratch2, as_Register($mem$$base));\n+      assert_different_registers(rscratch2, $dst$$Register);\n+      ref_addr = __ legitimize_address(ref_addr, 8, rscratch2);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n- protected:\n-\n@@ -115,2 +113,0 @@\n-  \/\/ Helpers for runtime call arguments\/results\n-\n@@ -184,1 +180,1 @@\n-\/\/ Load float value from 'address'. The value is loaded onto the FPU register v0.\n+  \/\/ Load float value from 'address'. The value is loaded onto the FPU register v0.\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-  if (ShenandoahIUBarrier) {\n-    ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), new_val, tmp1, tmp2,\n-                                                  MacroAssembler::PRESERVATION_FRAME_LR_GP_FP_REGS);\n-  }\n-\n@@ -125,4 +120,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,14 +64,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler *masm,\n-                                               Register val,\n-                                               Register tmp1, Register tmp2,\n-                                               MacroAssembler::PreservationLevel preservation_level,\n-                                               DecoratorSet decorators) {\n-  \/\/ IU barriers are also employed to avoid resurrection of weak references,\n-  \/\/ even if Shenandoah does not operate in incremental update mode.\n-  if (ShenandoahIUBarrier || ShenandoahSATBBarrier) {\n-    __ block_comment(\"iu_barrier (shenandoahgc) {\");\n-    satb_write_barrier_impl(masm, decorators, noreg, noreg, val, tmp1, tmp2, preservation_level);\n-    __ block_comment(\"} iu_barrier (shenandoahgc)\");\n-  }\n-}\n-\n@@ -113,1 +99,1 @@\n-  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahIUBarrier && !ShenandoahLoadRefBarrier) {\n+  if ((!ShenandoahSATBBarrier || dest_uninitialized) && !ShenandoahLoadRefBarrier) {\n@@ -585,1 +571,5 @@\n-    iu_barrier(masm, dst, tmp1, tmp2, preservation_level);\n+    if (ShenandoahSATBBarrier) {\n+      __ block_comment(\"keep_alive_barrier (shenandoahgc) {\");\n+      satb_write_barrier_impl(masm, 0, noreg, noreg, dst, tmp1, tmp2, preservation_level);\n+      __ block_comment(\"} keep_alive_barrier (shenandoahgc)\");\n+    }\n@@ -600,4 +590,0 @@\n-\n-    if (ShenandoahIUBarrier && val != noreg) {\n-      iu_barrier(masm, val, tmp1, tmp2, preservation_level, decorators);\n-    }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -85,5 +85,0 @@\n-  void iu_barrier(MacroAssembler* masm,\n-                        Register val,\n-                        Register tmp1, Register tmp2,\n-                        MacroAssembler::PreservationLevel preservation_level, DecoratorSet decorators = 0);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, t1);\n-\n@@ -97,4 +95,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_riscv.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -311,10 +311,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    __ push_call_clobbered_registers();\n-\n-    satb_write_barrier_pre(masm, noreg, dst, xthread, tmp, t0, true, false);\n-\n-    __ pop_call_clobbered_registers();\n-  }\n-}\n-\n@@ -423,2 +413,1 @@\n-    iu_barrier(masm, val, tmp1);\n-    \/\/ G1 barrier needs uncompressed oop for region cross check.\n+    \/\/ Barrier needs uncompressed oop for region cross check.\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,2 +66,0 @@\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -255,1 +255,3 @@\n-  if (UseRVV) {\n+  if (UseRVV && MaxVectorSize >= 32) {\n+    \/\/ performance tests on hardwares (MaxVectorSize == 16, 32) show that\n+    \/\/ it brings regression when MaxVectorSize == 16.\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-  \/\/ Apply IU barrier to newval.\n-  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, tmp1);\n-\n@@ -104,4 +101,0 @@\n-  if (access.is_oop()) {\n-    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahLoadRefBarrier) {\n@@ -475,34 +475,0 @@\n-void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahIUBarrier) {\n-    iu_barrier_impl(masm, dst, tmp);\n-  }\n-}\n-\n-void ShenandoahBarrierSetAssembler::iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp) {\n-  assert(ShenandoahIUBarrier, \"should be enabled\");\n-\n-  if (dst == noreg) return;\n-\n-  if (ShenandoahIUBarrier) {\n-    save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-\n-#ifdef _LP64\n-    Register thread = r15_thread;\n-#else\n-    Register thread = rcx;\n-    if (thread == dst || thread == tmp) {\n-      thread = rdi;\n-    }\n-    if (thread == dst || thread == tmp) {\n-      thread = rbx;\n-    }\n-    __ get_thread(thread);\n-#endif\n-    assert_different_registers(dst, tmp, thread);\n-\n-    satb_write_barrier_pre(masm, noreg, dst, thread, tmp, true, false);\n-\n-    restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n-  }\n-}\n-\n@@ -629,6 +595,1 @@\n-    if (val == noreg) {\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n-    } else {\n-      iu_barrier(masm, val, tmp3);\n-      BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n-    }\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp1, 0), val, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":2,"deletions":41,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-  void iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp);\n-\n@@ -62,1 +60,0 @@\n-  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -138,0 +138,2 @@\n+  }\n+  if (_overflow_arena != nullptr) {\n@@ -139,1 +141,1 @@\n-    delete cb->_overflow_arena;\n+    delete _overflow_arena;\n@@ -141,1 +143,0 @@\n-\n@@ -976,2 +977,0 @@\n-  _overflow_arena = cb->_overflow_arena;\n-  cb->_overflow_arena = nullptr;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+  unsigned int _flags;                           \/\/ Flag bits\n@@ -288,1 +289,0 @@\n-  unsigned int _flags;                           \/\/ Flag bits\n@@ -406,0 +406,1 @@\n+  , _flags(0)\n@@ -410,1 +411,0 @@\n-  , _flags(0)\n@@ -1521,0 +1521,1 @@\n+  ArgsNonNullState _nonnull_state;\n@@ -1523,1 +1524,0 @@\n-  ArgsNonNullState _nonnull_state;\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -299,1 +299,0 @@\n-  , _fast_check(fast_check)\n@@ -306,0 +305,1 @@\n+  , _fast_check(fast_check)\n@@ -326,1 +326,0 @@\n-  , _fast_check(false)\n@@ -333,0 +332,1 @@\n+  , _fast_check(false)\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -531,1 +531,0 @@\n-  Scale     _scale;\n@@ -533,0 +532,1 @@\n+  Scale     _scale;\n@@ -539,1 +539,0 @@\n-     , _scale(times_1)\n@@ -541,0 +540,1 @@\n+     , _scale(times_1)\n@@ -546,1 +546,0 @@\n-     , _scale(times_1)\n@@ -548,0 +547,1 @@\n+     , _scale(times_1)\n@@ -553,1 +553,0 @@\n-     , _scale(times_1)\n@@ -555,0 +554,1 @@\n+     , _scale(times_1)\n@@ -560,1 +560,0 @@\n-     , _scale(times_1)\n@@ -562,0 +561,1 @@\n+     , _scale(times_1)\n@@ -567,1 +567,0 @@\n-     , _scale(scale)\n@@ -569,0 +568,1 @@\n+     , _scale(scale)\n@@ -1547,1 +1547,0 @@\n-  bool          _fast_check;\n@@ -1554,0 +1553,1 @@\n+  bool          _fast_check;\n@@ -1596,1 +1596,0 @@\n-  BasicType _type;\n@@ -1603,0 +1602,1 @@\n+  BasicType _type;\n@@ -1612,1 +1612,0 @@\n-    , _type(type)\n@@ -1618,1 +1617,2 @@\n-    , _condition(condition) {\n+    , _condition(condition)\n+    , _type(type) {\n@@ -1627,1 +1627,0 @@\n-    , _type(type)\n@@ -1633,1 +1632,2 @@\n-    , _condition(condition) {\n+    , _condition(condition)\n+    , _type(type) {\n@@ -1644,1 +1644,0 @@\n-    , _type(type)\n@@ -1650,1 +1649,2 @@\n-    , _condition(lir_cond_unknown) {\n+    , _condition(lir_cond_unknown)\n+    , _type(type) {\n@@ -1660,1 +1660,0 @@\n-    , _type(T_ILLEGAL)\n@@ -1666,1 +1665,2 @@\n-    , _condition(lir_cond_unknown) {\n+    , _condition(lir_cond_unknown)\n+    , _type(T_ILLEGAL)    {\n@@ -1751,1 +1751,0 @@\n-  BasicType _type;\n@@ -1753,0 +1752,1 @@\n+  BasicType _type;\n@@ -1764,1 +1764,0 @@\n-    , _type(type)\n@@ -1766,0 +1765,1 @@\n+    , _type(type)\n@@ -1814,1 +1814,0 @@\n-  BasicType _type;\n@@ -1821,0 +1820,1 @@\n+  BasicType _type;\n@@ -1830,1 +1830,0 @@\n-    , _type(type)\n@@ -1836,1 +1835,2 @@\n-    , _condition(condition) {\n+    , _condition(condition)\n+    , _type(type) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2299,1 +2299,1 @@\n-  const u1* code_start = 0;\n+  const u1* code_start = nullptr;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -873,1 +873,1 @@\n-  address code_start = 0;\n+  address code_start = nullptr;\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-JavaAssertions::OptionList*     JavaAssertions::_classes = 0;\n-JavaAssertions::OptionList*     JavaAssertions::_packages = 0;\n+JavaAssertions::OptionList*     JavaAssertions::_classes = nullptr;\n+JavaAssertions::OptionList*     JavaAssertions::_packages = nullptr;\n@@ -46,1 +46,1 @@\n-  assert(name != 0, \"need a name\");\n+  assert(name != nullptr, \"need a name\");\n@@ -54,1 +54,1 @@\n-  for (rc = 0; p != 0; p = p->next(), ++rc) \/* empty *\/;\n+  for (rc = 0; p != nullptr; p = p->next(), ++rc) \/* empty *\/;\n@@ -59,1 +59,1 @@\n-  assert(name != 0, \"must have a name\");\n+  assert(name != nullptr, \"must have a name\");\n@@ -138,1 +138,1 @@\n-  for (index = len - 1; p != 0; p = p->next(), --index) {\n+  for (index = len - 1; p != nullptr; p = p->next(), --index) {\n@@ -150,1 +150,1 @@\n-  for (OptionList* p = _classes; p != 0; p = p->next()) {\n+  for (OptionList* p = _classes; p != nullptr; p = p->next()) {\n@@ -155,1 +155,1 @@\n-  return 0;\n+  return nullptr;\n@@ -163,1 +163,1 @@\n-  if (_packages == 0) return 0;\n+  if (_packages == nullptr) return nullptr;\n@@ -173,1 +173,1 @@\n-    for (OptionList* p = _packages; p != 0; p = p->next()) {\n+    for (OptionList* p = _packages; p != nullptr; p = p->next()) {\n@@ -184,1 +184,1 @@\n-  return 0;\n+  return nullptr;\n@@ -196,1 +196,1 @@\n-  assert(classname != 0, \"must have a classname\");\n+  assert(classname != nullptr, \"must have a classname\");\n","filename":"src\/hotspot\/share\/classfile\/javaAssertions.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-      DEBUG_ONLY(static void* last = 0);\n+      DEBUG_ONLY(static void* last = nullptr);\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1791,1 +1791,1 @@\n-void CodeCache::write_perf_map(const char* filename) {\n+void CodeCache::write_perf_map(const char* filename, outputStream* st) {\n@@ -1804,1 +1804,1 @@\n-    log_warning(codecache)(\"Failed to create %s for perf map\", filename);\n+    st->print_cr(\"Warning: Failed to create %s for perf map\", filename);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-  LINUX_ONLY(static void write_perf_map(const char* filename = nullptr);)\n+  LINUX_ONLY(static void write_perf_map(const char* filename, outputStream* st);) \/\/ Prints warnings and error messages to outputStream\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -640,0 +640,4 @@\n+  tty->print_cr(\"The 'exclude' command excludes methods from top-level compilations as well as\");\n+  tty->print_cr(\"from inlining, whereas the 'compileonly' command only excludes methods from\");\n+  tty->print_cr(\"top-level compilations (i.e. they can still be inlined into other compilation units).\");\n+  tty->cr();\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,8 +186,0 @@\n-LIR_Opr ShenandoahBarrierSetC1::iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators) {\n-  if (ShenandoahIUBarrier) {\n-    obj = ensure_in_register(gen, obj, T_OBJECT);\n-    pre_barrier(gen, info, decorators, LIR_OprFact::illegalOpr, obj);\n-  }\n-  return obj;\n-}\n-\n@@ -199,1 +191,0 @@\n-    value = iu_barrier(access.gen(), value, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -203,1 +203,0 @@\n-  LIR_Opr iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,19 +51,1 @@\n-  : _iu_barriers(new (comp_arena) GrowableArray<ShenandoahIUBarrierNode*>(comp_arena, 8,  0, nullptr)),\n-    _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n-}\n-\n-int ShenandoahBarrierSetC2State::iu_barriers_count() const {\n-  return _iu_barriers->length();\n-}\n-\n-ShenandoahIUBarrierNode* ShenandoahBarrierSetC2State::iu_barrier(int idx) const {\n-  return _iu_barriers->at(idx);\n-}\n-\n-void ShenandoahBarrierSetC2State::add_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  assert(!_iu_barriers->contains(n), \"duplicate entry in barrier list\");\n-  _iu_barriers->append(n);\n-}\n-\n-void ShenandoahBarrierSetC2State::remove_iu_barrier(ShenandoahIUBarrierNode* n) {\n-  _iu_barriers->remove_if_existing(n);\n+  : _load_reference_barriers(new (comp_arena) GrowableArray<ShenandoahLoadReferenceBarrierNode*>(comp_arena, 8,  0, nullptr)) {\n@@ -91,7 +73,0 @@\n-Node* ShenandoahBarrierSetC2::shenandoah_iu_barrier(GraphKit* kit, Node* obj) const {\n-  if (ShenandoahIUBarrier) {\n-    return kit->gvn().transform(new ShenandoahIUBarrierNode(obj));\n-  }\n-  return obj;\n-}\n-\n@@ -511,3 +486,0 @@\n-    Node* value = val.node();\n-    value = shenandoah_iu_barrier(kit, value);\n-    val.set_node(value);\n@@ -516,10 +488,0 @@\n-  } else {\n-    assert(access.is_opt_access(), \"only for optimization passes\");\n-    assert(((decorators & C2_TIGHTLY_COUPLED_ALLOC) != 0 || !ShenandoahSATBBarrier) && (decorators & C2_ARRAY_COPY) != 0, \"unexpected caller of this code\");\n-    C2OptAccess& opt_access = static_cast<C2OptAccess&>(access);\n-    PhaseGVN& gvn =  opt_access.gvn();\n-\n-    if (ShenandoahIUBarrier) {\n-      Node* enqueue = gvn.transform(new ShenandoahIUBarrierNode(val.node()));\n-      val.set_node(enqueue);\n-    }\n@@ -601,1 +563,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -649,1 +610,0 @@\n-    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -702,3 +662,0 @@\n-  if (access.is_oop()) {\n-    val = shenandoah_iu_barrier(kit, val);\n-  }\n@@ -722,1 +679,1 @@\n-  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier || node->Opcode() == Op_ShenandoahIUBarrier) return true;\n+  if (node->Opcode() == Op_ShenandoahLoadReferenceBarrier) return true;\n@@ -743,3 +700,0 @@\n-  if (c->Opcode() == Op_ShenandoahIUBarrier) {\n-    c = c->in(1);\n-  }\n@@ -778,3 +732,0 @@\n-  if (phase == Optimization) {\n-    return !ShenandoahIUBarrier;\n-  }\n@@ -839,5 +790,1 @@\n-    int flags = ShenandoahHeap::HAS_FORWARDED;\n-    if (ShenandoahIUBarrier) {\n-      flags |= ShenandoahHeap::MARKING;\n-    }\n-    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(flags)));\n+    Node* stable_and  = phase->transform_later(new AndINode(gc_state, phase->igvn().intcon(ShenandoahHeap::HAS_FORWARDED)));\n@@ -892,3 +839,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->add_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -901,3 +845,0 @@\n-  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n-    state()->remove_iu_barrier((ShenandoahIUBarrierNode*) node);\n-  }\n@@ -951,6 +892,1 @@\n-  for (int i = state()->iu_barriers_count() - 1; i >= 0; i--) {\n-    ShenandoahIUBarrierNode* n = state()->iu_barrier(i);\n-    if (!useful.member(n)) {\n-      state()->remove_iu_barrier(n);\n-    }\n-  }\n+\n@@ -1193,3 +1129,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), delayed_worklist);\n-      break;\n@@ -1219,3 +1152,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      conn_graph->add_local_var_and_edge(n, PointsToNode::NoEscape, n->in(1), nullptr);\n-      return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":4,"deletions":74,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  GrowableArray<ShenandoahIUBarrierNode*>* _iu_barriers;\n@@ -40,5 +39,0 @@\n-  int iu_barriers_count() const;\n-  ShenandoahIUBarrierNode* iu_barrier(int idx) const;\n-  void add_iu_barrier(ShenandoahIUBarrierNode* n);\n-  void remove_iu_barrier(ShenandoahIUBarrierNode * n);\n-\n@@ -76,2 +70,0 @@\n-  Node* shenandoah_iu_barrier(GraphKit* kit, Node* obj) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-  if ((state->iu_barriers_count() +\n-       state->load_reference_barriers_count()) > 0) {\n+  if (state->load_reference_barriers_count() > 0) {\n@@ -189,10 +188,1 @@\n-          uint i = 0;\n-          for (; i < phis.size(); i++) {\n-            Node* n = phis.node_at(i);\n-            if (n->Opcode() == Op_ShenandoahIUBarrier) {\n-              break;\n-            }\n-          }\n-          if (i == phis.size()) {\n-            return false;\n-          }\n+          return false;\n@@ -202,9 +192,0 @@\n-      } else if (in->Opcode() == Op_ShenandoahIUBarrier) {\n-        if (t != ShenandoahOopStore) {\n-          in = in->in(1);\n-          continue;\n-        }\n-        if (trace) {tty->print(\"Found enqueue barrier\"); in->dump();}\n-        phis.push(in, in->req());\n-        in = in->in(1);\n-        continue;\n@@ -329,1 +310,1 @@\n-        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahValue, trace, barriers_used)) {\n@@ -371,1 +352,1 @@\n-          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahValue, trace, barriers_used)) {\n@@ -535,1 +516,1 @@\n-    } else if (n->Opcode() == Op_ShenandoahIUBarrier || n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n+    } else if (n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n@@ -1116,14 +1097,0 @@\n-  for (int i = 0; i < state->iu_barriers_count(); i++) {\n-    Node* barrier = state->iu_barrier(i);\n-    Node* ctrl = phase->get_ctrl(barrier);\n-    IdealLoopTree* loop = phase->get_loop(ctrl);\n-    Node* head = loop->head();\n-    if (head->is_OuterStripMinedLoop()) {\n-      \/\/ Expanding a barrier here will break loop strip mining\n-      \/\/ verification. Transform the loop so the loop nest doesn't\n-      \/\/ appear as strip mined.\n-      OuterStripMinedLoopNode* outer = head->as_OuterStripMinedLoop();\n-      hide_strip_mined_loop(outer, outer->unique_ctrl_out()->as_CountedLoop(), phase);\n-    }\n-  }\n-\n@@ -1462,151 +1429,0 @@\n-\n-  for (int i = state->iu_barriers_count() - 1; i >= 0; i--) {\n-    Node* barrier = state->iu_barrier(i);\n-    Node* pre_val = barrier->in(1);\n-\n-    if (phase->igvn().type(pre_val)->higher_equal(TypePtr::NULL_PTR)) {\n-      ShouldNotReachHere();\n-      continue;\n-    }\n-\n-    Node* ctrl = phase->get_ctrl(barrier);\n-\n-    if (ctrl->is_Proj() && ctrl->in(0)->is_CallJava()) {\n-      assert(is_dominator(phase->get_ctrl(pre_val), ctrl->in(0)->in(0), pre_val, ctrl->in(0), phase), \"can't move\");\n-      ctrl = ctrl->in(0)->in(0);\n-      phase->set_ctrl(barrier, ctrl);\n-    } else if (ctrl->is_CallRuntime()) {\n-      assert(is_dominator(phase->get_ctrl(pre_val), ctrl->in(0), pre_val, ctrl, phase), \"can't move\");\n-      ctrl = ctrl->in(0);\n-      phase->set_ctrl(barrier, ctrl);\n-    }\n-\n-    Node* init_ctrl = ctrl;\n-    IdealLoopTree* loop = phase->get_loop(ctrl);\n-    Node* raw_mem = fixer.find_mem(ctrl, barrier);\n-    Node* init_raw_mem = raw_mem;\n-    Node* raw_mem_for_ctrl = fixer.find_mem(ctrl, nullptr);\n-    Node* heap_stable_ctrl = nullptr;\n-    Node* null_ctrl = nullptr;\n-    uint last = phase->C->unique();\n-\n-    enum { _heap_stable = 1, _heap_unstable, PATH_LIMIT };\n-    Node* region = new RegionNode(PATH_LIMIT);\n-    Node* phi = PhiNode::make(region, raw_mem, Type::MEMORY, TypeRawPtr::BOTTOM);\n-\n-    enum { _fast_path = 1, _slow_path, _null_path, PATH_LIMIT2 };\n-    Node* region2 = new RegionNode(PATH_LIMIT2);\n-    Node* phi2 = PhiNode::make(region2, raw_mem, Type::MEMORY, TypeRawPtr::BOTTOM);\n-\n-    \/\/ Stable path.\n-    test_gc_state(ctrl, raw_mem, heap_stable_ctrl, phase, ShenandoahHeap::MARKING);\n-    region->init_req(_heap_stable, heap_stable_ctrl);\n-    phi->init_req(_heap_stable, raw_mem);\n-\n-    \/\/ Null path\n-    Node* reg2_ctrl = nullptr;\n-    test_null(ctrl, pre_val, null_ctrl, phase);\n-    if (null_ctrl != nullptr) {\n-      reg2_ctrl = null_ctrl->in(0);\n-      region2->init_req(_null_path, null_ctrl);\n-      phi2->init_req(_null_path, raw_mem);\n-    } else {\n-      region2->del_req(_null_path);\n-      phi2->del_req(_null_path);\n-    }\n-\n-    const int index_offset = in_bytes(ShenandoahThreadLocalData::satb_mark_queue_index_offset());\n-    const int buffer_offset = in_bytes(ShenandoahThreadLocalData::satb_mark_queue_buffer_offset());\n-    Node* thread = new ThreadLocalNode();\n-    phase->register_new_node(thread, ctrl);\n-    Node* buffer_adr = new AddPNode(phase->C->top(), thread, phase->igvn().MakeConX(buffer_offset));\n-    phase->register_new_node(buffer_adr, ctrl);\n-    Node* index_adr = new AddPNode(phase->C->top(), thread, phase->igvn().MakeConX(index_offset));\n-    phase->register_new_node(index_adr, ctrl);\n-\n-    BasicType index_bt = TypeX_X->basic_type();\n-    assert(sizeof(size_t) == type2aelembytes(index_bt), \"Loading Shenandoah SATBMarkQueue::_index with wrong size.\");\n-    const TypePtr* adr_type = TypeRawPtr::BOTTOM;\n-    Node* index = new LoadXNode(ctrl, raw_mem, index_adr, adr_type, TypeX_X, MemNode::unordered);\n-    phase->register_new_node(index, ctrl);\n-    Node* index_cmp = new CmpXNode(index, phase->igvn().MakeConX(0));\n-    phase->register_new_node(index_cmp, ctrl);\n-    Node* index_test = new BoolNode(index_cmp, BoolTest::ne);\n-    phase->register_new_node(index_test, ctrl);\n-    IfNode* queue_full_iff = new IfNode(ctrl, index_test, PROB_LIKELY(0.999), COUNT_UNKNOWN);\n-    if (reg2_ctrl == nullptr) reg2_ctrl = queue_full_iff;\n-    phase->register_control(queue_full_iff, loop, ctrl);\n-    Node* not_full = new IfTrueNode(queue_full_iff);\n-    phase->register_control(not_full, loop, queue_full_iff);\n-    Node* full = new IfFalseNode(queue_full_iff);\n-    phase->register_control(full, loop, queue_full_iff);\n-\n-    ctrl = not_full;\n-\n-    Node* next_index = new SubXNode(index, phase->igvn().MakeConX(sizeof(intptr_t)));\n-    phase->register_new_node(next_index, ctrl);\n-\n-    Node* buffer  = new LoadPNode(ctrl, raw_mem, buffer_adr, adr_type, TypeRawPtr::NOTNULL, MemNode::unordered);\n-    phase->register_new_node(buffer, ctrl);\n-    Node *log_addr = new AddPNode(phase->C->top(), buffer, next_index);\n-    phase->register_new_node(log_addr, ctrl);\n-    Node* log_store = new StorePNode(ctrl, raw_mem, log_addr, adr_type, pre_val, MemNode::unordered);\n-    phase->register_new_node(log_store, ctrl);\n-    \/\/ update the index\n-    Node* index_update = new StoreXNode(ctrl, log_store, index_adr, adr_type, next_index, MemNode::unordered);\n-    phase->register_new_node(index_update, ctrl);\n-\n-    \/\/ Fast-path case\n-    region2->init_req(_fast_path, ctrl);\n-    phi2->init_req(_fast_path, index_update);\n-\n-    ctrl = full;\n-\n-    Node* base = find_bottom_mem(ctrl, phase);\n-\n-    MergeMemNode* mm = MergeMemNode::make(base);\n-    mm->set_memory_at(Compile::AliasIdxRaw, raw_mem);\n-    phase->register_new_node(mm, ctrl);\n-\n-    Node* call = new CallLeafNode(ShenandoahBarrierSetC2::write_ref_field_pre_entry_Type(), CAST_FROM_FN_PTR(address, ShenandoahRuntime::write_ref_field_pre_entry), \"shenandoah_wb_pre\", TypeRawPtr::BOTTOM);\n-    call->init_req(TypeFunc::Control, ctrl);\n-    call->init_req(TypeFunc::I_O, phase->C->top());\n-    call->init_req(TypeFunc::Memory, mm);\n-    call->init_req(TypeFunc::FramePtr, phase->C->top());\n-    call->init_req(TypeFunc::ReturnAdr, phase->C->top());\n-    call->init_req(TypeFunc::Parms, pre_val);\n-    call->init_req(TypeFunc::Parms+1, thread);\n-    phase->register_control(call, loop, ctrl);\n-\n-    Node* ctrl_proj = new ProjNode(call, TypeFunc::Control);\n-    phase->register_control(ctrl_proj, loop, call);\n-    Node* mem_proj = new ProjNode(call, TypeFunc::Memory);\n-    phase->register_new_node(mem_proj, call);\n-\n-    \/\/ Slow-path case\n-    region2->init_req(_slow_path, ctrl_proj);\n-    phi2->init_req(_slow_path, mem_proj);\n-\n-    phase->register_control(region2, loop, reg2_ctrl);\n-    phase->register_new_node(phi2, region2);\n-\n-    region->init_req(_heap_unstable, region2);\n-    phi->init_req(_heap_unstable, phi2);\n-\n-    phase->register_control(region, loop, heap_stable_ctrl->in(0));\n-    phase->register_new_node(phi, region);\n-\n-    fix_ctrl(barrier, region, fixer, uses, uses_to_ignore, last, phase);\n-    for(uint next = 0; next < uses.size(); next++ ) {\n-      Node *n = uses.at(next);\n-      assert(phase->get_ctrl(n) == init_ctrl, \"bad control\");\n-      assert(n != init_raw_mem, \"should leave input raw mem above the barrier\");\n-      phase->set_ctrl(n, region);\n-      follow_barrier_uses(n, init_ctrl, uses, phase);\n-    }\n-    fixer.fix_mem(init_ctrl, region, init_raw_mem, raw_mem_for_ctrl, phi, uses);\n-\n-    phase->igvn().replace_node(barrier, pre_val);\n-  }\n-  assert(state->iu_barriers_count() == 0, \"all enqueue barrier nodes should have been replaced\");\n-\n@@ -1665,2 +1481,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      return get_load_addr(phase, visited, in->in(1));\n@@ -1914,120 +1728,0 @@\n-ShenandoahIUBarrierNode::ShenandoahIUBarrierNode(Node* val) : Node(nullptr, val) {\n-  ShenandoahBarrierSetC2::bsc2()->state()->add_iu_barrier(this);\n-}\n-\n-const Type* ShenandoahIUBarrierNode::bottom_type() const {\n-  if (in(1) == nullptr || in(1)->is_top()) {\n-    return Type::TOP;\n-  }\n-  const Type* t = in(1)->bottom_type();\n-  if (t == TypePtr::NULL_PTR) {\n-    return t;\n-  }\n-  return t->is_oopptr();\n-}\n-\n-const Type* ShenandoahIUBarrierNode::Value(PhaseGVN* phase) const {\n-  if (in(1) == nullptr) {\n-    return Type::TOP;\n-  }\n-  const Type* t = phase->type(in(1));\n-  if (t == Type::TOP) {\n-    return Type::TOP;\n-  }\n-  if (t == TypePtr::NULL_PTR) {\n-    return t;\n-  }\n-  return t->is_oopptr();\n-}\n-\n-int ShenandoahIUBarrierNode::needed(Node* n) {\n-  if (n == nullptr ||\n-      n->is_Allocate() ||\n-      n->Opcode() == Op_ShenandoahIUBarrier ||\n-      n->bottom_type() == TypePtr::NULL_PTR ||\n-      (n->bottom_type()->make_oopptr() != nullptr && n->bottom_type()->make_oopptr()->const_oop() != nullptr)) {\n-    return NotNeeded;\n-  }\n-  if (n->is_Phi() ||\n-      n->is_CMove()) {\n-    return MaybeNeeded;\n-  }\n-  return Needed;\n-}\n-\n-Node* ShenandoahIUBarrierNode::next(Node* n) {\n-  for (;;) {\n-    if (n == nullptr) {\n-      return n;\n-    } else if (n->bottom_type() == TypePtr::NULL_PTR) {\n-      return n;\n-    } else if (n->bottom_type()->make_oopptr() != nullptr && n->bottom_type()->make_oopptr()->const_oop() != nullptr) {\n-      return n;\n-    } else if (n->is_ConstraintCast() ||\n-               n->Opcode() == Op_DecodeN ||\n-               n->Opcode() == Op_EncodeP) {\n-      n = n->in(1);\n-    } else if (n->is_Proj()) {\n-      n = n->in(0);\n-    } else {\n-      return n;\n-    }\n-  }\n-  ShouldNotReachHere();\n-  return nullptr;\n-}\n-\n-Node* ShenandoahIUBarrierNode::Identity(PhaseGVN* phase) {\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n-\n-  Node* n = next(in(1));\n-\n-  int cont = needed(n);\n-\n-  if (cont == NotNeeded) {\n-    return in(1);\n-  } else if (cont == MaybeNeeded) {\n-    if (igvn == nullptr) {\n-      phase->record_for_igvn(this);\n-      return this;\n-    } else {\n-      ResourceMark rm;\n-      Unique_Node_List wq;\n-      uint wq_i = 0;\n-\n-      for (;;) {\n-        if (n->is_Phi()) {\n-          for (uint i = 1; i < n->req(); i++) {\n-            Node* m = n->in(i);\n-            if (m != nullptr) {\n-              wq.push(m);\n-            }\n-          }\n-        } else {\n-          assert(n->is_CMove(), \"nothing else here\");\n-          Node* m = n->in(CMoveNode::IfFalse);\n-          wq.push(m);\n-          m = n->in(CMoveNode::IfTrue);\n-          wq.push(m);\n-        }\n-        Node* orig_n = nullptr;\n-        do {\n-          if (wq_i >= wq.size()) {\n-            return in(1);\n-          }\n-          n = wq.at(wq_i);\n-          wq_i++;\n-          orig_n = n;\n-          n = next(n);\n-          cont = needed(n);\n-          if (cont == Needed) {\n-            return this;\n-          }\n-        } while (cont != MaybeNeeded || (orig_n != n && wq.member(n)));\n-      }\n-    }\n-  }\n-\n-  return this;\n-}\n-\n@@ -3017,2 +2711,0 @@\n-    case Op_ShenandoahIUBarrier:\n-      return needs_barrier_impl(phase, n->in(1), visited);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":5,"deletions":313,"binary":false,"changes":318,"status":"modified"},{"patch":"@@ -90,17 +90,0 @@\n-class ShenandoahIUBarrierNode : public Node {\n-public:\n-  ShenandoahIUBarrierNode(Node* val);\n-\n-  const Type *bottom_type() const;\n-  const Type* Value(PhaseGVN* phase) const;\n-  Node* Identity(PhaseGVN* phase);\n-\n-  int Opcode() const;\n-\n-private:\n-  enum { Needed, NotNeeded, MaybeNeeded };\n-\n-  static int needed(Node* n);\n-  static Node* next(Node* n);\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-  if (avg_cycle_time > allocation_headroom \/ avg_alloc_rate) {\n+  if (avg_cycle_time * avg_alloc_rate > allocation_headroom) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp\"\n-#include \"gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp\"\n-#include \"gc\/shenandoah\/mode\/shenandoahIUMode.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"logging\/log.hpp\"\n-#include \"logging\/logTag.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n-#include \"runtime\/java.hpp\"\n-\n-void ShenandoahIUMode::initialize_flags() const {\n-  if (FLAG_IS_CMDLINE(ClassUnloadingWithConcurrentMark) && ClassUnloading) {\n-    log_warning(gc)(\"Shenandoah I-U mode sets -XX:-ClassUnloadingWithConcurrentMark; see JDK-8261341 for details\");\n-  }\n-  FLAG_SET_DEFAULT(ClassUnloadingWithConcurrentMark, false);\n-\n-  if (ClassUnloading) {\n-    FLAG_SET_DEFAULT(VerifyBeforeExit, false);\n-  }\n-\n-  if (FLAG_IS_DEFAULT(ShenandoahIUBarrier)) {\n-    FLAG_SET_DEFAULT(ShenandoahIUBarrier, true);\n-  }\n-  if (FLAG_IS_DEFAULT(ShenandoahSATBBarrier)) {\n-    FLAG_SET_DEFAULT(ShenandoahSATBBarrier, false);\n-  }\n-\n-  SHENANDOAH_ERGO_ENABLE_FLAG(ExplicitGCInvokesConcurrent);\n-  SHENANDOAH_ERGO_ENABLE_FLAG(ShenandoahImplicitGCInvokesConcurrent);\n-\n-  \/\/ Final configuration checks\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahLoadRefBarrier);\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahSATBBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahIUBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahCASBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahCloneBarrier);\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahStackWatermarkBarrier);\n-}\n-\n-ShenandoahHeuristics* ShenandoahIUMode::initialize_heuristics() const {\n-  if (ShenandoahGCHeuristics == nullptr) {\n-    vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option (null)\");\n-  }\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-  if (strcmp(ShenandoahGCHeuristics, \"aggressive\") == 0) {\n-    return new ShenandoahAggressiveHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"static\") == 0) {\n-    return new ShenandoahStaticHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"adaptive\") == 0) {\n-    return new ShenandoahAdaptiveHeuristics(heap);\n-  } else if (strcmp(ShenandoahGCHeuristics, \"compact\") == 0) {\n-    return new ShenandoahCompactHeuristics(heap);\n-  }\n-  vm_exit_during_initialization(\"Unknown -XX:ShenandoahGCHeuristics option\");\n-  return nullptr;\n-}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n-#define SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n-\n-#include \"gc\/shenandoah\/mode\/shenandoahMode.hpp\"\n-\n-class ShenandoahHeuristics;\n-\n-class ShenandoahIUMode : public ShenandoahMode {\n-public:\n-  virtual void initialize_flags() const;\n-  virtual ShenandoahHeuristics* initialize_heuristics() const;\n-\n-  virtual const char* name()     { return \"Incremental-Update (IU)\"; }\n-  virtual bool is_diagnostic()   { return false; }\n-  virtual bool is_experimental() { return true; }\n-};\n-\n-#endif \/\/ SHARE_GC_SHENANDOAH_MODE_SHENANDOAHIUMODE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.hpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -50,1 +50,0 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  FLAG_SET_DEFAULT(ShenandoahIUBarrier,              false);\n@@ -145,1 +144,0 @@\n-           !FLAG_IS_DEFAULT(ShenandoahIUBarrier)              ||\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  if (_heap->has_forwarded_objects() || (ShenandoahIUBarrier && _heap->is_concurrent_mark_in_progress())) {\n+  if (_heap->has_forwarded_objects()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-  inline void iu_barrier(oop obj);\n@@ -123,1 +122,0 @@\n-  inline void clone_marking(oop src);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,6 +167,0 @@\n-inline void ShenandoahBarrierSet::iu_barrier(oop obj) {\n-  if (ShenandoahIUBarrier && obj != nullptr && _heap->is_concurrent_mark_in_progress()) {\n-    enqueue(obj);\n-  }\n-}\n-\n@@ -192,1 +186,0 @@\n-  iu_barrier(new_value);\n@@ -210,1 +203,0 @@\n-  iu_barrier(new_value);\n@@ -248,1 +240,0 @@\n-  bs->iu_barrier(value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,9 +77,0 @@\n-void ShenandoahBarrierSet::clone_marking(oop obj) {\n-  assert(_heap->is_concurrent_mark_in_progress(), \"only during marking\");\n-  assert(ShenandoahIUBarrier, \"only with incremental-update\");\n-  if (!_heap->marking_context()->allocated_after_mark_start(obj)) {\n-    ShenandoahUpdateRefsForOopClosure<\/* has_fwd = *\/ false, \/* evac = *\/ false, \/* enqueue *\/ true> cl;\n-    obj->oop_iterate(&cl);\n-  }\n-}\n-\n@@ -108,3 +99,1 @@\n-  if ((gc_state & ShenandoahHeap::MARKING) != 0) {\n-    clone_marking(obj);\n-  } else if ((gc_state & ShenandoahHeap::EVACUATION) != 0) {\n+  if ((gc_state & ShenandoahHeap::EVACUATION) != 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetClone.inline.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -106,5 +106,0 @@\n-    _iterator.nmethods_do_begin();\n-  }\n-\n-  ~ShenandoahDisarmNMethodsTask() {\n-    _iterator.nmethods_do_end();\n@@ -178,7 +173,1 @@\n-    _iterator(ShenandoahCodeRoots::table()) {\n-    _iterator.nmethods_do_begin();\n-  }\n-\n-  ~ShenandoahUnlinkTask() {\n-    _iterator.nmethods_do_end();\n-  }\n+    _iterator(ShenandoahCodeRoots::table()) {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -770,5 +770,1 @@\n-    _phase(phase) {\n-    if (ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_begin();\n-    }\n-  }\n+    _phase(phase) {}\n@@ -777,3 +773,0 @@\n-    if (ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_end();\n-    }\n@@ -881,11 +874,1 @@\n-    _nmethod_itr(ShenandoahCodeRoots::table()) {\n-    if (!ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_begin();\n-    }\n-  }\n-\n-  ~ShenandoahConcurrentRootsEvacUpdateTask() {\n-    if (!ShenandoahHeap::heap()->unload_classes()) {\n-      _nmethod_itr.nmethods_do_end();\n-    }\n-  }\n+    _nmethod_itr(ShenandoahCodeRoots::table()) {}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-  OopClosure* const _cl;\n@@ -77,3 +76,2 @@\n-  ShenandoahSATBAndRemarkThreadsClosure(SATBMarkQueueSet& satb_qset, OopClosure* cl) :\n-    _satb_qset(satb_qset),\n-    _cl(cl)  {}\n+  explicit ShenandoahSATBAndRemarkThreadsClosure(SATBMarkQueueSet& satb_qset) :\n+    _satb_qset(satb_qset) {}\n@@ -81,1 +79,1 @@\n-  void do_thread(Thread* thread) {\n+  void do_thread(Thread* thread) override {\n@@ -84,6 +82,0 @@\n-    if (thread->is_Java_thread()) {\n-      if (_cl != nullptr) {\n-        ResourceMark rm;\n-        thread->oops_do(_cl, nullptr);\n-      }\n-    }\n@@ -121,3 +113,1 @@\n-      ShenandoahMarkRefsClosure<GENERATION> mark_cl(q, rp);\n-      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set,\n-                                               ShenandoahIUBarrier ? &mark_cl : nullptr);\n+      ShenandoahSATBAndRemarkThreadsClosure tc(satb_mq_set);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1354,1 +1354,0 @@\n-  int count = 0;\n@@ -1364,1 +1363,0 @@\n-    count++;\n@@ -1368,1 +1366,1 @@\n-  if (count > 0) {\n+  if (linear > 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-#include \"gc\/shenandoah\/mode\/shenandoahIUMode.hpp\"\n@@ -449,2 +448,0 @@\n-    } else if (strcmp(ShenandoahGCMode, \"iu\") == 0) {\n-      _gc_mode = new ShenandoahIUMode();\n@@ -1181,2 +1178,0 @@\n-  ContinuationGCSupport::relativize_stack_chunk(copy_val);\n-\n@@ -1186,0 +1181,1 @@\n+    ContinuationGCSupport::relativize_stack_chunk(copy_val);\n@@ -1697,0 +1693,1 @@\n+  size_t const _stride;\n@@ -1703,1 +1700,1 @@\n-  ShenandoahParallelHeapRegionTask(ShenandoahHeapRegionClosure* blk) :\n+  ShenandoahParallelHeapRegionTask(ShenandoahHeapRegionClosure* blk, size_t stride) :\n@@ -1705,1 +1702,1 @@\n-          _heap(ShenandoahHeap::heap()), _blk(blk), _index(0) {}\n+          _heap(ShenandoahHeap::heap()), _blk(blk), _stride(stride), _index(0) {}\n@@ -1709,1 +1706,1 @@\n-    size_t stride = ShenandoahParallelRegionStride;\n+    size_t stride = _stride;\n@@ -1728,2 +1725,14 @@\n-  if (num_regions() > ShenandoahParallelRegionStride) {\n-    ShenandoahParallelHeapRegionTask task(blk);\n+  const uint active_workers = workers()->active_workers();\n+  const size_t n_regions = num_regions();\n+  size_t stride = ShenandoahParallelRegionStride;\n+  if (stride == 0 && active_workers > 1) {\n+    \/\/ Automatically derive the stride to balance the work between threads\n+    \/\/ evenly. Do not try to split work if below the reasonable threshold.\n+    constexpr size_t threshold = 4096;\n+    stride = n_regions <= threshold ?\n+            threshold :\n+            (n_regions + active_workers - 1) \/ active_workers;\n+  }\n+\n+  if (n_regions > stride && active_workers > 1) {\n+    ShenandoahParallelHeapRegionTask task(blk, stride);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/safepointVerifiers.hpp\"\n@@ -478,7 +479,4 @@\n-  _table(table), _table_snapshot(nullptr) {\n-}\n-\n-void ShenandoahConcurrentNMethodIterator::nmethods_do_begin() {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-  _table_snapshot = _table->snapshot_for_iteration();\n-}\n+  _table(table),\n+  _table_snapshot(nullptr),\n+  _started_workers(0),\n+  _finished_workers(0) {}\n@@ -487,3 +485,3 @@\n-  assert(_table_snapshot != nullptr, \"Must first call nmethod_do_begin()\");\n-  _table_snapshot->concurrent_nmethods_do(cl);\n-}\n+  \/\/ Cannot safepoint when iteration is running, because this can cause deadlocks\n+  \/\/ with other threads waiting on iteration to be over.\n+  NoSafepointVerifier nsv;\n@@ -491,4 +489,26 @@\n-void ShenandoahConcurrentNMethodIterator::nmethods_do_end() {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-  _table->finish_iteration(_table_snapshot);\n-  CodeCache_lock->notify_all();\n+  MutexLocker ml(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+\n+  if (_finished_workers > 0) {\n+    \/\/ Some threads have already finished. We are now in rampdown: we are now\n+    \/\/ waiting for all currently recorded workers to finish. No new workers\n+    \/\/ should start.\n+    return;\n+  }\n+\n+  \/\/ Record a new worker and initialize the snapshot if it is a first visitor.\n+  if (_started_workers++ == 0) {\n+    _table_snapshot = _table->snapshot_for_iteration();\n+  }\n+\n+  \/\/ All set, relinquish the lock and go concurrent.\n+  {\n+    MutexUnlocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    _table_snapshot->concurrent_nmethods_do(cl);\n+  }\n+\n+  \/\/ Record completion. Last worker shuts down the iterator and notifies any waiters.\n+  uint count = ++_finished_workers;\n+  if (count == _started_workers) {\n+    _table->finish_iteration(_table_snapshot);\n+    CodeCache_lock->notify_all();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -184,0 +184,2 @@\n+  uint                                  _started_workers;\n+  uint                                  _finished_workers;\n@@ -188,1 +190,0 @@\n-  void nmethods_do_begin();\n@@ -190,1 +191,0 @@\n-  void nmethods_do_end();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -321,1 +321,1 @@\n-  product(uintx, ShenandoahParallelRegionStride, 1024, EXPERIMENTAL,        \\\n+  product(uintx, ShenandoahParallelRegionStride, 0, EXPERIMENTAL,           \\\n@@ -323,1 +323,2 @@\n-          \"iteration. Affects heaps with lots of regions.\")                 \\\n+          \"iteration. Affects heaps with lots of regions. \"                 \\\n+          \"Set to 0 to let Shenandoah to decide the best value.\")           \\\n@@ -336,3 +337,0 @@\n-  product(bool, ShenandoahIUBarrier, false, DIAGNOSTIC,                     \\\n-          \"Turn on\/off I-U barriers barriers in Shenandoah\")                \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -725,0 +725,1 @@\n+  bool has_scoped_access = false;\n@@ -732,0 +733,1 @@\n+    has_scoped_access = stream->read_bool(\"hasScopedAccess\");\n@@ -798,0 +800,1 @@\n+                                        has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2081,0 +2081,1 @@\n+                                                       bool has_scoped_access,\n@@ -2186,1 +2187,1 @@\n-        nm->set_has_scoped_access(true); \/\/ conservative\n+        nm->set_has_scoped_access(has_scoped_access);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -455,0 +455,1 @@\n+                                           bool                      has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -658,0 +658,1 @@\n+  declare_constant(ConstMethodFlags::_misc_is_scoped)                     \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,4 +104,0 @@\n-  CastIINode(Node* n, const Type* t, DependencyType dependency = RegularDependency, bool range_check_dependency = false, const TypeTuple* types = nullptr)\n-    : ConstraintCastNode(nullptr, n, t, dependency, types), _range_check_dependency(range_check_dependency) {\n-    init_class_id(Class_CastII);\n-  }\n@@ -110,0 +106,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n@@ -137,0 +134,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n@@ -150,0 +148,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n@@ -160,0 +159,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n@@ -170,0 +170,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n@@ -195,0 +196,1 @@\n+    assert(ctrl != nullptr, \"control must be set\");\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -327,1 +327,0 @@\n-shmacro(ShenandoahIUBarrier)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1344,2 +1344,2 @@\n-  max_value = new CastIINode(max_value, type_iv);\n-  register_new_node(max_value, parse_predicate_proj);\n+  max_value = new CastIINode(new_proj, max_value, type_iv);\n+  register_new_node(max_value, new_proj);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2874,0 +2874,1 @@\n+  bool abs_stride_is_one = stride_con == 1 || stride_con == -1;\n@@ -2885,0 +2886,9 @@\n+  \/\/ if abs(stride) == 1, an Assertion Predicate for the final iv value is added. We don't know the final iv value until\n+  \/\/ we're done with range check elimination so use a place holder.\n+  Node* final_iv_placeholder = nullptr;\n+  if (abs_stride_is_one) {\n+    final_iv_placeholder = new Node(1);\n+    _igvn.set_type(final_iv_placeholder, TypeInt::INT);\n+    final_iv_placeholder->init_req(0, loop_entry);\n+  }\n+\n@@ -2988,0 +2998,14 @@\n+          if (abs_stride_is_one) {\n+            \/\/ If the main loop becomes empty and the array access for this range check is sunk out of the loop, the index\n+            \/\/ for the array access will be set to the index value of the final iteration which could be out of loop.\n+            \/\/ Add an Assertion Predicate for that corner case. The final iv is computed from LoopLimit which is the\n+            \/\/ LoopNode::limit() only if abs(stride) == 1 otherwise the computation depends on LoopNode::init_trip() as\n+            \/\/ well. When LoopLimit only depends on LoopNode::limit(), there are cases where the zero trip guard for the\n+            \/\/ main loop doesn't constant fold after range check elimination but, the array access for the final\n+            \/\/ iteration of the main loop is out of bound and the index for that access is out of range for the range\n+            \/\/ check CastII.\n+            loop_entry = add_range_check_elimination_assertion_predicate(loop, loop_entry, scale_con, int_offset,\n+                                                                         int_limit, stride_con, final_iv_placeholder, false);\n+            assert(!assertion_predicate_has_loop_opaque_node(loop_entry->in(0)->as_If()), \"unexpected\");\n+          }\n+\n@@ -3007,1 +3031,1 @@\n-          max_value = new CastIINode(max_value, loop->_head->as_CountedLoop()->phi()->bottom_type());\n+          max_value = new CastIINode(loop_entry, max_value, loop->_head->as_CountedLoop()->phi()->bottom_type());\n@@ -3119,0 +3143,5 @@\n+  if (abs_stride_is_one) {\n+    Node* final_iv = new SubINode(main_limit, cl->stride());\n+    register_new_node(final_iv, loop_entry);\n+    _igvn.replace_node(final_iv_placeholder, final_iv);\n+  }\n@@ -3122,2 +3151,0 @@\n-\n-  return;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -4673,0 +4673,3 @@\n+  if (node->is_CastII()) {\n+    clone->set_req(0, new_ctrl);\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -398,1 +398,8 @@\n-  if (t->isa_intptr_t() && offset != 0 && offset != Type::OffsetBot) {\n+\n+  if (t->isa_intptr_t() &&\n+#if !defined(AARCH64)\n+      \/\/ AArch64 supports the addressing mode:\n+      \/\/ [base, 0], in which [base] is converted from a long value\n+      offset != 0 &&\n+#endif\n+      offset != Type::OffsetBot) {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2487,2 +2487,1 @@\n-      insert_val = gvn().transform(new ConvL2INode(insert_val));\n-      insert_val = gvn().transform(new CastIINode(insert_val, TypeInt::BYTE));\n+      insert_val = gvn().transform(new ConvL2INode(insert_val, TypeInt::BYTE));\n@@ -2491,2 +2490,1 @@\n-      insert_val = gvn().transform(new ConvL2INode(insert_val));\n-      insert_val = gvn().transform(new CastIINode(insert_val, TypeInt::SHORT));\n+      insert_val = gvn().transform(new ConvL2INode(insert_val, TypeInt::SHORT));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2453,2 +2453,2 @@\n-  \/\/ All the frames have been thawed so we know they don't hold any monitors\n-  assert(thread->held_monitor_count() == 0, \"Must be\");\n+  \/\/ All or part of the frames have been thawed so we know they don't hold any monitors except JNI monitors.\n+  assert(thread->held_monitor_count() == thread->jni_monitor_count(), \"Must be\");\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-    CodeCache::write_perf_map();\n+    CodeCache::write_perf_map(nullptr, tty);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -868,1 +868,1 @@\n-  CodeCache::write_perf_map(_filename.is_set() ? _filename.value() : nullptr);\n+  CodeCache::write_perf_map(_filename.is_set() ? _filename.value() : nullptr, output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -95,5 +94,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -246,1 +240,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -100,5 +99,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -288,1 +282,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/ch\/KQueueSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -839,1 +840,1 @@\n-        int spaceNeeded = count + Integer.stringSize(i);\n+        int spaceNeeded = count + DecimalDigits.stringSize(i);\n@@ -864,1 +865,1 @@\n-        int spaceNeeded = count + Long.stringSize(l);\n+        int spaceNeeded = count + DecimalDigits.stringSize(l);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import java.security.Permissions;\n@@ -59,0 +60,1 @@\n+import java.security.ProtectionDomain;\n@@ -3223,4 +3225,0 @@\n-\n-    \/** protection domain returned when the internal domain is null *\/\n-    private static java.security.ProtectionDomain allPermDomain;\n-\n@@ -3247,1 +3245,1 @@\n-    public java.security.ProtectionDomain getProtectionDomain() {\n+    public ProtectionDomain getProtectionDomain() {\n@@ -3256,0 +3254,10 @@\n+    \/** Holder for the protection domain returned when the internal domain is null *\/\n+    private static class Holder {\n+        private static final ProtectionDomain allPermDomain;\n+        static {\n+            Permissions perms = new Permissions();\n+            perms.add(SecurityConstants.ALL_PERMISSION);\n+            allPermDomain = new ProtectionDomain(null, perms);\n+        }\n+    }\n+\n@@ -3257,2 +3265,2 @@\n-    java.security.ProtectionDomain protectionDomain() {\n-        java.security.ProtectionDomain pd = getProtectionDomain0();\n+    ProtectionDomain protectionDomain() {\n+        ProtectionDomain pd = getProtectionDomain0();\n@@ -3260,8 +3268,3 @@\n-            if (allPermDomain == null) {\n-                java.security.Permissions perms =\n-                    new java.security.Permissions();\n-                perms.add(SecurityConstants.ALL_PERMISSION);\n-                allPermDomain =\n-                    new java.security.ProtectionDomain(null, perms);\n-            }\n-            pd = allPermDomain;\n+            return Holder.allPermDomain;\n+        } else {\n+            return pd;\n@@ -3269,1 +3272,0 @@\n-        return pd;\n@@ -3275,1 +3277,1 @@\n-    private native java.security.ProtectionDomain getProtectionDomain0();\n+    private native ProtectionDomain getProtectionDomain0();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -430,1 +431,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n@@ -460,26 +461,0 @@\n-    \/**\n-     * Returns the string representation size for a given int value.\n-     *\n-     * @param x int value\n-     * @return string size\n-     *\n-     * @implNote There are other ways to compute this: e.g. binary search,\n-     * but values are biased heavily towards zero, and therefore linear search\n-     * wins. The iteration results are also routinely inlined in the generated\n-     * code after loop unrolling.\n-     *\/\n-    static int stringSize(int x) {\n-        int d = 1;\n-        if (x >= 0) {\n-            d = 0;\n-            x = -x;\n-        }\n-        int p = -10;\n-        for (int i = 1; i < 10; i++) {\n-            if (x > p)\n-                return i + d;\n-            p = 10 * p;\n-        }\n-        return 10 + d;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -460,1 +461,1 @@\n-        int size = stringSize(i);\n+        int size = DecimalDigits.stringSize(i);\n@@ -490,26 +491,0 @@\n-    \/**\n-     * Returns the string representation size for a given long value.\n-     *\n-     * @param x long value\n-     * @return string size\n-     *\n-     * @implNote There are other ways to compute this: e.g. binary search,\n-     * but values are biased heavily towards zero, and therefore linear search\n-     * wins. The iteration results are also routinely inlined in the generated\n-     * code after loop unrolling.\n-     *\/\n-    static int stringSize(long x) {\n-        int d = 1;\n-        if (x >= 0) {\n-            d = 0;\n-            x = -x;\n-        }\n-        long p = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (x > p)\n-                return i + d;\n-            p = 10 * p;\n-        }\n-        return 19 + d;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.time.Duration;\n@@ -444,4 +445,7 @@\n-     * <p>The default implementation of this method polls the {@code exitValue}\n-     * to check if the process has terminated. Concrete implementations of this\n-     * class are strongly encouraged to override this method with a more\n-     * efficient implementation.\n+     * @implSpec\n+     * The default implementation of this method polls the {@code exitValue}\n+     * to check if the process has terminated.\n+     *\n+     * @implNote\n+     * Concrete implementations of this class are strongly encouraged to\n+     * override this method with a more efficient implementation.\n@@ -478,0 +482,32 @@\n+    \/**\n+     * Causes the current thread to wait, if necessary, until the\n+     * process represented by this {@code Process} object has\n+     * terminated, or the specified waiting duration elapses.\n+     *\n+     * <p>If the process has already terminated then this method returns\n+     * immediately with the value {@code true}.  If the process has not\n+     * terminated and the duration is not positive, then\n+     * this method returns immediately with the value {@code false}.\n+     *\n+     * @implSpec\n+     * The default implementation of this method polls the {@code exitValue}\n+     * to check if the process has terminated.\n+     *\n+     * @implNote\n+     * Concrete implementations of this class are strongly encouraged to\n+     * override this method with a more efficient implementation.\n+     *\n+     * @param duration the maximum duration to wait; if not positive,\n+     *                this method returns immediately.\n+     * @return {@code true} if the process has exited and {@code false} if\n+     *         the waiting duration elapsed before the process has exited.\n+     * @throws InterruptedException if the current thread is interrupted\n+     *         while waiting.\n+     * @throws NullPointerException if duration is null\n+     * @since 24\n+     *\/\n+    public boolean waitFor(Duration duration) throws InterruptedException {\n+        Objects.requireNonNull(duration, \"duration\");\n+        return waitFor(TimeUnit.NANOSECONDS.convert(duration), TimeUnit.NANOSECONDS);\n+    }\n+\n@@ -580,2 +616,2 @@\n-     * {@code waitFor(long, TimeUnit)}, which is specified to poll\n-     * {@code exitValue()}.\n+     * {@code waitFor(long, TimeUnit)} and {@code waitFor(Duration)},\n+     * which are specified to poll {@code exitValue()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":42,"deletions":6,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2990,1 +2990,1 @@\n-        return StringConcatHelper.simpleConcat(this, str);\n+        return StringConcatHelper.doConcat(this, str);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -99,1 +100,1 @@\n-        return checkOverflow(lengthCoder + Integer.stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n@@ -110,1 +111,1 @@\n-        return checkOverflow(lengthCoder + Long.stringSize(value));\n+        return checkOverflow(lengthCoder + DecimalDigits.stringSize(value));\n@@ -122,1 +123,1 @@\n-        if (value.coder() == String.UTF16) {\n+        if (!value.isLatin1()) {\n@@ -129,1 +130,1 @@\n-     * Prepends the stringly representation of boolean value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -136,0 +137,1 @@\n+     * @param prefix     a constant to prepend before value\n@@ -138,1 +140,1 @@\n-    static long prepend(long indexCoder, byte[] buf, boolean value) {\n+    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {\n@@ -142,4 +144,5 @@\n-                buf[--index] = 'e';\n-                buf[--index] = 'u';\n-                buf[--index] = 'r';\n-                buf[--index] = 't';\n+                index -= 4;\n+                buf[index] = 't';\n+                buf[index + 1] = 'r';\n+                buf[index + 2] = 'u';\n+                buf[index + 3] = 'e';\n@@ -147,5 +150,6 @@\n-                buf[--index] = 'e';\n-                buf[--index] = 's';\n-                buf[--index] = 'l';\n-                buf[--index] = 'a';\n-                buf[--index] = 'f';\n+                index -= 5;\n+                buf[index] = 'f';\n+                buf[index + 1] = 'a';\n+                buf[index + 2] = 'l';\n+                buf[index + 3] = 's';\n+                buf[index + 4] = 'e';\n@@ -153,0 +157,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -156,4 +162,5 @@\n-                StringUTF16.putChar(buf, --index, 'e');\n-                StringUTF16.putChar(buf, --index, 'u');\n-                StringUTF16.putChar(buf, --index, 'r');\n-                StringUTF16.putChar(buf, --index, 't');\n+                index -= 4;\n+                StringUTF16.putChar(buf, index, 't');\n+                StringUTF16.putChar(buf, index + 1, 'r');\n+                StringUTF16.putChar(buf, index + 2, 'u');\n+                StringUTF16.putChar(buf, index + 3, 'e');\n@@ -161,5 +168,6 @@\n-                StringUTF16.putChar(buf, --index, 'e');\n-                StringUTF16.putChar(buf, --index, 's');\n-                StringUTF16.putChar(buf, --index, 'l');\n-                StringUTF16.putChar(buf, --index, 'a');\n-                StringUTF16.putChar(buf, --index, 'f');\n+                index -= 5;\n+                StringUTF16.putChar(buf, index, 'f');\n+                StringUTF16.putChar(buf, index + 1, 'a');\n+                StringUTF16.putChar(buf, index + 2, 'l');\n+                StringUTF16.putChar(buf, index + 3, 's');\n+                StringUTF16.putChar(buf, index + 4, 'e');\n@@ -167,0 +175,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -171,36 +181,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of char value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      char value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, char value) {\n-        if (indexCoder < UTF16) {\n-            buf[(int)(--indexCoder)] = (byte) (value & 0xFF);\n-        } else {\n-            StringUTF16.putChar(buf, (int)(--indexCoder), value);\n-        }\n-        return indexCoder;\n-    }\n-\n@@ -219,16 +193,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of integer value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      integer value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, int value) {\n+        int index = (int)indexCoder;\n@@ -236,1 +195,4 @@\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+            buf[--index] = (byte) (value & 0xFF);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -238,1 +200,4 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            StringUTF16.putChar(buf, --index, value);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -254,16 +219,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of long value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      long value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, long value) {\n+        int index = (int)indexCoder;\n@@ -271,1 +221,4 @@\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -273,1 +226,4 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -289,17 +245,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of String value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      String value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, String value) {\n-        indexCoder -= value.length();\n+        int index = (int)indexCoder;\n@@ -307,1 +247,4 @@\n-            value.getBytes(buf, (int)indexCoder, String.LATIN1);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -309,1 +252,4 @@\n-            value.getBytes(buf, (int)indexCoder, String.UTF16);\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -311,1 +257,0 @@\n-        return indexCoder;\n@@ -326,3 +271,12 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+        int index = ((int)indexCoder) - value.length();\n+        if (indexCoder < UTF16) {\n+            value.getBytes(buf, index, String.LATIN1);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n+        } else {\n+            value.getBytes(buf, index, String.UTF16);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n+        }\n@@ -371,10 +325,18 @@\n-        \/\/ start \"mixing\" in length and coder or arguments, order is not\n-        \/\/ important\n-        long indexCoder = mix(initialCoder(), s1);\n-        indexCoder = mix(indexCoder, s2);\n-        byte[] buf = newArray(indexCoder);\n-        \/\/ prepend each argument in reverse order, since we prepending\n-        \/\/ from the end of the byte array\n-        indexCoder = prepend(indexCoder, buf, s2);\n-        indexCoder = prepend(indexCoder, buf, s1);\n-        return newString(buf, indexCoder);\n+        return doConcat(s1, s2);\n+    }\n+\n+    \/**\n+     * Perform a simple concatenation between two non-empty strings.\n+     *\n+     * @param s1         first argument\n+     * @param s2         second argument\n+     * @return String    resulting string\n+     *\/\n+    @ForceInline\n+    static String doConcat(String s1, String s2) {\n+        byte coder = (byte) (s1.coder() | s2.coder());\n+        int newLength = (s1.length() + s2.length()) << coder;\n+        byte[] buf = newArray(newLength);\n+        s1.getBytes(buf, 0, coder);\n+        s2.getBytes(buf, s1.length(), coder);\n+        return new String(buf, coder);\n@@ -448,1 +410,11 @@\n-        if (index < 0) {\n+        return newArray(index);\n+    }\n+\n+    \/**\n+     * Allocates an uninitialized byte array based on the length\n+     * @param length\n+     * @return the newly allocated byte array\n+     *\/\n+    @ForceInline\n+    static byte[] newArray(int length) {\n+        if (length < 0) {\n@@ -451,1 +423,1 @@\n-        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index);\n+        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":103,"deletions":131,"binary":false,"changes":234,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-import java.util.concurrent.Callable;\n@@ -2267,0 +2266,1 @@\n+        @Override\n@@ -2614,4 +2614,0 @@\n-            public long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value) {\n-                return StringConcatHelper.prepend(indexCoder, buf, value);\n-            }\n-\n@@ -2630,4 +2626,0 @@\n-            public int stringSize(long i) {\n-                return Long.stringSize(i);\n-            }\n-\n@@ -2684,8 +2676,0 @@\n-            public <V> V executeOnCarrierThread(Callable<V> task) throws Exception {\n-                if (Thread.currentThread() instanceof VirtualThread vthread) {\n-                    return vthread.executeOnCarrierThread(task);\n-                } else {\n-                    return task.call();\n-                }\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -65,2 +66,1 @@\n- * A thread that is scheduled by the Java virtual machine rather than the operating\n- * system.\n+ * A thread that is scheduled by the Java virtual machine rather than the operating system.\n@@ -72,1 +72,1 @@\n-    private static final ScheduledExecutorService UNPARKER = createDelayedTaskScheduler();\n+    private static final ScheduledExecutorService[] DELAYED_TASK_SCHEDULERS = createDelayedTaskSchedulers();\n@@ -220,1 +220,1 @@\n-    @ChangesCurrentThread\n+    @ChangesCurrentThread \/\/ allow mount\/unmount to be inlined\n@@ -260,0 +260,2 @@\n+     * @param scheduler the scheduler\n+     * @param retryOnOOME true to retry indefinitely if OutOfMemoryError is thrown\n@@ -262,6 +264,32 @@\n-    private void submitRunContinuation() {\n-        try {\n-            scheduler.execute(runContinuation);\n-        } catch (RejectedExecutionException ree) {\n-            submitFailed(ree);\n-            throw ree;\n+    @ChangesCurrentThread\n+    private void submitRunContinuation(Executor scheduler, boolean retryOnOOME) {\n+        boolean done = false;\n+        while (!done) {\n+            try {\n+                \/\/ The scheduler's execute method is invoked in the context of the\n+                \/\/ carrier thread. For the default scheduler this ensures that the\n+                \/\/ current thread is a ForkJoinWorkerThread so the task will be pushed\n+                \/\/ to the local queue. For other schedulers, it avoids deadlock that\n+                \/\/ would arise due to platform and virtual threads contending for a\n+                \/\/ lock on the scheduler's submission queue.\n+                if (currentThread() instanceof VirtualThread vthread) {\n+                    vthread.switchToCarrierThread();\n+                    try {\n+                        scheduler.execute(runContinuation);\n+                    } finally {\n+                        switchToVirtualThread(vthread);\n+                    }\n+                } else {\n+                    scheduler.execute(runContinuation);\n+                }\n+                done = true;\n+            } catch (RejectedExecutionException ree) {\n+                submitFailed(ree);\n+                throw ree;\n+            } catch (OutOfMemoryError e) {\n+                if (retryOnOOME) {\n+                    U.park(false, 100_000_000); \/\/ 100ms\n+                } else {\n+                    throw e;\n+                }\n+            }\n@@ -273,0 +301,1 @@\n+     * If OutOfMemoryError is thrown then the submit will be retried until it succeeds.\n@@ -277,0 +306,1 @@\n+        assert Thread.currentThread() instanceof CarrierThread;\n@@ -282,0 +312,2 @@\n+        } catch (OutOfMemoryError e) {\n+            submitRunContinuation(pool, true);\n@@ -287,0 +319,1 @@\n+     * If OutOfMemoryError is thrown then the submit will be retried until it succeeds.\n@@ -291,0 +324,1 @@\n+        assert Thread.currentThread() instanceof CarrierThread;\n@@ -296,0 +330,33 @@\n+        } catch (OutOfMemoryError e) {\n+            submitRunContinuation(pool, true);\n+        }\n+    }\n+\n+    \/**\n+     * Submits the runContinuation task to the scheduler. For the default scheduler,\n+     * and calling it on a worker thread, the task will be pushed to the local queue,\n+     * otherwise it will be pushed to an external submission queue.\n+     * If OutOfMemoryError is thrown then the submit will be retried until it succeeds.\n+     * @throws RejectedExecutionException\n+     *\/\n+    private void submitRunContinuation() {\n+        submitRunContinuation(scheduler, true);\n+    }\n+\n+    \/**\n+     * Submits the runContinuation task to the scheduler. For the default scheduler, and\n+     * calling it a virtual thread that uses the default scheduler, the task will be\n+     * pushed to an external submission queue. This method may throw OutOfMemoryError.\n+     * @throws RejectedExecutionException\n+     * @throws OutOfMemoryError\n+     *\/\n+    private void externalSubmitRunContinuationOrThrow() {\n+        if (scheduler == DEFAULT_SCHEDULER && currentCarrierThread() instanceof CarrierThread ct) {\n+            try {\n+                ct.getPool().externalSubmit(ForkJoinTask.adapt(runContinuation));\n+            } catch (RejectedExecutionException ree) {\n+                submitFailed(ree);\n+                throw ree;\n+            }\n+        } else {\n+            submitRunContinuation(scheduler, false);\n@@ -388,0 +455,2 @@\n+        assert !Thread.holdsLock(interruptLock);\n+\n@@ -420,1 +489,1 @@\n-    private void switchToVirtualThread(VirtualThread vthread) {\n+    private static void switchToVirtualThread(VirtualThread vthread) {\n@@ -477,2 +546,2 @@\n-                \/\/ lazy submit to continue on the current thread as carrier if possible\n-                if (currentThread() instanceof CarrierThread ct) {\n+                \/\/ lazy submit to continue on the current carrier if possible\n+                if (currentThread() instanceof CarrierThread ct && ct.getQueuedTaskCount() == 0) {\n@@ -483,1 +552,0 @@\n-\n@@ -564,2 +632,2 @@\n-            \/\/ submit task to run thread\n-            submitRunContinuation();\n+            \/\/ submit task to run thread, using externalSubmit if possible\n+            externalSubmitRunContinuationOrThrow();\n@@ -710,1 +778,1 @@\n-            return UNPARKER.schedule(this::unpark, nanos, NANOSECONDS);\n+            return schedule(this::unpark, nanos, NANOSECONDS);\n@@ -721,0 +789,1 @@\n+        assert Thread.currentThread() == this;\n@@ -733,4 +802,3 @@\n-     * Re-enables this virtual thread for scheduling. If the virtual thread was\n-     * {@link #park() parked} then it will be unblocked, otherwise its next call\n-     * to {@code park} or {@linkplain #parkNanos(long) parkNanos} is guaranteed\n-     * not to block.\n+     * Re-enables this virtual thread for scheduling. If this virtual thread is parked\n+     * then its task is scheduled to continue, otherwise its next call to {@code park} or\n+     * {@linkplain #parkNanos(long) parkNanos} is guaranteed not to block.\n@@ -740,1 +808,0 @@\n-    @ChangesCurrentThread\n@@ -742,2 +809,1 @@\n-        Thread currentThread = Thread.currentThread();\n-        if (!getAndSetParkPermit(true) && currentThread != this) {\n+        if (!getAndSetParkPermit(true) && currentThread() != this) {\n@@ -745,13 +811,9 @@\n-            boolean parked = (s == PARKED) || (s == TIMED_PARKED);\n-            if (parked && compareAndSetState(s, UNPARKED)) {\n-                if (currentThread instanceof VirtualThread vthread) {\n-                    vthread.switchToCarrierThread();\n-                    try {\n-                        submitRunContinuation();\n-                    } finally {\n-                        switchToVirtualThread(vthread);\n-                    }\n-                } else {\n-                    submitRunContinuation();\n-                }\n-            } else if ((s == PINNED) || (s == TIMED_PINNED)) {\n+\n+            \/\/ unparked while parked\n+            if ((s == PARKED || s == TIMED_PARKED) && compareAndSetState(s, UNPARKED)) {\n+                submitRunContinuation();\n+                return;\n+            }\n+\n+            \/\/ unparked while parked when pinned\n+            if (s == PINNED || s == TIMED_PINNED) {\n@@ -759,1 +821,1 @@\n-                notifyJvmtiDisableSuspend(true);\n+                disableSuspendAndPreempt();\n@@ -768,1 +830,1 @@\n-                    notifyJvmtiDisableSuspend(false);\n+                    enableSuspendAndPreempt();\n@@ -770,0 +832,1 @@\n+                return;\n@@ -862,1 +925,1 @@\n-        notifyJvmtiDisableSuspend(true);\n+        disableSuspendAndPreempt();\n@@ -866,1 +929,1 @@\n-            notifyJvmtiDisableSuspend(false);\n+            enableSuspendAndPreempt();\n@@ -877,1 +940,1 @@\n-            \/\/ suspended when entering or holding interruptLock\n+            \/\/ suspended or unmounted when entering or holding interruptLock\n@@ -879,1 +942,1 @@\n-            notifyJvmtiDisableSuspend(true);\n+            disableSuspendAndPreempt();\n@@ -893,1 +956,1 @@\n-                notifyJvmtiDisableSuspend(false);\n+                enableSuspendAndPreempt();\n@@ -900,0 +963,4 @@\n+\n+            \/\/ make available parking permit, unpark thread if parked\n+            unpark();\n+\n@@ -903,0 +970,1 @@\n+            setParkPermit(true);\n@@ -904,1 +972,0 @@\n-        unpark();\n@@ -917,1 +984,1 @@\n-            notifyJvmtiDisableSuspend(true);\n+            disableSuspendAndPreempt();\n@@ -924,1 +991,1 @@\n-                notifyJvmtiDisableSuspend(false);\n+                enableSuspendAndPreempt();\n@@ -949,6 +1016,8 @@\n-                notifyJvmtiDisableSuspend(true);\n-                try {\n-                    synchronized (carrierThreadAccessLock()) {\n-                        Thread carrierThread = this.carrierThread;\n-                        if (carrierThread != null) {\n-                            return carrierThread.threadState();\n+                if (Thread.currentThread() != this) {\n+                    disableSuspendAndPreempt();\n+                    try {\n+                        synchronized (carrierThreadAccessLock()) {\n+                            Thread carrierThread = this.carrierThread;\n+                            if (carrierThread != null) {\n+                                return carrierThread.threadState();\n+                            }\n@@ -956,0 +1025,2 @@\n+                    } finally {\n+                        enableSuspendAndPreempt();\n@@ -957,2 +1028,0 @@\n-                } finally {\n-                    notifyJvmtiDisableSuspend(false);\n@@ -1071,4 +1140,7 @@\n-        Thread carrier = carrierThread;\n-        if (carrier != null) {\n-            \/\/ include the carrier thread state and name when mounted\n-            notifyJvmtiDisableSuspend(true);\n+\n+        \/\/ add the carrier state and thread name when mounted\n+        boolean mounted;\n+        if (Thread.currentThread() == this) {\n+            mounted = appendCarrierInfo(sb);\n+        } else {\n+            disableSuspendAndPreempt();\n@@ -1077,7 +1149,1 @@\n-                    carrier = carrierThread;\n-                    if (carrier != null) {\n-                        String stateAsString = carrier.threadState().toString();\n-                        sb.append(stateAsString.toLowerCase(Locale.ROOT));\n-                        sb.append('@');\n-                        sb.append(carrier.getName());\n-                    }\n+                    mounted = appendCarrierInfo(sb);\n@@ -1086,1 +1152,1 @@\n-                notifyJvmtiDisableSuspend(false);\n+                enableSuspendAndPreempt();\n@@ -1089,2 +1155,3 @@\n-        \/\/ include virtual thread state when not mounted\n-        if (carrier == null) {\n+\n+        \/\/ add virtual thread state when not mounted\n+        if (!mounted) {\n@@ -1094,0 +1161,1 @@\n+\n@@ -1097,0 +1165,18 @@\n+    \/**\n+     * Appends the carrier state and thread name to the string buffer if mounted.\n+     * @return true if mounted, false if not mounted\n+     *\/\n+    private boolean appendCarrierInfo(StringBuilder sb) {\n+        assert Thread.currentThread() == this || Thread.holdsLock(carrierThreadAccessLock());\n+        Thread carrier = carrierThread;\n+        if (carrier != null) {\n+            String stateAsString = carrier.threadState().toString();\n+            sb.append(stateAsString.toLowerCase(Locale.ROOT));\n+            sb.append('@');\n+            sb.append(carrier.getName());\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n@@ -1130,0 +1216,16 @@\n+    \/**\n+     * Disallow the current thread be suspended or preempted.\n+     *\/\n+    private void disableSuspendAndPreempt() {\n+        notifyJvmtiDisableSuspend(true);\n+        Continuation.pin();\n+    }\n+\n+    \/**\n+     * Allow the current thread be suspended or preempted.\n+     *\/\n+    private void enableSuspendAndPreempt() {\n+        Continuation.unpin();\n+        notifyJvmtiDisableSuspend(false);\n+    }\n+\n@@ -1191,0 +1293,6 @@\n+\n+        \/\/ ensure VTHREAD_GROUP is created, may be accessed by JVMTI\n+        var group = Thread.virtualThreadGroup();\n+\n+        \/\/ ensure VirtualThreadPinnedEvent is loaded\/initialized\n+        U.ensureClassInitialized(VirtualThreadPinnedEvent.class);\n@@ -1194,1 +1302,1 @@\n-     * Creates the default scheduler.\n+     * Creates the default ForkJoinPool scheduler.\n@@ -1232,1 +1340,1 @@\n-     * Creates the ScheduledThreadPoolExecutor used for timed unpark.\n+     * Schedule a runnable task to run after a delay.\n@@ -1234,3 +1342,13 @@\n-    private static ScheduledExecutorService createDelayedTaskScheduler() {\n-        String propValue = GetPropertyAction.privilegedGetProperty(\"jdk.unparker.maxPoolSize\");\n-        int poolSize;\n+    private static Future<?> schedule(Runnable command, long delay, TimeUnit unit) {\n+        long tid = Thread.currentThread().threadId();\n+        int index = (int) tid & (DELAYED_TASK_SCHEDULERS.length - 1);\n+        return DELAYED_TASK_SCHEDULERS[index].schedule(command, delay, unit);\n+    }\n+\n+    \/**\n+     * Creates the ScheduledThreadPoolExecutors used to execute delayed tasks.\n+     *\/\n+    private static ScheduledExecutorService[] createDelayedTaskSchedulers() {\n+        String propName = \"jdk.virtualThreadScheduler.timerQueues\";\n+        String propValue = GetPropertyAction.privilegedGetProperty(propName);\n+        int queueCount;\n@@ -1238,1 +1356,4 @@\n-            poolSize = Integer.parseInt(propValue);\n+            queueCount = Integer.parseInt(propValue);\n+            if (queueCount != Integer.highestOneBit(queueCount)) {\n+                throw new RuntimeException(\"Value of \" + propName + \" must be power of 2\");\n+            }\n@@ -1240,1 +1361,13 @@\n-            poolSize = 1;\n+            int ncpus = Runtime.getRuntime().availableProcessors();\n+            queueCount = Math.max(Integer.highestOneBit(ncpus \/ 4), 1);\n+        }\n+        var schedulers = new ScheduledExecutorService[queueCount];\n+        for (int i = 0; i < queueCount; i++) {\n+            ScheduledThreadPoolExecutor stpe = (ScheduledThreadPoolExecutor)\n+                Executors.newScheduledThreadPool(1, task -> {\n+                    Thread t = InnocuousThread.newThread(\"VirtualThread-unparker\", task);\n+                    t.setDaemon(true);\n+                    return t;\n+                });\n+            stpe.setRemoveOnCancelPolicy(true);\n+            schedulers[i] = stpe;\n@@ -1242,6 +1375,1 @@\n-        ScheduledThreadPoolExecutor stpe = (ScheduledThreadPoolExecutor)\n-            Executors.newScheduledThreadPool(poolSize, task -> {\n-                return InnocuousThread.newThread(\"VirtualThread-unparker\", task);\n-            });\n-        stpe.setRemoveOnCancelPolicy(true);\n-        return stpe;\n+        return schedulers;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":210,"deletions":82,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-        extends WritableElement<Annotation>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-        extends WritableElement<AnnotationElement>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationElement.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-public sealed interface AnnotationValue extends WritableElement<AnnotationValue>\n+public sealed interface AnnotationValue\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        extends WritableElement<A>\n+        extends ClassFileElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-        extends WritableElement<BootstrapMethodEntry>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BootstrapMethodEntry.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.List;\n-\n@@ -113,7 +111,0 @@\n-    \/**\n-     * Write the contents of another {@link BufWriter} to the buffer\n-     *\n-     * @param other the other {@linkplain BufWriter}\n-     *\/\n-    void writeBytes(BufWriter other);\n-\n@@ -169,20 +160,0 @@\n-    \/**\n-     * Write a list of entities to the buffer.  The length of the list is\n-     * written as a {@code u2}, followed by the bytes corresponding to each\n-     * element in the list.  Writing of the entities is delegated to the entry.\n-     *\n-     * @param list the entities\n-     * @param <T> the type of entity\n-     *\/\n-    <T extends WritableElement<?>> void writeList(List<T> list);\n-\n-    \/**\n-     * Write a list of constant pool entry indexes to the buffer.  The length\n-     * of the list is written as a {@code u2}, followed by a {@code u2} for each\n-     * entry in the list.\n-     *\n-     * @param list the list of entries\n-     * @throws IllegalArgumentException if any entry has invalid index\n-     *\/\n-    void writeListIndices(List<? extends PoolEntry> list);\n-\n@@ -193,10 +164,0 @@\n-\n-    \/**\n-     * Copy the contents of the buffer into a byte array.\n-     *\n-     * @param array the byte array\n-     * @param bufferOffset the offset into the array at which to write the\n-     *                     contents of the buffer\n-     * @throws IndexOutOfBoundsException if copying outside of the array bounds\n-     *\/\n-    void copyTo(byte[] array, int bufferOffset);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BufWriter.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.util.Optional;\n@@ -61,6 +60,0 @@\n-    \/**\n-     * {@return the {@link ClassModel} representing the class being transformed,\n-     * if this class builder represents the transformation of some {@link ClassModel}}\n-     *\/\n-    Optional<ClassModel> original();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        permits AttributedElement, CompoundElement, WritableElement,\n+        permits AttributedElement, CompoundElement, Attribute,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,15 +192,0 @@\n-\n-    \/**\n-     * Compare a range of bytes from the classfile to a range of bytes within\n-     * a {@link BufWriter}.\n-     *\n-     * @param bufWriter the {@linkplain BufWriter}\n-     * @param bufWriterOffset the offset within the {@linkplain BufWriter}\n-     * @param classReaderOffset the offset within the classfile\n-     * @param length the length of the range\n-     * @return whether the two ranges were identical\n-     *\/\n-    boolean compare(BufWriter bufWriter,\n-                    int bufWriterOffset,\n-                    int classReaderOffset,\n-                    int length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassReader.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -131,6 +131,0 @@\n-    \/**\n-     * {@return the {@link CodeModel} representing the method body being transformed,\n-     * if this code builder represents the transformation of some {@link CodeModel}}\n-     *\/\n-    Optional<CodeModel> original();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,6 +62,0 @@\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public final void writeTo(BufWriter buf) {\n-        mapper.writeAttribute(buf, (T) this);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.util.Optional;\n@@ -71,5 +70,0 @@\n-    \/**\n-     * {@return the {@link FieldModel} representing the field being transformed,\n-     * if this field builder represents the transformation of some {@link FieldModel}}\n-     *\/\n-    Optional<FieldModel> original();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldBuilder.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        extends WritableElement<FieldModel>, CompoundElement<FieldElement>, AttributedElement, ClassElement\n+        extends CompoundElement<FieldElement>, AttributedElement, ClassElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Optional;\n@@ -53,6 +52,0 @@\n-    \/**\n-     * {@return the {@link MethodModel} representing the method being transformed,\n-     * if this method builder represents the transformation of some {@link MethodModel}}\n-     *\/\n-    Optional<MethodModel> original();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodBuilder.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        extends WritableElement<MethodModel>, CompoundElement<MethodElement>, AttributedElement, ClassElement\n+        extends CompoundElement<MethodElement>, AttributedElement, ClassElement\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.classfile;\n-\n-import java.lang.classfile.constantpool.ConstantPoolBuilder;\n-import java.lang.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.impl.DirectFieldBuilder;\n-import jdk.internal.classfile.impl.DirectMethodBuilder;\n-import jdk.internal.javac.PreviewFeature;\n-\n-\/**\n- * A classfile element that can encode itself as a stream of bytes in the\n- * encoding expected by the classfile format.\n- *\n- * @param <T> the type of the entity\n- *\n- * @sealedGraph\n- * @since 22\n- *\/\n-@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n-public sealed interface WritableElement<T> extends ClassFileElement\n-        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n-                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n-                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n-    \/**\n-     * Writes the element to the specified writer\n-     *\n-     * @param buf the writer\n-     *\/\n-    void writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/WritableElement.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * <p>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeStackTracker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -42,1 +41,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -64,1 +62,1 @@\n-        extends ConstantPool, WritableElement<ConstantPool>\n+        extends ConstantPool\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -37,1 +36,1 @@\n-public sealed interface PoolEntry extends WritableElement<PoolEntry>\n+public sealed interface PoolEntry\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import java.lang.constant.ClassDesc;\n-\n-import java.lang.classfile.BufWriter;\n@@ -37,0 +34,2 @@\n+import java.lang.constant.ClassDesc;\n+\n@@ -87,8 +86,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -36,0 +35,1 @@\n+\n@@ -84,8 +84,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * <p>\n+ *\n@@ -40,1 +40,1 @@\n- * <p>\n+ *\n@@ -380,1 +380,1 @@\n- * <p>\n+ *\n@@ -446,1 +446,1 @@\n- * <p>\n+ *\n@@ -471,1 +471,1 @@\n- *<p>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n- * the segments allocated by it) becomes <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>,\n+ * the segments allocated by it) becomes {@linkplain java.lang.ref##reachability unreachable},\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-     *          kept <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">reachable<\/a>\n+     *          kept {@linkplain java.lang.ref##reachability reachable}\n@@ -788,1 +788,1 @@\n-     *          <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>.\n+     *          {@linkplain java.lang.ref##reachability unreachable}.\n@@ -839,1 +839,1 @@\n-     *          <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>.\n+     *          {@linkplain java.lang.ref##reachability unreachable}.\n@@ -2665,1 +2665,1 @@\n-     * as long as it is <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">reachable<\/a>.\n+     * as long as it is {@linkplain java.lang.ref##reachability reachable}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-     * <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>. The\n+     * {@linkplain java.lang.ref##reachability unreachable}. The\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -398,1 +398,1 @@\n-            names[arity] = zero.newIndex(arity);\n+            names[arity] = zero.withIndex(arity);\n@@ -498,1 +498,1 @@\n-        Name[] oldNames = null;\n+        Name[] oldNames = names.clone();\n@@ -500,1 +500,0 @@\n-        int changesStart = 0;\n@@ -503,7 +502,1 @@\n-            if (!n.initIndex(i)) {\n-                if (oldNames == null) {\n-                    oldNames = names.clone();\n-                    changesStart = i;\n-                }\n-                names[i] = n.cloneWithIndex(i);\n-            }\n+            names[i] = n.withIndex(i);\n@@ -514,6 +507,3 @@\n-            int startFixing = arity;\n-            if (startFixing <= changesStart)\n-                startFixing = changesStart+1;\n-            for (int i = startFixing; i < names.length; i++) {\n-                Name fixed = names[i].replaceNames(oldNames, names, changesStart, i);\n-                names[i] = fixed.newIndex(i);\n+            for (int i = Math.max(1, arity); i < names.length; i++) {\n+                Name fixed = names[i].replaceNames(oldNames, names, 0, i);\n+                names[i] = fixed.withIndex(i);\n@@ -1342,1 +1332,1 @@\n-        @Stable short index;\n+        final short index;\n@@ -1349,1 +1339,1 @@\n-        private Name(int index, BasicType type, NamedFunction function, Object[] arguments) {\n+        private Name(int index, BasicType type, NamedFunction function, Object[] arguments, Object constraint) {\n@@ -1354,8 +1344,0 @@\n-            this.constraint = null;\n-            assert(this.index == index && typesMatch(function, this.arguments));\n-        }\n-        private Name(Name that, Object constraint) {\n-            this.index = that.index;\n-            this.type = that.type;\n-            this.function = that.function;\n-            this.arguments = that.arguments;\n@@ -1363,0 +1345,1 @@\n+            assert(this.index == index && typesMatch(function, arguments));\n@@ -1366,0 +1349,1 @@\n+\n@@ -1377,1 +1361,1 @@\n-            this(-1, function.returnType(), function, EMPTY_ARGS);\n+            this(-1, function.returnType(), function, EMPTY_ARGS, null);\n@@ -1380,1 +1364,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg });\n+            this(-1, function.returnType(), function, new Object[] { arg }, null);\n@@ -1383,1 +1367,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg0, arg1 });\n+            this(-1, function.returnType(), function, new Object[] { arg0, arg1 }, null);\n@@ -1386,1 +1370,1 @@\n-            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class));\n+            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class), null);\n@@ -1390,1 +1374,1 @@\n-            this(index, type, null, null);\n+            this(index, type, null, null, null);\n@@ -1397,7 +1381,1 @@\n-        boolean initIndex(int i) {\n-            if (index != i) {\n-                if (index != -1)  return false;\n-                index = (short)i;\n-            }\n-            return true;\n-        }\n+\n@@ -1408,7 +1386,3 @@\n-        Name newIndex(int i) {\n-            if (initIndex(i))  return this;\n-            return cloneWithIndex(i);\n-        }\n-        Name cloneWithIndex(int i) {\n-            Object[] newArguments = (arguments == null) ? null : arguments.clone();\n-            return new Name(i, type, function, newArguments).withConstraint(constraint);\n+        Name withIndex(int i) {\n+            if (i == this.index) return this;\n+            return new Name(i, type, function, arguments, constraint);\n@@ -1416,0 +1390,1 @@\n+\n@@ -1418,1 +1393,1 @@\n-            return new Name(this, constraint);\n+            return new Name(index, type, function, arguments, constraint);\n@@ -1420,0 +1395,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":23,"deletions":47,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -568,10 +568,2 @@\n-        if (suffix != null) {\n-            \/\/ newArray variant that deals with prepending any trailing constant\n-            \/\/\n-            \/\/ initialLengthCoder is adjusted to have the correct coder\n-            \/\/ and length: The newArrayWithSuffix method expects only the coder of the\n-            \/\/ suffix to be encoded into indexCoder\n-            initialLengthCoder -= suffix.length();\n-            newArrayCombinator = newArrayWithSuffix(suffix);\n-        } else {\n-            newArrayCombinator = newArray();\n+        if (suffix == null || suffix.isEmpty()) {\n+            suffix = \"\";\n@@ -579,0 +571,8 @@\n+        \/\/ newArray variant that deals with prepending any trailing constant\n+        \/\/\n+        \/\/ initialLengthCoder is adjusted to have the correct coder\n+        \/\/ and length: The newArrayWithSuffix method expects only the coder of the\n+        \/\/ suffix to be encoded into indexCoder\n+        initialLengthCoder -= suffix.length();\n+        newArrayCombinator = newArrayWithSuffix(suffix);\n+\n@@ -741,3 +741,1 @@\n-            NO_PREFIX_PREPENDERS[idx] = prepend = JLA.stringConcatHelper(\"prepend\",\n-                    methodType(long.class, long.class, byte[].class,\n-                            Wrapper.asPrimitiveType(cl))).rebind();\n+            NO_PREFIX_PREPENDERS[idx] = prepend = MethodHandles.insertArguments(prepender(cl), 3, \"\");\n@@ -905,10 +903,0 @@\n-    private @Stable static MethodHandle NEW_ARRAY;\n-    private static MethodHandle newArray() {\n-        MethodHandle mh = NEW_ARRAY;\n-        if (mh == null) {\n-            NEW_ARRAY = mh =\n-                    JLA.stringConcatHelper(\"newArray\", methodType(byte[].class, long.class));\n-        }\n-        return mh;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -145,4 +145,4 @@\n- * For IPv4 address format, please refer to <A\n- * HREF=\"Inet4Address.html#format\">Inet4Address#format<\/A>; For IPv6\n- * address format, please refer to <A\n- * HREF=\"Inet6Address.html#format\">Inet6Address#format<\/A>.\n+ * For IPv4 address format, please refer to the supported\n+ * {@linkplain Inet4Address##format IPv4 address textual representations};\n+ * For IPv6 address format, please refer to the supported\n+ * {@linkplain Inet6Address##format IPv6 address textual representations}.\n@@ -150,1 +150,1 @@\n- * <p> There is a <a href=\"doc-files\/net-properties.html#Ipv4IPv6\">couple of\n+ * <p> There are a <a href=\"doc-files\/net-properties.html#Ipv4IPv6\">couple of\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -331,2 +331,2 @@\n-     * @throws  IOException if the bind operation fails, or if the socket\n-     *                     is already bound.\n+     * @throws  IOException if the bind operation fails, the socket\n+     *                      is already bound or the socket is closed.\n@@ -360,2 +360,2 @@\n-     * @throws  IOException if the bind operation fails, or if the socket\n-     *                     is already bound.\n+     * @throws  IOException if the bind operation fails, the socket\n+     *                      is already bound or the socket is closed.\n@@ -521,1 +521,1 @@\n-     *               connection.\n+     *               connection, the socket is not bound or the socket is closed.\n@@ -739,0 +739,3 @@\n+     * <p> Once closed, several of the methods defined by this class will throw\n+     * an exception if invoked on the closed socket.\n+     *\n@@ -809,2 +812,2 @@\n-     * @throws  SocketException if there is an error in the underlying protocol,\n-     *          such as a TCP error\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -827,1 +830,1 @@\n-     * @throws    IOException if an I\/O error occurs\n+     * @throws IOException if an I\/O error occurs or the socket is closed.\n@@ -890,2 +893,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol, such as a TCP error,\n+     *         or the socket is closed.\n@@ -1004,2 +1007,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1032,2 +1035,2 @@\n-     * @throws    SocketException if there is an error\n-     *            in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -686,1 +686,2 @@\n-     * @throws  IOException if an error occurs during the connection\n+     * @throws  IOException if an error occurs during the connection, the socket\n+     *          is already connected or the socket is closed\n@@ -720,1 +721,2 @@\n-     * @throws  IOException if an error occurs during the connection\n+     * @throws  IOException if an error occurs during the connection, the socket\n+     *          is already connected or the socket is closed\n@@ -783,2 +785,2 @@\n-     * @throws  IOException if the bind operation fails, or if the socket\n-     *                     is already bound.\n+     * @throws  IOException if the bind operation fails, the socket\n+     *          is already bound or the socket is closed.\n@@ -1177,2 +1179,2 @@\n-     * @throws     IOException  if an I\/O error occurs when creating the\n-     *               output stream or if the socket is not connected.\n+     * @throws IOException  if an I\/O error occurs when creating the\n+     *         output stream, the socket is not connected or the socket is closed.\n@@ -1254,2 +1256,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1272,2 +1274,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1292,3 +1294,3 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n-     * @throws    IllegalArgumentException if the linger value is negative.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n+     * @throws  IllegalArgumentException if the linger value is negative.\n@@ -1321,2 +1323,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1371,2 +1373,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1390,2 +1392,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1412,2 +1414,2 @@\n-     * @throws  SocketException if there is an error in the underlying protocol,\n-     *          such as a TCP error\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1431,2 +1433,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1458,3 +1460,0 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n-     *\n@@ -1464,2 +1463,3 @@\n-     * @throws    IllegalArgumentException if the\n-     * value is 0 or is negative.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n+     * @throws  IllegalArgumentException if the value is 0 or is negative.\n@@ -1484,2 +1484,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1532,2 +1532,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1553,2 +1553,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1573,2 +1573,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1589,2 +1589,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1640,2 +1640,2 @@\n-     * @throws SocketException if there is an error setting the\n-     * traffic class or type-of-service\n+     * @throws SocketException if there is an error setting the traffic class or type-of-service,\n+     *         or the socket is closed.\n@@ -1664,2 +1664,2 @@\n-     * @throws SocketException if there is an error obtaining the\n-     * traffic class or type-of-service value.\n+     * @throws SocketException if there is an error obtaining the traffic class\n+     *         or type-of-service value, or the socket is closed.\n@@ -1718,2 +1718,2 @@\n-     * @throws    SocketException if there is an error\n-     * in the underlying protocol, such as a TCP error.\n+     * @throws SocketException if there is an error in the underlying protocol,\n+     *         such as a TCP error, or the socket is closed.\n@@ -1736,2 +1736,3 @@\n-     * use (i.e. can't be reconnected or rebound). A new socket needs to be\n-     * created.\n+     * use (i.e. can't be reconnected or rebound) and several of the methods defined\n+     * by this class will throw an exception if invoked on the closed socket. A new\n+     * socket needs to be created.\n@@ -1770,2 +1771,2 @@\n-     * @throws    IOException if an I\/O error occurs when shutting down this\n-     * socket.\n+     * @throws IOException if an I\/O error occurs when shutting down this socket, the\n+     *         socket is not connected or the socket is closed.\n@@ -1800,2 +1801,2 @@\n-     * @throws    IOException if an I\/O error occurs when shutting down this\n-     * socket.\n+     * @throws IOException if an I\/O error occurs when shutting down this socket, the socket\n+     *         is not connected or the socket is closed.\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":51,"deletions":50,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-     * <a href=\"doc-files\/net-properties.html#Ipv4IPv6\">System Properties<\/a> which affect\n+     * <a href=\"..\/doc-files\/net-properties.html#Ipv4IPv6\">System Properties<\/a> which affect\n","filename":"src\/java.base\/share\/classes\/java\/net\/spi\/InetAddressResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,8 +59,0 @@\n-\n-    \/\/ Cached unaligned-access capability\n-    protected static final boolean UNALIGNED = Bits.unaligned();\n-\n-    \/\/ Base address, used in all indexing calculations\n-    \/\/ NOTE: moved up to Buffer.java for speed in JNI GetDirectBufferAddress\n-    \/\/    protected long address;\n-\n@@ -77,0 +69,2 @@\n+    \/\/ Cached unaligned-access capability\n+    static final boolean UNALIGNED = Bits.unaligned();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,2 @@\n+            if (keys == null)\n+                return;\n@@ -236,1 +238,1 @@\n-                    k = ((AbstractSelector)sel).register(this, ops, att);\n+                    k = ((AbstractSelector) sel).register(this, ops, att);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectableChannel.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-                          StringBuffer buffer) {\n+                          Format.StringBuf buffer) {\n@@ -96,1 +96,1 @@\n-                          int start, int end, StringBuffer buffer) {\n+                          int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -517,1 +517,7 @@\n-        return format((double)number, toAppendTo, status);\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(long number, StringBuf toAppendTo,\n+                     FieldPosition status) {\n+        return format((double) number, toAppendTo, status);\n@@ -534,0 +540,6 @@\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(double number, StringBuf toAppendTo,\n+                         FieldPosition status) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -542,0 +542,16 @@\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, fieldPosition);\n+            case Integer i -> format(i.longValue(), toAppendTo, fieldPosition);\n+            case Short s -> format(s.longValue(), toAppendTo, fieldPosition);\n+            case Byte b -> format(b.longValue(), toAppendTo, fieldPosition);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, fieldPosition);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, fieldPosition);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, fieldPosition);\n+            case BigDecimal bd -> format(bd, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n+            case BigInteger bi -> format(bi, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n+            case Number n -> format(n.doubleValue(), toAppendTo, fieldPosition);\n+            case null -> throw new IllegalArgumentException(\"Cannot format null as a number\");\n+            default -> throw new IllegalArgumentException(\n+                    String.format(\"Cannot format %s as a number\", number.getClass().getName()));\n+        };\n+    }\n@@ -543,22 +559,19 @@\n-        if (number == null) {\n-            throw new IllegalArgumentException(\"Cannot format null as a number\");\n-        }\n-\n-        if (number instanceof Long || number instanceof Integer\n-                || number instanceof Short || number instanceof Byte\n-                || number instanceof AtomicInteger\n-                || number instanceof AtomicLong\n-                || (number instanceof BigInteger\n-                && ((BigInteger) number).bitLength() < 64)) {\n-            return format(((Number) number).longValue(), toAppendTo,\n-                    fieldPosition);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal) number, toAppendTo, fieldPosition);\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger) number, toAppendTo, fieldPosition);\n-        } else if (number instanceof Number) {\n-            return format(((Number) number).doubleValue(), toAppendTo, fieldPosition);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format \"\n-                    + number.getClass().getName() + \" as a number\");\n-        }\n+    @Override\n+    StringBuf format(Object number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition fieldPosition) {\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, fieldPosition);\n+            case Integer i -> format(i.longValue(), toAppendTo, fieldPosition);\n+            case Short s -> format(s.longValue(), toAppendTo, fieldPosition);\n+            case Byte b -> format(b.longValue(), toAppendTo, fieldPosition);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, fieldPosition);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, fieldPosition);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, fieldPosition);\n+            case BigDecimal bd -> format(bd, toAppendTo, fieldPosition);\n+            case BigInteger bi -> format(bi, toAppendTo, fieldPosition);\n+            case Number n -> format(n.doubleValue(), toAppendTo, fieldPosition);\n+            case null -> throw new IllegalArgumentException(\"Cannot format null as a number\");\n+            default -> throw new IllegalArgumentException(\n+                    String.format(\"Cannot format %s as a number\", number.getClass().getName()));\n+        };\n@@ -594,0 +607,9 @@\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(double number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n+\n@@ -599,1 +621,1 @@\n-    private StringBuffer format(double number, StringBuffer result,\n+    private StringBuf format(double number, StringBuf result,\n@@ -684,0 +706,9 @@\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(long number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n+\n@@ -689,1 +720,1 @@\n-    private StringBuffer format(long number, StringBuffer result, FieldDelegate delegate) {\n+    private StringBuf format(long number, StringBuf result, FieldDelegate delegate) {\n@@ -760,1 +791,1 @@\n-     * @return        the {@code StringBuffer} passed in as {@code result}\n+     * @return        the {@code StringBuf} passed in as {@code result}\n@@ -767,2 +798,2 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n-            FieldPosition fieldPosition) {\n+    private StringBuf format(BigDecimal number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -776,1 +807,1 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n+    private StringBuf format(BigDecimal number, StringBuf result,\n@@ -846,1 +877,1 @@\n-     * @return        the {@code StringBuffer} passed in as {@code result}\n+     * @return        the {@code StringBuf} passed in as {@code result}\n@@ -853,2 +884,2 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n-            FieldPosition fieldPosition) {\n+    private StringBuf format(BigInteger number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -862,1 +893,1 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n+    private StringBuf format(BigInteger number, StringBuf result,\n@@ -939,1 +970,1 @@\n-    private void appendPrefix(StringBuffer result, String prefix,\n+    private void appendPrefix(StringBuf result, String prefix,\n@@ -955,1 +986,1 @@\n-    private void appendSuffix(StringBuffer result, String suffix,\n+    private void appendSuffix(StringBuf result, String suffix,\n@@ -971,1 +1002,1 @@\n-    private void append(StringBuffer result, String string,\n+    private void append(StringBuf result, String string,\n@@ -1137,14 +1168,13 @@\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (obj instanceof Double || obj instanceof Float) {\n-            format(((Number) obj).doubleValue(), sb, delegate);\n-        } else if (obj instanceof Long || obj instanceof Integer\n-                || obj instanceof Short || obj instanceof Byte\n-                || obj instanceof AtomicInteger || obj instanceof AtomicLong) {\n-            format(((Number) obj).longValue(), sb, delegate);\n-        } else if (obj instanceof BigDecimal) {\n-            format((BigDecimal) obj, sb, delegate);\n-        } else if (obj instanceof BigInteger) {\n-            format((BigInteger) obj, sb, delegate, false);\n-        } else if (obj == null) {\n-            throw new NullPointerException(\n+        StringBuf sb = StringBufFactory.of();\n+        switch (obj) {\n+            case Double d -> format(d.doubleValue(), sb, delegate);\n+            case Float f -> format(f.doubleValue(), sb, delegate);\n+            case Long l -> format(l.longValue(), sb, delegate);\n+            case Integer i -> format(i.longValue(), sb, delegate);\n+            case Short s -> format(s.longValue(), sb, delegate);\n+            case Byte b -> format(b.longValue(), sb, delegate);\n+            case AtomicInteger ai -> format(ai.longValue(), sb, delegate);\n+            case AtomicLong al -> format(al.longValue(), sb, delegate);\n+            case BigDecimal bd -> format(bd, sb, delegate);\n+            case BigInteger bi -> format(bi, sb, delegate, false);\n+            case null -> throw new NullPointerException(\n@@ -1152,2 +1182,1 @@\n-        } else {\n-            throw new IllegalArgumentException(\n+            default -> throw new IllegalArgumentException(\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":80,"deletions":51,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -349,0 +349,13 @@\n+    @Override\n+    final StringBuf format(Object obj, StringBuf toAppendTo,\n+                           FieldPosition fieldPosition) {\n+        if (obj instanceof Date) {\n+            return format((Date) obj, toAppendTo, fieldPosition);\n+        } else if (obj instanceof Number) {\n+            return format(new Date(((Number) obj).longValue()),\n+                    toAppendTo, fieldPosition);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot format given Object as a Date\");\n+        }\n+    }\n+\n@@ -374,0 +387,5 @@\n+    StringBuf format(Date date, StringBuf toAppendTo,\n+                     FieldPosition fieldPosition) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -382,2 +400,8 @@\n-        return format(date, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (\"java.text\".equals(getClass().getPackageName())\n+                    && \"java.text\".equals(numberFormat.getClass().getPackageName())) {\n+            return format(date, StringBufFactory.of(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(date, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -551,16 +551,32 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-                   number instanceof Short || number instanceof Byte ||\n-                   number instanceof AtomicInteger ||\n-                   number instanceof AtomicLong ||\n-                   (number instanceof BigInteger &&\n-                    ((BigInteger)number).bitLength () < 64)) {\n-            return format(((Number)number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof BigDecimal) {\n-            return format((BigDecimal)number, toAppendTo, pos);\n-        } else if (number instanceof BigInteger) {\n-            return format((BigInteger)number, toAppendTo, pos);\n-        } else if (number instanceof Number) {\n-            return format(((Number)number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case BigDecimal bd -> format(bd, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+            case BigInteger bi -> format(bi, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n+    }\n+\n+    @Override\n+    final StringBuf format(Object number,\n+                           StringBuf toAppendTo,\n+                           FieldPosition pos) {\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case BigDecimal bd -> format(bd, toAppendTo, pos);\n+            case BigInteger bi -> format(bi, toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n@@ -591,0 +607,6 @@\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(double number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n@@ -622,2 +644,2 @@\n-    StringBuffer format(double number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(double number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -669,1 +691,1 @@\n-    boolean handleNaN(double number, StringBuffer result,\n+    boolean handleNaN(double number, StringBuf result,\n@@ -694,1 +716,1 @@\n-    boolean handleInfinity(double number, StringBuffer result,\n+    boolean handleInfinity(double number, StringBuf result,\n@@ -723,1 +745,1 @@\n-    StringBuffer doubleSubformat(double number, StringBuffer result,\n+    StringBuf doubleSubformat(double number, StringBuf result,\n@@ -764,0 +786,8 @@\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    StringBuf format(long number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+\n@@ -777,2 +807,2 @@\n-    StringBuffer format(long number, StringBuffer result,\n-                               FieldDelegate delegate) {\n+    StringBuf format(long number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -852,2 +882,2 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n-                                FieldPosition fieldPosition) {\n+    private StringBuf format(BigDecimal number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -868,2 +898,2 @@\n-    StringBuffer format(BigDecimal number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(BigDecimal number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -911,2 +941,2 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n-                               FieldPosition fieldPosition) {\n+    private StringBuf format(BigInteger number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -929,2 +959,2 @@\n-    StringBuffer format(BigInteger number, StringBuffer result,\n-                               FieldDelegate delegate, boolean formatLong) {\n+    StringBuf format(BigInteger number, StringBuf result,\n+                     FieldDelegate delegate, boolean formatLong) {\n@@ -988,19 +1018,17 @@\n-                         new CharacterIteratorFieldDelegate();\n-        StringBuffer sb = new StringBuffer();\n-\n-        if (obj instanceof Double || obj instanceof Float) {\n-            format(((Number)obj).doubleValue(), sb, delegate);\n-        } else if (obj instanceof Long || obj instanceof Integer ||\n-                   obj instanceof Short || obj instanceof Byte ||\n-                   obj instanceof AtomicInteger || obj instanceof AtomicLong) {\n-            format(((Number)obj).longValue(), sb, delegate);\n-        } else if (obj instanceof BigDecimal) {\n-            format((BigDecimal)obj, sb, delegate);\n-        } else if (obj instanceof BigInteger) {\n-            format((BigInteger)obj, sb, delegate, false);\n-        } else if (obj == null) {\n-            throw new NullPointerException(\n-                \"formatToCharacterIterator must be passed non-null object\");\n-        } else {\n-            throw new IllegalArgumentException(\n-                \"Cannot format given Object as a Number\");\n+                new CharacterIteratorFieldDelegate();\n+        StringBuf sb = StringBufFactory.of();\n+        switch (obj) {\n+            case Double d -> format(d.doubleValue(), sb, delegate);\n+            case Float f -> format(f.doubleValue(), sb, delegate);\n+            case Long l -> format(l.longValue(), sb, delegate);\n+            case Integer i -> format(i.longValue(), sb, delegate);\n+            case Short s -> format(s.longValue(), sb, delegate);\n+            case Byte b -> format(b.longValue(), sb, delegate);\n+            case AtomicInteger ai -> format(ai.longValue(), sb, delegate);\n+            case AtomicLong al -> format(al.longValue(), sb, delegate);\n+            case BigDecimal bd -> format(bd, sb, delegate);\n+            case BigInteger bi -> format(bi, sb, delegate, false);\n+            case null -> throw new NullPointerException(\n+                    \"formatToCharacterIterator must be passed non-null object\");\n+            default -> throw new IllegalArgumentException(\n+                    \"Cannot format given Object as a Number\");\n@@ -1757,1 +1785,1 @@\n-     * Sets the {@code DigitList} used by this {@code DecimalFormat}\n+     * Utility method that sets the {@code DigitList} used by this {@code DecimalFormat}\n@@ -1759,0 +1787,1 @@\n+     *\n@@ -1762,0 +1791,2 @@\n+     * @throws AssertionError if provided a Number subclass that is not supported\n+     *         by {@code DigitList}\n@@ -1764,9 +1795,7 @@\n-\n-        if (number instanceof Double) {\n-            digitList.set(isNegative, (Double) number, maxDigits, true);\n-        } else if (number instanceof BigDecimal) {\n-            digitList.set(isNegative, (BigDecimal) number, maxDigits, true);\n-        } else if (number instanceof Long) {\n-            digitList.set(isNegative, (Long) number, maxDigits);\n-        } else if (number instanceof BigInteger) {\n-            digitList.set(isNegative, (BigInteger) number, maxDigits);\n+        switch (number) {\n+            case Double d -> digitList.set(isNegative, d, maxDigits, true);\n+            case BigDecimal bd -> digitList.set(isNegative, bd, maxDigits, true);\n+            case Long l -> digitList.set(isNegative, l, maxDigits);\n+            case BigInteger bi -> digitList.set(isNegative, bi, maxDigits);\n+            default -> throw new AssertionError(\n+                    String.format(\"DigitList does not support %s\", number.getClass().getName()));\n@@ -1782,1 +1811,1 @@\n-    private StringBuffer subformat(StringBuffer result, FieldDelegate delegate,\n+    private StringBuf subformat(StringBuf result, FieldDelegate delegate,\n@@ -1824,1 +1853,1 @@\n-    void subformatNumber(StringBuffer result, FieldDelegate delegate,\n+    void subformatNumber(StringBuf result, FieldDelegate delegate,\n@@ -2111,1 +2140,1 @@\n-    private void append(StringBuffer result, String string,\n+    private void append(StringBuf result, String string,\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":92,"deletions":63,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, Format.StringBuf buffer) {\n@@ -42,1 +42,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, Format.StringBuf buffer) {\n@@ -302,1 +302,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,3 @@\n-     * Formats an object to produce a string. This is equivalent to\n+     * Formats an object to produce a string.\n+     *\n+     * @implSpec This method returns a string that would be equal to the string returned by\n@@ -156,1 +158,0 @@\n-     *\n@@ -163,1 +164,5 @@\n-        return format(obj, new StringBuffer(), new FieldPosition(0)).toString();\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(obj, StringBufFactory.of(), new FieldPosition(0)).toString();\n+        } else {\n+            return format(obj, new StringBuffer(), new FieldPosition(0)).toString();\n+        }\n@@ -188,0 +193,6 @@\n+    StringBuf format(Object obj,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -199,4 +210,0 @@\n-     * <p>The default implementation creates an\n-     * {@code AttributedCharacterIterator} with no attributes. Subclasses\n-     * that support fields should override this and create an\n-     * {@code AttributedCharacterIterator} with meaningful attributes.\n@@ -204,0 +211,4 @@\n+     * @apiNote Subclasses that support fields should override this and create an\n+     * {@code AttributedCharacterIterator} with meaningful attributes.\n+     * @implSpec The default implementation creates an\n+     * {@code AttributedCharacterIterator} with no attributes.\n@@ -397,1 +408,1 @@\n-                              int end, StringBuffer buffer);\n+                              int end, StringBuf buffer);\n@@ -411,1 +422,33 @@\n-                              int start, int end, StringBuffer buffer);\n+                              int start, int end, StringBuf buffer);\n+    }\n+\n+    \/**\n+     * StringBuf is the minimal common interface of {@code StringBuffer} and {@code StringBuilder}.\n+     * It is used by the various {@code Format} implementations as the internal string buffer.\n+     *\/\n+    sealed interface StringBuf\n+            permits StringBufFactory.StringBufferImpl, StringBufFactory.StringBuilderImpl {\n+\n+        int length();\n+\n+        String substring(int start, int end);\n+\n+        String substring(int start);\n+\n+        StringBuf append(char c);\n+\n+        StringBuf append(String str);\n+\n+        StringBuf append(int i);\n+\n+        StringBuf append(char[] str, int offset, int len);\n+\n+        StringBuf append(CharSequence s, int start, int end);\n+\n+        StringBuf append(StringBuffer sb);\n+\n+        boolean isProxyStringBuilder();\n+\n+        StringBuffer asStringBuffer();\n+\n+        StringBuilder asStringBuilder();\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":53,"deletions":10,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-        return format(input, new StringBuffer(),\n+        return format(input, StringBufFactory.of(),\n@@ -384,0 +384,12 @@\n+        return format(obj, StringBufFactory.of(toAppendTo)).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuf format(Object obj, StringBuf toAppendTo, FieldPosition pos) {\n+        Objects.requireNonNull(obj);\n+        Objects.requireNonNull(toAppendTo);\n+\n+        return format(obj, toAppendTo);\n+    }\n+\n+    private StringBuf format(Object obj, StringBuf toAppendTo) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n- * <p>\n+ *\n@@ -375,1 +375,0 @@\n- * <p>\n@@ -1030,1 +1029,1 @@\n-        return subformat(arguments, result, pos, null);\n+        return subformat(arguments, StringBufFactory.of(result), pos, null).asStringBuffer();\n@@ -1035,1 +1034,2 @@\n-     * to format the given arguments. This is equivalent to\n+     * to format the given arguments.\n+     * This method returns a string that would be equal to the string returned by\n@@ -1079,0 +1079,6 @@\n+        return subformat((Object[]) arguments, StringBufFactory.of(result), pos, null).asStringBuffer();\n+    }\n+\n+    @Override\n+    final StringBuf format(Object arguments, StringBuf result,\n+                           FieldPosition pos) {\n@@ -1119,1 +1125,1 @@\n-        StringBuffer result = new StringBuffer();\n+        StringBuf result = StringBufFactory.of();\n@@ -1475,1 +1481,1 @@\n-    private StringBuffer subformat(Object[] arguments, StringBuffer result,\n+    private StringBuf subformat(Object[] arguments, StringBuf result,\n@@ -1585,1 +1591,1 @@\n-     * {@code iterator} to the StringBuffer {@code result}.\n+     * {@code iterator} to the StringBuf {@code result}.\n@@ -1587,1 +1593,1 @@\n-    private void append(StringBuffer result, CharacterIterator iterator) {\n+    private void append(StringBuf result, CharacterIterator iterator) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -305,11 +305,28 @@\n-        if (number instanceof Long || number instanceof Integer ||\n-            number instanceof Short || number instanceof Byte ||\n-            number instanceof AtomicInteger || number instanceof AtomicLong ||\n-            (number instanceof BigInteger &&\n-             ((BigInteger)number).bitLength() < 64)) {\n-            return format(((Number)number).longValue(), toAppendTo, pos);\n-        } else if (number instanceof Number) {\n-            return format(((Number)number).doubleValue(), toAppendTo, pos);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n-        }\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n+    }\n+\n+    @Override\n+    StringBuf format(Object number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n+        return switch (number) {\n+            case Long l -> format(l.longValue(), toAppendTo, pos);\n+            case Integer i -> format(i.longValue(), toAppendTo, pos);\n+            case Short s -> format(s.longValue(), toAppendTo, pos);\n+            case Byte b -> format(b.longValue(), toAppendTo, pos);\n+            case AtomicInteger ai -> format(ai.longValue(), toAppendTo, pos);\n+            case AtomicLong al -> format(al.longValue(), toAppendTo, pos);\n+            case BigInteger bi when bi.bitLength() < 64 -> format(bi.longValue(), toAppendTo, pos);\n+            case Number n -> format(n.doubleValue(), toAppendTo, pos);\n+            case null, default -> throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        };\n@@ -350,2 +367,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(number, StringBufFactory.of(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -370,2 +392,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(number, StringBufFactory.of(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -397,0 +424,6 @@\n+    StringBuf format(double number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -420,0 +453,6 @@\n+    StringBuf format(long number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":54,"deletions":15,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -971,0 +971,7 @@\n+        return format(date, StringBufFactory.of(toAppendTo), pos.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    final StringBuf format(Date date, StringBuf toAppendTo,\n+                           FieldPosition pos) {\n+        pos.beginIndex = pos.endIndex = 0;\n@@ -975,1 +982,1 @@\n-    private StringBuffer format(Date date, StringBuffer toAppendTo,\n+    private StringBuf format(Date date, StringBuf toAppendTo,\n@@ -1027,1 +1034,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuf sb = StringBufFactory.of();\n@@ -1133,1 +1140,1 @@\n-                           FieldDelegate delegate, StringBuffer buffer,\n+                           FieldDelegate delegate, StringBuf buffer,\n@@ -1323,1 +1330,5 @@\n-            CalendarUtils.sprintf0d(buffer, num, width);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), num, width);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), num, width);\n+            }\n@@ -1343,1 +1354,5 @@\n-            CalendarUtils.sprintf0d(buffer, value \/ 60, 2);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), value \/ 60, 2);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), value \/ 60, 2);\n+            }\n@@ -1351,1 +1366,5 @@\n-            CalendarUtils.sprintf0d(buffer, value % 60, 2);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), value % 60, 2);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), value % 60, 2);\n+            }\n@@ -1385,1 +1404,1 @@\n-    private void zeroPaddingNumber(int value, int minDigits, int maxDigits, StringBuffer buffer)\n+    private void zeroPaddingNumber(int value, int minDigits, int maxDigits, StringBuf buffer)\n@@ -1428,1 +1447,11 @@\n-        numberFormat.format((long)value, buffer, DontCareFieldPosition.INSTANCE);\n+        if (buffer.isProxyStringBuilder()) {\n+            \/\/User can set numberFormat with a user-defined NumberFormat which\n+            \/\/not override format(long, StringBuf, FieldPosition).\n+            if (\"java.text\".equals(numberFormat.getClass().getPackageName())) {\n+                numberFormat.format((long) value, buffer, DontCareFieldPosition.INSTANCE);\n+            } else {\n+                buffer.append(numberFormat.format((long) value, new StringBuffer(), DontCareFieldPosition.INSTANCE));\n+            }\n+        } else {\n+            numberFormat.format((long) value, buffer.asStringBuffer(), DontCareFieldPosition.INSTANCE);\n+        }\n@@ -2568,1 +2597,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.text;\n+\n+import java.text.Format.StringBuf;\n+\n+\/**\n+ * {@code StringBufFactory} creates implementations of {@code Format.StringBuf},\n+ * which is an interface with the minimum overlap required to support {@code StringBuffer}\n+ * and {@code StringBuilder} in {@code Format}. This allows for {@code StringBuilder} to be used\n+ * in place of {@code StringBuffer} to provide performance benefits for JDK internal\n+ * {@code Format} subclasses.\n+ *\/\n+final class StringBufFactory {\n+\n+    private StringBufFactory() {\n+    }\n+\n+    static StringBuf of(StringBuffer sb) {\n+        return new StringBufferImpl(sb);\n+    }\n+\n+    static StringBuf of(StringBuilder sb) {\n+        return new StringBuilderImpl(sb);\n+    }\n+\n+    static StringBuf of() {\n+        return new StringBuilderImpl();\n+    }\n+\n+    final static class StringBufferImpl implements StringBuf {\n+        private final StringBuffer sb;\n+\n+        StringBufferImpl(StringBuffer sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public String substring(int start) {\n+            return sb.substring(start);\n+        }\n+\n+        @Override\n+        public StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(CharSequence s, int start, int end) {\n+            sb.append(s, start, end);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(StringBuffer asb) {\n+            sb.append(asb);\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean isProxyStringBuilder() {\n+            return false;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            throw new AssertionError(\"Can't cast StringBuffer to StringBuilder\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+\n+    final static class StringBuilderImpl implements StringBuf {\n+        private final StringBuilder sb;\n+\n+        StringBuilderImpl(StringBuilder sb) {\n+            this.sb = sb;\n+        }\n+\n+        StringBuilderImpl() {\n+            this.sb = new StringBuilder();\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public String substring(int start) {\n+            return sb.substring(start);\n+        }\n+\n+        @Override\n+        public StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(CharSequence s, int start, int end) {\n+            sb.append(s, start, end);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(StringBuffer asb) {\n+            sb.append(asb);\n+            return this;\n+        }\n+\n+\n+        @Override\n+        public boolean isProxyStringBuilder() {\n+            return true;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            throw new AssertionError(\"Can't cast StringBuilder to StringBuffer\");\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2157,3 +2157,1 @@\n-                buf.append(yearValue - 10000).deleteCharAt(1);\n-            } else {\n-                buf.append(yearValue + 10000).deleteCharAt(0);\n+                buf.append('-');\n@@ -2161,0 +2159,2 @@\n+            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n+            buf.append(absYear);\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,0 +95,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -1643,2 +1645,7 @@\n-                if (nanoValue % 1000_000 == 0) {\n-                    buf.append(Integer.toString((nanoValue \/ 1000_000) + 1000).substring(1));\n+                int zeros = 9 - DecimalDigits.stringSize(nanoValue);\n+                if (zeros > 0) {\n+                    buf.repeat('0', zeros);\n+                }\n+                int digits;\n+                if (nanoValue % 1_000_000 == 0) {\n+                    digits = nanoValue \/ 1_000_000;\n@@ -1646,1 +1653,1 @@\n-                    buf.append(Integer.toString((nanoValue \/ 1000) + 1000_000).substring(1));\n+                    digits = nanoValue \/ 1000;\n@@ -1648,1 +1655,1 @@\n-                    buf.append(Integer.toString((nanoValue) + 1000_000_000).substring(1));\n+                    digits = nanoValue;\n@@ -1650,0 +1657,1 @@\n+                buf.append(digits);\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -124,0 +124,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -2911,18 +2913,0 @@\n-        \/*\n-         * Copied from Long.stringSize\n-         *\/\n-        private static int stringSize(long x) {\n-            int d = 1;\n-            if (x >= 0) {\n-                d = 0;\n-                x = -x;\n-            }\n-            long p = -10;\n-            for (int i = 1; i < 19; i++) {\n-                if (x > p)\n-                    return i + d;\n-                p = 10 * p;\n-            }\n-            return 19 + d;\n-        }\n-\n@@ -2937,1 +2921,1 @@\n-            int size = stringSize(value);\n+            int size = DecimalDigits.stringSize(value);\n@@ -2968,2 +2952,3 @@\n-            for (int i = 0; i < minWidth - size; i++) {\n-                buf.append(zeroDigit);\n+            int zeros = minWidth - size;\n+            if (zeros > 0) {\n+                buf.repeat(zeroDigit, zeros);\n@@ -3371,11 +3356,0 @@\n-        \/\/ Simplified variant of Integer.stringSize that assumes positive values\n-        private static int stringSize(int x) {\n-            int p = 10;\n-            for (int i = 1; i < 10; i++) {\n-                if (x < p)\n-                    return i;\n-                p = 10 * p;\n-            }\n-            return 10;\n-        }\n-\n@@ -3402,1 +3376,1 @@\n-            int stringSize = stringSize(val);\n+            int stringSize = DecimalDigits.stringSize(val);\n@@ -3413,3 +3387,1 @@\n-                    for (int i = 0; i < width; i++) {\n-                        buf.append(zero);\n-                    }\n+                    buf.repeat(zero, width);\n@@ -3422,2 +3394,3 @@\n-                for (int i = 9 - stringSize; i > 0; i--) {\n-                    buf.append(zero);\n+                int zeros = 9 - stringSize;\n+                if (zeros > 0) {\n+                    buf.repeat(zero, zeros);\n@@ -3597,3 +3570,1 @@\n-                    for (int i = 0; i < minWidth; i++) {\n-                        buf.append(decimalStyle.getZeroDigit());\n-                    }\n+                    buf.repeat(decimalStyle.getZeroDigit(), minWidth);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":12,"deletions":41,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -38,1 +38,3 @@\n-import jdk.internal.misc.VirtualThreads;\n+import java.util.concurrent.TimeUnit;\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -179,1 +181,1 @@\n-                VirtualThreads.unpark(thread);\n+                JLA.unparkVirtualThread(thread);\n@@ -219,1 +221,1 @@\n-                VirtualThreads.park();\n+                JLA.parkVirtualThread();\n@@ -267,1 +269,1 @@\n-                    VirtualThreads.park(nanos);\n+                    JLA.parkVirtualThread(nanos);\n@@ -314,5 +316,1 @@\n-            if (t.isVirtual()) {\n-                VirtualThreads.parkUntil(deadline);\n-            } else {\n-                U.park(true, deadline);\n-            }\n+            parkUntil(deadline);\n@@ -369,1 +367,1 @@\n-            VirtualThreads.park();\n+            JLA.parkVirtualThread();\n@@ -408,1 +406,1 @@\n-                VirtualThreads.park(nanos);\n+                JLA.parkVirtualThread(nanos);\n@@ -447,1 +445,2 @@\n-            VirtualThreads.parkUntil(deadline);\n+            long millis = deadline - System.currentTimeMillis();\n+            JLA.parkVirtualThread(TimeUnit.MILLISECONDS.toNanos(millis));\n@@ -465,0 +464,1 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/LockSupport.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -812,6 +812,5 @@\n-     * @implSpec The default implementation checks that {@code bound} is a\n-     * positive {@code int}. Then invokes {@code nextInt()}, limiting the result\n-     * to be greater than or equal zero and less than {@code bound}. If {@code bound}\n-     * is a power of two then limiting is a simple masking operation. Otherwise,\n-     * the result is re-calculated by invoking {@code nextInt()} until the\n-     * result is greater than or equal zero and less than {@code bound}.\n+     * @implSpec The default implementation checks that {@code bound} is positive.\n+     * It then invokes {@link #nextInt()} one or more times to ensure a uniform\n+     * distribution in the range 0 (inclusive)\n+     * to {@code bound} (exclusive).\n+     * It assumes the distribution of {@link #nextInt()} to be uniform.\n@@ -838,7 +837,6 @@\n-     * @implSpec The default implementation checks that {@code origin} and\n-     * {@code bound} are positive {@code ints}. Then invokes {@code nextInt()},\n-     * limiting the result to be greater that or equal {@code origin} and less\n-     * than {@code bound}. If {@code bound} is a power of two then limiting is a\n-     * simple masking operation. Otherwise, the result is re-calculated  by\n-     * invoking {@code nextInt()} until the result is greater than or equal\n-     * {@code origin} and less than {@code bound}.\n+     * @implSpec The default implementation checks that {@code origin}\n+     * is less than {@code bound}.\n+     * It then invokes {@link #nextInt()} one or more times to ensure a uniform\n+     * distribution in the range {@code origin} (inclusive)\n+     * to {@code bound} (exclusive).\n+     * It assumes the distribution of {@link #nextInt()} to be uniform.\n@@ -871,7 +869,5 @@\n-     * @implSpec The default implementation checks that {@code bound} is a\n-     * positive  {@code long}. Then invokes {@code nextLong()}, limiting the\n-     * result to be greater than or equal zero and less than {@code bound}. If\n-     * {@code bound} is a power of two then limiting is a simple masking\n-     * operation. Otherwise, the result is re-calculated by invoking\n-     * {@code nextLong()} until the result is greater than or equal zero and\n-     * less than {@code bound}.\n+     * @implSpec The default implementation checks that {@code bound} is positive.\n+     * It then invokes {@link #nextLong()} one or more times to ensure a uniform\n+     * distribution in the range 0 (inclusive)\n+     * to {@code bound} (exclusive).\n+     * It assumes the distribution of {@link #nextLong()} to be uniform.\n@@ -898,7 +894,6 @@\n-     * @implSpec The default implementation checks that {@code origin} and\n-     * {@code bound} are positive {@code longs}. Then invokes {@code nextLong()},\n-     * limiting the result to be greater than or equal {@code origin} and less\n-     * than {@code bound}. If {@code bound} is a power of two then limiting is a\n-     * simple masking operation. Otherwise, the result is re-calculated by\n-     * invoking {@code nextLong()} until the result is greater than or equal\n-     * {@code origin} and less than {@code bound}.\n+     * @implSpec The default implementation checks that {@code origin}\n+     * is less than {@code bound}.\n+     * It then invokes {@link #nextLong()} one or more times to ensure a uniform\n+     * distribution in the range {@code origin} (inclusive)\n+     * to {@code bound} (exclusive).\n+     * It assumes the distribution of {@link #nextLong()} to be uniform.\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":23,"deletions":28,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-    static final int  ZIP64_EXTID  = 0x0001;       \/\/ Extra field Zip64 header ID\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipConstants64.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1327,1 +1327,1 @@\n-                if (tag == ZIP64_EXTID) {\n+                if (tag == EXTID_ZIP64) {\n@@ -1363,1 +1363,1 @@\n-            \/\/ if ZIP64_EXTID blocksize == 0, which may occur with some older\n+            \/\/ if EXTID_ZIP64 blocksize == 0, which may occur with some older\n@@ -1371,1 +1371,1 @@\n-                \/\/ Only validate the ZIP64_EXTID data if the block size > 0\n+                \/\/ Only validate the EXTID_ZIP64 data if the block size > 0\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -682,1 +682,1 @@\n-                if (id == ZIP64_EXTID) {\n+                if (id == EXTID_ZIP64) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-            writeShort(ZIP64_EXTID);\n+            writeShort(EXTID_ZIP64);\n@@ -646,1 +646,1 @@\n-            writeShort(ZIP64_EXTID);\/\/ Zip64 extra\n+            writeShort(EXTID_ZIP64);\/\/ Zip64 extra\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n- * <p><b><a id=\"sm-allowed\">These methods behave differently depending on\n+ * <p id=\"sm-allowed\"><b>These methods behave differently depending on\n@@ -113,1 +113,1 @@\n- * <a href=\"..\/..\/..\/java\/lang\/SecurityManager.html#set-security-manager\">allowed or disallowed<\/a><\/a><\/b>:\n+ * {@linkplain SecurityManager##set-security-manager allowed or disallowed}<\/b>:\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.concurrent.Callable;\n@@ -435,6 +434,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\/\n-    long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value);\n-\n@@ -468,2 +461,0 @@\n-    int stringSize(long i);\n-\n@@ -513,5 +504,0 @@\n-    \/**\n-     * Executes the given value returning task on the current carrier thread.\n-     *\/\n-    <V> V executeOnCarrierThread(Callable<V> task) throws Exception;\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-            attr.defaultValue().writeTo(buf);\n+            AnnotationReader.writeAnnotationValue((BufWriterImpl) buf, attr.defaultValue());\n@@ -122,1 +122,5 @@\n-            buf.writeList(attr.bootstrapMethods());\n+            var b = (BufWriterImpl) buf;\n+            b.writeU2(attr.bootstrapMethodsSize());\n+            for (var bsm : attr.bootstrapMethods()) {\n+                ((BootstrapMethodEntryImpl) bsm).writeTo(b);\n+            }\n@@ -257,1 +261,1 @@\n-            buf.writeListIndices(attr.exceptions());\n+            Util.writeListIndices(buf, attr.exceptions());\n@@ -411,1 +415,1 @@\n-                buf.writeListIndices(export.exportsTo());\n+                Util.writeListIndices(buf, export.exportsTo());\n@@ -417,1 +421,1 @@\n-                buf.writeListIndices(open.opensTo());\n+                Util.writeListIndices(buf, open.opensTo());\n@@ -419,1 +423,1 @@\n-            buf.writeListIndices(attr.uses());\n+            Util.writeListIndices(buf, attr.uses());\n@@ -423,1 +427,1 @@\n-                buf.writeListIndices(provide.providesWith());\n+                Util.writeListIndices(buf, provide.providesWith());\n@@ -485,1 +489,1 @@\n-            buf.writeListIndices(attr.packages());\n+            Util.writeListIndices(buf, attr.packages());\n@@ -557,1 +561,1 @@\n-            buf.writeListIndices(attr.nestMembers());\n+            Util.writeListIndices(buf, attr.nestMembers());\n@@ -575,1 +579,1 @@\n-            buf.writeListIndices(attr.permittedSubclasses());\n+            Util.writeListIndices(buf, attr.permittedSubclasses());\n@@ -598,1 +602,1 @@\n-                buf.writeList(info.attributes());\n+                Util.writeAttributes((BufWriterImpl) buf, info.attributes());\n@@ -617,1 +621,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -638,1 +642,1 @@\n-                buf.writeList(list);\n+                AnnotationReader.writeAnnotations(buf, list);\n@@ -656,1 +660,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -674,1 +678,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n@@ -695,1 +699,1 @@\n-                buf.writeList(list);\n+                AnnotationReader.writeAnnotations(buf, list);\n@@ -713,1 +717,1 @@\n-            buf.writeList(attr.annotations());\n+            AnnotationReader.writeAnnotations(buf, attr.annotations());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -32,1 +31,1 @@\n-        extends AbstractElement {\n+        extends AbstractElement implements Util.WritableLocalVariable {\n@@ -83,2 +82,3 @@\n-    public boolean writeTo(BufWriter b) {\n-        var lc = ((BufWriterImpl)b).labelContext();\n+    @Override\n+    public boolean writeLocalTo(BufWriterImpl b) {\n+        var lc = b.labelContext();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-import java.lang.classfile.constantpool.ConstantPool;\n-import java.util.Optional;\n-\n@@ -31,0 +28,1 @@\n+import java.lang.classfile.constantpool.ConstantPool;\n@@ -51,4 +49,0 @@\n-    public Optional<M> original() {\n-        return Optional.ofNullable(original);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-            if (high < low || high - low > code.codeLength >> 2) {\n+            if (high < low || (long)high - low > code.codeLength >> 2) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -126,0 +125,2 @@\n+    abstract void writeTo(BufWriterImpl buf);\n+\n@@ -410,1 +411,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -481,1 +482,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -511,1 +512,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -817,1 +818,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -922,1 +923,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1072,1 +1073,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1105,1 +1106,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1137,1 +1138,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n@@ -1169,1 +1170,1 @@\n-        public void writeTo(BufWriter pool) {\n+        void writeTo(BufWriterImpl pool) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,2 @@\n-    private abstract static sealed class AbstractLocalPseudo extends AbstractPseudoInstruction {\n+    private abstract static sealed class AbstractLocalPseudo extends AbstractPseudoInstruction\n+            implements Util.WritableLocalVariable {\n@@ -192,2 +193,3 @@\n-        public boolean writeTo(BufWriter b) {\n-            var lc = ((BufWriterImpl)b).labelContext();\n+        @Override\n+        public boolean writeLocalTo(BufWriterImpl b) {\n+            var lc = b.labelContext();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        implements CompoundElement<E>, AttributedElement\n+        implements CompoundElement<E>, AttributedElement, Util.Writable\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,13 +35,4 @@\n-public final class AnnotationImpl implements Annotation {\n-    private final Utf8Entry className;\n-    private final List<AnnotationElement> elements;\n-\n-    public AnnotationImpl(Utf8Entry className,\n-                          List<AnnotationElement> elems) {\n-        this.className = className;\n-        this.elements = List.copyOf(elems);\n-    }\n-\n-    @Override\n-    public Utf8Entry className() {\n-        return className;\n+public record AnnotationImpl(Utf8Entry className, List<AnnotationElement> elements)\n+        implements Annotation, Util.Writable {\n+    public AnnotationImpl {\n+        elements = List.copyOf(elements);\n@@ -51,6 +42,1 @@\n-    public List<AnnotationElement> elements() {\n-        return elements;\n-    }\n-\n-    @Override\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -58,1 +44,5 @@\n-        buf.writeList(elements());\n+        buf.writeU2(elements().size());\n+        for (var e : elements) {\n+            buf.writeIndex(e.name());\n+            AnnotationReader.writeAnnotationValue(buf, e.value());\n+        }\n@@ -84,1 +74,1 @@\n-            implements AnnotationElement {\n+            implements AnnotationElement, Util.Writable {\n@@ -87,1 +77,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -89,1 +79,1 @@\n-            value().writeTo(buf);\n+            AnnotationReader.writeAnnotationValue(buf, value());\n@@ -93,1 +83,1 @@\n-    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant\n+    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant, Util.Writable\n@@ -101,1 +91,1 @@\n-        default void writeTo(BufWriter buf) {\n+        default void writeTo(BufWriterImpl buf) {\n@@ -240,1 +230,1 @@\n-            implements AnnotationValue.OfArray {\n+            implements AnnotationValue.OfArray, Util.Writable {\n@@ -252,1 +242,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -254,1 +244,4 @@\n-            buf.writeList(values);\n+            buf.writeU2(values.size());\n+            for (var e : values) {\n+                AnnotationReader.writeAnnotationValue(buf, e);\n+            }\n@@ -260,1 +253,1 @@\n-            implements AnnotationValue.OfEnum {\n+            implements AnnotationValue.OfEnum, Util.Writable {\n@@ -267,1 +260,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -276,1 +269,1 @@\n-            implements AnnotationValue.OfAnnotation {\n+            implements AnnotationValue.OfAnnotation, Util.Writable {\n@@ -283,1 +276,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n@@ -285,1 +278,1 @@\n-            annotation.writeTo(buf);\n+            AnnotationReader.writeAnnotation(buf, annotation);\n@@ -291,1 +284,1 @@\n-            implements AnnotationValue.OfClass {\n+            implements AnnotationValue.OfClass, Util.Writable {\n@@ -298,1 +291,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":29,"deletions":36,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.BufWriter;\n@@ -42,1 +43,1 @@\n-class AnnotationReader {\n+public final class AnnotationReader {\n@@ -283,0 +284,20 @@\n+\n+    public static void writeAnnotation(BufWriterImpl buf, Annotation annotation) {\n+        \/\/ handles annotations and type annotations\n+        \/\/ TODO annotation cleanup later\n+        ((Util.Writable) annotation).writeTo(buf);\n+    }\n+\n+    public static void writeAnnotations(BufWriter buf, List<? extends Annotation> list) {\n+        \/\/ handles annotations and type annotations\n+        var internalBuf = (BufWriterImpl) buf;\n+        internalBuf.writeU2(list.size());\n+        for (var e : list) {\n+            writeAnnotation(internalBuf, e);\n+        }\n+    }\n+\n+    public static void writeAnnotationValue(BufWriterImpl buf, AnnotationValue value) {\n+        \/\/ TODO annotation cleanup later\n+        ((Util.Writable) value).writeTo(buf);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -53,4 +52,2 @@\n-    public void writeTo(BufWriter buf) {\n-        buf.writeU2(attributes.size());\n-        for (Attribute<?> a : attributes)\n-            a.writeTo(buf);\n+    public void writeTo(BufWriterImpl buf) {\n+        Util.writeAttributes(buf, attributes);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -90,2 +89,1 @@\n-    @Override\n-    public void writeTo(BufWriter writer) {\n+    void writeTo(BufWriterImpl writer) {\n@@ -93,1 +91,1 @@\n-        writer.writeListIndices(arguments());\n+        Util.writeListIndices(writer, arguments());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        implements Attribute<T> {\n+        implements Attribute<T>, Util.Writable {\n@@ -104,1 +104,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -289,1 +289,5 @@\n-            codeAttribute = (CodeImpl) enclosing;\n+            if (enclosing instanceof CodeImpl ci) {\n+                this.codeAttribute = ci;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid LocalVariableTable attribute location\");\n+            }\n@@ -316,1 +320,5 @@\n-            this.codeAttribute = (CodeImpl) enclosing;\n+            if (enclosing instanceof CodeImpl ci) {\n+                this.codeAttribute = ci;\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid LocalVariableTypeTable attribute location\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.List;\n@@ -33,1 +32,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -129,4 +127,2 @@\n-    @Override\n-    public void writeBytes(BufWriter other) {\n-        BufWriterImpl o = (BufWriterImpl) other;\n-        writeBytes(o.elems, 0, o.offset);\n+    public void writeBytes(BufWriterImpl other) {\n+        writeBytes(other.elems, 0, other.offset);\n@@ -178,1 +174,0 @@\n-    @Override\n@@ -201,16 +196,0 @@\n-\n-    @Override\n-    public<T extends WritableElement<?>> void writeList(List<T> list) {\n-        writeU2(list.size());\n-        for (T t : list) {\n-            t.writeTo(this);\n-        }\n-    }\n-\n-    @Override\n-    public void writeListIndices(List<? extends PoolEntry> list) {\n-        writeU2(list.size());\n-        for (PoolEntry info : list) {\n-            writeIndex(info);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -73,5 +72,0 @@\n-    @Override\n-    public Optional<CodeModel> original() {\n-        return Optional.ofNullable(original);\n-    }\n-\n@@ -209,1 +203,2 @@\n-        public void writeTo(BufWriter buf) {\n+        @Override\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-    private final FieldModel original;\n@@ -49,2 +48,1 @@\n-                                Utf8Entry type,\n-                                FieldModel original) {\n+                                Utf8Entry type) {\n@@ -56,1 +54,0 @@\n-        this.original = original;\n@@ -64,5 +61,0 @@\n-    @Override\n-    public Optional<FieldModel> original() {\n-        return Optional.ofNullable(original);\n-    }\n-\n@@ -94,2 +86,1 @@\n-            FieldModel fm = original().orElse(null);\n-            return fm == null? Optional.empty() : fm.parent();\n+            return Optional.empty();\n@@ -124,1 +115,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -35,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -47,1 +47,1 @@\n-        implements TerminalMethodBuilder, MethodInfo {\n+        implements TerminalMethodBuilder {\n@@ -62,0 +62,1 @@\n+                                 int flags,\n@@ -68,1 +69,1 @@\n-        this.flags = AccessFlags.ofMethod();\n+        this.flags = AccessFlags.ofMethod(flags);\n@@ -75,1 +76,1 @@\n-        if (element instanceof AccessFlags f) this.flags = f;\n+        if (element instanceof AccessFlags f) this.flags = checkFlags(f);\n@@ -79,3 +80,6 @@\n-    @Override\n-    public ConstantPoolBuilder constantPool() {\n-        return constantPool;\n+    private AccessFlags checkFlags(AccessFlags updated) {\n+        boolean wasStatic = updated.has(AccessFlag.STATIC);\n+        boolean isStatic = flags.has(AccessFlag.STATIC);\n+        if (wasStatic != isStatic)\n+            throw new IllegalArgumentException(\"Cannot change ACC_STATIC flag of method\");\n+        return updated;\n@@ -85,2 +89,2 @@\n-    public Optional<MethodModel> original() {\n-        return Optional.ofNullable(original);\n+    public ConstantPoolBuilder constantPool() {\n+        return constantPool;\n@@ -165,1 +169,1 @@\n-            return original().flatMap(MethodModel::parent);\n+            return Optional.empty();\n@@ -209,1 +213,1 @@\n-        public void writeTo(BufWriter buf) {\n+        public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Optional;\n@@ -54,5 +53,0 @@\n-    @Override\n-    public Optional<ClassModel> original() {\n-        return terminal.original();\n-    }\n-\n@@ -62,1 +56,1 @@\n-                                                        name, descriptor, null)\n+                                                        name, descriptor)\n@@ -71,2 +65,1 @@\n-                                                                field.fieldName(), field.fieldType(),\n-                                                                field);\n+                                                                field.fieldName(), field.fieldType());\n@@ -82,1 +75,1 @@\n-                                                         name, descriptor, null)\n+                                                         name, descriptor, flags, null)\n@@ -91,1 +84,1 @@\n-                                                                  method.methodName(), method.methodType(), method);\n+                                                                  method.methodName(), method.methodType(), method.flags().flagsMask(), method);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.util.Optional;\n@@ -32,1 +31,0 @@\n-import java.lang.classfile.FieldModel;\n@@ -53,5 +51,0 @@\n-    @Override\n-    public Optional<FieldModel> original() {\n-        return terminal.original();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Optional;\n@@ -35,1 +34,0 @@\n-import java.lang.classfile.MethodModel;\n@@ -78,5 +76,0 @@\n-    @Override\n-    public Optional<MethodModel> original() {\n-        return terminal.original();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -135,1 +135,5 @@\n-        return VerifierImpl.verify(model, classHierarchyResolverOption().classHierarchyResolver(), null);\n+        try {\n+            return VerifierImpl.verify(model, classHierarchyResolverOption().classHierarchyResolver(), null);\n+        } catch (IllegalArgumentException verifierInitializationError) {\n+            return List.of(new VerifyError(verifierInitializationError.getMessage()));\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    boolean writeBootstrapMethods(BufWriter buf) {\n+    boolean writeBootstrapMethods(BufWriterImpl buf) {\n@@ -329,1 +329,2 @@\n-        a.get().writeTo(buf);\n+        \/\/ BootstrapMethodAttribute implementations are all internal writable\n+        ((Util.Writable) a.get()).writeTo(buf);\n@@ -468,2 +469,1 @@\n-    @Override\n-    public boolean compare(BufWriter bufWriter,\n+    public boolean compare(BufWriterImpl bufWriter,\n@@ -474,1 +474,1 @@\n-            return Arrays.equals(((BufWriterImpl) bufWriter).elems,\n+            return Arrays.equals(bufWriter.elems,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -157,1 +157,1 @@\n-                                    ((BufWriterImpl)buf).context(),\n+                                    buf.context(),\n@@ -213,1 +213,1 @@\n-    public boolean compareCodeBytes(BufWriter buf, int offset, int len) {\n+    public boolean compareCodeBytes(BufWriterImpl buf, int offset, int len) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -47,1 +46,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -55,2 +53,2 @@\n-    private final List<WritableElement<FieldModel>> fields = new ArrayList<>();\n-    private final List<WritableElement<MethodModel>> methods = new ArrayList<>();\n+    private final List<Util.Writable> fields = new ArrayList<>();\n+    private final List<Util.Writable> methods = new ArrayList<>();\n@@ -81,1 +79,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -123,1 +121,1 @@\n-    public ClassBuilder withField(WritableElement<FieldModel> field) {\n+    ClassBuilder withField(Util.Writable field) {\n@@ -128,1 +126,1 @@\n-    public ClassBuilder withMethod(WritableElement<MethodModel> method) {\n+    ClassBuilder withMethod(Util.Writable method) {\n@@ -175,1 +173,1 @@\n-        BufWriter head = new BufWriterImpl(constantPool, context, size);\n+        BufWriterImpl head = new BufWriterImpl(constantPool, context, size);\n@@ -180,2 +178,2 @@\n-        tail.writeList(fields);\n-        tail.writeList(methods);\n+        Util.writeList(tail, fields);\n+        Util.writeList(tail, methods);\n@@ -200,1 +198,1 @@\n-        head.writeListIndices(ies);\n+        Util.writeListIndices(head, ies);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -39,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -45,1 +43,0 @@\n-import java.lang.classfile.Instruction;\n@@ -52,1 +49,0 @@\n-import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -86,1 +82,1 @@\n-    final BufWriter bytecodesBufWriter;\n+    final BufWriterImpl bytecodesBufWriter;\n@@ -103,1 +99,1 @@\n-    public static Attribute<CodeAttribute> build(MethodInfo methodInfo,\n+    public static UnboundAttribute<CodeAttribute> build(MethodInfo methodInfo,\n@@ -147,1 +143,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -196,1 +192,1 @@\n-    private Attribute<CodeAttribute> content = null;\n+    private UnboundAttribute<CodeAttribute> content = null;\n@@ -198,1 +194,1 @@\n-    private void writeExceptionHandlers(BufWriter buf) {\n+    private void writeExceptionHandlers(BufWriterImpl buf) {\n@@ -236,1 +232,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -267,1 +263,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -272,1 +268,1 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!Util.writeLocalVariable(b, l)) {\n@@ -290,1 +286,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -295,1 +291,1 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!Util.writeLocalVariable(b, l)) {\n@@ -355,2 +351,1 @@\n-            public void writeBody(BufWriter b) {\n-                BufWriterImpl buf = (BufWriterImpl) b;\n+            public void writeBody(BufWriterImpl buf) {\n@@ -392,2 +387,2 @@\n-                writeExceptionHandlers(b);\n-                attributes.writeTo(b);\n+                writeExceptionHandlers(buf);\n+                attributes.writeTo(buf);\n@@ -430,1 +425,1 @@\n-        public void writeBody(BufWriter b) {\n+        public void writeBody(BufWriterImpl b) {\n@@ -435,1 +430,1 @@\n-        public void writeTo(BufWriter b) {\n+        public void writeTo(BufWriterImpl b) {\n@@ -450,1 +445,1 @@\n-                BufWriter bw = new BufWriterImpl(constantPool, context);\n+                var bw = new BufWriterImpl(constantPool, context);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -35,1 +34,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -40,1 +38,1 @@\n-        implements TerminalFieldBuilder, WritableElement<FieldModel> {\n+        implements TerminalFieldBuilder, Util.Writable {\n@@ -62,1 +60,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -77,1 +75,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -40,1 +39,0 @@\n-import java.lang.classfile.WritableElement;\n@@ -45,1 +43,1 @@\n-        implements TerminalMethodBuilder, WritableElement<MethodModel>, MethodInfo {\n+        implements TerminalMethodBuilder, Util.Writable {\n@@ -118,1 +116,1 @@\n-            writeAttribute((CustomAttribute)element);\n+            writeAttribute((CustomAttribute<?>) element);\n@@ -151,2 +149,1 @@\n-    public void writeTo(BufWriter b) {\n-        BufWriterImpl buf = (BufWriterImpl) b;\n+    public void writeTo(BufWriterImpl buf) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        implements FieldModel {\n+        implements FieldModel, Util.Writable {\n@@ -81,1 +81,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -89,1 +89,1 @@\n-            buf.writeList(attributes());\n+            Util.writeAttributes(buf, attributes());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        implements MethodModel, MethodInfo {\n+        implements MethodModel, MethodInfo, Util.Writable {\n@@ -104,2 +104,1 @@\n-    public void writeTo(BufWriter b) {\n-        BufWriterImpl buf = (BufWriterImpl) b;\n+    public void writeTo(BufWriterImpl buf) {\n@@ -113,1 +112,1 @@\n-            buf.writeList(attributes());\n+            Util.writeAttributes(buf, attributes());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,2 @@\n-public interface MethodInfo {\n+public sealed interface MethodInfo\n+        permits MethodImpl, TerminalMethodBuilder, BufferedMethodBuilder.Model {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodInfo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import java.util.Optional;\n-\n@@ -30,1 +28,0 @@\n-import java.lang.classfile.CodeModel;\n@@ -62,5 +59,0 @@\n-    @Override\n-    public Optional<CodeModel> original() {\n-        return terminal.original();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/NonterminalCodeBuilder.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.classfile.Attribute;\n@@ -37,1 +36,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -138,1 +136,1 @@\n-    public boolean writeBootstrapMethods(BufWriter buf) {\n+    public boolean writeBootstrapMethods(BufWriterImpl buf) {\n@@ -151,1 +149,1 @@\n-            Attribute<BootstrapMethodsAttribute> a\n+            UnboundAttribute<BootstrapMethodsAttribute> a\n@@ -155,1 +153,1 @@\n-                public void writeBody(BufWriter b) {\n+                public void writeBody(BufWriterImpl b) {\n@@ -166,2 +164,1 @@\n-    @Override\n-    public void writeTo(BufWriter buf) {\n+    void writeTo(BufWriterImpl buf) {\n@@ -178,1 +175,1 @@\n-            PoolEntry info = entryByIndex(i);\n+            var info = (AbstractPoolEntry) entryByIndex(i);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                ((BufWriterImpl) dcb.bytecodesBufWriter).asByteBuffer(),\n+                dcb.bytecodesBufWriter.asByteBuffer(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-                ((BufWriterImpl) dcb.bytecodesBufWriter).asByteBuffer(),\n+                dcb.bytecodesBufWriter.asByteBuffer(),\n@@ -386,1 +386,1 @@\n-            public void writeBody(BufWriter b) {\n+            public void writeBody(BufWriterImpl b) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,5 +192,0 @@\n-\n-    @Override\n-    public void writeTo(BufWriter buf) {\n-        throw new UnsupportedOperationException();\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-        extends MethodBuilder\n+        extends MethodBuilder, MethodInfo\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -98,1 +97,1 @@\n-        implements Attribute<T> {\n+        implements Attribute<T>, Util.Writable {\n@@ -117,1 +116,1 @@\n-    public void writeTo(BufWriter buf) {\n+    public void writeTo(BufWriterImpl buf) {\n@@ -755,1 +754,1 @@\n-                                        List<AnnotationElement> elements) implements TypeAnnotation {\n+                                        List<AnnotationElement> elements) implements TypeAnnotation, Util.Writable {\n@@ -772,2 +771,2 @@\n-        public void writeTo(BufWriter buf) {\n-            LabelContext lr = ((BufWriterImpl) buf).labelContext();\n+        public void writeTo(BufWriterImpl buf) {\n+            LabelContext lr = buf.labelContext();\n@@ -821,1 +820,1 @@\n-                pair.value().writeTo(buf);\n+                AnnotationReader.writeAnnotationValue(buf, pair.value());\n@@ -907,1 +906,1 @@\n-        public abstract void writeBody(BufWriter b);\n+        public abstract void writeBody(BufWriterImpl b);\n@@ -910,1 +909,1 @@\n-        public void writeTo(BufWriter b) {\n+        public void writeTo(BufWriterImpl b) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -50,1 +53,0 @@\n-import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -191,0 +193,25 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> void writeAttribute(BufWriterImpl writer, Attribute<?> attr) {\n+        if (attr instanceof CustomAttribute<?> ca) {\n+            var mapper = (AttributeMapper<T>) ca.attributeMapper();\n+            mapper.writeAttribute(writer, (T) ca);\n+        } else {\n+            assert attr instanceof BoundAttribute || attr instanceof UnboundAttribute;\n+            ((Writable) attr).writeTo(writer);\n+        }\n+    }\n+\n+    public static void writeAttributes(BufWriterImpl buf, List<? extends Attribute<?>> list) {\n+        buf.writeU2(list.size());\n+        for (var e : list) {\n+            writeAttribute(buf, e);\n+        }\n+    }\n+\n+    static void writeList(BufWriterImpl buf, List<Writable> list) {\n+        buf.writeU2(list.size());\n+        for (var e : list) {\n+            e.writeTo(buf);\n+        }\n+    }\n+\n@@ -219,1 +246,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n@@ -240,0 +267,24 @@\n+\n+    public static void writeListIndices(BufWriter writer, List<? extends PoolEntry> list) {\n+        writer.writeU2(list.size());\n+        for (PoolEntry info : list) {\n+            writer.writeIndex(info);\n+        }\n+    }\n+\n+    public static boolean writeLocalVariable(BufWriterImpl buf, PseudoInstruction lvOrLvt) {\n+        return ((WritableLocalVariable) lvOrLvt).writeLocalTo(buf);\n+    }\n+\n+    \/**\n+     * A generic interface for objects to write to a\n+     * buf writer. Do not implement unless necessary,\n+     * as this writeTo is public, which can be troublesome.\n+     *\/\n+    interface Writable {\n+        void writeTo(BufWriterImpl writer);\n+    }\n+\n+    interface WritableLocalVariable {\n+        boolean writeLocalTo(BufWriterImpl buf);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-        var klass = new VerificationWrapper(classModel);\n-        log_info(logger, \"Start class verification for: %s\", klass.thisClassName());\n+        String clsName = classModel.thisClass().asInternalName();\n+        log_info(logger, \"Start class verification for: %s\", clsName);\n@@ -120,0 +120,1 @@\n+            var klass = new VerificationWrapper(classModel);\n@@ -137,1 +138,1 @@\n-            log_info(logger, \"End class verification for: %s\", klass.thisClassName());\n+            log_info(logger, \"End class verification for: %s\", clsName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -216,10 +216,19 @@\n-        @SuppressWarnings(\"removal\")\n-        MethodType mtype = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public MethodType run() {\n-                return MethodType.fromMethodDescriptorString(descriptorString(),\n-                                                             lookup.lookupClass().getClassLoader());\n-            }\n-        });\n-\n-        \/\/ let's check that the lookup has access to all the types in the method type\n+        MethodType mtype;\n+        try {\n+            @SuppressWarnings(\"removal\")\n+            MethodType mt = AccessController.doPrivileged(new PrivilegedAction<>() {\n+                @Override\n+                public MethodType run() {\n+                    return MethodType.fromMethodDescriptorString(descriptorString(),\n+                        lookup.lookupClass().getClassLoader());\n+                }\n+            });\n+            mtype = mt;\n+        } catch (TypeNotPresentException ex) {\n+            throw (ClassNotFoundException) ex.getCause();\n+        }\n+\n+        \/\/ Some method types, like ones containing a package private class not accessible\n+        \/\/ to the overriding method, can be valid method descriptors and obtained from\n+        \/\/ MethodType.fromMethodDescriptor, but ldc instruction will fail to resolve such\n+        \/\/ MethodType constants due to access control (JVMS 5.4.3.1 and 5.4.3.5)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/MethodTypeDescImpl.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.misc;\n-\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.RejectedExecutionException;\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n-\/**\n- * Defines static methods to support execution in the context of a virtual thread.\n- *\/\n-public final class VirtualThreads {\n-    private static final JavaLangAccess JLA;\n-    static {\n-        JLA = SharedSecrets.getJavaLangAccess();\n-        if (JLA == null) {\n-            throw new InternalError(\"JavaLangAccess not setup\");\n-        }\n-    }\n-    private VirtualThreads() { }\n-\n-    \/**\n-     * Parks the current virtual thread until it is unparked or interrupted.\n-     * If already unparked then the parking permit is consumed and this method\n-     * completes immediately (meaning it doesn't yield). It also completes\n-     * immediately if the interrupt status is set.\n-     * @throws WrongThreadException if the current thread is not a virtual thread\n-     *\/\n-    public static void park() {\n-        JLA.parkVirtualThread();\n-    }\n-\n-    \/**\n-     * Parks the current virtual thread up to the given waiting time or until it\n-     * is unparked or interrupted. If already unparked then the parking permit is\n-     * consumed and this method completes immediately (meaning it doesn't yield).\n-     * It also completes immediately if the interrupt status is set or the waiting\n-     * time is {@code <= 0}.\n-     * @param nanos the maximum number of nanoseconds to wait\n-     * @throws WrongThreadException if the current thread is not a virtual thread\n-     *\/\n-    public static void park(long nanos) {\n-        JLA.parkVirtualThread(nanos);\n-    }\n-\n-    \/**\n-     * Parks the current virtual thread until the given deadline or until is is\n-     * unparked or interrupted. If already unparked then the parking permit is\n-     * consumed and this method completes immediately (meaning it doesn't yield).\n-     * It also completes immediately if the interrupt status is set or the\n-     * deadline has past.\n-     * @param deadline absolute time, in milliseconds, from the epoch\n-     * @throws WrongThreadException if the current thread is not a virtual thread\n-     *\/\n-    public static void parkUntil(long deadline) {\n-        long millis = deadline - System.currentTimeMillis();\n-        long nanos = TimeUnit.NANOSECONDS.convert(millis, TimeUnit.MILLISECONDS);\n-        park(nanos);\n-    }\n-\n-    \/**\n-     * Re-enables a virtual thread for scheduling. If the thread was parked then\n-     * it will be unblocked, otherwise its next attempt to park will not block\n-     * @param thread the virtual thread to unpark\n-     * @throws IllegalArgumentException if the thread is not a virtual thread\n-     * @throws RejectedExecutionException if the scheduler cannot accept a task\n-     *\/\n-    public static void unpark(Thread thread) {\n-        JLA.unparkVirtualThread(thread);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/VirtualThreads.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,52 @@\n+\n+    \/**\n+     * Returns the string representation size for a given int value.\n+     *\n+     * @param x int value\n+     * @return string size\n+     *\n+     * @implNote There are other ways to compute this: e.g. binary search,\n+     * but values are biased heavily towards zero, and therefore linear search\n+     * wins. The iteration results are also routinely inlined in the generated\n+     * code after loop unrolling.\n+     *\/\n+    public static int stringSize(int x) {\n+        int d = 1;\n+        if (x >= 0) {\n+            d = 0;\n+            x = -x;\n+        }\n+        int p = -10;\n+        for (int i = 1; i < 10; i++) {\n+            if (x > p)\n+                return i + d;\n+            p = 10 * p;\n+        }\n+        return 10 + d;\n+    }\n+\n+    \/**\n+     * Returns the string representation size for a given long value.\n+     *\n+     * @param x long value\n+     * @return string size\n+     *\n+     * @implNote There are other ways to compute this: e.g. binary search,\n+     * but values are biased heavily towards zero, and therefore linear search\n+     * wins. The iteration results are also routinely inlined in the generated\n+     * code after loop unrolling.\n+     *\/\n+    public static int stringSize(long x) {\n+        int d = 1;\n+        if (x >= 0) {\n+            d = 0;\n+            x = -x;\n+        }\n+        long p = -10;\n+        for (int i = 1; i < 19; i++) {\n+            if (x > p)\n+                return i + d;\n+            p = 10 * p;\n+        }\n+        return 19 + d;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,1 @@\n-                    SelectionKeyImpl ski = (SelectionKeyImpl)i.next();\n+                    SelectionKeyImpl ski = (SelectionKeyImpl) i.next();\n@@ -195,1 +195,1 @@\n-                        ((SelChImpl)selch).kill();\n+                        ((SelChImpl) selch).kill();\n@@ -224,1 +224,4 @@\n-        } catch (ClosedSelectorException e) {\n+        } catch (CancelledKeyException e) {\n+            \/\/ key observed and cancelled. Okay to return a cancelled key.\n+        }\n+        if (!isOpen()) {\n@@ -228,3 +231,1 @@\n-            throw e;\n-        } catch (CancelledKeyException e) {\n-            \/\/ key observed and cancelled. Okay to return a cancelled key.\n+            throw new ClosedSelectorException();\n@@ -280,1 +281,1 @@\n-                    ((SelChImpl)ch).kill();\n+                    ((SelChImpl) ch).kill();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,1 +184,1 @@\n-    HEARTBEAT               (0x000E, \"heartbeat\"),\n+    HEARTBEAT               (0x000F, \"heartbeat\"),\n@@ -409,1 +409,1 @@\n-    POST_HANDSHAKE_AUTH     (0x0030, \"post_handshake_auth\"),\n+    POST_HANDSHAKE_AUTH     (0x0031, \"post_handshake_auth\"),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-            this.pos = this.data.length - unused;\n+            this.pos = this.end - unused;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,2 +206,1 @@\n-            \/\/ Ensure the name is the Object ID\n-            String name = namedCurve.getObjectId();\n+            String name = namedCurve.getNameAndAliases()[0];\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ECParameters.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -234,1 +234,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PollSelectorImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.nio.channels.ClosedSelectorException;\n@@ -92,5 +91,0 @@\n-    private void ensureOpen() {\n-        if (!isOpen())\n-            throw new ClosedSelectorException();\n-    }\n-\n@@ -231,1 +225,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollSelectorImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -609,1 +609,0 @@\n-        ensureOpen();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.misc.PreviewFeatures;\n@@ -30,0 +29,1 @@\n+import jdk.internal.vm.ContinuationSupport;\n@@ -109,1 +109,1 @@\n-        if (PreviewFeatures.isEnabled())\n+        if (ContinuationSupport.isSupported())\n@@ -129,1 +129,1 @@\n-                if (PreviewFeatures.isEnabled())\n+                if (ContinuationSupport.isSupported())\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsSecurity.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -613,1 +613,1 @@\n-            if(!isHW) {\n+            if (!isHW && img != null) {\n@@ -615,2 +615,2 @@\n-                if (img != null && border == img.getRGB(w \/ 2, h \/ 2)) {\n-                    \/\/ fix no menu borders in Adwaita theme\n+                if (border == img.getRGB(w \/ 2, h \/ 2)) {\n+                    \/\/ fix no menu borders\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKPainter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.ComponentOrientation;\n@@ -367,0 +368,26 @@\n+     * @param orientation {@inheritDoc}\n+     *\/\n+    @Override\n+    public void setComponentOrientation(ComponentOrientation orientation) {\n+        super.setComponentOrientation(orientation);\n+        Component leftComponent = this.getLeftComponent();\n+        Component rightComponent = this.getRightComponent();\n+        if (!this.getComponentOrientation().isLeftToRight()) {\n+            if (rightComponent != null) {\n+                setLeftComponent(rightComponent);\n+            }\n+            if (leftComponent != null) {\n+                setRightComponent(leftComponent);\n+            }\n+        } else {\n+            if (leftComponent != null) {\n+                setLeftComponent(leftComponent);\n+            }\n+            if (rightComponent != null) {\n+                setRightComponent(rightComponent);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JSplitPane.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -847,0 +847,4 @@\n+        if (value.startsWith(\"none\")) {\n+            return null;\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,2 @@\n-     * max retry time for a single KDC, default Krb5.KDC_RETRY_LIMIT (3)\n+     * max retry time for a single KDC, default Krb5.KDC_RETRY_LIMIT (3),\n+     * Must be > 0.\n@@ -69,1 +70,2 @@\n-     * timeout requesting a ticket from KDC, in millisec, default 30 sec\n+     * timeout requesting a ticket from KDC, in millisec, default\n+     * Krb5.KDC_TIMEOUT (30000). Must be > 0.\n@@ -73,1 +75,2 @@\n-     * max UDP packet size, default unlimited (-1)\n+     * max UDP packet size, default Krb5.KDC_DEFAULT_UDP_PREF_LIMIT (1465).\n+     * Must be >= 0 and <= Krb5.KDC_HARD_UDP_LIMIT (32700).\n@@ -149,1 +152,1 @@\n-            max_retries = parsePositiveIntString(temp);\n+            max_retries = parseNonNegativeIntString(temp);\n@@ -151,1 +154,1 @@\n-            udp_pref_limit = parsePositiveIntString(temp);\n+            udp_pref_limit = parseNonNegativeIntString(temp);\n@@ -160,1 +163,1 @@\n-        defaultKdcTimeout = timeout > 0 ? timeout : 30*1000; \/\/ 30 seconds\n+        defaultKdcTimeout = timeout > 0 ? timeout : Krb5.KDC_TIMEOUT;\n@@ -178,1 +181,1 @@\n-    private String realm;\n+    private final String realm;\n@@ -182,1 +185,1 @@\n-           realm = Config.getInstance().getDefaultRealm();\n+            realm = Config.getInstance().getDefaultRealm();\n@@ -194,1 +197,1 @@\n-                realm, \"udp_preference_limit\", defaultUdpPrefLimit);\n+                realm, \"udp_preference_limit\", defaultUdpPrefLimit, false);\n@@ -197,2 +200,1 @@\n-        boolean useTCP = (udpPrefLimit > 0 &&\n-             (obuf != null && obuf.length > udpPrefLimit));\n+        boolean useTCP = obuf != null && obuf.length > udpPrefLimit;\n@@ -210,8 +212,0 @@\n-        if (realm == null) {\n-            realm = cfg.getDefaultRealm();\n-            if (realm == null) {\n-                throw new KrbException(Krb5.KRB_ERR_GENERIC,\n-                                       \"Cannot find default realm\");\n-            }\n-        }\n-\n@@ -299,1 +293,1 @@\n-                realm, \"max_retries\", defaultKdcRetryLimit);\n+                realm, \"max_retries\", defaultKdcRetryLimit, true);\n@@ -301,1 +295,1 @@\n-                realm, \"kdc_timeout\", defaultKdcTimeout);\n+                realm, \"kdc_timeout\", defaultKdcTimeout, true);\n@@ -342,1 +336,1 @@\n-            int tempPort = parsePositiveIntString(portStr);\n+            int tempPort = parseNonNegativeIntString(portStr);\n@@ -447,1 +441,1 @@\n-            int seconds = parsePositiveIntString(s.substring(0, s.length()-1));\n+            int seconds = parseNonNegativeIntString(s.substring(0, s.length()-1));\n@@ -450,1 +444,1 @@\n-            return parsePositiveIntString(s);\n+            return parseNonNegativeIntString(s);\n@@ -464,0 +458,1 @@\n+     * @param mustBePositive true if value must be >0, false if value must be >=0\n@@ -466,1 +461,2 @@\n-    private int getRealmSpecificValue(String realm, String key, int defValue) {\n+    private int getRealmSpecificValue(String realm, String key, int defValue,\n+            boolean mustBePositive) {\n@@ -478,1 +474,1 @@\n-                temp = parsePositiveIntString(value);\n+                temp = parseNonNegativeIntString(value);\n@@ -484,1 +480,5 @@\n-        if (temp > 0) v = temp;\n+        if (mustBePositive) {\n+            if (temp > 0) v = temp;\n+        } else {\n+            if (temp >= 0) v = temp;\n+        }\n@@ -489,1 +489,1 @@\n-    private static int parsePositiveIntString(String intString) {\n+    private static int parseNonNegativeIntString(String intString) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KdcComm.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+    public static final int KDC_TIMEOUT = 30000;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/Krb5.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n+\n@@ -102,0 +104,1 @@\n+    public final boolean dumpStacktraceOnError;\n@@ -123,0 +126,2 @@\n+        Options options = Options.instance(context);\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -637,1 +642,1 @@\n-    public static class FunctionDescriptorLookupError extends RuntimeException {\n+    public static class FunctionDescriptorLookupError extends CompilerInternalException {\n@@ -642,1 +647,2 @@\n-        FunctionDescriptorLookupError() {\n+        FunctionDescriptorLookupError(boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -654,6 +660,0 @@\n-\n-        @Override\n-        public Throwable fillInStackTrace() {\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n-            return this;\n-        }\n@@ -812,1 +812,1 @@\n-            return new FunctionDescriptorLookupError().setMessage(diag);\n+            return new FunctionDescriptorLookupError(Types.this.dumpStacktraceOnError).setMessage(diag);\n@@ -5110,1 +5110,1 @@\n-    public abstract static class SignatureGenerator {\n+    public abstract class SignatureGenerator {\n@@ -5112,1 +5112,1 @@\n-        public static class InvalidSignatureException extends RuntimeException {\n+        public class InvalidSignatureException extends CompilerInternalException {\n@@ -5117,1 +5117,2 @@\n-            InvalidSignatureException(Type type) {\n+            InvalidSignatureException(Type type, boolean dumpStackTraceOnError) {\n+                super(dumpStackTraceOnError);\n@@ -5124,6 +5125,0 @@\n-\n-            @Override\n-            public Throwable fillInStackTrace() {\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n-                return this;\n-            }\n@@ -5132,2 +5127,0 @@\n-        private final Types types;\n-\n@@ -5139,4 +5132,0 @@\n-        protected SignatureGenerator(Types types) {\n-            this.types = types;\n-        }\n-\n@@ -5144,1 +5133,1 @@\n-            throw new InvalidSignatureException(t);\n+            throw new InvalidSignatureException(t, Types.this.dumpStacktraceOnError);\n@@ -5260,1 +5249,1 @@\n-                        c.name == types.names.empty; \/\/ or anonymous\n+                        c.name == Types.this.names.empty; \/\/ or anonymous\n@@ -5262,1 +5251,1 @@\n-                        ? types.erasure(outer)\n+                        ? Types.this.erasure(outer)\n@@ -5284,1 +5273,1 @@\n-                List<Type> bounds = types.getBounds(tvar);\n+                List<Type> bounds = Types.this.getBounds(tvar);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -948,1 +948,7 @@\n-        Scope scope = targetContainerType.tsym.members();\n+        Scope scope = null;\n+        try {\n+            scope = targetContainerType.tsym.members();\n+        } catch (CompletionFailure ex) {\n+            chk.completionError(pos, ex);\n+            return null;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -790,1 +790,1 @@\n-            Set<Object> booleanLiterals = new HashSet<>();\n+            Set<Object> booleanLiterals = new HashSet<>(Set.of(0, 1));\n@@ -803,1 +803,1 @@\n-                            booleanLiterals.add(value);\n+                            booleanLiterals.remove(value);\n@@ -820,1 +820,1 @@\n-            if (types.unboxedTypeOrType(selector.type).hasTag(TypeTag.BOOLEAN) && booleanLiterals.size() == 2) {\n+            if (types.unboxedTypeOrType(selector.type).hasTag(TypeTag.BOOLEAN) && booleanLiterals.isEmpty()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import com.sun.tools.javac.util.CompilerInternalException;\n@@ -71,1 +72,1 @@\n-import java.util.Comparator;\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -100,0 +101,2 @@\n+    private final boolean dumpStacktraceOnError;\n+\n@@ -122,0 +125,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -136,2 +140,2 @@\n-        InferenceException() {\n-            super(null);\n+        InferenceException(boolean dumpStacktrace) {\n+            super(null, dumpStacktrace);\n@@ -147,1 +151,1 @@\n-        InferenceException result = new InferenceException();\n+        InferenceException result = new InferenceException(dumpStacktraceOnError);\n@@ -1345,1 +1349,1 @@\n-        public static class NodeNotFoundException extends RuntimeException {\n+        class NodeNotFoundException extends CompilerInternalException {\n@@ -1350,1 +1354,2 @@\n-            public NodeNotFoundException(InferenceGraph graph) {\n+            public NodeNotFoundException(InferenceGraph graph, boolean dumpStacktraceOnError) {\n+                super(dumpStacktraceOnError);\n@@ -1353,6 +1358,0 @@\n-\n-            @Override\n-            public Throwable fillInStackTrace() {\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n-                return this;\n-            }\n@@ -1378,1 +1377,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n@@ -1453,1 +1452,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1294,0 +1294,1 @@\n+            Assert.check(sym.kind != TYP);\n@@ -1299,1 +1300,1 @@\n-                        if (clazz.isSubClass(sym, types) || sym.isMemberOf(clazz, types)) {\n+                        if (clazz.isSubClass(sym.enclClass(), types)) {\n@@ -1798,1 +1799,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+\n@@ -1831,1 +1832,0 @@\n-        Symbol c = sym.owner;\n@@ -1835,1 +1835,1 @@\n-            return make.at(pos).This(c.erasure(types));\n+            return make.at(pos).This(currentClass.erasure(types));\n@@ -2633,1 +2633,1 @@\n-            super(types);\n+            types.super();\n@@ -3333,0 +3333,3 @@\n+        Assert.check(!type.hasTag(VOID));\n+        if (type.hasTag(NONE))\n+            return tree;\n@@ -3849,0 +3852,3 @@\n+            \/\/ represent void results as NO_TYPE, to avoid unnecessary boxing in boxIfNeeded\n+            if (currentRestype.hasTag(VOID))\n+                currentRestype = Type.noType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -115,0 +116,1 @@\n+    final boolean dumpStacktraceOnError;\n@@ -152,0 +154,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -587,1 +590,1 @@\n-                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))));\n+                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))), dumpStacktraceOnError);\n@@ -596,1 +599,1 @@\n-                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)));\n+                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)), dumpStacktraceOnError);\n@@ -833,1 +836,1 @@\n-                methodCheckFailure.setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n+                getMethodCheckFailure().setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n@@ -845,1 +848,1 @@\n-                super(null);\n+                super(null, Resolve.this.dumpStacktraceOnError);\n@@ -854,1 +857,1 @@\n-        SharedInapplicableMethodException methodCheckFailure = new SharedInapplicableMethodException();\n+        private SharedInapplicableMethodException methodCheckFailure;\n@@ -860,0 +863,3 @@\n+        private SharedInapplicableMethodException getMethodCheckFailure() {\n+            return methodCheckFailure == null ? methodCheckFailure = new SharedInapplicableMethodException() : methodCheckFailure;\n+        }\n@@ -1039,1 +1045,1 @@\n-            throw new InapplicableMethodException(details);\n+            throw new InapplicableMethodException(details, Resolve.this.dumpStacktraceOnError);\n@@ -1395,1 +1401,1 @@\n-    public static class InapplicableMethodException extends RuntimeException {\n+    public static class InapplicableMethodException extends CompilerInternalException {\n@@ -1400,1 +1406,2 @@\n-        InapplicableMethodException(JCDiagnostic diag) {\n+        InapplicableMethodException(JCDiagnostic diag, boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -1407,6 +1414,0 @@\n-\n-        @Override\n-        public Throwable fillInStackTrace() {\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n-            return this;\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+\n@@ -789,1 +790,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        this.signatureGen = new SharedSignatureGenerator(types);\n+        this.signatureGen = new SharedSignatureGenerator();\n@@ -281,2 +281,2 @@\n-        SharedSignatureGenerator(Types types) {\n-            super(types);\n+        SharedSignatureGenerator() {\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -187,1 +187,0 @@\n-     * @throws ClassNotFoundException if the class cannot be located\n@@ -190,1 +189,1 @@\n-    ClassLoader newClassLoaderFor(ClassLoader parent, String mainClassName) throws ClassNotFoundException, Fault {\n+    ClassLoader newClassLoaderFor(ClassLoader parent, String mainClassName) throws Fault {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -201,0 +201,2 @@\n+        ClassLoader loader = context.newClassLoaderFor(parentLoader, firstClassName);\n+        Thread.currentThread().setContextClassLoader(loader);\n@@ -202,1 +204,0 @@\n-            ClassLoader loader = context.newClassLoaderFor(parentLoader, firstClassName);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.javac.util;\n+\n+\/** The super class of all compiler internal exceptions\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class CompilerInternalException extends RuntimeException {\n+    private static final long serialVersionUID = 0;\n+\n+    @SuppressWarnings(\"this-escape\")\n+    public CompilerInternalException(boolean dumpStackTraceOnError) {\n+        \/* by default the stacktrace wont be filled, meaning that method CompilerInternalException::fillInStackTrace\n+         * will always be invoked, if we do want to dump the stacktrace then we will invoke super::fillInStackTrace\n+         * there is a bit of a dance here that could be fixed once flexible constructor bodies exits the preview\n+         * state\n+         *\/\n+        if (dumpStackTraceOnError) {\n+            super.fillInStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public Throwable fillInStackTrace() {\n+        return this;\n+    }\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/CompilerInternalException.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -710,0 +710,1 @@\n+-method name phiMix descriptor (I)I\n@@ -802,0 +803,4 @@\n+class name jdk\/internal\/classfile\/impl\/BufferedCodeBuilder\n+header extends java\/lang\/Object implements jdk\/internal\/classfile\/impl\/TerminalCodeBuilder nestMembers jdk\/internal\/classfile\/impl\/BufferedCodeBuilder$Model flags 31\n+innerclass innerClass jdk\/internal\/classfile\/impl\/BufferedCodeBuilder$Model outerClass jdk\/internal\/classfile\/impl\/BufferedCodeBuilder innerClassName Model flags 11\n+\n@@ -917,0 +922,10 @@\n+class name jdk\/internal\/classfile\/impl\/DirectCodeBuilder\n+header extends jdk\/internal\/classfile\/impl\/AbstractDirectBuilder implements jdk\/internal\/classfile\/impl\/TerminalCodeBuilder flags 31 signature Ljdk\/internal\/classfile\/impl\/AbstractDirectBuilder<Ljava\/lang\/classfile\/CodeModel;>;Ljdk\/internal\/classfile\/impl\/TerminalCodeBuilder;\n+innerclass innerClass java\/lang\/classfile\/ClassFile$ShortJumpsOption outerClass java\/lang\/classfile\/ClassFile innerClassName ShortJumpsOption flags 4019\n+innerclass innerClass jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction$ExceptionCatchImpl outerClass jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction innerClassName ExceptionCatchImpl flags 19\n+innerclass innerClass java\/lang\/classfile\/ClassFile$DeadLabelsOption outerClass java\/lang\/classfile\/ClassFile innerClassName DeadLabelsOption flags 4019\n+innerclass innerClass java\/lang\/classfile\/ClassFile$DebugElementsOption outerClass java\/lang\/classfile\/ClassFile innerClassName DebugElementsOption flags 4019\n+\n+class name jdk\/internal\/classfile\/impl\/LabelContext\n+header extends java\/lang\/Object sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/TerminalCodeBuilder,jdk\/internal\/classfile\/impl\/CodeImpl flags 601\n+\n@@ -1020,0 +1035,6 @@\n+class name jdk\/internal\/classfile\/impl\/TerminalCodeBuilder\n+header extends java\/lang\/Object implements java\/lang\/classfile\/CodeBuilder,jdk\/internal\/classfile\/impl\/LabelContext sealed true permittedSubclasses jdk\/internal\/classfile\/impl\/DirectCodeBuilder,jdk\/internal\/classfile\/impl\/BufferedCodeBuilder flags 601\n+method name curTopLocal descriptor ()I flags 401\n+\n+-class name jdk\/internal\/classfile\/impl\/TransformingCodeBuilder\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.base-N.sym.txt","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -564,2 +564,13 @@\n-            if (keySensitive) {\n-                return new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n+            P11RSAPrivateKeyInternal p11Key = null;\n+            if (!keySensitive) {\n+                \/\/ Key is not sensitive: try to interpret as CRT or non-CRT.\n+                p11Key = asCRT(session, keyID, algorithm, keyLength, attrs);\n+                if (p11Key == null) {\n+                    p11Key = asNonCRT(session, keyID, algorithm, keyLength,\n+                            attrs);\n+                }\n+            }\n+            if (p11Key == null) {\n+                \/\/ Key is sensitive or there was a failure while querying its\n+                \/\/ attributes: handle as opaque.\n+                p11Key = new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n@@ -567,20 +578,17 @@\n-            } else {\n-                CK_ATTRIBUTE[] rsaAttrs = new CK_ATTRIBUTE[] {\n-                        new CK_ATTRIBUTE(CKA_MODULUS),\n-                        new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PRIME_1),\n-                        new CK_ATTRIBUTE(CKA_PRIME_2),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                        new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-                };\n-                boolean isCRT = true;\n-                Session tempSession = null;\n-                try {\n-                    tempSession = session.token.getOpSession();\n-                    session.token.p11.C_GetAttributeValue(tempSession.id(),\n-                            keyID, rsaAttrs);\n-                    for (CK_ATTRIBUTE attr : rsaAttrs) {\n-                        isCRT &= (attr.pValue instanceof byte[]);\n-                        if (!isCRT) break;\n+            }\n+            return p11Key;\n+        }\n+\n+        private static CK_ATTRIBUTE[] tryFetchAttributes(Session session,\n+                long keyID, long... attrTypes) {\n+            int i = 0;\n+            CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[attrTypes.length];\n+            for (long attrType : attrTypes) {\n+                attrs[i++] = new CK_ATTRIBUTE(attrType);\n+            }\n+            try {\n+                session.token.p11.C_GetAttributeValue(session.id(), keyID,\n+                        attrs);\n+                for (CK_ATTRIBUTE attr : attrs) {\n+                    if (!(attr.pValue instanceof byte[])) {\n+                        return null;\n@@ -588,15 +596,0 @@\n-                } catch (PKCS11Exception e) {\n-                    \/\/ ignore, assume not available\n-                    isCRT = false;\n-                } finally {\n-                    session.token.releaseSession(tempSession);\n-                }\n-                BigInteger n = rsaAttrs[0].getBigInteger();\n-                BigInteger d = rsaAttrs[1].getBigInteger();\n-                if (isCRT) {\n-                    return new P11RSAPrivateKey(session, keyID, algorithm,\n-                           keyLength, attrs, n, d,\n-                           Arrays.copyOfRange(rsaAttrs, 2, rsaAttrs.length));\n-                } else {\n-                    return new P11RSAPrivateNonCRTKey(session, keyID,\n-                           algorithm, keyLength, attrs, n, d);\n@@ -604,0 +597,30 @@\n+                return attrs;\n+            } catch (PKCS11Exception ignored) {\n+                \/\/ ignore, assume not available\n+                return null;\n+            }\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asCRT(Session session,\n+                long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT, CKA_PUBLIC_EXPONENT,\n+                    CKA_PRIME_1, CKA_PRIME_2, CKA_EXPONENT_1, CKA_EXPONENT_2,\n+                    CKA_COEFFICIENT);\n+            if (rsaCRTAttrs == null) {\n+                return null;\n+            }\n+            return new P11RSAPrivateKey(session, keyID, algorithm, keyLength,\n+                    attrs, rsaCRTAttrs[0].getBigInteger(),\n+                    rsaCRTAttrs[1].getBigInteger(),\n+                    Arrays.copyOfRange(rsaCRTAttrs, 2, rsaCRTAttrs.length));\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asNonCRT(Session session,\n+                long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaNonCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT);\n+            if (rsaNonCRTAttrs == null) {\n+                return null;\n@@ -605,0 +628,3 @@\n+            return new P11RSAPrivateNonCRTKey(session, keyID, algorithm,\n+                    keyLength, attrs, rsaNonCRTAttrs[0].getBigInteger(),\n+                    rsaNonCRTAttrs[1].getBigInteger());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":63,"deletions":37,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -566,0 +566,1 @@\n+            writeBoolean(\"hasScopedAccess\", nmethod.hasScopedAccess());\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCodeStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,18 @@\n+\n+    \/**\n+     * Determines if {@code methods} contains at least one entry for which {@code HotSpotResolvedJavaMethod.isScoped()} returns true.\n+     *\/\n+    public boolean hasScopedAccess() {\n+        if (methods == null) {\n+            return false;\n+        }\n+        for (ResolvedJavaMethod method : methods) {\n+            if (method instanceof HotSpotResolvedJavaMethod hotSpotMethod) {\n+                if (hotSpotMethod.isScoped()) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledNmethod.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-        return UNSAFE.getShort(getMethodPointer() + config().methodFlagsOffset);\n+        return UNSAFE.getInt(getMethodPointer() + config().methodFlagsOffset);\n@@ -182,1 +182,1 @@\n-        return UNSAFE.getChar(getConstMethod() + config().constMethodFlagsOffset);\n+        return UNSAFE.getInt(getConstMethod() + config().constMethodFlagsOffset);\n@@ -327,0 +327,11 @@\n+    \/**\n+     * Returns true if this method has a\n+     * {@code jdk.internal.misc.ScopedMemoryAccess.Scoped} annotation.\n+     *\n+     * @return true if Scoped annotation present, false otherwise\n+     *\/\n+    @Override\n+    public boolean isScoped() {\n+        return (getConstMethodFlags() & config().constMethodFlagsIsScoped) != 0;\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+    final int constMethodFlagsIsScoped = getConstant(\"ConstMethodFlags::_misc_is_scoped\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -466,0 +466,10 @@\n+    \/**\n+     * Returns true if this method has a\n+     * {@code jdk.internal.misc.ScopedMemoryAccess.Scoped} annotation.\n+     *\n+     * @return true if Scoped annotation present, false otherwise.\n+     *\/\n+    default boolean isScoped() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaMethod.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -881,1 +881,1 @@\n-\\[dq]vm_memory_map_.txt\\[dq])\n+\\[dq]vm_memory_map_<pid>.txt\\[dq])\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,1 @@\n+                lastValue = delegate.getValue();\n@@ -113,0 +114,1 @@\n+                lastValue = null;\n@@ -115,1 +117,1 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            lastValue = AccessController.doPrivileged(new PrivilegedAction<String>() {\n@@ -117,1 +119,1 @@\n-                public Void run() {\n+                public String run() {\n@@ -120,0 +122,1 @@\n+                        return delegate.getValue();\n@@ -128,1 +131,0 @@\n-        lastValue = value;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Control.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-\\f[I]modulepath\\f[R] \\f[V]--add-modules\\f[R] \\f[I]module\\f[R] [,\n-\\f[I]module\\f[R]...]\n+\\f[I]modulepath\\f[R] \\f[V]--add-modules\\f[R]\n+\\f[I]module\\f[R][,\\f[I]module\\f[R]...]\n@@ -72,1 +72,1 @@\n-\\f[V]--add-modules\\f[R] \\f[I]mod\\f[R] [\\f[V],\\f[R] \\f[I]mod\\f[R]...]\n+\\f[V]--add-modules\\f[R] \\f[I]mod\\f[R][\\f[V],\\f[R]\\f[I]mod\\f[R]...]\n@@ -113,1 +113,1 @@\n-\\f[V]--limit-modules\\f[R] \\f[I]mod\\f[R] [\\f[V],\\f[R] \\f[I]mod\\f[R]...]\n+\\f[V]--limit-modules\\f[R] \\f[I]mod\\f[R][\\f[V],\\f[R]\\f[I]mod\\f[R]...]\n","filename":"src\/jdk.jlink\/share\/man\/jlink.1","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,0 @@\n-    static final int  ZIP64_EXTID  = 0x0001;       \/\/ Extra field Zip64 header ID\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipConstants.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1713,1 +1713,1 @@\n-        \/\/ if ZIP64_EXTID blocksize == 0, which may occur with some older\n+        \/\/ if EXTID_ZIP64 blocksize == 0, which may occur with some older\n@@ -1721,1 +1721,1 @@\n-            \/\/ Only validate the ZIP64_EXTID data if the block size > 0\n+            \/\/ Only validate the EXTID_ZIP64 data if the block size > 0\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2;\n+\n+import jdk.internal.misc.Unsafe;\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test TestCastX2P\n+ * @summary AArch64: remove extra register copy when converting from long to pointer.\n+ * @bug 8336245\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ * @run main\/othervm -XX:-TieredCompilation compiler.c2.TestCastX2P\n+ *\/\n+\n+public class TestCastX2P {\n+\n+    public static final int LEN = 2040;\n+\n+    static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    public static long lseed = 0xbeef;\n+    public static int iseed = 0xbeef;\n+    public static short sseed = (short) (0xef);\n+    public static byte bseed = (byte) (0xe);\n+\n+    public static long off1 = 16;\n+    public static long off2 = 32;\n+    public static long off3 = 64;\n+\n+    public static class TestLong {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 10_000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putLong(address+i, lseed);\n+                }\n+            }\n+\n+            UNSAFE.putLong(address + off1 + 1030, lseed);\n+            UNSAFE.putLong(address + 1023, lseed);\n+            UNSAFE.putLong(address + off2 + 1001, lseed);\n+        }\n+    }\n+\n+    public static class TestLongIndirect {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 1000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putLong(address+i, lseed);\n+                }\n+            }\n+\n+            UNSAFE.putLong(address + off1, lseed);\n+            UNSAFE.putLong(address + off1 + off2, lseed);\n+            UNSAFE.putLong(address + off3, lseed);\n+        }\n+    }\n+\n+    public static class TestInt {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 10_000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putInt(address+i, iseed);\n+                }\n+            }\n+\n+            UNSAFE.putInt(address + off1 + 274, iseed);\n+            UNSAFE.putInt(address + 278, iseed);\n+            UNSAFE.putInt(address + off2 + 282, iseed);\n+        }\n+    }\n+\n+    public static class TestIntIndirect {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 1000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putInt(address+i, iseed);\n+                }\n+            }\n+\n+            UNSAFE.putInt(address + off1, iseed);\n+            UNSAFE.putInt(address + off1 + off2, iseed);\n+            UNSAFE.putInt(address + off3, iseed);\n+        }\n+    }\n+\n+    public static class TestShort {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 10_000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putShort(address+i, sseed);\n+                }\n+            }\n+\n+            UNSAFE.putShort(address + off1 + 257, sseed);\n+            UNSAFE.putShort(address + 277, sseed);\n+            UNSAFE.putShort(address + off2 + 283, sseed);\n+        }\n+    }\n+\n+    public static class TestShortIndirect {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 1000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putShort(address+i, sseed);\n+                }\n+            }\n+\n+            UNSAFE.putShort(address + off1, sseed);\n+            UNSAFE.putShort(address + off1 + off2, sseed);\n+            UNSAFE.putShort(address + off3, sseed);\n+        }\n+    }\n+\n+    public static class TestByte {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 10_000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putByte(address+i, bseed);\n+                }\n+            }\n+\n+            UNSAFE.putByte(address + off1 + 257, bseed);\n+            UNSAFE.putByte(address + 277, bseed);\n+            UNSAFE.putByte(address + off2 + 283, bseed);\n+        }\n+    }\n+\n+    public static class TestByteIndirect {\n+\n+        private static long address = UNSAFE.allocateMemory(LEN);\n+\n+        static {\n+            for (int k = 0; k < 1000; k++) {\n+                for (int i = 0; i < LEN\/2; i++) {\n+                    UNSAFE.putByte(address+i, bseed);\n+                }\n+            }\n+\n+            UNSAFE.putByte(address + off1, bseed);\n+            UNSAFE.putByte(address + off1 + off2, bseed);\n+            UNSAFE.putByte(address + off3, bseed);\n+        }\n+    }\n+\n+    static void test() {\n+        TestLong t1 = new TestLong();\n+        Asserts.assertEquals(UNSAFE.getLong(t1.address + off1 + 1030), lseed, \"put long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLong(t1.address + 1023), lseed, \"put long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLong(t1.address + off2 + 1001), lseed, \"put long failed!\");\n+\n+        TestLongIndirect t2 = new TestLongIndirect();\n+        Asserts.assertEquals(UNSAFE.getLong(t2.address + off1), lseed, \"put long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLong(t2.address + off1 + off2), lseed, \"put long failed!\");\n+        Asserts.assertEquals(UNSAFE.getLong(t2.address + off3), lseed, \"put long failed!\");\n+\n+        TestInt t3 = new TestInt();\n+        Asserts.assertEquals(UNSAFE.getInt(t3.address + off1 + 274), iseed, \"put int failed!\");\n+        Asserts.assertEquals(UNSAFE.getInt(t3.address + 278), iseed, \"put int failed!\");\n+        Asserts.assertEquals(UNSAFE.getInt(t3.address + off2 + 282), iseed, \"put int failed!\");\n+\n+        TestIntIndirect t4 = new TestIntIndirect();\n+        Asserts.assertEquals(UNSAFE.getInt(t4.address + off1), iseed, \"put int failed!\");\n+        Asserts.assertEquals(UNSAFE.getInt(t4.address + off1 + off2), iseed, \"put int failed!\");\n+        Asserts.assertEquals(UNSAFE.getInt(t4.address + off3), iseed, \"put int failed!\");\n+\n+        TestShort t5 = new TestShort();\n+        Asserts.assertEquals(UNSAFE.getShort(t5.address + off1 + 257), sseed, \"put short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShort(t5.address + 277), sseed, \"put short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShort(t5.address + off2 + 283), sseed, \"put short failed!\");\n+\n+        TestShortIndirect t6 = new TestShortIndirect();\n+        Asserts.assertEquals(UNSAFE.getShort(t6.address + off1), sseed, \"put short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShort(t6.address + off1 + off2), sseed, \"put short failed!\");\n+        Asserts.assertEquals(UNSAFE.getShort(t6.address + off3), sseed, \"put short failed!\");\n+\n+        TestByte t7 = new TestByte();\n+        Asserts.assertEquals(UNSAFE.getByte(t7.address + off1 + 257), bseed, \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(t7.address + 277), bseed, \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(t7.address + off2 + 283), bseed, \"put byte failed!\");\n+\n+        TestByteIndirect t8 = new TestByteIndirect();\n+        Asserts.assertEquals(UNSAFE.getByte(t8.address + off1), bseed, \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(t8.address + off1 + off2), bseed, \"put byte failed!\");\n+        Asserts.assertEquals(UNSAFE.getByte(t8.address + off3), bseed, \"put byte failed!\");\n+    }\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCastX2P.java","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"},{"patch":"@@ -42,2 +42,1 @@\n- *                    Shenandoah,\n- *                    ShenandoahIU}\n+ *                    Shenandoah}\n@@ -98,7 +97,0 @@\n-        case \"ShenandoahIU\":\n-            argcount = 11;\n-            procArgs = new String[argcount];\n-            procArgs[argcount - 4] = \"-XX:+UnlockExperimentalVMOptions\";\n-            procArgs[argcount - 3] = \"-XX:+UseShenandoahGC\";\n-            procArgs[argcount - 2] = \"-XX:ShenandoahGCMode=iu\";\n-            break;\n@@ -289,1 +281,0 @@\n-        case \"ShenandoahIU\":\n@@ -361,1 +352,0 @@\n-        case \"ShenandoahIU\":\n@@ -448,1 +438,0 @@\n-        case \"ShenandoahIU\":\n@@ -515,1 +504,0 @@\n-        case \"ShenandoahIU\":\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVolatiles.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,27 +74,0 @@\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestVolatileLoad ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestVolatileStore ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileLoad ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileStore ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileCAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileWeakCAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileCAE ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileGAS ShenandoahIU\n- *\n- * @run driver compiler.c2.aarch64.TestVolatilesShenandoah\n- *      TestUnsafeVolatileGAA ShenandoahIU\n- *\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVolatilesShenandoah.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -478,0 +478,13 @@\n+    @Test\n+    public void isScopedTest() throws NoSuchMethodException, ClassNotFoundException {\n+        \/\/ Must use reflection as ScopedMemoryAccess$Scoped is package-private\n+        Class<? extends Annotation> scopedAnnotationClass = Class.forName(\"jdk.internal.misc.ScopedMemoryAccess$Scoped\").asSubclass(Annotation.class);\n+        for (Map.Entry<Method, ResolvedJavaMethod> e : methods.entrySet()) {\n+            ResolvedJavaMethod m = e.getValue();\n+            Method key = e.getKey();\n+            boolean expect = key.isAnnotationPresent(scopedAnnotationClass);\n+            boolean actual = m.isScoped();\n+            assertEquals(m.toString(), expect, actual);\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaMethod.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -118,1 +119,1 @@\n-                        InnerStaticFinalClass.class, PrivateInnerClass.class, ProtectedInnerClass.class};\n+                        InnerStaticFinalClass.class, PrivateInnerClass.class, ProtectedInnerClass.class, ScopedMemoryAccess.class};\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TypeUniverse.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335393\n+ * @summary C2: assert(!had_error) failed: bad dominance\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-UseLoopPredicate\n+ *                   -XX:LoopMaxUnroll=0 TestEmptyLoopDeadCast\n+ *\/\n+\n+public class TestEmptyLoopDeadCast {\n+    public static void main(String[] args) {\n+        int[] array = new int[100];\n+        for (int i = 0; i < 20_000; i++) {\n+            test1Helper(1, 101, array);\n+            test1(0, array);\n+            test2Helper(0, -101, array);\n+            test2(0, array);\n+        }\n+    }\n+\n+    private static int test1(int start, int[] array) {\n+        return test1Helper(start, 0, array);\n+    }\n+\n+    private static int test1Helper(int start, int stop, int[] array) {\n+        if (array == null) {\n+        }\n+        int v = 0;\n+        for (int i = start; i < stop; i++) {\n+            v = array[i - 1];\n+        }\n+        return v;\n+    }\n+\n+    private static int test2(int start, int[] array) {\n+        return test2Helper(start, -1, array);\n+    }\n+\n+    private static int test2Helper(int start, int stop, int[] array) {\n+        if (array == null) {\n+        }\n+        int v = 0;\n+        for (int i = start-1; i > stop; i--) {\n+            v = array[-1 - i];\n+        }\n+        return v;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestEmptyLoopDeadCast.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -27,0 +27,2 @@\n+* @requires (vm.cpu.features ~= \".*avx512vl.*\" | vm.cpu.features ~= \".*f16c.*\") | os.arch == \"aarch64\"\n+*           | (os.arch == \"riscv64\" & vm.cpu.features ~= \".*zfh.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorConvChain.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,45 +123,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocHumongousFragment\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Make sure Shenandoah can recover from humongous allocation fragmentation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocHumongousFragment\n- *\n- * @run main\/othervm -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g -XX:ShenandoahTargetNumRegions=2048\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocHumongousFragment\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocHumongousFragment.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -138,50 +138,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocIntArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocIntArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocIntArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -138,50 +138,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjectArrays\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjectArrays\n- *\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx1g -Xms1g\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjectArrays\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -115,46 +115,0 @@\n-\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestAllocObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestAllocObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestAllocObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjects.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -85,22 +85,0 @@\n- *\/\n-\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -79,18 +79,0 @@\n-\/**\n- * @test id=iu\n- * @summary Test Shenandoah GC uses concurrent\/parallel threads correctly\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n- *\n- * @run main\/othervm -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:ConcGCThreads=2 -XX:ParallelGCThreads=4\n- *      -Dtarget=1000\n- *      TestGCThreadGroups\n-*\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestGCThreadGroups.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -87,21 +87,0 @@\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can withstand allocation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestHeapUncommit\n- *\n- * @run main\/othervm -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahUncommit -XX:ShenandoahUncommitDelay=0\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestHeapUncommit\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHeapUncommit.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -97,32 +97,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestJcmdHeapDump\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestJcmdHeapDump\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules jdk.attach\/com.sun.tools.attach\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestJcmdHeapDump\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestJcmdHeapDump.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -94,32 +94,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestLotsOfCycles\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm\/timeout=480 -Xmx16m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dtarget=10000\n- *      TestLotsOfCycles\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLotsOfCycles.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestObjItrWithHeapDump.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,30 +100,0 @@\n-        testWith(\"Zero interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=0\"\n-        );\n-\n-        testWith(\"Short interval with iu mode\",\n-                 true,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=1000\"\n-        );\n-\n-        testWith(\"Long interval with iu mode\",\n-                 false,\n-                 \"-Xlog:gc\",\n-                 \"-XX:+UnlockDiagnosticVMOptions\",\n-                 \"-XX:+UnlockExperimentalVMOptions\",\n-                 \"-XX:+UseShenandoahGC\",\n-                 \"-XX:ShenandoahGCMode=iu\",\n-                 \"-XX:ShenandoahGuaranteedGCInterval=100000\" \/\/ deliberately too long\n-        );\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestPeriodicGC.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -38,12 +38,0 @@\n-\/* @test id=iu\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n@@ -63,13 +51,0 @@\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceRefersToShenandoah\n- *\/\n-\n@@ -203,4 +178,0 @@\n-    private static boolean isShenandoahIUMode() {\n-        return \"iu\".equals(WB.getStringVMFlag(\"ShenandoahGCMode\"));\n-    }\n-\n@@ -242,8 +213,1 @@\n-            \/\/ This is true for all currently supported concurrent collectors,\n-            \/\/ except Shenandoah+IU, which allows clearing refs even when\n-            \/\/ accessed during concurrent marking.\n-            if (isShenandoahIUMode()) {\n-              expectCleared(testWeak4, \"testWeak4\");\n-            } else {\n-              expectNotCleared(testWeak4, \"testWeak4\");\n-            }\n+            expectNotCleared(testWeak4, \"testWeak4\");\n@@ -264,6 +228,4 @@\n-            if (!isShenandoahIUMode()) {\n-                if (obj4 == null) {\n-                    fail(\"testWeak4.get() returned null\");\n-                } else if (obj4.value != 4) {\n-                    fail(\"testWeak4.get().value is \" + obj4.value);\n-                }\n+            if (obj4 == null) {\n+                fail(\"testWeak4.get() returned null\");\n+            } else if (obj4.value != 4) {\n+                fail(\"testWeak4.get().value is \" + obj4.value);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceRefersToShenandoah.java","additions":5,"deletions":43,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,13 +39,0 @@\n-\/* @test id=iu-100\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @modules java.base\n- * @run main jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGarbageThreshold=100 -Xmx100m\n- *      gc.shenandoah.TestReferenceShortcutCycle\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestReferenceShortcutCycle.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,19 +44,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test that null references\/referents work fine\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRefprocSanity\n- *\n- * @run main\/othervm -Xmx128m -Xms128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRefprocSanity\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRefprocSanity.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -76,19 +76,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRegionSampling\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ShenandoahRegionSampling\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRegionSampling\n- *\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRegionSampling.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -141,40 +141,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key randomness\n- * @summary Test that Shenandoah is able to work with(out) resizeable TLABs\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:+ResizeTLAB\n- *      TestResizeTLAB\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      -XX:-ResizeTLAB\n- *      TestResizeTLAB\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestResizeTLAB.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -117,35 +117,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestRetainObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestRetainObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestRetainObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestRetainObjects.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -130,39 +130,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestSieveObjects\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @summary Acceptance tests: collector can deal with retained objects\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestSieveObjects\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestSieveObjects\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSieveObjects.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -68,18 +68,0 @@\n-\/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\n- * @run main\/othervm -Xmx256m -Xlog:gc+stats -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive -XX:StringDeduplicationAgeThreshold=3\n- *      TestStringDedup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedup.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -75,31 +75,0 @@\n- \/*\n- * @test id=iu\n- * @summary Test Shenandoah string deduplication implementation\n- * @key randomness\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- * @modules java.base\/java.lang:open\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\n- * @run main\/othervm -Xmx1g -Xlog:gc+stats -Xlog:gc -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      -DtargetStrings=2000000\n- *      TestStringDedupStress\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -78,20 +78,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that Shenandoah cleans up interned strings\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahVerify\n- *      TestStringInternCleanup\n- *\n- * @run main\/othervm -Xmx64m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+ClassUnloadingWithConcurrentMark\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestStringInternCleanup\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringInternCleanup.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -61,27 +61,0 @@\n-\/*\n- * @test id=iu\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      TestVerifyJCStress\n- *\/\n-\n-\/*\n- * @test id=iu-c1\n- * @summary Tests that we pass at least one jcstress-like test with all verification turned on\n- * @requires vm.gc.Shenandoah\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *\n- * @run main\/othervm -Xmx1g -Xms1g -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify -XX:TieredStopAtLevel=1\n- *      TestVerifyJCStress\n- *\/\n-\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestVerifyJCStress.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC                         TestWrongArrayMember\n- * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu TestWrongArrayMember\n+ * @run main\/othervm -Xmx128m -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC TestWrongArrayMember\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestWrongArrayMember.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -Xcomp -XX:CompileOnly=BarrierInInfiniteLoop::test1\n- *                   -XX:CompileOnly=BarrierInInfiniteLoop::test2 -XX:CompileOnly=BarrierInInfiniteLoop::test3 -XX:CompileCommand=quiet BarrierInInfiniteLoop\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/BarrierInInfiniteLoop.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * bug 8280885\n- * @summary Shenandoah: Some tests failed with \"EA: missing allocation reference path\"\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=iu\n- *                   -XX:CompileCommand=dontinline,TestUnexpectedIUBarrierEA::notInlined TestUnexpectedIUBarrierEA\n- *\/\n-\n-public class TestUnexpectedIUBarrierEA {\n-\n-    private static Object field;\n-\n-    public static void main(String[] args) {\n-        for (int i = 0; i < 20_000; i++) {\n-            test(false);\n-        }\n-    }\n-\n-    private static void test(boolean flag) {\n-        A a = new A();\n-        B b = new B();\n-        b.field = a;\n-        notInlined();\n-        Object o = b.field;\n-        if (!(o instanceof A)) {\n-\n-        }\n-        C c = new C();\n-        c.field = o;\n-        if (flag) {\n-            field = c.field;\n-        }\n-    }\n-\n-    private static void notInlined() {\n-\n-    }\n-\n-    private static class A {\n-    }\n-\n-    private static class B {\n-        public Object field;\n-    }\n-\n-    private static class C {\n-        public Object field;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestUnexpectedIUBarrierEA.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -90,17 +90,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -Dprecise=false\n- *      TestChurnNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -86,15 +86,0 @@\n-\/*\n- * @test id=iu\n- * @summary Check that MX notifications are reported for all cycles\n- * @library \/test\/lib \/\n- * @requires vm.gc.Shenandoah\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      TestPauseNotifications\n- *\n- * @run main\/othervm -Xmx128m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      TestPauseNotifications\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestPauseNotifications.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-             {{\"iu\"},      {\"adaptive\", \"aggressive\"}},\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestClassLoaderLeak.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,18 +128,0 @@\n-\n-        {\n-            OutputAnalyzer output = ProcessTools.executeLimitedTestJava(\n-                    \"-Xmx128m\",\n-                    \"-XX:+UnlockExperimentalVMOptions\",\n-                    \"-XX:+UseShenandoahGC\",\n-                    \"-Xlog:gc\",\n-                    \"-XX:+ExplicitGCInvokesConcurrent\",\n-                    \"-XX:ShenandoahGCMode=iu\",\n-                    TestExplicitGC.class.getName(),\n-                    \"test\");\n-            for (String p : full) {\n-                output.shouldNotContain(p);\n-            }\n-            for (String p : concNormal) {\n-                output.shouldContain(p);\n-            }\n-         }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestExplicitGC.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-        testWith(\"-XX:ShenandoahGCMode=iu\",      Mode.EXPERIMENTAL);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestModeUnlock.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                new String[] { \"ShenandoahSATBBarrier\", \"ShenandoahIUBarrier\" },\n+                new String[] { \"ShenandoahSATBBarrier\" },\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,7 +47,0 @@\n-        String[] iu = {\n-                \"ShenandoahLoadRefBarrier\",\n-                \"ShenandoahIUBarrier\",\n-                \"ShenandoahCASBarrier\",\n-                \"ShenandoahCloneBarrier\",\n-                \"ShenandoahStackWatermarkBarrier\",\n-        };\n@@ -59,1 +52,0 @@\n-        shouldFailAll(\"-XX:ShenandoahGCMode=iu\",               iu);\n@@ -61,1 +53,0 @@\n-        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          iu);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierDisable.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test that disabling wrong barriers fails early\n+ * @summary Test that SATB barrier may be enabled for all modes\n@@ -41,3 +41,0 @@\n-                \"ShenandoahIUBarrier\",\n-        };\n-        String[] iu = {\n@@ -46,6 +43,4 @@\n-\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=adaptive\",   concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=static\",     concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=compact\",    concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCHeuristics=aggressive\", concurrent);\n-        shouldFailAll(\"-XX:ShenandoahGCMode=iu\",               iu);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=adaptive\",   concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=static\",     concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=compact\",    concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCHeuristics=aggressive\", concurrent);\n@@ -53,1 +48,0 @@\n-        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          iu);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierEnable.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -102,41 +102,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient\n- * @summary Stress the Shenandoah GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n@@ -224,47 +183,0 @@\n-\/*\n- * @test id=iu-aggressive-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\/*\n- * @test id=iu-deopt-nmethod\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @requires vm.flavor == \"server\" & !vm.emulatedClient & vm.opt.ClassUnloading != false\n- * @summary Stress Shenandoah GC with nmethod barrier forced deoptimization enabled.\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\n- * @run main\/othervm\/timeout=200 -Xlog:gc*=info,nmethod+barrier=trace -Xmx1g -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+DeoptimizeNMethodBarriersALot -XX:-Inline\n- *      gc.stress.gcbasher.TestGCBasherWithShenandoah 120000\n- *\/\n-\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcbasher\/TestGCBasherWithShenandoah.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -105,39 +105,0 @@\n-\/*\n- * @test id=iu-aggressive\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahOOMDuringEvacALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      -XX:+ShenandoahAllocFailureALot\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu -XX:ShenandoahGCHeuristics=aggressive\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n-\/*\n- * @test id=iu\n- * @key stress randomness\n- * @library \/ \/test\/lib\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the GC by trying to make old objects more likely to be garbage than young objects.\n- *\n- * @run main\/othervm\/timeout=600 -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\n- * @run main\/othervm -Xmx384M -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      gc.stress.gcold.TestGCOld 50 1 20 10 10000\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -43,14 +43,0 @@\n-\n-\/*\n- * @test id=iu\n- * @key stress\n- * @library \/\n- * @requires vm.gc.Shenandoah\n- * @summary Stress the Shenandoah GC full GC by allocating objects of different lifetimes concurrently with System.gc().\n- *\n- * @run main\/othervm\/timeout=300 -Xlog:gc*=info -Xmx512m -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=iu\n- *      -XX:+ShenandoahVerify\n- *      gc.stress.systemgc.TestSystemGCWithShenandoah 270\n- *\n- *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/systemgc\/TestSystemGCWithShenandoah.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+WhiteBoxAPI StringPrinting\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI StringPrinting\n","filename":"test\/hotspot\/jtreg\/runtime\/PrintingTests\/StringPrinting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/classFileParserBug\/Bad_NCDFE_Msg.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,0 +116,12 @@\n+\n+    @Test\n+    public void logErrorsDcmdOutputStream() throws IOException {\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = Paths.get(\"nonexistent\", test_dir);\n+        try {\n+            OutputAnalyzer output = new JMXExecutor().execute(\"Compiler.perfmap %s\".formatted(path));\n+            output.shouldContain(\"Warning: Failed to create nonexistent\/%s for perf map\".formatted(test_dir));\n+        } finally {\n+            Files.deleteIfExists(path);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8185164 8320515\n+ * @bug 8185164 8320515 8334085\n@@ -89,0 +89,3 @@\n+                \/\/ Extra unmount helps to reproduce 8334085.\n+                \/\/ Two sub-sequential thaws are needed in that scenario.\n+                Thread.yield();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetOwnedMonitorInfo\/GetOwnedMonitorInfoTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-        checkFrames(vThread1, false, 14);\n+        checkFrames(vThread1, false, 13);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetFrameCount\/framecnt01\/framecnt01.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @modules java.base\/java.lang:+open\n@@ -29,1 +30,1 @@\n- * @run junit\/othervm\/native GetThreadStateTest\n+ * @run junit\/othervm\/native --enable-native-access=ALL-UNNAMED GetThreadStateTest\n@@ -35,0 +36,1 @@\n+ * @modules java.base\/java.lang:+open\n@@ -36,1 +38,1 @@\n- * @run junit\/othervm\/native -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations GetThreadStateTest\n+ * @run junit\/othervm\/native -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations --enable-native-access=ALL-UNNAMED GetThreadStateTest\n@@ -43,0 +45,1 @@\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -46,0 +49,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -54,0 +59,5 @@\n+\n+        \/\/ need >=2 carriers for testing pinning when main thread is a virtual thread\n+        if (Thread.currentThread().isVirtual()) {\n+            VThreadRunner.ensureParallelism(2);\n+        }\n@@ -108,1 +118,1 @@\n-     * Test state of thread waiting to enter a monitor.\n+     * Test state of thread waiting to enter a monitor when pinned and not pinned.\n@@ -110,3 +120,4 @@\n-    @Test\n-    void testMonitorEnter() throws Exception {\n-        var started = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testMonitorEnter(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -115,2 +126,9 @@\n-            started.set(true);\n-            synchronized (lock) { }\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    synchronized (lock) { }\n+                });\n+            } else {\n+                ready.set(true);\n+                synchronized (lock) { }\n+            }\n@@ -122,1 +140,1 @@\n-                awaitTrue(started);\n+                awaitTrue(ready);\n@@ -138,1 +156,1 @@\n-     * Test state of thread waiting in Object.wait().\n+     * Test state of thread waiting in Object.wait() when pinned and not pinned.\n@@ -140,3 +158,4 @@\n-    @Test\n-    void testObjectWait() throws Exception {\n-        var started = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testObjectWait(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -146,1 +165,0 @@\n-                started.set(true);\n@@ -148,1 +166,9 @@\n-                    lock.wait();\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait();\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait();\n+                    }\n@@ -154,1 +180,1 @@\n-            awaitTrue(started);\n+            awaitTrue(ready);\n@@ -180,1 +206,1 @@\n-     * Test state of thread waiting in Object.wait(millis).\n+     * Test state of thread waiting in Object.wait(millis) when pinned and not pinned.\n@@ -182,3 +208,4 @@\n-    @Test\n-    void testObjectWaitMillis() throws Exception {\n-        var started = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testObjectWaitMillis(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -188,4 +215,13 @@\n-                started.set(true);\n-                try {\n-                    lock.wait(Long.MAX_VALUE);\n-                } catch (InterruptedException e) { }\n+                synchronized (lock) {\n+                    try {\n+                        if (pinned) {\n+                            VThreadPinner.runPinned(() -> {\n+                                ready.set(true);\n+                                lock.wait(Long.MAX_VALUE);\n+                            });\n+                        } else {\n+                            ready.set(true);\n+                            lock.wait(Long.MAX_VALUE);\n+                        }\n+                    } catch (InterruptedException e) { }\n+                }\n@@ -196,1 +232,1 @@\n-            awaitTrue(started);\n+            awaitTrue(ready);\n@@ -222,1 +258,1 @@\n-     * Test state of thread parked with LockSupport.park.\n+     * Test state of thread parked with LockSupport.park when pinned and not pinned.\n@@ -224,3 +260,4 @@\n-    @Test\n-    void testPark() throws Exception {\n-        var started = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testPark(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -229,62 +266,9 @@\n-            started.set(true);\n-            while (!done.get()) {\n-                LockSupport.park();\n-            }\n-        });\n-        try {\n-            \/\/ wait for thread to start execution\n-            awaitTrue(started);\n-\n-            \/\/ thread should park\n-            int expected = JVMTI_THREAD_STATE_ALIVE |\n-                    JVMTI_THREAD_STATE_WAITING |\n-                    JVMTI_THREAD_STATE_WAITING_INDEFINITELY |\n-                    JVMTI_THREAD_STATE_PARKED;\n-            await(thread, expected);\n-        } finally {\n-            done.set(true);\n-            LockSupport.unpark(thread);\n-            thread.join();\n-        }\n-    }\n-\n-    \/**\n-     * Test state of thread parked with LockSupport.parkNanos.\n-     *\/\n-    @Test\n-    void testParkNanos() throws Exception {\n-        var started = new AtomicBoolean();\n-        var done = new AtomicBoolean();\n-        var thread = Thread.ofVirtual().start(() -> {\n-            started.set(true);\n-            while (!done.get()) {\n-                LockSupport.parkNanos(Long.MAX_VALUE);\n-            }\n-        });\n-        try {\n-            \/\/ wait for thread to start execution\n-            awaitTrue(started);\n-\n-            \/\/ thread should park\n-            int expected = JVMTI_THREAD_STATE_ALIVE |\n-                    JVMTI_THREAD_STATE_WAITING |\n-                    JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT |\n-                    JVMTI_THREAD_STATE_PARKED;\n-            await(thread, expected);\n-        } finally {\n-            done.set(true);\n-            LockSupport.unpark(thread);\n-            thread.join();\n-        }\n-    }\n-\n-    \/**\n-     * Test state of thread parked with LockSupport.park while holding a monitor.\n-     *\/\n-    @Test\n-    void testParkWhenPinned() throws Exception {\n-        var started = new AtomicBoolean();\n-        var done = new AtomicBoolean();\n-        var thread = Thread.ofVirtual().start(() -> {\n-            VThreadPinner.runPinned(() -> {\n-                started.set(true);\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    while (!done.get()) {\n+                        LockSupport.park();\n+                    }\n+                });\n+            } else {\n+                ready.set(true);\n@@ -294,1 +278,1 @@\n-            });\n+            }\n@@ -298,1 +282,1 @@\n-            awaitTrue(started);\n+            awaitTrue(ready);\n@@ -314,1 +298,1 @@\n-     * Test state of thread parked with LockSupport.parkNanos while holding a monitor.\n+     * Test state of thread parked with LockSupport.parkNanos when pinned and not pinned.\n@@ -316,3 +300,4 @@\n-    @Test\n-    void testParkNanosWhenPinned() throws Exception {\n-        var started = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testParkNanos(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -321,2 +306,9 @@\n-            VThreadPinner.runPinned(() -> {\n-                started.set(true);\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    while (!done.get()) {\n+                        LockSupport.parkNanos(Long.MAX_VALUE);\n+                    }\n+                });\n+            } else {\n+                ready.set(true);\n@@ -326,1 +318,1 @@\n-            });\n+            }\n@@ -330,1 +322,1 @@\n-            awaitTrue(started);\n+            awaitTrue(ready);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetThreadState\/GetThreadStateTest.java","additions":94,"deletions":102,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n@@ -32,1 +34,0 @@\n- *     -Djdk.virtualThreadScheduler.parallelism=9\n@@ -37,2 +38,1 @@\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -42,24 +42,1 @@\n-\n-\/*\n- * The test uses custom implementation of the CountDownLatch class.\n- * The reason is we want the state of tested thread to be predictable.\n- * With java.util.concurrent.CountDownLatch it is not clear what thread state is expected.\n- *\/\n-class CountDownLatch {\n-    private int count = 0;\n-\n-    CountDownLatch(int count) {\n-        this.count = count;\n-    }\n-\n-    public synchronized void countDown() {\n-        count--;\n-        notify();\n-    }\n-\n-    public synchronized void await() throws InterruptedException {\n-        while (count > 0) {\n-            wait(1);\n-        }\n-    }\n-}\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -68,4 +45,2 @@\n-    static final int TCNT1 = 10;\n-    static final int TCNT2 = 4;\n-    static final int TCNT3 = 4;\n-    static final int THREAD_CNT = TCNT1 + TCNT2 + TCNT3;\n+    static final int PARKED_THREAD_COUNT = 4;\n+    static final int SPINNING_THREAD_COUNT = 4;\n@@ -80,14 +55,4 @@\n-    private static boolean failed;\n-    private static List<Thread> test1Threads = new ArrayList(TCNT1);\n-\n-    private static CountDownLatch ready0 = new CountDownLatch(THREAD_CNT);\n-    private static CountDownLatch ready1 = new CountDownLatch(TCNT1);\n-    private static CountDownLatch ready2 = new CountDownLatch(THREAD_CNT);\n-    private static CountDownLatch mready = new CountDownLatch(1);\n-\n-    private static void await(CountDownLatch dumpedLatch) {\n-        try {\n-            dumpedLatch.await();\n-        } catch (InterruptedException e) {\n-            throw new RuntimeException(e);\n-        }\n+\n+    \/\/ called by agent when it is initialized and has enabled events\n+    static void agentStarted() {\n+        attached = true;\n@@ -96,4 +61,4 @@\n-    \/\/ The test1 vthreads are kept unmounted until interrupted after agent attach.\n-    static final Runnable test1 = () -> {\n-        synchronized (test1Threads) {\n-            test1Threads.add(Thread.currentThread());\n+    public static void main(String[] args) throws Exception {\n+        if (Thread.currentThread().isVirtual()) {\n+            System.out.println(\"Skipping test as current thread is a virtual thread\");\n+            return;\n@@ -101,8 +66,17 @@\n-        log(\"test1 vthread started\");\n-        ready0.countDown();\n-        await(mready);\n-        ready1.countDown(); \/\/ to guaranty state is not State.WAITING after await(mready)\n-        try {\n-            Thread.sleep(20000); \/\/ big timeout to keep unmounted until interrupted\n-        } catch (InterruptedException ex) {\n-            \/\/ it is expected, ignore\n+        VThreadRunner.ensureParallelism(SPINNING_THREAD_COUNT+1);\n+\n+        \/\/ start threads that park (unmount)\n+        var threads1 = new ArrayList<Thread>();\n+        for (int i = 0; i < PARKED_THREAD_COUNT; i++) {\n+            var started = new AtomicBoolean();\n+            var thread = Thread.startVirtualThread(() -> {\n+                started.set(true);\n+                LockSupport.park();\n+            });\n+\n+            \/\/ wait for thread to start execution + park\n+            while (!started.get()) {\n+                Thread.sleep(10);\n+            }\n+            await(thread, Thread.State.WAITING);\n+            threads1.add(thread);\n@@ -110,10 +84,17 @@\n-        ready2.countDown();\n-    };\n-\n-    \/\/ The test2 vthreads are kept mounted until agent attach.\n-    static final Runnable test2 = () -> {\n-        log(\"test2 vthread started\");\n-        ready0.countDown();\n-        await(mready);\n-        while (!attached) {\n-            \/\/ keep mounted\n+\n+        \/\/ start threads that spin (stay mounted)\n+        var threads2 = new ArrayList<Thread>();\n+        for (int i = 0; i < SPINNING_THREAD_COUNT; i++) {\n+            var started = new AtomicBoolean();\n+            var thread = Thread.startVirtualThread(() -> {\n+                started.set(true);\n+                while (!attached) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+\n+            \/\/ wait for thread to start execution\n+            while (!started.get()) {\n+                Thread.sleep(10);\n+            }\n+            threads2.add(thread);\n@@ -121,8 +102,6 @@\n-        ready2.countDown();\n-    };\n-\n-    \/\/ The test3 vthreads are kept mounted until agent attach.\n-    static final Runnable test3 = () -> {\n-        log(\"test3 vthread started\");\n-        ready0.countDown();\n-        await(mready);\n+\n+        \/\/ attach to the current VM\n+        VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n+        vm.loadAgentLibrary(\"VThreadEventTest\");\n+\n+        \/\/ wait for agent to start\n@@ -130,1 +109,1 @@\n-            \/\/ keep mounted\n+            Thread.sleep(10);\n@@ -132,3 +111,0 @@\n-        LockSupport.parkNanos(10_000_000L); \/\/ will cause extra mount and unmount\n-        ready2.countDown();\n-    };\n@@ -136,3 +112,3 @@\n-    public static void main(String[] args) throws Exception {\n-        if (Runtime.getRuntime().availableProcessors() < 8) {\n-            log(\"WARNING: test expects at least 8 processors.\");\n+        \/\/ unpark the threads that were parked\n+        for (Thread thread : threads1) {\n+            LockSupport.unpark(thread);\n@@ -140,27 +116,0 @@\n-        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n-            for (int i = 0; i < TCNT1; i++) {\n-                executorService.execute(test1);\n-            }\n-            for (int i = 0; i < TCNT2; i++) {\n-                executorService.execute(test2);\n-            }\n-            for (int i = 0; i < TCNT3; i++) {\n-                executorService.execute(test3);\n-            }\n-            await(ready0);\n-            mready.countDown();\n-            await(ready1); \/\/ to guarantee state is not State.TIMED_WAITING after await(mready) in test1()\n-            \/\/ wait for test1 threads to reach TIMED_WAITING state in sleep()\n-            for (Thread t : test1Threads) {\n-                Thread.State state = t.getState();\n-                log(\"DBG: state: \" + state);\n-                while (state != Thread.State.TIMED_WAITING) {\n-                    Thread.sleep(10);\n-                    state = t.getState();\n-                    log(\"DBG: state: \" + state);\n-                }\n-            }\n-\n-            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));\n-            vm.loadAgentLibrary(\"VThreadEventTest\");\n-            Thread.sleep(200); \/\/ to allow the agent to get ready\n@@ -168,5 +117,3 @@\n-            attached = true;\n-            for (Thread t : test1Threads) {\n-                 t.interrupt();\n-            }\n-            ready2.await();\n+        \/\/ wait for all threads to terminate\n+        for (Thread thread : threads1) {\n+            thread.join();\n@@ -174,6 +121,2 @@\n-        \/\/ wait until all VirtualThreadEnd events have been sent\n-        for (int sleepNo = 1; threadEndCount() < THREAD_CNT; sleepNo++) {\n-            Thread.sleep(100);\n-            if (sleepNo % 100 == 0) { \/\/ 10 sec period of waiting\n-                log(\"main: waited seconds: \" + sleepNo\/10);\n-            }\n+        for (Thread thread : threads2) {\n+            thread.join();\n@@ -181,0 +124,1 @@\n+\n@@ -184,3 +128,0 @@\n-        int threadEndExp = THREAD_CNT;\n-        int threadMountExp = THREAD_CNT - TCNT2;\n-        int threadUnmountExp = THREAD_CNT + TCNT3;\n@@ -188,3 +129,4 @@\n-        log(\"ThreadEnd cnt: \"     + threadEndCnt     + \" (expected: \" + threadEndExp + \")\");\n-        log(\"ThreadMount cnt: \"   + threadMountCnt   + \" (expected: \" + threadMountExp + \")\");\n-        log(\"ThreadUnmount cnt: \" + threadUnmountCnt + \" (expected: \" + threadUnmountExp + \")\");\n+        int threadCount = PARKED_THREAD_COUNT + SPINNING_THREAD_COUNT;\n+        log(\"VirtualThreadEnd events: \" + threadEndCnt + \", expected: \" + threadCount);\n+        log(\"VirtualThreadMount events: \" + threadMountCnt + \", expected: \" + PARKED_THREAD_COUNT);\n+        log(\"VirtualThreadUnmount events: \" + threadUnmountCnt + \", expected: \" + threadCount);\n@@ -192,2 +134,3 @@\n-        if (threadEndCnt != threadEndExp) {\n-            log(\"FAILED: unexpected count of ThreadEnd events\");\n+        boolean failed = false;\n+        if (threadEndCnt != threadCount) {\n+            log(\"FAILED: unexpected count of VirtualThreadEnd events\");\n@@ -196,2 +139,2 @@\n-        if (threadMountCnt != threadMountExp) {\n-            log(\"FAILED: unexpected count of ThreadMount events\");\n+        if (threadMountCnt != PARKED_THREAD_COUNT) {\n+            log(\"FAILED: unexpected count of VirtualThreadMount events\");\n@@ -200,2 +143,2 @@\n-        if (threadUnmountCnt != threadUnmountExp) {\n-            log(\"FAILED: unexpected count of ThreadUnmount events\");\n+        if (threadUnmountCnt != threadCount) {\n+            log(\"FAILED: unexpected count of VirtualThreadUnmount events\");\n@@ -209,0 +152,9 @@\n+    private static void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            assert state != Thread.State.TERMINATED : \"Thread has terminated\";\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/VThreadEventTest.java","additions":85,"deletions":133,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -68,0 +68,5 @@\n+  JNIEnv *env;\n+  jsize nVMs;\n+  jint res;\n+  jclass clazz;\n+  jmethodID mid;\n@@ -100,0 +105,35 @@\n+\n+  \/\/ call VThreadEventTest.agentStarted to notify test that agent has started\n+\n+  res = JNI_GetCreatedJavaVMs(&vm, 1, &nVMs);\n+  if (res != JNI_OK) {\n+      LOG(\"JNI_GetCreatedJavaVMs failed: %d\\n\", res);\n+      return JNI_ERR;\n+  }\n+\n+  res = vm->GetEnv((void **) &env, JNI_VERSION_21);\n+  if (res != JNI_OK) {\n+    LOG(\"GetEnv failed: %d\\n\", res);\n+    return JNI_ERR;\n+  }\n+\n+  clazz = env->FindClass(\"VThreadEventTest\");\n+  if (clazz == NULL) {\n+      LOG(\"FindClass failed\\n\");\n+      return JNI_ERR;\n+  }\n+\n+  mid = env->GetStaticMethodID(clazz, \"agentStarted\", \"()V\");\n+  if (mid == NULL) {\n+      LOG(\"GetStaticMethodID failed\\n\");\n+      return JNI_ERR;\n+  }\n+\n+  env->CallStaticVoidMethod(clazz, mid);\n+  if (env->ExceptionOccurred()) {\n+      LOG(\"CallStaticVoidMethod failed\\n\");\n+      return JNI_ERR;\n+  }\n+\n+  LOG(\"Agent_OnAttach done\\n\");\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/libVThreadEventTest.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,4 @@\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @comment Running this test with -Xcomp is slow and therefore tends to cause\n+ *          timeouts. As there is no known direct benefit from running the test\n+ *          with -Xcomp, we disable such testing.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbDumpheap.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -143,0 +143,4 @@\n+            \/\/ Disable collection on testedObject. invokeMethod() will essentially do a\n+            \/\/ vm.resume(), which gives GC a chance to run, which might result in this\n+            \/\/ object being collected.\n+            testedObject.disableCollection();\n@@ -181,0 +185,1 @@\n+        testedObject.enableCollection();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VoidValue\/toString\/tostring001.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -42,0 +43,1 @@\n+    private static final int MAX_TRIES = 6; \/\/ limit attempts to receive Notification data\n@@ -65,2 +67,2 @@\n-        \/\/ 2. Check CompositeData that doest not represnt\n-        \/\/ MemoryNotificationInfo - IllegalArgumentException must be thrown\n+        \/\/ 2. Check CompositeData that does not represent MemoryNotificationInfo\n+        \/\/ throws IllegalArgumentException\n@@ -88,1 +90,1 @@\n-            \/\/ Expected: CompositeData doest not represnt MemoryNotificationInfo\n+            \/\/ Expected: CompositeData does not represent MemoryNotificationInfo\n@@ -91,1 +93,1 @@\n-        log.display(\"check for CompositeData doest not represnt MemoryNotificationInfo passed.\");\n+        log.display(\"check that CompositeData does not represent MemoryNotificationInfo passed.\");\n@@ -93,1 +95,2 @@\n-        \/\/ 3. Check correct CompositeData\n+        \/\/ 3. Check correct CompositeData usage:\n+        \/\/ First try to provoke a Notification on a MemoryPool.\n@@ -126,1 +129,5 @@\n-        \/\/ eat memory just to emmit notification\n+        if (poolObject == null) {\n+            throw new TestFailure(\"No memory pool found to test.\");\n+        }\n+\n+        \/\/ eat memory just to emit notification\n@@ -136,4 +143,11 @@\n-        GarbageUtils.eatMemory(stresser);\n-\n-        boolean messageNotRecieved = true;\n-        while(messageNotRecieved) {\n+        int oomCount = GarbageUtils.eatMemory(stresser);\n+        log.display(\"eatMemory returns OOM count: \" + oomCount);\n+\n+        \/\/ Check for the message.  Poll on queue to avoid waiting forver on failure.\n+        \/\/ Notification is known to fail, very rarely, with -Xcomp where the allocations\n+        \/\/ do not affect the monitored pool. Possibly a timing issue, where the \"eatMemory\"\n+        \/\/ is done before Notification\/threshold processing happens.\n+        \/\/ The Notification is quite immediate, other than that problem.\n+        boolean messageReceived = false;\n+        int tries = 0;\n+        while (!messageReceived && ++tries < MAX_TRIES) {\n@@ -141,2 +155,8 @@\n-                from001Listener.queue.take();\n-                messageNotRecieved = false;\n+                Object r = from001Listener.queue.poll(10000, TimeUnit.MILLISECONDS);\n+                if (r == null) {\n+                    log.display(\"poll for Notification data returns null...\");\n+                    continue;\n+                } else {\n+                    messageReceived = true;\n+                    break;\n+                }\n@@ -144,1 +164,1 @@\n-                messageNotRecieved = true;\n+                \/\/ ignored, continue\n@@ -148,0 +168,4 @@\n+        \/\/ If we got a Notification, test that the CompositeData can create a MemoryNotificationInfo\n+        if (!messageReceived) {\n+            throw new TestFailure(\"No Notification received.\");\n+        }\n@@ -150,14 +174,14 @@\n-           ObjectName poolObjectName = new ObjectName(monitor.getName(poolObject));\n-           ObjectName resultObjectName = new ObjectName(\n-                     ManagementFactory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE +\n-                     \",name=\" + result.getPoolName());\n-\n-           log.display(\"poolObjectName : \" + poolObjectName +\n-                              \" resultObjectName : \" + resultObjectName);\n-\n-           if (!poolObjectName.equals(resultObjectName)) {\n-              log.complain(\"FAILURE 3.\");\n-              log.complain(\"Wrong pool name : \" + resultObjectName +\n-                           \", expected : \" + poolObjectName);\n-              testFailed = true;\n-           }\n+            ObjectName poolObjectName = new ObjectName(monitor.getName(poolObject));\n+            ObjectName resultObjectName = new ObjectName(\n+                        ManagementFactory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE +\n+                        \",name=\" + result.getPoolName());\n+\n+            log.display(\"poolObjectName : \" + poolObjectName +\n+                        \" resultObjectName : \" + resultObjectName);\n+\n+            if (!poolObjectName.equals(resultObjectName)) {\n+                log.complain(\"FAILURE 3.\");\n+                log.complain(\"Wrong pool name : \" + resultObjectName +\n+                             \", expected : \" + poolObjectName);\n+                testFailed = true;\n+            }\n@@ -170,1 +194,0 @@\n-\n@@ -186,1 +209,2 @@\n-        if (data.get() != null)\n+        if (data.get() != null) {\n+            System.out.println(\"handleNotification: ignoring\");\n@@ -188,1 +212,4 @@\n-        data.set((CompositeData) notification.getUserData());\n+        }\n+        System.out.println(\"handleNotification: getting data\");\n+        CompositeData d = (CompositeData) notification.getUserData();\n+        data.set(d);\n@@ -196,1 +223,1 @@\n-                messageNotSent = true;\n+                \/\/ ignore, retry\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/MemoryNotificationInfo\/from\/from001.java","additions":59,"deletions":32,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- *     2. trows IllegalArgumentException, if CompositeData doest not represnt\n+ *     2. throws IllegalArgumentException, if CompositeData does not represent\n@@ -39,1 +39,1 @@\n- *     3. correct MemoryNotificationInfo object, if CompositeData is correst (i.e\n+ *     3. correct MemoryNotificationInfo object, if CompositeData is correct, i.e\n@@ -46,0 +46,5 @@\n+ * Avoid running with -Xcomp due to rare failure where the MemoryPool does not\n+ * increase in usage and send Notification.  Likely the timing changes so \"eatMemory\"\n+ * completes before Notification\/threshold processing.\n+ *\n+ * @requires vm.compMode != \"Xcomp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/MemoryNotificationInfo\/from\/from001\/TestDescription.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322133\n+ * @summary Make sure getParameterSpec returns std name for EC AlgorithmParameters\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import java.security.AlgorithmParameters;\n+import java.security.KeyPairGenerator;\n+import java.security.spec.ECGenParameterSpec;\n+\n+public class CurveGetParameterSpec {\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\");\n+        kpg.initialize(new ECGenParameterSpec(\"secp384r1\"));\n+        var k = kpg.generateKeyPair().getPublic();\n+        var a = AlgorithmParameters.getInstance(\"EC\");\n+        a.init(k.getParams());\n+        String name = a.getParameterSpec(ECGenParameterSpec.class).getName();\n+        if (!name.equals(\"secp384r1\")) {\n+            throw new Exception(\"EC getParameterSpec does not return std name secp384r1. Instead returns: \" + name);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/AlgorithmParameters\/EC\/CurveGetParameterSpec.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -104,2 +104,4 @@\n-                \/\/ Give other thread a chance to interrupt\n-                Thread.sleep(100);\n+                \/\/ Give other thread a chance to interrupt. Normally only a very short\n+                \/\/ sleep is needed, but we need to account for unexpected delays in\n+                \/\/ the interrupt due to machine and network hiccups.\n+                Thread.sleep(10*1000);\n","filename":"test\/jdk\/com\/sun\/jdi\/InterruptHangTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ *   -Xbatch\n@@ -74,1 +75,1 @@\n-    static final int MAX_EXECUTOR_WAIT_SECONDS = 20;\n+    static final int MAX_EXECUTOR_WAIT_SECONDS = 60;\n@@ -179,1 +180,0 @@\n-        int retries = 0;\n@@ -181,3 +181,0 @@\n-            if (retries > 20) {\n-                throw new IllegalStateException(\"SegmentAccessor::doAccess method not being compiled\");\n-            }\n@@ -185,1 +182,0 @@\n-            retries++;\n","filename":"test\/jdk\/java\/foreign\/TestConcurrentClose.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334394\n+ * @summary ensure there is no race condition in Class::protectionDomain\n+ * @run main\/othervm ProtectionDomainRace\n+ *\/\n+import javax.security.auth.Subject;\n+import java.security.PrivilegedAction;\n+\n+\/**\n+ * Without the code fix, this test would fail with\n+ * java.lang.AssertionError: sun.security.util.ResourcesMgr (PD)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.checkInjectedInvoker(MethodHandleImpl.java:1209)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.makeInjectedInvoker(MethodHandleImpl.java:1110)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller$1.computeValue(MethodHandleImpl.java:1117)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller$1.computeValue(MethodHandleImpl.java:1114)\n+ *         at java.base\/java.lang.ClassValue.getFromHashMap(ClassValue.java:229)\n+ *         at java.base\/java.lang.ClassValue.getFromBackup(ClassValue.java:211)\n+ *         at java.base\/java.lang.ClassValue.get(ClassValue.java:117)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.bindCallerWithInjectedInvoker(MethodHandleImpl.java:1089)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl$BindCaller.bindCaller(MethodHandleImpl.java:1077)\n+ *         at java.base\/java.lang.invoke.MethodHandleImpl.bindCaller(MethodHandleImpl.java:1032)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.maybeBindCaller(MethodHandles.java:4149)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:4133)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(MethodHandles.java:4077)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(MethodHandles.java:4326)\n+ *         at java.base\/java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:4274)\n+ *         at java.base\/java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:628)\n+ *         at java.base\/sun.security.util.ResourcesMgr.getBundle(ResourcesMgr.java:54)\n+ *         at java.base\/sun.security.util.ResourcesMgr.getString(ResourcesMgr.java:40)\n+ *         at java.base\/javax.security.auth.Subject.doAs(Subject.java:517)\n+ *         ...\n+ * as the Class::protectionDomain might assign different objects to the (original) allPermDomain field.\n+ *\/\n+public class ProtectionDomainRace {\n+    private static volatile Throwable failed = null;\n+    public static void main(String[] args) throws Throwable {\n+        PrivilegedAction<?> pa = () -> null;\n+        Thread[] threads = new Thread[100];\n+        for (int i = 0; i < 100; i++) {\n+            threads[i] = new Thread(() -> {\n+                try {\n+                    Subject.doAs(null, pa);\n+                } catch (Throwable t) {\n+                    failed = t;\n+                }\n+            });\n+            threads[i].start();\n+        }\n+        for (int i = 0; i < 100; i++) {\n+            threads[i].join();\n+        }\n+        if (failed != null) {\n+            throw failed;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/ProtectionDomainRace.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336479\n+ * @summary Tests for Process.waitFor(Duration)\n+ * @library \/test\/lib\n+ * @run junit WaitForDuration\n+ *\/\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.stream.Stream;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class WaitForDuration {\n+    static Stream<Arguments> durations() {\n+        return Stream.of(\n+            Arguments.of(Duration.ZERO, 3_600_000, false),\n+            Arguments.of(Duration.ofSeconds(-100), 3_600_000, false),\n+            Arguments.of(Duration.ofSeconds(100), 0, true),\n+            Arguments.of(Duration.ofSeconds(Long.MAX_VALUE), 0, true), \/\/ nano overflow\n+            Arguments.of(Duration.ofSeconds(Long.MIN_VALUE), 3_600_000, false) \/\/ nano underflow\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"durations\")\n+    void testEdgeDurations(Duration d, int sleepMillis, boolean expected)\n+            throws IOException, InterruptedException {\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\n+            WaitForDuration.class.getSimpleName(), Integer.toString(sleepMillis));\n+        assertEquals(expected, pb.start().waitFor(d));\n+    }\n+\n+    @Test\n+    void testNullDuration() throws IOException, InterruptedException {\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\n+            WaitForDuration.class.getSimpleName(), \"0\");\n+        assertThrows(NullPointerException.class, () -> pb.start().waitFor(null));\n+    }\n+\n+    public static void main(String... args) throws InterruptedException {\n+        Thread.sleep(Integer.parseInt(args[0]));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Process\/WaitForDuration.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,243 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test id=default\n+ * @bug 8284161 8286788\n+ * @summary Test java.lang.management.ThreadInfo contains expected information for carrier threads\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit CarrierThreadInfo\n+ *\/\n+\n+\/**\n+ * @test id=LM_LIGHTWEIGHT\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit\/othervm -XX:LockingMode=2 CarrierThreadInfo\n+ *\/\n+\n+\/**\n+ * @test id=LM_LEGACY\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit\/othervm -XX:LockingMode=1 CarrierThreadInfo\n+ *\/\n+\n+\/**\n+ * @test id=LM_MONITOR\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit\/othervm -XX:LockingMode=0 CarrierThreadInfo\n+ *\/\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.Arrays;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import jdk.test.lib.thread.VThreadScheduler;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CarrierThreadInfo {\n+\n+    \/**\n+     * Test that ThreadInfo.getLockedMonitors returns information about a lock held by\n+     * a carrier thread.\n+     *\/\n+    @Test\n+    void testCarrierThreadHoldsLock() throws Exception {\n+        Object lock = new Object();\n+        ThreadFactory factory = task -> Thread.ofPlatform().unstarted(() -> {\n+            synchronized (lock) {\n+                task.run();\n+            }\n+        });\n+\n+        try (var scheduler = new CustomScheduler(factory)) {\n+            var started = new AtomicBoolean();\n+            var done = new AtomicBoolean();\n+            Thread vthread = scheduler.forkVirtualThread(() -> {\n+                started.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+            try {\n+                awaitTrue(started);\n+\n+                \/\/ carrier threads holds the lock\n+                long carrierId = scheduler.carrier().threadId();\n+                ThreadInfo threadInfo = ManagementFactory.getPlatformMXBean(ThreadMXBean.class)\n+                        .getThreadInfo(new long[] { carrierId }, true, true)[0];\n+                boolean holdsLock = Arrays.stream(threadInfo.getLockedMonitors())\n+                        .anyMatch(mi -> mi.getIdentityHashCode() == System.identityHashCode(lock));\n+                assertTrue(holdsLock, \"Carrier should hold lock\");\n+\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadInfo.getLockedMonitors does not return information about a lock\n+     * held by mounted virtual thread.\n+     *\/\n+    @Test\n+    void testVirtualThreadHoldsLock() throws Exception {\n+        ThreadFactory factory = Executors.defaultThreadFactory();\n+        try (var scheduler = new CustomScheduler(factory)) {\n+            var started = new AtomicBoolean();\n+            var lock = new Object();\n+            var done = new AtomicBoolean();\n+            Thread vthread = scheduler.forkVirtualThread(() -> {\n+                started.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+            try {\n+                awaitTrue(started);\n+\n+                \/\/ carrier threads does not hold lock\n+                long carrierId = scheduler.carrier().threadId();\n+                ThreadInfo threadInfo = ManagementFactory.getPlatformMXBean(ThreadMXBean.class)\n+                        .getThreadInfo(new long[] { carrierId }, true, true)[0];\n+                boolean holdsLock = Arrays.stream(threadInfo.getLockedMonitors())\n+                        .anyMatch(mi -> mi.getIdentityHashCode() == System.identityHashCode(lock));\n+                assertFalse(holdsLock, \"Carrier should not hold lock\");\n+\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadInfo.getLockOwnerId and getLockInfo return information about a\n+     * synthetic lock that make it appear that the carrier is blocking waiting on the\n+     * virtual thread.\n+     *\/\n+    @Test\n+    void testCarrierThreadWaits() throws Exception {\n+        ThreadFactory factory = Executors.defaultThreadFactory();\n+        try (var scheduler = new CustomScheduler(factory)) {\n+            var started = new AtomicBoolean();\n+            var done = new AtomicBoolean();\n+            Thread vthread = scheduler.forkVirtualThread(() -> {\n+                started.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+            try {\n+                awaitTrue(started);\n+\n+                long carrierId = scheduler.carrier().threadId();\n+                long vthreadId = vthread.threadId();\n+\n+                ThreadInfo threadInfo = ManagementFactory.getThreadMXBean().getThreadInfo(carrierId);\n+                assertNotNull(threadInfo);\n+\n+                \/\/ carrier should be blocked waiting for lock owned by virtual thread\n+                assertEquals(vthreadId, threadInfo.getLockOwnerId());\n+\n+                \/\/ carrier thread should be on blocked waiting on virtual thread\n+                LockInfo lockInfo = threadInfo.getLockInfo();\n+                assertNotNull(lockInfo);\n+                assertEquals(vthread.getClass().getName(), lockInfo.getClassName());\n+                assertEquals(System.identityHashCode(vthread), lockInfo.getIdentityHashCode());\n+\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Custom scheduler with a single carrier thread.\n+     *\/\n+    private static class CustomScheduler implements AutoCloseable {\n+        private final ExecutorService pool;\n+        private final Executor scheduler;\n+        private final AtomicReference<Thread> carrierRef = new AtomicReference<>();\n+\n+        CustomScheduler(ThreadFactory factory) {\n+            pool = Executors.newSingleThreadExecutor(factory);\n+            scheduler = task -> {\n+                pool.submit(() -> {\n+                    carrierRef.set(Thread.currentThread());\n+                    try {\n+                        task.run();\n+                    } finally {\n+                        carrierRef.set(null);\n+                    }\n+                });\n+            };\n+        }\n+\n+        \/**\n+         * Returns the carrier thread if a virtual thread is mounted.\n+         *\/\n+        Thread carrier() throws InterruptedException {\n+            return carrierRef.get();\n+        }\n+\n+        \/**\n+         * Starts a virtual thread to execute the give task.\n+         *\/\n+        Thread forkVirtualThread(Runnable task) {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+            Thread thread = factory.newThread(task);\n+            thread.start();\n+            return thread;\n+        }\n+\n+        @Override\n+        public void close() {\n+            pool.close();\n+        }\n+    }\n+\n+    \/**\n+     * Waits for the boolean value to become true.\n+     *\/\n+    private static void awaitTrue(AtomicBoolean ref) throws InterruptedException {\n+        while (!ref.get()) {\n+            Thread.sleep(20);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CarrierThreadInfo.java","additions":243,"deletions":0,"binary":false,"changes":243,"status":"added"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8284161 8286788\n- * @summary Test that a carrier thread waits on a virtual thread\n- * @requires vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @run junit CarrierThreadWaits\n- *\/\n-\n-\/**\n- * @test\n- * @requires vm.continuations & vm.debug\n- * @modules java.base\/java.lang:+open\n- * @run junit\/othervm -XX:LockingMode=0 CarrierThreadWaits\n- *\/\n-\n-import java.lang.management.LockInfo;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.ThreadInfo;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.ForkJoinPool;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class CarrierThreadWaits {\n-\n-    @Test\n-    void testCarrierThreadWaiting() throws Exception {\n-        try (ForkJoinPool pool = new ForkJoinPool(1)) {\n-            var carrierRef = new AtomicReference<Thread>();\n-            var vthreadRef = new AtomicReference<Thread>();\n-\n-            Executor scheduler = task -> {\n-                pool.submit(() -> {\n-                    Thread carrier = Thread.currentThread();\n-                    carrierRef.set(carrier);\n-                    Thread vthread = vthreadRef.get();\n-\n-                    System.err.format(\"%s run task (%s) ...%n\", carrier, vthread);\n-                    task.run();\n-                    System.err.format(\"%s task done (%s)%n\", carrier, vthread);\n-                });\n-            };\n-\n-            \/\/ start a virtual thread that spins and remains mounted until \"done\"\n-            var started = new AtomicBoolean();\n-            var done = new AtomicBoolean();\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            Thread vthread = builder.unstarted(() -> {\n-                started.set(true);\n-                while (!done.get()) {\n-                    Thread.onSpinWait();\n-                }\n-            });\n-            vthreadRef.set(vthread);\n-            vthread.start();\n-\n-            try {\n-                \/\/ wait for virtual thread to start\n-                while (!started.get()) {\n-                    Thread.sleep(10);\n-                }\n-\n-                Thread carrier = carrierRef.get();\n-\n-                long carrierId = carrier.threadId();\n-                long vthreadId = vthread.threadId();\n-\n-                \/\/ carrier thread should be on WAITING on virtual thread\n-                ThreadInfo ti = ManagementFactory.getThreadMXBean().getThreadInfo(carrierId);\n-                Thread.State state = ti.getThreadState();\n-                LockInfo lockInfo = ti.getLockInfo();\n-                assertEquals(Thread.State.WAITING, state);\n-                assertNotNull(lockInfo);\n-                assertEquals(vthread.getClass().getName(), lockInfo.getClassName());\n-                assertEquals(System.identityHashCode(vthread), lockInfo.getIdentityHashCode());\n-                assertEquals(vthreadId, ti.getLockOwnerId());\n-            } finally {\n-                done.set(true);\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CarrierThreadWaits.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -41,0 +43,2 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -68,4 +72,7 @@\n-        AtomicReference<Executor> ref = new AtomicReference<>();\n-        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n-            ref.set(scheduler(Thread.currentThread()));\n-        }).join();\n+        var ref = new AtomicReference<Executor>();\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler1);\n+        Thread thread = factory.newThread(() -> {\n+            ref.set(VThreadScheduler.scheduler(Thread.currentThread()));\n+        });\n+        thread.start();\n+        thread.join();\n@@ -80,11 +87,1 @@\n-        AtomicReference<Executor> ref = new AtomicReference<>();\n-        Thread.ofVirtual().start(() -> {\n-            try {\n-                ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n-                    ref.set(scheduler(Thread.currentThread()));\n-                }).join();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-        }).join();\n-        assertTrue(ref.get() == scheduler1);\n+        VThreadRunner.run(this::testCustomScheduler1);\n@@ -99,2 +96,3 @@\n-        AtomicReference<Executor> ref = new AtomicReference<>();\n-        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n+        var ref = new AtomicReference<Executor>();\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler1);\n+        Thread thread = factory.newThread(() -> {\n@@ -103,1 +101,1 @@\n-                    ref.set(scheduler(Thread.currentThread()));\n+                    ref.set(VThreadScheduler.scheduler(Thread.currentThread()));\n@@ -108,1 +106,3 @@\n-        }).join();\n+        });\n+        thread.start();\n+        thread.join();\n@@ -118,2 +118,4 @@\n-        AtomicReference<Executor> ref = new AtomicReference<>();\n-        ThreadBuilders.virtualThreadBuilder(scheduler1).start(() -> {\n+        var ref = new AtomicReference<Executor>();\n+        ThreadFactory factory1 = VThreadScheduler.virtualThreadFactory(scheduler1);\n+        ThreadFactory factory2 = VThreadScheduler.virtualThreadFactory(scheduler2);\n+        Thread thread1 = factory1.newThread(() -> {\n@@ -121,3 +123,5 @@\n-                ThreadBuilders.virtualThreadBuilder(scheduler2).start(() -> {\n-                    ref.set(scheduler(Thread.currentThread()));\n-                }).join();\n+                Thread thread2 = factory2.newThread(() -> {\n+                    ref.set(VThreadScheduler.scheduler(Thread.currentThread()));\n+                });\n+                thread2.start();\n+                thread2.join();\n@@ -127,1 +131,3 @@\n-        }).join();\n+        });\n+        thread1.start();\n+        thread1.join();\n@@ -152,2 +158,3 @@\n-\n-        ThreadBuilders.virtualThreadBuilder(scheduler).start(LockSupport::park);\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+        Thread thread = factory.newThread(LockSupport::park);\n+        thread.start();\n@@ -165,2 +172,2 @@\n-            var builder = ThreadBuilders.virtualThreadBuilder(Runnable::run);\n-            Thread vthread = builder.start(() -> {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(Runnable::run);\n+            Thread vthread = factory.newThread(() -> {\n@@ -170,0 +177,1 @@\n+            vthread.start();\n@@ -186,2 +194,2 @@\n-            var builder = ThreadBuilders.virtualThreadBuilder(Runnable::run);\n-            Thread vthread = builder.start(() -> {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(Runnable::run);\n+            Thread vthread = factory.newThread(() -> {\n@@ -190,0 +198,1 @@\n+            vthread.start();\n@@ -207,0 +216,1 @@\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -209,1 +219,1 @@\n-            Thread vthread = ThreadBuilders.virtualThreadBuilder(scheduler).start(() -> {\n+            Thread vthread = factory.newThread(() -> {\n@@ -212,0 +222,1 @@\n+            vthread.start();\n@@ -219,1 +230,1 @@\n-     * Returns the scheduler for the given virtual thread.\n+     * Test custom scheduler throwing OOME when starting a thread.\n@@ -221,10 +232,52 @@\n-    private static Executor scheduler(Thread thread) {\n-        if (!thread.isVirtual())\n-            throw new IllegalArgumentException(\"Not a virtual thread\");\n-        try {\n-            Field scheduler = Class.forName(\"java.lang.VirtualThread\")\n-                    .getDeclaredField(\"scheduler\");\n-            scheduler.setAccessible(true);\n-            return (Executor) scheduler.get(thread);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+    @Test\n+    void testThreadStartOOME() throws Exception {\n+        Executor scheduler = task -> {\n+            System.err.println(\"OutOfMemoryError\");\n+            throw new OutOfMemoryError();\n+        };\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+        Thread thread = factory.newThread(() -> { });\n+        assertThrows(OutOfMemoryError.class, thread::start);\n+    }\n+\n+    \/**\n+     * Test custom scheduler throwing OOME when unparking a thread.\n+     *\/\n+    @Test\n+    void testThreadUnparkOOME() throws Exception {\n+        try (ExecutorService executor = Executors.newFixedThreadPool(1)) {\n+            AtomicInteger counter = new AtomicInteger();\n+            Executor scheduler = task -> {\n+                switch (counter.getAndIncrement()) {\n+                    case 0 -> executor.execute(task);             \/\/ Thread.start\n+                    case 1, 2 -> {                                \/\/ unpark attempt 1+2\n+                        System.err.println(\"OutOfMemoryError\");\n+                        throw new OutOfMemoryError();\n+                    }\n+                    default -> executor.execute(task);\n+                }\n+                executor.execute(task);\n+            };\n+\n+            \/\/ start thread and wait for it to park\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+            var thread = factory.newThread(LockSupport::park);\n+            thread.start();\n+            await(thread, Thread.State.WAITING);\n+\n+            \/\/ unpark thread, this should retry until OOME is not thrown\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+\n+    }\n+\n+    \/**\n+     * Waits for the given thread to reach a given state.\n+     *\/\n+    private void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.sleep(10);\n+            state = thread.getState();\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/CustomScheduler.java","additions":97,"deletions":44,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test Thread.getStackTrace to examine the stack trace of a virtual\n- *     thread and its carrier\n- * @requires vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @run main GetStackTrace\n- *\/\n-\n-import java.util.Objects;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.LinkedTransferQueue;\n-import java.util.stream.Stream;\n-\n-public class GetStackTrace {\n-\n-    private static final Object LOCK = new Object();\n-\n-    public static void main(String[] args) throws Exception {\n-        try (var scheduler = new Scheduler()) {\n-            Thread vthread = scheduler.startVirtualThread(() -> {\n-                synchronized (LOCK) {\n-                    try {\n-                        LOCK.wait();\n-                    } catch (InterruptedException e) { }\n-                }\n-            });\n-\n-            try {\n-                \/\/ wait for virtual thread to wait\n-                while (vthread.getState() != Thread.State.WAITING) {\n-                    Thread.sleep(10);\n-                }\n-\n-                \/\/ bottom-most frame of virtual thread should be VirtualThread.run\n-                System.out.println(vthread);\n-                StackTraceElement[] vthreadStack = vthread.getStackTrace();\n-                Stream.of(vthreadStack).forEach(System.out::println);\n-                assertEquals(\"run\", vthreadStack[vthreadStack.length - 1].getMethodName());\n-\n-                System.out.println();\n-\n-                \/\/ top-most frame of carrier thread should be Continuation.run\n-                \/\/ bottom-most frame of carrier thread should be Thread.run\n-                var carrier = scheduler.thread();\n-                System.out.println(carrier);\n-                StackTraceElement[] carrierStack = carrier.getStackTrace();\n-                Stream.of(carrierStack).forEach(System.out::println);\n-                assertEquals(\"run\", carrierStack[0].getMethodName());\n-                assertEquals(\"run\", carrierStack[carrierStack.length - 1].getMethodName());\n-            } finally {\n-                vthread.interrupt();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A scheduler with one thread.\n-     *\/\n-    private static class Scheduler implements AutoCloseable, Executor {\n-        private final BlockingQueue<Runnable> tasks = new LinkedTransferQueue<>();\n-        private final Thread thread;\n-        private volatile boolean done;\n-\n-        Scheduler() {\n-            this.thread = Thread.ofPlatform().start(() -> {\n-                try {\n-                    while (!done) {\n-                        Runnable task = tasks.take();\n-                        task.run();\n-                    }\n-                } catch (InterruptedException e) { }\n-            });\n-        }\n-\n-        Thread thread() {\n-            return thread;\n-        }\n-\n-        @Override\n-        public void close() throws InterruptedException {\n-            done = true;\n-            thread.interrupt();\n-            thread.join();\n-        }\n-\n-        @Override\n-        public void execute(Runnable task) {\n-            tasks.add(task);\n-        }\n-\n-        Thread startVirtualThread(Runnable task) {\n-            return ThreadBuilders.virtualThreadBuilder(this).start(task);\n-        }\n-    }\n-\n-    private static void assertTrue(boolean e) {\n-        if (!e) throw new RuntimeException();\n-    }\n-\n-    private static void assertEquals(Object x, Object y) {\n-        if (!Objects.equals(x, y))\n-            throw new RuntimeException();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/GetStackTrace.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test Thread::getStackTrace on a virtual thread that is runnable-unmounted\n- * @requires vm.continuations\n- * @run main\/othervm -Djdk.virtualThreadScheduler.maxPoolSize=1 GetStackTraceWhenRunnable\n- *\/\n-\n-import java.io.IOException;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.locks.LockSupport;\n-\n-public class GetStackTraceWhenRunnable {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ start thread1 and wait for it to park\n-        Thread thread1 = Thread.startVirtualThread(LockSupport::park);\n-        while (thread1.getState() != Thread.State.WAITING) {\n-            Thread.sleep(20);\n-        }\n-\n-        \/\/ start thread2 to pin the carrier thread\n-        var started = new AtomicBoolean();\n-        var done = new AtomicBoolean();\n-        Thread thread2 = Thread.startVirtualThread(() -> {\n-            started.set(true);\n-            while (!done.get()) {\n-                Thread.onSpinWait();\n-            }\n-        });\n-        try {\n-            \/\/ wait for thread2 to start\n-            while (!started.get()) {\n-                Thread.sleep(10);\n-            }\n-\n-            \/\/ unpark thread1 and check that it is \"stuck\" in the runnable state\n-            \/\/ (the carrier thread is pinned, no other virtual thread can run)\n-            LockSupport.unpark(thread1);\n-            for (int i = 0; i < 5; i++) {\n-                assertTrue(thread1.getState() == Thread.State.RUNNABLE);\n-                Thread.sleep(100);\n-            }\n-\n-            \/\/ print thread1's stack trace\n-            StackTraceElement[] stack = thread1.getStackTrace();\n-            assertTrue(stack.length > 0);\n-            for (StackTraceElement e : stack) {\n-                System.out.println(e);\n-            }\n-        } finally {\n-            done.set(true);\n-            thread2.join();\n-            thread1.join();\n-        }\n-    }\n-\n-    static void assertTrue(boolean e) {\n-        if (!e) throw new RuntimeException();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/GetStackTraceWhenRunnable.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -45,1 +44,0 @@\n-import java.util.function.Consumer;\n@@ -55,1 +53,2 @@\n-import jdk.test.lib.thread.VThreadRunner.ThrowingRunnable;\n+import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -57,0 +56,1 @@\n+import org.junit.jupiter.api.BeforeAll;\n@@ -58,2 +58,1 @@\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -64,0 +63,9 @@\n+    @BeforeAll\n+    static void setup() {\n+        int minParallelism = 2;\n+        if (Thread.currentThread().isVirtual()) {\n+            minParallelism++;\n+        }\n+        VThreadRunner.ensureParallelism(minParallelism);\n+    }\n+\n@@ -96,50 +104,1 @@\n-     * Arguments for testVirtualThreadPinned to test jdk.VirtualThreadPinned event.\n-     *   [0] label\/description\n-     *   [1] the operation to park\/wait\n-     *   [2] the Thread.State when parked\/waiting\n-     *   [3] the action to unpark\/notify the thread\n-     *\/\n-    static Stream<Arguments> pinnedCases() {\n-        Object lock = new Object();\n-\n-        \/\/ park with native frame on stack\n-        var finish1 = new AtomicBoolean();\n-        var parkWhenPinned = Arguments.of(\n-            \"LockSupport.park when pinned\",\n-            (ThrowingRunnable<Exception>) () -> {\n-                VThreadPinner.runPinned(() -> {\n-                    while (!finish1.get()) {\n-                        LockSupport.park();\n-                    }\n-                });\n-            },\n-            Thread.State.WAITING,\n-                (Consumer<Thread>) t -> {\n-                    finish1.set(true);\n-                    LockSupport.unpark(t);\n-                }\n-        );\n-\n-        \/\/ timed park with native frame on stack\n-        var finish2 = new AtomicBoolean();\n-        var timedParkWhenPinned = Arguments.of(\n-            \"LockSupport.parkNanos when pinned\",\n-            (ThrowingRunnable<Exception>) () -> {\n-                VThreadPinner.runPinned(() -> {\n-                    while (!finish2.get()) {\n-                        LockSupport.parkNanos(Long.MAX_VALUE);\n-                    }\n-                });\n-            },\n-            Thread.State.TIMED_WAITING,\n-            (Consumer<Thread>) t -> {\n-                finish2.set(true);\n-                LockSupport.unpark(t);\n-            }\n-        );\n-\n-        return Stream.of(parkWhenPinned, timedParkWhenPinned);\n-    }\n-\n-    \/**\n-     * Test jdk.VirtualThreadPinned event.\n+     * Test jdk.VirtualThreadPinned event when parking while pinned.\n@@ -148,6 +107,2 @@\n-    @MethodSource(\"pinnedCases\")\n-    void testVirtualThreadPinned(String label,\n-                                 ThrowingRunnable<Exception> parker,\n-                                 Thread.State expectedState,\n-                                 Consumer<Thread> unparker) throws Exception {\n-\n+    @ValueSource(booleans = { true, false })\n+    void testParkWhenPinned(boolean timed) throws Exception {\n@@ -156,1 +111,0 @@\n-\n@@ -158,7 +112,12 @@\n-            try {\n-                var exception = new AtomicReference<Throwable>();\n-                var thread = Thread.ofVirtual().start(() -> {\n-                    try {\n-                        parker.run();\n-                    } catch (Throwable e) {\n-                        exception.set(e);\n+\n+            var started = new AtomicBoolean();\n+            var done = new AtomicBoolean();\n+            var vthread = Thread.startVirtualThread(() -> {\n+                VThreadPinner.runPinned(() -> {\n+                    started.set(true);\n+                    while (!done.get()) {\n+                        if (timed) {\n+                            LockSupport.parkNanos(Long.MAX_VALUE);\n+                        } else {\n+                            LockSupport.park();\n+                        }\n@@ -167,13 +126,6 @@\n-                try {\n-                    \/\/ wait for thread to park\/wait\n-                    Thread.State state = thread.getState();\n-                    while (state != expectedState) {\n-                        assertTrue(state != Thread.State.TERMINATED, thread.toString());\n-                        Thread.sleep(10);\n-                        state = thread.getState();\n-                    }\n-                } finally {\n-                    unparker.accept(thread);\n-                    thread.join();\n-                    assertNull(exception.get());\n-                }\n+            });\n+\n+            try {\n+                \/\/ wait for thread to start and park\n+                awaitTrue(started);\n+                await(vthread, timed ? Thread.State.TIMED_WAITING : Thread.State.WAITING);\n@@ -181,0 +133,3 @@\n+                done.set(true);\n+                LockSupport.unpark(vthread);\n+                vthread.join();\n@@ -184,6 +139,1 @@\n-            Map<String, Integer> events = sumEvents(recording);\n-            System.err.println(events);\n-\n-            \/\/ should have at least one pinned event\n-            int pinnedCount = events.getOrDefault(\"jdk.VirtualThreadPinned\", 0);\n-            assertTrue(pinnedCount >= 1, \"Expected one or more events\");\n+            assertContainsPinnedEvent(recording, vthread);\n@@ -206,1 +156,1 @@\n-                ThreadFactory factory = ThreadBuilders.virtualThreadBuilder(scheduler).factory();\n+                ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -213,3 +163,1 @@\n-                while (thread.getState() != Thread.State.WAITING) {\n-                    Thread.sleep(10);\n-                }\n+                await(thread, Thread.State.WAITING);\n@@ -235,5 +183,3 @@\n-            Map<String, Integer> events = sumEvents(recording);\n-            System.err.println(events);\n-\n-            int count = events.getOrDefault(\"jdk.VirtualThreadSubmitFailed\", 0);\n-            assertEquals(2, count);\n+            List<RecordedEvent> submitFailedEvents = find(recording, \"jdk.VirtualThreadSubmitFailed\");\n+            System.err.println(submitFailedEvents);\n+            assertTrue(submitFailedEvents.size() == 2, \"Expected two events\");\n@@ -243,0 +189,11 @@\n+    \/**\n+     * Returns the list of events in the given recording with the given name.\n+     *\/\n+    private static List<RecordedEvent> find(Recording recording, String name) throws IOException {\n+        Path recordingFile = recordingFile(recording);\n+        return RecordingFile.readAllEvents(recordingFile)\n+                .stream()\n+                .filter(e -> e.getEventType().getName().equals(name))\n+                .toList();\n+    }\n+\n@@ -267,0 +224,34 @@\n+\n+    \/**\n+     * Assert that a recording contains a jdk.VirtualThreadPinned event on the given thread.\n+     *\/\n+    private void assertContainsPinnedEvent(Recording recording, Thread thread) throws IOException {\n+        List<RecordedEvent> pinnedEvents = find(recording, \"jdk.VirtualThreadPinned\");\n+        assertTrue(pinnedEvents.size() > 0, \"No jdk.VirtualThreadPinned events in recording\");\n+        System.err.println(pinnedEvents);\n+\n+        long tid = thread.threadId();\n+        assertTrue(pinnedEvents.stream()\n+                        .anyMatch(e -> e.getThread().getJavaThreadId() == tid),\n+                \"jdk.VirtualThreadPinned for javaThreadId = \" + tid + \" not found\");\n+    }\n+\n+    \/**\n+     * Waits for the given boolean to be set to true.\n+     *\/\n+    private void awaitTrue(AtomicBoolean b) throws InterruptedException {\n+        while (!b.get()) {\n+            Thread.sleep(10);\n+        }\n+    }\n+\n+    \/**\n+     * Waits for the given thread to reach a given state.\n+     *\/\n+    private static void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/JfrEvents.java","additions":89,"deletions":98,"binary":false,"changes":187,"status":"modified"},{"patch":"@@ -0,0 +1,410 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=default\n+ * @summary Test virtual thread with monitor enter\/exit\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED MonitorEnterExit\n+ *\/\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.thread.VThreadPinner;\n+import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadScheduler;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.api.condition.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n+\n+class MonitorEnterExit {\n+    static final int MAX_ENTER_DEPTH = 256;\n+\n+    @BeforeAll\n+    static void setup() {\n+        \/\/ need >=2 carriers for testing pinning when main thread is a virtual thread\n+        if (Thread.currentThread().isVirtual()) {\n+            VThreadRunner.ensureParallelism(2);\n+        }\n+    }\n+\n+    \/**\n+     * Test monitor enter with no contention.\n+     *\/\n+    @Test\n+    void testEnterNoContention() throws Exception {\n+        var lock = new Object();\n+        VThreadRunner.run(() -> {\n+            synchronized (lock) {\n+                assertTrue(Thread.holdsLock(lock));\n+            }\n+            assertFalse(Thread.holdsLock(lock));\n+        });\n+    }\n+\n+    \/**\n+     * Test monitor enter with contention, monitor is held by platform thread.\n+     *\/\n+    @Test\n+    void testEnterWhenHeldByPlatformThread() throws Exception {\n+        testEnterWithContention();\n+    }\n+\n+    \/**\n+     * Test monitor enter with contention, monitor is held by virtual thread.\n+     *\/\n+    @Test\n+    void testEnterWhenHeldByVirtualThread() throws Exception {\n+        VThreadRunner.run(this::testEnterWithContention);\n+    }\n+\n+    \/**\n+     * Test monitor enter with contention, monitor will be held by caller thread.\n+     *\/\n+    private void testEnterWithContention() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var entered = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().unstarted(() -> {\n+            started.countDown();\n+            synchronized (lock) {\n+                assertTrue(Thread.holdsLock(lock));\n+                entered.set(true);\n+            }\n+            assertFalse(Thread.holdsLock(lock));\n+        });\n+        try {\n+            synchronized (lock) {\n+                vthread.start();\n+\n+                \/\/ wait for thread to start and block\n+                started.await();\n+                await(vthread, Thread.State.BLOCKED);\n+\n+                assertFalse(entered.get());\n+            }\n+        } finally {\n+            vthread.join();\n+        }\n+        assertTrue(entered.get());\n+    }\n+\n+    \/**\n+     * Test monitor reenter.\n+     *\/\n+    @Test\n+    void testReenter() throws Exception {\n+        var lock = new Object();\n+        VThreadRunner.run(() -> {\n+            testReenter(lock, 0);\n+            assertFalse(Thread.holdsLock(lock));\n+        });\n+    }\n+\n+    private void testReenter(Object lock, int depth) {\n+        if (depth < MAX_ENTER_DEPTH) {\n+            synchronized (lock) {\n+                assertTrue(Thread.holdsLock(lock));\n+                testReenter(lock, depth + 1);\n+                assertTrue(Thread.holdsLock(lock));\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Test monitor enter when pinned.\n+     *\/\n+    @Test\n+    void testEnterWhenPinned() throws Exception {\n+        var lock = new Object();\n+        VThreadPinner.runPinned(() -> {\n+            synchronized (lock) {\n+                assertTrue(Thread.holdsLock(lock));\n+            }\n+            assertFalse(Thread.holdsLock(lock));\n+        });\n+    }\n+\n+    \/**\n+     * Test monitor reenter when pinned.\n+     *\/\n+    @Test\n+    void testReenterWhenPinned() throws Exception {\n+        VThreadRunner.run(() -> {\n+            var lock = new Object();\n+            synchronized (lock) {\n+                VThreadPinner.runPinned(() -> {\n+                    assertTrue(Thread.holdsLock(lock));\n+                    synchronized (lock) {\n+                        assertTrue(Thread.holdsLock(lock));\n+                    }\n+                    assertTrue(Thread.holdsLock(lock));\n+                });\n+            }\n+            assertFalse(Thread.holdsLock(lock));\n+        });\n+    }\n+\n+    \/**\n+     * Test contended monitor enter when pinned. Monitor is held by platform thread.\n+     *\/\n+    @Test\n+    void testContendedEnterWhenPinnedHeldByPlatformThread() throws Exception {\n+        testEnterWithContentionWhenPinned();\n+    }\n+\n+    \/**\n+     * Test contended monitor enter when pinned. Monitor is held by virtual thread.\n+     *\/\n+    @Test\n+    void testContendedEnterWhenPinnedHeldByVirtualThread() throws Exception {\n+        \/\/ need at least two carrier threads\n+        int previousParallelism = VThreadRunner.ensureParallelism(2);\n+        try {\n+            VThreadRunner.run(this::testEnterWithContentionWhenPinned);\n+        } finally {\n+            VThreadRunner.setParallelism(previousParallelism);\n+        }\n+    }\n+\n+    \/**\n+     * Test contended monitor enter when pinned, monitor will be held by caller thread.\n+     *\/\n+    private void testEnterWithContentionWhenPinned() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var entered = new AtomicBoolean();\n+        Thread vthread = Thread.ofVirtual().unstarted(() -> {\n+            VThreadPinner.runPinned(() -> {\n+                started.countDown();\n+                synchronized (lock) {\n+                    entered.set(true);\n+                }\n+            });\n+        });\n+        synchronized (lock) {\n+            \/\/ start thread and wait for it to block\n+            vthread.start();\n+            started.await();\n+            await(vthread, Thread.State.BLOCKED);\n+            assertFalse(entered.get());\n+        }\n+        vthread.join();\n+\n+        \/\/ check thread entered monitor\n+        assertTrue(entered.get());\n+    }\n+\n+    \/**\n+     * Returns a stream of elements that are ordered pairs of platform and virtual thread\n+     * counts. 0,2,4,..16 platform threads. 2,4,6,..32 virtual threads.\n+     *\/\n+    static Stream<Arguments> threadCounts() {\n+        return IntStream.range(0, 17)\n+                .filter(i -> i % 2 == 0)\n+                .mapToObj(i -> i)\n+                .flatMap(np -> IntStream.range(2, 33)\n+                        .filter(i -> i % 2 == 0)\n+                        .mapToObj(vp -> Arguments.of(np, vp)));\n+    }\n+\n+    \/**\n+     * Test mutual exclusion of monitors with platform and virtual threads.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"threadCounts\")\n+    void testMutualExclusion(int nPlatformThreads, int nVirtualThreads) throws Exception {\n+        class Counter {\n+            int count;\n+            synchronized void increment() {\n+                count++;\n+                Thread.yield();\n+            }\n+        }\n+        var counter = new Counter();\n+        int nThreads = nPlatformThreads + nVirtualThreads;\n+        var threads = new Thread[nThreads];\n+        int index = 0;\n+        for (int i = 0; i < nPlatformThreads; i++) {\n+            threads[index] = Thread.ofPlatform()\n+                    .name(\"platform-\" + index)\n+                    .unstarted(counter::increment);\n+            index++;\n+        }\n+        for (int i = 0; i < nVirtualThreads; i++) {\n+            threads[index] = Thread.ofVirtual()\n+                    .name(\"virtual-\" + index)\n+                    .unstarted(counter::increment);\n+            index++;\n+        }\n+        \/\/ start all threads\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+        \/\/ wait for all threads to terminate\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+        assertEquals(nThreads, counter.count);\n+    }\n+\n+    \/**\n+     * Test unblocking a virtual thread waiting to enter a monitor held by a platform thread.\n+     *\/\n+    @RepeatedTest(20)\n+    void testUnblockingByPlatformThread() throws Exception {\n+        testUnblocking();\n+    }\n+\n+    \/**\n+     * Test unblocking a virtual thread waiting to enter a monitor held by another\n+     * virtual thread.\n+     *\/\n+    @RepeatedTest(20)\n+    void testUnblockingByVirtualThread() throws Exception {\n+        VThreadRunner.run(this::testUnblocking);\n+    }\n+\n+    \/**\n+     * Test unblocking a virtual thread waiting to enter a monitor, monitor will be\n+     * initially be held by caller thread.\n+     *\/\n+    private void testUnblocking() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var entered = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().unstarted(() -> {\n+            started.countDown();\n+            synchronized (lock) {\n+                entered.set(true);\n+            }\n+        });\n+        try {\n+            synchronized (lock) {\n+                vthread.start();\n+                started.await();\n+\n+                \/\/ random delay before exiting monitor\n+                switch (ThreadLocalRandom.current().nextInt(4)) {\n+                    case 0 -> { \/* no delay *\/}\n+                    case 1 -> Thread.onSpinWait();\n+                    case 2 -> Thread.yield();\n+                    case 3 -> await(vthread, Thread.State.BLOCKED);\n+                    default -> fail();\n+                }\n+\n+                assertFalse(entered.get());\n+            }\n+        } finally {\n+            vthread.join();\n+        }\n+        assertTrue(entered.get());\n+    }\n+\n+    \/**\n+     * Test that unblocking a virtual thread waiting to enter a monitor does not consume\n+     * the thread's parking permit.\n+     *\/\n+    @Test\n+    void testParkingPermitNotConsumed() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var vthread = Thread.ofVirtual().unstarted(() -> {\n+            started.countDown();\n+            LockSupport.unpark(Thread.currentThread());\n+            synchronized (lock) { }  \/\/ should block\n+            LockSupport.park();      \/\/ should not park\n+        });\n+\n+        synchronized (lock) {\n+            vthread.start();\n+            \/\/ wait for thread to start and block\n+            started.await();\n+            await(vthread, Thread.State.BLOCKED);\n+        }\n+        vthread.join();\n+    }\n+\n+    \/**\n+     * Test that unblocking a virtual thread waiting to enter a monitor does not make\n+     * available the thread's parking permit.\n+     *\/\n+    @Test\n+    void testParkingPermitNotOffered() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var vthread = Thread.ofVirtual().unstarted(() -> {\n+            started.countDown();\n+            synchronized (lock) { }  \/\/ should block\n+            LockSupport.park();      \/\/ should park\n+        });\n+\n+        synchronized (lock) {\n+            vthread.start();\n+            \/\/ wait for thread to start and block\n+            started.await();\n+            await(vthread, Thread.State.BLOCKED);\n+        }\n+\n+        try {\n+            \/\/ wait for thread to park, it should not terminate\n+            await(vthread, Thread.State.WAITING);\n+            vthread.join(Duration.ofMillis(100));\n+            assertEquals(Thread.State.WAITING, vthread.getState());\n+        } finally {\n+            LockSupport.unpark(vthread);\n+            vthread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Waits for the given thread to reach a given state.\n+     *\/\n+    private void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/MonitorEnterExit.java","additions":410,"deletions":0,"binary":false,"changes":410,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -29,1 +29,1 @@\n- * @run junit MonitorWaitNotify\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED MonitorWaitNotify\n@@ -32,1 +32,15 @@\n-import java.util.concurrent.Semaphore;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import java.util.stream.Collectors;\n@@ -34,0 +48,2 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -35,0 +51,1 @@\n+import jdk.test.lib.thread.VThreadPinner;\n@@ -36,0 +53,3 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -37,0 +57,1 @@\n+import static org.junit.jupiter.api.Assumptions.*;\n@@ -40,0 +61,6 @@\n+    @BeforeAll\n+    static void setup() {\n+        \/\/ need >=2 carriers for testing pinning\n+        VThreadRunner.ensureParallelism(2);\n+    }\n+\n@@ -43,2 +70,3 @@\n-    @Test\n-    void testWaitNotify1() throws Exception {\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testWaitNotify1(boolean pinned) throws Exception {\n@@ -46,1 +74,1 @@\n-        var ready = new Semaphore(0);\n+        var ready = new AtomicBoolean();\n@@ -49,1 +77,0 @@\n-                ready.release();\n@@ -51,1 +78,9 @@\n-                    lock.wait();\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait();\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait();\n+                    }\n@@ -55,2 +90,3 @@\n-        \/\/ thread invokes notify\n-        ready.acquire();\n+        awaitTrue(ready);\n+\n+        \/\/ notify, thread should block waiting to reenter\n@@ -59,0 +95,1 @@\n+            await(thread, Thread.State.BLOCKED);\n@@ -69,3 +106,1 @@\n-        var ready = new Semaphore(0);\n-        var thread = Thread.ofVirtual().start(() -> {\n-            ready.acquireUninterruptibly();\n+        var thread = Thread.ofVirtual().unstarted(() -> {\n@@ -77,1 +112,1 @@\n-            ready.release();\n+            thread.start();\n@@ -86,11 +121,15 @@\n-    @Test\n-    void testWaitNotify3() throws Exception {\n-        \/\/ need at least two carrier threads due to pinning\n-        int previousParallelism = VThreadRunner.ensureParallelism(2);\n-        try {\n-            var lock = new Object();\n-            var ready = new Semaphore(0);\n-            var thread1 = Thread.ofVirtual().start(() -> {\n-                synchronized (lock) {\n-                    ready.release();\n-                    try {\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testWaitNotify3(boolean pinned) throws Exception {\n+        var lock = new Object();\n+        var ready = new AtomicBoolean();\n+        var thread1 = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                try {\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait();\n+                        });\n+                    } else {\n+                        ready.set(true);\n@@ -98,1 +137,3 @@\n-                    } catch (InterruptedException e) { }\n+                    }\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n@@ -100,3 +141,7 @@\n-            });\n-            var thread2 = Thread.ofVirtual().start(() -> {\n-                ready.acquireUninterruptibly();\n+            }\n+        });\n+        var thread2 = Thread.ofVirtual().start(() -> {\n+            try {\n+                awaitTrue(ready);\n+\n+                \/\/ notify, thread should block waiting to reenter\n@@ -105,0 +150,1 @@\n+                    await(thread1, Thread.State.BLOCKED);\n@@ -106,3 +152,48 @@\n-            });\n-            thread1.join();\n-            thread2.join();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        thread1.join();\n+        thread2.join();\n+    }\n+\n+    \/**\n+     * Test notifyAll when there are no threads waiting.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = { 0, 30000, Integer.MAX_VALUE })\n+    void testNotifyBeforeWait(int timeout) throws Exception {\n+        var lock = new Object();\n+\n+        \/\/ no threads waiting\n+        synchronized (lock) {\n+            lock.notifyAll();\n+        }\n+\n+        var ready = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            try {\n+                synchronized (lock) {\n+                    ready.set(true);\n+\n+                    \/\/ thread should wait\n+                    if (timeout > 0) {\n+                        lock.wait(timeout);\n+                    } else {\n+                        lock.wait();\n+                    }\n+                }\n+            } catch (InterruptedException e) { }\n+        });\n+\n+        try {\n+            \/\/ wait for thread to start and wait\n+            awaitTrue(ready);\n+            Thread.State expectedState = timeout > 0\n+                    ? Thread.State.TIMED_WAITING\n+                    : Thread.State.WAITING;\n+            await(thread, expectedState);\n+\n+            \/\/ poll thread state again, it should still be waiting\n+            Thread.sleep(10);\n+            assertEquals(thread.getState(), expectedState);\n@@ -110,2 +201,4 @@\n-            \/\/ restore\n-            VThreadRunner.setParallelism(previousParallelism);\n+            synchronized (lock) {\n+                lock.notifyAll();\n+            }\n+            thread.join();\n@@ -114,0 +207,23 @@\n+    \/**\n+     * Test duration of timed Object.wait.\n+     *\/\n+    @Test\n+    void testTimedWaitDuration1() throws Exception {\n+        var lock = new Object();\n+\n+        var durationRef = new AtomicReference<Long>();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            try {\n+                synchronized (lock) {\n+                    long start = millisTime();\n+                    lock.wait(2000);\n+                    durationRef.set(millisTime() - start);\n+                }\n+            } catch (InterruptedException e) { }\n+        });\n+\n+        thread.join();\n+\n+        long duration = durationRef.get();\n+        checkDuration(duration, 1900, 20_000);\n+    }\n@@ -116,1 +232,3 @@\n-     * Test interrupt status set when calling Object.wait.\n+     * Test duration of timed Object.wait. This test invokes wait twice, first with a short\n+     * timeout, the second with a longer timeout. The test scenario ensures that the\n+     * timeout from the first wait doesn't interfere with the second wait.\n@@ -119,1 +237,40 @@\n-    void testWaitNotify4() throws Exception {\n+    void testTimedWaitDuration2() throws Exception {\n+        var lock = new Object();\n+\n+        var ready = new AtomicBoolean();\n+        var waited = new AtomicBoolean();\n+        var durationRef = new AtomicReference<Long>();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            try {\n+                synchronized (lock) {\n+                    ready.set(true);\n+                    lock.wait(200);\n+                    waited.set(true);\n+\n+                    long start = millisTime();\n+                    lock.wait(2000);\n+                    durationRef.set(millisTime() - start);\n+                }\n+            } catch (InterruptedException e) { }\n+        });\n+\n+        awaitTrue(ready);\n+        synchronized (lock) {\n+            \/\/ wake thread if waiting in first wait\n+            if (!waited.get()) {\n+                lock.notifyAll();\n+            }\n+        }\n+\n+        thread.join();\n+\n+        long duration = durationRef.get();\n+        checkDuration(duration, 1900, 20_000);\n+    }\n+\n+    \/**\n+     * Testing invoking Object.wait with interrupt status set.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = { 0, 30000, Integer.MAX_VALUE })\n+    void testWaitWithInterruptSet(int timeout) throws Exception {\n@@ -121,2 +278,0 @@\n-            Thread t = Thread.currentThread();\n-            t.interrupt();\n@@ -124,0 +279,146 @@\n+            synchronized (lock) {\n+                Thread.currentThread().interrupt();\n+                if (timeout > 0) {\n+                    assertThrows(InterruptedException.class, () -> lock.wait(timeout));\n+                } else {\n+                    assertThrows(InterruptedException.class, lock::wait);\n+                }\n+                assertFalse(Thread.currentThread().isInterrupted());\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * Test interrupting a virtual thread waiting in Object.wait.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = { 0, 30000, Integer.MAX_VALUE })\n+    void testInterruptWait(int timeout) throws Exception {\n+        var lock = new Object();\n+        var ready = new AtomicBoolean();\n+        var interruptedException = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                try {\n+                    ready.set(true);\n+                    if (timeout > 0) {\n+                        lock.wait(timeout);\n+                    } else {\n+                        lock.wait();\n+                    }\n+                } catch (InterruptedException e) {\n+                    \/\/ check stack trace has the expected frames\n+                    Set<String> expected = Set.of(\"wait0\", \"wait\", \"run\");\n+                    Set<String> methods = Stream.of(e.getStackTrace())\n+                            .map(StackTraceElement::getMethodName)\n+                            .collect(Collectors.toSet());\n+                    assertTrue(methods.containsAll(expected));\n+\n+                    interruptedException.set(true);\n+                }\n+            }\n+        });\n+\n+        \/\/ wait for thread to start and wait\n+        awaitTrue(ready);\n+        await(vthread, timeout > 0 ? Thread.State.TIMED_WAITING : Thread.State.WAITING);\n+\n+        \/\/ interrupt thread, should block, then throw InterruptedException\n+        synchronized (lock) {\n+            vthread.interrupt();\n+            await(vthread, Thread.State.BLOCKED);\n+        }\n+        vthread.join();\n+        assertTrue(interruptedException.get());\n+    }\n+\n+    \/**\n+     * Test interrupting a virtual thread blocked waiting to reenter after waiting.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = { 0, 30000, Integer.MAX_VALUE })\n+    void testInterruptReenterAfterWait(int timeout) throws Exception {\n+        var lock = new Object();\n+        var ready = new AtomicBoolean();\n+        var interruptedException = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                try {\n+                    ready.set(true);\n+                    if (timeout > 0) {\n+                        lock.wait(timeout);\n+                    } else {\n+                        lock.wait();\n+                    }\n+                } catch (InterruptedException e) {\n+                    interruptedException.set(true);\n+                }\n+            }\n+        });\n+\n+        \/\/ wait for thread to start and wait\n+        awaitTrue(ready);\n+        await(vthread, timeout > 0 ? Thread.State.TIMED_WAITING : Thread.State.WAITING);\n+\n+        \/\/ notify, thread should block waiting to reenter\n+        synchronized (lock) {\n+            lock.notifyAll();\n+            await(vthread, Thread.State.BLOCKED);\n+\n+            \/\/ interrupt when blocked\n+            vthread.interrupt();\n+        }\n+\n+        vthread.join();\n+        assertFalse(interruptedException.get());\n+        assertTrue(vthread.isInterrupted());\n+    }\n+\n+    \/**\n+     * Test Object.wait when the monitor entry count > 1.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(ints = { 0, 30000, Integer.MAX_VALUE })\n+    void testWaitWhenEnteredManyTimes(int timeout) throws Exception {\n+        var lock = new Object();\n+        var ready = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                synchronized (lock) {\n+                    synchronized (lock) {\n+                        try {\n+                            ready.set(true);\n+                            if (timeout > 0) {\n+                                lock.wait(timeout);\n+                            } else {\n+                                lock.wait();\n+                            }\n+                        } catch (InterruptedException e) { }\n+                    }\n+                }\n+            }\n+        });\n+\n+        \/\/ wait for thread to start and wait\n+        awaitTrue(ready);\n+        await(vthread, timeout > 0 ? Thread.State.TIMED_WAITING : Thread.State.WAITING);\n+\n+        \/\/ notify, thread should block waiting to reenter\n+        synchronized (lock) {\n+            lock.notifyAll();\n+            await(vthread, Thread.State.BLOCKED);\n+        }\n+        vthread.join();\n+    }\n+\n+    \/**\n+     * Test that Object.wait does not consume the thread's parking permit.\n+     *\/\n+    @Test\n+    void testParkingPermitNotConsumed() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var completed = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            started.countDown();\n+            LockSupport.unpark(Thread.currentThread());\n@@ -127,1 +428,0 @@\n-                    fail();\n@@ -129,2 +429,1 @@\n-                    \/\/ interrupt status should be cleared\n-                    assertFalse(t.isInterrupted());\n+                    fail(\"wait interrupted\");\n@@ -133,0 +432,2 @@\n+            LockSupport.park();      \/\/ should not park\n+            completed.set(true);\n@@ -134,0 +435,13 @@\n+\n+        \/\/ wait for thread to start and wait\n+        started.await();\n+        await(vthread, Thread.State.WAITING);\n+\n+        \/\/ wakeup thread\n+        synchronized (lock) {\n+            lock.notifyAll();\n+        }\n+\n+        \/\/ thread should terminate\n+        vthread.join();\n+        assertTrue(completed.get());\n@@ -137,1 +451,1 @@\n-     * Test interrupt when blocked in Object.wait.\n+     * Test that Object.wait does not make available the thread's parking permit.\n@@ -140,5 +454,7 @@\n-    void testWaitNotify5() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Thread t = Thread.currentThread();\n-            scheduleInterrupt(t, 1000);\n-            Object lock = new Object();\n+    void testParkingPermitNotOffered() throws Exception {\n+        var lock = new Object();\n+        var started = new CountDownLatch(1);\n+        var readyToPark = new CountDownLatch(1);\n+        var completed = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            started.countDown();\n@@ -148,1 +464,0 @@\n-                    fail();\n@@ -150,2 +465,1 @@\n-                    \/\/ interrupt status should be cleared\n-                    assertFalse(t.isInterrupted());\n+                    fail(\"wait interrupted\");\n@@ -154,0 +468,3 @@\n+            readyToPark.countDown();\n+            LockSupport.park();      \/\/ should park\n+            completed.set(true);\n@@ -155,0 +472,19 @@\n+\n+        \/\/ wait for thread to start and wait\n+        started.await();\n+        await(vthread, Thread.State.WAITING);\n+\n+        \/\/ wakeup thread\n+        synchronized (lock) {\n+            lock.notifyAll();\n+        }\n+\n+        \/\/ thread should park\n+        readyToPark.await();\n+        await(vthread, Thread.State.WAITING);\n+\n+        LockSupport.unpark(vthread);\n+\n+        \/\/ thread should terminate\n+        vthread.join();\n+        assertTrue(completed.get());\n@@ -158,1 +494,1 @@\n-     * Schedule a thread to be interrupted after a delay.\n+     * Test that wait(long) throws IAE when timeout is negative.\n@@ -160,7 +496,8 @@\n-    private static void scheduleInterrupt(Thread thread, long delay) {\n-        Runnable interruptTask = () -> {\n-            try {\n-                Thread.sleep(delay);\n-                thread.interrupt();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n+    @Test\n+    void testIllegalArgumentException() throws Exception {\n+        VThreadRunner.run(() -> {\n+            Object obj = new Object();\n+            synchronized (obj) {\n+                assertThrows(IllegalArgumentException.class, () -> obj.wait(-1L));\n+                assertThrows(IllegalArgumentException.class, () -> obj.wait(-1000L));\n+                assertThrows(IllegalArgumentException.class, () -> obj.wait(Long.MIN_VALUE));\n@@ -168,2 +505,58 @@\n-        };\n-        new Thread(interruptTask).start();\n+        });\n+    }\n+\n+    \/**\n+     * Test that wait throws IMSE when not owner.\n+     *\/\n+    @Test\n+    void testIllegalMonitorStateException() throws Exception {\n+        VThreadRunner.run(() -> {\n+            Object obj = new Object();\n+            assertThrows(IllegalMonitorStateException.class, () -> obj.wait());\n+            assertThrows(IllegalMonitorStateException.class, () -> obj.wait(0));\n+            assertThrows(IllegalMonitorStateException.class, () -> obj.wait(1000));\n+            assertThrows(IllegalMonitorStateException.class, () -> obj.wait(Long.MAX_VALUE));\n+        });\n+    }\n+\n+    \/**\n+     * Waits for the boolean value to become true.\n+     *\/\n+    private static void awaitTrue(AtomicBoolean ref) throws InterruptedException {\n+        while (!ref.get()) {\n+            Thread.sleep(20);\n+        }\n+    }\n+\n+    \/**\n+     * Waits for the given thread to reach a given state.\n+     *\/\n+    private void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n+        Thread.State state = thread.getState();\n+        while (state != expectedState) {\n+            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n+            Thread.sleep(10);\n+            state = thread.getState();\n+        }\n+    }\n+\n+    \/**\n+     * Returns the current time in milliseconds.\n+     *\/\n+    private static long millisTime() {\n+        long now = System.nanoTime();\n+        return TimeUnit.MILLISECONDS.convert(now, TimeUnit.NANOSECONDS);\n+    }\n+\n+    \/**\n+     * Check a duration is within expected bounds.\n+     * @param duration, in milliseconds\n+     * @param min minimum expected duration, in milliseconds\n+     * @param max maximum expected duration, in milliseconds\n+     * @return the duration (now - start), in milliseconds\n+     *\/\n+    private static void checkDuration(long duration, long min, long max) {\n+        assertTrue(duration >= min,\n+                \"Duration \" + duration + \"ms, expected >= \" + min + \"ms\");\n+        assertTrue(duration <= max,\n+                \"Duration \" + duration + \"ms, expected <= \" + max + \"ms\");\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/MonitorWaitNotify.java","additions":455,"deletions":62,"binary":false,"changes":517,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -61,3 +63,1 @@\n-            ThreadFactory factory = ThreadBuilders.virtualThreadBuilder(scheduler)\n-                    .name(\"vthread-\", 0)\n-                    .factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ParkWithFixedThreadPool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -145,1 +146,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -148,2 +149,1 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            ThreadFactory factory = builder.factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -324,1 +324,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -327,2 +327,1 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            ThreadFactory factory = builder.factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Reflection.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test stack traces in exceptions, stack frames walked by the StackWalker,\n+ *    and the stack trace returned by Thread.getStackTrace\n+ * @requires vm.continuations\n+ * @modules java.base\/java.lang:+open java.management\n+ * @library \/test\/lib\n+ * @run junit StackFrames\n+ * @run junit\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowCarrierFrames StackFrames\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ForkJoinWorkerThread;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+import static java.lang.StackWalker.Option.*;\n+\n+import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadScheduler;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StackFrames {\n+\n+    \/**\n+     * Test that the stack trace in exceptions does not include the carrier thread\n+     * frames, except when running with -XX:+ShowCarrierFrames.\n+     *\/\n+    @Test\n+    void testStackTraceException() throws Exception {\n+        VThreadRunner.run(() -> {\n+            Exception e = new Exception();\n+            boolean found = Arrays.stream(e.getStackTrace())\n+                    .map(StackTraceElement::getClassName)\n+                    .anyMatch(\"java.util.concurrent.ForkJoinPool\"::equals);\n+            assertTrue(found == hasJvmArgument(\"-XX:+ShowCarrierFrames\"));\n+        });\n+    }\n+\n+    \/**\n+     * Test that StackWalker does not include carrier thread frames in the stream of\n+     * stack frames.\n+     *\/\n+    @Test\n+    void testStackWalker() throws Exception {\n+        VThreadRunner.run(() -> {\n+            StackWalker walker = StackWalker.getInstance(Set.of(RETAIN_CLASS_REFERENCE));\n+            boolean found = walker.walk(sf ->\n+                    sf.map(StackWalker.StackFrame::getDeclaringClass)\n+                            .anyMatch(c -> c == ForkJoinPool.class));\n+            assertFalse(found);\n+        });\n+    }\n+\n+    \/**\n+     * Test Thread.getStackTrace returns the expected bottom frame for both the carrier\n+     * and virtual thread.\n+     *\/\n+    @Test\n+    void testBottomFrames() throws Exception {\n+        try (ForkJoinPool pool = new ForkJoinPool(1)) {\n+            var carrierRef = new AtomicReference<Thread>();\n+            Executor scheduler = task -> {\n+                pool.submit(() -> {\n+                    carrierRef.set(Thread.currentThread());\n+                    task.run();\n+                });\n+            };\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+\n+            var ready = new AtomicBoolean();\n+            var done = new AtomicBoolean();\n+\n+            \/\/ create virtual thread to use custom scheduler\n+            var vthread = factory.newThread(() -> {\n+                ready.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n+            });\n+\n+            vthread.start();\n+            try {\n+                awaitTrue(ready);\n+\n+                \/\/ get carrier Thread\n+                Thread carrier = carrierRef.get();\n+                assertTrue(carrier instanceof ForkJoinWorkerThread);\n+\n+                \/\/ bottom-most frame of virtual thread should be VirtualThread.run\n+                System.err.println(vthread);\n+                StackTraceElement[] vthreadStack = vthread.getStackTrace();\n+                Stream.of(vthreadStack).forEach(e -> System.err.println(\"    \" + e));\n+                StackTraceElement bottomFrame = vthreadStack[vthreadStack.length - 1];\n+                assertEquals(\"java.lang.VirtualThread.run\",\n+                        bottomFrame.getClassName() + \".\" + bottomFrame.getMethodName());\n+\n+                \/\/ bottom-most frame of carrier thread should be Thread.run\n+                System.err.println(carrier);\n+                StackTraceElement[] carrierStack = carrier.getStackTrace();\n+                Stream.of(carrierStack).forEach(e -> System.err.println(\"    \" + e));\n+                bottomFrame = carrierStack[carrierStack.length - 1];\n+                assertEquals(\"java.util.concurrent.ForkJoinWorkerThread.run\",\n+                        bottomFrame.getClassName() + \".\" + bottomFrame.getMethodName());\n+\n+            } finally {\n+                done.set(true);\n+                vthread.join();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Returns true if started with the given VM option.\n+     *\/\n+    private static boolean hasJvmArgument(String arg) {\n+        for (String argument : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n+            if (argument.equals(arg)) return true;\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Waits for the boolean value to become true.\n+     *\/\n+    private static void awaitTrue(AtomicBoolean ref) throws InterruptedException {\n+        while (!ref.get()) {\n+            Thread.sleep(20);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/StackFrames.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test stack traces in exceptions and stack frames walked by the StackWalker\n- *     API do not include the carrier stack frames\n- * @requires vm.continuations\n- * @modules java.management\n- * @library \/test\/lib\n- * @run junit StackTraces\n- * @run junit\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowCarrierFrames StackTraces\n- *\/\n-\n-import java.lang.management.ManagementFactory;\n-import java.util.Arrays;\n-import java.util.Set;\n-import java.util.concurrent.ForkJoinPool;\n-import static java.lang.StackWalker.Option.*;\n-\n-import jdk.test.lib.thread.VThreadRunner;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class StackTraces {\n-\n-    \/**\n-     * Test that the stack trace in exceptions does not include the carrier thread\n-     * frames, except when running with -XX:+ShowCarrierFrames.\n-     *\/\n-    @Test\n-    void testStackTrace() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Exception e = new Exception();\n-            boolean found = Arrays.stream(e.getStackTrace())\n-                    .map(StackTraceElement::getClassName)\n-                    .anyMatch(\"java.util.concurrent.ForkJoinPool\"::equals);\n-            assertTrue(found == hasJvmArgument(\"-XX:+ShowCarrierFrames\"));\n-        });\n-    }\n-\n-    \/**\n-     * Test that StackWalker does not include carrier thread frames.\n-     *\/\n-    @Test\n-    void testStackWalker() throws Exception {\n-        VThreadRunner.run(() -> {\n-            StackWalker walker = StackWalker.getInstance(Set.of(RETAIN_CLASS_REFERENCE));\n-            boolean found = walker.walk(sf ->\n-                    sf.map(StackWalker.StackFrame::getDeclaringClass)\n-                            .anyMatch(c -> c == ForkJoinPool.class));\n-            assertFalse(found);\n-        });\n-    }\n-\n-    private static boolean hasJvmArgument(String arg) {\n-        for (String argument : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n-            if (argument.equals(arg)) return true;\n-        }\n-        return false;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/StackTraces.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,0 @@\n-import jdk.test.lib.thread.VThreadRunner;\n@@ -66,0 +65,2 @@\n+import jdk.test.lib.thread.VThreadRunner;\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -69,0 +70,1 @@\n+import org.junit.jupiter.api.Disabled;\n@@ -71,0 +73,1 @@\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -81,1 +84,1 @@\n-    static void setup() throws Exception {\n+    static void setup() {\n@@ -84,0 +87,3 @@\n+\n+        \/\/ need >=2 carriers for testing pinning\n+        VThreadRunner.ensureParallelism(2);\n@@ -722,8 +728,1 @@\n-        \/\/ need at least two carrier threads due to pinning\n-        int previousParallelism = VThreadRunner.ensureParallelism(2);\n-        try {\n-            VThreadRunner.run(this::testJoin33);\n-        } finally {\n-            \/\/ restore\n-            VThreadRunner.setParallelism(previousParallelism);\n-        }\n+        VThreadRunner.run(this::testJoin33);\n@@ -1087,1 +1086,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1090,2 +1089,1 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            ThreadFactory factory = builder.factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -1115,1 +1113,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1118,2 +1116,1 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            ThreadFactory factory = builder.factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -1711,1 +1708,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1714,4 +1711,4 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            Thread t1 = builder.start(() -> {\n-                Thread t2 = builder.unstarted(LockSupport::park);\n-                assertEquals(Thread.State.NEW, t2.getState());\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+            Thread thread1 = factory.newThread(() -> {\n+                Thread thread2 = factory.newThread(LockSupport::park);\n+                assertEquals(Thread.State.NEW, thread2.getState());\n@@ -1720,1 +1717,1 @@\n-                t2.start();\n+                thread2.start();\n@@ -1722,1 +1719,1 @@\n-                    assertEquals(Thread.State.RUNNABLE, t2.getState());\n+                    assertEquals(Thread.State.RUNNABLE, thread2.getState());\n@@ -1726,1 +1723,1 @@\n-                    assertEquals(Thread.State.WAITING, t2.getState());\n+                    assertEquals(Thread.State.WAITING, thread2.getState());\n@@ -1729,1 +1726,1 @@\n-                    LockSupport.unpark(t2);\n+                    LockSupport.unpark(thread2);\n@@ -1733,1 +1730,1 @@\n-                assertEquals(Thread.State.RUNNABLE, t2.getState());\n+                assertEquals(Thread.State.RUNNABLE, thread2.getState());\n@@ -1737,1 +1734,2 @@\n-            t1.join();\n+            thread1.start();\n+            thread1.join();\n@@ -1743,1 +1741,1 @@\n-     * Test Thread::getState when thread is waiting to enter a monitor.\n+     * Test Thread::getState when thread is blocked waiting to enter a monitor.\n@@ -1745,3 +1743,4 @@\n-    @Test\n-    void testGetState5() throws Exception {\n-        var started = new CountDownLatch(1);\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetState5(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -1749,2 +1748,9 @@\n-            started.countDown();\n-            synchronized (lock) { }\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    synchronized (lock) { }\n+                });\n+            } else {\n+                ready.set(true);\n+                synchronized (lock) { }\n+            }\n@@ -1754,1 +1760,1 @@\n-            started.await();\n+            awaitTrue(ready);\n@@ -1765,2 +1771,4 @@\n-    @Test\n-    void testGetState6() throws Exception {\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetState6(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -1769,1 +1777,11 @@\n-                try { lock.wait(); } catch (InterruptedException e) { }\n+                try {\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait();\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait();\n+                    }\n+                } catch (InterruptedException e) { }\n@@ -1774,0 +1792,1 @@\n+            awaitTrue(ready);\n@@ -1775,0 +1794,6 @@\n+\n+            \/\/ notify, thread should block trying to reenter\n+            synchronized (lock) {\n+                lock.notifyAll();\n+                await(thread, Thread.State.BLOCKED);\n+            }\n@@ -1784,2 +1809,4 @@\n-    @Test\n-    void testGetState7() throws Exception {\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetState7(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -1789,1 +1816,9 @@\n-                    lock.wait(Long.MAX_VALUE);\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait(Long.MAX_VALUE);\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait(Long.MAX_VALUE);\n+                    }\n@@ -1794,1 +1829,2 @@\n-            \/\/ wait for thread to wait\n+            \/\/ wait for thread to timed-wait\n+            awaitTrue(ready);\n@@ -1796,0 +1832,6 @@\n+\n+            \/\/ notify, thread should block trying to reenter\n+            synchronized (lock) {\n+                lock.notifyAll();\n+                await(thread, Thread.State.BLOCKED);\n+            }\n@@ -1936,1 +1978,1 @@\n-    void testGetStackTrace1() {\n+    void testGetStackTraceUnstarted() {\n@@ -1946,2 +1988,2 @@\n-    void testGetStackTrace2() throws Exception {\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+    void testGetStackTraceStarted() throws Exception {\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1949,2 +1991,3 @@\n-        Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-        Thread thread = builder.start(() -> { });\n+        ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+        Thread thread = factory.newThread(() -> { });\n+        thread.start();\n@@ -1956,1 +1999,1 @@\n-     * Test Thread::getStackTrace on running thread.\n+     * Test Thread::getStackTrace on thread that is runnable-mounted.\n@@ -1959,9 +2002,10 @@\n-    void testGetStackTrace3() throws Exception {\n-        var sel = Selector.open();\n-        var thread = Thread.ofVirtual().start(() -> {\n-            try { sel.select(); } catch (Exception e) { }\n-        });\n-        try {\n-            while (!contains(thread.getStackTrace(), \"select\")) {\n-                assertTrue(thread.isAlive());\n-                Thread.sleep(20);\n+    void testGetStackTraceRunnableMounted() throws Exception {\n+        var ready = new AtomicBoolean();\n+        var done = new AtomicBoolean();\n+\n+        class Foo {\n+            void spinUntilDone() {\n+                ready.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n+                }\n@@ -1969,0 +2013,8 @@\n+        }\n+\n+        Foo foo = new Foo();\n+        var thread = Thread.ofVirtual().start(foo::spinUntilDone);\n+        try {\n+            awaitTrue(ready);\n+            StackTraceElement[] stack = thread.getStackTrace();\n+            assertTrue(contains(stack, Foo.class.getName() + \".spinUntilDone\"));\n@@ -1970,1 +2022,1 @@\n-            sel.close();\n+            done.set(true);\n@@ -1976,1 +2028,1 @@\n-     * Test Thread::getStackTrace on thread waiting in Object.wait.\n+     * Test Thread::getStackTrace on thread that is runnable-unmounted.\n@@ -1979,10 +2031,2 @@\n-    void testGetStackTrace4() throws Exception {\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n-        try (ForkJoinPool pool = new ForkJoinPool(1)) {\n-            AtomicReference<Thread> ref = new AtomicReference<>();\n-            Executor scheduler = task -> {\n-                pool.submit(() -> {\n-                    ref.set(Thread.currentThread());\n-                    task.run();\n-                });\n-            };\n+    void testGetStackTraceRunnableUnmounted() throws Exception {\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -1990,6 +2034,16 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            Thread vthread = builder.start(() -> {\n-                synchronized (lock) {\n-                    try {\n-                        lock.wait();\n-                    } catch (Exception e) { }\n+        \/\/ custom scheduler with one carrier thread\n+        try (ExecutorService scheduler = Executors.newFixedThreadPool(1)) {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+\n+            \/\/ start thread1 to park\n+            Thread thread1 = factory.newThread(LockSupport::park);\n+            thread1.start();\n+            await(thread1, Thread.State.WAITING);\n+\n+            \/\/ start thread2 to spin and pin the carrier thread\n+            var started = new AtomicBoolean();\n+            var done = new AtomicBoolean();\n+            Thread thread2 = factory.newThread(() -> {\n+                started.set(true);\n+                while (!done.get()) {\n+                    Thread.onSpinWait();\n@@ -1998,0 +2052,2 @@\n+            thread2.start();\n+            awaitTrue(started);\n@@ -1999,5 +2055,5 @@\n-            \/\/ get carrier Thread\n-            Thread carrier;\n-            while ((carrier = ref.get()) == null) {\n-                Thread.sleep(20);\n-            }\n+            try {\n+                \/\/ unpark thread1, it should be \"stuck\" in runnable state\n+                \/\/ (the carrier thread is pinned, no other virtual thread can run)\n+                LockSupport.unpark(thread1);\n+                assertEquals(Thread.State.RUNNABLE, thread1.getState());\n@@ -2005,2 +2061,3 @@\n-            \/\/ wait for virtual thread to block in wait\n-            await(vthread, Thread.State.WAITING);\n+                \/\/ print thread1's stack trace\n+                StackTraceElement[] stack = thread1.getStackTrace();\n+                assertTrue(contains(stack, \"LockSupport.park\"));\n@@ -2008,3 +2065,5 @@\n-            \/\/ get stack trace of both carrier and virtual thread\n-            StackTraceElement[] carrierStackTrace = carrier.getStackTrace();\n-            StackTraceElement[] vthreadStackTrace = vthread.getStackTrace();\n+            } finally {\n+                done.set(true);\n+            }\n+        }\n+    }\n@@ -2012,3 +2071,22 @@\n-            \/\/ allow virtual thread to terminate\n-            synchronized (lock) {\n-                lock.notifyAll();\n+    \/**\n+     * Test Thread::getStackTrace on thread blocked on monitor enter.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetStackTraceBlocked(boolean pinned) throws Exception {\n+        class Foo {\n+            void enter() {\n+                synchronized (this) { }\n+            }\n+        }\n+        Foo foo = new Foo();\n+        var ready = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().unstarted(() -> {\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    foo.enter();\n+                });\n+            } else {\n+                ready.set(true);\n+                foo.enter();\n@@ -2016,0 +2094,4 @@\n+        });\n+        synchronized (foo) {\n+            thread.start();\n+            awaitTrue(ready);\n@@ -2017,3 +2099,2 @@\n-            \/\/ check carrier thread's stack trace\n-            assertTrue(contains(carrierStackTrace, \"java.util.concurrent.ForkJoinPool.runWorker\"));\n-            assertFalse(contains(carrierStackTrace, \"java.lang.Object.wait\"));\n+            \/\/ wait for thread to block\n+            await(thread, Thread.State.BLOCKED);\n@@ -2021,3 +2102,2 @@\n-            \/\/ check virtual thread's stack trace\n-            assertFalse(contains(vthreadStackTrace, \"java.util.concurrent.ForkJoinPool.runWorker\"));\n-            assertTrue(contains(vthreadStackTrace, \"java.lang.Object.wait\"));\n+            StackTraceElement[] stack = thread.getStackTrace();\n+            assertTrue(contains(stack, Foo.class.getName() + \".enter\"));\n@@ -2025,0 +2105,1 @@\n+        thread.join();\n@@ -2028,1 +2109,1 @@\n-     * Test Thread::getStackTrace on parked thread.\n+     * Test Thread::getStackTrace when thread is waiting in Object.wait.\n@@ -2030,4 +2111,19 @@\n-    @Test\n-    void testGetStackTrace5() throws Exception {\n-        var thread = Thread.ofVirtual().start(LockSupport::park);\n-        await(thread, Thread.State.WAITING);\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetStackTraceWaiting(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                try {\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait();\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait();\n+                    }\n+                } catch (InterruptedException e) { }\n+            }\n+        });\n@@ -2035,0 +2131,4 @@\n+            \/\/ wait for thread to wait\n+            awaitTrue(ready);\n+            await(thread, Thread.State.WAITING);\n+\n@@ -2036,1 +2136,1 @@\n-            assertTrue(contains(stack, \"LockSupport.park\"));\n+            assertTrue(contains(stack, \"Object.wait\"));\n@@ -2038,1 +2138,1 @@\n-            LockSupport.unpark(thread);\n+            thread.interrupt();\n@@ -2044,1 +2144,1 @@\n-     * Test Thread::getStackTrace on timed-parked thread.\n+     * Test Thread::getStackTrace when thread is waiting in timed-Object.wait.\n@@ -2046,2 +2146,4 @@\n-    @Test\n-    void testGetStackTrace6() throws Exception {\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetStackTraceTimedWaiting(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n@@ -2049,1 +2151,13 @@\n-            LockSupport.parkNanos(Long.MAX_VALUE);\n+            synchronized (lock) {\n+                try {\n+                    if (pinned) {\n+                        VThreadPinner.runPinned(() -> {\n+                            ready.set(true);\n+                            lock.wait(Long.MAX_VALUE);\n+                        });\n+                    } else {\n+                        ready.set(true);\n+                        lock.wait(Long.MAX_VALUE);\n+                    }\n+                } catch (InterruptedException e) { }\n+            }\n@@ -2051,1 +2165,0 @@\n-        await(thread, Thread.State.TIMED_WAITING);\n@@ -2053,0 +2166,4 @@\n+            \/\/ wait for thread to wait\n+            awaitTrue(ready);\n+            await(thread, Thread.State.TIMED_WAITING);\n+\n@@ -2054,1 +2171,1 @@\n-            assertTrue(contains(stack, \"LockSupport.parkNanos\"));\n+            assertTrue(contains(stack, \"Object.wait\"));\n@@ -2056,1 +2173,1 @@\n-            LockSupport.unpark(thread);\n+            thread.interrupt();\n@@ -2062,1 +2179,1 @@\n-     * Test Thread::getStackTrace on parked thread that is pinned.\n+     * Test Thread::getStackTrace when thread in park.\n@@ -2064,3 +2181,5 @@\n-    @Test\n-    void testGetStackTrace7() throws Exception {\n-        AtomicBoolean done = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetStackTraceParked(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n+        var done = new AtomicBoolean();\n@@ -2068,1 +2187,9 @@\n-            VThreadPinner.runPinned(() -> {\n+            if (pinned) {\n+                VThreadPinner.runPinned(() -> {\n+                    ready.set(true);\n+                    while (!done.get()) {\n+                        LockSupport.park();\n+                    }\n+                });\n+            } else {\n+                ready.set(true);\n@@ -2072,1 +2199,1 @@\n-            });\n+            }\n@@ -2074,1 +2201,0 @@\n-        await(thread, Thread.State.WAITING);\n@@ -2076,0 +2202,4 @@\n+            \/\/ wait for thread to park\n+            awaitTrue(ready);\n+            await(thread, Thread.State.WAITING);\n+\n@@ -2086,1 +2216,1 @@\n-     * Test Thread::getStackTrace on timed-parked thread that is pinned.\n+     * Test Thread::getStackTrace when thread in timed-park.\n@@ -2088,3 +2218,5 @@\n-    @Test\n-    void testGetStackTrace8() throws Exception {\n-        AtomicBoolean done = new AtomicBoolean();\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void testGetStackTraceTimedPark(boolean pinned) throws Exception {\n+        var ready = new AtomicBoolean();\n+        var done = new AtomicBoolean();\n@@ -2092,1 +2224,9 @@\n-            VThreadPinner.runPinned(() -> {\n+            if (pinned) {\n+                ready.set(true);\n+                VThreadPinner.runPinned(() -> {\n+                    while (!done.get()) {\n+                        LockSupport.parkNanos(Long.MAX_VALUE);\n+                    }\n+                });\n+            } else {\n+                ready.set(true);\n@@ -2096,1 +2236,1 @@\n-            });\n+            }\n@@ -2098,1 +2238,0 @@\n-        await(thread, Thread.State.TIMED_WAITING);\n@@ -2100,0 +2239,4 @@\n+            \/\/ wait for thread to park\n+            awaitTrue(ready);\n+            await(thread, Thread.State.TIMED_WAITING);\n+\n@@ -2113,1 +2256,1 @@\n-    void testGetStackTrace9() throws Exception {\n+    void testGetStackTraceTerminated() throws Exception {\n@@ -2136,1 +2279,1 @@\n-        assumeTrue(ThreadBuilders.supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -2146,2 +2289,2 @@\n-            Thread.Builder builder = ThreadBuilders.virtualThreadBuilder(scheduler);\n-            Thread vthread = builder.start(() -> {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n+            Thread vthread = factory.newThread(() -> {\n@@ -2154,0 +2297,1 @@\n+            vthread.start();\n@@ -2171,0 +2315,1 @@\n+            vthread.join();\n@@ -2172,1 +2317,1 @@\n-            \/\/ get stack trace for the carrier thread\n+            \/\/ stack trace for the carrier thread\n@@ -2420,0 +2565,9 @@\n+    \/**\n+     * Waits for the boolean value to become true.\n+     *\/\n+    private static void awaitTrue(AtomicBoolean ref) throws Exception {\n+        while (!ref.get()) {\n+            Thread.sleep(20);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":281,"deletions":127,"binary":false,"changes":408,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.Executors;\n-\n-\/**\n- * Helper class for creating Thread buidlers.\n- *\n- * Tests using this class need to open java.base\/java.lang.\n- *\/\n-class ThreadBuilders {\n-    private ThreadBuilders() { }\n-\n-    private static final Constructor<?> VTBUILDER_CTOR;\n-    static {\n-        try {\n-            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-            ctor.setAccessible(true);\n-            VTBUILDER_CTOR = ctor;\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n-\n-    \/**\n-     * Returns a builder to create virtual threads that use the given scheduler.\n-     * @throws UnsupportedOperationException if custom schedulers are not supported\n-     *\/\n-    static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n-        try {\n-            return (Thread.Builder.OfVirtual) VTBUILDER_CTOR.newInstance(scheduler);\n-        } catch (InvocationTargetException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException re) {\n-                throw re;\n-            }\n-            throw new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Return true if custom schedulers are supported.\n-     *\/\n-    static boolean supportsCustomScheduler() {\n-        try (var pool = Executors.newCachedThreadPool()) {\n-            try {\n-                virtualThreadBuilder(pool);\n-                return true;\n-            } catch (UnsupportedOperationException e) {\n-                return false;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadBuilders.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.event\n+ * @modules java.base\/java.lang:+open java.base\/jdk.internal.event\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.thread.VThreadRunner;\n@@ -41,0 +42,1 @@\n+import org.junit.jupiter.api.BeforeAll;\n@@ -45,0 +47,8 @@\n+    @BeforeAll\n+    static void setup() {\n+        \/\/ need >=2 carriers for testing pinning when main thread is a virtual thread\n+        if (Thread.currentThread().isVirtual()) {\n+            VThreadRunner.ensureParallelism(2);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VirtualThreadPinnedEventThrows.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Stress parking with CompletableFuture timed get\n+ * @requires vm.debug != true & vm.continuations\n+ * @run main\/othervm -Xmx1g CompletableFutureTimedGet 100000\n+ *\/\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class CompletableFutureTimedGet {\n+\n+    static final String RESULT = \"foo\";\n+\n+    public static void main(String... args) throws InterruptedException {\n+        int threadCount = 250_000;\n+        if (args.length > 0) {\n+            threadCount = Integer.parseInt(args[0]);\n+        }\n+\n+        \/\/ the count of the number of threads that complete successfully\n+        AtomicInteger completed = new AtomicInteger();\n+\n+        \/\/ list of futures and threads\n+        List<CompletableFuture<String>> futures = new ArrayList<>();\n+        List<Thread> threads = new ArrayList<>();\n+\n+        \/\/ start threads that wait with timeout for a result\n+        for (int i = 0; i < threadCount; i++) {\n+            var future = new CompletableFuture<String>();\n+            futures.add(future);\n+\n+            \/\/ start a thread that uses a timed-get to wait for the result\n+            Thread thread = Thread.ofVirtual().start(() -> {\n+                try {\n+                    String result = future.get(1, TimeUnit.DAYS);\n+                    if (!RESULT.equals(result)) {\n+                        throw new RuntimeException(\"result=\" + result);\n+                    }\n+                    completed.incrementAndGet();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+            threads.add(thread);\n+        }\n+\n+        \/\/ sets the result, which will unpark waiting threads\n+        futures.forEach(f -> f.complete(RESULT));\n+\n+        \/\/ wait for all threads to terminate\n+        long lastTimestamp = System.currentTimeMillis();\n+        boolean done;\n+        do {\n+            done = true;\n+            for (Thread t : threads) {\n+                if (!t.join(Duration.ofSeconds(1))) {\n+                    done = false;\n+                }\n+            }\n+\n+            \/\/ print trace message so the output tracks progress\n+            long currentTime = System.currentTimeMillis();\n+            if (done || ((currentTime - lastTimestamp) > 500)) {\n+                System.out.format(\"%s => completed %d of %d%n\",\n+                        Instant.now(), completed.get(), threadCount);\n+                lastTimestamp = currentTime;\n+            }\n+\n+        } while (!done);\n+\n+        \/\/ all tasks should have completed successfully\n+        int completedCount = completed.get();\n+        if (completedCount != threadCount) {\n+            throw new RuntimeException(\"completed = \" + completedCount);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/CompletableFutureTimedGet.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Stress test asynchronous Thread.getStackTrace\n- * @requires vm.debug != true & vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @compile GetStackTraceALot.java ..\/ThreadBuilders.java\n- * @run main GetStackTraceALot\n- *\/\n-\n-\/**\n- * @test\n- * @requires vm.debug == true & vm.continuations\n- * @modules java.base\/java.lang:+open\n- * @compile GetStackTraceALot.java ..\/ThreadBuilders.java\n- * @run main\/timeout=300 GetStackTraceALot 1000\n- *\/\n-\n-import java.time.Duration;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.locks.LockSupport;\n-\n-public class GetStackTraceALot {\n-    static class RoundRobinExecutor implements Executor, AutoCloseable {\n-        private final ExecutorService[] executors;\n-        private int next;\n-\n-        RoundRobinExecutor() {\n-            var factory = Thread.ofPlatform().name(\"worker-\", 1).daemon(true).factory();\n-            var executors = new ExecutorService[2];\n-            for (int i = 0; i < executors.length; i++) {\n-                executors[i] = Executors.newSingleThreadExecutor(factory);\n-            }\n-            this.executors = executors;\n-        }\n-\n-        @Override\n-        public void execute(Runnable task) {\n-            executors[next].execute(task);\n-            next = (next + 1) % executors.length;\n-        }\n-\n-        @Override\n-        public void close() {\n-            for (int i = 0; i < executors.length; i++) {\n-                executors[i].shutdown();\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        int iterations = args.length > 0 ? Integer.parseInt(args[0])  : 10_000;\n-\n-        final int ITERATIONS = iterations;\n-        final int SPIN_NANOS = 5000;\n-\n-        AtomicInteger count = new AtomicInteger();\n-\n-        try (RoundRobinExecutor executor = new RoundRobinExecutor()) {\n-            Thread thread = ThreadBuilders.virtualThreadBuilder(executor).start(() -> {\n-                while (count.incrementAndGet() < ITERATIONS) {\n-                    long start = System.nanoTime();\n-                    while ((System.nanoTime() - start) < SPIN_NANOS) {\n-                        Thread.onSpinWait();\n-                    }\n-                    LockSupport.parkNanos(500_000);\n-                }\n-            });\n-\n-            long start = System.nanoTime();\n-            while (thread.isAlive()) {\n-                StackTraceElement[] stackTrace = thread.getStackTrace();\n-                \/\/ printStackTrace(stackTrace);\n-                Thread.sleep(5);\n-                if ((System.nanoTime() - start) > 500_000_000) {\n-                    System.out.println(count.get());\n-                    start = System.nanoTime();\n-                }\n-            }\n-\n-            int countValue = count.get();\n-            if (countValue != ITERATIONS) {\n-                throw new RuntimeException(\"count = \" + countValue);\n-            }\n-        }\n-    }\n-\n-    static void printStackTrace(StackTraceElement[] stackTrace) {\n-        if (stackTrace == null) {\n-            System.out.println(\"NULL\");\n-        } else {\n-            for (var e : stackTrace) {\n-                System.out.println(\"\\t\" + e);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALot.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Stress test Thread.getStackTrace on virtual threads that are blocking or\n+ *     blocked on monitorenter\n+ * @requires vm.debug != true\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main\/othervm GetStackTraceALotWhenBlocking 500000\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 GetStackTraceALotWhenBlocking 50000\n+ *\/\n+\n+import java.time.Instant;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import jdk.test.lib.thread.VThreadRunner;\n+\n+public class GetStackTraceALotWhenBlocking {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ need at least two carriers\n+        VThreadRunner.ensureParallelism(2);\n+\n+        int iterations = args.length > 0 ? Integer.parseInt(args[0]) : 100_000;\n+\n+        var done = new AtomicBoolean();\n+        var lock = new Object();\n+\n+        Runnable task = () -> {\n+            long count = 0L;\n+            while (!done.get()) {\n+                synchronized (lock) {\n+                    pause();\n+                }\n+                count++;\n+            }\n+            System.out.format(\"%s %s => %d loops%n\", Instant.now(), Thread.currentThread(), count);\n+        };\n+\n+        var thread1 = Thread.ofVirtual().start(task);\n+        var thread2 = Thread.ofVirtual().start(task);\n+        try {\n+            for (int i = 1; i <= iterations; i++) {\n+                if ((i % 10_000) == 0) {\n+                    System.out.format(\"%s => %d of %d%n\", Instant.now(), i, iterations);\n+                }\n+\n+                thread1.getStackTrace();\n+                pause();\n+                thread2.getStackTrace();\n+                pause();\n+            }\n+        } finally {\n+            done.set(true);\n+            thread1.join();\n+            thread2.join();\n+        }\n+    }\n+\n+    private static void pause() {\n+        if (ThreadLocalRandom.current().nextBoolean()) {\n+            Thread.onSpinWait();\n+        } else {\n+            Thread.yield();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenBlocking.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Stress test asynchronous Thread.getStackTrace when parking\n+ * @requires vm.debug != true & vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main GetStackTraceALotWhenParking\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.debug == true & vm.continuations\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run main\/timeout=300 GetStackTraceALotWhenParking 1000\n+ *\/\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.LockSupport;\n+import jdk.test.lib.thread.VThreadScheduler;\n+\n+public class GetStackTraceALotWhenParking {\n+    static class RoundRobinExecutor implements Executor, AutoCloseable {\n+        private final ExecutorService[] executors;\n+        private int next;\n+\n+        RoundRobinExecutor() {\n+            var factory = Thread.ofPlatform().name(\"worker-\", 1).daemon(true).factory();\n+            var executors = new ExecutorService[2];\n+            for (int i = 0; i < executors.length; i++) {\n+                executors[i] = Executors.newSingleThreadExecutor(factory);\n+            }\n+            this.executors = executors;\n+        }\n+\n+        @Override\n+        public void execute(Runnable task) {\n+            executors[next].execute(task);\n+            next = (next + 1) % executors.length;\n+        }\n+\n+        @Override\n+        public void close() {\n+            for (int i = 0; i < executors.length; i++) {\n+                executors[i].shutdown();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        int iterations = args.length > 0 ? Integer.parseInt(args[0])  : 10_000;\n+\n+        final int ITERATIONS = iterations;\n+        final int SPIN_NANOS = 5000;\n+\n+        AtomicInteger count = new AtomicInteger();\n+\n+        try (RoundRobinExecutor executor = new RoundRobinExecutor()) {\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(executor);\n+\n+            Thread thread = factory.newThread(() -> {\n+                while (count.incrementAndGet() < ITERATIONS) {\n+                    long start = System.nanoTime();\n+                    while ((System.nanoTime() - start) < SPIN_NANOS) {\n+                        Thread.onSpinWait();\n+                    }\n+                    LockSupport.parkNanos(500_000);\n+                }\n+            });\n+            thread.start();\n+\n+            long start = System.nanoTime();\n+            while (thread.isAlive()) {\n+                StackTraceElement[] stackTrace = thread.getStackTrace();\n+                \/\/ printStackTrace(stackTrace);\n+                Thread.sleep(5);\n+                if ((System.nanoTime() - start) > 500_000_000) {\n+                    System.out.format(\"%s => %d of %d%n\", Instant.now(), count.get(), ITERATIONS);\n+                    start = System.nanoTime();\n+                }\n+            }\n+\n+            int countValue = count.get();\n+            if (countValue != ITERATIONS) {\n+                throw new RuntimeException(\"count = \" + countValue);\n+            }\n+        }\n+    }\n+\n+    static void printStackTrace(StackTraceElement[] stackTrace) {\n+        if (stackTrace == null) {\n+            System.out.println(\"NULL\");\n+        } else {\n+            for (var e : stackTrace) {\n+                System.out.println(\"\\t\" + e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenParking.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm GetStackTraceALotWhenPinned 500000\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED GetStackTraceALotWhenPinned 500000\n@@ -39,1 +39,1 @@\n- * @run main\/othervm\/timeout=300 GetStackTraceALotWhenPinned 200000\n+ * @run main\/othervm\/timeout=300 --enable-native-access=ALL-UNNAMED GetStackTraceALotWhenPinned 200000\n@@ -82,1 +82,1 @@\n-        for (int i = 0; i < iterations; i++) {\n+        for (int i = 1; i <= iterations; i++) {\n@@ -90,2 +90,2 @@\n-            if ((currentTime - lastTimestamp) > 500) {\n-                System.out.format(\"%s %d remaining ...%n\", Instant.now(), (iterations - i));\n+            if (i == iterations || ((currentTime - lastTimestamp) > 500)) {\n+                System.out.format(\"%s => %d of %d%n\", Instant.now(), i, iterations);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenPinned.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        int iterations = 1_000_000;\n+        int iterations;\n@@ -52,0 +52,2 @@\n+        } else {\n+            iterations = 1_000_000;\n@@ -53,1 +55,0 @@\n-        final int ITERATIONS = iterations;\n@@ -56,1 +57,0 @@\n-\n@@ -59,1 +59,1 @@\n-                while (count.incrementAndGet() < ITERATIONS) {\n+                while (count.incrementAndGet() < iterations) {\n@@ -68,1 +68,1 @@\n-            System.out.println(Instant.now() + \" => \" + count.get());\n+            System.out.println(Instant.now() + \" => \" + count.get() + \" of \" + iterations);\n@@ -72,2 +72,2 @@\n-        if (countValue != ITERATIONS) {\n-            throw new RuntimeException(\"count = \" + countValue);\n+        if (countValue != iterations) {\n+            throw new RuntimeException(\"Thread terminated, count=\" + countValue);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PinALot.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.time.Instant;\n@@ -94,1 +95,1 @@\n-            if (terminated)\n+            if (terminated) {\n@@ -96,1 +97,3 @@\n-            System.out.format(\"%d %s%n\", count1.get(), count2.get());\n+            }\n+            System.out.format(\"%s => T1 %d of %d, T2 %d of %d%n\",\n+                    Instant.now(), count1.get(), iterations, count2.get(), iterations);\n@@ -98,1 +101,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/PingPong.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-            throw new AssertionError(\"unexpected result!\");\n+            throw new RuntimeException(\"Expected \" + expected);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/Skynet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        int iterations = 1_000_000;\n+        int iterations;\n@@ -47,0 +47,2 @@\n+        } else {\n+            iterations = 1_000_000;\n@@ -48,1 +50,0 @@\n-        final int ITERATIONS = iterations;\n@@ -51,1 +52,0 @@\n-\n@@ -53,1 +53,1 @@\n-            while (count.incrementAndGet() < ITERATIONS) {\n+            while (count.incrementAndGet() < iterations) {\n@@ -63,1 +63,1 @@\n-            System.out.println(Instant.now() + \" => \" + count.get());\n+            System.out.println(Instant.now() + \" => \" + count.get() + \" of \" + iterations);\n@@ -67,2 +67,2 @@\n-        if (countValue != ITERATIONS) {\n-            throw new RuntimeException(\"count = \" + countValue);\n+        if (countValue != iterations) {\n+            throw new RuntimeException(\"Thread terminated, count=\" + countValue);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/SleepALot.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Stress parking with CompletableFuture timed get\n- * @requires vm.debug != true & vm.continuations\n- * @run main\/othervm -Xmx1g TimedGet 100000\n- *\/\n-\n-import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-public class TimedGet {\n-\n-    static final String RESULT = \"foo\";\n-\n-    public static void main(String... args) throws InterruptedException {\n-        int threadCount = 250_000;\n-        if (args.length > 0) {\n-            threadCount = Integer.parseInt(args[0]);\n-        }\n-\n-        \/\/ the count of the number of threads that complete successfully\n-        AtomicInteger completed = new AtomicInteger();\n-\n-        \/\/ list of futures and threads\n-        List<CompletableFuture<String>> futures = new ArrayList<>();\n-        List<Thread> threads = new ArrayList<>();\n-\n-        \/\/ start threads that wait with timeout for a result\n-        for (int i = 0; i < threadCount; i++) {\n-            var future = new CompletableFuture<String>();\n-            futures.add(future);\n-\n-            \/\/ start a thread that uses a timed-get to wait for the result\n-            Thread thread = Thread.ofVirtual().start(() -> {\n-                try {\n-                    String result = future.get(1, TimeUnit.DAYS);\n-                    if (!RESULT.equals(result)) {\n-                        throw new RuntimeException(\"result=\" + result);\n-                    }\n-                    completed.incrementAndGet();\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            });\n-            threads.add(thread);\n-        }\n-\n-        \/\/ sets the result, which will unpark waiting threads\n-        futures.forEach(f -> f.complete(RESULT));\n-\n-        \/\/ wait for all threads to terminate\n-        long lastTimestamp = System.currentTimeMillis();\n-        int i = 0;\n-        while (i < threadCount) {\n-            Thread t = threads.get(i);\n-            boolean terminated;\n-            if (t.isAlive()) {\n-                terminated = t.join(Duration.ofMillis(500));\n-\n-                \/\/ print trace message so the output tracks progress\n-                long currentTime = System.currentTimeMillis();\n-                if ((currentTime - lastTimestamp) > 500) {\n-                    System.out.println(completed.get());\n-                    lastTimestamp = currentTime;\n-                }\n-            } else {\n-                terminated = true;\n-            }\n-            if (terminated) {\n-                i++;\n-            }\n-        }\n-\n-        \/\/ all tasks should have completed successfully\n-        int completedCount = completed.get();\n-        System.out.println(completedCount);\n-        if (completedCount != threadCount) {\n-            throw new RuntimeException(\"completed = \" + completedCount);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/TimedGet.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=timeout\n+ * @summary Stress test timed-Object.wait\n+ * @run main\/othervm TimedWaitALot 200\n+ *\/\n+\n+\/*\n+ * @test id=timeout-notify\n+ * @summary Test timed-Object.wait where the waiting thread is awakened with Object.notify\n+ *     at around the same time that the timeout expires.\n+ * @run main\/othervm TimedWaitALot 200 true false\n+ *\/\n+\n+\/*\n+ * @test id=timeout-interrupt\n+ * @summary Test timed-Object.wait where the waiting thread is awakened with Thread.interrupt\n+ *     at around the same time that the timeout expires.\n+ * @run main\/othervm TimedWaitALot 200 false true\n+ *\/\n+\n+\/*\n+ * @test id=timeout-notify-interrupt\n+ * @summary Test timed-Object.wait where the waiting thread is awakened with Object.notify\n+ *     and Thread.interrupt at around the same time that the timeout expires.\n+ * @run main\/othervm TimedWaitALot 100 true true\n+ *\/\n+\n+import java.time.Instant;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public class TimedWaitALot {\n+    public static void main(String[] args) throws Exception {\n+        int iterations = Integer.parseInt(args[0]);\n+        boolean notify = args.length >= 2 && \"true\".equals(args[1]);\n+        boolean interrupt = args.length >=3 && \"true\".equals(args[2]);\n+\n+        \/\/ test all timeouts concurrently\n+        int[] timeouts = { 10, 20, 50, 100 };\n+        for (int i = 1; i <= iterations; i++) {\n+            System.out.println(Instant.now() + \" => \" + i + \" of \" + iterations);\n+            test(notify, interrupt, timeouts);\n+        }\n+    }\n+\n+    \/**\n+     * Start a first virtual thread to wait in Object.wait(millis).\n+     * If {@code notify} is true, start a virtual thread to use Object.notifyAll at around\n+     * the same time that the timeout expires.\n+     * If {@code interrupt} is true, start virtual thread to interrupts the first virtual\n+     * thread at around the same time as the timeout expires.\n+     *\/\n+    static void test(boolean notify, boolean interrupt, int... timeouts) throws Exception {\n+        try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {\n+            for (int timeout : timeouts) {\n+                var queue = new SynchronousQueue<Thread>();\n+                var lock = new Object();\n+\n+                \/\/ virtual thread waits with Object.wait(timeout)\n+                executor.submit(() -> {\n+                    queue.put(Thread.currentThread());\n+                    synchronized (lock) {\n+                        lock.wait(timeout);\n+                    }\n+                    return null;\n+                });\n+\n+                \/\/ wait for thread to start\n+                Thread thread = queue.take();\n+\n+                \/\/ start thread to Object.notifyAll at around time that the timeout expires\n+                if (notify) {\n+                    if (ThreadLocalRandom.current().nextBoolean()) {\n+                        synchronized (lock) {\n+                            sleepLessThan(timeout);\n+                            lock.notifyAll();\n+                        }\n+                    } else {\n+                        sleepLessThan(timeout);\n+                        synchronized (lock) {\n+                            lock.notifyAll();\n+                        }\n+                    }\n+                }\n+\n+                \/\/ start thread to interrupt first thread at around time that the timeout expires\n+                if (interrupt) {\n+                    executor.submit(() -> {\n+                        sleepLessThan(timeout);\n+                        thread.interrupt();\n+                        return null;\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Sleeps for just less than the given timeout, in millis.\n+     *\/\n+    private static void sleepLessThan(long timeout) throws InterruptedException {\n+        int delta = ThreadLocalRandom.current().nextInt(10);\n+        Thread.sleep(timeout - delta);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/TimedWaitALot.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main YieldALot 350000\n+ * @run main YieldALot 500000\n@@ -38,0 +38,1 @@\n+import java.time.Instant;\n@@ -43,1 +44,1 @@\n-        int iterations = 1_000_000;\n+        int iterations;\n@@ -46,0 +47,2 @@\n+        } else {\n+            iterations = 1_000_000;\n@@ -47,1 +50,0 @@\n-        final int ITERATIONS = iterations;\n@@ -50,1 +52,0 @@\n-\n@@ -52,1 +53,1 @@\n-            while (count.incrementAndGet() < ITERATIONS) {\n+            while (count.incrementAndGet() < iterations) {\n@@ -59,2 +60,2 @@\n-            terminated = thread.join(Duration.ofMillis(500));\n-            System.out.println(count.get());\n+            terminated = thread.join(Duration.ofSeconds(1));\n+            System.out.println(Instant.now() + \" => \" + count.get() + \" of \" + iterations);\n@@ -64,2 +65,2 @@\n-        if (countValue != ITERATIONS) {\n-            throw new RuntimeException(\"count = \" + countValue);\n+        if (countValue != iterations) {\n+            throw new RuntimeException(\"Thread terminated, count=\" + countValue);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/YieldALot.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -307,0 +308,5 @@\n+\n+    public void testMissingClass() {\n+        var mtd = MTD_void.insertParameterTypes(0, ClassDesc.of(\"does.not.exist.DoesNotExist\"));\n+        assertThrows(ReflectiveOperationException.class, () -> mtd.resolveConstantDesc(MethodHandles.publicLookup()));\n+    }\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test ThreadMXBean.getLockedMonitors returns information about an object\n+ *    monitor lock entered with a synchronized native method or JNI MonitorEnter\n+ * @run junit\/othervm LockedMonitorInNative\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class LockedMonitorInNative {\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        System.loadLibrary(\"LockedMonitorInNative\");\n+    }\n+\n+    \/**\n+     * Test ThreadMXBean.getLockedMonitors returns information about an object\n+     * monitor lock entered with a synchronized native method.\n+     *\/\n+    @Test\n+    void testSynchronizedNative() {\n+        Object lock = this;\n+        runWithSynchronizedNative(() -> {\n+            assertTrue(holdsLock(lock), \"Thread does not hold lock\");\n+        });\n+    }\n+\n+    \/**\n+     * Test ThreadMXBean.getLockedMonitors returns information about an object\n+     * monitor lock entered with JNI MonitorEnter.\n+     *\/\n+    @Test\n+    void testMonitorEnteredInNative() {\n+        var lock = new Object();\n+        runWithMonitorEnteredInNative(lock, () -> {\n+            assertTrue(holdsLock(lock), \"Thread does not hold lock\");\n+        });\n+    }\n+\n+    private boolean holdsLock(Object lock) {\n+        int hc = System.identityHashCode(lock);\n+        long tid = Thread.currentThread().threadId();\n+        ThreadInfo ti = ManagementFactory.getPlatformMXBean(ThreadMXBean.class)\n+                .getThreadInfo(new long[] { tid }, true, true)[0];\n+        return Arrays.stream(ti.getLockedMonitors())\n+                .anyMatch(mi -> mi.getIdentityHashCode() == hc);\n+    }\n+\n+    \/**\n+     * Invokes the given task's run method while holding the monitor for \"this\".\n+     *\/\n+    private synchronized native void runWithSynchronizedNative(Runnable task);\n+\n+    \/**\n+     * Invokes the given task's run method while holding the monitor for the given\n+     * object. The monitor is entered with JNI MonitorEnter, and exited with JNI MonitorExit.\n+     *\/\n+    private native void runWithMonitorEnteredInNative(Object lock, Runnable task);\n+\n+    \/**\n+     * Called from native methods to run the given task.\n+     *\/\n+    private void run(Runnable task) {\n+        task.run();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/LockedMonitorInNative.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,0 @@\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n@@ -52,0 +50,1 @@\n+import java.util.concurrent.ThreadFactory;\n@@ -56,0 +55,1 @@\n+import jdk.test.lib.thread.VThreadPinner;\n@@ -57,0 +57,1 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -198,1 +199,1 @@\n-        assumeTrue(supportsCustomScheduler(), \"No support for custom schedulers\");\n+        assumeTrue(VThreadScheduler.supportsCustomScheduler(), \"No support for custom schedulers\");\n@@ -207,0 +208,1 @@\n+            ThreadFactory factory = VThreadScheduler.virtualThreadFactory(scheduler);\n@@ -209,1 +211,3 @@\n-            virtualThreadBuilder(scheduler).start(() -> { }).join();\n+            Thread thread = factory.newThread(() -> { });\n+            thread.start();\n+            thread.join();\n@@ -214,2 +218,4 @@\n-                \/\/ start virtual thread that blocks in a native method\n-                virtualThreadBuilder(scheduler).start(() -> {\n+                String selClassName = sel.getClass().getName();\n+\n+                \/\/ start virtual thread that blocks while pinned\n+                Thread vthread = factory.newThread(() -> {\n@@ -217,1 +223,1 @@\n-                        sel.select();\n+                        VThreadPinner.runPinned(sel::select);\n@@ -220,0 +226,6 @@\n+                vthread.start();\n+\n+                \/\/ wait for virtual thread to block in select\n+                while (!contains(vthread.getStackTrace(), selClassName)) {\n+                    Thread.sleep(20);\n+                }\n@@ -228,1 +240,1 @@\n-                assertFalse(contains(stack, \"java.nio.channels.Selector\"));\n+                assertFalse(contains(stack, selClassName));\n@@ -354,36 +366,0 @@\n-\n-    \/**\n-     * Returns a builder to create virtual threads that use the given scheduler.\n-     * @throws UnsupportedOperationException if there is no support for custom schedulers\n-     *\/\n-    private static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n-        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n-        try {\n-            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-            ctor.setAccessible(true);\n-            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n-        } catch (InvocationTargetException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException re) {\n-                throw re;\n-            }\n-            throw new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Return true if custom schedulers are supported.\n-     *\/\n-    private static boolean supportsCustomScheduler() {\n-        try (var pool = Executors.newCachedThreadPool()) {\n-            try {\n-                virtualThreadBuilder(pool);\n-                return true;\n-            } catch (UnsupportedOperationException e) {\n-                return false;\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":21,"deletions":45,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+JNIEXPORT void JNICALL\n+Java_LockedMonitorInNative_runWithSynchronizedNative(JNIEnv *env, jobject obj, jobject task) {\n+    jclass clazz = (*env)->GetObjectClass(env, obj);\n+    jmethodID mid = (*env)->GetMethodID(env, clazz, \"run\", \"(Ljava\/lang\/Runnable;)V\");\n+    if (mid != NULL) {\n+        (*env)->CallVoidMethod(env, obj, mid, task);\n+    }\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_LockedMonitorInNative_runWithMonitorEnteredInNative(JNIEnv *env, jobject obj, jobject lock, jobject task) {\n+    jclass clazz = (*env)->GetObjectClass(env, obj);\n+    jmethodID mid = (*env)->GetMethodID(env, clazz, \"run\", \"(Ljava\/lang\/Runnable;)V\");\n+    if (mid != NULL && (*env)->MonitorEnter(env, lock) == 0) {\n+        (*env)->CallVoidMethod(env, obj, mid, task);\n+        (*env)->MonitorExit(env, lock);  \/\/ can be called with pending exception\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/libLockedMonitorInNative.c","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.SocketException;\n+import java.net.StandardSocketOptions;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @summary verifies that the APIs on java.net.ServerSocket throw expected exceptions\n+ *          when invoked on a closed ServerSocket\n+ * @run junit ClosedServerSocketTest\n+ *\/\n+public class ClosedServerSocketTest {\n+\n+    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n+    private static final InetSocketAddress loopbackEphemeral = new InetSocketAddress(loopback, 0);\n+\n+    \/**\n+     * Verifies that various operations that specify to throw an IOException on a\n+     * closed ServerSocket, do indeed throw it.\n+     *\/\n+    @Test\n+    public void testIOExceptionThrown() throws Exception {\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ close and then invoke the operations on the ServerSocket\n+            ss.close();\n+            assertTrue(ss.isClosed(), \"ServerSocket isn't closed\");\n+            assertThrows(IOException.class,\n+                    ss::accept,\n+                    \"accept() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> ss.bind(loopbackEphemeral),\n+                    \"bind() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> ss.bind(loopbackEphemeral, 10),\n+                    \"bind(SocketAddress, int) when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> ss.getOption(StandardSocketOptions.SO_RCVBUF),\n+                    \"getOption() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    ss::getSoTimeout,\n+                    \"getSoTimeout() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> ss.setOption(StandardSocketOptions.SO_RCVBUF, 1024),\n+                    \"setOption() when already closed didn't throw IOException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw a SocketOperation on a\n+     * closed ServerSocket, do indeed throw it.\n+     *\/\n+    @Test\n+    public void testSocketExceptionThrown() throws Exception {\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ close and then invoke the operations on the ServerSocket\n+            ss.close();\n+            assertTrue(ss.isClosed(), \"ServerSocket isn't closed\");\n+            assertThrowsExactly(SocketException.class,\n+                    ss::getReceiveBufferSize,\n+                    \"getReceiveBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    ss::getReuseAddress,\n+                    \"getReuseAddress() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> ss.setReceiveBufferSize(1024),\n+                    \"setReceiveBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> ss.setReuseAddress(false),\n+                    \"setReuseAddress() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> ss.setSoTimeout(1000),\n+                    \"setSoTimeout() when already closed didn't throw SocketException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that various operations that aren't expected to throw an exception on a\n+     * closed ServerSocket, complete normally.\n+     *\/\n+    @Test\n+    public void testNoExceptionThrown() throws Exception {\n+        try (final ServerSocket ss = new ServerSocket()) {\n+            \/\/ close and then invoke the operations on the ServerSocket\n+            ss.close();\n+            assertTrue(ss.isClosed(), \"ServerSocket isn't closed\");\n+            ss.getInetAddress();\n+            ss.getLocalPort();\n+            ss.getLocalSocketAddress();\n+            ss.isBound();\n+            ss.supportedOptions();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/ServerSocket\/ClosedServerSocketTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketException;\n+import java.net.StandardSocketOptions;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @summary verifies that the APIs on java.net.Socket throw expected exceptions\n+ *          when invoked on a closed socket\n+ * @run junit ClosedSocketTest\n+ *\/\n+public class ClosedSocketTest {\n+\n+    private static final InetAddress loopback = InetAddress.getLoopbackAddress();\n+    private static final InetSocketAddress loopbackEphemeral = new InetSocketAddress(loopback, 0);\n+\n+    \/**\n+     * Verifies that various operations that specify to throw an IOException on a closed socket,\n+     * do indeed throw it.\n+     *\/\n+    @Test\n+    public void testIOExceptionThrown() throws Exception {\n+        try (final Socket s = new Socket()) {\n+            \/\/ close and then invoke the operation on the socket\n+            s.close();\n+            assertTrue(s.isClosed(), \"socket isn't closed\");\n+            assertThrows(IOException.class, () -> s.bind(loopbackEphemeral),\n+                    \"bind() when already closed didn't throw IOException\");\n+            \/\/ connect() will never get to the stage of attempting\n+            \/\/ a connection against this port\n+            final int dummyPort = 12345;\n+            assertThrows(IOException.class,\n+                    () -> s.connect(new InetSocketAddress(loopback, dummyPort)),\n+                    \"connect() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> s.connect(new InetSocketAddress(loopback, dummyPort), 10),\n+                    \"connect(SocketAddress, int) when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    () -> s.getOption(StandardSocketOptions.SO_RCVBUF),\n+                    \"getOption() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    s::getOutputStream,\n+                    \"getOutputStream() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    s::shutdownInput,\n+                    \"shutdownInput() when already closed didn't throw IOException\");\n+            assertThrows(IOException.class,\n+                    s::shutdownOutput,\n+                    \"shutdownOutput() when already closed didn't throw IOException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that various operations that specify to throw a SocketOperation on a closed socket,\n+     * do indeed throw it.\n+     *\/\n+    @Test\n+    public void testSocketExceptionThrown() throws Exception {\n+        try (final Socket s = new Socket()) {\n+            \/\/ close and then invoke the operations on the socket\n+            s.close();\n+            assertTrue(s.isClosed(), \"socket isn't closed\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getKeepAlive,\n+                    \"getKeepAlive() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getOOBInline,\n+                    \"getOOBInline() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getReceiveBufferSize,\n+                    \"getReceiveBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getReuseAddress,\n+                    \"getReuseAddress() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getSendBufferSize,\n+                    \"getSendBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getSoLinger,\n+                    \"getSoLinger() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getSoTimeout,\n+                    \"getSoTimeout() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getTcpNoDelay,\n+                    \"getTcpNoDelay() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    s::getTrafficClass,\n+                    \"getTrafficClass() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setKeepAlive(false),\n+                    \"setKeepAlive() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setOOBInline(false),\n+                    \"setOOBInline() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setOption(StandardSocketOptions.SO_RCVBUF, 1024),\n+                    \"setOption() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setReceiveBufferSize(1024),\n+                    \"setReceiveBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setReuseAddress(false),\n+                    \"setReuseAddress() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setSendBufferSize(1024),\n+                    \"setSendBufferSize() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setSoLinger(false, 0),\n+                    \"setSoLinger() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setSoTimeout(1000),\n+                    \"setSoTimeout() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setTcpNoDelay(false),\n+                    \"setTcpNoDelay() when already closed didn't throw SocketException\");\n+            assertThrowsExactly(SocketException.class,\n+                    () -> s.setTrafficClass(123),\n+                    \"setTrafficClass() when already closed didn't throw SocketException\");\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that various operations that aren't expected to throw an exception on a\n+     * closed socket, complete normally.\n+     *\/\n+    @Test\n+    public void testNoExceptionThrown() throws Exception {\n+        try (final Socket s = new Socket()) {\n+            \/\/ close and then invoke various operation on the socket and don't expect an exception\n+            s.close();\n+            assertTrue(s.isClosed(), \"socket isn't closed\");\n+            s.getInetAddress();\n+            s.getLocalAddress();\n+            s.getLocalPort();\n+            s.getLocalSocketAddress();\n+            s.getPort();\n+            s.getRemoteSocketAddress();\n+            s.isBound();\n+            s.isConnected();\n+            s.isInputShutdown();\n+            s.isOutputShutdown();\n+            s.supportedOptions();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socket\/ClosedSocketTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336339\n+ * @summary Race registration and selection key updates with Selector.close\n+ * @run junit RaceUpdatesAndClose\n+ *\/\n+\n+import java.nio.channels.CancelledKeyException;\n+import java.nio.channels.ClosedSelectorException;\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Phaser;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+class RaceUpdatesAndClose {\n+    private static ExecutorService executor;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        executor = Executors.newFixedThreadPool(2);\n+    }\n+\n+    @AfterAll\n+    static void finish() {\n+        executor.shutdown();\n+    }\n+\n+    \/**\n+     * Race SelectableChannel.register and Selector.close.\n+     *\/\n+    @RepeatedTest(100)\n+    void raceRegisterAndClose() throws Exception {\n+        try (Selector sel = Selector.open();\n+             DatagramChannel dc = DatagramChannel.open()) {\n+\n+            dc.configureBlocking(false);\n+\n+            Phaser phaser = new Phaser(2);\n+\n+            \/\/ register\n+            var task1 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                try {\n+                    dc.register(sel, SelectionKey.OP_READ);\n+                } catch (ClosedSelectorException e) { }\n+                return null;\n+            });\n+\n+            \/\/ close selector\n+            var task2 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                sel.close();\n+                return null;\n+            });\n+\n+            task1.get();\n+            task2.get();\n+        }\n+    }\n+\n+    \/**\n+     * Race SelectionKey.interestOps and Selector.close.\n+     *\/\n+    @RepeatedTest(100)\n+    void raceInterestOpsAndClose() throws Exception {\n+        try (Selector sel = Selector.open();\n+             DatagramChannel dc = DatagramChannel.open()) {\n+\n+            dc.configureBlocking(false);\n+            SelectionKey key = dc.register(sel, SelectionKey.OP_READ);\n+\n+            Phaser phaser = new Phaser(2);\n+\n+            \/\/ interestOps\n+            var task1 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                try {\n+                    key.interestOps(0);\n+                } catch (CancelledKeyException e) { }\n+            });\n+\n+            \/\/ close selector\n+            var task2 = executor.submit(() -> {\n+                phaser.arriveAndAwaitAdvance();\n+                sel.close();\n+                return null;\n+            });\n+\n+            task1.get();\n+            task2.get();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/RaceUpdatesAndClose.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4265389\n+ * @summary  Verifies JSplitPane support ComponentOrientation\n+ * @run main TestSplitPaneOrientationTest\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import javax.swing.JButton;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class TestSplitPaneOrientationTest {\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing LAF : \" + laf.getClassName());\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                setLookAndFeel(laf);\n+                JSplitPane jsp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,\n+                                                new JButton(\"Left\"), new JButton(\"Right\"));\n+                jsp.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+                if (jsp.getRightComponent() instanceof JButton button) {\n+                    System.out.println(button.getText());\n+                    if (!button.getText().equals(\"Left\")) {\n+                        throw new RuntimeException(\"JSplitPane did not support ComponentOrientation\");\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/TestSplitPaneOrientationTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8335967\n+ * @summary Tests 'text-decoration: none' is respected\n+ * @run main HTMLTextDecorationNone\n+ *\/\n+public final class HTMLTextDecorationNone {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>text-decoration: none (&lt;a&gt;)<\/title>\n+                <style>\n+                    a.none { text-decoration: none }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><a href=\"https:\/\/openjdk.org\/\">underlined<\/a><\/p>\n+            <p><a href=\"https:\/\/openjdk.org\/\" style=\"text-decoration: none\">not underlined<\/a><\/p>\n+            <p><a href=\"https:\/\/openjdk.org\/\" class=\"none\">not underlined<\/a><\/p>\n+            <p style=\"text-decoration: underline\"><a\n+                   href=\"https:\/\/openjdk.org\/\" style=\"text-decoration: none\">underlined?<\/a><\/p>\n+            <p style=\"text-decoration: underline\"><a\n+                   href=\"https:\/\/openjdk.org\/\" class=\"none\">underlined?<\/a><\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+\n+    private static final boolean[] underlined = {true, false, false, true, true};\n+\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            Object decorationAttr =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION);\n+            String decoration = decorationAttr == null\n+                                ? \"none\" : decorationAttr.toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (decoration.contains(\"underline\") != underlined[i]) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration + \" vs \"\n+                                 + (underlined[i] ? \"underline\" : \"none\");\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLTextDecorationNone.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,0 +210,23 @@\n+\n+    @Test\n+    void testEquality() {\n+        assertEquals(Annotation.of(CD_Object), Annotation.of(ClassDesc.of(\"java.lang.Object\")));\n+        assertNotEquals(Annotation.of(CD_Object), Annotation.of(CD_String));\n+        assertEquals(Annotation.of(CD_Object, AnnotationElement.of(\"fly\", AnnotationValue.ofInt(5))),\n+                Annotation.of(CD_Object, AnnotationElement.ofInt(\"fly\", 5)));\n+        assertEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"one\", 1.2F));\n+        assertEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.of(\"one\", AnnotationValue.ofFloat(1.2F)));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"two\", 1.2F));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofFloat(\"one\", 2.1F));\n+        assertNotEquals(AnnotationElement.ofFloat(\"one\", 1.2F),\n+                AnnotationElement.ofDouble(\"one\", 1.2F));\n+        assertEquals(AnnotationValue.ofInt(23), AnnotationValue.ofInt(23));\n+        assertNotEquals(AnnotationValue.ofInt(23), AnnotationValue.ofInt(42));\n+        assertNotEquals(AnnotationValue.ofInt(23), AnnotationValue.ofLong(23));\n+        assertEquals(AnnotationValue.ofAnnotation(Annotation.of(CD_Object)),\n+                AnnotationValue.ofAnnotation(Annotation.of(Object.class.describeConstable().orElseThrow())));\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -37,1 +38,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -87,1 +87,1 @@\n-                public void writeBody(BufWriter b) {\n+                public void writeBody(BufWriterImpl b) {\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.classfile.impl.BufWriterImpl;\n+import jdk.internal.classfile.impl.Util;\n@@ -88,1 +90,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -96,1 +98,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -98,1 +100,1 @@\n-                        lv.writeTo(b);\n+                        Util.writeLocalVariable(b, lv);\n@@ -103,1 +105,1 @@\n-                    public void writeBody(BufWriter b) {\n+                    public void writeBody(BufWriterImpl b) {\n@@ -105,1 +107,1 @@\n-                        lvt.writeTo(b);\n+                        Util.writeLocalVariable(b, lvt);\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8320360 8330684 8331320 8331655 8331940 8332486 8335820\n+ * @bug 8320360 8330684 8331320 8331655 8331940 8332486 8335820 8336833\n@@ -31,1 +31,0 @@\n-import java.lang.classfile.BufWriter;\n@@ -47,0 +46,2 @@\n+\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -133,1 +134,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n@@ -158,1 +159,1 @@\n-                                public void writeBody(BufWriter b) {\n+                                public void writeBody(BufWriterImpl b) {\n@@ -171,0 +172,22 @@\n+        assertThrows(IllegalArgumentException.class, () ->\n+                ClassFile.of().parse(ClassFile.of().build(ClassDesc.of(\"TableSwitchClass\"), cb -> cb.withMethod(\n+                \"tableSwitchMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, mb ->\n+                        ((DirectMethodBuilder)mb).writeAttribute(new UnboundAttribute.AdHocAttribute<CodeAttribute>(Attributes.code()) {\n+                                @Override\n+                                public void writeBody(BufWriterImpl b) {\n+                                    b.writeU2(-1);\/\/max stack\n+                                    b.writeU2(-1);\/\/max locals\n+                                    b.writeInt(20);\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.NOP.bytecode());\n+                                    b.writeU1(Opcode.TABLESWITCH.bytecode());\n+                                    b.writeU1(0); \/\/padding\n+                                    b.writeU2(0); \/\/padding\n+                                    b.writeInt(0); \/\/default\n+                                    b.writeInt(Integer.MIN_VALUE); \/\/low\n+                                    b.writeInt(Integer.MAX_VALUE - 4); \/\/high to jump back and cause infinite loop\n+                                    b.writeU2(0);\/\/exception handlers\n+                                    b.writeU2(0);\/\/attributes\n+                                }})))).methods().get(0).code().get().elementList());\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import java.lang.classfile.Opcode;\n-import java.lang.classfile.TypeKind;\n@@ -46,1 +44,0 @@\n-import jdk.internal.classfile.impl.DirectClassBuilder;\n@@ -78,1 +75,1 @@\n-            cl.methods().forEach(m -> ((DirectClassBuilder) cb).withMethod(m));\n+            cl.methods().forEach(cb::with);\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.classfile.impl.ChainedClassBuilder;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.constant.ClassDesc;\n+\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n+import static java.lang.constant.ConstantDescs.MTD_void;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8336777\n+ * @summary Testing MethodBuilder correctly rejecting resetting the static\n+ *          access flag.\n+ * @run junit MethodBuilderStaticFlagTest\n+ *\/\n+class MethodBuilderStaticFlagTest {\n+\n+    void testClassBuilder(ClassBuilder clb) {\n+        clb.withMethod(\"staticToStatic\", MTD_void, ACC_STATIC, mb -> mb.withFlags(ACC_PUBLIC | ACC_STATIC));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                clb.withMethod(\"staticToInstance\", MTD_void, ACC_STATIC, mb -> mb.withFlags(ACC_PUBLIC)));\n+        assertThrows(IllegalArgumentException.class, () ->\n+                clb.withMethod(\"instanceToStatic\", MTD_void, 0, mb -> mb.withFlags(ACC_PUBLIC | ACC_STATIC)));\n+        clb.withMethod(\"instanceToInstance\", MTD_void, 0, mb -> mb.withFlags(ACC_PUBLIC));\n+    }\n+\n+    @Test\n+    void testDirectBuilder() {\n+        ClassFile.of().build(ClassDesc.of(\"C1\"), this::testClassBuilder);\n+    }\n+\n+    @Test\n+    void testBufferedBuilder() {\n+        var cf = ClassFile.of();\n+        var bytes = cf.build(ClassDesc.of(\"C2\"), _ -> {});\n+        var cm = cf.parse(bytes);\n+\n+        cf.transformClass(cm, new ClassTransform() {\n+            @Override\n+            public void accept(ClassBuilder builder, ClassElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(ClassBuilder clb) {\n+                assertInstanceOf(ChainedClassBuilder.class, clb);\n+                testClassBuilder(clb);\n+            }\n+        }.andThen(ClassBuilder::with));\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/MethodBuilderStaticFlagTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8333812\n@@ -49,0 +50,4 @@\n+\n+import jdk.internal.classfile.impl.BufWriterImpl;\n+import jdk.internal.classfile.impl.DirectClassBuilder;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n@@ -50,1 +55,1 @@\n-import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -97,0 +102,21 @@\n+    @Test\n+    void testInvalidAttrLocation() {\n+        var cc = ClassFile.of();\n+        var bytes = cc.build(ClassDesc.of(\"InvalidAttrLocationClass\"), cb ->\n+            ((DirectClassBuilder)cb).writeAttribute(new UnboundAttribute.AdHocAttribute<LocalVariableTableAttribute>(Attributes.localVariableTable()) {\n+                @Override\n+                public void writeBody(BufWriterImpl b) {\n+                    b.writeU2(0);\n+                }\n+            }));\n+        assertTrue(cc.verify(bytes).stream().anyMatch(e -> e.getMessage().contains(\"Invalid LocalVariableTable attribute location\")));\n+    }\n+\n+    @Test\n+    void testInvalidClassNameEntry() {\n+        var cc = ClassFile.of();\n+        var bytes = cc.parse(new byte[]{(byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n+            0, 0, 0, 0, 0, 2, ClassFile.TAG_INTEGER, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n+        assertTrue(cc.verify(bytes).stream().anyMatch(e -> e.getMessage().contains(\"expected ClassEntry\")));\n+    }\n+\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -429,1 +429,1 @@\n-            checkDuration(startMillis, 1900, 4000);\n+            checkDuration(startMillis, 1900, 20_000);\n@@ -456,1 +456,1 @@\n-                    checkDuration(startMillis, 1900, 4000);\n+                    checkDuration(startMillis, 1900, 20_000);\n","filename":"test\/jdk\/jdk\/internal\/misc\/ThreadFlock\/ThreadFlockTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+        CountDownLatch threadSleep = new CountDownLatch(1);\n@@ -59,0 +60,1 @@\n+            rs.enable(\"jdk.ThreadSleep\").withoutThreshold().withStackTrace();\n@@ -73,0 +75,5 @@\n+            rs.onEvent(\"jdk.ThreadSleep\", e -> {\n+                threadSleep.countDown();\n+                System.out.println(e);\n+                storeLastTimestamp(e);\n+            });\n@@ -93,0 +100,2 @@\n+            \/\/ Emit thread sleep event\n+            Thread.sleep(1);\n@@ -96,0 +105,1 @@\n+            threadSleep.await();\n@@ -163,1 +173,1 @@\n-             \"JFR.view\", \"verbose=true\", \"width=300\", \"cell-height=100\", \"SystemGC\");\n+             \"JFR.view\", \"verbose=true\", \"width=300\", \"cell-height=100\", \"ThreadSleep\");\n@@ -165,1 +175,1 @@\n-        output.shouldContain(\"System GC\");\n+        output.shouldContain(\"Thread Sleep\");\n@@ -167,1 +177,1 @@\n-        output.shouldContain(\"Invoked Concurrent\");\n+        output.shouldContain(\"Sleep Time\");\n@@ -169,1 +179,1 @@\n-        output.shouldContain(\"invokedConcurrent\");\n+        output.shouldContain(\"time\");\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdView.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @bug 8164656 8181461 8194486\n+ * @bug 8164656 8181461 8194486 8333772\n@@ -222,1 +222,1 @@\n-                inDefaults += \"udp_preference_limit = 1\\n\";\n+                inDefaults += \"udp_preference_limit = 0\\n\";\n@@ -226,1 +226,1 @@\n-                inDefaults += \"udp_preference_limit = 1\\n\";\n+                inDefaults += \"udp_preference_limit = 0\\n\";\n@@ -228,1 +228,1 @@\n-                inRealm += \"   udp_preference_limit = 1\\n\";\n+                inRealm += \"   udp_preference_limit = 0\\n\";\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KdcPolicy.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.krb5.Config;\n+\n+\/*\n+ * @test\n+ * @bug 8333772\n+ * @summary check krb5.conf reading on default and realm-specific values\n+ * @library \/test\/lib\n+ * @run main\/othervm RealmSpecificValues\n+ *\/\n+public class RealmSpecificValues {\n+\n+    static DebugMatcher cm = new DebugMatcher();\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"sun.security.krb5.debug\", \"true\");\n+        System.setProperty(\"java.security.krb5.conf\", \"alternative-krb5.conf\");\n+\n+        \/\/ Defaults\n+        writeConf(-1, -1, -1, -1, -1, -1);\n+        test(true, 3, 30000);\n+\n+        \/\/ Below has settings. For each setting we provide 3 cases:\n+        \/\/ 1. Set in defaults, 2, set in realms, 3, both\n+\n+        \/\/ udp = 0 is useful\n+        writeConf(0, -1, -1, -1, -1, -1);\n+        test(false, 3, 30000);\n+        writeConf(-1, -1, -1, 0, -1, -1);\n+        test(false, 3, 30000);\n+        writeConf(1, -1, -1, 0, -1, -1);\n+        test(false, 3, 30000);\n+\n+        \/\/ max_retries = 0 is ignored\n+        writeConf(-1, 0, -1, -1, -1, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, -1, -1, 0, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, 6, -1, -1, 0, -1); \/\/ Note: 0 is ignored, it does not reset to default\n+        test(true, 6, 30000);\n+\n+        \/\/ max_retries = 1 is useful\n+        writeConf(-1, 1, -1, -1, -1, -1);\n+        test(true, 1, 30000);\n+        writeConf(-1, -1, -1, -1, 1, -1);\n+        test(true, 1, 30000);\n+        writeConf(-1, 3, -1, -1, 1, -1);\n+        test(true, 1, 30000);\n+\n+        \/\/ timeout = 0 is ignored\n+        writeConf(-1, -1, 0, -1, -1, -1);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, -1, -1, -1, 0);\n+        test(true, 3, 30000);\n+        writeConf(-1, -1, 10000, -1, -1, 0);\n+        test(true, 3, 10000);\n+\n+        \/\/ timeout > 0 is useful\n+        writeConf(-1, -1, 10000, -1, -1, -1);\n+        test(true, 3, 10000);\n+        writeConf(-1, -1, -1, -1, -1, 10000);\n+        test(true, 3, 10000);\n+        writeConf(-1, -1, 20000, -1, -1, 10000);\n+        test(true, 3, 10000);\n+    }\n+\n+    static void writeConf(int limit, int retries, int timeout,\n+            int limitR, int retriesR, int timeoutR) throws Exception {\n+\n+        String inDefaults = \"\";\n+        if (limit >= 0) inDefaults += \"udp_preference_limit = \" + limit + \"\\n\";\n+        if (retries >= 0) inDefaults += \"max_retries = \" + retries + \"\\n\";\n+        if (timeout >= 0) inDefaults += \"kdc_timeout = \" + timeout + \"\\n\";\n+\n+        String inRealm = \"\";\n+        if (limitR >= 0) inRealm += \"udp_preference_limit = \" + limitR + \"\\n\";\n+        if (retriesR >= 0) inRealm += \"max_retries = \" + retriesR + \"\\n\";\n+        if (timeoutR >= 0) inRealm += \"kdc_timeout = \" + timeoutR + \"\\n\";\n+\n+        String conf = \"[libdefaults]\\n\" +\n+                \"default_realm = \" + OneKDC.REALM + \"\\n\" +\n+                inDefaults +\n+                \"\\n\" +\n+                \"[realms]\\n\" +\n+                OneKDC.REALM + \" = {\\n\" +\n+                \"kdc = \" + OneKDC.KDCHOST + \":12345\\n\" +\n+                inRealm +\n+                \"}\\n\";\n+\n+        Files.writeString(Paths.get(\"alternative-krb5.conf\"), conf);\n+    }\n+\n+    static void test(boolean isUDP, int retries, int timeout) throws Exception {\n+\n+        PrintStream oldErr = System.err;\n+        ByteArrayOutputStream bo = new ByteArrayOutputStream();\n+        System.setErr(new PrintStream(bo));\n+        try {\n+            Config.refresh();\n+            Context.fromUserPass(OneKDC.USER, OneKDC.PASS, false);\n+        } catch (Exception e) {\n+            \/\/ will happen\n+        } finally {\n+            System.setErr(oldErr);\n+        }\n+\n+        String[] lines = new String(bo.toByteArray()).split(\"\\n\");\n+        for (String line: lines) {\n+            if (cm.match(line)) {\n+                System.out.println(line);\n+                Asserts.assertEQ(cm.isUDP(), isUDP);\n+                Asserts.assertEQ(cm.timeout(), timeout);\n+                Asserts.assertEQ(cm.retries(), retries);\n+                return;\n+            }\n+        }\n+        Asserts.fail(\"Should not reach here\");\n+    }\n+\n+    \/**\n+     * A helper class to match the krb5 debug output:\n+     * >>> KrbKdcReq send: kdc=kdc.rabbit.hole TCP:12345, timeout=30000,\n+     *     number of retries =3, #bytes=141\n+     *\/\n+    static class DebugMatcher {\n+\n+        static final Pattern re = Pattern.compile(\n+                \">>> KrbKdcReq send: kdc=\\\\S+ (TCP|UDP):\\\\d+, \" +\n+                        \"timeout=(\\\\d+), number of retries\\\\s*=(\\\\d+)\");\n+\n+        Matcher matcher;\n+\n+        boolean match(String line) {\n+            matcher = re.matcher(line);\n+            return matcher.find();\n+        }\n+\n+        boolean isUDP() {\n+            return matcher.group(1).equals(\"UDP\");\n+        }\n+\n+        int timeout() {\n+            return Integer.parseInt(matcher.group(2));\n+        }\n+\n+        int retries() {\n+            return Integer.parseInt(matcher.group(3));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/RealmSpecificValues.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336667\n+ * @summary Ensure the unused bytes are calculated correctly when converting\n+ *          indefinite length BER to DER\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ *\/\n+import jdk.test.lib.Asserts;\n+import sun.security.util.DerInputStream;\n+\n+import java.util.HexFormat;\n+\n+public class PoC {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ A BER indefinite encoding with some unused bytes at the end\n+        var data = HexFormat.of().parseHex(\"\"\"\n+                2480 0401AA 0401BB 0000 -- 2 byte string\n+                010100 -- boolean false\n+                12345678 -- 4 unused bytes\"\"\"\n+                .replaceAll(\"(\\\\s|--.*)\", \"\"));\n+        var dis = new DerInputStream(data, 0, data.length - 4, true);\n+        Asserts.assertEQ(dis.getDerValue().getOctetString().length, 2);\n+        Asserts.assertFalse(dis.getDerValue().getBoolean());\n+        dis.atEnd();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/DerInputBuffer\/B8336667\/PoC.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336667\n+ * @summary Ensure the unused bytes are calculated correctly when converting\n+ *          indefinite length BER to DER\n+ *\/\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CRLException;\n+import java.security.cert.CertificateException;\n+import java.util.Base64;\n+\n+public class Reproducer {\n+    private static final String INPUT = \"\"\"\n+            MIIBljCCAVMwgAaB\/\/\/\/\/\/\/\/\/yb\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/9\/\/\/\/AgDv\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+            \/\/\/\/\/2RjPWNvbf\/\/\/\/8k\/\/\/\/\/\/\/\/\/yb\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/9vbf\/\/\/\/8k\/\/\/\/\/\/\/\/\/yb\/\/\/\/\/\n+            \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/AgD\/\/\/\/\/\/\/\/\/\/\/\/\/b23\/\/\/\/\/JP\/\/\/\/\/\/\/\/8m\/\/\/\/\/yf\/\/\/\/\/\/\/\/\/\/\/\/\/\n+            \/\/\/\/\/wIA\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/8AAABl\/\/\/\/\/\/8m\/\/\/\/\/\/\/\/\/y1CRUdJ\n+            TiA9Y290cnVlVlZWVlZWVlZWVjEAAAAAAAAArQdVUwNVBAsTA0RvRDEaMBhAA1UAAAAAAAAAAAAA\n+            AAAAAAAAAAAAAAAAAAEXDTAzMDcxNTE2MjAwNFqgHzAdMA8GA1UdHAEB\/wQFMAPyAf8wCgYDVR0P\n+            BAMCAQIwCwYHKoZIzjgEAwUAAzBkARkTA2NvbTEYMBYGCgmSJomT8ixkARkTCG15VGVzdENBMBIC\n+            AQHyAjZG+RfHdO4=\"\"\";\n+\n+    Reproducer(byte[] data) {\n+        try {\n+            java.security.cert.CertificateFactory.\n+                    getInstance(\"X.509\").generateCRLs(new ByteArrayInputStream(data));\n+        } catch (CertificateException | CRLException e) {\n+            if (System.getProperty(\"dbg\", \"false\").equals(\"true\")) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] a) throws Exception {\n+        byte[] decodedBytes = Base64.getMimeDecoder().decode(INPUT);\n+        new Reproducer(decodedBytes);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/DerInputBuffer\/B8336667\/Reproducer.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332850\n+ * @summary javac crashes if container for repeatable annotation is not found\n+ * @library \/tools\/javac\/lib \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.*;\n+import toolbox.Task.*;\n+\n+public class CompletionErrorOnRepeatingAnnosTest {\n+    ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        CompletionErrorOnRepeatingAnnosTest t = new CompletionErrorOnRepeatingAnnosTest();\n+        \/\/t.testMissingContainerAnno();\n+        t.testMissingContainerTypeAnno();\n+    }\n+\n+    void testMissingContainerTypeAnno() throws Exception {\n+        doTest(\n+                \"\"\"\n+                import java.lang.annotation.*;\n+                import static java.lang.annotation.RetentionPolicy.*;\n+                import static java.lang.annotation.ElementType.*;\n+                @Target({TYPE_USE,FIELD}) @Repeatable( As.class) @interface A { }\n+                @Target({TYPE_USE,FIELD}) @interface As { A[] value(); }\n+                \"\"\",\n+                \"\"\"\n+                class T {\n+                    @A @A String data = \"test\";\n+                }\n+                \"\"\",\n+                List.of(\n+                        \"T.java:2:5: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n+                        \"T.java:2:8: compiler.err.invalid.repeatable.annotation.no.value: As\",\n+                        \"2 errors\"\n+                )\n+        );\n+    }\n+\n+    void testMissingContainerAnno() throws Exception {\n+        doTest(\n+                \"\"\"\n+                import java.lang.annotation.Repeatable;\n+                @Repeatable(As.class)\n+                @interface A {}\n+                @interface As {\n+                    A[] value();\n+                }\n+                \"\"\",\n+                \"@A @A class T {}\",\n+                List.of(\n+                        \"T.java:1:1: compiler.err.cant.access: As, (compiler.misc.class.file.not.found: As)\",\n+                        \"T.java:1:4: compiler.err.invalid.repeatable.annotation.no.value: As\",\n+                        \"2 errors\"\n+                )\n+        );\n+    }\n+\n+    private void doTest(String annosSrc, String annotatedSrc, List<String> expectedOutput) throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src = base.resolve(\"src\");\n+        tb.createDirectories(src);\n+        tb.writeJavaFiles(src, annosSrc);\n+        Path out = base.resolve(\"out\");\n+        tb.createDirectories(out);\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .files(tb.findJavaFiles(src))\n+                .run();\n+        \/\/ let's now compile T.java which uses repeated annotations, we want to load the anno classes from the CP\n+        tb.deleteFiles(src.resolve(\"A.java\"));\n+        tb.writeJavaFiles(src, annotatedSrc);\n+        new JavacTask(tb)\n+                .outdir(out)\n+                .classpath(out)\n+                .files(tb.findJavaFiles(src))\n+                .run();\n+        \/\/ now if we remove As.class there will be an error but javac should not crash\n+        tb.deleteFiles(out.resolve(\"As.class\"));\n+        List<String> log = new JavacTask(tb)\n+                .outdir(out)\n+                .classpath(out)\n+                .options(\"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expectedOutput.equals(log))\n+            throw new Exception(\"expected output not found: \" + log);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/CompletionErrorOnRepeatingAnnosTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,2 +73,2 @@\n-            BufWriter buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassFileImpl) ClassFile.of());\n-            attr.defaultValue().writeTo(buf);\n+            var buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassFileImpl) ClassFile.of());\n+            AnnotationReader.writeAnnotationValue(buf, attr.defaultValue());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336786\n+ * @summary VerifyError with lambda capture and enclosing instance references\n+ * @compile a\/A.java SuperClassThisCapture.java\n+ * @run main SuperClassThisCapture\n+ *\/\n+\n+public class SuperClassThisCapture extends a.A {\n+\n+  public static void main(String[] args) {\n+    new SuperClassThisCapture().f(42);\n+    new SuperClassThisCapture().g();\n+  }\n+\n+  public void f(int x) {\n+    Runnable r = () -> {\n+      System.err.println(x);\n+      new I();\n+    };\n+    r.run();\n+  }\n+\n+  public void g() {\n+    Runnable r = () -> new I();\n+    r.run();\n+  }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/SuperClassThisCapture\/SuperClassThisCapture.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package a;\n+\n+public class A {\n+  public class I {}\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/SuperClassThisCapture\/a\/A.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336491\n+ * @summary Verify that void returning expression lambdas don't box their result\n+ * @modules jdk.compiler\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Path;\n+\n+public class VoidReturnBoxing {\n+\n+    public static void main(String[] args) {\n+        new VoidReturnBoxing().run();\n+    }\n+\n+    void run() {\n+        Path path = Path.of(System.getProperty(\"test.classes\"), \"T.class\");\n+        StringWriter s;\n+        String out;\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(new String[] {\"-p\", \"-c\", path.toString()}, pw);\n+            out = s.toString();\n+        }\n+        if (out.contains(\"java\/lang\/Integer.valueOf\")) {\n+            throw new AssertionError(\n+                    \"Unnecessary boxing of void returning expression lambda result:\\n\\n\" + out);\n+        }\n+    }\n+}\n+\n+class T {\n+    int g() {\n+        return 0;\n+    }\n+\n+    Runnable r = () -> g();\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/VoidReturnBoxing.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8192920 8204588 8246774 8248843 8268869 8235876 8328339\n+ * @bug 8192920 8204588 8246774 8248843 8268869 8235876 8328339 8335896\n@@ -279,0 +279,21 @@\n+    @Test\n+    public void testThreadContextClassLoader(Path base) throws IOException {\n+        tb.writeJavaFiles(base, \/\/language=java\n+                \"\"\"\n+                class ThreadContextClassLoader {\n+                    public static void main(String... args) {\n+                        var expected = ThreadContextClassLoader.class.getClassLoader();\n+                        var actual = Thread.currentThread().getContextClassLoader();\n+                        System.out.println(expected == actual);\n+                    }\n+                }\n+                \"\"\");\n+\n+        Path file = base.resolve(\"ThreadContextClassLoader.java\");\n+        String log = new JavaTask(tb)\n+                .className(file.toString())\n+                .run(Task.Expect.SUCCESS)\n+                .getOutput(Task.OutputKind.STDOUT);\n+        checkEqual(\"stdout\", log.trim(), \"true\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8336781\n+ * @summary Erroneous exhaustivity check with boolean switch\n+ * @enablePreview\n+ * @compile -XDshould-stop.at=FLOW T8336781.java\n+ *\/\n+public class T8336781 {\n+    public static void test() {\n+        Boolean bool = null;\n+        var _ = switch (bool) {\n+            case null -> \"nothing\";\n+            case true -> \"something true\";\n+            case false -> \"something false\";\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8336781.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+import java.time.Duration;\n@@ -964,0 +965,9 @@\n+            }\n+            return rslt;\n+        }\n+\n+        @Override\n+        public boolean waitFor(Duration duration) throws InterruptedException {\n+            boolean rslt = p.waitFor(duration);\n+            if (rslt) {\n+                waitForStreams();\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.thread;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+\n+\/**\n+ * Helper class to allow tests run virtual threads with a custom scheduler.\n+ *\n+ * Tests using this class need to open java.base\/java.lang.\n+ *\/\n+public class VThreadScheduler {\n+    private VThreadScheduler() { }\n+\n+    \/**\n+     * Returns the scheduler for the given virtual thread.\n+     *\/\n+    public static Executor scheduler(Thread thread) {\n+        if (!thread.isVirtual())\n+            throw new IllegalArgumentException(\"Not a virtual thread\");\n+        try {\n+            Field scheduler = Class.forName(\"java.lang.VirtualThread\")\n+                    .getDeclaredField(\"scheduler\");\n+            scheduler.setAccessible(true);\n+            return (Executor) scheduler.get(thread);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Return true if custom schedulers are supported.\n+     *\/\n+    public static boolean supportsCustomScheduler() {\n+        try (var pool = Executors.newCachedThreadPool()) {\n+            try {\n+                virtualThreadBuilder(pool);\n+                return true;\n+            } catch (UnsupportedOperationException e) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Returns a builder to create virtual threads that use the given scheduler.\n+     * @throws UnsupportedOperationException if custom schedulers are not supported\n+     *\/\n+    public static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n+        try {\n+            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n+            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n+            ctor.setAccessible(true);\n+            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            }\n+            throw new RuntimeException(e);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a ThreadFactory to create virtual threads that use the given scheduler.\n+     * @throws UnsupportedOperationException if custom schedulers are not supported\n+     *\/\n+    public static ThreadFactory virtualThreadFactory(Executor scheduler) {\n+        return virtualThreadBuilder(scheduler).factory();\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadScheduler.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -222,0 +222,12 @@\n+\n+    public static void main(String... args) {\n+        StringConcat concat = new StringConcat();\n+        concat.concat4String();\n+        concat.concat123String();\n+        concat.concat6String();\n+        concat.concat13String();\n+        concat.concat23String();\n+        concat.concatConstInt();\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcat.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,354 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmarks stressing String concat startup. Provides a main method that takes names of the sub-benchmarks\n+ * of choice as arguments to work well as a standalone startup test\/diagnostic\n+ *\n+ *   StringSingle\n+ *   MixedSmall - small number of mixed expressions\n+ *   StringLarge - large number of expressions with a mix of String arguments and constants\n+ *   MixedLarge - large number of expressions with a mix of constants, Strings and primivitive arguments\n+ *\/\n+public class StringConcatStartup {\n+\n+    public static void main(String... args) {\n+        String[] selection = new String[] { \"StringLarge\", \"MixedSmall\", \"StringSingle\", \"MixedLarge\" };\n+        if (args.length > 0) {\n+            selection = args;\n+        }\n+        for (String select : selection) {\n+            switch (select) {\n+                case \"StringSingle\" -> new StringSingle().run();\n+                case \"MixedSmall\" -> new MixedSmall().run();\n+                case \"StringLarge\" -> new StringLarge().run();\n+                case \"MixedLarge\" -> new MixedLarge().run();\n+            }\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 40, warmups = 2)\n+    public static class StringSingle {\n+\n+        public String s = \"foo\";\n+\n+        @Benchmark\n+        public String run() {\n+            return \"\" + s;\n+        }\n+    }\n+\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 20, warmups = 2)\n+    public static class MixedSmall {\n+\n+        public String s = \"foo\";\n+        public int i = 17;\n+        public long l = 21L;\n+        public char c = 'a';\n+        public boolean z = true;\n+\n+        @Benchmark\n+        public String run() {\n+            String concat;\n+            concat = \"foo\" + s + \"bar\" + i + \"baz\" + l + \"bur\" + c + \"dub\" + z + \"foo\";\n+            concat = \"bar\" + i + \"baz\" + l + c + \"dub\" + z + \"foo\";\n+            concat = \"bar\" + i + \"baz\" + l + \"dub\" + z;\n+            concat = s + \"bar\" + i + s + \"bur\" + c + \"dub\" + s + \"foo\";\n+            return concat;\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2)\n+    public static class StringLarge {\n+\n+        public String i = \"1\";\n+        public String l = \"2\";\n+        public String b = \"3\";\n+        public String s = \"4\";\n+        public String c = \"5\";\n+        public String S = \"6\";\n+        public String z = \"7\";\n+        public String f = \"8\";\n+        public String d = \"9\";\n+\n+        @Benchmark\n+        public void run() {\n+            String concat;\n+            concat = \"\" + \"S\" + f + l + z + f + \"S\" + d + S + d + S;\n+            concat = \"\" + \"S\" + S + i + b + b + z + i + s + S + b + \"S\";\n+            concat = \"\" + S + f + f + f + b + f + \"S\" + S + S + i + b;\n+            concat = \"\" + b + l + i + l + b + S + i + i + f + z;\n+            concat = \"\" + f + z + d + b + \"S\" + c + S + f + s + s + d;\n+            concat = \"\" + f + b + d + d + l + s + s + b + l + c + z;\n+            concat = \"\" + S + z + l + s + s + i + f + c + i + i + d;\n+            concat = \"\" + b + \"S\" + c + d + \"S\" + d + s + \"S\" + f + c + l + \"S\" + i + z + d + \"S\";\n+            concat = \"\" + S + \"S\" + S + i + c + z + i + i + S + b;\n+            concat = \"\" + S + S + d + s + z + f + z + i + b + s + s + \"S\";\n+            concat = \"\" + i + z + f + d + f + S + c + \"S\" + i;\n+            concat = \"\" + c + c + c + \"S\" + S + l;\n+            concat = \"\" + z + d + s + i + l + i + z + c + i + f + l + s + b + S + S + s + z + \"S\" + c + z;\n+            concat = \"\" + d + b + l + S + s + b + \"S\" + c + d + c + c + l + d + S + b + l + b + S + d + \"S\";\n+            concat = \"\" + c + z + c + d + b + S + c + b + S + \"S\" + d + s + c + s + b + c + b + z + s + i;\n+            concat = \"\" + l + S + \"S\";\n+            concat = \"\" + s + i + f + S + f + i + s + d + S + l + i + \"S\" + i + S + d + i + l + c + i + d;\n+            concat = \"\" + S + l + s + i + b + f + z + c + S + d + s + f + l + i + s + b + f + s + d + l;\n+            concat = \"\" + i + d + b + d + S + b + d + \"S\" + \"S\" + i + l + i + b + \"S\" + \"S\" + s + \"S\" + i + b + c;\n+            concat = \"\" + \"S\" + l + \"S\" + s + d + l + i + l + z + s + i + z + b + b + c + S + d + d + s + i;\n+            concat = \"\" + b + c + i + b + z + d + z + z + d + z + l + b + z + f + b + c + d + c + z + c;\n+            concat = \"\" + b + z + f + b + z + f + s + z + f + \"S\" + l + f + l + z + b + z + i + l + i + S;\n+            concat = \"\" + c + b + \"S\" + z;\n+            concat = \"\" + b + \"S\" + i + \"S\" + S + i + l + c + i + c + z + z + d + \"S\" + z + z + c + z + z + i;\n+            concat = \"\" + f + c + c + \"S\" + c + s + i + z + b + s + f + b + i + i + z + f + d + f + i + i;\n+            concat = \"\" + d + s + z + l + s + d + S + i + S + s + i + c + b + c + s + \"S\" + d + S + f + s;\n+            concat = \"\" + S + f + s + z + d + d + S + s + s + z + f + z + \"S\" + i + d + d + S + c + S + \"S\";\n+            concat = \"\" + c + c + b + S + \"S\" + \"S\" + d + S + s + b + c + d + z + c + b + i + S + z + i + s;\n+            concat = \"\" + l + l + d + z + s + s + i + i + l + c + f + z + i + f + l + z + s + d + f + l;\n+            concat = \"\" + f + d + \"S\" + s;\n+            concat = \"\" + d + S + \"S\" + S + f + \"S\" + c + i + s + b + c + b + l + f + S + c + c + i + z + s;\n+            concat = \"\" + z + \"S\" + s + S + s + d + d + s + f + \"S\" + f + \"S\" + i + S + \"S\" + c + l + b + f + f;\n+            concat = \"\" + l + f + d + b + s + f + d + \"S\" + l + s + \"S\" + b + b + s + S + S + \"S\" + \"S\" + d + b;\n+            concat = \"\" + b + l + f + b + S + f + z + s + S + f + b + b + s + s + b + s + l + d + l;\n+            concat = \"\" + b + b + S + S + S + z + z + d + \"S\" + l + \"S\" + s + i + \"S\" + c + f + S + f + i;\n+            concat = \"\" + l + l + f + i + S + s + \"S\" + \"S\" + z + d + \"S\" + l + d + b + f + f + l + b + b;\n+            concat = \"\" + l + f + \"S\" + f + f + i + l + l + i + S + b + f + d + i + c + c + d + d + i;\n+            concat = \"\" + l + b + s + d + i + i + d + c + \"S\" + s + f + d + z + d + S + c;\n+            concat = \"\" + f + s + \"S\" + z + s + \"S\" + b + b + b + d + d + b + z + l + c + b;\n+            concat = \"\" + l + d + \"S\" + b + z + z + f + c + z + c + c + c + c + d;\n+            concat = \"\" + z + d + l + \"S\" + i + s + b + b + d + s + s;\n+            concat = \"\" + f + i + d + S + f + f + i + s + d + S + c + l + d + s + c + i;\n+            concat = \"\" + f + c + i + \"S\" + \"S\" + c + f + b + l + i + s + c + i + S + S + i;\n+            concat = \"\" + z + S + z + d + d + S + \"S\" + f + d + s + s + \"S\" + l + z + l + c;\n+            concat = \"\" + b + c + s + f + S + l + b + f + \"S\" + l + \"S\" + c + c + z + b + b;\n+            concat = \"\" + c + b + z + s + d + l + l + S + l + \"S\" + f + S + c + f + s + f;\n+            concat = \"\" + z + z + d + i + z + s + z + S + f + S + \"S\" + \"S\" + l + d + c + d;\n+            concat = \"\" + c + S + s + f + c + i + b + l + S + c + l + f + f + l + i + l;\n+            concat = \"\" + \"S\" + i + f + d + s + S + S + l + s + S + l + \"S\" + b + l + s + l + d + d + f + S;\n+            concat = \"\" + l + z + c + l + f + f + d + s + l + b + d + f + S + S + \"S\" + i + i + s + f + i;\n+            concat = \"\" + S + S + l + S + z + d + s + c + \"S\" + d + f + d + f + f + z + i + f + l + S + s;\n+            concat = \"\" + z + d + z + l + f + s + d + z + i + S + S + d + i + z + c + i + i + f + b + \"S\";\n+            concat = \"\" + b + d + \"S\" + f + f + d + s + i + b + l + i + b + f + f + b + f + l + i + z + l;\n+            concat = \"\" + c + z + s + \"S\" + z + f + \"S\" + i + f + s + l + i + \"S\" + d + i + b + i + S + b + l;\n+            concat = \"\" + d + l + s + c + l + d + \"S\" + \"S\" + s + S + f + z + b + s + b + f + z + z + l + l;\n+            concat = \"\" + f + b + \"S\" + s + i + \"S\" + s + f + c + f + c + f + i + i + b + i + i + b + S + S;\n+            concat = \"\" + i + i + s + i + s + S + s + \"S\" + c + c + f + s + d + l + l + d + f + l + i + S;\n+            concat = \"\" + z + d + z + \"S\" + c + i + f + s + b + S + i + c + s + b + c + f + s + z + f + c;\n+            concat = \"\" + f + s + f + b + l + z + f + f + f + c + z + S + b + s + z + i + s + S + i + b;\n+            concat = \"\" + d + i + S + b + i + \"S\" + l + S + S + S + z + i + z + b;\n+            concat = \"\" + \"S\" + S + s + l + f + i + l + b + f + S + d + c + b + d;\n+            concat = \"\" + c + i + i + d + S + z + c + i + c + S + f + i + c + c;\n+            concat = \"\" + \"S\" + \"S\" + c + d + z + l + d + z + f + b + d + z + S + f;\n+            concat = \"\" + b + d + z + d + i + z + d + b + d + \"S\" + c + f + d;\n+            concat = \"\" + d + s + f + c + i + \"S\" + b + b + S + i + s + d + \"S\" + f;\n+            concat = \"\" + l + S + d + b + S + s + \"S\" + s + s + l + S + \"S\" + c + d;\n+            concat = \"\" + c + s + z + c + S + S + \"S\" + l + S + f + f + c + S + f;\n+            concat = \"\" + d + i + s + c + z + \"S\" + d + f + \"S\" + S + c + b + \"S\" + c;\n+            concat = \"\" + i + b + \"S\" + l + S + d + \"S\" + c + b + s + f + l + f + \"S\";\n+            concat = \"\" + c + b + f + \"S\" + S + s + i + l + s + z + z + f + l + b;\n+            concat = \"\" + S + s + \"S\" + d + s + z + \"S\" + i + i + z + S + b + f + i;\n+            concat = \"\" + z + S + S + \"S\" + S + S + z + b + S + z + b + f + s + l;\n+            concat = \"\" + s + z + d + \"S\" + z + l + f + z + s + z + d + l + s + l;\n+            concat = \"\" + l + d + i + s + i + c + i + f + b + f + s + b + s + s;\n+            concat = \"\" + z + \"S\" + S + \"S\" + \"S\" + i + \"S\" + s + d + z + l;\n+            concat = \"\" + i + S + S + \"S\" + f + \"S\" + \"S\" + z + S + z + b + z + c + b;\n+            concat = \"\" + i + f + f + d + z + f + z + b + \"S\" + c + l + l + z + s + S + s;\n+            concat = \"\" + b + b + z + \"S\" + f + s + \"S\" + l +c + S + i + i + b + \"S\" + S;\n+            concat = \"\" + i + \"S\" + d + d + d + \"S\" + f + \"S\" + b + s + S + i + \"S\" + d + b;\n+            concat = \"\" + s + f + b + d + c + d + c + S + S + b + i + b + z + c;\n+            concat = \"\" + l + l + S + l + f + s + i + c + z + f + d + l + f + b + l + f + f + i + i + z;\n+            concat = \"\" + l + l + l + l + s + s + f + i + i + f + z + c + S + s + f + \"S\" + \"S\" + s + z + s;\n+            concat = \"\" + S + z + f + b + l + c + i + l;\n+            concat = \"\" + c + z + b + f + i + i + f + d + f + f + d + d + l + d + S + \"S\" + i + c + b + f;\n+            concat = \"\" + s + d + S + d + b + l + l + f + b + \"S\" + i + z + b + S + S + c + S + f + S + z;\n+            concat = \"\" + l + S + S + i + l + s + d + f + z + i + \"S\" + b + f + c + z + c + S + c + i + s;\n+            concat = \"\" + l + S + S + s + f + S + s + \"S\" + c + c + c;\n+            concat = \"\" + s + \"S\" + c + d + z + c + l + c + z + S + i + f + c + c + s + \"S\" + S + z + s + \"S\";\n+            concat = \"\" + c + i + z + s + b + s + s + b + \"S\" + d + \"S\" + z + f + \"S\" + c + S + s + S + b + i;\n+            concat = \"\" + s + c + d + d + \"S\" + \"S\" + l + s + i + l + l + f + S + f + f + i + S + d + l + c;\n+            concat = \"\" + \"S\" + S + b + c + i + \"S\" + c + c + s + i + \"S\" + b + i + b + b + S + f + l + s + \"S\";\n+            concat = \"\" + l + l + b + f + i + i + f + z + c + S + b + f + z + \"S\" + s + z + \"S\" + f + S + s;\n+            concat = \"\" + i + c + b + i + b + z + \"S\" + i + c + i + l + \"S\" + z + b + b + i + i + c + i + f;\n+            concat = \"\" + \"S\" + c + d + z + d + f + c + c + b + \"S\" + l + f + d + \"S\" + s + s + S + i + s + i;\n+            concat = \"\" + S + \"S\" + d + c + \"S\" + S + \"S\" + b + f + z + \"S\" + l + d + f + \"S\" + S + d + b + c + c;\n+            concat = \"\" + f + S + l + s + l + z + S + d + S + b + f + c + s + b + \"S\" + z + \"S\" + \"S\" + b + z;\n+            concat = \"\" + f + s + c + i + S + b + s + S + i + S + c + b + s + d + i + \"S\" + s + l + c + s;\n+            concat = \"\" + l + f + s + b + d + b + i + c + c + b + s + f + i + z + s + i + s + \"S\" + l + z;\n+            concat = \"\" + d + z + z + c + b + b + s + b + S + l + d + i + S + d + \"S\" + i + S + i + b + S;\n+            concat = \"\" + c + d + \"S\" + f + i + b + d + c + z + f + \"S\" + i + d + b + f + s + \"S\" + c + S + i;\n+            concat = \"\" + i + z + \"S\" + b + S + s + c + s + f + S + S + f + z + s + b + d + z + i + s + z;\n+            concat = \"\" + z + s + z + l + \"S\" + S + s + \"S\" + i + b + c + s + l + l + s + i + c + i + i + d;\n+            concat = \"\" + \"S\" + b + l + z + c + f + l + S + \"S\" + l + i + z + z + l + S + \"S\" + z + S + z + c + \"S\";\n+            concat = \"\" + \"S\" + f + S + i + i + i + \"S\" + i + i + l + c + l + S + S + z + b + i + c + f + S;\n+            concat = \"\" + c + z + S + S + b + i + c;\n+            concat = \"\" + S + s + S + c;\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2)\n+    public static class MixedLarge {\n+\n+        public int i = 17;\n+        public long l = 21L;\n+        public byte b = (byte)17;\n+        public short s = (short)17;\n+        public char c = 'a';\n+        public String S = \"S\";\n+        public float f = 1.0f;\n+        public double d = 2.0;\n+        public boolean z = true;\n+\n+        @Benchmark\n+        public void run() {\n+            String concat;\n+            concat = \"\" + \"S\" + f + l + z + f + \"S\" + d + S + d + S;\n+            concat = \"\" + \"S\" + S + i + b + b + z + i + s + S + b + \"S\";\n+            concat = \"\" + S + f + f + f + b + f + \"S\" + S + S + i + b;\n+            concat = \"\" + b + l + i + l + b + S + i + i + f + z;\n+            concat = \"\" + f + z + d + b + \"S\" + c + S + f + s + s + d;\n+            concat = \"\" + f + b + d + d + l + s + s + b + l + c + z;\n+            concat = \"\" + S + z + l + s + s + i + f + c + i + i + d;\n+            concat = \"\" + b + \"S\" + c + d + \"S\" + d + s + \"S\" + f + c + l + \"S\" + i + z + d + \"S\";\n+            concat = \"\" + S + \"S\" + S + i + c + z + i + i + S + b;\n+            concat = \"\" + S + S + d + s + z + f + z + i + b + s + s + \"S\";\n+            concat = \"\" + i + z + f + d + f + S + c + \"S\" + i;\n+            concat = \"\" + c + c + c + \"S\" + S + l;\n+            concat = \"\" + z + d + s + i + l + i + z + c + i + f + l + s + b + S + S + s + z + \"S\" + c + z;\n+            concat = \"\" + d + b + l + S + s + b + \"S\" + c + d + c + c + l + d + S + b + l + b + S + d + \"S\";\n+            concat = \"\" + c + z + c + d + b + S + c + b + S + \"S\" + d + s + c + s + b + c + b + z + s + i;\n+            concat = \"\" + l + S + \"S\";\n+            concat = \"\" + s + i + f + S + f + i + s + d + S + l + i + \"S\" + i + S + d + i + l + c + i + d;\n+            concat = \"\" + S + l + s + i + b + f + z + c + S + d + s + f + l + i + s + b + f + s + d + l;\n+            concat = \"\" + i + d + b + d + S + b + d + \"S\" + \"S\" + i + l + i + b + \"S\" + \"S\" + s + \"S\" + i + b + c;\n+            concat = \"\" + \"S\" + l + \"S\" + s + d + l + i + l + z + s + i + z + b + b + c + S + d + d + s + i;\n+            concat = \"\" + b + c + i + b + z + d + z + z + d + z + l + b + z + f + b + c + d + c + z + c;\n+            concat = \"\" + b + z + f + b + z + f + s + z + f + \"S\" + l + f + l + z + b + z + i + l + i + S;\n+            concat = \"\" + c + b + \"S\" + z;\n+            concat = \"\" + b + \"S\" + i + \"S\" + S + i + l + c + i + c + z + z + d + \"S\" + z + z + c + z + z + i;\n+            concat = \"\" + f + c + c + \"S\" + c + s + i + z + b + s + f + b + i + i + z + f + d + f + i + i;\n+            concat = \"\" + d + s + z + l + s + d + S + i + S + s + i + c + b + c + s + \"S\" + d + S + f + s;\n+            concat = \"\" + S + f + s + z + d + d + S + s + s + z + f + z + \"S\" + i + d + d + S + c + S + \"S\";\n+            concat = \"\" + c + c + b + S + \"S\" + \"S\" + d + S + s + b + c + d + z + c + b + i + S + z + i + s;\n+            concat = \"\" + l + l + d + z + s + s + i + i + l + c + f + z + i + f + l + z + s + d + f + l;\n+            concat = \"\" + f + d + \"S\" + s;\n+            concat = \"\" + d + S + \"S\" + S + f + \"S\" + c + i + s + b + c + b + l + f + S + c + c + i + z + s;\n+            concat = \"\" + z + \"S\" + s + S + s + d + d + s + f + \"S\" + f + \"S\" + i + S + \"S\" + c + l + b + f + f;\n+            concat = \"\" + l + f + d + b + s + f + d + \"S\" + l + s + \"S\" + b + b + s + S + S + \"S\" + \"S\" + d + b;\n+            concat = \"\" + b + l + f + b + S + f + z + s + S + f + b + b + s + s + b + s + l + d + l;\n+            concat = \"\" + b + b + S + S + S + z + z + d + \"S\" + l + \"S\" + s + i + \"S\" + c + f + S + f + i;\n+            concat = \"\" + l + l + f + i + S + s + \"S\" + \"S\" + z + d + \"S\" + l + d + b + f + f + l + b + b;\n+            concat = \"\" + l + f + \"S\" + f + f + i + l + l + i + S + b + f + d + i + c + c + d + d + i;\n+            concat = \"\" + l + b + s + d + i + i + d + c + \"S\" + s + f + d + z + d + S + c;\n+            concat = \"\" + f + s + \"S\" + z + s + \"S\" + b + b + b + d + d + b + z + l + c + b;\n+            concat = \"\" + l + d + \"S\" + b + z + z + f + c + z + c + c + c + c + d;\n+            concat = \"\" + z + d + l + \"S\" + i + s + b + b + d + s + s;\n+            concat = \"\" + f + i + d + S + f + f + i + s + d + S + c + l + d + s + c + i;\n+            concat = \"\" + f + c + i + \"S\" + \"S\" + c + f + b + l + i + s + c + i + S + S + i;\n+            concat = \"\" + z + S + z + d + d + S + \"S\" + f + d + s + s + \"S\" + l + z + l + c;\n+            concat = \"\" + b + c + s + f + S + l + b + f + \"S\" + l + \"S\" + c + c + z + b + b;\n+            concat = \"\" + c + b + z + s + d + l + l + S + l + \"S\" + f + S + c + f + s + f;\n+            concat = \"\" + z + z + d + i + z + s + z + S + f + S + \"S\" + \"S\" + l + d + c + d;\n+            concat = \"\" + c + S + s + f + c + i + b + l + S + c + l + f + f + l + i + l;\n+            concat = \"\" + \"S\" + i + f + d + s + S + S + l + s + S + l + \"S\" + b + l + s + l + d + d + f + S;\n+            concat = \"\" + l + z + c + l + f + f + d + s + l + b + d + f + S + S + \"S\" + i + i + s + f + i;\n+            concat = \"\" + S + S + l + S + z + d + s + c + \"S\" + d + f + d + f + f + z + i + f + l + S + s;\n+            concat = \"\" + z + d + z + l + f + s + d + z + i + S + S + d + i + z + c + i + i + f + b + \"S\";\n+            concat = \"\" + b + d + \"S\" + f + f + d + s + i + b + l + i + b + f + f + b + f + l + i + z + l;\n+            concat = \"\" + c + z + s + \"S\" + z + f + \"S\" + i + f + s + l + i + \"S\" + d + i + b + i + S + b + l;\n+            concat = \"\" + d + l + s + c + l + d + \"S\" + \"S\" + s + S + f + z + b + s + b + f + z + z + l + l;\n+            concat = \"\" + f + b + \"S\" + s + i + \"S\" + s + f + c + f + c + f + i + i + b + i + i + b + S + S;\n+            concat = \"\" + i + i + s + i + s + S + s + \"S\" + c + c + f + s + d + l + l + d + f + l + i + S;\n+            concat = \"\" + z + d + z + \"S\" + c + i + f + s + b + S + i + c + s + b + c + f + s + z + f + c;\n+            concat = \"\" + f + s + f + b + l + z + f + f + f + c + z + S + b + s + z + i + s + S + i + b;\n+            concat = \"\" + d + i + S + b + i + \"S\" + l + S + S + S + z + i + z + b;\n+            concat = \"\" + \"S\" + S + s + l + f + i + l + b + f + S + d + c + b + d;\n+            concat = \"\" + c + i + i + d + S + z + c + i + c + S + f + i + c + c;\n+            concat = \"\" + \"S\" + \"S\" + c + d + z + l + d + z + f + b + d + z + S + f;\n+            concat = \"\" + b + d + z + d + i + z + d + b + d + \"S\" + c + f + d;\n+            concat = \"\" + d + s + f + c + i + \"S\" + b + b + S + i + s + d + \"S\" + f;\n+            concat = \"\" + l + S + d + b + S + s + \"S\" + s + s + l + S + \"S\" + c + d;\n+            concat = \"\" + c + s + z + c + S + S + \"S\" + l + S + f + f + c + S + f;\n+            concat = \"\" + d + i + s + c + z + \"S\" + d + f + \"S\" + S + c + b + \"S\" + c;\n+            concat = \"\" + i + b + \"S\" + l + S + d + \"S\" + c + b + s + f + l + f + \"S\";\n+            concat = \"\" + c + b + f + \"S\" + S + s + i + l + s + z + z + f + l + b;\n+            concat = \"\" + S + s + \"S\" + d + s + z + \"S\" + i + i + z + S + b + f + i;\n+            concat = \"\" + z + S + S + \"S\" + S + S + z + b + S + z + b + f + s + l;\n+            concat = \"\" + s + z + d + \"S\" + z + l + f + z + s + z + d + l + s + l;\n+            concat = \"\" + l + d + i + s + i + c + i + f + b + f + s + b + s + s;\n+            concat = \"\" + z + \"S\" + S + \"S\" + \"S\" + i + \"S\" + s + d + z + l;\n+            concat = \"\" + i + S + S + \"S\" + f + \"S\" + \"S\" + z + S + z + b + z + c + b;\n+            concat = \"\" + i + f + f + d + z + f + z + b + \"S\" + c + l + l + z + s + S + s;\n+            concat = \"\" + b + b + z + \"S\" + f + s + \"S\" + l +c + S + i + i + b + \"S\" + S;\n+            concat = \"\" + i + \"S\" + d + d + d + \"S\" + f + \"S\" + b + s + S + i + \"S\" + d + b;\n+            concat = \"\" + s + f + b + d + c + d + c + S + S + b + i + b + z + c;\n+            concat = \"\" + l + l + S + l + f + s + i + c + z + f + d + l + f + b + l + f + f + i + i + z;\n+            concat = \"\" + l + l + l + l + s + s + f + i + i + f + z + c + S + s + f + \"S\" + \"S\" + s + z + s;\n+            concat = \"\" + S + z + f + b + l + c + i + l;\n+            concat = \"\" + c + z + b + f + i + i + f + d + f + f + d + d + l + d + S + \"S\" + i + c + b + f;\n+            concat = \"\" + s + d + S + d + b + l + l + f + b + \"S\" + i + z + b + S + S + c + S + f + S + z;\n+            concat = \"\" + l + S + S + i + l + s + d + f + z + i + \"S\" + b + f + c + z + c + S + c + i + s;\n+            concat = \"\" + l + S + S + s + f + S + s + \"S\" + c + c + c;\n+            concat = \"\" + s + \"S\" + c + d + z + c + l + c + z + S + i + f + c + c + s + \"S\" + S + z + s + \"S\";\n+            concat = \"\" + c + i + z + s + b + s + s + b + \"S\" + d + \"S\" + z + f + \"S\" + c + S + s + S + b + i;\n+            concat = \"\" + s + c + d + d + \"S\" + \"S\" + l + s + i + l + l + f + S + f + f + i + S + d + l + c;\n+            concat = \"\" + \"S\" + S + b + c + i + \"S\" + c + c + s + i + \"S\" + b + i + b + b + S + f + l + s + \"S\";\n+            concat = \"\" + l + l + b + f + i + i + f + z + c + S + b + f + z + \"S\" + s + z + \"S\" + f + S + s;\n+            concat = \"\" + i + c + b + i + b + z + \"S\" + i + c + i + l + \"S\" + z + b + b + i + i + c + i + f;\n+            concat = \"\" + \"S\" + c + d + z + d + f + c + c + b + \"S\" + l + f + d + \"S\" + s + s + S + i + s + i;\n+            concat = \"\" + S + \"S\" + d + c + \"S\" + S + \"S\" + b + f + z + \"S\" + l + d + f + \"S\" + S + d + b + c + c;\n+            concat = \"\" + f + S + l + s + l + z + S + d + S + b + f + c + s + b + \"S\" + z + \"S\" + \"S\" + b + z;\n+            concat = \"\" + f + s + c + i + S + b + s + S + i + S + c + b + s + d + i + \"S\" + s + l + c + s;\n+            concat = \"\" + l + f + s + b + d + b + i + c + c + b + s + f + i + z + s + i + s + \"S\" + l + z;\n+            concat = \"\" + d + z + z + c + b + b + s + b + S + l + d + i + S + d + \"S\" + i + S + i + b + S;\n+            concat = \"\" + c + d + \"S\" + f + i + b + d + c + z + f + \"S\" + i + d + b + f + s + \"S\" + c + S + i;\n+            concat = \"\" + i + z + \"S\" + b + S + s + c + s + f + S + S + f + z + s + b + d + z + i + s + z;\n+            concat = \"\" + z + s + z + l + \"S\" + S + s + \"S\" + i + b + c + s + l + l + s + i + c + i + i + d;\n+            concat = \"\" + \"S\" + b + l + z + c + f + l + S + \"S\" + l + i + z + z + l + S + \"S\" + z + S + z + c + \"S\";\n+            concat = \"\" + \"S\" + f + S + i + i + i + \"S\" + i + i + l + c + l + S + S + z + b + i + c + f + S;\n+            concat = \"\" + c + z + S + S + b + i + c;\n+            concat = \"\" + S + s + S + c;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatStartup.java","additions":354,"deletions":0,"binary":false,"changes":354,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.DateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class DateFormatterBench {\n+\n+    private Date date;\n+\n+    private Object objDate;\n+\n+    @Setup\n+    public void setup() {\n+        date = new Date();\n+        objDate = new Date();\n+    }\n+\n+    private DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.FULL, Locale.ENGLISH);\n+\n+    @Benchmark\n+    public String testFormatDate() {\n+        return dateFormat.format(date);\n+    }\n+\n+    @Benchmark\n+    public String testFormatObject() {\n+        return dateFormat.format(objDate);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(DateFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DateFormatterBench.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.ListFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class ListFormatterBench {\n+\n+    private List<String> data;\n+\n+    @Setup\n+    public void setup() {\n+        data = List.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"quuz\");\n+    }\n+\n+    private ListFormat listFormat = ListFormat.getInstance();\n+\n+    @Benchmark\n+    public String testListFormat() {\n+        return listFormat.format(data);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(ListFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/ListFormatterBench.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class MessageFormatterBench {\n+\n+    private Object[][] values;\n+\n+    @Setup\n+    public void setup() {\n+        values = new Object[][]{\n+                new Object[]{Integer.valueOf(13), \"MyDisk1\"},\n+                new Object[]{Float.valueOf(25.6f), \"MyDisk2\"},\n+                new Object[]{Double.valueOf(123.89), \"MyDisk3\"},\n+                new Object[]{Long.valueOf(1234567), \"MyDisk4\"},\n+        };\n+    }\n+\n+    private MessageFormat messageFormat = new MessageFormat(\"There is {0} GB of free space on the {1}.\", Locale.ENGLISH);\n+\n+    @Benchmark\n+    @OperationsPerInvocation(4)\n+    public void testMessageFormat(final Blackhole bh) {\n+        for (Object[] value : values) {\n+            bh.consume(messageFormat.format(value));\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(MessageFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/MessageFormatterBench.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n+\n+import java.util.Locale;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Thread)\n+public class ToStringBench {\n+    private static final Instant[] INSTANTS;\n+    private static final ZonedDateTime[] ZONED_DATE_TIMES;\n+    private static final LocalDateTime[] LOCAL_DATE_TIMES;\n+    private static final LocalDate[] LOCAL_DATES;\n+    private static final LocalTime[] LOCAL_TIMES;\n+\n+    static {\n+        Instant loInstant = Instant.EPOCH.plus(Duration.ofDays(365*50)); \/\/ 2020-01-01\n+        Instant hiInstant = loInstant.plus(Duration.ofDays(1));\n+        long maxOffsetNanos = Duration.between(loInstant, hiInstant).toNanos();\n+        Random random = new Random(0);\n+        INSTANTS = IntStream\n+                .range(0, 1_000)\n+                .mapToObj(ignored -> {\n+                    final long offsetNanos = (long) Math.floor(random.nextDouble() * maxOffsetNanos);\n+                    return loInstant.plus(offsetNanos, ChronoUnit.NANOS);\n+                })\n+                .toArray(Instant[]::new);\n+\n+        ZONED_DATE_TIMES = Stream.of(INSTANTS)\n+                .map(instant -> ZonedDateTime.ofInstant(instant, ZoneOffset.UTC))\n+                .toArray(ZonedDateTime[]::new);\n+\n+        LOCAL_DATE_TIMES = Stream.of(ZONED_DATE_TIMES)\n+                .map(zdt -> zdt.toLocalDateTime())\n+                .toArray(LocalDateTime[]::new);\n+\n+        LOCAL_DATES = Stream.of(LOCAL_DATE_TIMES)\n+                .map(ldt -> ldt.toLocalDate())\n+                .toArray(LocalDate[]::new);\n+\n+        LOCAL_TIMES = Stream.of(LOCAL_DATE_TIMES)\n+                .map(ldt -> ldt.toLocalTime())\n+                .toArray(LocalTime[]::new);\n+    }\n+\n+    @Benchmark\n+    public void zonedDateTimeToString(Blackhole bh) {\n+        for (final ZonedDateTime zonedDateTime : ZONED_DATE_TIMES) {\n+            bh.consume(zonedDateTime.toString());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void localDateTimeToString(Blackhole bh) {\n+        for (LocalDateTime localDateTime : LOCAL_DATE_TIMES) {\n+            bh.consume(localDateTime.toString());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void localDateToString(Blackhole bh) {\n+        for (LocalDate localDate : LOCAL_DATES) {\n+            bh.consume(localDate.toString());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void localTimeToString(Blackhole bh) {\n+        for (LocalTime localTime : LOCAL_TIMES) {\n+            bh.consume(localTime.toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/ToStringBench.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,1132 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.Field;\n+import java.nio.ByteOrder;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\"})\n+public class MergeStoreBench {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    final static VarHandle INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN);\n+    final static VarHandle INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN);\n+    final static VarHandle LONG_L = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN);\n+    final static VarHandle LONG_B = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN);\n+    final static VarHandle CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN);\n+    final static VarHandle CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n+\n+    final static int NUMBERS = 8192;\n+\n+    final byte[] bytes4 = new byte[NUMBERS * 4];\n+    final byte[] bytes8 = new byte[NUMBERS * 8];\n+    final int [] ints   = new int [NUMBERS    ];\n+    final long[] longs  = new long[NUMBERS    ];\n+    final char[] chars  = new char[NUMBERS    ];\n+\n+    @Setup\n+    public void setup() {\n+        Random r = new Random();\n+        for (int i = 0; i < ints.length; i++) {\n+            ints[i] = r.nextInt();\n+            INT_L.set(bytes4, i * 4, i);\n+        }\n+\n+        for (int i = 0; i < longs.length; i++) {\n+            longs[i] = r.nextLong();\n+            LONG_L.set(bytes8, i * 8, i);\n+        }\n+    }\n+\n+    \/*\n+     * The names of these cases have the following `B\/L\/V\/U` suffixes, which are:\n+     * ```\n+     * B BigEndian\n+     * L LittleEndian\n+     * V VarHandle\n+     * U Unsafe\n+     * R ReverseBytes\n+     * C Unsafe.getChar & putChar\n+     * S Unsafe.getShort & putShort\n+     * ```\n+     *\/\n+\n+    @Benchmark\n+    public void getIntB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_B.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_L.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += Integer.reverseBytes(\n+                    UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntB(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntBU(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntBV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            INT_B.set(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntL(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntLU(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            INT_L.set(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntRB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntRB(bytes4, i * 4, ints[i]);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntRBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntRBU(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntRL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntRL(bytes4, i * 4, ints[i]);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntRLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            setIntRLU(bytes4, i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntRU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            v = Integer.reverseBytes(v);\n+            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setIntU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            int v = ints[i];\n+            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_B.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_L.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += Long.reverseBytes(\n+                    UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongB(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongBU(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            LONG_B.set(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongL(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongLU(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            LONG_L.set(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongRB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongRB(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongRBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongRBU(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongRL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongRL(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongRLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            setLongRLU(bytes8, i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongRU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            v = Long.reverseBytes(v);\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setLongU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            long v = longs[i];\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8, v);\n+            sum += v;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharB(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharBU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharL(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+    @Benchmark\n+    public void getCharLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharLU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+\n+    @Benchmark\n+    public void getCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharBS(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            putShortB(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            CHAR_B.set(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharLS(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            putShortL(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            CHAR_L.set(bytes4, i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void setCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < chars.length; i++) {\n+            char c = chars[i];\n+            UNSAFE.putChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2, c);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    \/*\n+     * putChars4 Test whether four constant chars can be MergeStored\n+     *\n+     *\/\n+    @Benchmark\n+    public void putChars4B(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4B(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4BU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4BU(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4BV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4BV(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4L(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4L(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4LU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4LU(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4LV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4LV(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4C(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4C(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void putChars4S(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            putChars4S(bytes8, i * 4);\n+            sum += longs[i];\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    static int getIntB(byte[] array, int offset) {\n+        return ((array[offset    ] & 0xff) << 24)\n+             | ((array[offset + 1] & 0xff) << 16)\n+             | ((array[offset + 2] & 0xff) <<  8)\n+             | ((array[offset + 3] & 0xff)      );\n+    }\n+\n+    static int getIntBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff) << 24)\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff)      );\n+    }\n+\n+    static int getIntL(byte[] array, int offset) {\n+        return ((array[offset       ] & 0xff)      )\n+                | ((array[offset + 1] & 0xff) <<  8)\n+                | ((array[offset + 2] & 0xff) << 16)\n+                | ((array[offset + 3] & 0xff) << 24);\n+    }\n+\n+    static int getIntRB(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntB(array, offset));\n+    }\n+\n+    static int getIntRBU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntBU(array, offset));\n+    }\n+\n+    static int getIntRL(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntL(array, offset));\n+    }\n+\n+    static int getIntRLU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntLU(array, offset));\n+    }\n+\n+    static void setIntB(byte[] array, int offset, int value) {\n+        array[offset    ] = (byte) (value >> 24);\n+        array[offset + 1] = (byte) (value >> 16);\n+        array[offset + 2] = (byte) (value >>  8);\n+        array[offset + 3] = (byte) (value      );\n+    }\n+\n+    static void setIntBU(byte[] array, int offset, int value) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        UNSAFE.putByte(array, address    , (byte) (value >> 24));\n+        UNSAFE.putByte(array, address + 1, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 2, (byte) (value >>  8));\n+        UNSAFE.putByte(array, address + 3, (byte) (value      ));\n+    }\n+\n+    public static void setIntL(byte[] array, int offset, int value) {\n+        array[offset    ] = (byte)  value;\n+        array[offset + 1] = (byte) (value >> 8);\n+        array[offset + 2] = (byte) (value >> 16);\n+        array[offset + 3] = (byte) (value >> 24);\n+    }\n+\n+    public static void setIntLU(byte[] array, int offset, int value) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        UNSAFE.putByte(array, address    , (byte)  value       );\n+        UNSAFE.putByte(array, address + 1, (byte) (value >>  8));\n+        UNSAFE.putByte(array, address + 2, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 3, (byte) (value >> 24));\n+    }\n+\n+    public static void setIntRL(byte[] array, int offset, int value) {\n+        value = Integer.reverseBytes(value);\n+        setIntL(array, offset, value);\n+    }\n+\n+    public static void setIntRLU(byte[] array, int offset, int value) {\n+        value = Integer.reverseBytes(value);\n+        setIntLU(array, offset, value);\n+    }\n+\n+    public static void setIntRB(byte[] array, int offset, int value) {\n+        value = Integer.reverseBytes(value);\n+        setIntB(array, offset, value);\n+    }\n+\n+    public static void setIntRBU(byte[] array, int offset, int value) {\n+        value = Integer.reverseBytes(value);\n+        setIntBU(array, offset, value);\n+    }\n+\n+    static long getLongB(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff) << 56)\n+             | (((long) array[offset + 1] & 0xff) << 48)\n+             | (((long) array[offset + 2] & 0xff) << 40)\n+             | (((long) array[offset + 3] & 0xff) << 32)\n+             | (((long) array[offset + 4] & 0xff) << 24)\n+             | (((long) array[offset + 5] & 0xff) << 16)\n+             | (((long) array[offset + 6] & 0xff) << 8)\n+             | (((long) array[offset + 7] & 0xff)     );\n+    }\n+\n+    static long getLongBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address)     & 0xff)) << 56)\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff))      );\n+    }\n+\n+    public static long getLongL(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff)      )\n+             | (((long) array[offset + 1] & 0xff) <<  8)\n+             | (((long) array[offset + 2] & 0xff) << 16)\n+             | (((long) array[offset + 3] & 0xff) << 24)\n+             | (((long) array[offset + 4] & 0xff) << 32)\n+             | (((long) array[offset + 5] & 0xff) << 40)\n+             | (((long) array[offset + 6] & 0xff) << 48)\n+             | (((long) array[offset + 7] & 0xff) << 56);\n+    }\n+\n+    static long getLongLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address    ) & 0xff))      )\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff)) << 56);\n+    }\n+\n+    static long getLongRB(byte[] array, int offset) {\n+        return getLongB(array, offset);\n+    }\n+\n+    static long getLongRBU(byte[] array, int offset) {\n+        return getLongBU(array, offset);\n+    }\n+\n+    static long getLongRL(byte[] array, int offset) {\n+        return getLongL(array, offset);\n+    }\n+\n+    static long getLongRLU(byte[] array, int offset) {\n+        return getLongLU(array, offset);\n+    }\n+\n+    static void setLongB(byte[] array, int offset, long value) {\n+        array[offset]     = (byte) (value >> 56);\n+        array[offset + 1] = (byte) (value >> 48);\n+        array[offset + 2] = (byte) (value >> 40);\n+        array[offset + 3] = (byte) (value >> 32);\n+        array[offset + 4] = (byte) (value >> 24);\n+        array[offset + 5] = (byte) (value >> 16);\n+        array[offset + 6] = (byte) (value >>  8);\n+        array[offset + 7] = (byte) (value      );\n+    }\n+\n+    public static void setLongL(byte[] array, int offset, long value) {\n+        array[offset]     = (byte)  value       ;\n+        array[offset + 1] = (byte) (value >> 8 );\n+        array[offset + 2] = (byte) (value >> 16);\n+        array[offset + 3] = (byte) (value >> 24);\n+        array[offset + 4] = (byte) (value >> 32);\n+        array[offset + 5] = (byte) (value >> 40);\n+        array[offset + 6] = (byte) (value >> 48);\n+        array[offset + 7] = (byte) (value >> 56);\n+    }\n+\n+    public static void setLongRL(byte[] array, int offset, long value) {\n+        value = Long.reverseBytes(value);\n+        setLongL(array, offset, value);\n+    }\n+\n+    public static void setLongRLU(byte[] array, int offset, long value) {\n+        value = Long.reverseBytes(value);\n+        setLongLU(array, offset, value);\n+    }\n+\n+    public static void setLongRB(byte[] array, int offset, long value) {\n+        value = Long.reverseBytes(value);\n+        setLongB(array, offset, value);\n+    }\n+\n+    public static void setLongRBU(byte[] array, int offset, long value) {\n+        value = Long.reverseBytes(value);\n+        setLongBU(array, offset, value);\n+    }\n+\n+    public static void setLongBU(byte[] array, int offset, long value) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        UNSAFE.putByte(array, address    , (byte) (value >> 56));\n+        UNSAFE.putByte(array, address + 1, (byte) (value >> 48));\n+        UNSAFE.putByte(array, address + 2, (byte) (value >> 40));\n+        UNSAFE.putByte(array, address + 3, (byte) (value >> 32));\n+        UNSAFE.putByte(array, address + 4, (byte) (value >> 24));\n+        UNSAFE.putByte(array, address + 5, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 6, (byte) (value >>  8));\n+        UNSAFE.putByte(array, address + 7, (byte)  value       );\n+    }\n+\n+    public static void setLongLU(byte[] array, int offset, long value) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        UNSAFE.putByte(array, address    , (byte)  value       );\n+        UNSAFE.putByte(array, address + 1, (byte) (value >>  8));\n+        UNSAFE.putByte(array, address + 2, (byte) (value >> 16));\n+        UNSAFE.putByte(array, address + 3, (byte) (value >> 24));\n+        UNSAFE.putByte(array, address + 4, (byte) (value >> 32));\n+        UNSAFE.putByte(array, address + 5, (byte) (value >> 40));\n+        UNSAFE.putByte(array, address + 6, (byte) (value >> 48));\n+        UNSAFE.putByte(array, address + 7, (byte) (value >> 56));\n+    }\n+\n+    public static int getIntLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff)      )\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff) << 24);\n+    }\n+\n+    public static char getCharB(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff) << 8)\n+                    | ((val[index + 1] & 0xff)));\n+    }\n+\n+    public static char getCharBR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharB(val, index));\n+    }\n+\n+    public static char getCharL(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff))\n+                    | ((val[index + 1] & 0xff) << 8));\n+    }\n+\n+    public static char getCharLR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharL(val, index));\n+    }\n+\n+    public static char getCharBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n+    }\n+\n+    public static char getCharLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n+    }\n+\n+    public void putChars4B(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortB(bytes, offset    , c0);\n+        putShortB(bytes, offset + 1, c1);\n+        putShortB(bytes, offset + 2, c2);\n+        putShortB(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4BU(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortBU(bytes, offset    , c0);\n+        putShortBU(bytes, offset + 1, c1);\n+        putShortBU(bytes, offset + 2, c2);\n+        putShortBU(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4BV(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        CHAR_B.set(bytes, offset    , c0);\n+        CHAR_B.set(bytes, offset + 2, c1);\n+        CHAR_B.set(bytes, offset + 4, c2);\n+        CHAR_B.set(bytes, offset + 6, c3);\n+    }\n+\n+    public void putChars4L(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortL(bytes, offset    , c0);\n+        putShortL(bytes, offset + 1, c1);\n+        putShortL(bytes, offset + 2, c2);\n+        putShortL(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4LV(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        offset <<= 1;\n+        CHAR_L.set(bytes, offset    , c0);\n+        CHAR_L.set(bytes, offset + 2, c1);\n+        CHAR_L.set(bytes, offset + 4, c2);\n+        CHAR_L.set(bytes, offset + 6, c3);\n+    }\n+\n+    public void putChars4LU(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        putShortLU(bytes, offset    , c0);\n+        putShortLU(bytes, offset + 1, c1);\n+        putShortLU(bytes, offset + 2, c2);\n+        putShortLU(bytes, offset + 3, c3);\n+    }\n+\n+    public void putChars4C(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        UNSAFE.putChar(bytes, address    , c0);\n+        UNSAFE.putChar(bytes, address + 2, c1);\n+        UNSAFE.putChar(bytes, address + 4, c2);\n+        UNSAFE.putChar(bytes, address + 6, c3);\n+    }\n+\n+    public void putChars4S(byte[] bytes, int offset) {\n+        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        UNSAFE.putShort(bytes, address    , (short) c0);\n+        UNSAFE.putShort(bytes, address + 2, (short) c1);\n+        UNSAFE.putShort(bytes, address + 4, (short) c2);\n+        UNSAFE.putShort(bytes, address + 6, (short) c3);\n+    }\n+\n+    private static void putShortB(byte[] val, int index, int c) {\n+        index <<= 1;\n+        val[index    ] = (byte)(c >> 8);\n+        val[index + 1] = (byte)(c     );\n+    }\n+\n+    public static void putShortBU(byte[] array, int offset, int c) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        UNSAFE.putByte(array, address    , (byte) (c >>  8));\n+        UNSAFE.putByte(array, address + 1, (byte) (c      ));\n+    }\n+\n+    private static void putShortL(byte[] val, int index, int c) {\n+        index <<= 1;\n+        val[index    ] = (byte)(c     );\n+        val[index + 1] = (byte)(c >> 8);\n+    }\n+\n+    public static void putShortLU(byte[] array, int offset, int c) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        UNSAFE.putByte(array, address    , (byte) (c     ));\n+        UNSAFE.putByte(array, address + 1, (byte) (c >> 8));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":1132,"deletions":0,"binary":false,"changes":1132,"status":"added"}]}