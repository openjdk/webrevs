{"files":[{"patch":"@@ -1169,0 +1169,9 @@\n+\n+        @Override\n+        public void visitErroneous(JCErroneous tree) {\n+            if (tree.errs != null) {\n+                for (JCTree err : tree.errs) {\n+                    scan(err);\n+                }\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -5258,0 +5258,2 @@\n+\n+        annotate.flush();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8270139 8273039 8286895\n+ * @bug 8270139 8273039 8286895 8332230\n@@ -68,0 +68,8 @@\n+\n+    \/\/JDK-8332230:\n+    public void testAnnotationsd() {\n+        assertEval(\"k=aa:a.@a\",\n+                   DiagCheck.DIAG_ERROR,\n+                   DiagCheck.DIAG_IGNORE,\n+                   ste(MAIN_SNIPPET, NONEXISTENT, REJECTED, false, null));\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ErrorRecoveryTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8332230\n+ * @summary Verify that the last type in the last method has correct type annotations\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main QueuesAreFlushed\n+*\/\n+\n+import com.sun.source.tree.AnnotatedTypeTree;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskEvent.Kind;\n+import com.sun.source.util.TaskListener;\n+import com.sun.source.util.TreePathScanner;\n+import com.sun.source.util.Trees;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.type.TypeMirror;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class QueuesAreFlushed extends TestRunner {\n+\n+    private ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new QueuesAreFlushed().runTests();\n+    }\n+\n+    QueuesAreFlushed() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testTypeAnnotations(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          package test;\n+                          import java.lang.annotation.ElementType;\n+                          import java.lang.annotation.Target;\n+\n+                          public class Test {\n+                              @Target(ElementType.TYPE_USE)\n+                              @interface Ann {}\n+\n+                              public static void main(Object o) {\n+                                  boolean b;\n+                                  b = o instanceof @Ann String;\n+                              }\n+\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        AtomicBoolean seenAnnotationMirror = new AtomicBoolean();\n+\n+        new JavacTask(tb)\n+            .outdir(classes)\n+            .callback(task -> {\n+                task.addTaskListener(new TaskListener() {\n+                    @Override\n+                    public void finished(TaskEvent e) {\n+                        if (e.getKind() != Kind.ANALYZE) {\n+                            return ;\n+                        }\n+                        new TreePathScanner<Void, Void>() {\n+                            @Override\n+                            public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+                                TypeMirror type = Trees.instance(task).getTypeMirror(getCurrentPath());\n+                                List<? extends AnnotationMirror> ams = type.getAnnotationMirrors();\n+                                if (ams.size() != 1) {\n+                                    throw new AssertionError(\"Expected a single annotation, but got: \" + ams);\n+                                }\n+                                String expectedMirror = \"@test.Test.Ann\";\n+                                String actualMirror = ams.get(0).toString();\n+                                if (!Objects.equals(expectedMirror, actualMirror)) {\n+                                    throw new AssertionError(\"Expected: \" + expectedMirror +\n+                                                             \", but got: \" + actualMirror);\n+                                }\n+\n+                                seenAnnotationMirror.set(true);\n+\n+                                return super.visitAnnotatedType(node, p);\n+                            }\n+                        }.scan(e.getCompilationUnit(), null);\n+                    }\n+                });\n+            })\n+            .files(tb.findJavaFiles(src))\n+            .run(Task.Expect.SUCCESS)\n+            .writeAll();\n+\n+        if (!seenAnnotationMirror.get()) {\n+            throw new AssertionError(\"Didn't see the AnnotatedTypeTree!\");\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/QueuesAreFlushed.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8301580 8322159\n+ * @bug 8301580 8322159 8332230\n@@ -127,0 +127,33 @@\n+    @Test \/\/JDK-8332230\n+    public void testAnnotationsInErroneousTree1() throws Exception {\n+        String code = \"\"\"\n+                      package p;\n+                      public class C {\n+                          static int v;\n+                          public void t() {\n+                              \/\/not a statement expression,\n+                              \/\/will be wrapped in an erroneous tree:\n+                              p.@Ann C.v;\n+                          }\n+                          @interface Ann {}\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\", \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"C.java:7:17: compiler.err.not.stmt\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}