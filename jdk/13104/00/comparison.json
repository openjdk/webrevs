{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.function.Function;\n@@ -185,2 +186,1 @@\n-        return getMetadata(TypeMetadata.ConstantValue.class)\n-                .map(ConstantValue::value).orElse(null);\n+        return getMetadata(TypeMetadata.ConstantValue.class, ConstantValue::value, null);\n@@ -364,5 +364,17 @@\n-    public <M extends TypeMetadata> Optional<M> getMetadata(Class<M> metadataClass) {\n-        return metadata.stream()\n-                .filter(m -> metadataClass.isAssignableFrom(m.getClass()))\n-                .map(metadataClass::cast)\n-                .findFirst();\n+    @SuppressWarnings(\"unchecked\")\n+    public <M extends TypeMetadata> M getMetadata(Class<M> metadataClass) {\n+        return getMetadata(metadataClass, Function.identity(), null);\n+    }\n+\n+    \/**\n+     * Get the type metadata of the given kind associated with this type (if any),\n+     * and apply the provided mapping function.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public <M extends TypeMetadata, Z> Z getMetadata(Class<M> metadataClass, Function<M, Z> metadataFunc, Z defaultValue) {\n+        for (TypeMetadata m : metadata) {\n+            if (m.getClass() == metadataClass) {\n+                return metadataFunc.apply((M)m);\n+            }\n+        }\n+        return defaultValue;\n@@ -377,2 +389,2 @@\n-        Assert.check(getMetadata(md.getClass()).isEmpty());\n-        return cloneWithMetadata(metadata.append(md));\n+        Assert.check(getMetadata(md.getClass()) == null);\n+        return cloneWithMetadata(metadata.prepend(md));\n@@ -385,3 +397,6 @@\n-        List<TypeMetadata> newMetadata = metadata.stream()\n-                .filter(m -> !metadataClass.isAssignableFrom(m.getClass()))\n-                .collect(List.collector());\n+        List<TypeMetadata> newMetadata = List.nil();\n+        for (TypeMetadata m : metadata) {\n+            if (m.getClass() != metadataClass) {\n+                newMetadata = newMetadata.prepend(m);\n+            }\n+        }\n@@ -445,1 +460,1 @@\n-        return getMetadata(TypeMetadata.Annotations.class).isPresent();\n+        return getMetadata(TypeMetadata.Annotations.class) != null;\n@@ -450,2 +465,1 @@\n-        return getMetadata(TypeMetadata.Annotations.class)\n-                .map(Annotations::annotations).orElse(List.nil());\n+        return getMetadata(TypeMetadata.Annotations.class, Annotations::annotations, List.nil());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1053,1 +1053,2 @@\n-            Annotations metadata = storeAt.getMetadata(Annotations.class).orElseThrow(AssertionError::new);\n+            Annotations metadata = storeAt.getMetadata(Annotations.class);\n+            Assert.checkNonNull(metadata);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}