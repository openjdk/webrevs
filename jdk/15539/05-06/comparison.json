{"files":[{"patch":"@@ -1522,1 +1522,1 @@\n-# This filter can be used to configure which services, implemented by installed\n+# This filter can be used to constrain which services, implemented by installed\n@@ -1596,3 +1596,3 @@\n-# In addition to characters escaping, pattern names can contain '*' wildcards to imply\n-# zero or more repetitions of any character. Wildcards behave in greedy mode, trying to\n-# consume as many characters as possible and backing off if necessary.\n+# In addition to character escape sequences, pattern names can contain '*' wildcards to\n+# imply zero or more repetitions of any character. Wildcards behave in greedy mode, trying\n+# to consume as many characters as possible and backing off if necessary.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,3 +32,2 @@\n-import java.security.Provider;\n-import java.security.Security;\n-import java.security.Signature;\n+import java.security.*;\n+import java.security.cert.*;\n@@ -36,3 +35,17 @@\n-import javax.crypto.Cipher;\n-import javax.crypto.KeyGenerator;\n-import javax.crypto.Mac;\n+import javax.crypto.*;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.login.Configuration;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslServer;\n+import javax.smartcardio.TerminalFactory;\n+import javax.xml.crypto.dsig.Transform;\n+import javax.xml.crypto.dsig.TransformService;\n+import javax.xml.crypto.dsig.XMLSignatureFactory;\n+import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\n@@ -81,1 +94,1 @@\n-    private interface CryptoChecker {\n+    private interface ServiceChecker {\n@@ -86,1 +99,1 @@\n-    private interface CryptoOp {\n+    private interface ServiceOp {\n@@ -90,1 +103,1 @@\n-    private static boolean cryptoCheck(CryptoOp cryptoOp) {\n+    private static boolean serviceCheck(ServiceOp serviceOp) {\n@@ -92,1 +105,1 @@\n-            cryptoOp.doOp();\n+            serviceOp.doOp();\n@@ -102,1 +115,1 @@\n-    private static final Map<String, CryptoChecker> cryptoCheckers =\n+    private static final Map<String, ServiceChecker> serviceCheckers =\n@@ -106,1 +119,35 @@\n-        cryptoCheckers.put(\"Cipher\", (ServiceData d) -> cryptoCheck(\n+        serviceCheckers.put(\"AlgorithmParameterGenerator\", (ServiceData d) ->\n+                serviceCheck(() -> AlgorithmParameterGenerator\n+                        .getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"AlgorithmParameters\",\n+                (ServiceData d) -> serviceCheck(() -> AlgorithmParameters\n+                        .getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"CertificateFactory\", (ServiceData d) ->\n+                serviceCheck(() ->\n+                        CertificateFactory.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"CertPathBuilder\", (ServiceData d) -> serviceCheck(\n+                () -> CertPathBuilder.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"CertPathValidator\", (ServiceData d) ->\n+                serviceCheck(() ->\n+                        CertPathValidator.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"CertStore\", (ServiceData d) -> serviceCheck(\n+                () -> {\n+                    if (d.svcAlgo.equals(\"Collection\")) {\n+                        CertStore.getInstance(d.svcAlgo,\n+                                new CollectionCertStoreParameters(),\n+                                d.provider);\n+                    } else {\n+                        try {\n+                            CertStore.getInstance(d.svcAlgo,\n+                                    new LDAPCertStoreParameters(),\n+                                    d.provider);\n+                        } catch (InvalidAlgorithmParameterException ignored) {\n+                            \/\/ The InitialDirContext could not be created as\n+                            \/\/ there is not a server in localhost but this is\n+                            \/\/ an indication that the service is available:\n+                            \/\/ NoSuchAlgorithmException would have been thrown\n+                            \/\/ otherwise.\n+                        }\n+                    }\n+                }));\n+        serviceCheckers.put(\"Cipher\", (ServiceData d) -> serviceCheck(\n@@ -108,1 +155,22 @@\n-        cryptoCheckers.put(\"Mac\", (ServiceData d) -> cryptoCheck(\n+        serviceCheckers.put(\"Configuration\", (ServiceData d) ->\n+                serviceCheck(() -> Configuration\n+                        .getInstance(d.svcAlgo, null, d.provider)));\n+        serviceCheckers.put(\"KEM\", (ServiceData d) -> serviceCheck(\n+                () -> KEM.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyAgreement\", (ServiceData d) -> serviceCheck(\n+                () -> KeyAgreement.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyFactory\", (ServiceData d) -> serviceCheck(\n+                () -> KeyFactory.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyGenerator\", (ServiceData d) -> serviceCheck(\n+                () -> KeyGenerator.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyInfoFactory\", (ServiceData d) ->\n+                serviceCheck(() -> KeyInfoFactory\n+                        .getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyManagerFactory\", (ServiceData d) ->\n+                serviceCheck(() ->\n+                        KeyManagerFactory.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyPairGenerator\", (ServiceData d) -> serviceCheck(\n+                () -> KeyPairGenerator.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"KeyStore\", (ServiceData d) -> serviceCheck(\n+                () -> KeyStore.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"Mac\", (ServiceData d) -> serviceCheck(\n@@ -110,1 +178,36 @@\n-        cryptoCheckers.put(\"Signature\", (ServiceData d) -> cryptoCheck(\n+        serviceCheckers.put(\"MessageDigest\", (ServiceData d) -> serviceCheck(\n+                () -> MessageDigest.getInstance(d.svcAlgo, d.provider)));\n+        final CallbackHandler saslCallbackHandler = callbacks -> {\n+            for (Callback cb : callbacks) {\n+                if (cb instanceof PasswordCallback) {\n+                    ((PasswordCallback) cb).setPassword(\n+                            \"password\".toCharArray());\n+                } else if (cb instanceof NameCallback) {\n+                    ((NameCallback) cb).setName(\"username\");\n+                }\n+            }\n+        };\n+        serviceCheckers.put(\"SaslClientFactory\", (ServiceData d) ->\n+                serviceCheck(() -> {\n+                    SaslClient c = Sasl.createSaslClient(\n+                            new String[] { d.svcAlgo }, \"username\",\n+                            \"ldap\", \"server1\", Collections.emptyMap(),\n+                            saslCallbackHandler);\n+                    if (c == null) {\n+                        throw new NoSuchAlgorithmException();\n+                    }\n+                }));\n+        serviceCheckers.put(\"SaslServerFactory\", (ServiceData d) ->\n+                serviceCheck(() -> {\n+                    SaslServer s = Sasl.createSaslServer(\n+                            d.svcAlgo, \"ldap\", \"server1\",\n+                            Collections.emptyMap(), saslCallbackHandler);\n+                    if (s == null) {\n+                        throw new NoSuchAlgorithmException();\n+                    }\n+                }));\n+        serviceCheckers.put(\"SecretKeyFactory\", (ServiceData d) -> serviceCheck(\n+                () -> SecretKeyFactory.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"SecureRandom\", (ServiceData d) -> serviceCheck(\n+                () -> SecureRandom.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"Signature\", (ServiceData d) -> serviceCheck(\n@@ -112,4 +215,16 @@\n-        cryptoCheckers.put(\"KeyGenerator\", (ServiceData d) -> cryptoCheck(\n-                () -> KeyGenerator.getInstance(d.svcAlgo, d.provider)));\n-        cryptoCheckers.put(TEST_SERVICE_TYPE,\n-                (ServiceData d) -> cryptoCheck(() -> GetInstance.getInstance(\n+        serviceCheckers.put(\"SSLContext\", (ServiceData d) -> serviceCheck(\n+                () -> SSLContext.getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"TerminalFactory\", (ServiceData d) ->\n+                serviceCheck(() -> TerminalFactory\n+                        .getInstance(d.svcAlgo, null, d.provider)));\n+        serviceCheckers.put(\"TransformService\", (ServiceData d) ->\n+                serviceCheck(() -> TransformService\n+                        .getInstance(d.svcAlgo, \"DOM\", d.provider)));\n+        serviceCheckers.put(\"TrustManagerFactory\", (ServiceData d) ->\n+                serviceCheck(() -> TrustManagerFactory\n+                        .getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(\"XMLSignatureFactory\", (ServiceData d) ->\n+                serviceCheck(() -> XMLSignatureFactory\n+                        .getInstance(d.svcAlgo, d.provider)));\n+        serviceCheckers.put(TEST_SERVICE_TYPE,\n+                (ServiceData d) -> serviceCheck(() -> GetInstance.getInstance(\n@@ -271,1 +386,1 @@\n-            if (!cryptoCheckers.get(svcData.svcType).check(svcData)) {\n+            if (!serviceCheckers.get(svcData.svcType).check(svcData)) {\n@@ -580,1 +695,1 @@\n-            CryptoChecker checker = cryptoCheckers.get(svcData.svcType);\n+            ServiceChecker checker = serviceCheckers.get(svcData.svcType);\n@@ -598,0 +713,5 @@\n+                if (filter.indexOf(':') != -1) {\n+                    \/\/ Character not supported for algorithms in\n+                    \/\/ Security::getProviders.\n+                    continue;\n+                }\n@@ -685,0 +805,1 @@\n+        t.addNotExpectedService(\"SunJCE\", \"Cipher\", \"AES\/\/\");\n@@ -691,0 +812,78 @@\n+    private static void testAllServiceTypesFiltering(TestExecutor t)\n+            throws Throwable {\n+        t.setFilter(\"*.AlgorithmParameterGenerator.DiffieHellman; \" +\n+                \"*.AlgorithmParameters.PBES2;\" +\n+                \"*.CertStore.Collection; \" +\n+                \"*.KeyAgreement.ECDH; \" +\n+                \"*.KeyFactory.DiffieHellman; \" +\n+                \"*.KeyGenerator.HmacSHA3-512; \" +\n+                \"*.KeyManagerFactory.NewSunX509; \" +\n+                \"*.KeyPairGenerator.DiffieHellman; \" +\n+                \"*.KeyStore.PKCS12; \" +\n+                \"*.Mac.HmacSHA512; \" +\n+                \"*.MessageDigest.SHA-512; \" +\n+                \"*.SaslClientFactory.EXTERNAL; \" +\n+                \"*.SaslServerFactory.CRAM-MD5; \" +\n+                \"*.SecretKeyFactory.PBEWithHmacSHA512\/256AndAES_256; \" +\n+                \"*.SecureRandom.SHA1PRNG; *.MessageDigest.SHA-1; \" +\n+                \"*.Signature.EdDSA; \" +\n+                \"*.SSLContext.TLSv1\\\\.3; \" +\n+                \"*.TransformService.\" +\n+                Transform.XPATH.replace(\".\", \"\\\\.\").replace(\":\", \"\\\\:\") + \"; \" +\n+                \"*.TrustManagerFactory.PKIX\");\n+\n+        \/\/ Expected services\n+        t.addExpectedService(\"SunJCE\", \"AlgorithmParameterGenerator\",\n+                \"DiffieHellman\");\n+        t.addExpectedService(\"SunJCE\", \"AlgorithmParameters\", \"PBES2\");\n+        t.addExpectedService(\"SUN\", \"CertStore\", \"Collection\");\n+        t.addExpectedService(\"SunEC\", \"KeyAgreement\", \"ECDH\");\n+        t.addExpectedService(\"SunJCE\", \"KeyFactory\", \"DiffieHellman\");\n+        t.addExpectedService(\"SunJCE\", \"KeyGenerator\", \"HmacSHA3-512\");\n+        t.addExpectedService(\"SunJSSE\", \"KeyManagerFactory\", \"NewSunX509\");\n+        t.addExpectedService(\"SunJCE\", \"KeyPairGenerator\", \"DiffieHellman\");\n+        t.addExpectedService(\"SunJSSE\", \"KeyStore\", \"PKCS12\");\n+        t.addExpectedService(\"SunJCE\", \"Mac\", \"HmacSHA512\");\n+        t.addExpectedService(\"SUN\", \"MessageDigest\", \"SHA-512\");\n+        t.addExpectedService(\"SunSASL\", \"SaslClientFactory\", \"EXTERNAL\");\n+        t.addExpectedService(\"SunSASL\", \"SaslServerFactory\", \"CRAM-MD5\");\n+        t.addExpectedService(\"SunJCE\", \"SecretKeyFactory\",\n+                \"PBEWithHmacSHA512\/256AndAES_256\");\n+        t.addExpectedService(\"SUN\", \"SecureRandom\", \"SHA1PRNG\");\n+        t.addExpectedService(\"SunEC\", \"Signature\", \"EdDSA\");\n+        t.addExpectedService(\"SunJSSE\", \"SSLContext\", \"TLSv1.3\");\n+        t.addExpectedService(\"XMLDSig\", \"TransformService\",\n+                Transform.XPATH);\n+        t.addExpectedService(\"SunJSSE\", \"TrustManagerFactory\", \"PKIX\");\n+\n+        \/\/ Not expected services\n+        t.addNotExpectedService(\"SUN\", \"AlgorithmParameterGenerator\", \"DSA\");\n+        t.addNotExpectedService(\"SUN\", \"AlgorithmParameters\", \"DSA\");\n+        t.addNotExpectedService(\"SUN\", \"CertificateFactory\", \"X.509\");\n+        t.addNotExpectedService(\"SUN\", \"CertPathBuilder\", \"PKIX\");\n+        t.addNotExpectedService(\"SUN\", \"CertPathValidator\", \"PKIX\");\n+        t.addNotExpectedService(\"JdkLDAP\", \"CertStore\", \"LDAP\");\n+        t.addNotExpectedService(\"SUN\", \"Configuration\", \"JavaLoginConfig\");\n+        t.addNotExpectedService(\"SunJCE\", \"KEM\", \"DHKEM\");\n+        t.addNotExpectedService(\"SunEC\", \"KeyAgreement\", \"X25519\");\n+        t.addNotExpectedService(\"SUN\", \"KeyFactory\", \"DSA\");\n+        t.addNotExpectedService(\"SunJCE\", \"KeyGenerator\", \"Blowfish\");\n+        t.addNotExpectedService(\"XMLDSig\", \"KeyInfoFactory\", \"DOM\");\n+        t.addNotExpectedService(\"SunJSSE\", \"KeyManagerFactory\", \"SunX509\");\n+        t.addNotExpectedService(\"SUN\", \"KeyPairGenerator\", \"DSA\");\n+        t.addNotExpectedService(\"SUN\", \"KeyStore\", \"JKS\");\n+        t.addNotExpectedService(\"SunJCE\", \"Mac\", \"HmacSHA1\");\n+        t.addNotExpectedService(\"SUN\", \"MessageDigest\", \"MD5\");\n+        t.addNotExpectedService(\"SunSASL\", \"SaslClientFactory\", \"PLAIN\");\n+        t.addNotExpectedService(\"SunSASL\", \"SaslServerFactory\", \"DIGEST-MD5\");\n+        t.addNotExpectedService(\"SunJCE\", \"SecretKeyFactory\", \"DES\");\n+        t.addNotExpectedService(\"SUN\", \"SecureRandom\", \"DRBG\");\n+        t.addNotExpectedService(\"SUN\", \"Signature\", \"SHA1withDSA\");\n+        t.addNotExpectedService(\"SunJSSE\", \"SSLContext\", \"TLSv1.2\");\n+        t.addNotExpectedService(\"SunPCSC\", \"TerminalFactory\", \"PC\/SC\");\n+        t.addNotExpectedService(\"XMLDSig\", \"TransformService\",\n+                Transform.ENVELOPED);\n+        t.addNotExpectedService(\"SunJSSE\", \"TrustManagerFactory\", \"SunX509\");\n+        t.addNotExpectedService(\"XMLDSig\", \"XMLSignatureFactory\", \"DOM\");\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/provider\/ProvidersFilterTest.java","additions":219,"deletions":20,"binary":false,"changes":239,"status":"modified"}]}