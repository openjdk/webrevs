{"files":[{"patch":"@@ -181,1 +181,3 @@\n-     * us to avoid recalculating this.\n+     * us to avoid recalculating this. This field is _not_ annotated @Stable as\n+     * the `hashCode()` method reads the field `hash` first anyhow and if `hash`\n+     * is the default zero value, is not trusted.\n@@ -183,1 +185,0 @@\n-    @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Performance test of String.hashCode() function with constant folding.\n+ * The tests are using a Map that holds a MethodHandle to better expose\n+ * any potential lack of constant folding.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class StringHashCodeStatic {\n+\n+    private static final String HASHCODE = \"abcdefghijkl\";\n+    private static final String HASHCODE_0 = new String(new char[]{72, 90, 100, 89, 105, 2, 72, 90, 100, 89, 105, 2});\n+    private static final String EMPTY = new String();\n+\n+    private static final Map<String, MethodHandle> MAP = Map.of(\n+            HASHCODE, mh(HASHCODE.hashCode()),\n+            HASHCODE_0, mh(HASHCODE_0.hashCode()),\n+            EMPTY, mh(EMPTY.hashCode()));\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with a regular 12 char string with\n+     * the result possibly cached in String\n+     *\/\n+    @Benchmark\n+    public int nonZero() throws Throwable {\n+        return (int)MAP.get(HASHCODE).invokeExact();\n+    }\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with a 12 char string with the\n+     * hashcode = 0.\n+     *\/\n+    @Benchmark\n+    public int zero() throws Throwable {\n+        return (int)MAP.get(HASHCODE_0).invokeExact();\n+    }\n+\n+    \/**\n+     * Benchmark testing String.hashCode() with the empty string. an\n+     * empty String has hashCode = 0.\n+     *\/\n+    @Benchmark\n+    public int empty() throws Throwable {\n+        return (int)MAP.get(EMPTY).invokeExact();\n+    }\n+\n+    static MethodHandle mh(int value) {\n+        return MethodHandles.constant(int.class, value);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCodeStatic.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}