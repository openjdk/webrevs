{"files":[{"patch":"@@ -288,1 +288,1 @@\n-  if (UseCompressedOops && FLAG_IS_ERGO(MaxHeapSize) && (value > (max_uintx - MaxHeapSize))) {\n+  if (value > (max_uintx - MaxHeapSize)) {\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-          size <= (uintptr_t)(upper_bound - reserved.base())) {\n+          size <= (size_t)(upper_bound - reserved.base())) {\n@@ -549,2 +549,2 @@\n-  char* aligned_heap_base_min_address = align_up((char*)HeapBaseMinAddress, alignment);\n-  size_t noaccess_prefix = ((aligned_heap_base_min_address + size) > (char*)OopEncodingHeapMax) ?\n+  uintptr_t aligned_heap_base_min_address = align_up(MAX2(HeapBaseMinAddress, alignment), alignment);\n+  size_t noaccess_prefix = ((aligned_heap_base_min_address + size) > OopEncodingHeapMax) ?\n@@ -557,2 +557,2 @@\n-    reserved = try_reserve_memory(size + noaccess_prefix, alignment, page_size, aligned_heap_base_min_address);\n-    if (reserved.base() != aligned_heap_base_min_address) { \/\/ Enforce this exact address.\n+    reserved = try_reserve_memory(size + noaccess_prefix, alignment, page_size, (char*)aligned_heap_base_min_address);\n+    if (reserved.base() != (char*)aligned_heap_base_min_address) { \/\/ Enforce this exact address.\n@@ -578,1 +578,1 @@\n-    if (aligned_heap_base_min_address + size <= (char *)UnscaledOopHeapMax) {\n+    if (aligned_heap_base_min_address + size <= UnscaledOopHeapMax) {\n@@ -581,4 +581,6 @@\n-      char* const highest_start = align_down((char *)UnscaledOopHeapMax - size, attach_point_alignment);\n-      char* const lowest_start  = align_up(aligned_heap_base_min_address, attach_point_alignment);\n-      reserved = try_reserve_range(highest_start, lowest_start, attach_point_alignment,\n-                                   aligned_heap_base_min_address, (char *)UnscaledOopHeapMax, size, alignment, page_size);\n+      uintptr_t const highest_start = align_down(UnscaledOopHeapMax - size, attach_point_alignment);\n+      uintptr_t const lowest_start  = align_up(aligned_heap_base_min_address, attach_point_alignment);\n+      assert(lowest_start <= highest_start, \"lowest: \" INTPTR_FORMAT \" highest: \" INTPTR_FORMAT ,\n+                                          lowest_start, highest_start);\n+      reserved = try_reserve_range((char*)highest_start, (char*)lowest_start, attach_point_alignment,\n+                                   (char*)aligned_heap_base_min_address, (char*)UnscaledOopHeapMax, size, alignment, page_size);\n@@ -588,1 +590,1 @@\n-    char *zerobased_max = (char *)OopEncodingHeapMax;\n+    size_t zerobased_max = OopEncodingHeapMax;\n@@ -593,1 +595,1 @@\n-         (reserved.end() > zerobased_max))) {                    \/\/ Unscaled delivered an arbitrary address.\n+         (reserved.end() > (char*)zerobased_max))) {             \/\/ Unscaled delivered an arbitrary address.\n@@ -599,1 +601,1 @@\n-      char *const highest_start = align_down(zerobased_max - size, attach_point_alignment);\n+      uintptr_t const highest_start = align_down(zerobased_max - size, attach_point_alignment);\n@@ -602,4 +604,3 @@\n-      char *lowest_start = aligned_heap_base_min_address;\n-      uint64_t unscaled_end = UnscaledOopHeapMax - size;\n-      if (unscaled_end < UnscaledOopHeapMax) { \/\/ unscaled_end wrapped if size is large\n-        lowest_start = MAX2(lowest_start, (char*)unscaled_end);\n+      uintptr_t lowest_start = aligned_heap_base_min_address;\n+      if (size < UnscaledOopHeapMax) {\n+        lowest_start = MAX2<uintptr_t>(lowest_start, UnscaledOopHeapMax - size);\n@@ -608,2 +609,4 @@\n-      reserved = try_reserve_range(highest_start, lowest_start, attach_point_alignment,\n-                                   aligned_heap_base_min_address, zerobased_max, size, alignment, page_size);\n+      assert(lowest_start <= highest_start, \"lowest: \" INTPTR_FORMAT \" highest: \" INTPTR_FORMAT,\n+                                          lowest_start, highest_start);\n+      reserved = try_reserve_range((char*)highest_start, (char*)lowest_start, attach_point_alignment,\n+                                   (char*)aligned_heap_base_min_address, (char*)zerobased_max, size, alignment, page_size);\n@@ -619,4 +622,4 @@\n-    while ((addresses[i] != nullptr) &&       \/\/ End of array not yet reached.\n-           ((!reserved.is_reserved()) ||      \/\/ No previous try succeeded.\n-           (reserved.end() > zerobased_max && \/\/ Not zerobased or unscaled address.\n-                                              \/\/ Not disjoint address.\n+    while ((addresses[i] != nullptr) &&              \/\/ End of array not yet reached.\n+           ((!reserved.is_reserved()) ||             \/\/ No previous try succeeded.\n+           (reserved.end() > (char*)zerobased_max && \/\/ Not zerobased or unscaled address.\n+                                                     \/\/ Not disjoint address.\n@@ -629,1 +632,1 @@\n-      assert(attach_point >= aligned_heap_base_min_address, \"Flag support broken\");\n+      assert((uintptr_t)attach_point >= aligned_heap_base_min_address, \"Flag support broken\");\n","filename":"src\/hotspot\/share\/memory\/memoryReserver.cpp","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1584,2 +1584,2 @@\n-      size_t heap_end = HeapBaseMinAddress + MaxHeapSize;\n-      size_t max_coop_heap = max_heap_for_compressed_oops();\n+      uintptr_t heap_end = HeapBaseMinAddress + MaxHeapSize;\n+      uintptr_t max_coop_heap = max_heap_for_compressed_oops();\n@@ -1602,1 +1602,1 @@\n-                            reasonable_max, max_coop_heap, MaxRAMPercentage);\n+                            reasonable_max, (size_t)max_coop_heap, MaxRAMPercentage);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}