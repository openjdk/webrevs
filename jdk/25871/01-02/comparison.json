{"files":[{"patch":"@@ -43,1 +43,3 @@\n- * contained in the runtime image.\n+ * contained in the runtime image. See section \"New URI scheme for naming stored\n+ * modules, classes, and resources\" in <a href=\"https:\/\/openjdk.org\/jeps\/220\">\n+ * JEP 220<\/a>.\n@@ -47,1 +49,1 @@\n-    \/\/ ImageReader to access resources in jimage (never null).\n+    \/\/ ImageReader to access resources in jimage.\n@@ -50,7 +52,1 @@\n-    \/\/ The module and resource name in the URL (\"jrt:\/<module-name>\/<resource-name>\").\n-    \/\/\n-    \/\/ It is important to note that all of this information comes from the given\n-    \/\/ URL's path part, and there's no requirement for there to be distinct rules\n-    \/\/ about percent encoding, and it is likely that any differences between how\n-    \/\/ module names and resource names are treated is unintentional. The rules\n-    \/\/ about percent encoding may well be tightened up in the future.\n+    \/\/ The module and resource name in the URL (i.e. \"jrt:\/[$MODULE[\/$PATH]]\").\n@@ -61,1 +57,1 @@\n-    private final String name;\n+    private final String path;\n@@ -64,1 +60,1 @@\n-    private volatile Node resource;\n+    private volatile Node resourceNode;\n@@ -68,2 +64,0 @@\n-        \/\/ TODO: Allow percent encoding in module names.\n-        \/\/ TODO: Consider rejecting URLs with fragments, queries or authority.\n@@ -77,2 +71,1 @@\n-            \/\/ resource, but might be useful as a representation to pass around.\n-            \/\/ The module name *can* be empty here (e.g. \"jrt:\/\") but not null.\n+            \/\/ resource (see JEP 220 for details).\n@@ -80,1 +73,1 @@\n-            this.name = null;\n+            this.path = null;\n@@ -83,1 +76,1 @@\n-            this.name = percentDecode(urlPath.substring(pathSep + 1));\n+            this.path = percentDecode(urlPath.substring(pathSep + 1));\n@@ -92,2 +85,2 @@\n-        if (resource == null) {\n-            if (name == null) {\n+        if (resourceNode == null) {\n+            if (path == null) {\n@@ -96,1 +89,1 @@\n-            Node node = READER.findNode(\"\/modules\/\" + module + \"\/\" + name);\n+            Node node = READER.findNode(\"\/modules\/\" + module + \"\/\" + path);\n@@ -98,1 +91,1 @@\n-                throw new IOException(module + \"\/\" + name + \" not found\");\n+                throw new IOException(module + \"\/\" + path + \" not found\");\n@@ -100,1 +93,1 @@\n-            this.resource = node;\n+            this.resourceNode = node;\n@@ -103,1 +96,1 @@\n-        return resource;\n+        return resourceNode;\n@@ -137,2 +130,0 @@\n-        \/\/ TODO: Maybe reject over-encoded paths here to reduce obfuscation\n-        \/\/  (especially %2F (\/) and %24 ($), but probably just all ASCII).\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"}]}