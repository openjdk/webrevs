{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.io.UncheckedIOException;\n@@ -59,2 +60,2 @@\n-    \/\/ The resource node (when connected).\n-    private volatile Node resourceNode;\n+    \/\/ The resource node (non-null when connected).\n+    private Node resourceNode;\n@@ -84,1 +85,1 @@\n-    private synchronized Node getResourceNode() throws IOException {\n+    private synchronized Node connectResourceNode() throws IOException {\n@@ -86,1 +87,1 @@\n-            if (path == null) {\n+            if (module.isEmpty() || path == null) {\n@@ -101,1 +102,1 @@\n-        getResourceNode();\n+        connectResourceNode();\n@@ -106,1 +107,1 @@\n-        return new ByteArrayInputStream(READER.getResource(getResourceNode()));\n+        return new ByteArrayInputStream(READER.getResource(connectResourceNode()));\n@@ -111,0 +112,2 @@\n+        \/\/ Note: UncheckedIOException is thrown by the Node subclass in\n+        \/\/ ExplodedImage (this not obvious, so worth calling out).\n@@ -112,2 +115,2 @@\n-            return getResourceNode().size();\n-        } catch (IOException ioe) {\n+            return connectResourceNode().size();\n+        } catch (IOException | UncheckedIOException ioe) {\n@@ -126,4 +129,1 @@\n-        if (path.indexOf('%') == -1) {\n-            \/\/ Nothing to decode (overwhelmingly common case).\n-            return path;\n-        }\n+        \/\/ Any additional special case decoding logic should go here.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+                {\"jrt:\/\", false},\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jrt\/Basic.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}