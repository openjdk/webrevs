{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import jdk.internal.jimage.ImageLocation;\n@@ -36,0 +35,1 @@\n+import jdk.internal.jimage.ImageReader.Node;\n@@ -38,1 +38,0 @@\n-import jdk.internal.loader.Resource;\n@@ -48,4 +47,12 @@\n-    \/\/ ImageReader to access resources in jimage\n-    private static final ImageReader reader = ImageReaderFactory.getImageReader();\n-\n-    \/\/ the module and resource name in the URL\n+    \/\/ ImageReader to access resources in jimage (never null).\n+    private static final ImageReader READER = ImageReaderFactory.getImageReader();\n+\n+    \/\/ The module and resource name in the URL (\"jrt:\/<module-name>\/<resource-name>\").\n+    \/\/\n+    \/\/ It is important to note that all of this information comes from the given\n+    \/\/ URL's path part, and there's no requirement for there to be distinct rules\n+    \/\/ about percent encoding, and it is likely that any differences between how\n+    \/\/ module names and resource names are treated is unintentional. The rules\n+    \/\/ about percent encoding may well be tightened up in the future.\n+    \/\/\n+    \/\/ The module name is not percent-decoded, and can be empty.\n@@ -53,0 +60,1 @@\n+    \/\/ The resource name permits UTF-8 percent encoding of non-ASCII characters.\n@@ -55,2 +63,2 @@\n-    \/\/ the Resource when connected\n-    private volatile Resource resource;\n+    \/\/ The resource node (when connected).\n+    private volatile Node resource;\n@@ -60,2 +68,4 @@\n-        String path = url.getPath();\n-        if (path.isEmpty() || path.charAt(0) != '\/')\n+        \/\/ TODO: Allow percent encoding in module names.\n+        \/\/ TODO: Consider rejecting URLs with fragments, queries or authority.\n+        String urlPath = url.getPath();\n+        if (urlPath.isEmpty() || urlPath.charAt(0) != '\/') {\n@@ -63,2 +73,7 @@\n-        if (path.length() == 1) {\n-            this.module = null;\n+        }\n+        int pathSep = urlPath.indexOf('\/', 1);\n+        if (pathSep == -1) {\n+            \/\/ No trailing resource path. This can never \"connect\" or return a\n+            \/\/ resource, but might be useful as a representation to pass around.\n+            \/\/ The module name *can* be empty here (e.g. \"jrt:\/\") but not null.\n+            this.module = urlPath.substring(1);\n@@ -67,8 +82,2 @@\n-            int pos = path.indexOf('\/', 1);\n-            if (pos == -1) {\n-                this.module = path.substring(1);\n-                this.name = null;\n-            } else {\n-                this.module = path.substring(1, pos);\n-                this.name = ParseUtil.decode(path.substring(pos+1));\n-            }\n+            this.module = urlPath.substring(1, pathSep);\n+            this.name = percentDecode(urlPath.substring(pathSep + 1));\n@@ -79,2 +88,2 @@\n-     * Finds a resource in a module, returning {@code null} if the resource\n-     * is not found.\n+     * Finds and caches the resource node associated with this URL and marks the\n+     * connection as \"connected\".\n@@ -82,29 +91,4 @@\n-    private static Resource findResource(String module, String name) {\n-        if (reader != null) {\n-            URL url = toJrtURL(module, name);\n-            ImageLocation location = reader.findLocation(module, name);\n-            if (location != null) {\n-                return new Resource() {\n-                    @Override\n-                    public String getName() {\n-                        return name;\n-                    }\n-                    @Override\n-                    public URL getURL() {\n-                        return url;\n-                    }\n-                    @Override\n-                    public URL getCodeSourceURL() {\n-                        return toJrtURL(module);\n-                    }\n-                    @Override\n-                    public InputStream getInputStream() throws IOException {\n-                        byte[] resource = reader.getResource(location);\n-                        return new ByteArrayInputStream(resource);\n-                    }\n-                    @Override\n-                    public int getContentLength() {\n-                        long size = location.getUncompressedSize();\n-                        return (size > Integer.MAX_VALUE) ? -1 : (int) size;\n-                    }\n-                };\n+    private synchronized Node getResourceNode() throws IOException {\n+        if (resource == null) {\n+            if (name == null) {\n+                throw new IOException(\"cannot connect to jrt:\/\" + module);\n@@ -112,0 +96,6 @@\n+            Node node = READER.findNode(\"\/modules\/\" + module + \"\/\" + name);\n+            if (node == null || !node.isResource()) {\n+                throw new IOException(module + \"\/\" + name + \" not found\");\n+            }\n+            this.resource = node;\n+            super.connected = true;\n@@ -113,1 +103,1 @@\n-        return null;\n+        return resource;\n@@ -117,11 +107,2 @@\n-    public synchronized void connect() throws IOException {\n-        if (!connected) {\n-            if (name == null) {\n-                String s = (module == null) ? \"\" : module;\n-                throw new IOException(\"cannot connect to jrt:\/\" + s);\n-            }\n-            resource = findResource(module, name);\n-            if (resource == null)\n-                throw new IOException(module + \"\/\" + name + \" not found\");\n-            connected = true;\n-        }\n+    public void connect() throws IOException {\n+        getResourceNode();\n@@ -132,2 +113,1 @@\n-        connect();\n-        return resource.getInputStream();\n+        return new ByteArrayInputStream(READER.getResource(getResourceNode()));\n@@ -139,2 +119,1 @@\n-            connect();\n-            return resource.getContentLength();\n+            return getResourceNode().size();\n@@ -152,9 +131,5 @@\n-    \/**\n-     * Returns a jrt URL for the given module and resource name.\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    private static URL toJrtURL(String module, String name) {\n-        try {\n-            return new URL(\"jrt:\/\" + module + \"\/\" + name);\n-        } catch (MalformedURLException e) {\n-            throw new InternalError(e);\n+    \/\/ Perform percent decoding of the resource name\/path from the URL.\n+    private static String percentDecode(String path) throws MalformedURLException {\n+        if (path.indexOf('%') == -1) {\n+            \/\/ Nothing to decode (overwhelmingly common case).\n+            return path;\n@@ -162,7 +137,2 @@\n-    }\n-\n-    \/**\n-     * Returns a jrt URL for the given module.\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    private static URL toJrtURL(String module) {\n+        \/\/ TODO: Maybe reject over-encoded paths here to reduce obfuscation\n+        \/\/  (especially %2F (\/) and %24 ($), but probably just all ASCII).\n@@ -170,3 +140,3 @@\n-            return new URL(\"jrt:\/\" + module);\n-        } catch (MalformedURLException e) {\n-            throw new InternalError(e);\n+            return ParseUtil.decode(path);\n+        } catch (IllegalArgumentException e) {\n+            throw new MalformedURLException(e.getMessage());\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":57,"deletions":87,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.io.InputStream;\n@@ -44,2 +43,22 @@\n-            { \"jrt:\/java.base\/java\/lang\/Object.class\",    true },\n-            { \"jrt:\/java.desktop\/java\/lang\/Object.class\", false },\n+                {\"jrt:\/java.base\/java\/lang\/Object.class\", true},\n+                \/\/ Valid resource with and without percent-encoding.\n+                {\"jrt:\/java.base\/java\/lang\/Runtime$Version.class\", true},\n+                {\"jrt:\/java.base\/java%2Flang%2FRuntime%24Version.class\", true},\n+                \/\/ Unnecessary percent encoding (just Object again).\n+                {\"jrt:\/java.base\/%6a%61%76%61%2f%6c%61%6e%67%2f%4f%62%6a%65%63%74%2e%63%6c%61%73%73\", true},\n+                \/\/ Query parameters and fragments are silently ignored.\n+                {\"jrt:\/java.base\/java\/lang\/Object.class?yes=no\", true},\n+                {\"jrt:\/java.base\/java\/lang\/Object.class#anchor\", true},\n+\n+                \/\/ Missing resource (no such class).\n+                {\"jrt:\/java.base\/java\/lang\/NoSuchClass.class\", false},\n+                \/\/ Missing resource (wrong module).\n+                {\"jrt:\/java.desktop\/java\/lang\/Object.class\", false},\n+                \/\/ Entries in jimage which don't reference resources.\n+                {\"jrt:\/modules\/java.base\/java\/lang\", false},\n+                {\"jrt:\/packages\/java.lang\", false},\n+                \/\/ Invalid (incomplete\/corrupt) URIs.\n+                {\"jrt:\/java.base\", false},\n+                {\"jrt:\/java.base\/\", false},\n+                \/\/ Cannot escape anything in the module name.\n+                {\"jrt:\/java%2Ebase\/java\/lang\/Object.class\", false},\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jrt\/Basic.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"}]}