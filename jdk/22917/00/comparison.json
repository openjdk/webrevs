{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -669,1 +669,1 @@\n-\/\/ Make a vector node for binary operation\n+\/\/ Make a vector node for unary or binary operation\n@@ -750,0 +750,3 @@\n+  case Op_LShiftCntV: return new LShiftCntVNode(n1, vt);\n+  case Op_RShiftCntV: return new RShiftCntVNode(n1, vt);\n+\n@@ -769,0 +772,12 @@\n+  case Op_VectorCastB2X:  return new VectorCastB2XNode(n1, vt);\n+  case Op_VectorCastS2X:  return new VectorCastS2XNode(n1, vt);\n+  case Op_VectorCastI2X:  return new VectorCastI2XNode(n1, vt);\n+  case Op_VectorCastL2X:  return new VectorCastL2XNode(n1, vt);\n+  case Op_VectorCastF2X:  return new VectorCastF2XNode(n1, vt);\n+  case Op_VectorCastD2X:  return new VectorCastD2XNode(n1, vt);\n+  case Op_VectorUCastB2X: return new VectorUCastB2XNode(n1, vt);\n+  case Op_VectorUCastS2X: return new VectorUCastS2XNode(n1, vt);\n+  case Op_VectorUCastI2X: return new VectorUCastI2XNode(n1, vt);\n+  case Op_VectorCastHF2F: return new VectorCastHF2FNode(n1, vt);\n+  case Op_VectorCastF2HF: return new VectorCastF2HFNode(n1, vt);\n+\n@@ -794,0 +809,1 @@\n+  case Op_VectorBlend: return new VectorBlendNode(n1, n2, n3);\n@@ -821,1 +837,1 @@\n-  \/\/ Match shift count type with shift vector type.\n+  int vopc = VectorNode::shift_count_opcode(opc);\n@@ -823,0 +839,4 @@\n+  return VectorNode::make(vopc, cnt, nullptr, vt);\n+}\n+\n+int VectorNode::shift_count_opcode(int opc) {\n@@ -826,1 +846,1 @@\n-    return new LShiftCntVNode(cnt, vt);\n+    return Op_LShiftCntV;\n@@ -833,1 +853,1 @@\n-    return new RShiftCntVNode(cnt, vt);\n+    return Op_RShiftCntV;\n@@ -835,2 +855,2 @@\n-    fatal(\"Missed vector creation for '%s'\", NodeClassNames[opc]);\n-    return nullptr;\n+    fatal(\"Node class '%s' is not supported for shift count\", NodeClassNames[opc]);\n+    return -1;\n@@ -1415,1 +1435,1 @@\n-VectorCastNode* VectorCastNode::make(int vopc, Node* n1, BasicType bt, uint vlen) {\n+VectorNode* VectorCastNode::make(int vopc, Node* n1, BasicType bt, uint vlen) {\n@@ -1417,16 +1437,1 @@\n-  switch (vopc) {\n-    case Op_VectorCastB2X:  return new VectorCastB2XNode(n1, vt);\n-    case Op_VectorCastS2X:  return new VectorCastS2XNode(n1, vt);\n-    case Op_VectorCastI2X:  return new VectorCastI2XNode(n1, vt);\n-    case Op_VectorCastL2X:  return new VectorCastL2XNode(n1, vt);\n-    case Op_VectorCastF2X:  return new VectorCastF2XNode(n1, vt);\n-    case Op_VectorCastD2X:  return new VectorCastD2XNode(n1, vt);\n-    case Op_VectorUCastB2X: return new VectorUCastB2XNode(n1, vt);\n-    case Op_VectorUCastS2X: return new VectorUCastS2XNode(n1, vt);\n-    case Op_VectorUCastI2X: return new VectorUCastI2XNode(n1, vt);\n-    case Op_VectorCastHF2F: return new VectorCastHF2FNode(n1, vt);\n-    case Op_VectorCastF2HF: return new VectorCastF2HFNode(n1, vt);\n-    default:\n-      assert(false, \"unknown node: %s\", NodeClassNames[vopc]);\n-      return nullptr;\n-  }\n+  return VectorNode::make(vopc, n1, nullptr, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,2 @@\n+  static int shift_count_opcode(int opc);\n+\n@@ -1767,1 +1769,1 @@\n-  static VectorCastNode* make(int vopc, Node* n1, BasicType bt, uint vlen);\n+  static VectorNode* make(int vopc, Node* n1, BasicType bt, uint vlen);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}