[{"commit":{"message":"JDK-8329190: DatagramChannel.receive should throw ClosedChannelException when called on closed channel - changes to ensure that a ClosedChannelException is consistently thrown when after a DatagramChannel has been closed via an asynchronous closed, or via interruption of calling thread. Thus, a DatagramChannel::receive call may throw an AsynchronousCloseException when another thread has closed the DatagramChannel, and it may throw a ClosedByInterruptException if its calling thread has been interrupted. In such scenario, a subsequent receive call on the DatagramChannel instance should result in a ClosedChannelException being thrown. The proposed changes (provided by Alan Bateman) strive to ensure that a ClosedChannelException is consistently thrown. The changes elevate the ensureOpen() method call, checking that the channel is open, to very early in the processing call flow of the read\/write send\/receive methods, in a number of Channel classes."},"files":[{"filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ServerSocketChannelImpl.java"},{"filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java"},{"filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SinkChannelImpl.java"},{"filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/SourceChannelImpl.java"},{"filename":"test\/jdk\/java\/nio\/channels\/Channels\/ClosedNetworkChannels.java"}],"sha":"7d0ff667a9d7fcec7616174cdf93e366c0a85c53"}]