{"files":[{"patch":"@@ -75,2 +75,2 @@\n-        ConstantPool constantPool = SharedSecrets.getJavaLangAccess().\n-                getConstantPool(aClass);\n+\n+        \/\/ Initialize all constant pool entries, if requested.\n@@ -78,0 +78,1 @@\n+            ConstantPool constantPool = SharedSecrets.getJavaLangAccess().getConstantPool(aClass);\n@@ -80,0 +81,2 @@\n+\n+        \/\/ Make sure the class is initialized.\n@@ -82,0 +85,11 @@\n+\n+        \/\/ Populate profile for all methods to expand the scope of\n+        \/\/ compiler optimizations. Do this before compilations start.\n+        for (Executable e : aClass.getDeclaredConstructors()) {\n+            WHITE_BOX.markMethodProfiled(e);\n+        }\n+        for (Executable e : aClass.getDeclaredMethods()) {\n+            WHITE_BOX.markMethodProfiled(e);\n+        }\n+\n+        \/\/ Now schedule the compilations.\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/Compiler.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+                \"-XX:+UnlockExperimentalVMOptions\",\n@@ -302,0 +303,5 @@\n+                \/\/ CTW does not have good execution profile info, which would uncommon-trap\n+                \/\/ a lot of branches\/calls that are presumed to be never executed.\n+                \/\/ Expand the optimization scope by disallowing most traps.\n+                \"-XX:PerMethodTrapLimit=0\",\n+                \"-XX:PerMethodSpecTrapLimit=0\",\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}