{"files":[{"patch":"@@ -233,1 +233,1 @@\n-      MutexLocker notifier(thread, task->lock());\n+      MutexLocker notifier(thread, CompileTaskWait_lock);\n@@ -247,1 +247,1 @@\n-        task->lock()->notify_all();\n+        CompileTaskWait_lock->notify_all();\n@@ -370,1 +370,1 @@\n-      MutexLocker ct_lock(current->lock());\n+      MutexLocker ct_lock(CompileTaskWait_lock);\n@@ -375,1 +375,1 @@\n-        current->lock()->notify();\n+        CompileTaskWait_lock->notify_all();\n@@ -1633,1 +1633,1 @@\n-  MonitorLocker ml(thread, task->lock());\n+  MonitorLocker ml(thread, CompileTaskWait_lock);\n@@ -1701,1 +1701,1 @@\n-    MonitorLocker ml(thread, task->lock());\n+    MonitorLocker ml(thread, CompileTaskWait_lock);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-    assert(!task->lock()->is_locked(), \"Should not be locked when freed\");\n@@ -93,2 +92,0 @@\n-  assert(!_lock->is_locked(), \"bad locking\");\n-\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -84,1 +85,0 @@\n-  Monitor*             _lock;\n@@ -117,5 +117,1 @@\n-  CompileTask() : _failure_reason(nullptr), _failure_reason_on_C_heap(false) {\n-    \/\/ May hold MethodCompileQueue_lock\n-    _lock = new Monitor(Mutex::safepoint-1, \"CompileTask_lock\");\n-  }\n-\n+  CompileTask() : _failure_reason(nullptr), _failure_reason_on_C_heap(false) {}\n@@ -173,2 +169,0 @@\n-  Monitor*     lock() const                      { return _lock; }\n-\n@@ -177,1 +171,1 @@\n-    assert(_lock->owned_by_self(), \"must have lock to use waiting_for_completion_count()\");\n+    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use waiting_for_completion_count()\");\n@@ -182,1 +176,1 @@\n-    assert(_lock->owned_by_self(), \"must have lock to use inc_waiting_for_completion()\");\n+    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use inc_waiting_for_completion()\");\n@@ -187,1 +181,1 @@\n-    assert(_lock->owned_by_self(), \"must have lock to use dec_waiting_for_completion()\");\n+    assert(CompileTaskWait_lock->owned_by_self(), \"must have lock to use dec_waiting_for_completion()\");\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+Monitor* CompileTaskWait_lock         = nullptr;\n@@ -343,1 +344,3 @@\n-  MUTEX_DEFL(CompileTaskAlloc_lock          , PaddedMutex  ,  MethodCompileQueue_lock);\n+  MUTEX_DEFL(CompileTaskAlloc_lock          , PaddedMutex  , MethodCompileQueue_lock);\n+  MUTEX_DEFL(CompileTaskWait_lock           , PaddedMonitor, MethodCompileQueue_lock);\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+extern Monitor* CompileTaskWait_lock;            \/\/ a lock held when CompileTasks are waited\/notified\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}