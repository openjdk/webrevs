{"files":[{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8333456\n- * @summary Ensure that integer only parsing against a string with no suffix\n- *          does not unexpectedly fail and throw a StringIndexOutOfBoundsException\n- * @run junit IntegerOnlyParseWithNoSuffixTest\n- *\/\n-\n-import java.text.NumberFormat;\n-import java.text.ParseException;\n-import java.text.ParsePosition;\n-import java.util.Locale;\n-import java.util.stream.Stream;\n-\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-public class IntegerOnlyParseWithNoSuffixTest {\n-\n-    \/\/ basic compact number format\n-    private static final NumberFormat fmt =\n-            NumberFormat.getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\n-\n-    static {\n-        fmt.setParseIntegerOnly(true);\n-        fmt.setGroupingUsed(true);\n-    }\n-\n-    \/\/ Parse values with no compact suffix -> which allows parsing to iterate\n-    \/\/ position to the same value as string length which throws\n-    \/\/ StringIndexOutOfBoundsException upon charAt invocation\n-    @ParameterizedTest\n-    @MethodSource\n-    public void intOnlyNoSuffixParseTest(String toParse) throws ParseException {\n-        \/\/ Test both public API parse methods\n-        fmt.parse(toParse);\n-        fmt.parse(toParse, new ParsePosition(0));\n-    }\n-\n-    \/\/ No compact suffixes\n-    private static Stream<String> intOnlyNoSuffixParseTest() {\n-        return Stream.of(\"5\", \"50\", \"50.\", \"5,000\", \/\/ fail before change\n-                \"5,000.\", \"5,000.00\"); \/\/ Sanity check -> Do not fail before change\n-    }\n-}\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/IntegerOnlyParseWithNoSuffixTest.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8327640 8331485\n+ * @bug 8327640 8331485 8333456\n@@ -212,0 +212,12 @@\n+    \/\/ 8333456: Parse values with no compact suffix -> which allows parsing to iterate\n+    \/\/ position to the same value as string length which throws\n+    \/\/ StringIndexOutOfBoundsException upon charAt invocation\n+    @ParameterizedTest\n+    @MethodSource(\"compactValidNoSuffixParseStrings\")\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void compactFmtSuccessParseIntOnlyTest(String toParse, double expectedValue) {\n+        cmpctFmt.setParseIntegerOnly(true);\n+        assertEquals(expectedValue, successParse(cmpctFmt, toParse, toParse.length()));\n+        cmpctFmt.setParseIntegerOnly(false);\n+    }\n+\n@@ -410,0 +422,12 @@\n+    \/\/ No compact suffixes\n+    private static Stream<Arguments> compactValidNoSuffixParseStrings() {\n+        return Stream.of(\n+                Arguments.of(\"5\", 5),\n+                Arguments.of(\"50\", 50),\n+                Arguments.of(\"50.\", 50),\n+                Arguments.of(\"5,000\", 5000),\n+                Arguments.of(\"5,000.\", 5000),\n+                Arguments.of(\"5,000.00\", 5000)\n+        );\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientParseTest.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}