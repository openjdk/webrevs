{"files":[{"patch":"@@ -74,1 +74,0 @@\n-import jdk.javadoc.doclet.DocletEnvironment;\n@@ -190,1 +189,1 @@\n-    private com.sun.tools.javac.util.List<JCCompilationUnit> classTreeList = null;\n+    private com.sun.tools.javac.util.List<JCCompilationUnit> compilationUnitList = null;\n@@ -355,2 +354,2 @@\n-    ElementsTable classTrees(com.sun.tools.javac.util.List<JCCompilationUnit> classTrees) {\n-        this.classTreeList = classTrees;\n+    ElementsTable compilationUnits(com.sun.tools.javac.util.List<JCCompilationUnit> compilationUnits) {\n+        this.compilationUnitList = compilationUnits;\n@@ -440,0 +439,19 @@\n+        \/\/ scan any module-info.java files specified on the command line\n+        for (var cu : compilationUnitList) {\n+            loop:\n+            for (var d : cu.defs) {\n+                switch (d.getTag()) {\n+                    case IMPORT -> { }\n+                    case MODULEDEF -> {\n+                        var md = (JCModuleDecl) d;\n+                        var mn = md.qualId.toString();\n+                        ModuleSymbol msym = syms.enterModule(names.fromString(mn));\n+                        specifiedModuleElements.add(msym);\n+                    }\n+                    default -> {\n+                        break loop;\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -443,1 +461,1 @@\n-        this.modules.initModules(this.classTreeList);\n+        this.modules.initModules(this.compilationUnitList);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-        ListBuffer<JCCompilationUnit> classTrees = new ListBuffer<>();\n+        ListBuffer<JCCompilationUnit> compilationUnits = new ListBuffer<>();\n@@ -164,1 +164,1 @@\n-                    parse(fm.getJavaFileObjects(arg), classTrees, true);\n+                    parse(fm.getJavaFileObjects(arg), compilationUnits, true);\n@@ -182,1 +182,1 @@\n-            parse(fileObjects, classTrees, true);\n+            parse(fileObjects, compilationUnits, true);\n@@ -185,1 +185,1 @@\n-                    .classTrees(classTrees.toList())\n+                    .compilationUnits(compilationUnits.toList())\n@@ -195,1 +195,1 @@\n-            allTrees.addAll(classTrees);\n+            allTrees.addAll(compilationUnits);\n@@ -212,1 +212,1 @@\n-            etable.setClassDeclList(listClasses(classTrees.toList()));\n+            etable.setClassDeclList(listClasses(compilationUnits.toList()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/JavadocTool.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322865\n+ * @summary JavaDoc fails on aggregator modules\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.api\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @library ..\/..\/lib \/tools\/lib\n+ * @build toolbox.ToolBox toolbox.ModuleBuilder javadoc.tester.*\n+ * @run main TestAggregatorModule\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.*;\n+\n+public class TestAggregatorModule extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        new TestAggregatorModule().runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testSimple_1(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path api = base.resolve(\"api\");\n+\n+        tb.writeJavaFiles(src,\n+                \"\/** Module m. *\/ module m { requires java.se; }\");\n+\n+        javadoc(\"-d\", api.toString(),\n+                \"-sourcepath\", src.toString(), \/\/ override default sourcepath set by JavadocTester\n+                src.resolve(\"module-info.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        checkOutput(Output.OUT, false,\n+                \"No public\");\n+        checkFiles(true,\n+                \"m\/module-summary.html\");\n+    }\n+\n+    \/*\n+     * This is a variant of testSimple_1 that uses JavadocTask instead of direct use\n+     * of JavadocTester.javadoc, to avoid setting any value for the source path.\n+     * In other words, test:  `javadoc -d api path\/to\/module-info.java`\n+     *\/\n+    @Test\n+    public void testSimple_2(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path api = base.resolve(\"api\");\n+        Files.createDirectories(api);\n+\n+        tb.writeJavaFiles(src,\n+                \"\/** Module m. *\/ module m { requires java.se; }\");\n+\n+        var outputLines = new JavadocTask(tb)\n+                .outdir(api)\n+                .files(src.resolve(\"module-info.java\"))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        out.println(\"Checking for error message\");\n+        if (outputLines.stream().anyMatch(l -> l.contains(\"No public\"))) {\n+            throw new Exception(\"unexpected error message\");\n+        }\n+\n+        out.println(\"Checking for generated file\");\n+        if (!Files.exists(api.resolve(\"m\").resolve(\"module-summary.html\"))) {\n+            throw new Exception(\"expected file not found\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModules\/TestAggregatorModule.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}