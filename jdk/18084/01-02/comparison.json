{"files":[{"patch":"@@ -55,3 +55,0 @@\n-    private static final HexFormat HEX_FORMATTER =\n-            HexFormat.of().withUpperCase();\n-\n@@ -76,0 +73,4 @@\n+                \/\/ \"all\" option has special handling for decorator options\n+                \/\/ If the thread or timestamp decorator option is detected\n+                \/\/ with the \"all\" option, then it impacts decorator options\n+                \/\/ for other categories\n@@ -79,2 +80,2 @@\n-                threadInfoAll = args.substring(beginIndex, commaIndex).contains(\"+thread\");;\n-                timeStampInfoAll = args.substring(beginIndex, commaIndex).contains(\"+timestamp\");;\n+                threadInfoAll = args.substring(beginIndex, commaIndex).contains(\"+thread\");\n+                timeStampInfoAll = args.substring(beginIndex, commaIndex).contains(\"+timestamp\");\n@@ -115,0 +116,5 @@\n+        System.err.println(\"+timestamp can be appended to any of above options to print\");\n+        System.err.println(\"              a timestamp for that debug option\");\n+        System.err.println(\"+thread can be appended to any of above options to print\");\n+        System.err.println(\"              thread and caller information for that debug option\");\n+        System.err.println();\n@@ -122,5 +128,0 @@\n-        System.err.println(\"+timestamp can be appended to any of above options to print\");\n-        System.err.println(\"              a timestamp for that debug option\");\n-        System.err.println(\"+thread can be appended to any of above options to print\");\n-        System.err.println(\"              thread information for that debug option\");\n-        System.err.println();\n@@ -177,9 +178,1 @@\n-            d.prefix = prefix;\n-            d.printThreadDetails = getConfigInfo(option, \"+thread\");\n-            d.printDateTime = getConfigInfo(option, \"+timestamp\");\n-            if (d.printDateTime && !dateTimeFormatInitialized) {\n-                \/\/ trigger loading of Locale service impl now to avoid\n-                \/\/ possible bootstrap recursive class load issue\n-                FormatHolder.DATE_TIME_FORMATTER.format(Instant.now());\n-                dateTimeFormatInitialized = true;\n-            }\n+            d.configureOptions(option, prefix, false);\n@@ -192,0 +185,12 @@\n+    private void configureOptions(String option, String prefix, boolean ofInstance){\n+        this.prefix = prefix;\n+        printThreadDetails = getConfigInfo(option, \"+thread\", ofInstance);\n+        printDateTime = getConfigInfo(option, \"+timestamp\", ofInstance);\n+        if (printDateTime && !dateTimeFormatInitialized) {\n+            \/\/ trigger loading of Locale service impl now to avoid\n+            \/\/ possible bootstrap recursive class load issue\n+            FormatHolder.DATE_TIME_FORMATTER.format(Instant.now());\n+            dateTimeFormatInitialized = true;\n+        }\n+    }\n+\n@@ -200,1 +205,5 @@\n-    private static boolean getConfigInfo(String option, String extraInfoOption) {\n+    \/\/ parse an option string to determine if extra details\n+    \/\/ (like thread and timestamp) should be printed\n+    private static boolean getConfigInfo(String option,\n+                                         String extraInfoOption,\n+                                         boolean ofInstance) {\n@@ -204,3 +213,8 @@\n-        \/\/ treat \"all\" as special case,\n-        if (timeStampInfoAll && extraInfoOption.equals(\"+timestamp\")) {\n-            return true;\n+        \/\/ treat \"all\" as special case, only used for java.security.debug property\n+        if (!ofInstance) {\n+            if (timeStampInfoAll && extraInfoOption.equals(\"+timestamp\")) {\n+                return true;\n+            }\n+            if (threadInfoAll && extraInfoOption.equals(\"+thread\")) {\n+                return true;\n+            }\n@@ -208,2 +222,5 @@\n-        if (threadInfoAll && extraInfoOption.equals(\"+thread\")) {\n-            return true;\n+\n+        \/\/ for Debug instances derived from the 'of' method, simply check\n+        \/\/ the option string for occurrence of the extra option\n+        if (ofInstance) {\n+            return option.contains(extraInfoOption);\n@@ -211,0 +228,2 @@\n+\n+        \/\/ for java.security.debug mode, use the args string.\n@@ -237,1 +256,1 @@\n-     * @param option the debug option name\n+     * @param prefix the debug option name\n@@ -241,2 +260,2 @@\n-    public static Debug of(String option, String property) {\n-        if (\"true\".equalsIgnoreCase(property)) {\n+    public static Debug of(String prefix, String property) {\n+        if (property != null && property.toLowerCase(Locale.ROOT).startsWith(\"true\")) {\n@@ -244,1 +263,1 @@\n-            d.prefix = option;\n+            d.configureOptions(property, prefix, true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":48,"deletions":29,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8327818\n+ * @bug 8327818 8051959\n@@ -29,0 +29,1 @@\n+ * @run junit LoginModuleDebug\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -32,0 +34,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -34,0 +39,1 @@\n+import java.util.stream.Stream;\n@@ -37,20 +43,34 @@\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-            \/\/ debug option set to true\n-            ProcessTools.executeTestJava(\"LoginModuleDebug\",\n-                            \"debug\", \"true\")\n-                    .stdoutShouldBeEmpty()\n-                    .stderrShouldContain(\"krb5loginmodule:\");\n-            \/\/ debug option set to false\n-            ProcessTools.executeTestJava(\"LoginModuleDebug\",\n-                            \"debug\", \"false\")\n-                    .stdoutShouldBeEmpty()\n-                    .stderrShouldNotContain(\"krb5loginmodule:\");\n-            \/\/ no debug option\n-            ProcessTools.executeTestJava(\"LoginModuleDebug\",\n-                            \"foo\", \"bar\")\n-                    .stdoutShouldBeEmpty()\n-                    .stderrShouldNotContain(\"krb5loginmodule:\");\n-        } else {\n-            test(args[0], args[1]);\n-        }\n+\n+    private static Stream<Arguments> patternMatches() {\n+        return Stream.of(\n+                \/\/ debug option set to true - no extra info\n+                Arguments.of(\"debug\",\n+                        \"true\",\n+                        \"krb5loginmodule:\",\n+                        \"krb5loginmodule\\\\[\"),\n+                \/\/ debug option set to false\n+                Arguments.of(\"debug\",\n+                        \"false\",\n+                        \"\",\n+                        \"krb5loginmodule\"),\n+                \/\/ no debug option\n+                Arguments.of(\"foo\",\n+                        \"bar\",\n+                        \"\",\n+                        \"krb5loginmodule\"),\n+                \/\/ thread info only\n+                Arguments.of(\"debug\",\n+                        \"true+thread\",\n+                        \"krb5loginmodule\\\\[.*\\\\|main|\\\\.*java.*]:\",\n+                        \"UTC]\"),\n+                \/\/ timestamp info only\n+                Arguments.of(\"debug\",\n+                        \"true+timestamp\",\n+                        \"krb5loginmodule\\\\[.*UTC\\\\]\",\n+                        \"\\\\|main\\\\]:\"),\n+                \/\/ both thread and timestamp\n+                Arguments.of(\"debug\",\n+                        \"true+timestamp+thread\",\n+                        \"krb5loginmodule\\\\[.*\\\\|main\\\\|.*UTC\\\\]:\",\n+                        \"krb5loginmodule:\")\n+        );\n@@ -59,4 +79,19 @@\n-    static void test(String key, String prop)\n-            throws Exception {\n-        new Krb5LoginModule().initialize(\n-                new Subject(), null, Map.of(), Map.of(key, prop));\n+    @ParameterizedTest\n+    @MethodSource(\"patternMatches\")\n+    public void shouldContain(String value, String key, String expected, String notExpected) throws Exception {\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n+                \"-Duser.timezone=UTC\",\n+                \"LoginModuleDebug\",\n+                value, key);\n+        outputAnalyzer.shouldHaveExitValue(0)\n+                .shouldMatch(expected)\n+                .shouldNotMatch(notExpected);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        System.err.println(args.length);\n+        if (args.length == 2) {\n+            \/\/ something to trigger \"krb5\" debug output\n+            new Krb5LoginModule().initialize(\n+                    new Subject(), null, Map.of(), Map.of(args[0], args[1]));\n+        }\n@@ -64,1 +99,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/LoginModuleDebug.java","additions":61,"deletions":26,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -97,0 +97,4 @@\n+                        \"properties\\\\[.*\\\\|main.*UTC\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*UTC\\\\]:\",\n+                        \"properties:\"),\n+                \/\/ all decorator option should override other component options\n+                Arguments.of(\"all+thread+timestamp,properties\",\n","filename":"test\/jdk\/sun\/security\/util\/Debug\/DebugOptions.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}