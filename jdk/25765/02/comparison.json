{"files":[{"patch":"@@ -1578,3 +1578,8 @@\n-    \/\/ Check if src array address is aligned to HeapWordSize (dst is always aligned)\n-    const TypeInt* toffset = gvn().type(offset)->is_int();\n-    bool aligned = toffset->is_con() && ((toffset->get_con() * type2aelembytes(T_CHAR)) % HeapWordSize == 0);\n+    \/\/ Check if dst array address is aligned to HeapWordSize\n+    bool aligned = (arrayOopDesc::base_offset_in_bytes(T_BYTE) % HeapWordSize == 0);\n+    \/\/ If true, then check if src array address is aligned to HeapWordSize\n+    if (aligned) {\n+      const TypeInt* toffset = gvn().type(offset)->is_int();\n+      aligned = toffset->is_con() && ((arrayOopDesc::base_offset_in_bytes(T_CHAR) +\n+                                       toffset->get_con() * type2aelembytes(T_CHAR)) % HeapWordSize == 0);\n+    }\n@@ -1661,2 +1666,2 @@\n-    bool aligned = tsrc->is_con() && ((tsrc->get_con() * type2aelembytes(T_BYTE)) % HeapWordSize == 0) &&\n-                   tdst->is_con() && ((tdst->get_con() * type2aelembytes(T_CHAR)) % HeapWordSize == 0);\n+    bool aligned = tsrc->is_con() && ((arrayOopDesc::base_offset_in_bytes(T_BYTE) + tsrc->get_con() * type2aelembytes(T_BYTE)) % HeapWordSize == 0) &&\n+                   tdst->is_con() && ((arrayOopDesc::base_offset_in_bytes(T_CHAR) + tdst->get_con() * type2aelembytes(T_CHAR)) % HeapWordSize == 0);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1476,3 +1476,8 @@\n-  \/\/ Check if destination address is aligned to HeapWordSize\n-  const TypeInt* tdst = __ gvn().type(start)->is_int();\n-  bool aligned = tdst->is_con() && ((tdst->get_con() * type2aelembytes(T_BYTE)) % HeapWordSize == 0);\n+  \/\/ Check if src array address is aligned to HeapWordSize\n+  bool aligned = (arrayOopDesc::base_offset_in_bytes(T_BYTE) % HeapWordSize == 0);\n+  \/\/ If true, then check if dst array address is aligned to HeapWordSize\n+  if (aligned) {\n+    const TypeInt* tdst = __ gvn().type(start)->is_int();\n+    aligned = tdst->is_con() && ((arrayOopDesc::base_offset_in_bytes(T_BYTE) +\n+                                  tdst->get_con() * type2aelembytes(T_BYTE)) % HeapWordSize == 0);\n+  }\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Institute of Software, Chinese Academy of Sciences.\n+ * All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests.stringopts;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/**\n+ * @test\n+ * @bug 8359270\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"riscv64\" | os.arch==\"aarch64\"\n+ * @summary C2: alignment check should consider base offset when emitting arraycopy runtime call.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.stringopts.TestArrayCopySelect\n+ *\/\n+\n+public class TestArrayCopySelect {\n+\n+    public static final String input_strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n+    public static final char[] input_arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n+                                                        '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n+\n+    public static String output_strU;\n+    public static char[] output_arrU;\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+UseCompactObjectHeaders\", \"-XX:-CompactStrings\", \"-XX:MaxInlineSize=70\", \"-XX:MinInlineFrequencyRatio=0\");\n+        TestFramework.runWithFlags(\"-XX:-UseCompactObjectHeaders\", \"-XX:-CompactStrings\", \"-XX:MaxInlineSize=70\", \"-XX:MinInlineFrequencyRatio=0\");\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static void testStrUConcatAligned() {\n+        \/\/ Exercise the StringBuilder.toString API\n+        StringBuilder sb = new StringBuilder(input_strU);\n+        output_strU = sb.append(input_strU).toString();\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static void testStrUConcatUnAligned() {\n+        \/\/ Exercise the StringBuilder.toString API\n+        StringBuilder sb = new StringBuilder(input_strU);\n+        output_strU = sb.append(input_strU).toString();\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static void testStrUGetCharsAligned() {\n+        \/\/ Exercise the StringUTF16.getChars API\n+        output_arrU = input_strU.toCharArray();\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static void testStrUGetCharsUnAligned() {\n+        \/\/ Exercise the StringUTF16.getChars API\n+        output_arrU = input_strU.toCharArray();\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static void testStrUtoBytesAligned() {\n+        \/\/ Exercise the StringUTF16.toBytes API\n+        output_strU = String.valueOf(input_arrU);\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static void testStrUtoBytesUnAligned() {\n+        \/\/ Exercise the StringUTF16.toBytes API\n+        output_strU = String.valueOf(input_arrU);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/stringopts\/TestArrayCopySelect.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}