{"files":[{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2025, Institute of Software, Chinese Academy of Sciences.\n+ * All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests.stringopts;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/**\n+ * @test\n+ * @bug 8359270\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @summary C2: alignment check should consider base offset when emitting\n+            arraycopy runtime call.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.stringopts.TestArrayCopySelect\n+ *\/\n+\n+public class TestArrayCopySelect {\n+\n+    public static void main(String[] args) {\n+        TestFramework framework = new TestFramework();\n+        framework.addScenarios(new Scenario(0, \"-XX:-UseCompactObjectHeaders\"),\n+                               new Scenario(1, \"-XX:+UseCompactObjectHeaders\"));\n+        framework.start();\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jbyte_disjoint_arraycopy\", \">0\"})\n+    static String testStrLConcatAligned() {\n+        \/\/ Exercise the StringBuilder.toString API\n+        StringBuilder sb = new StringBuilder(\"abcdefghijklmnop\");\n+        return sb.append(\"ABCDEFGHIJKLMNOP\").toString();\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jbyte_disjoint_arraycopy\", \"0\"})\n+    static String testStrLConcatUnAligned() {\n+        \/\/ Exercise the StringBuilder.toString API\n+        StringBuilder sb = new StringBuilder(\"abcdefghijklmnop\");\n+        return sb.append(\"ABCDEFGHIJKLMNOP\").toString();\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static char[] testStrUGetCharsAligned(String strU) {\n+        \/\/ Exercise the StringUTF16.getChars API\n+        return strU.toCharArray();\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static char[] testStrUGetCharsUnAligned(String strU) {\n+        \/\/ Exercise the StringUTF16.getChars API\n+        return strU.toCharArray();\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static String testStrUtoBytesAligned(char[] arrU) {\n+        \/\/ Exercise the StringUTF16.toBytes API\n+        return String.valueOf(arrU);\n+    }\n+\n+    @Test\n+    @IR(applyIf = {\"UseCompactObjectHeaders\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static String testStrUtoBytesUnAligned(char[] arrU) {\n+        \/\/ Exercise the StringUTF16.toBytes API\n+        return String.valueOf(arrU);\n+    }\n+\n+    @Run(test = {\"testStrLConcatAligned\",\n+                 \"testStrLConcatUnAligned\",\n+                 \"testStrUGetCharsAligned\",\n+                 \"testStrUGetCharsUnAligned\",\n+                 \"testStrUtoBytesAligned\",\n+                 \"testStrUtoBytesUnAligned\"})\n+    public void runTests() {\n+        {\n+            String strL = testStrLConcatAligned();\n+        }\n+        {\n+            String strL = testStrLConcatUnAligned();\n+        }\n+        {\n+            String strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n+            char[] arrU = testStrUGetCharsAligned(strU);\n+        }\n+        {\n+            String strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n+            char[] arrU = testStrUGetCharsUnAligned(strU);\n+        }\n+        {\n+            char[] arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n+                                      '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n+            String strU = testStrUtoBytesAligned(arrU);\n+        }\n+        {\n+            char[] arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n+                                      '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n+            String strU = testStrUtoBytesUnAligned(arrU);\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/stringopts\/TestArrayCopySelect.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}