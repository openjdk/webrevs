{"files":[{"patch":"@@ -33,2 +33,2 @@\n- * @summary C2: alignment check should consider base offset when emitting\n-            arraycopy runtime call.\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\" | os.arch==\"riscv64\" | os.arch==\"aarch64\"\n+ * @summary C2: alignment check should consider base offset when emitting arraycopy runtime call.\n@@ -41,0 +41,7 @@\n+    public static final String input_strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n+    public static final char[] input_arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n+                                                        '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n+\n+    public static String output_strU;\n+    public static char[] output_arrU;\n+\n@@ -42,4 +49,2 @@\n-        TestFramework framework = new TestFramework();\n-        framework.addScenarios(new Scenario(0, \"-XX:-UseCompactObjectHeaders\"),\n-                               new Scenario(1, \"-XX:+UseCompactObjectHeaders\"));\n-        framework.start();\n+        TestFramework.runWithFlags(\"-XX:+UseCompactObjectHeaders\", \"-XX:-CompactStrings\", \"-XX:MaxInlineSize=70\", \"-XX:MinInlineFrequencyRatio=0\");\n+        TestFramework.runWithFlags(\"-XX:-UseCompactObjectHeaders\", \"-XX:-CompactStrings\", \"-XX:MaxInlineSize=70\", \"-XX:MinInlineFrequencyRatio=0\");\n@@ -49,0 +54,1 @@\n+    @Warmup(10000)\n@@ -50,2 +56,2 @@\n-        counts = {IRNode.CALL_OF, \"arrayof_jbyte_disjoint_arraycopy\", \">0\"})\n-    static String testStrLConcatAligned() {\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \">0\"})\n+    static void testStrUConcatAligned() {\n@@ -53,2 +59,2 @@\n-        StringBuilder sb = new StringBuilder(\"abcdefghijklmnop\");\n-        return sb.append(\"ABCDEFGHIJKLMNOP\").toString();\n+        StringBuilder sb = new StringBuilder(input_strU);\n+        output_strU = sb.append(input_strU).toString();\n@@ -58,0 +64,1 @@\n+    @Warmup(10000)\n@@ -59,2 +66,2 @@\n-        counts = {IRNode.CALL_OF, \"arrayof_jbyte_disjoint_arraycopy\", \"0\"})\n-    static String testStrLConcatUnAligned() {\n+        counts = {IRNode.CALL_OF, \"arrayof_jshort_disjoint_arraycopy\", \"0\"})\n+    static void testStrUConcatUnAligned() {\n@@ -62,2 +69,2 @@\n-        StringBuilder sb = new StringBuilder(\"abcdefghijklmnop\");\n-        return sb.append(\"ABCDEFGHIJKLMNOP\").toString();\n+        StringBuilder sb = new StringBuilder(input_strU);\n+        output_strU = sb.append(input_strU).toString();\n@@ -67,0 +74,1 @@\n+    @Warmup(10000)\n@@ -69,1 +77,1 @@\n-    static char[] testStrUGetCharsAligned(String strU) {\n+    static void testStrUGetCharsAligned() {\n@@ -71,1 +79,1 @@\n-        return strU.toCharArray();\n+        output_arrU = input_strU.toCharArray();\n@@ -75,0 +83,1 @@\n+    @Warmup(10000)\n@@ -77,1 +86,1 @@\n-    static char[] testStrUGetCharsUnAligned(String strU) {\n+    static void testStrUGetCharsUnAligned() {\n@@ -79,1 +88,1 @@\n-        return strU.toCharArray();\n+        output_arrU = input_strU.toCharArray();\n@@ -83,0 +92,1 @@\n+    @Warmup(10000)\n@@ -85,1 +95,1 @@\n-    static String testStrUtoBytesAligned(char[] arrU) {\n+    static void testStrUtoBytesAligned() {\n@@ -87,1 +97,1 @@\n-        return String.valueOf(arrU);\n+        output_strU = String.valueOf(input_arrU);\n@@ -91,0 +101,1 @@\n+    @Warmup(10000)\n@@ -93,1 +104,1 @@\n-    static String testStrUtoBytesUnAligned(char[] arrU) {\n+    static void testStrUtoBytesUnAligned() {\n@@ -95,34 +106,1 @@\n-        return String.valueOf(arrU);\n-    }\n-\n-    @Run(test = {\"testStrLConcatAligned\",\n-                 \"testStrLConcatUnAligned\",\n-                 \"testStrUGetCharsAligned\",\n-                 \"testStrUGetCharsUnAligned\",\n-                 \"testStrUtoBytesAligned\",\n-                 \"testStrUtoBytesUnAligned\"})\n-    public void runTests() {\n-        {\n-            String strL = testStrLConcatAligned();\n-        }\n-        {\n-            String strL = testStrLConcatUnAligned();\n-        }\n-        {\n-            String strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n-            char[] arrU = testStrUGetCharsAligned(strU);\n-        }\n-        {\n-            String strU = \"\\u0f21\\u0f22\\u0f23\\u0f24\\u0f25\\u0f26\\u0f27\\u0f28\";\n-            char[] arrU = testStrUGetCharsUnAligned(strU);\n-        }\n-        {\n-            char[] arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n-                                      '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n-            String strU = testStrUtoBytesAligned(arrU);\n-        }\n-        {\n-            char[] arrU = new char[] {'\\u0f21', '\\u0f22', '\\u0f23', '\\u0f24',\n-                                      '\\u0f25', '\\u0f26', '\\u0f27', '\\u0f28'};\n-            String strU = testStrUtoBytesUnAligned(arrU);\n-        }\n+        output_strU = String.valueOf(input_arrU);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/stringopts\/TestArrayCopySelect.java","additions":33,"deletions":55,"binary":false,"changes":88,"status":"modified"}]}