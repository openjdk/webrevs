{"files":[{"patch":"@@ -87,4 +87,0 @@\n-  virtual bool card_mark_must_follow_store() const {\n-    return true;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-                             && (DeferInitialCardMark || card_mark_must_follow_store());\n+                             && DeferInitialCardMark;\n@@ -188,4 +188,0 @@\n-\n-bool CardTableBarrierSet::card_mark_must_follow_store() const {\n-  return false;\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,11 +91,0 @@\n-  \/\/ If a compiler is eliding store barriers for TLAB-allocated objects,\n-  \/\/ we will be informed of a slow-path allocation by a call\n-  \/\/ to on_slowpath_allocation_exit() below. Such a call precedes the\n-  \/\/ initialization of the object itself, and no post-store-barriers will\n-  \/\/ be issued. Some heap types require that the barrier strictly follows\n-  \/\/ the initializing stores. (This is currently implemented by deferring the\n-  \/\/ barrier until the next slow-path allocation or gc-related safepoint.)\n-  \/\/ This interface answers whether a particular barrier type needs the card\n-  \/\/ mark to be thus strictly sequenced after the stores.\n-  virtual bool card_mark_must_follow_store() const;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.hpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}