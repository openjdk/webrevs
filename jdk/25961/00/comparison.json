{"files":[{"patch":"@@ -430,1 +430,1 @@\n-            out[i] = new Parameter(\"arg\" + i, 0, this, i);\n+            out[i] = new Parameter(null, 0, this, i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-     * @param name The name of the parameter.\n+     * @param name The name of the parameter, or {@code null} if absent\n@@ -107,1 +107,1 @@\n-        return executable.hasRealParameterData() && name != null;\n+        return name != null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandleProxies;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Parameter;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8357728\n+ * @summary Synthetic parameter names should not be retained.\n+ * @modules java.base\/java.lang.reflect:+open\n+ * @run junit SyntheticNameRetention\n+ *\/\n+public class SyntheticNameRetention {\n+\n+    class Inner {\n+        Inner() {}\n+    }\n+\n+    public interface NameGetter {\n+        String getRawName(Parameter parameter);\n+    }\n+    static final NameGetter GETTER;\n+\n+    static {\n+        try {\n+            var lookup = MethodHandles.privateLookupIn(Parameter.class, MethodHandles.lookup());\n+            GETTER = MethodHandleProxies.asInterfaceInstance(NameGetter.class, lookup.findGetter(Parameter.class, \"name\", String.class));\n+        } catch (ReflectiveOperationException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    static Stream<Executable> methods() throws Throwable {\n+        return Stream.of(Inner.class.getDeclaredConstructor(SyntheticNameRetention.class), \/\/ Has MethodParameters with flags\n+                         SyntheticNameRetention.class.getDeclaredMethod(\"test\", Executable.class)); \/\/ No MethodParameters\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"methods\")\n+    public void test(Executable exec) {\n+        var params = exec.getParameters();\n+        for (int i = 0; i < params.length; i++) {\n+            var param = params[i];\n+            assertEquals(\"arg\" + i, param.getName(), \"name \" + i);\n+            assertFalse(param.isNamePresent(), \"name present \" + i);\n+            assertNull(GETTER.getRawName(param), \"raw name \" + i);\n+            boolean mandated = exec instanceof Constructor<?> && i == 0;\n+            assertEquals(mandated, param.isImplicit(), \"mandated \" + i);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Parameter\/SyntheticNameRetention.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}