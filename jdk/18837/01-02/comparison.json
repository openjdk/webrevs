{"files":[{"patch":"@@ -37,10 +37,0 @@\n-import java.net.URI;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n@@ -48,15 +38,0 @@\n-\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.ModuleElement;\n-import javax.lang.model.element.ModuleElement.ExportsDirective;\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.util.ElementFilter;\n-import javax.tools.Diagnostic.Kind;\n-import javax.tools.DiagnosticListener;\n-import javax.tools.JavaCompiler;\n-import javax.tools.JavaFileObject;\n-import javax.tools.StandardJavaFileManager;\n-import javax.tools.ToolProvider;\n-\n-import com.sun.source.util.JavacTask;\n-import jdk.internal.shellsupport.doc.JavadocHelper;\n@@ -72,46 +47,1 @@\n-        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n-        DiagnosticListener<? super JavaFileObject> noErrors = d -> {\n-            if (d.getKind() == Kind.ERROR) {\n-                throw new AssertionError(d.getMessage(null));\n-            }\n-        };\n-\n-        List<Path> sources = new ArrayList<>();\n-        Path home = Paths.get(System.getProperty(\"java.home\"));\n-        Path srcZip = home.resolve(\"lib\").resolve(\"src.zip\");\n-        if (Files.isReadable(srcZip)) {\n-            URI uri = URI.create(\"jar:\" + srcZip.toUri());\n-            try (FileSystem zipFO = FileSystems.newFileSystem(uri, Collections.emptyMap())) {\n-                Path root = zipFO.getRootDirectories().iterator().next();\n-\n-                \/\/modular format:\n-                try (DirectoryStream<Path> ds = Files.newDirectoryStream(root)) {\n-                    for (Path p : ds) {\n-                        if (Files.isDirectory(p)) {\n-                            sources.add(p);\n-                        }\n-                    }\n-                }\n-                try (StandardJavaFileManager fm =\n-                             compiler.getStandardFileManager(null, null, null)) {\n-                    JavacTask task =\n-                            (JavacTask) compiler.getTask(null, fm, noErrors, null, null, null);\n-                    task.getElements().getTypeElement(\"java.lang.Object\");\n-                    for (ModuleElement me : task.getElements().getAllModuleElements()) {\n-                        List<ExportsDirective> exports =\n-                                ElementFilter.exportsIn(me.getDirectives());\n-                        for (ExportsDirective ed : exports) {\n-                            try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n-                                List<? extends Element> content =\n-                                        ed.getPackage().getEnclosedElements();\n-                                for (TypeElement clazz : ElementFilter.typesIn(content)) {\n-                                    for (Element el : clazz.getEnclosedElements()) {\n-                                        helper.getResolvedDocComment(el);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+        new JavadocHelperTest().retrieveDocComments(Boolean.TRUE::booleanValue);\n","filename":"test\/langtools\/jdk\/internal\/shellsupport\/doc\/FullJavadocHelperTest.java","additions":1,"deletions":71,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @key randomness\n@@ -39,0 +40,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -44,0 +46,1 @@\n+import java.util.ArrayList;\n@@ -47,0 +50,2 @@\n+import java.util.Random;\n+import java.util.function.BooleanSupplier;\n@@ -52,1 +57,2 @@\n-import javax.lang.model.element.Modifier;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.ModuleElement.ExportsDirective;\n@@ -68,1 +74,0 @@\n-import static org.testng.Assert.assertNotNull;\n@@ -384,0 +389,12 @@\n+    private static long getSeed() {\n+        long seed;\n+        try {\n+            \/\/ Throws NumberFormatException if the property is undefined\n+            seed = Long.parseLong(System.getProperty(\"seed\"));\n+        } catch (NumberFormatException e) {\n+            seed = new Random().nextLong();\n+        }\n+        System.out.println(\"Random Seed: \" + seed);\n+        return seed;\n+    }\n+\n@@ -385,2 +402,3 @@\n-     * This retrieves the doc comments of java.lang.StringBuilder members, which is where\n-     * the crash in JDK-8189778 occurred. Full test moved to FullJavaDocHelperTest.java.\n+     * Retrieves doc comments for a random subset of JDK classes.\n+     * Set the system property `seed` to a random seed to reproduce\n+     * a specific run of this test.\n@@ -388,1 +406,12 @@\n-    public void testStringBuilderDocs() throws IOException {\n+    public void testRandomDocs() throws IOException {\n+        Random random = new Random(getSeed());\n+        \/\/ Run test on 2% of classes, which corresponds to ~ 140 classes\n+        retrieveDocComments(() -> random.nextInt(100) < 2);\n+    }\n+\n+    \/**\n+     * Retrieve documentation of enclosed elements for some or all JDK classes.\n+     *\n+     * @param shouldTest oracle function to decide whether a class should be tested\n+     *\/\n+    protected void retrieveDocComments(BooleanSupplier shouldTest) throws IOException {\n@@ -396,0 +425,1 @@\n+        List<Path> sources = new ArrayList<>();\n@@ -402,1 +432,0 @@\n-                List<Path> sources = List.of(root.resolve(\"java.base\"));\n@@ -404,0 +433,8 @@\n+                \/\/modular format:\n+                try (DirectoryStream<Path> ds = Files.newDirectoryStream(root)) {\n+                    for (Path p : ds) {\n+                        if (Files.isDirectory(p)) {\n+                            sources.add(p);\n+                        }\n+                    }\n+                }\n@@ -405,1 +442,1 @@\n-                        compiler.getStandardFileManager(null, null, null)) {\n+                             compiler.getStandardFileManager(null, null, null)) {\n@@ -408,6 +445,15 @@\n-                    TypeElement clazz = task.getElements().getTypeElement(\"java.lang.StringBuilder\");\n-                    try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n-                        for (Element el : clazz.getEnclosedElements()) {\n-                            \/\/ All StringBuilder members are currently documented, but exclude private to be safe\n-                            if (!el.getModifiers().contains(Modifier.PRIVATE)) {\n-                                assertNotNull(helper.getResolvedDocComment(el));\n+                    task.getElements().getTypeElement(\"java.lang.Object\");\n+                    for (ModuleElement me : task.getElements().getAllModuleElements()) {\n+                        List<ExportsDirective> exports =\n+                                ElementFilter.exportsIn(me.getDirectives());\n+                        for (ExportsDirective ed : exports) {\n+                            try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n+                                List<? extends Element> content =\n+                                        ed.getPackage().getEnclosedElements();\n+                                for (TypeElement clazz : ElementFilter.typesIn(content)) {\n+                                    if (shouldTest.getAsBoolean()) {\n+                                        for (Element el : clazz.getEnclosedElements()) {\n+                                            helper.getResolvedDocComment(el);\n+                                        }\n+                                    }\n+                                }\n","filename":"test\/langtools\/jdk\/internal\/shellsupport\/doc\/JavadocHelperTest.java","additions":59,"deletions":13,"binary":false,"changes":72,"status":"modified"}]}