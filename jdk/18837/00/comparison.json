{"files":[{"patch":"@@ -1,1 +1,1 @@\n-#  Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-    jdk\/jshell\/UserJdiUserRemoteTest.java\n+    jdk\/jshell\/UserJdiUserRemoteTest.java \\\n+    jdk\/internal\/shellsupport\/doc\/FullJavadocHelperTest.java\n","filename":"test\/langtools\/TEST.groups","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8189778\n+ * @summary Test JavadocHelper\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/jdk.internal.shellsupport.doc\n+ * @build toolbox.ToolBox toolbox.JarTask toolbox.JavacTask\n+ * @run testng\/timeout=900\/othervm -Xmx1024m FullJavadocHelperTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.ModuleElement.ExportsDirective;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.util.ElementFilter;\n+import javax.tools.Diagnostic.Kind;\n+import javax.tools.DiagnosticListener;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+\n+import com.sun.source.util.JavacTask;\n+import jdk.internal.shellsupport.doc.JavadocHelper;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class FullJavadocHelperTest {\n+\n+    \/*\n+     * Long-running test to retrieve doc comments for enclosed elements of all JDK classes.\n+     *\/\n+    public void testAllDocs() throws IOException {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        DiagnosticListener<? super JavaFileObject> noErrors = d -> {\n+            if (d.getKind() == Kind.ERROR) {\n+                throw new AssertionError(d.getMessage(null));\n+            }\n+        };\n+\n+        List<Path> sources = new ArrayList<>();\n+        Path home = Paths.get(System.getProperty(\"java.home\"));\n+        Path srcZip = home.resolve(\"lib\").resolve(\"src.zip\");\n+        if (Files.isReadable(srcZip)) {\n+            URI uri = URI.create(\"jar:\" + srcZip.toUri());\n+            try (FileSystem zipFO = FileSystems.newFileSystem(uri, Collections.emptyMap())) {\n+                Path root = zipFO.getRootDirectories().iterator().next();\n+\n+                \/\/modular format:\n+                try (DirectoryStream<Path> ds = Files.newDirectoryStream(root)) {\n+                    for (Path p : ds) {\n+                        if (Files.isDirectory(p)) {\n+                            sources.add(p);\n+                        }\n+                    }\n+                }\n+                try (StandardJavaFileManager fm =\n+                             compiler.getStandardFileManager(null, null, null)) {\n+                    JavacTask task =\n+                            (JavacTask) compiler.getTask(null, fm, noErrors, null, null, null);\n+                    task.getElements().getTypeElement(\"java.lang.Object\");\n+                    for (ModuleElement me : task.getElements().getAllModuleElements()) {\n+                        List<ExportsDirective> exports =\n+                                ElementFilter.exportsIn(me.getDirectives());\n+                        for (ExportsDirective ed : exports) {\n+                            try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n+                                List<? extends Element> content =\n+                                        ed.getPackage().getEnclosedElements();\n+                                for (TypeElement clazz : ElementFilter.typesIn(content)) {\n+                                    for (Element el : clazz.getEnclosedElements()) {\n+                                        helper.getResolvedDocComment(el);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/internal\/shellsupport\/doc\/FullJavadocHelperTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run testng\/timeout=900\/othervm -Xmx1024m JavadocHelperTest\n+ * @run testng JavadocHelperTest\n@@ -39,1 +39,0 @@\n-import java.nio.file.DirectoryStream;\n@@ -45,1 +44,0 @@\n-import java.util.ArrayList;\n@@ -54,2 +52,1 @@\n-import javax.lang.model.element.ModuleElement;\n-import javax.lang.model.element.ModuleElement.ExportsDirective;\n+import javax.lang.model.element.Modifier;\n@@ -71,0 +68,1 @@\n+import static org.testng.Assert.assertNotNull;\n@@ -386,1 +384,5 @@\n-    public void testAllDocs() throws IOException {\n+    \/*\n+     * This retrieves the doc comments of java.lang.StringBuilder members, which is where\n+     * the crash in JDK-8189778 occurred. Full test moved to FullJavaDocHelperTest.java.\n+     *\/\n+    public void testStringBuilderDocs() throws IOException {\n@@ -394,1 +396,0 @@\n-        List<Path> sources = new ArrayList<>();\n@@ -401,0 +402,1 @@\n+                List<Path> sources = List.of(root.resolve(\"java.base\"));\n@@ -402,8 +404,0 @@\n-                \/\/modular format:\n-                try (DirectoryStream<Path> ds = Files.newDirectoryStream(root)) {\n-                    for (Path p : ds) {\n-                        if (Files.isDirectory(p)) {\n-                            sources.add(p);\n-                        }\n-                    }\n-                }\n@@ -414,13 +408,6 @@\n-                    task.getElements().getTypeElement(\"java.lang.Object\");\n-                    for (ModuleElement me : task.getElements().getAllModuleElements()) {\n-                        List<ExportsDirective> exports =\n-                                ElementFilter.exportsIn(me.getDirectives());\n-                        for (ExportsDirective ed : exports) {\n-                            try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n-                                List<? extends Element> content =\n-                                        ed.getPackage().getEnclosedElements();\n-                                for (TypeElement clazz : ElementFilter.typesIn(content)) {\n-                                    for (Element el : clazz.getEnclosedElements()) {\n-                                        helper.getResolvedDocComment(el);\n-                                    }\n-                                }\n+                    TypeElement clazz = task.getElements().getTypeElement(\"java.lang.StringBuilder\");\n+                    try (JavadocHelper helper = JavadocHelper.create(task, sources)) {\n+                        for (Element el : clazz.getEnclosedElements()) {\n+                            \/\/ All StringBuilder members are currently documented, but exclude private to be safe\n+                            if (!el.getModifiers().contains(Modifier.PRIVATE)) {\n+                                assertNotNull(helper.getResolvedDocComment(el));\n","filename":"test\/langtools\/jdk\/internal\/shellsupport\/doc\/JavadocHelperTest.java","additions":16,"deletions":29,"binary":false,"changes":45,"status":"modified"}]}