{"files":[{"patch":"@@ -1003,0 +1003,1 @@\n+                                     \"Z\"                                                                                                       \\\n@@ -1019,0 +1020,1 @@\n+                                            \"Z\"                                                                                                \\\n@@ -1032,0 +1034,1 @@\n+                                      \"Z\"                                                                                                      \\\n@@ -1047,0 +1050,1 @@\n+                                             \"Z\"                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -931,1 +931,1 @@\n-static bool elem_consistent_with_arr(BasicType elem_bt, const TypeAryPtr* arr_type) {\n+static bool elem_consistent_with_arr(BasicType elem_bt, const TypeAryPtr* arr_type, bool mismatched_ms) {\n@@ -943,1 +943,1 @@\n-    return false;\n+    return mismatched_ms;\n@@ -954,1 +954,1 @@\n-\/\/         C container, long index, S s,     \/\/ Arguments for default implementation\n+\/\/         C container, long index, S s,  boolean from_ms,    \/\/ Arguments for default implementation\n@@ -963,1 +963,1 @@\n-\/\/            C container, long index,      \/\/ Arguments for default implementation\n+\/\/            C container, long index, boolean from_ms, \/\/ Arguments for default implementation\n@@ -970,0 +970,1 @@\n+  const TypeInt*     from_ms      = gvn().type(argument(10))->isa_int();\n@@ -971,1 +972,1 @@\n-  if (vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr ||\n+  if (vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr || !from_ms->is_con() ||\n@@ -974,1 +975,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s from_ms=%s\",\n@@ -977,1 +978,2 @@\n-                    NodeClassNames[argument(2)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(10)->Opcode()]);\n@@ -1036,5 +1038,4 @@\n-  \/\/ Now handle special case where load\/store happens from\/to byte array but element type is not byte.\n-  bool using_byte_array = arr_type != nullptr && arr_type->elem()->array_element_basic_type() == T_BYTE && elem_bt != T_BYTE;\n-  \/\/ Handle loading masks.\n-  \/\/ If there is no consistency between array and vector element types, it must be special byte array case or loading masks\n-  if (arr_type != nullptr && !using_byte_array && !is_mask && !elem_consistent_with_arr(elem_bt, arr_type)) {\n+  bool mismatched_ms = from_ms->get_con() && !is_mask && arr_type != nullptr && arr_type->elem()->array_element_basic_type() != elem_bt;\n+  BasicType mem_elem_bt = mismatched_ms ? arr_type->elem()->array_element_basic_type() : elem_bt;\n+  int mem_num_elem = mismatched_ms ? (num_elem * type2aelembytes(elem_bt)) \/ type2aelembytes(mem_elem_bt) : num_elem;\n+  if (arr_type != nullptr && !is_mask && !elem_consistent_with_arr(elem_bt, arr_type, mismatched_ms)) {\n@@ -1050,9 +1051,26 @@\n-  \/\/ Since we are using byte array, we need to double check that the byte operations are supported by backend.\n-  if (using_byte_array) {\n-    int byte_num_elem = num_elem * type2aelembytes(elem_bt);\n-    if (!arch_supports_vector(is_store ? Op_StoreVector : Op_LoadVector, byte_num_elem, T_BYTE, VecMaskNotUsed)\n-        || !arch_supports_vector(Op_VectorReinterpret, byte_num_elem, T_BYTE, VecMaskNotUsed)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n-                      is_store, is_store ? \"store\" : \"load\",\n-                      byte_num_elem, type2name(elem_bt));\n+\n+  \/\/ In case of mismatched memory segment accesses, we need to double check that the source type memory operations are supported by backend.\n+  if (mismatched_ms) {\n+    if (is_store) {\n+      if (!arch_supports_vector(Op_StoreVector, num_elem, elem_bt, VecMaskNotUsed)\n+          || !arch_supports_vector(Op_VectorReinterpret, mem_num_elem, mem_elem_bt, VecMaskNotUsed)) {\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n+                        is_store, \"store\",\n+                        num_elem, type2name(elem_bt));\n+        }\n+        set_map(old_map);\n+        set_sp(old_sp);\n+        return false; \/\/ not supported\n+      }\n+    } else {\n+      if (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed)\n+          || !arch_supports_vector(Op_VectorReinterpret, num_elem, elem_bt, VecMaskNotUsed)) {\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n+                        is_store, \"load\",\n+                        mem_num_elem, type2name(mem_elem_bt));\n+        }\n+        set_map(old_map);\n+        set_sp(old_sp);\n+        return false; \/\/ not supported\n@@ -1060,3 +1078,0 @@\n-      set_map(old_map);\n-      set_sp(old_sp);\n-      return false; \/\/ not supported\n@@ -1098,3 +1113,3 @@\n-    if (using_byte_array) {\n-      store_num_elem = num_elem * type2aelembytes(elem_bt);\n-      const TypeVect* to_vect_type = TypeVect::make(T_BYTE, store_num_elem);\n+    if (mismatched_ms) {\n+      store_num_elem = mem_num_elem;\n+      const TypeVect* to_vect_type = TypeVect::make(mem_elem_bt, store_num_elem);\n@@ -1111,3 +1126,2 @@\n-    if (using_byte_array) {\n-      int load_num_elem = num_elem * type2aelembytes(elem_bt);\n-      vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, load_num_elem, T_BYTE));\n+    if (mismatched_ms) {\n+      vload = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, mem_num_elem, mem_elem_bt));\n@@ -1145,3 +1159,4 @@\n-\/\/ V loadMasked(Class<? extends V> vectorClass, Class<M> maskClass, Class<E> elementType,\n-\/\/              int length, Object base, long offset, M m, int offsetInRange,\n-\/\/              C container, long index, S s,  \/\/ Arguments for default implementation\n+\/\/ V loadMasked(Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n+\/\/              int length, Object base, long offset,\n+\/\/              M m, int offsetInRange,\n+\/\/              C container, long index, S s, boolean from_m, \/\/ Arguments for default implementation\n@@ -1149,1 +1164,0 @@\n-\/\/\n@@ -1155,6 +1169,5 @@\n-\/\/ void storeMasked(Class<? extends V> vectorClass, Class<M> maskClass, Class<E> elementType,\n-\/\/                  int length, Object base, long offset,\n-\/\/                  V v, M m,\n-\/\/                  C container, long index,  \/\/ Arguments for default implementation\n-\/\/                  StoreVectorMaskedOperation<C, V, M, E> defaultImpl) {\n-\/\/\n+\/\/ void storeMasked(Class<? extends V> vClass, Class<M> mClass, Class<E> eClass,\n+\/\/                  int length,\n+\/\/                  Object base, long offset,\n+\/\/                  V v, M m, C container, long index, boolean from_ms, \/\/ Arguments for default implementation\n+\/\/                  StoreVectorMaskedOperation<C, V, M> defaultImpl) {\n@@ -1166,0 +1179,1 @@\n+  const TypeInt*     from_ms      = gvn().type(argument(is_store ? 12 : 13))->isa_int();\n@@ -1168,2 +1182,2 @@\n-      vector_klass->const_oop() == nullptr || mask_klass->const_oop() == nullptr ||\n-      elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n+      vector_klass->const_oop() == nullptr || mask_klass->const_oop() == nullptr || from_ms == nullptr ||\n+      elem_klass->const_oop() == nullptr || !vlen->is_con() || !from_ms->is_con()) {\n@@ -1171,1 +1185,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s from_ms=%s\",\n@@ -1175,1 +1189,2 @@\n-                    NodeClassNames[argument(3)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(is_store ? 12 : 13)->Opcode()]);\n@@ -1215,2 +1230,1 @@\n-  \/\/ Now handle special case where load\/store happens from\/to byte array but element type is not byte.\n-  bool using_byte_array = arr_type != nullptr && arr_type->elem()->array_element_basic_type() == T_BYTE && elem_bt != T_BYTE;\n+  bool mismatched_ms = from_ms->get_con() && arr_type != nullptr && arr_type->elem()->array_element_basic_type() != elem_bt;\n@@ -1218,1 +1232,1 @@\n-  if (arr_type != nullptr && !using_byte_array && !elem_consistent_with_arr(elem_bt, arr_type)) {\n+  if (arr_type != nullptr && !elem_consistent_with_arr(elem_bt, arr_type, mismatched_ms)) {\n@@ -1229,2 +1243,2 @@\n-  int mem_num_elem = using_byte_array ? num_elem * type2aelembytes(elem_bt) : num_elem;\n-  BasicType mem_elem_bt = using_byte_array ? T_BYTE : elem_bt;\n+  int mem_num_elem = mismatched_ms ? num_elem * type2aelembytes(elem_bt) : num_elem;\n+  BasicType mem_elem_bt = mismatched_ms ? T_BYTE : elem_bt;\n@@ -1258,1 +1272,1 @@\n-        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s mismatched_ms=%d\",\n@@ -1260,1 +1274,1 @@\n-                      num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+                      num_elem, type2name(elem_bt), mismatched_ms ? 1 : 0);\n@@ -1273,2 +1287,2 @@\n-      tty->print_cr(\"  ** not supported: op=loadMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+      tty->print_cr(\"  ** not supported: op=loadMasked vlen=%d etype=%s mismatched_ms=%d\",\n+                    num_elem, type2name(elem_bt), mismatched_ms ? 1 : 0);\n@@ -1283,1 +1297,1 @@\n-  if (using_byte_array) {\n+  if (mismatched_ms) {\n@@ -1286,1 +1300,1 @@\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s using_byte_array=1\",\n+        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s mismatched_ms=1\",\n@@ -1346,1 +1360,1 @@\n-    if (using_byte_array) {\n+    if (mismatched_ms) {\n@@ -1360,1 +1374,1 @@\n-    if (using_byte_array) {\n+    if (mismatched_ms) {\n@@ -1379,1 +1393,1 @@\n-    if (using_byte_array) {\n+    if (mismatched_ms) {\n@@ -1528,1 +1542,1 @@\n-  if (arr_type == nullptr || (arr_type != nullptr && !elem_consistent_with_arr(elem_bt, arr_type))) {\n+  if (arr_type == nullptr || (arr_type != nullptr && !elem_consistent_with_arr(elem_bt, arr_type, false))) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":73,"deletions":59,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-                    msp, offset, s,\n+                    msp, offset, s, true,\n@@ -401,1 +401,1 @@\n-                    msp, offset, s,\n+                    msp, offset, s, true,\n@@ -443,1 +443,1 @@\n-                    msp, offset,\n+                    msp, offset, true,\n@@ -485,1 +485,1 @@\n-                    msp, offset,\n+                    msp, offset, true,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-            C container, long index, S s,\n+            C container, long index, S s, boolean from_ms,\n@@ -450,1 +450,1 @@\n-                 C container, long index, S s,\n+                 C container, long index, S s, boolean from_ms,\n@@ -498,1 +498,1 @@\n-               V v, C container, long index,\n+               V v, C container, long index, boolean from_ms,\n@@ -519,1 +519,1 @@\n-                     V v, M m, C container, long index,\n+                     V v, M m, C container, long index, boolean from_ms,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            this, bits, i,\n+            this, bits, i, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3378,1 +3378,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3531,1 +3531,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3741,1 +3741,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3758,1 +3758,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3775,1 +3775,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3792,1 +3792,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3840,1 +3840,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3857,1 +3857,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n@@ -3876,1 +3876,1 @@\n-            normalized, m, a, offset,\n+            normalized, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3066,1 +3066,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3298,1 +3298,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3315,1 +3315,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3417,1 +3417,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3434,1 +3434,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3072,1 +3072,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3285,1 +3285,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3302,1 +3302,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3386,1 +3386,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3403,1 +3403,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3228,1 +3228,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3441,1 +3441,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3458,1 +3458,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3542,1 +3542,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3559,1 +3559,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3107,1 +3107,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3339,1 +3339,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3356,1 +3356,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3458,1 +3458,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3475,1 +3475,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3377,1 +3377,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3525,1 +3525,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -3727,1 +3727,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3744,1 +3744,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3760,1 +3760,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -3777,1 +3777,1 @@\n-                a, offset, vsp,\n+                a, offset, vsp, false,\n@@ -3826,1 +3826,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -3843,1 +3843,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n@@ -3893,1 +3893,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-                bits, offset, vsp,\n+                bits, offset, vsp, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4183,1 +4183,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -4402,1 +4402,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -4563,1 +4563,1 @@\n-            a, offset,\n+            a, offset, false,\n@@ -4774,1 +4774,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -4791,1 +4791,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -4868,1 +4868,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -4885,1 +4885,1 @@\n-                a, offset, vsp,\n+                a, offset, vsp, false,\n@@ -4902,1 +4902,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -4919,1 +4919,1 @@\n-            a, offset, vsp,\n+            a, offset, vsp, false,\n@@ -4968,1 +4968,1 @@\n-            this, a, offset,\n+            this, a, offset, false,\n@@ -4985,1 +4985,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n@@ -5066,1 +5066,1 @@\n-            normalized, m, a, offset,\n+            normalized, m, a, offset, false,\n@@ -5116,1 +5116,1 @@\n-            this, m, a, offset,\n+            this, m, a, offset, false,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+    private static final VectorMask<Integer> INTEGER_MASK = VectorMask.fromLong(INTEGER_SPECIES, (1 << (INTEGER_SPECIES.length() \/ 2)) - 1);\n+    private static final VectorMask<Double> DOUBLE_MASK = VectorMask.fromLong(DOUBLE_SPECIES, (1 << (DOUBLE_SPECIES.length() \/ 2)) - 1);\n+\n@@ -256,0 +259,23 @@\n+    @Benchmark\n+    public void intVectorFromIntBackedSegmentMasked(Blackhole bh) {\n+        for (int i = 0; i < INTEGER_SPECIES.loopBound(intSrcArray.length); i += INTEGER_SPECIES.vectorByteSize()) {\n+            var v = IntVector.fromMemorySegment(INTEGER_SPECIES, doubleSegment, i, ByteOrder.nativeOrder(), INTEGER_MASK);\n+            bh.consume(v);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intVectorFromDoubleBackedSegmentMasked(Blackhole bh) {\n+        for (int i = 0; i < INTEGER_SPECIES.loopBound(intSrcArray.length); i += INTEGER_SPECIES.vectorByteSize()) {\n+            var v = IntVector.fromMemorySegment(INTEGER_SPECIES, doubleSegment, i, ByteOrder.nativeOrder(), INTEGER_MASK);\n+            bh.consume(v);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleVectorFromIntBackedSegmentMasked(Blackhole bh) {\n+        for (int i = 0; i < DOUBLE_SPECIES.loopBound(doubleSrcArray.length); i += DOUBLE_SPECIES.vectorByteSize()) {\n+            var v = DoubleVector.fromMemorySegment(DOUBLE_SPECIES, intSegment, i, ByteOrder.nativeOrder(), DOUBLE_MASK);\n+            bh.consume(v);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/TestLoadSegmentVarious.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}