{"files":[{"patch":"@@ -1653,11 +1653,0 @@\n-void ObjectMonitor::post_monitor_wait(JavaThread *current, jlong millis) {\n-  if (JvmtiExport::should_post_monitor_wait()) {\n-    JvmtiExport::post_monitor_wait(current, object(), millis);\n-\n-    \/\/ The current thread already owns the monitor and it has not yet\n-    \/\/ been added to the wait queue so the current thread cannot be\n-    \/\/ made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT\n-    \/\/ event handler cannot accidentally consume an unpark() meant for\n-    \/\/ the ParkEvent associated with this ObjectMonitor.\n-  }\n-}\n@@ -1683,1 +1672,4 @@\n-    post_monitor_wait(current, millis);\n+\n+    if (JvmtiExport::should_post_monitor_wait()) {\n+      JvmtiExport::post_monitor_wait(current, object(), millis);\n+    }\n@@ -1709,2 +1701,2 @@\n-    if (interruptible) {\n-      post_monitor_wait(current, millis);\n+    if (interruptible && JvmtiExport::should_post_monitor_wait()) {\n+      JvmtiExport::post_monitor_wait(current, object(), millis);\n@@ -1724,2 +1716,8 @@\n-    if (interruptible) {\n-      post_monitor_wait(current, millis);\n+    if (interruptible && JvmtiExport::should_post_monitor_wait()) {\n+      JvmtiExport::post_monitor_wait(current, object(), millis);\n+\n+      \/\/ The current thread already owns the monitor and it has not yet\n+      \/\/ been added to the wait queue so the current thread cannot be\n+      \/\/ made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT\n+      \/\/ event handler cannot accidentally consume an unpark() meant for\n+      \/\/ the ParkEvent associated with this ObjectMonitor.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -381,1 +381,0 @@\n-  void      post_monitor_wait(JavaThread *current, jlong millis);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}