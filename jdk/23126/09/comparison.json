{"files":[{"patch":"@@ -629,10 +629,0 @@\n-  JavaThreadInObjectWaitState jtiows(thread, ms != 0);\n-  if (JvmtiExport::should_post_monitor_wait()) {\n-    JvmtiExport::post_monitor_wait(thread, obj(), ms);\n-\n-    \/\/ The current thread already owns the monitor and it has not yet\n-    \/\/ been added to the wait queue so the current thread cannot be\n-    \/\/ made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT\n-    \/\/ event handler cannot accidentally consume an unpark() meant for\n-    \/\/ the ParkEvent associated with this ObjectMonitor.\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1653,0 +1653,12 @@\n+void ObjectMonitor::post_monitor_wait(JavaThread *current, jlong millis) {\n+  if (JvmtiExport::should_post_monitor_wait()) {\n+    JvmtiExport::post_monitor_wait(current, object(), millis);\n+\n+    \/\/ The current thread already owns the monitor and it has not yet\n+    \/\/ been added to the wait queue so the current thread cannot be\n+    \/\/ made the successor. This means that the JVMTI_EVENT_MONITOR_WAIT\n+    \/\/ event handler cannot accidentally consume an unpark() meant for\n+    \/\/ the ParkEvent associated with this ObjectMonitor.\n+  }\n+}\n+\n@@ -1670,0 +1682,2 @@\n+    JavaThreadInObjectWaitState jtiows(current, millis != 0, interruptible);\n+    post_monitor_wait(current, millis);\n@@ -1691,2 +1705,0 @@\n-  current->set_current_waiting_monitor(this);\n-\n@@ -1695,1 +1707,6 @@\n-  if (ce != nullptr && ce->is_virtual_thread()) {\n+  bool is_virtual = ce != nullptr && ce->is_virtual_thread();\n+  if (is_virtual) {\n+    if (interruptible) {\n+      post_monitor_wait(current, millis);\n+    }\n+    current->set_current_waiting_monitor(this);\n@@ -1703,0 +1720,2 @@\n+  \/\/ The jtiows does nothing for non-interruptible.\n+  JavaThreadInObjectWaitState jtiows(current, millis != 0, interruptible);\n@@ -1704,0 +1723,6 @@\n+  if (!is_virtual) { \/\/ it was already set for virtual thread\n+    if (interruptible) {\n+      post_monitor_wait(current, millis);\n+    }\n+    current->set_current_waiting_monitor(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -381,0 +381,1 @@\n+  void      post_monitor_wait(JavaThread *current, jlong millis);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -490,1 +490,1 @@\n-  JavaThreadInObjectWaitState(JavaThread *java_thread, bool timed) :\n+  JavaThreadInObjectWaitState(JavaThread *java_thread, bool timed, bool interruptible) :\n@@ -492,2 +492,3 @@\n-                            timed ? JavaThreadStatus::IN_OBJECT_WAIT_TIMED : JavaThreadStatus::IN_OBJECT_WAIT) {\n-    if (is_alive()) {\n+                            interruptible ? (timed ? JavaThreadStatus::IN_OBJECT_WAIT_TIMED : JavaThreadStatus::IN_OBJECT_WAIT)\n+                                          : java_lang_Thread::get_thread_status(java_thread->threadObj())) {\n+    if (is_alive() && interruptible) { \/\/ non-interruptible is not active\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}