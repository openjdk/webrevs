{"files":[{"patch":"@@ -1222,0 +1222,1 @@\n+    bool found_invalid = false;\n@@ -1245,4 +1246,9 @@\n-              \/\/ The class must be from boot loader append path which consists of\n-              \/\/ -Xbootclasspath\/a and jvmti appended entries.\n-              assert(loader == nullptr, \"sanity\");\n-              classpath_index = i;\n+              if (loader != nullptr) {\n+                \/\/ Probably loaded by jdk\/internal\/loader\/ClassLoaders$BootClassLoader. Don't archive\n+                \/\/ such classes.\n+                ik->set_shared_classpath_index(-1);\n+                ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n+                found_invalid = true;\n+              } else {\n+                classpath_index = i;\n+              }\n@@ -1259,1 +1265,1 @@\n-      if (classpath_index >= 0) {\n+      if (classpath_index >= 0 || found_invalid) {\n@@ -1266,0 +1272,4 @@\n+    if (found_invalid) {\n+      return;\n+    }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary AOT cache handling for package-info class loaded by jdk\/internal\/loader\/ClassLoaders$BootClassLoader\n+ * @bug 8354558\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/jdk\/java\/lang\/Package\/bootclasspath\/boot\n+ * @build PackageInfoClass foo.Foo foo.MyAnnotation foo.package-info\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar boot.jar foo.Foo foo.package-info foo.MyAnnotation\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar PackageInfoClassApp\n+ * @run driver PackageInfoClass AOT\n+ *\/\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import jdk.test.lib.cds.CDSAppTester.RunMode;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class PackageInfoClass {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"PackageInfoClass\")\n+            .classpath(\"app.jar\")\n+            .addVmArgs(\"-Xbootclasspath\/a:boot.jar\")\n+            .appCommandLine(\"PackageInfoClassApp\")\n+            .setAssemblyChecker((OutputAnalyzer out, RunMode runMode) -> {\n+                    if (runMode == RunMode.TRAINING) {\n+                        out.shouldContain(\"Skipping foo\/package-info: Unsupported location\");\n+                    }\n+                })\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+class PackageInfoClassApp {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ This code is taken from test\/jdk\/java\/lang\/Package\/bootclasspath\/GetPackageFromBootClassPath.java\n+        Class<?> c = Class.forName(\"foo.Foo\", false, null);\n+        Package p = c.getPackage();\n+        Annotation[] annotations = p.getAnnotations();\n+        Class<?> annType = Class.forName(\"foo.MyAnnotation\", false, null);\n+        if (annotations.length != 1 ||\n+            annotations[0].annotationType() != annType) {\n+            throw new RuntimeException(\"Expected foo.MyAnnotation but got \" +\n+                Arrays.toString(annotations));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/PackageInfoClass.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -89,1 +89,1 @@\n-        TRAINING,       \/\/ -XX:DumpLoadedClassList OR {-XX:AOTMode=create -XX:AOTConfiguration}\n+        TRAINING,       \/\/ -XX:DumpLoadedClassList OR {-XX:AOTMode=record -XX:AOTConfiguration}\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import jdk.test.lib.cds.CDSAppTester.RunMode;\n@@ -30,2 +34,0 @@\n-import java.util.function.Consumer;\n-\n@@ -52,2 +54,2 @@\n-    private Consumer<OutputAnalyzer> assemblyChecker;\n-    private Consumer<OutputAnalyzer> productionChecker;\n+    private BiConsumer<OutputAnalyzer, RunMode> assemblyChecker;\n+    private BiConsumer<OutputAnalyzer, RunMode> productionChecker;\n@@ -101,1 +103,1 @@\n-    public SimpleCDSAppTester setAssemblyChecker(Consumer<OutputAnalyzer> checker) {\n+    public SimpleCDSAppTester setAssemblyChecker(BiConsumer<OutputAnalyzer, RunMode> checker) {\n@@ -106,1 +108,1 @@\n-    public SimpleCDSAppTester setProductionChecker(Consumer<OutputAnalyzer> checker) {\n+    public SimpleCDSAppTester setProductionChecker(BiConsumer<OutputAnalyzer, RunMode> checker) {\n@@ -111,0 +113,15 @@\n+\n+    public SimpleCDSAppTester setAssemblyChecker(Consumer<OutputAnalyzer> checker) {\n+        this.assemblyChecker = (OutputAnalyzer out, RunMode runMode) -> {\n+            checker.accept(out);\n+        };\n+        return this;\n+    }\n+\n+    public SimpleCDSAppTester setProductionChecker(Consumer<OutputAnalyzer> checker) {\n+        this.productionChecker = (OutputAnalyzer out, RunMode runMode) -> {\n+            checker.accept(out);\n+        };\n+        return this;\n+    }\n+\n@@ -140,1 +157,1 @@\n-                    assemblyChecker.accept(out);\n+                    assemblyChecker.accept(out, runMode);\n@@ -144,1 +161,1 @@\n-                    productionChecker.accept(out);\n+                    productionChecker.accept(out, runMode);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/SimpleCDSAppTester.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"}]}