{"files":[{"patch":"@@ -243,0 +243,1 @@\n+    \/\/ Parse integer.\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/CfgFile.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    public static Optional<Long> findAppLauncherPID(JPackageCommand cmd,\n+    public static void killAppLauncherProcess(JPackageCommand cmd,\n@@ -240,0 +240,14 @@\n+        var pids = findAppLauncherPIDs(cmd, launcherName);\n+        try {\n+            TKit.assertEquals(expectedCount, pids.length, String.format(\n+                    \"Check [%d] %s app launcher processes found running\",\n+                    expectedCount, Optional.ofNullable(launcherName).map(\n+                            str -> \"[\" + str + \"]\").orElse(\"<main>\")));\n+        } finally {\n+            if (pids.length != 0) {\n+                killProcess(pids[0]);\n+            }\n+        }\n+    }\n+\n+    private static long[] findAppLauncherPIDs(JPackageCommand cmd, String launcherName) {\n@@ -248,4 +262,2 @@\n-        if (expectedCount == 0) {\n-            TKit.assertEquals(\"No Instance(s) Available.\", output.getFirst().\n-                    trim(), \"Check no app launcher processes found running\");\n-            return Optional.empty();\n+        if (\"No Instance(s) Available.\".equals(output.getFirst().trim())) {\n+            return new long[0];\n@@ -278,4 +290,1 @@\n-        TKit.assertEquals(expectedCount, processes.size(), String.format(\n-                \"Check [%d] app launcher processes found running\", expectedCount));\n-\n-        switch (expectedCount) {\n+        switch (processes.size()) {\n@@ -283,0 +292,2 @@\n+                final long parentPID;\n+                final long childPID;\n@@ -284,1 +295,2 @@\n-                    return Optional.of(processes.get(0)[0]);\n+                    parentPID = processes.get(0)[0];\n+                    childPID = processes.get(1)[0];\n@@ -286,1 +298,2 @@\n-                    return Optional.of(processes.get(1)[0]);\n+                    parentPID = processes.get(1)[0];\n+                    childPID = processes.get(0)[0];\n@@ -288,1 +301,2 @@\n-                    throw new RuntimeException(\"App launcher processes unrelated\");\n+                    TKit.assertUnexpected(\"App launcher processes unrelated\");\n+                    return null; \/\/ Unreachable\n@@ -290,0 +304,1 @@\n+                return new long[]{parentPID, childPID};\n@@ -292,1 +307,7 @@\n-                return Optional.of(processes.get(0)[0]);\n+                return new long[]{processes.get(0)[0]};\n+            }\n+            default -> {\n+                TKit.assertUnexpected(String.format(\n+                        \"Unexpected numer of running processes [%d]\",\n+                        processes.size()));\n+                return null; \/\/ Unreachable\n@@ -294,2 +315,0 @@\n-            default ->\n-                throw new IllegalArgumentException();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":34,"deletions":15,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n-import static jdk.jpackage.test.WindowsHelper.findAppLauncherPID;\n-import static jdk.jpackage.test.WindowsHelper.killProcess;\n+import static jdk.jpackage.test.WindowsHelper.killAppLauncherProcess;\n@@ -70,5 +69,2 @@\n-            \/\/ Get PID of the main app launcher process\n-            final long pid = findAppLauncherPID(cmd, null, 2).get();\n-\n-            \/\/ Kill the main app launcher process\n-            killProcess(pid);\n+            \/\/ Find the main app launcher process and kill it\n+            killAppLauncherProcess(cmd, null, 2);\n@@ -79,1 +75,1 @@\n-            findAppLauncherPID(cmd, null, 0);\n+            killAppLauncherProcess(cmd, null, 0);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8301247Test.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,1 +24,12 @@\n- \/* @test\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.CfgFile;\n+import jdk.jpackage.test.HelloApp;\n+import static jdk.jpackage.test.WindowsHelper.killAppLauncherProcess;\n+\n+\/* @test\n@@ -36,1 +47,0 @@\n- *\n@@ -38,11 +48,0 @@\n-import java.io.IOException;\n-import java.time.Duration;\n-import java.util.List;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import jdk.jpackage.test.JPackageCommand;\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.CfgFile;\n-import jdk.jpackage.test.HelloApp;\n-import static jdk.jpackage.test.WindowsHelper.findAppLauncherPID;\n-import static jdk.jpackage.test.WindowsHelper.killProcess;\n@@ -107,6 +106,2 @@\n-                \/\/ Get PID of the main app launcher process\n-                final long pid = findAppLauncherPID(cmd, null,\n-                        expectedNoRestarted ? 1 : 2).get();\n-\n-                \/\/ Kill the main app launcher process\n-                killProcess(pid);\n+                \/\/ Find the main app launcher process and kill it\n+                killAppLauncherProcess(cmd, null, expectedNoRestarted ? 1 : 2);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinNoRestartTest.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"}]}