{"files":[{"patch":"@@ -1419,0 +1419,8 @@\n+Node* MaxNode::Identity(PhaseGVN* phase) {\n+  if (in(1) == in(2)) {\n+      return in(1);\n+  }\n+\n+  return AddNode::Identity(phase);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -272,0 +272,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8323429\n+ * @summary Test min and max optimizations\n+ * @library \/test\/lib \/\n+ * @run driver compiler.intrinsics.math.TestMinMaxOpt\n+ *\/\n+\n+package compiler.intrinsics.math;\n+\n+import compiler.lib.ir_framework.Argument;\n+import compiler.lib.ir_framework.Arguments;\n+import compiler.lib.ir_framework.Check;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+public class TestMinMaxOpt {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MIN_I, \"0\"})\n+    private static int testIntMin(int v) {\n+        return Math.min(v, v);\n+    }\n+\n+    @Check(test = \"testIntMin\")\n+    public static void checkTestIntMin(int result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MAX_I, \"0\"})\n+    private static int testIntMax(int v) {\n+        return Math.max(v, v);\n+    }\n+\n+    @Check(test = \"testIntMax\")\n+    public static void checkTestIntMax(int result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MIN_L, \"0\"})\n+    private static long testLongMin(long v) {\n+        return Math.min(v, v);\n+    }\n+\n+    @Check(test = \"testLongMin\")\n+    public static void checkTestLongMin(long result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MAX_L, \"0\"})\n+    private static long testLongMax(long v) {\n+        return Math.max(v, v);\n+    }\n+\n+    @Check(test = \"testLongMax\")\n+    public static void checkTestLongMax(long result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MIN_F, \"0\"})\n+    private static float testFloatMin(float v) {\n+        return Math.min(v, v);\n+    }\n+\n+    @Check(test = \"testFloatMin\")\n+    public static void checkTestFloatMin(float result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MAX_F, \"0\"})\n+    private static float testFloatMax(float v) {\n+        return Math.max(v, v);\n+    }\n+\n+    @Check(test = \"testFloatMax\")\n+    public static void checkTestFloatMax(float result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MIN_D, \"0\"})\n+    private static double testDoubleMin(double v) {\n+        return Math.min(v, v);\n+    }\n+\n+    @Check(test = \"testDoubleMin\")\n+    public static void checkTestDoubleMin(double result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.NUMBER_42})\n+    @IR(counts = {IRNode.MAX_D, \"0\"})\n+    private static double testDoubleMax(double v) {\n+        return Math.max(v, v);\n+    }\n+\n+    @Check(test = \"testDoubleMax\")\n+    public static void checkTestDoubleMax(double result) {\n+        if (result != 42) {\n+            throw new RuntimeException(\"Incorrect result: \" + result);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestMinMaxOpt.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -822,1 +822,6 @@\n-        beforeMatchingNameRegex(MAX, \"Max(I|L)\");\n+        beforeMatchingNameRegex(MAX, \"Max(I|L|F|D)\");\n+    }\n+\n+    public static final String MAX_D = PREFIX + \"MAX_D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MAX_D, \"MaxD\");\n@@ -835,0 +840,5 @@\n+    public static final String MAX_F = PREFIX + \"MAX_F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MAX_F, \"MaxF\");\n+    }\n+\n@@ -885,0 +895,5 @@\n+    public static final String MIN_D = PREFIX + \"MIN_D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MIN_D, \"MinD\");\n+    }\n+\n@@ -895,0 +910,5 @@\n+    public static final String MIN_F = PREFIX + \"MIN_F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MIN_F, \"MinF\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-        counts = {IRNode.MAX_VD, \">0\"})\n+        counts = {IRNode.MAX_VD, \"0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}