{"files":[{"patch":"@@ -161,0 +161,4 @@\n+    \/\/ Returns the peak size during this phase: how high usage rose above either\n+    \/\/ start or end of phase. The background is that we want to know the max. memory\n+    \/\/ consumption during this phase, but that may not be reflected by the start or the\n+    \/\/ end counters if an Arena was created during the phase and only lived temporarily.\n@@ -243,2 +247,0 @@\n-  DEBUG_ONLY(void verify() const;)\n-\n","filename":"src\/hotspot\/share\/compiler\/compilationMemStatInternals.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-    \/\/ Careful, Compile::current() may be NULL in a short time window when Compile itself\n+    \/\/ Careful, Compile::current() may be null in a short time window when Compile itself\n@@ -419,16 +419,0 @@\n-#ifdef ASSERT\n-void ArenaStatCounter::verify() const {\n-  assert(_current <= _peak, \"Sanity\");\n-#ifdef COMPILER2\n-  size_t sum = 0;\n-  for (int phaseid = 0; phaseid < phase_trc_id_max; phaseid++) {\n-    for (int arena_tag = 0; arena_tag < arena_tag_max; arena_tag ++) {\n-      sum += _counters_at_global_peak.at(phaseid, arena_tag);\n-    }\n-  }\n-  assert(sum == _peak, \"per phase counter mismatch - %zu, expected %zu\", sum, _peak);\n-#endif\n-}\n-#endif \/\/ ASSERT\n-\n-\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-static bool print_final_memstat_report = false;\n@@ -485,4 +484,0 @@\n-bool CompilerOracle::should_print_final_memstat_report() {\n-  return print_final_memstat_report;\n-}\n-\n@@ -714,1 +709,0 @@\n-    print_final_memstat_report = true;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -169,1 +169,0 @@\n-  static bool should_print_final_memstat_report();\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,1 +99,2 @@\n-  FN(reglive,     C2 Register Allocation Live Arena) \\\n+  FN(states,      C2 Matcher States Arena) \\\n+  FN(reglive,     C2 Register Allocation Live Arenas) \\\n@@ -101,0 +102,1 @@\n+  FN(superword,   C2 SuperWord Arenas) \\\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  ResourceArea(size_t init_size, MemTag mem_tag = mtThread) :\n-    Arena(mem_tag, Arena::Tag::tag_ra, init_size) DEBUG_ONLY(COMMA _nesting(0)) {\n+  ResourceArea(size_t init_size, MemTag mem_tag = mtThread, Arena::Tag arena_tag = Arena::Tag::tag_ra) :\n+    Arena(mem_tag, arena_tag, init_size) DEBUG_ONLY(COMMA _nesting(0)) {\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -662,1 +662,1 @@\n-      _Compile_types(mtCompiler),\n+      _Compile_types(mtCompiler, Arena::Tag::tag_type),\n@@ -932,1 +932,1 @@\n-      _Compile_types(mtCompiler),\n+      _Compile_types(mtCompiler, Arena::Tag::tag_type),\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1698,1 +1698,1 @@\n-  ResourceArea live_arena(mtCompiler);      \/\/ Arena for liveness\n+  ResourceArea live_arena(mtCompiler, Arena::Tag::tag_reglive);      \/\/ Arena for liveness\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  _states_arena(Chunk::medium_size, mtCompiler),\n+  _states_arena(Chunk::medium_size, mtCompiler, Arena::Tag::tag_states),\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  _arena(mtCompiler),\n+  _arena(mtCompiler, Arena::Tag::tag_superword),\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-    _arena(mtCompiler),\n+    _arena(mtCompiler, Arena::Tag::tag_superword),\n@@ -672,1 +672,1 @@\n-    _arena(mtCompiler),\n+    _arena(mtCompiler, Arena::Tag::tag_superword),\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    _arena(mtCompiler),\n+    _arena(mtCompiler, Arena::Tag::tag_superword),\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  if (PrintCompilerMemoryStatisticsAtExit || CompilerOracle::should_print_final_memstat_report()) {\n+  if (PrintCompilerMemoryStatisticsAtExit) {\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -371,1 +371,0 @@\n-#define PROPERFMT_W(width)    \"%\" #width \"zu%s\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -215,5 +215,0 @@\n-  put(' ', count);\n-}\n-\n-void outputStream::put(char ch, int count) {\n-  assert(ch != 0, \"please fix call site\");\n@@ -221,2 +216,1 @@\n-  char tmp[8];\n-  memset(tmp, ch, sizeof(tmp));\n+\n@@ -225,1 +219,1 @@\n-    this->write(tmp, nw);\n+    this->write(\"        \", nw);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,0 +81,3 @@\n+        options.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        options.add(\"-XX:+PrintCompilerMemoryStatisticsAtExit\");\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintMemStat.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}