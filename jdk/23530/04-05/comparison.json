{"files":[{"patch":"@@ -92,1 +92,1 @@\n-template <typename T, int max>\n+template <typename T, int size>\n@@ -94,2 +94,2 @@\n-  STATIC_ASSERT((max * 2) < INT_MAX);\n-  T _v[max];\n+  STATIC_ASSERT((size * 2) < INT_MAX);\n+  T _v[size];\n@@ -101,1 +101,1 @@\n-  static int pos_to_index(int pos)  { return pos % max; }\n+  static int pos_to_index(int pos)  { return pos % size; }\n@@ -113,1 +113,1 @@\n-    if (_pos >= max) {\n+    if (_pos >= size) {\n@@ -118,2 +118,2 @@\n-      _pos -= max;\n-      _oldest -= max;\n+      _pos -= size;\n+      _oldest -= size;\n","filename":"src\/hotspot\/share\/compiler\/compilationMemStatInternals.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -135,1 +135,0 @@\n-  constexpr bool omit_empty_phases = false;\n@@ -149,3 +148,0 @@\n-      if (omit_empty_phases && e._bytes.end_delta() == 0 && e._bytes.temporary_peak_size() == 0) {\n-        return;\n-      }\n@@ -205,2 +201,2 @@\n-    e._bytes.start = e._bytes.cur = e._bytes.peak = cur_abs;\n-    e._live_nodes.start = e._live_nodes.cur = e._live_nodes.peak = cur_nodes;\n+    e._bytes.init(cur_abs);\n+    e._live_nodes.init(cur_nodes);\n@@ -255,1 +251,0 @@\n-if (UseNewCode){ printf(\"%s\\n\",tmp); fflush(stdout);}\n@@ -979,1 +974,1 @@\n-void CompilationMemoryStatistic::on_phase_start_0(int phase_trc_id, const char* text) {\n+void CompilationMemoryStatistic::on_phase_start(int phase_trc_id, const char* text) {\n@@ -994,1 +989,1 @@\n-void CompilationMemoryStatistic::on_phase_end_0() {\n+void CompilationMemoryStatistic::on_phase_end() {\n@@ -1091,1 +1086,1 @@\n-      Compile::TracePhase tp(Phase::_t_testTimer1);\n+      Compile::TracePhase tp(Phase::_t_testPhase1);\n@@ -1093,1 +1088,1 @@\n-      ar.Amalloc(2 * M); \/\/ phase-local peak, should show up at MY-TESTPHASE-2\n+      ar.Amalloc(2 * M); \/\/ phase-local peak\n@@ -1096,1 +1091,1 @@\n-      Compile::TracePhase tp(Phase::_t_testTimer2);\n+      Compile::TracePhase tp(Phase::_t_testPhase2);\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,3 +40,0 @@\n-  static void on_phase_start_0(int phase_trc_id, const char* text);\n-  static void on_phase_end_0();\n-\n@@ -58,12 +55,2 @@\n-  static inline void on_phase_start(int phase_trc_id, const char* text) {\n-    if (enabled()) {\n-      on_phase_start_0(phase_trc_id, text);\n-    }\n-  }\n-\n-  static inline void on_phase_end() {\n-    if (enabled()) {\n-      on_phase_end_0();\n-    }\n-  }\n-\n+  static void on_phase_start(int phase_trc_id, const char* text);\n+  static void on_phase_end();\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -133,2 +133,0 @@\n-static volatile uint64_t xxx = 0;\n-\n@@ -192,2 +190,1 @@\n-  if (c->stamp() != 0) {\n-    assert(CompilationMemoryStatistic::enabled(), \"we stamped, so memstat was enabled already\");\n+  if (CompilationMemoryStatistic::enabled() && c->stamp() != 0) {\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  FN(index,       C2 Index arena) \\\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4332,1 +4332,3 @@\n-  CompilationMemoryStatistic::on_phase_start((int)id, name);\n+  if (CompilationMemoryStatistic::enabled()) {\n+    CompilationMemoryStatistic::on_phase_start((int)id, name);\n+  }\n@@ -4341,1 +4343,3 @@\n-  CompilationMemoryStatistic::on_phase_end();\n+  if (CompilationMemoryStatistic::enabled()) {\n+    CompilationMemoryStatistic::on_phase_end();\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,2 +125,2 @@\n-    f(   _t_testTimer1,              \"testTimer1\")               \\\n-    f(   _t_testTimer2,              \"testTimer2\")\n+    f(   _t_testPhase1,              \"testPhase1\")               \\\n+    f(   _t_testPhase2,              \"testPhase2\")\n","filename":"src\/hotspot\/share\/opto\/phase.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1402,0 +1402,3 @@\n+  product(bool, PrintCompilerMemoryStatisticsAtExit, false, DIAGNOSTIC,     \\\n+          \"Print compiler memory statistics upon VM exit.\")                 \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  if (CompilerOracle::should_print_final_memstat_report()) {\n+  if (PrintCompilerMemoryStatisticsAtExit || CompilerOracle::should_print_final_memstat_report()) {\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,4 +102,6 @@\n-        \/\/ C2 will allocate them in two steps: first 2MB inside testPhase 1 in a temporary arena that will be gone\n-        \/\/ by phase end. So, in the phase timeline these 2MB must show up as \"significant temporary peak\".\n-        \/\/ In testPhase2, we allocate 32MB from resource area, which is leaked until the end of the compilation. This\n-        \/\/ means that these 32MB will show up as permanent memory increase in the phasetimeline.\n+        \/\/ C2 will allocate them in two steps: first 2MB inside phase \"testPhase1\" in a temporary arena\n+        \/\/ that will be gone by phase end. So, in the phase timeline these 2MB must show up as\n+        \/\/ \"significant temporary peak\".\n+        \/\/ In a second phase \"testPhase2\", we allocate 32MB from resource area, which is leaked until\n+        \/\/ the end of the compilation. This means that these 32MB will show up as permanent memory\n+        \/\/ increase in the per-phase-timeline.\n@@ -177,3 +179,3 @@\n-                oa.shouldMatch(\".*testTimer2 +33554432 +33554432 +0 +0 +0 +0 +0.*\");\n-                oa.shouldMatch(\" +>\\\\d+ +testTimer1.*significant temporary peak: \\\\d+ \\\\(\\\\+2098136\\\\)\");\n-                oa.shouldMatch(\" +>\\\\d+ +testTimer2 +\\\\d+ +\\\\(\\\\+33554432\\\\).*\");\n+                oa.shouldMatch(\".*testPhase2 +33554432 +33554432 +0 +0 +0 +0 +0.*\");\n+                oa.shouldMatch(\" +>\\\\d+ +testPhase1.*significant temporary peak: \\\\d+ \\\\(\\\\+2098136\\\\)\");\n+                oa.shouldMatch(\" +>\\\\d+ +testPhase2 +\\\\d+ +\\\\(\\\\+33554432\\\\).*\");\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandMemLimit.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Checks that -XX:CompileCommand=PrintMemStat,... works\n+ * @summary Checks that -XX:CompileCommand=MemStat,...,print works with C2\n@@ -35,1 +35,1 @@\n- * @summary Checks that -XX:CompileCommand=PrintMemStat,... works\n+ * @summary Checks that -XX:CompileCommand=MemStat,...,print works with C1\n@@ -86,1 +86,1 @@\n-        \/\/ We expect two printouts for \"PrintMemStat\". A line at compilation time, and a line in a summary report\n+        \/\/ We expect two printouts for \"MemStat\". A line at compilation time, and a line in a summary report\n@@ -110,3 +110,3 @@\n-                oa.shouldMatch(\".*testTimer2 +33554432 +33554432 +0 +0 +0 +0 +0.*\");\n-                oa.shouldMatch(\" +>\\\\d+ +testTimer1.*significant temporary peak: \\\\d+ \\\\(\\\\+2098136\\\\)\");\n-                oa.shouldMatch(\" +>\\\\d+ +testTimer2 +\\\\d+ +\\\\(\\\\+33554432\\\\).*\");\n+                oa.shouldMatch(\".*testPhase2 +33554432 +33554432 +0 +0 +0 +0 +0.*\");\n+                oa.shouldMatch(\" +>\\\\d+ +testPhase1.*significant temporary peak: \\\\d+ \\\\(\\\\+2098136\\\\)\");\n+                oa.shouldMatch(\" +>\\\\d+ +testPhase2 +\\\\d+ +\\\\(\\\\+33554432\\\\).*\");\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/CompileCommandPrintMemStat.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}