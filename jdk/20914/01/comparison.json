{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.access.foreign.MappedMemoryUtilsProxy;\n@@ -807,0 +808,1 @@\n+\n@@ -889,17 +891,2 @@\n-                public void force(FileDescriptor fd, long address, boolean isSync, long offset, long size) {\n-                    MappedMemoryUtils.force(fd, address, isSync, offset, size);\n-                }\n-\n-                @Override\n-                public void load(long address, boolean isSync, long size) {\n-                    MappedMemoryUtils.load(address, isSync, size);\n-                }\n-\n-                @Override\n-                public void unload(long address, boolean isSync, long size) {\n-                    MappedMemoryUtils.unload(address, isSync, size);\n-                }\n-\n-                @Override\n-                public boolean isLoaded(long address, boolean isSync, long size) {\n-                    return MappedMemoryUtils.isLoaded(address, isSync, size);\n+                public MappedMemoryUtilsProxy mappedMemoryUtils() {\n+                    return MappedMemoryUtils.PROXY;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.access.foreign.MappedMemoryUtilsProxy;\n@@ -197,1 +198,1 @@\n-        return SCOPED_MEMORY_ACCESS.isLoaded(session(), address, isSync, capacity());\n+        return SCOPED_MEMORY_ACCESS.isLoaded(session(), MappedMemoryUtils.PROXY, address, isSync, capacity());\n@@ -215,1 +216,1 @@\n-            SCOPED_MEMORY_ACCESS.load(session(), address, isSync, capacity());\n+            SCOPED_MEMORY_ACCESS.load(session(), MappedMemoryUtils.PROXY, address, isSync, capacity());\n@@ -315,1 +316,1 @@\n-            SCOPED_MEMORY_ACCESS.force(session(), fd, address, isSync, index, length);\n+            SCOPED_MEMORY_ACCESS.force(session(), MappedMemoryUtils.PROXY, fd, address, isSync, index, length);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+\n+import jdk.internal.access.foreign.MappedMemoryUtilsProxy;\n@@ -128,1 +130,0 @@\n-        isLoaded0(0, 0, 0);\n@@ -179,0 +180,22 @@\n+\n+    static final MappedMemoryUtilsProxy PROXY = new MappedMemoryUtilsProxy() {\n+        @Override\n+        public boolean isLoaded(long address, boolean isSync, long size) {\n+            return MappedMemoryUtils.isLoaded(address, isSync, size);\n+        }\n+\n+        @Override\n+        public void load(long address, boolean isSync, long size) {\n+            MappedMemoryUtils.load(address, isSync, size);\n+        }\n+\n+        @Override\n+        public void unload(long address, boolean isSync, long size) {\n+            MappedMemoryUtils.unload(address, isSync, size);\n+        }\n+\n+        @Override\n+        public void force(FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+            MappedMemoryUtils.force(fd, address, isSync, index, length);\n+        }\n+    };\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedMemoryUtils.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.access.foreign.MappedMemoryUtilsProxy;\n@@ -110,10 +111,0 @@\n-    \/**\n-     * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl} and byte buffer var handle views.\n-     *\/\n-    void force(FileDescriptor fd, long address, boolean isSync, long offset, long size);\n-\n-    \/**\n-     * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl} and byte buffer var handle views.\n-     *\/\n-    void load(long address, boolean isSync, long size);\n-\n@@ -123,6 +114,1 @@\n-    void unload(long address, boolean isSync, long size);\n-\n-    \/**\n-     * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl} and byte buffer var handle views.\n-     *\/\n-    boolean isLoaded(long address, boolean isSync, long size);\n+    MappedMemoryUtilsProxy mappedMemoryUtils();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaNioAccess.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+package jdk.internal.access.foreign;\n+\n+import java.io.FileDescriptor;\n+\n+\/**\n+ * This proxy interface is required to allow access to @{code MappedMemoryUtils} methods from {@code ScopedMemoryAccess}.\n+ * This allows to avoid pesky initialization issues in the middle of memory mapped scoped methods.\n+ *\/\n+public interface MappedMemoryUtilsProxy {\n+    boolean isLoaded(long address, boolean isSync, long size);\n+    void load(long address, boolean isSync, long size);\n+    void unload(long address, boolean isSync, long size);\n+    void force(FileDescriptor fd, long address, boolean isSync, long index, long length);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MappedMemoryUtilsProxy.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -75,1 +75,2 @@\n-            SCOPED_MEMORY_ACCESS.load(sessionImpl(), min, unmapper.isSync(), length);\n+            SCOPED_MEMORY_ACCESS.load(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+                    min, unmapper.isSync(), length);\n@@ -81,1 +82,2 @@\n-            SCOPED_MEMORY_ACCESS.unload(sessionImpl(), min, unmapper.isSync(), length);\n+            SCOPED_MEMORY_ACCESS.unload(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+                    min, unmapper.isSync(), length);\n@@ -86,1 +88,3 @@\n-        return unmapper == null || SCOPED_MEMORY_ACCESS.isLoaded(sessionImpl(), min, unmapper.isSync(), length);\n+        return unmapper == null ||\n+                SCOPED_MEMORY_ACCESS.isLoaded(sessionImpl(),\n+                        NIO_ACCESS.mappedMemoryUtils(), min, unmapper.isSync(), length);\n@@ -91,1 +95,2 @@\n-            SCOPED_MEMORY_ACCESS.force(sessionImpl(), unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n+            SCOPED_MEMORY_ACCESS.force(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+                    unmapper.fileDescriptor(), min, unmapper.isSync(), 0, length);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.access.foreign.MappedMemoryUtilsProxy;\n@@ -240,1 +241,1 @@\n-    public boolean isLoaded(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public boolean isLoaded(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -242,1 +243,1 @@\n-            return isLoadedInternal(session, address, isSync, size);\n+            return isLoadedInternal(session, mappedUtils, address, isSync, size);\n@@ -249,1 +250,1 @@\n-    public boolean isLoadedInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public boolean isLoadedInternal(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -254,1 +255,1 @@\n-            return SharedSecrets.getJavaNioAccess().isLoaded(address, isSync, size);\n+            return mappedUtils.isLoaded(address, isSync, size);\n@@ -261,1 +262,1 @@\n-    public void load(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public void load(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -263,1 +264,1 @@\n-            loadInternal(session, address, isSync, size);\n+            loadInternal(session, mappedUtils, address, isSync, size);\n@@ -270,1 +271,1 @@\n-    public void loadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public void loadInternal(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -275,1 +276,1 @@\n-            SharedSecrets.getJavaNioAccess().load(address, isSync, size);\n+            mappedUtils.load(address, isSync, size);\n@@ -282,1 +283,1 @@\n-    public void unload(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public void unload(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -284,1 +285,1 @@\n-            unloadInternal(session, address, isSync, size);\n+            unloadInternal(session, mappedUtils, address, isSync, size);\n@@ -291,1 +292,1 @@\n-    public void unloadInternal(MemorySessionImpl session, long address, boolean isSync, long size) {\n+    public void unloadInternal(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, long address, boolean isSync, long size) {\n@@ -296,1 +297,1 @@\n-            SharedSecrets.getJavaNioAccess().unload(address, isSync, size);\n+            mappedUtils.unload(address, isSync, size);\n@@ -303,1 +304,1 @@\n-    public void force(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void force(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -305,1 +306,1 @@\n-            forceInternal(session, fd, address, isSync, index, length);\n+            forceInternal(session, mappedUtils, fd, address, isSync, index, length);\n@@ -312,1 +313,1 @@\n-    public void forceInternal(MemorySessionImpl session, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n+    public void forceInternal(MemorySessionImpl session, MappedMemoryUtilsProxy mappedUtils, FileDescriptor fd, long address, boolean isSync, long index, long length) {\n@@ -317,1 +318,1 @@\n-            SharedSecrets.getJavaNioAccess().force(fd, address, isSync, index, length);\n+            mappedUtils.force(fd, address, isSync, index, length);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"}]}