{"files":[{"patch":"@@ -91,1 +91,2 @@\n-  static const constexpr int _nr_buckets = 4099;\n+  static const constexpr int default_nr_buckets = 4099;\n+  int _nr_buckets;\n@@ -109,2 +110,2 @@\n-  NativeCallStackStorage(bool is_detailed_mode)\n-  : _arena(mtNMT), _buckets(nullptr), _stacks(), _is_detailed_mode(is_detailed_mode) {\n+  NativeCallStackStorage(bool is_detailed_mode, int nr_buckets = default_nr_buckets)\n+  : _arena(mtNMT), _nr_buckets(nr_buckets), _buckets(nullptr), _stacks(), _is_detailed_mode(is_detailed_mode) {\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-  friend class VMATreeTest;\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"nmt\/nmtNativeCallStackStorage.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"unittest.hpp\"\n+\n+using NCSS = NativeCallStackStorage;\n+\n+class NativeCallStackStorageTest : public testing::Test {};\n+\n+TEST_VM_F(NativeCallStackStorageTest, DoNotStoreStackIfNotDetailed) {\n+  NativeCallStack ncs{};\n+  NCSS ncss(false);\n+  NCSS::StackIndex si = ncss.push(ncs);\n+  NCSS::StackIndex empty;\n+  EXPECT_TRUE(NCSS::StackIndex::equals(si, empty));\n+}\n+\n+TEST_VM_F(NativeCallStackStorageTest, CollisionsReceiveDifferentIndexes) {\n+  constexpr const int nr_of_stacks = 10;\n+  NativeCallStack ncs_arr[nr_of_stacks];\n+  for (int i = 0; i < nr_of_stacks; i++) {\n+    ncs_arr[i] = NativeCallStack((address*)(&i), 1);\n+  }\n+  NCSS ncss(true, 1);\n+  NCSS::StackIndex si_arr[nr_of_stacks];\n+  for (int i = 0; i < nr_of_stacks; i++) {\n+    si_arr[i] = ncss.push(ncs_arr[i]);\n+  }\n+  \/\/ Every SI should be different as every sack is different\n+  for (int i = 0; i < nr_of_stacks; i++) {\n+    for (int j = 0; j < nr_of_stacks; j++) {\n+      if (i == j) continue;\n+      EXPECT_FALSE(NCSS::StackIndex::equals(si_arr[i],si_arr[j]));\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_nativecallstackstorage.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -41,6 +41,2 @@\n-  NativeCallStack make_stack(size_t a, size_t b, size_t c, size_t d) {\n-    NativeCallStack stack;\n-    stack._stack[0] = (address)a;\n-    stack._stack[1] = (address)b;\n-    stack._stack[2] = (address)c;\n-    stack._stack[3] = (address)d;\n+  NativeCallStack make_stack(size_t a) {\n+    NativeCallStack stack((address*)&a, 1);\n@@ -50,5 +46,2 @@\n-  NativeCallStack stack1 = make_stack(size_t{0x89ac},\n-                                      size_t{0x1fdd},\n-                                      size_t{0x2997},\n-                                      size_t{0x2add});\n-  NativeCallStack stack2 = make_stack(0x123, 0x456,0x789, 0xAAAA);\n+  NativeCallStack stack1 = make_stack(0x89ac);\n+  NativeCallStack stack2 = make_stack(0x123);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"}]}