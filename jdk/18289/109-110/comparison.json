{"files":[{"patch":"@@ -879,1 +879,1 @@\n-void MemDetailReporter::report_physical_devices() {\n+void MemDetailReporter::report_memory_file_allocations() {\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    report_physical_devices();\n+    report_memory_file_allocations();\n@@ -177,1 +177,1 @@\n-  void report_physical_devices();\n+  void report_memory_file_allocations();\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,0 +66,4 @@\n+#ifdef ASSERT\n+  VMATree::TreapNode* broken_start = nullptr;\n+  VMATree::TreapNode* broken_end = nullptr;\n+#endif\n@@ -72,1 +76,6 @@\n-    assert(prev->val().out.type() == current->val().in.type(), \"must be\");\n+#ifdef ASSERT\n+    if (broken_start != nullptr && prev->val().out.type() != current->val().in.type()) {\n+      broken_start = prev;\n+      broken_end = current;\n+    }\n+#endif\n@@ -86,0 +95,9 @@\n+#ifdef ASSERT\n+  if (broken_start != nullptr) {\n+    tty->print_cr(\"Broken tree found with first occurrence at nodes %lu, %lu\",\n+                  broken_start->key(), broken_end->key());\n+    tty->print_cr(\"Expected start out to have same type as end in, but was: %s, %s\",\n+                  VMATree::statetype_to_string(broken_start->val().out.type()),\n+                  VMATree::statetype_to_string(broken_end->val().in.type()));\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-    int bucket = value.calculate_hash() % _nr_buckets;\n-    Link* link = _buckets[bucket];\n+    int bucket = value.calculate_hash() % _table_size;\n+    Link* link = _table[bucket];\n@@ -82,2 +82,2 @@\n-    Link* new_link = new (&_arena) Link(_buckets[bucket], StackIndex(idx));\n-    _buckets[bucket] = new_link;\n+    Link* new_link = new (&_arena) Link(_table[bucket], StackIndex(idx));\n+    _table[bucket] = new_link;\n@@ -91,3 +91,3 @@\n-  static const constexpr int default_nr_buckets = 4099;\n-  int _nr_buckets;\n-  Link** _buckets;\n+  static const constexpr int default_table_size = 4099;\n+  int _table_size;\n+  Link** _table;\n@@ -115,2 +115,2 @@\n-  NativeCallStackStorage(bool is_detailed_mode, int nr_buckets = default_nr_buckets)\n-  : _arena(mtNMT), _nr_buckets(nr_buckets), _buckets(nullptr), _stacks(), _is_detailed_mode(is_detailed_mode), _fake_stack(NativeCallStack::FakeMarker::its_fake) {\n+  NativeCallStackStorage(bool is_detailed_mode, int table_size = default_table_size)\n+  : _arena(mtNMT), _table_size(table_size), _table(nullptr), _stacks(), _is_detailed_mode(is_detailed_mode), _fake_stack(NativeCallStack::FakeMarker::its_fake) {\n@@ -118,3 +118,3 @@\n-      _buckets = NEW_ARENA_ARRAY(&_arena, Link*, _nr_buckets);\n-      for (int i = 0; i < _nr_buckets; i++) {\n-        _buckets[i] = nullptr;\n+      _table = NEW_ARENA_ARRAY(&_arena, Link*, _table_size);\n+      for (int i = 0; i < _table_size; i++) {\n+        _table[i] = nullptr;\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+const char* VMATree::statetype_strings[3] = {\n+  \"reserved\", \"committed\", \"released\",\n+};\n+\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include <cstdint>\n@@ -55,1 +56,10 @@\n-  enum class StateType : uint8_t { Reserved, Committed, Released };\n+  enum class StateType : uint8_t { Reserved, Committed, Released, LAST };\n+\n+private:\n+  static const char* statetype_strings[static_cast<uint8_t>(StateType::LAST)];\n+\n+public:\n+  static const char* statetype_to_string(StateType type) {\n+    assert(type != StateType::LAST, \"must be\");\n+    return statetype_strings[static_cast<uint8_t>(type)];\n+  }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}