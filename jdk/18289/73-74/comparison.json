{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -45,0 +46,8 @@\n+\/\/\n+\/\/ COMPARATOR must have a static function `cmp(a,b)` which returns:\n+\/\/     - an int < 0 when a < b\n+\/\/     - an int == 0 when a == b\n+\/\/     - an int > 0 when a > b\n+\/\/ ALLOCATOR must check for oom and exit, as Treap currently does not handle the allocation\n+\/\/ failing.\n+\n@@ -67,7 +76,2 @@\n-    const K& key() const {\n-      return _key;\n-    }\n-\n-    V& val() {\n-      return _value;\n-    }\n+    const K& key() const { return _key; }\n+    V& val() { return _value; }\n@@ -75,7 +79,2 @@\n-    TreapNode* left() const {\n-      return _left;\n-    }\n-\n-    TreapNode* right() const {\n-      return _right;\n-    }\n+    TreapNode* left() const { return _left; }\n+    TreapNode* right() const { return _right; }\n@@ -87,1 +86,1 @@\n-  DEBUG_ONLY(int _node_count;)\n+  int _node_count;\n@@ -91,4 +90,4 @@\n-    static const uint64_t PrngMult = 0x5DEECE66DLL;\n-    static const uint64_t PrngAdd = 0xB;\n-    static const uint64_t PrngModPower = 48;\n-    static const uint64_t PrngModMask = (static_cast<uint64_t>(1) << PrngModPower) - 1;\n+    static const constexpr uint64_t PrngMult = 0x5DEECE66DLL;\n+    static const constexpr uint64_t PrngAdd = 0xB;\n+    static const constexpr uint64_t PrngModPower = 48;\n+    static const constexpr uint64_t PrngModMask = (static_cast<uint64_t>(1) << PrngModPower) - 1;\n@@ -171,2 +170,2 @@\n-  bool verify_self() {\n-    double expected_maximum_depth = log(this->_node_count+1) * 5;\n+  void verify_self() {\n+    constexpr const double expected_maximum_depth = log(this->_node_count+1) * 5;\n@@ -182,1 +181,1 @@\n-    uint64_t positive_infinity = 0xFFFFFFFFFFFFFFFF;\n+    constexpr const uint64_t positive_infinity = 0xFFFFFFFFFFFFFFFF;\n@@ -188,6 +187,4 @@\n-      if (maximum_depth_found < head.depth) {\n-        maximum_depth_found = head.depth;\n-      }\n-      if (head.parent_prio < head.n->_priority) {\n-        return false;\n-      }\n+      maximum_depth_found = MAX2(maximum_depth_found, head.depth);\n+\n+      assert(head.parent_prio <= head.n->_priority, \"broken priority invariant\");\n+\n@@ -197,3 +194,2 @@\n-    if (maximum_depth_found > (int)expected_maximum_depth) {\n-      return false;\n-    }\n+    assert(maximum_depth_found > (int)expected_maximum_depth, \"depth unexpectedly large\");\n+\n@@ -203,0 +199,1 @@\n+    int seen_count = 0;\n@@ -204,0 +201,1 @@\n+      seen_count++;\n@@ -208,2 +206,1 @@\n-      int c = COMPARATOR::cmp(last_seen->key(), node->key());\n-      if (c > 0) {\n+      if (COMPARATOR::cmp(last_seen->key(), node->key()) > 0) {\n@@ -214,1 +211,2 @@\n-    return !failed;\n+    assert(seen_count == _node_count, \"the number of visited nodes do not match with the number of stored nodes\");\n+    assert(!failed, \"keys was not monotonically strongly increasing when visiting in order\");\n@@ -221,3 +219,2 @@\n-  _prng_seed(seed)\n-  DEBUG_ONLY(COMMA _node_count(0)) {\n-  }\n+    _prng_seed(seed),\n+    _node_count(0) {}\n@@ -238,1 +235,1 @@\n-    DEBUG_ONLY(_node_count++;)\n+    _node_count++;\n@@ -254,1 +251,1 @@\n-    node_pair fst_split = split(this->_root, k, LEQ);\n+    node_pair first_split = split(this->_root, k, LEQ);\n@@ -256,1 +253,1 @@\n-    node_pair snd_split = split(fst_split.left, k, LT);\n+    node_pair second_split = split(first_split.left, k, LT);\n@@ -258,1 +255,1 @@\n-    if (snd_split.right != nullptr) {\n+    if (second_split.right != nullptr) {\n@@ -260,2 +257,2 @@\n-      DEBUG_ONLY(_node_count--;)\n-      ALLOCATOR::free(snd_split.right);\n+      _node_count--;\n+      ALLOCATOR::free(second_split.right);\n@@ -264,1 +261,1 @@\n-    this->_root = merge(snd_split.left, fst_split.right);\n+    _root = merge(second_split.left, first_split.right);\n@@ -269,1 +266,1 @@\n-    DEBUG_ONLY(_node_count = 0;)\n+    _node_count = 0;\n@@ -271,1 +268,1 @@\n-    to_delete.push(this->_root);\n+    to_delete.push(_root);\n@@ -282,25 +279,0 @@\n-  TreapNode* closest_geq(const K& key) {\n-    \/\/ Need to go \"left-ward\" for EQ node, so do a leq search first.\n-    TreapNode* leqB = closest_leq(key);\n-    if (leqB != nullptr && leqB->key() == key) {\n-      return leqB;\n-    }\n-    TreapNode* gtB = nullptr;\n-    TreapNode* head = _root;\n-    while (head != nullptr) {\n-      int cmp_r = COMPARATOR::cmp(head->key(), key);\n-      if (cmp_r == 0) { \/\/ Exact match\n-        gtB = head;\n-        break; \/\/ Can't become better than that.\n-      }\n-      if (cmp_r > 0) {\n-        \/\/ Found a match, try to find a better one.\n-        gtB = head;\n-        head = head->_left;\n-      } else if (cmp_r < 0) {\n-        head = head->_right;\n-      }\n-    }\n-    return gtB;\n-  }\n-\n@@ -308,4 +280,4 @@\n-    TreapNode* leqA_n = nullptr;\n-    TreapNode* head = _root;\n-    while (head != nullptr) {\n-      int cmp_r = COMPARATOR::cmp(head->key(), key);\n+    TreapNode* candidate = nullptr;\n+    TreapNode* pos = _root;\n+    while (pos != nullptr) {\n+      int cmp_r = COMPARATOR::cmp(pos->key(), key);\n@@ -313,1 +285,1 @@\n-        leqA_n = head;\n+        candidate = pos;\n@@ -318,2 +290,2 @@\n-        leqA_n = head;\n-        head = head->_right;\n+        candidate = pos;\n+        pos = pos->_right;\n@@ -321,1 +293,1 @@\n-        head = head->_left;\n+        pos = pos->_left;\n@@ -324,1 +296,1 @@\n-    return leqA_n;\n+    return candidate;\n@@ -378,1 +350,5 @@\n-    return os::malloc(sz, mtNMT);\n+    void* allocation = os::malloc(sz, mtNMT);\n+    if (allocation == nullptr) {\n+      vm_exit_out_of_memory(sz, OOM_MALLOC_ERROR, \"treap failed allocation\");\n+    }\n+    return allocation;\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":57,"deletions":81,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Red Hat, Inc. and\/or its affiliates.\n@@ -16,1 +17,1 @@\n- * 2 along with this work; if not, write to the Free Software Foundation,\n+ * 2 along with this work; if not, writ constexpre to the Free Software Foundation,\n@@ -29,0 +30,2 @@\n+const VMATree::RegionData VMATree::empty_regiondata{NativeCallStackStorage::StackIndex{}, mtNone};\n+\n@@ -30,1 +33,1 @@\n-                                               Metadata& metadata) {\n+                                               const RegionData& metadata) {\n@@ -51,1 +54,1 @@\n-      IntervalState{StateType::Released, Metadata{}},\n+      IntervalState{StateType::Released, empty_regiondata},\n@@ -56,1 +59,1 @@\n-      IntervalState{StateType::Released, Metadata{}}\n+      IntervalState{StateType::Released, empty_regiondata}\n@@ -156,2 +159,2 @@\n-    \/\/ LEQ_A - A - B - (some node >= B)\n-    auto& rescom = diff.flag[NMTUtil::flag_to_index(LEQ_A.out().flag())];\n+    \/\/ LEQ_A < A < B <= C\n+    SingleDiff& rescom = diff.flag[NMTUtil::flag_to_index(LEQ_A.out().flag())];\n@@ -173,1 +176,1 @@\n-    auto& rescom = diff.flag[NMTUtil::flag_to_index(delete_me.in().flag())];\n+    SingleDiff& rescom = diff.flag[NMTUtil::flag_to_index(delete_me.in().flag())];\n@@ -188,1 +191,1 @@\n-      auto& rescom = diff.flag[NMTUtil::flag_to_index(prev.out().flag())];\n+      SingleDiff& rescom = diff.flag[NMTUtil::flag_to_index(prev.out().flag())];\n@@ -191,1 +194,1 @@\n-      auto& rescom = diff.flag[NMTUtil::flag_to_index(prev.out().flag())];\n+      SingleDiff& rescom = diff.flag[NMTUtil::flag_to_index(prev.out().flag())];\n@@ -198,1 +201,1 @@\n-  auto& rescom = diff.flag[NMTUtil::flag_to_index(metadata.flag)];\n+  SingleDiff& rescom = diff.flag[NMTUtil::flag_to_index(metadata.flag)];\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/resourceArea.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"utilities\/growableArray.hpp\"\n@@ -60,1 +58,1 @@\n-  struct Metadata {\n+  struct RegionData {\n@@ -64,1 +62,1 @@\n-    Metadata() : stack_idx(), flag(mtNone) {}\n+    RegionData() : stack_idx(), flag(mtNone) {}\n@@ -66,1 +64,1 @@\n-    Metadata(NativeCallStackStorage::StackIndex stack_idx, MEMFLAGS flag)\n+    RegionData(NativeCallStackStorage::StackIndex stack_idx, MEMFLAGS flag)\n@@ -69,1 +67,1 @@\n-    static bool equals(const Metadata& a, const Metadata& b) {\n+    static bool equals(const RegionData& a, const RegionData& b) {\n@@ -75,0 +73,3 @@\n+  static const RegionData empty_regiondata;\n+\n+private:\n@@ -83,1 +84,1 @@\n-    IntervalState(StateType type, Metadata data) {\n+    IntervalState(const StateType type, const RegionData data) {\n@@ -97,2 +98,2 @@\n-    Metadata metadata() const {\n-      return Metadata{sidx, flag()};\n+    RegionData metadata() const {\n+      return RegionData{sidx, flag()};\n@@ -114,1 +115,1 @@\n-             (in.type() == out.type() && Metadata::equals(in.metadata(), out.metadata()));\n+             (in.type() == out.type() && RegionData::equals(in.metadata(), out.metadata()));\n@@ -118,0 +119,1 @@\n+public:\n@@ -140,1 +142,1 @@\n-  SummaryDiff register_mapping(position A, position B, StateType state, Metadata& metadata);\n+  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata);\n@@ -142,1 +144,1 @@\n-  SummaryDiff reserve_mapping(position from, position sz, Metadata& metadata) {\n+  SummaryDiff reserve_mapping(position from, position sz, const RegionData& metadata) {\n@@ -146,1 +148,1 @@\n-  SummaryDiff commit_mapping(position from, position sz, Metadata& metadata) {\n+  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata) {\n@@ -151,2 +153,1 @@\n-    Metadata empty;\n-    return register_mapping(from, from + sz, StateType::Released, empty);\n+    return register_mapping(from, from + sz, StateType::Released, VMATree::empty_regiondata);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -55,0 +55,7 @@\n+\n+  VMATree::StateType in_type_of(VMATree::TreapNode* x) {\n+    return x->val().in.type();\n+  }\n+  VMATree::StateType out_type_of(VMATree::TreapNode* x) {\n+    return x->val().out.type();\n+  }\n@@ -67,1 +74,1 @@\n-  auto adjacent_2_nodes = [&](VMATree::Metadata& md) {\n+  auto adjacent_2_nodes = [&](const VMATree::RegionData& rd) {\n@@ -70,1 +77,1 @@\n-      tree.reserve_mapping(i * 100, 100, md);\n+      tree.reserve_mapping(i * 100, 100, rd);\n@@ -80,1 +87,1 @@\n-      tree.reserve_mapping(i * 100, 100, md);\n+      tree.reserve_mapping(i * 100, 100, rd);\n@@ -91,1 +98,1 @@\n-      tree2.reserve_mapping(i * 100, 100, md);\n+      tree2.reserve_mapping(i * 100, 100, rd);\n@@ -101,1 +108,1 @@\n-    VMATree::Metadata md{si1, mtTest};\n+    VMATree::RegionData rd{si1, mtTest};\n@@ -104,1 +111,1 @@\n-      tree2.reserve_mapping(i * 100, 101, md);\n+      tree2.reserve_mapping(i * 100, 101, rd);\n@@ -114,1 +121,1 @@\n-  auto remove_all_leaves_empty_tree = [&](VMATree::Metadata& md) {\n+  auto remove_all_leaves_empty_tree = [&](const VMATree::RegionData& rd) {\n@@ -116,1 +123,1 @@\n-    tree.reserve_mapping(0, 100*100, md);\n+    tree.reserve_mapping(0, 100*100, rd);\n@@ -123,1 +130,1 @@\n-    tree.reserve_mapping(0, 100*100, md);\n+    tree.reserve_mapping(0, 100*100, rd);\n@@ -131,1 +138,1 @@\n-  auto commit_middle = [&](VMATree::Metadata& md) {\n+  auto commit_middle = [&](const VMATree::RegionData& rd) {\n@@ -133,2 +140,2 @@\n-    tree.reserve_mapping(0, 100, md);\n-    tree.commit_mapping(50, 25, md);\n+    tree.reserve_mapping(0, 100, rd);\n+    tree.commit_mapping(50, 25, rd);\n@@ -159,1 +166,1 @@\n-  auto commit_whole = [&](VMATree::Metadata& md) {\n+  auto commit_whole = [&](const VMATree::RegionData& rd) {\n@@ -161,1 +168,1 @@\n-    tree.reserve_mapping(0, 100*100, md);\n+    tree.reserve_mapping(0, 100*100, rd);\n@@ -163,1 +170,1 @@\n-      tree.commit_mapping(i*100, 100, md);\n+      tree.commit_mapping(i*100, 100, rd);\n@@ -168,3 +175,4 @@\n-      VMATree::IntervalChange& v = x->val();\n-      EXPECT_TRUE((v.in.type() == VMATree::StateType::Released && v.out.type() == VMATree::StateType::Committed) ||\n-                  (v.in.type() == VMATree::StateType::Committed && v.out.type() == VMATree::StateType::Released));\n+      VMATree::StateType in = in_type_of(x);\n+      VMATree::StateType out = out_type_of(x);\n+      EXPECT_TRUE((in == VMATree::StateType::Released && out == VMATree::StateType::Committed) ||\n+                  (in == VMATree::StateType::Committed && out == VMATree::StateType::Released));\n@@ -175,5 +183,0 @@\n-  VMATree::Metadata nothing;\n-  adjacent_2_nodes(nothing);\n-  remove_all_leaves_empty_tree(nothing);\n-  commit_middle(nothing);\n-  commit_whole(nothing);\n@@ -181,5 +184,10 @@\n-  VMATree::Metadata md{si1, mtTest };\n-  adjacent_2_nodes(md);\n-  remove_all_leaves_empty_tree(md);\n-  commit_middle(md);\n-  commit_whole(md);\n+  adjacent_2_nodes(VMATree::empty_regiondata);\n+  remove_all_leaves_empty_tree(VMATree::empty_regiondata);\n+  commit_middle(VMATree::empty_regiondata);\n+  commit_whole(VMATree::empty_regiondata);\n+\n+  VMATree::RegionData rd{si1, mtTest };\n+  adjacent_2_nodes(rd);\n+  remove_all_leaves_empty_tree(rd);\n+  commit_middle(rd);\n+  commit_whole(rd);\n@@ -189,4 +197,4 @@\n-    VMATree::Metadata md{si1, mtTest };\n-    VMATree::Metadata md2{si2, mtNMT };\n-    tree.reserve_mapping(0, 100, md);\n-    tree.reserve_mapping(100, 100, md2);\n+    VMATree::RegionData rd{si1, mtTest };\n+    VMATree::RegionData rd2{si2, mtNMT };\n+    tree.reserve_mapping(0, 100, rd);\n+    tree.reserve_mapping(100, 100, rd2);\n@@ -202,4 +210,4 @@\n-    VMATree::Metadata md{si1, mtTest };\n-    VMATree::Metadata md2{si2, mtNMT };\n-    tree.commit_mapping(50, 50, md2);\n-    tree.reserve_mapping(0, 100, md);\n+    VMATree::RegionData rd{si1, mtTest };\n+    VMATree::RegionData rd2{si2, mtNMT };\n+    tree.commit_mapping(50, 50, rd2);\n+    tree.reserve_mapping(0, 100, rd);\n@@ -219,6 +227,6 @@\n-    VMATree::Metadata md{si1, mtTest };\n-    VMATree::Metadata md2{si2, mtNMT };\n-    VMATree::Metadata md3{si1, mtNone };\n-    tree.reserve_mapping(0, 100, md);\n-    tree.reserve_mapping(0, 50, md2);\n-    tree.reserve_mapping(50, 50, md3);\n+    VMATree::RegionData rd{si1, mtTest };\n+    VMATree::RegionData rd2{si2, mtNMT };\n+    VMATree::RegionData rd3{si1, mtNone };\n+    tree.reserve_mapping(0, 100, rd);\n+    tree.reserve_mapping(0, 50, rd2);\n+    tree.reserve_mapping(50, 50, rd3);\n@@ -232,1 +240,1 @@\n-    Tree::Metadata md{si1, mtNMT};\n+    Tree::RegionData rd{si1, mtNMT};\n@@ -234,1 +242,1 @@\n-    tree.reserve_mapping(0, 500000, md);\n+    tree.reserve_mapping(0, 500000, rd);\n@@ -240,2 +248,2 @@\n-    Tree::Metadata md{si1, mtNMT};\n-    VMATree::Metadata md2{si2, mtTest};\n+    Tree::RegionData rd{si1, mtNMT};\n+    VMATree::RegionData rd2{si2, mtTest};\n@@ -243,2 +251,2 @@\n-    tree.reserve_mapping(0, 100, md);\n-    tree.commit_mapping(0, 100, md2);\n+    tree.reserve_mapping(0, 100, rd);\n+    tree.commit_mapping(0, 100, rd2);\n@@ -257,2 +265,2 @@\n-    Tree::Metadata md{si1, mtNMT};\n-    tree.reserve_mapping(0, 0, md);\n+    Tree::RegionData rd{si1, mtNMT};\n+    tree.reserve_mapping(0, 0, rd);\n@@ -260,1 +268,1 @@\n-    tree.commit_mapping(0, 0, md);\n+    tree.commit_mapping(0, 0, rd);\n@@ -271,2 +279,2 @@\n-    Tree::Metadata md(NCS::StackIndex(), mtTest);\n-    Tree::Metadata md2(NCS::StackIndex(), mtNMT);\n+    Tree::RegionData rd(NCS::StackIndex(), mtTest);\n+    Tree::RegionData rd2(NCS::StackIndex(), mtNMT);\n@@ -274,1 +282,1 @@\n-    auto all_diff = tree.reserve_mapping(0, 100, md);\n+    auto all_diff = tree.reserve_mapping(0, 100, rd);\n@@ -277,1 +285,1 @@\n-    all_diff = tree.reserve_mapping(50, 25, md2);\n+    all_diff = tree.reserve_mapping(50, 25, rd2);\n@@ -284,1 +292,1 @@\n-    Tree::Metadata md(NCS::StackIndex(), mtTest);\n+    Tree::RegionData rd(NCS::StackIndex(), mtTest);\n@@ -286,1 +294,1 @@\n-    auto all_diff = tree.reserve_mapping(0, 100, md);\n+    auto all_diff = tree.reserve_mapping(0, 100, rd);\n@@ -294,1 +302,1 @@\n-    Tree::Metadata md(NCS::StackIndex(), mtTest);\n+    Tree::RegionData rd(NCS::StackIndex(), mtTest);\n@@ -296,1 +304,1 @@\n-    auto all_diff = tree.reserve_mapping(0, 100, md);\n+    auto all_diff = tree.reserve_mapping(0, 100, rd);\n@@ -299,1 +307,1 @@\n-    all_diff = tree.commit_mapping(0, 100, md);\n+    all_diff = tree.commit_mapping(0, 100, rd);\n@@ -305,1 +313,1 @@\n-    Tree::Metadata md(NCS::StackIndex(), mtTest);\n+    Tree::RegionData rd(NCS::StackIndex(), mtTest);\n@@ -307,1 +315,1 @@\n-    auto all_diff = tree.reserve_mapping(0, 100, md);\n+    auto all_diff = tree.reserve_mapping(0, 100, rd);\n@@ -310,1 +318,1 @@\n-    all_diff = tree.reserve_mapping(100, 100, md);\n+    all_diff = tree.reserve_mapping(100, 100, rd);\n@@ -315,2 +323,2 @@\n-  Tree::Metadata md(NCS::StackIndex(), mtTest);\n-    Tree::Metadata md2(NCS::StackIndex(), mtNMT);\n+  Tree::RegionData rd(NCS::StackIndex(), mtTest);\n+    Tree::RegionData rd2(NCS::StackIndex(), mtNMT);\n@@ -318,1 +326,1 @@\n-    auto all_diff = tree.reserve_mapping(0, 100, md);\n+    auto all_diff = tree.reserve_mapping(0, 100, rd);\n@@ -321,1 +329,1 @@\n-    all_diff = tree.reserve_mapping(100, 100, md2);\n+    all_diff = tree.reserve_mapping(100, 100, rd2);\n@@ -331,4 +339,4 @@\n-    Tree::Metadata md(NCS::StackIndex(), mtTest);\n-    tree.commit_mapping(128, 128, md);\n-    tree.commit_mapping(512, 128, md);\n-    auto diff = tree.commit_mapping(0, 1024, md);\n+    Tree::RegionData rd(NCS::StackIndex(), mtTest);\n+    tree.commit_mapping(128, 128, rd);\n+    tree.commit_mapping(512, 128, rd);\n+    auto diff = tree.commit_mapping(0, 1024, rd);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":79,"deletions":71,"binary":false,"changes":150,"status":"modified"}]}