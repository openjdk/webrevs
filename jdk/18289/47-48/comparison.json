{"files":[{"patch":"@@ -43,1 +43,0 @@\n-\n@@ -45,36 +44,0 @@\n-template<typename K, typename V, typename COMPARATOR>\n-class TreapNode {\n-  template<typename InnerK, typename InnerV, typename InnerCOMPARATOR, typename Allocator>\n-  friend class Treap;\n-\n-  using Node = TreapNode<K,V,COMPARATOR>;\n-\n-  uint64_t _priority;\n-  const K _key;\n-  V _value;\n-\n-  Node* _left;\n-  Node* _right;\n-\n-public:\n-  TreapNode(const K& k, const V& v, uint64_t p)\n-  : _priority(p), _key(k), _value(v), _left(nullptr), _right(nullptr) {\n-  }\n-\n-  const K& key() const {\n-    return _key;\n-  }\n-\n-  V& val() {\n-    return _value;\n-  }\n-\n-  Node* left() const {\n-    return _left;\n-  }\n-\n-  Node* right() const {\n-    return _right;\n-  }\n-};\n-\n@@ -86,1 +49,34 @@\n-  using Node = TreapNode<K, V, COMPARATOR>;\n+  class TreapNode {\n+    friend Treap;\n+    uint64_t _priority;\n+    const K _key;\n+    V _value;\n+\n+    TreapNode* _left;\n+    TreapNode* _right;\n+\n+  public:\n+    TreapNode(const K& k, const V& v, uint64_t p)\n+      : _priority(p),\n+        _key(k),\n+        _value(v),\n+        _left(nullptr),\n+        _right(nullptr) {\n+    }\n+\n+    const K& key() const {\n+      return _key;\n+    }\n+\n+    V& val() {\n+      return _value;\n+    }\n+\n+    TreapNode* left() const {\n+      return _left;\n+    }\n+\n+    TreapNode* right() const {\n+      return _right;\n+    }\n+  };\n@@ -88,1 +84,1 @@\n-  Node* _root;\n+  TreapNode* _root;\n@@ -103,2 +99,2 @@\n-    Node* left;\n-    Node* right;\n+    TreapNode* left;\n+    TreapNode* right;\n@@ -114,1 +110,1 @@\n-  static node_pair split(Node* head, const K& key, SplitMode mode = LEQ DEBUG_ONLY(COMMA int recur_count = 0)) {\n+  static node_pair split(TreapNode* head, const K& key, SplitMode mode = LEQ DEBUG_ONLY(COMMA int recur_count = 0)) {\n@@ -132,1 +128,1 @@\n-  static Node* merge(Node* left, Node* right DEBUG_ONLY(COMMA int recur_count = 0)) {\n+  static TreapNode* merge(TreapNode* left, TreapNode* right DEBUG_ONLY(COMMA int recur_count = 0)) {\n@@ -157,1 +153,1 @@\n-  static Node* find(Node* node, const K& k DEBUG_ONLY(COMMA int recur_count = 0)) {\n+  static TreapNode* find(TreapNode* node, const K& k DEBUG_ONLY(COMMA int recur_count = 0)) {\n@@ -183,1 +179,1 @@\n-    Node* found = find(split_up.left, k);\n+    TreapNode* found = find(split_up.left, k);\n@@ -190,1 +186,1 @@\n-    void* node_place = ALLOCATOR::allocate(sizeof(Node));\n+    void* node_place = ALLOCATOR::allocate(sizeof(TreapNode));\n@@ -192,1 +188,1 @@\n-    Node* node = new (node_place) Node(k, v, prio);\n+    TreapNode* node = new (node_place) TreapNode(k, v, prio);\n@@ -213,1 +209,1 @@\n-    GrowableArrayCHeap<Node*, mtNMT> to_delete;\n+    GrowableArrayCHeap<TreapNode*, mtNMT> to_delete;\n@@ -217,1 +213,1 @@\n-      Node* head = to_delete.pop();\n+      TreapNode* head = to_delete.pop();\n@@ -225,1 +221,1 @@\n-  Node* closest_geq(const K& key) {\n+  TreapNode* closest_geq(const K& key) {\n@@ -227,1 +223,1 @@\n-    Node* leqB = closest_leq(key);\n+    TreapNode* leqB = closest_leq(key);\n@@ -231,2 +227,2 @@\n-    Node* gtB = nullptr;\n-    Node* head = _root;\n+    TreapNode* gtB = nullptr;\n+    TreapNode* head = _root;\n@@ -250,3 +246,3 @@\n-  Node* closest_leq(const K& key) {\n-    Node* leqA_n = nullptr;\n-    Node* head = _root;\n+  TreapNode* closest_leq(const K& key) {\n+    TreapNode* leqA_n = nullptr;\n+    TreapNode* head = _root;\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":52,"deletions":56,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -113,2 +113,3 @@\n-  using VTreap = TreapNode<size_t, IntervalChange, AddressComparator>;\n-  TreapCHeap<size_t, IntervalChange, AddressComparator> tree;\n+  using VTreapTree = TreapCHeap<size_t, IntervalChange, AddressComparator>;\n+  using VTreap = VTreapTree::TreapNode;\n+  VTreapTree tree;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}