{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"nmt\/threadStackTracker.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"nmt\/threadStackTracker.hpp\"\n@@ -191,0 +191,1 @@\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,23 @@\n-#include \"precompiled.hpp\"\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n@@ -3,0 +25,1 @@\n+#include \"precompiled.hpp\"\n@@ -83,0 +106,1 @@\n+\n@@ -96,0 +120,1 @@\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtMemoryFileTracker.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+\n@@ -49,0 +50,1 @@\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtMemoryFileTracker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memTracker.hpp\"\n+#include \"unittest.hpp\"\n+\n+class MemoryFileTrackerTest : public testing::Test {\n+public:\n+  size_t sz(int x) { return (size_t) x; }\n+  void basics() {\n+    MemoryFileTracker tracker(false);\n+    MemoryFileTracker::MemoryFile* dev = tracker.make_device(\"test\");\n+    tracker.allocate_memory(dev, 0, 100, mtTest, CALLER_PC);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(100));\n+    tracker.allocate_memory(dev, 100, 100, mtTest, CALLER_PC);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(200));\n+    tracker.allocate_memory(dev, 200, 100, mtTest, CALLER_PC);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(300));\n+    tracker.free_memory(dev, 0, 300);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(0));\n+    tracker.allocate_memory(dev, 0, 100, mtTest, CALLER_PC);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(100));\n+    tracker.free_memory(dev, 50, 10);\n+    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(90));\n+  };\n+};\n+\n+TEST_VM_F(MemoryFileTrackerTest, Basics) {\n+  this->basics();\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_memoryfiletracker.cpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -1,31 +0,0 @@\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"nmt\/vmatree.hpp\"\n-#include \"nmt\/memTracker.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"unittest.hpp\"\n-\n-class MemoryFileTrackerTest : public testing::Test {\n-public:\n-  size_t sz(int x) { return (size_t) x; }\n-  void basics() {\n-    MemoryFileTracker tracker(false);\n-    MemoryFileTracker::MemoryFile* dev = tracker.make_device(\"test\");\n-    tracker.allocate_memory(dev, 0, 100, mtTest, CALLER_PC);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(100));\n-    tracker.allocate_memory(dev, 100, 100, mtTest, CALLER_PC);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(200));\n-    tracker.allocate_memory(dev, 200, 100, mtTest, CALLER_PC);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(300));\n-    tracker.free_memory(dev, 0, 300);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(0));\n-    tracker.allocate_memory(dev, 0, 100, mtTest, CALLER_PC);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(100));\n-    tracker.free_memory(dev, 50, 10);\n-    EXPECT_EQ(dev->_summary.by_type(mtTest)->reserved(), sz(90));\n-  };\n-};\n-\n-TEST_VM_F(MemoryFileTrackerTest, Basics) {\n-  this->basics();\n-}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_physicaldevicetracker.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"}]}