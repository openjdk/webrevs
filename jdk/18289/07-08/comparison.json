{"files":[{"patch":"@@ -40,1 +40,1 @@\n-  enum class InOut : uint8_t {\n+  enum class StateType : uint8_t {\n@@ -66,1 +66,1 @@\n-    InOut type;\n+    StateType type;\n@@ -69,2 +69,2 @@\n-    void lub(const Arrow& b) {\n-      if (this->type == InOut::Released) {\n+    void merge(const Arrow& b) {\n+      if (this->type == StateType::Released) {\n@@ -73,1 +73,1 @@\n-      } else if (this->type == InOut::Committed) {\n+      } else if (this->type == StateType::Committed) {\n@@ -84,1 +84,11 @@\n-      return in.type == out.type && Metadata::equals(in.data, out.data);\n+      if (in.type == out.type) {\n+        if (out.type == StateType::Released) {\n+          return true;\n+        } else if (out.type == StateType::Committed) {\n+          return NativeCallStackStorage::StackIndex::equals(in.data.stack_idx, out.data.stack_idx);\n+        } else {\n+          return Metadata::equals(in.data, out.data);\n+        }\n+      } else {\n+        return false;\n+      }\n@@ -117,1 +127,1 @@\n-  SummaryDiff register_mapping(size_t A, size_t B, InOut state, Metadata& metadata, Merge merge) {\n+  SummaryDiff register_mapping(size_t A, size_t B, StateType state, Metadata& metadata, Merge merge) {\n@@ -142,2 +152,2 @@\n-    NodeState stA{Arrow{InOut::Released, Metadata{}}, Arrow{state, metadata}};\n-    NodeState stB{Arrow{state, metadata}, Arrow{InOut::Released, Metadata{}}};\n+    NodeState stA{Arrow{StateType::Released, Metadata{}}, Arrow{state, metadata}};\n+    NodeState stB{Arrow{state, metadata}, Arrow{StateType::Released, Metadata{}}};\n@@ -173,1 +183,1 @@\n-        stA.out.lub(leqA_n->val().out);\n+        \/\/stA.out.merge(leqA_n->val().out);\n@@ -193,1 +203,1 @@\n-        stA.in.lub(leqA_n->val().out); \/\/ .. and the region's prior state is the incoming state\n+        \/\/stA.in.merge(leqA_n->val().out); \/\/ .. and the region's prior state is the incoming state\n@@ -237,1 +247,1 @@\n-            stB.out.lub(head->val().out);\n+            \/\/stB.out.merge(head->val().out);\n@@ -266,1 +276,1 @@\n-      if (LEQ_A.state.out.type == InOut::Reserved) {\n+      if (LEQ_A.state.out.type == StateType::Reserved) {\n@@ -268,1 +278,1 @@\n-      } else if (LEQ_A.state.out.type == InOut::Committed) {\n+      } else if (LEQ_A.state.out.type == StateType::Committed) {\n@@ -281,1 +291,1 @@\n-      if (delete_me.state.in.type == InOut::Reserved) {\n+      if (delete_me.state.in.type == StateType::Reserved) {\n@@ -283,1 +293,1 @@\n-      } else if (delete_me.state.in.type == InOut::Committed) {\n+      } else if (delete_me.state.in.type == StateType::Committed) {\n@@ -291,2 +301,2 @@\n-        prev.state.out.type != InOut::Released &&\n-        GEQ_B.state.in.type != InOut::Released) {\n+        prev.state.out.type != StateType::Released &&\n+        GEQ_B.state.in.type != StateType::Released) {\n@@ -296,1 +306,1 @@\n-      if (prev.state.out.type == InOut::Reserved) {\n+      if (prev.state.out.type == StateType::Reserved) {\n@@ -299,1 +309,1 @@\n-      } else if (prev.state.out.type == InOut::Committed) {\n+      } else if (prev.state.out.type == StateType::Committed) {\n@@ -308,1 +318,1 @@\n-    if (state == InOut::Reserved) {\n+    if (state == StateType::Reserved) {\n@@ -310,1 +320,1 @@\n-    } else if (state == InOut::Committed) {\n+    } else if (state == StateType::Committed) {\n@@ -322,1 +332,1 @@\n-    return register_mapping(from, from + sz, InOut::Reserved, metadata, identity_merge);\n+    return register_mapping(from, from + sz, StateType::Reserved, metadata, identity_merge);\n@@ -326,1 +336,1 @@\n-    return register_mapping(from, from + sz, InOut::Committed, metadata, [](Metadata& merge_into, const Metadata& existent) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, [](Metadata& merge_into, const Metadata& existent) {\n@@ -335,1 +345,1 @@\n-    return register_mapping(from, from + sz, InOut::Released, empty, [](Metadata& merge_into, const Metadata& existent) {\n+    return register_mapping(from, from + sz, StateType::Released, empty, [](Metadata& merge_into, const Metadata& existent) {\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-      EXPECT_TRUE((v.in.type == VMATree::InOut::Released && v.out.type == VMATree::InOut::Committed) ||\n-                  (v.in.type == VMATree::InOut::Committed && v.out.type == VMATree::InOut::Released));\n+      EXPECT_TRUE((v.in.type == VMATree::StateType::Released && v.out.type == VMATree::StateType::Committed) ||\n+                  (v.in.type == VMATree::StateType::Committed && v.out.type == VMATree::StateType::Released));\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}