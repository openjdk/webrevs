{"files":[{"patch":"@@ -174,1 +174,1 @@\n-    return MemoryFileTracker::Instance::make_device(descriptive_name);\n+    return MemoryFileTracker::Instance::make_file(descriptive_name);\n@@ -182,1 +182,1 @@\n-    MemoryFileTracker::Instance::free_device(device);\n+    MemoryFileTracker::Instance::free_file(device);\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  : _stack_storage(is_detailed_mode), _devices() {}\n+  : _stack_storage(is_detailed_mode), _files() {}\n@@ -42,1 +42,1 @@\n-void MemoryFileTracker::allocate_memory(MemoryFile* device, size_t offset,\n+void MemoryFileTracker::allocate_memory(MemoryFile* file, size_t offset,\n@@ -47,1 +47,1 @@\n-  VMATree::SummaryDiff diff = device->_tree.reserve_mapping(offset, size, regiondata);\n+  VMATree::SummaryDiff diff = file->_tree.reserve_mapping(offset, size, regiondata);\n@@ -49,1 +49,1 @@\n-    VirtualMemory* summary = device->_summary.by_type(NMTUtil::index_to_flag(i));\n+    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n@@ -54,2 +54,2 @@\n-void MemoryFileTracker::free_memory(MemoryFile* device, size_t offset, size_t size) {\n-  VMATree::SummaryDiff diff = device->_tree.release_mapping(offset, size);\n+void MemoryFileTracker::free_memory(MemoryFile* file, size_t offset, size_t size) {\n+  VMATree::SummaryDiff diff = file->_tree.release_mapping(offset, size);\n@@ -57,1 +57,1 @@\n-    VirtualMemory* summary = device->_summary.by_type(NMTUtil::index_to_flag(i));\n+    VirtualMemory* summary = file->_summary.by_type(NMTUtil::index_to_flag(i));\n@@ -62,2 +62,2 @@\n-void MemoryFileTracker::print_report_on(const MemoryFile* device, outputStream* stream, size_t scale) {\n-  stream->print_cr(\"Memory map of %s\", device->_descriptive_name);\n+void MemoryFileTracker::print_report_on(const MemoryFile* file, outputStream* stream, size_t scale) {\n+  stream->print_cr(\"Memory map of %s\", file->_descriptive_name);\n@@ -66,1 +66,1 @@\n-  device->_tree.visit_in_order([&](VMATree::TreapNode* current) {\n+  file->_tree.visit_in_order([&](VMATree::TreapNode* current) {\n@@ -88,4 +88,4 @@\n-MemoryFileTracker::MemoryFile* MemoryFileTracker::make_device(const char* descriptive_name) {\n-  MemoryFile* device_place = new MemoryFile{descriptive_name};\n-  _devices.push(device_place);\n-  return device_place;\n+MemoryFileTracker::MemoryFile* MemoryFileTracker::make_file(const char* descriptive_name) {\n+  MemoryFile* file_place = new MemoryFile{descriptive_name};\n+  _files.push(file_place);\n+  return file_place;\n@@ -94,3 +94,3 @@\n-void MemoryFileTracker::free_device(MemoryFile* device) {\n-  _devices.remove(device);\n-  delete device;\n+void MemoryFileTracker::free_file(MemoryFile* file) {\n+  _files.remove(file);\n+  delete file;\n@@ -99,2 +99,2 @@\n-const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& MemoryFileTracker::devices() {\n-  return _devices;\n+const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& MemoryFileTracker::files() {\n+  return _files;\n@@ -103,2 +103,2 @@\n-const VirtualMemorySnapshot& MemoryFileTracker::summary_for(const MemoryFile* device) {\n-  return device->_summary;\n+const VirtualMemorySnapshot& MemoryFileTracker::summary_for(const MemoryFile* file) {\n+  return file->_summary;\n@@ -117,1 +117,1 @@\n-void MemoryFileTracker::Instance::allocate_memory(MemoryFile* device, size_t offset,\n+void MemoryFileTracker::Instance::allocate_memory(MemoryFile* file, size_t offset,\n@@ -120,1 +120,1 @@\n-  _tracker->allocate_memory(device, offset, size, stack, flag);\n+  _tracker->allocate_memory(file, offset, size, stack, flag);\n@@ -123,2 +123,2 @@\n-void MemoryFileTracker::Instance::free_memory(MemoryFile* device, size_t offset, size_t size) {\n-  _tracker->free_memory(device, offset, size);\n+void MemoryFileTracker::Instance::free_memory(MemoryFile* file, size_t offset, size_t size) {\n+  _tracker->free_memory(file, offset, size);\n@@ -128,2 +128,2 @@\n-MemoryFileTracker::Instance::make_device(const char* descriptive_name) {\n-  return _tracker->make_device(descriptive_name);\n+MemoryFileTracker::Instance::make_file(const char* descriptive_name) {\n+  return _tracker->make_file(descriptive_name);\n@@ -132,1 +132,1 @@\n-void MemoryFileTracker::Instance::print_report_on(const MemoryFile* device,\n+void MemoryFileTracker::Instance::print_report_on(const MemoryFile* file,\n@@ -134,1 +134,1 @@\n-  assert(device != nullptr, \"must be\");\n+  assert(file != nullptr, \"must be\");\n@@ -136,1 +136,1 @@\n-  _tracker->print_report_on(device, stream, scale);\n+  _tracker->print_report_on(file, stream, scale);\n@@ -140,2 +140,2 @@\n-  const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& devices =\n-      MemoryFileTracker::Instance::devices();\n+  const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& files =\n+      MemoryFileTracker::Instance::files();\n@@ -145,3 +145,3 @@\n-  for (int i = 0; i < devices.length(); i++) {\n-    MemoryFileTracker::MemoryFile* dev = devices.at(i);\n-    MemoryFileTracker::Instance::print_report_on(dev, stream, scale);\n+  for (int i = 0; i < files.length(); i++) {\n+    MemoryFileTracker::MemoryFile* file = files.at(i);\n+    MemoryFileTracker::Instance::print_report_on(file, stream, scale);\n@@ -151,2 +151,2 @@\n-const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& MemoryFileTracker::Instance::devices() {\n-  return _tracker->devices();\n+const GrowableArrayCHeap<MemoryFileTracker::MemoryFile*, mtNMT>& MemoryFileTracker::Instance::files() {\n+  return _tracker->files();\n@@ -156,2 +156,2 @@\n-  for (int d = 0; d < _devices.length(); d++) {\n-    auto& device = _devices.at(d);\n+  for (int d = 0; d < _files.length(); d++) {\n+    const MemoryFile* file = _files.at(d);\n@@ -160,1 +160,1 @@\n-      auto current = device->_summary.by_type(NMTUtil::index_to_flag(i));\n+      auto current = file->_summary.by_type(NMTUtil::index_to_flag(i));\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ The PhysicalDeviceTracker tracks memory of 'physical devices',\n+\/\/ The MemoryFileTracker tracks memory of 'memory files',\n@@ -41,1 +41,1 @@\n-\/\/ A typical example of such a device is a memory mapped file.\n+\/\/ A typical example of such a file is a memory mapped file.\n@@ -62,2 +62,2 @@\n-  \/\/ We need pointers to each allocated device.\n-  GrowableArrayCHeap<MemoryFile*, mtNMT> _devices;\n+  \/\/ We need pointers to each allocated file.\n+  GrowableArrayCHeap<MemoryFile*, mtNMT> _files;\n@@ -68,1 +68,1 @@\n-  void allocate_memory(MemoryFile* device, size_t offset, size_t size, const NativeCallStack& stack,\n+  void allocate_memory(MemoryFile* file, size_t offset, size_t size, const NativeCallStack& stack,\n@@ -70,1 +70,1 @@\n-  void free_memory(MemoryFile* device, size_t offset, size_t size);\n+  void free_memory(MemoryFile* file, size_t offset, size_t size);\n@@ -72,2 +72,2 @@\n-  MemoryFile* make_device(const char* descriptive_name);\n-  void free_device(MemoryFile* device);\n+  MemoryFile* make_file(const char* descriptive_name);\n+  void free_file(MemoryFile* file);\n@@ -75,1 +75,1 @@\n-  const VirtualMemorySnapshot& summary_for(const MemoryFile* device);\n+  const VirtualMemorySnapshot& summary_for(const MemoryFile* file);\n@@ -79,2 +79,2 @@\n-  \/\/ Print detailed report of device\n-  void print_report_on(const MemoryFile* device, outputStream* stream, size_t scale);\n+  \/\/ Print detailed report of file\n+  void print_report_on(const MemoryFile* file, outputStream* stream, size_t scale);\n@@ -82,1 +82,1 @@\n-  const GrowableArrayCHeap<MemoryFile*, mtNMT>& devices();\n+  const GrowableArrayCHeap<MemoryFile*, mtNMT>& files();\n@@ -97,2 +97,2 @@\n-    static MemoryFile* make_device(const char* descriptive_name);\n-    static void free_device(MemoryFile* device);\n+    static MemoryFile* make_file(const char* descriptive_name);\n+    static void free_file(MemoryFile* device);\n@@ -111,1 +111,1 @@\n-    static const GrowableArrayCHeap<MemoryFile*, mtNMT>& devices();\n+    static const GrowableArrayCHeap<MemoryFile*, mtNMT>& files();\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -84,18 +84,1 @@\n-      struct Check {\n-        void* ptr;\n-        bool released;\n-\n-        Check(void* ptr)\n-          : ptr(ptr),\n-            released(false) {\n-        }\n-\n-        Check()\n-          : ptr(nullptr),\n-            released(false) {}\n-\n-        void release() {\n-          released = true;\n-        }\n-      };\n-      GrowableArrayCHeap<Check, mtTest> allocations;\n+      int allocations;\n@@ -104,1 +87,1 @@\n-        : allocations() {\n+        : allocations(0) {\n@@ -112,1 +95,1 @@\n-        allocations.push(Check(allocation));\n+        ++allocations;\n@@ -117,7 +100,1 @@\n-        for (int i = 0; i < allocations.length(); i++) {\n-          Check& c = allocations.at(i);\n-          EXPECT_NE(nullptr, c.ptr);\n-          if (c.ptr == ptr) {\n-            c.release();\n-          }\n-        }\n+        --allocations;\n@@ -131,1 +108,1 @@\n-      for (int i = 0; i < 10; i++) {\n+      for (int i = 0; i < up_to; i++) {\n@@ -134,1 +111,2 @@\n-      for (int i = 0; i < 10; i++) {\n+      EXPECT_EQ(up_to, treap._allocator.allocations);\n+      for (int i = 0; i < up_to; i++) {\n@@ -137,4 +115,1 @@\n-      EXPECT_EQ(10, treap._allocator.allocations.length());\n-      for (int i = 0; i < 10; i++) {\n-        EXPECT_TRUE(treap._allocator.allocations.at(i).released);\n-      }\n+      EXPECT_EQ(0, treap._allocator.allocations);\n@@ -146,1 +121,1 @@\n-      for (int i = 0; i < 10; i++) {\n+      for (int i = 0; i < up_to; i++) {\n@@ -150,4 +125,1 @@\n-      EXPECT_EQ(10, treap._allocator.allocations.length());\n-      for (int i = 0; i < 10; i++) {\n-        EXPECT_TRUE(treap._allocator.allocations.at(i).released);\n-      }\n+      EXPECT_EQ(0, treap._allocator.allocations);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_treap.cpp","additions":10,"deletions":38,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+using Tree = VMATree;\n+using Node = Tree::TreapNode;\n+using NCS = NativeCallStackStorage;\n+\n@@ -35,0 +39,14 @@\n+  NCS ncs;\n+  constexpr static const int si_len = 2;\n+  NCS::StackIndex si[si_len];\n+  NativeCallStack stacks[si_len];\n+\n+  VMATreeTest() : ncs(true) {\n+    stacks[0] = make_stack(0xA);\n+    stacks[1] = make_stack(0xB);\n+    si[0] = ncs.push(stacks[0]);\n+    si[1] = ncs.push(stacks[0]);\n+  }\n+\n+  \/\/ Utilities\n+\n@@ -52,3 +70,0 @@\n-  NativeCallStack stack1 = make_stack(0x89ac);\n-  NativeCallStack stack2 = make_stack(0x123);\n-\n@@ -58,0 +73,1 @@\n+\n@@ -61,1 +77,0 @@\n-};\n@@ -63,8 +78,7 @@\n-\/\/ Low-level tests inspecting the state of the tree.\n-TEST_VM_F(VMATreeTest, LowLevel) {\n-  using Tree = VMATree;\n-  using Node = Tree::TreapNode;\n-  using NCS = NativeCallStackStorage;\n-  NativeCallStackStorage ncs(true);\n-  NativeCallStackStorage::StackIndex si1 = ncs.push(stack1);\n-  NativeCallStackStorage::StackIndex si2 = ncs.push(stack2);\n+  size_t count_nodes(Tree tree) {\n+    int count = 0;\n+    treap(tree).visit_range_in_order(0, 0xFFFFFFFFFFFFFFFF, [&](Node* x) {\n+      ++count;\n+    });\n+    return count;\n+  }\n@@ -72,0 +86,8 @@\n+  void expect_node_count(Tree tree, size_t count) {\n+    EXPECT_EQ(count, count_nodes(tree));\n+  }\n+  void expect_null_root(Tree tree) {\n+    EXPECT_EQ(nullptr, treap_root(tree));\n+  }\n+\n+  \/\/ Tests\n@@ -73,1 +95,1 @@\n-  auto adjacent_2_nodes = [&](const VMATree::RegionData& rd) {\n+  void adjacent_2_nodes(const VMATree::RegionData& rd) {\n@@ -104,13 +126,0 @@\n-  };\n-\n-  { \/\/ Overlapping reservations should also only result in 2 nodes.\n-    VMATree::RegionData rd{si1, mtTest};\n-    Tree tree2;\n-    for (int i = 99; i >= 0; i--) {\n-      tree2.reserve_mapping(i * 100, 101, rd);\n-    }\n-    int found_nodes = 0;\n-    treap(tree2).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(2, found_nodes) << \"Adjacent reservations should result in exactly 2 nodes\";\n@@ -120,1 +129,1 @@\n-  auto remove_all_leaves_empty_tree = [&](const VMATree::RegionData& rd) {\n+  void remove_all_leaves_empty_tree(const VMATree::RegionData& rd) {\n@@ -122,1 +131,1 @@\n-    tree.reserve_mapping(0, 100*100, rd);\n+    tree.reserve_mapping(0, 100 * 100, rd);\n@@ -124,1 +133,1 @@\n-      tree.release_mapping(i*100, 100);\n+      tree.release_mapping(i * 100, 100);\n@@ -129,1 +138,1 @@\n-    tree.reserve_mapping(0, 100*100, rd);\n+    tree.reserve_mapping(0, 100 * 100, rd);\n@@ -131,1 +140,1 @@\n-      tree.release_mapping(i*100, 100);\n+      tree.release_mapping(i * 100, 100);\n@@ -134,1 +143,19 @@\n-  };\n+  }\n+\n+  \/\/ Committing in a whole reserved range results in 2 nodes\n+  void commit_whole(const VMATree::RegionData& rd) {\n+    Tree tree;\n+    tree.reserve_mapping(0, 100 * 100, rd);\n+    for (int i = 0; i < 100; i++) {\n+      tree.commit_mapping(i * 100, 100, rd);\n+    }\n+    int found_nodes = 0;\n+    treap(tree).visit_range_in_order(0, 999999, [&](Node* x) {\n+      found_nodes++;\n+      VMATree::StateType in = in_type_of(x);\n+      VMATree::StateType out = out_type_of(x);\n+      EXPECT_TRUE((in == VMATree::StateType::Released && out == VMATree::StateType::Committed) ||\n+                  (in == VMATree::StateType::Committed && out == VMATree::StateType::Released));\n+    });\n+    EXPECT_EQ(2, found_nodes);\n+  }\n@@ -137,1 +164,1 @@\n-  auto commit_middle = [&](const VMATree::RegionData& rd) {\n+  void commit_middle(const VMATree::RegionData& rd) {\n@@ -150,0 +177,1 @@\n+\n@@ -157,0 +185,1 @@\n+\n@@ -163,0 +192,2 @@\n+};\n+\n@@ -164,17 +195,0 @@\n-  \/\/ Committing in a whole reserved range results in 2 nodes\n-  auto commit_whole = [&](const VMATree::RegionData& rd) {\n-    Tree tree;\n-    tree.reserve_mapping(0, 100*100, rd);\n-    for (int i = 0; i < 100; i++) {\n-      tree.commit_mapping(i*100, 100, rd);\n-    }\n-    int found_nodes = 0;\n-    treap(tree).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n-      VMATree::StateType in = in_type_of(x);\n-      VMATree::StateType out = out_type_of(x);\n-      EXPECT_TRUE((in == VMATree::StateType::Released && out == VMATree::StateType::Committed) ||\n-                  (in == VMATree::StateType::Committed && out == VMATree::StateType::Released));\n-    });\n-    EXPECT_EQ(2, found_nodes);\n-  };\n@@ -182,0 +196,8 @@\n+TEST_VM_F(VMATreeTest, OverlappingReservationsResultInTwoNodes) {\n+  VMATree::RegionData rd{si[0], mtTest};\n+  Tree tree;\n+  for (int i = 99; i >= 0; i--) {\n+    tree.reserve_mapping(i * 100, 101, rd);\n+  }\n+  expect_node_count(tree, 2);\n+}\n@@ -183,0 +205,2 @@\n+\/\/ Low-level tests inspecting the state of the tree.\n+TEST_VM_F(VMATreeTest, LowLevel) {\n@@ -188,1 +212,1 @@\n-  VMATree::RegionData rd{si1, mtTest };\n+  VMATree::RegionData rd{si[0], mtTest };\n@@ -196,2 +220,2 @@\n-    VMATree::RegionData rd{si1, mtTest };\n-    VMATree::RegionData rd2{si2, mtNMT };\n+    VMATree::RegionData rd{si[0], mtTest };\n+    VMATree::RegionData rd2{si[1], mtNMT };\n@@ -200,0 +224,2 @@\n+\n+    expect_node_count(tree, 3);\n@@ -201,4 +227,0 @@\n-    treap(tree).visit_range_in_order(0, 99999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(3, found_nodes);\n@@ -209,2 +231,2 @@\n-    VMATree::RegionData rd{si1, mtTest };\n-    VMATree::RegionData rd2{si2, mtNMT };\n+    VMATree::RegionData rd{si[0], mtTest };\n+    VMATree::RegionData rd2{si[1], mtNMT };\n@@ -213,1 +235,0 @@\n-    int found_nodes = 0;\n@@ -219,1 +240,0 @@\n-      found_nodes++;\n@@ -221,1 +241,2 @@\n-    EXPECT_EQ(2, found_nodes);\n+\n+    expect_node_count(tree, 2);\n@@ -226,3 +247,3 @@\n-    VMATree::RegionData rd{si1, mtTest };\n-    VMATree::RegionData rd2{si2, mtNMT };\n-    VMATree::RegionData rd3{si1, mtNone };\n+    VMATree::RegionData rd{si[0], mtTest };\n+    VMATree::RegionData rd2{si[1], mtNMT };\n+    VMATree::RegionData rd3{si[0], mtNone };\n@@ -232,5 +253,2 @@\n-    int found_nodes = 0;\n-    treap(tree).visit_range_in_order(0, 99999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(3, found_nodes);\n+\n+    expect_node_count(tree, 3);\n@@ -239,1 +257,1 @@\n-    Tree::RegionData rd{si1, mtNMT};\n+    Tree::RegionData rd{si[0], mtNMT};\n@@ -243,1 +261,2 @@\n-    EXPECT_EQ(nullptr, treap_root(tree));\n+\n+    expect_null_root(tree);\n@@ -247,2 +266,2 @@\n-    Tree::RegionData rd{si1, mtNMT};\n-    VMATree::RegionData rd2{si2, mtTest};\n+    Tree::RegionData rd{si[0], mtNMT};\n+    VMATree::RegionData rd2{si[1], mtTest};\n@@ -264,1 +283,1 @@\n-    Tree::RegionData rd{si1, mtNMT};\n+    Tree::RegionData rd{si[0], mtNMT};\n@@ -274,3 +293,0 @@\n-  using Tree = VMATree;\n-  using Node = Tree::TreapNode;\n-  using NCS = NativeCallStackStorage;\n@@ -351,1 +367,1 @@\n-  enum Tpe { Reserved, Committed, Free };\n+  enum Type { Reserved, Committed, Free };\n@@ -353,1 +369,1 @@\n-    Tpe tpe;\n+    Type type;\n@@ -356,1 +372,1 @@\n-    Info() : tpe(Free), flag(mtNone), stack() {}\n+    Info() : type(Free), flag(mtNone), stack() {}\n@@ -358,2 +374,2 @@\n-    Info(Tpe tpe, NativeCallStack stack, MEMFLAGS flag)\n-    : tpe(tpe), flag(flag), stack(stack) {}\n+    Info(Type type, NativeCallStack stack, MEMFLAGS flag)\n+    : type(type), flag(flag), stack(stack) {}\n@@ -366,2 +382,2 @@\n-  const size_t num_pages = 1024 * 512;\n-  Info pages[1024 * 512];\n+  constexpr static const size_t num_pages = 1024 * 512;\n+  Info pages[num_pages];\n@@ -376,2 +392,3 @@\n-  VMATree::SummaryDiff do_it(Tpe tpe, size_t start, size_t size, NativeCallStack stack, MEMFLAGS flag) {\n-    assert(size % page_size == 0 && start % page_size == 0, \"page alignment\");\n+  VMATree::SummaryDiff do_it(Type type, size_t start, size_t size, NativeCallStack stack, MEMFLAGS flag) {\n+    assert(is_aligned(size, page_size) && is_aligned(start, page_size), \"page alignment\");\n+\n@@ -384,1 +401,1 @@\n-    Info new_info(tpe, stack, flag);\n+    Info new_info(type, stack, flag);\n@@ -389,1 +406,1 @@\n-      if (old_info.tpe == Reserved) {\n+      if (old_info.type == Reserved) {\n@@ -391,1 +408,1 @@\n-      } else if (old_info.tpe == Committed) {\n+      } else if (old_info.type == Committed) {\n@@ -396,1 +413,1 @@\n-      if (tpe == Reserved) {\n+      if (type == Reserved) {\n@@ -398,1 +415,1 @@\n-      } else if(tpe == Committed) {\n+      } else if(type == Committed) {\n@@ -428,0 +445,2 @@\n+  constexpr const int candidates_len_flags = 4;\n+  constexpr const int candidates_len_stacks = 2;\n@@ -429,1 +448,1 @@\n-  NativeCallStack stacks[4] = {\n+  NativeCallStack candidate_stacks[candidates_len_stacks] = {\n@@ -432,2 +451,0 @@\n-    make_stack(0xC),\n-    make_stack(0xD)\n@@ -436,0 +453,6 @@\n+  const MEMFLAGS candidate_flags[candidates_len_flags] = {\n+    mtNMT,\n+    mtTest,\n+    mtGC,\n+    mtCompiler\n+  };\n@@ -447,2 +470,3 @@\n-    const MEMFLAGS flag = (MEMFLAGS)(os::random() % mt_number_of_types);\n-    const NativeCallStack stack = stacks[os::random() % 4];\n+    const MEMFLAGS flag = candidate_flags[os::random() % candidates_len_flags];\n+    const NativeCallStack stack = candidate_stacks[os::random() % candidates_len_stacks];\n+\n@@ -452,1 +476,1 @@\n-    const SimpleVMATracker::Tpe tpe = (SimpleVMATracker::Tpe)(os::random() % 3);\n+    const SimpleVMATracker::Type type = (SimpleVMATracker::Type)(os::random() % 3);\n@@ -456,1 +480,1 @@\n-    if (tpe == SimpleVMATracker::Reserved) {\n+    if (type == SimpleVMATracker::Reserved) {\n@@ -459,1 +483,1 @@\n-    } else if (tpe == SimpleVMATracker::Committed) {\n+    } else if (type == SimpleVMATracker::Committed) {\n@@ -480,1 +504,1 @@\n-               tr->pages[j].tpe == SimpleVMATracker::Free) {\n+               tr->pages[j].type == SimpleVMATracker::Free) {\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":125,"deletions":101,"binary":false,"changes":226,"status":"modified"}]}