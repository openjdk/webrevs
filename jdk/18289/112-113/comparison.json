{"files":[{"patch":"@@ -49,0 +49,2 @@\n+    static constexpr const int32_t _invalid = -1;\n+\n@@ -58,0 +60,5 @@\n+\n+    bool is_invalid() {\n+      return _stack_index == _invalid;\n+    }\n+\n@@ -59,1 +66,1 @@\n-      : _stack_index(-1) {\n+      : _stack_index(_invalid) {\n@@ -116,1 +123,2 @@\n-  : _arena(mtNMT), _table_size(table_size), _table(nullptr), _stacks(), _is_detailed_mode(is_detailed_mode), _fake_stack(NativeCallStack::FakeMarker::its_fake) {\n+  : _arena(mtNMT), _table_size(table_size), _table(nullptr), _stacks(),\n+    _is_detailed_mode(is_detailed_mode), _fake_stack() {\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,2 +155,3 @@\n-    int64_t reserve;\n-    int64_t commit;\n+    using delta = int64_t;\n+    delta reserve;\n+    delta commit;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,2 +38,3 @@\n-  NCSS::StackIndex empty;\n-  EXPECT_TRUE(NCSS::StackIndex::equals(si, empty));\n+  EXPECT_TRUE(si.is_invalid());\n+  NativeCallStack ncs_received = ncss.get(si);\n+  EXPECT_TRUE(ncs_received.is_empty());\n@@ -48,0 +49,1 @@\n+\n@@ -53,0 +55,1 @@\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_nativecallstackstorage.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  \/\/ Adjacent reservations should result in exactly 2 nodes\n+  \/\/ Adjacent reservations are merged if the properties match.\n@@ -97,1 +97,1 @@\n-    for (int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 10; i++) {\n@@ -100,5 +100,1 @@\n-    int found_nodes = 0;\n-    treap(tree).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(2, found_nodes) << \"Adjacent reservations should result in exactly 2 nodes\";\n+    expect_node_count(tree, 2);\n@@ -107,1 +103,1 @@\n-    for (int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 10; i++) {\n@@ -110,5 +106,1 @@\n-    found_nodes = 0;\n-    treap(tree).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(2, found_nodes) << \"Adjacent reservations should result in exactly 2 nodes\";\n+    expect_node_count(tree, 2);\n@@ -118,1 +110,1 @@\n-    for (int i = 99; i >= 0; i--) {\n+    for (int i = 9; i >= 0; i--) {\n@@ -121,5 +113,1 @@\n-    found_nodes = 0;\n-    treap(tree2).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n-    });\n-    EXPECT_EQ(2, found_nodes) << \"Adjacent reservations should result in exactly 2 nodes\";\n+    expect_node_count(tree2, 2);\n@@ -132,1 +120,1 @@\n-    for (int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 10; i++) {\n@@ -135,1 +123,1 @@\n-    EXPECT_EQ(nullptr, treap_root(tree)) << \"Releasing all memory should result in an empty tree\";\n+    expect_null_root(tree);\n@@ -139,1 +127,1 @@\n-    for (int i = 99; i >= 0; i--) {\n+    for (int i = 9; i >= 0; i--) {\n@@ -142,1 +130,1 @@\n-    EXPECT_EQ(nullptr, treap_root(tree)) << \"Releasing all memory should result in an empty tree\";\n+    expect_null_root(tree);\n@@ -149,1 +137,1 @@\n-    for (int i = 0; i < 100; i++) {\n+    for (int i = 0; i < 10; i++) {\n@@ -152,3 +140,1 @@\n-    int found_nodes = 0;\n-    treap(tree).visit_range_in_order(0, 999999, [&](Node* x) {\n-      found_nodes++;\n+    treap(tree).visit_in_order([&](Node* x) {\n@@ -160,1 +146,1 @@\n-    EXPECT_EQ(2, found_nodes);\n+    expect_node_count(tree, 2);\n@@ -179,1 +165,1 @@\n-    treap(tree).visit_range_in_order(0, 300, [&](Node* x) {\n+    treap(tree).visit_in_order([&](Node* x) {\n@@ -235,1 +221,1 @@\n-    treap(tree).visit_range_in_order(0, 99999, [&](Node* x) {\n+    treap(tree).visit_in_order([&](Node* x) {\n@@ -464,2 +450,10 @@\n-    const size_t page_start = (size_t)(os::random() % SimpleVMATracker::num_pages);\n-    const size_t num_pages = (size_t)(os::random() % (SimpleVMATracker::num_pages - page_start));\n+    size_t page_start = (size_t)(os::random() % SimpleVMATracker::num_pages);\n+    size_t page_end = (size_t)(os::random() % (SimpleVMATracker::num_pages));\n+\n+    if (page_end < page_start) {\n+      const size_t temp = page_start;\n+      page_start = page_end;\n+      page_end = page_start;\n+    }\n+    const size_t num_pages = page_end - page_start;\n+\n@@ -469,0 +463,1 @@\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":27,"deletions":32,"binary":false,"changes":59,"status":"modified"}]}