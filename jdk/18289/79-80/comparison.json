{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -159,34 +160,52 @@\n-  TreapCHeap<int, int, Cmp> treap;\n-  using Node = TreapCHeap<int, int, Cmp>::TreapNode;\n-\n-  treap.visit_range_in_order(0, 100, [&](Node* x) {\n-    EXPECT_TRUE(false) << \"Empty treap has no nodes to visit\";\n-  });\n-\n-  \/\/ Single-element set\n-  treap.upsert(1, 0);\n-  int count = 0;\n-  treap.visit_range_in_order(0, 100, [&](Node* x) {\n-    count++;\n-  });\n-  EXPECT_EQ(1, count);\n-\n-  \/\/ Add an element outside of the range that should not be visited on the right side and\n-  \/\/ one on the left side.\n-  treap.upsert(101, 0);\n-  treap.upsert(-1, 0);\n-  count = 0;\n-  treap.visit_range_in_order(0, 100, [&](Node* x) {\n-    count++;\n-  });\n-  EXPECT_EQ(1, count);\n-\n-  \/\/ Visiting empty range [0, 0) == {}\n-  treap.upsert(0, 0); \/\/ This node should not be visited.\n-  treap.visit_range_in_order(0, 0, [&](Node* x) {\n-    EXPECT_TRUE(false) << \"Empty visiting range should not visit any node\";\n-  });\n-\n-  treap.remove_all();\n-  for (int i = 0; i < 11; i++) {\n-    treap.upsert(i, 0);\n+  { \/\/ Tests with 'default' ordering (ascending)\n+    TreapCHeap<int, int, Cmp> treap;\n+    using Node = TreapCHeap<int, int, Cmp>::TreapNode;\n+\n+    treap.visit_range_in_order(0, 100, [&](Node* x) {\n+      EXPECT_TRUE(false) << \"Empty treap has no nodes to visit\";\n+    });\n+\n+    \/\/ Single-element set\n+    treap.upsert(1, 0);\n+    int count = 0;\n+    treap.visit_range_in_order(0, 100, [&](Node* x) {\n+      count++;\n+    });\n+    EXPECT_EQ(1, count);\n+\n+    \/\/ Add an element outside of the range that should not be visited on the right side and\n+    \/\/ one on the left side.\n+    treap.upsert(101, 0);\n+    treap.upsert(-1, 0);\n+    count = 0;\n+    treap.visit_range_in_order(0, 100, [&](Node* x) {\n+      count++;\n+    });\n+    EXPECT_EQ(1, count);\n+\n+    \/\/ Visiting empty range [0, 0) == {}\n+    treap.upsert(0, 0); \/\/ This node should not be visited.\n+    treap.visit_range_in_order(0, 0, [&](Node* x) {\n+      EXPECT_TRUE(false) << \"Empty visiting range should not visit any node\";\n+    });\n+\n+    treap.remove_all();\n+    for (int i = 0; i < 11; i++) {\n+      treap.upsert(i, 0);\n+    }\n+\n+    ResourceMark rm;\n+    GrowableArray<int> seen;\n+    treap.visit_range_in_order(0, 10, [&](Node* x) {\n+      seen.push(x->key());\n+    });\n+    EXPECT_EQ(10, seen.length());\n+    for (int i = 0; i < 10; i++) {\n+      EXPECT_EQ(i, seen.at(i));\n+    }\n+    GrowableArray<int> seen2;\n+    treap.visit_range_in_order(10, 12, [&](Node* x) {\n+      seen2.push(x->key());\n+    });\n+    EXPECT_EQ(1, seen.length());\n+    EXPECT_EQ(10, seen.at(0));\n@@ -194,8 +213,16 @@\n-  ResourceMark rm;\n-  GrowableArray<int> seen;\n-  treap.visit_range_in_order(0, 10, [&](Node* x) {\n-    seen.push(x->key());\n-  });\n-  EXPECT_EQ(10, seen.length());\n-  for (int i = 0; i < 10; i++) {\n-    EXPECT_EQ(i, seen.at(i));\n+  { \/\/ Test with descending ordering\n+    TreapCHeap<int, int, CmpInverse> treap;\n+    using Node = TreapCHeap<int, int, CmpInverse>::TreapNode;\n+\n+    for (int i = 0; i < 10; i++) {\n+      treap.upsert(i, 0);\n+    }\n+    ResourceMark rm;\n+    GrowableArray<int> seen;\n+    treap.visit_range_in_order(0, 10, [&](Node* x) {\n+      seen.push(x->key());\n+    });\n+    EXPECT_EQ(10, seen.length());\n+    for (int i = 0; i < 10; i++) {\n+      EXPECT_EQ(9-i, seen.at(i));\n+    }\n@@ -203,6 +230,0 @@\n-  GrowableArray<int> seen2;\n-  treap.visit_range_in_order(10, 12, [&](Node* x) {\n-    seen2.push(x->key());\n-  });\n-  EXPECT_EQ(1, seen.length());\n-  EXPECT_EQ(10, seen.at(0));\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_treap.cpp","additions":69,"deletions":48,"binary":false,"changes":117,"status":"modified"}]}