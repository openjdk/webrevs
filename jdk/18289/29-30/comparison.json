{"files":[{"patch":"@@ -34,1 +34,1 @@\n-      return state.out.mdata().flag;\n+      return state.out.metadata().flag;\n@@ -176,1 +176,1 @@\n-       !Metadata::equals(stB.out.mdata(), Metadata{})) \/\/ The metadata was changed from empty earlier\n+       !Metadata::equals(stB.out.metadata(), Metadata{})) \/\/ The metadata was changed from empty earlier\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  \/\/ Each node has some stack and a flag associated with it.\n+  \/\/ Each point has some stack and a flag associated with it.\n@@ -79,4 +79,0 @@\n-      } else if (this->type == StateType::Committed) {\n-        if (this->type == StateType::Committed) {\n-          this->data.flag = b.data.flag;\n-        }\n@@ -85,1 +81,2 @@\n-    Metadata mdata() const {\n+\n+    Metadata metadata() const {\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  \/\/ Committing in middle works as expected\n+  \/\/ Committing in middle of reservation ends with a sequence of 4 nodes\n@@ -71,1 +71,1 @@\n-    tree.commit_mapping(0, 50, md);\n+    tree.commit_mapping(50, 25, md);\n@@ -74,1 +74,1 @@\n-    size_t wanted[3] = {0, 50, 100};\n+    size_t wanted[4] = {0, 50, 75, 100};\n@@ -76,1 +76,1 @@\n-      for (int i = 0; i < 3; i++) {\n+      for (int i = 0; i < 4; i++) {\n@@ -88,1 +88,1 @@\n-    ASSERT_EQ(3, i) << \"0 - 50 - 100 nodes expected\";\n+    ASSERT_EQ(4, i) << \"0 - 50 - 75 - 100 nodes expected\";\n@@ -92,0 +92,1 @@\n+    EXPECT_TRUE(exists(found[3]));\n@@ -94,1 +95,2 @@\n-  auto commit_whole = [&](VMATree::Metadata& md) { \/\/ Committing in a whole reserved range results in 2 nodes\n+  \/\/ Committing in a whole reserved range results in 2 nodes\n+  auto commit_whole = [&](VMATree::Metadata& md) {\n@@ -109,0 +111,1 @@\n+\n@@ -121,1 +124,1 @@\n-  { \/\/ Identical operation but different metadata should store both\n+  { \/\/ Identical operation but different metadata should not merge\n@@ -134,1 +137,1 @@\n-  { \/\/ Reserving should overwrite commit\n+  { \/\/ Reserving after commit should overwrite commit\n@@ -144,1 +147,1 @@\n-        EXPECT_EQ(x->val().out.mdata().flag, mtTest);\n+        EXPECT_EQ(x->val().out.metadata().flag, mtTest);\n@@ -173,1 +176,1 @@\n-    \/\/ should inherit the reserved region\n+    \/\/ should replace the reserved region's metadata.\n@@ -175,1 +178,1 @@\n-    VMATree::Metadata md2{si2, mtNone};\n+    VMATree::Metadata md2{si2, mtTest};\n@@ -181,20 +184,1 @@\n-        EXPECT_EQ(mtNMT, x->val().out.mdata().flag);\n-      }\n-      if (x->key() == 100) {\n-        EXPECT_EQ(mtNMT, x->val().in.mdata().flag);\n-      }\n-    });\n-  }\n-  { \/\/ Merging prioritises the first region when committing over two reserved regions.\n-    Tree tree;\n-    VMATree::Metadata md{si1, mtTest };\n-    VMATree::Metadata md2{si2, mtNMT };\n-    VMATree::Metadata md3{si1, mtNone };\n-    tree.reserve_mapping(0, 50, md);\n-    tree.reserve_mapping(50, 50, md2);\n-    tree.commit_mapping(0, 100, md3);\n-    int found_nodes = 0;\n-    tree.visit(0, 99999, [&](Node* x) {\n-      EXPECT_TRUE(x->key() == 0 || x->key() == 100);\n-      if (x->key() == 0) {\n-        EXPECT_EQ(x->val().out.mdata().flag, mtTest);\n+        EXPECT_EQ(mtTest, x->val().out.metadata().flag);\n@@ -203,1 +187,1 @@\n-        EXPECT_EQ(x->val().in.mdata().flag, mtTest);\n+        EXPECT_EQ(mtTest, x->val().in.metadata().flag);\n@@ -205,1 +189,0 @@\n-      found_nodes++;\n@@ -207,1 +190,0 @@\n-    EXPECT_EQ(2, found_nodes);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"}]}