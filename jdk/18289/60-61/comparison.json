{"files":[{"patch":"@@ -47,1 +47,0 @@\n-  friend class VMATree;\n@@ -49,1 +48,1 @@\n-\n+public:\n@@ -85,0 +84,1 @@\n+private:\n@@ -89,1 +89,0 @@\n-private:\n@@ -159,0 +158,1 @@\n+\n@@ -191,1 +191,0 @@\n-        tty->print_cr(\"Failed at priority\");\n@@ -198,1 +197,0 @@\n-      tty->print_cr(\"Failed at depth\");\n@@ -337,0 +335,2 @@\n+\n+  \/\/ Visit all TreapNodes in ascending key order.\n@@ -341,0 +341,24 @@\n+\n+  \/\/ Visit all TreapNodes where key is in range [from, to)\n+  template<typename F>\n+  void visit_range(const K& from, const K& to, F f) {\n+    GrowableArrayCHeap<TreapNode*, mtNMT> to_visit;\n+    to_visit.push(_root);\n+    TreapNode* head = nullptr;\n+    while (!to_visit.is_empty()) {\n+      head = to_visit.pop();\n+      if (head == nullptr) continue;\n+\n+      int cmp_from = COMPARATOR::cmp(head->key(), from);\n+      int cmp_to = COMPARATOR::cmp(head->key(), to);\n+      if (cmp_from < 0) {\n+        to_visit.push(head->right());\n+      } else if (cmp_to >= 0) {\n+        to_visit.push(head->left());\n+      } else if (cmp_from >= 0 && cmp_to < 0) {\n+        f(head);\n+        to_visit.push(head->left());\n+        to_visit.push(head->right());\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -139,37 +139,11 @@\n-  { \/\/ Iterate over each node which is larger than A\n-    GrowableArrayCHeap<TreapNode*, mtNMT> to_visit;\n-    to_visit.push(tree._root);\n-    TreapNode* head = nullptr;\n-    while (!to_visit.is_empty()) {\n-      head = to_visit.pop();\n-      if (head == nullptr) continue;\n-\n-      int cmp_A = AddressComparator::cmp(head->key(), A);\n-      int cmp_B = AddressComparator::cmp(head->key(), B);\n-      if (cmp_B > 0) {\n-        \/\/ head > B\n-        to_visit.push(head->left());\n-      } else if (cmp_A <= 0) {\n-        \/\/ head <= A\n-        to_visit.push(head->right());\n-      } else if (cmp_A > 0 && cmp_B <= 0) {\n-        \/\/ A < head <= B\n-        to_visit.push(head->left());\n-        to_visit.push(head->right());\n-\n-        stB.out = head->val().out;\n-        if (cmp_B < 0) {\n-          \/\/ Record all nodes preceding B.\n-          to_be_deleted_inbetween_a_b.push({head->key(), head->val()});\n-        } else if (cmp_B == 0) {\n-          \/\/ Re-purpose B node, unless it would result in a noop node, in\n-          \/\/ which case record old node at B for deletion and summary accounting.\n-          if (stB.is_noop()) {\n-            to_be_deleted_inbetween_a_b.push(AddressState{B, head->val()});\n-          } else {\n-            head->val() = stB;\n-          }\n-          B_needs_insert = false;\n-        } else {\n-          assert(false, \"Cannot happen.\");\n-        }\n+  tree.visit_range(A + 1, B + 1, [&](TreapNode* head) {\n+    int cmp_B = AddressComparator::cmp(head->key(), B);\n+    stB.out = head->val().out;\n+    if (cmp_B < 0) {\n+      \/\/ Record all nodes preceding B.\n+      to_be_deleted_inbetween_a_b.push({head->key(), head->val()});\n+    } else if (cmp_B == 0) {\n+      \/\/ Re-purpose B node, unless it would result in a noop node, in\n+      \/\/ which case record old node at B for deletion and summary accounting.\n+      if (stB.is_noop()) {\n+        to_be_deleted_inbetween_a_b.push(AddressState{B, head->val()});\n@@ -177,2 +151,1 @@\n-        \/\/ Impossible.\n-        assert(false, \"Cannot happen.\");\n+        head->val() = stB;\n@@ -180,0 +153,1 @@\n+      B_needs_insert = false;\n@@ -181,1 +155,1 @@\n-  }\n+  });\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":14,"deletions":40,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -152,28 +152,0 @@\n-  \/\/ Visit all nodes between [from, to) and call f on them.\n-  template<typename F>\n-  void visit(position from, position to, F f) {\n-    ResourceArea area(mtNMT);\n-    ResourceMark rm(&area);\n-    GrowableArray<TreapNode*> to_visit(&area, 16, 0, nullptr);\n-    to_visit.push(tree._root);\n-    TreapNode* head = nullptr;\n-    while (!to_visit.is_empty()) {\n-      head = to_visit.pop();\n-      if (head == nullptr) continue;\n-\n-      int cmp_from = AddressComparator::cmp(head->key(), from);\n-      int cmp_to = AddressComparator::cmp(head->key(), to);\n-      if (cmp_from >= 0 && cmp_to < 0) {\n-        f(head);\n-      }\n-      if (cmp_to >= 0) {\n-        to_visit.push(head->left());\n-      } else if (cmp_from >= 0) {\n-        to_visit.push(head->left());\n-        to_visit.push(head->right());\n-      } else {\n-        to_visit.push(head->right());\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    tree.visit(0, 999999, [&](Node* x) {\n+    tree.tree.visit_range(0, 999999, [&](Node* x) {\n@@ -79,1 +79,1 @@\n-    tree.visit(0, 999999, [&](Node* x) {\n+    tree.tree.visit_range(0, 999999, [&](Node* x) {\n@@ -90,1 +90,1 @@\n-    tree2.visit(0, 999999, [&](Node* x) {\n+    tree2.tree.visit_range(0, 999999, [&](Node* x) {\n@@ -103,1 +103,1 @@\n-    tree2.visit(0, 999999, [&](Node* x) {\n+    tree2.tree.visit_range(0, 999999, [&](Node* x) {\n@@ -141,1 +141,1 @@\n-    tree.visit(0, 300, [&](Node* x) {\n+    tree.tree.visit_range(0, 300, [&](Node* x) {\n@@ -162,1 +162,1 @@\n-    tree.visit(0, 999999, [&](Node* x) {\n+    tree.tree.visit_range(0, 999999, [&](Node* x) {\n@@ -190,1 +190,1 @@\n-    tree.visit(0, 99999, [&](Node* x) {\n+    tree.tree.visit_range(0, 99999, [&](Node* x) {\n@@ -203,1 +203,1 @@\n-    tree.visit(0, 99999, [&](Node* x) {\n+    tree.tree.visit_range(0, 99999, [&](Node* x) {\n@@ -222,1 +222,1 @@\n-    tree.visit(0, 99999, [&](Node* x) {\n+    tree.tree.visit_range(0, 99999, [&](Node* x) {\n@@ -241,1 +241,1 @@\n-    tree.visit(0, 99999, [&](Node* x) {\n+    tree.tree.visit_range(0, 99999, [&](Node* x) {\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}