{"files":[{"patch":"@@ -45,1 +45,1 @@\n-template<typename K, typename V, int(*CMP)(K,K)>\n+template<typename K, typename V, typename COMPARATOR>\n@@ -47,1 +47,1 @@\n-  template<typename InnerK, typename InnerV, int(*CMPP)(InnerK,InnerK), typename Allocator>\n+  template<typename InnerK, typename InnerV, typename InnerCOMPARATOR, typename Allocator>\n@@ -50,1 +50,1 @@\n-  using Node = TreapNode<K,V,CMP>;\n+  using Node = TreapNode<K,V,COMPARATOR>;\n@@ -81,1 +81,1 @@\n-template<typename K, typename V, int(*CMP)(K,K), typename ALLOCATOR>\n+template<typename K, typename V, typename COMPARATOR, typename ALLOCATOR>\n@@ -86,1 +86,1 @@\n-  using Node = TreapNode<K, V, CMP>;\n+  using Node = TreapNode<K, V, COMPARATOR>;\n@@ -120,1 +120,1 @@\n-    if ((CMP(head->_key, key) <= 0 && mode == LEQ) || (CMP(head->_key, key) < 0 && mode == LT)) {\n+    if ((COMPARATOR::cmp(head->_key, key) <= 0 && mode == LEQ) || (COMPARATOR::cmp(head->_key, key) < 0 && mode == LT)) {\n@@ -161,1 +161,1 @@\n-    if (CMP(node->_key, k) == 0) { \/\/ EQ\n+    if (COMPARATOR::cmp(node->_key, k) == 0) { \/\/ EQ\n@@ -165,1 +165,1 @@\n-    if (CMP(node->_key, k) <= 0) { \/\/ LEQ\n+    if (COMPARATOR::cmp(node->_key, k) <= 0) { \/\/ LEQ\n@@ -234,1 +234,1 @@\n-      int cmp_r = CMP(head->key(), key);\n+      int cmp_r = COMPARATOR::cmp(head->key(), key);\n@@ -254,1 +254,1 @@\n-      int cmp_r = CMP(head->key(), key);\n+      int cmp_r = COMPARATOR(head->key(), key);\n@@ -282,2 +282,2 @@\n-template<typename K, typename V, int (*CMP)(K, K)>\n-using TreapCHeap = Treap<K, V, CMP, TreapCHeapAllocator>;\n+template<typename K, typename V, typename COMPARATOR>\n+using TreapCHeap = Treap<K, V, COMPARATOR, TreapCHeapAllocator>;\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,6 +42,9 @@\n-  static int addr_cmp(size_t a, size_t b) {\n-    if (a < b) return -1;\n-    if (a == b) return 0;\n-    if (a > b) return 1;\n-    ShouldNotReachHere();\n-  }\n+  class AddressComparison {\n+  public:\n+    static int cmp(size_t a, size_t b) {\n+      if (a < b) return -1;\n+      if (a == b) return 0;\n+      if (a > b) return 1;\n+      ShouldNotReachHere();\n+    }\n+  };\n@@ -110,2 +113,2 @@\n-  using VTreap = TreapNode<size_t, IntervalChange, addr_cmp>;\n-  TreapCHeap<size_t, IntervalChange, addr_cmp> tree;\n+  using VTreap = TreapNode<size_t, IntervalChange, AddressComparison>;\n+  TreapCHeap<size_t, IntervalChange, AddressComparison> tree;\n@@ -157,2 +160,2 @@\n-      int cmp_from = addr_cmp(head->key(), from);\n-      int cmp_to = addr_cmp(head->key(), to);\n+      int cmp_from = AddressComparison::cmp(head->key(), from);\n+      int cmp_to = AddressComparison::cmp(head->key(), to);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"}]}