{"files":[{"patch":"@@ -43,0 +43,4 @@\n+  VMATree::TreapNode* find(VMATree::VMATreap& treap, const VMATree::position key) {\n+    return treap.find(treap._root, key);\n+  }\n+\n@@ -355,0 +359,4 @@\n+\n+    bool eq(Info other) {\n+      return flag == other.flag && stack.equals(other.stack);\n+    }\n@@ -413,0 +421,3 @@\n+  \/\/ In this test we use ASSERT macros from gtest instead of EXPECT\n+  \/\/ as any error will propagate and become larger as the test progresses.\n+\n@@ -425,1 +436,1 @@\n-  const int operation_count = 1000000; \/\/ One million\n+  const int operation_count = 100000; \/\/ One hundred thousand\n@@ -458,4 +469,44 @@\n-      assert(td.reserve == sd.reserve, \"\");\n-      assert(td.commit == sd.commit, \"\");\n-      EXPECT_EQ(td.reserve, sd.reserve);\n-      EXPECT_EQ(td.commit, sd.commit);\n+      ASSERT_EQ(td.reserve, sd.reserve);\n+      ASSERT_EQ(td.commit, sd.commit);\n+    }\n+\n+    \/\/ Every ten thousand operations do an in-depth check of the consistency of the data\n+    \/\/ between the two trackers.\n+    if (i % 10000 == 0) {\n+      size_t j = 0;\n+      while (j < tr->num_pages) {\n+        while (j < tr->num_pages &&\n+               tr->pages[j].tpe == SimpleVMATracker::Free) {\n+          j++;\n+        }\n+\n+        if (j == tr->num_pages) {\n+          break;\n+        }\n+\n+        size_t start = j;\n+        SimpleVMATracker::Info starti = tr->pages[start];\n+\n+        while (j < tr->num_pages &&\n+               tr->pages[j].eq(starti)) {\n+          j++;\n+        }\n+\n+        size_t end = j-1;\n+        ASSERT_LE(end, tr->num_pages);\n+        SimpleVMATracker::Info endi = tr->pages[end];\n+\n+        VMATree::VMATreap& treap = this->treap(tree);\n+        VMATree::TreapNode* startn = find(treap, start * 4096);\n+        ASSERT_NE(nullptr, startn);\n+        VMATree::TreapNode* endn = find(treap, (end * 4096) + 4096);\n+        ASSERT_NE(nullptr, endn);\n+\n+        const NativeCallStack& start_stack = ncss.get(startn->val().out.stack());\n+        const NativeCallStack& end_stack = ncss.get(endn->val().in.stack());\n+        ASSERT_TRUE(starti.stack.equals(start_stack));\n+        ASSERT_TRUE(endi.stack.equals(end_stack));\n+\n+        ASSERT_EQ(starti.flag, startn->val().out.flag());\n+        ASSERT_EQ(endi.flag, endn->val().in.flag());\n+      }\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"}]}