{"files":[{"patch":"@@ -539,0 +539,1 @@\n+CHeapBitMap* JVMFlag::iteratorMarkers = new CHeapBitMap(JVMFlag::numFlags, mtNMT);\n@@ -704,7 +705,2 @@\n-  \/\/ Sort\n-  JVMFlag** array = NEW_C_HEAP_ARRAY_RETURN_NULL(JVMFlag*, length, mtArguments);\n-  if (array != nullptr) {\n-    for (size_t i = 0; i < length; i++) {\n-      array[i] = &flagTable[i];\n-    }\n-    qsort(array, length, sizeof(JVMFlag*), compare_flags);\n+  \/\/ Print flags without allocating memory. Start by marking all flags clear.\n+  iteratorMarkers->clear();\n@@ -712,0 +708,4 @@\n+  \/\/ Print the flag with best sort value, then mark it.\n+  for (size_t j = 0; j < length; j++) {\n+    JVMFlag* best_flag = nullptr;\n+    size_t best_i = 0;\n@@ -713,2 +713,5 @@\n-      if (array[i]->is_unlocked() && !(skipDefaults && array[i]->is_default())) {\n-        array[i]->print_on(out, withComments, printRanges);\n+      if (!iteratorMarkers->at(i) && flagTable[i].is_unlocked() && !(skipDefaults && flagTable[i].is_default())) {\n+        if ((best_flag == nullptr) || (strcmp(best_flag->name(), flagTable[i].name()) > 0)) {\n+          best_flag = &flagTable[i];\n+          best_i = i;\n+        }\n@@ -717,7 +720,3 @@\n-    FREE_C_HEAP_ARRAY(JVMFlag*, array);\n-  } else {\n-    \/\/ OOM? Print unsorted.\n-    for (size_t i = 0; i < length; i++) {\n-      if (flagTable[i].is_unlocked() && !(skipDefaults && flagTable[i].is_default())) {\n-        flagTable[i].print_on(out, withComments, printRanges);\n-      }\n+    if (best_flag != nullptr) {\n+      best_flag->print_on(out, withComments, printRanges);\n+      iteratorMarkers->at_put(best_i, true);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"utilities\/bitMap.hpp\"\n@@ -155,0 +156,2 @@\n+  static CHeapBitMap* iteratorMarkers;\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}