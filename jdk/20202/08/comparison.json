{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/bitMap.hpp\"\n@@ -695,1 +696,1 @@\n-  const size_t length = JVMFlag::numFlags - 1;\n+  constexpr size_t length = (sizeof(flagTable) \/ sizeof(JVMFlag)) - 1;\n@@ -704,8 +705,7 @@\n-  \/\/ Sort\n-  JVMFlag** array = NEW_C_HEAP_ARRAY_RETURN_NULL(JVMFlag*, length, mtArguments);\n-  if (array != nullptr) {\n-    for (size_t i = 0; i < length; i++) {\n-      array[i] = &flagTable[i];\n-    }\n-    qsort(array, length, sizeof(JVMFlag*), compare_flags);\n-\n+  BitMap::bm_word_t iteratorArray[BitMap::calc_size_in_words(length)];\n+  BitMapView iteratorMarkers(iteratorArray, length);\n+  iteratorMarkers.clear_range(0, length);\n+  \/\/ Print the flag with best sort value, then mark it.\n+  for (size_t j = 0; j < length; j++) {\n+    JVMFlag* bestFlag = nullptr;\n+    size_t bestFlagIndex = 0;\n@@ -713,2 +713,7 @@\n-      if (array[i]->is_unlocked() && !(skipDefaults && array[i]->is_default())) {\n-        array[i]->print_on(out, withComments, printRanges);\n+      const bool skip = (skipDefaults && flagTable[i].is_default());\n+      const bool visited = iteratorMarkers.at(i);\n+      if (!visited && flagTable[i].is_unlocked() && !skip) {\n+        if ((bestFlag == nullptr) || (strcmp(bestFlag->name(), flagTable[i].name()) > 0)) {\n+          bestFlag = &flagTable[i];\n+          bestFlagIndex = i;\n+        }\n@@ -717,7 +722,3 @@\n-    FREE_C_HEAP_ARRAY(JVMFlag*, array);\n-  } else {\n-    \/\/ OOM? Print unsorted.\n-    for (size_t i = 0; i < length; i++) {\n-      if (flagTable[i].is_unlocked() && !(skipDefaults && flagTable[i].is_default())) {\n-        flagTable[i].print_on(out, withComments, printRanges);\n-      }\n+    if (bestFlag != nullptr) {\n+      bestFlag->print_on(out, withComments, printRanges);\n+      iteratorMarkers.at_put(bestFlagIndex, true);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-void BitMap::verify_size(idx_t size_in_bits) {\n+constexpr void BitMap::verify_size(idx_t size_in_bits) {\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  static idx_t raw_to_words_align_up(idx_t bit) {\n+  constexpr static idx_t raw_to_words_align_up(idx_t bit) {\n@@ -79,1 +79,1 @@\n-  static idx_t raw_to_words_align_down(idx_t bit) {\n+  constexpr static idx_t raw_to_words_align_down(idx_t bit) {\n@@ -198,1 +198,1 @@\n-  static idx_t calc_size_in_words(size_t size_in_bits) {\n+  constexpr static idx_t calc_size_in_words(size_t size_in_bits) {\n@@ -260,1 +260,1 @@\n-  static void verify_size(idx_t size_in_bits) NOT_DEBUG_RETURN;\n+  constexpr static void verify_size(idx_t size_in_bits) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}