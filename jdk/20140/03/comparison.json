{"files":[{"patch":"@@ -2874,0 +2874,1 @@\n+  bool abs_stride_is_one = stride_con == 1 || stride_con == -1;\n@@ -2885,0 +2886,9 @@\n+  \/\/ if abs(stride) == 1, an Assertion Predicate for the final iv value is added. We don't know the final iv value until\n+  \/\/ we're done with range check elimination so use a place holder.\n+  Node* final_iv_placeholder = nullptr;\n+  if (abs_stride_is_one) {\n+    final_iv_placeholder = new Node(1);\n+    _igvn.set_type(final_iv_placeholder, TypeInt::INT);\n+    final_iv_placeholder->init_req(0, loop_entry);\n+  }\n+\n@@ -2988,0 +2998,14 @@\n+          if (abs_stride_is_one) {\n+            \/\/ If the main loop becomes empty and the array access for this range check is sunk out of the loop, the index\n+            \/\/ for the array access will be set to the index value of the final iteration which could be out of loop.\n+            \/\/ Add an Assertion Predicate for that corner case. The final iv is computed from LoopLimit which is the\n+            \/\/ LoopNode::limit() only if abs(stride) == 1 otherwise the computation depends on LoopNode::init_trip() as\n+            \/\/ well. When LoopLimit only depends on LoopNode::limit(), there are cases where the zero trip guard for the\n+            \/\/ main loop doesn't constant fold after range check elimination but, the array access for the final\n+            \/\/ iteration of the main loop is out of bound and the index for that access is out of range for the range\n+            \/\/ check CastII.\n+            loop_entry = add_range_check_elimination_assertion_predicate(loop, loop_entry, scale_con, int_offset,\n+                                                                         int_limit, stride_con, final_iv_placeholder, false);\n+            assert(!assertion_predicate_has_loop_opaque_node(loop_entry->in(0)->as_If()), \"unexpected\");\n+          }\n+\n@@ -3119,0 +3143,5 @@\n+  if (abs_stride_is_one) {\n+    Node* final_iv = new SubINode(main_limit, cl->stride());\n+    register_new_node(final_iv, loop_entry);\n+    _igvn.replace_node(final_iv_placeholder, final_iv);\n+  }\n@@ -3122,2 +3151,0 @@\n-\n-  return;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335393\n+ * @summary C2: assert(!had_error) failed: bad dominance\n+ * @requires vm.compiler2.enabled\n+* @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:-UseLoopPredicate\n+ *                   -XX:LoopMaxUnroll=0 TestEmptyLoopDeadCast\n+ *\/\n+\n+public class TestEmptyLoopDeadCast {\n+    public static void main(String[] args) {\n+        int[] array = new int[100];\n+        for (int i = 0; i < 20_000; i++) {\n+            test1Helper(1, 101, array);\n+            test1(0, array);\n+            test2Helper(0, -101, array);\n+            test2(0, array);\n+        }\n+    }\n+\n+    private static int test1(int start, int[] array) {\n+        return test1Helper(start, 0, array);\n+    }\n+\n+    private static int test1Helper(int start, int stop, int[] array) {\n+        if (array == null) {\n+        }\n+        int v = 0;\n+        for (int i = start; i < stop; i++) {\n+            v = array[i - 1];\n+        }\n+        return v;\n+    }\n+\n+    private static int test2(int start, int[] array) {\n+        return test2Helper(start, -1, array);\n+    }\n+\n+    private static int test2Helper(int start, int stop, int[] array) {\n+        if (array == null) {\n+        }\n+        int v = 0;\n+        for (int i = start-1; i > stop; i--) {\n+            v = array[-1 - i];\n+        }\n+        return v;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestEmptyLoopDeadCast.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}