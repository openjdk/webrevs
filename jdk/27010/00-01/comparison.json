{"files":[{"patch":"@@ -200,1 +200,3 @@\n-    \/\/\/ This class may be substituted by a generated class from [GenerateJLIClassesHelper].\n+    \/\/\/\n+    \/\/\/ This class may be substituted in the JDK's modules image, or in an AOT\n+    \/\/\/ cache, by a version generated by [GenerateJLIClassesHelper].\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DelegatingMethodHandle.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -943,1 +943,3 @@\n-    \/\/\/ This class may be substituted by a generated class from [GenerateJLIClassesHelper].\n+    \/\/\/\n+    \/\/\/ This class may be substituted in the JDK's modules image, or in an AOT\n+    \/\/\/ cache, by a version generated by [GenerateJLIClassesHelper].\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,4 @@\n-\/\/\/ method types, which have many varieties, this generator needs logs to detect\n-\/\/\/ which method types are used, so our generation matches the actual usage.\n+\/\/\/ method types, which have many varieties, this generator needs *traces* to\n+\/\/\/ detect which method types are used, so generation matches the actual usage.\n+\/\/\/ See the main entrypoint [#generateHolderClasses(Stream)] for more details\n+\/\/\/ about *traces*.\n@@ -61,3 +63,2 @@\n-\/\/\/ This does not have comprehensive coverage of all lambda forms created in a\n-\/\/\/ Java Runtime. For example, forms created by {@link LambdaFormEditor} are\n-\/\/\/ not captured.\n+\/\/\/ Note this pregeneration does not cover all lambda forms that can be created.\n+\/\/\/ For example, forms created by [LambdaFormEditor] are not captured.\n@@ -65,4 +66,28 @@\n-\/\/\/ Currently, `GenerateJLIClassesPlugin` and the AOT process pre-generate with\n-\/\/\/ `GenerateJLIClassesHelper`. `GenerateJLIClassesPlugin` runs for JDK builds;\n-\/\/\/ in a JDK image, `javap` can check the actual content of the generated classes,\n-\/\/\/ such as: (Note to escape `$` in bash)\n+\/\/\/ Pregenerated species classes are resolved in [ClassSpecializer.Factory#loadSpecies]\n+\/\/\/ and behave identically to on-demand generated ones.  Pregenerated lambda\n+\/\/\/ forms are resolved in [InvokerBytecodeGenerator#lookupPregenerated], which\n+\/\/\/ look up from the following 4 possibly-generated classes:\n+\/\/\/  -  [Invokers.Holder]\n+\/\/\/  -  [DirectMethodHandle.Holder]\n+\/\/\/  -  [DelegatingMethodHandle.Holder]\n+\/\/\/  -  [LambdaForm.Holder]\n+\/\/\/\n+\/\/\/ [VarHandle] linker forms, analogous to invoker forms in [Invokers.Holder],\n+\/\/\/ have a similar pre-generation system except it is done at source generation;\n+\/\/\/ they reside in [VarHandleGuards].\n+\/\/\/\n+\/\/\/ ## Usages of this generator\n+\/\/\/ Currently, `GenerateJLIClassesHelper` is invoked when creating a modular JDK\n+\/\/\/ image or generating an AOT cache.\n+\/\/\/\n+\/\/\/ #### Modular Image\n+\/\/\/ When creating a modular JDK image,\n+\/\/\/ `jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin` passes the\n+\/\/\/ *traces* in the file `jdk\/tools\/jlink\/internal\/plugins\/default_jli_trace.txt`\n+\/\/\/ in `$JAVA_HOME\/lib\/modules` to this generator.  The *traces* are generated\n+\/\/\/ from the execution of `build.tools.classlist.HelloClasslist` in the build\n+\/\/\/ process of the JDK.\n+\/\/\/\n+\/\/\/ > To list all the Species classes in a JDK image:\n+\/\/\/ > ```\n+\/\/\/ jimage list $JAVA_HOME\/lib\/modules | grep BoundMethodHandle.Species_\n@@ -70,0 +95,4 @@\n+\/\/\/\n+\/\/\/ > All these pregenerated classes can be examined by javap in the same image:\n+\/\/\/ > (Note to escape `$` in bash)\n+\/\/\/ > ```\n@@ -71,1 +100,0 @@\n-\/\/\/ javap -c -p -v java.lang.invoke.BoundMethodHandle\\$Species_J\n@@ -73,2 +101,0 @@\n-\/\/\/ The AOT process pregenerates in the end of the training run, and initializes\n-\/\/\/ the classes for linkage in assembly phase; see `regeneratedClasses.hpp`.\n@@ -76,2 +102,5 @@\n-\/\/\/ VarHandle has a similar pre-generation system for its forms, except it is\n-\/\/\/ done at source generation; they reside in [VarHandleGuards].\n+\/\/\/ #### AOT Cache\n+\/\/\/ When creating an AOT cache, *traces* generated from the training run are\n+\/\/\/ captured and stored inside the AOT configuration file, and are accessed with\n+\/\/\/ the C++ `FinalImageRecipes` class.  Classes regenerated from these *traces*\n+\/\/\/ are linked in assembly phase; see `regeneratedClasses.hpp`.\n@@ -356,2 +385,2 @@\n-    \/\/\/ Returns a map of class name in internal form to the corresponding class\n-    \/\/\/ bytes.\n+    \/\/\/ Returns a map from class names in internal form to the corresponding\n+    \/\/\/ class bytes.\n@@ -362,1 +391,1 @@\n-    \/\/\/ and LF_RESOLVE trace logs, which are created according to {@link\n+    \/\/\/ and LF_RESOLVE *trace* logs, which are created according to {@link\n@@ -369,0 +398,1 @@\n+    \/\/\/ @param traces the *traces* to determine the lambda forms and species\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":47,"deletions":17,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -701,1 +701,3 @@\n-    \/\/\/ This class may be substituted by a generated class from [GenerateJLIClassesHelper].\n+    \/\/\/\n+    \/\/\/ This class may be substituted in the JDK's modules image, or in an AOT\n+    \/\/\/ cache, by a version generated by [GenerateJLIClassesHelper].\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+    \/\/\/ All objects are erased to a reference.\n@@ -145,1 +146,1 @@\n-        L_TYPE('L', Object.class, Wrapper.OBJECT, TypeKind.REFERENCE), \/\/ all reference types\n+        L_TYPE('L', Object.class, Wrapper.OBJECT, TypeKind.REFERENCE),\n@@ -149,2 +150,2 @@\n-        D_TYPE('D', double.class, Wrapper.DOUBLE, TypeKind.DOUBLE),  \/\/ all primitive types\n-        V_TYPE('V', void.class,   Wrapper.VOID,   TypeKind.VOID);    \/\/ not valid in all contexts\n+        D_TYPE('D', double.class, Wrapper.DOUBLE, TypeKind.DOUBLE),  \/\/ end arg types\n+        V_TYPE('V', void.class,   Wrapper.VOID,   TypeKind.VOID);    \/\/ only valid in method return\n@@ -1736,1 +1737,3 @@\n-    \/\/\/ This class may be substituted by a generated class from [GenerateJLIClassesHelper].\n+    \/\/\/\n+    \/\/\/ This class may be substituted in the JDK's modules image, or in an AOT\n+    \/\/\/ cache, by a version generated by [GenerateJLIClassesHelper].\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}