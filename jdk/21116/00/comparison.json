{"files":[{"patch":"@@ -1470,1 +1470,1 @@\n-                    print(Convert.quote(String.valueOf((char)((Number)tree.value).intValue())));\n+                    print(Convert.quote((char)((Number)tree.value).intValue(), true));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340568\n+ * @summary Incorrect escaping of single quotes when pretty-printing character literals\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ *\/\n+\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.tree.Pretty;\n+import com.sun.tools.javac.tree.TreeMaker;\n+import com.sun.tools.javac.util.Context;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+public class PrettyCharLiteral {\n+    public static void main(String... args) throws Exception {\n+        new PrettyCharLiteral().run();\n+    }\n+\n+    private final TreeMaker make;\n+\n+    private PrettyCharLiteral() {\n+        Context ctx = new Context();\n+        JavacFileManager.preRegister(ctx);\n+        this.make = TreeMaker.instance(ctx);\n+    }\n+\n+    void run() throws Exception {\n+        assertEquals(\n+                prettyPrintLiteral('\\''),\n+                \"\"\"\n+                '\\\\''\n+                \"\"\".trim());\n+        assertEquals(\n+                prettyPrintLiteral('\"'),\n+                \"\"\"\n+                '\"'\n+                \"\"\".trim());\n+        assertEquals(\n+                prettyPrintLiteral(\"'\"),\n+                \"\"\"\n+                \"'\"\n+                \"\"\".trim());\n+        assertEquals(\n+                prettyPrintLiteral(\"\\\"\"),\n+                \"\"\"\n+                \"\\\\\"\"\n+                \"\"\".trim());\n+    }\n+\n+    private void assertEquals(String actual, String expected) {\n+        if (!actual.equals(expected)) {\n+            throw new AssertionError(\"expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+\n+    private String prettyPrintLiteral(Object value) throws IOException {\n+        StringWriter sw = new StringWriter();\n+        new Pretty(sw, true).printExpr(make.Literal(value));\n+        return sw.toString();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/tree\/PrettyCharLiteral.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}