{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+    boolean daemonThread = false;\n@@ -73,1 +74,6 @@\n-        this(sourceLine, format, null, audioData, byteLength);\n+        this(sourceLine, format, null, audioData, byteLength, false);\n+    }\n+\n+    public DataPusher(SourceDataLine sourceLine, AudioFormat format,\n+                      byte[] audioData, int byteLength, boolean daemon) {\n+        this(sourceLine, format, null, audioData, byteLength, daemon);\n@@ -77,1 +83,1 @@\n-        this(sourceLine, ais.getFormat(), ais, null, 0);\n+        this(sourceLine, ais.getFormat(), ais, null, 0, false);\n@@ -82,1 +88,2 @@\n-                       final int audioDataByteLength) {\n+                       final int audioDataByteLength,\n+                       final boolean daemon) {\n@@ -89,0 +96,1 @@\n+        this.daemonThread = daemon;\n@@ -95,0 +103,4 @@\n+    public synchronized boolean isPlaying() {\n+        return threadState == STATE_PLAYING;\n+    }\n+\n@@ -112,1 +124,1 @@\n-                                                            false,  \/\/ daemon\n+                                                            daemonThread,  \/\/ daemon\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/DataPusher.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.io.File;\n+import java.io.FileInputStream;\n@@ -72,0 +74,1 @@\n+    private boolean clipPlaying = false;\n@@ -74,0 +77,1 @@\n+    private boolean daemonThread = false;\n@@ -93,0 +97,9 @@\n+    public static JavaSoundAudioClip create(final File file) throws IOException {\n+        JavaSoundAudioClip clip = new JavaSoundAudioClip();\n+        clip.daemonThread = true; \/\/ used only by javax.sound.SoundClip\n+        try (FileInputStream stream = new FileInputStream(file)) {\n+            clip.init(stream);\n+        }\n+        return clip;\n+    }\n+\n@@ -98,1 +111,1 @@\n-            \/\/ AudioClip will be no-op if some exception will occurred\n+            \/\/ Playing the clip will be a no-op if an exception occured in inititialization.\n@@ -108,1 +121,1 @@\n-            \/\/ AudioClip will be no-op if some exception will occurred\n+            \/\/ Playing the clip will be a no-op if an exception occurred in inititialization.\n@@ -131,1 +144,0 @@\n-            \/\/ not an audio file\n@@ -141,0 +153,17 @@\n+    public synchronized boolean canPlay() {\n+        return success;\n+    }\n+\n+    public synchronized boolean isPlaying() {\n+        if (!canPlay()) {\n+            return false;\n+        } else if (clip != null) {\n+            return clipPlaying;\n+        } else if (datapusher != null) {\n+            return datapusher.isPlaying();\n+        } else if (sequencer != null) {\n+           return sequencer.isRunning();\n+        }\n+        return false;\n+    }\n+\n@@ -261,0 +290,10 @@\n+       if (clip != null) {\n+           if (clip == event.getSource()) {\n+               if (event.getType() == LineEvent.Type.START) {\n+                  clipPlaying = true;\n+               } else if ((event.getType() == LineEvent.Type.STOP) ||\n+                          (event.getType() == LineEvent.Type.CLOSE)) {\n+                  clipPlaying = false;\n+               }\n+           }\n+       }\n@@ -384,0 +423,1 @@\n+            clip.addLineListener(this);\n@@ -406,1 +446,1 @@\n-            datapusher = new DataPusher(source, loadedAudioFormat, loadedAudio, loadedAudioByteLength);\n+            datapusher = new DataPusher(source, loadedAudioFormat, loadedAudio, loadedAudioByteLength, daemonThread);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JavaSoundAudioClip.java","additions":45,"deletions":5,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.sound;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.media.sound.JavaSoundAudioClip;\n+\n+\/**\n+ * The {@code SoundClip} class is a simple abstraction for playing a sound clip.\n+ * It will play any format that is recognized by the {@code javax.sound} API,\n+ * and for which it has support. This includes midi data.\n+ * <p>\n+ * This class is intended for easy playback of short clips or snippets of sound.\n+ * Examples of when this might be used is to play an audible alert or effect in a UI app,\n+ * or to make a short announcement or to provide audible feedback such announcing as the\n+ * function of a button or control.\n+ * The application will typically let such clips play once to completion.\n+ * <p>\n+ * Applications needing more precise control or advanced\n+ * features should look into other parts of the {@code javax.sound} API.\n+ * Playing sound requires that the environment grants access to audio devices.\n+ * Typically this means running the application in a desktop environment.\n+ * <p>\n+ * Multiple {@code SoundClip} items can be playing at the same time, and\n+ * the resulting sound is mixed together to produce a composite.\n+ *\n+ * @since 25\n+ *\/\n+public final class SoundClip {\n+\n+    private final JavaSoundAudioClip clip;\n+\n+    \/**\n+     * Creates a {@code SoundClip} instance which will play a clip from the supplied file.\n+     * <p>\n+     * The file contents will be fully read before this method returns.\n+     * If the file does not contain recognizable and supported sound data, or\n+     * if the implementation does not find a suitable output device for the data,\n+     * playing the clip will be a no-op.\n+     *\n+     * @param file the file from which to obtain the sound data\n+     * @return a {@code SoundClip}\n+     * @throws NullPointerException if {@code file} is {@code null}\n+     * @throws IOException if there is an error reading from {@code file}\n+     *\/\n+    public static SoundClip createSoundClip(File file) throws IOException {\n+        if (file == null) {\n+            throw new NullPointerException(\"file must not be null\");\n+        }\n+        return new SoundClip(file);\n+    }\n+\n+    private SoundClip(File file) throws IOException {\n+        this.clip = JavaSoundAudioClip.create(file);\n+    }\n+\n+    \/**\n+     * {@return whether this is a playable sound clip}\n+     * <p>\n+     * A value of {@code false} means that calling any of the other methods\n+     * of this class is a no-op.\n+     *\/\n+    public boolean canPlay() {\n+        return clip.canPlay();\n+    }\n+\n+    \/**\n+     * {@return whether sound is currently playing}\n+     *\/\n+    public boolean isPlaying() {\n+        return clip.isPlaying();\n+    }\n+\n+    \/**\n+     * Starts playing this sound clip.\n+     * Each time this method is called, the clip is restarted from the beginning.\n+     * This method will return immediately whether or not sound is played,\n+     * and possibly before the sound has started playing.\n+     * <p>\n+     * Threading notes : Most applications will not need to do anything except call {@code play()}.\n+     * The following is therefore something most applications need not be concerned about.\n+     * Play back is managed in a background thread, which is usually a daemon thread.\n+     * Running daemon threads do not prevent the VM from exiting.\n+     * So at least one thread must be alive to prevent the VM from terminating.\n+     * A UI application with any window displayed automatically satisfies this requirement.\n+     * Conversely, if the application wants to guarantee VM exit before the play() has completed,\n+     * it should call the {@code stop()} method.\n+     *\/\n+    public void play() {\n+        clip.play();\n+    }\n+\n+    \/**\n+     * Starts playing this sound clip in a loop.\n+     * Each time this method is called, the clip is restarted from the beginning.\n+     * This method will return immediately whether or not sound is played,\n+     * and possibly before the sound has started playing.\n+     * <p>\n+     * Threading notes : Most applications will not need to do anything except call {@code loop()}.\n+     * The following is therefore something most applications need not be concerned about.\n+     * Play back is managed in a background thread, which is ususally a daemon thread.\n+     * Running daemon threads do not prevent the VM from exiting.\n+     * So at least one thread must be alive to prevent the VM from terminating.\n+     * A UI application with any window displayed automatically satisfies this requirement.\n+     * Conversely, if the application wants to guarantee VM exit before the play() has completed,\n+     * it should call the {@code stop()} method.\n+     *\/\n+    public void loop() {\n+        clip.loop();\n+    }\n+\n+    \/**\n+     * Stops playing this sound clip.\n+     * Call this if the clip is playing and the application needs to stop\n+     * it early, for example so that the application can ensure the clip\n+     * playing does not block exit. It is also required to stop a {@code loop()}.\n+     *\/\n+    public void stop() {\n+        clip.stop();\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/SoundClip.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Provides interfaces and classes for the Java Sound API.\n+ * The API is divided into sub-packages.\n+ * <ul>\n+ *  <li>Capture, processing and playback of sampled audio data is under {@link javax.sound.sampled}.\n+ *  <li>Sequencing, and synthesis of MIDI (Musical Instrument Digital Interface) data is under {@link javax.sound.midi}.\n+ * <\/ul>\n+ *\n+ * <h2>Related Documentation<\/h2>\n+ * For more information on using Java Sound see:\n+ * <ul>\n+ *   <li><a href=\"https:\/\/docs.oracle.com\/javase\/tutorial\/sound\/\">\n+ *   The Java Sound Tutorial<\/a>\n+ * <\/ul>\n+ *\n+ * @since 25\n+ *\/\n+package javax.sound;\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/package-info.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+    exports javax.sound;\n","filename":"src\/java.desktop\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javax.sound.SoundClip;\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Mixer;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8356049\n+ * @key sound headful\n+ * @library \/test\/lib\n+ * @summary test that loop exits\n+ * @run main\/othervm\/timeout=120 LoopExitTest javasound.wav\n+ *\/\n+\n+public class LoopExitTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (!isSoundcardInstalled()) { \/\/ will re-test in child but that's OK.\n+            return;\n+        }\n+\n+        \/* Parent *\/\n+        if (args.length == 1) { \/\/ run child\n+            System.out.println(\"Parent running\");\n+                String dir = System.getProperty(\"test.src\", \".\");\n+            String sep = System.getProperty(\"file.separator\");\n+            String fileName = dir + sep + args[0];\n+            ProcessBuilder pb =\n+                ProcessTools.createTestJavaProcessBuilder(\n+                             LoopExitTest.class.getName(), fileName, \"loop\");\n+            Process process = ProcessTools.startProcess(\"Loop\", pb);\n+            OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+            if (!process.waitFor(60, TimeUnit.SECONDS)) {\n+                process.destroyForcibly();\n+                throw new TimeoutException(\"Timed out waiting for Loop child\");\n+            }\n+            System.out.println(\"Child Exited\");\n+            outputAnalyzer.shouldHaveExitValue(0);\n+            System.out.println(\"Parent exiting\");\n+            return;\n+        }\n+\n+        \/* Child *\/\n+        File file = new File(args[0]);\n+        SoundClip clip = SoundClip.createSoundClip(file);\n+        System.out.println(\"Call loop.\");\n+        clip.loop();\n+        Thread.sleep(5000); \/\/ make sure loop REALLY started\n+        System.out.println(\"Test should exit now.\");\n+    }\n+\n+    \/**\n+     * Returns true if at least one soundcard is correctly installed\n+     * on the system.\n+     *\/\n+    public static boolean isSoundcardInstalled() {\n+        boolean result = false;\n+        try {\n+            Mixer.Info[] mixers = AudioSystem.getMixerInfo();\n+            if (mixers.length > 0) {\n+                result = AudioSystem.getSourceDataLine(null) != null;\n+            }\n+        } catch (Exception e) {\n+            System.err.println(\"Exception occurred: \" + e);\n+            e.printStackTrace();\n+        }\n+        if (!result) {\n+            System.err.println(\"Soundcard does not exist or sound drivers not installed!\");\n+            System.err.println(\"This test requires sound drivers for execution.\");\n+        }\n+        return result;\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/SoundClip\/LoopExitTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javax.sound.SoundClip;\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Mixer;\n+\n+\/*\n+ * @test\n+ * @bug 8356049\n+ * @key sound headful\n+ * @summary basic testing of javax.sound.SoundClip\n+ * @run main\/othervm\/timeout=60 SoundClipTest javasound.wav good\n+ * @run main\/othervm\/timeout=60 SoundClipTest badsound.wav bad\n+ *\/\n+\n+public class SoundClipTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ First verify IOException\n+        try {\n+            SoundClip.createSoundClip(new File(\"notafile.wav\"));\n+            throw new RuntimeException(\"No IOException\");\n+        } catch (IOException e) {\n+        }\n+\n+        if (!isSoundcardInstalled()) {\n+            return;\n+        }\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String sep = System.getProperty(\"file.separator\");\n+        File file = new File(dir + sep + args[0]);\n+\n+        SoundClip clip = SoundClip.createSoundClip(file);\n+\n+        \/\/ Check for bad clip case\n+        boolean bad = (args.length > 1) && (args[1].equals(\"bad\"));\n+        if (bad) {\n+            if (clip.canPlay()) {\n+                throw new RuntimeException(\"Should not be able play clip\");\n+            }\n+            return;\n+        } else {\n+            if (!clip.canPlay()) {\n+                throw new RuntimeException(\"Cannot play clip\");\n+            }\n+        }\n+\n+        boolean playing = false;\n+        int waitCount = 0;\n+        System.out.println(\"Call loop()\");\n+        clip.loop();\n+        while (!playing && waitCount < 10) {\n+            Thread.sleep(500);\n+            if (clip.isPlaying()) {\n+                playing = true;\n+            }\n+            waitCount++;\n+        }\n+        if (!playing) {\n+            throw new RuntimeException(\"Clip does not play\");\n+        }\n+        waitCount = 0;\n+        System.out.println(\"Call stop()\");\n+        clip.stop();\n+        System.out.println(\"Called stop()\");\n+\n+        while (playing && waitCount < 10) {\n+            Thread.sleep(500);\n+            if (clip.isPlaying()) {\n+                playing = false;\n+            }\n+            waitCount++;\n+        }\n+        if (!playing) {\n+            throw new RuntimeException(\"Clip does not stop\");\n+        }\n+        System.out.println(\"Clip has stopped.\");\n+\n+        \/\/ Should also test play() but don't check isPlaying() for test reliability reasons.\n+        System.out.println(\"Call play.\");\n+        clip.play();\n+        System.out.println(\"Called play()\");\n+        Thread.sleep(1000);\n+        System.out.println(\"Call stop()\");\n+        clip.stop();\n+        System.out.println(\"Called stop()\");\n+        clip.loop(); \/\/ Looping should not prevent exit\n+        System.out.println(\"Test should exit now.\");\n+    }\n+\n+    \/**\n+     * Returns true if at least one soundcard is correctly installed\n+     * on the system.\n+     *\/\n+    public static boolean isSoundcardInstalled() {\n+        boolean result = false;\n+        try {\n+            Mixer.Info[] mixers = AudioSystem.getMixerInfo();\n+            if (mixers.length > 0) {\n+                result = AudioSystem.getSourceDataLine(null) != null;\n+            }\n+        } catch (Exception e) {\n+            System.err.println(\"Exception occurred: \" + e);\n+            e.printStackTrace();\n+        }\n+        if (!result) {\n+            System.err.println(\"Soundcard does not exist or sound drivers not installed!\");\n+            System.err.println(\"This test requires sound drivers for execution.\");\n+        }\n+        return result;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/sound\/SoundClip\/SoundClipTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+This isn't actually audio data.\n","filename":"test\/jdk\/javax\/sound\/SoundClip\/badsound.wav","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"filename":"test\/jdk\/javax\/sound\/SoundClip\/javasound.wav","binary":true,"status":"added"}]}