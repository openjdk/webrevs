{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+javax\/management\/ImplementationVersion\/ImplVersionTest.java 0000000 generic-all\n@@ -79,0 +80,1 @@\n+javax\/management\/remote\/mandatory\/version\/ImplVersionTest.java 0000000 generic-all\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run clean ImplVersionTest ImplVersionCommand\n+ * @library \/test\/lib\n@@ -38,0 +38,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -42,55 +44,28 @@\n-    public static void main(String[] args) {\n-        try {\n-            \/\/ Get OS name\n-            \/\/\n-            String osName = System.getProperty(\"os.name\");\n-            System.out.println(\"osName = \" + osName);\n-            if (\"Windows 98\".equals(osName)) {\n-                \/\/ Disable this test on Win98 due to parsing\n-                \/\/ errors (bad handling of white spaces) when\n-                \/\/ J2SE is installed under \"Program Files\".\n-                \/\/\n-                System.out.println(\"This test is disabled on Windows 98.\");\n-                System.out.println(\"Bye! Bye!\");\n-                return;\n-            }\n-            \/\/ Get Java Home\n-            \/\/\n-            String javaHome = System.getProperty(\"java.home\");\n-            System.out.println(\"javaHome = \" + javaHome);\n-            \/\/ Get test src\n-            \/\/\n-            String testSrc = System.getProperty(\"test.src\");\n-            System.out.println(\"testSrc = \" + testSrc);\n-            \/\/ Get test classes\n-            \/\/\n-            String testClasses = System.getProperty(\"test.classes\");\n-            System.out.println(\"testClasses = \" + testClasses);\n-            \/\/ Get boot class path\n-            \/\/\n-            String command =\n-                javaHome + File.separator + \"bin\" + File.separator + \"java \" +\n-                \" -classpath \" + testClasses +\n-                \" -Djava.security.manager -Djava.security.policy==\" + testSrc +\n-                File.separator + \"policy -Dtest.classes=\" + testClasses +\n-                \" ImplVersionCommand \" +\n-                System.getProperty(\"java.runtime.version\");\n-            System.out.println(\"ImplVersionCommand Exec Command = \" +command);\n-            Process proc = Runtime.getRuntime().exec(command);\n-            new ImplVersionReader(proc, proc.getInputStream()).start();\n-            new ImplVersionReader(proc, proc.getErrorStream()).start();\n-            int exitValue = proc.waitFor();\n-            System.out.println(\"ImplVersionCommand Exit Value = \" +\n-                               exitValue);\n-            if (exitValue != 0) {\n-                System.out.println(\"TEST FAILED: Incorrect exit value \" +\n-                                   \"from ImplVersionCommand\");\n-                System.exit(exitValue);\n-            }\n-            \/\/ Test OK!\n-            \/\/\n-            System.out.println(\"Bye! Bye!\");\n-        } catch (Exception e) {\n-            System.out.println(\"Unexpected exception caught = \" + e);\n-            e.printStackTrace();\n-            System.exit(1);\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Get test src\n+        \/\/\n+        String testSrc = System.getProperty(\"test.src\");\n+        System.out.println(\"testSrc = \" + testSrc);\n+        \/\/ Get test classes\n+        \/\/\n+        String testClasses = System.getProperty(\"test.classes\");\n+        System.out.println(\"testClasses = \" + testClasses);\n+        \/\/ Get boot class path\n+        \/\/\n+        String[] command = new String[] {\n+            \"-Djava.security.manager\",\n+            \"-Djava.security.policy==\" + testSrc + File.separator + \"policy\",\n+            \"-Dtest.classes=\" + testClasses,\n+            \"ImplVersionCommand\",\n+            System.getProperty(\"java.runtime.version\")\n+        };\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n+        Process proc = pb.start();\n+        new ImplVersionReader(proc, proc.getInputStream()).start();\n+        new ImplVersionReader(proc, proc.getErrorStream()).start();\n+        int exitValue = proc.waitFor();\n+        System.out.println(\"ImplVersionCommand Exit Value = \" + exitValue);\n+        if (exitValue != 0) {\n+            throw new RuntimeException(\"TEST FAILED: Incorrect exit value \" +\n+                                       \"from ImplVersionCommand \" + exitValue);\n@@ -98,0 +73,3 @@\n+        \/\/ Test OK!\n+        \/\/\n+        System.out.println(\"Bye! Bye!\");\n","filename":"test\/jdk\/javax\/management\/ImplementationVersion\/ImplVersionTest.java","additions":35,"deletions":57,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -265,5 +265,3 @@\n-        List<String> pbArgs = new ArrayList<>(Arrays.asList(\n-                \"-cp\",\n-                System.getProperty(\"test.class.path\"),\n-                \"-XX:+UsePerfData\"\n-        ));\n+        List<String> pbArgs = new ArrayList<>();\n+        pbArgs.add(\"-XX:+UsePerfData\");\n+\n@@ -283,1 +281,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/connection\/DefaultAgentFilterTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run clean ImplVersionTest ImplVersionCommand\n+ * @library \/test\/lib\n@@ -38,0 +38,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -42,15 +44,1 @@\n-    public static void main(String[] args) {\n-        try {\n-            \/\/ Get OS name\n-            \/\/\n-            String osName = System.getProperty(\"os.name\");\n-            System.out.println(\"osName = \" + osName);\n-            if (\"Windows 98\".equals(osName)) {\n-                \/\/ Disable this test on Win98 due to parsing\n-                \/\/ errors (bad handling of white spaces) when\n-                \/\/ J2SE is installed under \"Program Files\".\n-                \/\/\n-                System.out.println(\"This test is disabled on Windows 98.\");\n-                System.out.println(\"Bye! Bye!\");\n-                return;\n-            }\n+    public static void main(String[] args) throws Exception {\n@@ -58,2 +46,3 @@\n-            \/\/ Get Java Home\n-            String javaHome = System.getProperty(\"java.home\");\n+        \/\/ Get test src\n+        \/\/\n+        String testSrc = System.getProperty(\"test.src\");\n@@ -61,3 +50,2 @@\n-            \/\/ Get test src\n-            \/\/\n-            String testSrc = System.getProperty(\"test.src\");\n+        \/\/ Get test classes\n+        String testClasses = System.getProperty(\"test.classes\");\n@@ -65,2 +53,1 @@\n-            \/\/ Get test classes\n-            String testClasses = System.getProperty(\"test.classes\");\n+        \/\/ Build command string\n@@ -68,8 +55,7 @@\n-            \/\/ Build command string\n-            String command =\n-                javaHome + File.separator + \"bin\" + File.separator + \"java \" +\n-                \" -classpath \" + testClasses +\n-                \" -Djava.security.manager -Djava.security.policy==\" + testSrc +\n-                File.separator + \"policy -Dtest.classes=\" + testClasses +\n-                \" ImplVersionCommand \" + System.getProperty(\"java.runtime.version\");\n-            System.out.println(\"ImplVersionCommand Exec Command = \" + command);\n+        String[] command = new String[] {\n+            \"-Djava.security.manager\",\n+            \"-Djava.security.policy==\" + testSrc + File.separator + \"policy\",\n+            \"-Dtest.classes=\" + testClasses,\n+            \"ImplVersionCommand\",\n+            System.getProperty(\"java.runtime.version\")\n+        };\n@@ -77,5 +63,5 @@\n-            \/\/ Exec command\n-            Process proc = Runtime.getRuntime().exec(command);\n-            new ImplVersionReader(proc, proc.getInputStream()).start();\n-            new ImplVersionReader(proc, proc.getErrorStream()).start();\n-            int exitValue = proc.waitFor();\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(command);\n+        Process proc = pb.start();\n+        new ImplVersionReader(proc, proc.getInputStream()).start();\n+        new ImplVersionReader(proc, proc.getErrorStream()).start();\n+        int exitValue = proc.waitFor();\n@@ -83,13 +69,4 @@\n-            System.out.println(\"ImplVersionCommand Exit Value = \" +\n-                               exitValue);\n-            if (exitValue != 0) {\n-                System.out.println(\"TEST FAILED: Incorrect exit value \" +\n-                                   \"from ImplVersionCommand\");\n-                System.exit(exitValue);\n-            }\n-            \/\/ Test OK!\n-            System.out.println(\"Bye! Bye!\");\n-        } catch (Exception e) {\n-            System.out.println(\"Unexpected exception caught = \" + e);\n-            e.printStackTrace();\n-            System.exit(1);\n+        System.out.println(\"ImplVersionCommand Exit Value = \" + exitValue);\n+        if (exitValue != 0) {\n+            throw new RuntimeException(\"TEST FAILED: Incorrect exit value \" +\n+                                       \"from ImplVersionCommand \" + exitValue);\n@@ -97,0 +74,2 @@\n+        \/\/ Test OK!\n+        System.out.println(\"Bye! Bye!\");\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/version\/ImplVersionTest.java","additions":29,"deletions":50,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -471,4 +471,0 @@\n-\n-        pbArgs.add(\"-cp\");\n-        pbArgs.add(System.getProperty(\"test.class.path\"));\n-\n@@ -484,1 +480,1 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n","filename":"test\/jdk\/javax\/management\/security\/HashedPasswordFileTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}