{"files":[{"patch":"@@ -1626,1 +1626,1 @@\n-    UnsafeMemoryMark(this, ((t == T_BYTE) && !aligned)), true);\n+    UnsafeMemoryMark(this, ((t == T_BYTE) && !aligned), true);\n@@ -2678,48 +2678,0 @@\n-#ifdef MUSL_LIBC\n-    {\n-      Label L_byteLoop, L_longByteLoop, L_byteTail, L_byteTailLoop;\n-\n-      const Register savedSize = rax;\n-      const Register byteVal = rdx;\n-\n-      UnsafeMemoryMark usmm(this, true, true);\n-\n-      __ movq(savedSize, size);\n-      __ andq(savedSize, 7);\n-      __ cmpq(size, 8);\n-      __ jccb(Assembler::aboveEqual, L_byteLoop);\n-      __ xorl(rScratch1, rScratch1);\n-      __ jmpb(L_byteTail);\n-\n-      __ BIND(L_byteLoop);\n-\n-      __ andq(size, -8);\n-      __ xorl(rScratch1, rScratch1);\n-\n-      __ BIND(L_longByteLoop);\n-\n-      \/\/ Unroll 8 byte stores\n-      for (int i = 0; i < 8; i++) {\n-        __ movb(Address(dest, rScratch1, Address::times_1, i), byteVal);\n-      }\n-\n-      __ addq(rScratch1, 8);\n-      __ cmpq(size, rScratch1);\n-      __ jccb(Assembler::notEqual, L_longByteLoop);\n-\n-      __ BIND(L_byteTail);\n-\n-      __ testq(savedSize, savedSize);\n-      __ jccb(Assembler::zero, L_exit);\n-      __ addq(dest, rScratch1);\n-      __ xorl(rScratch1, rScratch1);\n-\n-      __ BIND(L_byteTailLoop);\n-\n-      __ movb(Address(dest, rScratch1, Address::times_1), byteVal);\n-      __ incrementq(rScratch1);\n-      __ cmpq(savedSize, rScratch1);\n-      __ jccb(Assembler::notEqual, L_byteTailLoop);\n-    }\n-    __ jmp(L_exit);\n-#else  \/\/ MUSL_LIBC\n@@ -2742,1 +2694,0 @@\n-#endif  \/\/ MUSL_LIBC\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":1,"deletions":50,"binary":false,"changes":51,"status":"modified"}]}