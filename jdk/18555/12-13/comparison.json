{"files":[{"patch":"@@ -4130,1 +4130,1 @@\n-      UnsafeSetMemory::create_table(8);\n+      UnsafeSetMemory::create_table(22);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4018,1 +4018,1 @@\n-    UnsafeSetMemory::create_table(16);\n+    UnsafeSetMemory::create_table(22);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-  address generate_unsafe_setmemory(const char *name);\n+  address generate_unsafe_setmemory(const char *name, address byte_copy_entry);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  StubRoutines::_unsafe_setmemory = generate_unsafe_setmemory(\"unsafe_setmemory\");\n+  StubRoutines::_unsafe_setmemory = generate_unsafe_setmemory(\"unsafe_setmemory\", StubRoutines::_jbyte_fill);\n@@ -1624,1 +1624,5 @@\n-  __ generate_fill(t, aligned, to, value, r11, rax, xmm0);\n+  {\n+    \/\/ Add set memory mark to protect against unsafe accesses faulting\n+    UnsafeSetMemoryMark(this, true, true);\n+    __ generate_fill(t, aligned, to, value, r11, rax, xmm0);\n+  }\n@@ -2493,1 +2497,1 @@\n-address StubGenerator::generate_unsafe_setmemory(const char *name) {\n+address StubGenerator::generate_unsafe_setmemory(const char *name, address unsafe_byte_fill) {\n@@ -2498,0 +2502,2 @@\n+  assert(unsafe_byte_fill != nullptr, \"Invalid call\");\n+\n@@ -2504,0 +2510,4 @@\n+    \/\/ setup_arg_regs only has an effect for Windows\n+    \/\/ Windows argument registers are moved into Linux ABI-defined registers\n+    \/\/ r9 and r10 are used to save rsi and rdi and are therefore unavailable\n+    \/\/ as scratch registers for the routine.\n@@ -2521,1 +2531,1 @@\n-      \/\/ Propagate byte to full Register\n+      \/\/ Check for pointer & size alignment\n@@ -2524,0 +2534,2 @@\n+\n+      \/\/ Propagate byte to full Register\n@@ -2739,0 +2751,2 @@\n+      \/\/ Set up for tail call to previously generated byte fill routine\n+      \/\/ Parameter order is (ptr, byteVal, size)\n@@ -2740,14 +2754,1 @@\n-      \/\/ generate_unsafe_fill(T_BYTE, false, \"unsafe_set_memory\");\n-      __ mov(r11, c_rarg2);\n-\n-      __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-      {\n-        UnsafeSetMemoryMark usmm(this, true, true);\n-\n-        __ generate_fill(T_BYTE, false, c_rarg0, c_rarg1, r11, rax, xmm0);\n-      }\n-\n-      __ vzeroupper();\n-      __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-      __ ret(0);\n+      __ jump(RuntimeAddress(unsafe_byte_fill));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}