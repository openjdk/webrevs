{"files":[{"patch":"@@ -8340,2 +8340,2 @@\n-    if (UnsafeCopyMemory::_table == nullptr) {\n-      UnsafeCopyMemory::create_table(8);\n+    if (UnsafeSetMemory::_table == nullptr) {\n+      UnsafeSetMemory::create_table(8);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-\/\/ #ifdef _LP64\n@@ -158,1 +157,0 @@\n-\/\/ #endif\n@@ -2510,14 +2508,7 @@\n-#undef dest\n-#define dest rdi\n-#undef size\n-#define size rsi\n-#undef wide_value\n-#define wide_value rax\n-#undef rScratch1\n-#define rScratch1 rcx\n-#undef byteVal\n-#define byteVal rdx\n-#undef rScratch3\n-#define rScratch3 r8\n-#undef rScratch4\n-#define rScratch4 r11\n+\n+    const Register dest = rdi;\n+    const Register size = rsi;\n+    const Register wide_value = rax;\n+    const Register rScratch1 = rcx;\n+    const Register rScratch3 = r8;\n+    const Register rScratch4 = r11;\n@@ -2530,19 +2521,0 @@\n-    \/\/ Propagate byte to full register\n-    __ movq(rScratch1, dest);\n-    __ orq(rScratch1, size);\n-    __ movzbl(rScratch3, byteVal);\n-    __ mov64(wide_value, 0x0101010101010101);\n-    __ imulq(wide_value, rScratch3);\n-\n-#undef byteVal\n-#define rScratch2 rdx\n-    __ testb(rScratch1, 7);\n-    __ jcc(Assembler::equal, L_fillQuadwords);\n-\n-    __ testb(rScratch1, 3);\n-    __ jcc(Assembler::equal, L_fillDwords);\n-\n-    __ testb(rScratch1, 1);\n-    __ jcc(Assembler::notEqual, L_fillBytes);\n-\n-    \/\/ Fill words\n@@ -2550,17 +2522,9 @@\n-      Label L_wordsTail, L_wordsLoop, L_wordsTailLoop;\n-      UnsafeSetMemoryMark usmm(this, true, true);\n-      \/\/\/\/\/\/  Set words\n-      __ leaq(rScratch2, Address(size, 1));\n-      __ movq(rScratch1, rScratch2);\n-      __ shrq(rScratch1, 4);\n-      __ cmpq(rScratch2, 16);\n-      __ jccb(Assembler::below, L_wordsTail);\n-      __ leaq(rScratch3, Address(dest, 14));\n-      __ movq(rScratch4, rScratch1);\n-\n-      __ BIND(L_wordsLoop);\n-\n-      \/\/ Unroll 8 word stores\n-      for (int i = 7; i >= 0; i--) {\n-        __ movw(Address(rScratch3, -(2 * i)), wide_value);\n-      }\n+      const Register byteVal = rdx;\n+\n+      \/\/ Propagate byte to full Register\n+      __ movq(rScratch1, dest);\n+      __ orq(rScratch1, size);\n+      __ movzbl(rScratch3, byteVal);\n+      __ mov64(wide_value, 0x0101010101010101);\n+      __ imulq(wide_value, rScratch3);\n+    }\n@@ -2568,3 +2532,2 @@\n-      __ addq(rScratch3, 16);\n-      __ decrementq(rScratch4);\n-      __ jccb(Assembler::notEqual, L_wordsLoop);\n+    {\n+      const Register rScratch2 = rdx;\n@@ -2572,1 +2535,2 @@\n-      __ BIND(L_wordsTail);\n+      __ testb(rScratch1, 7);\n+      __ jcc(Assembler::equal, L_fillQuadwords);\n@@ -2574,8 +2538,2 @@\n-      \/\/ Handle leftovers\n-      __ shlq(rScratch1, 3);\n-      __ shrq(rScratch2, 1);\n-      __ cmpq(rScratch1, rScratch2);\n-      __ jcc(Assembler::aboveEqual, L_exit);\n-      __ decrementq(size);\n-      __ shrq(size, 1);\n-      __ incrementq(size);\n+      __ testb(rScratch1, 3);\n+      __ jcc(Assembler::equal, L_fillDwords);\n@@ -2583,1 +2541,2 @@\n-      __ BIND(L_wordsTailLoop);\n+      __ testb(rScratch1, 1);\n+      __ jcc(Assembler::notEqual, L_fillBytes);\n@@ -2585,6 +2544,19 @@\n-      __ movw(Address(dest, rScratch1, Address::times_2), wide_value);\n-      __ incrementq(rScratch1);\n-      __ cmpq(size, rScratch1);\n-      __ jccb(Assembler::notEqual, L_wordsTailLoop);\n-    }\n-    __ jmp(L_exit);\n+      \/\/ Fill words\n+      {\n+        Label L_wordsTail, L_wordsLoop, L_wordsTailLoop;\n+        UnsafeSetMemoryMark usmm(this, true, true);\n+        \/\/\/\/\/\/  Set words\n+        __ leaq(rScratch2, Address(size, 1));\n+        __ movq(rScratch1, rScratch2);\n+        __ shrq(rScratch1, 4);\n+        __ cmpq(rScratch2, 16);\n+        __ jccb(Assembler::below, L_wordsTail);\n+        __ leaq(rScratch3, Address(dest, 14));\n+        __ movq(rScratch4, rScratch1);\n+\n+        __ BIND(L_wordsLoop);\n+\n+        \/\/ Unroll 8 word stores\n+        for (int i = 7; i >= 0; i--) {\n+          __ movw(Address(rScratch3, -(2 * i)), wide_value);\n+        }\n@@ -2592,1 +2564,3 @@\n-    __ BIND(L_fillQuadwords);\n+        __ addq(rScratch3, 16);\n+        __ decrementq(rScratch4);\n+        __ jccb(Assembler::notEqual, L_wordsLoop);\n@@ -2594,4 +2568,1 @@\n-    \/\/ Fill QUADWORDs\n-    {\n-      Label L_qwordLoop, L_qwordsTail, L_qwordsTailLoop;\n-      UnsafeSetMemoryMark usmm(this, true, true);\n+        __ BIND(L_wordsTail);\n@@ -2599,7 +2570,8 @@\n-      __ leaq(rScratch2, Address(size, 7));\n-      __ movq(rScratch1, rScratch2);\n-      __ shrq(rScratch1, 6);\n-      __ cmpq(rScratch2, 64);\n-      __ jccb(Assembler::below, L_qwordsTail);\n-      __ leaq(rScratch3, Address(dest, 56));\n-      __ movq(rScratch4, rScratch1);\n+        \/\/ Handle leftovers\n+        __ shlq(rScratch1, 3);\n+        __ shrq(rScratch2, 1);\n+        __ cmpq(rScratch1, rScratch2);\n+        __ jccb(Assembler::aboveEqual, L_exit);\n+        __ decrementq(size);\n+        __ shrq(size, 1);\n+        __ incrementq(size);\n@@ -2607,1 +2579,1 @@\n-      __ BIND(L_qwordLoop);\n+        __ BIND(L_wordsTailLoop);\n@@ -2609,3 +2581,4 @@\n-      \/\/ Unroll 8 qword stores\n-      for (int i = 7; i >= 0; i--) {\n-        __ movq(Address(rScratch3, -(8 * i)), wide_value);\n+        __ movw(Address(dest, rScratch1, Address::times_2), wide_value);\n+        __ incrementq(rScratch1);\n+        __ cmpq(size, rScratch1);\n+        __ jccb(Assembler::notEqual, L_wordsTailLoop);\n@@ -2613,5 +2586,1 @@\n-      __ addq(rScratch3, 64);\n-      __ decrementq(rScratch4);\n-      __ jccb(Assembler::notZero, L_qwordLoop);\n-\n-      __ BIND(L_qwordsTail);\n+      __ jmp(L_exit);\n@@ -2619,17 +2588,1 @@\n-      \/\/ Handle leftovers\n-      __ shlq(rScratch1, 3);\n-      __ shrq(rScratch2, 3);\n-      __ cmpq(rScratch1, rScratch2);\n-      __ jcc(Assembler::aboveEqual, L_exit);\n-      __ decrementq(size);\n-      __ shrq(size, 3);\n-      __ incrementq(size);\n-\n-      __ BIND(L_qwordsTailLoop);\n-\n-      __ movq(Address(dest, rScratch1, Address::times_8), wide_value);\n-      __ incrementq(rScratch1);\n-      __ cmpq(size, rScratch1);\n-      __ jccb(Assembler::notEqual, L_qwordsTailLoop);\n-    }\n-    __ BIND(L_exit);\n+      __ BIND(L_fillQuadwords);\n@@ -2637,2 +2590,4 @@\n-    restore_arg_regs();\n-    __ ret(0);\n+      \/\/ Fill QUADWORDs\n+      {\n+        Label L_qwordLoop, L_qwordsTail, L_qwordsTailLoop;\n+        UnsafeSetMemoryMark usmm(this, true, true);\n@@ -2640,1 +2595,7 @@\n-    __ BIND(L_fillDwords);\n+        __ leaq(rScratch2, Address(size, 7));\n+        __ movq(rScratch1, rScratch2);\n+        __ shrq(rScratch1, 6);\n+        __ cmpq(rScratch2, 64);\n+        __ jccb(Assembler::below, L_qwordsTail);\n+        __ leaq(rScratch3, Address(dest, 56));\n+        __ movq(rScratch4, rScratch1);\n@@ -2642,4 +2603,1 @@\n-    \/\/ Fill DWORDs\n-    {\n-      Label L_dwordLoop, L_dwordsTail, L_dwordsTailLoop;\n-      UnsafeSetMemoryMark usmm(this, true, true);\n+        __ BIND(L_qwordLoop);\n@@ -2647,7 +2605,27 @@\n-      __ leaq(rScratch2, Address(size, 3));\n-      __ movq(rScratch1, rScratch2);\n-      __ shrq(rScratch1, 5);\n-      __ cmpq(rScratch2, 32);\n-      __ jccb(Assembler::below, L_dwordsTail);\n-      __ leaq(rScratch3, Address(dest, 28));\n-      __ movq(rScratch4, rScratch1);\n+        \/\/ Unroll 8 qword stores\n+        for (int i = 7; i >= 0; i--) {\n+          __ movq(Address(rScratch3, -(8 * i)), wide_value);\n+        }\n+        __ addq(rScratch3, 64);\n+        __ decrementq(rScratch4);\n+        __ jccb(Assembler::notZero, L_qwordLoop);\n+\n+        __ BIND(L_qwordsTail);\n+\n+        \/\/ Handle leftovers\n+        __ shlq(rScratch1, 3);\n+        __ shrq(rScratch2, 3);\n+        __ cmpq(rScratch1, rScratch2);\n+        __ jccb(Assembler::aboveEqual, L_exit);\n+        __ decrementq(size);\n+        __ shrq(size, 3);\n+        __ incrementq(size);\n+\n+        __ BIND(L_qwordsTailLoop);\n+\n+        __ movq(Address(dest, rScratch1, Address::times_8), wide_value);\n+        __ incrementq(rScratch1);\n+        __ cmpq(size, rScratch1);\n+        __ jccb(Assembler::notEqual, L_qwordsTailLoop);\n+      }\n+      __ BIND(L_exit);\n@@ -2655,1 +2633,2 @@\n-      __ BIND(L_dwordLoop);\n+      restore_arg_regs();\n+      __ ret(0);\n@@ -2657,7 +2636,1 @@\n-      \/\/ Unroll 8 dword stores\n-      for (int i = 7; i >= 0; i--) {\n-        __ movl(Address(rScratch3, -(i * 4)), wide_value);\n-      }\n-      __ addq(rScratch3, 32);\n-      __ decrementq(rScratch4);\n-      __ jccb(Assembler::notZero, L_dwordLoop);\n+      __ BIND(L_fillDwords);\n@@ -2665,1 +2638,4 @@\n-      __ BIND(L_dwordsTail);\n+      \/\/ Fill DWORDs\n+      {\n+        Label L_dwordLoop, L_dwordsTail, L_dwordsTailLoop;\n+        UnsafeSetMemoryMark usmm(this, true, true);\n@@ -2667,2 +2643,7 @@\n-#undef rScratch3\n-#undef rScratch4\n+        __ leaq(rScratch2, Address(size, 3));\n+        __ movq(rScratch1, rScratch2);\n+        __ shrq(rScratch1, 5);\n+        __ cmpq(rScratch2, 32);\n+        __ jccb(Assembler::below, L_dwordsTail);\n+        __ leaq(rScratch3, Address(dest, 28));\n+        __ movq(rScratch4, rScratch1);\n@@ -2670,8 +2651,1 @@\n-      \/\/ Handle leftovers\n-      __ shlq(rScratch1, 3);\n-      __ shrq(rScratch2, 2);\n-      __ cmpq(rScratch1, rScratch2);\n-      __ jccb(Assembler::aboveEqual, L_exit);\n-      __ decrementq(size);\n-      __ shrq(size, 2);\n-      __ incrementq(size);\n+        __ BIND(L_dwordLoop);\n@@ -2679,1 +2653,27 @@\n-      __ BIND(L_dwordsTailLoop);\n+        \/\/ Unroll 8 dword stores\n+        for (int i = 7; i >= 0; i--) {\n+          __ movl(Address(rScratch3, -(i * 4)), wide_value);\n+        }\n+        __ addq(rScratch3, 32);\n+        __ decrementq(rScratch4);\n+        __ jccb(Assembler::notZero, L_dwordLoop);\n+\n+        __ BIND(L_dwordsTail);\n+\n+        \/\/ Handle leftovers\n+        __ shlq(rScratch1, 3);\n+        __ shrq(rScratch2, 2);\n+        __ cmpq(rScratch1, rScratch2);\n+        __ jccb(Assembler::aboveEqual, L_exit);\n+        __ decrementq(size);\n+        __ shrq(size, 2);\n+        __ incrementq(size);\n+\n+        __ BIND(L_dwordsTailLoop);\n+\n+        __ movl(Address(dest, rScratch1, Address::times_4), wide_value);\n+        __ incrementq(rScratch1);\n+        __ cmpq(size, rScratch1);\n+        __ jccb(Assembler::notEqual, L_dwordsTailLoop);\n+      }\n+      __ jmp(L_exit);\n@@ -2681,4 +2681,1 @@\n-      __ movl(Address(dest, rScratch1, Address::times_4), wide_value);\n-      __ incrementq(rScratch1);\n-      __ cmpq(size, rScratch1);\n-      __ jccb(Assembler::notEqual, L_dwordsTailLoop);\n+      __ BIND(L_fillBytes);\n@@ -2686,3 +2683,0 @@\n-    __ jmpb(L_exit);\n-\n-    __ BIND(L_fillBytes);\n@@ -2692,1 +2686,0 @@\n-      UnsafeSetMemoryMark usmm(this, true, true);\n@@ -2694,4 +2687,4 @@\n-#undef wide_value\n-#define savedSize rax\n-#undef rScratch2\n-#define byteVal rdx\n+      const Register savedSize = rax;\n+      const Register byteVal = rdx;\n+\n+      UnsafeSetMemoryMark usmm(this, true, true);\n@@ -2736,0 +2729,1 @@\n+    __ jmp(L_exit);\n@@ -2737,1 +2731,0 @@\n-#define byteVal rdx\n@@ -2739,0 +2732,1 @@\n+      const Register byteVal = rdx;\n@@ -2741,1 +2735,0 @@\n-      __ movq(rdx, rsi);\n@@ -2743,0 +2736,1 @@\n+      __ movq(rdx, rsi);\n@@ -2765,6 +2759,0 @@\n-\n-#undef dest\n-#undef size\n-#undef savedSize\n-#undef rScratch1\n-#undef byteVal\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":151,"deletions":163,"binary":false,"changes":314,"status":"modified"}]}