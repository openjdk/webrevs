{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,12 @@\n- * @run driver compiler.arguments.TestCompilerCounts\n+ * @requires vm.debug\n+ * @run driver compiler.arguments.TestCompilerCounts debug\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib \/\n+ * @bug 8356000\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires !vm.debug\n+ * @run driver compiler.arguments.TestCompilerCounts product\n@@ -58,0 +70,2 @@\n+        final boolean debug = args[0].startsWith(\"debug\");\n+\n@@ -136,5 +150,6 @@\n-            int nonTieredCount = heuristicCount(cpus, false);\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=1\");\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=2\");\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=3\");\n-            pass(nonTieredCount, opt, \"-XX:-TieredCompilation\");\n+            int c1OnlyCount = heuristicCount(cpus, Compilation.C1Only, debug);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=1\", \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=2\", \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=3\", \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n+            int c2OnlyCount = heuristicCount(cpus, Compilation.C2Only, debug);\n+            pass(c2OnlyCount, opt, \"-XX:-TieredCompilation\", \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n@@ -143,3 +158,3 @@\n-            int tieredCount = heuristicCount(cpus, true);\n-            pass(tieredCount, opt);\n-            pass(tieredCount, opt, \"-XX:TieredStopAtLevel=4\");\n+            int tieredCount = heuristicCount(cpus, Compilation.Tiered, debug);\n+            pass(tieredCount, opt, \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n+            pass(tieredCount, opt, \"-XX:TieredStopAtLevel=4\", \"-XX:NonNMethodCodeHeapSize=\" + NonNMethodCodeHeapSize);\n@@ -148,2 +163,2 @@\n-            Asserts.assertTrue(nonTieredCount <= cpus,\n-                \"Non-tiered count is larger than number of CPUs: \" + nonTieredCount + \" > \" + cpus);\n+            Asserts.assertTrue(c1OnlyCount <= cpus,\n+                \"Non-tiered count is larger than number of CPUs: \" + c1OnlyCount + \" > \" + cpus);\n@@ -155,0 +170,13 @@\n+    enum Compilation {\n+        C1Only,\n+        C2Only,\n+        Tiered,\n+    }\n+\n+    \/\/ Buffer sizes for calculating the maximum number of compiler threads.\n+    static final int NonNMethodCodeHeapSize = 5 * 1024 * 1024;\n+    static final int CodeCacheMinimumUseSpace = 400 * 1024;\n+    static final int C1BufSize = 64 * 1024 * 8 + (64 * 1024 * 8 \/ 10);\n+    static final int C2BufSize = 6544;\n+    static final int TieredBufSize = C1BufSize \/ 3 + 2 * C2BufSize \/ 3;\n+\n@@ -156,1 +184,1 @@\n-    public static int heuristicCount(int cpus, boolean tiered) {\n+    public static int heuristicCount(int cpus, Compilation comp, boolean debug) {\n@@ -159,2 +187,8 @@\n-        int min_count = tiered ? 2 : 1;\n-        return Math.max(log_cpu * loglog_cpu * 3 \/ 2, min_count);\n+        int min_count = comp == Compilation.C1Only || comp == Compilation.C2Only ? 1 : 2;\n+        int count = Math.max(log_cpu * loglog_cpu * 3 \/ 2, min_count);\n+        int max_count = (NonNMethodCodeHeapSize - (debug ? 3 : 1) * CodeCacheMinimumUseSpace) \/ switch (comp) {\n+            case C1Only -> C1BufSize;\n+            case C2Only -> C2BufSize;\n+            case Tiered -> TieredBufSize;\n+        };\n+        return Math.max(Math.min(count, max_count), min_count);\n@@ -176,1 +210,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompilerCounts.java","additions":48,"deletions":15,"binary":false,"changes":63,"status":"modified"}]}