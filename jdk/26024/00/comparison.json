{"files":[{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.debug\n@@ -136,5 +137,6 @@\n-            int nonTieredCount = heuristicCount(cpus, false);\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=1\");\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=2\");\n-            pass(nonTieredCount, opt, \"-XX:TieredStopAtLevel=3\");\n-            pass(nonTieredCount, opt, \"-XX:-TieredCompilation\");\n+            int c1OnlyCount = heuristicCount(cpus, Compilation.C1Only);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=1\", \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=2\", \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n+            pass(c1OnlyCount, opt, \"-XX:TieredStopAtLevel=3\", \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n+            int c2OnlyCount = heuristicCount(cpus, Compilation.C2Only);\n+            pass(c2OnlyCount, opt, \"-XX:-TieredCompilation\", \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n@@ -143,3 +145,3 @@\n-            int tieredCount = heuristicCount(cpus, true);\n-            pass(tieredCount, opt);\n-            pass(tieredCount, opt, \"-XX:TieredStopAtLevel=4\");\n+            int tieredCount = heuristicCount(cpus, Compilation.Tiered);\n+            pass(tieredCount, opt, \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n+            pass(tieredCount, opt, \"-XX:TieredStopAtLevel=4\", \"-XX:NonNMethodCodeHeapSize=\"+NonNMethodCodeHeapSize, \"-XX:CodeCacheMinimumUseSpace=\"+CodeCacheMinimumUseSpace);\n@@ -148,2 +150,2 @@\n-            Asserts.assertTrue(nonTieredCount <= cpus,\n-                \"Non-tiered count is larger than number of CPUs: \" + nonTieredCount + \" > \" + cpus);\n+            Asserts.assertTrue(c1OnlyCount <= cpus,\n+                \"Non-tiered count is larger than number of CPUs: \" + c1OnlyCount + \" > \" + cpus);\n@@ -155,0 +157,17 @@\n+    enum Compilation {\n+        C1Only,\n+        C2Only,\n+        Tiered,\n+    }\n+\n+    \/\/ Buffer sizes for caclulating the maximum number of compiler threads.\n+    static final int NonNMethodCodeHeapSize = 5 * 1024 * 1024;\n+    static final int CodeCacheMinimumUseSpace = 400 * 1024;\n+    static final int C1BufSize = 64 * 1024 * 8 + (64 * 1024 * 8 \/ 10);\n+    static final int C1MaxCount = (NonNMethodCodeHeapSize - 3 * CodeCacheMinimumUseSpace) \/ C1BufSize;\n+    static final int C2BufSize = 6544;\n+    static final int C2MaxCount = (NonNMethodCodeHeapSize - 3 * CodeCacheMinimumUseSpace) \/ C2BufSize;\n+    static final int TieredBufSize = C1BufSize \/ 3 + 2 * C2BufSize \/ 3;\n+    static final int TieredMaxCount = (NonNMethodCodeHeapSize - 3 * CodeCacheMinimumUseSpace) \/ TieredBufSize;\n+\n+\n@@ -156,1 +175,1 @@\n-    public static int heuristicCount(int cpus, boolean tiered) {\n+    public static int heuristicCount(int cpus, Compilation comp) {\n@@ -159,2 +178,9 @@\n-        int min_count = tiered ? 2 : 1;\n-        return Math.max(log_cpu * loglog_cpu * 3 \/ 2, min_count);\n+        int min_count = comp == Compilation.C1Only || comp == Compilation.C2Only ? 1 : 2;\n+        int count = Math.max(log_cpu * loglog_cpu * 3 \/ 2, min_count);\n+        int max_count = switch (comp) {\n+            case C1Only -> C1MaxCount;\n+            case C2Only -> C2MaxCount;\n+            case Tiered -> TieredMaxCount;\n+        };\n+        return Math.max(Math.min(count, max_count), min_count);\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompilerCounts.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"}]}