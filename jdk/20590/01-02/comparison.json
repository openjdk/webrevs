{"files":[{"patch":"@@ -181,1 +181,0 @@\n-  _split_destination = split_destination;\n@@ -184,1 +183,2 @@\n-  _split_destination_count = split_destination_count;\n+  _preceding_destination = split_destination;\n+  _preceding_destination_count = split_destination_count;\n@@ -190,1 +190,0 @@\n-  _split_destination = nullptr;\n@@ -193,1 +192,2 @@\n-  _split_destination_count = 0;\n+  _preceding_destination = nullptr;\n+  _preceding_destination_count = 0;\n@@ -201,1 +201,0 @@\n-  assert(_split_destination == nullptr, \"not clear\");\n@@ -204,1 +203,2 @@\n-  assert(_split_destination_count == 0, \"not clear\");\n+  assert(_preceding_destination == nullptr, \"not clear\");\n+  assert(_preceding_destination_count == 0, \"not clear\");\n@@ -487,1 +487,1 @@\n-                             ? split_info.split_destination_count()\n+                             ? split_info.preceding_destination_count()\n@@ -1615,1 +1615,1 @@\n-            HeapWord* split_destination = split_info.split_destination();\n+            HeapWord* preceding_destination = split_info.preceding_destination();\n@@ -1617,1 +1617,1 @@\n-            forward_objs_in_range(cm, region_start + live_words, split_point, split_destination + live_words);\n+            forward_objs_in_range(cm, region_start + live_words, split_point, preceding_destination + live_words);\n@@ -2059,1 +2059,1 @@\n-    region_start_destination = split_info.split_destination();\n+    region_start_destination = split_info.preceding_destination();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -124,8 +124,0 @@\n-  \/\/ A split region has two \"destinations\", living in two spaces. This method\n-  \/\/ returns the split (first) one -- destination for the first live word on\n-  \/\/ this split region.\n-  HeapWord* split_destination() const {\n-    assert(_split_destination != nullptr, \"inv\");\n-    return _split_destination;\n-  }\n-\n@@ -138,0 +130,8 @@\n+  \/\/ A split region has two \"destinations\", living in two spaces. This method\n+  \/\/ returns the first one -- destination for the first live word on\n+  \/\/ this split region.\n+  HeapWord* preceding_destination() const {\n+    assert(_preceding_destination != nullptr, \"inv\");\n+    return _preceding_destination;\n+  }\n+\n@@ -139,1 +139,1 @@\n-  uint split_destination_count() const { return _split_destination_count; }\n+  uint preceding_destination_count() const { return _preceding_destination_count; }\n@@ -149,1 +149,0 @@\n-  HeapWord*    _split_destination;\n@@ -152,1 +151,2 @@\n-  uint         _split_destination_count;\n+  HeapWord*    _preceding_destination;\n+  uint         _preceding_destination_count;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}