{"files":[{"patch":"@@ -519,1 +519,1 @@\n-   st->print_cr(\"# Java VM: %s%s%s (%s%s, %s%s%s%s%s%s%s, %s, %s)\",\n+   st->print_cr(\"# Java VM: %s%s%s (%s%s, %s%s%s%s%s%s, %s, %s)\",\n@@ -533,2 +533,2 @@\n-                 UseCompressedClassPointers ? \", compressed class ptrs\" : \"\",\n-                 UseCompactObjectHeaders ? \", compact obj headers\" : \"\",\n+                 UseCompactObjectHeaders ? \", compact obj headers\"\n+                                         : (UseCompressedClassPointers ? \", compressed class ptrs\" : \"\"),\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+    testCompactObjectHeaders();\n+    testCompressedClassPointers();\n+  }\n@@ -46,0 +49,1 @@\n+  private static void testCompactObjectHeaders() throws Exception {\n@@ -64,3 +68,6 @@\n-    ArrayList<Pattern> patterns = new ArrayList<>();\n-    patterns.add(Pattern.compile(\"# A fatal error has been detected.*\"));\n-    patterns.add(Pattern.compile(\"# Java VM: .*compact obj headers.*\"));\n+    Pattern[] expectedPatterns = new Pattern[] {\n+      Pattern.compile(\"# Java VM: .*compact obj headers.*\")\n+    };\n+    Pattern[] notExpectedPatterns = new Pattern[] {\n+      Pattern.compile(\"# Java VM: .*compressed class ptrs.*\")\n+    };\n@@ -68,1 +75,1 @@\n-    HsErrFileUtils.checkHsErrFileContent(f, patterns.toArray(new Pattern[] {}), true);\n+    HsErrFileUtils.checkHsErrFileContent(f, expectedPatterns, notExpectedPatterns, true, true);\n@@ -72,0 +79,30 @@\n+  private static void testCompressedClassPointers() throws Exception {\n+    ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-XX:+UnlockExperimentalVMOptions\",\n+        \"-XX:-UseCompactObjectHeaders\",\n+        \"-XX:+UseCompressedClassPointers\",\n+        \"-Xmx100M\",\n+        \"-XX:-CreateCoredumpOnCrash\",\n+        \"-XX:ErrorHandlerTest=14\",\n+        \"-version\");\n+\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldNotHaveExitValue(0);\n+\n+    \/\/ we should have crashed with a SIGSEGV\n+    output.shouldMatch(\"#.+SIGSEGV.*\");\n+\n+    \/\/ extract hs-err file\n+    File f = HsErrFileUtils.openHsErrFileFromOutput(output);\n+\n+    Pattern[] expectedPatterns = new Pattern[] {\n+      Pattern.compile(\"# Java VM: .*compressed class ptrs.*\")\n+    };\n+    Pattern[] notExpectedPatterns = new Pattern[] {\n+      Pattern.compile(\"# Java VM: .*compact obj headers.*\")\n+    };\n+\n+    HsErrFileUtils.checkHsErrFileContent(f, expectedPatterns, notExpectedPatterns, true, true);\n+\n+  }\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestVMConfigInHsErrFile.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        for (int count = min + 1; count < max; count++) {\n+        for (int count = min + 2; count < max; count++) {\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/MaxSizeUTF16String.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}