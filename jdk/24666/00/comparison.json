{"files":[{"patch":"@@ -190,11 +190,16 @@\n-            while (q.nonEmpty()) {\n-                q.next().run();\n-            }\n-            while (typesQ.nonEmpty()) {\n-                typesQ.next().run();\n-            }\n-            while (afterTypesQ.nonEmpty()) {\n-                afterTypesQ.next().run();\n-            }\n-            while (validateQ.nonEmpty()) {\n-                validateQ.next().run();\n+            while (q.nonEmpty() ||\n+                   typesQ.nonEmpty() ||\n+                   afterTypesQ.nonEmpty() ||\n+                   validateQ.nonEmpty()) {\n+                while (q.nonEmpty()) {\n+                    q.next().run();\n+                }\n+                while (typesQ.nonEmpty()) {\n+                    typesQ.next().run();\n+                }\n+                while (afterTypesQ.nonEmpty()) {\n+                    afterTypesQ.next().run();\n+                }\n+                while (validateQ.nonEmpty()) {\n+                    validateQ.next().run();\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8322706\n+ * @summary Verify that annotation values are de-proxies after loading from a classfile.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.ToolBox toolbox.Task\n+ * @run main TestAnnotationValuesResolved\n+ *\/\n+\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskEvent.Kind;\n+import com.sun.source.util.TaskListener;\n+import com.sun.source.util.TreePathScanner;\n+import com.sun.source.util.Trees;\n+import java.nio.file.Files;\n+import toolbox.*;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.AnnotationValue;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.util.Elements;\n+import javax.lang.model.util.SimpleAnnotationValueVisitorPreview;\n+\n+\n+public class TestAnnotationValuesResolved extends TestRunner {\n+    final toolbox.ToolBox tb = new ToolBox();\n+\n+    public TestAnnotationValuesResolved() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new TestAnnotationValuesResolved().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    @Test\n+    public void test(Path base) throws Exception {\n+        Path lib = Paths.get(\"lib\");\n+        Path libSrc = lib.resolve(\"src\");\n+        Path libClasses = lib.resolve(\"classes\");\n+\n+        tb.writeJavaFiles(libSrc,\n+                          \"\"\"\n+                          package org.example;\n+\n+                          public @interface MyFirstAnnotation {\n+                              MySecondAnnotation secondAnnotation() default @MySecondAnnotation;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package org.example;\n+\n+                          public @interface MySecondAnnotation {\n+                              String[] stringArray() default \"\";\n+                          }\n+                          \"\"\"\n+        );\n+        Files.createDirectories(libClasses);\n+        new toolbox.JavacTask(tb)\n+                .outdir(libClasses)\n+                .files(tb.findJavaFiles(libSrc))\n+                .run();\n+\n+        Path test = Paths.get(\"test\");\n+        Path testSrc = test.resolve(\"src\");\n+        Path testClasses = test.resolve(\"classes\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package org.example;\n+\n+                          @MyFirstAnnotation\n+                          public class AnnotatedClass {\n+                          }\n+                          \"\"\");\n+        Files.createDirectories(testClasses);\n+        new toolbox.JavacTask(tb)\n+                .classpath(libClasses)\n+                .outdir(testClasses)\n+                .files(tb.findJavaFiles(testSrc))\n+                .callback(task -> {\n+                    task.addTaskListener(new TaskListener() {\n+                        @Override\n+                        public void finished(TaskEvent e) {\n+                            if (e.getKind() == Kind.ENTER) {\n+                                new TreePathScanner<>() {\n+                                    @Override\n+                                    public Object visitClass(ClassTree node, Object p) {\n+                                        Trees trees = Trees.instance(task);\n+                                        Element el = trees.getElement(getCurrentPath());\n+                                        verifyAnnotationValuesResolved(task, el);\n+                                        return super.visitClass(node, p);\n+                                    }\n+                                }.scan(e.getCompilationUnit(), null);\n+                            }\n+                        }\n+                    });\n+                })\n+                .run()\n+                .writeAll();\n+    }\n+\n+    private void verifyAnnotationValuesResolved(com.sun.source.util.JavacTask task,\n+                                                Element forElement) {\n+        Elements elements = task.getElements();\n+\n+        class SearchAnnotationValues extends SimpleAnnotationValueVisitorPreview {\n+            @Override\n+            public Object visitAnnotation(AnnotationMirror a, Object p) {\n+                for (AnnotationValue av : elements.getElementValuesWithDefaults(a).values()) {\n+                    av.accept(this, null);\n+                }\n+                return super.visitAnnotation(a, p);\n+            }\n+        }\n+\n+        for (AnnotationMirror mirror : forElement.getAnnotationMirrors()) {\n+            new SearchAnnotationValues().visitAnnotation(mirror, null);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/TestAnnotationValuesResolved.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}