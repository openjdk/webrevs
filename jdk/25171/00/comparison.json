{"files":[{"patch":"@@ -487,7 +487,6 @@\n-    oop loader = src_ik->class_loader();\n-    if (loader == nullptr) {\n-      type = \"boot\";\n-    } else if (loader == SystemDictionary::java_platform_loader()) {\n-      type = \"plat\";\n-    } else if (loader == SystemDictionary::java_system_loader()) {\n-      type = \"app\";\n+    if (src_ik->defined_by_boot_loader()) {\n+      return \"boot\";\n+    } else if (src_ik->defined_by_platform_loader()) {\n+      return \"plat\";\n+    } else if (src_ik->defined_by_app_loader()) {\n+      return \"app\";\n@@ -495,1 +494,1 @@\n-      type = \"unreg\";\n+      return \"unreg\";\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test how various AOT optimizations handle classes that are excluded from the AOT cache.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/test-classes\n+ * @build ExcludedClasses CustyWithLoop\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *                 TestApp\n+ *                 TestApp$Foo\n+ *                 TestApp$Foo$Bar\n+ *                 TestApp$Foo$ShouldBeExcluded\n+ *                 TestApp$MyInvocationHandler\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 CustyWithLoop\n+ * @run driver ExcludedClasses\n+ *\/\n+\n+import java.io.File;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+\n+import jdk.jfr.Event;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ExcludedClasses {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"TestApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester tester = new Tester();\n+        tester.runAOTWorkflow();\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"-Xlog:cds+resolve=trace\",\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass, runMode.name()\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (isDumping(runMode)) {\n+                out.shouldNotMatch(\"cds,resolve.*archived field.*TestApp.Foo => TestApp.Foo.ShouldBeExcluded.f:I\");\n+            }\n+        }\n+    }\n+}\n+\n+class TestApp {\n+    static volatile Object custInstance;\n+    static volatile Object custArrayInstance;\n+\n+    public static void main(String args[]) throws Exception {\n+        \/\/ In new workflow, classes from custom loaders are passed from the preimage\n+        \/\/ to the final image. See ClassPrelinker::record_unregistered_klasses().\n+        custInstance = initFromCustomLoader();\n+        custArrayInstance = Array.newInstance(custInstance.getClass(), 0);\n+        System.out.println(custArrayInstance);\n+        System.out.println(\"Counter = \" + Foo.hotSpot());\n+    }\n+\n+    static Object initFromCustomLoader() throws Exception {\n+        String path = \"cust.jar\";\n+        URL url = new File(path).toURI().toURL();\n+        URL[] urls = new URL[] {url};\n+        URLClassLoader urlClassLoader =\n+            new URLClassLoader(\"MyLoader\", urls, null);\n+        Class c = Class.forName(\"CustyWithLoop\", true, urlClassLoader);\n+        return c.newInstance();\n+    }\n+\n+    static class MyInvocationHandler implements InvocationHandler {\n+        volatile static int cnt;\n+\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            long start = System.currentTimeMillis();\n+            while (System.currentTimeMillis() - start < 20) {\n+                cnt += 2;\n+                for (int i = 0; i < 1000; i++) {\n+                    int n = cnt - 2;\n+                    if (n < 2) {\n+                        n = 2;\n+                    }\n+                    cnt += (i + cnt) % n + cnt % 2;\n+                }\n+            }\n+            return Integer.valueOf(cnt);\n+        }\n+    }\n+\n+    static class Foo {\n+        volatile static int counter;\n+        static Class c = ShouldBeExcluded.class;\n+\n+        static Map mapProxy = (Map) Proxy.newProxyInstance(\n+            Foo.class.getClassLoader(),\n+            new Class[] { Map.class },\n+            new MyInvocationHandler());\n+\n+        static int hotSpot() {\n+            ShouldBeExcluded s = new ShouldBeExcluded();\n+            Bar b = new Bar();\n+\n+            long start = System.currentTimeMillis();\n+            while (System.currentTimeMillis() - start < 1000) {\n+                lambdaHotSpot();\n+                s.hotSpot2();\n+                b.hotSpot3();\n+\n+                \/\/ In JDK mainline, generated proxy classes are excluded from the AOT cache.\n+                \/\/ In Leyden\/premain, generated proxy classes included. The following code should\n+                \/\/ work with either repos.\n+                Integer i = (Integer)mapProxy.get(null);\n+                counter += i.intValue();\n+\n+                if (custInstance != null) {\n+                    \/\/ Classes loaded by custom loaders are included included in the AOT cache\n+                    \/\/ but their array classes are excluded.\n+                    counter += custInstance.equals(null) ? 1 : 2;\n+                }\n+\n+                if (custArrayInstance != null) {\n+                    if ((counter % 3) == 0) {\n+                        counter += (custArrayInstance instanceof String) ? 0 : 1;\n+                    } else {\n+                        counter += (custArrayInstance instanceof Object) ? 0 : 1;\n+                    }\n+                }\n+            }\n+\n+            return counter + s.m() + s.f + b.m() + b.f;\n+        }\n+\n+        static void f() {\n+            if (counter % 2 == 1) {\n+                counter ++;\n+            }\n+        }\n+\n+        \/\/ Generated Lambda classes should be excluded from CDS preimage.\n+        static void lambdaHotSpot() {\n+            long start = System.currentTimeMillis();\n+            while (System.currentTimeMillis() - start < 20) {\n+                doit(() -> counter ++ );\n+            }\n+        }\n+\n+        static void doit(Runnable r) {\n+            r.run();\n+        }\n+\n+        \/\/ All subclasses of jdk.jfr.Event are excluded from the CDS archive.\n+        static class ShouldBeExcluded extends jdk.jfr.Event {\n+            int f = (int)(System.currentTimeMillis()) + 123;\n+            int m() {\n+                return f + 456;\n+            }\n+\n+            void hotSpot2() {\n+                long start = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - start < 20) {\n+                    for (int i = 0; i < 50000; i++) {\n+                        counter += i;\n+                    }\n+                    f();\n+                }\n+            }\n+        }\n+\n+        static class Bar {\n+            int f = (int)(System.currentTimeMillis()) + 123;\n+            int m() {\n+                return f + 456;\n+            }\n+\n+            void hotSpot3() {\n+                long start = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - start < 20) {\n+                    for (int i = 0; i < 50000; i++) {\n+                        counter += i;\n+                    }\n+                    f();\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/ExcludedClasses.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ A class to be loaded by a custom class loader. It has a loop. AOT\n+\/\/ optimizations may be applied to this loop.\n+public class CustyWithLoop {\n+    volatile static int cnt;\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        long start = System.currentTimeMillis();\n+        while (System.currentTimeMillis() - start < 20) {\n+            cnt += 2;\n+            for (int i = 0; i < 1000; i++) {\n+                int n = cnt - 2;\n+                if (n < 2) {\n+                    n = 2;\n+                }\n+                cnt += (i + cnt) % n + cnt % 2;\n+            }\n+        }\n+        return (cnt % 17) == 8;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/test-classes\/CustyWithLoop.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}