{"files":[{"patch":"@@ -299,0 +299,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code obj} is too small to hold the output.\n@@ -407,9 +410,4 @@\n-     * Returns all samples for the specified pixel in an int array.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data\n-     * @return the samples for the specified pixel.\n-     * @see #setPixel(int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -440,12 +438,5 @@\n-     * Returns all samples for the specified rectangle of pixels in\n-     * an int array, one sample per data array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data\n-     * @return the samples for the pixels within the specified region.\n-     * @see #setPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative.\n+     * or if {@code iArray} is too small to hold the output.\n@@ -458,2 +449,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n@@ -490,10 +481,4 @@\n-     * Returns as int the sample in a specified band for the pixel\n-     * located at (x,y).\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to return\n-     * @param data      The DataBuffer containing the image data\n-     * @return the sample in the specified band for the specified pixel.\n-     * @see #setSample(int, int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -514,10 +499,4 @@\n-     * Returns the sample in a specified band\n-     * for the pixel located at (x,y) as a float.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to return\n-     * @param data      The DataBuffer containing the image data\n-     * @return a float value that represents the sample in the specified\n-     * band for the specified pixel.\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -538,10 +517,4 @@\n-     * Returns the sample in a specified band\n-     * for a pixel located at (x,y) as a double.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to return\n-     * @param data      The DataBuffer containing the image data\n-     * @return a double value that represents the sample in the specified\n-     * band for the specified pixel.\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -562,14 +535,5 @@\n-     * Returns the samples in a specified band for the specified rectangle\n-     * of pixels in an int array, one sample per data array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param b         The band to return\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data\n-     * @return the samples in the specified band for the pixels within\n-     * the specified region.\n-     * @see #setSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the output.\n@@ -580,1 +544,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || (h < 0) || (x + w > width) || (y + h > height)) {\n@@ -639,0 +603,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code obj} is too small to hold the input.\n@@ -706,8 +673,4 @@\n-     * Sets a pixel in the DataBuffer using an int array of samples for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param iArray    The input samples in an int array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getPixel(int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the input.\n@@ -728,11 +691,5 @@\n-     * Sets all samples for a rectangle of pixels from an int array containing\n-     * one sample per array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param iArray    The input samples in an int array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative.\n+     * or if {@code iArray} is too small to hold the input.\n@@ -745,2 +702,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n@@ -769,10 +726,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the DataBuffer using an int for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to set\n-     * @param s         The input sample as an int\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -792,10 +743,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the DataBuffer using a float for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to set\n-     * @param s         The input sample as a float\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -816,10 +761,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the DataBuffer using a double for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to set\n-     * @param s         The input sample as a double\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -840,12 +779,5 @@\n-     * Sets the samples in the specified band for the specified rectangle\n-     * of pixels from an int array containing one sample per data array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param b         The band to set\n-     * @param iArray    The input sample array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the input.\n@@ -856,1 +788,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || (h < 0) || (x + w > width) || (y + h > height)) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/BandedSampleModel.java","additions":64,"deletions":132,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -603,1 +603,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -710,12 +710,2 @@\n-     * Returns all samples for the specified pixel in an int array,\n-     * one sample per array element.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         the X coordinate of the pixel location\n-     * @param y         the Y coordinate of the pixel location\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data\n-     * @return the samples of the specified pixel.\n-     * @see #setPixel(int, int, int[], DataBuffer)\n-     *\n-     * @throws NullPointerException if data is null.\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n@@ -723,1 +713,1 @@\n-     * not in bounds, or if iArray is too small to hold the output.\n+     * not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -745,12 +735,5 @@\n-     * Returns all samples for the specified rectangle of pixels in\n-     * an int array, one sample per array element.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data\n-     * @return the samples of the pixels within the specified region.\n-     * @see #setPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the output.\n@@ -763,2 +746,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || y > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || (w < 0) || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || (h < 0) || y >= height || y > height || y1 < 0 || y1 >  height)\n@@ -793,10 +776,4 @@\n-     * Returns as int the sample in a specified band for the pixel\n-     * located at (x,y).\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         the X coordinate of the pixel location\n-     * @param y         the Y coordinate of the pixel location\n-     * @param b         the band to return\n-     * @param data      the {@code DataBuffer} containing the image data\n-     * @return the sample in a specified band for the specified pixel\n-     * @see #setSample(int, int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -817,10 +794,4 @@\n-     * Returns the sample in a specified band\n-     * for the pixel located at (x,y) as a float.\n-     * An {@code ArrayIndexOutOfBoundsException} might be\n-     * thrown if the coordinates are not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to return\n-     * @param data      The DataBuffer containing the image data\n-     * @return a float value representing the sample in the specified\n-     * band for the specified pixel.\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -840,1 +811,0 @@\n-\n@@ -842,10 +812,4 @@\n-     * Returns the sample in a specified band\n-     * for a pixel located at (x,y) as a double.\n-     * An {@code ArrayIndexOutOfBoundsException} might be\n-     * thrown if the coordinates are not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to return\n-     * @param data      The DataBuffer containing the image data\n-     * @return a double value representing the sample in the specified\n-     * band for the specified pixel.\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -867,14 +831,5 @@\n-     * Returns the samples in a specified band for the specified rectangle\n-     * of pixels in an int array, one sample per data array element.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         the width of the pixel rectangle\n-     * @param h         the height of the pixel rectangle\n-     * @param b         the band to return\n-     * @param iArray    if non-{@code null}, returns the samples\n-     *                  in this array\n-     * @param data      the {@code DataBuffer} containing the image data\n-     * @return the samples in the specified band of the specified pixel\n-     * @see #setSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the output.\n@@ -885,1 +840,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || ( h < 0) || (x + w > width) || (y + h > height)) {\n@@ -946,0 +901,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if obj is too small to hold the input.\n@@ -1014,9 +972,4 @@\n-     * Sets a pixel in the {@code DataBuffer} using an int array of\n-     * samples for input.  An {@code ArrayIndexOutOfBoundsException}\n-     * might be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param iArray    The input samples in an int array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getPixel(int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the input.\n@@ -1037,11 +990,5 @@\n-     * Sets all samples for a rectangle of pixels from an int array containing\n-     * one sample per array element.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if the\n-     * coordinates are not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param iArray    The input samples in an int array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the input.\n@@ -1054,2 +1001,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n@@ -1078,10 +1025,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the {@code DataBuffer} using an int for input.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if the\n-     * coordinates are not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         the band to set\n-     * @param s         the input sample as an int\n-     * @param data      the DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -1101,10 +1042,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the {@code DataBuffer} using a float for input.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to set\n-     * @param s         The input sample as a float\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -1126,10 +1061,4 @@\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the {@code DataBuffer} using a double for input.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if\n-     * the coordinates are not in bounds.\n-     * @param x         The X coordinate of the pixel location\n-     * @param y         The Y coordinate of the pixel location\n-     * @param b         The band to set\n-     * @param s         The input sample as a double\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSample(int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -1151,12 +1080,5 @@\n-     * Sets the samples in the specified band for the specified rectangle\n-     * of pixels from an int array containing one sample per data array element.\n-     * An {@code ArrayIndexOutOfBoundsException} might be thrown if the\n-     * coordinates are not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location\n-     * @param y         The Y coordinate of the upper left pixel location\n-     * @param w         The width of the pixel rectangle\n-     * @param h         The height of the pixel rectangle\n-     * @param b         The band to set\n-     * @param iArray    The input samples in an int array\n-     * @param data      The DataBuffer containing the image data\n-     * @see #getSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the input.\n@@ -1167,1 +1089,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || (h < 0) || (x + w > width) || (y + h > height)) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ComponentSampleModel.java","additions":61,"deletions":139,"binary":false,"changes":200,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-     * @param b         the band to return, which is assumed to be 0\n+     * @param b         the band to return, which must be 0\n@@ -377,1 +377,1 @@\n-     * @param b the band to return, which is assumed to be 0\n+     * @param b the band to set, which must be 0\n@@ -451,0 +451,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {code obj} is too small to hold the output.\n@@ -530,1 +533,1 @@\n-     *  are not in bounds\n+     * are not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -532,0 +535,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -591,0 +597,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code obj} is too small to hold the input.\n@@ -641,0 +650,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the input.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/MultiPixelPackedSampleModel.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -236,1 +236,1 @@\n-     * not in bounds, or if iArray is too small to hold the output.\n+     * not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -296,1 +296,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -298,1 +298,1 @@\n-     * not in bounds, or if obj is too small to hold the output.\n+     * not in bounds, or if {@code obj} is too small to hold the output.\n@@ -350,1 +350,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -352,1 +352,2 @@\n-     * not in bounds, or if obj is too small to hold the output.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code obj} is too small to hold the output.\n@@ -365,2 +366,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -531,1 +532,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -580,1 +581,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -595,2 +596,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -698,1 +699,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -700,1 +701,1 @@\n-     * not in bounds, or if fArray is too small to hold the output.\n+     * not in bounds, or if {@code fArray} is too small to hold the output.\n@@ -729,1 +730,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -731,1 +732,1 @@\n-     * not in bounds, or if dArray is too small to hold the output.\n+     * not in bounds, or if {@code dArray} is too small to hold the output.\n@@ -763,1 +764,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -765,1 +766,2 @@\n-     * not in bounds, or if iArray is too small to hold the output.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the output.\n@@ -775,2 +777,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -811,1 +813,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -813,1 +815,2 @@\n-     * not in bounds, or if fArray is too small to hold the output.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code fArray} is too small to hold the output.\n@@ -823,2 +826,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -859,1 +862,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -861,1 +864,2 @@\n-     * not in bounds, or if dArray is too small to hold the output.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code dArray} is too small to hold the output.\n@@ -870,2 +874,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -906,1 +910,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -924,1 +928,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -946,1 +950,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -974,1 +978,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -976,2 +980,2 @@\n-     * the band index are not in bounds, or if iArray is too small to\n-     * hold the output.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the output.\n@@ -986,2 +990,2 @@\n-        if (x < 0 || x1 < x || x1 > width ||\n-            y < 0 || y1 < y || y1 > height)\n+        if (x < 0 || w < 0 || x1 < x || x1 > width ||\n+            y < 0 || h < 0 || y1 < y || y1 > height)\n@@ -1022,1 +1026,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -1024,2 +1028,2 @@\n-     * the band index are not in bounds, or if fArray is too small to\n-     * hold the output.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the output.\n@@ -1035,2 +1039,2 @@\n-        if (x < 0 || x1 < x || x1 > width ||\n-            y < 0 || y1 < y || y1 > height)\n+        if (x < 0 || w < 0 || x1 < x || x1 > width ||\n+            y < 0 || h < 0 || y1 < y || y1 > height)\n@@ -1071,1 +1075,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -1073,2 +1077,2 @@\n-     * the band index are not in bounds, or if dArray is too small to\n-     * hold the output.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code dArray} is too small to hold the output.\n@@ -1084,2 +1088,2 @@\n-        if (x < 0 || x1 < x || x1 > width ||\n-            y < 0 || y1 < y || y1 > height)\n+        if (x < 0 || w < 0 || x1 < x || x1 > width ||\n+            y < 0 || h < 0 || y1 < y || y1 > height)\n@@ -1114,1 +1118,1 @@\n-     * @throws NullPointerException if iArray or data is null.\n+     * @throws NullPointerException if {@code iArray} or {code data} is null.\n@@ -1116,1 +1120,1 @@\n-     * not in bounds, or if iArray is too small to hold the input.\n+     * not in bounds, or if {@code iArray} is too small to hold the input.\n@@ -1134,1 +1138,1 @@\n-     * @throws NullPointerException if fArray or data is null.\n+     * @throws NullPointerException if {@code fArray} or {@code data} is null.\n@@ -1136,1 +1140,1 @@\n-     * not in bounds, or if fArray is too small to hold the input.\n+     * not in bounds, or if {@code fArray} is too small to hold the input.\n@@ -1153,1 +1157,1 @@\n-     * @throws NullPointerException if dArray or data is null.\n+     * @throws NullPointerException if {@code dArray} or {@code data} is null.\n@@ -1155,1 +1159,1 @@\n-     * not in bounds, or if fArray is too small to hold the input.\n+     * not in bounds, or if {@code dArray} is too small to hold the input.\n@@ -1176,1 +1180,1 @@\n-     * @throws NullPointerException if iArray or data is null.\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n@@ -1178,1 +1182,2 @@\n-     * not in bounds, or if iArray is too small to hold the input.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the input.\n@@ -1186,2 +1191,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -1214,1 +1219,1 @@\n-     * @throws NullPointerException if fArray or data is null.\n+     * @throws NullPointerException if {@code fArray} or {@code data} is null.\n@@ -1216,1 +1221,2 @@\n-     * not in bounds, or if fArray is too small to hold the input.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code fArray} is too small to hold the input.\n@@ -1224,2 +1230,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -1252,1 +1258,1 @@\n-     * @throws NullPointerException if dArray or data is null.\n+     * @throws NullPointerException if {@code dArray} or {@code data} is null.\n@@ -1254,1 +1260,2 @@\n-     * not in bounds, or if dArray is too small to hold the input.\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code dArray} is too small to hold the input.\n@@ -1262,2 +1269,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -1289,1 +1296,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -1313,1 +1320,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -1341,1 +1348,1 @@\n-     * @throws NullPointerException if data is null.\n+     * @throws NullPointerException if {@code data} is null.\n@@ -1367,1 +1374,1 @@\n-     * @throws NullPointerException if iArray or data is null.\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n@@ -1369,2 +1376,2 @@\n-     * the band index are not in bounds, or if iArray is too small to\n-     * hold the input.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the input.\n@@ -1378,2 +1385,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -1405,1 +1412,1 @@\n-     * @throws NullPointerException if fArray or data is null.\n+     * @throws NullPointerException if {@code fArray} or {@code data} is null.\n@@ -1407,2 +1414,2 @@\n-     * the band index are not in bounds, or if fArray is too small to\n-     * hold the input.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code fArray} is too small to hold the input.\n@@ -1416,2 +1423,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n@@ -1443,1 +1450,1 @@\n-     * @throws NullPointerException if dArray or data is null.\n+     * @throws NullPointerException if {@code dArray} or {@code data} is null.\n@@ -1445,2 +1452,2 @@\n-     * the band index are not in bounds, or if dArray is too small to\n-     * hold the input.\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code dArray} is too small to hold the input.\n@@ -1455,2 +1462,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 > height)\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/SampleModel.java","additions":89,"deletions":82,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -360,0 +360,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if obj is too small to hold the output.\n@@ -419,9 +422,4 @@\n-     * Returns all samples in for the specified pixel in an int array.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location.\n-     * @param y         The Y coordinate of the pixel location.\n-     * @param iArray    If non-null, returns the samples in this array\n-     * @param data      The DataBuffer containing the image data.\n-     * @return all samples for the specified pixel.\n-     * @see #setPixel(int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the output.\n@@ -449,12 +447,5 @@\n-     * Returns all samples for the specified rectangle of pixels in\n-     * an int array, one sample per array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location.\n-     * @param y         The Y coordinate of the upper left pixel location.\n-     * @param w         The width of the pixel rectangle.\n-     * @param h         The height of the pixel rectangle.\n-     * @param iArray    If non-null, returns the samples in this array.\n-     * @param data      The DataBuffer containing the image data.\n-     * @return all samples for the specified region of pixels.\n-     * @see #setPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the output.\n@@ -462,0 +453,1 @@\n+    @Override\n@@ -467,2 +459,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n@@ -496,11 +488,4 @@\n-     * Returns as int the sample in a specified band for the pixel\n-     * located at (x,y).\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location.\n-     * @param y         The Y coordinate of the pixel location.\n-     * @param b         The band to return.\n-     * @param data      The DataBuffer containing the image data.\n-     * @return the sample in a specified band for the specified\n-     *         pixel.\n-     * @see #setSample(int, int, int, int, DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -519,14 +504,5 @@\n-     * Returns the samples for a specified band for the specified rectangle\n-     * of pixels in an int array, one sample per array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location.\n-     * @param y         The Y coordinate of the upper left pixel location.\n-     * @param w         The width of the pixel rectangle.\n-     * @param h         The height of the pixel rectangle.\n-     * @param b         The band to return.\n-     * @param iArray    If non-null, returns the samples in this array.\n-     * @param data      The DataBuffer containing the image data.\n-     * @return the samples for the specified band for the specified\n-     *         region of pixels.\n-     * @see #setSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the output.\n@@ -537,1 +513,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || (h < 0) || (x + w > width) || (y + h > height)) {\n@@ -595,0 +571,3 @@\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if obj is too small to hold the input.\n@@ -627,8 +606,4 @@\n-     * Sets a pixel in the DataBuffer using an int array of samples for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location.\n-     * @param y         The Y coordinate of the pixel location.\n-     * @param iArray    The input samples in an int array.\n-     * @param data      The DataBuffer containing the image data.\n-     * @see #getPixel(int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or if {@code iArray} is too small to hold the input.\n@@ -653,11 +628,5 @@\n-     * Sets all samples for a rectangle of pixels from an int array containing\n-     * one sample per array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location.\n-     * @param y         The Y coordinate of the upper left pixel location.\n-     * @param w         The width of the pixel rectangle.\n-     * @param h         The height of the pixel rectangle.\n-     * @param iArray    The input samples in an int array.\n-     * @param data      The DataBuffer containing the image data.\n-     * @see #getPixels(int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates are\n+     * not in bounds, or {@code w} or {@code h} is negative\n+     * or if {@code iArray} is too small to hold the input.\n@@ -670,2 +639,2 @@\n-        if (x < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n-            y < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n+        if (x < 0 || w < 0 || x >= width || w > width || x1 < 0 || x1 > width ||\n+            y < 0 || h < 0 || y >= height || h > height || y1 < 0 || y1 >  height)\n@@ -695,11 +664,5 @@\n-    \/**\n-     * Sets a sample in the specified band for the pixel located at (x,y)\n-     * in the DataBuffer using an int for input.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the pixel location.\n-     * @param y         The Y coordinate of the pixel location.\n-     * @param b         The band to set.\n-     * @param s         The input sample as an int.\n-     * @param data      The DataBuffer containing the image data.\n-     * @see #getSample(int, int, int, DataBuffer)\n+    \/*\n+     * {inheritDoc}\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * the band index are not in bounds.\n@@ -721,12 +684,5 @@\n-     * Sets the samples in the specified band for the specified rectangle\n-     * of pixels from an int array containing one sample per array element.\n-     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are\n-     * not in bounds.\n-     * @param x         The X coordinate of the upper left pixel location.\n-     * @param y         The Y coordinate of the upper left pixel location.\n-     * @param w         The width of the pixel rectangle.\n-     * @param h         The height of the pixel rectangle.\n-     * @param b         The band to set.\n-     * @param iArray    The input samples in an int array.\n-     * @param data      The DataBuffer containing the image data.\n-     * @see #getSamples(int, int, int, int, int, int[], DataBuffer)\n+     * {@inheritDoc}\n+     * @throws NullPointerException if {@code iArray} or {@code data} is null.\n+     * @throws ArrayIndexOutOfBoundsException if the coordinates or\n+     * band index are not in bounds, or {@code w} or {@code h} is negative,\n+     * or if {@code iArray} is too small to hold the input.\n@@ -737,1 +693,1 @@\n-        if ((x < 0) || (y < 0) || (x + w > width) || (y + h > height)) {\n+        if ((x < 0) || (y < 0) || (w < 0) || (h < 0) || (x + w > width) || (y + h > height)) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/SinglePixelPackedSampleModel.java","additions":50,"deletions":94,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -0,0 +1,330 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     6185110\n+ * @summary Verify get\/set\/Pixels\/Samples APIs for bad parameters.\n+ *\n+ * @run     main SampleModelGetSamplesAndPixelsTest\n+ *\/\n+\n+import java.awt.image.BandedSampleModel;\n+import java.awt.image.ComponentSampleModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.MultiPixelPackedSampleModel;\n+import java.awt.image.PixelInterleavedSampleModel;\n+import java.awt.image.SampleModel;\n+import java.awt.image.SinglePixelPackedSampleModel;\n+import java.util.Vector;\n+\n+public class SampleModelGetSamplesAndPixelsTest {\n+\n+    static final int WIDTH = 100;\n+    static final int HEIGHT = 100;\n+    static final int DATATYPE = DataBuffer.TYPE_BYTE;\n+    static final int NUMBANDS = 4;\n+    static final int[] INTS = new int[WIDTH * HEIGHT + NUMBANDS];\n+    static final float[] FLOATS = new float[WIDTH * HEIGHT + NUMBANDS];\n+    static final double[] DOUBLES = new double[WIDTH * HEIGHT + NUMBANDS];\n+    static final int[][] COORDS = {\n+        { 1, 1, 1, 1, -1 }, \/\/ bad band\n+        { 1, 1, 1, 1, NUMBANDS }, \/\/ bad band\n+        { 1, 1, -1, 1, 0 }, \/\/ negative w\n+        { 1, 1, -1, -1, 0 }, \/\/ negative w and h\n+        { -4, 1, 1, 1, 0 }, \/\/ negative x\n+        { -4, -4, 1, 1, 0 }, \/\/ negative x and y\n+        { WIDTH+10, 0, 1, 1, 0 }, \/\/ x > width\n+        { 0, HEIGHT+10, 1, 1, 0 }, \/\/ y > height\n+        { WIDTH+10, HEIGHT+10, 1, 1, 0 }, \/\/ both x > width and y > height\n+    };\n+\n+    public static void main(String[] args) {\n+        Vector<Class<? extends SampleModel>> classes = new Vector<Class<? extends SampleModel>>();\n+\n+        classes.add(ComponentSampleModel.class);\n+        classes.add(MultiPixelPackedSampleModel.class);\n+        classes.add(SinglePixelPackedSampleModel.class);\n+        classes.add(BandedSampleModel.class);\n+        classes.add(PixelInterleavedSampleModel.class);\n+\n+        for (Class<? extends SampleModel> c : classes) {\n+            doTest(c);\n+        }\n+    }\n+\n+    static void noException(SampleModel sm) {\n+        System.err.println(sm);\n+        throw new RuntimeException(\"No expected exception\");\n+    }\n+\n+    private static void doTest(Class<? extends SampleModel> c) {\n+        System.out.println(\"Test for: \" + c.getName());\n+        SampleModel sm = createSampleModel(c);\n+        doTestNull(sm);\n+        for (int i = 0; i < COORDS.length; i++) {\n+            int x = COORDS[i][0];\n+            int y = COORDS[i][1];\n+            int w = COORDS[i][2];\n+            int h = COORDS[i][3];\n+            int b = COORDS[i][4];\n+            doTest(sm, x, y, w, h, b);\n+        }\n+     }\n+\n+    private static void doTestNull(SampleModel sm) {\n+        doTestNull(sm, INTS);\n+        doTestNull(sm, FLOATS);\n+        doTestNull(sm, DOUBLES);\n+    }\n+\n+    private static void doTestNull(SampleModel sm, int[] INTS) {\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, INTS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, INTS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getPixels(1, 1, 1, 1, INTS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(1, 1, 1, 1, INTS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static void doTestNull(SampleModel sm, float[] FLOATS) {\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, FLOATS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, FLOATS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getPixels(1, 1, 1, 1, FLOATS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(1, 1, 1, 1, FLOATS, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static void doTestNull(SampleModel sm, double[] DOUBLES) {\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, DOUBLES, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getSamples(1, 1, 1, 1, 0, DOUBLES, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.getPixels(1, 1, 1, 1, DOUBLES, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(1, 1, 1, 1, DOUBLES, null);\n+            noException(sm);\n+        } catch (NullPointerException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static void doTest(SampleModel sm, int x, int y, int w, int h, int b) {\n+        doTest(sm, x, y, w, h, b, INTS);\n+        doTest(sm, x, y, w, h, b, FLOATS);\n+        doTest(sm, x, y, w, h, b, DOUBLES);\n+    }\n+\n+    private static void doTest(SampleModel sm, int x, int y, int w, int h, int b, int[] INTS) {\n+\n+        \/\/ Now test each API with a non-null buffer and the specified values.\n+        DataBuffer db = sm.createDataBuffer();\n+\n+        try {\n+            sm.getSamples(x, y, w, h, b, INTS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setSamples(x, y, w, h, b, INTS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        if (b < 0 || b >= NUMBANDS) {\n+             return; \/\/ Values were to test illegal bands, skip the rest.\n+        }\n+\n+        try {\n+            sm.getPixels(x, y, w, h, INTS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(x, y, w, h, INTS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static void doTest(SampleModel sm, int x, int y, int w, int h, int b, float[] FLOATS) {\n+\n+        \/\/ Now test each API with a non-null buffer and the specified values.\n+        DataBuffer db = sm.createDataBuffer();\n+\n+        try {\n+            sm.getSamples(x, y, w, h, b, FLOATS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setSamples(x, y, w, h, b, FLOATS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        if (b < 0 || b >= NUMBANDS) {\n+             return; \/\/ Values were to test illegal bands, skip the rest.\n+        }\n+\n+        try {\n+            sm.getPixels(x, y, w, h, FLOATS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(x, y, w, h, FLOATS, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static void doTest(SampleModel sm, int x, int y, int w, int h, int b, double[] DOUBLES) {\n+\n+        \/\/ Now test each API with a non-null buffer and the specified values.\n+        DataBuffer db = sm.createDataBuffer();\n+\n+        try {\n+            sm.getSamples(x, y, w, h, b, DOUBLES, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setSamples(x, y, w, h, b, DOUBLES, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        if (b < 0 || b >= NUMBANDS) {\n+             return; \/\/ Values were to test illegal bands, skip the rest.\n+        }\n+\n+        try {\n+            sm.getPixels(x, y, w, h, DOUBLES, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+\n+        try {\n+            sm.setPixels(x, y, w, h, DOUBLES, db);\n+            noException(sm);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+\n+    private static SampleModel createSampleModel(Class<? extends SampleModel> cls) {\n+        SampleModel res = null;\n+\n+        if (cls == ComponentSampleModel.class) {\n+            res = new ComponentSampleModel(DATATYPE, WIDTH, HEIGHT, 4, WIDTH * 4, new int[] { 0, 1, 2, 3 } );\n+        } else if (cls == MultiPixelPackedSampleModel.class) {\n+            res = new MultiPixelPackedSampleModel(DATATYPE, WIDTH, HEIGHT, 4);\n+        } else if (cls == SinglePixelPackedSampleModel.class) {\n+            res = new SinglePixelPackedSampleModel(DATATYPE, WIDTH, HEIGHT,\n+                    new int[]{ 0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff });\n+        } else if (cls == BandedSampleModel.class) {\n+            res = new BandedSampleModel(DATATYPE, WIDTH, HEIGHT, NUMBANDS);\n+        } else if (cls == PixelInterleavedSampleModel.class) {\n+            res = new PixelInterleavedSampleModel(DATATYPE, WIDTH, HEIGHT, 4, WIDTH * 4, new int[] { 0, 1, 2, 3 });\n+        } else {\n+            throw new RuntimeException(\"Unknown class \" + cls);\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/SampleModelGetSamplesAndPixelsTest.java","additions":330,"deletions":0,"binary":false,"changes":330,"status":"added"}]}