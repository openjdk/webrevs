{"files":[{"patch":"@@ -96,2 +96,2 @@\n-     * when a file path is not specified. It returns the thread and\/or message to send\n-     * to the tool user.\n+     * when a file path is not specified. It returns the thread dump and\/or message to\n+     * send to the tool user.\n@@ -120,1 +120,1 @@\n-     * It returns the thread and\/or message to send to the tool user.\n+     * It returns the thread dump and\/or message to send to the tool user.\n@@ -187,14 +187,0 @@\n-        \/\/ park blocker\n-        Object parkBlocker = snapshot.parkBlocker();\n-        if (parkBlocker != null) {\n-            writer.println(\"      \/\/ parked on \" + Objects.toIdentityString(parkBlocker));\n-        }\n-\n-        \/\/ blocked on monitor enter or Object.wait\n-        if (state == Thread.State.BLOCKED && snapshot.blockedOn() instanceof Object obj) {\n-            writer.println(\"      \/\/ blocked on \" + Objects.toIdentityString(obj));\n-        } else if ((state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING)\n-                && snapshot.waitingOn() instanceof Object obj) {\n-            writer.println(\"      \/\/ waiting on \" + Objects.toIdentityString(obj));\n-        }\n-\n@@ -204,0 +190,2 @@\n+            writer.print(\"    at \");\n+            writer.println(stackTrace[depth]);\n@@ -206,1 +194,1 @@\n-                    writer.println(\"      \/\/ locked \" + Objects.toIdentityString(o));\n+                    writer.println(\"    - locked \" + decorateObject(o));\n@@ -208,1 +196,1 @@\n-                    writer.println(\"      \/\/ lock is eliminated\");\n+                    writer.println(\"    - lock is eliminated\");\n@@ -211,2 +199,18 @@\n-            writer.print(\"      \");\n-            writer.println(stackTrace[depth]);\n+\n+            \/\/ if parkBlocker set, or blocked\/waiting on monitor, then print after top frame\n+            if (depth == 0) {\n+                \/\/ park blocker\n+                Object parkBlocker = snapshot.parkBlocker();\n+                if (parkBlocker != null) {\n+                    writer.println(\"    - parking to wait for \" + decorateObject(parkBlocker));\n+                }\n+\n+                \/\/ blocked on monitor enter or Object.wait\n+                if (state == Thread.State.BLOCKED && snapshot.blockedOn() instanceof Object obj) {\n+                    writer.println(\"    - waiting to lock \" + decorateObject(obj));\n+                } else if ((state == Thread.State.WAITING || state == Thread.State.TIMED_WAITING)\n+                        && snapshot.waitingOn() instanceof Object obj) {\n+                    writer.println(\"    - waiting on \" + decorateObject(obj));\n+                }\n+            }\n+\n@@ -218,0 +222,8 @@\n+    \/**\n+     * Returns the identity string for the given object in a form suitable for the plain\n+     * text format thread dump.\n+     *\/\n+    private static String decorateObject(Object obj) {\n+        return \"<\" + Objects.toIdentityString(obj) + \">\";\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadDumper.java","additions":33,"deletions":21,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+     * @throws UnsupportedOperationException if not supported by VM\n@@ -58,0 +59,3 @@\n+        if (snapshot == null) {\n+            throw new UnsupportedOperationException();\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadSnapshot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,1 +270,1 @@\n-                assertTrue(contains(lines, \"\/\/ blocked on \" + lockAsString));\n+                assertTrue(contains(lines, \"- waiting to lock <\" + lockAsString));\n@@ -364,1 +364,1 @@\n-                assertTrue(contains(lines, \"\/\/ waiting on \" + lockAsString));\n+                assertTrue(contains(lines, \"- waiting on <\" + lockAsString));\n@@ -428,1 +428,1 @@\n-            assertTrue(contains(lines, \"\/\/ parked on java.util.concurrent.locks.ReentrantLock\"));\n+            assertTrue(contains(lines, \"- parking to wait for <java.util.concurrent.locks.ReentrantLock\"));\n@@ -501,1 +501,1 @@\n-            assertTrue(contains(lines, \"\/\/ locked \" + lockAsString));\n+            assertTrue(contains(lines, \"- locked <\" + lockAsString));\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                            .anyMatch(l -> l.contains(\"\/\/ lock is eliminated\"));\n+                            .anyMatch(l -> l.contains(\"- lock is eliminated\"));\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreadsWithEliminatedLock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}