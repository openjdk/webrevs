{"files":[{"patch":"@@ -1296,1 +1296,1 @@\n-    bool walk_cont = (_java_thread != nullptr) && (_java_thread->vthread_continuation() != nullptr);\n+    bool vthread_carrier = !is_virtual && (_java_thread != nullptr) && (_java_thread->vthread_continuation() != nullptr);\n@@ -1317,1 +1317,1 @@\n-      ? vframeStream(_java_thread, false, true, walk_cont)\n+      ? vframeStream(_java_thread, false, true, vthread_carrier)\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import java.util.concurrent.locks.AbstractOwnableSynchronizer;\n@@ -186,1 +185,1 @@\n-                +  \"\\\" \" + (thread.isVirtual() ? \"virtual \" : \"\") + state + \" \" + now);\n+                + \"\\\" \" + (thread.isVirtual() ? \"virtual \" : \"\") + state + \" \" + now);\n@@ -191,6 +190,1 @@\n-            writer.print(\"      \/\/ parked on \" + Objects.toIdentityString(parkBlocker));\n-            if (parkBlocker instanceof AbstractOwnableSynchronizer\n-                    && snapshot.exclusiveOwnerThread() instanceof Thread owner) {\n-                writer.print(\", owned by #\" + owner.threadId());\n-            }\n-            writer.println();\n+            writer.println(\"      \/\/ parked on \" + Objects.toIdentityString(parkBlocker));\n@@ -320,0 +314,1 @@\n+            \/\/ parkBlocker is an object to allow for exclusiveOwnerThread in the future\n@@ -322,4 +317,0 @@\n-            if (parkBlocker instanceof AbstractOwnableSynchronizer\n-                    && snapshot.exclusiveOwnerThread() instanceof Thread owner) {\n-                jsonWriter.writeProperty(\"exclusiveOwnerThreadId\", owner.threadId());\n-            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadDumper.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -79,4 +79,0 @@\n-                            },\n-                            \"exclusiveOwnerThreadId\": {\n-                              \"type\": \"string\",\n-                              \"description\": \"The thread identifier of the owner when the blocker object has an owner.\"\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/doc-files\/threadDump.schema.json","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -281,1 +281,3 @@\n-                    assertTrue(ti.carrier().isPresent(), \"carrier not found\");\n+                    long carrierTid = ti.carrier().orElse(-1L);\n+                    assertNotEquals(-1L, carrierTid, \"carrier not found\");\n+                    assertForkJoinWorkerThread(carrierTid);\n@@ -351,1 +353,3 @@\n-                assertTrue(ti.carrier().isPresent(), \"carrier not found\");\n+                long carrierTid = ti.carrier().orElse(-1L);\n+                assertNotEquals(-1L, carrierTid, \"carrier not found\");\n+                assertForkJoinWorkerThread(carrierTid);\n@@ -434,1 +438,1 @@\n-            \/\/ thread should be waiting on the ReentrantLock, owned by the main thread.\n+            \/\/ thread should be waiting on the ReentrantLock\n@@ -439,2 +443,0 @@\n-            long ownerTid = ti.exclusiveOwnerThreadId().orElse(-1L);\n-            assertEquals(Thread.currentThread().threadId(), ownerTid);\n@@ -442,1 +444,3 @@\n-                assertTrue(ti.carrier().isPresent(), \"carrier not found\");\n+                long carrierTid = ti.carrier().orElse(-1L);\n+                assertNotEquals(-1L, carrierTid, \"carrier not found\");\n+                assertForkJoinWorkerThread(carrierTid);\n@@ -554,1 +558,3 @@\n-            assertTrue(ti.carrier().isPresent(), \"carrier not found\");\n+            long carrierTid = ti.carrier().orElse(-1L);\n+            assertNotEquals(-1L, carrierTid, \"carrier not found\");\n+            assertForkJoinWorkerThread(carrierTid);\n@@ -564,1 +570,1 @@\n-    void assertCarrier(long tid) {\n+    private void assertForkJoinWorkerThread(long tid) {\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -299,10 +299,0 @@\n-        \/**\n-         * Returns the thread ID of the owner thread if the parkBlocker is an AQS.\n-         *\/\n-        public OptionalLong exclusiveOwnerThreadId() {\n-            String s = getStringProperty(\"parkBlocker\", \"exclusiveOwnerThreadId\");\n-            return (s != null)\n-                    ? OptionalLong.of(Long.parseLong(s))\n-                    : OptionalLong.empty();\n-        }\n-\n@@ -384,2 +374,2 @@\n-                sb.append(\",\");\n-                sb.append(name);\n+                sb.append(\",\")\n+                  .append(name);\n","filename":"test\/lib\/jdk\/test\/lib\/threaddump\/ThreadDump.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"}]}