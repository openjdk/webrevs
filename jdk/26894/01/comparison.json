{"files":[{"patch":"@@ -2586,1 +2586,5 @@\n-\/\/ Print stack trace element to resource allocated buffer\n+\/\/ Print stack trace element to the specified output stream.\n+\/\/ Historically, this was used for java_lang_Throwable and wrote everything to a raw buffer.\n+\/\/ Presumably to avoid interleaving with other threads.\n+\/\/ The current version retains that spirit by writing to a stringStream first before\n+\/\/ flushing everything into the outputStream at once.\n@@ -2591,1 +2595,0 @@\n-  \/\/ Get strings and string lengths\n@@ -2594,1 +2597,0 @@\n-  int buf_len = (int)strlen(klass_name);\n@@ -2597,1 +2599,0 @@\n-  buf_len += (int)strlen(method_name);\n@@ -2603,1 +2604,0 @@\n-    buf_len += (int)strlen(source_file_name);\n@@ -2610,1 +2610,0 @@\n-    buf_len += (int)strlen(module_name);\n@@ -2613,1 +2612,0 @@\n-      buf_len += (int)strlen(module_version);\n@@ -2617,3 +2615,2 @@\n-  \/\/ Allocate temporary buffer with extra space for formatting and line number\n-  const size_t buf_size = buf_len + 64;\n-  char* buf = NEW_RESOURCE_ARRAY(char, buf_size);\n+  stringStream ss;\n+  ss.print(\"\\tat %s.%s(\", klass_name, method_name);\n@@ -2621,3 +2618,0 @@\n-  \/\/ Print stack trace line in buffer\n-  int buf_off = os::snprintf(buf, buf_size, \"\\tat %s.%s(\", klass_name, method_name);\n-  assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n@@ -2627,2 +2621,1 @@\n-      buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s@%s\/\", module_name, module_version);\n-      assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+      ss.print(\"%s@%s\/\", module_name, module_version);\n@@ -2630,2 +2623,1 @@\n-      buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s\/\", module_name);\n-      assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+      ss.print(\"%s\/\", module_name);\n@@ -2638,1 +2630,1 @@\n-    strcat(buf, \"Redefined)\");\n+    ss.print(\"Redefined)\");\n@@ -2642,1 +2634,1 @@\n-      strcat(buf, \"Native Method)\");\n+      ss.print(\"Native Method)\");\n@@ -2646,2 +2638,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s:%d)\", source_file_name, line_number);\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"%s:%d)\", source_file_name, line_number);\n@@ -2650,2 +2641,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s)\", source_file_name);\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"%s)\", source_file_name);\n@@ -2654,2 +2644,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"Unknown Source)\");\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"Unknown Source)\");\n@@ -2659,1 +2648,1 @@\n-        os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n+        ss.print(\"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n@@ -2664,1 +2653,2 @@\n-  st->print_cr(\"%s\", buf);\n+  ss.cr();\n+  st->print_raw(ss.freeze(), ss.size());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":17,"deletions":27,"binary":false,"changes":44,"status":"modified"}]}