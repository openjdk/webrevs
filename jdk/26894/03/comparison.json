{"files":[{"patch":"@@ -2586,1 +2586,2 @@\n-\/\/ Print stack trace element to resource allocated buffer\n+\/\/ Print stack trace element to the specified output stream.\n+\/\/ The output is formatted into a stringStream and written to the outputStream in one step.\n@@ -2590,0 +2591,1 @@\n+  stringStream ss;\n@@ -2591,1 +2593,0 @@\n-  \/\/ Get strings and string lengths\n@@ -2594,2 +2595,0 @@\n-  int buf_len = (int)strlen(klass_name);\n-\n@@ -2597,1 +2596,1 @@\n-  buf_len += (int)strlen(method_name);\n+  ss.print(\"\\tat %s.%s(\", klass_name, method_name);\n@@ -2599,8 +2598,1 @@\n-  char* source_file_name = nullptr;\n-  Symbol* source = Backtrace::get_source_file_name(holder, version);\n-  if (source != nullptr) {\n-    source_file_name = source->as_C_string();\n-    buf_len += (int)strlen(source_file_name);\n-  }\n-\n-  char *module_name = nullptr, *module_version = nullptr;\n+  \/\/ Print module information\n@@ -2609,2 +2601,1 @@\n-    module_name = module->name()->as_C_string();\n-    buf_len += (int)strlen(module_name);\n+    char* module_name = module->name()->as_C_string();\n@@ -2612,2 +2603,4 @@\n-      module_version = module->version()->as_C_string();\n-      buf_len += (int)strlen(module_version);\n+      char* module_version = module->version()->as_C_string();\n+      ss.print(\"%s@%s\/\", module_name, module_version);\n+    } else {\n+      ss.print(\"%s\/\", module_name);\n@@ -2617,16 +2610,4 @@\n-  \/\/ Allocate temporary buffer with extra space for formatting and line number\n-  const size_t buf_size = buf_len + 64;\n-  char* buf = NEW_RESOURCE_ARRAY(char, buf_size);\n-\n-  \/\/ Print stack trace line in buffer\n-  int buf_off = os::snprintf(buf, buf_size, \"\\tat %s.%s(\", klass_name, method_name);\n-  assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n-  \/\/ Print module information\n-  if (module_name != nullptr) {\n-    if (module_version != nullptr) {\n-      buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s@%s\/\", module_name, module_version);\n-      assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n-    } else {\n-      buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s\/\", module_name);\n-      assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n-    }\n+  char* source_file_name = nullptr;\n+  Symbol* source = Backtrace::get_source_file_name(holder, version);\n+  if (source != nullptr) {\n+    source_file_name = source->as_C_string();\n@@ -2638,1 +2619,1 @@\n-    strcat(buf, \"Redefined)\");\n+    ss.print(\"Redefined)\");\n@@ -2642,1 +2623,1 @@\n-      strcat(buf, \"Native Method)\");\n+      ss.print(\"Native Method)\");\n@@ -2646,2 +2627,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s:%d)\", source_file_name, line_number);\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"%s:%d)\", source_file_name, line_number);\n@@ -2650,2 +2630,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"%s)\", source_file_name);\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"%s)\", source_file_name);\n@@ -2654,2 +2633,1 @@\n-        buf_off += os::snprintf(buf + buf_off, buf_size - buf_off, \"Unknown Source)\");\n-        assert(static_cast<size_t>(buf_off) < buf_size, \"buffer is wrong size\");\n+        ss.print(\"Unknown Source)\");\n@@ -2659,1 +2637,1 @@\n-        os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n+        ss.print(\"(nmethod \" INTPTR_FORMAT \")\", p2i(nm));\n@@ -2664,1 +2642,2 @@\n-  st->print_cr(\"%s\", buf);\n+  ss.cr();\n+  st->print_raw(ss.freeze(), ss.size());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":22,"deletions":43,"binary":false,"changes":65,"status":"modified"}]}