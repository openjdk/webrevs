{"files":[{"patch":"@@ -1123,0 +1123,1 @@\n+                    sym.apiComplete();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309881\n+ * @library \/tools\/javac\/lib\n+ * @modules java.compiler\n+ *          jdk.compiler\n+ * @build JavacTestingAbstractProcessor TypeToString\n+ * @compile -cp . -processor TypeToString -proc:only TypeToString.java\n+ * @compile\/process -cp . -processor TypeToString -proc:only Test\n+ *\/\n+import java.lang.Runtime.Version;\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+\n+@SupportedAnnotationTypes(\"*\")\n+public class TypeToString extends JavacTestingAbstractProcessor {\n+\n+    public boolean process(Set<? extends TypeElement> typeElementSet,RoundEnvironment renv) {\n+        if (renv.processingOver()) {\n+            TypeElement testClass = processingEnv.getElementUtils().getTypeElement(\"Test\");\n+            ExecutableElement method = ElementFilter.methodsIn(testClass.getEnclosedElements())\n+                                                    .iterator()\n+                                                    .next();\n+            String expectedTypeToString = \"java.lang.Runtime.Version\";\n+            String actualToString = method.getReturnType().toString();\n+\n+            if (!Objects.equals(expectedTypeToString, actualToString)) {\n+                throw new AssertionError(\"Unexpected toString value. \" +\n+                                         \"Expected: \" + expectedTypeToString + \", \" +\n+                                         \"but got: \" + actualToString);\n+            }\n+\n+            actualToString = method.getParameters().get(0).asType().toString();\n+\n+            if (!Objects.equals(expectedTypeToString, actualToString)) {\n+                throw new AssertionError(\"Unexpected toString value. \" +\n+                                         \"Expected: \" + expectedTypeToString + \", \" +\n+                                         \"but got: \" + actualToString);\n+            }\n+        }\n+        return false;\n+    }\n+}\n+\n+class Test {\n+    public Version get(Version v) {\n+        return null;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/TypeToString.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}