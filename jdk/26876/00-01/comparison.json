{"files":[{"patch":"@@ -31,1 +31,1 @@\n- * An {@link Iterable} clone for {@link CheckedIterator}.\n+ * An {@link Iterable} clone supporting checked exceptions.\n@@ -41,1 +41,1 @@\n-    CheckedIterator<E> iterator();\n+    CheckedIterator<E> iterator() throws Exception;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/CheckedIterable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-                    throw new IOException(e);\n+                    throw e;\n@@ -482,1 +482,1 @@\n-                throw new IOException(ioe);\n+                throw ioe;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.io.FileNotFoundException;\n@@ -62,0 +63,1 @@\n+import static org.testng.Assert.fail;\n@@ -157,0 +159,20 @@\n+    @Test\n+    public void testFileNotFound() throws Exception {\n+        out.printf(\"\\n\\n--- testFileNotFound(): starting\\n\");\n+        try (FileSystem fs = newZipFs()) {\n+            Path fileInZip = fs.getPath(\"non-existent.txt\");\n+            BodyPublishers.ofFile(fileInZip);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+        var path = Path.of(\"fileNotFound.txt\");\n+        try {\n+            Files.deleteIfExists(path);\n+            BodyPublishers.ofFile(path);\n+            fail();\n+        } catch (FileNotFoundException e) {\n+            out.println(\"Caught expected: \" + e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisherTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.concurrent.Flow.Publisher;\n@@ -53,0 +54,2 @@\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n@@ -106,0 +109,14 @@\n+    @Test\n+    public void testAPIExceptions() {\n+        assertThrows(NPE, () -> fromPublisher(null));\n+        assertThrows(NPE, () -> fromPublisher(null, 1));\n+        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), 0));\n+        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), -1));\n+        assertThrows(IAE, () -> fromPublisher(new BBPublisher(), Long.MIN_VALUE));\n+\n+        Publisher publisher = fromPublisher(new BBPublisher());\n+        assertThrows(NPE, () -> publisher.subscribe(null));\n+    }\n+\n+    \/\/  Flow.Publisher<ByteBuffer>\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterPublisherTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}