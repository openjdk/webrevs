{"files":[{"patch":"@@ -434,0 +434,1 @@\n+  bool is_zero_trip_guard() const;\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1777,0 +1777,7 @@\n+bool IfNode::is_zero_trip_guard() const {\n+  if (in(1)->is_Bool() && in(1)->in(1)->is_Cmp()) {\n+    return in(1)->in(1)->in(1)->Opcode() == Op_OpaqueZeroTripGuard;\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-  if (node->is_IfProj() && !node->in(0)->is_ParsePredicate()) {\n+  if (may_be_runtime_predicate_if(node)) {\n@@ -87,0 +87,16 @@\n+\/\/ A Runtime Predicate must have an If or a RangeCheck node, while the If should not be a zero trip guard check.\n+bool RuntimePredicate::may_be_runtime_predicate_if(Node* node) {\n+  if (node->is_IfProj()) {\n+    const int opcode_if = node->in(0)->Opcode();\n+    if ((opcode_if == Op_If && is_not_zero_trip_guard(node->as_IfProj()))\n+        || opcode_if == Op_RangeCheck) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+bool RuntimePredicate::is_not_zero_trip_guard(const IfProjNode* if_proj) {\n+  return !if_proj->in(0)->as_If()->is_zero_trip_guard();\n+}\n+\n@@ -121,0 +137,1 @@\n+    assert(opcode != Op_If || !next->as_If()->is_zero_trip_guard(), \"should not be zero trip guard\");\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -261,0 +261,3 @@\n+  static bool may_be_runtime_predicate_if(Node* node);\n+  static bool is_not_zero_trip_guard(const IfProjNode* if_proj);\n+\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8317723\n+ * @library \/test\/lib\n+ * @summary Test that CountedLoopEndNodes and zero trip guard check If nodes are not treated as Runtime Predicates.\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileCommand=compileonly,compiler.predicates.TestWrongRuntimePredicateDetection::test*\n+ *                   compiler.predicates.TestWrongRuntimePredicateDetection\n+ *\/\n+\n+package compiler.predicates;\n+\n+public class TestWrongRuntimePredicateDetection {\n+    static int[] iArr = new int[50];\n+    static long instanceCount;\n+    static boolean bFld = true;\n+    static volatile byte byFld;\n+    static long[][] lArrFld;\n+\n+\n+    public static void main(String[] x) {\n+        for (int i = 0; i < 1000; i++) {\n+            testCountedLoopEndAsRuntimePredicate();\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            testZeroTripGuardAsRuntimePredicate();\n+        }\n+    }\n+\n+    static void testCountedLoopEndAsRuntimePredicate() {\n+        int i22 = 7, i26, i28, i29 = 8, i31 = 1;\n+        float f4;\n+        do {\n+            for (int i = 0; i < 10000; i++) {\n+                if (bFld) {\n+                    break;\n+                }\n+                instanceCount = byFld;\n+            }\n+            for (i26 = 4; 80 > i26; i26 += 2) ;\n+        } while (++i22 < 315);\n+        i28 = 6;\n+        while ((i28 -= 3) > 0) {\n+            for (f4 = i28; f4 < 53; f4++) {\n+                bFld = false;\n+            }\n+            instanceCount = i26;\n+            do {\n+                switch ((i26 >>> 1) % 2 * 5 + 6) {\n+                    case 12:\n+                    case 10:\n+                        lArrFld[i31][1] = i29;\n+                }\n+            } while (++i31 < 53);\n+        }\n+    }\n+\n+    static void testZeroTripGuardAsRuntimePredicate() {\n+        int m;\n+        int a[] = new int[50];\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = j;\n+        }\n+\n+        for (int j = 4; j < 42; j++) {\n+            for (int k = 1; k < 5; k++) {\n+                iArr[1] = 34;\n+                switch (j % 4) {\n+                    case 0:\n+                        iArr = iArr;\n+                    case 1:\n+                    case 3:\n+                        m = 3;\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestWrongRuntimePredicateDetection.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}