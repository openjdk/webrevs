{"files":[{"patch":"@@ -557,0 +557,4 @@\n+    if (!allow_inline && (C->print_inlining() || C->print_intrinsics())) {\n+      C->print_inlining(method(), jvms->depth()-1, call_node()->jvms()->bci(), InliningResult::FAILURE,\n+                        \"late call devirtualization\");\n+    }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8327741\n+ * @summary JVM crash in hotspot\/share\/opto\/compile.cpp - failed: missing inlining msg\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-BackgroundCompilation -XX:+PrintCompilation -XX:+PrintInlining TestPrintInliningLateVirtualCall\n+ *\/\n+\n+public class TestPrintInliningLateVirtualCall {\n+    static final A fieldA = new A();\n+    static final B fieldB = new B();\n+    static final C fieldC = new C();\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            testHelper(0);\n+            testHelper(10);\n+            testHelper(100);\n+            test();\n+        }\n+    }\n+\n+    private static void testHelper(int i) {\n+        A a;\n+        if (i == 10) {\n+            a = fieldA;\n+        } else if (i > 10) {\n+            a = fieldB;\n+        } else {\n+            a = fieldC;\n+        }\n+        a.m();\n+    }\n+\n+    private static void test() {\n+        int i;\n+        for (i = 0; i < 10; i++) {\n+\n+        }\n+        testHelper(i);\n+    }\n+\n+    static class A {\n+        void m() {\n+\n+        }\n+    }\n+\n+    static class B extends A {\n+        void m() {\n+\n+        }\n+    }\n+\n+    static class C extends A {\n+        void m() {\n+\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/TestPrintInliningLateVirtualCall.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}