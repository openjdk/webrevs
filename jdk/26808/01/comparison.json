{"files":[{"patch":"@@ -1102,2 +1102,6 @@\n-  ss.print(\"(%u cores per cpu, %u threads per core) family %d model %d stepping %d microcode 0x%x\",\n-           cores_per_cpu(), threads_per_core(),\n+  if (supports_hybrid()) {\n+    ss.print(\"(%u threads)\", _cpuid_info.tpl_cpuidB1_ebx.bits.logical_cpus);\n+  } else {\n+    ss.print(\"(%u cores per cpu, %u threads per core)\", cores_per_cpu(), threads_per_core());\n+  }\n+  ss.print(\" family %d model %d stepping %d microcode 0x%x\",\n@@ -3046,0 +3050,2 @@\n+    if (sef_cpuid7_edx.bits.hybrid != 0)\n+      vm_features.set_feature(CPU_HYBRID);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -279,1 +279,2 @@\n-                           : 5,\n+                     hybrid: 1,\n+                           : 4,\n@@ -447,1 +448,2 @@\n-    decl(AVX10_2,           \"avx10_2\",           64) \/* AVX10 512 bit vector ISA Version 2 support*\/\n+    decl(AVX10_2,           \"avx10_2\",           64) \/* AVX10 512 bit vector ISA Version 2 support*\/ \\\n+    decl(HYBRID,            \"hybrid\",            65) \/* Hybrid architecture *\/\n@@ -880,0 +882,1 @@\n+  static bool supports_hybrid()       { return _features.supports_feature(CPU_HYBRID); }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -290,1 +290,2 @@\n-        AVX10_2\n+        AVX10_2,\n+        HYBRID\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}