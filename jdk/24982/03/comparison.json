{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -598,1 +598,1 @@\n-        int ascii = JLA.countPositives(bytearr, 0, utflen);\n+        int ascii = JLA.uncheckedCountPositives(bytearr, 0, utflen);\n@@ -602,1 +602,1 @@\n-                str = JLA.newStringNoRepl(bytearr, StandardCharsets.ISO_8859_1);\n+                str = JLA.uncheckedNewStringNoRepl(bytearr, StandardCharsets.ISO_8859_1);\n@@ -624,1 +624,1 @@\n-            JLA.inflateBytesToChars(bytearr, 0, chararr, 0, ascii);\n+            JLA.uncheckedInflateBytesToChars(bytearr, 0, chararr, 0, ascii);\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3572,1 +3572,1 @@\n-                int ascii = JLA.countPositives(buf, pos, Math.min(avail, (int)utflen));\n+                int ascii = JLA.uncheckedCountPositives(buf, pos, Math.min(avail, (int)utflen));\n@@ -3585,1 +3585,1 @@\n-                    JLA.inflateBytesToChars(buf, pos, cbuf, 0, ascii);\n+                    JLA.uncheckedInflateBytesToChars(buf, pos, cbuf, 0, ascii);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2109,1 +2109,1 @@\n-            public int countPositives(byte[] bytes, int offset, int length) {\n+            public int uncheckedCountPositives(byte[] bytes, int offset, int length) {\n@@ -2115,1 +2115,1 @@\n-            public String newStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException  {\n+            public String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException  {\n@@ -2118,1 +2118,1 @@\n-            public char getUTF16Char(byte[] bytes, int index) {\n+            public char uncheckedGetUTF16Char(byte[] bytes, int index) {\n@@ -2121,1 +2121,1 @@\n-            public void putCharUTF16(byte[] bytes, int index, int ch) {\n+            public void uncheckedPutCharUTF16(byte[] bytes, int index, int ch) {\n@@ -2124,1 +2124,1 @@\n-            public byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n+            public byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n@@ -2136,1 +2136,1 @@\n-            public void inflateBytesToChars(byte[] src, int srcOff, char[] dst, int dstOff, int len) {\n+            public void uncheckedInflateBytesToChars(byte[] src, int srcOff, char[] dst, int dstOff, int len) {\n@@ -2140,1 +2140,1 @@\n-            public int decodeASCII(byte[] src, int srcOff, char[] dst, int dstOff, int len) {\n+            public int uncheckedDecodeASCII(byte[] src, int srcOff, char[] dst, int dstOff, int len) {\n@@ -2144,1 +2144,1 @@\n-            public int encodeASCII(char[] src, int srcOff, byte[] dst, int dstOff, int len) {\n+            public int uncheckedEncodeASCII(char[] src, int srcOff, byte[] dst, int dstOff, int len) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4145,1 +4145,1 @@\n-                return JLA.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+                return JLA.uncheckedNewStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-        return JLA.newStringNoRepl(ba, cs);\n+        return JLA.uncheckedNewStringNoRepl(ba, cs);\n@@ -3365,1 +3365,1 @@\n-        byte[] bytes = JLA.getBytesNoRepl(String.valueOf(csq), cs);\n+        byte[] bytes = JLA.uncheckedGetBytesNoRepl(String.valueOf(csq), cs);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -465,1 +465,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n@@ -699,1 +699,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n@@ -735,1 +735,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n@@ -763,1 +763,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n@@ -799,1 +799,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n@@ -827,1 +827,1 @@\n-            return jla.newStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(rep, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -484,1 +484,1 @@\n-            return jla.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+            return jla.uncheckedNewStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,1 @@\n-            int asciiLen = JLA.countPositives(a, off, len);\n+            int asciiLen = JLA.uncheckedCountPositives(a, off, len);\n@@ -282,1 +282,1 @@\n-                byte[] encoded = JLA.getBytesNoRepl(str, UTF_8.INSTANCE);\n+                byte[] encoded = JLA.uncheckedGetBytesNoRepl(str, UTF_8.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -299,0 +299,2 @@\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -300,1 +302,1 @@\n-    int countPositives(byte[] ba, int off, int len);\n+    int uncheckedCountPositives(byte[] ba, int off, int len);\n@@ -308,5 +310,6 @@\n-     * Constructs a new {@code String} by decoding the specified subarray of\n-     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n-     *\n-     * The caller of this method shall relinquish and transfer the ownership of\n-     * the byte array to the callee since the later will not make a copy.\n+     * Constructs a new {@code String} by decoding the specified byte array\n+     * using the specified {@linkplain java.nio.charset.Charset charset}.\n+     * <p>\n+     * <b>WARNING: The caller of this method shall relinquish and transfer the\n+     * ownership of the byte array to the callee<\/b>, since the latter will not\n+     * make a copy.\n@@ -319,1 +322,1 @@\n-    String newStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException;\n+    String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException;\n@@ -322,7 +325,8 @@\n-     * Encode the given string into a sequence of bytes using the specified Charset.\n-     *\n-     * This method avoids copying the String's internal representation if the input\n-     * is ASCII.\n-     *\n-     * This method throws CharacterCodingException instead of replacing when\n-     * malformed input or unmappable characters are encountered.\n+     * Encode the given string into a sequence of bytes using the specified\n+     * {@linkplain java.nio.charset.Charset charset}.\n+     * <p>\n+     * <b>WARNING: This method return the {@code byte[]} backing the provided\n+     * {@code String}, if the input is ASCII.<\/b>\n+     * <p>\n+     * This method throws {@code CharacterCodingException} instead of replacing\n+     * when malformed input or unmappable characters are encountered.\n@@ -335,1 +339,1 @@\n-    byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException;\n+    byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException;\n@@ -338,1 +342,1 @@\n-     * Returns a new string by decoding from the given utf8 bytes array.\n+     * Returns a new string by decoding from the given UTF-8 bytes array.\n@@ -348,2 +352,4 @@\n-     * Get the char at index in a byte[] in internal UTF-16 representation,\n-     * with no bounds checks.\n+     * Get the {@code char} at {@code index} in a {@code byte[]} in internal\n+     * UTF-16 representation.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -355,1 +361,1 @@\n-    char getUTF16Char(byte[] bytes, int index);\n+    char uncheckedGetUTF16Char(byte[] bytes, int index);\n@@ -358,2 +364,4 @@\n-     * Put the char at index in a byte[] in internal UTF-16 representation,\n-     * with no bounds checks.\n+     * Put the {@code ch} at {@code index} in a {@code byte[]} in internal\n+     * UTF-16 representation.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -364,1 +372,1 @@\n-    void putCharUTF16(byte[] bytes, int index, int ch);\n+    void uncheckedPutCharUTF16(byte[] bytes, int index, int ch);\n@@ -376,1 +384,4 @@\n-     * Inflated copy from byte[] to char[], as defined by StringLatin1.inflate\n+     * Inflated copy from {@code byte[]} to {@code char[]}, as defined by\n+     * {@code StringLatin1.inflate}.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -378,1 +389,1 @@\n-    void inflateBytesToChars(byte[] src, int srcOff, char[] dst, int dstOff, int len);\n+    void uncheckedInflateBytesToChars(byte[] src, int srcOff, char[] dst, int dstOff, int len);\n@@ -383,0 +394,2 @@\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -386,1 +399,1 @@\n-    int decodeASCII(byte[] src, int srcOff, char[] dst, int dstOff, int len);\n+    int uncheckedDecodeASCII(byte[] src, int srcOff, char[] dst, int dstOff, int len);\n@@ -402,1 +415,3 @@\n-     * compatible\n+     * compatible.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -406,1 +421,1 @@\n-    int encodeASCII(char[] src, int srcOff, byte[] dst, int dstOff, int len);\n+    int uncheckedEncodeASCII(char[] src, int srcOff, byte[] dst, int dstOff, int len);\n@@ -439,0 +454,7 @@\n+    \/**\n+     * Creates helper for string concatenation.\n+     * <p>\n+     * <b>WARNING: The caller of this method shall relinquish and transfer the\n+     * ownership of the string array to the callee<\/b>, since the latter will not\n+     * make a copy.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":49,"deletions":27,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-            int singleBytes = JLA.countPositives(rawBytes, offset, rawLen);\n+            int singleBytes = JLA.uncheckedCountPositives(rawBytes, offset, rawLen);\n@@ -236,1 +236,1 @@\n-            JLA.inflateBytesToChars(rawBytes, offset, chararr, 0, singleBytes);\n+            JLA.uncheckedInflateBytesToChars(rawBytes, offset, chararr, 0, singleBytes);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-            JLA.putCharUTF16(str, index, (char) c);\n+            JLA.uncheckedPutCharUTF16(str, index, (char) c);\n@@ -96,1 +96,1 @@\n-            JLA.putCharUTF16(str, index + i, '0' + (t >>> 28));\n+            JLA.uncheckedPutCharUTF16(str, index + i, '0' + (t >>> 28));\n@@ -125,1 +125,1 @@\n-            while (JLA.getUTF16Char(str, index - 1) == '0') {\n+            while (JLA.uncheckedGetUTF16Char(str, index - 1) == '0') {\n@@ -129,1 +129,1 @@\n-            if (JLA.getUTF16Char(str, index - 1) == '.') {\n+            if (JLA.uncheckedGetUTF16Char(str, index - 1) == '.') {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/ToDecimal.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-            case 1 -> 31 * initialValue + JLA.getUTF16Char(a, fromIndex);\n+            case 1 -> 31 * initialValue + JLA.uncheckedGetUTF16Char(a, fromIndex);\n@@ -423,1 +423,1 @@\n-            result = 31 * result + JLA.getUTF16Char(value, i);\n+            result = 31 * result + JLA.uncheckedGetUTF16Char(value, i);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,2 +171,2 @@\n-            JLA.putCharUTF16(buffer, --index, pair >> 8);\n-            JLA.putCharUTF16(buffer, --index, pair & 0xFF);\n+            JLA.uncheckedPutCharUTF16(buffer, --index, pair >> 8);\n+            JLA.uncheckedPutCharUTF16(buffer, --index, pair & 0xFF);\n@@ -177,1 +177,1 @@\n-        JLA.putCharUTF16(buffer, --index, (byte) (digits >> 8));\n+        JLA.uncheckedPutCharUTF16(buffer, --index, (byte) (digits >> 8));\n@@ -180,1 +180,1 @@\n-            JLA.putCharUTF16(buffer, --index, (byte) (digits & 0xFF));\n+            JLA.uncheckedPutCharUTF16(buffer, --index, (byte) (digits & 0xFF));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,1 +199,1 @@\n-            int n = JLA.decodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedDecodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n@@ -449,1 +449,1 @@\n-            int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n@@ -554,1 +554,1 @@\n-            int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(len, da.length));\n+            int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(len, da.length));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/CESU_8.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,1 @@\n-import sun.nio.cs.Surrogate;\n-import sun.nio.cs.ArrayDecoder;\n-import sun.nio.cs.ArrayEncoder;\n+\n@@ -173,1 +171,1 @@\n-                    int n = JLA.decodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n+                    int n = JLA.uncheckedDecodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n@@ -605,1 +603,1 @@\n-                    int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n+                    int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n@@ -691,1 +689,1 @@\n-                int n = JLA.encodeASCII(src, sp, dst, dp, len);\n+                int n = JLA.uncheckedEncodeASCII(src, sp, dst, dp, len);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/DoubleByte.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-            JLA.inflateBytesToChars(sa, sp, da, dp, decodeLen);\n+            JLA.uncheckedInflateBytesToChars(sa, sp, da, dp, decodeLen);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import java.util.Arrays;\n+\n@@ -98,1 +98,1 @@\n-                int n = JLA.decodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n+                int n = JLA.uncheckedDecodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n@@ -220,1 +220,1 @@\n-                int n = JLA.encodeASCII(sa, sp, da, dp, len);\n+                int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, len);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/SingleByte.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-            int n = JLA.decodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedDecodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n@@ -162,1 +162,1 @@\n-            int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/US_ASCII.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.nio.charset.CodingErrorAction;\n@@ -231,1 +230,1 @@\n-            int n = JLA.decodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedDecodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n@@ -456,1 +455,1 @@\n-            int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n+            int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(sl - sp, dl - dp));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/UTF_8.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-            return JLA.getBytesNoRepl(input, Util.jnuEncoding());\n+            return JLA.uncheckedGetBytesNoRepl(input, Util.jnuEncoding());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -312,1 +312,1 @@\n-                    int n = JLA.encodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n+                    int n = JLA.uncheckedEncodeASCII(sa, sp, da, dp, Math.min(dl - dp, sl - sp));\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/EUC_JP.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}