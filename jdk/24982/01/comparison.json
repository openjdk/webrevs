{"files":[{"patch":"@@ -299,0 +299,2 @@\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -308,5 +310,6 @@\n-     * Constructs a new {@code String} by decoding the specified subarray of\n-     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n-     *\n-     * The caller of this method shall relinquish and transfer the ownership of\n-     * the byte array to the callee since the later will not make a copy.\n+     * Constructs a new {@code String} by decoding the specified byte array\n+     * using the specified {@linkplain java.nio.charset.Charset charset}.\n+     * <p>\n+     * <b>WARNING: The caller of this method shall relinquish and transfer the\n+     * ownership of the byte array to the callee<\/b>, since the latter will not\n+     * make a copy.\n@@ -322,7 +325,8 @@\n-     * Encode the given string into a sequence of bytes using the specified Charset.\n-     *\n-     * This method avoids copying the String's internal representation if the input\n-     * is ASCII.\n-     *\n-     * This method throws CharacterCodingException instead of replacing when\n-     * malformed input or unmappable characters are encountered.\n+     * Encode the given string into a sequence of bytes using the specified\n+     * {@linkplain java.nio.charset.Charset charset}.\n+     * <p>\n+     * <b>WARNING: This method return the {@code byte[]} backing the provided\n+     * {@code String}, if the input is ASCII.<\/b>\n+     * <p>\n+     * This method throws {@code CharacterCodingException} instead of replacing\n+     * when malformed input or unmappable characters are encountered.\n@@ -338,1 +342,1 @@\n-     * Returns a new string by decoding from the given utf8 bytes array.\n+     * Returns a new string by decoding from the given UTF-8 bytes array.\n@@ -348,2 +352,4 @@\n-     * Get the char at index in a byte[] in internal UTF-16 representation,\n-     * with no bounds checks.\n+     * Get the {@code char} at {@code index} in a {@code byte[]} in internal\n+     * UTF-16 representation.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -358,2 +364,4 @@\n-     * Put the char at index in a byte[] in internal UTF-16 representation,\n-     * with no bounds checks.\n+     * Put the {@code ch} at {@code index} in a {@code byte[]} in internal\n+     * UTF-16 representation.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -376,1 +384,4 @@\n-     * Inflated copy from byte[] to char[], as defined by StringLatin1.inflate\n+     * Inflated copy from {@code byte[]} to {@code char[]}, as defined by\n+     * {@code StringLatin1.inflate}.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -383,0 +394,2 @@\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -402,1 +415,3 @@\n-     * compatible\n+     * compatible.\n+     * <p>\n+     * <b>WARNING: This method does not perform any bound checks.<\/b>\n@@ -439,0 +454,7 @@\n+    \/**\n+     * Creates helper for string concatenation.\n+     * <p>\n+     * <b>WARNING: The caller of this method shall relinquish and transfer the\n+     * ownership of the string array to the callee<\/b>, since the later will not\n+     * make a copy.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"}]}