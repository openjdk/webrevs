{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,2 @@\n-  Node *alloc_mem = alloc->in(TypeFunc::Memory);\n+  Node *alloc_mem = alloc->as_Allocate()->proj_out_or_null(TypeFunc::Memory, \/*io_use:*\/false);\n+  assert(alloc_mem != nullptr, \"Allocation without a memory projection.\");\n@@ -374,1 +375,2 @@\n-  Node *alloc_mem = alloc->in(TypeFunc::Memory);\n+  Node *alloc_mem = alloc->proj_out_or_null(TypeFunc::Memory, \/*io_use:*\/false);\n+  assert(alloc_mem != nullptr, \"Allocation without a memory projection.\");\n@@ -459,1 +461,2 @@\n-  Node *alloc_mem = alloc->in(TypeFunc::Memory);\n+  Node *alloc_mem = alloc->proj_out_or_null(TypeFunc::Memory, \/*io_use:*\/false);\n+  assert(alloc_mem != nullptr, \"Allocation without a memory projection.\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322854\n+ * @summary Check that the RAM optimization works when there is a memory loop.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationAndMemoryLoop*::test*\n+ *                   -XX:-TieredCompilation -Xbatch\n+ *                   compiler.c2.TestReduceAllocationAndMemoryLoop\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestReduceAllocationAndMemoryLoop {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Warmup\n+        for (int i = 0; i < 50_000; ++i) {\n+            test(false, 10);\n+        }\n+\n+        \/\/ Trigger deoptimization\n+        MyClass obj = test(false, 11);\n+        if (obj.val != 42) {\n+            throw new RuntimeException(\"Test failed, val = \" + obj.val);\n+        }\n+    }\n+\n+    static class MyClass {\n+        final int val;\n+\n+        public MyClass(int val) {\n+            this.val = val;\n+        }\n+    }\n+\n+    public static MyClass test(boolean alwaysFalse, int limit) {\n+        for (int i = 0; ; ++i) {\n+            MyClass obj = new MyClass(42);\n+            if (alwaysFalse || i > 10) {\n+                return obj;\n+            }\n+            if (i == limit) {\n+              return null;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndMemoryLoop.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}