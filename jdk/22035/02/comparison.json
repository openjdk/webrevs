{"files":[{"patch":"@@ -77,1 +77,1 @@\n-        UTIL_REQUIRE_PROGS(LLD, lld)\n+        UTIL_REQUIRE_PROGS(LLD, lld, $TOOLCHAIN_PATH:$PATH)\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import java.security.AccessControlContext;\n@@ -2137,3 +2136,0 @@\n-            public Thread newThreadWithAcc(Runnable target, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-                return new Thread(target, acc);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n@@ -44,2 +41,0 @@\n-import jdk.internal.reflect.CallerSensitive;\n-import jdk.internal.reflect.Reflection;\n@@ -55,1 +50,0 @@\n-import sun.security.util.SecurityConstants;\n@@ -655,15 +649,0 @@\n-    \/**\n-     * Returns the context class loader to inherit from the parent thread.\n-     * See Thread initialization.\n-     *\/\n-    private static ClassLoader contextClassLoader(Thread parent) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null || isCCLOverridden(parent.getClass())) {\n-            return parent.getContextClassLoader();\n-        } else {\n-            \/\/ skip call to getContextClassLoader\n-            return parent.contextClassLoader;\n-        }\n-    }\n-\n@@ -679,1 +658,0 @@\n-     * @param acc ignored\n@@ -681,3 +659,1 @@\n-    @SuppressWarnings(\"removal\")\n-    Thread(ThreadGroup g, String name, int characteristics, Runnable task,\n-           long stackSize, AccessControlContext acc) {\n+    Thread(ThreadGroup g, String name, int characteristics, Runnable task, long stackSize) {\n@@ -694,1 +670,0 @@\n-            SecurityManager sm = System.getSecurityManager();\n@@ -696,5 +671,0 @@\n-                \/\/ the security manager can choose the thread group\n-                if (sm != null) {\n-                    g = sm.getThreadGroup();\n-                }\n-\n@@ -702,3 +672,1 @@\n-                if (g == null) {\n-                    g = parent.getThreadGroup();\n-                }\n+                g = parent.getThreadGroup();\n@@ -706,9 +674,0 @@\n-\n-            \/\/ permission checks when creating a child Thread\n-            if (sm != null) {\n-                sm.checkAccess(g);\n-                if (isCCLOverridden(getClass())) {\n-                    sm.checkPermission(SecurityConstants.SUBCLASS_IMPLEMENTATION_PERMISSION);\n-                }\n-            }\n-\n@@ -735,1 +694,1 @@\n-                    this.contextClassLoader = contextClassLoader(parent);\n+                    this.contextClassLoader = parent.getContextClassLoader();\n@@ -766,1 +725,1 @@\n-            this.contextClassLoader = contextClassLoader(parent);\n+            this.contextClassLoader = parent.getContextClassLoader();\n@@ -1108,1 +1067,1 @@\n-        this(null, null, 0, null, 0, null);\n+        this(null, null, 0, null, 0);\n@@ -1129,10 +1088,1 @@\n-        this(null, null, 0, task, 0, null);\n-    }\n-\n-    \/**\n-     * Creates a new Thread that inherits the given AccessControlContext\n-     * but thread-local variables are not inherited.\n-     * This is not a public constructor.\n-     *\/\n-    Thread(Runnable task, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        this(null, null, 0, task, 0, acc);\n+        this(null, null, 0, task, 0);\n@@ -1163,1 +1113,1 @@\n-        this(group, null, 0, task, 0, null);\n+        this(group, null, 0, task, 0);\n@@ -1180,1 +1130,1 @@\n-        this(null, checkName(name), 0, null, 0, null);\n+        this(null, checkName(name), 0, null, 0);\n@@ -1201,1 +1151,1 @@\n-        this(group, checkName(name), 0, null, 0, null);\n+        this(group, checkName(name), 0, null, 0);\n@@ -1223,1 +1173,1 @@\n-        this(null, checkName(name), 0, task, 0, null);\n+        this(null, checkName(name), 0, task, 0);\n@@ -1259,1 +1209,1 @@\n-        this(group, checkName(name), 0, task, 0, null);\n+        this(group, checkName(name), 0, task, 0);\n@@ -1333,1 +1283,1 @@\n-        this(group, checkName(name), 0, task, stackSize, null);\n+        this(group, checkName(name), 0, task, stackSize);\n@@ -1393,1 +1343,1 @@\n-                task, stackSize, null);\n+                task, stackSize);\n@@ -2143,1 +2093,0 @@\n-    @CallerSensitive\n@@ -2145,10 +2094,1 @@\n-        ClassLoader cl = this.contextClassLoader;\n-        if (cl == null)\n-            return null;\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Class<?> caller = Reflection.getCallerClass();\n-            ClassLoader.checkClassLoaderPermission(cl, caller);\n-        }\n-        return cl;\n+        return contextClassLoader;\n@@ -2170,5 +2110,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n-        }\n@@ -2223,6 +2158,0 @@\n-            \/\/ check for getStackTrace permission\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n-            if (security != null) {\n-                security.checkPermission(SecurityConstants.GET_STACK_TRACE_PERMISSION);\n-            }\n@@ -2288,8 +2217,0 @@\n-        \/\/ check for getStackTrace permission\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(SecurityConstants.GET_STACK_TRACE_PERMISSION);\n-            security.checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);\n-        }\n-\n@@ -2310,58 +2231,0 @@\n-    \/** cache of subclass security audit results *\/\n-    private static class Caches {\n-        \/** cache of subclass security audit results *\/\n-        static final ClassValue<Boolean> subclassAudits =\n-            new ClassValue<>() {\n-                @Override\n-                protected Boolean computeValue(Class<?> type) {\n-                    return auditSubclass(type);\n-                }\n-            };\n-    }\n-\n-    \/**\n-     * Verifies that this (possibly subclass) instance can be constructed\n-     * without violating security constraints: the subclass must not override\n-     * security-sensitive non-final methods, or else the\n-     * \"enableContextClassLoaderOverride\" RuntimePermission is checked.\n-     *\/\n-    private static boolean isCCLOverridden(Class<?> cl) {\n-        if (cl == Thread.class)\n-            return false;\n-\n-        return Caches.subclassAudits.get(cl);\n-    }\n-\n-    \/**\n-     * Performs reflective checks on given subclass to verify that it doesn't\n-     * override security-sensitive non-final methods.  Returns true if the\n-     * subclass overrides any of the methods, false otherwise.\n-     *\/\n-    private static boolean auditSubclass(final Class<?> subcl) {\n-        @SuppressWarnings(\"removal\")\n-        Boolean result = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public Boolean run() {\n-                    for (Class<?> cl = subcl;\n-                         cl != Thread.class;\n-                         cl = cl.getSuperclass())\n-                    {\n-                        try {\n-                            cl.getDeclaredMethod(\"getContextClassLoader\", new Class<?>[0]);\n-                            return Boolean.TRUE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                        try {\n-                            Class<?>[] params = {ClassLoader.class};\n-                            cl.getDeclaredMethod(\"setContextClassLoader\", params);\n-                            return Boolean.TRUE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                    }\n-                    return Boolean.FALSE;\n-                }\n-            }\n-        );\n-        return result.booleanValue();\n-    }\n-\n@@ -2606,6 +2469,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(\n-                new RuntimePermission(\"setDefaultUncaughtExceptionHandler\"));\n-        }\n@@ -2678,1 +2535,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":14,"deletions":158,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-            var thread = new Thread(group, name, characteristics(), task, stackSize, null);\n+            var thread = new Thread(group, name, characteristics(), task, stackSize);\n@@ -356,1 +356,1 @@\n-            Thread thread = new Thread(group, name, characteristics(), task, stackSize, null);\n+            Thread thread = new Thread(group, name, characteristics(), task, stackSize);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -61,1 +59,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -1016,1 +1013,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1412,1 +1408,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1414,31 +1409,25 @@\n-        ForkJoinWorkerThreadFactory factory = pool -> {\n-            PrivilegedAction<ForkJoinWorkerThread> pa = () -> new CarrierThread(pool);\n-            return AccessController.doPrivileged(pa);\n-        };\n-        PrivilegedAction<ForkJoinPool> pa = () -> {\n-            int parallelism, maxPoolSize, minRunnable;\n-            String parallelismValue = System.getProperty(\"jdk.virtualThreadScheduler.parallelism\");\n-            String maxPoolSizeValue = System.getProperty(\"jdk.virtualThreadScheduler.maxPoolSize\");\n-            String minRunnableValue = System.getProperty(\"jdk.virtualThreadScheduler.minRunnable\");\n-            if (parallelismValue != null) {\n-                parallelism = Integer.parseInt(parallelismValue);\n-            } else {\n-                parallelism = Runtime.getRuntime().availableProcessors();\n-            }\n-            if (maxPoolSizeValue != null) {\n-                maxPoolSize = Integer.parseInt(maxPoolSizeValue);\n-                parallelism = Integer.min(parallelism, maxPoolSize);\n-            } else {\n-                maxPoolSize = Integer.max(parallelism, 256);\n-            }\n-            if (minRunnableValue != null) {\n-                minRunnable = Integer.parseInt(minRunnableValue);\n-            } else {\n-                minRunnable = Integer.max(parallelism \/ 2, 1);\n-            }\n-            Thread.UncaughtExceptionHandler handler = (t, e) -> { };\n-            boolean asyncMode = true; \/\/ FIFO\n-            return new ForkJoinPool(parallelism, factory, handler, asyncMode,\n-                         0, maxPoolSize, minRunnable, pool -> true, 30, SECONDS);\n-        };\n-        return AccessController.doPrivileged(pa);\n+        ForkJoinWorkerThreadFactory factory = pool -> new CarrierThread(pool);\n+        int parallelism, maxPoolSize, minRunnable;\n+        String parallelismValue = System.getProperty(\"jdk.virtualThreadScheduler.parallelism\");\n+        String maxPoolSizeValue = System.getProperty(\"jdk.virtualThreadScheduler.maxPoolSize\");\n+        String minRunnableValue = System.getProperty(\"jdk.virtualThreadScheduler.minRunnable\");\n+        if (parallelismValue != null) {\n+            parallelism = Integer.parseInt(parallelismValue);\n+        } else {\n+            parallelism = Runtime.getRuntime().availableProcessors();\n+        }\n+        if (maxPoolSizeValue != null) {\n+            maxPoolSize = Integer.parseInt(maxPoolSizeValue);\n+            parallelism = Integer.min(parallelism, maxPoolSize);\n+        } else {\n+            maxPoolSize = Integer.max(parallelism, 256);\n+        }\n+        if (minRunnableValue != null) {\n+            minRunnable = Integer.parseInt(minRunnableValue);\n+        } else {\n+            minRunnable = Integer.max(parallelism \/ 2, 1);\n+        }\n+        Thread.UncaughtExceptionHandler handler = (t, e) -> { };\n+        boolean asyncMode = true; \/\/ FIFO\n+        return new ForkJoinPool(parallelism, factory, handler, asyncMode,\n+                     0, maxPoolSize, minRunnable, pool -> true, 30, SECONDS);\n@@ -1461,1 +1450,1 @@\n-        String propValue = GetPropertyAction.privilegedGetProperty(propName);\n+        String propValue = System.getProperty(propName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":26,"deletions":37,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -147,6 +147,0 @@\n-    \/**\n-     * Returns a new Thread with the given Runnable and an\n-     * inherited AccessControlContext.\n-     *\/\n-    Thread newThreadWithAcc(Runnable target, @SuppressWarnings(\"removal\") AccessControlContext acc);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -117,1 +115,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,9 +116,5 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<ThreadGroup>() {\n-            public ThreadGroup run() {\n-                ThreadGroup group = JLA.currentCarrierThread().getThreadGroup();\n-                for (ThreadGroup p; (p = group.getParent()) != null; )\n-                    group = p;\n-                var carrierThreadsGroup = new ThreadGroup(group, \"CarrierThreads\");\n-                return carrierThreadsGroup;\n-            }\n-        });\n+        ThreadGroup group = JLA.currentCarrierThread().getThreadGroup();\n+        for (ThreadGroup p; (p = group.getParent()) != null; )\n+            group = p;\n+        var carrierThreadsGroup = new ThreadGroup(group, \"CarrierThreads\");\n+        return carrierThreadsGroup;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CarrierThread.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.ProtectionDomain;\n-import java.security.PrivilegedAction;\n@@ -72,12 +68,2 @@\n-        if (System.getSecurityManager() == null) {\n-            return createThread(name, target, 0L,\n-                    ClassLoader.getSystemClassLoader(), priority);\n-        }\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Thread>() {\n-                    @Override\n-                    public Thread run() {\n-                        return createThread(name, target, 0L,\n-                                ClassLoader.getSystemClassLoader(), priority);\n-                    }\n-                });\n+        return createThread(name, target, 0L,\n+                ClassLoader.getSystemClassLoader(), priority);\n@@ -106,11 +92,1 @@\n-        if (System.getSecurityManager() == null) {\n-            return createThread(name, target, 0L, null, priority);\n-        }\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Thread>() {\n-                    @Override\n-                    public Thread run() {\n-                        return createThread(name, target, 0L,\n-                                null, priority);\n-                    }\n-                });\n+        return createThread(name, target, 0L, null, priority);\n@@ -125,11 +101,1 @@\n-        if (System.getSecurityManager() == null) {\n-            return createThread(name, target, stackSize, null, priority);\n-        }\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Thread>() {\n-                    @Override\n-                    public Thread run() {\n-                        return createThread(name, target, 0L,\n-                                null, priority);\n-                    }\n-                });\n+        return createThread(name, target, stackSize, null, priority);\n@@ -210,12 +176,1 @@\n-            final ThreadGroup root = group;\n-            if (System.getSecurityManager() == null) {\n-                INNOCUOUSTHREADGROUP = new ThreadGroup(root, \"InnocuousThreadGroup\");\n-            } else {\n-                INNOCUOUSTHREADGROUP = AccessController.doPrivileged(\n-                    new PrivilegedAction<ThreadGroup>() {\n-                        @Override\n-                        public ThreadGroup run() {\n-                            return new ThreadGroup(root, \"InnocuousThreadGroup\");\n-                        }\n-                    });\n-            }\n+            INNOCUOUSTHREADGROUP = new ThreadGroup(group, \"InnocuousThreadGroup\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/InnocuousThread.java","additions":5,"deletions":50,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -168,1 +168,0 @@\n-        java.naming,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import jdk.internal.access.SharedSecrets;\n-\n@@ -112,1 +110,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -114,6 +111,1 @@\n-        AccessControlContext acc = AccessController.getContext();\n-        \/\/ 4290486: doPrivileged is needed to create a thread in\n-        \/\/ an environment that restricts \"modifyThreadGroup\".\n-        PrivilegedAction<Thread> act =\n-                () -> SharedSecrets.getJavaLangAccess().newThreadWithAcc(r, acc);\n-        return AccessController.doPrivileged(act);\n+        return new Thread(r);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/VersionHelper.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-               \"java\/lang\/Thread#getContextClassLoader ()Ljava\/lang\/ClassLoader;\",\n@@ -84,1 +83,0 @@\n-               \"java\/lang\/Thread#getContextClassLoader (Ljava\/lang\/Class;)Ljava\/lang\/ClassLoader;\",\n","filename":"test\/jdk\/jdk\/internal\/reflect\/CallerSensitive\/CheckCSMs.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}