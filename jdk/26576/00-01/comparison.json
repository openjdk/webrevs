{"files":[{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.VolatileImage;\n+import java.lang.ref.WeakReference;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8364434\n+ * @summary Check that garbage-collecting Color before accelerated painting is complete does not cause artifacts.\n+ * @run main\/othervm -Xms16m -Xmx16m WeakColorTest\n+ *\/\n+\n+public class WeakColorTest {\n+    public static void main(String[] args) throws Exception {\n+        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB); \/\/ This image is full-black.\n+        VolatileImage image = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration().createCompatibleVolatileImage(100, 100);\n+        Graphics2D g = image.createGraphics();\n+\n+        \/\/ Create a new Color - we want it to be collected later.\n+        g.setColor(new Color(255, 0, 0));\n+        WeakReference<Color> color = new WeakReference<>(g.getColor());\n+\n+        g.fillRect(0, 0, 100, 100);\n+\n+        \/\/ Change color to prevent Graphics from keeping our Color alive.\n+        g.setColor(Color.BLACK);\n+\n+        \/\/ Force Color to be GC'ed.\n+        final int MAX_ITERATIONS = 1000, ARRAY_SIZE = 1000000;\n+        WeakReference<Object[]> array = null;\n+        for (int i = 0;; i++) {\n+            System.gc();\n+            if (color.get() == null) {\n+                System.out.println(\"Color collected at: \" + i);\n+                break;\n+            } else if (i >= MAX_ITERATIONS) {\n+                throw new Error(\"Color was not collected after \" + MAX_ITERATIONS + \" iterations\");\n+            }\n+            Object[] a = new Object[ARRAY_SIZE];\n+            a[0] = array;\n+            array = new WeakReference<>(a);\n+        }\n+\n+        \/\/ Do a blit. If it succeeds, the resulting image will be full-black.\n+        g.drawImage(bi, 0, 0, null);\n+        g.dispose();\n+\n+        \/\/ We expect black. If it's red, then the blit must have failed.\n+        int actualColor = image.getSnapshot().getRGB(50, 50);\n+        if ((actualColor & 0xFFFFFF) != 0) throw new Error(\"Wrong color: 0x\" + Integer.toHexString(actualColor));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ColorClass\/WeakColorTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}