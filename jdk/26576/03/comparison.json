{"files":[{"patch":"@@ -103,5 +103,5 @@\n-    private Reference<AccelSurface> validSrcDataRef = new WeakReference<>(null);\n-    private Reference<AccelSurface> validDstDataRef = new WeakReference<>(null);\n-    private Reference<Region> validClipRef = new WeakReference<>(null);\n-    private Reference<Composite> validCompRef = new WeakReference<>(null);\n-    private Reference<Paint> validPaintRef = new WeakReference<>(null);\n+    private Reference<AccelSurface> validSrcDataRef = null;\n+    private Reference<AccelSurface> validDstDataRef = null;\n+    private Reference<Region> validClipRef = null;\n+    private Reference<Composite> validCompRef = null;\n+    private Reference<Paint> validPaintRef = null;\n@@ -216,1 +216,1 @@\n-        } else if (validPaintRef.get() != paint) {\n+        } else if (stateChanged(validPaintRef, paint)) {\n@@ -223,5 +223,3 @@\n-        final AccelSurface validatedSrcData = validSrcDataRef.get();\n-        final AccelSurface validatedDstData = validDstDataRef.get();\n-        if ((currentContext != this) ||\n-            (srcData != validatedSrcData) ||\n-            (dstData != validatedDstData))\n+        final boolean srcChanged = stateChanged(validSrcDataRef, srcData);\n+        final boolean dstChanged = stateChanged(validDstDataRef, dstData);\n+        if ((currentContext != this) || srcChanged || dstChanged)\n@@ -229,1 +227,1 @@\n-            if (dstData != validatedDstData) {\n+            if (dstChanged) {\n@@ -246,2 +244,2 @@\n-            validSrcDataRef = new WeakReference<>(srcData);\n-            validDstDataRef = new WeakReference<>(dstData);\n+            validSrcDataRef = wrapState(srcData);\n+            validDstDataRef = wrapState(dstData);\n@@ -251,2 +249,2 @@\n-        final Region validatedClip = validClipRef.get();\n-        if ((clip != validatedClip) || updateClip) {\n+        final Region validatedClip = validClipRef == null ? null : validClipRef.get();\n+        if (stateChanged(validClipRef, clip) || updateClip) {\n@@ -267,1 +265,1 @@\n-            validClipRef = new WeakReference<>(clip);\n+            validClipRef = wrapState(clip);\n@@ -273,1 +271,1 @@\n-        if ((comp != validCompRef.get()) || (flags != validatedFlags)) {\n+        if (stateChanged(validCompRef, comp) || (flags != validatedFlags)) {\n@@ -282,1 +280,1 @@\n-            validCompRef = new WeakReference<>(comp);\n+            validCompRef = wrapState(comp);\n@@ -316,1 +314,1 @@\n-            validPaintRef = new WeakReference<>(paint);\n+            validPaintRef = wrapState(paint);\n@@ -324,0 +322,12 @@\n+    private static <T> boolean stateChanged(Reference<T> ref, T obj) {\n+        \/\/ null ref means \"true\" null object\n+        if (ref == null) return obj != null;\n+        T old = ref.get();\n+        \/\/ null ref value means the object was GC'ed, return true in that case\n+        return old == null || old != obj;\n+    }\n+\n+    private static <T> Reference<T> wrapState(T obj) {\n+        return obj == null ? null : new WeakReference<>(obj);\n+    }\n+\n@@ -437,5 +447,5 @@\n-        validSrcDataRef.clear();\n-        validDstDataRef.clear();\n-        validCompRef.clear();\n-        validClipRef.clear();\n-        validPaintRef.clear();\n+        validSrcDataRef = null;\n+        validDstDataRef = null;\n+        validCompRef = null;\n+        validClipRef = null;\n+        validPaintRef = null;\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/BufferedContext.java","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.VolatileImage;\n+import java.lang.ref.WeakReference;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8364434\n+ * @summary Check that garbage-collecting Color before accelerated painting is complete does not cause artifacts.\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm -Xms16m -Xmx16m WeakColorTest\n+ *\/\n+\n+public class WeakColorTest {\n+    public static void main(String[] args) throws Exception {\n+        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB); \/\/ This image is full-black.\n+        VolatileImage image = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration().createCompatibleVolatileImage(100, 100);\n+        Graphics2D g = image.createGraphics();\n+\n+        \/\/ Create a new Color - we want it to be collected later.\n+        g.setColor(new Color(255, 0, 0));\n+        WeakReference<Color> color = new WeakReference<>(g.getColor());\n+\n+        g.fillRect(0, 0, 100, 100);\n+\n+        \/\/ Change color to prevent Graphics from keeping our Color alive.\n+        g.setColor(Color.BLACK);\n+\n+        \/\/ Force Color to be GC'ed.\n+        final int MAX_ITERATIONS = 1000, ARRAY_SIZE = 1000000;\n+        WeakReference<Object[]> array = null;\n+        for (int i = 0;; i++) {\n+            System.gc();\n+            if (color.get() == null) {\n+                System.out.println(\"Color collected at: \" + i);\n+                break;\n+            } else if (i >= MAX_ITERATIONS) {\n+                throw new Error(\"Color was not collected after \" + MAX_ITERATIONS + \" iterations\");\n+            }\n+            Object[] a = new Object[ARRAY_SIZE];\n+            a[0] = array;\n+            array = new WeakReference<>(a);\n+        }\n+\n+        \/\/ Do a blit. If it succeeds, the resulting image will be full-black.\n+        g.drawImage(bi, 0, 0, null);\n+        g.dispose();\n+\n+        \/\/ We expect black. If it's red, then the blit must have failed.\n+        int actualColor = image.getSnapshot().getRGB(50, 50);\n+        if ((actualColor & 0xFFFFFF) != 0) throw new Error(\"Wrong color: 0x\" + Integer.toHexString(actualColor));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ColorClass\/WeakColorTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}