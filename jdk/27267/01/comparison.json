{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,6 +33,1 @@\n-import java.security.Key;\n-import java.security.KeyStore;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.UnrecoverableKeyException;\n+import java.security.*;\n@@ -53,0 +48,1 @@\n+ * @enablePreview\n@@ -131,8 +127,5 @@\n-    WriteP12Test() throws CertificateException {\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        caCert = cf.generateCertificate(new ByteArrayInputStream(CA_CERT_STR\n-                .getBytes()));\n-        testLeadCert = cf.generateCertificate(new ByteArrayInputStream(\n-                LEAD_CERT.getBytes()));\n-        testerCert = cf.generateCertificate(new ByteArrayInputStream(END_CERT\n-                .getBytes()));\n+    WriteP12Test() {\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n+        caCert = pemDecoder.decode(CA_CERT_STR, X509Certificate.class);\n+        testLeadCert = pemDecoder.decode(LEAD_CERT, X509Certificate.class);\n+        testerCert = pemDecoder.decode(END_CERT, X509Certificate.class);\n@@ -141,3 +134,3 @@\n-    public static void main(String[] args) throws CertificateException,\n-            UnrecoverableKeyException, KeyStoreException,\n-            NoSuchProviderException, NoSuchAlgorithmException, IOException {\n+    public static void main(String[] args) throws UnrecoverableKeyException,\n+            KeyStoreException, NoSuchProviderException,\n+            NoSuchAlgorithmException, IOException {\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/WriteP12Test.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.BufferedInputStream;\n@@ -28,7 +27,1 @@\n-import java.io.InputStream;\n-import java.security.KeyFactory;\n-import java.security.KeyStore;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchProviderException;\n-import java.security.PrivateKey;\n-import java.security.UnrecoverableKeyException;\n+import java.security.*;\n@@ -36,4 +29,1 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.KeySpec;\n-import java.security.spec.PKCS8EncodedKeySpec;\n-import java.util.Base64;\n+import java.security.cert.X509Certificate;\n@@ -44,0 +34,1 @@\n+ * @enablePreview\n@@ -49,23 +40,26 @@\n-    private static final String PRIVATE_KEY_PKCS8_BASE64 = \"\"\n-        + \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCpyz97liuWPDYcLH9TX8BiT78o\"\n-        + \"lCmAfmevvch6ncXUVuCzbdaKuKXwn4EVbDszsVJLoK5zdtP+X3iDhutj+IgKmLhuczF3M9VIcWr+\"\n-        + \"JJUyTH4+3h\/RT8cjCDZOmk9iXkb5ifruVsLqzb9g+Vp140Oz7leikne7KmclHvTfvFd0WDI7Gb9v\"\n-        + \"o4f5rT717BXJ\/n+M6pNk8DLpLiEu6eziYvXRv5x+t5Go3x0eCXdaxEQUf2j876Wfr2qHRJK7lDfF\"\n-        + \"e1DDsMg\/KpKGiILYZ+g2qtVMZSxtp5BZEtfB5qV\/IE5kWO+mCIAGpXSZIdbERR6pZUq8GLEe1T9e\"\n-        + \"+sO6H24w2F19AgMBAAECggEBAId\/12187dO6wUPCjumuJA1QrrBnbKdKONyai36uoc1Od4s5QFj7\"\n-        + \"+hEIeS7rbGNYQuBvnkgusAbzkW0FIpxpHce3EJez\/emux6pEOKoP77BwMt9gy+txyu0+BHi91FQg\"\n-        + \"AGvrnQDO5EYVY4Cz\/WjOsJzKu8zVLg+DS0Toa2qRFwmUe9mVAXPNOCZ3Oae\/Q6tCDsaINNw0fmjj\"\n-        + \"jn6uohPbS+n6xENG3FkQXB36getXy310xTGED2J27cmAQH6gLR6Kl2iROzNPbbpBqbuemI9kbcld\"\n-        + \"EwBS1jRfZWeaPstYA1niVrE9UgUBzemnoh4TDkG076sYthHMr5QFGjPswnwtJ4ECgYEA0sURQ5+v\"\n-        + \"baH4tdaemI3qpnknXTlzSpuZZmAoyvY0Id0mlduwKwmZ3Y5989wHfnnhFfyNO4IkTKjI2Wp97qP5\"\n-        + \"4eqUNpA7FtNU7KUzMcFDTtwtNZuRYMrKlqo2lLbA+gVrAYpYZFL4b7tcwtX4DnYorDsmude6W8sG\"\n-        + \"4Mx2VdFJC9UCgYEAzjsdXCYH5doWUHb0dvn9ID7IikffEMRM720MRjrnnnVbpzx6ACntkPDNZg7p\"\n-        + \"TRE\/mx7iBz81ZaUWE+V0wd0JvCHEdpAz3mksyvDFhU4Bgs6xzf2pSul5muhsx3hHcvvPezz5Bnxs\"\n-        + \"faJlzkxfwotyGmvWN15GA\/pyfsZjsbbTpwkCgYAO6NnbysQCIV8SnegCKqfatt9N\/O5m7LLhRxQb\"\n-        + \"p2bwrlA4cZ34rWkw\/w9x3LK7A6wkfgUPnJkswxPSLXJTG05l6M4rPfCwIKr1Qopojp9QSMr569NQ\"\n-        + \"4YeLOOc7heIIzbFQHpU6I5Rncv2Q2sn9W+ZsqJKIuvX34FjQNiZ406EzMQKBgHSxOGS61D84DuZK\"\n-        + \"2Ps1awhC3kB4eHzJRms3vflDPWoJJ+pSKwpKrzUTPHXiPBqyhtYkPGszVeiE6CAr9sv3YZnFVaBs\"\n-        + \"6hyQUJsob+uE\/w\/gGvXe8VsFDx0bJOodYfhrCbTHBHWqE81nBcocpxayxsayfAzqWB3KKd0YLrMR\"\n-        + \"K2PZAoGAcZa8915R2m0KZ6HVJUt\/JDR85jCbN71kcVDFY2XSFkOJvOdFoHNfRckfLzjq9Y2MSSTV\"\n-        + \"+QDWbDo2doUQCejJUTaN8nP79tfyir24X5uVPvQaeVoGTKYb+LfUqK0F60lStmjuddIGSZH55y3v\"\n-        + \"+9XjmxbVERtd1lqgQg3VlmKlEXY=\";\n+    private static final String PRIVATE_KEY_PKCS8_BASE64 = \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCpyz97liuWPDYcLH9TX8BiT78o\n+        lCmAfmevvch6ncXUVuCzbdaKuKXwn4EVbDszsVJLoK5zdtP+X3iDhutj+IgKmLhuczF3M9VIcWr+\n+        JJUyTH4+3h\/RT8cjCDZOmk9iXkb5ifruVsLqzb9g+Vp140Oz7leikne7KmclHvTfvFd0WDI7Gb9v\n+        o4f5rT717BXJ\/n+M6pNk8DLpLiEu6eziYvXRv5x+t5Go3x0eCXdaxEQUf2j876Wfr2qHRJK7lDfF\n+        e1DDsMg\/KpKGiILYZ+g2qtVMZSxtp5BZEtfB5qV\/IE5kWO+mCIAGpXSZIdbERR6pZUq8GLEe1T9e\n+        +sO6H24w2F19AgMBAAECggEBAId\/12187dO6wUPCjumuJA1QrrBnbKdKONyai36uoc1Od4s5QFj7\n+        +hEIeS7rbGNYQuBvnkgusAbzkW0FIpxpHce3EJez\/emux6pEOKoP77BwMt9gy+txyu0+BHi91FQg\n+        AGvrnQDO5EYVY4Cz\/WjOsJzKu8zVLg+DS0Toa2qRFwmUe9mVAXPNOCZ3Oae\/Q6tCDsaINNw0fmjj\n+        jn6uohPbS+n6xENG3FkQXB36getXy310xTGED2J27cmAQH6gLR6Kl2iROzNPbbpBqbuemI9kbcld\n+        EwBS1jRfZWeaPstYA1niVrE9UgUBzemnoh4TDkG076sYthHMr5QFGjPswnwtJ4ECgYEA0sURQ5+v\n+        baH4tdaemI3qpnknXTlzSpuZZmAoyvY0Id0mlduwKwmZ3Y5989wHfnnhFfyNO4IkTKjI2Wp97qP5\n+        4eqUNpA7FtNU7KUzMcFDTtwtNZuRYMrKlqo2lLbA+gVrAYpYZFL4b7tcwtX4DnYorDsmude6W8sG\n+        4Mx2VdFJC9UCgYEAzjsdXCYH5doWUHb0dvn9ID7IikffEMRM720MRjrnnnVbpzx6ACntkPDNZg7p\n+        TRE\/mx7iBz81ZaUWE+V0wd0JvCHEdpAz3mksyvDFhU4Bgs6xzf2pSul5muhsx3hHcvvPezz5Bnxs\n+        faJlzkxfwotyGmvWN15GA\/pyfsZjsbbTpwkCgYAO6NnbysQCIV8SnegCKqfatt9N\/O5m7LLhRxQb\n+        p2bwrlC4cZ34rWkw\/w9x3LK7A6wkfgUPnJkswxPSLXJTG05l6M4rPfCwIKr1Qopojp9QSMr569NQ\n+        4YeLOOc7heIIzbFQHpU6I5Rncv2Q2sn9W+ZsqJKIuvX34FjQNiZ406EzMQKBgHSxOGS61D84DuZK\n+        2Ps1awhC3kB4eHzJRms3vflDPWoJJ+pSKwpKrzUTPHXiPBqyhtYkPGszVeiE6CAr9sv3YZnFVaBs\n+        6hyQUJsob+uE\/w\/gGvXe8VsFDx0bJOodYfhrCbTHBHWqE81nBcocpxayxsayfAzqWB3KKd0YLrMR\n+        K2PZAoGAcZa8915R2m0KZ6HVJUt\/JDR85jCbN71kcVDFY2XSFkOJvOdFoHNfRckfLzjq9Y2MSSTV\n+        +QDWbDo2doUQCejJUTaN8nP79tfyir24X5uVPvQaeVoGTKYb+LfUqK0F60lStmjuddIGSZH55y3v\n+        +9XjmxbVERtd1lqgQg3VlmKlEXY=\n+        -----END PRIVATE KEY-----\n+        \"\"\";\n@@ -135,14 +129,3 @@\n-        \/\/ load private key\n-        \/\/ all keystore types should support private keys\n-        KeySpec spec = new PKCS8EncodedKeySpec(\n-                Base64.getMimeDecoder().decode(PRIVATE_KEY_PKCS8_BASE64));\n-        PrivateKey privateKey = KeyFactory.getInstance(\"RSA\")\n-                .generatePrivate(spec);\n-\n-        \/\/ load x509 certificate\n-        Certificate cert;\n-        try (InputStream is = new BufferedInputStream(\n-                new ByteArrayInputStream(CERTIFICATE.getBytes()))) {\n-            cert = CertificateFactory.getInstance(\"X.509\")\n-                    .generateCertificate(is);\n-        }\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n+        PrivateKey privateKey = pemDecoder.decode(PRIVATE_KEY_PKCS8_BASE64, PrivateKey.class);\n+        Certificate cert = pemDecoder.decode(CERTIFICATE, X509Certificate.class);\n","filename":"test\/jdk\/java\/security\/KeyStore\/TestKeyStoreBasic.java","additions":33,"deletions":50,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+ * @enablePreview\n@@ -44,0 +45,2 @@\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -146,0 +149,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -149,5 +154,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -157,1 +158,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -163,1 +164,1 @@\n-        Collection entries = new HashSet();\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -166,23 +167,5 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(topCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n+        entries.add(PEM_DECODER.decode(targetCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(subCaCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(topCrlIssuerCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(subCrlIssuerCertStr, X509Certificate.class));\n@@ -201,0 +184,1 @@\n+        String cert;\n@@ -202,1 +186,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            cert = subCaCertStr;\n@@ -204,1 +188,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            cert = subCrlIssuerCertStr;\n@@ -206,1 +190,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            cert = targetCertStr;\n@@ -209,1 +193,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(cert, X509Certificate.class);\n@@ -225,1 +209,0 @@\n-        X509CertSelector selector = new X509CertSelector();\n@@ -228,2 +211,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = null;\n+        String newCert;\n@@ -231,1 +213,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            newCert = subCaCertStr;\n@@ -233,1 +215,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            newCert = subCrlIssuerCertStr;\n@@ -235,1 +217,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            newCert = targetCertStr;\n@@ -237,1 +219,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(newCert, X509Certificate.class);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/selfIssued\/DisableRevocation.java","additions":24,"deletions":42,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -44,0 +45,2 @@\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -69,0 +72,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -182,2 +187,0 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -185,3 +188,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        \/\/ generate certificate from cert string\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -191,1 +193,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -197,36 +199,12 @@\n-        Collection entries = new HashSet();\n-\n-        \/\/ generate certificate from certificate string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(topCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n-        entries.add(cert);\n-\n-        \/\/ generate CRL from CRL string\n-        is = new ByteArrayInputStream(topCrlStr.getBytes());\n-        Collection mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n-\n-        is = new ByteArrayInputStream(subCrlStr.getBytes());\n-        mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n-\n+        Collection<DEREncodable> entries = new HashSet<>();\n+\n+        \/\/ Decode and add certificates\n+        entries.add(PEM_DECODER.decode(targetCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(subCaCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(topCrlIssuerCertStr, X509Certificate.class));\n+        entries.add(PEM_DECODER.decode(subCrlIssuerCertStr, X509Certificate.class));\n+\n+        \/\/ Decode and add CRLs\n+        entries.add(PEM_DECODER.decode(topCrlStr, X509CRL.class));\n+        entries.add(PEM_DECODER.decode(subCrlStr, X509CRL.class));\n@@ -242,2 +220,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = null;\n+        String cert;\n@@ -245,1 +222,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            cert = subCaCertStr;\n@@ -247,1 +224,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            cert = subCrlIssuerCertStr;\n@@ -249,1 +226,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            cert = targetCertStr;\n@@ -252,1 +229,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(cert, X509Certificate.class);\n@@ -266,3 +243,1 @@\n-    private static boolean match(String name, Certificate cert)\n-                throws Exception {\n-        X509CertSelector selector = new X509CertSelector();\n+    private static boolean match(String name, Certificate cert) {\n@@ -271,2 +246,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = null;\n+       String newCert;\n@@ -274,1 +248,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            newCert = subCaCertStr;\n@@ -276,1 +250,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            newCert = subCrlIssuerCertStr;\n@@ -278,1 +252,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            newCert = targetCertStr;\n@@ -280,1 +254,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(newCert, X509Certificate.class);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/selfIssued\/KeyUsageMatters.java","additions":32,"deletions":58,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -139,0 +140,2 @@\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -144,0 +147,1 @@\n+import java.util.Collections;\n@@ -196,0 +200,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -197,1 +203,1 @@\n-            throws CertificateException {\n+            throws CertificateException, IOException {\n@@ -203,1 +209,0 @@\n-        Certificate targetCert = cf.generateCertificate(is);\n@@ -206,1 +211,2 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {targetCert});\n+        List<Certificate> list = Collections.singletonList(PEM_DECODER.decode\n+                (is, X509Certificate.class));\n@@ -211,2 +217,1 @@\n-    private static Set<TrustAnchor> generateTrustAnchors()\n-            throws CertificateException {\n+    private static Set<TrustAnchor> generateTrustAnchors() {\n@@ -214,5 +219,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n+        X509Certificate trustedCert = PEM_DECODER.decode(trusedCertStr, X509Certificate.class);\n@@ -221,1 +222,1 @@\n-        TrustAnchor anchor = new TrustAnchor((X509Certificate)trusedCert, null);\n+        TrustAnchor anchor = new TrustAnchor(trustedCert, null);\n@@ -234,1 +235,4 @@\n-        Collection<? extends CRL> crls = cf.generateCRLs(is);\n+        Collection<DEREncodable> crls = new HashSet<>();\n+\n+        crls.add(PEM_DECODER.decode(crlStr, X509CRL.class));\n+\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/OCSP\/FailoverToCRL.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @enablePreview\n@@ -41,0 +42,2 @@\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -110,0 +113,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -115,4 +120,1 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n+        Certificate targetCert = PEM_DECODER.decode(targetCertStr, X509Certificate.class);\n@@ -120,2 +122,1 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -124,2 +125,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, selfSignedCert);\n@@ -133,5 +133,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -141,1 +137,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -147,5 +143,0 @@\n-        \/\/ generate CRL from CRL string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(crlStr.getBytes());\n@@ -154,8 +145,3 @@\n-        Collection crls = cf.generateCRLs(is);\n-\n-        is = new ByteArrayInputStream(crlIssuerCertStr.getBytes());\n-        Collection certs = cf.generateCertificates(is);\n-\n-        Collection entries = new HashSet();\n-        entries.addAll(crls);\n-        entries.addAll(certs);\n+        Collection<DEREncodable> entries = new HashSet<>();\n+        entries.add(PEM_DECODER.decode(crlStr, X509CRL.class));\n+        entries.add(PEM_DECODER.decode(crlIssuerCertStr, X509Certificate.class));\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/indirectCRL\/CircularCRLOneLevel.java","additions":14,"deletions":28,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @enablePreview\n@@ -41,0 +42,2 @@\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -111,0 +114,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -116,4 +121,1 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n+        Certificate targetCert = PEM_DECODER.decode(targetCertStr, X509Certificate.class);\n@@ -121,2 +123,1 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -125,2 +126,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, selfSignedCert);\n@@ -134,5 +134,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -142,1 +138,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -149,14 +145,3 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(crlStr.getBytes());\n-\n-        \/\/ generate a cert store\n-        Collection crls = cf.generateCRLs(is);\n-\n-        is = new ByteArrayInputStream(crlIssuerCertStr.getBytes());\n-        Collection certs = cf.generateCertificates(is);\n-\n-        Collection entries = new HashSet();\n-        entries.addAll(crls);\n-        entries.addAll(certs);\n+        Collection<DEREncodable> entries = new HashSet<>();\n+        entries.add(PEM_DECODER.decode(crlStr, X509CRL.class));\n+        entries.add(PEM_DECODER.decode(crlIssuerCertStr, X509Certificate.class));\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/indirectCRL\/CircularCRLOneLevelRevoked.java","additions":14,"deletions":29,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -34,0 +35,1 @@\n+import java.security.PEMDecoder;\n@@ -93,0 +95,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -98,4 +102,1 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n+        Certificate targetCert = PEM_DECODER.decode(targetCertStr, X509Certificate.class);\n@@ -103,2 +104,1 @@\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        Certificate subCaCert = cf.generateCertificate(is);\n+        Certificate subCaCert = PEM_DECODER.decode(subCaCertStr, X509Certificate.class);\n@@ -106,2 +106,1 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -110,2 +109,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, subCaCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, subCaCert, selfSignedCert);\n@@ -119,5 +117,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -127,1 +121,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/nameConstraints\/NameConstraintsWithRID.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -34,0 +35,1 @@\n+import java.security.PEMDecoder;\n@@ -93,0 +95,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of()\n+            ;\n@@ -94,1 +98,1 @@\n-            throws CertificateException {\n+            throws CertificateException, IOException {\n@@ -101,1 +105,1 @@\n-        Certificate targetCert = cf.generateCertificate(is);\n+        Certificate targetCert = PEM_DECODER.decode(is, X509Certificate.class);\n@@ -104,1 +108,1 @@\n-        Certificate subCaCert = cf.generateCertificate(is);\n+        Certificate subCaCert = PEM_DECODER.decode(is, X509Certificate.class);\n@@ -107,1 +111,1 @@\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate selfSignedCert = PEM_DECODER.decode(is, X509Certificate.class);\n@@ -110,2 +114,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, subCaCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, subCaCert, selfSignedCert);\n@@ -117,1 +120,1 @@\n-            throws CertificateException {\n+            throws IOException {\n@@ -119,2 +122,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n@@ -123,1 +124,1 @@\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(is, X509Certificate.class);;\n@@ -127,1 +128,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/nameConstraints\/NameConstraintsWithUnexpectedRID.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -34,0 +35,1 @@\n+import java.security.PEMDecoder;\n@@ -93,0 +95,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -98,4 +102,1 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n+        Certificate targetCert = PEM_DECODER.decode(targetCertStr, X509Certificate.class);\n@@ -103,2 +104,1 @@\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        Certificate subCaCert = cf.generateCertificate(is);\n+        Certificate subCaCert = PEM_DECODER.decode(subCaCertStr, X509Certificate.class);\n@@ -106,2 +106,1 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -110,2 +109,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, subCaCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, subCaCert, selfSignedCert);\n@@ -119,5 +117,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        X509Certificate selfSignedCert = PEM_DECODER.decode(selfSignedCertStr, X509Certificate.class);\n@@ -127,1 +121,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/nameConstraints\/NameConstraintsWithoutRID.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -33,0 +34,2 @@\n+import java.io.IOException;\n+import java.security.PEMDecoder;\n@@ -235,3 +238,4 @@\n-        X509Certificate rootCert = generateCertificate(cf, ROOT_CA_CERT);\n-        X509Certificate eeCert = generateCertificate(cf, EE_CERT);\n-        X509Certificate intCaCert = generateCertificate(cf, INT_CA_CERT);\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n+        X509Certificate rootCert = pemDecoder.decode(ROOT_CA_CERT, X509Certificate.class);\n+        X509Certificate eeCert = pemDecoder.decode(EE_CERT, X509Certificate.class);\n+        X509Certificate intCaCert = pemDecoder.decode(INT_CA_CERT, X509Certificate.class);\n@@ -286,6 +290,0 @@\n-\n-    private static X509Certificate generateCertificate(CertificateFactory cf,\n-            String encoded) throws CertificateException {\n-        ByteArrayInputStream is = new ByteArrayInputStream(encoded.getBytes());\n-        return (X509Certificate)cf.generateCertificate(is);\n-    }\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/trustAnchor\/ValWithAnchorByName.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,4 +28,1 @@\n-import java.security.KeyFactory;\n-import java.security.KeyStore;\n-import java.security.PrivateKey;\n-import java.security.Security;\n+import java.security.*;\n@@ -34,0 +31,1 @@\n+import java.security.cert.X509Certificate;\n@@ -52,0 +50,1 @@\n+ * @enablePreview\n@@ -318,2 +317,1 @@\n-        \/\/ Generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -326,1 +324,1 @@\n-        char passphrase[] = \"passphrase\".toCharArray();\n+        char[] passphrase = \"passphrase\".toCharArray();\n@@ -330,2 +328,1 @@\n-                cf.generateCertificate(new ByteArrayInputStream(\n-                        trustedCertStr.getBytes())));\n+                pemDecoder.decode(trustedCertStr, X509Certificate.class));\n@@ -337,5 +334,1 @@\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(privateKey));\n-            KeyFactory kf = KeyFactory.getInstance(keyType);\n-            PrivateKey priKey = kf.generatePrivate(priKeySpec);\n-\n+            PrivateKey priKey = pemDecoder.decode(privateKey, PrivateKey.class);\n@@ -343,3 +336,2 @@\n-            Certificate keyCert = cf.generateCertificate(\n-                    new ByteArrayInputStream(keyCertStr.getBytes()));\n-            Certificate[] chain = new Certificate[]{keyCert};\n+            Certificate keyCert =pemDecoder.decode(keyCertStr, X509Certificate.class);\n+                    Certificate[] chain = new Certificate[]{keyCert};\n@@ -425,1 +417,2 @@\n-                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgVHQp1EG3PgASz7Nu\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgVHQp1EG3PgASz7Nu\\n\"\n@@ -427,1 +420,2 @@\n-                + \"jE3qvm5PVrGRgTmcyXBLcq9fPOyQEbq59Lieyd2C1DZTLh2klmfIRMRr\"\n+                + \"jE3qvm5PVrGRgTmcyXBLcq9fPOyQEbq59Lieyd2C1DZTLh2klmfIRMRr\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -452,1 +446,2 @@\n-                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgyJJNI8eqYVKcCshG\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgyJJNI8eqYVKcCshG\\n\"\n@@ -454,1 +449,2 @@\n-                + \"ktaIGEdCrA8BKk0A30LW8SY5Be29ScYu8d+IjQ3X\/fpblrVh\/64pOgQz\"\n+                + \"ktaIGEdCrA8BKk0A30LW8SY5Be29ScYu8d+IjQ3X\/fpblrVh\/64pOgQz\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -490,1 +486,2 @@\n-                \"MIIEuwIBADALBgkqhkiG9w0BAQoEggSnMIIEowIBAAKCAQEApfK+EK4NuwWFDv9V\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEuwIBADALBgkqhkiG9w0BAQoEggSnMIIEowIBAAKCAQEApfK+EK4NuwWFDv9V\\n\"\n@@ -515,1 +512,2 @@\n-                + \"Q2hO5ZTW6UD9CVA85whf\"\n+                + \"Q2hO5ZTW6UD9CVA85whf\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -582,1 +580,2 @@\n-                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDD8nVjgSWSwVmP\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDD8nVjgSWSwVmP\\n\"\n@@ -607,1 +606,2 @@\n-                + \"xkWyr\/6XyeGP\/vX8WvfF2eM=\"\n+                + \"xkWyr\/6XyeGP\/vX8WvfF2eM=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -641,1 +641,2 @@\n-                \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQClt40e4e\/lW5S1\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQClt40e4e\/lW5S1\\n\"\n@@ -666,1 +667,2 @@\n-                + \"PsRyQCB\/QarxsDNAuioguQ==\"\n+                + \"PsRyQCB\/QarxsDNAuioguQ==\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -700,1 +702,2 @@\n-                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDaMM8YyiBz12rb\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDaMM8YyiBz12rb\\n\"\n@@ -725,1 +728,2 @@\n-                + \"Pg5M5wrRqs71s2EiIJd0HrU=\"\n+                + \"Pg5M5wrRqs71s2EiIJd0HrU=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -759,1 +763,2 @@\n-                \"MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQC8iCdCvecakzP9\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQC8iCdCvecakzP9\\n\"\n@@ -784,1 +789,2 @@\n-                + \"mzO1FvNUBCMZb\/5PQdiFw3pMEyQ=\"\n+                + \"mzO1FvNUBCMZb\/5PQdiFw3pMEyQ=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -818,1 +824,2 @@\n-                \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDaF4fhwBKMatza\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDaF4fhwBKMatza\\n\"\n@@ -843,1 +850,2 @@\n-                + \"l0uEakWMhPrvr\/N1FT1KXo6S\"\n+                + \"l0uEakWMhPrvr\/N1FT1KXo6S\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -870,1 +878,2 @@\n-                \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDCpxyn85BJ+JFfT5U7U\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDCpxyn85BJ+JFfT5U7U\\n\"\n@@ -873,1 +882,2 @@\n-                + \"haGKuapP5dtU9NYglvbjkt\/0YWJH93pTJRupe42D0amdRGzLlmHHgN8=\"\n+                + \"haGKuapP5dtU9NYglvbjkt\/0YWJH93pTJRupe42D0amdRGzLlmHHgN8=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -901,1 +911,2 @@\n-                \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIAz7qc9msPhSoh0iiT\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIAz7qc9msPhSoh0iiT\\n\"\n@@ -906,1 +917,2 @@\n-                + \"Vg==\"\n+                + \"Vg==\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -973,1 +985,2 @@\n-                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCe7chGqR+iYpXW\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCe7chGqR+iYpXW\\n\"\n@@ -998,1 +1011,2 @@\n-                + \"T9fE4yY\/E4FyzS7yMeoXIyo=\"\n+                + \"T9fE4yY\/E4FyzS7yMeoXIyo=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -1065,1 +1079,2 @@\n-                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDCyeGmgpaHoXnR\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDCyeGmgpaHoXnR\\n\"\n@@ -1090,1 +1105,2 @@\n-                + \"GA3T726uW8XrrTssMkhzixU=\"\n+                + \"GA3T726uW8XrrTssMkhzixU=\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -1126,1 +1142,2 @@\n-                \"MIIEvAIBADALBgkqhkiG9w0BAQoEggSoMIIEpAIBAAKCAQEAz+1\/SVKdaz83Mcs6\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvAIBADALBgkqhkiG9w0BAQoEggSoMIIEpAIBAAKCAQEAz+1\/SVKdaz83Mcs6\\n\"\n@@ -1151,1 +1168,2 @@\n-                + \"LsJldTLzMQSVP\/05BAt6DQ==\"\n+                + \"LsJldTLzMQSVP\/05BAt6DQ==\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n@@ -1187,1 +1205,2 @@\n-                \"MIIEvAIBADALBgkqhkiG9w0BAQoEggSoMIIEpAIBAAKCAQEAxv\/aW7ezE+gXt2lI\\n\"\n+                \"-----BEGIN PRIVATE KEY-----\\n\"\n+                + \"MIIEvAIBADALBgkqhkiG9w0BAQoEggSoMIIEpAIBAAKCAQEAxv\/aW7ezE+gXt2lI\\n\"\n@@ -1212,1 +1231,2 @@\n-                + \"KtqEurWf+mUeJVzLj1x1BA==\"\n+                + \"KtqEurWf+mUeJVzLj1x1BA==\\n\"\n+                + \"-----END PRIVATE KEY-----\"\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSCommon\/TLSTest.java","additions":65,"deletions":45,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @enablePreview\n@@ -51,2 +52,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -59,0 +60,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -324,2 +327,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n@@ -328,4 +330,3 @@\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trustAnchor_SHA1withRSA_1024.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n-        TrustAnchor anchor = new TrustAnchor((X509Certificate)cert, null);\n+        \/\/ generate certificate from certificate string\n+        X509Certificate cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_1024, X509Certificate.class);\n+        TrustAnchor anchor = new TrustAnchor(cert, null);\n@@ -334,3 +335,2 @@\n-        is = new ByteArrayInputStream(trustAnchor_SHA1withRSA_512.getBytes());\n-        cert = cf.generateCertificate(is);\n-        anchor = new TrustAnchor((X509Certificate)cert, null);\n+        cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_512, X509Certificate.class);\n+        anchor = new TrustAnchor(cert, null);\n@@ -343,4 +343,1 @@\n-        Collection entries = new HashSet();\n-\n-        \/\/ generate certificate from certificate string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -350,3 +347,1 @@\n-            ByteArrayInputStream is =\n-                        new ByteArrayInputStream(certStr.getBytes());\n-            Certificate cert = cf.generateCertificate(is);\n+            DEREncodable cert = PEM_DECODER.decode(certStr, X509Certificate.class);\n@@ -370,3 +365,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = new ByteArrayInputStream(certStr.getBytes());\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(certStr, X509Certificate.class);\n@@ -389,3 +382,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = new ByteArrayInputStream(certStr.getBytes());\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(certStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/CPBuilder.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @enablePreview\n@@ -56,2 +57,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -59,1 +60,0 @@\n-import java.security.Security;\n@@ -64,0 +64,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -329,2 +331,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n@@ -333,3 +334,2 @@\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trustAnchor_SHA1withRSA_1024.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n+        \/\/ generate certificate from certificate string\n+        X509Certificate cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_1024, X509Certificate.class);\n@@ -339,3 +339,2 @@\n-        is = new ByteArrayInputStream(trustAnchor_SHA1withRSA_512.getBytes());\n-        cert = cf.generateCertificate(is);\n-        anchor = new TrustAnchor((X509Certificate)cert, null);\n+        cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_512, X509Certificate.class);\n+        anchor = new TrustAnchor(cert, null);\n@@ -348,1 +347,1 @@\n-        Collection entries = new HashSet();\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -355,3 +354,1 @@\n-            ByteArrayInputStream is =\n-                        new ByteArrayInputStream(certStr.getBytes());\n-            Certificate cert = cf.generateCertificate(is);\n+            DEREncodable cert = PEM_DECODER.decode(certStr, X509Certificate.class);\n@@ -375,3 +372,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = new ByteArrayInputStream(certStr.getBytes());\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(certStr, X509Certificate.class);\n@@ -394,3 +389,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = new ByteArrayInputStream(certStr.getBytes());\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = PEM_DECODER.decode(certStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/CPBuilderWithMD5.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @enablePreview\n@@ -40,0 +41,1 @@\n+import java.security.PEMDecoder;\n@@ -47,0 +49,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -281,9 +285,2 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(castr.getBytes());\n-        Certificate cacert = cf.generateCertificate(is);\n-\n-        is = new ByteArrayInputStream(eestr.getBytes());\n-        Certificate eecert = cf.generateCertificate(is);\n+        Certificate cacert = PEM_DECODER.decode(castr, X509Certificate.class);\n+        Certificate eecert = PEM_DECODER.decode(eestr, X509Certificate.class);\n@@ -295,0 +292,1 @@\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -300,2 +298,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n@@ -304,4 +301,2 @@\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trustAnchor_SHA1withRSA_1024.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n-        TrustAnchor anchor = new TrustAnchor((X509Certificate)cert, null);\n+        X509Certificate cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_1024, X509Certificate.class);\n+        TrustAnchor anchor = new TrustAnchor(cert, null);\n@@ -310,3 +305,2 @@\n-        is = new ByteArrayInputStream(trustAnchor_SHA1withRSA_512.getBytes());\n-        cert = cf.generateCertificate(is);\n-        anchor = new TrustAnchor((X509Certificate)cert, null);\n+        cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_512, X509Certificate.class);\n+        anchor = new TrustAnchor(cert, null);\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/CPValidatorEndEntity.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @enablePreview\n@@ -38,2 +39,1 @@\n-import java.io.*;\n-import java.net.SocketException;\n+import java.security.PEMDecoder;\n@@ -47,0 +47,2 @@\n+    private static final PEMDecoder PEM_DECODER = PEMDecoder.of();\n+\n@@ -186,4 +188,1 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(certStr.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n+        Certificate cert = PEM_DECODER.decode(certStr, X509Certificate.class);\n@@ -199,3 +198,0 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        HashSet<TrustAnchor> anchors = new HashSet<TrustAnchor>();\n@@ -203,4 +199,4 @@\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trustAnchor_SHA1withRSA_1024.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n-        TrustAnchor anchor = new TrustAnchor((X509Certificate)cert, null);\n+        HashSet<TrustAnchor> anchors = new HashSet<TrustAnchor>();\n+        \/\/ generate certificate from cert string\n+        X509Certificate cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_1024, X509Certificate.class);\n+        TrustAnchor anchor = new TrustAnchor(cert, null);\n@@ -209,3 +205,2 @@\n-        is = new ByteArrayInputStream(trustAnchor_SHA1withRSA_512.getBytes());\n-        cert = cf.generateCertificate(is);\n-        anchor = new TrustAnchor((X509Certificate)cert, null);\n+        cert = PEM_DECODER.decode(trustAnchor_SHA1withRSA_512, X509Certificate.class);\n+        anchor = new TrustAnchor(cert, null);\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/CPValidatorIntermediate.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -41,0 +42,1 @@\n+import java.security.PEMDecoder;\n@@ -47,0 +49,1 @@\n+import java.security.cert.X509Certificate;\n@@ -907,1 +910,1 @@\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -1002,0 +1005,1 @@\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -1003,6 +1007,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+        Certificate trusedCert = pemDecoder.decode(trusedCertStr, X509Certificate.class);\n@@ -1027,3 +1026,1 @@\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n+            Certificate keyCert = pemDecoder.decode(keyCertStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/PKIXExtendedTM.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -37,0 +38,2 @@\n+import java.security.PEMDecoder;\n+import java.security.cert.X509Certificate;\n@@ -1000,2 +1003,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -1003,4 +1005,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+        \/\/ generate certificate from cert string\n+        Certificate trusedCert = pemDecoder.decode(trusedCertStr, X509Certificate.class);\n@@ -1025,3 +1025,1 @@\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n+            Certificate keyCert = pemDecoder.decode(keyCertStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/SunX509ExtendedTM.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"}]}