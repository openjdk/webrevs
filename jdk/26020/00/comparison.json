{"files":[{"patch":"@@ -38,0 +38,1 @@\n+bool  OSContainer::_has_memory_limit = false;\n@@ -79,0 +80,1 @@\n+  _has_memory_limit = cgroup_subsystem->memory_limit_in_bytes() > 0;\n@@ -86,1 +88,1 @@\n-    any_mem_cpu_limit_present = cgroup_subsystem->memory_limit_in_bytes() > 0 ||\n+    any_mem_cpu_limit_present = _has_memory_limit ||\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  static bool   _has_memory_limit;\n@@ -51,0 +52,1 @@\n+  static inline bool has_memory_limit();\n@@ -83,0 +85,4 @@\n+inline bool OSContainer::has_memory_limit() {\n+  return _has_memory_limit;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2511,0 +2511,5 @@\n+WB_ENTRY(jboolean, WB_HasMemoryLimit(JNIEnv* env, jobject o))\n+  LINUX_ONLY(return OSContainer::has_memory_limit();)\n+  return false;\n+WB_END\n+\n@@ -2984,0 +2989,1 @@\n+  {CC\"hasMemoryLimit\",            CC\"()Z\",            (void*)&WB_HasMemoryLimit },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/*\n+ * Checks OSContainer::has_memory_limit() and related APIs when run with\n+ * a container limit.\n+ *\/\n+public class ContainerMemory {\n+\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"Illegal number of arguments. Expected at least one argument.\");\n+        }\n+        switch (args[0]) {\n+            case \"hasMemoryLimit\": {\n+                testHasMemoryLimit(args[0], args[1]);\n+                break;\n+            }\n+            default: {\n+                throw new RuntimeException(\"Unknown test argument: \" + args[0]);\n+            }\n+        }\n+    }\n+\n+    private static void testHasMemoryLimit(String testCase, String strExpected) {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        boolean expected = Boolean.parseBoolean(strExpected);\n+        boolean actual = wb.hasMemoryLimit();\n+        if (expected != actual) {\n+            throw new RuntimeException(\"hasMemoryLimit test failed. Expected '\" + expected + \"' but got '\" + actual + \"'\");\n+        }\n+        \/\/ PASS\n+        System.out.printf(\"%s=%s\", testCase, strExpected);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/ContainerMemory.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -46,0 +46,3 @@\n+        if (wb.hasMemoryLimit()) {\n+            throw new RuntimeException(\"Test failed! Expected no memory limit for plain Linux.\");\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/TestContainerized.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @build CheckContainerized jdk.test.whitebox.WhiteBox PrintContainerInfo\n+ * @build jdk.test.whitebox.WhiteBox PrintContainerInfo\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestContainerInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8360651\n+ * @key cgroups\n+ * @summary Test JVM's correct detection of memory limit in a container\n+ * @requires container.support\n+ * @library \/test\/lib ..\/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.platform\n+ *          java.management\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build ContainerMemory jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestContainerMemory\n+ *\/\n+import java.util.function.Consumer;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import static jdk.test.lib.Asserts.assertNotNull;\n+\n+public class TestContainerMemory {\n+    private static final String imageName = Common.imageName(\"container-memory\");\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        Common.prepareWhiteBox();\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testWithMemoryLimit();\n+            testWithoutMemoryLimit();\n+        } finally {\n+            if (!DockerTestUtils.RETAIN_IMAGE_AFTER_TEST) {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        }\n+    }\n+\n+    private static void testWithMemoryLimit() throws Exception {\n+        String memLimit = \"100m\"; \/\/ Any limit will do\n+        Common.logNewTestCase(\"testing container memory with limit: \" + memLimit);\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"ContainerMemory\");\n+        opts.addClassOptions(\"hasMemoryLimit\", \"true\");\n+        Common.addWhiteBoxOpts(opts);\n+        Common.addTestClassPath(opts);\n+        opts.addDockerOpts(\"--memory\", memLimit);\n+        \/\/ We are interested in the default option when run in a container, so\n+        \/\/ don't append test java options\n+        opts.appendTestJavaOptions = false;\n+        Common.run(opts)\n+            .shouldContain(\"hasMemoryLimit=true\");\n+    }\n+\n+    private static void testWithoutMemoryLimit() throws Exception {\n+        Common.logNewTestCase(\"testing container without limit\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"ContainerMemory\");\n+        opts.addClassOptions(\"hasMemoryLimit\", \"false\");\n+        Common.addWhiteBoxOpts(opts);\n+        Common.addTestClassPath(opts);\n+        \/\/ We are interested in the default option when run in a container, so\n+        \/\/ don't append test java options\n+        opts.appendTestJavaOptions = false;\n+        Common.run(opts)\n+            .shouldContain(\"hasMemoryLimit=false\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestContainerMemory.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.containers.systemd.SystemdRunOptions;\n+import jdk.test.lib.containers.systemd.SystemdTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.whitebox.WhiteBox;\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 8360651\n+ * @summary Verify OSContainer::has_memory_limit() in a systemd slice\n+ * @requires systemd.support\n+ * @library \/test\/lib ..\/\n+ * @modules java.base\/jdk.internal.platform\n+ * @build ContainerMemory jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI MemoryLimitTest\n+ *\/\n+public class MemoryLimitTest {\n+\n+    private static final int MB = 1024 * 1024;\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n+    private static final String TEST_SLICE_NAME = MemoryLimitTest.class.getSimpleName() + \"HS\";\n+\n+    public static void main(String[] args) throws Exception {\n+       testHasMemoryLimit();\n+    }\n+\n+    private static void testHasMemoryLimit() throws Exception {\n+        SystemdRunOptions opts = SystemdTestUtils.newOpts(\"ContainerMemory\");\n+        opts.addClassOptions(\"hasMemoryLimit\", \"true\");\n+        opts.memoryLimit(\"100M\");\n+        opts.sliceName(TEST_SLICE_NAME);\n+        SystemdTestUtils.addWhiteBoxOpts(opts);\n+\n+        OutputAnalyzer out = SystemdTestUtils.buildAndRunSystemdJava(opts);\n+        out.shouldHaveExitValue(0);\n+        try {\n+            out.shouldContain(\"hasMemoryLimit=true\");\n+        } catch (RuntimeException e) {\n+            \/\/ memory delegation needs to be enabled when run as user on cg v2\n+            if (SystemdTestUtils.RUN_AS_USER) {\n+                String hint = \"When run as user on cg v2 memory delegation needs to be configured!\";\n+                throw new SkippedException(hint);\n+            }\n+            throw e;\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/systemd\/MemoryLimitTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -34,0 +34,4 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n@@ -104,0 +108,13 @@\n+    public static DockerRunOptions addTestClassPath(DockerRunOptions opts) {\n+        int num = 0;\n+        List<String> classPath = new ArrayList<>();\n+        for (String item: Utils.TEST_CLASS_PATH.split(Pattern.quote(System.getProperty(\"path.separator\")))) {\n+           String name = String.format(\"\/test_class_path_%d\", num);\n+           opts.addDockerOpts(\"--volume\", String.format(\"%s:%s\", item, name));\n+           classPath.add(name);\n+           num++;\n+        }\n+        opts.addJavaOpts(\"-cp\", classPath.stream().collect(Collectors.joining(\":\")));\n+        return opts;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/Common.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -75,1 +75,7 @@\n-                                     Utils.TEST_CLASSES);\n+                                     Utils.TEST_CLASS_PATH);\n+    }\n+\n+    public static SystemdRunOptions addWhiteBoxOpts(SystemdRunOptions opts) {\n+        opts.addJavaOpts(\"-Xbootclasspath\/a:whitebox.jar\",\n+                         \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+WhiteBoxAPI\");\n+        return opts;\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/systemd\/SystemdTestUtils.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -813,0 +813,1 @@\n+  public native boolean hasMemoryLimit();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}