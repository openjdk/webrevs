{"files":[{"patch":"@@ -37,0 +37,3 @@\n+import com.sun.source.doctree.LiteralTree;\n+import com.sun.source.doctree.StartElementTree;\n+import com.sun.source.doctree.TextTree;\n@@ -39,0 +42,1 @@\n+import com.sun.source.util.SimpleDocTreeVisitor;\n@@ -129,0 +133,3 @@\n+    \/** Used for whitespace normalization in pre\/code\/literal tags. *\/\n+    private boolean inPre = false;\n+\n@@ -284,0 +291,1 @@\n+        ListBuffer<DCTree> mainTrees = null;\n@@ -352,0 +360,12 @@\n+                            \/\/ Create new list for <pre> content which is merged into main list when element is closed.\n+                            if (inPre) {\n+                                if (mainTrees == null) {\n+                                    mainTrees = trees;\n+                                    trees = new ListBuffer<>();\n+                                }\n+                            } else if (mainTrees != null) {\n+                                mainTrees.addAll(normalizePreContent(trees));\n+                                trees = mainTrees;\n+                                mainTrees = null;\n+                            }\n+\n@@ -479,0 +499,7 @@\n+        \/\/ Happens with unclosed <pre> element. Add content without normalizing.\n+        if (mainTrees != null) {\n+            mainTrees.addAll(trees);\n+            trees = mainTrees;\n+            mainTrees = null;\n+        }\n+\n@@ -1057,0 +1084,3 @@\n+                    if (\"pre\".equalsIgnoreCase(name.toString())) {\n+                        inPre = true;\n+                    }\n@@ -1067,0 +1097,3 @@\n+                    if (\"pre\".equalsIgnoreCase(name.toString())) {\n+                        inPre = false;\n+                    }\n@@ -1189,0 +1222,96 @@\n+    \/*\n+     * Removes a newline character following a <code>, {@code or {@literal tag at the\n+     * beginning of <pre> element content, as well as any space\/tabs between the pre\n+     * and code tags. The operation is only performed on traditional doc comments.\n+     * If conditions are not met the list is returned unchanged.\n+     *\/\n+    ListBuffer<DCTree> normalizePreContent(ListBuffer<DCTree> trees) {\n+        \/\/ Do nothing if comment is not eligible for whitespace normalization.\n+        if (textKind == DocTree.Kind.MARKDOWN || isHtmlFile) {\n+            return trees;\n+        }\n+\n+        enum State {\n+            BEFORE_CODE, \/\/ at beginning of <pre> content, or after leading horizontal whitespace\n+            AFTER_CODE,  \/\/ after <code> start tag (not used for {@code} tag)\n+            SUCCEEDED,   \/\/ normalization succeeded, add remaining trees\n+            FAILED;      \/\/ normalization failed, return original trees\n+        }\n+\n+        class Context {\n+            State state = State.BEFORE_CODE;\n+\n+            \/\/ Called when an unexpected tree is encountered. Set state to\n+            \/\/ FAILED unless normalization already terminated successfully.\n+            void unexpectedTree() {\n+                if (state != State.SUCCEEDED) {\n+                    state = State.FAILED;\n+                }\n+            }\n+        }\n+\n+        var visitor = new SimpleDocTreeVisitor<DCTree, Context>() {\n+            @Override\n+            public DCTree visitText(TextTree text, Context cx) {\n+                if (cx.state == State.BEFORE_CODE && text.getBody().matches(\"[ \\t]+\")) {\n+                    \/\/ <pre>  ...\n+                    return null;\n+                } else if (cx.state == State.AFTER_CODE && text.getBody().startsWith(\"\\n\")) {\n+                    \/\/ <pre><code>\\n...\n+                    cx.state = State.SUCCEEDED;\n+                    return m.at(((DCText) text).pos + 1).newTextTree(text.getBody().substring(1));\n+                }\n+                cx.unexpectedTree();\n+                return (DCTree) text;\n+            }\n+\n+            @Override\n+            public DCTree visitLiteral(LiteralTree literal, Context cx) {\n+                if (cx.state == State.BEFORE_CODE && literal.getBody().getBody().startsWith(\"\\n\")) {\n+                    \/\/ <pre>{@code\\n...\n+                    cx.state = State.SUCCEEDED;\n+                    DCText oldBody = (DCText) literal.getBody();\n+                    DCText newBody = m.at(oldBody.pos + 1).newTextTree(oldBody.getBody().substring(1));\n+                    m.at(((DCTree) literal).pos);\n+                    return literal.getKind() == DocTree.Kind.CODE\n+                            ? m.newCodeTree(newBody)\n+                            : m.newLiteralTree(newBody);\n+                }\n+                cx.unexpectedTree();\n+                return (DCTree) literal;\n+            }\n+\n+            @Override\n+            public DCTree visitStartElement(StartElementTree node, Context cx) {\n+                if (cx.state == State.BEFORE_CODE && node.getName().toString().equalsIgnoreCase(\"code\")) {\n+                    cx.state = State.AFTER_CODE;\n+                } else {\n+                    cx.unexpectedTree();\n+                }\n+                return (DCTree) node;\n+            }\n+\n+            @Override\n+            protected DCTree defaultAction(DocTree node, Context cx) {\n+                cx.unexpectedTree();\n+                return (DCTree) node;\n+            }\n+        };\n+\n+        Context cx = new Context();\n+        var normalized = new ListBuffer<DCTree>();\n+\n+        for (var tree : trees) {\n+            var visited = visitor.visit(tree, cx);\n+            \/\/ null return value means the tree should be dropped\n+            if (visited != null) {\n+                normalized.add(visited);\n+            }\n+            if (cx.state == State.FAILED) {\n+                return trees;\n+            }\n+        }\n+\n+        return cx.state == State.SUCCEEDED ? normalized : trees;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    padding: 8px;\n+    padding: 10px;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/stylesheet.css","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      8002387 8014636 8078320 8175200 8186332 8352249\n+ * @bug      8002387 8014636 8078320 8175200 8186332 8352249 8352389\n@@ -73,2 +73,1 @@\n-                    Example:  <pre><code>\n-                      line 0 @Override\n+                    Example:  <pre><code>  line 0 @Override\n@@ -83,2 +82,1 @@\n-                    Example:  <pre>\n-                      line 0 @Override\n+                    Example:  <pre>  line 0 @Override\n@@ -93,2 +91,1 @@\n-                    Example:  <pre>\n-                      line 0 @Override\n+                    Example:  <pre>  line 0 @Override\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLiteralCodeInPre\/TestLiteralCodeInPre.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8352389\n+ * @summary Remove incidental whitespace in pre\/code content\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build javadoc.tester.* toolbox.ToolBox builder.ClassBuilder\n+ * @run main TestPreCode\n+ *\/\n+\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import builder.AbstractBuilder;\n+import builder.ClassBuilder;\n+import toolbox.ToolBox;\n+\n+import javadoc.tester.JavadocTester;\n+\n+public class TestPreCode extends JavadocTester {\n+\n+    final ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestPreCode();\n+        tester.runTests();\n+    }\n+\n+    TestPreCode() {\n+        tb = new ToolBox();\n+    }\n+\n+    @Test\n+    public void testWhitespace(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        new ClassBuilder(tb, \"pkg.A\")\n+                .setComments(\"\"\"\n+                    Class A.\n+                    <pre> \\t<code>\n+                      first line\n+                      second line\n+                    <\/code><\/pre>\"\"\")\n+                .setModifiers(\"public\", \"class\")\n+                .addMembers(ClassBuilder.MethodBuilder.parse(\"public void m0() {}\")\n+                                .setComments(\"\"\"\n+                                Method m0.\n+                                <pre> {@code\n+                                  first line\n+                                  second line\n+                                }<\/pre>\"\"\"),\n+                        ClassBuilder.MethodBuilder.parse(\"public void m1() {}\")\n+                                .setComments(\"\"\"\n+                                Method m1.\n+                                <pre> <code> first line\n+                                  second line\n+                                <\/code><\/pre>\"\"\"),\n+                        ClassBuilder.MethodBuilder.parse(\"public void m2() {}\")\n+                                .setComments(\"\"\"\n+                                Method m2.\n+                                <pre> {@code\\s\n+                                  first line\n+                                  second line\n+                                }<\/pre>\"\"\"),\n+                        ClassBuilder.MethodBuilder.parse(\"public void m3() {}\")\n+                                .setComments(\"\"\"\n+                                Method m3.\n+                                <pre>  .<code>\n+                                  second line\n+                                <\/code><\/pre>\"\"\"))\n+                .write(srcDir);\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"pkg\");\n+\n+        checkExit(Exit.OK);\n+\n+        checkOrder(\"pkg\/A.html\",\n+                \"\"\"\n+                    Class A.\n+                    <pre><code>  first line\n+                      second line\n+                    <\/code><\/pre>\"\"\",\n+                \"\"\"\n+                    Method m0.\n+                    <pre><code>  first line\n+                      second line\n+                    <\/code><\/pre>\"\"\",\n+                \"\"\"\n+                    Method m1.\n+                    <pre> <code> first line\n+                      second line\n+                    <\/code><\/pre>\"\"\",\n+                \"\"\"\n+                    Method m2.\n+                    <pre><code>  first line\n+                      second line\n+                    <\/code><\/pre>\"\"\",\n+                \"\"\"\n+                    Method m3.\n+                    <pre>  .<code>\n+                      second line\n+                    <\/code><\/pre>\"\"\");\n+    }\n+\n+    @Test\n+    public void testUnclosed(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        new ClassBuilder(tb, \"pkg.A\")\n+                .setComments(\"\"\"\n+                    Class A.\n+                    <pre><code>\n+                      first line\n+                      second line\n+                    <\/code>\"\"\")\n+                .setModifiers(\"public\", \"class\")\n+                .write(srcDir);\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"pkg\");\n+\n+        checkExit(Exit.ERROR);\n+\n+        \/\/ No whitespace normalization for unclosed <pre> element\n+        checkOrder(\"pkg\/A.html\",\n+                \"\"\"\n+                    Class A.\n+                    <pre><code>\n+                      first line\n+                      second line\n+                    <\/code><\/div>\"\"\");\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreCode\/TestPreCode.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7021614 8241780 8273244 8284908 8352249\n+ * @bug 7021614 8241780 8273244 8284908 8352249 8352389\n@@ -131,1 +131,1 @@\n-    Literal[CODE, pos:5, |____@Override|____void_m()_{_}|]\n+    Literal[CODE, pos:5, ____@Override|____void_m()_{_}|]\n","filename":"test\/langtools\/tools\/javac\/doctree\/CodeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1026,1 +1026,3 @@\n-                    .replaceAll(\"(\\\\{@value\\\\s+[^}]+)\\\\s+(})\", \"$1$2\");\n+                    .replaceAll(\"(\\\\{@value\\\\s+[^}]+)\\\\s+(})\", \"$1$2\")\n+                    .replaceAll(\"<pre> *\\\\{@code\\\\n\", \"<pre>{@code \")\n+                    .replaceAll(\"<pre> *<code>\\\\n\", \"<pre><code>\");\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8078320 8273244 8284908 8352249\n+ * @bug 8078320 8273244 8284908 8352249 8352389\n@@ -166,0 +166,44 @@\n+*\/\n+    \/**\n+     * <pre> {@code\n+     * abc  }\n+     * def<\/pre>\n+     *\/\n+    public void in_pre_with_space_at_code_nl() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 3\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    Literal[CODE, pos:6, abc__]\n+    Text[TEXT, pos:19, |def]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:23, pre]\n+  block tags: empty\n+]\n+*\/\n+    \/**\n+     * <pre> <code>\n+     *   abc\n+     * <\/code><\/pre>\n+     *\/\n+    public void in_pre_with_space_code_nl() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 4\n+    StartElement[START_ELEMENT, pos:0\n+      name:pre\n+      attributes: empty\n+    ]\n+    StartElement[START_ELEMENT, pos:6\n+      name:code\n+      attributes: empty\n+    ]\n+    Text[TEXT, pos:13, __abc|]\n+    EndElement[END_ELEMENT, pos:19, code]\n+  body: 1\n+    EndElement[END_ELEMENT, pos:26, pre]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/InPreTest.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"}]}