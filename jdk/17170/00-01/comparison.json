{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2024, SAP SE. All rights reserved.\n@@ -31,7 +31,1 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.nio.file.attribute.GroupPrincipal;\n-import java.nio.file.attribute.PosixFileAttributeView;\n-import java.nio.file.attribute.PosixFileAttributes;\n-import java.nio.file.attribute.PosixFilePermission;\n-import java.nio.file.attribute.PosixFilePermissions;\n-import java.nio.file.attribute.UserPrincipal;\n+import java.nio.file.attribute.*;\n@@ -42,0 +36,1 @@\n+import java.time.Instant;\n@@ -762,1 +757,1 @@\n-        \/\/ Exercise Files.setPosixFilePermissions without changing permissions\n+\n@@ -765,0 +760,10 @@\n+\n+        \/\/ Verify that a read\/synch roundtrip preserves the external file attributes\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, ENV_POSIX)) {\n+            Path source = fs.getPath(\"hello.txt\");\n+            Files.setLastModifiedTime(source, FileTime.from(Instant.now()));\n+        }\n+        \/\/ Updating last modified time should not modify external file attributes\n+        verifyExternalFileAttribute(Files.readAllBytes(zipFile), expectedBits);\n+\n+        \/\/ Verify calling Files.setPosixFilePermissions with current permission set\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}