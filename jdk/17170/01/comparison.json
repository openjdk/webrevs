{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -647,1 +647,6 @@\n-            e.posixPerms = perms == null ? -1 : ZipUtils.permsToFlags(perms);\n+            if (perms == null) {\n+                e.posixPerms = -1;\n+            } else {\n+                e.posixPerms = ZipUtils.permsToFlags(perms) |\n+                        (e.posixPerms & 0xFE00); \/\/ Preserve unrelated bits\n+            }\n@@ -3008,1 +3013,1 @@\n-                posixPerms = CENATX_PERMS(cen, pos) & 0xFFF; \/\/ 12 bits for setuid, setgid, sticky + perms\n+                posixPerms = (CENATX_PERMS(cen, pos) & 0xFFFF); \/\/ 16 bits for file type, setuid, setgid, sticky + perms\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2024, SAP SE. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n@@ -29,7 +31,1 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.nio.file.attribute.GroupPrincipal;\n-import java.nio.file.attribute.PosixFileAttributeView;\n-import java.nio.file.attribute.PosixFileAttributes;\n-import java.nio.file.attribute.PosixFilePermission;\n-import java.nio.file.attribute.PosixFilePermissions;\n-import java.nio.file.attribute.UserPrincipal;\n+import java.nio.file.attribute.*;\n@@ -40,5 +36,2 @@\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n+import java.time.Instant;\n+import java.util.*;\n@@ -727,0 +720,78 @@\n+\n+    \/**\n+     * Verify that Files.setPosixPermissions does not alter the\n+     * 7 first non-permission bits of the 'external file attributes' field.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void preserveRemainingBits() throws IOException {\n+        \/*\n+         * The ZIP test vector used here is created using:\n+         * % touch hello.txt\n+         * % chmod u+s hello.txt     # setuid\n+         * % chmod g+s hello.txt     # setgid\n+         * % chmod +t hello.txt      # sticky\n+         * % zip hello.zip hello.txt\n+         * % cat hello.zip | xxd -ps\n+         *\/\n+        byte[] zip = HexFormat.of().parseHex(\"\"\"\n+                504b03040a0000000000d994945700000000000000000000000009001c00\n+                68656c6c6f2e7478745554090003aa268365aa26836575780b000104f501\n+                00000414000000504b01021e030a0000000000d994945700000000000000\n+                0000000000090018000000000000000000a48f0000000068656c6c6f2e74\n+                78745554050003aa26836575780b000104f50100000414000000504b0506\n+                00000000010001004f000000430000000000\n+                \"\"\".replaceAll(\"\\n\",\"\"));\n+\n+        \/\/ Expected bit values of the 'external file attributes' CEN field in the ZIP above\n+        String expectedBits = \"1000111110100100\";\n+                            \/\/ ^^^^             file type: 1000 (regular file)\n+                            \/\/     ^            setuid: ON\n+                            \/\/      ^           setgid: ON\n+                            \/\/       ^          sticky: ON\n+                            \/\/        ^^^^^^^^^ rwxr--r--  (9 bits)\n+\n+        \/\/ Sanity check that 'external file attributes' has the expected value\n+        verifyExternalFileAttribute(zip, expectedBits);\n+\n+\n+        Path zipFile = Path.of(\"preserve-symlink.zip\");\n+        Files.write(zipFile, zip);\n+\n+        \/\/ Verify that a read\/synch roundtrip preserves the external file attributes\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, ENV_POSIX)) {\n+            Path source = fs.getPath(\"hello.txt\");\n+            Files.setLastModifiedTime(source, FileTime.from(Instant.now()));\n+        }\n+        \/\/ Updating last modified time should not modify external file attributes\n+        verifyExternalFileAttribute(Files.readAllBytes(zipFile), expectedBits);\n+\n+        \/\/ Verify calling Files.setPosixFilePermissions with current permission set\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, ENV_POSIX)) {\n+            Path source = fs.getPath(\"hello.txt\");\n+            \/\/ Set permissions to their current value\n+            Files.setPosixFilePermissions(source, Files.getPosixFilePermissions(source));\n+        }\n+\n+        \/\/ Verify that the 'external file attributes' field did not change\n+        verifyExternalFileAttribute(Files.readAllBytes(zipFile), expectedBits);\n+    }\n+\n+    \/**\n+     * Verify that the first 16 bits of the CEN field 'external file attributes' matches\n+     * a given bit string\n+     * @param zip the ZIP file to parse\n+     * @param expectedBits a string of '0' or '1' representing the expected bits\n+     *\/\n+    private void verifyExternalFileAttribute(byte[] zip, String expectedBits) {\n+        \/\/ Buffer to help parse the ZIP\n+        ByteBuffer buffer = ByteBuffer.wrap(zip).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ Look up offset of first CEN header from the END header\n+        int cenOff = buffer.getInt(buffer.capacity() - ZipFile.ENDHDR + ZipFile.ENDOFF);\n+        \/\/ We're interested in the first 16 'unix' bits of the 32-bit 'external file attributes' field\n+        int externalFileAttr = (buffer.getInt(cenOff + ZipFile.CENATX) >> 16) & 0xFFFF;\n+\n+        \/\/ Verify that the expected bits are set\n+        assertEquals(Integer.toBinaryString(externalFileAttr), expectedBits,\n+                \"The 'external file attributes' field does not match the expected value:\");\n+    }\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":84,"deletions":13,"binary":false,"changes":97,"status":"modified"}]}