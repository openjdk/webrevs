{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -647,1 +647,6 @@\n-            e.posixPerms = perms == null ? -1 : ZipUtils.permsToFlags(perms);\n+            if (perms == null) {\n+                e.posixPerms = -1;\n+            } else {\n+                e.posixPerms = ZipUtils.permsToFlags(perms) |\n+                        (e.posixPerms & 0xFE00); \/\/ Preserve unrelated bits\n+            }\n@@ -3008,1 +3013,1 @@\n-                posixPerms = CENATX_PERMS(cen, pos) & 0xFFF; \/\/ 12 bits for setuid, setgid, sticky + perms\n+                posixPerms = (CENATX_PERMS(cen, pos) & 0xFFFF); \/\/ 16 bits for file type, setuid, setgid, sticky + perms\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2024, SAP SE. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n@@ -29,7 +31,1 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.nio.file.attribute.GroupPrincipal;\n-import java.nio.file.attribute.PosixFileAttributeView;\n-import java.nio.file.attribute.PosixFileAttributes;\n-import java.nio.file.attribute.PosixFilePermission;\n-import java.nio.file.attribute.PosixFilePermissions;\n-import java.nio.file.attribute.UserPrincipal;\n+import java.nio.file.attribute.*;\n@@ -40,5 +36,2 @@\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n+import java.time.Instant;\n+import java.util.*;\n@@ -52,1 +45,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -63,5 +56,5 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.assertNull;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -75,2 +68,2 @@\n- * @run testng TestPosix\n- * @run testng\/othervm\/java.security.policy=test.policy.posix TestPosix\n+ * @run junit TestPosix\n+ * @run junit\/othervm\/java.security.policy=test.policy.posix TestPosix\n@@ -367,1 +360,1 @@\n-        assertEquals(Files.isDirectory(file), ei.isDir, \"Unexpected directory attribute for:\" + System.lineSeparator() + attrs);\n+        assertEquals(ei.isDir, Files.isDirectory(file), \"Unexpected directory attribute for:\" + System.lineSeparator() + attrs);\n@@ -405,1 +398,1 @@\n-        assertEquals(entries.get(), entriesCreated, \"File contained wrong number of entries.\");\n+        assertEquals(entriesCreated, entries.get(), \"File contained wrong number of entries.\");\n@@ -432,1 +425,1 @@\n-            assertEquals(actual.size(), expected.size(), \"Unexpected number of permissions (\" +\n+            assertEquals(expected.size(), actual.size(), \"Unexpected number of permissions (\" +\n@@ -612,1 +605,1 @@\n-                assertEquals(owner.getName(), defaultOwner);\n+                assertEquals(defaultOwner, owner.getName());\n@@ -615,1 +608,1 @@\n-            assertEquals(Files.getOwner(entry), DUMMY_USER);\n+            assertEquals(DUMMY_USER, Files.getOwner(entry));\n@@ -620,1 +613,1 @@\n-                assertEquals(group.getName(), defaultGroup);\n+                assertEquals(defaultGroup, group.getName());\n@@ -623,1 +616,1 @@\n-            assertEquals(view.readAttributes().group(), DUMMY_GROUP);\n+            assertEquals(DUMMY_GROUP, view.readAttributes().group());\n@@ -635,1 +628,1 @@\n-            assertEquals(Files.getOwner(entry).getName(), \"auser\");\n+            assertEquals(\"auser\", Files.getOwner(entry).getName());\n@@ -637,1 +630,1 @@\n-            assertEquals(view.readAttributes().group().getName(), \"agroup\");\n+            assertEquals(\"agroup\", view.readAttributes().group().getName());\n@@ -648,1 +641,1 @@\n-            assertEquals(Files.getOwner(entry), DUMMY_USER);\n+            assertEquals(DUMMY_USER, Files.getOwner(entry));\n@@ -650,1 +643,1 @@\n-            assertEquals(view.readAttributes().group(), DUMMY_GROUP);\n+            assertEquals(DUMMY_GROUP, view.readAttributes().group());\n@@ -725,1 +718,103 @@\n-        assertEquals(rc, 0, \"Return code of jar call is \" + rc + \" but expected 0\");\n+        assertEquals(0, rc, \"Return code of jar call is \" + rc + \" but expected 0\");\n+    }\n+\n+    \/**\n+     * Verify that calling Files.setPosixPermissions with the current\n+     * permission set does not change the 'external file attributes' field.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void setPermissionsShouldPreserveRemainingBits() throws IOException {\n+        assertExternalFileAttributeUnchanged(fs -> {\n+            Path path = fs.getPath(\"hello.txt\");\n+            \/\/ Set permissions to their current value\n+            Files.setPosixFilePermissions(path, Files.getPosixFilePermissions(path));\n+        });\n+    }\n+\n+    \/**\n+     * Verify that a non-POSIX operation such as Files.setLastModifiedTime\n+     * does not change the 'external file attributes' field.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void setLastModifiedTimeShouldNotChangeExternalFileAttribute() throws IOException {\n+        assertExternalFileAttributeUnchanged(fs -> {\n+            Path path = fs.getPath(\"hello.txt\");\n+            Files.setLastModifiedTime(path, FileTime.from(Instant.now()));\n+        });\n+    }\n+\n+    \/\/ Represents an operation performed on a FileSystem\n+    static interface FileSystemOperation {\n+        void accept(FileSystem fileSystem) throws IOException;\n+    }\n+\n+    \/**\n+     * Assert that running the given operation on a ZipFileSystem does not\n+     * change the 'external file attributes' value of the 'hello.txt' entry\n+     * @param action the action to run on the file system\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private void assertExternalFileAttributeUnchanged(FileSystemOperation action) throws IOException {\n+        \/*\n+         * The ZIP test vector used here is created using:\n+         * % touch hello.txt\n+         * % chmod u+s hello.txt     # setuid\n+         * % chmod g+s hello.txt     # setgid\n+         * % chmod +t hello.txt      # sticky\n+         * % zip hello.zip hello.txt\n+         * % cat hello.zip | xxd -ps\n+         *\/\n+        byte[] zip = HexFormat.of().parseHex(\"\"\"\n+                504b03040a0000000000d994945700000000000000000000000009001c00\n+                68656c6c6f2e7478745554090003aa268365aa26836575780b000104f501\n+                00000414000000504b01021e030a0000000000d994945700000000000000\n+                0000000000090018000000000000000000a48f0000000068656c6c6f2e74\n+                78745554050003aa26836575780b000104f50100000414000000504b0506\n+                00000000010001004f000000430000000000\n+                \"\"\".replaceAll(\"\\n\",\"\"));\n+\n+        \/\/ Expected bit values of the 'external file attributes' CEN field in the ZIP above\n+        String expectedBits = \"1000111110100100\";\n+                            \/\/ ^^^^             file type: 1000 (regular file)\n+                            \/\/     ^            setuid: ON\n+                            \/\/      ^           setgid: ON\n+                            \/\/       ^          sticky: ON\n+                            \/\/        ^^^^^^^^^ rwxr--r--  (9 bits)\n+\n+        \/\/ Sanity check that 'external file attributes' has the expected value\n+        verifyExternalFileAttribute(zip, expectedBits);\n+\n+\n+        Path zipFile = Path.of(\"preserve-external-file-attrs.zip\");\n+        Files.write(zipFile, zip);\n+\n+        \/\/ Run the provided action on the ZipFileSystem\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, ENV_POSIX)) {\n+            action.accept(fs);\n+        }\n+        \/\/ Running the action should not change the 'external file attributes' value\n+        verifyExternalFileAttribute(Files.readAllBytes(zipFile), expectedBits);\n+    }\n+\n+    \/**\n+     * Verify that the first 16 bits of the CEN field 'external file attributes' matches\n+     * a given bit string\n+     * @param zip the ZIP file to parse\n+     * @param expectedBits a string of '0' or '1' representing the expected bits\n+     *\/\n+    private void verifyExternalFileAttribute(byte[] zip, String expectedBits) {\n+        \/\/ Buffer to help parse the ZIP\n+        ByteBuffer buffer = ByteBuffer.wrap(zip).order(ByteOrder.LITTLE_ENDIAN);\n+        \/\/ Look up offset of first CEN header from the END header\n+        int cenOff = buffer.getInt(buffer.capacity() - ZipFile.ENDHDR + ZipFile.ENDOFF);\n+        \/\/ We're interested in the first 16 'unix' bits of the 32-bit 'external file attributes' field\n+        int externalFileAttr = (buffer.getInt(cenOff + ZipFile.CENATX) >> 16) & 0xFFFF;\n+\n+        \/\/ Verify that the expected bits are set\n+        assertEquals(expectedBits, Integer.toBinaryString(externalFileAttr),\n+                \"The 'external file attributes' field does not match the expected value:\");\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":128,"deletions":33,"binary":false,"changes":161,"status":"modified"}]}