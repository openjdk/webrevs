{"files":[{"patch":"@@ -722,2 +722,18 @@\n-     * Verify that Files.setPosixPermissions does not alter the\n-     * 7 first non-permission bits of the 'external file attributes' field.\n+     * Verify that calling Files.setPosixPermissions with the current\n+     * permission set does not change the 'external file attributes' field.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void setPermissionsShouldPreserveRemainingBits() throws IOException {\n+        assertExternalFileAttributeUnchanged(fs -> {\n+            Path path = fs.getPath(\"hello.txt\");\n+            \/\/ Set permissions to their current value\n+            Files.setPosixFilePermissions(path, Files.getPosixFilePermissions(path));\n+        });\n+    }\n+\n+    \/**\n+     * Verify that a non-POSIX operation such as Files.setLastModifiedTime\n+     * does not change the 'external file attributes' field.\n+     *\n@@ -727,1 +743,20 @@\n-    public void preserveRemainingBits() throws IOException {\n+    public void setLastModifiedTimeShouldNotChangeExternalFileAttribute() throws IOException {\n+        assertExternalFileAttributeUnchanged(fs -> {\n+            Path path = fs.getPath(\"hello.txt\");\n+            Files.setLastModifiedTime(path, FileTime.from(Instant.now()));\n+        });\n+    }\n+\n+    \/\/ Represents an operation performed on a FileSystem\n+    static interface FileSystemOperation {\n+        void accept(FileSystem fileSystem) throws IOException;\n+    }\n+\n+    \/**\n+     * Assert that running the given operation on a ZipFileSystem does not\n+     * change the 'external file attributes' value of the 'hello.txt' entry\n+     * @param action the action to run on the file system\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private void assertExternalFileAttributeUnchanged(FileSystemOperation action) throws IOException {\n@@ -758,1 +793,1 @@\n-        Path zipFile = Path.of(\"preserve-symlink.zip\");\n+        Path zipFile = Path.of(\"preserve-external-file-attrs.zip\");\n@@ -761,1 +796,1 @@\n-        \/\/ Verify that a read\/synch roundtrip preserves the external file attributes\n+        \/\/ Run the provided action on the ZipFileSystem\n@@ -763,2 +798,1 @@\n-            Path source = fs.getPath(\"hello.txt\");\n-            Files.setLastModifiedTime(source, FileTime.from(Instant.now()));\n+            action.accept(fs);\n@@ -766,11 +800,1 @@\n-        \/\/ Updating last modified time should not modify external file attributes\n-        verifyExternalFileAttribute(Files.readAllBytes(zipFile), expectedBits);\n-\n-        \/\/ Verify calling Files.setPosixFilePermissions with current permission set\n-        try (FileSystem fs = FileSystems.newFileSystem(zipFile, ENV_POSIX)) {\n-            Path source = fs.getPath(\"hello.txt\");\n-            \/\/ Set permissions to their current value\n-            Files.setPosixFilePermissions(source, Files.getPosixFilePermissions(source));\n-        }\n-\n-        \/\/ Verify that the 'external file attributes' field did not change\n+        \/\/ Running the action should not change the 'external file attributes' value\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":42,"deletions":18,"binary":false,"changes":60,"status":"modified"}]}