{"files":[{"patch":"@@ -38,1 +38,1 @@\n- * @summary Verifies Color filter on non-ICC profile\n+ * @summary Verifies Color filter on Non ICC profile\n@@ -40,3 +40,10 @@\n-public class NonICCFilterTest {\n-\n-    private static class TestColorSpace extends ColorSpace {\n+public final class NonICCFilterTest {\n+    private static final int WIDTH = 100;\n+    private static final int HEIGHT = 100;\n+\n+    private enum ColorSpaceSelector {\n+        GRAY,\n+        RGB,\n+        WRAPPED_GRAY,\n+        WRAPPED_RGB\n+    }\n@@ -44,1 +51,1 @@\n-        private final ColorSpace csRGB;\n+    private static final class TestColorSpace extends ColorSpace {\n@@ -46,4 +53,1 @@\n-        protected TestColorSpace(ColorSpace csRGB) {\n-            super(csRGB.getType(), csRGB.getNumComponents());\n-            this.csRGB = csRGB;\n-        }\n+        private final ColorSpace cs;\n@@ -51,4 +55,3 @@\n-        private static ColorSpace createColorSpace(boolean isSrc) {\n-            return new TestColorSpace(ColorSpace.getInstance(isSrc\n-                    ? ColorSpace.CS_LINEAR_RGB\n-                    : ColorSpace.CS_sRGB));\n+        TestColorSpace(ColorSpace cs) {\n+            super(cs.getType(), cs.getNumComponents());\n+            this.cs = cs;\n@@ -59,1 +62,1 @@\n-            return colorvalue;\n+            return cs.toRGB(colorvalue);\n@@ -64,1 +67,1 @@\n-            return rgbvalue;\n+            return cs.fromRGB(rgbvalue);\n@@ -69,1 +72,1 @@\n-            return csRGB.toCIEXYZ(colorvalue);\n+            return cs.toCIEXYZ(colorvalue);\n@@ -74,1 +77,1 @@\n-            return csRGB.fromCIEXYZ(xyzvalue);\n+            return cs.fromCIEXYZ(xyzvalue);\n@@ -78,2 +81,1 @@\n-    private static BufferedImage createTestImage(boolean isSrc) {\n-        ColorSpace cs = TestColorSpace.createColorSpace(isSrc);\n+    private static BufferedImage createTestImage(final ColorSpace cs) {\n@@ -81,2 +83,2 @@\n-                Transparency.OPAQUE, DataBuffer.TYPE_FLOAT);\n-        WritableRaster raster = cm.createCompatibleWritableRaster(50, 50);\n+                Transparency.OPAQUE, DataBuffer.TYPE_BYTE);\n+        WritableRaster raster = cm.createCompatibleWritableRaster(WIDTH, HEIGHT);\n@@ -95,4 +97,19 @@\n-    private static boolean compareImages(BufferedImage src, BufferedImage dest) {\n-        for (int x = 0; x < src.getWidth(); x++) {\n-            for (int y = 0; y < src.getHeight(); y++) {\n-                if (src.getRGB(x, y) != dest.getRGB(x, y)) {\n+    private static ColorSpace createCS(ColorSpaceSelector selector) {\n+        return switch (selector) {\n+            case GRAY -> ColorSpace.getInstance(ColorSpace.CS_GRAY);\n+            case WRAPPED_GRAY -> new TestColorSpace(ColorSpace.getInstance(ColorSpace.CS_GRAY));\n+\n+            case RGB -> ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+            case WRAPPED_RGB -> new TestColorSpace(ColorSpace.getInstance(ColorSpace.CS_sRGB));\n+        };\n+    }\n+\n+    private static boolean areImagesEqual(BufferedImage destTest, BufferedImage destGold) {\n+        for (int x = 0; x < destTest.getWidth(); x++) {\n+            for (int y = 0; y < destTest.getHeight(); y++) {\n+                int rgb1 = destTest.getRGB(x, y);\n+                int rgb2 = destGold.getRGB(x, y);\n+                if (rgb1 != rgb2) {\n+                    System.err.println(\"x = \" + x + \", y = \" + y);\n+                    System.err.println(\"rgb1 = \" + Integer.toHexString(rgb1));\n+                    System.err.println(\"rgb2 = \" + Integer.toHexString(rgb2));\n@@ -107,0 +124,5 @@\n+        BufferedImage srcTest = createTestImage(createCS(ColorSpaceSelector.WRAPPED_GRAY));\n+        BufferedImage destTest = createTestImage(createCS(ColorSpaceSelector.WRAPPED_RGB));\n+\n+        BufferedImage srcGold = createTestImage(createCS(ColorSpaceSelector.GRAY));\n+        BufferedImage destGold = createTestImage(createCS(ColorSpaceSelector.RGB));\n@@ -108,2 +130,3 @@\n-        BufferedImage src = createTestImage(true);\n-        BufferedImage dst = createTestImage(false);\n+        ColorSpace mid = ColorSpace.getInstance(ColorSpace.CS_PYCC);\n+        ColorConvertOp test = new ColorConvertOp(mid, null);\n+        test.filter(srcTest, destTest);\n@@ -111,3 +134,2 @@\n-        ColorConvertOp ccop =\n-                new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_sRGB), null);\n-        ccop.filter(src, dst);\n+        ColorConvertOp gold = new ColorConvertOp(mid, null);\n+        gold.filter(srcGold, destGold);\n@@ -115,2 +137,2 @@\n-        if (compareImages(src, dst)) {\n-            throw new RuntimeException(\"Test failed: Source equal to Destination\");\n+        if (!areImagesEqual(destTest, destGold)) {\n+            throw new RuntimeException(\"Test failed\");\n","filename":"test\/jdk\/java\/awt\/color\/NonICCFilterTest.java","additions":54,"deletions":32,"binary":false,"changes":86,"status":"modified"}]}