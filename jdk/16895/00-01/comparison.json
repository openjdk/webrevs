{"files":[{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.WritableRaster;\n+\n+\/**\n+ * @test\n+ * @bug 8316497\n+ * @summary Verifies Color filter on Non ICC profile\n+ *\/\n+\n+public class NonICCFilterTest {\n+\n+    private static class TestColorSpace extends ColorSpace {\n+\n+        private ColorSpace csRGB;\n+\n+        protected TestColorSpace(boolean bSrc) {\n+            super(CS_sRGB, 3);\n+            csRGB = ColorSpace.getInstance(bSrc ? ColorSpace.CS_LINEAR_RGB :\n+                    ColorSpace.CS_sRGB);\n+        }\n+\n+        public float[] toRGB(float[] colorvalue) {\n+            return colorvalue;\n+        }\n+\n+        public float[] fromRGB(float[] rgbvalue) {\n+            return rgbvalue;\n+        }\n+\n+        public float[] toCIEXYZ(float[] colorvalue) {\n+            return csRGB.toCIEXYZ(toRGB(colorvalue));\n+        }\n+\n+        public float[] fromCIEXYZ(float[] xyzvalue) {\n+            return fromRGB(csRGB.fromCIEXYZ(xyzvalue));\n+        }\n+    }\n+\n+    private static BufferedImage createTestImage(boolean isSrc) {\n+\n+        ColorSpace cs = new TestColorSpace(isSrc);\n+        ComponentColorModel cm = new ComponentColorModel(cs, false, false,\n+                        Transparency.OPAQUE, DataBuffer.TYPE_FLOAT);\n+        WritableRaster raster = cm.createCompatibleWritableRaster(50, 50);\n+        BufferedImage img = new BufferedImage(cm, raster, false, null);\n+\n+        Graphics2D g = img.createGraphics();\n+        GradientPaint gp = new GradientPaint(0, 0, Color.GREEN,\n+                raster.getWidth(), raster.getHeight(), Color.BLUE);\n+        g.setPaint(gp);\n+        g.fillRect(0,0,raster.getWidth(), raster.getHeight());\n+        g.dispose();\n+\n+        return img;\n+    }\n+\n+    private static boolean compareImages(BufferedImage src,\n+                                         BufferedImage dest) {\n+\n+        for (int x = 0; x < src.getWidth(); x++) {\n+            for (int y = 0; y < src.getHeight(); y++) {\n+                if (src.getRGB(x, y) != dest.getRGB(x, y)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void main(String[] args) {\n+        BufferedImage src, dest;\n+        src = createTestImage(true);\n+        dest = createTestImage(false);\n+\n+        ColorConvertOp ccop =\n+                new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_sRGB), null);\n+        ccop.filter(src, dest);\n+\n+        try {\n+            if (compareImages(src, dest)) {\n+                throw new RuntimeException(\"Source equal to Destination\");\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed: \" + e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/NonICCFilterTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}