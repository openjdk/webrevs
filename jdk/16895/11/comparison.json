{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -838,1 +838,1 @@\n-                        color = srcColorSpace.fromCIEXYZ(dstColor);\n+                        color = dstColorSpace.fromCIEXYZ(dstColor);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorConvertOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics2D;\n+import java.awt.Transparency;\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.WritableRaster;\n+\n+\/*\n+ * @test\n+ * @bug 8316497\n+ * @summary Verifies Color filter on Non ICC profile\n+ *\/\n+public final class NonICCFilterTest {\n+    private static final int WIDTH = 100;\n+    private static final int HEIGHT = 100;\n+\n+    private enum ColorSpaceSelector {\n+        GRAY,\n+        RGB,\n+        WRAPPED_GRAY,\n+        WRAPPED_RGB\n+    }\n+\n+    private static final class TestColorSpace extends ColorSpace {\n+\n+        private final ColorSpace cs;\n+\n+        TestColorSpace(ColorSpace cs) {\n+            super(cs.getType(), cs.getNumComponents());\n+            this.cs = cs;\n+        }\n+\n+        @Override\n+        public float[] toRGB(float[] colorvalue) {\n+            return cs.toRGB(colorvalue);\n+        }\n+\n+        @Override\n+        public float[] fromRGB(float[] rgbvalue) {\n+            return cs.fromRGB(rgbvalue);\n+        }\n+\n+        @Override\n+        public float[] toCIEXYZ(float[] colorvalue) {\n+            return cs.toCIEXYZ(colorvalue);\n+        }\n+\n+        @Override\n+        public float[] fromCIEXYZ(float[] xyzvalue) {\n+            return cs.fromCIEXYZ(xyzvalue);\n+        }\n+    }\n+\n+    private static BufferedImage createTestImage(final ColorSpace cs) {\n+        ComponentColorModel cm = new ComponentColorModel(cs, false, false,\n+                Transparency.OPAQUE, DataBuffer.TYPE_BYTE);\n+        WritableRaster raster = cm.createCompatibleWritableRaster(WIDTH, HEIGHT);\n+        BufferedImage img = new BufferedImage(cm, raster, false, null);\n+\n+        Graphics2D g = img.createGraphics();\n+        GradientPaint gp = new GradientPaint(0, 0, Color.GREEN,\n+                raster.getWidth(), raster.getHeight(), Color.BLUE);\n+        g.setPaint(gp);\n+        g.fillRect(0, 0, raster.getWidth(), raster.getHeight());\n+        g.dispose();\n+\n+        return img;\n+    }\n+\n+    private static ColorSpace createCS(ColorSpaceSelector selector) {\n+        return switch (selector) {\n+            case GRAY -> ColorSpace.getInstance(ColorSpace.CS_GRAY);\n+            case WRAPPED_GRAY -> new TestColorSpace(ColorSpace.getInstance(ColorSpace.CS_GRAY));\n+\n+            case RGB -> ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+            case WRAPPED_RGB -> new TestColorSpace(ColorSpace.getInstance(ColorSpace.CS_sRGB));\n+        };\n+    }\n+\n+    private static boolean areImagesEqual(BufferedImage destTest, BufferedImage destGold) {\n+        for (int x = 0; x < destTest.getWidth(); x++) {\n+            for (int y = 0; y < destTest.getHeight(); y++) {\n+                int rgb1 = destTest.getRGB(x, y);\n+                int rgb2 = destGold.getRGB(x, y);\n+                if (rgb1 != rgb2) {\n+                    System.err.println(\"x = \" + x + \", y = \" + y);\n+                    System.err.println(\"rgb1 = \" + Integer.toHexString(rgb1));\n+                    System.err.println(\"rgb2 = \" + Integer.toHexString(rgb2));\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void main(String[] args) {\n+        BufferedImage srcTest = createTestImage(createCS(ColorSpaceSelector.WRAPPED_GRAY));\n+        BufferedImage destTest = createTestImage(createCS(ColorSpaceSelector.WRAPPED_RGB));\n+\n+        BufferedImage srcGold = createTestImage(createCS(ColorSpaceSelector.GRAY));\n+        BufferedImage destGold = createTestImage(createCS(ColorSpaceSelector.RGB));\n+\n+        ColorSpace mid = ColorSpace.getInstance(ColorSpace.CS_PYCC);\n+        ColorConvertOp test = new ColorConvertOp(mid, null);\n+        test.filter(srcTest, destTest);\n+\n+        ColorConvertOp gold = new ColorConvertOp(mid, null);\n+        gold.filter(srcGold, destGold);\n+\n+        if (!areImagesEqual(destTest, destGold)) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/NonICCFilterTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}