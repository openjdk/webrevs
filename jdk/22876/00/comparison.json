{"files":[{"patch":"@@ -58,1 +58,0 @@\n-import sun.font.CreatedFontTracker;\n@@ -632,2 +631,1 @@\n-    private Font(File fontFile, int fontFormat,\n-                 boolean isCopy, CreatedFontTracker tracker)\n+    private Font(File fontFile, int fontFormat, boolean isCopy)\n@@ -641,1 +639,1 @@\n-            fm.createFont2D(fontFile, fontFormat, false, isCopy, tracker);\n+            fm.createFont2D(fontFile, fontFormat, false, isCopy);\n@@ -891,10 +889,0 @@\n-    \/**\n-     * Used with the byte count tracker for fonts created from streams.\n-     * If a thread can create temp files anyway, no point in counting\n-     * font bytes.\n-     *\/\n-    private static boolean hasTempPermission() {\n-        return true;\n-    }\n-\n-\n@@ -940,22 +928,1 @@\n-        final int fontFormat = Font.TRUETYPE_FONT;\n-        if (hasTempPermission()) {\n-            return createFont0(fontFormat, fontStream, true, null);\n-        }\n-\n-        \/\/ Otherwise, be extra conscious of pending temp file creation and\n-        \/\/ resourcefully handle the temp file resources, among other things.\n-        CreatedFontTracker tracker = CreatedFontTracker.getTracker();\n-        boolean acquired = false;\n-        try {\n-            acquired = tracker.acquirePermit();\n-            if (!acquired) {\n-                throw new IOException(\"Timed out waiting for resources.\");\n-            }\n-            return createFont0(fontFormat, fontStream, true, tracker);\n-        } catch (InterruptedException e) {\n-            throw new IOException(\"Problem reading font data.\");\n-        } finally {\n-            if (acquired) {\n-                tracker.releasePermit();\n-            }\n-        }\n+        return createFont0(Font.TRUETYPE_FONT, fontStream, true);\n@@ -1017,1 +984,1 @@\n-            fm.createFont2D(fontFile, fontFormat, true, false, null);\n+            fm.createFont2D(fontFile, fontFormat, true, false);\n@@ -1057,21 +1024,1 @@\n-        if (hasTempPermission()) {\n-            return createFont0(fontFormat, fontStream, false, null)[0];\n-        }\n-\n-        \/\/ Otherwise, be extra conscious of pending temp file creation and\n-        \/\/ resourcefully handle the temp file resources, among other things.\n-        CreatedFontTracker tracker = CreatedFontTracker.getTracker();\n-        boolean acquired = false;\n-        try {\n-            acquired = tracker.acquirePermit();\n-            if (!acquired) {\n-                throw new IOException(\"Timed out waiting for resources.\");\n-            }\n-            return createFont0(fontFormat, fontStream, false, tracker)[0];\n-        } catch (InterruptedException e) {\n-            throw new IOException(\"Problem reading font data.\");\n-        } finally {\n-            if (acquired) {\n-                tracker.releasePermit();\n-            }\n-        }\n+        return createFont0(fontFormat, fontStream, false)[0];\n@@ -1081,2 +1028,1 @@\n-                                      boolean allFonts,\n-                                      CreatedFontTracker tracker)\n+                                      boolean allFonts)\n@@ -1092,4 +1038,0 @@\n-            if (tracker != null) {\n-                tracker.add(tFile);\n-            }\n-\n@@ -1099,3 +1041,0 @@\n-                if (tracker != null) {\n-                    tracker.set(tFile, outStream);\n-                }\n@@ -1109,12 +1048,0 @@\n-                        if (tracker != null) {\n-                            if (totalSize+bytesRead > CreatedFontTracker.MAX_FILE_SIZE) {\n-                                throw new IOException(\"File too big.\");\n-                            }\n-                            if (totalSize+tracker.getNumBytes() >\n-                                CreatedFontTracker.MAX_TOTAL_BYTES)\n-                              {\n-                                throw new IOException(\"Total files too big.\");\n-                            }\n-                            totalSize += bytesRead;\n-                            tracker.addBytes(bytesRead);\n-                        }\n@@ -1124,10 +1051,0 @@\n-                \/* After all references to a Font2D are dropped, the file\n-                 * will be removed. To support long-lived AppContexts,\n-                 * we need to then decrement the byte count by the size\n-                 * of the file.\n-                 * If the data isn't a valid font, the implementation will\n-                 * delete the tmp file and decrement the byte count\n-                 * in the tracker object before returning from the\n-                 * constructor, so we can set 'copiedFontData' to true here\n-                 * without waiting for the results of that constructor.\n-                 *\/\n@@ -1137,1 +1054,1 @@\n-                    fm.createFont2D(tFile, fontFormat, allFonts, true, tracker);\n+                    fm.createFont2D(tFile, fontFormat, allFonts, true);\n@@ -1145,3 +1062,0 @@\n-                if (tracker != null) {\n-                    tracker.remove(tFile);\n-                }\n@@ -1149,3 +1063,0 @@\n-                    if (tracker != null) {\n-                        tracker.subBytes(totalSize);\n-                    }\n@@ -1206,1 +1117,1 @@\n-        return new Font(fontFile, fontFormat, false, null);\n+        return new Font(fontFile, fontFormat, false);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Font.java","additions":8,"deletions":97,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -1,162 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.font;\n-\n-import java.io.File;\n-import java.io.OutputStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.TimeUnit;\n-\n-import sun.awt.AppContext;\n-import sun.awt.util.ThreadGroupUtils;\n-\n-public class CreatedFontTracker {\n-\n-    public static final int MAX_FILE_SIZE = 32 * 1024 * 1024;\n-    public static final int MAX_TOTAL_BYTES = 10 * MAX_FILE_SIZE;\n-\n-    static CreatedFontTracker tracker;\n-    int numBytes;\n-\n-    public static synchronized CreatedFontTracker getTracker() {\n-        if (tracker == null) {\n-            tracker = new CreatedFontTracker();\n-        }\n-        return tracker;\n-    }\n-\n-    private CreatedFontTracker() {\n-        numBytes = 0;\n-    }\n-\n-    public synchronized int getNumBytes() {\n-        return numBytes;\n-    }\n-\n-    public synchronized void addBytes(int sz) {\n-        numBytes += sz;\n-    }\n-\n-    public synchronized void subBytes(int sz) {\n-        numBytes -= sz;\n-    }\n-\n-    \/**\n-     * Returns an AppContext-specific counting semaphore.\n-     *\/\n-    private static synchronized Semaphore getCS() {\n-        final AppContext appContext = AppContext.getAppContext();\n-        Semaphore cs = (Semaphore) appContext.get(CreatedFontTracker.class);\n-        if (cs == null) {\n-            \/\/ Make a semaphore with 5 permits that obeys the first-in first-out\n-            \/\/ granting of permits.\n-            cs = new Semaphore(5, true);\n-            appContext.put(CreatedFontTracker.class, cs);\n-        }\n-        return cs;\n-    }\n-\n-    public boolean acquirePermit() throws InterruptedException {\n-        \/\/ This does a timed-out wait.\n-        return getCS().tryAcquire(120, TimeUnit.SECONDS);\n-    }\n-\n-    public void releasePermit() {\n-        getCS().release();\n-    }\n-\n-    public void add(File file) {\n-        TempFileDeletionHook.add(file);\n-    }\n-\n-    public void set(File file, OutputStream os) {\n-        TempFileDeletionHook.set(file, os);\n-    }\n-\n-    public void remove(File file) {\n-        TempFileDeletionHook.remove(file);\n-    }\n-\n-    \/**\n-     * Helper class for cleanup of temp files created while processing fonts.\n-     * Note that this only applies to createFont() from an InputStream object.\n-     *\/\n-    private static class TempFileDeletionHook {\n-        private static HashMap<File, OutputStream> files = new HashMap<>();\n-\n-        private static Thread t = null;\n-        static void init() {\n-            if (t == null) {\n-                \/\/ Add a shutdown hook to remove the temp file.\n-                \/* The thread must be a member of a thread group\n-                 * which will not get GCed before VM exit.\n-                 * Make its parent the top-level thread group.\n-                 *\/\n-                ThreadGroup rootTG = ThreadGroupUtils.getRootThreadGroup();\n-                t = new Thread(rootTG, TempFileDeletionHook::runHooks,\n-                               \"TempFontFileDeleter\", 0, false);\n-                \/* Set context class loader to null in order to avoid\n-                 * keeping a strong reference to an application classloader.\n-                 *\/\n-                t.setContextClassLoader(null);\n-                Runtime.getRuntime().addShutdownHook(t);\n-            }\n-        }\n-\n-        private TempFileDeletionHook() {}\n-\n-        static synchronized void add(File file) {\n-            init();\n-            files.put(file, null);\n-        }\n-\n-        static synchronized void set(File file, OutputStream os) {\n-            files.put(file, os);\n-        }\n-\n-        static synchronized void remove(File file) {\n-            files.remove(file);\n-        }\n-\n-        static synchronized void runHooks() {\n-            if (files.isEmpty()) {\n-                return;\n-            }\n-\n-            for (Map.Entry<File, OutputStream> entry : files.entrySet()) {\n-                \/\/ Close the associated output stream, and then delete the file.\n-                try {\n-                    if (entry.getValue() != null) {\n-                        entry.getValue().close();\n-                    }\n-                } catch (Exception e) {}\n-                entry.getKey().delete();\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CreatedFontTracker.java","additions":0,"deletions":162,"binary":false,"changes":162,"status":"deleted"},{"patch":"@@ -107,2 +107,1 @@\n-                                File file, int cnt,\n-                                CreatedFontTracker tracker)\n+                                File file, int cnt)\n@@ -111,1 +110,1 @@\n-            new CreatedFontFileDisposerRecord(file, cnt, tracker);\n+            new CreatedFontFileDisposerRecord(file, cnt);\n@@ -242,1 +241,0 @@\n-        CreatedFontTracker tracker;\n@@ -244,2 +242,1 @@\n-        private CreatedFontFileDisposerRecord(File file, int cnt,\n-                                              CreatedFontTracker tracker) {\n+        private CreatedFontFileDisposerRecord(File file, int cnt) {\n@@ -248,1 +245,0 @@\n-            this.tracker = tracker;\n@@ -260,3 +256,0 @@\n-                      if (tracker != null) {\n-                          tracker.subBytes((int)fontFile.length());\n-                      }\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FileFont.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                                 boolean isCopy, CreatedFontTracker tracker)\n+                                 boolean isCopy)\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2149,1 +2149,1 @@\n-                                 boolean isCopy, CreatedFontTracker tracker)\n+                                 boolean isCopy)\n@@ -2157,1 +2157,0 @@\n-        final CreatedFontTracker _tracker = tracker;\n@@ -2195,3 +2194,0 @@\n-                if (_tracker != null) {\n-                    _tracker.subBytes((int)fFile.length());\n-                }\n@@ -2203,1 +2199,1 @@\n-            FileFont.setFileToRemove(fList, fontFile, cnt, tracker);\n+            FileFont.setFileToRemove(fList, fontFile, cnt);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/SunFontManager.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}