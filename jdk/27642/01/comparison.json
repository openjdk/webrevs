{"files":[{"patch":"@@ -41,0 +41,1 @@\n+#include \"runtime\/atomicAccess.hpp\"\n@@ -524,4 +525,0 @@\n-static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n-  *(jlong *) dst = *(const jlong *) src;\n-}\n-\n@@ -591,1 +588,1 @@\n-        atomic_copy64(from++, to++);\n+        AtomicAccess::store(to++, AtomicAccess::load(from++));\n@@ -598,1 +595,1 @@\n-        atomic_copy64(from--, to--);\n+        AtomicAccess::store(to--, AtomicAccess::load(from--));\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -128,7 +128,0 @@\n-\/\/ Atomically copy 64 bits of data\n-inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n-  int64_t tmp;\n-  __atomic_load(reinterpret_cast<const volatile int64_t*>(src), &tmp, __ATOMIC_RELAXED);\n-  __atomic_store(reinterpret_cast<volatile int64_t*>(dst), &tmp, __ATOMIC_RELAXED);\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/atomicAccess_bsd_zero.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-        atomic_copy64(from++, to++);\n+        AtomicAccess::store(to++, AtomicAccess::load(from++));\n@@ -287,1 +287,1 @@\n-        atomic_copy64(from--, to--);\n+        AtomicAccess::store(to--, AtomicAccess::load(from--));\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"runtime\/atomicAccess.hpp\"\n@@ -386,4 +387,0 @@\n-static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n-  *(jlong *) dst = *(const jlong *) src;\n-}\n-\n@@ -441,1 +438,1 @@\n-        atomic_copy64(from++, to++);\n+        AtomicAccess::store(to++, AtomicAccess::load(from++));\n@@ -448,1 +445,1 @@\n-        atomic_copy64(from--, to--);\n+        AtomicAccess::store(to--, AtomicAccess::load(from--));\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"runtime\/atomicAccess.hpp\"\n@@ -453,4 +454,0 @@\n-static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n-  *(jlong *) dst = *(const jlong *) src;\n-}\n-\n@@ -505,1 +502,1 @@\n-        atomic_copy64(from++, to++);\n+        AtomicAccess::store(to++, AtomicAccess::load(from++));\n@@ -512,1 +509,1 @@\n-        atomic_copy64(from--, to--);\n+        AtomicAccess::store(to--, AtomicAccess::load(from--));\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -128,7 +128,0 @@\n-\/\/ Atomically copy 64 bits of data\n-inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n-  int64_t tmp;\n-  __atomic_load(reinterpret_cast<const volatile int64_t*>(src), &tmp, __ATOMIC_RELAXED);\n-  __atomic_store(reinterpret_cast<volatile int64_t*>(dst), &tmp, __ATOMIC_RELAXED);\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/atomicAccess_linux_zero.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-        atomic_copy64(from++, to++);\n+        AtomicAccess::store(to++, AtomicAccess::load(from++));\n@@ -436,1 +436,1 @@\n-        atomic_copy64(from--, to--);\n+        AtomicAccess::store(to--, AtomicAccess::load(from--));\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}