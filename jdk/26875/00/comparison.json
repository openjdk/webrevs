{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import jtreg.SkippedException;\n+\n@@ -49,2 +51,1 @@\n-            System.out.println(\"Not supported by provider, skipping\");\n-            return;\n+            throw new SkippedException(\"Not supported by provider, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/ReinitCipher.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,4 +32,1 @@\n-import java.io.PrintStream;\n-import java.security.*;\n-import java.security.spec.*;\n-import java.util.Random;\n+import jtreg.SkippedException;\n@@ -37,2 +34,6 @@\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n+import java.security.GeneralSecurityException;\n+import java.security.InvalidAlgorithmParameterException;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n@@ -40,0 +41,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -51,3 +53,2 @@\n-            System.out.println(\"Skip testing \" + p.getName() +\n-                    \", no support for \" + mode);\n-            return;\n+            throw new SkippedException(\"Skip testing \" + p.getName() +\n+                                       \", no support for \" + mode);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/Test4512704.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,5 +34,14 @@\n-import java.security.*;\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n-import java.math.*;\n-import java.io.*;\n+import jtreg.SkippedException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import javax.crypto.Cipher;\n+import javax.crypto.CipherInputStream;\n+import javax.crypto.CipherOutputStream;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.Provider;\n+import java.util.Arrays;\n+import java.util.Random;\n@@ -40,1 +49,0 @@\n-import java.util.*;\n@@ -58,3 +66,2 @@\n-            System.out.println(\"Skip testing \" + p.getName() +\n-                    \", no support for \" + mode);\n-            return;\n+            throw new SkippedException(\"Skip testing \" + p.getName() +\n+                                       \", no support for \" + mode);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestCICOWithGCM.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import jtreg.SkippedException;\n+\n@@ -47,1 +49,0 @@\n-\/\/        test(\"CCM\", p);\n@@ -56,3 +57,2 @@\n-            System.out.println(\"Skip testing \" + p.getName() +\n-                    \", no support for \" + mode);\n-            return;\n+            throw new SkippedException(\"Skip testing \" + p.getName() +\n+                                       \", no support for \" + mode);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestCICOWithGCMAndAAD.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-import jdk.test.lib.Utils;\n+import jtreg.SkippedException;\n@@ -73,2 +73,1 @@\n-            System.out.println(\"Skip; no support for \" + ALGO);\n-            return;\n+            throw new SkippedException(\"Skip; no support for \" + ALGO);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestChaChaPoly.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,2 @@\n-import java.util.*;\n+import jtreg.SkippedException;\n+\n@@ -39,1 +40,0 @@\n-import javax.crypto.spec.ChaCha20ParameterSpec;\n@@ -44,1 +44,5 @@\n-import jdk.test.lib.Convert;\n+import java.util.Arrays;\n+import java.util.HexFormat;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n@@ -129,2 +133,1 @@\n-            System.out.println(\"Skip; no support for \" + ALGO);\n-            return;\n+            throw new SkippedException(\"Skip; no support for \" + ALGO);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestChaChaPolyKAT.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,2 @@\n-import java.util.*;\n+import jtreg.SkippedException;\n+\n@@ -38,1 +39,0 @@\n-import javax.crypto.spec.ChaCha20ParameterSpec;\n@@ -41,1 +41,0 @@\n-import javax.crypto.AEADBadTagException;\n@@ -45,0 +44,5 @@\n+import java.util.Arrays;\n+import java.util.HexFormat;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n@@ -241,2 +245,1 @@\n-            System.out.println(\"Skip; no support for \" + CIPHER_ALGO);\n-            return;\n+            throw new SkippedException(\"Skip; no support for \" + CIPHER_ALGO);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestChaChaPolyNoReuse.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import jtreg.SkippedException;\n+\n@@ -35,1 +37,0 @@\n-import java.security.Key;\n@@ -40,1 +41,0 @@\n-import javax.crypto.spec.ChaCha20ParameterSpec;\n@@ -63,2 +63,1 @@\n-            System.out.println(\"Skip; no support for \" + ALGO);\n-            return;\n+            throw new SkippedException(\"Skip; no support for \" + ALGO);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestChaChaPolyOutputSize.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm TestCipherMode\n+ * @run main\/othervm TestCipherMode AES\/ECB\/PKCS5Padding\n@@ -33,0 +33,20 @@\n+\/*\n+ * @test\n+ * @bug 8265500\n+ * @summary\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestCipherMode AES\/GCM\/NoPadding\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265500\n+ * @summary\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestCipherMode RSA\/ECB\/PKCS1Padding\n+ *\/\n+\n+import jtreg.SkippedException;\n+\n@@ -48,7 +68,2 @@\n-    private static String[] TRANSFORMATIONS = {\n-        \"AES\/ECB\/PKCS5Padding\", \"AES\/GCM\/NoPadding\",\n-        \"RSA\/ECB\/PKCS1Padding\"\n-    };\n-\n-    private static byte[] BYTES16 =\n-            Arrays.copyOf(TRANSFORMATIONS[0].getBytes(), 16);\n+    private static final byte[] BYTES16 =\n+            Arrays.copyOf(\"AES\/ECB\/PKCS5Padding\".getBytes(), 16);\n@@ -59,0 +74,6 @@\n+    private final String transformation;\n+\n+    public TestCipherMode(String transformation) {\n+        this.transformation = transformation;\n+    }\n+\n@@ -92,1 +113,2 @@\n-        main(new TestCipherMode(), args);\n+\n+        main(new TestCipherMode(args[0]), args);\n@@ -100,3 +122,1 @@\n-        for (String t : TRANSFORMATIONS) {\n-            checkModes(t, p);\n-        }\n+        checkModes(transformation, p);\n@@ -110,2 +130,1 @@\n-            System.out.println(\"Skip \" + t + \" due to \" + e.getMessage());\n-            return;\n+            throw new SkippedException(\"Skip \" + t + \" due to \" + e.getMessage());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestCipherMode.java","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,7 @@\n-import java.security.*;\n+import jtreg.SkippedException;\n+\n+import java.security.AlgorithmParameters;\n+import java.security.GeneralSecurityException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.Provider;\n@@ -36,3 +42,5 @@\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n-import java.math.*;\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n@@ -40,1 +48,1 @@\n-import java.util.*;\n+import java.util.Arrays;\n@@ -80,3 +88,2 @@\n-            System.out.println(\"Skip testing \" + p.getName() +\n-                    \", no support for \" + mode);\n-            return;\n+            throw new SkippedException(\"Skip testing \" + p.getName() +\n+                                       \", no support for \" + mode);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestGCMKeyAndIvCheck.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import jtreg.SkippedException;\n+\n@@ -314,3 +316,2 @@\n-            System.out.println(\"Skip testing \" + p.getName() +\n-                    \", no support for \" + transformation);\n-            return;\n+            throw new SkippedException(\"Skip testing \" + p.getName() +\n+                                       \", no support for \" + transformation);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestKATForGCM.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -55,8 +55,8 @@\n-        \/\/ algorithms which use the native padding impl\n-        new CI(\"DES\/CBC\/PKCS5Padding\", \"DES\"),\n-        new CI(\"DESede\/CBC\/PKCS5Padding\", \"DESede\"),\n-        new CI(\"AES\/CBC\/PKCS5Padding\", \"AES\"),\n-        \/\/ algorithms which use SunPKCS11's own padding impl\n-        new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\"),\n-        new CI(\"DESede\/ECB\/PKCS5Padding\", \"DESede\"),\n-        new CI(\"AES\/ECB\/PKCS5Padding\", \"AES\"),\n+            \/\/ algorithms which use the native padding impl\n+            new CI(\"DES\/CBC\/PKCS5Padding\", \"DES\"),\n+            new CI(\"DESede\/CBC\/PKCS5Padding\", \"DESede\"),\n+            new CI(\"AES\/CBC\/PKCS5Padding\", \"AES\"),\n+            \/\/ algorithms which use SunPKCS11's own padding impl\n+            new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\"),\n+            new CI(\"DESede\/ECB\/PKCS5Padding\", \"DESede\"),\n+            new CI(\"AES\/ECB\/PKCS5Padding\", \"AES\"),\n@@ -80,1 +80,1 @@\n-                               System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+                            System.getProperty(\"test.provider.name\", \"SunJCE\"));\n@@ -116,1 +116,1 @@\n-                            nsae);\n+                                       nsae);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestPKCS5PaddingError.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import jtreg.SkippedException;\n@@ -58,2 +59,1 @@\n-            System.out.println(\"Not supported by provider, skipping\");\n-            return;\n+            throw new SkippedException(\"Not supported by provider, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import jtreg.SkippedException;\n@@ -57,2 +58,1 @@\n-            System.out.println(RSA_ALGOS[0] + \" unsupported, skipping\");\n-            return;\n+            throw new SkippedException(RSA_ALGOS[0] + \" unsupported, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipherWrap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import jtreg.SkippedException;\n@@ -52,2 +53,1 @@\n-            System.out.println(\"Not supported by provider, skipping\");\n-            return;\n+            throw new SkippedException(\"Not supported by provider, skipping\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRawRSACipher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm TestSymmCiphers\n+ * @run main\/othervm TestSymmCiphers ARCFOUR ARCFOUR 400\n@@ -35,0 +35,232 @@\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers RC4 RC4 401\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES\/CBC\/NoPadding DES 400\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DESede\/CBC\/NoPadding DESede 160\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/CBC\/NoPadding AES 4800\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers Blowfish\/CBC\/NoPadding Blowfish 24\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES\/cbc\/PKCS5Padding DES 6401\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DESede\/CBC\/PKCS5Padding DESede 402\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/CBC\/PKCS5Padding AES 30\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers Blowfish\/CBC\/PKCS5Padding Blowfish 19\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES\/ECB\/NoPadding DES 400\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DESede\/ECB\/NoPadding DESede 160\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/ECB\/NoPadding AES 4800\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES\/ECB\/PKCS5Padding DES 32\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES\/ECB\/PKCS5Padding DES 6400\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DESede\/ECB\/PKCS5Padding DESede 400\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/ECB\/PKCS5Padding AES 64\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DES DES 6400\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers DESede DESede 408\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES AES 128\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/CTR\/NoPadding AES 3200\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898461 6604496 8330842\n+ * @summary basic test for symmetric ciphers with padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphers AES\/CTS\/NoPadding AES 3200\n+ *\/\n+\n+import jtreg.SkippedException;\n+\n@@ -47,1 +279,1 @@\n-    private static class CI { \/\/ class for holding Cipher Information\n+    private static final StringBuffer debugBuf = new StringBuffer();\n@@ -49,3 +281,3 @@\n-        String transformation;\n-        String keyAlgo;\n-        int dataSize;\n+    private final String transformation;\n+    private final String keyAlgo;\n+    private final int dataSize;\n@@ -53,5 +285,6 @@\n-        CI(String transformation, String keyAlgo, int dataSize) {\n-            this.transformation = transformation;\n-            this.keyAlgo = keyAlgo;\n-            this.dataSize = dataSize;\n-        }\n+    public TestSymmCiphers(String transformation,\n+                           String keyAlgo,\n+                           int dataSize) {\n+        this.transformation = transformation;\n+        this.keyAlgo = keyAlgo;\n+        this.dataSize = dataSize;\n@@ -59,28 +292,0 @@\n-    private static final CI[] TEST_LIST = {\n-        new CI(\"ARCFOUR\", \"ARCFOUR\", 400),\n-        new CI(\"RC4\", \"RC4\", 401),\n-        new CI(\"DES\/CBC\/NoPadding\", \"DES\", 400),\n-        new CI(\"DESede\/CBC\/NoPadding\", \"DESede\", 160),\n-        new CI(\"AES\/CBC\/NoPadding\", \"AES\", 4800),\n-        new CI(\"Blowfish\/CBC\/NoPadding\", \"Blowfish\", 24),\n-        new CI(\"DES\/cbc\/PKCS5Padding\", \"DES\", 6401),\n-        new CI(\"DESede\/CBC\/PKCS5Padding\", \"DESede\", 402),\n-        new CI(\"AES\/CBC\/PKCS5Padding\", \"AES\", 30),\n-        new CI(\"Blowfish\/CBC\/PKCS5Padding\", \"Blowfish\", 19),\n-        new CI(\"DES\/ECB\/NoPadding\", \"DES\", 400),\n-        new CI(\"DESede\/ECB\/NoPadding\", \"DESede\", 160),\n-        new CI(\"AES\/ECB\/NoPadding\", \"AES\", 4800),\n-        new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\", 32),\n-        new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\", 6400),\n-        new CI(\"DESede\/ECB\/PKCS5Padding\", \"DESede\", 400),\n-        new CI(\"AES\/ECB\/PKCS5Padding\", \"AES\", 64),\n-\n-        new CI(\"DES\", \"DES\", 6400),\n-        new CI(\"DESede\", \"DESede\", 408),\n-        new CI(\"AES\", \"AES\", 128),\n-\n-        new CI(\"AES\/CTR\/NoPadding\", \"AES\", 3200),\n-        new CI(\"AES\/CTS\/NoPadding\", \"AES\", 3200),\n-\n-    };\n-    private static final StringBuffer debugBuf = new StringBuffer();\n@@ -93,1 +298,0 @@\n-        boolean status = true;\n@@ -96,32 +300,29 @@\n-            for (int i = 0; i < TEST_LIST.length; i++) {\n-                CI currTest = TEST_LIST[i];\n-                System.out.println(\"===\" + currTest.transformation + \"===\");\n-                try {\n-                    KeyGenerator kg =\n-                            KeyGenerator.getInstance(currTest.keyAlgo, p);\n-                    SecretKey key = kg.generateKey();\n-                    Cipher c1 = Cipher.getInstance(currTest.transformation, p);\n-                    Cipher c2 = Cipher.getInstance(currTest.transformation,\n-                            System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-\n-                    byte[] plainTxt = new byte[currTest.dataSize];\n-                    random.nextBytes(plainTxt);\n-                    System.out.println(\"Testing inLen = \" + plainTxt.length);\n-\n-                    c2.init(Cipher.ENCRYPT_MODE, key);\n-                    AlgorithmParameters params = c2.getParameters();\n-                    byte[] answer = c2.doFinal(plainTxt);\n-                    System.out.println(\"Encryption tests: START\");\n-                    test(c1, Cipher.ENCRYPT_MODE, key, params, firstBlkSize,\n-                            plainTxt, answer);\n-                    System.out.println(\"Encryption tests: DONE\");\n-                    c2.init(Cipher.DECRYPT_MODE, key, params);\n-                    byte[] answer2 = c2.doFinal(answer);\n-                    System.out.println(\"Decryption tests: START\");\n-                    test(c1, Cipher.DECRYPT_MODE, key, params, firstBlkSize,\n-                            answer, answer2);\n-                    System.out.println(\"Decryption tests: DONE\");\n-                } catch (NoSuchAlgorithmException nsae) {\n-                    System.out.println(\"Skipping unsupported algorithm: \" +\n-                            nsae);\n-                }\n+            System.out.println(\"===\" + transformation + \"===\");\n+            try {\n+                KeyGenerator kg =\n+                        KeyGenerator.getInstance(keyAlgo, p);\n+                SecretKey key = kg.generateKey();\n+                Cipher c1 = Cipher.getInstance(transformation, p);\n+                Cipher c2 = Cipher.getInstance(transformation,\n+                        System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+\n+                byte[] plainTxt = new byte[dataSize];\n+                random.nextBytes(plainTxt);\n+                System.out.println(\"Testing inLen = \" + plainTxt.length);\n+\n+                c2.init(Cipher.ENCRYPT_MODE, key);\n+                AlgorithmParameters params = c2.getParameters();\n+                byte[] answer = c2.doFinal(plainTxt);\n+                System.out.println(\"Encryption tests: START\");\n+                test(c1, Cipher.ENCRYPT_MODE, key, params, firstBlkSize,\n+                        plainTxt, answer);\n+                System.out.println(\"Encryption tests: DONE\");\n+                c2.init(Cipher.DECRYPT_MODE, key, params);\n+                byte[] answer2 = c2.doFinal(answer);\n+                System.out.println(\"Decryption tests: START\");\n+                test(c1, Cipher.DECRYPT_MODE, key, params, firstBlkSize,\n+                        answer, answer2);\n+                System.out.println(\"Decryption tests: DONE\");\n+            } catch (NoSuchAlgorithmException nsae) {\n+                throw new SkippedException(\"Skipping unsupported algorithm: \" +\n+                                           nsae);\n@@ -137,2 +338,2 @@\n-            AlgorithmParameters params, int firstBlkSize,\n-            byte[] in, byte[] answer) throws Exception {\n+                             AlgorithmParameters params, int firstBlkSize,\n+                             byte[] in, byte[] answer) throws Exception {\n@@ -143,1 +344,0 @@\n-        \/\/debugOut(\"Estimated output size = \" + outLen + \"\\n\");\n@@ -156,2 +356,0 @@\n-        \/\/debugOut(\"Test#1:\\n\");\n-\n@@ -175,4 +373,0 @@\n-        \/\/debugOut(\"Test#2:\\n\");\n-        \/\/debugOut(\"inputBuf: \" + inBuf + \"\\n\");\n-        \/\/debugOut(\"outputBuf: \" + outBuf + \"\\n\");\n-\n@@ -187,4 +381,0 @@\n-        \/\/debugOut(\"Test#3:\\n\");\n-        \/\/debugOut(\"(pre) inputBuf: \" + inDirectBuf + \"\\n\");\n-        \/\/debugOut(\"(pre) outputBuf: \" + outDirectBuf + \"\\n\");\n-\n@@ -197,2 +387,0 @@\n-        \/\/debugOut(\"(post) inputBuf: \" + inDirectBuf + \"\\n\");\n-        \/\/debugOut(\"(post) outputBuf: \" + outDirectBuf + \"\\n\");\n@@ -202,1 +390,0 @@\n-        \/\/debugOut(\"Test#4:\\n\");\n@@ -205,2 +392,0 @@\n-        \/\/debugOut(\"inputBuf: \" + inDirectBuf + \"\\n\");\n-        \/\/debugOut(\"outputBuf: \" + outBuf + \"\\n\");\n@@ -216,1 +401,0 @@\n-        \/\/debugOut(\"Test#5:\\n\");\n@@ -220,3 +404,0 @@\n-        \/\/debugOut(\"(pre) inputBuf: \" + inBuf + \"\\n\");\n-        \/\/debugOut(\"(pre) outputBuf: \" + outDirectBuf + \"\\n\");\n-\n@@ -229,2 +410,0 @@\n-        \/\/debugOut(\"(post) inputBuf: \" + inBuf + \"\\n\");\n-        \/\/debugOut(\"(post) outputBuf: \" + outDirectBuf + \"\\n\");\n@@ -268,1 +447,1 @@\n-        main(new TestSymmCiphers(), args);\n+        main(new TestSymmCiphers(args[0], args[1], Integer.parseInt(args[2])), args);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestSymmCiphers.java","additions":276,"deletions":97,"binary":false,"changes":373,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm TestSymmCiphersNoPad\n+ * @run main\/othervm TestSymmCiphersNoPad ARCFOUR ARCFOUR 400\n@@ -35,0 +35,101 @@\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad RC4 RC4 401\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad DES\/CBC\/NoPadding DES 400\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad DESede\/CBC\/NoPadding DESede 160\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad AES\/CBC\/NoPadding AES 4800\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad Blowfish\/CBC\/NoPadding Blowfish 24\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad AES\/CTR\/NoPadding AES 1600\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad AES\/CTR\/NoPadding AES 65\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad AES\/CTS\/NoPadding AES 1600\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4898484 6604496 8001284 8330842\n+ * @summary basic test for symmetric ciphers with no padding\n+ * @author Valerie Peng\n+ * @library \/test\/lib ..\n+ * @key randomness\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm TestSymmCiphersNoPad AES\/CTS\/NoPadding AES 65\n+ *\/\n+\n+import jtreg.SkippedException;\n+\n@@ -50,11 +151,1 @@\n-    private static class CI { \/\/ class for holding Cipher Information\n-        String transformation;\n-        String keyAlgo;\n-        int dataSize;\n-\n-        CI(String transformation, String keyAlgo, int dataSize) {\n-            this.transformation = transformation;\n-            this.keyAlgo = keyAlgo;\n-            this.dataSize = dataSize;\n-        }\n-    }\n+    private static final StringBuffer debugBuf = new StringBuffer();\n@@ -62,12 +153,3 @@\n-    private static final CI TEST_LIST[] = {\n-        new CI(\"ARCFOUR\", \"ARCFOUR\", 400),\n-        new CI(\"RC4\", \"RC4\", 401),\n-        new CI(\"DES\/CBC\/NoPadding\", \"DES\", 400),\n-        new CI(\"DESede\/CBC\/NoPadding\", \"DESede\", 160),\n-        new CI(\"AES\/CBC\/NoPadding\", \"AES\", 4800),\n-        new CI(\"Blowfish\/CBC\/NoPadding\", \"Blowfish\", 24),\n-        new CI(\"AES\/CTR\/NoPadding\", \"AES\", 1600),\n-        new CI(\"AES\/CTR\/NoPadding\", \"AES\", 65),\n-        new CI(\"AES\/CTS\/NoPadding\", \"AES\", 1600),\n-        new CI(\"AES\/CTS\/NoPadding\", \"AES\", 65),\n-    };\n+    private final String transformation;\n+    private final String keyAlgo;\n+    private final int dataSize;\n@@ -75,1 +157,7 @@\n-    private static final StringBuffer debugBuf = new StringBuffer();\n+    public TestSymmCiphersNoPad(String transformation,\n+                                String keyAlgo,\n+                                int dataSize) {\n+        this.transformation = transformation;\n+        this.keyAlgo = keyAlgo;\n+        this.dataSize = dataSize;\n+    }\n@@ -79,1 +167,0 @@\n-        boolean status = true;\n@@ -82,30 +169,27 @@\n-            for (int i = 0; i < TEST_LIST.length; i++) {\n-                CI currTest = TEST_LIST[i];\n-                System.out.println(\"===\" + currTest.transformation + \"===\");\n-                try {\n-                    KeyGenerator kg =\n-                        KeyGenerator.getInstance(currTest.keyAlgo, p);\n-                    SecretKey key = kg.generateKey();\n-                    Cipher c1 = Cipher.getInstance(currTest.transformation, p);\n-                    Cipher c2 = Cipher.getInstance(currTest.transformation,\n-                               System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-\n-                    byte[] plainTxt = new byte[currTest.dataSize];\n-                    random.nextBytes(plainTxt);\n-                    System.out.println(\"Testing inLen = \" + plainTxt.length);\n-\n-                    c2.init(Cipher.ENCRYPT_MODE, key);\n-                    AlgorithmParameters params = c2.getParameters();\n-                    byte[] answer = c2.doFinal(plainTxt);\n-                    test(c1, Cipher.ENCRYPT_MODE, key, params,\n-                         plainTxt, answer);\n-                    System.out.println(\"Encryption tests: DONE\");\n-                    c2.init(Cipher.DECRYPT_MODE, key, params);\n-                    byte[] answer2 = c2.doFinal(answer);\n-                    test(c1, Cipher.DECRYPT_MODE, key, params,\n-                         answer, answer2);\n-                    System.out.println(\"Decryption tests: DONE\");\n-                } catch (NoSuchAlgorithmException nsae) {\n-                    System.out.println(\"Skipping unsupported algorithm: \" +\n-                                       nsae);\n-                }\n+            System.out.println(\"===\" + transformation + \"===\");\n+            try {\n+                KeyGenerator kg =\n+                        KeyGenerator.getInstance(keyAlgo, p);\n+                SecretKey key = kg.generateKey();\n+                Cipher c1 = Cipher.getInstance(transformation, p);\n+                Cipher c2 = Cipher.getInstance(transformation,\n+                        System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+\n+                byte[] plainTxt = new byte[dataSize];\n+                random.nextBytes(plainTxt);\n+                System.out.println(\"Testing inLen = \" + plainTxt.length);\n+\n+                c2.init(Cipher.ENCRYPT_MODE, key);\n+                AlgorithmParameters params = c2.getParameters();\n+                byte[] answer = c2.doFinal(plainTxt);\n+                test(c1, Cipher.ENCRYPT_MODE, key, params,\n+                        plainTxt, answer);\n+                System.out.println(\"Encryption tests: DONE\");\n+                c2.init(Cipher.DECRYPT_MODE, key, params);\n+                byte[] answer2 = c2.doFinal(answer);\n+                test(c1, Cipher.DECRYPT_MODE, key, params,\n+                        answer, answer2);\n+                System.out.println(\"Decryption tests: DONE\");\n+            } catch (NoSuchAlgorithmException nsae) {\n+                throw new SkippedException(\"Skipping unsupported algorithm: \" +\n+                                           nsae);\n@@ -242,1 +326,1 @@\n-        main(new TestSymmCiphersNoPad(), args);\n+        main(new TestSymmCiphersNoPad(args[0], args[1], Integer.parseInt(args[2])), args);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestSymmCiphersNoPad.java","additions":142,"deletions":58,"binary":false,"changes":200,"status":"modified"}]}