{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.ArrayList;\n@@ -44,0 +45,1 @@\n+import java.util.List;\n@@ -50,0 +52,5 @@\n+    private static final String[] TRANSFORMATIONS = {\n+            \"AES\/ECB\/PKCS5Padding\", \"AES\/GCM\/NoPadding\",\n+            \"RSA\/ECB\/PKCS1Padding\"\n+    };\n+\n@@ -56,6 +63,0 @@\n-    private final String transformation;\n-\n-    public TestCipherMode(String transformation) {\n-        this.transformation = transformation;\n-    }\n-\n@@ -95,3 +96,2 @@\n-        final String[] transformations = {\n-                \"AES\/ECB\/PKCS5Padding\", \"AES\/GCM\/NoPadding\", \"RSA\/ECB\/PKCS1Padding\"\n-        };\n+        main(new TestCipherMode(), args);\n+    }\n@@ -99,2 +99,7 @@\n-        boolean skipEncountered = false;\n-        for (final String t : transformations) {\n+    @Override\n+    public void main(Provider p) throws Exception {\n+\n+        \/\/ test all cipher impls, e.g. P11Cipher, P11AEADCipher, and\n+        \/\/ P11RSACipher\n+        List<String> skipped = new ArrayList<>();\n+        for (final String t : TRANSFORMATIONS) {\n@@ -102,1 +107,1 @@\n-                main(new TestCipherMode(t), args);\n+                checkModes(t, p);\n@@ -106,1 +111,1 @@\n-                skipEncountered = true;\n+                skipped.add(t);\n@@ -110,2 +115,4 @@\n-        if (skipEncountered) {\n-            throw new SkippedException(\"One or more transformations skipped\");\n+        if (!skipped.isEmpty()) {\n+            throw new SkippedException(\"Some tests failed: \" + skipped);\n+        } else {\n+            System.out.println(\"All tests passed\");\n@@ -113,10 +120,0 @@\n-\n-    }\n-\n-    @Override\n-    public void main(Provider p) throws Exception {\n-\n-        \/\/ test all cipher impls, e.g. P11Cipher, P11AEADCipher, and\n-        \/\/ P11RSACipher\n-        checkModes(transformation, p);\n-        System.out.println(\"All tests passed\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestCipherMode.java","additions":22,"deletions":25,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-*\/\n+ *\/\n@@ -42,0 +42,1 @@\n+import java.util.ArrayList;\n@@ -50,0 +51,29 @@\n+    private record CI (String transformation, String keyAlgo, int dataSize){}  \/\/ record for holding Cipher Information\n+\n+    private static final CI[] TEST_LIST = {\n+            new CI(\"ARCFOUR\", \"ARCFOUR\", 400),\n+            new CI(\"RC4\", \"RC4\", 401),\n+            new CI(\"DES\/CBC\/NoPadding\", \"DES\", 400),\n+            new CI(\"DESede\/CBC\/NoPadding\", \"DESede\", 160),\n+            new CI(\"AES\/CBC\/NoPadding\", \"AES\", 4800),\n+            new CI(\"Blowfish\/CBC\/NoPadding\", \"Blowfish\", 24),\n+            new CI(\"DES\/cbc\/PKCS5Padding\", \"DES\", 6401),\n+            new CI(\"DESede\/CBC\/PKCS5Padding\", \"DESede\", 402),\n+            new CI(\"AES\/CBC\/PKCS5Padding\", \"AES\", 30),\n+            new CI(\"Blowfish\/CBC\/PKCS5Padding\", \"Blowfish\", 19),\n+            new CI(\"DES\/ECB\/NoPadding\", \"DES\", 400),\n+            new CI(\"DESede\/ECB\/NoPadding\", \"DESede\", 160),\n+            new CI(\"AES\/ECB\/NoPadding\", \"AES\", 4800),\n+            new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\", 32),\n+            new CI(\"DES\/ECB\/PKCS5Padding\", \"DES\", 6400),\n+            new CI(\"DESede\/ECB\/PKCS5Padding\", \"DESede\", 400),\n+            new CI(\"AES\/ECB\/PKCS5Padding\", \"AES\", 64),\n+\n+            new CI(\"DES\", \"DES\", 6400),\n+            new CI(\"DESede\", \"DESede\", 408),\n+            new CI(\"AES\", \"AES\", 128),\n+\n+            new CI(\"AES\/CTR\/NoPadding\", \"AES\", 3200),\n+            new CI(\"AES\/CTS\/NoPadding\", \"AES\", 3200),\n+\n+    };\n@@ -52,12 +82,0 @@\n-    private final String transformation;\n-    private final String keyAlgo;\n-    private final int dataSize;\n-\n-    public TestSymmCiphers(String transformation,\n-                           String keyAlgo,\n-                           int dataSize) {\n-        this.transformation = transformation;\n-        this.keyAlgo = keyAlgo;\n-        this.dataSize = dataSize;\n-    }\n-\n@@ -69,0 +87,1 @@\n+        List<CI> skippedList = new ArrayList<>();\n@@ -71,29 +90,32 @@\n-            System.out.println(\"===\" + transformation + \"===\");\n-            try {\n-                KeyGenerator kg =\n-                        KeyGenerator.getInstance(keyAlgo, p);\n-                SecretKey key = kg.generateKey();\n-                Cipher c1 = Cipher.getInstance(transformation, p);\n-                Cipher c2 = Cipher.getInstance(transformation,\n-                        System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-\n-                byte[] plainTxt = new byte[dataSize];\n-                random.nextBytes(plainTxt);\n-                System.out.println(\"Testing inLen = \" + plainTxt.length);\n-\n-                c2.init(Cipher.ENCRYPT_MODE, key);\n-                AlgorithmParameters params = c2.getParameters();\n-                byte[] answer = c2.doFinal(plainTxt);\n-                System.out.println(\"Encryption tests: START\");\n-                test(c1, Cipher.ENCRYPT_MODE, key, params, firstBlkSize,\n-                        plainTxt, answer);\n-                System.out.println(\"Encryption tests: DONE\");\n-                c2.init(Cipher.DECRYPT_MODE, key, params);\n-                byte[] answer2 = c2.doFinal(answer);\n-                System.out.println(\"Decryption tests: START\");\n-                test(c1, Cipher.DECRYPT_MODE, key, params, firstBlkSize,\n-                        answer, answer2);\n-                System.out.println(\"Decryption tests: DONE\");\n-            } catch (NoSuchAlgorithmException nsae) {\n-                throw new SkippedException(\"Skipping unsupported algorithm: \" +\n-                                           nsae);\n+            for (CI currTest : TEST_LIST) {\n+                System.out.println(\"===\" + currTest.transformation + \"===\");\n+                try {\n+                    KeyGenerator kg =\n+                            KeyGenerator.getInstance(currTest.keyAlgo, p);\n+                    SecretKey key = kg.generateKey();\n+                    Cipher c1 = Cipher.getInstance(currTest.transformation, p);\n+                    Cipher c2 = Cipher.getInstance(currTest.transformation,\n+                            System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+\n+                    byte[] plainTxt = new byte[currTest.dataSize];\n+                    random.nextBytes(plainTxt);\n+                    System.out.println(\"Testing inLen = \" + plainTxt.length);\n+\n+                    c2.init(Cipher.ENCRYPT_MODE, key);\n+                    AlgorithmParameters params = c2.getParameters();\n+                    byte[] answer = c2.doFinal(plainTxt);\n+                    System.out.println(\"Encryption tests: START\");\n+                    test(c1, Cipher.ENCRYPT_MODE, key, params, firstBlkSize,\n+                            plainTxt, answer);\n+                    System.out.println(\"Encryption tests: DONE\");\n+                    c2.init(Cipher.DECRYPT_MODE, key, params);\n+                    byte[] answer2 = c2.doFinal(answer);\n+                    System.out.println(\"Decryption tests: START\");\n+                    test(c1, Cipher.DECRYPT_MODE, key, params, firstBlkSize,\n+                            answer, answer2);\n+                    System.out.println(\"Decryption tests: DONE\");\n+                } catch (NoSuchAlgorithmException nsae) {\n+                    System.out.println(\"Skipping unsupported algorithm: \" +\n+                                       nsae);\n+                    skippedList.add(currTest);\n+                }\n@@ -106,0 +128,4 @@\n+\n+        if (!skippedList.isEmpty()){\n+            throw new SkippedException(\"Some tests failed: \" + skippedList);\n+        }\n@@ -115,0 +141,1 @@\n+        \/\/debugOut(\"Estimated output size = \" + outLen + \"\\n\");\n@@ -127,0 +154,2 @@\n+        \/\/debugOut(\"Test#1:\\n\");\n+\n@@ -144,0 +173,4 @@\n+        \/\/debugOut(\"Test#2:\\n\");\n+        \/\/debugOut(\"inputBuf: \" + inBuf + \"\\n\");\n+        \/\/debugOut(\"outputBuf: \" + outBuf + \"\\n\");\n+\n@@ -152,0 +185,4 @@\n+        \/\/debugOut(\"Test#3:\\n\");\n+        \/\/debugOut(\"(pre) inputBuf: \" + inDirectBuf + \"\\n\");\n+        \/\/debugOut(\"(pre) outputBuf: \" + outDirectBuf + \"\\n\");\n+\n@@ -158,0 +195,2 @@\n+        \/\/debugOut(\"(post) inputBuf: \" + inDirectBuf + \"\\n\");\n+        \/\/debugOut(\"(post) outputBuf: \" + outDirectBuf + \"\\n\");\n@@ -161,0 +200,1 @@\n+        \/\/debugOut(\"Test#4:\\n\");\n@@ -163,0 +203,2 @@\n+        \/\/debugOut(\"inputBuf: \" + inDirectBuf + \"\\n\");\n+        \/\/debugOut(\"outputBuf: \" + outBuf + \"\\n\");\n@@ -172,0 +214,1 @@\n+        \/\/debugOut(\"Test#5:\\n\");\n@@ -175,0 +218,3 @@\n+        \/\/debugOut(\"(pre) inputBuf: \" + inBuf + \"\\n\");\n+        \/\/debugOut(\"(pre) outputBuf: \" + outDirectBuf + \"\\n\");\n+\n@@ -181,0 +227,2 @@\n+        \/\/debugOut(\"(post) inputBuf: \" + inBuf + \"\\n\");\n+        \/\/debugOut(\"(post) outputBuf: \" + outDirectBuf + \"\\n\");\n@@ -218,42 +266,1 @@\n-\n-        final List<String[]> tests = List.of(\n-                new String[]{\"ARCFOUR\", \"ARCFOUR\", \"400\"},\n-                new String[]{\"RC4\", \"RC4\", \"401\"},\n-                new String[]{\"DES\/CBC\/NoPadding\", \"DES\", \"400\"},\n-                new String[]{\"DESede\/CBC\/NoPadding\", \"DESede\", \"160\"},\n-                new String[]{\"AES\/CBC\/NoPadding\", \"AES\", \"4800\"},\n-                new String[]{\"Blowfish\/CBC\/NoPadding\", \"Blowfish\", \"24\"},\n-                new String[]{\"DES\/cbc\/PKCS5Padding\", \"DES\", \"6401\"},\n-                new String[]{\"DESede\/CBC\/PKCS5Padding\", \"DESede\", \"402\"},\n-                new String[]{\"AES\/CBC\/PKCS5Padding\", \"AES\", \"30\"},\n-                new String[]{\"Blowfish\/CBC\/PKCS5Padding\", \"Blowfish\", \"19\"},\n-                new String[]{\"DES\/ECB\/NoPadding\", \"DES\", \"400\"},\n-                new String[]{\"DESede\/ECB\/NoPadding\", \"DESede\", \"160\"},\n-                new String[]{\"AES\/ECB\/NoPadding\", \"AES\", \"4800\"},\n-                new String[]{\"DES\/ECB\/PKCS5Padding\", \"DES\", \"32\"},\n-                new String[]{\"DES\/ECB\/PKCS5Padding\", \"DES\", \"6400\"},\n-                new String[]{\"DESede\/ECB\/PKCS5Padding\", \"DESede\", \"400\"},\n-                new String[]{\"AES\/ECB\/PKCS5Padding\", \"AES\", \"64\"},\n-\n-                new String[]{\"DES\", \"DES\", \"6400\"},\n-                new String[]{\"DESede\", \"DESede\", \"408\"},\n-                new String[]{\"AES\", \"AES\", \"128\"},\n-\n-                new String[]{\"AES\/CTR\/NoPadding\", \"AES\", \"3200\"},\n-                new String[]{\"AES\/CTS\/NoPadding\", \"AES\", \"3200\"}\n-\n-        );\n-\n-        boolean skipEncountered = false;\n-        for (final String[] t : tests) {\n-            try {\n-                main(new TestSymmCiphers(t[0], t[1], Integer.parseInt(t[2])), args);\n-            } catch (SkippedException skippedException) {\n-                skippedException.printStackTrace(System.err);\n-                skipEncountered = true;\n-            }\n-        }\n-\n-        if (skipEncountered) {\n-            throw new SkippedException(\"One or more tests skipped\");\n-        }\n+        main(new TestSymmCiphers(), args);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestSymmCiphers.java","additions":91,"deletions":84,"binary":false,"changes":175,"status":"modified"}]}