{"files":[{"patch":"@@ -25,0 +25,5 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.nio.charset.StandardCharsets;\n@@ -36,0 +41,2 @@\n+import jtreg.SkippedException;\n+\n@@ -43,1 +50,1 @@\n- * @run driver TestJhsdbJstackMixedWithXComp\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED TestJhsdbJstackMixedWithXComp\n@@ -47,0 +54,50 @@\n+    \/**\n+     * On Linux, check glibc version before the test and return true if it is\n+     * 2.39 or later. The test which needs to unwind native call stacks like\n+     * \"jhsdb jstack --mixed\" should be skip the test when this checker method\n+     * returns false.\n+     * The problem is not to unwind all of call stacks the process is running on\n+     * older glibc. It happens Debian 12, Ubuntu 22.04 (glibc 2.35) and\n+     * Ubuntu 23.04 (glibc 2.37) at least. It works on Ubuntu 24.04 (glibc 2.39).\n+     * The problem happenes both AMD64 and AArch64.\n+     *\/\n+    private static boolean canAttachLinuxOnCurrentGLIBC() {\n+        var linker = Linker.nativeLinker();\n+        var lookup = linker.defaultLookup();\n+        var sym = lookup.find(\"gnu_get_libc_version\");\n+        if (sym.isEmpty()) {\n+            \/\/ Maybe the platform is not on glibc (Windows, Mac, musl on Alpine).\n+            \/\/ Go ahead.\n+            return true;\n+        }\n+\n+        \/\/ Call gnu_get_libc_version()\n+        var desc = FunctionDescriptor.of(ValueLayout.ADDRESS);\n+        var func = linker.downcallHandle(sym.get(), desc);\n+        MemorySegment result;\n+        try {\n+            result = (MemorySegment)func.invoke();\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+\n+        \/\/ Set the length of glibc version because FFM does not know memory size\n+        \/\/ returned by gnu_get_libc_version().\n+        var strlenSym = lookup.find(\"strlen\");\n+        var strlenDesc = FunctionDescriptor.of(linker.canonicalLayouts().get(\"size_t\"), ValueLayout.ADDRESS);\n+        var strlenFunc = linker.downcallHandle(strlenSym.get(), strlenDesc);\n+        long len;\n+        try {\n+            len = (long)strlenFunc.invoke(result);\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+\n+        result = result.reinterpret(len + 1); \/\/ includes NUL\n+        String[] ver = result.getString(0, StandardCharsets.US_ASCII).split(\"\\\\.\");\n+        int major = Integer.parseInt(ver[0]);\n+        int minor = Integer.parseInt(ver[1]);\n+\n+        return major > 2 || (major == 2 && minor >= 39);\n+    }\n+\n@@ -91,0 +148,4 @@\n+        if (!canAttachLinuxOnCurrentGLIBC()) {\n+            throw new SkippedException(\"SA Attach not expected to work. glibc is 2.38 or earlier.\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackMixedWithXComp.java","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"}]}