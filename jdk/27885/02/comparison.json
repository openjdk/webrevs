{"files":[{"patch":"@@ -39,0 +39,5 @@\n+  \/** Find sender frame with given FP and PC *\/\n+  public default CFrame sender(ThreadProxy th, Address fp, Address pc) {\n+    return sender(th);\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/cdbg\/CFrame.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+   @Override\n@@ -57,2 +58,2 @@\n-      AARCH64ThreadContext context = (AARCH64ThreadContext) thread.getContext();\n-      Address rsp = context.getRegisterAsAddress(AARCH64ThreadContext.SP);\n+      return sender(thread, null, null);\n+   }\n@@ -60,2 +61,13 @@\n-      if ((fp == null) || fp.lessThan(rsp)) {\n-        return null;\n+   @Override\n+   public CFrame sender(ThreadProxy thread, Address nextFP, Address nextPC) {\n+      \/\/ Check fp\n+      \/\/ Skip if both nextFP and nextPC are given - do not need to load from fp.\n+      if (nextFP == null && nextPC == null) {\n+        if (fp == null) {\n+          return null;\n+        }\n+\n+        \/\/ Check alignment of fp\n+        if (dbg.getAddressValue(fp) % (2 * ADDRESS_SIZE) != 0) {\n+          return null;\n+        }\n@@ -64,2 +76,4 @@\n-      \/\/ Check alignment of fp\n-      if (dbg.getAddressValue(fp) % (2 * ADDRESS_SIZE) != 0) {\n+      if (nextFP == null) {\n+        nextFP = fp.getAddressAt(0 * ADDRESS_SIZE);\n+      }\n+      if (nextFP == null) {\n@@ -69,3 +83,2 @@\n-      Address nextFP = fp.getAddressAt(0 * ADDRESS_SIZE);\n-      if (nextFP == null || nextFP.lessThanOrEqual(fp)) {\n-        return null;\n+      if (nextPC == null) {\n+        nextPC  = fp.getAddressAt(1 * ADDRESS_SIZE);\n@@ -73,1 +86,0 @@\n-      Address nextPC  = fp.getAddressAt(1 * ADDRESS_SIZE);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/aarch64\/LinuxAARCH64CFrame.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -99,2 +99,1 @@\n-     return (nextCFA != null) &&\n-             !nextCFA.lessThan(context.getRegisterAsAddress(AMD64ThreadContext.RSP));\n+     return nextCFA != null;\n@@ -103,1 +102,1 @@\n-   private Address getNextCFA(DwarfParser nextDwarf, ThreadContext context) {\n+   private Address getNextCFA(DwarfParser nextDwarf, ThreadContext context, Address senderFP) {\n@@ -106,0 +105,4 @@\n+     if (senderFP == null) {\n+       senderFP = cfa.getAddressAt(0);  \/\/ RBP by default\n+     }\n+\n@@ -107,1 +110,1 @@\n-       nextCFA = (dwarf == null) ? cfa.getAddressAt(0) \/\/ Current frame is Java (Use RBP)\n+       nextCFA = (dwarf == null) ? senderFP \/\/ Current frame is Java\n@@ -110,2 +113,2 @@\n-       if (dwarf == null) { \/\/ Current frame is Java (Use RBP)\n-         nextCFA = cfa.getAddressAt(0);\n+       if (dwarf == null) { \/\/ Current frame is Java\n+         nextCFA = senderFP;\n@@ -135,1 +138,6 @@\n-   public CFrame sender(ThreadProxy thread) {\n+   public CFrame sender(ThreadProxy th) {\n+     return sender(th, null, null);\n+   }\n+\n+   @Override\n+   public CFrame sender(ThreadProxy th, Address fp, Address pc) {\n@@ -140,1 +148,1 @@\n-     ThreadContext context = thread.getContext();\n+     ThreadContext context = th.getContext();\n@@ -142,1 +150,1 @@\n-     Address nextPC = getNextPC(dwarf != null);\n+     Address nextPC = pc != null ? pc : getNextPC(dwarf != null);\n@@ -168,1 +176,1 @@\n-     Address nextCFA = getNextCFA(nextDwarf, context);\n+     Address nextCFA = getNextCFA(nextDwarf, context, fp);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/amd64\/LinuxAMD64CFrame.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+   @Override\n@@ -61,2 +62,2 @@\n-      RISCV64ThreadContext context = (RISCV64ThreadContext) thread.getContext();\n-      Address rsp = context.getRegisterAsAddress(RISCV64ThreadContext.SP);\n+      return sender(thread, null, null);\n+   }\n@@ -64,2 +65,13 @@\n-      if ((fp == null) || fp.lessThan(rsp)) {\n-        return null;\n+   @Override\n+   public CFrame sender(ThreadProxy thread, Address nextFP, Address nextPC) {\n+      \/\/ Check fp\n+      \/\/ Skip if both nextFP and nextPC are given - do not need to load from fp.\n+      if (nextFP == null && nextPC == null) {\n+        if (fp == null) {\n+          return null;\n+        }\n+\n+        \/\/ Check alignment of fp\n+        if (dbg.getAddressValue(fp) % (2 * ADDRESS_SIZE) != 0) {\n+          return null;\n+        }\n@@ -68,2 +80,4 @@\n-      \/\/ Check alignment of fp\n-      if (dbg.getAddressValue(fp) % (2 * ADDRESS_SIZE) != 0) {\n+      if (nextFP == null) {\n+        nextFP = fp.getAddressAt(C_FRAME_LINK_OFFSET * ADDRESS_SIZE);\n+      }\n+      if (nextFP == null) {\n@@ -73,3 +87,2 @@\n-      Address nextFP = fp.getAddressAt(C_FRAME_LINK_OFFSET * ADDRESS_SIZE);\n-      if (nextFP == null || nextFP.lessThanOrEqual(fp)) {\n-        return null;\n+      if (nextPC == null) {\n+        nextPC = fp.getAddressAt(C_FRAME_RETURN_ADDR_OFFSET * ADDRESS_SIZE);\n@@ -77,1 +90,0 @@\n-      Address nextPC  = fp.getAddressAt(C_FRAME_RETURN_ADDR_OFFSET * ADDRESS_SIZE);\n@@ -81,0 +93,1 @@\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/riscv64\/LinuxRISCV64CFrame.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -112,0 +112,2 @@\n+                  Address senderFP = null;\n+                  Address senderPC = null;\n@@ -128,1 +130,1 @@\n-                      String[] names = null;\n+                      JavaNameInfo nameInfo = null;\n@@ -132,1 +134,1 @@\n-                         names = getJavaNames(th, f.localVariableBase());\n+                         nameInfo = getJavaNames(th, f.localVariableBase());\n@@ -134,1 +136,1 @@\n-                         if (names == null || names.length == 0) {\n+                         if (nameInfo == null || nameInfo.names() == null || nameInfo.names().length == 0) {\n@@ -157,1 +159,1 @@\n-                                  names = getJavaNames(th, f.localVariableBase());\n+                                  nameInfo = getJavaNames(th, f.localVariableBase());\n@@ -159,1 +161,1 @@\n-                                  if (names == null || names.length == 0) {\n+                                  if (nameInfo == null || nameInfo.names() == null || nameInfo.names().length == 0) {\n@@ -171,5 +173,8 @@\n-                      if (names != null && names.length != 0) {\n-                         \/\/ print java frame(s)\n-                         for (int i = 0; i < names.length; i++) {\n-                             if (i > 0) {\n-                                 out.print(fillerForAddress);\n+                      if (nameInfo != null) {\n+                         if (nameInfo.names() != null && nameInfo.names().length != 0) {\n+                             \/\/ print java frame(s)\n+                             for (int i = 0; i < nameInfo.names().length; i++) {\n+                                 if (i > 0) {\n+                                     out.print(fillerForAddress);\n+                                 }\n+                                 out.println(nameInfo.names()[i]);\n@@ -177,1 +182,0 @@\n-                             out.println(names[i]);\n@@ -179,0 +183,2 @@\n+                         senderFP = nameInfo.senderFP();\n+                         senderPC = nameInfo.senderPC();\n@@ -181,1 +187,1 @@\n-                  f = f.sender(th);\n+                  f = f.sender(th, senderFP, senderPC);\n@@ -242,1 +248,3 @@\n-   private String[] getJavaNames(ThreadProxy th, Address fp) {\n+   private static record JavaNameInfo(String[] names, Address senderFP, Address senderPC) {};\n+\n+   private JavaNameInfo getJavaNames(ThreadProxy th, Address fp) {\n@@ -248,0 +256,1 @@\n+\n@@ -249,0 +258,1 @@\n+      JavaVFrame bottomJVFrame = null;\n@@ -253,0 +263,1 @@\n+            bottomJVFrame = vf;\n@@ -283,2 +294,10 @@\n-      String[] res = names.toArray(new String[0]);\n-      return res;\n+\n+      Address senderFP = null;\n+      Address senderPC = null;\n+      if (bottomJVFrame != null) {\n+         Frame senderFrame = bottomJVFrame.getFrame().sender((RegisterMap)bottomJVFrame.getRegisterMap().clone());\n+         senderFP = senderFrame.getFP();\n+         senderPC = senderFrame.getPC();\n+      }\n+\n+      return new JavaNameInfo(names.toArray(new String[0]), senderFP, senderPC);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":34,"deletions":15,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, NTT DATA\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.SA.SATestUtils;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @bug 8370176\n+ * @requires vm.hasSA\n+ * @requires os.family == \"linux\"\n+ * @requires (os.arch == \"amd64\" | os.arch == \"aarch64\" | os.arch == \"riscv64\")\n+ * @library \/test\/lib\n+ * @run driver TestJhsdbJstackMixedWithXComp\n+ *\/\n+public class TestJhsdbJstackMixedWithXComp {\n+\n+    private static void runJstack(LingeredApp app) throws Exception {\n+        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+        launcher.addVMArgs(Utils.getFilteredTestJavaOpts(\"-showversion\"));\n+        launcher.addToolArg(\"jstack\");\n+        launcher.addToolArg(\"--mixed\");\n+        launcher.addToolArg(\"--pid\");\n+        launcher.addToolArg(Long.toString(app.getPid()));\n+\n+        ProcessBuilder pb = SATestUtils.createProcessBuilder(launcher);\n+        Process jhsdb = pb.start();\n+        OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+        jhsdb.waitFor();\n+\n+        String stdout = out.getStdout();\n+        System.out.println(stdout);\n+        System.err.println(out.getStderr());\n+\n+        out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+\n+        List<String> targetStackTrace = new ArrayList<>();\n+        boolean inStack = false;\n+        for (String line : stdout.split(\"\\n\")) {\n+            if (line.contains(\"<nep_invoker_blob>\")) {\n+                inStack = true;\n+            } else if (inStack && line.contains(\"-----------------\")) {\n+                inStack = false;\n+                break;\n+            }\n+\n+            if (inStack) {\n+                targetStackTrace.add(line);\n+            }\n+        }\n+\n+        boolean found = targetStackTrace.stream()\n+                                        .anyMatch(l -> l.contains(\"thread_native_entry\"));\n+        if (!found) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        LingeredApp app = null;\n+\n+        try {\n+            app = new LingeredAppWithVirtualThread();\n+            LingeredApp.startApp(app, \"-Xcomp\");\n+            System.out.println(\"Started LingeredApp with pid \" + app.getPid());\n+            runJstack(app);\n+            System.out.println(\"Test Completed\");\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            throw e;\n+        } finally {\n+            LingeredApp.stopApp(app);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackMixedWithXComp.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}