{"files":[{"patch":"@@ -1490,3 +1490,4 @@\n-\/\/ Split pack according to task. Return true if any change was made, else false.\n-SuperWord::SplitStatus\n-SuperWord::split_pack(const char* split_name, Node_List* pack, SplitTask task) {\n+SuperWord::SplitStatus SuperWord::split_pack(const char* split_name,\n+                                             Node_List* pack,\n+                                             SplitTask task)\n+{\n@@ -1495,1 +1496,5 @@\n-  if (task.is_reject()) {\n+  if (task.is_unchanged()) {\n+    return SplitStatus::make_unchanged(pack);\n+  }\n+\n+  if (task.is_rejected()) {\n@@ -1507,1 +1512,1 @@\n-    return SplitStatus::make_reject();\n+    return SplitStatus::make_rejected();\n@@ -1511,4 +1516,1 @@\n-  assert(split_size <= pack_size, \"split_size must be in range\");\n-  if (split_size == 0 || split_size == pack_size) {\n-    return SplitStatus::make_no_change(pack);\n-  }\n+  assert(0 < split_size && split_size < pack_size, \"split_size must be in range\");\n@@ -1543,1 +1545,1 @@\n-    return SplitStatus::make_reject();\n+    return SplitStatus::make_rejected();\n@@ -1558,1 +1560,1 @@\n-    return SplitStatus::make_one_pack(pack);\n+    return SplitStatus::make_modified(pack);\n@@ -1574,1 +1576,1 @@\n-    return SplitStatus::make_one_pack(pack);\n+    return SplitStatus::make_modified(pack);\n@@ -1577,1 +1579,1 @@\n-  \/\/ We must will have two packs\n+  \/\/ We will have two packs\n@@ -1593,1 +1595,1 @@\n-  return SplitStatus::make_two_packs(new_pack, pack);\n+  return SplitStatus::make_split(new_pack, pack);\n@@ -1608,1 +1610,1 @@\n-      changed |= status.is_changed();\n+      changed |= !status.is_unchanged();\n@@ -1640,1 +1642,4 @@\n-                 return SplitTask(pack_size - boundary, \"found a use\/def boundary\");\n+                 if (boundary != 0) {\n+                   return SplitTask::make_split(pack_size - boundary, \"found a use\/def boundary\");\n+                 }\n+                 return SplitTask::make_unchanged();\n@@ -1652,1 +1657,5 @@\n-                   return SplitTask::make_reject(\"not implemented at any smaller size\");\n+                   return SplitTask::make_rejected(\"not implemented at any smaller size\");\n+                 }\n+                 assert(is_power_of_2(implemented_size), \"power of 2 size or zero: %d\", implemented_size);\n+                 if (implemented_size != pack_size) {\n+                   return SplitTask::make_split(implemented_size, \"only implemented at smaller size\");\n@@ -1654,3 +1663,1 @@\n-                 assert(is_power_of_2(implemented_size) || implemented_size == 0,\n-                        \"power of 2 size or zero: %d\", implemented_size);\n-                 return SplitTask(implemented_size, \"only implemented at smaller size\");\n+                 return SplitTask::make_unchanged();\n@@ -1669,1 +1676,1 @@\n-                   return SplitTask(pack_size >> 1, \"was not mutually independent\");\n+                   return SplitTask::make_split(pack_size >> 1, \"was not mutually independent\");\n@@ -1671,1 +1678,1 @@\n-                 return SplitTask::make_no_split();\n+                 return SplitTask::make_unchanged();\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -429,4 +429,0 @@\n-  \/\/ The lambda method for split_packs can return one of these tasks:\n-  \/\/ 1) reject   -> the pack is removed\n-  \/\/ 2) no_split -> split_size = 0, the old_pack is unchanged\n-  \/\/ 3) else     -> split away split_size nodes from the end of the old_pack\n@@ -435,0 +431,7 @@\n+    enum Kind {\n+      \/\/ The lambda method for split_packs can return one of these tasks:\n+      Unchanged, \/\/ The pack is left in the packset, unchanged.\n+      Rejected,  \/\/ The pack is removed from the packset.\n+      Split,     \/\/ Split away split_size nodes from the end of the pack.\n+    };\n+    const Kind _kind;\n@@ -436,1 +439,0 @@\n-    const bool _reject;\n@@ -439,2 +441,2 @@\n-    SplitTask(const uint split_size, const bool reject, const char* message) :\n-        _split_size(split_size), _reject(reject), _message(message)\n+    SplitTask(const Kind kind, const uint split_size, const char* message) :\n+        _kind(kind), _split_size(split_size), _message(message)\n@@ -442,1 +444,0 @@\n-      assert(!reject || split_size == 0, \"only non-rejections actually split packs\");\n@@ -444,0 +445,3 @@\n+      assert(_kind != Unchanged || split_size == 0, \"unchanged task conditions\");\n+      assert(_kind != Rejected  || split_size == 0, \"reject task conditions\");\n+      assert(_kind != Split     || split_size != 0, \"split task conditions\");\n@@ -447,2 +451,11 @@\n-    SplitTask(const uint split_size, const char* message) :\n-        SplitTask(split_size, false, message) {};\n+    static SplitTask make_split(const uint split_size, const char* message) {\n+      return SplitTask(Split, split_size, message);\n+    }\n+\n+    static SplitTask make_unchanged() {\n+      return SplitTask(Unchanged, 0, \"unchanged\");\n+    }\n+\n+    static SplitTask make_rejected(const char* message) {\n+      return SplitTask(Rejected, 0, message);\n+    }\n@@ -450,2 +463,3 @@\n-    static SplitTask make_no_split() { return SplitTask(0, \"no split\"); }\n-    static SplitTask make_reject(const char* message) { return SplitTask(0, true, message); }\n+    bool is_unchanged() const { return _kind == Unchanged; }\n+    bool is_rejected() const { return _kind == Rejected; }\n+    bool is_split() const { return _kind == Split; }\n@@ -453,1 +467,0 @@\n-    bool is_reject() const { return _reject; }\n@@ -456,1 +469,1 @@\n-      assert(!is_reject(), \"only non-rejections have a split size\");\n+      assert(is_split(), \"only split tasks have split_size\");\n@@ -461,6 +474,0 @@\n-  \/\/ After split_pack, we either have:\n-  \/\/    changed    first_pack    second_pack\n-  \/\/ 1) false      old_pack      nullptr       -> old_pack not modified\n-  \/\/ 2) true       nullptr       nullptr       -> old_pack rejected\n-  \/\/ 3) true       old_pack      nullptr       -> old_pack modified (nodes removed)\n-  \/\/ 4) true       pack1         pack2         -> old_pack split into two packs\n@@ -469,0 +476,8 @@\n+    enum Kind {\n+      \/\/ After split_pack, we have:                              first_pack   second_pack\n+      Unchanged, \/\/ The pack is left in the pack, unchanged.     old_pack     nullptr\n+      Rejected,  \/\/ The pack is removed from the packset.        nullptr      nullptr\n+      Modified,  \/\/ The pack had some nodes removed.             old_pack     nullptr\n+      Split,     \/\/ The pack was split into two packs.           pack1        pack2\n+    };\n+    Kind _kind;\n@@ -471,1 +486,0 @@\n-    bool _changed;\n@@ -473,2 +487,2 @@\n-    SplitStatus(Node_List* first_pack, Node_List* second_pack, bool changed) :\n-      _first_pack(first_pack), _second_pack(second_pack), _changed(changed)\n+    SplitStatus(Kind kind, Node_List* first_pack, Node_List* second_pack) :\n+      _kind(kind), _first_pack(first_pack), _second_pack(second_pack)\n@@ -476,3 +490,4 @@\n-      assert(_second_pack == nullptr || _changed, \"second pack implies is_changed\");\n-      assert(_second_pack == nullptr || _first_pack != nullptr, \"second pack implies first pack\");\n-      assert(second_pack == nullptr || first_pack != second_pack, \"cannot have the same pack twice\");\n+      assert(_kind != Unchanged || (first_pack != nullptr && second_pack == nullptr), \"unchanged status conditions\");\n+      assert(_kind != Rejected  || (first_pack == nullptr && second_pack == nullptr), \"rejected status conditions\");\n+      assert(_kind != Modified  || (first_pack != nullptr && second_pack == nullptr), \"modified status conditions\");\n+      assert(_kind != Split     || (first_pack != nullptr && second_pack != nullptr), \"split status conditions\");\n@@ -482,3 +497,2 @@\n-    static SplitStatus make_no_change(Node_List* old_pack) {\n-      assert(old_pack != nullptr, \"must have 1 pack\");\n-      return SplitStatus(old_pack, nullptr, false);\n+    static SplitStatus make_unchanged(Node_List* old_pack) {\n+      return SplitStatus(Unchanged, old_pack, nullptr);\n@@ -487,3 +501,2 @@\n-    static SplitStatus make_one_pack(Node_List* first_pack) {\n-      assert(first_pack != nullptr, \"must have 1 pack\");\n-      return SplitStatus(first_pack, nullptr, true);\n+    static SplitStatus make_rejected() {\n+      return SplitStatus(Rejected, nullptr, nullptr);\n@@ -492,3 +505,2 @@\n-    static SplitStatus make_two_packs(Node_List* first_pack, Node_List* second_pack) {\n-      assert(first_pack != nullptr && second_pack != nullptr, \"must have 2 packs\");\n-      return SplitStatus(first_pack, second_pack, true);\n+    static SplitStatus make_modified(Node_List* first_pack) {\n+      return SplitStatus(Modified, first_pack, nullptr);\n@@ -497,2 +509,2 @@\n-    static SplitStatus make_reject() {\n-      return SplitStatus(nullptr, nullptr, true);\n+    static SplitStatus make_split(Node_List* first_pack, Node_List* second_pack) {\n+      return SplitStatus(Split, first_pack, second_pack);\n@@ -501,1 +513,1 @@\n-    bool is_changed() const { return _changed; }\n+    bool is_unchanged() const { return _kind == Unchanged; }\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":50,"deletions":38,"binary":false,"changes":88,"status":"modified"}]}