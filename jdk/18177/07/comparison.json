{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.CharBuffer;\n@@ -543,12 +544,2 @@\n-        \/\/ protect against huge length, negative values, and integer overflow\n-        try {\n-            Objects.checkFromIndexSize(offset, len, in.length);\n-        } catch (IndexOutOfBoundsException e) {\n-            throw new NumberFormatException\n-                (\"Bad offset or len arguments for char[] input.\");\n-        }\n-\n-        \/\/ This is the primary string to BigDecimal constructor; all\n-        \/\/ incoming strings end up here; it uses explicit (inline)\n-        \/\/ parsing for speed and generates at most one intermediate\n-        \/\/ (temporary) object (a char[] array) for non-compact case.\n+        this(new CharArraySequence(in, offset, len), mc);\n+    }\n@@ -556,0 +547,1 @@\n+    private BigDecimal(CharSequence val, MathContext mc) {\n@@ -561,1 +553,1 @@\n-        \/\/ use array bounds checking to handle too-long, len == 0,\n+        \/\/ use String bounds checking to handle too-long, len == 0,\n@@ -564,0 +556,3 @@\n+            int len = val.length();\n+            int offset = 0;\n+            char c = val.charAt(offset);\n@@ -565,7 +560,3 @@\n-            boolean isneg = false;          \/\/ assume positive\n-            if (in[offset] == '-') {\n-                isneg = true;               \/\/ leading minus means negative\n-                offset++;\n-                len--;\n-            } else if (in[offset] == '+') { \/\/ leading + allowed\n-                offset++;\n+            boolean isneg = c == '-'; \/\/ leading minus means negative\n+            if (isneg || c == '+') {\n+                c = val.charAt(++offset);\n@@ -577,1 +568,1 @@\n-            char c;                          \/\/ current character\n+            int digit;\n@@ -581,1 +572,0 @@\n-            int idx = 0;\n@@ -585,3 +575,2 @@\n-                for (; len > 0; offset++, len--) {\n-                    c = in[offset];\n-                    if ((c == '0')) { \/\/ have zero\n+                for (; ; c = val.charAt(++offset)) {\n+                    if (c == '0') { \/\/ have zero\n@@ -596,2 +585,1 @@\n-                    } else if ((c >= '1' && c <= '9')) { \/\/ have digit\n-                        int digit = c - '0';\n+                    } else if (c >= '1' && c <= '9') { \/\/ have digit\n@@ -600,1 +588,1 @@\n-                        rs = rs * 10 + digit;\n+                        rs = rs * 10 + c - '0';\n@@ -609,2 +597,4 @@\n-                    } else if (Character.isDigit(c)) { \/\/ slow path\n-                        int digit = Character.digit(c, 10);\n+                    } else if (c == 'e' || c == 'E') {\n+                        scl -= parseExp(val, offset, len);\n+                        break; \/\/ [saves a test]\n+                    } else if ((digit = Character.digit(c, 10)) != -1) { \/\/ slow path\n@@ -625,4 +615,1 @@\n-                    } else if ((c == 'e') || (c == 'E')) {\n-                        scl -= parseExp(in, offset, len);\n-                        break; \/\/ [saves a test]\n-                    } else {\n+                    } else\n@@ -632,1 +619,3 @@\n-                    }\n+\n+                    if (--len == 0)\n+                        break;\n@@ -636,1 +625,2 @@\n-                rs = isneg ? -rs : rs;\n+                if (isneg)\n+                    rs = -rs;\n@@ -649,3 +639,2 @@\n-                char[] coeff = new char[len];\n-                for (; len > 0; offset++, len--) {\n-                    c = in[offset];\n+                int start = offset;\n+                for (int idx = 0; ; c = val.charAt(++offset)) {\n@@ -653,1 +642,31 @@\n-                    if ((c >= '0' && c <= '9') || Character.isDigit(c)) {\n+                    if (c == '0') {\n+                        if (prec == 0) {\n+                            start = offset;\n+                            prec = 1;\n+                        } else if (idx != 0) {\n+                            ++idx;\n+                            ++prec;\n+                        } else\n+                            start = offset + 1;\n+                        if (dot)\n+                            ++scl;\n+                    } else if (c >= '1' && c <= '9') {\n+                        \/\/ First compact case, we need not to preserve the character\n+                        \/\/ and we can just compute the value in place.\n+                        if (prec != 1 || idx != 0)\n+                            ++prec; \/\/ prec unchanged if preceded by 0s\n+                        ++idx;\n+                        if (dot)\n+                            ++scl;\n+                    } else if (c == '.') {\n+                        \/\/ have dot\n+                        if (dot) \/\/ two dots\n+                            throw new NumberFormatException(\"Character array\"\n+                                + \" contains more than one decimal point.\");\n+                        dot = true;\n+                        if (idx == 0 && prec == 1)\n+                            start = offset;\n+                    } else if (c == 'e' || c == 'E') {\n+                        scl -= parseExp(val, offset, len);\n+                        break; \/\/ [saves a test]\n+                    } else if ((digit = Character.digit(c, 10)) != -1) {\n@@ -656,1 +675,1 @@\n-                        if (c == '0' || Character.digit(c, 10) == 0) {\n+                        if (digit == 0) {\n@@ -658,1 +677,1 @@\n-                                coeff[idx] = c;\n+                                start = offset;\n@@ -661,1 +680,1 @@\n-                                coeff[idx++] = c;\n+                                ++idx;\n@@ -663,1 +682,2 @@\n-                            } \/\/ else c must be a redundant leading zero\n+                            } else\n+                                start = offset + 1;\n@@ -667,1 +687,1 @@\n-                            coeff[idx++] = c;\n+                            ++idx;\n@@ -671,13 +691,1 @@\n-                        continue;\n-                    }\n-                    \/\/ have dot\n-                    if (c == '.') {\n-                        \/\/ have dot\n-                        if (dot) \/\/ two dots\n-                            throw new NumberFormatException(\"Character array\"\n-                                + \" contains more than one decimal point.\");\n-                        dot = true;\n-                        continue;\n-                    }\n-                    \/\/ exponent expected\n-                    if ((c != 'e') && (c != 'E'))\n+                    } else\n@@ -686,2 +694,3 @@\n-                    scl -= parseExp(in, offset, len);\n-                    break; \/\/ [saves a test]\n+\n+                    if (--len == 0)\n+                        break;\n@@ -693,1 +702,1 @@\n-                rb = new BigInteger(coeff, isneg ? -1 : 1, prec);\n+                rb = new BigInteger(val, isneg ? -1 : 1, start, prec);\n@@ -723,1 +732,1 @@\n-        } catch (ArrayIndexOutOfBoundsException | NegativeArraySizeException e) {\n+        } catch (IndexOutOfBoundsException e) {\n@@ -739,1 +748,1 @@\n-    private static long parseExp(char[] in, int offset, int len){\n+    private static long parseExp(CharSequence in, int offset, int len){\n@@ -742,1 +751,1 @@\n-        char c = in[offset];\n+        char c = in.charAt(offset);\n@@ -748,1 +757,1 @@\n-            c = in[offset];\n+            c = in.charAt(offset);\n@@ -756,1 +765,1 @@\n-            c = in[offset];\n+            c = in.charAt(offset);\n@@ -775,1 +784,1 @@\n-            c = in[offset];\n+            c = in.charAt(offset);\n@@ -824,0 +833,22 @@\n+    private record CharArraySequence(char[] array, int offset, int length) implements CharSequence {\n+        CharArraySequence {\n+            if ((offset | length) < 0 || offset + length > array.length)\n+                throw new NumberFormatException();\n+        }\n+\n+        @Override\n+        public int length() {\n+            return length;\n+        }\n+\n+        @Override\n+        public char charAt(int offset) {\n+            return array[offset];\n+        }\n+\n+        @Override\n+        public CharSequence subSequence(int offset, int length) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n@@ -924,1 +955,1 @@\n-        this(val.toCharArray(), 0, val.length());\n+        this((CharSequence) val, MathContext.UNLIMITED);\n@@ -940,1 +971,1 @@\n-        this(val.toCharArray(), 0, val.length(), mc);\n+        this((CharSequence) val, mc);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":100,"deletions":69,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -606,4 +606,2 @@\n-     * Constructs a new BigInteger using a char array with radix=10.\n-     * Sign is precalculated outside and not allowed in the val. The {@code val}\n-     * array is assumed to be unchanged for the duration of the constructor\n-     * call.\n+     * Constructs a new BigInteger using a String with radix=10.\n+     * dot is allowed in the val.\n@@ -611,14 +609,1 @@\n-    BigInteger(char[] val, int sign, int len) {\n-        int cursor = 0, numDigits;\n-\n-        \/\/ Skip leading zeros and compute number of digits in magnitude\n-        while (cursor < len && Character.digit(val[cursor], 10) == 0) {\n-            cursor++;\n-        }\n-        if (cursor == len) {\n-            signum = 0;\n-            mag = ZERO.mag;\n-            return;\n-        }\n-\n-        numDigits = len - cursor;\n+    BigInteger(CharSequence val, int sign, int off, int numDigits) {\n@@ -628,1 +613,1 @@\n-        if (len < 10) {\n+        if (numDigits < 10)\n@@ -630,1 +615,1 @@\n-        } else {\n+        else {\n@@ -632,1 +617,1 @@\n-            if (numBits + 31 >= (1L << 32)) {\n+            if (numBits + 31 >= (1L << 32))\n@@ -634,1 +619,0 @@\n-            }\n@@ -640,1 +624,2 @@\n-        int firstGroupLen = numDigits % digitsPerInt[10];\n+        int digitsPerInt10 = digitsPerInt[10];\n+        int firstGroupLen = numDigits % digitsPerInt10;\n@@ -642,7 +627,20 @@\n-            firstGroupLen = digitsPerInt[10];\n-        magnitude[numWords - 1] = parseInt(val, cursor,  cursor += firstGroupLen);\n-\n-        \/\/ Process remaining digit groups\n-        while (cursor < len) {\n-            int groupVal = parseInt(val, cursor, cursor += digitsPerInt[10]);\n-            destructiveMulAdd(magnitude, intRadix[10], groupVal);\n+            firstGroupLen = digitsPerInt10;\n+\n+        for (int numIndex = 0, groupIndex = 0; numIndex < numDigits; ++groupIndex) {\n+            int end = numIndex + (groupIndex == 0 ? firstGroupLen : digitsPerInt10);\n+            int groupVal = 0;\n+            do {\n+                char c = val.charAt(off++);\n+                if (c == '.')\n+                    continue;\n+                int nextVal = Character.digit(c, 10);\n+                if (nextVal == -1)\n+                    throw new NumberFormatException(val.toString());\n+                numIndex++;\n+                groupVal = 10 * groupVal + nextVal;\n+            } while (numIndex < end);\n+\n+            if (groupIndex == 0)\n+                magnitude[numWords - 1] = groupVal;\n+            else\n+                destructiveMulAdd(magnitude, intRadix[10], groupVal);\n@@ -650,0 +648,1 @@\n+\n@@ -656,18 +655,0 @@\n-    \/\/ Create an integer with the digits between the two indexes\n-    \/\/ Assumes start < end. The result may be negative, but it\n-    \/\/ is to be treated as an unsigned value.\n-    private int parseInt(char[] source, int start, int end) {\n-        int result = Character.digit(source[start++], 10);\n-        if (result == -1)\n-            throw new NumberFormatException(new String(source));\n-\n-        for (int index = start; index < end; index++) {\n-            int nextVal = Character.digit(source[index], 10);\n-            if (nextVal == -1)\n-                throw new NumberFormatException(new String(source));\n-            result = 10*result + nextVal;\n-        }\n-\n-        return result;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":29,"deletions":48,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -105,0 +105,23 @@\n+\n+        String[] strings = new String[] {\n+                \"12\",\n+                \"00000012345\",\n+                \".2e000000000000001\",\n+                \"1.2e000000000000001\",\n+                \"-0.000000000006325524822672631550863255248226726315508\",\n+                \"-6325524822672631550863255248226726315508.6325524822672631550863255248226726315508\",\n+                \"1234e+123\",\n+                \"1234567890123456789012345678901234567890\"\n+        };\n+        for (String s : strings) {\n+            BigDecimal bd = new BigDecimal(s);\n+            BigDecimal bd1 = new BigDecimal(s.toCharArray());\n+            if (!bd.equals(bd1)) {\n+                System.err.println(\"bd string: \" + s);\n+            }\n+            String bdString = bd.toString();\n+            BigDecimal bdDoppel = new BigDecimal(bdString);\n+            if (!bd.equals(bdDoppel)) {\n+                System.err.println(\"bd string: \" + bdString);\n+            }\n+        }\n@@ -139,0 +162,8 @@\n+\n+            BigDecimal tmp1 = new BigDecimal(s.toCharArray());\n+            \/\/ System.err.println(\"Testing \" + s);\n+            if (! expected.equals(tmp1) || tmp.precision() != 1) {\n+                System.err.println(\"Bad conversion of \" + s + \"got \" +\n+                        tmp1 + \"precision = \" + tmp1.precision());\n+                throw new RuntimeException(\"String constructor failure.\");\n+            }\n@@ -172,0 +203,2 @@\n+        if (!expected.equals(new BigDecimal(s.toCharArray())))\n+            throw new RuntimeException(s + \" is not equal to \" + expected);\n","filename":"test\/jdk\/java\/math\/BigDecimal\/StringConstructor.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -61,1 +61,2 @@\n-    private String[] stringInputs;\n+    private String[] stringInputs, stringHugeInputs, stringLargeInputs, stringSmallInputs;\n+    private char[][] charArrayInputs, charArrayHugeInputs, charArrayLargeInputs, charArraySmallInputs;\n@@ -70,0 +71,1 @@\n+\n@@ -71,0 +73,9 @@\n+        stringHugeInputs = new String[TEST_SIZE];\n+        stringLargeInputs = new String[TEST_SIZE];\n+        stringSmallInputs = new String[TEST_SIZE];\n+\n+        charArrayInputs = new char[TEST_SIZE][];\n+        charArrayHugeInputs = new char[TEST_SIZE][];\n+        charArrayLargeInputs = new char[TEST_SIZE][];\n+        charArraySmallInputs = new char[TEST_SIZE][];\n+\n@@ -89,0 +100,1 @@\n+\n@@ -90,0 +102,9 @@\n+            stringHugeInputs[i] = \"\" + -(i + 1) * 5434543453454355e100;\n+            stringLargeInputs[i] = \"\" + -(i + 1) * 5434543453454355e100;\n+            stringSmallInputs[i] = \"\" + -(i + 1) * 54345.0d;\n+\n+            charArrayInputs[i] = stringInputs[i].toCharArray();\n+            charArrayHugeInputs[i] = stringHugeInputs[i].toCharArray();\n+            charArrayLargeInputs[i] = stringLargeInputs[i].toCharArray();\n+            charArraySmallInputs[i] = stringSmallInputs[i].toCharArray();\n+\n@@ -127,0 +148,64 @@\n+    \/** Invokes the (String)-constructor of BigDecimal with huge values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithHugeString(Blackhole bh) {\n+        for (String s : stringHugeInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (String)-constructor of BigDecimal with large values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithLargeString(Blackhole bh) {\n+        for (String s : stringLargeInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (String)-constructor of BigDecimal with small values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithSmallString(Blackhole bh) {\n+        for (String s : stringSmallInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (char[])-constructor of BigDecimal with various different values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithCharArray(Blackhole bh) {\n+        for (char[] s : charArrayInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (char[])-constructor of BigDecimal with huge values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithHugeCharArray(Blackhole bh) {\n+        for (char[] s : charArrayHugeInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (char[])-constructor of BigDecimal with large values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithLargeCharArray(Blackhole bh) {\n+        for (char[] s : charArrayLargeInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+    \/** Invokes the (char[])-constructor of BigDecimal with small values. *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testConstructorWithSmallCharArray(Blackhole bh) {\n+        for (char[] s : charArraySmallInputs) {\n+            bh.consume(new BigDecimal(s));\n+        }\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimals.java","additions":86,"deletions":1,"binary":false,"changes":87,"status":"modified"}]}