{"files":[{"patch":"@@ -201,1 +201,1 @@\n-    static PropertyFile getAdditionalLauncherProperties(\n+    public static PropertyFile getAdditionalLauncherProperties(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+\/**\n+ * Provides uniform way to configure {@code JPackageCommand} and\n+ * {@code PackageTest} instances.\n+ *\/\n+public record ConfigurationTarget(Optional<JPackageCommand> cmd, Optional<PackageTest> test) {\n+\n+    public ConfigurationTarget {\n+        Objects.requireNonNull(cmd);\n+        Objects.requireNonNull(test);\n+        if (cmd.isEmpty() == test.isEmpty()) {\n+            throw new IllegalArgumentException();\n+        }\n+    }\n+\n+    public ConfigurationTarget(JPackageCommand target) {\n+        this(Optional.of(target), Optional.empty());\n+    }\n+\n+    public ConfigurationTarget(PackageTest target) {\n+        this(Optional.empty(), Optional.of(target));\n+    }\n+\n+    public ConfigurationTarget apply(Consumer<JPackageCommand> a, Consumer<PackageTest> b) {\n+        cmd.ifPresent(Objects.requireNonNull(a));\n+        test.ifPresent(Objects.requireNonNull(b));\n+        return this;\n+    }\n+\n+    public ConfigurationTarget addInitializer(Consumer<JPackageCommand> initializer) {\n+        cmd.ifPresent(Objects.requireNonNull(initializer));\n+        test.ifPresent(v -> {\n+            v.addInitializer(initializer::accept);\n+        });\n+        return this;\n+    }\n+\n+    public ConfigurationTarget add(AdditionalLauncher addLauncher) {\n+        return apply(addLauncher::applyTo, addLauncher::applyTo);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/ConfigurationTarget.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Optional;\n@@ -40,0 +41,1 @@\n+        expectedDefault = false;\n@@ -44,0 +46,1 @@\n+        expectedIcon = null;\n@@ -48,0 +51,4 @@\n+    public LauncherIconVerifier setExpectedNoIcon() {\n+        return setExpectedIcon(null);\n+    }\n+\n@@ -53,0 +60,8 @@\n+    public boolean expectDefaultIcon() {\n+        return expectedDefault;\n+    }\n+\n+    public Optional<Path> expectIcon() {\n+        return Optional.ofNullable(expectedIcon);\n+    }\n+\n@@ -73,1 +88,1 @@\n-            TKit.assertPathExists(iconPath, true);\n+            TKit.assertFileExists(iconPath);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+import static jdk.jpackage.test.AdditionalLauncher.getAdditionalLauncherProperties;\n+\n@@ -25,0 +27,1 @@\n+import java.io.UncheckedIOException;\n@@ -32,0 +35,1 @@\n+import java.util.Objects;\n@@ -35,1 +39,0 @@\n-import java.util.function.Consumer;\n@@ -43,0 +46,2 @@\n+import jdk.jpackage.test.CannedFormattedString;\n+import jdk.jpackage.test.ConfigurationTarget;\n@@ -45,0 +50,1 @@\n+import jdk.jpackage.test.JPackageStringBundle;\n@@ -162,0 +168,2 @@\n+\n+        final ConfigurationTarget target;\n@@ -163,4 +171,1 @@\n-            JPackageCommand cmd = initAppImageTest();\n-            var result = cmd.executeAndAssertImageCreated();\n-            ThrowingConsumer.toConsumer(createInstallVerifier()).accept(cmd);\n-            ThrowingBiConsumer.toBiConsumer(createBundleVerifier()).accept(cmd, result);\n+            target = new ConfigurationTarget(JPackageCommand.helloAppImage());\n@@ -168,3 +173,4 @@\n-            PackageTest test = initPackageTest();\n-            test.addInstallVerifier(createInstallVerifier());\n-            test.addBundleVerifier(createBundleVerifier());\n+            target = new ConfigurationTarget(new PackageTest().configureHelloApp());\n+        }\n+\n+        initTest(target);\n@@ -172,0 +178,11 @@\n+        var installVerifier = createInstallVerifier();\n+        var bundleVerifier = createBundleVerifier();\n+\n+        var cmdResult = target.cmd().map(JPackageCommand::executeAndAssertImageCreated);\n+\n+        target.apply(ThrowingConsumer.toConsumer(installVerifier), test -> {\n+            test.addInstallVerifier(installVerifier);\n+        }).apply(cmd -> {\n+            ThrowingBiConsumer.toBiConsumer(bundleVerifier).accept(cmd, cmdResult.orElseThrow());\n+        }, test -> {\n+            test.addBundleVerifier(bundleVerifier);\n@@ -174,0 +191,1 @@\n+        });\n@@ -175,2 +193,3 @@\n-            test.run(PackageTest.Action.CREATE_AND_UNPACK);\n-        }\n+        target.test().ifPresent(v -> {\n+            v.run(PackageTest.Action.CREATE_AND_UNPACK);\n+        });\n@@ -180,3 +199,0 @@\n-        if (appImage) {\n-            return false;\n-        }\n@@ -192,11 +208,2 @@\n-            var verifier = createConsoleOutputVerifier(cmd.name(), config.get(\n-                    Launcher.Main), null);\n-            if (verifier != null) {\n-                verifier.apply(result.getOutput());\n-            }\n-\n-            if (config.containsKey(Launcher.Additional)) {\n-                verifier = createConsoleOutputVerifier(\n-                        Launcher.Additional.launcherName, config.get(\n-                                Launcher.Additional), config.get(Launcher.Main));\n-                if (verifier != null) {\n+            Stream.of(Launcher.Main, Launcher.Additional).filter(config::containsKey).forEach(launcher -> {\n+                createConsoleOutputVerifier(cmd, launcher).ifPresent(verifier -> {\n@@ -204,2 +211,2 @@\n-                }\n-            }\n+                });\n+            });\n@@ -209,4 +216,14 @@\n-    private TKit.TextStreamVerifier createConsoleOutputVerifier(\n-            String launcherName, IconType iconType, IconType mainIconType) {\n-        if (iconType == IconType.DefaultIcon && mainIconType != null) {\n-            iconType = mainIconType;\n+    private Optional<TKit.TextStreamVerifier> createConsoleOutputVerifier(\n+            JPackageCommand cmd, Launcher launcher) {\n+\n+        var launcherName = Optional.ofNullable(launcher.launcherName).orElseGet(cmd::name);\n+        var resourceName = launcherName;\n+        Optional<Path> customIcon;\n+\n+        if (launcherName.equals(cmd.name())) {\n+            customIcon = Optional.ofNullable(cmd.getArgumentValue(\"--icon\")).map(Path::of);\n+        } else if (config.get(launcher) == IconType.DefaultIcon) {\n+            resourceName = cmd.name();\n+            customIcon = Optional.ofNullable(cmd.getArgumentValue(\"--icon\")).map(Path::of);\n+        } else {\n+            customIcon = getAdditionalLauncherProperties(cmd, launcherName).findProperty(\"icon\").map(Path::of);\n@@ -214,1 +231,6 @@\n-        return createConsoleOutputVerifier(launcherName, iconType);\n+\n+        return createConsoleOutputVerifier(\n+                getBundleIconType(cmd, launcher),\n+                launcherName,\n+                resourceName,\n+                customIcon);\n@@ -217,3 +239,9 @@\n-    private static TKit.TextStreamVerifier createConsoleOutputVerifier(\n-            String launcherName, IconType iconType) {\n-        String lookupString = null;\n+    private static Optional<TKit.TextStreamVerifier> createConsoleOutputVerifier(\n+            IconType iconType, String launcherName, String resourceName, Optional<Path> customIcon) {\n+\n+        Objects.requireNonNull(launcherName);\n+        Objects.requireNonNull(resourceName);\n+        Objects.requireNonNull(customIcon);\n+\n+        CannedFormattedString lookupString;\n+\n@@ -222,2 +250,2 @@\n-                lookupString = String.format(\n-                        \"Using default package resource %s [icon] (add %s%s to the resource-dir to customize)\",\n+                lookupString = JPackageStringBundle.MAIN.cannedFormattedString(\n+                        \"message.using-default-resource\",\n@@ -225,1 +253,2 @@\n-                        launcherName, TKit.ICON_SUFFIX);\n+                        \"[icon]\",\n+                        launcherName + TKit.ICON_SUFFIX);\n@@ -229,3 +258,4 @@\n-                lookupString = String.format(\n-                        \"Using custom package resource [icon] (loaded from %s%s)\",\n-                        launcherName, TKit.ICON_SUFFIX);\n+                lookupString = JPackageStringBundle.MAIN.cannedFormattedString(\n+                        \"message.using-custom-resource\",\n+                        \"[icon]\",\n+                        resourceName + TKit.ICON_SUFFIX);\n@@ -236,1 +266,4 @@\n-                lookupString = \"Using custom package resource [icon] (loaded from file\";\n+                lookupString = JPackageStringBundle.MAIN.cannedFormattedString(\n+                        \"message.using-custom-resource-from-file\",\n+                        \"[icon]\",\n+                        customIcon.orElseThrow());\n@@ -240,1 +273,1 @@\n-                return null;\n+                return Optional.empty();\n@@ -243,1 +276,1 @@\n-        return TKit.assertTextStream(lookupString);\n+        return Optional.of(TKit.assertTextStream(lookupString.getValue()));\n@@ -247,5 +280,2 @@\n-        LauncherIconVerifier verifier = new LauncherIconVerifier();\n-        switch (config.get(Launcher.Main)) {\n-            case NoIcon:\n-                verifier.setExpectedIcon(null);\n-                break;\n+        return cmd -> {\n+            var verifier = new LauncherIconVerifier();\n@@ -253,3 +283,1 @@\n-            case DefaultIcon:\n-                verifier.setExpectedDefaultIcon();\n-                break;\n+            var bundleIconType = getBundleIconType(cmd, Launcher.Main);\n@@ -257,3 +285,4 @@\n-            case CustomIcon:\n-                verifier.setExpectedIcon(Launcher.Main.cmdlineIcon);\n-                break;\n+            switch (bundleIconType) {\n+                case NoIcon:\n+                    verifier.setExpectedNoIcon();\n+                    break;\n@@ -261,3 +290,3 @@\n-            case ResourceDirIcon:\n-                verifier.setExpectedIcon(Launcher.Main.resourceDirIcon);\n-                break;\n+                case DefaultIcon:\n+                    verifier.setExpectedDefaultIcon();\n+                    break;\n@@ -265,4 +294,12 @@\n-            case CustomWithResourceDirIcon:\n-                verifier.setExpectedIcon(Launcher.Main2.cmdlineIcon);\n-                break;\n-        }\n+                case CustomIcon:\n+                    verifier.setExpectedIcon(Launcher.Main.cmdlineIcon);\n+                    break;\n+\n+                case ResourceDirIcon:\n+                    verifier.setExpectedIcon(Launcher.Main.resourceDirIcon);\n+                    break;\n+\n+                case CustomWithResourceDirIcon:\n+                    verifier.setExpectedIcon(Launcher.Main2.cmdlineIcon);\n+                    break;\n+            }\n@@ -270,1 +307,0 @@\n-        return cmd -> {\n@@ -272,0 +308,1 @@\n+\n@@ -274,1 +311,1 @@\n-                if (isWithDesktopIntegration(config.get(Launcher.Main))) {\n+                if (isWithDesktopIntegration(bundleIconType)) {\n@@ -283,1 +320,1 @@\n-    private void initTest(JPackageCommand cmd, PackageTest test) {\n+    private void initTest(ConfigurationTarget target) {\n@@ -285,1 +322,1 @@\n-            initTest(entry.getKey(), entry.getValue(), cmd, test);\n+            initTest(entry.getKey(), entry.getValue(), target);\n@@ -288,11 +325,5 @@\n-        ThrowingConsumer<JPackageCommand> initializer = testCmd -> {\n-            testCmd.saveConsoleOutput(true);\n-            testCmd.setFakeRuntime();\n-            testCmd.addArguments(extraJPackageArgs);\n-        };\n-\n-        if (test != null) {\n-            test.addInitializer(initializer);\n-        } else {\n-            ThrowingConsumer.toConsumer(initializer).accept(cmd);\n-        }\n+        target.addInitializer(cmd -> {\n+            cmd.saveConsoleOutput(true);\n+            cmd.setFakeRuntime();\n+            cmd.addArguments(extraJPackageArgs);\n+        });\n@@ -302,8 +333,1 @@\n-            JPackageCommand cmd, PackageTest test) throws IOException {\n-        Consumer<AdditionalLauncher> addLauncher = v -> {\n-            if (test != null) {\n-                v.applyTo(test);\n-            } else {\n-                v.applyTo(cmd);\n-            }\n-        };\n+            ConfigurationTarget target) throws IOException {\n@@ -313,3 +337,2 @@\n-                if (cfg.launcherName != null) {\n-                    addLauncher.accept(new AdditionalLauncher(cfg.launcherName));\n-                }\n+                Optional.ofNullable(cfg.launcherName).map(AdditionalLauncher::new)\n+                        .ifPresent(target::add);\n@@ -319,4 +342,3 @@\n-                if (cfg.launcherName != null) {\n-                    addLauncher.accept(\n-                            new AdditionalLauncher(cfg.launcherName).setNoIcon());\n-                }\n+                Optional.ofNullable(cfg.launcherName).map(AdditionalLauncher::new)\n+                        .map(AdditionalLauncher::setNoIcon)\n+                        .ifPresent(target::add);\n@@ -326,5 +348,1 @@\n-                if (test != null) {\n-                    addCustomIcon(null, test, cfg.launcherName, cfg.cmdlineIcon);\n-                } else {\n-                    addCustomIcon(cmd, null, cfg.launcherName, cfg.cmdlineIcon);\n-                }\n+                addCustomIcon(target, cfg.launcherName, cfg.cmdlineIcon);\n@@ -334,10 +352,3 @@\n-                if (Launcher.PRIMARY.contains(cfg) && cfg.launcherName != null) {\n-                    addLauncher.accept(new AdditionalLauncher(cfg.launcherName));\n-                }\n-                if (test != null) {\n-                    test.addInitializer(testCmd -> {\n-                        addResourceDirIcon(testCmd, cfg.launcherName,\n-                                cfg.resourceDirIcon);\n-                    });\n-                } else {\n-                    addResourceDirIcon(cmd, cfg.launcherName, cfg.resourceDirIcon);\n+                if (Launcher.PRIMARY.contains(cfg)) {\n+                    Optional.ofNullable(cfg.launcherName).map(AdditionalLauncher::new)\n+                            .ifPresent(target::add);\n@@ -345,0 +356,7 @@\n+                target.addInitializer(cmd -> {\n+                    try {\n+                        addResourceDirIcon(cmd, cfg.launcherName, cfg.resourceDirIcon);\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n+                });\n@@ -350,2 +368,2 @@\n-                        initTest(Launcher.Main2, IconType.CustomIcon, cmd, test);\n-                        initTest(Launcher.Main2, IconType.ResourceDirIcon, cmd, test);\n+                        initTest(Launcher.Main2, IconType.CustomIcon, target);\n+                        initTest(Launcher.Main2, IconType.ResourceDirIcon, target);\n@@ -355,2 +373,2 @@\n-                        initTest(Launcher.Additional2, IconType.CustomIcon, cmd, test);\n-                        initTest(Launcher.Additional2, IconType.ResourceDirIcon, cmd, test);\n+                        initTest(Launcher.Additional2, IconType.CustomIcon, target);\n+                        initTest(Launcher.Additional2, IconType.ResourceDirIcon, target);\n@@ -366,4 +384,2 @@\n-    private JPackageCommand initAppImageTest() {\n-        JPackageCommand cmd = JPackageCommand.helloAppImage();\n-        initTest(cmd, null);\n-        return cmd;\n+    private IconType getBundleIconType(JPackageCommand cmd, Launcher launcher) {\n+        return getBundleIconType(cmd, config.get(Launcher.Main), launcher, config.get(launcher));\n@@ -372,4 +388,25 @@\n-    private PackageTest initPackageTest() {\n-        PackageTest test = new PackageTest().configureHelloApp();\n-        initTest(null, test);\n-        return test;\n+    \/**\n+     * Returns the expected icon type of the given launcher in the output bundle\n+     * that the given jpackage command line will output based on the icon type\n+     * configured for the launcher.\n+     *\n+     * @param cmd                  jpackage command line\n+     * @param mainLauncherIconType the icon type configured for the main launcher\n+     * @param launcher             the launcher\n+     * @param iconType             the icon type configured for the specified\n+     *                             launcher\n+     * @return the type of of an icon of the given launcher in the output bundle\n+     *\/\n+    private static IconType getBundleIconType(JPackageCommand cmd,\n+            IconType mainLauncherIconType, Launcher launcher, IconType iconType) {\n+\n+        Objects.requireNonNull(cmd);\n+        Objects.requireNonNull(mainLauncherIconType);\n+        Objects.requireNonNull(launcher);\n+        Objects.requireNonNull(iconType);\n+\n+        if (iconType == IconType.DefaultIcon) {\n+            iconType = mainLauncherIconType;\n+        }\n+\n+        return iconType;\n@@ -380,6 +417,3 @@\n-        Path resourceDir = cmd.getArgumentValue(\"--resource-dir\", () -> null,\n-                Path::of);\n-        if (resourceDir == null) {\n-            resourceDir = TKit.createTempDirectory(\"resources\");\n-            cmd.addArguments(\"--resource-dir\", resourceDir);\n-        }\n+        var resourceDir = Optional.ofNullable(cmd.getArgumentValue(\"--resource-dir\")).map(Path::of).orElseGet(() -> {\n+            return TKit.createTempDirectory(\"resources\");\n+        });\n@@ -387,2 +421,3 @@\n-        String dstIconFileName = Optional.ofNullable(launcherName).orElseGet(\n-                () -> cmd.name()) + TKit.ICON_SUFFIX;\n+        cmd.addArguments(\"--resource-dir\", resourceDir);\n+\n+        String dstIconFileName = Optional.ofNullable(launcherName).orElseGet(cmd::name) + TKit.ICON_SUFFIX;\n@@ -396,2 +431,2 @@\n-    private static void addCustomIcon(JPackageCommand cmd, PackageTest test,\n-            String launcherName, Path iconPath) throws IOException {\n+    private static void addCustomIcon(ConfigurationTarget target,\n+            String launcherName, Path iconPath) {\n@@ -400,11 +435,2 @@\n-            AdditionalLauncher al = new AdditionalLauncher(launcherName).setIcon(\n-                    iconPath);\n-            if (test != null) {\n-                al.applyTo(test);\n-            } else {\n-                al.applyTo(cmd);\n-            }\n-        } else if (test != null) {\n-            test.addInitializer(testCmd -> {\n-                testCmd.addArguments(\"--icon\", iconPath);\n-            });\n+            var al = new AdditionalLauncher(launcherName).setIcon(iconPath);\n+            target.apply(al::applyTo, al::applyTo);\n@@ -412,1 +438,3 @@\n-            cmd.addArguments(\"--icon\", iconPath);\n+            target.addInitializer(cmd -> {\n+                cmd.addArguments(\"--icon\", iconPath);\n+            });\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":168,"deletions":140,"binary":false,"changes":308,"status":"modified"}]}