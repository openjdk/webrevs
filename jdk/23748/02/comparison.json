{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2299,0 +2299,20 @@\n+    case Op_FmaHF:\n+      \/\/ UseFMA flag also needs to be checked along with FEAT_FP16\n+      if (!UseFMA || !is_feat_fp16_supported()) {\n+        return false;\n+      }\n+      break;\n+    case Op_AddHF:\n+    case Op_SubHF:\n+    case Op_MulHF:\n+    case Op_DivHF:\n+    case Op_MinHF:\n+    case Op_MaxHF:\n+    case Op_SqrtHF:\n+      \/\/ Half-precision floating point scalar operations require FEAT_FP16\n+      \/\/ to be available. FEAT_FP16 is enabled if both \"fphp\" and \"asimdhp\"\n+      \/\/ features are supported.\n+      if (!is_feat_fp16_supported()) {\n+        return false;\n+      }\n+      break;\n@@ -4602,0 +4622,9 @@\n+\/\/ Half Float (FP16) Immediate\n+operand immH()\n+%{\n+  match(ConH);\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -6945,0 +6974,15 @@\n+\/\/ Load Half Float Constant\n+\/\/ The \"ldr\" instruction loads a 32-bit word from the constant pool into a\n+\/\/ 32-bit register but only the bottom half will be populated and the top\n+\/\/ 16 bits are zero.\n+instruct loadConH(vRegF dst, immH con) %{\n+  match(Set dst con);\n+  format %{\n+    \"ldrs $dst, [$constantaddress]\\t# load from constant table: half float=$con\\n\\t\"\n+  %}\n+  ins_encode %{\n+    __ ldrs(as_FloatRegister($dst$$reg), $constantaddress($con));\n+  %}\n+  ins_pipe(fp_load_constant_s);\n+%}\n+\n@@ -13609,0 +13653,11 @@\n+instruct addHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (AddHF src1 src2));\n+  format %{ \"faddh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ faddh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n+\n@@ -13639,0 +13694,11 @@\n+instruct subHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (SubHF src1 src2));\n+  format %{ \"fsubh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fsubh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n+\n@@ -13669,0 +13735,11 @@\n+instruct mulHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (MulHF src1 src2));\n+  format %{ \"fmulh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fmulh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n+\n@@ -13699,0 +13776,14 @@\n+\/\/ src1 * src2 + src3 (half-precision float)\n+instruct maddHF_reg_reg(vRegF dst, vRegF src1, vRegF src2, vRegF src3) %{\n+  match(Set dst (FmaHF src3 (Binary src1 src2)));\n+  format %{ \"fmaddh $dst, $src1, $src2, $src3\" %}\n+  ins_encode %{\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+    __ fmaddh($dst$$FloatRegister,\n+              $src1$$FloatRegister,\n+              $src2$$FloatRegister,\n+              $src3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -13840,0 +13931,23 @@\n+\/\/ Math.max(HH)H (half-precision float)\n+instruct maxHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (MaxHF src1 src2));\n+  format %{ \"fmaxh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fmaxh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n+\n+\/\/ Math.min(HH)H (half-precision float)\n+instruct minHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (MinHF src1 src2));\n+  format %{ \"fminh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fminh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_dop_reg_reg_s);\n+%}\n@@ -13897,0 +14011,10 @@\n+instruct divHF_reg_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (DivHF src1  src2));\n+  format %{ \"fdivh $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fdivh($dst$$FloatRegister,\n+             $src1$$FloatRegister,\n+             $src2$$FloatRegister);\n+  %}\n+  ins_pipe(fp_div_s);\n+%}\n@@ -14070,0 +14194,10 @@\n+instruct sqrtHF_reg(vRegF dst, vRegF src) %{\n+  match(Set dst (SqrtHF src));\n+  format %{ \"fsqrth $dst, $src\" %}\n+  ins_encode %{\n+    __ fsqrth($dst$$FloatRegister,\n+              $src$$FloatRegister);\n+  %}\n+  ins_pipe(fp_div_s);\n+%}\n+\n@@ -17119,0 +17253,58 @@\n+\/\/----------------------------- Reinterpret ----------------------------------\n+\/\/ Reinterpret a half-precision float value in a floating point register to a general purpose register\n+instruct reinterpretHF2S(iRegINoSp dst, vRegF src) %{\n+  match(Set dst (ReinterpretHF2S src));\n+  format %{ \"reinterpretHF2S $dst, $src\" %}\n+  ins_encode %{\n+    __ smov($dst$$Register, $src$$FloatRegister, __ H, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ Reinterpret a half-precision float value in a general purpose register to a floating point register\n+instruct reinterpretS2HF(vRegF dst, iRegINoSp src) %{\n+  match(Set dst (ReinterpretS2HF src));\n+  format %{ \"reinterpretS2HF $dst, $src\" %}\n+  ins_encode %{\n+    __ mov($dst$$FloatRegister, __ H, 0, $src$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ Without this optimization, ReinterpretS2HF (ConvF2HF src) would result in the following\n+\/\/ instructions (the first two are for ConvF2HF and the last instruction is for ReinterpretS2HF) -\n+\/\/ fcvt $tmp1_fpr, $src_fpr    \/\/ Convert float to half-precision float\n+\/\/ mov  $tmp2_gpr, $tmp1_fpr   \/\/ Move half-precision float in FPR to a GPR\n+\/\/ mov  $dst_fpr,  $tmp2_gpr   \/\/ Move the result from a GPR to an FPR\n+\/\/ The move from FPR to GPR in ConvF2HF and the move from GPR to FPR in ReinterpretS2HF\n+\/\/ can be omitted in this pattern, resulting in -\n+\/\/ fcvt $dst, $src  \/\/ Convert float to half-precision float\n+instruct convF2HFAndS2HF(vRegF dst, vRegF src)\n+%{\n+  match(Set dst (ReinterpretS2HF (ConvF2HF src)));\n+  format %{ \"convF2HFAndS2HF $dst, $src\" %}\n+  ins_encode %{\n+    __ fcvtsh($dst$$FloatRegister, $src$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ Without this optimization, ConvHF2F (ReinterpretHF2S src) would result in the following\n+\/\/ instructions (the first one is for ReinterpretHF2S and the last two are for ConvHF2F) -\n+\/\/ mov  $tmp1_gpr, $src_fpr  \/\/ Move the half-precision float from an FPR to a GPR\n+\/\/ mov  $tmp2_fpr, $tmp1_gpr \/\/ Move the same value from GPR to an FPR\n+\/\/ fcvt $dst_fpr,  $tmp2_fpr \/\/ Convert the half-precision float to 32-bit float\n+\/\/ The move from FPR to GPR in ReinterpretHF2S and the move from GPR to FPR in ConvHF2F\n+\/\/ can be omitted as the input (src) is already in an FPR required for the fcvths instruction\n+\/\/ resulting in -\n+\/\/ fcvt $dst, $src  \/\/ Convert half-precision float to a 32-bit float\n+instruct convHF2SAndHF2F(vRegF dst, vRegF src)\n+%{\n+  match(Set dst (ConvHF2F (ReinterpretHF2S src)));\n+  format %{ \"convHF2SAndHF2F $dst, $src\" %}\n+  ins_encode %{\n+    __ fcvths($dst$$FloatRegister, $src$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":193,"deletions":1,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -2035,0 +2035,2 @@\n+  INSN(fsqrth, 0b11, 0b000011);   \/\/ Half-precision sqrt\n+\n@@ -2062,1 +2064,1 @@\n-  void data_processing(unsigned op31, unsigned type, unsigned opcode,\n+  void data_processing(unsigned op31, unsigned type, unsigned opcode, unsigned op21,\n@@ -2067,1 +2069,1 @@\n-    f(type, 23, 22), f(1, 21), f(opcode, 15, 10);\n+    f(type, 23, 22), f(op21, 21), f(opcode, 15, 10);\n@@ -2071,1 +2073,1 @@\n-#define INSN(NAME, op31, type, opcode)                  \\\n+#define INSN(NAME, op31, type, opcode, op21)                            \\\n@@ -2073,20 +2075,51 @@\n-    data_processing(op31, type, opcode, Vd, Vn, Vm);    \\\n-  }\n-\n-  INSN(fabds,  0b011, 0b10, 0b110101);\n-  INSN(fmuls,  0b000, 0b00, 0b000010);\n-  INSN(fdivs,  0b000, 0b00, 0b000110);\n-  INSN(fadds,  0b000, 0b00, 0b001010);\n-  INSN(fsubs,  0b000, 0b00, 0b001110);\n-  INSN(fmaxs,  0b000, 0b00, 0b010010);\n-  INSN(fmins,  0b000, 0b00, 0b010110);\n-  INSN(fnmuls, 0b000, 0b00, 0b100010);\n-\n-  INSN(fabdd,  0b011, 0b11, 0b110101);\n-  INSN(fmuld,  0b000, 0b01, 0b000010);\n-  INSN(fdivd,  0b000, 0b01, 0b000110);\n-  INSN(faddd,  0b000, 0b01, 0b001010);\n-  INSN(fsubd,  0b000, 0b01, 0b001110);\n-  INSN(fmaxd,  0b000, 0b01, 0b010010);\n-  INSN(fmind,  0b000, 0b01, 0b010110);\n-  INSN(fnmuld, 0b000, 0b01, 0b100010);\n+    data_processing(op31, type, opcode, op21, Vd, Vn, Vm);              \\\n+  }\n+\n+  INSN(fmuls,  0b000, 0b00, 0b000010, 0b1);\n+  INSN(fdivs,  0b000, 0b00, 0b000110, 0b1);\n+  INSN(fadds,  0b000, 0b00, 0b001010, 0b1);\n+  INSN(fsubs,  0b000, 0b00, 0b001110, 0b1);\n+  INSN(fmaxs,  0b000, 0b00, 0b010010, 0b1);\n+  INSN(fmins,  0b000, 0b00, 0b010110, 0b1);\n+  INSN(fnmuls, 0b000, 0b00, 0b100010, 0b1);\n+\n+  INSN(fmuld,  0b000, 0b01, 0b000010, 0b1);\n+  INSN(fdivd,  0b000, 0b01, 0b000110, 0b1);\n+  INSN(faddd,  0b000, 0b01, 0b001010, 0b1);\n+  INSN(fsubd,  0b000, 0b01, 0b001110, 0b1);\n+  INSN(fmaxd,  0b000, 0b01, 0b010010, 0b1);\n+  INSN(fmind,  0b000, 0b01, 0b010110, 0b1);\n+  INSN(fnmuld, 0b000, 0b01, 0b100010, 0b1);\n+\n+  \/\/ Half-precision floating-point instructions\n+  INSN(fmulh,  0b000, 0b11, 0b000010, 0b1);\n+  INSN(fdivh,  0b000, 0b11, 0b000110, 0b1);\n+  INSN(faddh,  0b000, 0b11, 0b001010, 0b1);\n+  INSN(fsubh,  0b000, 0b11, 0b001110, 0b1);\n+  INSN(fmaxh,  0b000, 0b11, 0b010010, 0b1);\n+  INSN(fminh,  0b000, 0b11, 0b010110, 0b1);\n+  INSN(fnmulh, 0b000, 0b11, 0b100010, 0b1);\n+#undef INSN\n+\n+\/\/ Advanced SIMD scalar three same\n+#define INSN(NAME, U, size, opcode)                                                     \\\n+  void NAME(FloatRegister Vd, FloatRegister Vn, FloatRegister Vm) {                     \\\n+    starti;                                                                             \\\n+    f(0b01, 31, 30), f(U, 29), f(0b11110, 28, 24), f(size, 23, 22), f(1, 21);           \\\n+    rf(Vm, 16), f(opcode, 15, 11), f(1, 10), rf(Vn, 5), rf(Vd, 0);                      \\\n+  }\n+\n+  INSN(fabds, 0b1, 0b10, 0b11010); \/\/ Floating-point Absolute Difference (single-precision)\n+  INSN(fabdd, 0b1, 0b11, 0b11010); \/\/ Floating-point Absolute Difference (double-precision)\n+\n+#undef INSN\n+\n+\/\/ Advanced SIMD scalar three same FP16\n+#define INSN(NAME, U, a, opcode)                                                       \\\n+  void NAME(FloatRegister Vd, FloatRegister Vn, FloatRegister Vm) {                    \\\n+    starti;                                                                            \\\n+    f(0b01, 31, 30), f(U, 29), f(0b11110, 28, 24), f(a, 23), f(0b10, 22, 21);          \\\n+    rf(Vm, 16), f(0b00, 15, 14), f(opcode, 13, 11), f(1, 10), rf(Vn, 5), rf(Vd, 0);    \\\n+  }\n+\n+  INSN(fabdh, 0b1, 0b1, 0b010); \/\/ Floating-point Absolute Difference (half-precision float)\n@@ -2123,0 +2156,1 @@\n+  INSN(fmaddh,  0b000, 0b11, 0, 0);  \/\/ half-precision fused multiply-add (scalar)\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":57,"deletions":23,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,0 +203,4 @@\n+  \/\/ Is FEAT_FP16 supported for this CPU?\n+  static bool is_feat_fp16_supported() {\n+    return (VM_Version::supports_fphp() && VM_Version::supports_asimdhp());\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,2 @@\n+    decl(FPHP,          fphp,          9)     \\\n+    decl(ASIMDHP,       asimdhp,       10)    \\\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,0 +78,8 @@\n+#ifndef HWCAP_FPHP\n+#define HWCAP_FPHP (1<<9)\n+#endif\n+\n+#ifndef HWCAP_ASIMDHP\n+#define HWCAP_ASIMDHP (1<<10)\n+#endif\n+\n@@ -122,0 +130,2 @@\n+  static_assert(CPU_FPHP    == HWCAP_FPHP,    \"Flag CPU_FPHP must follow Linux HWCAP\");\n+  static_assert(CPU_ASIMDHP == HWCAP_ASIMDHP, \"Flag CPU_ASIMDHP must follow Linux HWCAP\");\n@@ -136,1 +146,3 @@\n-      HWCAP_PACA);\n+      HWCAP_PACA    |\n+      HWCAP_FPHP    |\n+      HWCAP_ASIMDHP);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vm_version_linux_aarch64.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,0 +186,2 @@\n+        FPHP,\n+        ASIMDHP,\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/aarch64\/AArch64.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -17,4 +17,3 @@\n-        0x7e0, 0xfc0, 0x1f80, 0x3ff0, 0x7e00, 0x7e00,\n-        0x8000, 0x81ff, 0xc1ff, 0xc003, 0xc7ff, 0xdfff,\n-        0xe03f, 0xe10f, 0xe1ff, 0xf801, 0xfc00, 0xfc07,\n-        0xff03, 0xfffe]\n+        0x7e0, 0xfc0, 0x1f80, 0x3ff0, 0x7e00, 0x8000,\n+        0x81ff, 0xc1ff, 0xc003, 0xc7ff, 0xdfff, 0xe03f,\n+        0xe1ff, 0xf801, 0xfc00, 0xfc07, 0xff03, 0xfffe]\n@@ -1068,1 +1067,1 @@\n-        elif (self._name.endswith(\"s\") | self._name.endswith(\"d\")):\n+        elif (self._name.endswith(\"h\") | self._name.endswith(\"s\") | self._name.endswith(\"d\")):\n@@ -1687,1 +1686,4 @@\n-         [[\"fabds\", \"sss\"], [\"fmuls\", \"sss\"], [\"fdivs\", \"sss\"], [\"fadds\", \"sss\"], [\"fsubs\", \"sss\"],\n+         [[\"fabdh\", \"hhh\"], [\"fmulh\", \"hhh\"], [\"fdivh\", \"hhh\"], [\"faddh\", \"hhh\"], [\"fsubh\", \"hhh\"],\n+          [\"fmaxh\", \"hhh\"], [\"fminh\", \"hhh\"], [\"fnmulh\", \"hhh\"],\n+          [\"fabds\", \"sss\"], [\"fmuls\", \"sss\"], [\"fdivs\", \"sss\"], [\"fadds\", \"sss\"], [\"fsubs\", \"sss\"],\n+          [\"fmaxs\", \"sss\"], [\"fmins\", \"sss\"], [\"fnmuls\", \"sss\"],\n@@ -1689,0 +1691,1 @@\n+          [\"fmaxd\", \"ddd\"], [\"fmind\", \"ddd\"], [\"fnmuld\", \"ddd\"]\n@@ -1692,2 +1695,3 @@\n-         [[\"fmadds\", \"ssss\"], [\"fmsubs\", \"ssss\"], [\"fnmadds\", \"ssss\"], [\"fnmadds\", \"ssss\"],\n-          [\"fmaddd\", \"dddd\"], [\"fmsubd\", \"dddd\"], [\"fnmaddd\", \"dddd\"], [\"fnmaddd\", \"dddd\"],])\n+         [[\"fmaddh\", \"hhhh\"], [\"fmadds\", \"ssss\"], [\"fmsubs\", \"ssss\"], [\"fnmadds\", \"ssss\"],\n+          [\"fnmadds\", \"ssss\"], [\"fmaddd\", \"dddd\"], [\"fmsubd\", \"dddd\"], [\"fnmaddd\", \"dddd\"],\n+          [\"fnmaddd\", \"dddd\"],])\n@@ -1699,1 +1703,1 @@\n-          [\"fcvtd\", \"sd\"],\n+          [\"fcvtd\", \"sd\"], [\"fsqrth\", \"hh\"]\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -487,10 +487,24 @@\n-    __ fabds(v30, v15, v3);                            \/\/       fabd    s30, s15, s3\n-    __ fmuls(v12, v12, v16);                           \/\/       fmul    s12, s12, s16\n-    __ fdivs(v31, v31, v18);                           \/\/       fdiv    s31, s31, s18\n-    __ fadds(v19, v21, v16);                           \/\/       fadd    s19, s21, s16\n-    __ fsubs(v15, v10, v21);                           \/\/       fsub    s15, s10, s21\n-    __ fabdd(v2, v10, v28);                            \/\/       fabd    d2, d10, d28\n-    __ fmuld(v7, v30, v31);                            \/\/       fmul    d7, d30, d31\n-    __ fdivd(v18, v1, v2);                             \/\/       fdiv    d18, d1, d2\n-    __ faddd(v6, v10, v3);                             \/\/       fadd    d6, d10, d3\n-    __ fsubd(v25, v11, v7);                            \/\/       fsub    d25, d11, d7\n+    __ fabdh(v30, v15, v3);                            \/\/       fabd    h30, h15, h3\n+    __ fmulh(v12, v12, v16);                           \/\/       fmul    h12, h12, h16\n+    __ fdivh(v31, v31, v18);                           \/\/       fdiv    h31, h31, h18\n+    __ faddh(v19, v21, v16);                           \/\/       fadd    h19, h21, h16\n+    __ fsubh(v15, v10, v21);                           \/\/       fsub    h15, h10, h21\n+    __ fmaxh(v2, v10, v28);                            \/\/       fmax    h2, h10, h28\n+    __ fminh(v7, v30, v31);                            \/\/       fmin    h7, h30, h31\n+    __ fnmulh(v18, v1, v2);                            \/\/       fnmul   h18, h1, h2\n+    __ fabds(v6, v10, v3);                             \/\/       fabd    s6, s10, s3\n+    __ fmuls(v25, v11, v7);                            \/\/       fmul    s25, s11, s7\n+    __ fdivs(v1, v12, v0);                             \/\/       fdiv    s1, s12, s0\n+    __ fadds(v3, v19, v29);                            \/\/       fadd    s3, s19, s29\n+    __ fsubs(v6, v23, v6);                             \/\/       fsub    s6, s23, s6\n+    __ fmaxs(v0, v28, v27);                            \/\/       fmax    s0, s28, s27\n+    __ fmins(v2, v5, v7);                              \/\/       fmin    s2, s5, s7\n+    __ fnmuls(v29, v12, v25);                          \/\/       fnmul   s29, s12, s25\n+    __ fabdd(v13, v12, v24);                           \/\/       fabd    d13, d12, d24\n+    __ fmuld(v19, v8, v18);                            \/\/       fmul    d19, d8, d18\n+    __ fdivd(v22, v26, v21);                           \/\/       fdiv    d22, d26, d21\n+    __ faddd(v20, v19, v2);                            \/\/       fadd    d20, d19, d2\n+    __ fsubd(v30, v22, v8);                            \/\/       fsub    d30, d22, d8\n+    __ fmaxd(v22, v19, v21);                           \/\/       fmax    d22, d19, d21\n+    __ fmind(v12, v18, v21);                           \/\/       fmin    d12, d18, d21\n+    __ fnmuld(v6, v16, v3);                            \/\/       fnmul   d6, d16, d3\n@@ -499,8 +513,9 @@\n-    __ fmadds(v1, v12, v0, v3);                        \/\/       fmadd   s1, s12, s0, s3\n-    __ fmsubs(v19, v29, v6, v23);                      \/\/       fmsub   s19, s29, s6, s23\n-    __ fnmadds(v6, v0, v28, v27);                      \/\/       fnmadd  s6, s0, s28, s27\n-    __ fnmadds(v2, v5, v7, v29);                       \/\/       fnmadd  s2, s5, s7, s29\n-    __ fmaddd(v12, v25, v13, v12);                     \/\/       fmadd   d12, d25, d13, d12\n-    __ fmsubd(v24, v19, v8, v18);                      \/\/       fmsub   d24, d19, d8, d18\n-    __ fnmaddd(v22, v26, v21, v20);                    \/\/       fnmadd  d22, d26, d21, d20\n-    __ fnmaddd(v19, v2, v30, v22);                     \/\/       fnmadd  d19, d2, d30, d22\n+    __ fmaddh(v3, v29, v3, v28);                       \/\/       fmadd   h3, h29, h3, h28\n+    __ fmadds(v15, v14, v10, v13);                     \/\/       fmadd   s15, s14, s10, s13\n+    __ fmsubs(v12, v18, v10, v26);                     \/\/       fmsub   s12, s18, s10, s26\n+    __ fnmadds(v7, v7, v15, v29);                      \/\/       fnmadd  s7, s7, s15, s29\n+    __ fnmadds(v0, v23, v0, v12);                      \/\/       fnmadd  s0, s23, s0, s12\n+    __ fmaddd(v24, v14, v13, v8);                      \/\/       fmadd   d24, d14, d13, d8\n+    __ fmsubd(v15, v7, v9, v20);                       \/\/       fmsub   d15, d7, d9, d20\n+    __ fnmaddd(v19, v29, v31, v16);                    \/\/       fnmadd  d19, d29, d31, d16\n+    __ fnmaddd(v2, v9, v16, v21);                      \/\/       fnmadd  d2, d9, d16, d21\n@@ -509,12 +524,13 @@\n-    __ fmovs(v8, v22);                                 \/\/       fmov    s8, s22\n-    __ fabss(v19, v21);                                \/\/       fabs    s19, s21\n-    __ fnegs(v12, v18);                                \/\/       fneg    s12, s18\n-    __ fsqrts(v21, v6);                                \/\/       fsqrt   s21, s6\n-    __ fcvts(v16, v3);                                 \/\/       fcvt    d16, s3\n-    __ fcvtsh(v3, v29);                                \/\/       fcvt    h3, s29\n-    __ fcvths(v3, v28);                                \/\/       fcvt    s3, h28\n-    __ fmovd(v15, v14);                                \/\/       fmov    d15, d14\n-    __ fabsd(v10, v13);                                \/\/       fabs    d10, d13\n-    __ fnegd(v12, v18);                                \/\/       fneg    d12, d18\n-    __ fsqrtd(v10, v26);                               \/\/       fsqrt   d10, d26\n-    __ fcvtd(v7, v7);                                  \/\/       fcvt    s7, d7\n+    __ fmovs(v30, v4);                                 \/\/       fmov    s30, s4\n+    __ fabss(v1, v27);                                 \/\/       fabs    s1, s27\n+    __ fnegs(v25, v24);                                \/\/       fneg    s25, s24\n+    __ fsqrts(v14, v21);                               \/\/       fsqrt   s14, s21\n+    __ fcvts(v13, v6);                                 \/\/       fcvt    d13, s6\n+    __ fcvtsh(v12, v25);                               \/\/       fcvt    h12, s25\n+    __ fcvths(v25, v30);                               \/\/       fcvt    s25, h30\n+    __ fmovd(v28, v21);                                \/\/       fmov    d28, d21\n+    __ fabsd(v16, v23);                                \/\/       fabs    d16, d23\n+    __ fnegd(v5, v29);                                 \/\/       fneg    d5, d29\n+    __ fsqrtd(v22, v19);                               \/\/       fsqrt   d22, d19\n+    __ fcvtd(v13, v20);                                \/\/       fcvt    s13, d20\n+    __ fsqrth(v19, v28);                               \/\/       fsqrt   h19, h28\n@@ -523,16 +539,16 @@\n-    __ fcvtzsw(r14, v29);                              \/\/       fcvtzs  w14, s29\n-    __ fcvtzs(r0, v23);                                \/\/       fcvtzs  x0, s23\n-    __ fcvtzdw(r0, v12);                               \/\/       fcvtzs  w0, d12\n-    __ fcvtzd(r23, v14);                               \/\/       fcvtzs  x23, d14\n-    __ scvtfws(v13, r7);                               \/\/       scvtf   s13, w7\n-    __ scvtfs(v15, r7);                                \/\/       scvtf   s15, x7\n-    __ scvtfwd(v9, r20);                               \/\/       scvtf   d9, w20\n-    __ scvtfd(v19, r28);                               \/\/       scvtf   d19, x28\n-    __ fcvtassw(r30, v16);                             \/\/       fcvtas  w30, s16\n-    __ fcvtasd(r2, v9);                                \/\/       fcvtas  x2, d9\n-    __ fcvtmssw(r16, v21);                             \/\/       fcvtms  w16, s21\n-    __ fcvtmsd(r29, v4);                               \/\/       fcvtms  x29, d4\n-    __ fmovs(r1, v27);                                 \/\/       fmov    w1, s27\n-    __ fmovd(r24, v24);                                \/\/       fmov    x24, d24\n-    __ fmovs(v14, r21);                                \/\/       fmov    s14, w21\n-    __ fmovd(v13, r5);                                 \/\/       fmov    d13, x5\n+    __ fcvtzsw(r17, v6);                               \/\/       fcvtzs  w17, s6\n+    __ fcvtzs(r13, v7);                                \/\/       fcvtzs  x13, s7\n+    __ fcvtzdw(r28, v26);                              \/\/       fcvtzs  w28, d26\n+    __ fcvtzd(r17, v6);                                \/\/       fcvtzs  x17, d6\n+    __ scvtfws(v1, r4);                                \/\/       scvtf   s1, w4\n+    __ scvtfs(v14, r20);                               \/\/       scvtf   s14, x20\n+    __ scvtfwd(v7, r21);                               \/\/       scvtf   d7, w21\n+    __ scvtfd(v27, r23);                               \/\/       scvtf   d27, x23\n+    __ fcvtassw(r13, v20);                             \/\/       fcvtas  w13, s20\n+    __ fcvtasd(r30, v28);                              \/\/       fcvtas  x30, d28\n+    __ fcvtmssw(r10, v21);                             \/\/       fcvtms  w10, s21\n+    __ fcvtmsd(r5, v17);                               \/\/       fcvtms  x5, d17\n+    __ fmovs(r11, v14);                                \/\/       fmov    w11, s14\n+    __ fmovd(r13, v21);                                \/\/       fmov    x13, d21\n+    __ fmovs(v27, r14);                                \/\/       fmov    s27, w14\n+    __ fmovd(v4, r23);                                 \/\/       fmov    d4, x23\n@@ -541,4 +557,4 @@\n-    __ fcmps(v12, v25);                                \/\/       fcmp    s12, s25\n-    __ fcmpd(v25, v30);                                \/\/       fcmp    d25, d30\n-    __ fcmps(v28, 0.0);                                \/\/       fcmp    s28, #0.0\n-    __ fcmpd(v21, 0.0);                                \/\/       fcmp    d21, #0.0\n+    __ fcmps(v24, v30);                                \/\/       fcmp    s24, s30\n+    __ fcmpd(v12, v14);                                \/\/       fcmp    d12, d14\n+    __ fcmps(v17, 0.0);                                \/\/       fcmp    s17, #0.0\n+    __ fcmpd(v28, 0.0);                                \/\/       fcmp    d28, #0.0\n@@ -547,5 +563,5 @@\n-    __ stpw(r22, r5, Address(r28, -48));               \/\/       stp     w22, w5, [x28, #-48]\n-    __ ldpw(r19, r27, Address(r19, 16));               \/\/       ldp     w19, w27, [x19, #16]\n-    __ ldpsw(r28, r26, Address(r7, -32));              \/\/       ldpsw   x28, x26, [x7, #-32]\n-    __ stp(r6, r1, Address(r4, -48));                  \/\/       stp     x6, x1, [x4, #-48]\n-    __ ldp(r26, r23, Address(r21, -80));               \/\/       ldp     x26, x23, [x21, #-80]\n+    __ stpw(r0, r6, Address(r26, 16));                 \/\/       stp     w0, w6, [x26, #16]\n+    __ ldpw(r0, r30, Address(r6, -32));                \/\/       ldp     w0, w30, [x6, #-32]\n+    __ ldpsw(r16, r2, Address(r11, -208));             \/\/       ldpsw   x16, x2, [x11, #-208]\n+    __ stp(r15, r0, Address(r12, 128));                \/\/       stp     x15, x0, [x12, #128]\n+    __ ldp(r7, r30, Address(r23, 32));                 \/\/       ldp     x7, x30, [x23, #32]\n@@ -554,5 +570,5 @@\n-    __ stpw(r20, r30, Address(__ pre(r9, -96)));       \/\/       stp     w20, w30, [x9, #-96]!\n-    __ ldpw(r13, r20, Address(__ pre(r26, 16)));       \/\/       ldp     w13, w20, [x26, #16]!\n-    __ ldpsw(r29, r11, Address(__ pre(r13, -80)));     \/\/       ldpsw   x29, x11, [x13, #-80]!\n-    __ stp(r27, r21, Address(__ pre(r5, -48)));        \/\/       stp     x27, x21, [x5, #-48]!\n-    __ ldp(r6, r0, Address(__ pre(r30, 80)));          \/\/       ldp     x6, x0, [x30, #80]!\n+    __ stpw(r26, r15, Address(__ pre(r7, -256)));      \/\/       stp     w26, w15, [x7, #-256]!\n+    __ ldpw(r11, r15, Address(__ pre(r10, -32)));      \/\/       ldp     w11, w15, [x10, #-32]!\n+    __ ldpsw(r19, r16, Address(__ pre(r1, 64)));       \/\/       ldpsw   x19, x16, [x1, #64]!\n+    __ stp(r14, r9, Address(__ pre(r0, 128)));         \/\/       stp     x14, x9, [x0, #128]!\n+    __ ldp(r27, r3, Address(__ pre(r12, -96)));        \/\/       ldp     x27, x3, [x12, #-96]!\n@@ -561,5 +577,5 @@\n-    __ stpw(r19, r15, Address(__ post(r16, -208)));    \/\/       stp     w19, w15, [x16], #-208\n-    __ ldpw(r12, r23, Address(__ post(r9, -240)));     \/\/       ldp     w12, w23, [x9], #-240\n-    __ ldpsw(r0, r26, Address(__ post(r15, 32)));      \/\/       ldpsw   x0, x26, [x15], #32\n-    __ stp(r8, r17, Address(__ post(r26, -208)));      \/\/       stp     x8, x17, [x26], #-208\n-    __ ldp(r25, r7, Address(__ post(r2, -176)));       \/\/       ldp     x25, x7, [x2], #-176\n+    __ stpw(r8, r11, Address(__ post(r12, -256)));     \/\/       stp     w8, w11, [x12], #-256\n+    __ ldpw(r10, r16, Address(__ post(r4, 64)));       \/\/       ldp     w10, w16, [x4], #64\n+    __ ldpsw(r10, r30, Address(__ post(r19, -64)));    \/\/       ldpsw   x10, x30, [x19], #-64\n+    __ stp(r24, r2, Address(__ post(r15, -96)));       \/\/       stp     x24, x2, [x15], #-96\n+    __ ldp(r24, r10, Address(__ post(r16, 80)));       \/\/       ldp     x24, x10, [x16], #80\n@@ -568,4 +584,4 @@\n-    __ stnpw(r19, r17, Address(r1, -208));             \/\/       stnp    w19, w17, [x1, #-208]\n-    __ ldnpw(r0, r13, Address(r22, 128));              \/\/       ldnp    w0, w13, [x22, #128]\n-    __ stnp(r29, r23, Address(r27, 0));                \/\/       stnp    x29, x23, [x27, #0]\n-    __ ldnp(r11, r10, Address(r8, -224));              \/\/       ldnp    x11, x10, [x8, #-224]\n+    __ stnpw(r30, r21, Address(r29, 16));              \/\/       stnp    w30, w21, [x29, #16]\n+    __ ldnpw(r8, r30, Address(r10, -112));             \/\/       ldnp    w8, w30, [x10, #-112]\n+    __ stnp(r30, r26, Address(r6, -128));              \/\/       stnp    x30, x26, [x6, #-128]\n+    __ ldnp(r24, r2, Address(r20, 64));                \/\/       ldnp    x24, x2, [x20, #64]\n@@ -574,22 +590,22 @@\n-    __ ld1(v0, __ T8B, Address(r11));                  \/\/       ld1     {v0.8B}, [x11]\n-    __ ld1(v16, v17, __ T16B, Address(__ post(r26, 32))); \/\/    ld1     {v16.16B, v17.16B}, [x26], 32\n-    __ ld1(v22, v23, v24, __ T1D, Address(__ post(r26, r17))); \/\/       ld1     {v22.1D, v23.1D, v24.1D}, [x26], x17\n-    __ ld1(v27, v28, v29, v30, __ T8H, Address(__ post(r29, 64))); \/\/   ld1     {v27.8H, v28.8H, v29.8H, v30.8H}, [x29], 64\n-    __ ld1r(v22, __ T8B, Address(r6));                 \/\/       ld1r    {v22.8B}, [x6]\n-    __ ld1r(v14, __ T4S, Address(__ post(r29, 4)));    \/\/       ld1r    {v14.4S}, [x29], 4\n-    __ ld1r(v22, __ T1D, Address(__ post(r12, r16)));  \/\/       ld1r    {v22.1D}, [x12], x16\n-    __ ld2(v1, v2, __ T2D, Address(r0));               \/\/       ld2     {v1.2D, v2.2D}, [x0]\n-    __ ld2(v10, v11, __ T4H, Address(__ post(r21, 16))); \/\/     ld2     {v10.4H, v11.4H}, [x21], 16\n-    __ ld2r(v7, v8, __ T16B, Address(r25));            \/\/       ld2r    {v7.16B, v8.16B}, [x25]\n-    __ ld2r(v9, v10, __ T2S, Address(__ post(r9, 8))); \/\/       ld2r    {v9.2S, v10.2S}, [x9], 8\n-    __ ld2r(v9, v10, __ T2D, Address(__ post(r12, r14))); \/\/    ld2r    {v9.2D, v10.2D}, [x12], x14\n-    __ ld3(v7, v8, v9, __ T4S, Address(__ post(r4, r17))); \/\/   ld3     {v7.4S, v8.4S, v9.4S}, [x4], x17\n-    __ ld3(v23, v24, v25, __ T2S, Address(r17));       \/\/       ld3     {v23.2S, v24.2S, v25.2S}, [x17]\n-    __ ld3r(v4, v5, v6, __ T8H, Address(r22));         \/\/       ld3r    {v4.8H, v5.8H, v6.8H}, [x22]\n-    __ ld3r(v13, v14, v15, __ T4S, Address(__ post(r2, 12))); \/\/        ld3r    {v13.4S, v14.4S, v15.4S}, [x2], 12\n-    __ ld3r(v16, v17, v18, __ T1D, Address(__ post(r10, r12))); \/\/      ld3r    {v16.1D, v17.1D, v18.1D}, [x10], x12\n-    __ ld4(v4, v5, v6, v7, __ T8H, Address(__ post(r2, 64))); \/\/        ld4     {v4.8H, v5.8H, v6.8H, v7.8H}, [x2], 64\n-    __ ld4(v6, v7, v8, v9, __ T8B, Address(__ post(r20, r11))); \/\/      ld4     {v6.8B, v7.8B, v8.8B, v9.8B}, [x20], x11\n-    __ ld4r(v12, v13, v14, v15, __ T8B, Address(r12)); \/\/       ld4r    {v12.8B, v13.8B, v14.8B, v15.8B}, [x12]\n-    __ ld4r(v16, v17, v18, v19, __ T4H, Address(__ post(r17, 8))); \/\/   ld4r    {v16.4H, v17.4H, v18.4H, v19.4H}, [x17], 8\n-    __ ld4r(v14, v15, v16, v17, __ T2S, Address(__ post(r25, r16))); \/\/ ld4r    {v14.2S, v15.2S, v16.2S, v17.2S}, [x25], x16\n+    __ ld1(v31, __ T8B, Address(r25));                 \/\/       ld1     {v31.8B}, [x25]\n+    __ ld1(v5, v6, __ T16B, Address(__ post(r15, 32))); \/\/      ld1     {v5.16B, v6.16B}, [x15], 32\n+    __ ld1(v10, v11, v12, __ T1D, Address(__ post(r7, r13))); \/\/        ld1     {v10.1D, v11.1D, v12.1D}, [x7], x13\n+    __ ld1(v13, v14, v15, v16, __ T8H, Address(__ post(r16, 64))); \/\/   ld1     {v13.8H, v14.8H, v15.8H, v16.8H}, [x16], 64\n+    __ ld1r(v7, __ T8B, Address(r17));                 \/\/       ld1r    {v7.8B}, [x17]\n+    __ ld1r(v16, __ T4S, Address(__ post(r25, 4)));    \/\/       ld1r    {v16.4S}, [x25], 4\n+    __ ld1r(v11, __ T1D, Address(__ post(r3, r7)));    \/\/       ld1r    {v11.1D}, [x3], x7\n+    __ ld2(v13, v14, __ T2D, Address(r7));             \/\/       ld2     {v13.2D, v14.2D}, [x7]\n+    __ ld2(v9, v10, __ T4H, Address(__ post(r27, 16))); \/\/      ld2     {v9.4H, v10.4H}, [x27], 16\n+    __ ld2r(v6, v7, __ T16B, Address(r26));            \/\/       ld2r    {v6.16B, v7.16B}, [x26]\n+    __ ld2r(v23, v24, __ T2S, Address(__ post(r16, 8))); \/\/     ld2r    {v23.2S, v24.2S}, [x16], 8\n+    __ ld2r(v6, v7, __ T2D, Address(__ post(r13, r8))); \/\/      ld2r    {v6.2D, v7.2D}, [x13], x8\n+    __ ld3(v20, v21, v22, __ T4S, Address(__ post(r1, r26))); \/\/        ld3     {v20.4S, v21.4S, v22.4S}, [x1], x26\n+    __ ld3(v15, v16, v17, __ T2S, Address(r15));       \/\/       ld3     {v15.2S, v16.2S, v17.2S}, [x15]\n+    __ ld3r(v29, v30, v31, __ T8H, Address(r22));      \/\/       ld3r    {v29.8H, v30.8H, v31.8H}, [x22]\n+    __ ld3r(v6, v7, v8, __ T4S, Address(__ post(r10, 12))); \/\/  ld3r    {v6.4S, v7.4S, v8.4S}, [x10], 12\n+    __ ld3r(v15, v16, v17, __ T1D, Address(__ post(r6, r15))); \/\/       ld3r    {v15.1D, v16.1D, v17.1D}, [x6], x15\n+    __ ld4(v6, v7, v8, v9, __ T8H, Address(__ post(r10, 64))); \/\/       ld4     {v6.8H, v7.8H, v8.8H, v9.8H}, [x10], 64\n+    __ ld4(v11, v12, v13, v14, __ T8B, Address(__ post(r3, r7))); \/\/    ld4     {v11.8B, v12.8B, v13.8B, v14.8B}, [x3], x7\n+    __ ld4r(v12, v13, v14, v15, __ T8B, Address(r25)); \/\/       ld4r    {v12.8B, v13.8B, v14.8B, v15.8B}, [x25]\n+    __ ld4r(v11, v12, v13, v14, __ T4H, Address(__ post(r15, 8))); \/\/   ld4r    {v11.4H, v12.4H, v13.4H, v14.4H}, [x15], 8\n+    __ ld4r(v30, v31, v0, v1, __ T2S, Address(__ post(r6, r28))); \/\/    ld4r    {v30.2S, v31.2S, v0.2S, v1.2S}, [x6], x28\n@@ -598,19 +614,19 @@\n-    __ addv(v20, __ T8B, v21);                         \/\/       addv    b20, v21.8B\n-    __ addv(v1, __ T16B, v2);                          \/\/       addv    b1, v2.16B\n-    __ addv(v23, __ T4H, v24);                         \/\/       addv    h23, v24.4H\n-    __ addv(v30, __ T8H, v31);                         \/\/       addv    h30, v31.8H\n-    __ addv(v14, __ T4S, v15);                         \/\/       addv    s14, v15.4S\n-    __ smaxv(v2, __ T8B, v3);                          \/\/       smaxv   b2, v3.8B\n-    __ smaxv(v6, __ T16B, v7);                         \/\/       smaxv   b6, v7.16B\n-    __ smaxv(v3, __ T4H, v4);                          \/\/       smaxv   h3, v4.4H\n-    __ smaxv(v8, __ T8H, v9);                          \/\/       smaxv   h8, v9.8H\n-    __ smaxv(v25, __ T4S, v26);                        \/\/       smaxv   s25, v26.4S\n-    __ fmaxv(v0, __ T4S, v1);                          \/\/       fmaxv   s0, v1.4S\n-    __ sminv(v27, __ T8B, v28);                        \/\/       sminv   b27, v28.8B\n-    __ uminv(v30, __ T8B, v31);                        \/\/       uminv   b30, v31.8B\n-    __ sminv(v5, __ T16B, v6);                         \/\/       sminv   b5, v6.16B\n-    __ uminv(v5, __ T16B, v6);                         \/\/       uminv   b5, v6.16B\n-    __ sminv(v30, __ T4H, v31);                        \/\/       sminv   h30, v31.4H\n-    __ uminv(v11, __ T4H, v12);                        \/\/       uminv   h11, v12.4H\n-    __ sminv(v25, __ T8H, v26);                        \/\/       sminv   h25, v26.8H\n-    __ uminv(v0, __ T8H, v1);                          \/\/       uminv   h0, v1.8H\n+    __ addv(v27, __ T8B, v28);                         \/\/       addv    b27, v28.8B\n+    __ addv(v28, __ T16B, v29);                        \/\/       addv    b28, v29.16B\n+    __ addv(v1, __ T4H, v2);                           \/\/       addv    h1, v2.4H\n+    __ addv(v28, __ T8H, v29);                         \/\/       addv    h28, v29.8H\n+    __ addv(v1, __ T4S, v2);                           \/\/       addv    s1, v2.4S\n+    __ smaxv(v20, __ T8B, v21);                        \/\/       smaxv   b20, v21.8B\n+    __ smaxv(v29, __ T16B, v30);                       \/\/       smaxv   b29, v30.16B\n+    __ smaxv(v16, __ T4H, v17);                        \/\/       smaxv   h16, v17.4H\n+    __ smaxv(v13, __ T8H, v14);                        \/\/       smaxv   h13, v14.8H\n+    __ smaxv(v10, __ T4S, v11);                        \/\/       smaxv   s10, v11.4S\n+    __ fmaxv(v29, __ T4S, v30);                        \/\/       fmaxv   s29, v30.4S\n+    __ sminv(v29, __ T8B, v30);                        \/\/       sminv   b29, v30.8B\n+    __ uminv(v19, __ T8B, v20);                        \/\/       uminv   b19, v20.8B\n+    __ sminv(v22, __ T16B, v23);                       \/\/       sminv   b22, v23.16B\n+    __ uminv(v10, __ T16B, v11);                       \/\/       uminv   b10, v11.16B\n+    __ sminv(v4, __ T4H, v5);                          \/\/       sminv   h4, v5.4H\n+    __ uminv(v31, __ T4H, v0);                         \/\/       uminv   h31, v0.4H\n+    __ sminv(v21, __ T8H, v22);                        \/\/       sminv   h21, v22.8H\n+    __ uminv(v8, __ T8H, v9);                          \/\/       uminv   h8, v9.8H\n@@ -618,6 +634,6 @@\n-    __ uminv(v0, __ T4S, v1);                          \/\/       uminv   s0, v1.4S\n-    __ fminv(v19, __ T4S, v20);                        \/\/       fminv   s19, v20.4S\n-    __ fmaxp(v29, v30, __ S);                          \/\/       fmaxp   s29, v30.2S\n-    __ fmaxp(v26, v27, __ D);                          \/\/       fmaxp   d26, v27.2D\n-    __ fminp(v9, v10, __ S);                           \/\/       fminp   s9, v10.2S\n-    __ fminp(v26, v27, __ D);                          \/\/       fminp   d26, v27.2D\n+    __ uminv(v19, __ T4S, v20);                        \/\/       uminv   s19, v20.4S\n+    __ fminv(v10, __ T4S, v11);                        \/\/       fminv   s10, v11.4S\n+    __ fmaxp(v28, v29, __ S);                          \/\/       fmaxp   s28, v29.2S\n+    __ fmaxp(v2, v3, __ D);                            \/\/       fmaxp   d2, v3.2D\n+    __ fminp(v25, v26, __ S);                          \/\/       fminp   s25, v26.2S\n+    __ fminp(v5, v6, __ D);                            \/\/       fminp   d5, v6.2D\n@@ -626,7 +642,7 @@\n-    __ fcm(Assembler::GT, v12, __ T2S, v13);           \/\/       fcmgt   v12.2S, v13.2S, #0.0\n-    __ fcm(Assembler::GT, v15, __ T4S, v16);           \/\/       fcmgt   v15.4S, v16.4S, #0.0\n-    __ fcm(Assembler::GT, v11, __ T2D, v12);           \/\/       fcmgt   v11.2D, v12.2D, #0.0\n-    __ fcm(Assembler::GE, v11, __ T2S, v12);           \/\/       fcmge   v11.2S, v12.2S, #0.0\n-    __ fcm(Assembler::GE, v18, __ T4S, v19);           \/\/       fcmge   v18.4S, v19.4S, #0.0\n-    __ fcm(Assembler::GE, v25, __ T2D, v26);           \/\/       fcmge   v25.2D, v26.2D, #0.0\n-    __ fcm(Assembler::EQ, v22, __ T2S, v23);           \/\/       fcmeq   v22.2S, v23.2S, #0.0\n+    __ fcm(Assembler::GT, v3, __ T2S, v4);             \/\/       fcmgt   v3.2S, v4.2S, #0.0\n+    __ fcm(Assembler::GT, v8, __ T4S, v9);             \/\/       fcmgt   v8.4S, v9.4S, #0.0\n+    __ fcm(Assembler::GT, v22, __ T2D, v23);           \/\/       fcmgt   v22.2D, v23.2D, #0.0\n+    __ fcm(Assembler::GE, v19, __ T2S, v20);           \/\/       fcmge   v19.2S, v20.2S, #0.0\n+    __ fcm(Assembler::GE, v13, __ T4S, v14);           \/\/       fcmge   v13.4S, v14.4S, #0.0\n+    __ fcm(Assembler::GE, v5, __ T2D, v6);             \/\/       fcmge   v5.2D, v6.2D, #0.0\n+    __ fcm(Assembler::EQ, v29, __ T2S, v30);           \/\/       fcmeq   v29.2S, v30.2S, #0.0\n@@ -634,7 +650,7 @@\n-    __ fcm(Assembler::EQ, v0, __ T2D, v1);             \/\/       fcmeq   v0.2D, v1.2D, #0.0\n-    __ fcm(Assembler::LT, v17, __ T2S, v18);           \/\/       fcmlt   v17.2S, v18.2S, #0.0\n-    __ fcm(Assembler::LT, v11, __ T4S, v12);           \/\/       fcmlt   v11.4S, v12.4S, #0.0\n-    __ fcm(Assembler::LT, v6, __ T2D, v7);             \/\/       fcmlt   v6.2D, v7.2D, #0.0\n-    __ fcm(Assembler::LE, v29, __ T2S, v30);           \/\/       fcmle   v29.2S, v30.2S, #0.0\n-    __ fcm(Assembler::LE, v6, __ T4S, v7);             \/\/       fcmle   v6.4S, v7.4S, #0.0\n-    __ fcm(Assembler::LE, v5, __ T2D, v6);             \/\/       fcmle   v5.2D, v6.2D, #0.0\n+    __ fcm(Assembler::EQ, v21, __ T2D, v22);           \/\/       fcmeq   v21.2D, v22.2D, #0.0\n+    __ fcm(Assembler::LT, v26, __ T2S, v27);           \/\/       fcmlt   v26.2S, v27.2S, #0.0\n+    __ fcm(Assembler::LT, v24, __ T4S, v25);           \/\/       fcmlt   v24.4S, v25.4S, #0.0\n+    __ fcm(Assembler::LT, v3, __ T2D, v4);             \/\/       fcmlt   v3.2D, v4.2D, #0.0\n+    __ fcm(Assembler::LE, v24, __ T2S, v25);           \/\/       fcmle   v24.2S, v25.2S, #0.0\n+    __ fcm(Assembler::LE, v26, __ T4S, v27);           \/\/       fcmle   v26.4S, v27.4S, #0.0\n+    __ fcm(Assembler::LE, v23, __ T2D, v24);           \/\/       fcmle   v23.2D, v24.2D, #0.0\n@@ -643,1 +659,1 @@\n-    __ absr(v5, __ T8B, v6);                           \/\/       abs     v5.8B, v6.8B\n+    __ absr(v15, __ T8B, v16);                         \/\/       abs     v15.8B, v16.8B\n@@ -645,8 +661,8 @@\n-    __ absr(v19, __ T4H, v20);                         \/\/       abs     v19.4H, v20.4H\n-    __ absr(v16, __ T8H, v17);                         \/\/       abs     v16.8H, v17.8H\n-    __ absr(v18, __ T2S, v19);                         \/\/       abs     v18.2S, v19.2S\n-    __ absr(v30, __ T4S, v31);                         \/\/       abs     v30.4S, v31.4S\n-    __ absr(v27, __ T2D, v28);                         \/\/       abs     v27.2D, v28.2D\n-    __ fabs(v28, __ T2S, v29);                         \/\/       fabs    v28.2S, v29.2S\n-    __ fabs(v1, __ T4S, v2);                           \/\/       fabs    v1.4S, v2.4S\n-    __ fabs(v28, __ T2D, v29);                         \/\/       fabs    v28.2D, v29.2D\n+    __ absr(v3, __ T4H, v4);                           \/\/       abs     v3.4H, v4.4H\n+    __ absr(v24, __ T8H, v25);                         \/\/       abs     v24.8H, v25.8H\n+    __ absr(v8, __ T2S, v9);                           \/\/       abs     v8.2S, v9.2S\n+    __ absr(v25, __ T4S, v26);                         \/\/       abs     v25.4S, v26.4S\n+    __ absr(v20, __ T2D, v21);                         \/\/       abs     v20.2D, v21.2D\n+    __ fabs(v16, __ T2S, v17);                         \/\/       fabs    v16.2S, v17.2S\n+    __ fabs(v17, __ T4S, v18);                         \/\/       fabs    v17.4S, v18.4S\n+    __ fabs(v2, __ T2D, v3);                           \/\/       fabs    v2.2D, v3.2D\n@@ -654,7 +670,7 @@\n-    __ fneg(v20, __ T4S, v21);                         \/\/       fneg    v20.4S, v21.4S\n-    __ fneg(v29, __ T2D, v30);                         \/\/       fneg    v29.2D, v30.2D\n-    __ fsqrt(v16, __ T2S, v17);                        \/\/       fsqrt   v16.2S, v17.2S\n-    __ fsqrt(v13, __ T4S, v14);                        \/\/       fsqrt   v13.4S, v14.4S\n-    __ fsqrt(v10, __ T2D, v11);                        \/\/       fsqrt   v10.2D, v11.2D\n-    __ notr(v29, __ T8B, v30);                         \/\/       not     v29.8B, v30.8B\n-    __ notr(v29, __ T16B, v30);                        \/\/       not     v29.16B, v30.16B\n+    __ fneg(v0, __ T4S, v1);                           \/\/       fneg    v0.4S, v1.4S\n+    __ fneg(v24, __ T2D, v25);                         \/\/       fneg    v24.2D, v25.2D\n+    __ fsqrt(v4, __ T2S, v5);                          \/\/       fsqrt   v4.2S, v5.2S\n+    __ fsqrt(v3, __ T4S, v4);                          \/\/       fsqrt   v3.4S, v4.4S\n+    __ fsqrt(v12, __ T2D, v13);                        \/\/       fsqrt   v12.2D, v13.2D\n+    __ notr(v31, __ T8B, v0);                          \/\/       not     v31.8B, v0.8B\n+    __ notr(v28, __ T16B, v29);                        \/\/       not     v28.16B, v29.16B\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":162,"deletions":146,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+    @IR(counts = {IRNode.REINTERPRET_S2HF, \">=1\", IRNode.REINTERPRET_HF2S, \">=1\", IRNode.ADD_HF, \">=1\" },\n+        failOn = {IRNode.ADD_F, IRNode.CONV_HF2F, IRNode.CONV_F2HF},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConvF2HFIdealizationTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,4 @@\n+    @IR(counts = {IRNode.ADD_HF, \"1\"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"},\n+        failOn = {IRNode.MUL_HF})\n+    \/\/ Test if x * 2 is optimized to x + x\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MulHFNodeIdealizationTests.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+    private float[] fl;\n+\n@@ -79,0 +81,1 @@\n+        fl = new float[count];\n@@ -81,0 +84,1 @@\n+            fl[i] = r.nextFloat();\n@@ -102,0 +106,14 @@\n+    @Test\n+    @IR(counts = {\"convF2HFAndS2HF\", \" >0 \"}, phase = {CompilePhase.FINAL_CODE},\n+        applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {\"convF2HFAndS2HF\", \" >0 \"}, phase = {CompilePhase.FINAL_CODE},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    public void testconvF2HFAndS2HF() {\n+        for (int i = 0; i < count; i++) {\n+            \/\/ Transform the pattern (S2HF ConvF2HF) in this IR -\n+            \/\/ HF2S (AddHF (S2HF (ConvF2HF fl[i])), (S2HF (ConvF2HF fl[i])))\n+            \/\/ to a single convert operation after matching and eliminate redundant moves\n+            dst[i] = float16ToRawShortBits(add(valueOf(fl[i]), valueOf(fl[i])));\n+        }\n+    }\n+\n@@ -105,0 +123,2 @@\n+    @IR(counts = {\"convHF2SAndHF2F\", \" >0 \"}, phase = {CompilePhase.FINAL_CODE},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -110,0 +130,1 @@\n+            \/\/ Also, the backend optimizes away the extra move while converting res to a float - ConvHF2F (S2HF (AddHF ..))\n@@ -118,0 +139,2 @@\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -129,0 +152,2 @@\n+    @IR(failOn = {IRNode.ADD_HF, IRNode.REINTERPRET_S2HF, IRNode.REINTERPRET_HF2S},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -141,0 +166,2 @@\n+    @IR(counts = {IRNode.SUB_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -152,0 +179,2 @@\n+    @IR(counts = {IRNode.MUL_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -163,0 +192,2 @@\n+    @IR(counts = {IRNode.DIV_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -174,0 +205,2 @@\n+    @IR(counts = {IRNode.DIV_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -185,0 +218,2 @@\n+    @IR(counts = {IRNode.MAX_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -196,0 +231,2 @@\n+    @IR(counts = {IRNode.MIN_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -207,0 +244,2 @@\n+    @IR(counts = {IRNode.SQRT_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -218,0 +257,2 @@\n+    @IR(counts = {IRNode.FMA_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -230,0 +271,2 @@\n+    @IR(counts = {IRNode.MUL_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -247,0 +290,2 @@\n+    @IR(counts = {IRNode.MUL_HF, \" 0 \", IRNode.ADD_HF, \" >0 \", IRNode.REINTERPRET_S2HF, \" >0 \", IRNode.REINTERPRET_HF2S, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -284,0 +329,2 @@\n+    @IR(counts = {IRNode.ADD_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -327,0 +374,2 @@\n+    @IR(counts = {IRNode.SUB_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -360,0 +409,2 @@\n+    @IR(counts = {IRNode.MAX_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -378,0 +429,2 @@\n+    @IR(counts = {IRNode.MIN_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -395,0 +448,2 @@\n+    @IR(counts = {IRNode.DIV_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -435,0 +490,2 @@\n+    @IR(counts = {IRNode.MUL_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -458,0 +515,2 @@\n+    @IR(counts = {IRNode.SQRT_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -477,0 +536,2 @@\n+    @IR(counts = {IRNode.FMA_HF, \" 0 \", IRNode.REINTERPRET_S2HF, \" 0 \", IRNode.REINTERPRET_HF2S, \" 0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -512,0 +573,2 @@\n+    @IR(failOn = {IRNode.ADD_HF, IRNode.SUB_HF, IRNode.MUL_HF, IRNode.DIV_HF, IRNode.SQRT_HF, IRNode.FMA_HF},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n@@ -551,0 +614,3 @@\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \", IRNode.SUB_HF, \" >0 \", IRNode.MUL_HF, \" >0 \",\n+                  IRNode.DIV_HF, \" >0 \", IRNode.SQRT_HF, \" >0 \", IRNode.FMA_HF, \" >0 \"},\n+        applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFloat16ScalarOperations.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -58,3 +58,2 @@\n-    \/\/ TODO: uncomment once Float16 support lands in aarch64 with JDK-8345125\n-    \/\/@IR(counts = { IRNode.SUB, \"2\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIfCPUFeatureAnd = {\"fphp\", \"false\", \"asimdhp\", \"false\"})\n-    \/\/@IR(counts = { IRNode.SUB_HF, \"2\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    @IR(counts = { IRNode.SUB, \"2\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIfCPUFeatureAnd = {\"fphp\", \"false\", \"asimdhp\", \"false\"})\n+    @IR(counts = { IRNode.SUB_HF, \"2\" }, applyIfPlatform = {\"aarch64\", \"true\"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestSubNodeFloatDoubleNegation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -112,0 +112,2 @@\n+        \"fphp\",\n+        \"asimdhp\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    @IR(applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"fphp\", \"false\", \"asimdhp\", \"false\"},\n+        counts = {IRNode.VECTOR_CAST_HF2F, IRNode.VECTOR_SIZE_ANY, \">= 1\", IRNode.VECTOR_CAST_F2HF, IRNode.VECTOR_SIZE_ANY, \" >= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorConvChain.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}