{"files":[{"patch":"@@ -279,4 +279,5 @@\n- * <li>read write access modes for all {@code T}. On 32-bit platforms, access modes\n- *     {@code get} and {@code set} for {@code long}, {@code double} and {@code MemorySegment}\n- *     are supported but may be non-atomic, as described in Section {@jls 17.7}\n- *     of <cite>The Java Language Specification<\/cite>.\n+ * <li>read write access modes for all {@code T}.  Access modes {@code get} and\n+ *     {@code set} for {@code long}, {@code double} and {@code MemorySegment}\n+ *     are supported but have no atomicity guarantee; in particular, the\n+ *     situation described in Section {@jls 17.7} of <cite>The Java Language\n+ *     Specification<\/cite> may happen.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4308,4 +4308,5 @@\n-     * <li>read write access modes for all {@code T}. On 32-bit platforms,\n-     *     access modes {@code get} and {@code set} for {@code long}, {@code\n-     *     double} are supported but may be non-atomic, as described in Section\n-     *     {@jls 17.7} of <cite>The Java Language Specification<\/cite>.\n+     * <li>read write access modes for all {@code T}.  Access modes {@code get}\n+     *     and {@code set} for {@code long} and {@code double} are supported but\n+     *     have no atomicity guarantee; in particular, the situation described\n+     *     in Section {@jls 17.7} of <cite>The Java Language\n+     *     Specification<\/cite> may happen.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}