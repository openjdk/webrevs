{"files":[{"patch":"@@ -82,2 +82,0 @@\n-        if ((stackOffset & ~STACK_OFFSET_MAX) != 0 || (searchSlot & ~SEARCH_SLOT_MAX) != 0)\n-            throw new InternalError(); \/\/ Bad arguments from trusted callers\n@@ -85,2 +83,2 @@\n-                | ((stackOffset & STACK_OFFSET_MAX) << STACK_OFFSET_SHIFT)\n-                | ((searchSlot & SEARCH_SLOT_MAX) << SEARCH_SLOT_SHIFT);\n+                | encode(stackOffset, STACK_OFFSET_SIZE, STACK_OFFSET_SHIFT)\n+                | encode(searchSlot, SEARCH_SLOT_SIZE, SEARCH_SLOT_SHIFT);\n@@ -95,2 +93,1 @@\n-            STACK_OFFSET_MAX = (1 << 4) - 1,\n-            STACK_OFFSET_MASK = STACK_OFFSET_MAX << STACK_OFFSET_SHIFT,\n+            STACK_OFFSET_SIZE = 4,\n@@ -98,2 +95,13 @@\n-            SEARCH_SLOT_MAX = (1 << 4) - 1,\n-            SEARCH_SLOT_MASK = SEARCH_SLOT_MAX << SEARCH_SLOT_SHIFT;\n+            SEARCH_SLOT_SIZE = 4;\n+\n+    private static int encode(int data, int size, int shift) {\n+        int max = (1 << size) - 1;\n+        if ((data & ~max) != 0)\n+            throw new InternalError(); \/\/ bad arguments from trusted callers\n+        return ((data & max) << shift);\n+    }\n+\n+    private static int decode(int encoded, int size, int shift) {\n+        int max = (1 << size) - 1;\n+        return (encoded >> shift) & max;\n+    }\n@@ -142,2 +150,1 @@\n-    \/\/ Methods below must be called in object monitor\n-\n+    \/\/ Must be called only while holding this object's monitor lock.\n@@ -146,1 +153,1 @@\n-            int stackOffset = (extendedMessageState & STACK_OFFSET_MASK) >> STACK_OFFSET_SHIFT;\n+            int stackOffset = decode(extendedMessageState, STACK_OFFSET_SIZE, STACK_OFFSET_SHIFT);\n@@ -148,1 +155,1 @@\n-                    ? (extendedMessageState & SEARCH_SLOT_MASK) >> SEARCH_SLOT_SHIFT\n+                    ? decode(extendedMessageState, SEARCH_SLOT_SIZE, SEARCH_SLOT_SHIFT)\n@@ -155,9 +162,10 @@\n-    \/\/\/ Gets an extended exception message. There are two modes:\n-    \/\/\/ 1. `searchSlot >= 0`, follow the explicit stack offset and search slot\n-    \/\/\/    configurations to trace how a particular argument, which turns out to\n-    \/\/\/    be `null`, was evaluated.\n-    \/\/\/ 2. `searchSlot < 0`, stack offset is 0 (a call to the nullary constructor)\n-    \/\/\/    and the search slot will be derived by bytecode tracing.  The message\n-    \/\/\/    will also include the action that caused the NPE along with the source\n-    \/\/\/    of the `null`.\n-    \/\/\/ If the backtracking cannot find a verifiable result, this method returns `null`.\n+    \/\/ Must be called only while holding this object's monitor lock.\n+    \/\/ Gets an extended exception message. There are two modes:\n+    \/\/ 1. `searchSlot >= 0`, follow the explicit stack offset and search slot\n+    \/\/    configurations to trace how a particular argument, which turns out to\n+    \/\/    be `null`, was evaluated.\n+    \/\/ 2. `searchSlot == -1`, stack offset is 0 (a call to the nullary constructor)\n+    \/\/    and the search slot will be derived by bytecode tracing.  The message\n+    \/\/    will also include the action that caused the NPE along with the source\n+    \/\/    of the `null`.\n+    \/\/ If the backtracking cannot find a verifiable result, this method returns `null`.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NullPointerException.java","additions":29,"deletions":21,"binary":false,"changes":50,"status":"modified"}]}