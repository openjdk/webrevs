{"files":[{"patch":"@@ -3060,1 +3060,1 @@\n-bool java_lang_Throwable::get_top_method_and_bci(oop throwable, Method** method, int* bci) {\n+bool java_lang_Throwable::get_method_and_bci(oop throwable, Method** method, int* bci, int depth, bool allow_hidden) {\n@@ -3063,3 +3063,0 @@\n-  BacktraceIterator iter(result, current);\n-  \/\/ No backtrace available.\n-  if (!iter.repeat()) return false;\n@@ -3069,3 +3066,6 @@\n-  oop hidden = ((objArrayOop)backtrace(throwable))->obj_at(trace_hidden_offset);\n-  if (hidden != nullptr) {\n-    return false;\n+  \/\/ Restriction only exists for 1 depth; Objects.requireNonNull uses a hidden frame\n+  if (!allow_hidden) {\n+    oop hidden = ((objArrayOop)backtrace(throwable))->obj_at(trace_hidden_offset);\n+    if (hidden != nullptr) {\n+      return false;\n+    }\n@@ -3074,1 +3074,13 @@\n-  \/\/ Get first backtrace element.\n+  BacktraceIterator iter(result, current);\n+  \/\/ Get the backtrace element.\n+  do {\n+    \/\/ No backtrace available.\n+    if (!iter.repeat()) { \n+       return false;\n+    }\n+\n+\n+    if (--depth > 0) {\n+      iter.next(current);\n+    }\n+  } while (depth > 0);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -697,2 +697,3 @@\n-  \/\/ Gets the method and bci of the top frame (TOS). Returns false if this failed.\n-  static bool get_top_method_and_bci(oop throwable, Method** method, int* bci);\n+  \/\/ Gets the method and bci of a particular frame (TOS). Returns false if this failed.\n+  \/\/ allow_hidden allows the caller of the NPE constructor to be a hidden frame.\n+  static bool get_method_and_bci(oop throwable, Method** method, int* bci, int depth, bool allow_hidden);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwable);\n+JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwable, jint stack_offset, jint search_slot);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                        bool inner_expr = false, const char *prefix = nullptr);\n+                        bool inner_expr, bool because_clause = false);\n@@ -229,0 +229,1 @@\n+  \/\/  because_clause: Whether to prefix with \" because ...\"\n@@ -231,1 +232,1 @@\n-  bool print_NPE_cause(outputStream *os, int bci, int slot);\n+  bool print_NPE_cause(outputStream *os, int bci, int slot, bool because_clause);\n@@ -314,1 +315,1 @@\n-        char *var =  cp->symbol_at(elem->name_cp_index)->as_C_string();\n+        char *var = cp->symbol_at(elem->name_cp_index)->as_C_string();\n@@ -345,0 +346,13 @@\n+      \/\/ check MethodParameters for a name, if it carries a name\n+      int actual_param_index = param_index - 1; \/\/ 0 based\n+      if (method->has_method_parameters() && actual_param_index < method->method_parameters_length()) {\n+        MethodParametersElement elem = method->method_parameters_start()[actual_param_index];\n+        if (elem.name_cp_index != 0) {\n+          ConstantPool* cp = method->constants();\n+          char *var = cp->symbol_at(elem.name_cp_index)->as_C_string();\n+          os->print(\"%s\", var);\n+          return;\n+        }\n+      }\n+\n+      \/\/ TODO we should use arg%d forms, 0-based, like core reflection\n@@ -1171,2 +1185,2 @@\n-bool ExceptionMessageBuilder::print_NPE_cause(outputStream* os, int bci, int slot) {\n-  if (print_NPE_cause0(os, bci, slot, _max_cause_detail, false, \" because \\\"\")) {\n+bool ExceptionMessageBuilder::print_NPE_cause(outputStream* os, int bci, int slot, bool because_clause) {\n+  if (print_NPE_cause0(os, bci, slot, _max_cause_detail, false, because_clause)) {\n@@ -1185,2 +1199,2 @@\n-\/\/ Prefix is used to print a proper beginning of the whole\n-\/\/ sentence.\n+\/\/ because_clause is used to print a \"because\" prefix when this is\n+\/\/ not inner_expr ()\n@@ -1194,1 +1208,1 @@\n-                                               bool inner_expr, const char *prefix) {\n+                                               bool inner_expr, bool because_clause) {\n@@ -1230,1 +1244,1 @@\n-      prefix != nullptr &&\n+      !inner_expr &&\n@@ -1235,1 +1249,5 @@\n-    os->print(\"%s\", prefix);\n+    if (because_clause) {\n+      os->print(\" because \\\"\");\n+    } else {\n+      os->print(\"\\\"\");\n+    }\n@@ -1350,1 +1368,6 @@\n-        os->print(\" because the return value of \\\"\");\n+        if (because_clause) {\n+          os->print(\" because t\");\n+        } else {\n+          os->print(\"T\");\n+        }\n+        os->print(\"he return value of \\\"\");\n@@ -1443,1 +1466,1 @@\n-bool BytecodeUtils::get_NPE_message_at(outputStream* ss, Method* method, int bci) {\n+bool BytecodeUtils::get_NPE_message_at(outputStream* ss, Method* method, int bci, int slot) {\n@@ -1457,0 +1480,7 @@\n+  \/\/ Is an explicit slot given?\n+  if (slot >= 0) {\n+    \/\/ Search from the given slot in bci in Method.\n+    \/\/ Omit the failed action.\n+    return emb.print_NPE_cause(ss, bci, slot, false);\n+  }\n+\n@@ -1459,1 +1489,1 @@\n-  int slot = emb.get_NPE_null_slot(bci);\n+  slot = emb.get_NPE_null_slot(bci);\n@@ -1475,1 +1505,1 @@\n-    if (!emb.print_NPE_cause(ss, bci, slot)) {\n+    if (!emb.print_NPE_cause(ss, bci, slot, true)) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":44,"deletions":14,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,4 @@\n-  static bool get_NPE_message_at(outputStream* ss, Method* method, int bci);\n+  \/\/ Slot can be nonnegative to indicate an explicit search for the source of null.\n+  \/\/ If slot is negative (default), also search for the action that caused the NPE before\n+  \/\/ deriving the actual slot and source of null by code parsing.\n+  static bool get_NPE_message_at(outputStream* ss, Method* method, int bci, int slot = -1);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-JVM_ENTRY(jstring, JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwable))\n+JVM_ENTRY(jstring, JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwable, jint stack_offset, jint search_slot))\n@@ -510,0 +510,2 @@\n+  \/\/ If we are performing an explicit search instructed by alternative internal NPE constructor\n+  bool explicit_search = search_slot >= 0;\n@@ -513,1 +515,3 @@\n-  if (!java_lang_Throwable::get_top_method_and_bci(exc, &method, &bci)) {\n+  int depth = explicit_search ? stack_offset : 0; \/\/ 1-based depth\n+  \/\/ The explicit search alternative internal NPE constructor is called from a @Hidden method, allow them\n+  if (!java_lang_Throwable::get_method_and_bci(exc, &method, &bci, depth + 1, explicit_search)) {\n@@ -521,1 +525,1 @@\n-  bool ok = BytecodeUtils::get_NPE_message_at(&ss, method, bci);\n+  bool ok = BytecodeUtils::get_NPE_message_at(&ss, method, bci, search_slot);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,1 @@\n+        extendedMessageState |= CONSTRUCTOR_FINISHED;\n@@ -70,0 +71,1 @@\n+        extendedMessageState |= CONSTRUCTOR_FINISHED;\n@@ -72,3 +74,28 @@\n-    \/\/ 0: no backtrace filled in, no message computed.\n-    \/\/ 1: backtrace filled in, no message computed.\n-    \/\/ 2: message computed\n+    \/\/ Creates an NPE with a custom backtrace configuration.\n+    \/\/ The exception has no message if detailed NPE is not enabled.\n+    NullPointerException(int stackOffset, int searchSlot) {\n+        extendedMessageState = setupCustomBackTrace(stackOffset, searchSlot);\n+        this();\n+    }\n+\n+    private static int setupCustomBackTrace(int stackOffset, int searchSlot) {\n+        if ((stackOffset & ~STACK_OFFSET_MAX) != 0 || (searchSlot & ~SEARCH_SLOT_MAX) != 0)\n+            throw new InternalError(); \/\/ Bad arguments from trusted callers\n+        return CUSTOM_TRACE\n+                | ((stackOffset & STACK_OFFSET_MAX) << STACK_OFFSET_SHIFT)\n+                | ((searchSlot & SEARCH_SLOT_MAX) << SEARCH_SLOT_SHIFT);\n+    }\n+\n+    private static final int\n+            CONSTRUCTOR_FINISHED = 0x1,\n+            MESSAGE_COMPUTED = 0x2,\n+            CUSTOM_TRACE = 0x4;\n+    private static final int\n+            STACK_OFFSET_SHIFT = 4,\n+            STACK_OFFSET_MAX = (1 << 4) - 1,\n+            STACK_OFFSET_MASK = STACK_OFFSET_MAX << STACK_OFFSET_SHIFT,\n+            SEARCH_SLOT_SHIFT = 8,\n+            SEARCH_SLOT_MAX = (1 << 4) - 1,\n+            SEARCH_SLOT_MASK = SEARCH_SLOT_MAX << SEARCH_SLOT_SHIFT;\n+\n+    \/\/ Access these fields only while holding this object's monitor lock.\n@@ -84,6 +111,1 @@\n-        if (extendedMessageState == 0) {\n-            extendedMessageState = 1;\n-        } else if (extendedMessageState == 1) {\n-            extendedMessage = getExtendedNPEMessage();\n-            extendedMessageState = 2;\n-        }\n+        ensureMessageComputed();\n@@ -113,6 +135,1 @@\n-                if (extendedMessageState == 1) {\n-                    \/\/ Only the original stack trace was filled in. Message will\n-                    \/\/ compute correctly.\n-                    extendedMessage = getExtendedNPEMessage();\n-                    extendedMessageState = 2;\n-                }\n+                ensureMessageComputed();\n@@ -125,6 +142,23 @@\n-    \/**\n-     * Get an extended exception message. This returns a string describing\n-     * the location and cause of the exception. It returns null for\n-     * exceptions where this is not applicable.\n-     *\/\n-    private native String getExtendedNPEMessage();\n+    \/\/ Methods below must be called in object monitor\n+\n+    private void ensureMessageComputed() {\n+        if ((extendedMessageState & (MESSAGE_COMPUTED | CONSTRUCTOR_FINISHED)) == CONSTRUCTOR_FINISHED) {\n+            int stackOffset = (extendedMessageState & STACK_OFFSET_MASK) >> STACK_OFFSET_SHIFT;\n+            int searchSlot = (extendedMessageState & CUSTOM_TRACE) != 0\n+                    ? (extendedMessageState & SEARCH_SLOT_MASK) >> SEARCH_SLOT_SHIFT\n+                    : -1;\n+            extendedMessage = getExtendedNPEMessage(stackOffset, searchSlot);\n+            extendedMessageState |= MESSAGE_COMPUTED;\n+        }\n+    }\n+\n+    \/\/\/ Gets an extended exception message. There are two modes:\n+    \/\/\/ 1. `searchSlot >= 0`, follow the explicit stack offset and search slot\n+    \/\/\/    configurations to trace how a particular argument, which turns out to\n+    \/\/\/    be `null`, was evaluated.\n+    \/\/\/ 2. `searchSlot < 0`, stack offset is 0 (a call to the nullary constructor)\n+    \/\/\/    and the search slot will be derived by bytecode tracing.  The message\n+    \/\/\/    will also include the action that caused the NPE along with the source\n+    \/\/\/    of the `null`.\n+    \/\/\/ If the backtracking cannot find a verifiable result, this method returns `null`.\n+    private native String getExtendedNPEMessage(int stackOffset, int searchSlot);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NullPointerException.java","additions":56,"deletions":22,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+import jdk.internal.vm.annotation.Hidden;\n@@ -2333,0 +2334,5 @@\n+\n+            @Hidden\n+            public NullPointerException extendedNullPointerException(int stackOffset, int searchSlot) {\n+                return new NullPointerException(stackOffset, searchSlot);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -632,0 +632,6 @@\n+\n+    \/\/\/ Creates an extended NPE for general null-checking APIs.\n+    \/\/\/ The implementation is @Hidden to hide this JLA frame from the trace.\n+    \/\/\/ Stack offset is the number of non-hidden frames to skip, pointing to the null-checking API.\n+    \/\/\/ Search slot is the slot where the null-checked value is passed in.\n+    NullPointerException extendedNullPointerException(int stackOffset, int searchSlot);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-Java_java_lang_NullPointerException_getExtendedNPEMessage(JNIEnv *env, jobject throwable)\n+Java_java_lang_NullPointerException_getExtendedNPEMessage(JNIEnv *env, jobject throwable, jint stackOffset, jint searchSlot)\n@@ -35,1 +35,1 @@\n-    return JVM_GetExtendedNPEMessage(env, throwable);\n+    return JVM_GetExtendedNPEMessage(env, throwable, stackOffset, searchSlot);\n","filename":"src\/java.base\/share\/native\/libjava\/NullPointerException.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test the MethodParameters-based NPE messages.\n+ * @bug 8233268\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.access\n+ * @clean MethodParametersTest InnerClass\n+ * @compile -parameters -g:none MethodParametersTest.java\n+ * @run junit\/othervm -XX:+ShowCodeDetailsInExceptionMessages MethodParametersTest\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Objects;\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class MethodParametersTest {\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n+    \/\/ An arbitrary null-checking API\n+    static void nullCheck(Object arg) {\n+        if (arg == null) {\n+            throw JLA.extendedNullPointerException(1, 0);\n+        }\n+    }\n+\n+    class InnerClass {}\n+\n+    @Disabled(\"Requires javac's API support\")\n+    @Test\n+    void testOuterThis() {\n+        var npe = assertThrows(NullPointerException.class, () -> {\n+            try {\n+                InnerClass.class.getDeclaredConstructor(MethodParametersTest.class).newInstance((Object) null);\n+            } catch (InvocationTargetException ex) {\n+                throw ex.getCause();\n+            }\n+        });\n+        assertEquals(\"\\\"this$0\\\" is null\", npe.getMessage());\n+    }\n+\n+    \/\/ Random slot to param index mappings, both raw and null-check API NPEs\n+    \/\/ 0, 1, 3, 5\n+    static void myMethod(String firstArg, long l1, double l2, int[] lastArg) {\n+        nullCheck(firstArg);\n+        System.out.println(lastArg.length);\n+        Object a = l1 > 100 ? null : \"\"; \/\/ 6\n+        a.toString();\n+    }\n+\n+    @Test\n+    void testShuffles() {\n+        var npe = assertThrows(NullPointerException.class, () -> myMethod(null, 2, 2, new int[0]));\n+        assertEquals(\"\\\"firstArg\\\" is null\", npe.getMessage());\n+        var msg = assertThrows(NullPointerException.class, () -> myMethod(\"\", 2, 2, null)).getMessage();\n+        assertTrue(msg.endsWith(\"because \\\"lastArg\\\" is null\"), msg);\n+        msg = assertThrows(NullPointerException.class, () -> myMethod(\"\", 2000, 2, new int[0])).getMessage();\n+        assertTrue(msg.endsWith(\"because \\\"<local6>\\\" is null\"), msg); \/\/ No debug info\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/NullPointerException\/MethodParametersTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test the messages for arbitrary null-check APIs.\n+ * @bug 8233268\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.access\n+ * @compile -g NullCheckAPITest.java\n+ * @run junit\/othervm -DnullCheckAPI.nestedThrow=true -XX:+ShowCodeDetailsInExceptionMessages NullCheckAPITest\n+ * @run junit\/othervm -DnullCheckAPI.nestedThrow=false -XX:+ShowCodeDetailsInExceptionMessages NullCheckAPITest\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.ParameterizedType;\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class NullCheckAPITest {\n+\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+    private static final boolean NESTED_THROW = Boolean.getBoolean(\"nullCheckAPI.nestedThrow\");\n+\n+    \/\/ An arbitrary null-checking API\n+    static void nullCheck(Object arg) {\n+        if (arg == null) {\n+            if (NESTED_THROW) {\n+                \/\/ 2 offset: nullCheck, throwNpe;\n+                throwNpe();\n+            } else {\n+                \/\/ 1 offset: nullCheck\n+                throw JLA.extendedNullPointerException(1, 0);\n+            }\n+        }\n+    }\n+\n+    static void throwNpe() {\n+        throw JLA.extendedNullPointerException(2, 0);\n+    }\n+\n+    \/\/\/ A simple NPE message for an expression\n+    static String simpleMessage(String cause) {\n+        return \"\\\"\" + cause + \"\\\" is null\";\n+    }\n+\n+    \/\/\/ An NPE message for an invocation result\n+    static String invocationMessage(String cause) {\n+        return \"The return value of \" + simpleMessage(cause);\n+    }\n+\n+    static void checkSimpleMessage(Executable action, String cause) {\n+        var msg = assertThrows(NullPointerException.class, action).getMessage();\n+        assertEquals(simpleMessage(cause), msg);\n+    }\n+\n+    static void checkInvocationMessage(Executable action, String cause) {\n+        var msg = assertThrows(NullPointerException.class, action).getMessage();\n+        assertEquals(invocationMessage(cause), msg);\n+    }\n+\n+    class Dummy { Object field; }\n+\n+    @Test\n+    void test() {\n+        checkSimpleMessage(() -> generateVariableNpe(null), \"myA\");\n+        checkSimpleMessage(() -> generateVariableNpe(new Dummy()), \"myA.field\");\n+\n+        checkInvocationMessage(() -> nullCheck(int.class.getSuperclass()), \"java.lang.Class.getSuperclass()\");\n+    }\n+\n+    static class One extends Dummy {\n+        One(NullCheckAPITest rnnt) {\n+            rnnt.super();\n+        }\n+    }\n+\n+    @Test\n+    @Disabled(\"Requires javac's API support\")\n+    void testRequireNonNull() {\n+        checkSimpleMessage(() -> {\n+            NullCheckAPITest t = null;\n+            t.new Dummy();\n+        }, \"t\");\n+        checkSimpleMessage(() -> new One(null), \"rnnt\");\n+\n+        var npe = assertThrows(NullPointerException.class, () -> {\n+            try {\n+                Dummy.class.getDeclaredConstructor(NullCheckAPITest.class).newInstance((Object) null);\n+            } catch (InvocationTargetException ex) {\n+                throw ex.getCause();\n+            }\n+        });\n+        assertEquals(\"\\\"this$0\\\" is null\", npe.getMessage());\n+\n+        checkInvocationMessage(() -> {\n+            switch (int.class.getGenericSuperclass()) {\n+                case ParameterizedType pt -> {}\n+                case Class<?> cl -> {}\n+                default -> {}\n+            }\n+        }, \"java.lang.Class.getGenericSuperclass()\");\n+    }\n+\n+    \/\/ A method that generate NPE from variables\n+    static void generateVariableNpe(Dummy myA) {\n+        nullCheck(myA);\n+        nullCheck(myA.field);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/exceptionMsgs\/NullPointerException\/NullCheckAPITest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}