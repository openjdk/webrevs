{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -68,0 +69,2 @@\n+import static jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet.Language.*;\n+\n@@ -74,29 +77,2 @@\n-\n-        JAVA(\"java\"),\n-        PROPERTIES(\"properties\");\n-\n-        private static final Map<String, Language> languages;\n-\n-        static {\n-            Map<String, Language> tmp = new HashMap<>();\n-            for (var language : values()) {\n-                String id = Objects.requireNonNull(language.identifier);\n-                if (tmp.put(id, language) != null)\n-                    throw new IllegalStateException(); \/\/ 1-1 correspondence\n-            }\n-            languages = Map.copyOf(tmp);\n-        }\n-\n-        Language(String id) {\n-            identifier = id;\n-        }\n-\n-        private final String identifier;\n-\n-        public static Optional<Language> of(String identifier) {\n-            if (identifier == null)\n-                return Optional.empty();\n-            return Optional.ofNullable(languages.get(identifier));\n-        }\n-\n-        public String getIdentifier() {return identifier;}\n+        JAVA,\n+        PROPERTIES;\n@@ -364,1 +340,1 @@\n-        String lang = null;\n+        String lang;\n@@ -366,1 +342,2 @@\n-        if (langAttr != null) {\n+\n+        if (langAttr != null) { \/\/ the lang attribute overrides everything else\n@@ -368,1 +345,1 @@\n-        } else if (containsClass) {\n+        } else if (inlineContent != null && externalContent == null) { \/\/ an inline snippet\n@@ -370,2 +347,9 @@\n-        } else if (containsFile) {\n-            lang = languageFromFileName(fileObject.getName());\n+        } else if (externalContent != null) { \/\/ an external or a hybrid snippet\n+            if (containsClass) { \/\/ the class attribute means Java\n+                lang = \"java\";\n+            } else {\n+                String fileName = Path.of(fileObject.toUri()).getFileName().toString();\n+                lang = languageFromFileName(fileName);\n+            }\n+        } else {\n+            throw new AssertionError();\n@@ -374,2 +358,4 @@\n-        Optional<Language> language = Language.of(lang);\n-\n+        var language = switch (lang) {\n+            case \"properties\" -> PROPERTIES;\n+            case null, default -> JAVA;\n+        };\n@@ -485,1 +471,1 @@\n-    private StyledText parse(Resources resources, Diags diags, Optional<Language> language, String content) throws ParseException {\n+    private StyledText parse(Resources resources, Diags diags, Language language, String content) throws ParseException {\n@@ -508,5 +494,7 @@\n-        \/\/ TODO: find a way to extend\/customize the list of recognized file name extensions\n-        if (fileName.endsWith(\".java\")) {\n-            return \"java\";\n-        } else if (fileName.endsWith(\".properties\")) {\n-            return \"properties\";\n+        \/\/ The assumption is simple: a file extension is the language\n+        \/\/ identifier.\n+        \/\/ Was about to use Path.getExtension introduced in 8057113, but then\n+        \/\/ learned that it was removed in 8298303.\n+        int lastPeriod = fileName.lastIndexOf('.');\n+        if (lastPeriod <= 0) {\n+            return null;\n@@ -514,1 +502,1 @@\n-        return null;\n+        return (lastPeriod == fileName.length() - 1) ? null : fileName.substring(lastPeriod + 1);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SnippetTaglet.java","additions":31,"deletions":43,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,3 +92,2 @@\n-    public Result parse(SnippetTaglet.Diags diags, Optional<SnippetTaglet.Language> language, String source) throws ParseException {\n-        SnippetTaglet.Language lang = language.orElse(SnippetTaglet.Language.JAVA);\n-        var p = switch (lang) {\n+    public Result parse(SnippetTaglet.Diags diags, SnippetTaglet.Language language, String source) throws ParseException {\n+        var p = switch (language) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/snippet\/Parser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-                    <pre class=\"snippet\" id=\"snippet-snippet_standalone()1\"><code>   this is snippet_standalone\n+                    <pre class=\"snippet\" id=\"snippet-snippet_standalone()1\"><code class=\"language-java\">   this is snippet_standalone\n@@ -134,1 +134,1 @@\n-                    <pre class=\"snippet\" id=\"snippet-snippet_wrapped()1\"><code>   this is a snippet_wrapped\n+                    <pre class=\"snippet\" id=\"snippet-snippet_wrapped()1\"><code class=\"language-java\">   this is a snippet_wrapped\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownTaglets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-        return getSnippetHtmlRepresentation(pathToHtmlFile, content, Optional.empty(), Optional.empty());\n+        return getSnippetHtmlRepresentation(pathToHtmlFile, content, Optional.of(\"java\"), Optional.empty());\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/SnippetTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-                        <\/div>\"\"\".formatted(index, getSnippetHtmlRepresentation(\"A.html\", t.expectedOutput(), Optional.empty(), Optional.of(\"snippet-case\" + index + \"()2\")));\n+                        <\/div>\"\"\".formatted(index, getSnippetHtmlRepresentation(\"A.html\", t.expectedOutput(), Optional.of(\"java\"), Optional.of(\"snippet-case\" + index + \"()2\")));\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetMarkup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8266666 8275788 8276964\n+ * @bug 8266666 8275788 8276964 8299080\n@@ -111,1 +111,1 @@\n-                    \"\"\", \"foo1\", null),\n+                    \"\"\", \"foo1\", \"java\"),\n@@ -116,1 +116,1 @@\n-                    \"\"\", \"foo2\", null),\n+                    \"\"\", \"foo2\", \"java\"),\n@@ -121,1 +121,1 @@\n-                    \"\"\", \"foo3\", null),\n+                    \"\"\", \"foo3\", \"java\"),\n@@ -126,1 +126,1 @@\n-                    \"\"\", \"foo4\", null),\n+                    \"\"\", \"foo4\", \"java\"),\n@@ -131,1 +131,1 @@\n-                    \"\"\", \"foo5\", null),\n+                    \"\"\", \"foo5\", \"java\"),\n@@ -140,1 +140,1 @@\n-\/\/                    \"\"\", \"foo6\", null),\n+\/\/                    \"\"\", \"foo6\", \"java\"),\n@@ -146,1 +146,1 @@\n-                    \"\"\", null, null),\n+                    \"\"\", null, \"java\"),\n@@ -151,1 +151,1 @@\n-                    \"\"\", null, null),\n+                    \"\"\", null, \"java\"),\n@@ -156,1 +156,1 @@\n-                    \"\"\", null, null),\n+                    \"\"\", null, \"java\"),\n@@ -161,1 +161,1 @@\n-                    \"\"\", null, null),\n+                    \"\"\", null, \"java\"),\n@@ -883,1 +883,1 @@\n-                        %s\"\"\".formatted(id, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.empty(),\n+                        %s\"\"\".formatted(id, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.of(\"java\"),\n@@ -976,1 +976,1 @@\n-                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", expectedOutput, Optional.empty(),\n+                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", expectedOutput, Optional.of(\"txt\"),\n@@ -1555,1 +1555,1 @@\n-                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.empty(),\n+                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.of(\"java\"),\n@@ -1669,1 +1669,1 @@\n-                    \"\"\" + getSnippetHtmlRepresentation(\"pkg\/A.html\", \"\", Optional.empty(),\n+                    \"\"\" + getSnippetHtmlRepresentation(\"pkg\/A.html\", \"\", Optional.of(\"txt\"),\n@@ -1675,1 +1675,1 @@\n-                    \"\"\" + getSnippetHtmlRepresentation(\"pkg\/A.html\", \"\", Optional.empty(),\n+                    \"\"\" + getSnippetHtmlRepresentation(\"pkg\/A.html\", \"\", Optional.of(\"txt\"),\n@@ -1854,1 +1854,1 @@\n-                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.empty(),\n+                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.of(\"java\"),\n@@ -1860,0 +1860,114 @@\n+    public void testPositiveExternalHybridLangAttribute(Path base) throws Exception {\n+\n+        Path srcDir = base.resolve(\"src\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        record TestCase(String tag, String expectedContent, String expectedLang) { }\n+\n+        final var testCases = List.of(\n+                \/\/ -------------------- external snippets --------------------\n+                \/\/ if there's no file extension and no lang attribute, then\n+                \/\/ markup is that of \"java\" and the class=\"language-\" attribute\n+                \/\/ is absent\n+                new TestCase(\"\"\"\n+                        {@snippet file=\".file\"}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", null),\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file\"}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", null),\n+                \/\/ if the file extension differs from the value of the lang\n+                \/\/ attribute, which is set to \"java\", \"properties\" or other,\n+                \/\/ then the class=\"language-\" attribute is that of lang and\n+                \/\/ markup is that of \"properties\" for lang=properties and\n+                \/\/ markup is that of \"java\" for anything else\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"File.java\" lang=properties}\n+                        \"\"\", \"\"\"\n+                        <span class=\"bold\">hi<\/span> there \/\/ @<span class=\"bold\">hi<\/span>ghlight substring=there\n+                        \"\"\", \"properties\"),\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file.properties\" lang=java}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", \"java\"),\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"File.java\" lang=txt}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", \"txt\"),\n+                \/\/ if there's no file extension, but the lang attribute is set\n+                \/\/ to \"java\", \"properties\", or other, then the class=\"language-\"\n+                \/\/ attribute is that of lang and markup is that of \"properties\"\n+                \/\/ for lang=properties and markup is that of \"java\" for\n+                \/\/ anything else\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file\" lang=properties}\n+                        \"\"\", \"\"\"\n+                        <span class=\"bold\">hi<\/span> there \/\/ @<span class=\"bold\">hi<\/span>ghlight substring=there\n+                        \"\"\", \"properties\"),\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file\" lang=java}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", \"java\"),\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file\" lang=txt}\n+                        \"\"\", \"\"\"\n+                        # @highlight substring=hi:\n+                        hi <span class=\"bold\">there<\/span>\n+                        \"\"\", \"txt\"),\n+                \/\/ --------------------- hybrid snippets ---------------------\n+                \/\/ the lang attribute \"overrides\" file extension\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"File.java\" lang=properties:\n+                        # @highlight substring=hi:\n+                        hi there \/\/ @highlight substring=there\n+                        }\n+                        \"\"\", \"\"\"\n+                        <span class=\"bold\">hi<\/span> there \/\/ @<span class=\"bold\">hi<\/span>ghlight substring=there\n+                        \"\"\", \"properties\"),\n+                \/\/ if the lang attribute is absent, file extension determines\n+                \/\/ markup and the the class=\"language-\" attribute\n+                new TestCase(\"\"\"\n+                        {@snippet file=\"file.properties\":\n+                        # @highlight substring=hi:\n+                        hi there \/\/ @highlight substring=there\n+                        }\n+                        \"\"\", \"\"\"\n+                        <span class=\"bold\">hi<\/span> there \/\/ @<span class=\"bold\">hi<\/span>ghlight substring=there\n+                        \"\"\", \"properties\")\n+        );\n+\n+        for (var f : List.of(\".file\", \"file\", \"File.java\", \"file.properties\"))\n+            addSnippetFile(srcDir, \"pkg\", f, \"\"\"\n+                    # @highlight substring=hi:\n+                    hi there \/\/ @highlight substring=there\n+                    \"\"\");\n+\n+        ClassBuilder classBuilder = new ClassBuilder(tb, \"pkg.A\")\n+                .setModifiers(\"public\", \"class\");\n+        forEachNumbered(testCases, (s, i) -> classBuilder.addMembers(\n+                MethodBuilder.parse(\"public void case%s() { }\".formatted(i)).setComments(s.tag)));\n+        classBuilder.write(srcDir);\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+        forEachNumbered(testCases, (t, i) -> checkOutput(\"pkg\/A.html\", true, \"\"\"\n+                        <span class=\"element-name\">case%s<\/span>()<\/div>\n+                        <div class=\"block\">\n+                        %s\n+                        \"\"\".formatted(i, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedContent, Optional.ofNullable(t.expectedLang),\n+                Optional.of(\"snippet-case\" + i + \"()2\")))));\n+    }\n+\n+    \/\/@Test\n@@ -2313,1 +2427,1 @@\n-                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.empty(),\n+                        %s\"\"\".formatted(index, getSnippetHtmlRepresentation(\"pkg\/A.html\", t.expectedOutput(), Optional.of(\"txt\"),\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetTag.java","additions":132,"deletions":18,"binary":false,"changes":150,"status":"modified"}]}