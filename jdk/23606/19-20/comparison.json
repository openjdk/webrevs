{"files":[{"patch":"@@ -1,122 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8346465\n- * @summary Tests if setData() throws IAE for BuiltIn profiles\n- *\/\n-\n-import java.awt.color.ColorSpace;\n-import java.awt.color.ICC_Profile;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.util.Map;\n-\n-public class BuiltInProfileCheck {\n-    private static final int HEADER_TAG = ICC_Profile.icSigHead;\n-    private static final int INDEX = ICC_Profile.icHdrDeviceClass;\n-    private static final String EXCEPTION_MSG = \"Built-in profile cannot be modified\";\n-\n-    private static final Map<Integer, String> colorSpace = Map.of(\n-            ColorSpace.CS_sRGB, \"CS_sRGB\",\n-            ColorSpace.CS_PYCC, \"CS_PYCC\",\n-            ColorSpace.CS_GRAY, \"CS_GRAY\",\n-            ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\",\n-            ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\"\n-    );\n-\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"CASE 1: Testing BuiltIn Profile\");\n-        for (int cs : colorSpace.keySet()) {\n-            testProfile(false, true, cs);\n-        }\n-        System.out.println(\"Passed\\n\");\n-\n-        System.out.println(\"CASE 2: Testing Custom Profile\");\n-        testProfile(false, false, ColorSpace.CS_sRGB);\n-        System.out.println(\"Passed\\n\");\n-\n-        System.out.println(\"CASE 4: Testing Built-In Profile\"\n-                           + \" Serialization & Deserialization\");\n-        for (int cs : colorSpace.keySet()) {\n-            testProfile(true, true, cs);\n-        }\n-        System.out.println(\"Passed\\n\");\n-\n-        System.out.println(\"CASE 5: Testing Custom Profile\"\n-                           + \" Serialization & Deserialization\");\n-        testProfile(true, false, ColorSpace.CS_sRGB);\n-        System.out.println(\"Passed\\n\");\n-    }\n-\n-    private static void testProfile(boolean serializationTest, boolean isBuiltIn, int cs) {\n-        ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n-        \/\/ if isBuiltIn=true use builtInProfile else create a copy\n-        ICC_Profile iccProfile = isBuiltIn ? builtInProfile\n-                                 : ICC_Profile.getInstance(builtInProfile.getData());\n-\n-        if (serializationTest) {\n-            try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                 ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n-                oos.writeObject(iccProfile);\n-\n-                byte[] array = baos.toByteArray();\n-                try (ObjectInputStream ois =\n-                             new ObjectInputStream(new ByteArrayInputStream(array))) {\n-                    iccProfile = (ICC_Profile) ois.readObject();\n-                }\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"Test Failed\", e);\n-            }\n-        }\n-\n-        byte[] headerData = iccProfile.getData(HEADER_TAG);\n-        \/\/ Set profile class to valid icSigInputClass = 0x73636E72\n-        headerData[INDEX] = 0x73;\n-        headerData[INDEX + 1] = 0x63;\n-        headerData[INDEX + 2] = 0x6E;\n-        headerData[INDEX + 3] = 0x72;\n-\n-        if (isBuiltIn) {\n-            System.out.println(\"Testing: \" + colorSpace.get(cs));\n-            try {\n-                \/\/ Try updating a built-in profile, IAE is expected\n-                iccProfile.setData(HEADER_TAG, headerData);\n-                throw new RuntimeException(\"Test Failed! IAE NOT thrown for profile\"\n-                                           + colorSpace.get(cs));\n-            } catch (IllegalArgumentException iae) {\n-                if (!iae.getMessage().equals(EXCEPTION_MSG)) {\n-                    throw new RuntimeException(\"Test Failed! IAE with exception msg \\\"\"\n-                                               + EXCEPTION_MSG + \"\\\" NOT thrown for profile \"\n-                                               + colorSpace.get(cs));\n-                }\n-            }\n-        } else {\n-            \/\/ Modifying custom profile should NOT throw IAE\n-            iccProfile.setData(HEADER_TAG, headerData);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"deleted"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346465\n+ * @summary Tests if setData() throws IAE for BuiltIn profiles\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Map;\n+\n+public class BuiltInProfileCheck {\n+    private static final int HEADER_TAG = ICC_Profile.icSigHead;\n+    private static final int INDEX = ICC_Profile.icHdrDeviceClass;\n+    private static final String EXCEPTION_MSG = \"Built-in profile cannot be modified\";\n+    private static ICC_Profile testProfile;\n+\n+    private static final Map<Integer, String> colorSpace = Map.of(\n+            ColorSpace.CS_sRGB, \"CS_sRGB\",\n+            ColorSpace.CS_PYCC, \"CS_PYCC\",\n+            ColorSpace.CS_GRAY, \"CS_GRAY\",\n+            ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\",\n+            ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\"\n+    );\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"CASE 1: Testing BuiltIn Profile\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"BuiltIn\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 2: Testing Custom Profile\");\n+        prepareTestProfile(\"Custom\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 3: Testing Built-In Profile\"\n+                            + \" Serialization & Deserialization\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"SerializeBuiltIn\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 4: Testing Custom Profile\"\n+                            + \" Serialization & Deserialization\");\n+        prepareTestProfile(\"SerializeCustom\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 5: Test reading Built-In profile from .icc file\");\n+        prepareTestProfile(\"ReadBuiltIn\", true, ColorSpace.CS_sRGB);\n+        testProfile(true, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 6: Test reading Custom profile from .icc file\");\n+        prepareTestProfile(\"ReadCustom\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+    }\n+\n+    private static void prepareTestProfile(String testCase,\n+                                           boolean isBuiltIn, int cs) {\n+        ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n+        \/\/ if isBuiltIn=true use builtInProfile else create a copy\n+        testProfile = isBuiltIn\n+                      ? builtInProfile\n+                      : ICC_Profile.getInstance(builtInProfile.getData());\n+\n+        switch (testCase) {\n+            case \"BuiltIn\", \"Custom\" -> {\n+                \/\/ empty case block\n+                \/\/ no further processing of testProfile required in these 2 cases.\n+            }\n+            case \"SerializeBuiltIn\", \"SerializeCustom\" -> {\n+                try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                     ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n+                    oos.writeObject(testProfile);\n+\n+                    byte[] array = baos.toByteArray();\n+                    try (ObjectInputStream ois =\n+                                 new ObjectInputStream(new ByteArrayInputStream(array))) {\n+                        testProfile = (ICC_Profile) ois.readObject();\n+                    }\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Serial-Deserialization\"\n+                                               + \" case failed\", e);\n+                }\n+            }\n+            case \"ReadBuiltIn\", \"ReadCustom\" -> {\n+                \/\/ .icc files serialized on older JDK version\n+                String filename = isBuiltIn ? \"builtIn.icc\" : \"custom.icc\";\n+                String testDir = System.getProperty(\"test.src\")\n+                                 + System.getProperty(\"file.separator\");\n+                filename = testDir + filename;\n+\n+                try (FileInputStream fileIn = new FileInputStream(filename);\n+                     ObjectInputStream ois = new ObjectInputStream(fileIn)) {\n+                    testProfile = (ICC_Profile) ois.readObject();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Unable to fetch\"\n+                                               + \" .icc files\", e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void testProfile(boolean isBuiltIn, int cs) {\n+        byte[] headerData = testProfile.getData(HEADER_TAG);\n+        \/\/ Set profile class to valid icSigInputClass = 0x73636E72\n+        headerData[INDEX] = 0x73;\n+        headerData[INDEX + 1] = 0x63;\n+        headerData[INDEX + 2] = 0x6E;\n+        headerData[INDEX + 3] = 0x72;\n+\n+        if (isBuiltIn) {\n+            System.out.println(\"Testing: \" + colorSpace.get(cs));\n+            try {\n+                \/\/ Try updating a built-in profile, IAE is expected\n+                testProfile.setData(HEADER_TAG, headerData);\n+                throw new RuntimeException(\"Test Failed! IAE NOT thrown for profile\"\n+                                           + colorSpace.get(cs));\n+            } catch (IllegalArgumentException iae) {\n+                if (!iae.getMessage().equals(EXCEPTION_MSG)) {\n+                    throw new RuntimeException(\"Test Failed! IAE with exception msg \\\"\"\n+                                               + EXCEPTION_MSG + \"\\\" NOT thrown for profile \"\n+                                               + colorSpace.get(cs));\n+                }\n+            }\n+        } else {\n+            \/\/ Modifying custom profile should NOT throw IAE\n+            testProfile.setData(HEADER_TAG, headerData);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/BuiltInProfileCheck.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/builtIn.icc","binary":true,"status":"added"},{"filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/custom.icc","binary":true,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/profiles\/sRGB.pf","status":"copied"}]}