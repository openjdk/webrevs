{"files":[{"patch":"@@ -133,1 +133,1 @@\n-void MallocLimitSet::set_mem_tag_limit(MemTag mem_tag, size_t s, MallocLimitMode mode) {\n+void MallocLimitSet::set_category_limit(MemTag mem_tag, size_t s, MallocLimitMode mode) {\n@@ -142,1 +142,1 @@\n-    set_mem_tag_limit(NMTUtil::index_to_tag(i), 0, MallocLimitMode::trigger_fatal);\n+    set_category_limit(NMTUtil::index_to_tag(i), 0, MallocLimitMode::trigger_fatal);\n","filename":"src\/hotspot\/share\/nmt\/mallocLimit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  void set_mem_tag_limit(MemTag mem_tag, size_t s, MallocLimitMode mode);\n+  void set_category_limit(MemTag mem_tag, size_t s, MallocLimitMode mode);\n","filename":"src\/hotspot\/share\/nmt\/mallocLimit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-bool MallocMemorySummary::mem_tag_limit_reached(MemTag mem_tag, size_t s, size_t so_far, const malloclimit* limit) {\n+bool MallocMemorySummary::category_limit_reached(MemTag mem_tag, size_t s, size_t so_far, const malloclimit* limit) {\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-  static bool mem_tag_limit_reached(MemTag mem_tag, size_t s, size_t so_far, const malloclimit* limit);\n+  static bool category_limit_reached(MemTag mem_tag, size_t s, size_t so_far, const malloclimit* limit);\n@@ -258,1 +258,1 @@\n-  \/\/ either global or the MemTag limit\n+  \/\/ either global or the category limit\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/\/ Returns true if allocating s bytes on f would trigger either global or the MemTag limit\n+\/\/ Returns true if allocating s bytes on f would trigger either global or the category limit\n@@ -58,1 +58,1 @@\n-          return mem_tag_limit_reached(mem_tag, s, so_far, l);\n+          return category_limit_reached(mem_tag, s, so_far, l);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-TEST(NMT, MallocLimitPerMemTag) {\n+TEST(NMT, MallocLimitPerCategory) {\n@@ -82,1 +82,1 @@\n-  expected.set_mem_tag_limit(mtMetaspace, 1 * M, MallocLimitMode::trigger_fatal);\n+  expected.set_category_limit(mtMetaspace, 1 * M, MallocLimitMode::trigger_fatal);\n@@ -87,5 +87,5 @@\n-  expected.set_mem_tag_limit(mtCompiler, 2 * M, MallocLimitMode::trigger_oom);\n-  expected.set_mem_tag_limit(mtThread, 3 * M, MallocLimitMode::trigger_oom);\n-  expected.set_mem_tag_limit(mtThreadStack, 4 * M, MallocLimitMode::trigger_oom);\n-  expected.set_mem_tag_limit(mtClass, 5 * M, MallocLimitMode::trigger_fatal);\n-  expected.set_mem_tag_limit(mtClassShared, 6 * M, MallocLimitMode::trigger_fatal);\n+  expected.set_category_limit(mtCompiler, 2 * M, MallocLimitMode::trigger_oom);\n+  expected.set_category_limit(mtThread, 3 * M, MallocLimitMode::trigger_oom);\n+  expected.set_category_limit(mtThreadStack, 4 * M, MallocLimitMode::trigger_oom);\n+  expected.set_category_limit(mtClass, 5 * M, MallocLimitMode::trigger_fatal);\n+  expected.set_category_limit(mtClassShared, 6 * M, MallocLimitMode::trigger_fatal);\n@@ -101,1 +101,1 @@\n-      expected.set_mem_tag_limit(mem_tag, (i + 1) * M, MallocLimitMode::trigger_fatal);\n+      expected.set_category_limit(mem_tag, (i + 1) * M, MallocLimitMode::trigger_fatal);\n@@ -114,1 +114,1 @@\n-      expected.set_mem_tag_limit(mem_tag, (i + 1) * M, MallocLimitMode::trigger_fatal);\n+      expected.set_category_limit(mem_tag, (i + 1) * M, MallocLimitMode::trigger_fatal);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_malloclimit.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    \/\/ spread over mem-tags\n+    \/\/ spread over categories\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_totals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}