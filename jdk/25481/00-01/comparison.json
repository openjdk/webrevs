{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.nio.file.Files;\n@@ -58,47 +57,0 @@\n-        var installDirDeleteRoot = new Object() { Path path; };\n-        superPkgBuilder.installDir().ifPresent(installDir -> {\n-            if (Files.exists(installDir) && !Files.isDirectory(installDir)) {\n-                    throw new RuntimeException(\n-                             I18N.format(\"message.install-dir-invalid\",\n-                             installDir.toString()));\n-            }\n-\n-            if (!Files.exists(installDir)) {\n-                try {\n-                    \/\/ Install dir can have multiple non-existing directories.\n-                    \/\/ We need to find first non-existing directory, so we can\n-                    \/\/ delete it.\n-                    Path parent = installDir.getParent();\n-                    Path deleteRoot = null;\n-                    while (parent != null) {\n-                        if (!Files.exists(parent.getParent())) {\n-                            parent = parent.getParent();\n-                        } else {\n-                            deleteRoot = parent;\n-                            break;\n-                        }\n-                    }\n-\n-                    if (parent == null) {\n-                        throw new RuntimeException(\n-                             I18N.format(\"message.install-dir-invalid\",\n-                             installDir.toString()));\n-                    }\n-\n-                    installDirDeleteRoot.path = deleteRoot;\n-\n-                    try {\n-                        Files.createDirectories(installDir);\n-                    } catch (Exception ex) {\n-                        throw new RuntimeException(\n-                             I18N.format(\"message.install-dir-create\",\n-                             installDir.toString(),\n-                             ex.getLocalizedMessage()));\n-                    }\n-                } catch (Exception ex) {\n-                    Log.verbose(ex);\n-                    throw new RuntimeException(ex);\n-                }\n-            }\n-        });\n-\n@@ -109,1 +61,0 @@\n-                Optional.ofNullable(installDirDeleteRoot.path),\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgPackageBuilder.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -288,1 +288,3 @@\n-            return pkg.installDir().getParent().toString();\n+            \/\/ If we returning full path we need to replace '\/' with ':'.\n+            \/\/ In this case macOS will display link name as \"\/Users\/USER\/MyCompany\/MyApp\".\n+            return pkg.installDir().getParent().toString().replace('\/', ':');\n@@ -427,8 +429,0 @@\n-            \/\/ Delete root of install dir if set (jpackage created)\n-            pkg.installDirDeleteRoot().ifPresent(path -> {\n-                try {\n-                    FileUtils.deleteRecursive(path);\n-                } catch (IOException e) {\n-                    Log.verbose(e.getMessage());\n-                }\n-            });\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgPackager.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,8 +35,0 @@\n-    \/**\n-     * Will be set to root of created install dir for deletion once it is no\n-     * longer needed.\n-     *\n-     * @return Root of created install dir\n-     *\/\n-    Optional<Path> installDirDeleteRoot();\n-\n@@ -52,2 +44,1 @@\n-    record Stub(Optional<Path> icon, Optional<Path> installDirDeleteRoot,\n-                List<Path> content) implements MacDmgPackageMixin {\n+    record Stub(Optional<Path> icon, List<Path> content) implements MacDmgPackageMixin {\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/model\/MacDmgPackageMixin.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -20,1 +20,1 @@\n-  make new alias file at POSIX file \"DEPLOY_VOLUME_PATH\" to POSIX file \"DEPLOY_INSTALL_LOCATION\" with properties {name:\"DEPLOY_INSTALL_LOCATION_DISPLAY_NAME\"}\n+  do shell script \"(cd 'DEPLOY_VOLUME_PATH' && ln -s 'DEPLOY_INSTALL_LOCATION' 'DEPLOY_INSTALL_LOCATION_DISPLAY_NAME')\"\n@@ -31,1 +31,4 @@\n-      -- Position install location\n+      -- Position install location for default install dir\n+      set position of item theFile of theWindow to {390, 130}\n+    else if theFilePath ends with \"DEPLOY_INSTALL_LOCATION\" then\n+      -- Position install location for custom install dir\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/DMGsetup.scpt","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,2 +83,0 @@\n-message.install-dir-invalid=Error: \"--install-dir\" value {0} is ivalid for DMG packaging. Make sure it is valid path to existing or non-existing directory.\n-message.install-dir-create=Error: Unable to create install dir {0}. Make sure you have sufficient permissions or create it manually. Exception: {1}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,16 +116,1 @@\n-    @Test(ifOS = OperatingSystem.MACOS)\n-    @Parameter(\"\/System\/jpackage\")\n-    public static void testMacCreate(String installDir) {\n-        new PackageTest()\n-        .setExpectedExitCode(1)\n-        .excludeTypes(PackageType.MAC_PKG)\n-        .configureHelloApp()\n-        .addInitializer(cmd -> {\n-            cmd.addArguments(\"--install-dir\", installDir);\n-            cmd.saveConsoleOutput(true);\n-        })\n-        .addBundleVerifier((cmd, result) -> {\n-            cmd.validateOutput(JPackageStringBundle.MAIN.cannedFormattedString(\"message.install-dir-create\", installDir));\n-        })\n-        .run();\n-    }\n+    record DmgTestSpec(Path installDir, boolean runtimeInstaller) {\n@@ -133,4 +118,3 @@\n-    @Test(ifOS = OperatingSystem.MACOS)\n-    public static void testMacInvalid() {\n-        String installDir = TKit.createTempFile(\"InstallDir.txt\")\n-                .toAbsolutePath().toString();\n+        DmgTestSpec {\n+            Objects.requireNonNull(installDir);\n+        }\n@@ -138,12 +122,48 @@\n-        new PackageTest()\n-        .setExpectedExitCode(1)\n-        .excludeTypes(PackageType.MAC_PKG)\n-        .configureHelloApp()\n-        .addInitializer(cmd -> {\n-            cmd.addArguments(\"--install-dir\", installDir);\n-            cmd.saveConsoleOutput(true);\n-        })\n-        .addBundleVerifier((cmd, result) -> {\n-            cmd.validateOutput(JPackageStringBundle.MAIN.cannedFormattedString(\"message.install-dir-invalid\", installDir));\n-        })\n-        .run();\n+        static Builder build() {\n+            return new Builder();\n+        }\n+\n+        static final class Builder {\n+\n+            Builder acceptedInstallDir(String v) {\n+                installDir = Path.of(v);\n+                return this;\n+            }\n+\n+            Builder runtimeInstaller() {\n+                runtimeInstaller = true;\n+                return this;\n+            }\n+\n+            DmgTestSpec create() {\n+                return new DmgTestSpec(installDir, runtimeInstaller);\n+            }\n+\n+            private Path installDir;\n+            private boolean runtimeInstaller;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            final var sb = new StringBuilder();\n+            sb.append(installDir);\n+            if (runtimeInstaller) {\n+                sb.append(\", runtime\");\n+            }\n+            return sb.toString();\n+        }\n+\n+        void run() {\n+            final var test = new PackageTest().forTypes(PackageType.MAC_DMG).ignoreBundleOutputDir();\n+            if (runtimeInstaller) {\n+                test.addInitializer(cmd -> {\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                });\n+            } else {\n+                test.configureHelloApp();\n+            }\n+\n+            test.addInitializer(JPackageCommand::setFakeRuntime).addInitializer(cmd -> {\n+                cmd.addArguments(\"--install-dir\", installDir);\n+            }).run(Action.CREATE_AND_UNPACK);\n+        }\n@@ -153,3 +173,4 @@\n-    public static void testMacValid() {\n-        final Path installDirRoot = TKit.createTempDirectory(\"InstallDirRoot\");\n-        Path installDir = installDirRoot.resolve(\"MyCompany\").resolve(\"MyApp\");\n+    @ParameterSupplier\n+    public static void testDmg(DmgTestSpec testSpec) {\n+        testSpec.run();\n+    }\n@@ -157,7 +178,12 @@\n-        new PackageTest()\n-        .excludeTypes(PackageType.MAC_PKG)\n-        .configureHelloApp()\n-        .addInitializer(cmd -> {\n-            cmd.addArguments(\"--install-dir\", installDir.toAbsolutePath().toString());\n-        })\n-        .run();\n+    public static List<Object[]> testDmg() {\n+        return Stream.of(\n+                DmgTestSpec.build().acceptedInstallDir(\"\/foo\"),\n+                DmgTestSpec.build().acceptedInstallDir(\"\/foo\/bar\"),\n+                DmgTestSpec.build().acceptedInstallDir(\"\/foo\").runtimeInstaller(),\n+                DmgTestSpec.build().acceptedInstallDir(\"\/foo\/bar\").runtimeInstaller(),\n+\n+                DmgTestSpec.build().acceptedInstallDir(\"\/Library\/Java\/JavaVirtualMachines\"),\n+                DmgTestSpec.build().acceptedInstallDir(\"\/Applications\").runtimeInstaller(),\n+\n+                DmgTestSpec.build().acceptedInstallDir(\"\/Applications\"),\n+                DmgTestSpec.build().acceptedInstallDir(\"\/Applications\/foo\/bar\/buz\"),\n@@ -165,2 +191,5 @@\n-        \/\/ If we have non existing install directories make sure root is empty\n-        TKit.assertDirectoryEmpty(installDirRoot);\n+                DmgTestSpec.build().runtimeInstaller().acceptedInstallDir(\"\/Library\/Java\/JavaVirtualMachines\"),\n+                DmgTestSpec.build().runtimeInstaller().acceptedInstallDir(\"\/Library\/Java\/JavaVirtualMachines\/foo\/bar\/buz\")\n+        ).map(DmgTestSpec.Builder::create).map(testSpec -> {\n+            return new Object[] { testSpec };\n+        }).toList();\n","filename":"test\/jdk\/tools\/jpackage\/share\/InstallDirTest.java","additions":73,"deletions":44,"binary":false,"changes":117,"status":"modified"}]}