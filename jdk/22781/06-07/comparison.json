{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,2 @@\n+        allScreenBounds = new Rectangle[gs.length];\n+\n@@ -229,2 +231,4 @@\n-        int finX = x;\n-        int finY = y;\n+        int finX1 = x;\n+        int finY1 = y;\n+        int finX2 = x;\n+        int finY2 = y;\n@@ -243,8 +247,3 @@\n-            } else if (currXDiff < leastXDiff) {\n-                finX = closestX;\n-                finY = closestY;\n-                leastXDiff = currXDiff;\n-                leastYDiff = currYDiff;\n-            } else if (currYDiff < leastYDiff) {\n-                finX = closestX;\n-                finY = closestY;\n+            } if (currXDiff < leastXDiff) {\n+                finX1 = closestX;\n+                finY1 = closestY;\n@@ -252,0 +251,3 @@\n+            } if (currYDiff < leastYDiff) {\n+                finX2 = closestX;\n+                finY2 = closestY;\n@@ -256,1 +258,7 @@\n-        peer.mouseMove(finX, finY);\n+        if (leastXDiff > leastYDiff) {\n+            peer.mouseMove(finX2, finY2);\n+        } else {\n+            peer.mouseMove(finX1, finY1);\n+\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n@@ -26,0 +29,1 @@\n+import java.awt.Rectangle;\n@@ -37,0 +41,1 @@\n+    private static final Point STARTING_LOC = new Point(200, 200);\n@@ -38,0 +43,1 @@\n+    private static Rectangle[] r;\n@@ -40,0 +46,9 @@\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gs = ge.getScreenDevices();\n+        r = new Rectangle[gs.length];\n+\n+        for (int i = 0; i < gs.length; i++) {\n+            r[i] = gs[i].getDefaultConfiguration().getBounds();\n+        }\n+\n+        Point offsc = validateOffScreen(OFF_SCREEN_LOC);\n@@ -41,1 +56,1 @@\n-        robot.mouseMove(200, 200);\n+        robot.mouseMove(STARTING_LOC.x, STARTING_LOC.y);\n@@ -43,1 +58,1 @@\n-        robot.mouseMove(OFF_SCREEN_LOC.x, OFF_SCREEN_LOC.y);\n+        robot.mouseMove(offsc.x, offsc.y);\n@@ -46,1 +61,3 @@\n-        if (MouseInfo.getPointerInfo().getLocation() == null) {\n+        Point currLoc = MouseInfo.getPointerInfo().getLocation();\n+\n+        if (currLoc == null) {\n@@ -49,1 +66,1 @@\n-        Point currLoc = MouseInfo.getPointerInfo().getLocation();\n+\n@@ -55,0 +72,9 @@\n+\n+    private static Point validateOffScreen(Point p) {\n+        for (Rectangle rect : r) {\n+            if (rect.contains(p)) {\n+                return validateOffScreen(new Point(p.x * 2, p.y));\n+            }\n+        }\n+        return p;\n+    }\n","filename":"test\/jdk\/java\/awt\/Robot\/MouseMoveOffScreen.java","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"}]}