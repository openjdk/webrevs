{"files":[{"patch":"@@ -85,1 +85,1 @@\n- * <p>\n+ *\n@@ -101,1 +101,1 @@\n- * <p>\n+ *\n@@ -108,2 +108,2 @@\n- * @author Robi Khan\n- * @since 1.3\n+ * @author      Robi Khan\n+ * @since       1.3\n@@ -124,4 +124,4 @@\n-     * @throws AWTException if the platform configuration does not allow\n-     *                      low-level input control.  This exception is always thrown when\n-     *                      GraphicsEnvironment.isHeadless() returns true\n-     * @see java.awt.GraphicsEnvironment#isHeadless\n+     * @throws  AWTException if the platform configuration does not allow\n+     * low-level input control.  This exception is always thrown when\n+     * GraphicsEnvironment.isHeadless() returns true\n+     * @see     java.awt.GraphicsEnvironment#isHeadless\n@@ -132,1 +132,1 @@\n-                .getDefaultScreenDevice());\n+            .getDefaultScreenDevice());\n@@ -149,9 +149,9 @@\n-     * @param screen A screen GraphicsDevice indicating the coordinate\n-     *               system the Robot will operate in.\n-     * @throws AWTException             if the platform configuration does not allow\n-     *                                  low-level input control.  This exception is always thrown when\n-     *                                  GraphicsEnvironment.isHeadless() returns true.\n-     * @throws IllegalArgumentException if {@code screen} is not a screen\n-     *                                  GraphicsDevice.\n-     * @see java.awt.GraphicsEnvironment#isHeadless\n-     * @see GraphicsDevice\n+     * @param screen    A screen GraphicsDevice indicating the coordinate\n+     *                  system the Robot will operate in.\n+     * @throws  AWTException if the platform configuration does not allow\n+     * low-level input control.  This exception is always thrown when\n+     * GraphicsEnvironment.isHeadless() returns true.\n+     * @throws  IllegalArgumentException if {@code screen} is not a screen\n+     *          GraphicsDevice.\n+     * @see     java.awt.GraphicsEnvironment#isHeadless\n+     * @see     GraphicsDevice\n@@ -168,1 +168,1 @@\n-            peer = ((ComponentFactory) toolkit).createRobot(screen);\n+            peer = ((ComponentFactory)toolkit).createRobot(screen);\n@@ -183,1 +183,1 @@\n-        if (Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()) {\n+        if (Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()){\n@@ -185,3 +185,3 @@\n-                final int buttonsNumber = ((SunToolkit) (Toolkit.getDefaultToolkit())).getNumberOfButtons();\n-                for (int i = 0; i < buttonsNumber; i++) {\n-                    tmpMask |= InputEvent.getMaskForButton(i + 1);\n+                final int buttonsNumber = ((SunToolkit)(Toolkit.getDefaultToolkit())).getNumberOfButtons();\n+                for (int i = 0; i < buttonsNumber; i++){\n+                    tmpMask |= InputEvent.getMaskForButton(i+1);\n@@ -191,6 +191,6 @@\n-        tmpMask |= InputEvent.BUTTON1_MASK |\n-                InputEvent.BUTTON2_MASK |\n-                InputEvent.BUTTON3_MASK |\n-                InputEvent.BUTTON1_DOWN_MASK |\n-                InputEvent.BUTTON2_DOWN_MASK |\n-                InputEvent.BUTTON3_DOWN_MASK;\n+        tmpMask |= InputEvent.BUTTON1_MASK|\n+            InputEvent.BUTTON2_MASK|\n+            InputEvent.BUTTON3_MASK|\n+            InputEvent.BUTTON1_DOWN_MASK|\n+            InputEvent.BUTTON2_DOWN_MASK|\n+            InputEvent.BUTTON3_DOWN_MASK;\n@@ -223,2 +223,2 @@\n-     * @param x X position\n-     * @param y Y position\n+     * @param x         X position\n+     * @param y         Y position\n@@ -240,3 +240,3 @@\n-                finX = x;\n-                finY = y;\n-                break;\n+                mouseMove(x,y);\n+                afterEvent();\n+                return;\n@@ -257,2 +257,0 @@\n-\/\/        peer.mouseMove(Math.min(Math.max(x, screenBounds.x), screenBounds.x + screenBounds.width),\n-\/\/                Math.min(Math.max(y, screenBounds.y), screenBounds.y + screenBounds.height));\n@@ -267,37 +265,37 @@\n-     *                mouse button masks.\n-     *                <p>\n-     *                It is allowed to use only a combination of valid values as a {@code buttons} parameter.\n-     *                A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}\n-     *                and values returned by the\n-     *                {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.\n-     *                <p>\n-     *                The valid combination also depends on a\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:\n-     *                <ul>\n-     *                <li> If support for extended mouse buttons is\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n-     *                then it is allowed to use only the following standard button masks:\n-     *                {@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON3_DOWN_MASK}.\n-     *                <li> If support for extended mouse buttons is\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n-     *                then it is allowed to use the standard button masks\n-     *                and masks for existing extended mouse buttons, if the mouse has more then three buttons.\n-     *                In that way, it is allowed to use the button masks corresponding to the buttons\n-     *                in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.\n-     *                <br>\n-     *                It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}\n-     *                method to obtain the mask for any mouse button by its number.\n-     *                <\/ul>\n-     *                <p>\n-     *                The following standard button masks are also accepted:\n-     *                <ul>\n-     *                <li>{@code InputEvent.BUTTON1_MASK}\n-     *                <li>{@code InputEvent.BUTTON2_MASK}\n-     *                <li>{@code InputEvent.BUTTON3_MASK}\n-     *                <\/ul>\n-     *                However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.\n-     *                Either extended {@code _DOWN_MASK} or old {@code _MASK} values\n-     *                should be used, but both those models should not be mixed.\n+     * mouse button masks.\n+     * <p>\n+     * It is allowed to use only a combination of valid values as a {@code buttons} parameter.\n+     * A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},\n+     * {@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}\n+     * and values returned by the\n+     * {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.\n+     *\n+     * The valid combination also depends on a\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:\n+     * <ul>\n+     * <li> If support for extended mouse buttons is\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n+     * then it is allowed to use only the following standard button masks:\n+     * {@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},\n+     * {@code InputEvent.BUTTON3_DOWN_MASK}.\n+     * <li> If support for extended mouse buttons is\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n+     * then it is allowed to use the standard button masks\n+     * and masks for existing extended mouse buttons, if the mouse has more then three buttons.\n+     * In that way, it is allowed to use the button masks corresponding to the buttons\n+     * in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.\n+     * <br>\n+     * It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}\n+     * method to obtain the mask for any mouse button by its number.\n+     * <\/ul>\n+     * <p>\n+     * The following standard button masks are also accepted:\n+     * <ul>\n+     * <li>{@code InputEvent.BUTTON1_MASK}\n+     * <li>{@code InputEvent.BUTTON2_MASK}\n+     * <li>{@code InputEvent.BUTTON3_MASK}\n+     * <\/ul>\n+     * However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},\n+     * {@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.\n+     * Either extended {@code _DOWN_MASK} or old {@code _MASK} values\n+     * should be used, but both those models should not be mixed.\n@@ -305,1 +303,1 @@\n-     *                                  and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n+     *         and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n@@ -307,1 +305,1 @@\n-     *                                  that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n+     *         that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n@@ -324,37 +322,37 @@\n-     *                mouse button masks.\n-     *                <p>\n-     *                It is allowed to use only a combination of valid values as a {@code buttons} parameter.\n-     *                A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}\n-     *                and values returned by the\n-     *                {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.\n-     *                <p>\n-     *                The valid combination also depends on a\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:\n-     *                <ul>\n-     *                <li> If the support for extended mouse buttons is\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n-     *                then it is allowed to use only the following standard button masks:\n-     *                {@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON3_DOWN_MASK}.\n-     *                <li> If the support for extended mouse buttons is\n-     *                {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n-     *                then it is allowed to use the standard button masks\n-     *                and masks for existing extended mouse buttons, if the mouse has more then three buttons.\n-     *                In that way, it is allowed to use the button masks corresponding to the buttons\n-     *                in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.\n-     *                <br>\n-     *                It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}\n-     *                method to obtain the mask for any mouse button by its number.\n-     *                <\/ul>\n-     *                <p>\n-     *                The following standard button masks are also accepted:\n-     *                <ul>\n-     *                <li>{@code InputEvent.BUTTON1_MASK}\n-     *                <li>{@code InputEvent.BUTTON2_MASK}\n-     *                <li>{@code InputEvent.BUTTON3_MASK}\n-     *                <\/ul>\n-     *                However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},\n-     *                {@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.\n-     *                Either extended {@code _DOWN_MASK} or old {@code _MASK} values\n-     *                should be used, but both those models should not be mixed.\n+     * mouse button masks.\n+     * <p>\n+     * It is allowed to use only a combination of valid values as a {@code buttons} parameter.\n+     * A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},\n+     * {@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}\n+     * and values returned by the\n+     * {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.\n+     *\n+     * The valid combination also depends on a\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:\n+     * <ul>\n+     * <li> If the support for extended mouse buttons is\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n+     * then it is allowed to use only the following standard button masks:\n+     * {@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},\n+     * {@code InputEvent.BUTTON3_DOWN_MASK}.\n+     * <li> If the support for extended mouse buttons is\n+     * {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n+     * then it is allowed to use the standard button masks\n+     * and masks for existing extended mouse buttons, if the mouse has more then three buttons.\n+     * In that way, it is allowed to use the button masks corresponding to the buttons\n+     * in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.\n+     * <br>\n+     * It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}\n+     * method to obtain the mask for any mouse button by its number.\n+     * <\/ul>\n+     * <p>\n+     * The following standard button masks are also accepted:\n+     * <ul>\n+     * <li>{@code InputEvent.BUTTON1_MASK}\n+     * <li>{@code InputEvent.BUTTON2_MASK}\n+     * <li>{@code InputEvent.BUTTON3_MASK}\n+     * <\/ul>\n+     * However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},\n+     * {@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.\n+     * Either extended {@code _DOWN_MASK} or old {@code _MASK} values\n+     * should be used, but both those models should not be mixed.\n@@ -362,1 +360,1 @@\n-     *                                  and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n+     *         and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n@@ -364,1 +362,1 @@\n-     *                                  that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n+     *         that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java\n@@ -378,1 +376,1 @@\n-        if ((buttons | LEGAL_BUTTON_MASK) != LEGAL_BUTTON_MASK) {\n+        if ( (buttons|LEGAL_BUTTON_MASK) != LEGAL_BUTTON_MASK ) {\n@@ -386,3 +384,4 @@\n-     * @param wheelAmt number of \"notches\" to move the mouse wheel\n-     *                 Negative values indicate movement up\/away from the user,\n-     *                 positive values indicate movement down\/towards the user.\n+     * @param wheelAmt  number of \"notches\" to move the mouse wheel\n+     *                  Negative values indicate movement up\/away from the user,\n+     *                  positive values indicate movement down\/towards the user.\n+     *\n@@ -404,5 +403,5 @@\n-     * @param keycode Key to press (e.g. {@code KeyEvent.VK_A})\n-     * @throws IllegalArgumentException if {@code keycode} is not\n-     *                                  a valid key\n-     * @see #keyRelease(int)\n-     * @see java.awt.event.KeyEvent\n+     * @param   keycode Key to press (e.g. {@code KeyEvent.VK_A})\n+     * @throws  IllegalArgumentException if {@code keycode} is not\n+     *          a valid key\n+     * @see     #keyRelease(int)\n+     * @see     java.awt.event.KeyEvent\n@@ -423,5 +422,5 @@\n-     * @param keycode Key to release (e.g. {@code KeyEvent.VK_A})\n-     * @throws IllegalArgumentException if {@code keycode} is not a\n-     *                                  valid key\n-     * @see #keyPress(int)\n-     * @see java.awt.event.KeyEvent\n+     * @param   keycode Key to release (e.g. {@code KeyEvent.VK_A})\n+     * @throws  IllegalArgumentException if {@code keycode} is not a\n+     *          valid key\n+     * @see  #keyPress(int)\n+     * @see     java.awt.event.KeyEvent\n@@ -453,6 +452,0 @@\n-     *\n-     * @param x X position of pixel\n-     * @param y Y position of pixel\n-     * @return Color of the pixel\n-     * @throws SecurityException if access to the screen is denied\n-     *                           by the desktop environment\n@@ -463,0 +456,6 @@\n+     *\n+     * @param   x       X position of pixel\n+     * @param   y       Y position of pixel\n+     * @throws  SecurityException if access to the screen is denied\n+     *          by the desktop environment\n+     * @return  Color of the pixel\n@@ -466,1 +465,1 @@\n-                : toDeviceSpace(x, y);\n+                                                    : toDeviceSpace(x, y);\n@@ -478,7 +477,0 @@\n-     *\n-     * @param screenRect Rect to capture in screen coordinates\n-     * @return The captured image\n-     * @throws IllegalArgumentException if {@code screenRect} width and height\n-     *                                  are not greater than zero\n-     * @throws SecurityException        if access to the screen is denied\n-     *                                  by the desktop environment\n@@ -489,0 +481,7 @@\n+     *\n+     * @param   screenRect      Rect to capture in screen coordinates\n+     * @return  The captured image\n+     * @throws  IllegalArgumentException if {@code screenRect} width and height\n+     *          are not greater than zero\n+     * @throws  SecurityException if access to the screen is denied\n+     *          by the desktop environment\n@@ -526,0 +525,6 @@\n+     * @param   screenRect     Rect to capture in screen coordinates\n+     * @return  The captured image\n+     * @throws  IllegalArgumentException if {@code screenRect} width and height\n+     *          are not greater than zero\n+     * @throws  SecurityException if access to the screen is denied\n+     *          by the desktop environment\n@@ -527,6 +532,0 @@\n-     * @param screenRect Rect to capture in screen coordinates\n-     * @return The captured image\n-     * @throws IllegalArgumentException if {@code screenRect} width and height\n-     *                                  are not greater than zero\n-     * @throws SecurityException        if access to the screen is denied\n-     *                                  by the desktop environment\n@@ -536,1 +535,1 @@\n-    createMultiResolutionScreenCapture(Rectangle screenRect) {\n+            createMultiResolutionScreenCapture(Rectangle screenRect) {\n@@ -543,1 +542,1 @@\n-    createCompatibleImage(Rectangle screenRect, boolean isHiDPI) {\n+            createCompatibleImage(Rectangle screenRect, boolean isHiDPI) {\n@@ -640,1 +639,1 @@\n-            if (!isHiDPI) {\n+            if(!isHiDPI) {\n@@ -671,1 +670,0 @@\n-     *\n@@ -681,2 +679,1 @@\n-     *\n-     * @param isOn Whether {@code waitForIdle} is automatically invoked\n+     * @param   isOn    Whether {@code waitForIdle} is automatically invoked\n@@ -709,1 +706,1 @@\n-     * @param ms the delay duration in milliseconds\n+     * @param  ms the delay duration in milliseconds\n@@ -711,1 +708,1 @@\n-     *                                  is not between 0 and 60,000 milliseconds inclusive\n+     *         is not between 0 and 60,000 milliseconds inclusive\n@@ -733,1 +730,1 @@\n-     * @param ms time to sleep in milliseconds\n+     * @param  ms time to sleep in milliseconds\n@@ -735,1 +732,1 @@\n-     *                                  and {@code 60,000} milliseconds inclusive\n+     *         and {@code 60,000} milliseconds inclusive\n@@ -757,2 +754,1 @@\n-     *\n-     * @throws IllegalThreadStateException if called on the AWT event dispatching thread\n+     * @throws  IllegalThreadStateException if called on the AWT event dispatching thread\n@@ -775,1 +771,1 @@\n-     * @return the string representation.\n+     * @return  the string representation.\n@@ -779,1 +775,1 @@\n-        String params = \"autoDelay = \" + getAutoDelay() + \", \" + \"autoWaitForIdle = \" + isAutoWaitForIdle();\n+        String params = \"autoDelay = \"+getAutoDelay()+\", \"+\"autoWaitForIdle = \"+isAutoWaitForIdle();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":158,"deletions":162,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    private static final Point STARTING_LOC = new Point(200, 200);\n@@ -42,1 +41,1 @@\n-        robot.mouseMove(STARTING_LOC.x, STARTING_LOC.y);\n+        robot.mouseMove(200, 200);\n","filename":"test\/jdk\/java\/awt\/Robot\/MouseMoveOffScreen.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}