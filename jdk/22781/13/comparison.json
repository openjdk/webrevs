{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n@@ -66,1 +68,35 @@\n-        mouseEvent(mouseLastX, mouseLastY, mouseButtonsState, true, true);\n+        int leastDiff = Integer.MAX_VALUE;\n+        int finX = x;\n+        int finY = y;\n+\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gs = ge.getScreenDevices();\n+        Rectangle[] allScreenBounds = new Rectangle[gs.length];\n+\n+        for (int i = 0; i < gs.length; i++) {\n+            allScreenBounds[i] = gs[i].getDefaultConfiguration().getBounds();\n+        }\n+\n+        for (Rectangle screenBounds : allScreenBounds) {\n+            Point cP = calcClosestPoint(x, y, screenBounds);\n+\n+            int currXDiff = Math.abs(x - cP.x);\n+            int currYDiff = Math.abs(y - cP.y);\n+            int currDiff = (int) Math.round(Math.hypot(currXDiff, currYDiff));\n+\n+            if (currDiff == 0) {\n+                mouseEvent(mouseLastX, mouseLastY, mouseButtonsState, true, true);\n+                return;\n+            } if (currDiff < leastDiff) {\n+                finX = cP.x;\n+                finY = cP.y;\n+                leastDiff = currDiff;\n+            }\n+        }\n+\n+        mouseEvent(finX, finY, mouseButtonsState, true, true);\n+    }\n+\n+    private Point calcClosestPoint(int x, int y, Rectangle screenBounds) {\n+        return new Point(Math.min(Math.max(x, screenBounds.x), screenBounds.x + screenBounds.width - 1),\n+                Math.min(Math.max(y, screenBounds.y), screenBounds.y + screenBounds.height - 1));\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CRobot.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.MouseInfo;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 8345538\n+ * @summary Tests mouseMove clamping to screen bounds when set to move offscreen\n+ * @requires (os.family == \"mac\")\n+ * @key headful\n+ * @run main MouseMoveOffScreen\n+ *\/\n+\n+public class MouseMoveOffScreen {\n+    private static final Point STARTING_LOC = new Point(200, 200);\n+    private static final Point OFF_SCREEN_LOC = new Point(20000, 200);\n+    private static Rectangle[] r;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gs = ge.getScreenDevices();\n+        r = new Rectangle[gs.length];\n+\n+        for (int i = 0; i < gs.length; i++) {\n+            r[i] = gs[i].getDefaultConfiguration().getBounds();\n+            System.out.println(\"Screen: \"+ gs[i].getIDstring() + \"  Bounds: \" + r[i]);\n+        }\n+\n+        Point offsc = validateOffScreen(OFF_SCREEN_LOC);\n+        Robot robot = new Robot();\n+        robot.mouseMove(STARTING_LOC.x, STARTING_LOC.y);\n+        robot.delay(500);\n+        robot.mouseMove(offsc.x, offsc.y);\n+        robot.delay(500);\n+\n+        Point currLoc = MouseInfo.getPointerInfo().getLocation();\n+\n+        if (currLoc == null) {\n+            throw new RuntimeException(\"Test Failed, getLocation returned null.\");\n+        }\n+\n+        System.out.println(\"Current mouse location: \" + currLoc);\n+        if (currLoc.equals(OFF_SCREEN_LOC)) {\n+            throw new RuntimeException(\"Test Failed, robot moved mouse off screen.\");\n+        }\n+    }\n+\n+    private static Point validateOffScreen(Point p) {\n+        for (Rectangle rect : r) {\n+            if (rect.contains(p)) {\n+                return validateOffScreen(new Point(p.x * 2, p.y));\n+            }\n+        }\n+        return p;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/MouseMoveOffScreen.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}