{"files":[{"patch":"@@ -459,1 +459,1 @@\n-    if (FLAG_IS_DEFAULT(EnableVectorSupport)) {\n+    if (FLAG_IS_DEFAULT(EnableVectorSupport) RISCV64_ONLY(&& !AlignVector)) {\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorAddMulReduction.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorExpandTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCompareNotTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+* @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskLaneIsSetTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+* @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskToLongTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+* @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorSaturatedOperationsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+* @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorUnsignedMinMaxOperationsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastRVV.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @requires vm.opt.EnableVectorSupport == true\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorReinterpret.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -645,1 +645,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -652,1 +652,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -634,1 +634,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n@@ -665,1 +665,1 @@\n-        int index = fi.apply((int) a.byteSize()) & (~(SPECIES.elementSize() - 1));\n+        int index = fi.apply((int) a.byteSize());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}