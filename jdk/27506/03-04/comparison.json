{"files":[{"patch":"@@ -37,0 +37,51 @@\n+address VM_Version::_misaligned_vector_fault_pc1 = NULL;\n+address VM_Version::_misaligned_vector_fault_pc2 = NULL;\n+address VM_Version::_misaligned_vector_continuation_pc = NULL;\n+short short_array[4] = { 0, 0, 0, 0 };\n+\n+static BufferBlob* stub_blob;\n+static const int stub_size = 256;\n+\n+extern \"C\" {\n+  typedef int (*detect_misaligned_vector_stub_t)();\n+}\n+\n+static detect_misaligned_vector_stub_t detect_misaligned_vector_stub = NULL;\n+\n+\n+class VM_Version_StubGenerator: public StubCodeGenerator {\n+ public:\n+\n+  VM_Version_StubGenerator(CodeBuffer *c) : StubCodeGenerator(c) {}\n+  ~VM_Version_StubGenerator() {}\n+\n+  address generate_detect_misaligned_vector(address* fault_pc1, address* fault_pc2, address* continuation_pc) {\n+    StubCodeMark mark(this, \"VM_Version\", \"detect_misaligned_vector_stub\");\n+#   define __ _masm->\n+    address start = __ pc();\n+\n+    __ enter();\n+    __ mv(x10, zr);\n+    __ la(t1, ExternalAddress((address) short_array));\n+    __ addi(t1, t1, 1);   \/\/ Misaligned address\n+    __ vsetivli(x0, 1, Assembler::e16);\n+    __ vmv_s_x(v2, zr);\n+\n+    __ addi(t2, zr, 1);\n+    __ vmv_s_x(v1, t2);\n+    *fault_pc1 = __ pc();\n+    __ vse16_v(v1, t1);   \/\/ Misaligned vector store\n+\n+    *fault_pc2 = __ pc();\n+    __ vle16_v(v2, t1);   \/\/ Misaligned vector load\n+\n+    *continuation_pc = __ pc();\n+    __ vmv_x_s(x10, v2);\n+    __ leave();\n+    __ ret();\n+\n+#   undef __\n+\n+    return start;\n+  }\n+};\n@@ -170,7 +221,16 @@\n-  if (FLAG_IS_DEFAULT(AlignVector)) {\n-    FLAG_SET_DEFAULT(AlignVector,\n-      unaligned_vector.value() != MISALIGNED_VECTOR_FAST);\n-  } else if (AlignVector == false) {\n-    if (unaligned_vector.value() != MISALIGNED_VECTOR_FAST) {\n-       warning(\"Misaligned vector accesses are not supported on this CPU\");\n-       FLAG_SET_DEFAULT(AlignVector, true);\n+  if (UseRVV) {\n+    if (!unaligned_vector.enabled() && AlignVector == false) {\n+      if (!VM_Version::detect_misaligned_vector_support()){\n+        warning(\"Misaligned vector accesses are not supported on this CPU\");\n+        FLAG_SET_DEFAULT(AlignVector, true);\n+      }\n+    } else {\n+      if (FLAG_IS_DEFAULT(AlignVector)) {\n+        FLAG_SET_DEFAULT(AlignVector,\n+          unaligned_vector.value() != MISALIGNED_VECTOR_FAST);\n+      } else if (AlignVector == false) {\n+        if (unaligned_vector.value() != MISALIGNED_VECTOR_FAST) {\n+          warning(\"Misaligned vector accesses are not supported on this CPU\");\n+          FLAG_SET_DEFAULT(AlignVector, true);\n+        }\n+      }\n@@ -489,0 +549,22 @@\n+\n+bool VM_Version::detect_misaligned_vector_support() {\n+  ResourceMark rm;\n+\n+  stub_blob = BufferBlob::create(\"detect_misaligned_vector_stub\", stub_size);\n+    if (stub_blob == NULL) {\n+      vm_exit_during_initialization(\"Unable to allocate detect_misaligned_vector_stub\");\n+    }\n+\n+    CodeBuffer c(stub_blob);\n+    VM_Version_StubGenerator g(&c);\n+    detect_misaligned_vector_stub = CAST_TO_FN_PTR(detect_misaligned_vector_stub_t,\n+                                                  g.generate_detect_misaligned_vector(\n+                                                  &VM_Version::_misaligned_vector_fault_pc1,\n+                                                  &VM_Version::_misaligned_vector_fault_pc2,\n+                                                  &VM_Version::_misaligned_vector_continuation_pc));\n+\n+  if ((uint32_t)detect_misaligned_vector_stub() == 1) {\n+    return true;\n+  }\n+  return false;\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":89,"deletions":7,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -507,0 +507,13 @@\n+  static bool is_check_misaligned_vector_fault(address pc) {\n+    return pc != NULL && (pc == _misaligned_vector_fault_pc1 || pc == _misaligned_vector_fault_pc2);\n+  }\n+\n+  static address continuation_for_check_misaligned_vector_fault(address pc) {\n+    assert(_misaligned_vector_continuation_pc != NULL , \"not initialized\");\n+    return _misaligned_vector_continuation_pc;\n+  }\n+\n+  static address _misaligned_vector_fault_pc1;\n+  static address _misaligned_vector_fault_pc2;\n+  static address _misaligned_vector_continuation_pc;\n+\n@@ -519,0 +532,3 @@\n+\n+  \/\/ Detect misaligned vector support\n+  static bool detect_misaligned_vector_support();\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -290,0 +290,5 @@\n+\n+    if (sig == SIGBUS && VM_Version::is_check_misaligned_vector_fault(pc)) {\n+      os::Posix::ucontext_set_pc(uc, VM_Version::continuation_for_check_misaligned_vector_fault(pc));\n+      return true;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}