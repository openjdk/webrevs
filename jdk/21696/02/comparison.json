{"files":[{"patch":"@@ -572,1 +572,1 @@\n-     * Supports futimes or futimesat\n+     * Supports futimes\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-typedef int futimesat_func(int, const char *, const struct timeval *);\n+typedef int futimes_func(int, const struct timeval *);\n@@ -220,1 +220,1 @@\n-static futimesat_func* my_futimesat_func = NULL;\n+static futimes_func* my_futimes_func = NULL;\n@@ -366,2 +366,2 @@\n-    my_openat_func = (openat_func*)dlsym(RTLD_DEFAULT, \"openat\");\n-    my_fstatat_func = (fstatat_func*)dlsym(RTLD_DEFAULT, \"fstatat\");\n+    my_openat_func = (openat_func*) openat;\n+    my_fstatat_func = (fstatat_func*) fstatat;\n@@ -376,2 +376,2 @@\n-    my_futimesat_func = (futimesat_func*) lookup_time_t_function(\"futimesat\",\n-        \"__futimesat64\");\n+    my_futimes_func = (futimes_func*) lookup_time_t_function(\"futimes\",\n+        \"__futimes64\");\n@@ -383,2 +383,1 @@\n-#ifndef _ALLBSD_SOURCE\n-    my_futimesat_func = (futimesat_func*) dlsym(RTLD_DEFAULT, \"futimesat\");\n+    my_futimes_func = (futimes_func*) dlsym(RTLD_DEFAULT, \"futimes\");\n@@ -386,1 +385,0 @@\n-#endif\n@@ -392,0 +390,2 @@\n+#elif defined(_ALLBSD_SOURCE)\n+    my_fdopendir_func = (fdopendir_func*) fdopendir;\n@@ -402,1 +402,1 @@\n-    \/* supports futimes or futimesat, futimens, and\/or lutimes *\/\n+    \/* supports futimes, futimens, and\/or lutimes *\/\n@@ -408,1 +408,1 @@\n-    if (my_futimesat_func != NULL)\n+    if (my_futimes_func != NULL)\n@@ -420,1 +420,1 @@\n-        my_futimesat_func != NULL && my_fdopendir_func != NULL)\n+        my_futimes_func != NULL && my_fdopendir_func != NULL)\n@@ -917,2 +917,2 @@\n-    if (my_futimesat_func == NULL) {\n-        JNU_ThrowInternalError(env, \"my_futimesat_func is NULL\");\n+    if (my_futimes_func == NULL) {\n+        JNU_ThrowInternalError(env, \"my_futimes_func is NULL\");\n@@ -921,1 +921,1 @@\n-    RESTARTABLE((*my_futimesat_func)(filedes, NULL, &times[0]), err);\n+    RESTARTABLE((*my_futimes_func)(filedes, &times[0]), err);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333\n+ * @bug 4313887 6838333 8343020\n@@ -27,0 +27,1 @@\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n@@ -48,5 +49,1 @@\n-                if (System.getProperty(\"os.name\").equals(\"Linux\"))\n-                    throw new AssertionError(\n-                            \"SecureDirectoryStream not supported.\");\n-                System.out.println(\"SecureDirectoryStream not supported.\");\n-                return;\n+                throw new AssertionError(\"SecureDirectoryStream not supported.\");\n","filename":"test\/jdk\/java\/nio\/file\/DirectoryStream\/SecureDS.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}