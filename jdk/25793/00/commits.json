[{"commit":{"message":"8356760: VectorAPI: Optimize VectorMask.fromLong for all-true\/all-false cases\n\nIf the input long value `l` of `VectorMask.fromLong(SPECIES, l)` would\nset or unset all lanes, `VectorMask.fromLong(SPECIES, l)` is equivalent\nto `maskAll(true)` or `maskAll(false)`. But the cost of `maskAll` is\nrelative smaller than that of `fromLong`. This patch does the conversion\nfor these cases if `l` is a compile time constant.\n\nAnd this conversion also enables further optimizations that recognize\nmaskAll patterns, see [1].\n\nSome JTReg test cases are added to ensure the optimization is effective.\n\nI tried many different ways to write a JMH benchmark, but failed. Since\nthe input of `VectorMask.fromLong(SPECIES, l)` needs to be a specific\ncompile-time constant, the statement will be hoisted out of the loop.\nIf we don't use a loop, the hotspot will become other instructions, and\nno obvious performance change was observed. However, combined with the\noptimization of [1], we can observe a performance improvement of about\n7% on both aarch64 and x64.\n\nThe patch was tested on both aarch64 and x64, all of tier1 tier2 and\ntier3 tests passed.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/pull\/24674"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java"}],"sha":"38664b0639cd682ad14ea8eab61c0db7d4ed157e"}]