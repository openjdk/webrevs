{"files":[{"patch":"@@ -1520,1 +1520,0 @@\n-  int opc = is_mask ? Op_MaskAll : Op_Replicate;\n@@ -1525,1 +1524,1 @@\n-      Matcher::match_rule_supported_vector(opc, vlen, maskall_bt)) {\n+      Matcher::match_rule_supported_vector(Op_Replicate, vlen, maskall_bt)) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,3 @@\n-@Fork(jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(value = 1, jvmArgs = {\"--add-modules=jdk.incubator.vector\"})\n@@ -53,0 +55,9 @@\n+    VectorMask<Float> fmask64;\n+    VectorMask<Float> fmask128;\n+    VectorMask<Float> fmask256;\n+    VectorMask<Float> fmask512;\n+\n+    VectorMask<Double> dmask128;\n+    VectorMask<Double> dmask256;\n+    VectorMask<Double> dmask512;\n+\n@@ -83,0 +94,9 @@\n+\n+        fmask64 = VectorMask.fromArray(FloatVector.SPECIES_64, mask_arr, 0);\n+        fmask128 = VectorMask.fromArray(FloatVector.SPECIES_128, mask_arr, 0);\n+        fmask256 = VectorMask.fromArray(FloatVector.SPECIES_256, mask_arr, 0);\n+        fmask512 = VectorMask.fromArray(FloatVector.SPECIES_512, mask_arr, 0);\n+\n+        dmask128 = VectorMask.fromArray(DoubleVector.SPECIES_128, mask_arr, 0);\n+        dmask256 = VectorMask.fromArray(DoubleVector.SPECIES_256, mask_arr, 0);\n+        dmask512 = VectorMask.fromArray(DoubleVector.SPECIES_512, mask_arr, 0);\n@@ -224,0 +244,108 @@\n+\n+    \/\/ Benchmarks for optimization \"VectorMaskCast (VectorMaskCast x) => x\"\n+\n+    @Benchmark\n+    public int microMaskCastCastByte64() {\n+        return bmask64.cast(ShortVector.SPECIES_128).cast(ByteVector.SPECIES_64).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastByte128() {\n+        return bmask128.cast(ShortVector.SPECIES_256).cast(ByteVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastByte256() {\n+        return bmask256.cast(ShortVector.SPECIES_512).cast(ByteVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastShort64() {\n+        return smask64.cast(IntVector.SPECIES_128).cast(ShortVector.SPECIES_64).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastShort128() {\n+        return smask128.cast(ByteVector.SPECIES_64).cast(ShortVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastShort256() {\n+        return smask256.cast(IntVector.SPECIES_512).cast(ShortVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastShort512() {\n+        return smask512.cast(ByteVector.SPECIES_256).cast(ShortVector.SPECIES_512).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastInt64() {\n+        return imask64.cast(FloatVector.SPECIES_64).cast(IntVector.SPECIES_64).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastInt128() {\n+        return imask128.cast(ShortVector.SPECIES_64).cast(IntVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastInt256() {\n+        return imask256.cast(LongVector.SPECIES_512).cast(IntVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastInt512() {\n+        return imask512.cast(ShortVector.SPECIES_256).cast(IntVector.SPECIES_512).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastLong128() {\n+        return lmask128.cast(IntVector.SPECIES_64).cast(LongVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastLong256() {\n+        return lmask256.cast(DoubleVector.SPECIES_256).cast(LongVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastLong512() {\n+        return lmask512.cast(IntVector.SPECIES_256).cast(LongVector.SPECIES_512).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastFloat64() {\n+        return fmask64.cast(DoubleVector.SPECIES_128).cast(FloatVector.SPECIES_64).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastFloat128() {\n+        return fmask128.cast(DoubleVector.SPECIES_256).cast(FloatVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastFloat256() {\n+        return fmask256.cast(IntVector.SPECIES_256).cast(FloatVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastFloat512() {\n+        return fmask512.cast(ShortVector.SPECIES_256).cast(FloatVector.SPECIES_512).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastDouble128() {\n+        return dmask128.cast(FloatVector.SPECIES_64).cast(DoubleVector.SPECIES_128).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastDouble256() {\n+        return dmask256.cast(FloatVector.SPECIES_128).cast(DoubleVector.SPECIES_256).trueCount();\n+    }\n+\n+    @Benchmark\n+    public int microMaskCastCastDouble512() {\n+        return dmask512.cast(IntVector.SPECIES_256).cast(DoubleVector.SPECIES_512).trueCount();\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCastOperationsBenchmark.java","additions":130,"deletions":2,"binary":false,"changes":132,"status":"modified"}]}