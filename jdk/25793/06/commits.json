[{"commit":{"message":"Move the assertion to the beginning of the code block"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"8418ebdd2edbda2198593be25d6a7f55833695ea"},{"commit":{"message":"Add an assertion"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"4ffc8d910d40fddb3b6b6d5f48d5d1d7be31bad0"},{"commit":{"message":"Add JMH benchmarks for cast chain transformation"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCastOperationsBenchmark.java"}],"sha":"6ae43e17543a79312a805f0f8e7c5f1cb3fad26a"},{"commit":{"message":"Merge branch 'master' into JDK-8356760"},"files":[],"sha":"738c90e0fd548ce92a21d01cb81da919a19f292a"},{"commit":{"message":"Refactor the implementation\n\nDo the convertion in C2's IGVN phase to cover more cases."},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastIdentityTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskToLongTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongToLongBenchmark.java"}],"sha":"8ebe5e5669fc1596115338305c2b0d2131278c22"},{"commit":{"message":"Merge branch 'master' into JDK-8356760"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"3913aaa9124b4cf455cfa87e272d136580cbd053"},{"commit":{"message":"Simplify the test code"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskToLongTest.java"}],"sha":"9f07d5c7b837305ae7822f0b43cd42ec5b76c9f9"},{"commit":{"message":"Address some review comments\n\nAdd support for the following patterns:\n  toLong(maskAll(true))  => (-1ULL >> (64 -vlen))\n  toLong(maskAll(false)) => 0\n\nAnd add more test cases."},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskToLongTest.java"}],"sha":"791e0ab7bf90c6e8d92d322dfc8ea39e40780310"},{"commit":{"message":"Merge branch 'master' into JDK-8356760"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"830e65aaa3392ec3c2ee2c7bf6ab2f7e659f55c3"},{"commit":{"message":"8356760: VectorAPI: Optimize VectorMask.fromLong for all-true\/all-false cases\n\nIf the input long value `l` of `VectorMask.fromLong(SPECIES, l)` would\nset or unset all lanes, `VectorMask.fromLong(SPECIES, l)` is equivalent\nto `maskAll(true)` or `maskAll(false)`. But the cost of `maskAll` is\nrelative smaller than that of `fromLong`. This patch does the conversion\nfor these cases if `l` is a compile time constant.\n\nAnd this conversion also enables further optimizations that recognize\nmaskAll patterns, see [1].\n\nSome JTReg test cases are added to ensure the optimization is effective.\n\nI tried many different ways to write a JMH benchmark, but failed. Since\nthe input of `VectorMask.fromLong(SPECIES, l)` needs to be a specific\ncompile-time constant, the statement will be hoisted out of the loop.\nIf we don't use a loop, the hotspot will become other instructions, and\nno obvious performance change was observed. However, combined with the\noptimization of [1], we can observe a performance improvement of about\n7% on both aarch64 and x64.\n\nThe patch was tested on both aarch64 and x64, all of tier1 tier2 and\ntier3 tests passed.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/pull\/24674"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskFromLongTest.java"}],"sha":"38664b0639cd682ad14ea8eab61c0db7d4ed157e"}]