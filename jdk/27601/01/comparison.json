{"files":[{"patch":"@@ -117,1 +117,1 @@\n-<li><a href=\"#excluded-features\" id=\"toc-excluded-features\">Excluded\n+<li><a href=\"#forbidden-features\" id=\"toc-forbidden-features\">Forbidden\n@@ -126,2 +126,2 @@\n-<li><a href=\"#additional-excluded-features\"\n-id=\"toc-additional-excluded-features\">Additional Excluded\n+<li><a href=\"#additional-forbidden-features\"\n+id=\"toc-additional-forbidden-features\">Additional Forbidden\n@@ -509,1 +509,1 @@\n-language may be used unless explicitly excluded here. Features from\n+language may be used unless explicitly forbidden here. Features from\n@@ -511,1 +511,1 @@\n-excluded, and discussed accordingly here. There is a third category,\n+forbidden, and discussed accordingly here. There is a third category,\n@@ -514,1 +514,1 @@\n-is also excluded.<\/p>\n+is also forbidden.<\/p>\n@@ -521,1 +521,1 @@\n-sections for permitted, excluded, and undecided features.<\/p>\n+sections for permitted, forbidden, and undecided features.<\/p>\n@@ -597,2 +597,3 @@\n-(operator new and related functions). Use of these functions by HotSpot\n-code is disabled for some platforms.<\/p>\n+(global <code>operator new<\/code> and related functions), other than the\n+non-allocating forms of those functions. Use of these functions by\n+HotSpot code is disabled for some platforms.<\/p>\n@@ -601,4 +602,4 @@\n-in favor of wrappers around malloc and free that support the VM's Native\n-Memory Tracking (NMT) feature. Typically, uses of the global operator\n-new are inadvertent and therefore often associated with memory\n-leaks.<\/p>\n+in favor of wrappers around <code>malloc<\/code> and <code>free<\/code>\n+that support the JVM's Native Memory Tracking (NMT) feature. Typically,\n+uses of the global <code>operator new<\/code> are inadvertent and\n+therefore often associated with memory leaks.<\/p>\n@@ -651,1 +652,33 @@\n-<p>Avoid using the C++ Standard Library.<\/p>\n+<p>Only curated parts of the C++ Standard Library may be used by HotSpot\n+code.<\/p>\n+<p>Functions that may throw exceptions must not be used. This is in\n+accordance with the HotSpot policy of <a href=\"#error-handling\">not\n+using exceptions<\/a>.<\/p>\n+<p>Also in accordance with HotSpot policy, the <a\n+href=\"#memory-allocation\">standard global allocator must not be\n+used<\/a>. This means that uses of standard container classes cannot\n+presently be used, as doing so requires specialization on some allocator\n+type that is integrated with the existing HotSpot allocation mechanisms.\n+(Such allocators may be provided in the future.)<\/p>\n+<p>Standard Library identifiers should usually be fully qualified;\n+<code>using<\/code> directives must not be used to bring Standard Library\n+identifiers into scope just to remove the need for namespace\n+qualification. Requiring qualification makes it easy to distinguish\n+between references to external libraries and code that is part of\n+HotSpot.<\/p>\n+<p>As with language features, Standard Library facilities are either\n+permitted, explicitly forbidden, or undecided (and so implicitly\n+forbidden).<\/p>\n+<p>Most HotSpot code should not directly <code>#include<\/code> C++\n+Standard Library headers. HotSpot provides a set of wrapper headers for\n+the Standard Library headers containing permitted definitions. These\n+wrappers are in the <code>cppstdlib<\/code> directory, with the same name\n+as the corresponding Standard Library header and a <code>.hpp<\/code>\n+extension. These wrappers provide a place for any additional code (some\n+of which may be platform-specific) needed to support HotSpot usage.<\/p>\n+<p>These wrappers also provide a place to document HotSpot usage,\n+including any restrictions. The set of wrappers and the usage\n+documentation should be considered part of HotSpot style. Any changes\n+are subject to the same process as applies to this document. (For\n+historical reasons, there may be many direct inclusions of some C++\n+Standard Library headers.)<\/p>\n@@ -664,1 +697,3 @@\n-use exceptions.<\/p><\/li>\n+use exceptions. On the other hand, many don't, and can be used without\n+concern for this issue. Others may have a useful subset that doesn't use\n+exceptions.<\/p><\/li>\n@@ -668,3 +703,7 @@\n-Some mechanism for addressing this would be needed before much of the\n-Standard Library could be used. (Not all Standard Library\n-implementations use assert in header files, but some do.)<\/p><\/li>\n+(Not all Standard Library implementations use <code>assert<\/code> in\n+header files, but some do.) HotSpot provides a mechanism for addressing\n+this, by establishing a scope around the include of a library header\n+where the HotSpot <code>assert<\/code> macro is suppressed. One of the\n+reasons for using wrapper headers rather than directly including\n+standard headers is to provide a central place to deal with this issue\n+for each header.<\/p><\/li>\n@@ -673,2 +712,5 @@\n-limited to support our usage. (Changes in more recent Standards may\n-remove this limitation.)<\/p><\/li>\n+limited to support our usage. But changes to the allocator concept in\n+more recent Standards removed some of the limitations, supporting\n+stateful allocators. HotSpot may, in the future, provide\n+standard-conforming allocators that are integrated with HotSpot's\n+existing allocation mechanisms.<\/p><\/li>\n@@ -677,1 +719,4 @@\n-Libraries we need to deal with.<\/p><\/li>\n+Libraries we need to deal with. But only selected parts of the Standard\n+Library are being permitted, and one of the selection criteria is\n+maturity. Some of these facilities are among the most heavily tested and\n+used C++ codes that exist.<\/p><\/li>\n@@ -680,15 +725,7 @@\n-conventions might appear jarring and reduce readability.<\/p><\/li>\n-<\/ul>\n-<p>There are a few exceptions to this rule.<\/p>\n-<ul>\n-<li><code>#include &lt;new&gt;<\/code> to use placement <code>new<\/code>,\n-<code>std::nothrow<\/code>, and <code>std::nothrow_t<\/code>.<\/li>\n-<li><code>#include &lt;limits&gt;<\/code> to use\n-<code>std::numeric_limits<\/code>.<\/li>\n-<li><code>#include &lt;type_traits&gt;<\/code> with some restrictions,\n-listed below.<\/li>\n-<li><code>#include &lt;cstddef&gt;<\/code> to use\n-<code>std::nullptr_t<\/code> and <code>std::max_align_t<\/code>.<\/li>\n-<\/ul>\n-<p>Certain restrictions apply to the declarations provided by\n-<code>&lt;type_traits&gt;<\/code>.<\/p>\n+conventions might appear jarring and reduce readability. However,\n+experience in some other code bases suggests this isn't a significant\n+problem, so long as Standard Library names are namespace-qualified. It\n+is tempting to bring the Standard Library names into scope via a\n+<code>using std;<\/code> directive. Doing so makes writing code using\n+those names easier, since the qualifiers don't need to be included. But\n+there are several reasons not to do that.<\/p>\n@@ -696,2 +733,17 @@\n-<li>The <code>alignof<\/code> operator should be used rather than\n-<code>std::alignment_of&lt;&gt;<\/code>.<\/li>\n+<li><p>There is a risk of future name collisions. Additional Standard\n+Library headers may be included, adding to the list of names being used.\n+Also, future versions of the Standard Library may add currently unknown\n+names to the headers already being included.<\/p><\/li>\n+<li><p>It may harm readability. Code where this is relevant is a mixture\n+of the local HotSpot naming conventions and the Standard Library's (or\n+other 3rd-party library's) naming conventions. With only unqualified\n+names, any distinctions from the naming conventions for the different\n+code sources are lost. Instead one may end up with an undifferentiated\n+mess, where it's not obvious whether an identifier is from local code\n+that is inconsistent with HotSpot style (and there's a regretable amount\n+of that for historical reasons), or is following some other convention.\n+Having the qualifiers disambiguates that.<\/p><\/li>\n+<li><p>It can be helpful to know, at a glance, whether the definition is\n+in HotSpot or elsewhere, for purposes of looking up the definition or\n+documentation.<\/p><\/li>\n+<\/ul><\/li>\n@@ -699,5 +751,0 @@\n-<p>TODO: Rather than directly #including (permitted) Standard Library\n-headers, use a convention of #including wrapper headers (in some\n-location like hotspot\/shared\/stdcpp). This provides a single place for\n-dealing with issues we might have for any given header, esp.\n-platform-specific issues.<\/p>\n@@ -1580,1 +1627,1 @@\n-artificially disallow this syntactic regularization in any such\n+artificially forbid this syntactic regularization in any such\n@@ -1583,1 +1630,1 @@\n-<h2 id=\"excluded-features\">Excluded Features<\/h2>\n+<h2 id=\"forbidden-features\">Forbidden Features<\/h2>\n@@ -1625,1 +1672,2 @@\n-<h3 id=\"additional-excluded-features\">Additional Excluded Features<\/h3>\n+<h3 id=\"additional-forbidden-features\">Additional Forbidden\n+Features<\/h3>\n@@ -1627,0 +1675,24 @@\n+<li><p><code>&lt;algorithm&gt;<\/code>, <code>&lt;iterator&gt;<\/code>,\n+<code>&lt;numeric&gt;<\/code><br> Not useful without standard containers\n+or similar classes in HotSpot.<\/p><\/li>\n+<li><p><code>&lt;bitset&gt;<\/code> - Overlap with HotSpot\n+<code>BitMap<\/code>.<\/p><\/li>\n+<li><p><code>&lt;cassert&gt;<\/code>, <code>assert.h<\/code> - HotSpot has\n+its own <code>assert<\/code> macro.<\/p><\/li>\n+<li><p><code>&lt;exception&gt;<\/code>, <code>&lt;stdexcept&gt;<\/code> -\n+Use of <a href=\"#error-handling\">exceptions<\/a> is not\n+permitted.<\/p><\/li>\n+<li><p>Thread support - <code>&lt;thread&gt;<\/code>,\n+<code>&lt;mutex&gt;<\/code>, <code>&lt;shared_mutex&gt;<\/code>,\n+<code>&lt;condition_varible&gt;<\/code>, <code>&lt;future&gt;<\/code><br>\n+HotSpot has its own threading support.<\/p><\/li>\n+<li><p>Streams - HotSpot doesn't use the C++ I\/O library.<\/p><\/li>\n+<li><p><code>&lt;scoped_allocator&gt;<\/code> - Not useful without\n+specialized allocators.<\/p><\/li>\n+<li><p><code>&lt;string&gt;<\/code> - Requires allocator support, similar\n+to standard containers.<\/p><\/li>\n+<li><p><code>&lt;typeinfo&gt;<\/code>, <code>&lt;typeindex&gt;<\/code><br>\n+Use of <a href=\"#runtime-type-information\">runtime type information<\/a>\n+is not permitted.<\/p><\/li>\n+<li><p><code>&lt;valarray&gt;<\/code> - May allocate, but is not\n+allocator-aware.<\/p><\/li>\n@@ -1884,0 +1956,5 @@\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/tuple.html\"><code>&lt;tuple&gt;<\/code><\/a>\n+— Prefer named access to class objects, rather than indexed access to\n+anonymous heterogeneous sequences. In particular, a standard-layout\n+class is preferred to a tuple.<\/p><\/li>\n@@ -1886,0 +1963,30 @@\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/chrono.html\"><code>&lt;chrono&gt;<\/code><\/a>\n+— The argument for chrono is that our existing APIs aren't serving us\n+well. chrono provides strong type safety. We've had multiple cases of\n+mistakes like a double seconds being treated as double milliseconds or\n+vice versa, and other similar errors. But it would be a large effort to\n+adopt chrono. We'd also need to decide whether to use the predefined\n+clocks or hook up chrono to our clocks. It may be that using the\n+predefined clocks is fine, but it's a question that needs careful\n+study.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/initializer_list.html\"><code>&lt;initializer_list&gt;<\/code><\/a>\n+— The potential ambiguity between some forms of direct initialization\n+and initializer list initialization, and the resolution of that\n+ambiguity, is unfortunate.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/ratio.html\"><code>&lt;ratio&gt;<\/code><\/a>\n+— <code>&lt;ratio&gt;<\/code> is a <em>compile-time<\/em> rational\n+arithmetic package. It's also fixed (though parameterized) precision.\n+It's not a general purpose rational arithmetic facility. It appears to\n+have started out as an implementation detail of chrono, and was\n+extracted and promoted to a public facility in the belief that it has\n+broader utility.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/system_error.html\"><code>&lt;system_error&gt;<\/code><\/a>\n+— We don't really have a generally agreed upon mechanism for managing\n+errors. Instead, we have a plethora of bespoke ad hoc mechanisms.\n+Managing errors is a topic of substantial discussion.\n+<code>&lt;system_error&gt;<\/code> might end up being a part of a result\n+from that discussion.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":153,"deletions":46,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -416,2 +416,2 @@\n-language may be used unless explicitly excluded here.  Features from\n-C++11, C++14, and C++17 may be explicitly permitted or explicitly excluded,\n+language may be used unless explicitly forbidden here.  Features from\n+C++11, C++14, and C++17 may be explicitly permitted or explicitly forbidden,\n@@ -421,1 +421,1 @@\n-features is also excluded.\n+features is also forbidden.\n@@ -430,1 +430,1 @@\n-for permitted, excluded, and undecided features.\n+for permitted, forbidden, and undecided features.\n@@ -497,3 +497,4 @@\n-Do not use the standard global allocation and deallocation functions\n-(operator new and related functions).  Use of these functions by HotSpot\n-code is disabled for some platforms.\n+Do not use the standard global allocation and deallocation functions (global\n+`operator new` and related functions), other than the non-allocating forms of\n+those functions.  Use of these functions by HotSpot code is disabled for some\n+platforms.\n@@ -503,3 +504,3 @@\n-avoided in favor of wrappers around malloc and free that support the\n-VM's Native Memory Tracking (NMT) feature.  Typically, uses of the global\n-operator new are inadvertent and therefore often associated with memory\n+avoided in favor of wrappers around `malloc` and `free` that support the\n+JVM's Native Memory Tracking (NMT) feature.  Typically, uses of the global\n+`operator new` are inadvertent and therefore often associated with memory\n@@ -563,1 +564,33 @@\n-Avoid using the C++ Standard Library.\n+Only curated parts of the C++ Standard Library may be used by HotSpot code.\n+\n+Functions that may throw exceptions must not be used.  This is in accordance\n+with the HotSpot policy of [not using exceptions](#error-handling).\n+\n+Also in accordance with HotSpot policy, the\n+[standard global allocator must not be used](#memory-allocation).  This means\n+that uses of standard container classes cannot presently be used, as doing so\n+requires specialization on some allocator type that is integrated with the\n+existing HotSpot allocation mechanisms. (Such allocators may be provided in\n+the future.)\n+\n+Standard Library identifiers should usually be fully qualified; `using`\n+directives must not be used to bring Standard Library identifiers into scope\n+just to remove the need for namespace qualification.  Requiring qualification\n+makes it easy to distinguish between references to external libraries and code\n+that is part of HotSpot.\n+\n+As with language features, Standard Library facilities are either permitted,\n+explicitly forbidden, or undecided (and so implicitly forbidden).\n+\n+Most HotSpot code should not directly `#include` C++ Standard Library headers.\n+HotSpot provides a set of wrapper headers for the Standard Library headers\n+containing permitted definitions.  These wrappers are in the `cppstdlib`\n+directory, with the same name as the corresponding Standard Library header and\n+a `.hpp` extension.  These wrappers provide a place for any additional code\n+(some of which may be platform-specific) needed to support HotSpot usage.\n+\n+These wrappers also provide a place to document HotSpot usage, including any\n+restrictions.  The set of wrappers and the usage documentation should be\n+considered part of HotSpot style.  Any changes are subject to the same process\n+as applies to this document. (For historical reasons, there may be many direct\n+inclusions of some C++ Standard Library headers.)\n@@ -580,0 +613,2 @@\n+use exceptions. On the other hand, many don't, and can be used without\n+concern for this issue. Others may have a useful subset that doesn't\n@@ -584,8 +619,13 @@\n-Some mechanism for addressing this would be needed before much of the\n-Standard Library could be used.  (Not all Standard Library implementations\n-use assert in header files, but some do.)\n-\n-* Memory allocation. HotSpot requires explicit control over where\n-allocations occur. The C++98\/03 `std::allocator` class is too limited\n-to support our usage.  (Changes in more recent Standards may remove\n-this limitation.)\n+(Not all Standard Library implementations use `assert` in header files, but\n+some  do.) HotSpot provides a mechanism for addressing this, by establishing a\n+scope around the include of a library header where the HotSpot `assert` macro\n+is suppressed.  One of the reasons for using wrapper headers rather than\n+directly including standard headers is to provide a central place to deal with\n+this issue for each header.\n+\n+* Memory allocation. HotSpot requires explicit control over where allocations\n+occur. The C++98\/03 `std::allocator` class is too limited to support our\n+usage. But changes to the allocator concept in more recent Standards removed\n+some of the limitations, supporting stateful allocators. HotSpot may, in the\n+future, provide standard-conforming allocators that are integrated with\n+HotSpot's existing allocation mechanisms.\n@@ -595,22 +635,31 @@\n-to deal with.\n-\n-* Inconsistent naming conventions. HotSpot and the C++ Standard use\n-different naming conventions. The coexistence of those different conventions\n-might appear jarring and reduce readability.\n-\n-There are a few exceptions to this rule.\n-\n-* `#include <new>` to use placement `new`, `std::nothrow`, and `std::nothrow_t`.\n-* `#include <limits>` to use `std::numeric_limits`.\n-* `#include <type_traits>` with some restrictions, listed below.\n-* `#include <cstddef>` to use `std::nullptr_t` and `std::max_align_t`.\n-\n-Certain restrictions apply to the declarations provided by `<type_traits>`.\n-\n-* The `alignof` operator should be used rather than `std::alignment_of<>`.\n-\n-TODO: Rather than directly \\#including (permitted) Standard Library\n-headers, use a convention of \\#including wrapper headers (in some\n-location like hotspot\/shared\/stdcpp).  This provides a single place\n-for dealing with issues we might have for any given header, esp.\n-platform-specific issues.\n+to deal with. But only selected parts of the Standard Library are being\n+permitted, and one of the selection criteria is maturity. Some of these\n+facilities are among the most heavily tested and used C++ codes that exist.\n+\n+* Inconsistent naming conventions. HotSpot and the C++ Standard use different\n+naming conventions. The coexistence of those different conventions might\n+appear jarring and reduce readability. However, experience in some other code\n+bases suggests this isn't a significant problem, so long as Standard Library\n+names are namespace-qualified. It is tempting to bring the Standard Library\n+names into scope via a `using std;` directive. Doing so makes writing code\n+using those names easier, since the qualifiers don't need to be included. But\n+there are several reasons not to do that.\n+\n+    * There is a risk of future name collisions. Additional Standard Library\n+    headers may be included, adding to the list of names being used. Also,\n+    future versions of the Standard Library may add currently unknown names to\n+    the headers already being included.\n+\n+    * It may harm readability. Code where this is relevant is a mixture of the\n+    local HotSpot naming conventions and the Standard Library's (or other\n+    3rd-party library's) naming conventions. With only unqualified names, any\n+    distinctions from the naming conventions for the different code sources\n+    are lost. Instead one may end up with an undifferentiated mess, where it's\n+    not obvious whether an identifier is from local code that is inconsistent\n+    with HotSpot style (and there's a regretable amount of that for historical\n+    reasons), or is following some other convention. Having the qualifiers\n+    disambiguates that.\n+\n+    * It can be helpful to know, at a glance, whether the definition is in\n+    HotSpot or elsewhere, for purposes of looking up the definition or\n+    documentation.\n@@ -1532,1 +1581,1 @@\n-disallow this syntactic regularization in any such uses.\n+forbid this syntactic regularization in any such uses.\n@@ -1534,1 +1583,1 @@\n-## Excluded Features\n+## Forbidden Features\n@@ -1584,1 +1633,26 @@\n-### Additional Excluded Features\n+### Additional Forbidden Features\n+\n+* `<algorithm>`, `<iterator>`, `<numeric>`<br>\n+Not useful without standard containers or similar classes in HotSpot.\n+\n+* `<bitset>` - Overlap with HotSpot `BitMap`.\n+\n+* `<cassert>`, `assert.h` - HotSpot has its own `assert` macro.\n+\n+* `<exception>`, `<stdexcept>` - Use of [exceptions](#error-handling) is not\n+permitted.\n+\n+* Thread support - `<thread>`, `<mutex>`, `<shared_mutex>`,\n+`<condition_varible>`, `<future>`<br>\n+HotSpot has its own threading support.\n+\n+* Streams - HotSpot doesn't use the C++ I\/O library.\n+\n+* `<scoped_allocator>` - Not useful without specialized allocators.\n+\n+* `<string>` - Requires allocator support, similar to standard containers.\n+\n+* `<typeinfo>`, `<typeindex>`<br>\n+Use of [runtime type information](#runtime-type-information) is not permitted.\n+\n+* `<valarray>` - May allocate, but is not allocator-aware.\n@@ -1883,0 +1957,5 @@\n+* [`<tuple>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/tuple.html) &mdash;\n+Prefer named access to class objects, rather than indexed access\n+to anonymous heterogeneous sequences.  In particular, a standard-layout\n+class is preferred to a tuple.\n+\n@@ -1886,0 +1965,26 @@\n+* [`<chrono>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/chrono.html) &mdash;\n+The argument for chrono is that our existing APIs aren't serving us well.\n+chrono provides strong type safety. We've had multiple cases of mistakes like\n+a double seconds being treated as double milliseconds or vice versa, and other\n+similar errors. But it would be a large effort to adopt chrono. We'd also need\n+to decide whether to use the predefined clocks or hook up chrono to our\n+clocks. It may be that using the predefined clocks is fine, but it's a\n+question that needs careful study.\n+\n+* [`<initializer_list>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/initializer_list.html) &mdash;\n+The potential ambiguity between some forms of direct initialization and\n+initializer list initialization, and the resolution of that ambiguity, is\n+unfortunate.\n+\n+* [`<ratio>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/ratio.html) &mdash;\n+`<ratio>` is a *compile-time* rational arithmetic package. It's also fixed\n+(though parameterized) precision. It's not a general purpose rational\n+arithmetic facility. It appears to have started out as an implementation\n+detail of chrono, and was extracted and promoted to a public facility in the\n+belief that it has broader utility.\n+\n+* [`<system_error>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/system_error.html) &mdash;\n+We don't really have a generally agreed upon mechanism for managing\n+errors. Instead, we have a plethora of bespoke ad hoc mechanisms. Managing\n+errors is a topic of substantial discussion. `<system_error>` might end up\n+being a part of a result from that discussion.\n","filename":"doc\/hotspot-style.md","additions":149,"deletions":44,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -35,1 +36,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -37,1 +38,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -56,2 +57,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -40,1 +41,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CPPSTDLIB_CSTDDEF_HPP\n+#define SHARE_CPPSTDLIB_CSTDDEF_HPP\n+\n+#include \"utilities\/compilerWarnings.hpp\"\n+\n+\/\/ HotSpot usage for <cstddef>:\n+\/\/ permitted:\n+\/\/ * std::max_align_t, std::nullptr_t\n+\/\/ * size_t (preferred) and std::size_t\n+\/\/ * ptrdiff_t (preferred) and std::ptrdiff_t\n+\/\/ * offsetof\n+\/\/\n+\/\/ forbidden:\n+\/\/ * <upcase>null<\/> macro - use nullptr instead.\n+\/\/ * std::byte\n+\n+BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n+#include \"utilities\/vmassert_uninstall.hpp\"\n+\n+#include <cstddef>\n+\n+#include \"utilities\/vmassert_reinstall.hpp\" \/\/ don't reorder\n+END_ALLOW_FORBIDDEN_FUNCTIONS\n+\n+#endif \/\/ SHARE_CPPSTDLIB_CSTDDEF_HPP\n","filename":"src\/hotspot\/share\/cppstdlib\/cstddef.hpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CPPSTDLIB_LIMITS_HPP\n+#define SHARE_CPPSTDLIB_LIMITS_HPP\n+\n+#include \"utilities\/compilerWarnings.hpp\"\n+\n+\/\/ HotSpot usage for <limits>:\n+\/\/ No restrictions on the facilities in this header.\n+\n+BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n+#include \"utilities\/vmassert_uninstall.hpp\"\n+\n+#include <limits>\n+\n+#include \"utilities\/vmassert_reinstall.hpp\" \/\/ don't reorder\n+END_ALLOW_FORBIDDEN_FUNCTIONS\n+\n+#endif \/\/ SHARE_CPPSTDLIB_LIMITS_HPP\n","filename":"src\/hotspot\/share\/cppstdlib\/limits.hpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CPPSTDLIB_TYPE_TRAITS_HPP\n+#define SHARE_CPPSTDLIB_TYPE_TRAITS_HPP\n+\n+#include \"utilities\/compilerWarnings.hpp\"\n+\n+\/\/ HotSpot usage for <type_traits>:\n+\/\/ * Use the `alignof` operator instead of `std::alignment_of<>`.\n+\/\/ * Do not use `std::aligned_storage<>` or `std::aligned_union<>`. These are\n+\/\/   deprecated in C++23, with the rationale that the `alignas` operator\n+\/\/   provides a better mechanism for accomplishing the same task.\n+\/\/\n+\/\/ Other than the above, no restrictions on the facilities in this header.\n+\n+BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n+#include \"utilities\/vmassert_uninstall.hpp\"\n+\n+#include <type_traits>\n+\n+#include \"utilities\/vmassert_reinstall.hpp\" \/\/ don't reorder\n+END_ALLOW_FORBIDDEN_FUNCTIONS\n+\n+#endif \/\/ SHARE_CPPSTDLIB_TYPE_TRAITS_HPP\n","filename":"src\/hotspot\/share\/cppstdlib\/type_traits.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -34,2 +35,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/bufferNode.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -38,2 +39,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageParState.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageParState.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -34,2 +35,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/workerUtils.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/cstddef.hpp\"\n@@ -30,2 +31,0 @@\n-#include <cstddef>\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -41,2 +42,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n+\n@@ -31,1 +33,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/gc\/z\/zDeferredConstructed.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -35,2 +36,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingEntry.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"cppstdlib\/cstddef.hpp\"\n@@ -30,2 +31,0 @@\n-#include <cstddef>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAge.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -35,2 +36,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zPageTable.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -29,2 +30,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zSafeDelete.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zSafeDelete.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -49,2 +50,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -34,2 +35,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/counters.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -38,2 +39,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include <type_traits>\n+#include \"cppstdlib\/type_traits.hpp\"\n","filename":"src\/hotspot\/share\/metaprogramming\/enableIf.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -32,2 +33,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/metaprogramming\/primitiveConversions.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -30,2 +31,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/nmt\/arrayWithFreeList.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -32,2 +33,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -37,2 +38,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -37,2 +38,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/accessBackend.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -32,2 +33,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/accessDecorators.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/compressedOops.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -30,2 +31,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/instanceOop.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -39,2 +40,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/oopHandle.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,2 +32,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -30,2 +31,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/opto\/rangeinference.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -77,2 +78,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -37,2 +38,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/runtime\/atomicAccess.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -77,2 +78,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -46,2 +47,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -30,2 +31,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntimeTrans.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -35,3 +36,0 @@\n-#include <type_traits>\n-\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -34,2 +35,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"cppstdlib\/cstddef.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -32,1 +34,0 @@\n-#include <cstddef>\n@@ -34,1 +35,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/utilities\/byteswap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -40,2 +41,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -31,1 +32,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/utilities\/deferredStatic.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -34,2 +35,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/devirtualizer.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"cppstdlib\/limits.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,3 +35,0 @@\n-#include <limits>\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/enumIterator.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#include \"cppstdlib\/cstddef.hpp\"\n+#include \"cppstdlib\/limits.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -36,1 +39,0 @@\n-#include <cstddef>\n@@ -38,2 +40,0 @@\n-#include <limits>\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/hashTable.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -30,2 +31,0 @@\n-#include <limits>\n-\n","filename":"src\/hotspot\/share\/utilities\/intn_t.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"cppstdlib\/limits.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -30,3 +32,0 @@\n-#include <limits>\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/intpow.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"cppstdlib\/limits.hpp\"\n@@ -35,1 +36,0 @@\n-#include <limits>\n","filename":"src\/hotspot\/share\/utilities\/parseInteger.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/population_count.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+#include \"cppstdlib\/limits.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -34,3 +36,0 @@\n-#include <limits>\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,2 +34,0 @@\n-#include <type_traits>\n-\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+#include \"cppstdlib\/cstddef.hpp\"\n+#include \"cppstdlib\/type_traits.hpp\"\n@@ -33,1 +35,0 @@\n-#include <cstddef>\n@@ -35,1 +36,0 @@\n-#include <type_traits>\n","filename":"src\/hotspot\/share\/utilities\/reverse_bits.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include <type_traits>\n+#include \"cppstdlib\/type_traits.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/tuple.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}