{"files":[{"patch":"@@ -714,1 +714,1 @@\n-statefull allocators. HotSpot may, in the future, provide\n+stateful allocators. HotSpot may, in the future, provide\n@@ -731,1 +731,1 @@\n-there are reasons not to do that.<\/p>\n+there are several reasons not to do that.<\/p>\n@@ -1694,4 +1694,0 @@\n-<li><p><code>&lt;tuple&gt;<\/code> - Prefer named access to class\n-objects, rather than indexed access to anonymous heterogeneous\n-sequences. In particular, a standard-layout class is preferred to a\n-tuple.<\/p><\/li>\n@@ -1960,0 +1956,5 @@\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/tuple.html\"><code>&lt;tuple&gt;<\/code><\/a>\n+— Prefer named access to class objects, rather than indexed access to\n+anonymous heterogeneous sequences. In particular, a standard-layout\n+class is preferred to a tuple.<\/p><\/li>\n@@ -1962,4 +1963,30 @@\n-<li><p><code>&lt;chrono&gt;<\/code><\/p><\/li>\n-<li><p><code>&lt;initializer_list&gt;<\/code><\/p><\/li>\n-<li><p><code>&lt;ratio&gt;<\/code><\/p><\/li>\n-<li><p><code>&lt;system_error&gt;<\/code><\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/chrono.html\"><code>&lt;chrono&gt;<\/code><\/a>\n+— The argument for chrono is that our existing APIs aren't serving us\n+well. chrono provides strong type safety. We've had multiple cases of\n+mistakes like a double seconds being treated as double milliseconds or\n+vice versa, and other similar errors. But it would be a large effort to\n+adopt chrono. We'd also need to decide whether to use the predefined\n+clocks or hook up chrono to our clocks. It may be that using the\n+predefined clocks is fine, but it's a question that needs careful\n+study.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/initializer_list.html\"><code>&lt;initializer_list&gt;<\/code><\/a>\n+— The potential ambiguity between some forms of direct initialization\n+and initializer list initialization, and the resolution of that\n+ambiguity, is unfortunate.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/ratio.html\"><code>&lt;ratio&gt;<\/code><\/a>\n+— <code>&lt;ratio&gt;<\/code> is a <em>compile-time<\/em> rational\n+arithmetic package. It's also fixed (though parameterized) precision.\n+It's not a general purpose rational arithmetic facility. It appears to\n+have started out as an implementation detail of chrono, and was\n+extracted and promoted to a public facility in the belief that it has\n+broader utility.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/header\/system_error.html\"><code>&lt;system_error&gt;<\/code><\/a>\n+— We don't really have a generally agreed upon mechanism for managing\n+errors. Instead, we have a plethora of bespoke ad hoc mechanisms.\n+Managing errors is a topic of substantial discussion.\n+<code>&lt;system_error&gt;<\/code> might end up being a part of a result\n+from that discussion.<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":37,"deletions":10,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -629,1 +629,1 @@\n-some of the limitations, supporting statefull allocators. HotSpot may, in the\n+some of the limitations, supporting stateful allocators. HotSpot may, in the\n@@ -646,1 +646,1 @@\n-there are reasons not to do that.\n+there are several reasons not to do that.\n@@ -1655,4 +1655,0 @@\n-* `<tuple>` - Prefer named access to class objects, rather than indexed access\n-to anonymous heterogeneous sequences.  In particular, a standard-layout\n-class is preferred to a tuple.\n-\n@@ -1961,0 +1957,5 @@\n+* [`<tuple>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/tuple.html) &mdash;\n+Prefer named access to class objects, rather than indexed access\n+to anonymous heterogeneous sequences.  In particular, a standard-layout\n+class is preferred to a tuple.\n+\n@@ -1964,7 +1965,26 @@\n-* `<chrono>`\n-\n-* `<initializer_list>`\n-\n-* `<ratio>`\n-\n-* `<system_error>`\n+* [`<chrono>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/chrono.html) &mdash;\n+The argument for chrono is that our existing APIs aren't serving us well.\n+chrono provides strong type safety. We've had multiple cases of mistakes like\n+a double seconds being treated as double milliseconds or vice versa, and other\n+similar errors. But it would be a large effort to adopt chrono. We'd also need\n+to decide whether to use the predefined clocks or hook up chrono to our\n+clocks. It may be that using the predefined clocks is fine, but it's a\n+question that needs careful study.\n+\n+* [`<initializer_list>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/initializer_list.html) &mdash;\n+The potential ambiguity between some forms of direct initialization and\n+initializer list initialization, and the resolution of that ambiguity, is\n+unfortunate.\n+\n+* [`<ratio>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/ratio.html) &mdash;\n+`<ratio>` is a *compile-time* rational arithmetic package. It's also fixed\n+(though parameterized) precision. It's not a general purpose rational\n+arithmetic facility. It appears to have started out as an implementation\n+detail of chrono, and was extracted and promoted to a public facility in the\n+belief that it has broader utility.\n+\n+* [`<system_error>`](https:\/\/en.cppreference.com\/w\/cpp\/header\/system_error.html) &mdash;\n+We don't really have a generally agreed upon mechanism for managing\n+errors. Instead, we have a plethora of bespoke ad hoc mechanisms. Managing\n+errors is a topic of substantial discussion. `<system_error>` might end up\n+being a part of a result from that discussion.\n","filename":"doc\/hotspot-style.md","additions":33,"deletions":13,"binary":false,"changes":46,"status":"modified"}]}