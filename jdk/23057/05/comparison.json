{"files":[{"patch":"@@ -4168,13 +4168,14 @@\n-\/\/          entry  0\n-\/\/                 |\n-\/\/                 v\n-\/\/ outer 1,2    +->1\n-\/\/              |  |\n-\/\/              |  v\n-\/\/              |  2<---+  ncsfpt in 2\n-\/\/              |_\/|\\   |\n-\/\/                 | v  |\n-\/\/ inner 2,3      \/  3  |  call in 3\n-\/\/               \/   |  |\n-\/\/              v    +--+\n-\/\/        exit  4\n+\/\/             entry  0\n+\/\/                    |\n+\/\/                    v\n+\/\/   outer 1,2,4  +-> 1\n+\/\/                |    \\\n+\/\/                |     v\n+\/\/    inner 2,3   |     2 <---+  ncsfpt in 2\n+\/\/                |    \/ \\    |\n+\/\/                |   v   v   |\n+\/\/                |  4     3  |  call in 3\n+\/\/                |_\/ \\     \\_|\n+\/\/                     |\n+\/\/                     v\n+\/\/               exit  5\n@@ -4182,0 +4183,3 @@\n+\/\/ This method maintains a list (_required_safept) of ncsfpts that must\n+\/\/ be protected for each loop. It only marks ncsfpts for prevervation,\n+\/\/ and does not actually delete any of them.\n@@ -4183,3 +4187,3 @@\n-\/\/ This method creates a list (_required_safept) of ncsfpt nodes that must\n-\/\/ be protected is created for each loop. When a ncsfpt maybe deleted, it\n-\/\/ is first looked for in the lists for the outer loops of the current loop.\n+\/\/ If some other method needs to delete a ncsfpt later, it will make sure\n+\/\/ the ncsfpt is not in the list of all outer loops of the current loop.\n+\/\/ See `PhaseIdealLoop::is_deleteable_safept`.\n@@ -4188,9 +4192,14 @@\n-\/\/  A) counted loops are okay\n-\/\/  B) innermost loops are okay (only an inner loop can delete\n-\/\/     a ncsfpt needed by an outer loop)\n-\/\/  C) a loop is immune from an inner loop deleting a safepoint\n-\/\/     if the loop has a call on the idom-path\n-\/\/  D) a loop is also immune if it has a ncsfpt (non-call safepoint) on the\n-\/\/     idom-path that is not in a nested loop\n-\/\/  E) otherwise, an ncsfpt on the idom-path that is nested in an inner\n-\/\/     loop needs to be prevented from deletion by an inner loop\n+\/\/  A) Counted loops are okay (i.e. do not need to preserve ncsfpts),\n+\/\/     they will be handled in `IdealLoopTree::counted_loop`\n+\/\/  B) Innermost loops are okay because there's no inner loops that can\n+\/\/     delete their ncsfpts. Only outer loops need to mark safepoints for\n+\/\/     protection, because only loops further in can accidentally delete\n+\/\/     their ncsfpts\n+\/\/  C) If an outer loop has a call that's guaranteed to execute (on the\n+\/\/     idom-path), then that loop is okay. Because the call will always\n+\/\/     perform a safepoint poll, regardless of what safepoints are deleted\n+\/\/     from its inner loops\n+\/\/  D) Similarly, if an outer loop has a ncsfpt on the idom-path that isn't\n+\/\/     inside any nested loop, then that loop is okay\n+\/\/  E) Otherwise, if an outer loop's ncsfpt on the idom-path is nested in\n+\/\/     an inner loop, we need to prevent the inner loop from deleting it\n@@ -4230,0 +4239,2 @@\n+            \/\/ We found a local ncsfpt.\n+            \/\/ Continue searching for a call that is guaranteed to be a safepoint.\n@@ -4231,3 +4242,1 @@\n-            break;\n-          }\n-          if (nonlocal_ncsfpt == nullptr) {\n+          } else if (nonlocal_ncsfpt == nullptr) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":37,"deletions":28,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8347499\n+ * @summary Tests that redundant safepoints can be eliminated in loops.\n+ * @library \/test\/lib \/\n+ * @run main compiler.loopopts.TestRedundantSafepointElimination\n+ *\/\n+public class TestRedundantSafepointElimination {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    static int loopCount = 100000;\n+    static int anotherInt = 1;\n+\n+    @DontInline\n+    private void empty() {}\n+\n+    @DontInline\n+    private int constInt() {\n+        return 100000;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.SAFEPOINT)\n+    public void loopConst() {\n+        for (int i = 0; i < 100000; i++) {\n+            empty();\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.SAFEPOINT)\n+    public void loopVar() {\n+        for (int i = 0; i < loopCount; i++) {\n+            empty();\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SAFEPOINT, \"1\"})\n+    public int loopVarWithoutCall() {\n+        int sum = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            sum += anotherInt;\n+        }\n+        return sum;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.SAFEPOINT)\n+    public void loopFunc() {\n+        for (int i = 0; i < constInt(); i++) {\n+            empty();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRedundantSafepointElimination.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3)\n+@Warmup(iterations = 5, time = 2)\n+@Measurement(iterations = 5, time = 3)\n+@State(Scope.Thread)\n+public class LoopSafepoint {\n+    static int loopCount = 100000;\n+    static int anotherInt = 1;\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private void empty() {}\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private int constInt() {\n+        return 100000;\n+    }\n+\n+    @Benchmark\n+    public int loopConst() {\n+        int sum = 0;\n+        for (int i = 0; i < 100000; i++) {\n+            sum += anotherInt;\n+            empty();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int loopVar() {\n+        int sum = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            sum += anotherInt;\n+            empty();\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int loopFunc() {\n+        int sum = 0;\n+        for (int i = 0; i < constInt(); i++) {\n+            sum += anotherInt;\n+            empty();\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LoopSafepoint.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}