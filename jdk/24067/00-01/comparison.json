{"files":[{"patch":"@@ -735,3 +735,0 @@\n-  $1_AOT_JDK_CONF := $$($1_TEST_SUPPORT_DIR)\/aot\/jdk.aotconf\n-  $1_AOT_JDK_CACHE := $$($1_TEST_SUPPORT_DIR)\/aot\/jdk.aotcache\n-  $1_AOT_JDK_LOG := $$($1_TEST_SUPPORT_DIR)\/aot\/TestSetupAOT.log\n@@ -739,0 +736,3 @@\n+  $1_AOT_JDK_CONF := $$($1_AOT_JDK_OUTPUT_DIR)\/jdk.aotconf\n+  $1_AOT_JDK_CACHE := $$($1_AOT_JDK_OUTPUT_DIR)\/jdk.aotcache\n+  $1_AOT_JDK_LOG := $$($1_AOT_JDK_OUTPUT_DIR)\/TestSetupAOT.log\n@@ -740,1 +740,1 @@\n-  # We execute the training run with $(TEST_IMAGE_DIR)\/setup_aot\/TestSetupAOT.class\n+  # We execute the training run with the TestSetupAOT class from $(TEST_IMAGE_DIR)\/setup_aot\/TestSetupAOT.jar\n@@ -743,1 +743,2 @@\n-  # for their classpaths. Instead, we run in the $(TEST_IMAGE_DIR)\/setup_aot\/ directory.\n+  # for their classpaths. Instead, we cd in the $$($1_AOT_JDK_OUTPUT_DIR) directory,\n+  # extract the TestSetupAOT.jar there, and run in that directory without specifying a classpath.\n@@ -752,1 +753,1 @@\n-\t$$(call MakeDir, $$($1_TEST_SUPPORT_DIR)\/aot)\n+\t$$(call MakeDir, $$($1_AOT_JDK_OUTPUT_DIR))\n@@ -755,2 +756,2 @@\n-\t$$(call ExecuteWithLog, $$($1_TEST_SUPPORT_DIR)\/aot, ( \\\n-\t    $(CD) $(TEST_IMAGE_DIR)\/setup_aot; \\\n+\t$$(call ExecuteWithLog, $$($1_AOT_JDK_OUTPUT_DIR), ( \\\n+            cd $$($1_AOT_JDK_OUTPUT_DIR); $(JAR_CMD) --extract --file=$(TEST_IMAGE_DIR)\/setup_aot\/TestSetupAOT.jar ; \\\n@@ -758,1 +759,1 @@\n-\t        -Xlog:cds,cds+class=debug:file=$$($1_AOT_JDK_CONF).log  -Xlog:cds*=error \\\n+\t        -Xlog:class+load,cds,cds+class=debug:file=$$($1_AOT_JDK_CONF).log  -Xlog:cds*=error \\\n@@ -764,1 +765,1 @@\n-\t$$(call ExecuteWithLog, $$($1_TEST_SUPPORT_DIR)\/aot, ( \\\n+\t$$(call ExecuteWithLog, $$($1_AOT_JDK_OUTPUT_DIR), ( \\\n","filename":"make\/RunTests.gmk","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-SETUP_AOT_CLASS := $(SETUP_AOT_SUPPORT)\/classes\/TestSetupAOT.class\n+SETUP_AOT_JAR := $(SETUP_AOT_SUPPORT)\/TestSetupAOT.jar\n@@ -46,0 +46,1 @@\n+    JAR := $(SETUP_AOT_JAR), \\\n@@ -56,1 +57,1 @@\n-    SRC := $(SETUP_AOT_SUPPORT)\/classes, \\\n+    SRC := $(SETUP_AOT_SUPPORT), \\\n@@ -58,5 +59,1 @@\n-    FILES := JavacBenchApp.class \\\n-             JavacBenchApp$$ClassFile.class \\\n-             JavacBenchApp$$FileManager.class \\\n-             JavacBenchApp$$SourceFile.class \\\n-             TestSetupAOT.class, \\\n+    FILES := $(SETUP_AOT_JAR), \\\n","filename":"make\/test\/BuildTestSetupAOT.gmk","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        streamOps(args);\n+        invokedynamicTests(args);\n@@ -147,1 +147,3 @@\n-    static void streamOps(String args[]) {\n+    \/\/ Run some operations with java.util.stream, lambda expressions and string concatenation. This\n+    \/\/ will lead to AOT resolution of invokedynamic call sites.\n+    static void invokedynamicTests(String args[]) {\n@@ -160,1 +162,1 @@\n-        int i = args.length;\n+        int i = args.length * 12357; \/\/ Seed with this so javac will not perform constant folding.\n@@ -201,1 +203,1 @@\n-        long l = System.currentTimeMillis();\n+        long l = i + 12345678;\n","filename":"test\/setup_aot\/TestSetupAOT.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}