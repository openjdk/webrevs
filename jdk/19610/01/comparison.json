{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.util.ByteArrayLittleEndian;\n@@ -470,2 +469,5 @@\n-        long lsb = leastSigBits;\n-        long msb = mostSigBits;\n+        int i0 = (int) (mostSigBits >> 32);\n+        int i1 = (int) mostSigBits;\n+        int i2 = (int) (leastSigBits >> 32);\n+        int i3 = (int) leastSigBits;\n+\n@@ -473,4 +475,2 @@\n-        ByteArrayLittleEndian.setLong(\n-                buf,\n-                0,\n-                HexDigits.packDigits((int) (msb >> 56), (int) (msb >> 48), (int) (msb >> 40), (int) (msb >> 32)));\n+        HexDigits.putHex(buf, 0, i0 >> 16);\n+        HexDigits.putHex(buf, 4, i0);\n@@ -478,4 +478,1 @@\n-        ByteArrayLittleEndian.setInt(\n-                buf,\n-                9,\n-                HexDigits.packDigits(((int) msb) >> 24, ((int) msb) >> 16));\n+        HexDigits.putHex(buf, 9, i1 >> 16);\n@@ -483,4 +480,1 @@\n-        ByteArrayLittleEndian.setInt(\n-                buf,\n-                14,\n-                HexDigits.packDigits(((int) msb) >> 8, (int) msb));\n+        HexDigits.putHex(buf, 14, i1);\n@@ -488,4 +482,1 @@\n-        ByteArrayLittleEndian.setInt(\n-                buf,\n-                19,\n-                HexDigits.packDigits((int) (lsb >> 56), (int) (lsb >> 48)));\n+        HexDigits.putHex(buf, 19, i2 >> 16);\n@@ -493,9 +484,3 @@\n-        ByteArrayLittleEndian.setLong(\n-                buf,\n-                24,\n-                HexDigits.packDigits((int) (lsb >> 40), (int) (lsb >> 32), ((int) lsb) >> 24, ((int) lsb) >> 16));\n-        ByteArrayLittleEndian.setInt(\n-                buf,\n-                32,\n-                HexDigits.packDigits(((int) lsb) >> 8, (int) lsb));\n-\n+        HexDigits.putHex(buf, 24, i2);\n+        HexDigits.putHex(buf, 28, i3 >> 16);\n+        HexDigits.putHex(buf, 32, i3);\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":13,"deletions":28,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -117,3 +117,4 @@\n-     * Return a little-endian packed integer for the 4 ASCII bytes for an input unsigned 2-byte integer.\n-     * {@code b0} is the most significant byte and {@code b1} is the least significant byte.\n-     * The integer is passed byte-wise to allow reordering of execution.\n+     * Insert the int into the buffer as 4 hexadecimal digits\n+     * @param buffer byte buffer to copy into\n+     * @param off insert point\n+     * @param value to convert\n@@ -121,14 +122,7 @@\n-    public static int packDigits(int b0, int b1) {\n-        return DIGITS[b0 & 0xff] | (DIGITS[b1 & 0xff] << 16);\n-    }\n-\n-    \/**\n-     * Return a little-endian packed long for the 8 ASCII bytes for an input unsigned 4-byte integer.\n-     * {@code b0} is the most significant byte and {@code b3} is the least significant byte.\n-     * The integer is passed byte-wise to allow reordering of execution.\n-     *\/\n-    public static long packDigits(int b0, int b1, int b2, int b3) {\n-        return DIGITS[b0 & 0xff]\n-                | (DIGITS[b1 & 0xff] << 16)\n-                | (((long) DIGITS[b2 & 0xff]) << 32)\n-                | (((long) DIGITS[b3 & 0xff]) << 48);\n+    public static void putHex(byte[] buffer, int off, int i) {\n+        \/\/ Prepare an int value so C2 generates a 4-byte write instead of two 2-byte writes\n+        int v = (DIGITS[i & 0xff] << 16) | DIGITS[(i >> 8) & 0xff];\n+        buffer[off]     = (byte)  v;\n+        buffer[off + 1] = (byte) (v >> 8);\n+        buffer[off + 2] = (byte) (v >> 16);\n+        buffer[off + 3] = (byte) (v >> 24);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}