{"files":[{"patch":"@@ -313,1 +313,1 @@\n-IdealLoopTree* PhaseIdealLoop::create_outer_strip_mined_loop(BoolNode *test, Node *cmp, Node *init_control,\n+IdealLoopTree* PhaseIdealLoop::create_outer_strip_mined_loop(Node* init_control,\n@@ -345,1 +345,1 @@\n-void PhaseIdealLoop::insert_loop_limit_check_predicate(ParsePredicateSuccessProj* loop_limit_check_parse_proj,\n+void CountedLoopConverter::insert_loop_limit_check_predicate(const ParsePredicateSuccessProj* loop_limit_check_parse_proj,\n@@ -348,3 +348,5 @@\n-  Node* new_predicate_proj = create_new_if_for_predicate(loop_limit_check_parse_proj, nullptr,\n-                                                         Deoptimization::Reason_loop_limit_check,\n-                                                         Op_If);\n+  Node* new_predicate_proj = _phase->create_new_if_for_predicate(loop_limit_check_parse_proj, nullptr,\n+                                                                 Deoptimization::Reason_loop_limit_check,\n+                                                                 Op_If);\n+\n+  PhaseIterGVN& igvn = _phase->igvn();\n@@ -352,4 +354,4 @@\n-  cmp_limit = _igvn.register_new_node_with_optimizer(cmp_limit);\n-  bol = _igvn.register_new_node_with_optimizer(bol);\n-  set_subtree_ctrl(bol, false);\n-  _igvn.replace_input_of(iff, 1, bol);\n+  cmp_limit = igvn.register_new_node_with_optimizer(cmp_limit);\n+  bol = igvn.register_new_node_with_optimizer(bol);\n+  _phase->set_subtree_ctrl(bol, false);\n+  igvn.replace_input_of(iff, 1, bol);\n@@ -367,1 +369,1 @@\n-Node* PhaseIdealLoop::loop_exit_control(Node* x, IdealLoopTree* loop) {\n+Node* PhaseIdealLoop::loop_exit_control(const Node* head, const IdealLoopTree* loop) const {\n@@ -370,1 +372,1 @@\n-  if (x->in(LoopNode::Self) == nullptr || x->req() != 3 || loop->_irreducible) {\n+  if (head->in(LoopNode::Self) == nullptr || head->req() != 3 || loop->_irreducible) {\n@@ -373,2 +375,2 @@\n-  Node *init_control = x->in(LoopNode::EntryControl);\n-  Node *back_control = x->in(LoopNode::LoopBackControl);\n+  Node* init_control = head->in(LoopNode::EntryControl);\n+  Node* back_control = head->in(LoopNode::LoopBackControl);\n@@ -407,2 +409,2 @@\n-Node* PhaseIdealLoop::loop_exit_test(Node* back_control, IdealLoopTree* loop, Node*& incr, Node*& limit, BoolTest::mask& bt, float& cl_prob) {\n-  Node* iftrue = back_control;\n+PhaseIdealLoop::LoopExitTest PhaseIdealLoop::loop_exit_test(const Node* back_control, const IdealLoopTree* loop) {\n+  const Node* iftrue = back_control;\n@@ -412,2 +414,2 @@\n-  bt = test->_test._test;\n-  cl_prob = iff->as_If()->_prob;\n+  BoolTest::mask bt = test->_test._test;\n+  float cl_prob = iff->as_If()->_prob;\n@@ -416,1 +418,1 @@\n-    cl_prob = 1.0 - cl_prob;\n+    cl_prob = 1.0f - cl_prob;\n@@ -421,1 +423,1 @@\n-    return nullptr;\n+    return {};\n@@ -425,2 +427,2 @@\n-  incr  = cmp->in(1);\n-  limit = cmp->in(2);\n+  Node* incr  = cmp->in(1);\n+  Node* limit = cmp->in(2);\n@@ -433,3 +435,1 @@\n-    Node* tmp = incr;            \/\/ Then reverse order into the CmpI\n-    incr = limit;\n-    limit = tmp;\n+    swap(incr, limit);                \/\/ Then reverse order into the CmpI\n@@ -439,1 +439,1 @@\n-    return nullptr;\n+    return {};\n@@ -442,1 +442,1 @@\n-    return nullptr;\n+    return {};\n@@ -444,1 +444,1 @@\n-  return cmp;\n+  return {cmp->as_Cmp(), incr, limit, bt, cl_prob};\n@@ -447,9 +447,6 @@\n-Node* PhaseIdealLoop::loop_iv_incr(Node* incr, Node* x, IdealLoopTree* loop, Node*& phi_incr) {\n-  if (incr->is_Phi()) {\n-    if (incr->as_Phi()->region() != x || incr->req() != 3) {\n-      return nullptr; \/\/ Not simple trip counter expression\n-    }\n-    phi_incr = incr;\n-    incr = phi_incr->in(LoopNode::LoopBackControl); \/\/ Assume incr is on backedge of Phi\n-    if (!is_member(loop, get_ctrl(incr))) { \/\/ Trip counter must be loop-variant\n-      return nullptr;\n+PhaseIdealLoop::LoopIVIncr PhaseIdealLoop::loop_iv_incr(Node* incr, const Node* head, const IdealLoopTree* loop) {\n+  if (incr->is_Phi() && incr->as_Phi()->region() == head && incr->req() == 3) { \/\/ Requires simple trip counter expression\n+    Node* phi_incr = incr;\n+    Node* back_control = phi_incr->in(LoopNode::LoopBackControl); \/\/ Assume incr is on backedge of Phi\n+    if (loop->_phase->is_member(loop, loop->_phase->get_ctrl(back_control))) { \/\/ Trip counter must be loop-variant\n+      return {back_control, phi_incr};\n@@ -458,1 +455,1 @@\n-  return incr;\n+  return {incr, nullptr};\n@@ -461,1 +458,1 @@\n-Node* PhaseIdealLoop::loop_iv_stride(Node* incr, IdealLoopTree* loop, Node*& xphi) {\n+PhaseIdealLoop::LoopIvStride PhaseIdealLoop::loop_iv_stride(const Node* incr) {\n@@ -464,1 +461,1 @@\n-  xphi = incr->in(1);\n+  Node* xphi = incr->in(1);\n@@ -468,1 +465,1 @@\n-      return nullptr;          \/\/ Nope, unknown stride, bail out\n+      return {};               \/\/ Nope, unknown stride, bail out\n@@ -470,3 +467,2 @@\n-    Node *tmp = xphi;          \/\/ 'incr' is commutative, so ok to swap\n-    xphi = stride;\n-    stride = tmp;\n+\n+    swap(xphi, stride);        \/\/ 'incr' is commutative, so ok to swap\n@@ -474,1 +470,1 @@\n-  return stride;\n+  return {stride, xphi};\n@@ -477,1 +473,1 @@\n-PhiNode* PhaseIdealLoop::loop_iv_phi(Node* xphi, Node* phi_incr, Node* x, IdealLoopTree* loop) {\n+PhiNode* PhaseIdealLoop::loop_iv_phi(const Node* xphi, const Node* phi_incr, const Node* head) {\n@@ -487,1 +483,1 @@\n-  if (phi->region() != x) {\n+  if (phi->region() != head) {\n@@ -618,1 +614,1 @@\n-static bool no_side_effect_since_safepoint(Compile* C, Node* x, Node* mem, MergeMemNode* mm, PhaseIdealLoop* phase) {\n+static bool no_side_effect_since_safepoint(Compile* C, const Node* head, const Node* mem, MergeMemNode* mm, const PhaseIdealLoop* phase) {\n@@ -620,2 +616,2 @@\n-  for (DUIterator_Fast imax, i = x->fast_outs(imax); i < imax; i++) {\n-    Node* u = x->fast_out(i);\n+  for (DUIterator_Fast imax, i = head->fast_outs(imax); i < imax; i++) {\n+    Node* u = head->fast_out(i);\n@@ -671,1 +667,1 @@\n-SafePointNode* PhaseIdealLoop::find_safepoint(Node* back_control, Node* x, IdealLoopTree* loop) {\n+SafePointNode* PhaseIdealLoop::find_safepoint(Node* back_control, const Node* head, const IdealLoopTree* loop) {\n@@ -678,1 +674,1 @@\n-    while (c != x && c->Opcode() != Op_SafePoint) {\n+    while (c != head && c->Opcode() != Op_SafePoint) {\n@@ -717,1 +713,1 @@\n-    if (!no_side_effect_since_safepoint(C, x, mem, mm, this)) {\n+    if (!no_side_effect_since_safepoint(C, head, mem, mm, this)) {\n@@ -1471,4 +1467,2 @@\n-  BoolTest::mask mask = BoolTest::illegal;\n-  float cl_prob = 0;\n-  Node* incr = nullptr;\n-  Node* limit = nullptr;\n+  LoopExitTest exit_test = loop_exit_test(back_control, loop);\n+  assert(exit_test.cmp != nullptr && exit_test.cmp->Opcode() == Op_Cmp(bt), \"no exit test\");\n@@ -1476,2 +1470,2 @@\n-  Node* cmp = loop_exit_test(back_control, loop, incr, limit, mask, cl_prob);\n-  assert(cmp != nullptr && cmp->Opcode() == Op_Cmp(bt), \"no exit test\");\n+  const LoopIVIncr iv_incr = loop_iv_incr(exit_test.incr, x, loop);\n+  assert(iv_incr.incr != nullptr && iv_incr.incr->Opcode() == Op_Add(bt), \"no incr\");\n@@ -1479,3 +1473,2 @@\n-  Node* phi_incr = nullptr;\n-  incr = loop_iv_incr(incr, x, loop, phi_incr);\n-  assert(incr != nullptr && incr->Opcode() == Op_Add(bt), \"no incr\");\n+  LoopIvStride stride = loop_iv_stride(iv_incr.incr);\n+  assert(stride.stride != nullptr, \"no stride\");\n@@ -1483,2 +1476,2 @@\n-  Node* xphi = nullptr;\n-  Node* stride = loop_iv_stride(incr, loop, xphi);\n+  PhiNode* phi = loop_iv_phi(stride.xphi, iv_incr.phi_incr, x);\n+  assert(phi != nullptr && phi->in(LoopNode::LoopBackControl) == iv_incr.incr, \"No phi\");\n@@ -1486,1 +1479,2 @@\n-  assert(stride != nullptr, \"no stride\");\n+  jlong stride_con = stride.stride->get_integer_as_long(bt);\n+  assert(condition_stride_ok(exit_test.mask, stride_con), \"illegal condition\");\n@@ -1488,11 +1482,3 @@\n-  PhiNode* phi = loop_iv_phi(xphi, phi_incr, x, loop);\n-\n-  assert(phi != nullptr && phi->in(LoopNode::LoopBackControl) == incr, \"No phi\");\n-\n-  jlong stride_con = stride->get_integer_as_long(bt);\n-\n-  assert(condition_stride_ok(mask, stride_con), \"illegal condition\");\n-\n-  assert(mask != BoolTest::ne, \"unexpected condition\");\n-  assert(phi_incr == nullptr, \"bad loop shape\");\n-  assert(cmp->in(1) == incr, \"bad exit test shape\");\n+  assert(exit_test.mask != BoolTest::ne, \"unexpected condition\");\n+  assert(iv_incr.phi_incr == nullptr, \"bad loop shape\");\n+  assert(exit_test.cmp->in(1) == iv_incr.incr, \"bad exit test shape\");\n@@ -1505,0 +1491,1 @@\n+\/\/------------------------------CountedLoopConverter--------------------------------\n@@ -1506,3 +1493,14 @@\n-\/\/ convert an int counted loop to a long counted to stress handling of\n-\/\/ long counted loops\n-bool PhaseIdealLoop::convert_to_long_loop(Node* cmp, Node* phi, IdealLoopTree* loop) {\n+bool CountedLoopConverter::should_stress_long_counted_loop() const {\n+  assert(_checked_for_counted_loop, \"must check for counted loop before stressing\");\n+\n+  return StressLongCountedLoop > 0 &&\n+      _iv_bt == T_INT &&\n+      !_head->as_Loop()->is_loop_nest_inner_loop() &&\n+      _structure.trunc_type == TypeInt::INT; \/\/ Only stress an int loop (i.e., not char, byte or short)\n+}\n+\n+\/\/ Convert an int counted loop to a long counted to stress handling of long counted loops. Returns true upon success.\n+bool CountedLoopConverter::stress_long_counted_loop() const {\n+  assert(should_stress_long_counted_loop(), \"stress condition not satisfied\");\n+\n+  PhaseIterGVN* igvn = &_phase->igvn();\n@@ -1511,1 +1509,1 @@\n-  iv_nodes.push(cmp);\n+  iv_nodes.push(_structure.cmp);\n@@ -1541,2 +1539,2 @@\n-    for (uint i = 1; i < n->req(); i++) {\n-      Node* in = n->in(i);\n+    for (uint j = 1; j < n->req(); j++) {\n+      Node* in = n->in(j);\n@@ -1546,1 +1544,1 @@\n-      if (loop->is_member(get_loop(get_ctrl(in)))) {\n+      if (_loop->is_member(_phase->get_loop(_phase->get_ctrl(in)))) {\n@@ -1557,1 +1555,1 @@\n-        _igvn.remove_dead_node(clone);\n+        igvn->remove_dead_node(clone);\n@@ -1566,2 +1564,2 @@\n-    for (uint i = 1; i < n->req(); i++) {\n-      Node* in = n->in(i);\n+    for (uint j = 1; j < n->req(); j++) {\n+      Node* in = n->in(j);\n@@ -1573,1 +1571,1 @@\n-        assert(_igvn.type(in)->isa_int(), \"\");\n+        assert(igvn->type(in)->isa_int(), \"\");\n@@ -1575,2 +1573,2 @@\n-        _igvn.register_new_node_with_optimizer(in_clone);\n-        set_subtree_ctrl(in_clone, false);\n+        igvn->register_new_node_with_optimizer(in_clone);\n+        _phase->set_subtree_ctrl(in_clone, false);\n@@ -1579,2 +1577,2 @@\n-        in_clone->set_req(0, C->top());\n-        clone->set_req(i, in_clone);\n+        in_clone->set_req(0, _phase->C->top());\n+        clone->set_req(j, in_clone);\n@@ -1583,1 +1581,1 @@\n-        clone->set_req(i, in_clone);\n+        clone->set_req(j, in_clone);\n@@ -1586,1 +1584,1 @@\n-    _igvn.register_new_node_with_optimizer(clone);\n+    igvn->register_new_node_with_optimizer(clone);\n@@ -1588,1 +1586,1 @@\n-  set_ctrl(old_new[phi->_idx], phi->in(0));\n+  _phase->set_ctrl(old_new[_structure.phi->_idx], _structure.phi->in(0));\n@@ -1593,1 +1591,1 @@\n-    set_subtree_ctrl(clone, false);\n+    _phase->set_subtree_ctrl(clone, false);\n@@ -1595,2 +1593,2 @@\n-    for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n-      Node* u = n->fast_out(i);\n+    for (DUIterator_Fast imax, j = n->fast_outs(imax); j < imax; j++) {\n+      Node* u = n->fast_out(j);\n@@ -1602,2 +1600,2 @@\n-        _igvn.register_new_node_with_optimizer(m);\n-        set_subtree_ctrl(m, false);\n+        igvn->register_new_node_with_optimizer(m);\n+        _phase->set_subtree_ctrl(m, false);\n@@ -1605,3 +1603,3 @@\n-      _igvn.rehash_node_delayed(u);\n-      int nb = u->replace_edge(n, m, &_igvn);\n-      --i, imax -= nb;\n+      igvn->rehash_node_delayed(u);\n+      int nb = u->replace_edge(n, m, igvn);\n+      --j, imax -= nb;\n@@ -1614,3 +1612,9 @@\n-\/\/------------------------------is_counted_loop--------------------------------\n-bool PhaseIdealLoop::is_counted_loop(Node* x, IdealLoopTree*&loop, BasicType iv_bt) {\n-  PhaseGVN *gvn = &_igvn;\n+bool PhaseIdealLoop::try_convert_to_counted_loop(Node* head, IdealLoopTree*& loop, const BasicType iv_bt) {\n+  CountedLoopConverter converter(this, head, loop, iv_bt);\n+  if (converter.is_counted_loop()) {\n+#ifdef ASSERT\n+    \/\/ Stress by converting int counted loops to long counted loops\n+    if (converter.should_stress_long_counted_loop() && converter.stress_long_counted_loop()) {\n+      return false;\n+    }\n+#endif\n@@ -1618,3 +1622,2 @@\n-  Node* back_control = loop_exit_control(x, loop);\n-  if (back_control == nullptr) {\n-    return false;\n+    loop = converter.convert();\n+    return true;\n@@ -1623,8 +1626,2 @@\n-  BoolTest::mask bt = BoolTest::illegal;\n-  float cl_prob = 0;\n-  Node* incr = nullptr;\n-  Node* limit = nullptr;\n-  Node* cmp = loop_exit_test(back_control, loop, incr, limit, bt, cl_prob);\n-  if (cmp == nullptr || cmp->Opcode() != Op_Cmp(iv_bt)) {\n-    return false; \/\/ Avoid pointer & float & 64-bit compares\n-  }\n+  return false;\n+}\n@@ -1632,4 +1629,2 @@\n-  \/\/ Trip-counter increment must be commutative & associative.\n-  if (incr->Opcode() == Op_Cast(iv_bt)) {\n-    incr = incr->in(1);\n-  }\n+bool CountedLoopConverter::is_counted_loop() {\n+  PhaseIterGVN* igvn = &_phase->igvn();\n@@ -1637,3 +1632,2 @@\n-  Node* phi_incr = nullptr;\n-  incr = loop_iv_incr(incr, x, loop, phi_incr);\n-  if (incr == nullptr) {\n+  LoopStructure structure{};\n+  if (!build_loop_structure(structure)) {\n@@ -1643,11 +1637,2 @@\n-  Node* trunc1 = nullptr;\n-  Node* trunc2 = nullptr;\n-  const TypeInteger* iv_trunc_t = nullptr;\n-  Node* orig_incr = incr;\n-  if (!(incr = CountedLoopNode::match_incr_with_optional_truncation(incr, &trunc1, &trunc2, &iv_trunc_t, iv_bt))) {\n-    return false; \/\/ Funny increment opcode\n-  }\n-  assert(incr->Opcode() == Op_Add(iv_bt), \"wrong increment code\");\n-\n-  Node* xphi = nullptr;\n-  Node* stride = loop_iv_stride(incr, loop, xphi);\n+  \/\/ =================================================\n+  \/\/ ---- Is the loop trip counted? ----\n@@ -1655,1 +1640,3 @@\n-  if (stride == nullptr) {\n+  \/\/ Check trip counter will end up higher than the limit\n+  const TypeInteger* limit_t = igvn->type(structure.limit)->is_integer(_iv_bt);\n+  if (is_infinite_loop(structure.trunc1, limit_t, structure.iv_incr)) {\n@@ -1659,4 +1646,0 @@\n-  if (xphi->Opcode() == Op_Cast(iv_bt)) {\n-    xphi = xphi->in(1);\n-  }\n-\n@@ -1664,1 +1647,1 @@\n-  jlong stride_con = stride->get_integer_as_long(iv_bt);\n+  jlong stride_con = structure.stride->get_integer_as_long(_iv_bt);\n@@ -1666,6 +1649,1 @@\n-\n-  PhiNode* phi = loop_iv_phi(xphi, phi_incr, x, loop);\n-\n-  if (phi == nullptr ||\n-      (trunc1 == nullptr && phi->in(LoopNode::LoopBackControl) != incr) ||\n-      (trunc1 != nullptr && phi->in(LoopNode::LoopBackControl) != trunc1)) {\n+  if (!condition_stride_ok(structure.mask, stride_con)) {\n@@ -1675,69 +1653,2 @@\n-  Node* iftrue = back_control;\n-  uint iftrue_op = iftrue->Opcode();\n-  Node* iff = iftrue->in(0);\n-  BoolNode* test = iff->in(1)->as_Bool();\n-\n-  const TypeInteger* limit_t = gvn->type(limit)->is_integer(iv_bt);\n-  if (trunc1 != nullptr) {\n-    \/\/ When there is a truncation, we must be sure that after the truncation\n-    \/\/ the trip counter will end up higher than the limit, otherwise we are looking\n-    \/\/ at an endless loop. Can happen with range checks.\n-\n-    \/\/ Example:\n-    \/\/ int i = 0;\n-    \/\/ while (true)\n-    \/\/    sum + = array[i];\n-    \/\/    i++;\n-    \/\/    i = i && 0x7fff;\n-    \/\/  }\n-    \/\/\n-    \/\/ If the array is shorter than 0x8000 this exits through a AIOOB\n-    \/\/  - Counted loop transformation is ok\n-    \/\/ If the array is longer then this is an endless loop\n-    \/\/  - No transformation can be done.\n-\n-    const TypeInteger* incr_t = gvn->type(orig_incr)->is_integer(iv_bt);\n-    if (limit_t->hi_as_long() > incr_t->hi_as_long()) {\n-      \/\/ if the limit can have a higher value than the increment (before the phi)\n-      return false;\n-    }\n-  }\n-\n-  Node *init_trip = phi->in(LoopNode::EntryControl);\n-\n-  \/\/ If iv trunc type is smaller than int, check for possible wrap.\n-  if (!TypeInteger::bottom(iv_bt)->higher_equal(iv_trunc_t)) {\n-    assert(trunc1 != nullptr, \"must have found some truncation\");\n-\n-    \/\/ Get a better type for the phi (filtered thru if's)\n-    const TypeInteger* phi_ft = filtered_type(phi);\n-\n-    \/\/ Can iv take on a value that will wrap?\n-    \/\/\n-    \/\/ Ensure iv's limit is not within \"stride\" of the wrap value.\n-    \/\/\n-    \/\/ Example for \"short\" type\n-    \/\/    Truncation ensures value is in the range -32768..32767 (iv_trunc_t)\n-    \/\/    If the stride is +10, then the last value of the induction\n-    \/\/    variable before the increment (phi_ft->_hi) must be\n-    \/\/    <= 32767 - 10 and (phi_ft->_lo) must be >= -32768 to\n-    \/\/    ensure no truncation occurs after the increment.\n-\n-    if (stride_con > 0) {\n-      if (iv_trunc_t->hi_as_long() - phi_ft->hi_as_long() < stride_con ||\n-          iv_trunc_t->lo_as_long() > phi_ft->lo_as_long()) {\n-        return false;  \/\/ truncation may occur\n-      }\n-    } else if (stride_con < 0) {\n-      if (iv_trunc_t->lo_as_long() - phi_ft->lo_as_long() > stride_con ||\n-          iv_trunc_t->hi_as_long() < phi_ft->hi_as_long()) {\n-        return false;  \/\/ truncation may occur\n-      }\n-    }\n-    \/\/ No possibility of wrap so truncation can be discarded\n-    \/\/ Promote iv type to Int\n-  } else {\n-    assert(trunc1 == nullptr && trunc2 == nullptr, \"no truncation for int\");\n-  }\n-\n-  if (!condition_stride_ok(bt, stride_con)) {\n+  \/\/ Check iv type can be promoted to int for short\/char\/byte loops\n+  if (has_truncation_wrap(structure.trunc1, structure.trunc2, structure.trunc_type, structure.phi, stride_con)) {\n@@ -1747,23 +1658,4 @@\n-  const TypeInteger* init_t = gvn->type(init_trip)->is_integer(iv_bt);\n-\n-  if (stride_con > 0) {\n-    if (init_t->lo_as_long() > max_signed_integer(iv_bt) - stride_con) {\n-      return false; \/\/ cyclic loop\n-    }\n-  } else {\n-    if (init_t->hi_as_long() < min_signed_integer(iv_bt) - stride_con) {\n-      return false; \/\/ cyclic loop\n-    }\n-  }\n-\n-  if (phi_incr != nullptr && bt != BoolTest::ne) {\n-    \/\/ check if there is a possibility of IV overflowing after the first increment\n-    if (stride_con > 0) {\n-      if (init_t->hi_as_long() > max_signed_integer(iv_bt) - stride_con) {\n-        return false;\n-      }\n-    } else {\n-      if (init_t->lo_as_long() < min_signed_integer(iv_bt) - stride_con) {\n-        return false;\n-      }\n-    }\n+  Node* init_trip = structure.phi->in(LoopNode::EntryControl);\n+  const TypeInteger* init_t = igvn->type(init_trip)->is_integer(_iv_bt);\n+  if (is_iv_overflowing(init_t, stride_con, structure.phi_incr, structure.mask)) {\n+    return false;\n@@ -1774,1 +1666,0 @@\n-  \/\/\n@@ -1776,2 +1667,2 @@\n-  if (x->Opcode() == Op_Region) {\n-    \/\/ x has not yet been transformed to Loop or LongCountedLoop.\n+  if (_head->Opcode() == Op_Region) {\n+    \/\/ head has not yet been transformed to Loop or LongCountedLoop.\n@@ -1784,2 +1675,2 @@\n-    assert(x->as_Region()->is_in_infinite_subgraph(),\n-           \"x can only be a Region and not Loop if inside infinite loop\");\n+    assert(_head->as_Region()->is_in_infinite_subgraph(),\n+           \"head can only be a Region and not Loop if inside infinite loop\");\n@@ -1790,2 +1681,2 @@\n-  assert(x->Opcode() == Op_Loop || x->Opcode() == Op_LongCountedLoop, \"regular loops only\");\n-  C->print_method(PHASE_BEFORE_CLOOPS, 3, x);\n+  assert(_head->Opcode() == Op_Loop || _head->Opcode() == Op_LongCountedLoop, \"regular loops only\");\n+  _phase->C->print_method(PHASE_BEFORE_CLOOPS, 3, _head);\n@@ -1981,1 +1872,1 @@\n-  if (stride_con == min_signed_integer(iv_bt) || (ABS(stride_con) > max_signed_integer(iv_bt) \/ 2)) {\n+  if (stride_con == min_signed_integer(_iv_bt) || (ABS(stride_con) > max_signed_integer(_iv_bt) \/ 2)) {\n@@ -1986,1 +1877,1 @@\n-  const jlong limit_correction_for_pre_iv_exit_check = (phi_incr != nullptr) ? stride_con : 0;\n+  const jlong limit_correction_for_pre_iv_exit_check = (structure.phi_incr != nullptr) ? stride_con : 0;\n@@ -1989,1 +1880,1 @@\n-  const bool includes_limit = (bt == BoolTest::le || bt == BoolTest::ge);\n+  const bool includes_limit = (structure.mask == BoolTest::le || structure.mask == BoolTest::ge);\n@@ -1996,2 +1887,5 @@\n-  int sov = check_stride_overflow(final_correction, limit_t, iv_bt);\n-  Node* init_control = x->in(LoopNode::EntryControl);\n+  int sov = check_stride_overflow(final_correction, limit_t, _iv_bt);\n+  Node* init_control = _head->in(LoopNode::EntryControl);\n+\n+  const Predicates predicates(init_control);\n+  const PredicateBlock* loop_limit_check_predicate_block = predicates.loop_limit_check_predicate_block();\n@@ -1999,1 +1893,5 @@\n-  \/\/ If sov==0, limit's type always satisfies the condition, for\n+  if (sov < 0) {\n+    return false; \/\/ Bailout: integer overflow is certain.\n+  }\n+\n+  \/\/ If sov == 0, limit's type always satisfies the condition, for\n@@ -2001,4 +1899,3 @@\n-  if (sov != 0) {\n-    if (sov < 0) {\n-      return false;  \/\/ Bailout: integer overflow is certain.\n-    }\n+\n+  bool insert_stride_overflow_limit_check = false;\n+  if (sov > 0) {\n@@ -2007,3 +1904,1 @@\n-    assert(!x->as_Loop()->is_loop_nest_inner_loop(), \"loop was transformed\");\n-    const Predicates predicates(init_control);\n-    const PredicateBlock* loop_limit_check_predicate_block = predicates.loop_limit_check_predicate_block();\n+    assert(!_head->as_Loop()->is_loop_nest_inner_loop(), \"loop was transformed\");\n@@ -2015,2 +1910,2 @@\n-        loop->dump_head();\n-        x->dump(1);\n+        _loop->dump_head();\n+        _head->dump(1);\n@@ -2023,1 +1918,1 @@\n-    if (!is_dominator(get_ctrl(limit), loop_limit_check_parse_predicate->in(0))) {\n+    if (!_phase->is_dominator(_phase->get_ctrl(structure.limit), loop_limit_check_parse_predicate->in(0))) {\n@@ -2027,12 +1922,1 @@\n-    Node* cmp_limit;\n-    Node* bol;\n-\n-    if (stride_con > 0) {\n-      cmp_limit = CmpNode::make(limit, _igvn.integercon(max_signed_integer(iv_bt) - final_correction, iv_bt), iv_bt);\n-      bol = new BoolNode(cmp_limit, BoolTest::le);\n-    } else {\n-      cmp_limit = CmpNode::make(limit, _igvn.integercon(min_signed_integer(iv_bt) - final_correction, iv_bt), iv_bt);\n-      bol = new BoolNode(cmp_limit, BoolTest::ge);\n-    }\n-\n-    insert_loop_limit_check_predicate(init_control->as_IfTrue(), cmp_limit, bol);\n+    insert_stride_overflow_limit_check = true;\n@@ -2043,2 +1927,3 @@\n-          (stride_con > 0 && init_t->hi_as_long() > max_signed_integer(iv_bt) - stride_con) ||\n-          (stride_con < 0 && init_t->lo_as_long() < min_signed_integer(iv_bt) - stride_con);\n+      (stride_con > 0 && init_t->hi_as_long() > max_signed_integer(_iv_bt) - stride_con) ||\n+      (stride_con < 0 && init_t->lo_as_long() < min_signed_integer(_iv_bt) - stride_con);\n+\n@@ -2046,2 +1931,3 @@\n-  const bool init_gte_limit = (stride_con > 0 && init_t->hi_as_long() >= limit_t->lo_as_long()) ||\n-                              (stride_con < 0 && init_t->lo_as_long() <= limit_t->hi_as_long());\n+  const bool init_gte_limit =\n+      (stride_con > 0 && init_t->hi_as_long() >= limit_t->lo_as_long()) ||\n+      (stride_con < 0 && init_t->lo_as_long() <= limit_t->hi_as_long());\n@@ -2049,0 +1935,1 @@\n+  bool insert_init_trip_limit_check = false;\n@@ -2050,2 +1937,6 @@\n-     ((bt == BoolTest::ne || init_plus_stride_could_overflow) && \/\/ (2.3)\n-      !has_dominating_loop_limit_check(init_trip, limit, stride_con, iv_bt, init_control))) { \/\/ (2.2)\n+      ((structure.mask == BoolTest::ne || init_plus_stride_could_overflow) && \/\/ (2.3)\n+          !has_dominating_loop_limit_check(init_trip,\n+                                           structure.limit,\n+                                           stride_con,\n+                                           _iv_bt,\n+                                           init_control))) { \/\/ (2.2)\n@@ -2061,2 +1952,0 @@\n-    const Predicates predicates(init_control);\n-    const PredicateBlock* loop_limit_check_predicate_block = predicates.loop_limit_check_predicate_block();\n@@ -2068,2 +1957,2 @@\n-        loop->dump_head();\n-        x->dump(1);\n+        _loop->dump_head();\n+        _head->dump(1);\n@@ -2077,2 +1966,2 @@\n-    if (!is_dominator(get_ctrl(limit), parse_predicate_entry) ||\n-        !is_dominator(get_ctrl(init_trip), parse_predicate_entry)) {\n+    if (!_phase->is_dominator(_phase->get_ctrl(structure.limit), parse_predicate_entry) ||\n+        !_phase->is_dominator(_phase->get_ctrl(init_trip), parse_predicate_entry)) {\n@@ -2082,12 +1971,1 @@\n-    Node* cmp_limit;\n-    Node* bol;\n-\n-    if (stride_con > 0) {\n-      cmp_limit = CmpNode::make(init_trip, limit, iv_bt);\n-      bol = new BoolNode(cmp_limit, BoolTest::lt);\n-    } else {\n-      cmp_limit = CmpNode::make(init_trip, limit, iv_bt);\n-      bol = new BoolNode(cmp_limit, BoolTest::gt);\n-    }\n-\n-    insert_loop_limit_check_predicate(init_control->as_IfTrue(), cmp_limit, bol);\n+    insert_init_trip_limit_check = true;\n@@ -2096,1 +1974,1 @@\n-  if (bt == BoolTest::ne) {\n+  if (structure.mask == BoolTest::ne) {\n@@ -2101,1 +1979,1 @@\n-      bt = BoolTest::lt;\n+      structure.mask = BoolTest::lt;\n@@ -2105,1 +1983,1 @@\n-      bt = BoolTest::gt;\n+      structure.mask = BoolTest::gt;\n@@ -2109,3 +1987,102 @@\n-  Node* sfpt = nullptr;\n-  if (loop->_child == nullptr) {\n-    sfpt = find_safepoint(back_control, x, loop);\n+  if (is_safepoint_invalid(structure.sfpt, structure.back_control)) {\n+    return false;\n+  }\n+\n+  \/\/ Variables needed by convert() to do the actual conversion. We set these fields iff a counted loop is confirmed.\n+  \/\/ This way the is_counted_loop() can run multiple times with possibly different structures.\n+  _structure = structure;\n+\n+  _stride_con = stride_con;\n+  _final_correction = final_correction;\n+  _includes_limit = includes_limit;\n+\n+  _insert_stride_overflow_limit_check = insert_stride_overflow_limit_check;\n+  _insert_init_trip_limit_check = insert_init_trip_limit_check;\n+\n+#ifdef ASSERT\n+  _checked_for_counted_loop = true;\n+#endif\n+\n+  return true;\n+}\n+\n+bool CountedLoopConverter::build_loop_structure(CountedLoopConverter::LoopStructure& structure) {\n+  PhaseIterGVN* igvn = &_phase->igvn();\n+\n+  Node* back_control = _phase->loop_exit_control(_head, _loop);\n+  if (back_control == nullptr) {\n+    return false;\n+  }\n+\n+  PhaseIdealLoop::LoopExitTest exit_test = _phase->loop_exit_test(back_control, _loop);\n+  if (exit_test.cmp == nullptr || exit_test.cmp->Opcode() != Op_Cmp(_iv_bt)) {\n+    return false; \/\/ Avoid pointer & float & 64-bit compares\n+  }\n+\n+  Node* incr = exit_test.incr;\n+  if (exit_test.incr->Opcode() == Op_Cast(_iv_bt)) {\n+    incr = incr->in(1);\n+  }\n+\n+  const PhaseIdealLoop::LoopIVIncr iv_incr = PhaseIdealLoop::loop_iv_incr(incr, _head, _loop);\n+  if (iv_incr.incr == nullptr) {\n+    return false;\n+  }\n+\n+  CountedLoopNode::TruncatedIncrement\n+      increment = CountedLoopNode::match_incr_with_optional_truncation(iv_incr.incr, _iv_bt);\n+  if (increment.incr == nullptr) {\n+    return false; \/\/ Funny increment opcode\n+  }\n+  assert(increment.incr->Opcode() == Op_Add(_iv_bt), \"wrong increment code\");\n+\n+  const PhaseIdealLoop::LoopIvStride stride = PhaseIdealLoop::loop_iv_stride(increment.incr);\n+  if (stride.stride == nullptr) {\n+    return false;\n+  }\n+\n+  Node* xphi = stride.xphi;\n+  if (xphi->Opcode() == Op_Cast(_iv_bt)) {\n+    xphi = xphi->in(1);\n+  }\n+\n+  PhiNode* phi = PhaseIdealLoop::loop_iv_phi(xphi, iv_incr.phi_incr, _head);\n+  if (phi == nullptr ||\n+      (increment.trunc1 == nullptr && phi->in(LoopNode::LoopBackControl) != increment.incr) ||\n+      (increment.trunc1 != nullptr && phi->in(LoopNode::LoopBackControl) != increment.trunc1)) {\n+    return false;\n+  }\n+\n+  SafePointNode* sfpt = find_safepoint(back_control);\n+\n+  structure.back_control = back_control;\n+\n+  structure.cmp = exit_test.cmp;\n+  structure.incr = incr;\n+  structure.limit = exit_test.limit;\n+  structure.mask = exit_test.mask;\n+  structure.cl_prob = exit_test.cl_prob;\n+\n+  structure.iv_incr = iv_incr.incr;\n+  structure.phi_incr = iv_incr.phi_incr;\n+\n+  structure.trunc_incr = increment.incr;\n+  structure.trunc1 = increment.trunc1;\n+  structure.trunc2 = increment.trunc2;\n+  structure.trunc_type = increment.trunc_type;\n+\n+  structure.stride = stride.stride;\n+\n+  structure.phi = phi;\n+\n+  structure.sfpt = sfpt;\n+\n+  return true;\n+}\n+\n+bool CountedLoopConverter::is_iv_overflowing(const TypeInteger* init_t, jlong stride_con, Node* phi_increment,\n+                                             BoolTest::mask mask) {\n+  if (stride_con > 0) {\n+    if (init_t->lo_as_long() > max_signed_integer(_iv_bt) - stride_con) {\n+      return true; \/\/ cyclic loop\n+    }\n@@ -2113,3 +2090,87 @@\n-    sfpt = iff->in(0);\n-    if (sfpt->Opcode() != Op_SafePoint) {\n-      sfpt = nullptr;\n+    if (init_t->hi_as_long() < min_signed_integer(_iv_bt) - stride_con) {\n+      return true; \/\/ cyclic loop\n+    }\n+  }\n+\n+  if (phi_increment != nullptr && mask != BoolTest::ne) {\n+    \/\/ check if there is a possibility of IV overflowing after the first increment\n+    if (stride_con > 0) {\n+      if (init_t->hi_as_long() > max_signed_integer(_iv_bt) - stride_con) {\n+        return true;\n+      }\n+    } else {\n+      if (init_t->lo_as_long() < min_signed_integer(_iv_bt) - stride_con) {\n+        return true;\n+      }\n+    }\n+  }\n+\n+  return false;\n+}\n+\n+bool CountedLoopConverter::is_infinite_loop(const Node* increment_trunc1,\n+                                            const TypeInteger* limit_t,\n+                                            const Node* incr) {\n+  PhaseIterGVN& igvn = _phase->igvn();\n+\n+  if (increment_trunc1 != nullptr) {\n+    \/\/ When there is a truncation, we must be sure that after the truncation\n+    \/\/ the trip counter will end up higher than the limit, otherwise we are looking\n+    \/\/ at an endless loop. Can happen with range checks.\n+\n+    \/\/ Example:\n+    \/\/ int i = 0;\n+    \/\/ while (true)\n+    \/\/    sum + = array[i];\n+    \/\/    i++;\n+    \/\/    i = i && 0x7fff;\n+    \/\/  }\n+    \/\/\n+    \/\/ If the array is shorter than 0x8000 this exits through a AIOOB\n+    \/\/  - Counted loop transformation is ok\n+    \/\/ If the array is longer then this is an endless loop\n+    \/\/  - No transformation can be done.\n+\n+    const TypeInteger* incr_t = igvn.type(incr)->is_integer(_iv_bt);\n+    if (limit_t->hi_as_long() > incr_t->hi_as_long()) {\n+      \/\/ if the limit can have a higher value than the increment (before the0 phi)\n+      return true;\n+    }\n+  }\n+\n+  return false;\n+}\n+\n+bool CountedLoopConverter::has_truncation_wrap(Node* increment_trunc1,\n+                                               Node* increment_trunc2,\n+                                               const TypeInteger* trunc_type,\n+                                               Node* phi,\n+                                               jlong stride_con) {\n+  \/\/ If iv trunc type is smaller than int (i.e., short\/char\/byte), check for possible wrap.\n+  if (!TypeInteger::bottom(_iv_bt)->higher_equal(trunc_type)) {\n+    assert(increment_trunc1 != nullptr, \"must have found some truncation\");\n+\n+    \/\/ Get a better type for the phi (filtered thru if's)\n+    const TypeInteger* phi_ft = filtered_type(phi);\n+\n+    \/\/ Can iv take on a value that will wrap?\n+    \/\/\n+    \/\/ Ensure iv's limit is not within \"stride\" of the wrap value.\n+    \/\/\n+    \/\/ Example for \"short\" type\n+    \/\/    Truncation ensures value is in the range -32768..32767 (iv_trunc_t)\n+    \/\/    If the stride is +10, then the last value of the induction\n+    \/\/    variable before the increment (phi_ft->_hi) must be\n+    \/\/    <= 32767 - 10 and (phi_ft->_lo) must be >= -32768 to\n+    \/\/    ensure no truncation occurs after the increment.\n+\n+    if (stride_con > 0) {\n+      if (trunc_type->hi_as_long() - phi_ft->hi_as_long() < stride_con ||\n+          trunc_type->lo_as_long() > phi_ft->lo_as_long()) {\n+        return true;  \/\/ truncation may occur\n+      }\n+    } else if (stride_con < 0) {\n+      if (trunc_type->lo_as_long() - phi_ft->lo_as_long() > stride_con ||\n+          trunc_type->hi_as_long() < phi_ft->hi_as_long()) {\n+        return true;  \/\/ truncation may occur\n+      }\n@@ -2117,0 +2178,7 @@\n+\n+    \/\/ No possibility of wrap so truncation can be discarded\n+    \/\/ Promote iv type to Int\n+  } else {\n+    assert(Type::equals(trunc_type, TypeInt::INT) || Type::equals(trunc_type, TypeLong::LONG),\n+           \"unexpected truncation type\");\n+    assert(increment_trunc1 == nullptr && increment_trunc2 == nullptr, \"no truncation for int\");\n@@ -2119,4 +2187,20 @@\n-  if (x->in(LoopNode::LoopBackControl)->Opcode() == Op_SafePoint) {\n-    Node* backedge_sfpt = x->in(LoopNode::LoopBackControl);\n-    if (((iv_bt == T_INT && LoopStripMiningIter != 0) ||\n-         iv_bt == T_LONG) &&\n+  return false;\n+}\n+\n+SafePointNode* CountedLoopConverter::find_safepoint(Node* iftrue) {\n+  uint iftrue_op = iftrue->Opcode();\n+  Node* iff = iftrue->in(0);\n+\n+  if (_loop->_child == nullptr) {\n+    return _phase->find_safepoint(iftrue, _head, _loop);\n+  } else {\n+    return iff->in(0)->isa_SafePoint();\n+  }\n+}\n+\n+bool CountedLoopConverter::is_safepoint_invalid(SafePointNode* sfpt, Node* iftrue) {\n+  Node* iff = iftrue->in(0);\n+\n+  if (_head->in(LoopNode::LoopBackControl)->Opcode() == Op_SafePoint) {\n+    if (((_iv_bt == T_INT && LoopStripMiningIter != 0) ||\n+        _iv_bt == T_LONG) &&\n@@ -2128,8 +2212,1 @@\n-      return false;\n-    }\n-    if (is_deleteable_safept(backedge_sfpt)) {\n-      lazy_replace(backedge_sfpt, iftrue);\n-      if (loop->_safepts != nullptr) {\n-        loop->_safepts->yank(backedge_sfpt);\n-      }\n-      loop->_tail = iftrue;\n+      return true;\n@@ -2139,0 +2216,2 @@\n+  return false;\n+}\n@@ -2140,0 +2219,1 @@\n+IdealLoopTree* CountedLoopConverter::convert() {\n@@ -2141,7 +2221,1 @@\n-  if (iv_bt == T_INT &&\n-      !x->as_Loop()->is_loop_nest_inner_loop() &&\n-      StressLongCountedLoop > 0 &&\n-      trunc1 == nullptr &&\n-      convert_to_long_loop(cmp, phi, loop)) {\n-    return false;\n-  }\n+  assert(_checked_for_counted_loop, \"must check for counted loop before conversion\");\n@@ -2150,2 +2224,33 @@\n-  Node* adjusted_limit = limit;\n-  if (phi_incr != nullptr) {\n+  PhaseIterGVN* igvn = &_phase->igvn();\n+  Node* init_control = _head->in(LoopNode::EntryControl);\n+\n+  if (_insert_stride_overflow_limit_check) {\n+    Node* cmp_limit = CmpNode::make(_structure.limit, igvn->integercon((_stride_con > 0\n+                                                              ? max_signed_integer(_iv_bt)\n+                                                              : min_signed_integer(_iv_bt))\n+                                                                 - _final_correction, _iv_bt), _iv_bt);\n+    Node* bol = new BoolNode(cmp_limit, _stride_con > 0 ? BoolTest::le : BoolTest::ge);\n+    insert_loop_limit_check_predicate(init_control->as_IfTrue(), cmp_limit, bol);\n+  }\n+\n+  Node* init_trip = _structure.phi->in(LoopNode::EntryControl);\n+  if (_insert_init_trip_limit_check) {\n+    Node* cmp_limit = CmpNode::make(init_trip, _structure.limit, _iv_bt);\n+    Node* bol = new BoolNode(cmp_limit, _stride_con > 0 ? BoolTest::lt : BoolTest::gt);\n+    insert_loop_limit_check_predicate(init_control->as_IfTrue(), cmp_limit, bol);\n+  }\n+\n+  Node* back_control = _phase->loop_exit_control(_head, _loop);\n+  if (_head->in(LoopNode::LoopBackControl)->Opcode() == Op_SafePoint) {\n+    Node* backedge_sfpt = _head->in(LoopNode::LoopBackControl);\n+    if (_phase->is_deleteable_safept(backedge_sfpt)) {\n+      _phase->lazy_replace(backedge_sfpt, back_control);\n+      if (_loop->_safepts != nullptr) {\n+        _loop->_safepts->yank(backedge_sfpt);\n+      }\n+      _loop->_tail = back_control;\n+    }\n+  }\n+\n+  Node* adjusted_limit = _structure.limit;\n+  if (_structure.phi_incr != nullptr) {\n@@ -2161,1 +2266,1 @@\n-    adjusted_limit = gvn->transform(AddNode::make(limit, stride, iv_bt));\n+    adjusted_limit = igvn->transform(AddNode::make(_structure.limit, _structure.stride, _iv_bt));\n@@ -2164,1 +2269,2 @@\n-  if (includes_limit) {\n+  BoolTest::mask mask = _structure.mask;\n+  if (_includes_limit) {\n@@ -2168,6 +2274,6 @@\n-    Node* one = (stride_con > 0) ? gvn->integercon( 1, iv_bt) : gvn->integercon(-1, iv_bt);\n-    adjusted_limit = gvn->transform(AddNode::make(adjusted_limit, one, iv_bt));\n-    if (bt == BoolTest::le)\n-      bt = BoolTest::lt;\n-    else if (bt == BoolTest::ge)\n-      bt = BoolTest::gt;\n+    Node* one = (_stride_con > 0) ? igvn->integercon(1, _iv_bt) : igvn->integercon(-1, _iv_bt);\n+    adjusted_limit = igvn->transform(AddNode::make(adjusted_limit, one, _iv_bt));\n+    if (mask == BoolTest::le)\n+      mask = BoolTest::lt;\n+    else if (mask == BoolTest::ge)\n+      mask = BoolTest::gt;\n@@ -2177,1 +2283,2 @@\n-  set_subtree_ctrl(adjusted_limit, false);\n+  _phase->set_subtree_ctrl(adjusted_limit, false);\n+  _phase->set_subtree_ctrl(adjusted_limit, false);\n@@ -2181,7 +2288,7 @@\n-  incr = incr->clone();\n-  incr->set_req(1,phi);\n-  incr->set_req(2,stride);\n-  incr = _igvn.register_new_node_with_optimizer(incr);\n-  set_early_ctrl(incr, false);\n-  _igvn.rehash_node_delayed(phi);\n-  phi->set_req_X( LoopNode::LoopBackControl, incr, &_igvn );\n+  Node* incr = _structure.trunc_incr->clone();\n+  incr->set_req(1, _structure.phi);\n+  incr->set_req(2, _structure.stride);\n+  incr = igvn->register_new_node_with_optimizer(incr);\n+  _phase->set_early_ctrl(incr, false);\n+  igvn->rehash_node_delayed(_structure.phi);\n+  _structure.phi->set_req_X(LoopNode::LoopBackControl, incr, igvn);\n@@ -2192,6 +2299,8 @@\n-  if (!TypeInteger::bottom(iv_bt)->higher_equal(phi->bottom_type())) {\n-    Node* nphi = PhiNode::make(phi->in(0), phi->in(LoopNode::EntryControl), TypeInteger::bottom(iv_bt));\n-    nphi->set_req(LoopNode::LoopBackControl, phi->in(LoopNode::LoopBackControl));\n-    nphi = _igvn.register_new_node_with_optimizer(nphi);\n-    set_ctrl(nphi, get_ctrl(phi));\n-    _igvn.replace_node(phi, nphi);\n+  Node* phi = _structure.phi;\n+  if (!TypeInteger::bottom(_iv_bt)->higher_equal(_structure.phi->bottom_type())) {\n+    Node* nphi =\n+        PhiNode::make(_structure.phi->in(0), _structure.phi->in(LoopNode::EntryControl), TypeInteger::bottom(_iv_bt));\n+    nphi->set_req(LoopNode::LoopBackControl, _structure.phi->in(LoopNode::LoopBackControl));\n+    nphi = igvn->register_new_node_with_optimizer(nphi);\n+    _phase->set_ctrl(nphi, _phase->get_ctrl(phi));\n+    igvn->replace_node(_structure.phi, nphi);\n@@ -2200,2 +2309,7 @@\n-  cmp = cmp->clone();\n-  cmp->set_req(1,incr);\n+\n+  Node* iftrue = back_control;\n+  const uint iftrue_op = iftrue->Opcode();\n+  Node* iff = iftrue->in(0);\n+  Node* cmp = _structure.cmp->clone();\n+\n+  cmp->set_req(1, incr);\n@@ -2203,2 +2317,2 @@\n-  cmp = _igvn.register_new_node_with_optimizer(cmp);\n-  set_ctrl(cmp, iff->in(0));\n+  cmp = igvn->register_new_node_with_optimizer(cmp);\n+  _phase->set_ctrl(cmp, iff->in(0));\n@@ -2206,5 +2320,5 @@\n-  test = test->clone()->as_Bool();\n-  (*(BoolTest*)&test->_test)._test = bt;\n-  test->set_req(1,cmp);\n-  _igvn.register_new_node_with_optimizer(test);\n-  set_ctrl(test, iff->in(0));\n+  BoolNode* test = iff->in(1)->clone()->as_Bool();\n+  const_cast<BoolTest*>(&test->_test)->_test = mask; \/\/ Yes, it's a const, but it's a newly cloned node so we should be fine.\n+  test->set_req(1, cmp);\n+  igvn->register_new_node_with_optimizer(test);\n+  _phase->set_ctrl(test, iff->in(0));\n@@ -2213,5 +2327,9 @@\n-  Node *lex = _igvn.register_new_node_with_optimizer(BaseCountedLoopEndNode::make(iff->in(0), test, cl_prob, iff->as_If()->_fcnt, iv_bt));\n-  IfNode *le = lex->as_If();\n-  uint dd = dom_depth(iff);\n-  set_idom(le, le->in(0), dd); \/\/ Update dominance for loop exit\n-  set_loop(le, loop);\n+  Node* lex = igvn->register_new_node_with_optimizer(BaseCountedLoopEndNode::make(iff->in(0),\n+                                                                                  test,\n+                                                                                  _structure.cl_prob,\n+                                                                                  iff->as_If()->_fcnt,\n+                                                                                  _iv_bt));\n+  IfNode* le = lex->as_If();\n+  const uint dd = _phase->dom_depth(iff);\n+  _phase->set_idom(le, le->in(0), dd); \/\/ Update dominance for loop exit\n+  _phase->set_loop(le, _loop);\n@@ -2220,1 +2338,1 @@\n-  Node *iffalse = iff->as_If()->proj_out(!(iftrue_op == Op_IfTrue));\n+  Node* iffalse = iff->as_If()->proj_out(!(iftrue_op == Op_IfTrue));\n@@ -2222,1 +2340,1 @@\n-  \/\/ Need to swap loop-exit and loop-back control?\n+\/\/ Need to swap loop-exit and loop-back control?\n@@ -2224,2 +2342,2 @@\n-    Node *ift2=_igvn.register_new_node_with_optimizer(new IfTrueNode (le));\n-    Node *iff2=_igvn.register_new_node_with_optimizer(new IfFalseNode(le));\n+    Node* ift2 = igvn->register_new_node_with_optimizer(new IfTrueNode(le));\n+    Node* iff2 = igvn->register_new_node_with_optimizer(new IfFalseNode(le));\n@@ -2227,3 +2345,3 @@\n-    loop->_tail = back_control = ift2;\n-    set_loop(ift2, loop);\n-    set_loop(iff2, get_loop(iffalse));\n+    _loop->_tail = back_control = ift2;\n+    _phase->set_loop(ift2, _loop);\n+    _phase->set_loop(iff2, _phase->get_loop(iffalse));\n@@ -2232,2 +2350,2 @@\n-    lazy_replace(iffalse, iff2);\n-    lazy_replace(iftrue,  ift2);\n+    _phase->lazy_replace(iffalse, iff2);\n+    _phase->lazy_replace(iftrue, ift2);\n@@ -2237,1 +2355,1 @@\n-    iftrue  = ift2;\n+    iftrue = ift2;\n@@ -2239,4 +2357,4 @@\n-    _igvn.rehash_node_delayed(iffalse);\n-    _igvn.rehash_node_delayed(iftrue);\n-    iffalse->set_req_X( 0, le, &_igvn );\n-    iftrue ->set_req_X( 0, le, &_igvn );\n+    igvn->rehash_node_delayed(iffalse);\n+    igvn->rehash_node_delayed(iftrue);\n+    iffalse->set_req_X(0, le, igvn);\n+    iftrue->set_req_X(0, le, igvn);\n@@ -2245,2 +2363,2 @@\n-  set_idom(iftrue,  le, dd+1);\n-  set_idom(iffalse, le, dd+1);\n+  _phase->set_idom(iftrue, le, dd + 1);\n+  _phase->set_idom(iffalse, le, dd + 1);\n@@ -2248,1 +2366,1 @@\n-  lazy_replace( iff, le ); \/\/ fix 'get_ctrl'\n+  _phase->lazy_replace(iff, le); \/\/ fix 'get_ctrl'\n@@ -2251,5 +2369,5 @@\n-  bool strip_mine_loop = iv_bt == T_INT &&\n-                         loop->_child == nullptr &&\n-                         sfpt != nullptr &&\n-                         !loop->_has_call &&\n-                         is_deleteable_safept(sfpt);\n+  bool strip_mine_loop = _iv_bt == T_INT &&\n+      _loop->_child == nullptr &&\n+      _structure.sfpt != nullptr &&\n+      !_loop->_has_call &&\n+      _phase->is_deleteable_safept(_structure.sfpt);\n@@ -2258,3 +2376,6 @@\n-    outer_ilt = create_outer_strip_mined_loop(test, cmp, init_control, loop,\n-                                              cl_prob, le->_fcnt, entry_control,\n-                                              iffalse);\n+    outer_ilt = _phase->create_outer_strip_mined_loop(init_control,\n+                                                      _loop,\n+                                                      _structure.cl_prob,\n+                                                      le->_fcnt,\n+                                                      entry_control,\n+                                                      iffalse);\n@@ -2264,2 +2385,2 @@\n-  BaseCountedLoopNode *l = BaseCountedLoopNode::make(entry_control, back_control, iv_bt);\n-  l->set_unswitch_count(x->as_Loop()->unswitch_count()); \/\/ Preserve\n+  BaseCountedLoopNode* l = BaseCountedLoopNode::make(entry_control, back_control, _iv_bt);\n+  l->set_unswitch_count(_head->as_Loop()->unswitch_count()); \/\/ Preserve\n@@ -2270,3 +2391,3 @@\n-  _igvn.register_new_node_with_optimizer(l);\n-  set_loop(l, loop);\n-  loop->_head = l;\n+  igvn->register_new_node_with_optimizer(l);\n+  _phase->set_loop(l, _loop);\n+  _loop->_head = l;\n@@ -2275,2 +2396,2 @@\n-  lazy_replace( x, l );\n-  set_idom(l, entry_control, dom_depth(entry_control) + 1);\n+  _phase->lazy_replace(_head, l);\n+  _phase->set_idom(l, entry_control, _phase->dom_depth(entry_control) + 1);\n@@ -2278,1 +2399,1 @@\n-  if (iv_bt == T_INT && (LoopStripMiningIter == 0 || strip_mine_loop)) {\n+  if (_iv_bt == T_INT && (LoopStripMiningIter == 0 || strip_mine_loop)) {\n@@ -2280,1 +2401,1 @@\n-    if (sfpt != nullptr && (strip_mine_loop || is_deleteable_safept(sfpt))) {\n+    if (_structure.sfpt != nullptr && (strip_mine_loop || _phase->is_deleteable_safept(_structure.sfpt))) {\n@@ -2283,1 +2404,1 @@\n-        Node* sfpt_clone = sfpt->clone();\n+        Node* sfpt_clone = _structure.sfpt->clone();\n@@ -2292,2 +2413,2 @@\n-          _igvn.register_new_node_with_optimizer(new_polladdr, polladdr);\n-          set_ctrl(new_polladdr, iffalse);\n+          igvn->register_new_node_with_optimizer(new_polladdr, polladdr);\n+          _phase->set_ctrl(new_polladdr, iffalse);\n@@ -2298,2 +2419,2 @@\n-        register_control(sfpt_clone, outer_ilt, iffalse, body_populated);\n-        set_idom(outer_le, sfpt_clone, dom_depth(sfpt_clone));\n+        _phase->register_control(sfpt_clone, outer_ilt, iffalse, body_populated);\n+        _phase->set_idom(outer_le, sfpt_clone, _phase->dom_depth(sfpt_clone));\n@@ -2301,3 +2422,3 @@\n-      lazy_replace(sfpt, sfpt->in(TypeFunc::Control));\n-      if (loop->_safepts != nullptr) {\n-        loop->_safepts->yank(sfpt);\n+      _phase->lazy_replace(_structure.sfpt, _structure.sfpt->in(TypeFunc::Control));\n+      if (_loop->_safepts != nullptr) {\n+        _loop->_safepts->yank(_structure.sfpt);\n@@ -2309,2 +2430,2 @@\n-  assert(l->is_valid_counted_loop(iv_bt), \"counted loop shape is messed up\");\n-  assert(l == loop->_head && l->phi() == phi && l->loopexit_or_null() == lex, \"\" );\n+  assert(l->is_valid_counted_loop(_iv_bt), \"counted loop shape is messed up\");\n+  assert(l == _loop->_head && l->phi() == phi && l->loopexit_or_null() == lex, \"\" );\n@@ -2312,0 +2433,1 @@\n+\n@@ -2315,1 +2437,1 @@\n-    loop->dump_head();\n+    _loop->dump_head();\n@@ -2319,1 +2441,1 @@\n-  C->print_method(PHASE_AFTER_CLOOPS, 3, l);\n+  _phase->C->print_method(PHASE_AFTER_CLOOPS, 3, l);\n@@ -2324,1 +2446,1 @@\n-  l->phi()->as_Phi()->set_type(l->phi()->Value(&_igvn));\n+  l->phi()->as_Phi()->set_type(l->phi()->Value(igvn));\n@@ -2326,0 +2448,1 @@\n+  IdealLoopTree* loop = _loop;\n@@ -2334,1 +2457,1 @@\n-  if (x->as_Loop()->is_loop_nest_inner_loop() && iv_bt == T_LONG) {\n+  if (_head->as_Loop()->is_loop_nest_inner_loop() && _iv_bt == T_LONG) {\n@@ -2338,1 +2461,2 @@\n-  if (iv_bt == T_LONG && x->as_Loop()->is_loop_nest_outer_loop()) {\n+\n+  if (_iv_bt == T_LONG && _head->as_Loop()->is_loop_nest_outer_loop()) {\n@@ -2342,1 +2466,1 @@\n-  return true;\n+  return loop;\n@@ -2347,1 +2471,1 @@\n-bool PhaseIdealLoop::has_dominating_loop_limit_check(Node* init_trip, Node* limit, const jlong stride_con,\n+bool CountedLoopConverter::has_dominating_loop_limit_check(Node* init_trip, Node* limit, const jlong stride_con,\n@@ -2349,0 +2473,2 @@\n+  PhaseIterGVN& _igvn = _phase->igvn();\n+\n@@ -2371,2 +2497,2 @@\n-  _igvn.replace_input_of(iff, 0, C->top());\n-  _igvn.replace_input_of(iff, 1, C->top());\n+  _igvn.replace_input_of(iff, 0, _phase->C->top());\n+  _igvn.replace_input_of(iff, 1, _phase->C->top());\n@@ -2680,3 +2806,1 @@\n-Node* CountedLoopNode::match_incr_with_optional_truncation(Node* expr, Node** trunc1, Node** trunc2,\n-                                                           const TypeInteger** trunc_type,\n-                                                           BasicType bt) {\n+CountedLoopNode::TruncatedIncrement CountedLoopNode::match_incr_with_optional_truncation(Node* expr, BasicType bt) {\n@@ -2684,1 +2808,1 @@\n-  if (expr == nullptr || expr->req() != 3)  return nullptr;\n+  if (expr == nullptr || expr->req() != 3)  return TruncatedIncrement{};\n@@ -2725,4 +2849,1 @@\n-    *trunc1 = t1;\n-    *trunc2 = t2;\n-    *trunc_type = trunc_t;\n-    return n1;\n+    return TruncatedIncrement{n1, t1, t2, trunc_t};\n@@ -2732,1 +2853,1 @@\n-  return nullptr;\n+  return TruncatedIncrement{};\n@@ -3302,1 +3423,1 @@\n-const TypeInt* PhaseIdealLoop::filtered_type( Node *n, Node* n_ctrl) {\n+const TypeInt* CountedLoopConverter::filtered_type(Node* n, Node* n_ctrl) {\n@@ -3306,1 +3427,1 @@\n-    assert(n_ctrl != nullptr || n_ctrl == C->top(), \"valid control\");\n+    assert(n_ctrl != nullptr || n_ctrl == _phase->C->top(), \"valid control\");\n@@ -3313,1 +3434,1 @@\n-    if (region && region != C->top()) {\n+    if (region && region != _phase->C->top()) {\n@@ -3328,1 +3449,1 @@\n-  const TypeInt* n_t = _igvn.type(n)->is_int();\n+  const TypeInt* n_t = _phase->igvn().type(n)->is_int();\n@@ -3338,1 +3459,1 @@\n-const TypeInt* PhaseIdealLoop::filtered_type_from_dominators( Node* val, Node *use_ctrl) {\n+const TypeInt* CountedLoopConverter::filtered_type_from_dominators(Node* val, Node* use_ctrl) {\n@@ -3345,3 +3466,3 @@\n-  if (use_ctrl && use_ctrl != C->top()) {\n-    Node* val_ctrl = get_ctrl(val);\n-    uint val_dom_depth = dom_depth(val_ctrl);\n+  if (use_ctrl && use_ctrl != _phase->C->top()) {\n+    Node* val_ctrl = _phase->get_ctrl(val);\n+    uint val_dom_depth = _phase->dom_depth(val_ctrl);\n@@ -3353,1 +3474,1 @@\n-        const TypeInt* if_t = IfNode::filtered_int_type(&_igvn, val, pred);\n+        const TypeInt* if_t = IfNode::filtered_int_type(&_phase->igvn(), val, pred);\n@@ -3362,2 +3483,2 @@\n-      pred = idom(pred);\n-      if (pred == nullptr || pred == C->top()) {\n+      pred = _phase->idom(pred);\n+      if (pred == nullptr || pred == _phase->C->top()) {\n@@ -3367,1 +3488,1 @@\n-      if (dom_depth(pred) < val_dom_depth) {\n+      if (_phase->dom_depth(pred) < val_dom_depth) {\n@@ -3952,1 +4073,1 @@\n-bool PhaseIdealLoop::is_deleteable_safept(Node* sfpt) {\n+bool PhaseIdealLoop::is_deleteable_safept(Node* sfpt) const {\n@@ -4171,1 +4292,1 @@\n-      phase->is_counted_loop(_head, loop, T_INT)) {\n+      phase->try_convert_to_counted_loop(_head, loop, T_INT)) {\n@@ -4185,1 +4306,1 @@\n-             phase->is_counted_loop(_head, loop, T_LONG)) {\n+      phase->try_convert_to_counted_loop(_head, loop, T_LONG)) {\n@@ -4977,1 +5098,2 @@\n-volatile int PhaseIdealLoop::_long_loop_counted_loops=0; \/\/ Number of long loops successfully transformed to a counted loop\n+volatile int CountedLoopConverter::_long_loop_counted_loops = 0; \/\/ Number of long loops successfully transformed to a\n+                                                                 \/\/ counted loop\n@@ -4979,1 +5101,6 @@\n-  tty->print_cr(\"PhaseIdealLoop=%d, sum _unique=%d, long loops=%d\/%d\/%d\", _loop_invokes, _loop_work, _long_loop_counted_loops, _long_loop_nests, _long_loop_candidates);\n+  tty->print_cr(\"PhaseIdealLoop=%d, sum _unique=%d, long loops=%d\/%d\/%d\",\n+                _loop_invokes,\n+                _loop_work,\n+                CountedLoopConverter::_long_loop_counted_loops,\n+                _long_loop_nests,\n+                _long_loop_candidates);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":568,"deletions":441,"binary":false,"changes":1009,"status":"modified"},{"patch":"@@ -261,3 +261,7 @@\n-  static Node*\n-  match_incr_with_optional_truncation(Node* expr, Node** trunc1, Node** trunc2, const TypeInteger** trunc_type,\n-                                      BasicType bt);\n+  struct TruncatedIncrement {\n+    Node* incr = nullptr;\n+    Node* trunc1 = nullptr;\n+    Node* trunc2 = nullptr;\n+    const TypeInteger* trunc_type = nullptr;\n+  };\n+  static TruncatedIncrement match_incr_with_optional_truncation(Node* expr, BasicType bt);\n@@ -1004,2 +1008,0 @@\n-  void insert_loop_limit_check_predicate(ParsePredicateSuccessProj* loop_limit_check_parse_proj, Node* cmp_limit,\n-                                         Node* bol);\n@@ -1218,1 +1220,1 @@\n-  bool is_deleteable_safept(Node* sfpt);\n+  bool is_deleteable_safept(Node* sfpt) const;\n@@ -1269,5 +1271,10 @@\n-  Node* loop_exit_control(Node* x, IdealLoopTree* loop);\n-  Node* loop_exit_test(Node* back_control, IdealLoopTree* loop, Node*& incr, Node*& limit, BoolTest::mask& bt, float& cl_prob);\n-  Node* loop_iv_incr(Node* incr, Node* x, IdealLoopTree* loop, Node*& phi_incr);\n-  Node* loop_iv_stride(Node* incr, IdealLoopTree* loop, Node*& xphi);\n-  PhiNode* loop_iv_phi(Node* xphi, Node* phi_incr, Node* x, IdealLoopTree* loop);\n+  Node* loop_exit_control(const Node* head, const IdealLoopTree* loop) const;\n+\n+  struct LoopExitTest {\n+    CmpNode* cmp = nullptr;\n+    Node* incr = nullptr;\n+    Node* limit = nullptr;\n+    const BoolTest::mask mask = BoolTest::illegal;\n+    const float cl_prob = 0.0f;\n+  };\n+  LoopExitTest loop_exit_test(const Node* back_control, const IdealLoopTree* loop);\n@@ -1275,1 +1282,15 @@\n-  bool is_counted_loop(Node* x, IdealLoopTree*&loop, BasicType iv_bt);\n+  struct LoopIVIncr {\n+    Node* incr = nullptr;\n+    Node* phi_incr = nullptr;\n+  };\n+  static LoopIVIncr loop_iv_incr(Node* old_incr, const Node* head, const IdealLoopTree* loop);\n+\n+  struct LoopIvStride {\n+    Node* stride = nullptr;\n+    Node* xphi = nullptr;\n+  };\n+  static LoopIvStride loop_iv_stride(const Node* incr);\n+\n+  static PhiNode* loop_iv_phi(const Node* xphi, const Node* phi_incr, const Node* head);\n+\n+  bool try_convert_to_counted_loop(Node* head, IdealLoopTree*&loop, const BasicType iv_bt);\n@@ -1279,3 +1300,1 @@\n-#ifdef ASSERT\n-  bool convert_to_long_loop(Node* cmp, Node* phi, IdealLoopTree* loop);\n-#endif\n+\n@@ -1283,1 +1302,1 @@\n-  SafePointNode* find_safepoint(Node* back_control, Node* x, IdealLoopTree* loop);\n+  SafePointNode* find_safepoint(Node* back_control, const Node* head, const IdealLoopTree* loop);\n@@ -1285,2 +1304,1 @@\n-  IdealLoopTree* create_outer_strip_mined_loop(BoolNode *test, Node *cmp, Node *init_control,\n-                                               IdealLoopTree* loop, float cl_prob, float le_fcnt,\n+  IdealLoopTree* create_outer_strip_mined_loop(Node* init_control, IdealLoopTree* loop, float cl_prob, float le_fcnt,\n@@ -1408,2 +1426,0 @@\n-  bool has_dominating_loop_limit_check(Node* init_trip, Node* limit, jlong stride_con, BasicType iv_bt,\n-                                       Node* loop_entry);\n@@ -1611,6 +1627,0 @@\n-  \/\/ Return a type based on condition control flow\n-  const TypeInt* filtered_type( Node *n, Node* n_ctrl);\n-  const TypeInt* filtered_type( Node *n ) { return filtered_type(n, nullptr); }\n- \/\/ Helpers for filtered type\n-  const TypeInt* filtered_type_from_dominators( Node* val, Node *val_ctrl);\n-\n@@ -1745,1 +1755,0 @@\n-  static volatile int _long_loop_counted_loops;\n@@ -1829,0 +1838,91 @@\n+class CountedLoopConverter {\n+  friend class PhaseIdealLoop;\n+\n+  PhaseIdealLoop* const _phase;\n+  Node* const _head;\n+  IdealLoopTree* const _loop;\n+  const BasicType _iv_bt;\n+\n+#ifdef ASSERT\n+  bool _checked_for_counted_loop = false;\n+#endif\n+\n+  \/\/ stats for PhaseIdealLoop::print_statistics()\n+  static volatile int _long_loop_counted_loops;\n+\n+  struct LoopStructure {\n+    Node* back_control;\n+\n+    CmpNode* cmp;\n+    Node* incr;\n+    Node* limit;\n+    BoolTest::mask mask;\n+    float cl_prob;\n+\n+    Node* iv_incr;\n+    Node* phi_incr;\n+\n+    Node* trunc_incr;\n+    Node* trunc1;\n+    Node* trunc2;\n+    const TypeInteger* trunc_type;\n+\n+    Node* stride;\n+\n+    PhiNode* phi;\n+\n+    SafePointNode* sfpt;\n+  };\n+\n+  LoopStructure _structure{};\n+\n+  bool _includes_limit = false;\n+  jlong _stride_con = 0;\n+  jlong _final_correction = 0;\n+\n+  bool _insert_stride_overflow_limit_check = false;\n+  bool _insert_init_trip_limit_check = false;\n+\n+  \/\/ Return a type based on condition control flow\n+  const TypeInt* filtered_type(Node* n, Node* n_ctrl);\n+  const TypeInt* filtered_type(Node* n) { return filtered_type(n, nullptr); }\n+  \/\/ Helpers for filtered type\n+  const TypeInt* filtered_type_from_dominators(Node* val, Node* val_ctrl);\n+\n+  void insert_loop_limit_check_predicate(const ParsePredicateSuccessProj* loop_limit_check_parse_proj, Node* cmp_limit,\n+                                         Node* bol);\n+  bool has_dominating_loop_limit_check(Node* init_trip, Node* limit, jlong stride_con, BasicType iv_bt,\n+                                       Node* loop_entry);\n+\n+  bool build_loop_structure(LoopStructure& structure);\n+\n+  bool is_iv_overflowing(const TypeInteger* init_t, jlong stride_con, Node* phi_increment, BoolTest::mask mask);\n+  bool is_infinite_loop(const Node* increment_trunc1, const TypeInteger* limit_t, const Node* incr);\n+  bool has_truncation_wrap(Node* increment_trunc1,\n+                           Node* increment_trunc2,\n+                           const TypeInteger* trunc_type,\n+                           Node* phi,\n+                           jlong stride_con);\n+  SafePointNode* find_safepoint(Node* iftrue);\n+  bool is_safepoint_invalid(SafePointNode* sfpt, Node* iftrue);\n+\n+ public:\n+  CountedLoopConverter(PhaseIdealLoop* phase, Node* head, IdealLoopTree* loop, const BasicType iv_bt)\n+      : _phase(phase),\n+        _head(head),\n+        _loop(loop),\n+        _iv_bt(iv_bt) {\n+    assert(phase != nullptr, \"\"); \/\/ Fail early if mandatory parameters are null.\n+    assert(head != nullptr, \"\");\n+    assert(loop != nullptr, \"\");\n+    assert(iv_bt == T_INT || iv_bt == T_LONG, \"\"); \/\/ Loops can be either int or long.\n+  }\n+\n+  bool is_counted_loop();\n+  IdealLoopTree* convert();\n+\n+#ifdef ASSERT\n+  bool should_stress_long_counted_loop() const;\n+  bool stress_long_counted_loop() const;\n+#endif\n+};\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":127,"deletions":27,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -2844,4 +2844,3 @@\n-      Node* add = CountedLoopNode::match_incr_with_optional_truncation(in,\n-                                &trunc1, &trunc2, &ttype, T_INT);\n-      if (add && add->in(1) == phi) {\n-        add2 = add->in(2);\n+      CountedLoopNode::TruncatedIncrement add = CountedLoopNode::match_incr_with_optional_truncation(in, T_INT);\n+      if (add.incr != nullptr && add.incr->in(1) == phi) {\n+        add2 = add.incr->in(2);\n@@ -2854,4 +2853,3 @@\n-    Node* add = CountedLoopNode::match_incr_with_optional_truncation(addtrunc,\n-                                &trunc1, &trunc2, &ttype, T_INT);\n-    if (add && add->in(1)->is_Phi()) {\n-      Node* phi = add->in(1);\n+    CountedLoopNode::TruncatedIncrement add = CountedLoopNode::match_incr_with_optional_truncation(addtrunc, T_INT);\n+    if (add.incr != nullptr && add.incr->in(1)->is_Phi()) {\n+      Node* phi = add.incr->in(1);\n@@ -2860,1 +2858,1 @@\n-          add2 = add->in(2);\n+          add2 = add.incr->in(2);\n@@ -4264,6 +4262,2 @@\n-    BoolTest::mask bt = BoolTest::illegal;\n-    float cl_prob = 0;\n-    Node* incr = nullptr;\n-    Node* limit = nullptr;\n-    Node* cmp = loop_exit_test(back_control, loop, incr, limit, bt, cl_prob);\n-    if (cmp == nullptr || cmp->Opcode() != Op_CmpI) {\n+    LoopExitTest loop_exit = loop_exit_test(back_control, loop);\n+    if (loop_exit.cmp == nullptr || loop_exit.cmp->Opcode() != Op_CmpI) {\n@@ -4275,1 +4269,1 @@\n-    if (!incr->is_Phi() || incr->in(0) == head) {\n+    if (!loop_exit.incr->is_Phi() || loop_exit.incr->in(0) == head) {\n@@ -4280,1 +4274,1 @@\n-    region = incr->in(0);\n+    region = loop_exit.incr->in(0);\n@@ -4286,7 +4280,3 @@\n-    for (uint i = 1; i < incr->req(); ++i) {\n-      Node* in = incr->in(i);\n-      Node* trunc1 = nullptr;\n-      Node* trunc2 = nullptr;\n-      const TypeInteger* iv_trunc_t = nullptr;\n-      Node* orig_in = in;\n-      if (!(in = CountedLoopNode::match_incr_with_optional_truncation(in, &trunc1, &trunc2, &iv_trunc_t, T_INT))) {\n+    for (uint i = 1; i < loop_exit.incr->req(); ++i) {\n+      CountedLoopNode::TruncatedIncrement increment = CountedLoopNode::match_incr_with_optional_truncation(loop_exit.incr->in(i), T_INT);\n+      if (increment.incr == nullptr) {\n@@ -4295,3 +4285,2 @@\n-      assert(in->Opcode() == Op_AddI, \"wrong increment code\");\n-      Node* xphi = nullptr;\n-      Node* stride = loop_iv_stride(in, loop, xphi);\n+      assert(increment.incr->Opcode() == Op_AddI, \"wrong increment code\");\n+      LoopIvStride stride = loop_iv_stride(increment.incr);\n@@ -4299,1 +4288,1 @@\n-      if (stride == nullptr) {\n+      if (stride.stride == nullptr) {\n@@ -4303,1 +4292,1 @@\n-      PhiNode* phi = loop_iv_phi(xphi, nullptr, head, loop);\n+      PhiNode* phi = loop_iv_phi(stride.xphi, nullptr, head);\n@@ -4305,2 +4294,2 @@\n-          (trunc1 == nullptr && phi->in(LoopNode::LoopBackControl) != incr) ||\n-          (trunc1 != nullptr && phi->in(LoopNode::LoopBackControl) != trunc1)) {\n+          (increment.trunc1 == nullptr && phi->in(LoopNode::LoopBackControl) != loop_exit.incr) ||\n+          (increment.trunc1 != nullptr && phi->in(LoopNode::LoopBackControl) != increment.trunc1)) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":20,"deletions":31,"binary":false,"changes":51,"status":"modified"}]}