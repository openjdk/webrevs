{"files":[{"patch":"@@ -379,0 +379,1 @@\n+\n@@ -380,1 +381,1 @@\n-                                                       Node* cmp_limit, Node* bol) {\n+                                                             Node* cmp_limit, Node* bol) const {\n@@ -1644,2 +1645,2 @@\n-  LoopIVIncr iv_incr(exit_test.incr(), x, loop);\n-  iv_incr.build();\n+  LoopIVIncr iv_incr(x, loop);\n+  iv_incr.build(exit_test.incr());\n@@ -1648,2 +1649,2 @@\n-  LoopIVStride stride(iv_incr.incr());\n-  stride.build();\n+  LoopIVStride stride = LoopIVStride();\n+  stride.build(iv_incr.incr());\n@@ -1666,2 +1667,3 @@\n-\/\/------------------------------Counted Loop Structures-----------------------------\n-bool PhaseIdealLoop::LoopExitTest::build() {\n+void PhaseIdealLoop::LoopExitTest::build() {\n+  _is_valid = false;\n+\n@@ -1681,1 +1683,1 @@\n-    return false;\n+    return;\n@@ -1693,1 +1695,1 @@\n-    swap(_incr, _limit);                \/\/ Then reverse order into the CmpI\n+    swap(_incr, _limit);   \/\/ Then reverse order into the CmpI\n@@ -1697,1 +1699,1 @@\n-    return false;\n+    return;\n@@ -1700,1 +1702,1 @@\n-    return false;\n+    return;\n@@ -1704,1 +1706,0 @@\n-  return true;\n@@ -1733,3 +1734,9 @@\n-bool PhaseIdealLoop::LoopIVIncr::build() {\n-  Node* incr = _old_incr;\n-  if (incr->is_Phi() && incr->as_Phi()->region() == _head && incr->req() == 3) { \/\/ Requires simple trip counter expression\n+void PhaseIdealLoop::LoopIVIncr::build(Node* old_incr) {\n+  _is_valid = false;\n+\n+  Node* incr = old_incr;\n+  \/\/ Trip-counter increment must be commutative & associative.\n+  if (incr->is_Phi()) { \/\/ Requires simple trip counter expression\n+    if (incr->as_Phi()->region() == _head && incr->req() == 3) {\n+      return;\n+    }\n@@ -1741,1 +1748,0 @@\n-\n@@ -1743,1 +1749,1 @@\n-      return true;\n+      return;\n@@ -1750,1 +1756,0 @@\n-  return true;\n@@ -1753,2 +1758,4 @@\n-bool PhaseIdealLoop::LoopIVStride::build() {\n-  assert(_incr->Opcode() == Op_AddI || _incr->Opcode() == Op_AddL, \"caller resp.\");\n+void PhaseIdealLoop::LoopIVStride::build(const Node* incr) {\n+  _is_valid = false;\n+\n+  assert(incr->Opcode() == Op_AddI || incr->Opcode() == Op_AddL, \"caller resp.\");\n@@ -1756,2 +1763,2 @@\n-  _xphi = _incr->in(1);\n-  _node = _incr->in(2);\n+  _xphi = incr->in(1);\n+  _node = incr->in(2);\n@@ -1760,1 +1767,1 @@\n-      return false;            \/\/ Nope, unknown stride, bail out\n+      return;            \/\/ Nope, unknown stride, bail out\n@@ -1767,1 +1774,0 @@\n-  return true;\n@@ -1794,2 +1800,3 @@\n-\/\/------------------------------CountedLoopConverter--------------------------------\n-bool CountedLoopConverter::LoopStructure::build() {\n+void CountedLoopConverter::LoopStructure::build() {\n+  _is_valid = false;\n+\n@@ -1798,1 +1805,1 @@\n-    return false;\n+    return;\n@@ -1801,1 +1808,0 @@\n-  _exit_test = PhaseIdealLoop::LoopExitTest(_back_control, _loop, _phase);\n@@ -1804,1 +1810,1 @@\n-    return false; \/\/ Avoid pointer & float & 64-bit compares\n+    return; \/\/ Avoid pointer & float & 64-bit compares\n@@ -1812,4 +1818,3 @@\n-  _iv_incr = PhaseIdealLoop::LoopIVIncr(incr, _head, _loop);\n-  _iv_incr.build();\n-  if (_iv_incr.incr() == nullptr) {\n-    return false;\n+  _iv_incr.build(incr);\n+  if (!_iv_incr.is_valid_with_bt(_iv_bt)) {\n+    return;\n@@ -1818,2 +1823,1 @@\n-  _truncated_increment = CountedLoopNode::TruncatedIncrement(_iv_incr.incr(), _iv_bt);\n-  _truncated_increment.build();\n+  _truncated_increment.build(_iv_incr.incr());\n@@ -1821,1 +1825,1 @@\n-    return false; \/\/ Funny increment opcode\n+    return; \/\/ Funny increment opcode\n@@ -1825,2 +1829,1 @@\n-  _stride = PhaseIdealLoop::LoopIVStride(_truncated_increment.incr());\n-  _stride.build();\n+  _stride.build(_truncated_increment.incr());\n@@ -1828,1 +1831,1 @@\n-    return false;\n+    return;\n@@ -1840,4 +1843,4 @@\n-      (_truncated_increment.trunc1() == nullptr && _phi->in(LoopNode::LoopBackControl) != _truncated_increment.incr()) ||\n-      (_truncated_increment.trunc1() != nullptr && _phi->in(LoopNode::LoopBackControl) != _truncated_increment.trunc1())) {\n-    return false;\n-      }\n+      (_truncated_increment.outer_trunc() == nullptr && _phi->in(LoopNode::LoopBackControl) != _truncated_increment.incr()) ||\n+      (_truncated_increment.outer_trunc() != nullptr && _phi->in(LoopNode::LoopBackControl) != _truncated_increment.outer_trunc())) {\n+    return;\n+  }\n@@ -1845,3 +1848,6 @@\n-  _sfpt = _loop->_child == nullptr\n-                          ? _phase->find_safepoint(_back_control, _head, _loop)\n-                          : _back_control->in(0)->in(0)->isa_SafePoint();\n+  Node* sfpt = _back_control->in(0)->in(0);\n+  if (_loop->_child != nullptr && sfpt->Opcode() == Op_SafePoint) {\n+    _sfpt = sfpt->as_SafePoint();\n+  } else {\n+    _sfpt = _phase->find_safepoint(_back_control, _head, _loop);\n+  }\n@@ -1850,1 +1856,0 @@\n-  return true;\n@@ -2028,1 +2033,0 @@\n-  _structure = LoopStructure(_head, _loop, _phase, _iv_bt);\n@@ -2039,1 +2043,1 @@\n-  if (is_infinite_loop(_structure.truncated_increment().trunc1(), limit_t, _structure.iv_incr().incr())) {\n+  if (_structure.is_infinite_loop(limit_t)) {\n@@ -2132,0 +2136,5 @@\n+  \/\/ If that is not the case, we need to canonicalize the loop exit check by using different values for adjusted_limit\n+  \/\/ (see LoopStructure::final_limit_correction()).\n+  \/\/ Note that after canonicalization:\n+  \/\/     (AL) limit <= adjusted_limit.\n+  \/\/\n@@ -2377,3 +2386,1 @@\n-bool CountedLoopConverter::is_infinite_loop(const Node* increment_trunc1,\n-                                            const TypeInteger* limit_t,\n-                                            const Node* incr) const {\n+bool CountedLoopConverter::LoopStructure::is_infinite_loop(const TypeInteger* limit_t) const {\n@@ -2382,1 +2389,1 @@\n-  if (increment_trunc1 != nullptr) {\n+  if (_truncated_increment.outer_trunc() != nullptr) {\n@@ -2400,1 +2407,1 @@\n-    const TypeInteger* incr_t = igvn.type(incr)->is_integer(_iv_bt);\n+    const TypeInteger* incr_t = igvn.type(_iv_incr.incr())->is_integer(_iv_bt);\n@@ -2414,1 +2421,1 @@\n-    assert(truncation.trunc1() != nullptr, \"must have found some truncation\");\n+    assert(truncation.outer_trunc() != nullptr, \"must have found some truncation\");\n@@ -2447,1 +2454,1 @@\n-    assert(truncation.trunc1() == nullptr && truncation.trunc2() == nullptr, \"no truncation for int\");\n+    assert(truncation.outer_trunc() == nullptr && truncation.inner_trunc() == nullptr, \"no truncation for int\");\n@@ -3063,1 +3070,0 @@\n-\/\/----------------------match_incr_with_optional_truncation--------------------\n@@ -3066,1 +3072,1 @@\n-bool CountedLoopNode::TruncatedIncrement::build() {\n+void CountedLoopNode::TruncatedIncrement::build(Node* expr) {\n@@ -3070,1 +3076,3 @@\n-  if (_expr == nullptr || _expr->req() != 3)  return false;\n+  if (expr == nullptr || expr->req() != 3) {\n+    return;\n+  }\n@@ -3072,3 +3080,3 @@\n-  Node *t1 = nullptr;\n-  Node *t2 = nullptr;\n-  Node* n1 = _expr;\n+  Node* t1 = nullptr;\n+  Node* t2 = nullptr;\n+  Node* n1 = expr;\n@@ -3112,2 +3120,2 @@\n-    _trunc1 = t1;\n-    _trunc2 = t2;\n+    _outer_trunc = t1;\n+    _inner_trunc = t2;\n@@ -3117,1 +3125,0 @@\n-    return true;\n@@ -3119,3 +3126,0 @@\n-\n-  \/\/ failed\n-  return false;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":72,"deletions":68,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -280,1 +280,0 @@\n-    Node* _expr;\n@@ -284,2 +283,2 @@\n-    Node* _trunc1 = nullptr;\n-    Node* _trunc2 = nullptr;\n+    Node* _outer_trunc = nullptr;\n+    Node* _inner_trunc = nullptr;\n@@ -289,4 +288,1 @@\n-    explicit TruncatedIncrement() = default;\n-\n-    TruncatedIncrement(Node* expr, BasicType bt) :\n-      _expr(expr),\n+    TruncatedIncrement(BasicType bt) :\n@@ -295,1 +291,1 @@\n-    bool build();\n+    void build(Node* expr);\n@@ -299,2 +295,4 @@\n-    Node* trunc1() const { return _trunc1; }\n-    Node* trunc2() const { return _trunc2; }\n+\n+    \/\/ Optional truncation for: CHAR: (i+1)&0x7fff, BYTE: ((i+1)<<8)>>8, or SHORT: ((i+1)<<16)>>16\n+    Node* outer_trunc() const { return _outer_trunc; } \/\/ the outermost truncating node (either the & or the final >>)\n+    Node* inner_trunc() const { return _inner_trunc; } \/\/ the inner truncating node, if applicable (the << in a <<\/>> pair)\n@@ -1337,2 +1335,0 @@\n-    explicit LoopExitTest() = default;\n-\n@@ -1344,1 +1340,1 @@\n-    bool build();\n+    void build();\n@@ -1363,1 +1359,0 @@\n-    Node* _old_incr;\n@@ -1371,4 +1366,1 @@\n-    explicit LoopIVIncr() = default;\n-\n-    LoopIVIncr(Node* incr, const Node* head, const IdealLoopTree* loop) :\n-      _old_incr(incr),\n+    LoopIVIncr(const Node* head, const IdealLoopTree* loop) :\n@@ -1378,1 +1370,1 @@\n-    bool build();\n+    void build(Node* old_incr);\n@@ -1391,2 +1383,0 @@\n-    const Node* _incr;\n-\n@@ -1397,1 +1387,1 @@\n-    explicit LoopIVStride() = default;\n+    LoopIVStride() {}\n@@ -1399,3 +1389,1 @@\n-    LoopIVStride(const Node* incr) : _incr(incr) {}\n-\n-    bool build();\n+    void build(const Node* incr);\n@@ -2018,12 +2006,0 @@\n-  PhaseIdealLoop* const _phase;\n-  Node* const _head;\n-  IdealLoopTree* const _loop;\n-  const BasicType _iv_bt;\n-\n-#ifdef ASSERT\n-  bool _checked_for_counted_loop = false;\n-#endif\n-\n-  \/\/ stats for PhaseIdealLoop::print_statistics()\n-  static volatile int _long_loop_counted_loops;\n-\n@@ -2047,2 +2023,0 @@\n-    explicit LoopStructure() = default;\n-\n@@ -2053,1 +2027,7 @@\n-      _iv_bt(iv_bt) {}\n+      _iv_bt(iv_bt),\n+      _exit_test(PhaseIdealLoop::LoopExitTest(_phase->loop_exit_control(_head, _loop), _loop, _phase)),\n+      _iv_incr(PhaseIdealLoop::LoopIVIncr(_head, _loop)),\n+      _truncated_increment(CountedLoopNode::TruncatedIncrement(_iv_bt)),\n+      _stride(PhaseIdealLoop::LoopIVStride()) {}\n+\n+    void build();\n@@ -2055,1 +2035,2 @@\n-    bool build();\n+    jlong final_limit_correction() const; \/\/ compute adjusted loop limit correction\n+    bool is_infinite_loop(const TypeInteger* limit_t) const;\n@@ -2057,2 +2038,0 @@\n-    \/\/ compute adjusted loop limit correction\n-    jlong final_limit_correction() const;\n@@ -2070,1 +2049,0 @@\n-  LoopStructure _structure;\n@@ -2072,0 +2050,6 @@\n+  PhaseIdealLoop* const _phase;\n+  Node* const _head;\n+  IdealLoopTree* const _loop;\n+  const BasicType _iv_bt;\n+\n+  LoopStructure _structure;\n@@ -2075,0 +2059,7 @@\n+#ifdef ASSERT\n+  bool _checked_for_counted_loop = false;\n+#endif\n+\n+  \/\/ stats for PhaseIdealLoop::print_statistics()\n+  static volatile int _long_loop_counted_loops;\n+\n@@ -2082,1 +2073,1 @@\n-                                         Node* bol);\n+                                         Node* bol) const;\n@@ -2087,1 +2078,0 @@\n-  bool is_infinite_loop(const Node* increment_trunc1, const TypeInteger* limit_t, const Node* incr) const;\n@@ -2097,1 +2087,2 @@\n-        _iv_bt(iv_bt) {\n+        _iv_bt(iv_bt),\n+        _structure(LoopStructure(_head, _loop, _phase, _iv_bt)) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":38,"deletions":47,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2845,2 +2845,2 @@\n-      CountedLoopNode::TruncatedIncrement add(in, T_INT);\n-      add.build();\n+      CountedLoopNode::TruncatedIncrement add(T_INT);\n+      add.build(in);\n@@ -2855,2 +2855,2 @@\n-    CountedLoopNode::TruncatedIncrement add(addtrunc, T_INT);\n-    add.build();\n+    CountedLoopNode::TruncatedIncrement add(T_INT);\n+    add.build(addtrunc);\n@@ -4285,2 +4285,2 @@\n-      CountedLoopNode::TruncatedIncrement increment(loop_exit.incr()->in(i), T_INT);\n-      increment.build();\n+      CountedLoopNode::TruncatedIncrement increment(T_INT);\n+      increment.build(loop_exit.incr()->in(i));\n@@ -4292,2 +4292,2 @@\n-      LoopIVStride stride(increment.incr());\n-      stride.build();\n+      LoopIVStride stride = LoopIVStride();\n+      stride.build(increment.incr());\n@@ -4300,2 +4300,2 @@\n-          (increment.trunc1() == nullptr && phi->in(LoopNode::LoopBackControl) != loop_exit.incr()) ||\n-          (increment.trunc1() != nullptr && phi->in(LoopNode::LoopBackControl) != increment.trunc1())) {\n+          (increment.outer_trunc() == nullptr && phi->in(LoopNode::LoopBackControl) != loop_exit.incr()) ||\n+          (increment.outer_trunc() != nullptr && phi->in(LoopNode::LoopBackControl) != increment.outer_trunc())) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}