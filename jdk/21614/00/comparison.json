{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-    public FDBigInteger(long lValue, char[] digits, int kDigits, int nDigits) {\n+    public FDBigInteger(long lValue, byte[] digits, int kDigits, int nDigits) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FDBigInteger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1037,1 +1037,1 @@\n-        char        digits[];\n+        byte[]      digits;\n@@ -1040,1 +1040,1 @@\n-        ASCIIToBinaryBuffer( boolean negSign, int decExponent, char[] digits, int n)\n+        ASCIIToBinaryBuffer( boolean negSign, int decExponent, byte[] digits, int n)\n@@ -1875,1 +1875,1 @@\n-            char[] digits = new char[ len ];\n+            byte[] digits = new byte[ len ];\n@@ -1906,1 +1906,1 @@\n-                    digits[nDigits++] = c;\n+                    digits[nDigits++] = (byte) c;\n@@ -1909,1 +1909,1 @@\n-                    digits[nDigits++] = c;\n+                    digits[nDigits++] = (byte) c;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FloatingDecimal.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import java.util.Random;\n+import java.nio.charset.StandardCharsets;\n@@ -30,2 +30,2 @@\n- * @bug 7032154\n- * @summary unit testys of FDBigInteger\n+ * @bug 7032154 8342693\n+ * @summary unit tests of FDBigInteger\n@@ -55,1 +55,1 @@\n-        char[] chars = new BigInteger(hex, 16).toString().toCharArray();\n+        byte[] chars = new BigInteger(hex, 16).toString().getBytes(StandardCharsets.US_ASCII);\n","filename":"test\/jdk\/jdk\/internal\/math\/FloatingDecimal\/TestFDBigInteger.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}