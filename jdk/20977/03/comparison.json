{"files":[{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     4131642\n+ * @summary This test shows the ability to create Frames, Windows\n+ *          and Canvases with a GraphicsConfiguration. The test should show a number\n+ *          of windows with RGB stripes in according to the number of the\n+ *          GraphicsConfigurations for each screen. It also displays the size of\n+ *          the screen and the GraphicsConfiguration.toString().\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NonDefaultGC\n+ *\/\n+\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class NonDefaultGC {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test shows the ability to create Frames, Windows and Canvases\n+        with a GraphicsConfiguration.\n+        The test should show a number of windows with RGB stripes according\n+        to the number of the GraphicsConfigurations for each screen.\n+        The window also contains text which displays the size of the screen\n+        and the output GraphicsConfiguration.toString().\n+        The test passes if every screen displays at least one such window.\n+        \"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+       SwingUtilities.invokeAndWait(NonDefaultGC::createUI);\n+       PassFailJFrame.builder()\n+                .title(\"GraphicsConfigurationTest\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(12)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+\n+    }\n+\n+    private static void createUI() {\n+\n+        GraphicsEnvironment ge = GraphicsEnvironment.\n+                                 getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gs = ge.getScreenDevices();\n+        for (int j = 0; j < gs.length; j++) {\n+            GraphicsDevice gd = gs[j];\n+            GraphicsConfiguration[] gc = gd.getConfigurations();\n+            for (int i=0; i < gc.length; i++) {\n+                JFrame f = new JFrame(gs[j].getDefaultConfiguration());\n+                PassFailJFrame.addTestWindow(f); \/\/ to ensure it is disposed.\n+                GCCanvas c = new GCCanvas(gc[i]);\n+                Rectangle gcBounds = gc[i].getBounds();\n+                int xoffs = gcBounds.x;\n+                int yoffs = gcBounds.y;\n+                f.getContentPane().add(c);\n+                f.setTitle(\"Screen# \"+ j +\", GC# \"+ i);\n+                f.setSize(300, 150);\n+                f.setLocation((i*50)+xoffs, (i*60)+yoffs);\n+                f.show();\n+            }\n+        }\n+    }\n+}\n+\n+class GCCanvas extends Canvas {\n+\n+    GraphicsConfiguration gc;\n+    Rectangle bounds;\n+\n+    public GCCanvas(GraphicsConfiguration gc) {\n+        super(gc);\n+        this.gc = gc;\n+        bounds = gc.getBounds();\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(300, 150);\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, 100, 150);\n+        g.setColor(Color.green);\n+        g.fillRect(100, 0, 100, 150);\n+        g.setColor(Color.blue);\n+        g.fillRect(200, 0, 100, 150);\n+        g.setColor(Color.black);\n+        g.drawString(\"ScreenSize=\"+bounds.width+\"X\"+ bounds.height, 10, 15);\n+        g.drawString(gc.toString(), 10, 30);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GraphicsConfiguration\/NonDefaultGC.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     4271200\n+ * @summary This test should show that the default position of a Frame\n+ *          should be on the physical screen for the GraphicsConfiguration.\n+ *          The togglebutton shows and hides an empty frame on the second monitor.\n+ *          The frame should be positioned at 0, 0 and is shown and hidden by clicking the button.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual Position\n+ *\/\n+\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+public class Position extends JPanel implements ActionListener {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This test should show that the default position of a Frame\n+        should be on the physical screen for the specified GraphicsConfiguration.\n+        There is a window \"Show\/Hide\" button.\n+        The button alternatively shows and hides an empty frame on the second monitor.\n+        The frame should be positioned at 0, 0 and is shown and hidden by clicking the button.\n+        The test passes if it behaves as described and fails otherwise.\n+        \"\"\";\n+\n+    static volatile GraphicsDevice gd[];\n+    static volatile JFrame secondFrame;\n+    static volatile boolean on = true;\n+\n+    public Position() {\n+        JPanel p = new JPanel();\n+        JButton b = new JButton(\"Show\/Hide Window on other screen\");\n+        b.addActionListener(this);\n+        p.add(b);\n+        add(p);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (secondFrame == null) {\n+            secondFrame = new JFrame(\"screen1\", gd[1].getDefaultConfiguration());\n+            secondFrame.setSize(500, 500);\n+            PassFailJFrame.addTestWindow(secondFrame);\n+        }\n+        secondFrame.setVisible(on);\n+        on = !on;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+        if (gd.length < 2) { \/* test runs only on a multi-screen environment *\/\n+            return;\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Screen Device Position Test\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(10)\n+                .columns(50)\n+                .splitUIBottom(Position::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GraphicsConfiguration\/Position.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4532352\n+ * @summary This test verifies that the specified background color is rendered\n+ *          in the special case of:\n+ *          Graphics.drawImage(Image img, int dx1, int dy1, int dx2, int dy2,\n+ *                             int sx1, int sy1, int sx2, int sy2,\n+ *                             Color bgColor, ImageObserver observer)\n+ *          where no scaling takes place because the source and destination\n+ *          bounds have the same width and height.\n+ *\/\n+\n+import java.io.File;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import javax.imageio.ImageIO;\n+\n+public class DrawImageBgTest {\n+\n+    public static void main(String argv[]) throws Exception {\n+\n+        int dx, dy, dw, dh;\n+        int sx, sy, sw, sh;\n+\n+        int iw = 250, ih = 250;\n+        String sep = System.getProperty(\"file.separator\");\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String prefix = dir+sep;\n+        BufferedImage img = ImageIO.read(new File(prefix + \"duke.gif\"));\n+        BufferedImage dest = new BufferedImage(iw, ih, BufferedImage.TYPE_INT_RGB);\n+\n+        Graphics2D g = dest.createGraphics();\n+        g.setColor(Color.blue);\n+        g.fillRect(0, 0, iw, ih);\n+\n+        \/\/ source and destination dimensions are different, results in scaling\n+        dx = 10;\n+        dy = 10;\n+        dw = 100;\n+        dh = 200;\n+        sx = 10;\n+        sy = 10;\n+        sw = 50;\n+        sh = 100;\n+        g.drawImage(img,\n+                    dx, dy, dx + dw, dy + dh,\n+                    sx, sy, sx + sw, sy + sh,\n+                    Color.yellow, null);\n+\n+        int pix1 = dest.getRGB(dx + 1, dy + 1);\n+\n+        \/\/ source and destination dimensions are the same, no scaling\n+        dx = 120;\n+        dy = 10;\n+        sx = 10;\n+        sy = 10;\n+        sw = dw = 50;\n+        sh = dh = 100;\n+        g.drawImage(img,\n+                    dx, dy, dx + dw, dy + dh,\n+                    sx, sy, sx + sw, sy + sh,\n+                    Color.yellow, null);\n+\n+        int pix2 = dest.getRGB(dx + 1, dy + 1);\n+        int yellow = Color.yellow.getRGB();\n+\n+        if (pix1 != yellow || pix2 != yellow) {\n+            ImageIO.write(dest, \"gif\", new File(\"op.gif\"));\n+            throw new RuntimeException(\"pix1=\" + Integer.toHexString(pix1) +\n+                                       \" pix2=\" + Integer.toHexString(pix2));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/pipe\/DrawImageBgTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"","filename":"test\/jdk\/sun\/java2d\/pipe\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/duke.gif","status":"copied"}]}