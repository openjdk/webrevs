{"files":[{"patch":"@@ -1985,1 +1985,1 @@\n-                        checkAutoCloseable(resource.pos(), localEnv, resource.type);\n+                        checkAutoCloseable(resource.pos(), localEnv, resource.type, true);\n@@ -2034,1 +2034,1 @@\n-    void checkAutoCloseable(DiagnosticPosition pos, Env<AttrContext> env, Type resource) {\n+    void checkAutoCloseable(DiagnosticPosition pos, Env<AttrContext> env, Type resource, boolean useSite) {\n@@ -2052,0 +2052,1 @@\n+                    (useSite || close.owner != syms.autoCloseableType.tsym) &&\n@@ -5650,1 +5651,1 @@\n-        checkAutoCloseable(tree.pos(), env, c.type);\n+        checkAutoCloseable(tree.pos(), env, c.type, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8155591\n+ * @summary Verify cases where no AutoCloseable InterruptedException warning should be generated\n+ * @compile\/ref=InterruptedExceptionTest2.out -XDrawDiagnostics -Xlint:try InterruptedExceptionTest2.java\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+\/\/ Declaration tests\n+\n+interface InterruptedExceptionTest2 extends AutoCloseable {\n+}\n+\n+interface InterruptedExceptionTest3 extends AutoCloseable {\n+    @Override void close();\n+}\n+\n+interface InterruptedExceptionTest4 extends AutoCloseable {\n+    @Override default void close() { }\n+}\n+\n+abstract class InterruptedExceptionTest5 implements AutoCloseable {\n+}\n+\n+abstract class InterruptedExceptionTest6 implements AutoCloseable {\n+    @Override public abstract void close();\n+}\n+\n+abstract class InterruptedExceptionTest7 implements AutoCloseable {\n+    @Override public void close() { }\n+}\n+\n+\/\/ Use site tests\n+\n+class UseSite2 {\n+    void m(Supplier<InterruptedExceptionTest2> s) throws Exception {\n+        try (InterruptedExceptionTest2 t = s.get()) {   \/\/ warning here\n+            t.hashCode();\n+        }\n+    }\n+}\n+\n+class UseSite3 {\n+    void m(Supplier<InterruptedExceptionTest3> s) throws Exception {\n+        try (InterruptedExceptionTest3 t = s.get()) {\n+            t.hashCode();\n+        }\n+    }\n+}\n+\n+class UseSite4 {\n+    void m(Supplier<InterruptedExceptionTest4> s) throws Exception {\n+        try (InterruptedExceptionTest4 t = s.get()) {\n+            t.hashCode();\n+        }\n+    }\n+}\n+\n+class UseSite5 {\n+    void m(Supplier<InterruptedExceptionTest5> s) throws Exception {\n+        try (InterruptedExceptionTest5 t = s.get()) {   \/\/ warning here\n+            t.hashCode();\n+        }\n+    }\n+}\n+\n+class UseSite6 {\n+    void m(Supplier<InterruptedExceptionTest6> s) throws Exception {\n+        try (InterruptedExceptionTest6 t = s.get()) {\n+            t.hashCode();\n+        }\n+    }\n+}\n+\n+class UseSite7 {\n+    void m(Supplier<InterruptedExceptionTest7> s) throws Exception {\n+        try (InterruptedExceptionTest7 t = s.get()) {\n+            t.hashCode();\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/InterruptedExceptionTest2.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+InterruptedExceptionTest2.java:38:40: compiler.warn.try.resource.throws.interrupted.exc: InterruptedExceptionTest2\n+InterruptedExceptionTest2.java:62:40: compiler.warn.try.resource.throws.interrupted.exc: InterruptedExceptionTest5\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/InterruptedExceptionTest2.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}