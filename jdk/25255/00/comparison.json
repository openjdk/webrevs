{"files":[{"patch":"@@ -5474,2 +5474,13 @@\n-                                log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n-                                        Errors.InvalidPermitsClause(Fragments.DoesntExtendSealed(subType)));\n+                                KindName subtypingLeftKind;\n+                                if (subType.tsym.isEnum()) subtypingLeftKind = KindName.ENUM;\n+                                else if (subType.isInterface()) subtypingLeftKind = KindName.INTERFACE;\n+                                else if (subType.tsym.enclClass().isRecord()) subtypingLeftKind = KindName.RECORD;\n+                                else subtypingLeftKind = KindName.CLASS;\n+\n+                                if(c.isInterface()) {\n+                                    log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n+                                            Errors.InvalidPermitsClause(Fragments.DoesntImplementSealed(subtypingLeftKind, subType)));\n+                                } else {\n+                                    log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n+                                            Errors.InvalidPermitsClause(Fragments.DoesntExtendSealed(subType)));\n+                                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3960,1 +3960,5 @@\n-    subclass {0} must extend sealed class\n+    class {0} must extend sealed class\n+\n+# 0: kind name, 1: type\n+compiler.misc.doesnt.implement.sealed=\\\n+    {0} {1} must extend sealed interface\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8347530\n+ * @summary Improve error message with invalid permits clauses\n+ * @compile\/fail\/ref=T8347530.out -XDrawDiagnostics T8347530.java\n+ *\/\n+\n+class T8347530 {\n+    \/\/ sealed interfaces\n+    sealed interface A0 permits B0 {}\n+    class B0 {}     \/\/ class {0} must implement sealed interface\n+\n+    sealed interface A1 permits B1 {}\n+    record B1() {}  \/\/ record {0} must implement sealed interface\n+\n+    sealed interface A2 permits B2 {}\n+    enum B2 {}      \/\/ enum {0} must implement sealed interface\n+\n+    sealed interface A3 permits B3 {}\n+    interface B3 {} \/\/ interface {0} must implement sealed interface\n+\n+    \/\/ sealed classes\n+    sealed class C0 permits S0 {}\n+    class S0 {}     \/\/ class {0} must extend sealed class\n+\n+    \/\/ record cannot extend other classes in general\n+    \/\/ enums cannot extend other classes in general\n+    \/\/ interfaces cannot extend other classes in general\n+}\n","filename":"test\/langtools\/tools\/javac\/T8347530.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+T8347530.java:10:33: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.class, T8347530.B0)\n+T8347530.java:13:33: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.record, T8347530.B1)\n+T8347530.java:16:33: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.enum, T8347530.B2)\n+T8347530.java:19:33: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.interface, T8347530.B3)\n+T8347530.java:23:29: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.extend.sealed: T8347530.S0)\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/T8347530.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.invalid.permits.clause\n+\/\/ key: compiler.misc.doesnt.implement.sealed\n+\n+sealed interface A3 permits B3 {}\n+interface B3 {}\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SubtypeDoesntImplementSealed.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -559,1 +559,1 @@\n-                \"Sealed.java:1:66: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.extend.sealed: pkg.Sub2)\",\n+                \"Sealed.java:1:66: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.class, pkg.Sub2)\",\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CyclicHierarchyTest.java:9:37: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.extend.sealed: CyclicHierarchyTest.Add)\n+CyclicHierarchyTest.java:9:37: compiler.err.invalid.permits.clause: (compiler.misc.doesnt.implement.sealed: kindname.class, CyclicHierarchyTest.Add)\n","filename":"test\/langtools\/tools\/javac\/sealed\/erroneous_hierarchy\/CyclicHierarchyTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}