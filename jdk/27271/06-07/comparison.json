{"files":[{"patch":"@@ -1800,26 +1800,31 @@\n-            BigDecimal a = this.stripTrailingZeros(), b = divisor.stripTrailingZeros();\n-            BigInteger aInt = a.unscaledValue(), bInt = b.unscaledValue();\n-\n-            \/\/ Remove common powers of 2\n-            int m_b = bInt.getLowestSetBit();\n-            int powsOf2 = Math.min(aInt.getLowestSetBit(), m_b);\n-            aInt = aInt.shiftRight(powsOf2);\n-            bInt = bInt.shiftRight(powsOf2);\n-            m_b -= powsOf2;\n-            \/*\n-             * If the quotient this\/divisor has a terminating decimal\n-             * expansion, the expansion can have no more than prec digits,\n-             * where prec is defined as below.\n-             * Therefore, create a MathContext object with this\n-             * precision and do a divide with the UNNECESSARY rounding\n-             * mode.\n-             *\n-             * A proof for the formula can be found at the following link:\n-             * https:\/\/github.com\/user-attachments\/files\/22314648\/frazioni_decimali.pdf\n-             *\/\n-            int prec = saturateLong((digitLengthLower(aInt) + 1L) - digitLengthLower(bInt)\n-                    + Math.max(m_b, log5Upper(bInt.shiftRight(m_b))) + 1L);\n-            BigDecimal quotient;\n-            try {\n-                quotient = a.divide(b, new MathContext(prec, RoundingMode.UNNECESSARY));\n-            } catch (ArithmeticException e) {\n+            BigInteger den = divisor.unscaledValue();\n+            int powsOf2 = den.getLowestSetBit();\n+            den = den.shiftRight(powsOf2); \/\/ Remove powers of 2\n+\n+            int powsOf5 = 0;\n+            \/\/ Remove and count powers of 5\n+            BigInteger[] qr;\n+            int i;\n+            for (i = 0; ; i++) {\n+                final int exp = 1 << i;\n+                qr = den.divideAndRemainder(fiveToTwoToThe(i));\n+                if (qr[1].signum != 0) { \/\/ non-0 remainder\n+                    break;\n+                } else {\n+                    den = qr[0];\n+                    powsOf5 += exp;\n+                }\n+            }\n+            i--;\n+\n+            for (; i >= 0; i--) {\n+                final int exp = 1 << i;\n+                qr = den.divideAndRemainder(fiveToTwoToThe(i));\n+                if (qr[1].signum == 0) { \/\/ zero remainder\n+                    den = qr[0];\n+                    powsOf5 += exp;\n+                }\n+            }\n+\n+            qr = this.unscaledValue().divideAndRemainder(den);\n+            if (qr[1].signum != 0)\n@@ -1827,1 +1832,12 @@\n-                                              \"no exact representable decimal result.\");\n+                        \"no exact representable decimal result.\");\n+\n+            BigInteger quot = qr[0];\n+            \/\/ Equalize multiplicities of 2 and 5\n+            int powsOf10;\n+            if (powsOf2 < powsOf5) {\n+                powsOf10 = powsOf5;\n+                quot = quot.shiftLeft(powsOf5 - powsOf2);\n+            } else {\n+                powsOf10 = powsOf2;\n+                if (powsOf2 > powsOf5)\n+                    quot = quot.multiply(fiveTo(powsOf2 - powsOf5));\n@@ -1829,1 +1845,2 @@\n-            return quotient.adjustToPreferredScale(preferredScale, 0);\n+\n+            return new BigDecimal(quot, preferredScale + powsOf10).adjustToPreferredScale(preferredScale, 0);\n@@ -5117,0 +5134,25 @@\n+    \/**\n+     * @param n a non-negative integer\n+     * @return {@code 5^n}\n+     *\/\n+    private static BigInteger fiveTo(int n) {\n+        BigInteger pow = BigInteger.ONE;\n+        for (int i = 0; n != 0 && i < FIVE_TO_2_TO.length; i++) {\n+            if ((n & 1) != 0)\n+                pow = pow.multiply(FIVE_TO_2_TO[i]);\n+\n+            n >>= 1;\n+        }\n+\n+        BigInteger factor = FIVE_TO_2_TO[FIVE_TO_2_TO.length - 1];\n+        while (n != 0) {\n+            factor = factor.multiply(factor);\n+            if ((n & 1) != 0)\n+                pow = pow.multiply(factor);\n+\n+            n >>= 1;\n+        }\n+\n+        return pow;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":70,"deletions":28,"binary":false,"changes":98,"status":"modified"}]}