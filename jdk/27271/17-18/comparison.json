{"files":[{"patch":"@@ -1795,1 +1795,2 @@\n-        int preferredScale = saturateLong((long) this.scale - divisor.scale);\n+        long scaleDiff = (long) this.scale - divisor.scale;\n+        int preferredScale = saturateLong(scaleDiff);\n@@ -1847,2 +1848,0 @@\n-        if (e10 == 0)\n-            return new BigDecimal(quot, preferredScale);\n@@ -1855,2 +1854,15 @@\n-        \/\/ Avoid overflow of preferredScale + e10, the result's scale\n-        BigDecimal res = createAndStripZerosToMatchScale(quot, e10, 0L);\n+        BigDecimal res;\n+        \/\/ Adjust to preferredScale, avoiding overflow\n+        \/\/ by centering the preferred scale to zero\n+        if (preferredScale == scaleDiff) {\n+            \/\/ Avoid overflow of preferredScale + e10, the result's scale\n+            res = createAndStripZerosToMatchScale(quot, e10, 0L);\n+        } else { \/\/ scaleDiff exceeds int range\n+            long offsetL = (scaleDiff + e10) - preferredScale;\n+            int offset = (int) offsetL;\n+            if (offset != offsetL)\n+                throw new ArithmeticException(\"Overflow\");\n+\n+            res = new BigDecimal(quot, offset).adjustToPreferredScale(0, 0);\n+        }\n+        \/\/ now res == (this\/divisor) * 10^preferredScale\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"}]}