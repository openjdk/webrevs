{"files":[{"patch":"@@ -1799,26 +1799,0 @@\n-        else {\n-            \/* The technique used is the following:\n-             * take a\/b, compute b' = b\/(2^i 5^j), where\n-             * i = max{n | b ≡ 0 mod 2^n} and j = max{n | b ≡ 0 mod 5^n}.\n-             * If a ≢ 0 mod b', then a\/b is not a finite decimal number. Otherwise:\n-             *   - if i ≤ j, then a\/b = (a\/b') ⋅ 2^(j-i) \/ 10^j;\n-             *   - if i > j, then a\/b = (a\/b') ⋅ 5^(i-j) \/ 10^i.\n-             *\/\n-            BigInteger den = divisor.unscaledValue();\n-            int powsOf2 = den.getLowestSetBit();\n-            den = den.shiftRight(powsOf2); \/\/ Remove powers of 2\n-\n-            int powsOf5 = 0;\n-            \/\/ Remove and count powers of 5\n-            BigInteger[] qr;\n-            int i;\n-            for (i = 0; ; i++) {\n-                qr = den.divideAndRemainder(fiveToTwoToThe(i));\n-                if (qr[1].signum != 0) { \/\/ non-0 remainder\n-                    break;\n-                } else {\n-                    den = qr[0];\n-                    powsOf5 += 1 << i;\n-                }\n-            }\n-            i--;\n@@ -1826,10 +1800,23 @@\n-            int log5Den = log5Upper(den);\n-            if (log5Den < 1 << i)\n-                i = BigInteger.bitLengthForInt(log5Den) - 1;\n-\n-            for (; i >= 0; i--) {\n-                qr = den.divideAndRemainder(fiveToTwoToThe(i));\n-                if (qr[1].signum == 0) { \/\/ zero remainder\n-                    den = qr[0];\n-                    powsOf5 += 1 << i;\n-                }\n+        \/* The technique used is the following:\n+         * take a\/b, compute b' = b\/(2^p2 5^p5), where\n+         * p2 = max{n | b ≡ 0 mod 2^n} and p5 = max{n | b ≡ 0 mod 5^n}.\n+         * If a ≢ 0 mod b', then a\/b is not a finite decimal number. Otherwise:\n+         *   - if p2 ≤ p5, then a\/b = (a\/b') ⋅ 2^(p5-p2) \/ 10^p5;\n+         *   - if p2 > p5, then a\/b = (a\/b') ⋅ 5^(p2-p5) \/ 10^p2.\n+         *\/\n+        BigInteger b = divisor.unscaledValue();\n+        int p2 = b.getLowestSetBit();\n+        b = b.shiftRight(p2); \/\/ Remove powers of 2\n+\n+        int p5 = 0;\n+        \/\/ Remove and count powers of 5\n+        BigInteger[] qr;\n+        int i;\n+        \/\/ Factor out 5^(2^i) from b, until b ≢ 0 mod 5^(2^i).\n+        for (i = 0; ; i++) {\n+            qr = b.divideAndRemainder(fiveToTwoToThe(i));\n+            if (qr[1].signum != 0) { \/\/ non-0 remainder\n+                break;\n+            } else {\n+                b = qr[0];\n+                p5 += 1 << i;\n@@ -1837,17 +1824,0 @@\n-\n-            qr = this.unscaledValue().divideAndRemainder(den);\n-            if (qr[1].signum != 0)\n-                throw new ArithmeticException(\"Non-terminating decimal expansion; \" +\n-                        \"no exact representable decimal result.\");\n-\n-            BigInteger quot = qr[0];\n-            int powsOf10 = Math.max(powsOf2, powsOf5);\n-            if (powsOf10 == 0)\n-                return new BigDecimal(quot, preferredScale);\n-\n-            \/\/ Equalize multiplicities of 2 and 5\n-            quot = powsOf10 == powsOf5\n-                    ? quot.shiftLeft(powsOf10 - powsOf2)\n-                    : quot.multiply(fiveTo(powsOf10 - powsOf5));\n-\n-            return createAndStripZerosToMatchScale(quot, preferredScale + powsOf10, preferredScale);\n@@ -1855,0 +1825,35 @@\n+        i--;\n+\n+        \/\/ Factor out all remaining powers of 5 from b\n+        int log5b = log5Upper(b);\n+        if (log5b < 1 << i)\n+            i = BigInteger.bitLengthForInt(log5b) - 1;\n+\n+        for (; i >= 0; i--) {\n+            qr = b.divideAndRemainder(fiveToTwoToThe(i));\n+            if (qr[1].signum == 0) { \/\/ zero remainder\n+                b = qr[0];\n+                p5 += 1 << i;\n+            }\n+        }\n+\n+        qr = this.unscaledValue().divideAndRemainder(b);\n+        if (qr[1].signum != 0)\n+            throw new ArithmeticException(\"Non-terminating decimal expansion; \" +\n+                    \"no exact representable decimal result.\");\n+\n+        BigInteger quot = qr[0];\n+        int p10 = Math.max(p2, p5);\n+        if (p10 == 0)\n+            return new BigDecimal(quot, preferredScale);\n+\n+        \/\/ Equalize multiplicities of 2 and 5\n+        quot = p10 == p5\n+                ? quot.shiftLeft(p10 - p2)\n+                : quot.multiply(fiveTo(p10 - p5));\n+\n+        \/\/ Avoid overflow of preferredScale + p10, the result's scale\n+        BigDecimal res = createAndStripZerosToMatchScale(quot, p10, 0);\n+        return preferredScale != Integer.MIN_VALUE\n+                ? res.scaleByPowerOfTen(-preferredScale)\n+                : res.scaleByPowerOfTen(Integer.MAX_VALUE).scaleByPowerOfTen(1);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":58,"deletions":53,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimalDivide.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}