{"files":[{"patch":"@@ -1801,2 +1801,2 @@\n-         * take a\/b, compute b' = b\/(2^p2 5^p5), where\n-         * p2 = max{n | b ≡ 0 mod 2^n} and p5 = max{n | b ≡ 0 mod 5^n}.\n+         * take a\/b, compute b' = b\/(2^e2 5^e5), where\n+         * e2 = max{n | b ≡ 0 mod 2^n} and e5 = max{n | b ≡ 0 mod 5^n}.\n@@ -1804,2 +1804,2 @@\n-         *   - if p2 ≤ p5, then a\/b = (a\/b') ⋅ 2^(p5-p2) \/ 10^p5;\n-         *   - if p2 > p5, then a\/b = (a\/b') ⋅ 5^(p2-p5) \/ 10^p2.\n+         *   - if e2 ≤ e5, then a\/b = (a\/b') ⋅ 2^(e5-e2) \/ 10^e5;\n+         *   - if e2 > e5, then a\/b = (a\/b') ⋅ 5^(e2-e5) \/ 10^e2.\n@@ -1808,2 +1808,2 @@\n-        int p2 = b.getLowestSetBit();\n-        b = b.shiftRight(p2); \/\/ Remove powers of 2\n+        int e2 = b.getLowestSetBit();\n+        b = b.shiftRight(e2); \/\/ Remove powers of 2\n@@ -1811,1 +1811,0 @@\n-        int p5 = 0;\n@@ -1813,0 +1812,1 @@\n+        int e5 = 0;\n@@ -1822,1 +1822,1 @@\n-                p5 += 1 << i;\n+                e5 += 1 << i;\n@@ -1836,1 +1836,1 @@\n-                p5 += 1 << i;\n+                e5 += 1 << i;\n@@ -1846,2 +1846,2 @@\n-        int p10 = Math.max(p2, p5);\n-        if (p10 == 0)\n+        int e10 = Math.max(e2, e5);\n+        if (e10 == 0)\n@@ -1851,3 +1851,3 @@\n-        quot = p10 == p5\n-                ? quot.shiftLeft(p10 - p2)\n-                : quot.multiply(fiveTo(p10 - p5));\n+        quot = e10 == e5\n+                ? quot.shiftLeft(e10 - e2)\n+                : quot.multiply(fiveTo(e10 - e5));\n@@ -1855,2 +1855,2 @@\n-        \/\/ Avoid overflow of preferredScale + p10, the result's scale\n-        BigDecimal res = createAndStripZerosToMatchScale(quot, p10, 0L);\n+        \/\/ Avoid overflow of preferredScale + e10, the result's scale\n+        BigDecimal res = createAndStripZerosToMatchScale(quot, e10, 0L);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-         * Each array entry is atmost 64 bits\n+         * Each array entry is at most 64 bits\n@@ -64,1 +64,1 @@\n-         * Each array entry is atmost 256 bits\n+         * Each array entry is at most 256 bits\n@@ -68,1 +68,1 @@\n-         * Each array entry is atmost 1024 bits\n+         * Each array entry is at most 1024 bits\n@@ -72,1 +72,1 @@\n-         * Each array entry is atmost 4096 bits\n+         * Each array entry is at most 4096 bits\n@@ -76,1 +76,1 @@\n-         * Each array entry is atmost 16384 bits\n+         * Each array entry is at most 16384 bits\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimalDivide.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}