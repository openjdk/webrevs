{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,4 +32,0 @@\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n@@ -38,0 +34,7 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n@@ -42,0 +45,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -47,70 +51,95 @@\n-    private static Stream<Arguments> patternMatches() {\n-        return Stream.of(\n-                \/\/ no extra info present\n-                Arguments.of(\"properties\",\n-                        \"properties: Initial\",\n-                        \"properties\\\\[\"),\n-                \/\/ thread info only\n-                Arguments.of(\"properties+thread\",\n-                        \"properties\\\\[.*\\\\|main\\\\|.*java.*]:\",\n-                        \"properties\\\\[\" + DATE_REGEX),\n-                \/\/ timestamp info only\n-                Arguments.of(\"properties+timestamp\",\n-                        \"properties\\\\[\" + DATE_REGEX + \".*\\\\]\",\n-                        \"\\\\|main\\\\]:\"),\n-                \/\/ both thread and timestamp\n-                Arguments.of(\"properties+timestamp+thread\",\n-                        \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"properties:\"),\n-                \/\/ flip the arguments of previous test\n-                Arguments.of(\"properties+thread+timestamp\",\n-                        \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"properties:\"),\n-                \/\/ comma not valid separator, ignore extra info printing request\n-                Arguments.of(\"properties,thread,timestamp\",\n-                        \"properties:\",\n-                        \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\"),\n-                \/\/ no extra info for keystore debug prints\n-                Arguments.of(\"properties+thread+timestamp,keystore\",\n-                        \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"keystore\\\\[\"),\n-                \/\/ flip arguments around in last test - same outcome expected\n-                Arguments.of(\"keystore,properties+thread+timestamp\",\n-                        \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"keystore\\\\[\"),\n-                \/\/ turn on thread info for both keystore and properties components\n-                Arguments.of(\"keystore+thread,properties+thread\",\n-                        \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[.*\\\\|main|.*\\\\]:\",\n-                        \"\\\\|\" + DATE_REGEX + \".*\\\\]:\"),\n-                \/\/ same as above with erroneous comma at end of string. same output expected\n-                Arguments.of(\"keystore+thread,properties+thread,\",\n-                        \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[.*\\\\|main|.*\\\\]:\",\n-                        \"\\\\|\" + DATE_REGEX + \".*\\\\]:\"),\n-                \/\/ turn on thread info for properties and timestamp for keystore\n-                Arguments.of(\"keystore+timestamp,properties+thread\",\n-                        \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"properties\\\\[.*\\\\|\" + DATE_REGEX + \".*\\\\]:\"),\n-                \/\/ turn on thread info for all components\n-                Arguments.of(\"all+thread\",\n-                        \"properties\\\\[.*\\\\|main.*((.*\\\\R)*)keystore\\\\[.*\\\\|main.*java.*\\\\]:\",\n-                        \"properties\\\\[\" + DATE_REGEX + \".*\\\\]:\"),\n-                \/\/ turn on thread info and timestamp for all components\n-                Arguments.of(\"all+thread+timestamp\",\n-                        \"properties\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX +\n-                                \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"properties:\"),\n-                \/\/ all decorator option should override other component options\n-                Arguments.of(\"all+thread+timestamp,properties\",\n-                        \"properties\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX +\n-                                \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX + \".*\\\\]:\",\n-                        \"properties:\"),\n-                \/\/ thread details should only be printed for properties option\n-                Arguments.of(\"properties+thread,all\",\n-                        \"properties\\\\[.*\\\\|main\\\\|.*\\\\]:\",\n-                        \"keystore\\\\[.*\\\\|main\\\\|.*\\\\]:\"),\n-                \/\/ thread details should be printed for all statements\n-                Arguments.of(\"properties,all+thread\",\n-                        \"properties\\\\[.*\\\\|main.*java\" +\n-                                \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*java.*\\\\]:\",\n-                        \"properties:\")\n-        );\n+    private static final Stream<String[]> patternMatches = Stream.of(\n+            \/\/ no extra info present\n+            new String[]{\"properties\",\n+                    \"properties: Initial\",\n+                    \"properties\\\\[\"},\n+            \/\/ thread info only\n+            new String[]{\"properties+thread\",\n+                    \"properties\\\\[.*\\\\|main\\\\|.*java.*]:\",\n+                    \"properties\\\\[\" + DATE_REGEX},\n+            \/\/ timestamp info only\n+            new String[]{\"properties+timestamp\",\n+                    \"properties\\\\[\" + DATE_REGEX + \".*\\\\]\",\n+                    \"\\\\|main\\\\]:\"},\n+            \/\/ both thread and timestamp\n+            new String[]{\"properties+timestamp+thread\",\n+                    \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"properties:\"},\n+            \/\/ flip the List of previous test\n+            new String[]{\"properties+thread+timestamp\",\n+                    \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"properties:\"},\n+            \/\/ comma not valid separator, ignore extra info printing request\n+            new String[]{\"properties,thread,timestamp\",\n+                    \"properties:\",\n+                    \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\"},\n+            \/\/ no extra info for keystore debug prints\n+            new String[]{\"properties+thread+timestamp,keystore\",\n+                    \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"keystore\\\\[\"},\n+            \/\/ flip List around in last test - same outcome expected\n+            new String[]{\"keystore,properties+thread+timestamp\",\n+                    \"properties\\\\[.*\\\\|main|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"keystore\\\\[\"},\n+            \/\/ turn on thread info for both keystore and properties components\n+            new String[]{\"keystore+thread,properties+thread\",\n+                    \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[.*\\\\|main|.*\\\\]:\",\n+                    \"\\\\|\" + DATE_REGEX + \".*\\\\]:\"},\n+            \/\/ same as above with erroneous comma at end of string. same output expected\n+            new String[]{\"keystore+thread,properties+thread,\",\n+                    \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[.*\\\\|main|.*\\\\]:\",\n+                    \"\\\\|\" + DATE_REGEX + \".*\\\\]:\"},\n+            \/\/ turn on thread info for properties and timestamp for keystore\n+            new String[]{\"keystore+timestamp,properties+thread\",\n+                    \"properties\\\\[.*\\\\|main|.*\\\\Rkeystore\\\\[\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"properties\\\\[.*\\\\|\" + DATE_REGEX + \".*\\\\]:\"},\n+            \/\/ turn on thread info for all components\n+            new String[]{\"all+thread\",\n+                    \"properties\\\\[.*\\\\|main.*((.*\\\\R)*)keystore\\\\[.*\\\\|main.*java.*\\\\]:\",\n+                    \"properties\\\\[\" + DATE_REGEX + \".*\\\\]:\"},\n+            \/\/ turn on thread info and timestamp for all components\n+            new String[]{\"all+thread+timestamp\",\n+                    \"properties\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX +\n+                    \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"properties:\"},\n+            \/\/ all decorator option should override other component options\n+            new String[]{\"all+thread+timestamp,properties\",\n+                    \"properties\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX +\n+                    \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*\\\\|\" + DATE_REGEX + \".*\\\\]:\",\n+                    \"properties:\"},\n+            \/\/ thread details should only be printed for properties option\n+            new String[]{\"properties+thread,all\",\n+                    \"properties\\\\[.*\\\\|main\\\\|.*\\\\]:\",\n+                    \"keystore\\\\[.*\\\\|main\\\\|.*\\\\]:\"},\n+            \/\/ thread details should be printed for all statements\n+            new String[]{\"properties,all+thread\",\n+                    \"properties\\\\[.*\\\\|main.*java\" +\n+                    \".*\\\\]((.*\\\\R)*)keystore\\\\[.*\\\\|main.*java.*\\\\]:\",\n+                    \"properties:\"}\n+    );\n+\n+    \/**\n+     * This will execute the test logic without any param manipulation\n+     *\n+     * @param paramName   name of the parameter e.g. -Djava.security.debug=\n+     * @param paramVal    value of the parameter\n+     * @param expected    expected output\n+     * @param notExpected not expected output\n+     *\/\n+    public void testParameter(String paramName,\n+                              String paramVal,\n+                              String expected,\n+                              String notExpected) throws Exception {\n+\n+        System.out.printf(\"Executing: {%s%s%s}%n\",\n+                paramName,\n+                paramVal,\n+                \"DebugOptions\");\n+\n+\n+        final OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n+                paramName + paramVal,\n+                \"DebugOptions\");\n+        outputAnalyzer.shouldHaveExitValue(0)\n+                .shouldMatch(expected)\n+                .shouldNotMatch(notExpected);\n@@ -119,7 +148,23 @@\n-    @ParameterizedTest\n-    @MethodSource(\"patternMatches\")\n-    public void shouldContain(String params, String expected, String notExpected) throws Exception {\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n-                \"-Djava.security.debug=\" + params,\n-                \"DebugOptions\"\n-        );\n+    \/**\n+     * This will execute the test logic, but first change the param\n+     * to be mixed case\n+     *\n+     * @param paramName   name of the parameter e.g. -Djava.security.debug=\n+     * @param paramVal    value of the parameter\n+     * @param expected    expected output\n+     * @param notExpected not expected output\n+     *\/\n+    public void testMixedCaseParameter(String paramName,\n+                                       String paramVal,\n+                                       String expected,\n+                                       String notExpected) throws Exception {\n+\n+        final String formattedParam = makeFirstAndLastLetterUppercase(paramVal);\n+        System.out.printf(\"Executing: {%s%s%s}%n\",\n+                paramName,\n+                formattedParam,\n+                \"DebugOptions\");\n+\n+        final OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n+                paramName + formattedParam,\n+                \"DebugOptions\");\n@@ -131,0 +176,80 @@\n+    \/**\n+     * This method will change the input string to have the first\n+     * and last letters uppercase\n+     * <p>\n+     * e.g.:\n+     * hello -> HellO\n+     *\n+     * @param paramString string to change\n+     * @return resulting string\n+     *\/\n+    private String makeFirstAndLastLetterUppercase(final String paramString) {\n+        final int length = paramString.length();\n+        final String firstLetter = paramString.substring(0, 1);\n+        final String lastLetter = paramString.substring((length - 1),\n+                length);\n+\n+        return firstLetter.toUpperCase()\n+               + paramString.substring(1, length - 1)\n+               + lastLetter.toUpperCase();\n+    }\n+\n+    \/**\n+     * This test will run all options in parallel with all param names\n+     * in both mixed and lowercase\n+     *\/\n+    @Test\n+    public void debugOptionsTest() throws Exception {\n+\n+        try (final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n+            final List<Callable<Void>> testsCallables = new ArrayList<>();\n+\n+            patternMatches.forEach(params -> {\n+                testsCallables.add(() -> {\n+                    testParameter(\n+                            \"-Djava.security.debug=\",\n+                            params[0],\n+                            params[1],\n+                            params[2]);\n+                    return null;\n+                });\n+                testsCallables.add(() -> {\n+                    testMixedCaseParameter(\n+                            \"-Djava.security.debug=\",\n+                            params[0],\n+                            params[1],\n+                            params[2]);\n+                    return null;\n+                });\n+\n+                testsCallables.add(() -> {\n+                    testParameter(\n+                            \"-Djava.security.auth.debug=\",\n+                            params[0],\n+                            params[1],\n+                            params[2]);\n+                    return null;\n+                });\n+                testsCallables.add(() -> {\n+                    testMixedCaseParameter(\n+                            \"-Djava.security.auth.debug=\",\n+                            params[0],\n+                            params[1],\n+                            params[2]);\n+                    return null;\n+                });\n+\n+                System.out.println(\"option added to all tests \" + Arrays.toString(params));\n+            });\n+\n+            System.out.println(\"Starting all the threads\");\n+            final List<Future<Void>> res = executorService.invokeAll(testsCallables);\n+            for (final Future<Void> future : res) {\n+                future.get();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * This is used for the test logic itself\n+     *\/\n@@ -132,0 +257,1 @@\n+\n","filename":"test\/jdk\/sun\/security\/util\/Debug\/DebugOptions.java","additions":208,"deletions":82,"binary":false,"changes":290,"status":"modified"}]}