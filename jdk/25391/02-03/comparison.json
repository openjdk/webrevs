{"files":[{"patch":"@@ -87,25 +87,0 @@\n-    \/**\n-     * This will execute the test logic without any param manipulation\n-     *\n-     * @param paramName   name of the parameter e.g. -Djava.security.debug=\n-     * @param paramVal    value of the parameter\n-     * @param expected    expected output\n-     * @param notExpected not expected output\n-     *\/\n-    public void testParameter(String paramName,\n-                              String paramVal,\n-                              String expected,\n-                              String notExpected) throws Exception {\n-\n-        System.out.printf(\"Executing: {%s%s DebugOptions}%n\",\n-                paramName,\n-                paramVal);\n-\n-        final OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n-                paramName + paramVal,\n-                \"DebugOptions\");\n-        outputAnalyzer.shouldHaveExitValue(0)\n-                .shouldMatch(expected)\n-                .shouldNotMatch(notExpected);\n-    }\n-\n@@ -139,27 +114,0 @@\n-    \/**\n-     * This will execute the test logic, but first change the param\n-     * to be uppercase\n-     *\n-     * @param paramName   name of the parameter e.g. -Djava.security.debug=\n-     * @param paramVal    value of the parameter\n-     * @param expected    expected output\n-     * @param notExpected not expected output\n-     *\/\n-    public void testUpperCaseParameter(String paramName,\n-                                       String paramVal,\n-                                       String expected,\n-                                       String notExpected) throws Exception {\n-\n-        final String formattedParam = paramVal.toUpperCase();\n-        System.out.printf(\"Executing: {%s%s DebugOptions}%n\",\n-                paramName,\n-                formattedParam);\n-\n-        final OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(\n-                paramName + formattedParam,\n-                \"DebugOptions\");\n-        outputAnalyzer.shouldHaveExitValue(0)\n-                .shouldMatch(expected)\n-                .shouldNotMatch(notExpected);\n-    }\n-\n@@ -188,39 +136,0 @@\n-    \/**\n-     * This test will run all options in parallel with all param names\n-     * in lowercase\n-     *\/\n-    @Test\n-    public void debugOptionsLowerCaseTest() throws Exception {\n-\n-        try (final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n-            final List<Callable<Void>> testsCallables = new ArrayList<>();\n-\n-            patternMatches.forEach(params -> {\n-                testsCallables.add(() -> {\n-                    testParameter(\n-                            \"-Djava.security.debug=\",\n-                            params[0],\n-                            params[1],\n-                            params[2]);\n-                    return null;\n-                });\n-                testsCallables.add(() -> {\n-                    testParameter(\n-                            \"-Djava.security.auth.debug=\",\n-                            params[0],\n-                            params[1],\n-                            params[2]);\n-                    return null;\n-                });\n-\n-                System.out.println(\"Option added to all lowercase tests \" + Arrays.toString(params));\n-            });\n-\n-            System.out.println(\"Starting all the threads\");\n-            final List<Future<Void>> res = executorService.invokeAll(testsCallables);\n-            for (final Future<Void> future : res) {\n-                future.get();\n-            }\n-        }\n-    }\n-\n@@ -266,39 +175,0 @@\n-    \/**\n-     * This test will run all options in parallel with all param names\n-     * in uppercase\n-     *\/\n-    @Test\n-    public void debugOptionsUpperCaseTest() throws Exception {\n-\n-        try (final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\n-            final List<Callable<Void>> testsCallables = new ArrayList<>();\n-\n-            patternMatches.forEach(params -> {\n-                testsCallables.add(() -> {\n-                    testUpperCaseParameter(\n-                            \"-Djava.security.debug=\",\n-                            params[0],\n-                            params[1],\n-                            params[2]);\n-                    return null;\n-                });\n-                testsCallables.add(() -> {\n-                    testUpperCaseParameter(\n-                            \"-Djava.security.auth.debug=\",\n-                            params[0],\n-                            params[1],\n-                            params[2]);\n-                    return null;\n-                });\n-\n-                System.out.println(\"Option added to all upper case tests \" + Arrays.toString(params));\n-            });\n-\n-            System.out.println(\"Starting all the threads\");\n-            final List<Future<Void>> res = executorService.invokeAll(testsCallables);\n-            for (final Future<Void> future : res) {\n-                future.get();\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/util\/Debug\/DebugOptions.java","additions":0,"deletions":130,"binary":false,"changes":130,"status":"modified"}]}