{"files":[{"patch":"@@ -41,1 +41,1 @@\n-  static const uint strong_count = 4 JVMTI_ONLY(+ 1) CDS_ONLY(+ 1);\n+  static const uint strong_count = 4 JVMTI_ONLY(+ 1);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,2 +76,0 @@\n-  \/\/ This has to be done because OopStorageSet expects it.\n-  training_data_set()->initialize_oopstorage();\n@@ -438,1 +436,3 @@\n-  training_data_set()->keep_alive(klass);\n+  Handle hm(JavaThread::current(), klass->java_mirror());\n+  jobject hmj = JNIHandles::make_global(hm);\n+  _holder_mirror = hmj;\n@@ -440,0 +440,1 @@\n+  assert(holder() == klass, \"\");\n@@ -761,0 +762,1 @@\n+  _holder_mirror = nullptr;\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"gc\/shared\/oopStorage.hpp\"\n-#include \"gc\/shared\/oopStorageSet.hpp\"\n@@ -37,1 +35,0 @@\n-#include \"oops\/access.hpp\"\n@@ -42,1 +39,0 @@\n-#include \"utilities\/debug.hpp\"\n@@ -179,1 +175,0 @@\n-    friend KlassTrainingData;\n@@ -186,9 +181,0 @@\n-    OopStorage* _mirror_refs;\n-    void keep_alive(InstanceKlass* klass) {\n-      assert(_mirror_refs != nullptr, \"Did you forget to call initialize()?\");\n-      oop* handle = _mirror_refs->allocate();\n-      if (handle == nullptr) {\n-        vm_exit_out_of_memory(sizeof(oop), OOM_MALLOC_ERROR, \"Cannot allocate oop storage for mirror\");\n-      }\n-      NativeAccess<>::oop_store(handle, klass->java_mirror());\n-    }\n@@ -198,5 +184,1 @@\n-      : _table(arg...), _mirror_refs(nullptr) {\n-    }\n-    void initialize_oopstorage() {\n-      assert(_mirror_refs == nullptr, \"Already initialized\");\n-      _mirror_refs = OopStorageSet::create_strong(\"Training OopStorage\", mtInternal);\n+      : _table(arg...) {\n@@ -438,0 +420,1 @@\n+  jobject _holder_mirror;   \/\/ extra link to prevent unloading by GC\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -192,1 +192,4 @@\n-  TrainingData::initialize();\n+  \/\/ Initialize TrainingData only we're recording\/replaying\n+  if (TrainingData::have_data() || TrainingData::need_data()) {\n+   TrainingData::initialize();\n+  }\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-            \"Training OopStorage\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}