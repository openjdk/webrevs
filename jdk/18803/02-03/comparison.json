{"files":[{"patch":"@@ -80,0 +80,1 @@\n+  src_info->set_id(_objs->length());\n@@ -81,1 +82,0 @@\n-  src_info->set_index(_objs->length()-1);\n@@ -594,0 +594,3 @@\n+\/\/ The objects that have embedded pointers will sink\n+\/\/ towards the end of the list. This ensures we have a maximum\n+\/\/ number of leading zero bits in the relocation bitmap.\n@@ -600,1 +603,3 @@\n-    return (*a)->index() - (*b)->index();\n+    \/\/ This is necessary to keep the sorting order stable. Otherwise the\n+    \/\/ archive's contents may not be deterministic.\n+    return (*a)->id() - (*b)->id();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -132,1 +132,2 @@\n-    int _index;              \/\/ The location of this object in _source_objs\n+    int _id; \/\/ Each object has a unique serial ID, starting from zero. The ID is assigned\n+             \/\/ when the object is added into _source_objs.\n@@ -139,1 +140,1 @@\n-      _size_in_bytes(ref->size() * BytesPerWord), _index(0), _msotype(ref->msotype()),\n+      _size_in_bytes(ref->size() * BytesPerWord), _id(0), _msotype(ref->msotype()),\n@@ -170,1 +171,1 @@\n-    void set_has_embedded_pointer()  { _has_embedded_pointer = true; }\n+    void set_has_embedded_pointer()   { _has_embedded_pointer = true; }\n@@ -172,2 +173,2 @@\n-    int index()           const    { return _index; }\n-    void set_index(int i)          { _index = i; }\n+    int id()              const    { return _id; }\n+    void set_id(int i)             { _id = i; }\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1594,1 +1594,1 @@\n-  assert(map->size() <= old_size, \"Map size should have decreased\");\n+  assert(map->size() <= old_size, \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}