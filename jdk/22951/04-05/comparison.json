{"files":[{"patch":"@@ -28,2 +28,2 @@\n- * @modules java.base\/java.lang:+open\n- * @run main\/othervm Password\n+ * @library \/test\/lib\n+ * @run main\/manual Password\n@@ -36,3 +36,1 @@\n-import java.io.*;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n+import javax.swing.*;\n@@ -40,1 +38,1 @@\n-import jdk.test.lib.Asserts;\n+import jdk.test.lib.UIBuilder;\n@@ -42,4 +40,1 @@\n-public class Password {\n-    private static final String VISIBLE_LINE = \"lineVisible\";\n-\n-    public static void main(String args[]) throws Exception {\n+import java.util.Arrays;\n@@ -47,1 +42,1 @@\n-        InputStream originalInput = System.in;\n+public class Password {\n@@ -49,3 +44,4 @@\n-        \/\/ setting the initial input stream from the System class\n-        MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(System.class, MethodHandles.lookup());\n-        VarHandle initialIn = lookup.findStaticVarHandle(System.class, \"initialIn\", InputStream.class);\n+    private static final int TIMEOUT_MS = 240000;\n+    private volatile boolean failed = false;\n+    private volatile boolean aborted = false;\n+    private Thread currentThread = null;\n@@ -53,4 +49,1 @@\n-        \/\/ setting the input stream and the output stream\n-        ByteArrayInputStream inputStream = (new ByteArrayInputStream((VISIBLE_LINE + \"\\nlineInvisible\\n\").getBytes()));\n-        System.setIn(inputStream);\n-        initialIn.set(inputStream);\n+    public static void password() throws Exception {\n@@ -58,1 +51,0 @@\n-        \/\/ handling the password callbacks, as the input stream is here the invisible should not echo and should be null\n@@ -62,3 +54,2 @@\n-\n-        System.out.println(\"Two passwords will be prompted for. They will automatically be populated. \" +\n-                \"The invisible password will remain null with this input stream configuration.\");\n+        System.out.println(\"Two passwords will be prompted for. The first one \" +\n+                \"should have echo off, the second one on. Otherwise, this test fails\");\n@@ -67,0 +58,24 @@\n+        System.out.println(\"You input \" + new String(nc.getPassword()) +\n+                \" and \" + new String(nc2.getPassword()));\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (Arrays.asList(args).contains(\"--password\")) {\n+            password();\n+        } else {\n+            final String instructions = String.format(\"%s\/bin\/java -cp \\n%s \\nPassword  \\n--password\",\n+                    System.getProperty(\"java.home\"),\n+                    System.getProperty(\"java.class.path\")\n+            );\n+\n+            boolean testFailed = new Password().validate(\n+                    \"Please copy and execute the following script in the terminal\/cmd, \" +\n+                            \"then follow the instructions. \\n\" +\n+                            \"Once the test is complete please select weather the test has passed.\",\n+                    instructions);\n+\n+            if (testFailed) {\n+                throw new RuntimeException(\"Test has failed\");\n+            }\n+        }\n+    }\n@@ -68,3 +83,11 @@\n-        \/\/reverting everything back\n-        initialIn.set(originalInput);\n-        System.setIn(originalInput);\n+    public boolean validate(String instruction, String message) {\n+        failed = false;\n+        currentThread = Thread.currentThread();\n+        final JDialog dialog = new UIBuilder.DialogBuilder()\n+                .setTitle(\"Password\")\n+                .setInstruction(instruction)\n+                .setMessage(message)\n+                .setPassAction(e -> pass())\n+                .setFailAction(e -> fail())\n+                .setCloseAction(this::abort)\n+                .build();\n@@ -72,0 +95,40 @@\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                dialog.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        try {\n+            Thread.sleep(TIMEOUT_MS);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\n+                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n+        } catch (final InterruptedException e) {\n+            if (aborted) {\n+                throw new RuntimeException(\"TEST ABORTED\");\n+            }\n+\n+            if (failed) {\n+                System.out.println(\"TEST FAILED\");\n+                System.out.println(message);\n+            } else {\n+                System.out.println(\"TEST PASSED\");\n+            }\n+        } finally {\n+            dialog.dispose();\n+        }\n+\n+        return failed;\n+    }\n+\n+    public void pass() {\n+        failed = false;\n+        currentThread.interrupt();\n+    }\n+\n+    public void fail() {\n+        failed = true;\n+        currentThread.interrupt();\n+    }\n@@ -73,2 +136,3 @@\n-        Asserts.assertNull(nc.getPassword());\n-        Asserts.assertEquals(VISIBLE_LINE, new String(nc2.getPassword()));\n+    public void abort() {\n+        aborted = true;\n+        currentThread.interrupt();\n","filename":"test\/jdk\/com\/sun\/security\/auth\/callback\/TextCallbackHandler\/Password.java","additions":91,"deletions":27,"binary":false,"changes":118,"status":"modified"}]}