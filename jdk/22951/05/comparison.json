{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -31,12 +32,0 @@\n-\/*\n- * This scenario cannot be automated because util\/Password.java verifies the given input stream is\n- * equal to the initialSystemIn. This prevents the test from providing a custom input stream.\n- *\n- *  Steps to run the test:\n- *  1) Compile the class using the JDK version being tested: '<JdkBin>\/javac Password.java'\n- *  2) Run the test using the JDK version being tested: '<JdkBin>\/java -cp . Password'\n- *  3) Type in the first password, it should not be visible in the console\n- *  4) Type in the second password, it should be visible in the console\n- *  5) The final output line displays the entered passwords, both should be visible\n- *\/\n-\n@@ -44,0 +33,2 @@\n+\n+\n@@ -45,0 +36,5 @@\n+import javax.swing.*;\n+\n+import jdk.test.lib.UIBuilder;\n+\n+import java.util.Arrays;\n@@ -47,1 +43,8 @@\n-   public static void main(String args[]) throws Exception {\n+\n+    private static final int TIMEOUT_MS = 240000;\n+    private volatile boolean failed = false;\n+    private volatile boolean aborted = false;\n+    private Thread currentThread = null;\n+\n+    public static void password() throws Exception {\n+\n@@ -51,1 +54,0 @@\n-\n@@ -54,1 +56,1 @@\n-        Callback[] callbacks = { nc, nc2 };\n+        Callback[] callbacks = {nc, nc2};\n@@ -58,1 +60,80 @@\n-   }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (Arrays.asList(args).contains(\"--password\")) {\n+            password();\n+        } else {\n+            final String instructions = String.format(\"%s\/bin\/java -cp \\n%s \\nPassword  \\n--password\",\n+                    System.getProperty(\"java.home\"),\n+                    System.getProperty(\"java.class.path\")\n+            );\n+\n+            boolean testFailed = new Password().validate(\n+                    \"Please copy and execute the following script in the terminal\/cmd, \" +\n+                            \"then follow the instructions. \\n\" +\n+                            \"Once the test is complete please select weather the test has passed.\",\n+                    instructions);\n+\n+            if (testFailed) {\n+                throw new RuntimeException(\"Test has failed\");\n+            }\n+        }\n+    }\n+\n+    public boolean validate(String instruction, String message) {\n+        failed = false;\n+        currentThread = Thread.currentThread();\n+        final JDialog dialog = new UIBuilder.DialogBuilder()\n+                .setTitle(\"Password\")\n+                .setInstruction(instruction)\n+                .setMessage(message)\n+                .setPassAction(e -> pass())\n+                .setFailAction(e -> fail())\n+                .setCloseAction(this::abort)\n+                .build();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                dialog.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        try {\n+            Thread.sleep(TIMEOUT_MS);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\n+                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n+        } catch (final InterruptedException e) {\n+            if (aborted) {\n+                throw new RuntimeException(\"TEST ABORTED\");\n+            }\n+\n+            if (failed) {\n+                System.out.println(\"TEST FAILED\");\n+                System.out.println(message);\n+            } else {\n+                System.out.println(\"TEST PASSED\");\n+            }\n+        } finally {\n+            dialog.dispose();\n+        }\n+\n+        return failed;\n+    }\n+\n+    public void pass() {\n+        failed = false;\n+        currentThread.interrupt();\n+    }\n+\n+    public void fail() {\n+        failed = true;\n+        currentThread.interrupt();\n+    }\n+\n+    public void abort() {\n+        aborted = true;\n+        currentThread.interrupt();\n+    }\n","filename":"test\/jdk\/com\/sun\/security\/auth\/callback\/TextCallbackHandler\/Password.java","additions":98,"deletions":17,"binary":false,"changes":115,"status":"modified"}]}