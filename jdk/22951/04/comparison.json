{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,13 +28,2 @@\n- * @run main\/manual Password\n- *\/\n-\n-\/*\n- * This scenario cannot be automated because util\/Password.java verifies the given input stream is\n- * equal to the initialSystemIn. This prevents the test from providing a custom input stream.\n- *\n- *  Steps to run the test:\n- *  1) Compile the class using the JDK version being tested: '<JdkBin>\/javac Password.java'\n- *  2) Run the test using the JDK version being tested: '<JdkBin>\/java -cp . Password'\n- *  3) Type in the first password, it should not be visible in the console\n- *  4) Type in the second password, it should be visible in the console\n- *  5) The final output line displays the entered passwords, both should be visible\n+ * @modules java.base\/java.lang:+open\n+ * @run main\/othervm Password\n@@ -44,0 +33,2 @@\n+\n+\n@@ -45,0 +36,5 @@\n+import java.io.*;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import jdk.test.lib.Asserts;\n@@ -47,1 +43,16 @@\n-   public static void main(String args[]) throws Exception {\n+    private static final String VISIBLE_LINE = \"lineVisible\";\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        InputStream originalInput = System.in;\n+\n+        \/\/ setting the initial input stream from the System class\n+        MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(System.class, MethodHandles.lookup());\n+        VarHandle initialIn = lookup.findStaticVarHandle(System.class, \"initialIn\", InputStream.class);\n+\n+        \/\/ setting the input stream and the output stream\n+        ByteArrayInputStream inputStream = (new ByteArrayInputStream((VISIBLE_LINE + \"\\nlineInvisible\\n\").getBytes()));\n+        System.setIn(inputStream);\n+        initialIn.set(inputStream);\n+\n+        \/\/ handling the password callbacks, as the input stream is here the invisible should not echo and should be null\n@@ -52,3 +63,3 @@\n-        System.out.println(\"Two passwords will be prompted for. The first one \" +\n-                \"should have echo off, the second one on. Otherwise, this test fails\");\n-        Callback[] callbacks = { nc, nc2 };\n+        System.out.println(\"Two passwords will be prompted for. They will automatically be populated. \" +\n+                \"The invisible password will remain null with this input stream configuration.\");\n+        Callback[] callbacks = {nc, nc2};\n@@ -56,3 +67,9 @@\n-        System.out.println(\"You input \" + new String(nc.getPassword()) +\n-                \" and \" + new String(nc2.getPassword()));\n-   }\n+\n+        \/\/reverting everything back\n+        initialIn.set(originalInput);\n+        System.setIn(originalInput);\n+\n+\n+        Asserts.assertNull(nc.getPassword());\n+        Asserts.assertEquals(VISIBLE_LINE, new String(nc2.getPassword()));\n+    }\n","filename":"test\/jdk\/com\/sun\/security\/auth\/callback\/TextCallbackHandler\/Password.java","additions":38,"deletions":21,"binary":false,"changes":59,"status":"modified"}]}