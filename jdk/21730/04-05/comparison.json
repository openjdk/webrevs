{"files":[{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8343110\n+ * @summary Check for expected behavior of default implementation of\n+ *          CharSequence.getChars().\n+ * @run testng GetChars\n+ *\/\n+public class GetChars {\n+    private static CharSequence CS = new CharSequence() {\n+        @Override\n+        public int length() {\n+            return 4;\n+        }\n+\n+        @Override\n+        public char charAt(int index) {\n+            return \"Test\".charAt(index);\n+        }\n+\n+        @Override\n+        public CharSequence subSequence(int start, int end) {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+\n+    @Test\n+    public void testExactCopy() {\n+        var dst = new char[4];\n+        CS.getChars(0, 4, dst, 0);\n+        Assert.assertEquals(dst, new char[] {'T', 'e', 's', 't'});\n+    }\n+\n+    @Test\n+    public void testPartialCopy() {\n+        var dst = new char[2];\n+        CS.getChars(1, 3, dst, 0);\n+        Assert.assertEquals(dst, new char[] {'e', 's'});\n+    }\n+\n+    @Test\n+    public void testPositionedCopy() {\n+        var dst = new char[] {1, 2, 3, 4, 5, 6};\n+        CS.getChars(0, 4, dst, 1);\n+        Assert.assertEquals(dst, new char[] {1, 'T', 'e', 's', 't', 6});\n+    }\n+\n+    @Test\n+    public void testSrcBeginIsNegative() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CS.getChars(-1, 3, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testDstBeginIsNegative() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CS.getChars(0, 4, new char[4], -1));\n+    }\n+\n+    @Test\n+    public void testSrcBeginIsGreaterThanSrcEnd() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CS.getChars(4, 0, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testSrcEndIsGreaterThanSequenceLength() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CS.getChars(0, 5, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testRequestedLengthIsGreaterThanDstLength() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CS.getChars(0, 4, new char[3], 0));\n+    }\n+\n+    @Test\n+    public void testDstIsNull() {\n+        Assert.assertThrows(NullPointerException.class,\n+                () -> CS.getChars(0, 4, null, 0));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/CharSequence\/GetChars.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.CharBuffer;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8343110\n+ * @summary Check for expected behavior of CharBuffer.getChars().\n+ * @run testng GetChars\n+ *\/\n+public class GetChars {\n+    private static CharBuffer CB = CharBuffer.wrap(\"Test\");\n+\n+    @Test\n+    public void testExactCopy() {\n+        var dst = new char[4];\n+        CB.getChars(0, 4, dst, 0);\n+        Assert.assertEquals(dst, new char[] {'T', 'e', 's', 't'});\n+    }\n+\n+    @Test\n+    public void testPartialCopy() {\n+        var dst = new char[2];\n+        CB.getChars(1, 3, dst, 0);\n+        Assert.assertEquals(dst, new char[] {'e', 's'});\n+    }\n+\n+    @Test\n+    public void testPositionedCopy() {\n+        var dst = new char[] {1, 2, 3, 4, 5, 6};\n+        CB.getChars(0, 4, dst, 1);\n+        Assert.assertEquals(dst, new char[] {1, 'T', 'e', 's', 't', 6});\n+    }\n+\n+    @Test\n+    public void testSrcBeginIsNegative() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CB.getChars(-1, 3, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testDstBeginIsNegative() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CB.getChars(0, 4, new char[4], -1));\n+    }\n+\n+    @Test\n+    public void testSrcBeginIsGreaterThanSrcEnd() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CB.getChars(4, 0, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testSrcEndIsGreaterThanSequenceLength() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CB.getChars(0, 5, new char[4], 0));\n+    }\n+\n+    @Test\n+    public void testRequestedLengthIsGreaterThanDstLength() {\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> CB.getChars(0, 4, new char[3], 0));\n+    }\n+\n+    @Test\n+    public void testDstIsNull() {\n+        Assert.assertThrows(NullPointerException.class,\n+                () -> CB.getChars(0, 4, null, 0));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/CharBuffer\/GetChars.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}