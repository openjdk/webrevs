{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -196,10 +196,1 @@\n-                switch (cs) {\n-                    case String s -> s.getChars(next, next + n, cbuf, off);\n-                    case StringBuilder sb -> sb.getChars(next, next + n, cbuf, off);\n-                    case StringBuffer sb -> sb.getChars(next, next + n, cbuf, off);\n-                    case CharBuffer cb -> cb.get(next, cbuf, off, n);\n-                    default -> {\n-                        for (int i = 0; i < n; i++)\n-                            cbuf[off + i] = cs.charAt(next + i);\n-                    }\n-                }\n+                cs.getChars(next, next + n, cbuf, off);\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -514,0 +514,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,0 +305,43 @@\n+    \/**\n+     * Copies characters from this sequence into the given destination array.\n+     * The first character to be copied is at index {@code srcBegin}; the last\n+     * character to be copied is at index {@code srcEnd-1}. The total number of\n+     * characters to be copied is {@code srcEnd-srcBegin}. The\n+     * characters are copied into the subarray of {@code dst} starting\n+     * at index {@code dstBegin} and ending at index:\n+     * <pre>{@code\n+     * dstbegin + (srcEnd-srcBegin) - 1\n+     * }<\/pre>\n+     *\n+     * @param      srcBegin   start copying at this offset.\n+     * @param      srcEnd     stop copying at this offset.\n+     * @param      dst        the array to copy the data into.\n+     * @param      dstBegin   offset into {@code dst}.\n+     * @throws     IndexOutOfBoundsException  if any of the following is true:\n+     *             <ul>\n+     *             <li>{@code srcBegin} is negative\n+     *             <li>{@code dstBegin} is negative\n+     *             <li>the {@code srcBegin} argument is greater than\n+     *             the {@code srcEnd} argument.\n+     *             <li>{@code srcEnd} is greater than\n+     *             {@code this.length()}.\n+     *             <li>{@code dstBegin+srcEnd-srcBegin} is greater than\n+     *             {@code dst.length}\n+     *             <\/ul>\n+     * @throws     NullPointerException if {@code dst} is {@code null}\n+     *\n+     * @implSpec\n+     * The default implementation invokes {@link #charAt(int index)} in a loop\n+     * iterating {@code index} from {@code srcBegin} to {@code srcEnd-1}.\n+     * Concurrent truncation of this character sequence can throw\n+     * {@code IndexOutOfBoundsException}. In this case, some characters, but not\n+     * all, may be already transferred.\n+     *\n+     * @since 25\n+     *\/\n+    public default void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {\n+        Objects.checkFromToIndex(srcBegin, srcEnd, length());\n+        Objects.checkIndex(dstBegin, dst.length - (srcEnd - srcBegin) + 1);\n+        while (srcBegin < srcEnd)\n+            dst[dstBegin++] = charAt(srcBegin++);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharSequence.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1768,0 +1768,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1899,0 +1899,38 @@\n+    \/**\n+     * Absolute bulk <i>get<\/i> method.\n+     *\n+     * <p> This method transfers {@code srcEnd-srcBegin} characters from this\n+     * buffer into the given array, starting at index {@code srcBegin} in this\n+     * buffer and at offset {@code dstBegin} in the array. The position of this\n+     * buffer is unchanged.\n+     *\n+     * @param  srcBegin\n+     *         The index in this buffer from which the first character will be\n+     *         read; must be non-negative and less than {@code limit()}\n+     *\n+     * @param  srcEnd\n+     *         The index in this buffer directly before the last character to\n+     *         read; must be non-negative and less or equal than {@code limit()}\n+     *         and must be greater or equal than {@code srcBegin}\n+     *\n+     * @param  dst\n+     *         The destination array\n+     *\n+     * @param  dstBegin\n+     *         The offset within the array of the first character to be\n+     *         written; must be non-negative and less than {@code dst.length}\n+     *\n+     * @throws  IndexOutOfBoundsException\n+     *          If the preconditions on the {@code srcBegin}, {@code srcEnd},\n+     *          and {@code dstBegin} parameters do not hold\n+     *\n+     * @implSpec This method is equivalent to\n+     *           {@code get(srcBegin, dst, dstBegin, srcEnd - srcBegin)}.\n+     *\n+     * @since 25\n+     *\/\n+    @Override\n+    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {\n+        get(srcBegin, dst, dstBegin, srcEnd - srcBegin);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"}]}