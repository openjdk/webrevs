{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,71 +25,6 @@\n-   @bug 4078566 6658398\n-   @summary Test for a memory leak in Image.\n-   @run main\/manual MemoryLeakTest\n-*\/\n-\n-import java.applet.Applet;\n-import java.lang.*;\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-class Globals {\n-  static boolean testPassed=false;\n-  static Thread mainThread=null;\n-}\n-\n-public class MemoryLeakTest extends Applet {\n-\n-public static void main(String args[]) throws Exception {\n-  new TestDialog(new Frame(), \"MemoryLeakTest\").start();\n-  new MemoryLeak().start();\n-  Globals.mainThread = Thread.currentThread();\n-  try {\n-    Thread.sleep(300000);\n-  } catch (InterruptedException e) {\n-    if (!Globals.testPassed)\n-      throw new Exception(\"MemoryLeakTest failed.\");\n-  }\n-}\n-\n-}\n-\n-class TestDialog extends Dialog\n-    implements ActionListener {\n-\n-TextArea output;\n-Button passButton;\n-Button failButton;\n-String name;\n-\n-public TestDialog(Frame frame, String name)\n-{\n-  super(frame, name + \" Pass\/Fail Dialog\");\n-  this.name = name;\n-  output = new TextArea(11, 50);\n-  add(\"North\", output);\n-  output.append(\"Do the following steps on Solaris only.\\n\");\n-  output.append(\"Maximize and minimize the Memory Leak Test window.\\n\");\n-  output.append(\"Execute the following after minimize.\\n\");\n-  output.append(\"    ps -al | egrep -i 'java|PPID'\\n\");\n-  output.append(\"Examine the size of the process under SZ.\\n\");\n-  output.append(\"Maximize and minimize the Memory Leak Test window again.\\n\");\n-  output.append(\"Execute the following after minimize.\\n\");\n-  output.append(\"    ps -al | egrep -i 'java|PPID'\\n\");\n-  output.append(\"Examine the size of the process under SZ.\\n\");\n-  output.append(\"If the two SZ values are the same, plus or minus one,\\n\");\n-  output.append(\"then click Pass, else click Fail.\");\n-  Panel buttonPanel = new Panel();\n-  passButton = new Button(\"Pass\");\n-  failButton = new Button(\"Fail\");\n-  passButton.addActionListener(this);\n-  failButton.addActionListener(this);\n-  buttonPanel.add(passButton);\n-  buttonPanel.add(failButton);\n-  add(\"South\", buttonPanel);\n-  pack();\n-}\n-\n-public void start()\n-{\n-  show();\n-}\n+ * @bug 4078566 6658398\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test for a memory leak in Image.\n+ * @run main MemoryLeakTest\n+ *\/\n@@ -97,9 +32,33 @@\n-public void actionPerformed(ActionEvent event)\n-{\n-    if ( event.getSource() == passButton ) {\n-      Globals.testPassed = true;\n-      System.err.println(name + \" Passed.\");\n-    }\n-    else if ( event.getSource() == failButton ) {\n-      Globals.testPassed = false;\n-      System.err.println(name + \" Failed.\");\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.ComponentListener;\n+\n+public class MemoryLeakTest {\n+    private static final String INSTRUCTIONS =\n+        \"\"\"\n+         Do the following steps on Solaris only.\n+         Maximize and minimize the Memory Leak Test window.\n+         Execute the following after minimize.\n+             ps -al | egrep -i 'java|PPID'\n+         Examine the size of the process under SZ.\n+         Maximize and minimize the Memory Leak Test window again.\n+         Execute the following after minimize.\n+             ps -al | egrep -i 'java|PPID'\n+         Examine the size of the process under SZ.\n+         If the two SZ values are the same, plus or minus one,\n+         then click Pass, else click Fail.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+            .builder()\n+            .title(\"MemoryLeakTest Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .rows(15)\n+            .columns(40)\n+            .testUI(MemoryLeak::new)\n+            .build()\n+            .awaitAndCheck();\n@@ -107,3 +66,0 @@\n-    this.dispose();\n-    if (Globals.mainThread != null)\n-      Globals.mainThread.interrupt();\n@@ -112,1 +68,2 @@\n-}\n+class MemoryLeak extends Frame implements ComponentListener {\n+    private Image osImage;\n@@ -114,0 +71,5 @@\n+    public MemoryLeak() {\n+        super(\"Memory Leak Test\");\n+        setSize(200, 200);\n+        addComponentListener(this);\n+    }\n@@ -115,3 +77,3 @@\n-class MemoryLeak extends Frame implements ComponentListener\n-{\n-private Image osImage;\n+    public static void main(String[] args) {\n+        new MemoryLeak().start();\n+    }\n@@ -119,6 +81,3 @@\n-public MemoryLeak()\n-{\n-    super(\"Memory Leak Test\");\n-    setSize(200, 200);\n-    addComponentListener(this);\n-}\n+    public void start() {\n+        setVisible(true);\n+    }\n@@ -126,4 +85,5 @@\n-public static void main(String args[])\n-{\n-   new MemoryLeak().start();\n-}\n+    public void paint(Graphics g) {\n+        if (osImage != null) {\n+            g.drawImage(osImage, 0, 0, this);\n+        }\n+    }\n@@ -131,4 +91,3 @@\n-public void start()\n-{\n-  show();\n-}\n+    public void update(Graphics g) {\n+        paint(g);\n+    }\n@@ -136,3 +95,12 @@\n-public void paint(Graphics g) {\n-    if (osImage != null) {\n-        g.drawImage(osImage, 0, 0, this);\n+    public void componentResized(ComponentEvent e) {\n+        Image oldimage = osImage;\n+        osImage = createImage(getSize().width, getSize().height);\n+        Graphics g = osImage.getGraphics();\n+        if (oldimage != null) {\n+            g.drawImage(oldimage, 0, 0, getSize().width, getSize().height, this);\n+            oldimage.flush();\n+        } else {\n+            g.setColor(Color.blue);\n+            g.drawLine(0, 0, getSize().width, getSize().height);\n+        }\n+        g.dispose();\n@@ -140,1 +108,0 @@\n-}\n@@ -142,4 +109,1 @@\n-public void update(Graphics g)\n-{\n-    paint(g);\n-}\n+    public void componentMoved(ComponentEvent e) {}\n@@ -147,9 +111,3 @@\n-public void componentResized(ComponentEvent e)\n-{\n-    Image oldimage = osImage;\n-    osImage = createImage(getSize().width, getSize().height);\n-    Graphics g = osImage.getGraphics();\n-    if (oldimage != null) {\n-        g.drawImage(oldimage, 0, 0, getSize().width, getSize().height, this);\n-        oldimage.flush();\n-    } else {\n+    public void componentShown(ComponentEvent e) {\n+        osImage = createImage(getSize().width, getSize().height);\n+        Graphics g = osImage.getGraphics();\n@@ -158,0 +116,1 @@\n+        g.dispose();\n@@ -159,13 +118,0 @@\n-    g.dispose();\n-}\n-\n-public void componentMoved(ComponentEvent e) {}\n-\n-public void componentShown(ComponentEvent e)\n-{\n-    osImage = createImage(getSize().width, getSize().height);\n-    Graphics g = osImage.getGraphics();\n-    g.setColor(Color.blue);\n-    g.drawLine(0, 0, getSize().width, getSize().height);\n-    g.dispose();\n-}\n@@ -173,1 +119,1 @@\n-public void componentHidden(ComponentEvent e) {}\n+    public void componentHidden(ComponentEvent e) {}\n","filename":"test\/jdk\/java\/awt\/image\/MemoryLeakTest\/MemoryLeakTest.java","additions":79,"deletions":133,"binary":false,"changes":212,"status":"modified"}]}