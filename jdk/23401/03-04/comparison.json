{"files":[{"patch":"@@ -28,1 +28,2 @@\n- * @build jdk.test.lib.Utils\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n@@ -48,0 +49,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -77,1 +80,1 @@\n-            assert smallFilePath.getParent().equals(largeFilePath.getParent());\n+            assertEquals(smallFilePath.getParent(), largeFilePath.getParent());\n@@ -145,5 +148,2 @@\n-        if (count != filePath.toFile().length()) {\n-            throw new RuntimeException(\"wrong amount of data returned\");\n-        }\n-        Path tempPath = temp.toPath();\n-        assert Files.mismatch(filePath, tempPath) < 0;\n+        assertEquals(filePath.toFile().length(), (long) count, \"wrong amount of data returned\");\n+        assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SelCacheTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @build jdk.test.lib.Utils\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n@@ -50,0 +51,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -87,1 +90,1 @@\n-            assert smallFilePath.getParent().equals(largeFilePath.getParent());\n+            assertEquals(smallFilePath.getParent(), largeFilePath.getParent());\n@@ -156,5 +159,2 @@\n-        if (count != filePath.toFile().length()) {\n-            throw new RuntimeException (\"wrong amount of data returned\");\n-        }\n-        Path tempPath = temp.toPath();\n-        assert Files.mismatch(filePath, tempPath) < 0;\n+        assertEquals(filePath.toFile().length(), (long) count, \"wrong amount of data returned\");\n+        assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test1.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @build jdk.test.lib.Utils\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n@@ -47,0 +48,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -76,1 +79,1 @@\n-            assert smallFilePath.getParent().equals(largeFilePath.getParent());\n+            assertEquals(smallFilePath.getParent(), largeFilePath.getParent());\n@@ -181,2 +184,1 @@\n-                Path tempPath = temp.toPath();\n-                assert Files.mismatch(filePath, tempPath) < 0;\n+                assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test12.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @build jdk.test.lib.Utils\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n@@ -48,0 +49,1 @@\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -183,2 +185,1 @@\n-                Path tempPath = temp.toPath();\n-                assert Files.mismatch(filePath, tempPath) < 0;\n+                assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test13.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @build jdk.test.lib.Utils\n+ * @build jdk.test.lib.Asserts\n+ *        jdk.test.lib.Utils\n@@ -44,0 +45,1 @@\n+\n@@ -47,0 +49,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -73,1 +77,1 @@\n-            assert smallFilePath.getParent().equals(largeFilePath.getParent());\n+            assertEquals(smallFilePath.getParent(), largeFilePath.getParent());\n@@ -201,2 +205,1 @@\n-                Path tempPath = temp.toPath();\n-                assert Files.mismatch(filePath, tempPath) < 0;\n+                assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test9.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -72,1 +74,1 @@\n-            assert smallFilePath.getParent().equals(largeFilePath.getParent());\n+            assertEquals(smallFilePath.getParent(), largeFilePath.getParent());\n@@ -195,2 +197,1 @@\n-                Path tempPath = temp.toPath();\n-                assert Files.mismatch(filePath, tempPath) < 0;\n+                assertFileContentsEqual(filePath, temp.toPath());\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test9a.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ *        jdk.test.lib.Asserts\n@@ -38,1 +39,0 @@\n-import java.io.UncheckedIOException;\n@@ -59,0 +59,1 @@\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -221,1 +222,1 @@\n-        assert Files.mismatch(src, dest) < 0;\n+        assertFileContentsEqual(src, dest);\n@@ -285,5 +286,1 @@\n-                    try {\n-                        assert Files.mismatch(body, source) < 0;\n-                    } catch (IOException exception) {\n-                        throw new UncheckedIOException(exception);\n-                    }\n+                    assertFileContentsEqual(body, source);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BasicTest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- *        jdk.test.lib.net.SimpleSSLContext\n+ *        jdk.test.lib.Asserts\n@@ -33,0 +33,1 @@\n+ *        jdk.test.lib.net.SimpleSSLContext\n@@ -36,2 +37,0 @@\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n@@ -50,0 +49,1 @@\n+import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -256,5 +256,1 @@\n-                    try {\n-                        assert Files.mismatch(body, source) < 0;\n-                    } catch (IOException exception) {\n-                        throw new UncheckedIOException(exception);\n-                    }\n+                    assertFileContentsEqual(body, source);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/FixedThreadPoolTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,0 +26,4 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -610,0 +614,22 @@\n+    \/**\n+     * Asserts that contents of two files are equal.\n+     *\n+     * @param f1 The path of the first file to compare\n+     * @param f2 The path of the second file to compare\n+     * @throws RuntimeException on mismatch or I\/O failure\n+     *\/\n+    public static void assertFileContentsEqual(Path f1, Path f2) {\n+        long mismatchIndex = 0;\n+        try {\n+            mismatchIndex = Files.mismatch(f1, f2);\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        if (mismatchIndex >= 0) {\n+            String message = String.format(\n+                    \"Contents of files '%s' and '%s' mismatch at index %d\",\n+                    f1, f2, mismatchIndex);\n+            fail(message);\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}