{"files":[{"patch":"@@ -49,1 +49,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -148,1 +147,2 @@\n-        assertFileContentsEqual(filePath, temp.toPath());\n+        Path tempPath = temp.toPath();\n+        assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SelCacheTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -159,1 +158,2 @@\n-        assertFileContentsEqual(filePath, temp.toPath());\n+        Path tempPath = temp.toPath();\n+        assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -181,1 +180,2 @@\n-                assertFileContentsEqual(filePath, temp.toPath());\n+                Path tempPath = temp.toPath();\n+                assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test12.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -185,1 +184,2 @@\n-                assertFileContentsEqual(filePath, temp.toPath());\n+                Path tempPath = temp.toPath();\n+                assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test13.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -201,1 +200,2 @@\n-                assertFileContentsEqual(filePath, temp.toPath());\n+                Path tempPath = temp.toPath();\n+                assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test9.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import static jdk.test.lib.Asserts.assertFileContentsEqual;\n@@ -195,1 +194,2 @@\n-                assertFileContentsEqual(filePath, temp.toPath());\n+                Path tempPath = temp.toPath();\n+                assert Files.mismatch(filePath, tempPath) < 0;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test9a.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,5 +26,0 @@\n-import java.io.BufferedInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -615,33 +610,0 @@\n-    \/**\n-     * Asserts that contents of two files are equal.\n-     *\n-     * @param f1 The path of the first file to compare\n-     * @param f2 The path of the second file to compare\n-     * @throws RuntimeException on mismatch\n-     * @throws IOException on I\/O failures\n-     *\/\n-    public static void assertFileContentsEqual(Path f1, Path f2) throws IOException {\n-        try (InputStream s1 = new BufferedInputStream(Files.newInputStream(f1));\n-             InputStream s2 = new BufferedInputStream(Files.newInputStream(f2))) {\n-            for (long i = 0; ; i++) {\n-                int c1 = s1.read();\n-                int c2 = s2.read();\n-                String message = null;\n-                if (c1 == -1 && c2 == -1) {\n-                    break;\n-                } else if (c1 == -1) {\n-                    message = String.format(\"At index %d, `%s` reached EOF, while `%s` did not\", i, f1, f2);\n-                } else if (c2 == -1) {\n-                    message = String.format(\"At index %d, `%s` reached EOF, while `%s` did not\", i, f2, f1);\n-                } else if (c1 != c2) {\n-                    message = String.format(\n-                            \"At index %d, `%s` has `%s`, while `%s` has `%s`\",\n-                            i, f1, Character.toString(c1), f2, Character.toString(c2));\n-                }\n-                if (message != null) {\n-                    fail(message);\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"}]}