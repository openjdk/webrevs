{"files":[{"patch":"@@ -74,0 +74,3 @@\n+\n+    private static final byte[] EMPTY_ARRAY = new byte[0];\n+\n@@ -76,1 +79,0 @@\n-        byteBufferCache = new ByteBufferCache();\n@@ -395,1 +397,1 @@\n-     * Make a byte buffer from an input stream.\n+     * Make a {@link ByteBuffer} from an input stream.\n@@ -400,17 +402,7 @@\n-    public ByteBuffer makeByteBuffer(InputStream in)\n-        throws IOException {\n-        int limit = in.available();\n-        if (limit < 1024) limit = 1024;\n-        ByteBuffer result = byteBufferCache.get(limit);\n-        int position = 0;\n-        while (in.available() != 0) {\n-            if (position >= limit)\n-                \/\/ expand buffer\n-                result = ByteBuffer.\n-                    allocate(limit <<= 1).\n-                    put(result.flip());\n-            int count = in.read(result.array(),\n-                position,\n-                limit - position);\n-            if (count < 0) break;\n-            result.position(position += count);\n+    public ByteBuffer makeByteBuffer(InputStream in) throws IOException {\n+        byte[] array;\n+        synchronized (this) {\n+            if ((array = byteArrayCache) != null)\n+                byteArrayCache = null;\n+            else\n+                array = EMPTY_ARRAY;\n@@ -418,5 +410,3 @@\n-        return result.flip();\n-    }\n-\n-    public void recycleByteBuffer(ByteBuffer bb) {\n-        byteBufferCache.put(bb);\n+        com.sun.tools.javac.util.ByteBuffer buf = new com.sun.tools.javac.util.ByteBuffer(array);\n+        buf.appendStream(in);\n+        return buf.asByteBuffer();\n@@ -425,16 +415,5 @@\n-    \/**\n-     * A single-element cache of direct byte buffers.\n-     *\/\n-    private static class ByteBufferCache {\n-        private ByteBuffer cached;\n-        ByteBuffer get(int capacity) {\n-            if (capacity < 20480) capacity = 20480;\n-            ByteBuffer result =\n-                (cached != null && cached.capacity() >= capacity)\n-                ? cached.clear()\n-                : ByteBuffer.allocate(capacity);\n-            cached = null;\n-            return result;\n-        }\n-        void put(ByteBuffer x) {\n-            cached = x;\n+    public void recycleByteBuffer(ByteBuffer buf) {\n+        if (buf.hasArray()) {\n+            synchronized (this) {\n+                byteArrayCache = buf.array();\n+            }\n@@ -444,1 +423,1 @@\n-    private final ByteBufferCache byteBufferCache;\n+    private byte[] byteArrayCache;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":20,"deletions":41,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2689,1 +2689,3 @@\n-            buf.appendStream(c.classfile.openInputStream());\n+            try (InputStream input = c.classfile.openInputStream()) {\n+                buf.appendStream(input);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,7 @@\n-        elems = new byte[initialSize];\n-        length = 0;\n+        this(new byte[initialSize]);\n+    }\n+\n+    \/** Create a new byte buffer using the given array for storage.\n+     *\/\n+    public ByteBuffer(byte[] elems) {\n+        this.elems = elems;\n@@ -150,1 +155,1 @@\n-     \/** Append the content of a given input stream, and then close the stream.\n+     \/** Append the content of the given input stream.\n@@ -152,10 +157,18 @@\n-    public void appendStream(InputStream is) throws IOException {\n-        try (InputStream input = is) {\n-            while (true) {\n-\n-                \/\/ Read another chunk of data, using size hint from available().\n-                \/\/ If available() is accurate, the array size should be just right.\n-                int amountToRead = Math.max(input.available(), 64);\n-                elems = ArrayUtils.ensureCapacity(elems, length + amountToRead);\n-                int amountRead = input.read(elems, length, amountToRead);\n-                if (amountRead == -1)\n+    public void appendStream(InputStream input) throws IOException {\n+        while (true) {\n+\n+            \/\/ Read another chunk of data, using size hint from available().\n+            \/\/ If available() is accurate, the array size should be just right.\n+            int amountToRead = Math.max(input.available(), 64);\n+            elems = ArrayUtils.ensureCapacity(elems, length + amountToRead);\n+            int amountRead = input.read(elems, length, amountToRead);\n+            if (amountRead == -1)\n+                break;\n+            length += amountRead;\n+\n+            \/\/ Check for the common case where input.available() returned the\n+            \/\/ entire remaining input; in that case, avoid an extra array extension.\n+            \/\/ Note we are guaranteed that elems.length >= length + 1 at this point.\n+            if (amountRead == amountToRead) {\n+                int byt = input.read();\n+                if (byt == -1)\n@@ -163,11 +176,1 @@\n-                length += amountRead;\n-\n-                \/\/ Check for the common case where input.available() returned the\n-                \/\/ entire remaining input; in that case, avoid an extra array extension.\n-                \/\/ Note we are guaranteed that elems.length >= length + 1 at this point.\n-                if (amountRead == amountToRead) {\n-                    int byt = input.read();\n-                    if (byt == -1)\n-                        break;\n-                    elems[length++] = (byte)byt;\n-                }\n+                elems[length++] = (byte)byt;\n@@ -294,0 +297,9 @@\n+    \/** Create a {@link java.nio.ByteBuffer} view of this instance.\n+     *\n+     *  <p>\n+     *  If this instance is modified, the returned buffer may no longer reflect it.\n+     *\/\n+    public java.nio.ByteBuffer asByteBuffer() {\n+        return java.nio.ByteBuffer.wrap(elems, 0, length);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/ByteBuffer.java","additions":36,"deletions":24,"binary":false,"changes":60,"status":"modified"}]}