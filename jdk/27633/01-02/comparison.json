{"files":[{"patch":"@@ -104,0 +104,12 @@\n+    \/**\n+     * This method is called whenever the headers related methods are called on the\n+     * {@code URLConnection}. This method does any necessary checks and initializations\n+     * to make sure that the headers can be served. If this {@code URLConnection} cannot\n+     * serve the headers, then this method throws an {@code IOException}.\n+     *\n+     * @throws IOException if the headers cannot be served\n+     *\/\n+    protected void ensureCanServeHeaders() throws IOException {\n+        getInputStream();\n+    }\n+\n@@ -106,1 +118,1 @@\n-            getInputStream();\n+            ensureCanServeHeaders();\n@@ -120,1 +132,1 @@\n-                getInputStream();\n+                ensureCanServeHeaders();\n@@ -140,1 +152,1 @@\n-            getInputStream();\n+            ensureCanServeHeaders();\n@@ -155,1 +167,1 @@\n-            getInputStream();\n+            ensureCanServeHeaders();\n@@ -224,1 +236,1 @@\n-            getInputStream();\n+            ensureCanServeHeaders();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/URLConnection.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Collections;\n@@ -80,1 +79,0 @@\n-    private Map<String, List<String>> headerFields;\n@@ -181,11 +179,1 @@\n-        if (headerFields == null) {\n-            if (!isReadable()) {\n-                return Collections.emptyMap();\n-            }\n-            if (properties == null) {\n-                headerFields = Collections.emptyMap();\n-            } else {\n-                headerFields = properties.getHeaders();\n-            }\n-        }\n-        return headerFields;\n+        return super.getHeaderFields();\n@@ -197,4 +185,1 @@\n-        if (!isReadable()) {\n-            return null;\n-        }\n-        return properties == null ? null : properties.findValue(name);\n+        return super.getHeaderField(name);\n@@ -206,5 +191,1 @@\n-        if (!isReadable()) {\n-            return null;\n-        }\n-        MessageHeader props = properties;\n-        return props == null ? null : props.getValue(n);\n+        return super.getHeaderField(n);\n@@ -230,5 +211,1 @@\n-        if (!isReadable()) {\n-            return null;\n-        }\n-        MessageHeader props = properties;\n-        return props == null ? null : props.getKey(n);\n+        return super.getHeaderFieldKey(n);\n@@ -284,10 +261,6 @@\n-    private synchronized boolean isReadable() {\n-        try {\n-            \/\/ connect() (if not already connected) does the readability checks\n-            \/\/ and throws an IOException if those checks fail. A successful\n-            \/\/ completion from connect() implies the File is readable.\n-            connect();\n-        } catch (IOException e) {\n-            return false;\n-        }\n-        return true;\n+    @Override\n+    protected synchronized void ensureCanServeHeaders() throws IOException {\n+        \/\/ connect() (if not already connected) does the readability checks\n+        \/\/ and throws an IOException if those checks fail. A successful\n+        \/\/ completion from connect() implies the File is readable.\n+        connect();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/file\/FileURLConnection.java","additions":10,"deletions":37,"binary":false,"changes":47,"status":"modified"}]}