{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n- * @LastModified: Dec 2024\n+ * @LastModified: Feb 2025\n@@ -737,1 +737,0 @@\n-        if (_className != null) setClassName(_className);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/compiler\/XSLTC.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n- * @LastModified: Dec 2024\n+ * @LastModified: Feb 2025\n@@ -1002,3 +1002,0 @@\n-            \/\/ Set the translet name\n-            xsltc.setClassName(getTransletBaseName(source));\n-\n@@ -1018,0 +1015,1 @@\n+            \/\/ set package name\n@@ -1020,0 +1018,2 @@\n+            \/\/ Set the translet name\n+            xsltc.setClassName(getTransletBaseName(source));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jaxp.library;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+\n+public class JUnitTestUtil {\n+    public static final String CLS_DIR = System.getProperty(\"test.classes\");\n+    public static final String SRC_DIR = System.getProperty(\"test.src\");\n+    public static final boolean isWindows = System.getProperty(\"os.name\").contains(\"Windows\");\n+\n+    \/**\n+     * Returns the System identifier (URI) of the source.\n+     * @param path the path to the source\n+     * @return the System identifier\n+     *\/\n+    public static String getSystemId(String path) {\n+        if (path == null) return null;\n+        String xmlSysId = \"file:\/\/\" + path;\n+        if (isWindows) {\n+            path = path.replace('\\\\', '\/');\n+            xmlSysId = \"file:\/\/\/\" + path;\n+        }\n+        return xmlSysId;\n+    }\n+\n+    \/**\n+     * Copies a file.\n+     * @param src the path of the source file\n+     * @param target the path of the target file\n+     * @throws Exception if the process fails\n+     *\/\n+    public static void copyFile(String src, String target) throws Exception {\n+        try {\n+            Files.copy(Path.of(src), Path.of(target), StandardCopyOption.REPLACE_EXISTING);\n+        } catch (IOException x) {\n+            throw new Exception(x.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JUnitTestUtil.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package transform;\n+\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamSource;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Stream;\n+import jaxp.library.JUnitTestUtil;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @bug 8344925\n+ * @summary Transformer properties tests\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run junit\/othervm transform.PropertiesTest\n+ *\/\n+public class PropertiesTest {\n+    private static final String USER_DIR = System.getProperty(\"user.dir\");\n+    private static final String TEST_DIR = System.getProperty(\"test.src\");\n+    \/\/ Test parameters:\n+    \/\/ generate-translet: indicates whether to generate translet\n+    \/\/ translet-name: the name of the translet\n+    \/\/ package-name: the package name\n+    \/\/ destination-directory: the destination\n+    \/\/ expected: the class path\n+    private static Stream<Arguments> testData() {\n+        String destination = JUnitTestUtil.CLS_DIR + \"\/testdir\";\n+        return Stream.of(\n+                Arguments.of(true, \"MyTranslet\", \"org.myorg\", destination, \"\/org\/myorg\/MyTranslet.class\"),\n+                Arguments.of(false, \"Translet\", \"not.generate\", destination, \"\/not\/generate\/Translet.class\"),\n+                \/\/ translet named after the stylesheet\n+                Arguments.of(true, null, \"org.myorg\", destination, \"\/org\/myorg\/transform.class\"),\n+                \/\/ default package name die.verwandlung since JDK 9\n+                Arguments.of(true, \"MyTranslet\", null, destination, \"\/die\/verwandlung\/MyTranslet.class\"),\n+                Arguments.of(true, \"MyTranslet\", \"org.myorg\", null, \"\/org\/myorg\/MyTranslet.class\")\n+                );\n+    }\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        \/\/ so that the translet is generated under test.classes\n+        JUnitTestUtil.copyFile(JUnitTestUtil.SRC_DIR + \"\/transform.xsl\", JUnitTestUtil.CLS_DIR + \"\/transform.xsl\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(boolean generateTranslet, String name, String packageName,\n+                     String destination, String expected)\n+            throws Exception {\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+\n+        tf.setAttribute(\"generate-translet\", generateTranslet);\n+        if (name != null) tf.setAttribute(\"translet-name\", name);\n+        if (packageName != null) tf.setAttribute(\"package-name\", packageName);\n+        if (destination != null) tf.setAttribute(\"destination-directory\", destination);\n+\n+        String xslFile = JUnitTestUtil.CLS_DIR + \"\/transform.xsl\";\n+        String xslSysId = JUnitTestUtil.getSystemId(xslFile);\n+        StreamSource xsl = new StreamSource(xslSysId);\n+        tf.newTemplates(xsl);\n+\n+        String path = (destination != null) ? destination + expected : new File(xslFile).getParent() + expected;\n+\n+        if (generateTranslet) {\n+            \/\/Files.list(Path.of(path)).forEach(System.out::println);\n+            assertTrue(Files.exists(Path.of(path)), \"Translet is expected at \" + expected);\n+        } else {\n+            assertTrue(Files.notExists(Path.of(path)), \"Translet is not to be generated.\");\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/PropertiesTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}