{"files":[{"patch":"@@ -2455,5 +2455,5 @@\n-  \/\/ be rewritten during runtime (see Rewriter::rewrite_jsrs()). So setting the _methods to\n-  \/\/ be writable. The length check on the _methods is necessary because classes which\n-  \/\/ don't have any methods share the Universe::_the_empty_method_array which is in the RO region.\n-  if (_methods != nullptr && _methods->length() > 0 &&\n-      !can_be_verified_at_dumptime() && methods_contain_jsr_bytecode()) {\n+  \/\/ be rewritten during runtime (see Rewriter::rewrite_jsrs()) but they cannot be safely\n+  \/\/ checked here with ByteCodeStream. All methods that can't be verified are made writable.\n+  \/\/ The length check on the _methods is necessary because classes which don't have any\n+  \/\/ methods share the Universe::_the_empty_method_array which is in the RO region.\n+  if (_methods != nullptr && _methods->length() > 0 && !can_be_verified_at_dumptime()) {\n@@ -2700,15 +2700,0 @@\n-\n-bool InstanceKlass::methods_contain_jsr_bytecode() const {\n-  Thread* thread = Thread::current();\n-  for (int i = 0; i < _methods->length(); i++) {\n-    methodHandle m(thread, _methods->at(i));\n-    BytecodeStream bcs(m);\n-    while (!bcs.is_last_bytecode()) {\n-      Bytecodes::Code opcode = bcs.next();\n-      if (opcode == Bytecodes::_jsr || opcode == Bytecodes::_jsr_w) {\n-        return true;\n-      }\n-    }\n-  }\n-  return false;\n-}\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1119,1 +1119,0 @@\n-  bool methods_contain_jsr_bytecode() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}