{"files":[{"patch":"@@ -340,1 +340,2 @@\n-            if (c.getParent() instanceof JScrollBar) {\n+            if (c.getParent() instanceof JScrollBar\n+                || c.getParent() instanceof JTabbedPane) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKEngine.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6972078\n+ * @bug 6972078 8319938\n@@ -30,1 +30,1 @@\n- * is enabled for JFileChooser.\n+ *          is enabled for JFileChooser.\n@@ -54,2 +54,4 @@\n-    private static File[] testDir;\n-    private static File[] tempFile;\n+    private static File testDir;\n+    private static File testFile;\n+    private static File[] SubDirs;\n+    private static File[] subFiles;\n@@ -65,5 +67,0 @@\n-            testDir = new File[1];\n-            testDir[0] = new File(tmpDir, \"testDir\");\n-            if (!testDir[0].exists())\n-                testDir[0].mkdir();\n-            testDir[0].deleteOnExit();\n@@ -71,2 +68,24 @@\n-            \/\/ create temporary files inside testDir\n-            tempFile = new File[5];\n+            \/\/ Create a test directory that contains only folders\n+            testDir = new File(tmpDir, \"testDir\");\n+            if (!testDir.exists()) {\n+                testDir.mkdir();\n+            }\n+            testDir.deleteOnExit();\n+\n+            \/\/ create sub directories inside test directory\n+            SubDirs = new File[5];\n+            for (int i = 0; i < 5; ++i) {\n+                SubDirs[i] = new File(testDir, \"subDir_\" + (i+1));\n+                SubDirs[i].mkdir();\n+                SubDirs[i].deleteOnExit();\n+            }\n+\n+            \/\/ Create a test directory that contains only files\n+            testFile = new File(tmpDir, \"testFile\");\n+            if (!testFile.exists()) {\n+                testFile.mkdir();\n+            }\n+            testFile.deleteOnExit();\n+\n+            \/\/ create temporary files inside testFile\n+            subFiles = new File[5];\n@@ -74,3 +93,3 @@\n-                tempFile[i] = File.createTempFile(\"temp\", \".txt\",\n-                        new File(testDir[0].getAbsolutePath()));\n-                tempFile[i].deleteOnExit();\n+                subFiles[i] = File.createTempFile(\"subFiles_\" + (i+1),\n+                        \".txt\", new File(testFile.getAbsolutePath()));\n+                subFiles[i].deleteOnExit();\n@@ -98,1 +117,1 @@\n-                fileChooser.setCurrentDirectory(testDir[0]);\n+                fileChooser.setCurrentDirectory(testFile);\n@@ -120,0 +139,1 @@\n+                fileChooser.setCurrentDirectory(testDir);\n@@ -140,0 +160,1 @@\n+                fileChooser.setCurrentDirectory(testDir);\n@@ -157,1 +178,1 @@\n-        fileChooser = new JFileChooser(\"user.home\");\n+        fileChooser = new JFileChooser(testDir);\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestFileChooserSingleDirectorySelection.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.GridLayout;\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 8225220\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"linux\")\n+ * @summary JTabbedPane arrow should point to left or right direction\n+ *          when tab layout policy is set to SCROLL_TAB_LAYOUT and tab\n+ *          placement is set to either TOP or BOTTOM\n+ * @run main\/manual TestJTabbedPaneArrowDirection\n+ *\/\n+\n+public class TestJTabbedPaneArrowDirection {\n+    private static JFrame frame;\n+    private static JTabbedPane tabPane;\n+    private static final String INSTRUCTIONS =\n+            \"1. Observe the arrows are ponting to left and right direction\\n\" +\n+               \" for tab placement set to TOP. Default tab placement is TOP.\\n\\n\" +\n+            \"2. Press BOTTOM to change the tab placement to bottom.\\n\\n\" +\n+            \"3. Observe arrows are pointing to the left and right direction.\\n\\n\" +\n+            \"4. If the behaviour is correct, press Pass else Fail.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"JTabbedPane Arrow Direction Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(12)\n+                .columns(40)\n+                .screenCapture()\n+                .build();\n+        SwingUtilities.invokeAndWait(\n+                TestJTabbedPaneArrowDirection::createAndShowUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createAndShowUI() {\n+        int NUM_TABS = 15;\n+        frame = new JFrame(\"Test JTabbedPane Arrow Direction\");\n+        JTabbedPane tabPane = new JTabbedPane();\n+        tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+        tabPane.setTabPlacement(JTabbedPane.TOP);\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(\n+                frame, PassFailJFrame.Position.HORIZONTAL);\n+        for( int i = 0; i < NUM_TABS; ++i) {\n+            tabPane.addTab(\"Tab \" + i , new JLabel(\"Content Area\"));\n+        }\n+        JPanel panel = new JPanel(new BorderLayout());\n+        panel.add(tabPane, BorderLayout.CENTER);\n+        JButton topButton = new JButton(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setTabPlacement(JTabbedPane.TOP);\n+            }\n+        });\n+        topButton.setText(\"TOP\");\n+        JButton bottomButton = new JButton(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setTabPlacement(JTabbedPane.BOTTOM);\n+            }\n+        });\n+        bottomButton.setText(\"BOTTOM\");\n+        JPanel buttonPanel = new JPanel(new GridLayout(1, 2));\n+        buttonPanel.add(topButton);\n+        buttonPanel.add(bottomButton);\n+        panel.add(buttonPanel, BorderLayout.SOUTH);\n+        frame.add(panel);\n+        frame.setSize(500, 500);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestJTabbedPaneArrowDirection.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}