{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-    private final Map<String, List<String>> map;  \/\/ unmodifiable\n+    private final Map<String, List<String>> unmodifiableView;  \/\/ unmodifiable\n@@ -41,1 +41,1 @@\n-        this.map = Collections.unmodifiableMap(unmodHeaders);\n+        this.unmodifiableView = Collections.unmodifiableMap(unmodHeaders);\n@@ -45,0 +45,1 @@\n+    @Override\n@@ -47,0 +48,1 @@\n+    @Override\n@@ -49,0 +51,1 @@\n+    @Override\n@@ -51,0 +54,1 @@\n+    @Override\n@@ -53,0 +57,1 @@\n+    @Override\n@@ -55,0 +60,1 @@\n+    @Override\n@@ -57,0 +63,1 @@\n+    @Override\n@@ -61,0 +68,1 @@\n+    @Override\n@@ -65,0 +73,1 @@\n+    @Override\n@@ -69,0 +78,1 @@\n+    @Override\n@@ -73,0 +83,1 @@\n+    @Override\n@@ -77,0 +88,1 @@\n+    @Override\n@@ -81,1 +93,2 @@\n-    public Set<String> keySet() { return map.keySet(); }\n+    @Override\n+    public Set<String> keySet() { return unmodifiableView.keySet(); }\n@@ -83,1 +96,2 @@\n-    public Collection<List<String>> values() { return map.values(); }\n+    @Override\n+    public Collection<List<String>> values() { return unmodifiableView.values(); }\n@@ -85,3 +99,2 @@\n-    \/* TODO check that contents of set are not modifable : security *\/\n-\n-    public Set<Map.Entry<String, List<String>>> entrySet() { return map.entrySet(); }\n+    @Override\n+    public Set<Map.Entry<String, List<String>>> entrySet() { return unmodifiableView.entrySet(); }\n@@ -89,0 +102,1 @@\n+    @Override\n@@ -93,0 +107,1 @@\n+    @Override\n@@ -97,0 +112,1 @@\n+    @Override\n@@ -101,0 +117,1 @@\n+    @Override\n@@ -103,0 +120,1 @@\n+    @Override\n@@ -104,0 +122,5 @@\n+\n+    @Override\n+    public String toString() {\n+        return this.headers.toString();\n+    }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/UnmodifiableHeaders.java","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8251496\n+ * @bug 8251496 8333590\n@@ -47,0 +47,1 @@\n+import static org.testng.Assert.assertNotNull;\n@@ -48,0 +49,1 @@\n+import static org.testng.Assert.assertTrue;\n@@ -73,3 +75,3 @@\n-            { exchange.getRequestHeaders() },\n-            { Headers.of(\"Foo\", \"Bar\") },\n-            { Headers.of(Map.of(\"Foo\", List.of(\"Bar\"))) },\n+                { exchange.getRequestHeaders() },\n+                { Headers.of(\"Foo\", \"Bar\") },\n+                { Headers.of(Map.of(\"Foo\", List.of(\"Bar\"))) },\n@@ -86,0 +88,38 @@\n+    @DataProvider\n+    public Object[][] toStringHeaders() {\n+        final Headers headers = new Headers();\n+        headers.add(\"hello\", \"World\");\n+        return new Object[][] {\n+                { headers },\n+                { Headers.of(\"abc\", \"XYZ\") },\n+                { Headers.of(Map.of(\"foo\", List.of(\"Bar\"))) },\n+                { Headers.of(Map.of(\"Hello\", List.of())) },\n+                { Headers.of(Map.of(\"one\", List.of(\"two\", \"THREE\"))) },\n+        };\n+    }\n+\n+    \/*\n+     * Verify that the String returned by Headers.toString() contains the expected\n+     * key\/value(s)\n+     *\/\n+    @Test(dataProvider = \"toStringHeaders\")\n+    public void testToString(final Headers headers) {\n+        final Headers copy = Headers.of(headers);\n+        assertNotNull(copy, \"Headers.of() returned null\");\n+        final String actualToString = copy.toString();\n+        assertNotNull(actualToString, \"toString() returned null\");\n+        for (final Map.Entry<String, List<String>> originalHeadersEntry : headers.entrySet()) {\n+            final String expectedKey = originalHeadersEntry.getKey();\n+            \/\/ We just verify the presence of key and value in the toString()\n+            \/\/ return value. We intentionally don't expect or verify that the\n+            \/\/ toString() content is in some specific form.\n+            assertTrue(actualToString.contains(expectedKey),\n+                    expectedKey + \" missing in output of Headers.of().toString()\");\n+            final List<String> expectedVals = originalHeadersEntry.getValue();\n+            for (final String val : expectedVals) {\n+                assertTrue(actualToString.contains(val), val + \" for header key \"\n+                        + expectedKey + \" missing in output of Headers.of().toString()\");\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/UnmodifiableHeadersTest.java","additions":45,"deletions":5,"binary":false,"changes":50,"status":"modified"}]}