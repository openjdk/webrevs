{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -680,2 +680,2 @@\n-void JfrCheckpointManager::write_checkpoint(traceid vtid) {\n-  JfrTypeManager::write_checkpoint(vtid);\n+void JfrCheckpointManager::write_simplified_vthread_checkpoint(traceid vtid) {\n+  JfrTypeManager::write_simplified_vthread_checkpoint(vtid);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  static void write_checkpoint(traceid vtid);\n+  static void write_simplified_vthread_checkpoint(traceid vtid);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,1 +315,3 @@\n-void JfrVirtualThreadConstant::serialize(JfrCheckpointWriter & writer) {\n+\/\/ This serializer is used when the vthread name cannot\n+\/\/ be determined because we cannot access any oops.\n+void JfrSimplifiedVirtualThreadConstant::serialize(JfrCheckpointWriter & writer) {\n@@ -320,1 +322,1 @@\n-  \/\/ vthread name cannot be determined for this minimal version.\n+  \/\/ vthread name cannot be determined for this simplified version.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-class JfrVirtualThreadConstant : public JfrSerializer {\n+class JfrSimplifiedVirtualThreadConstant : public JfrSerializer {\n@@ -124,1 +124,1 @@\n-  JfrVirtualThreadConstant(traceid vtid) : _vtid(vtid) {}\n+  JfrSimplifiedVirtualThreadConstant(traceid vtid) : _vtid(vtid) {}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-void JfrTypeManager::write_checkpoint(traceid vtid) {\n+void JfrTypeManager::write_simplified_vthread_checkpoint(traceid vtid) {\n@@ -142,2 +142,2 @@\n-  JfrVirtualThreadConstant type_virtual_thread(vtid);\n-  type_virtual_thread.serialize(writer);\n+  JfrSimplifiedVirtualThreadConstant type_simple_vthread(vtid);\n+  type_simple_vthread.serialize(writer);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeManager.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void write_checkpoint(traceid vtid);\n+  static void write_simplified_vthread_checkpoint(traceid vtid);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -384,2 +384,3 @@\n-  \/\/ If the event is marked as non reentrant, write only a downstripped version of the vthread info.\n-  \/\/ Essentially all info except the vthread name, because we cannot touch the oop.\n+  \/\/ If the event is marked as non reentrant, write only a simplified version of the vthread info.\n+  \/\/ Essentially all the same info except the vthread name, because we cannot touch the oop.\n+  \/\/ Since we cannot touch the oop, we also cannot update its vthread epoch.\n@@ -387,1 +388,1 @@\n-    JfrCheckpointManager::write_checkpoint(tid);\n+    JfrCheckpointManager::write_simplified_vthread_checkpoint(tid);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}