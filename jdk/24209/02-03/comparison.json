{"files":[{"patch":"@@ -771,0 +771,1 @@\n+            out.write(\"#include \\\"oops\/klass.hpp\\\"\");\n@@ -773,2 +774,0 @@\n-            out.write(\"#include \\\"oops\/klass.hpp\\\"\");\n-            out.write(\"#include \\\"runtime\/thread.hpp\\\"\");\n@@ -793,1 +792,0 @@\n-            printHelpers(out, false);\n@@ -811,1 +809,0 @@\n-            printHelpers(out, true);\n@@ -819,30 +816,0 @@\n-    private static void printHelpers(Printer out, boolean empty) {\n-        out.write(\"template <typename EventType>\");\n-        out.write(\"class JfrNonReentrant : public EventType {\");\n-        if (!empty) {\n-            out.write(\" private:\");\n-            out.write(\"  Thread* const _thread;\");\n-            out.write(\"  int32_t _previous_nesting;\");\n-        }\n-        out.write(\" public:\");\n-        out.write(\"  JfrNonReentrant(EventStartTime timing = TIMED)\");\n-        if (empty) {\n-            out.write(\"  {}\");\n-        } else {\n-            out.write(\"    : EventType(timing), _thread(Thread::current()), _previous_nesting(JfrThreadLocal::make_non_reentrant(_thread)) {}\");\n-            out.write(\"\");\n-            out.write(\"  JfrNonReentrant(Thread* thread, EventStartTime timing = TIMED)\");\n-            out.write(\"    : EventType(timing), _thread(thread), _previous_nesting(JfrThreadLocal::make_non_reentrant(_thread)) {\");\n-            out.write(\"      assert(_thread != nullptr, \\\"invariant\\\");\");\n-            out.write(\"  }\");\n-        }\n-        if (!empty) {\n-          out.write(\"  ~JfrNonReentrant() {\");\n-          out.write(\"    if (_previous_nesting != -1) {\");\n-          out.write(\"      JfrThreadLocal::make_reentrant(_thread, _previous_nesting);\");\n-          out.write(\"    }\");\n-          out.write(\"  }\");\n-        }\n-        out.write(\"}; \");\n-    }\n-\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"jfr\/support\/jfrNonReentrant.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zTracer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#ifndef SHARE_JFR_SUPPORT_JFRNONREENTRANT_HPP\n+#define SHARE_JFR_SUPPORT_JFRNONREENTRANT_HPP\n+\n+#include \"runtime\/thread.hpp\"\n+\n+template <typename EventType>\n+class JfrNonReentrant : public EventType {\n+ private:\n+  Thread* const _thread;\n+  int32_t _previous_nesting;\n+ public:\n+  JfrNonReentrant(EventStartTime timing = TIMED) :\n+    EventType(timing), _thread(Thread::current()),\n+    _previous_nesting(JfrThreadLocal::make_non_reentrant(_thread)) {\n+    assert(_thread != nullptr, \"invariant\");\n+  }\n+\n+  JfrNonReentrant(Thread* thread, EventStartTime timing = TIMED) :\n+    EventType(timing), _thread(thread),\n+    _previous_nesting(JfrThreadLocal::make_non_reentrant(_thread)) {\n+    assert(_thread != nullptr, \"invariant\");\n+  }\n+\n+  ~JfrNonReentrant() {\n+    if (_previous_nesting != -1) {\n+      JfrThreadLocal::make_reentrant(_thread, _previous_nesting);\n+    }\n+  }\n+};\n+\n+#endif \/\/ SHARE_JFR_SUPPORT_JFRNONREENTRANT_HPP\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNonReentrant.hpp","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}