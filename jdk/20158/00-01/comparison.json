{"files":[{"patch":"@@ -440,0 +440,1 @@\n+    has_scoped_access(),\n@@ -581,0 +582,1 @@\n+, _has_scoped_access(method->is_scoped())\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+  bool               _has_scoped_access; \/\/ For shared scope closure\n@@ -146,0 +147,1 @@\n+  bool has_scoped_access() const                 { return _has_scoped_access; }\n@@ -178,0 +180,1 @@\n+  void set_has_scoped_access(bool f)             { _has_scoped_access = f; }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3521,0 +3521,3 @@\n+  if (callee->is_scoped()) {\n+    compilation->set_has_scoped_access(true);\n+  }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1035,0 +1035,1 @@\n+                            bool has_scoped_access,\n@@ -1127,0 +1128,1 @@\n+      nm->set_has_scoped_access(has_scoped_access);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+                       bool                      has_scoped_access,\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -962,0 +962,8 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciMethod::is_scoped\n+\/\/\n+\/\/ Return true for methods annotated with @Scoped\n+bool ciMethod::is_scoped() const {\n+   return get_Method()->is_scoped();\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -363,0 +363,1 @@\n+  bool is_scoped() const;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1237,0 +1237,1 @@\n+  _has_scoped_access          = 0;\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -274,0 +274,1 @@\n+          _has_scoped_access:1,        \/\/ used by for shared scope closure (scopedMemoryAccess.cpp)\n@@ -667,0 +668,3 @@\n+  bool  has_scoped_access() const                 { return _has_scoped_access; }\n+  void  set_has_scoped_access(bool z)             { _has_scoped_access = z; }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2186,0 +2186,1 @@\n+        nm->set_has_scoped_access(true); \/\/ conservative\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1064,0 +1064,1 @@\n+  set_has_scoped_access(false);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -357,0 +357,1 @@\n+  bool                  _has_scoped_access;     \/\/ For shared scope closure\n@@ -675,0 +676,2 @@\n+  bool              has_scoped_access() const    { return _has_scoped_access; }\n+  void          set_has_scoped_access(bool v)    { _has_scoped_access = v; }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3437,0 +3437,1 @@\n+                                     C->has_scoped_access(),\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -440,0 +440,4 @@\n+  if (parse_method->is_scoped()) {\n+    C->set_has_scoped_access(true);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,4 +197,7 @@\n-        \/\/ We would like to deoptimize here only if last_frame::oops_do\n-        \/\/ reports the session oop being live at this safepoint, but this\n-        \/\/ currently isn't possible due to JDK-8290892\n-        Deoptimization::deoptimize(jt, last_frame);\n+        nmethod* code = last_frame.cb()->as_nmethod();\n+        if (code->has_scoped_access()) {\n+          \/\/ We would like to deoptimize here only if last_frame::oops_do\n+          \/\/ reports the session oop being live at this safepoint, but this\n+          \/\/ currently isn't possible due to JDK-8290892\n+          Deoptimization::deoptimize(jt, last_frame);\n+        }\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}