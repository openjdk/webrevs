{"files":[{"patch":"@@ -725,0 +725,1 @@\n+  bool has_scoped_access = false;\n@@ -732,0 +733,1 @@\n+    has_scoped_access = stream->read_bool(\"hasScopedAccess\");\n@@ -799,0 +801,1 @@\n+                                        has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2082,0 +2082,1 @@\n+                                                       bool has_scoped_access,\n@@ -2186,1 +2187,1 @@\n-        nm->set_has_scoped_access(true); \/\/ conservative\n+        nm->set_has_scoped_access(has_scoped_access);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -456,0 +456,1 @@\n+                                           bool                      has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -656,0 +656,1 @@\n+  declare_constant(ConstMethodFlags::_misc_is_scoped)                     \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -566,0 +566,1 @@\n+            writeBoolean(\"hasScopedAccess\", nmethod.hasScopedAccess);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCodeStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+    protected final boolean hasScopedAccess;\n+\n@@ -74,1 +76,2 @@\n-                    boolean hasUnsafeAccess) {\n+                    boolean hasUnsafeAccess,\n+                    boolean hasScopedAccess) {\n@@ -93,0 +96,1 @@\n+        this.hasScopedAccess = hasScopedAccess;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledNmethod.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,0 +61,7 @@\n+    \/**\n+     * Returns true if this method has a {@code Scoped} annotation.\n+     *\n+     * @return true if Scoped annotation present, false otherwise\n+     *\/\n+    boolean isScoped();\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethod.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -327,0 +327,10 @@\n+    \/**\n+     * Returns true if this method has a {@code Scoped} annotation.\n+     *\n+     * @return true if Scoped annotation present, false otherwise\n+     *\/\n+    @Override\n+    public boolean isScoped() {\n+        return (getConstMethodFlags() & config().constMethodFlagsIsScoped) != 0;\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+    final int constMethodFlagsIsScoped = getConstant(\"ConstMethodFlags::_misc_is_scoped\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}