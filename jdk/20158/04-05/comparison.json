{"files":[{"patch":"@@ -725,1 +725,0 @@\n-  bool has_scoped_access = false;\n@@ -733,1 +732,0 @@\n-    has_scoped_access = stream->read_bool(\"hasScopedAccess\");\n@@ -801,1 +799,0 @@\n-                                        has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2082,1 +2082,0 @@\n-                                                       bool has_scoped_access,\n@@ -2187,1 +2186,1 @@\n-        nm->set_has_scoped_access(has_scoped_access);\n+        nm->set_has_scoped_access(true); \/\/ conservative\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -456,1 +456,0 @@\n-                                           bool                      has_scoped_access,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -656,1 +656,0 @@\n-  declare_constant(ConstMethodFlags::_misc_is_scoped)                     \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -566,1 +566,0 @@\n-            writeBoolean(\"hasScopedAccess\", nmethod.hasScopedAccess);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledCodeStream.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-    protected final boolean hasScopedAccess;\n-\n@@ -76,2 +74,1 @@\n-                    boolean hasUnsafeAccess,\n-                    boolean hasScopedAccess) {\n+                    boolean hasUnsafeAccess) {\n@@ -96,1 +93,0 @@\n-        this.hasScopedAccess = hasScopedAccess;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotCompiledNmethod.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,7 +61,0 @@\n-    \/**\n-     * Returns true if this method has a {@code jdk.internal.misc.ScopedMemoryAccess.Scoped} annotation.\n-     *\n-     * @return true if Scoped annotation present, false otherwise\n-     *\/\n-    boolean isScoped();\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethod.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -327,10 +327,0 @@\n-    \/**\n-     * Returns true if this method has a {@code Scoped} annotation.\n-     *\n-     * @return true if Scoped annotation present, false otherwise\n-     *\/\n-    @Override\n-    public boolean isScoped() {\n-        return (getConstMethodFlags() & config().constMethodFlagsIsScoped) != 0;\n-    }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -197,1 +197,0 @@\n-    final int constMethodFlagsIsScoped = getConstant(\"ConstMethodFlags::_misc_is_scoped\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}