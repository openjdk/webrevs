{"files":[{"patch":"@@ -40,1 +40,0 @@\n-@Threads(Threads.MAX)\n@@ -45,6 +44,7 @@\n-    @Benchmark\n-    public void sharedAccess() {\n-        try (Arena arena = Arena.ofShared()) {\n-            MemorySegment segment = arena.allocate(SIZE);\n-            access(segment);\n-        }\n+    MemorySegment segment;\n+    byte[] array;\n+\n+    @Setup\n+    public void setup() {\n+        segment = Arena.global().allocate(SIZE);\n+        array = new byte[SIZE];\n@@ -54,5 +54,5 @@\n-    public void confinedAccess() {\n-        try (Arena arena = Arena.ofConfined()) {\n-            MemorySegment segment = arena.allocate(SIZE);\n-            access(segment);\n-        }\n+    @GroupThreads(1)\n+    @Group(\"sharedClose\")\n+    public void closing() {\n+        Arena arena = Arena.ofShared();\n+        arena.close();\n@@ -61,2 +61,4 @@\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public int access(MemorySegment segment) {\n+    @Benchmark\n+    @GroupThreads(1)\n+    @Group(\"sharedClose\")\n+    public int memorySegmentAccess() {\n@@ -69,0 +71,11 @@\n+\n+    @Benchmark\n+    @GroupThreads(1)\n+    @Group(\"sharedClose\")\n+    public int otherAccess() {\n+        int sum = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            sum += array[i];\n+        }\n+        return sum;\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ConcurrentClose.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"}]}