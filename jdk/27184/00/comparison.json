{"files":[{"patch":"@@ -152,1 +152,1 @@\n-  assert(value < ZAddressOffsetMax, \"must have no other bits\");\n+  assert(value < ZAddressOffsetMax, \"Offset out of bounds (\" PTR_FORMAT \" < \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -158,1 +158,1 @@\n-  assert(value <= ZAddressOffsetMax, \"must have no other bits\");\n+  assert(value <= ZAddressOffsetMax, \"Offset out of bounds (\" PTR_FORMAT \" <= \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -163,1 +163,1 @@\n-  assert(value < ZAddressOffsetMax, \"must have no other bits\");\n+  assert(value < ZAddressOffsetMax, \"Value out of bounds (\" PTR_FORMAT \" < \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -189,1 +189,1 @@\n-  assert(value <= ZAddressOffsetMax, \"Overflow\");\n+  assert(value <= ZAddressOffsetMax, \"Value out of bounds (\" PTR_FORMAT \" <= \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -203,1 +203,1 @@\n-  assert(value < ZBackingOffsetMax, \"must have no other bits\");\n+  assert(value < ZBackingOffsetMax, \"Offset out of bounds (\" PTR_FORMAT \" < \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -209,1 +209,1 @@\n-  assert(value <= ZBackingOffsetMax, \"must have no other bits\");\n+  assert(value <= ZBackingOffsetMax, \"Offset out of bounds (\" PTR_FORMAT \" <= \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -214,1 +214,1 @@\n-  assert(value < ZBackingOffsetMax, \"must have no other bits\");\n+  assert(value < ZBackingOffsetMax, \"Value out of bounds (\" PTR_FORMAT \" < \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -231,1 +231,1 @@\n-  assert(value <= ZBackingOffsetMax, \"must have no other bits\");\n+  assert(value <= ZBackingOffsetMax, \"Value out of bounds (\" PTR_FORMAT \" <= \" PTR_FORMAT \")\", value, ZAddressOffsetMax);\n@@ -245,1 +245,1 @@\n-  assert(value < ZBackingIndexMax, \"must have no other bits\");\n+  assert(value < ZBackingIndexMax, \"Offset out of bounds (\" UINT32_FORMAT_X_0 \" < \" UINT32_FORMAT_X_0 \")\", value, ZBackingIndexMax);\n@@ -251,1 +251,1 @@\n-  assert(value <= ZBackingIndexMax, \"must have no other bits\");\n+  assert(value <= ZBackingIndexMax, \"Offset out of bounds (\" UINT32_FORMAT_X_0 \" <= \" UINT32_FORMAT_X_0 \")\", value, ZBackingIndexMax);\n@@ -256,1 +256,1 @@\n-  assert(value < ZBackingIndexMax, \"must have no other bits\");\n+  assert(value < ZBackingIndexMax, \"Value out of bounds (\" UINT32_FORMAT_X_0 \" < \" UINT32_FORMAT_X_0 \")\", value, ZBackingIndexMax);\n@@ -269,1 +269,1 @@\n-         \"Overflow start: %x size: %zu value: %x\", start_value, size, value);\n+         \"Overflow start: \" UINT32_FORMAT_X_0 \" size: %zu value: \" UINT32_FORMAT_X_0 \"\", start_value, size, value);\n@@ -274,1 +274,1 @@\n-  assert(value <= ZBackingIndexMax, \"must have no other bits\");\n+  assert(value <= ZBackingIndexMax, \"Value out of bounds (\" UINT32_FORMAT_X_0 \" <= \" UINT32_FORMAT_X_0 \")\", value, ZBackingIndexMax);\n@@ -290,1 +290,1 @@\n-  assert(is_aligned(value, ZGranuleSize), \"must be granule aligned\");\n+  assert(is_aligned(value, ZGranuleSize), \"Must be granule aligned (\" PTR_FORMAT \")\", value);\n@@ -423,1 +423,1 @@\n-  assert(!result || ZPointer::is_load_good(ptr), \"Got bad colored null\");\n+  assert(!result || ZPointer::is_load_good(ptr), \"Got bad colored null: \" PTR_FORMAT, untype(ptr));\n@@ -623,1 +623,1 @@\n-  assert(ZPointer::is_store_bad(ptr), \"Unexpected ptr\");\n+  assert(ZPointer::is_store_bad(ptr), \"Should be store bad: \" PTR_FORMAT, untype(ptr));\n@@ -645,1 +645,1 @@\n-  assert((is_load_good(ptr) || is_null(ptr)) == result, \"Bad address\");\n+  assert((is_load_good(ptr) || is_null(ptr)) == result, \"Bad address: \" PTR_FORMAT, untype(ptr));\n@@ -676,1 +676,1 @@\n-  assert((is_mark_good(ptr) || is_null(ptr)) == result, \"Bad address\");\n+  assert((is_mark_good(ptr) || is_null(ptr)) == result, \"Bad address: \" PTR_FORMAT, untype(ptr));\n@@ -697,1 +697,1 @@\n-  assert((is_store_good(ptr) || is_null(ptr)) == result, \"Bad address\");\n+  assert((is_store_good(ptr) || is_null(ptr)) == result, \"Bad address: \" PTR_FORMAT, untype(ptr));\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.inline.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}