{"files":[{"patch":"@@ -195,0 +195,7 @@\n+        \/\/ Check for wrap around\n+        if (alignedSize < 0) {\n+            throw new OutOfMemoryError();\n+        }\n+        \/\/ Always allocate at least some memory so that zero-length segments have distinct\n+        \/\/ non-zero addresses.\n+        alignedSize = Math.max(1, alignedSize);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @modules java.base\/sun.nio.ch\n@@ -61,0 +62,6 @@\n+            if (segment.address() == 0) {\n+                fail(\"Segment address is zero\");\n+            }\n+            if (segment.address() == arena.allocate(0, 1).address()) {\n+                fail(\"Segment address was not distinct\");\n+            }\n@@ -74,0 +81,14 @@\n+    @Test\n+    public void testZeroLengthNativeSegmentHyperAligned() {\n+        long byteAlignment = 1024;\n+        try (Arena arena = Arena.ofConfined()) {\n+            var segment = arena.allocate(0, byteAlignment);\n+            assertEquals(segment.byteSize(), 0);\n+            if (segment.address() == 0) {\n+                fail(\"Segment address is zero\");\n+            }\n+            assertTrue(segment.maxByteAlignment() >= byteAlignment);\n+        }\n+    }\n+\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}