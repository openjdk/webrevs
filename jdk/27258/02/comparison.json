{"files":[{"patch":"@@ -37,1 +37,1 @@\n-  _bottom = ((char*) this) + header_size();\n+  guarantee(is_aligned(this, SegmentPayloadMaxAlignment), \"Make sure Segments are always created at correctly aligned memory\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,0 +113,1 @@\n+static constexpr uint SegmentPayloadMaxAlignment = 8;\n@@ -115,1 +116,1 @@\n-class G1MonotonicArena::Segment {\n+class alignas(SegmentPayloadMaxAlignment) G1MonotonicArena::Segment {\n@@ -125,4 +126,1 @@\n-  char* _bottom;  \/\/ Actual data.\n-  \/\/ Do not add class member variables beyond this point\n-\n-  static size_t header_size() { return align_up(sizeof(Segment), DEFAULT_PADDING_SIZE); }\n+  static size_t header_size() { return align_up(sizeof(Segment), SegmentPayloadMaxAlignment); }\n@@ -131,2 +129,2 @@\n-    \/\/ The cast (size_t) is required to guard against overflow wrap around.\n-    return (size_t)slot_size * num_slots;\n+    \/\/ The cast is required to guard against overflow wrap around.\n+    return static_cast<size_t>(slot_size) * num_slots;\n@@ -135,0 +133,2 @@\n+  void* payload(size_t octet) { return &reinterpret_cast<char*>(this)[header_size() + octet]; }\n+\n@@ -159,1 +159,1 @@\n-    memset((void*)_bottom, 0, payload_size());\n+    memset(payload(0), 0, payload_size());\n@@ -179,5 +179,0 @@\n-  \/\/ Copies the contents of this segment into the destination.\n-  void copy_to(void* dest) const {\n-    ::memcpy(dest, _bottom, length() * _slot_size);\n-  }\n-\n@@ -187,0 +182,1 @@\n+static_assert(alignof(G1MonotonicArena::Segment) >= SegmentPayloadMaxAlignment, \"assert alignment of Segment (and indirectly its payload)\");\n@@ -243,0 +239,1 @@\n+    assert(SegmentPayloadMaxAlignment % _slot_alignment == 0, \"ensure that _slot_alignment is a divisor of SegmentPayloadMaxAlignment\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  void* r = _bottom + (size_t)result * _slot_size;\n+  void* r = payload(static_cast<size_t>(result) * _slot_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}