{"files":[{"patch":"@@ -37,1 +37,1 @@\n-  guarantee(is_aligned(this, Alignment), \"Make sure Segments are always created at correctly aligned memory\");\n+  guarantee(is_aligned(this, SegmentAlignment), \"Make sure Segments are always created at correctly aligned memory\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+static constexpr uint SegmentAlignment = 8;\n@@ -115,1 +116,1 @@\n-class G1MonotonicArena::Segment {\n+class alignas(SegmentAlignment) G1MonotonicArena::Segment {\n@@ -125,1 +126,1 @@\n-  static size_t header_size() { return align_up(sizeof(Segment), Alignment); }\n+  static size_t header_size() { return align_up(sizeof(Segment), SegmentAlignment); }\n@@ -177,1 +178,0 @@\n-  static constexpr uint Alignment = 8;\n@@ -182,1 +182,1 @@\n-static_assert(alignof(G1MonotonicArena::Segment) >= G1MonotonicArena::Segment::Alignment, \"assert alignment of Segment (and indirectly its payload)\");\n+static_assert(alignof(G1MonotonicArena::Segment) >= SegmentAlignment, \"assert alignment of Segment (and indirectly its payload)\");\n@@ -239,1 +239,1 @@\n-    assert(_slot_alignment <= Segment::Alignment, \"Must be\");\n+    assert(_slot_alignment <= SegmentAlignment, \"Must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}