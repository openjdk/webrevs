{"files":[{"patch":"@@ -37,1 +37,1 @@\n-  _bottom = ((char*) this) + header_size();\n+  guarantee(is_aligned(this, Alignment), \"Make sure Segments are always created at correctly aligned memory\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,4 +125,1 @@\n-  char* _bottom;  \/\/ Actual data.\n-  \/\/ Do not add class member variables beyond this point\n-\n-  static size_t header_size() { return align_up(sizeof(Segment), DEFAULT_PADDING_SIZE); }\n+  static size_t header_size() { return align_up(sizeof(Segment), Alignment); }\n@@ -131,2 +128,2 @@\n-    \/\/ The cast (size_t) is required to guard against overflow wrap around.\n-    return (size_t)slot_size * num_slots;\n+    \/\/ The cast is required to guard against overflow wrap around.\n+    return static_cast<size_t>(slot_size) * num_slots;\n@@ -135,0 +132,2 @@\n+  void* payload(size_t octet) { return &reinterpret_cast<char*>(this)[header_size() + octet]; }\n+\n@@ -159,1 +158,1 @@\n-    memset((void*)_bottom, 0, payload_size());\n+    memset(payload(0), 0, payload_size());\n@@ -178,5 +177,1 @@\n-\n-  \/\/ Copies the contents of this segment into the destination.\n-  void copy_to(void* dest) const {\n-    ::memcpy(dest, _bottom, length() * _slot_size);\n-  }\n+  static constexpr uint Alignment = 8;\n@@ -187,0 +182,1 @@\n+static_assert(alignof(G1MonotonicArena::Segment) >= G1MonotonicArena::Segment::Alignment, \"assert alignment of Segment (and indirectly its payload)\");\n@@ -243,0 +239,1 @@\n+    assert(_slot_alignment <= Segment::Alignment, \"Must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void* r = _bottom + (size_t)result * _slot_size;\n+  void* r = payload(static_cast<size_t>(result) * _slot_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}