{"files":[{"patch":"@@ -37,1 +37,1 @@\n-  guarantee(is_aligned(this, SegmentAlignment), \"Make sure Segments are always created at correctly aligned memory\");\n+  guarantee(is_aligned(this, SegmentPayloadMaxAlignment), \"Make sure Segments are always created at correctly aligned memory\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-static constexpr uint SegmentAlignment = 8;\n+static constexpr uint SegmentPayloadMaxAlignment = 8;\n@@ -116,1 +116,1 @@\n-class alignas(SegmentAlignment) G1MonotonicArena::Segment {\n+class alignas(SegmentPayloadMaxAlignment) G1MonotonicArena::Segment {\n@@ -126,1 +126,1 @@\n-  static size_t header_size() { return align_up(sizeof(Segment), SegmentAlignment); }\n+  static size_t header_size() { return align_up(sizeof(Segment), SegmentPayloadMaxAlignment); }\n@@ -182,1 +182,1 @@\n-static_assert(alignof(G1MonotonicArena::Segment) >= SegmentAlignment, \"assert alignment of Segment (and indirectly its payload)\");\n+static_assert(alignof(G1MonotonicArena::Segment) >= SegmentPayloadMaxAlignment, \"assert alignment of Segment (and indirectly its payload)\");\n@@ -239,1 +239,1 @@\n-    assert(_slot_alignment <= SegmentAlignment, \"Must be\");\n+    assert(SegmentPayloadMaxAlignment % _slot_alignment == 0, \"ensure that _slot_alignment is a divisor of SegmentPayloadMaxAlignment\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}