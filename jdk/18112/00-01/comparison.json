{"files":[{"patch":"@@ -66,0 +66,1 @@\n+    fflush(stdout);\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.nio.file.Paths;\n@@ -96,34 +95,0 @@\n-    private static void jspawnhelperWithNoArgs() throws Exception {\n-        System.out.println(\"Running jspawnhelper without args\");\n-        Process p = null;\n-        try {\n-            p = Runtime.getRuntime().exec(Paths.get(System.getProperty(\"java.home\"), \"lib\", \"jspawnhelper\").toString());\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            System.exit(ERROR);\n-        }\n-        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n-            System.out.println(\"Child process timed out\");\n-            System.exit(ERROR + 1);\n-        }\n-        if (p.exitValue() != 1)\n-            System.exit(ERROR + 2);\n-        System.exit(0);\n-    }\n-\n-    private static void simulateJspawnhelperWithoutArgs() throws Exception {\n-        ProcessBuilder pb;\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n-                                                              \"JspawnhelperProtocol\",\n-                                                              \"noargs\");\n-        pb.inheritIO();\n-        Process p = pb.start();\n-\n-        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n-            throw new Exception(\"Parent process timed out\");\n-        }\n-        if (p.exitValue() != 0) {\n-            throw new Exception(\"Parent process exited with \" + p.exitValue());\n-        }\n-    }\n-\n@@ -260,4 +225,1 @@\n-            if (\"noargs\".equals(args[0]))\n-                jspawnhelperWithNoArgs();\n-            else\n-                parentCode(args[0]);\n+            parentCode(args[0]);\n@@ -267,1 +229,0 @@\n-            simulateJspawnhelperWithoutArgs();\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8325567\n+ * @requires (os.family == \"linux\") | (os.family == \"aix\")\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 JspawnhelperWarnings\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JspawnhelperWarnings {\n+\n+    private static final int TIMEOUT = 60;\n+\n+    private static void jspawnhelperWithNArgs(int args) throws Exception {\n+        System.out.println(\"Running jspawnhelper with \"+args+\" args\");\n+        String[] argArray = new String[args +1];\n+        Arrays.fill(argArray, \"1\");\n+        argArray[0] = Paths.get(System.getProperty(\"java.home\"), \"lib\", \"jspawnhelper\").toString();\n+        for (int i = 0; i < argArray.length; ++i)\n+            System.out.println(argArray[i]);\n+        Process p = Runtime.getRuntime().exec(argArray);\n+\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Child process timed out after \" + TIMEOUT + \" seconds\");\n+        }\n+\n+        try (BufferedReader br = p.inputReader()) {\n+            String line = br.readLine();\n+            System.out.println(line);\n+            while (line != null && !line.startsWith(\"This command is not for general use\")) {\n+                System.out.println(line);\n+                line = br.readLine();\n+            }\n+            if (line == null) {\n+                throw new Exception(\"Wrong output from parent process\");\n+            }\n+            System.out.println(line);\n+        }\n+\n+        if (p.exitValue() != 1)\n+            throw new Exception(\"Unexpected exit value from jspawnhelper \"+ p.exitValue());\n+    }\n+\n+     public static void main(String[] args) throws Exception {\n+        for (int nArgs = 0; nArgs < 10; ++nArgs)\n+            jspawnhelperWithNArgs(nArgs);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperWarnings.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}