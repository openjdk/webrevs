{"files":[{"patch":"@@ -590,1 +590,1 @@\n-\/\/ Method::clear_jmethod_ids removes jmethodID entries from the table which\n+\/\/ Method::remove_jmethod_ids removes jmethodID entries from the table which\n@@ -592,1 +592,1 @@\n-\/\/ Because native code (e.g. JVMTI agent) holding jmethod_ids may access them\n+\/\/ Because native code (e.g., JVMTI agent) holding jmethod_ids may access them\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-  GrowableArray<jmethodID>* jmethod_ids() { return _jmethod_ids; }\n+  GrowableArray<jmethodID>* jmethod_ids() const { return _jmethod_ids; }\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2394,1 +2394,1 @@\n-\/\/ Lookup or create a jmethodID.\n+\/\/ Allocate the jmethodID cache.\n@@ -2396,2 +2396,2 @@\n-  jmethodID* jmeths = NEW_C_HEAP_ARRAY(jmethodID, size+1, mtClass);\n-  memset(jmeths, 0, (size+1)*sizeof(jmethodID));\n+  jmethodID* jmeths = NEW_C_HEAP_ARRAY(jmethodID, size + 1, mtClass);\n+  memset(jmeths, 0, (size + 1) * sizeof(jmethodID));\n@@ -2403,1 +2403,1 @@\n-\n+\/\/ Lookup or create a jmethodID\n@@ -2460,3 +2460,3 @@\n-    if (old_size < size+1) {\n-      \/\/ allocate a larger one and copy entries to the new one.\n-      \/\/ They've already been updated to point to new methods where applicable (ie. not obsolete)\n+    if (old_size < size + 1) {\n+      \/\/ Allocate a larger one and copy entries to the new one.\n+      \/\/ They've already been updated to point to new methods where applicable (i.e., not obsolete).\n@@ -2491,1 +2491,1 @@\n-    jmethodID id = Atomic::load_acquire(&jmeths[idnum+1]);\n+    jmethodID id = Atomic::load_acquire(&jmeths[idnum + 1]);\n@@ -2495,1 +2495,1 @@\n-      Atomic::release_store(&jmeths[idnum+1], id);\n+      Atomic::release_store(&jmeths[idnum + 1], id);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1057,1 +1057,1 @@\n-  \/\/ This nulls out obsolete jmethodIDs for all methods in 'klass'\n+  \/\/ This nulls out obsolete jmethodIDs for all methods in 'klass'.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"oops\/method.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"oops\/method.hpp\"\n@@ -35,2 +35,2 @@\n-\/\/ Save (jmethod, Method*) in a hashtable to lookup Method\n-\/\/ The CHT is for performance because it is has lock free lookup.\n+\/\/ Save (jmethod, Method*) in a hashtable to lookup Method.\n+\/\/ The CHT is for performance because it has lock free lookup.\n@@ -73,1 +73,1 @@\n-  \/\/ If a chain gets to 32 something might be wrong\n+  \/\/ If a chain gets to 32 something might be wrong.\n@@ -109,1 +109,1 @@\n-  assert (!needs_rehashing, \"should never need rehashing\");\n+  assert(!needs_rehashing, \"should never need rehashing\");\n@@ -129,1 +129,1 @@\n-\/\/ Add a method id to the jmethod_ids\n+\/\/ Add a method id to the jmethod_ids.\n@@ -131,1 +131,1 @@\n-  bool grow_hint, clean_hint, created;\n+  bool grow_hint, clean_hint;\n@@ -134,1 +134,1 @@\n-  \/\/ Update jmethodID global counter\n+  \/\/ Update jmethodID global counter.\n@@ -136,0 +136,1 @@\n+  guarantee(_jmethodID_counter != 0, \"must never go back to zero\");\n@@ -140,1 +141,1 @@\n-  created = _jmethod_id_table->insert(current, lookup, new_entry, &grow_hint, &clean_hint);\n+  bool created = _jmethod_id_table->insert(current, lookup, new_entry, &grow_hint, &clean_hint);\n@@ -144,1 +145,1 @@\n-  \/\/ Resize table if it needs to grow.  The _jmethod_id_table has a good distribution\n+  \/\/ Resize table if it needs to grow.  The _jmethod_id_table has a good distribution.\n@@ -158,1 +159,1 @@\n-    \/\/ function called if value is found so is never null\n+    \/\/ The function that is called if value is found, so is never null.\n@@ -162,1 +163,1 @@\n-  assert(removed, \"should be\");\n+  assert(removed, \"must be\");\n@@ -169,1 +170,1 @@\n-  \/\/ change to table to point to the new method\n+  \/\/ Change table entry to point to the new method.\n@@ -180,1 +181,1 @@\n-  \/\/   has already been rewired to a newer version we could be removing reference\n+  \/\/   has already been rewired to a newer version we could be clearing reference\n","filename":"src\/hotspot\/share\/oops\/jmethodIDTable.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  \/\/ Given a Method return a jmethodID\n+  \/\/ Given a Method return a jmethodID.\n@@ -41,1 +41,1 @@\n-  \/\/ Given a jmethodID, return a Method\n+  \/\/ Given a jmethodID, return a Method.\n@@ -45,1 +45,1 @@\n-  \/\/ not be found and return null\n+  \/\/ not be found and return null.\n","filename":"src\/hotspot\/share\/oops\/jmethodIDTable.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2065,1 +2065,1 @@\n-\/\/ wastes no memory but the Method* returned is null\n+\/\/ wastes no memory but the Method* returned is null.\n@@ -2076,1 +2076,1 @@\n-  \/\/ Add to growable array in CLD\n+  \/\/ Add to growable array in CLD.\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2773,1 +2773,1 @@\n-  \/\/ Make jmethodIDs for all non-overpass methods\n+  \/\/ Make jmethodIDs for all non-overpass methods.\n@@ -2789,1 +2789,1 @@\n-    assert (id != nullptr, \"should be created above\");\n+    assert(id != nullptr, \"should be created above\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}