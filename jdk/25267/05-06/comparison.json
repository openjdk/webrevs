{"files":[{"patch":"@@ -43,0 +43,2 @@\n+uint64_t JmethodIDTable::get_entry_count() { return _jmethodID_entry_count; }\n+\n","filename":"src\/hotspot\/share\/oops\/jmethodIDTable.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+\n+  static uint64_t get_entry_count();\n","filename":"src\/hotspot\/share\/oops\/jmethodIDTable.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"classfile\/vmClasses.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n+#include \"oops\/jmethodIDTable.hpp\"\n+#include \"oops\/method.hpp\"\n+#include \"unittest.hpp\"\n+#include \"utilities\/growableArray.hpp\"\n+\n+\/\/ Tests for creating and deleting jmethodIDs\n+TEST_VM(jmethodIDTable, test_jmethod_ids) {\n+  InstanceKlass* klass = vmClasses::ClassLoader_klass();\n+  Array<Method*>* methods = klass->methods();\n+  int length = methods->length();\n+  \/\/ How many entries are in the jmethodID table?\n+  uint64_t initial_entries = JmethodIDTable::get_entry_count();\n+  ResourceMark rm;\n+  GrowableArray<uint64_t> ints;\n+  for (int i = 0; i < length; i++) {\n+    Method* m = methods->at(i);\n+    jmethodID mid = m->jmethod_id();\n+    ints.at_put(i, (uint64_t)mid);\n+  }\n+  uint64_t entries_now = JmethodIDTable::get_entry_count();\n+  ASSERT_TRUE(entries_now == initial_entries + length) << \"should have more entries \" << entries_now << \" \" << initial_entries + length;\n+\n+  \/\/ Test that new entries aren't created, and the values are the same.\n+  for (int i = 0; i < length; i++) {\n+    Method* m = methods->at(i);\n+    jmethodID mid = m->jmethod_id();\n+    ASSERT_TRUE(ints.at(i) == (uint64_t)mid) << \"should be the same\";\n+  }\n+  \/\/ should have the same number of entries\n+  entries_now = JmethodIDTable::get_entry_count();\n+  ASSERT_TRUE(entries_now == initial_entries + length) << \"should have more entries \" << entries_now << \" \" << initial_entries + length;\n+}\n+\n","filename":"test\/hotspot\/gtest\/oops\/test_jmethodIDTable.cpp","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}