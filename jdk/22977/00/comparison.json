{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,10 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.AWTEvent;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -34,0 +42,5 @@\n+import java.awt.image.BufferedImage;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.io.File;\n+import java.util.concurrent.CountDownLatch;\n@@ -35,1 +48,11 @@\n-public class ButtonGroupFocusTest {\n+import javax.imageio.ImageIO;\n+import javax.swing.ButtonGroup;\n+import javax.swing.JFrame;\n+import javax.swing.JRadioButton;\n+import javax.swing.SwingUtilities;\n+\n+import static java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public final class ButtonGroupFocusTest {\n@@ -42,1 +65,9 @@\n-    private static Robot robot;\n+\n+    private static final CountDownLatch button2FocusLatch = new CountDownLatch(1);\n+    private static final CountDownLatch button3FocusLatch = new CountDownLatch(1);\n+    private static final CountDownLatch button4FocusLatch = new CountDownLatch(1);\n+\n+    private static final CountDownLatch button2FocusLatch2 = new CountDownLatch(2);\n+\n+    private static final long FOCUS_TIMEOUT = 4;\n+\n@@ -46,2 +77,1 @@\n-        robot = new Robot();\n-        robot.setAutoDelay(100);\n+        final Robot robot = new Robot();\n@@ -50,1 +80,1 @@\n-            frame = new JFrame();\n+            frame = new JFrame(\"ButtonGroupFocusTest\");\n@@ -63,0 +93,1 @@\n+\n@@ -72,0 +103,6 @@\n+            button2.addFocusListener(new LatchFocusListener(button2FocusLatch));\n+            button3.addFocusListener(new LatchFocusListener(button3FocusLatch));\n+            button4.addFocusListener(new LatchFocusListener(button4FocusLatch));\n+\n+            button2.addFocusListener(new LatchFocusListener(button2FocusLatch2));\n+\n@@ -74,0 +111,20 @@\n+            \/\/ Debugging aid: log focus owner changes...\n+            KeyboardFocusManager focusManager = getCurrentKeyboardFocusManager();\n+            focusManager.addPropertyChangeListener(\"focusOwner\",\n+                    new PropertyChangeListener() {\n+                        @Override\n+                        public void propertyChange(PropertyChangeEvent evt) {\n+                            System.out.println(evt.getPropertyName()\n+                                               + \"\\n\\t\" + evt.getOldValue()\n+                                               + \"\\n\\t\" + evt.getNewValue());\n+                        }\n+                    });\n+\n+            \/\/ ...and dispatched key events\n+            Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {\n+                @Override\n+                public void eventDispatched(AWTEvent event) {\n+                    System.out.println(\"Dispatched \" + event);\n+                }\n+            }, AWTEvent.KEY_EVENT_MASK);\n+\n@@ -75,0 +132,1 @@\n+            frame.setLocationRelativeTo(null);\n@@ -78,8 +136,4 @@\n-        robot.waitForIdle();\n-        robot.delay(200);\n-\n-        SwingUtilities.invokeAndWait(() -> {\n-            if( !button2.hasFocus() ) {\n-                frame.dispose();\n-                throw new RuntimeException(\n-                        \"Button 2 should get focus after activation\");\n+        try {\n+            if (!button2FocusLatch.await(FOCUS_TIMEOUT, SECONDS)) {\n+                throw new RuntimeException(\"Button 2 should get focus \"\n+                                           + \"after activation\");\n@@ -87,1 +141,2 @@\n-        });\n+            robot.waitForIdle();\n+            robot.delay(200);\n@@ -89,2 +144,3 @@\n-        robot.keyPress(KeyEvent.VK_TAB);\n-        robot.keyRelease(KeyEvent.VK_TAB);\n+            System.out.println(\"\\n\\n*** Tab 1st\");\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n@@ -92,2 +148,5 @@\n-        robot.waitForIdle();\n-        robot.delay(200);\n+            if (!button4FocusLatch.await(FOCUS_TIMEOUT, SECONDS)) {\n+                throw new RuntimeException(\"Button 4 should get focus\");\n+            }\n+            robot.waitForIdle();\n+            robot.delay(200);\n@@ -95,5 +154,2 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            if( !button4.hasFocus() ) {\n-                frame.dispose();\n-                throw new RuntimeException(\n-                        \"Button 4 should get focus\");\n+            if (button2FocusLatch2.await(1, MILLISECONDS)) {\n+                throw new RuntimeException(\"Focus moved back to Button 2\");\n@@ -101,2 +157,0 @@\n-            button3.setSelected(true);\n-        });\n@@ -104,2 +158,3 @@\n-        robot.keyPress(KeyEvent.VK_TAB);\n-        robot.keyRelease(KeyEvent.VK_TAB);\n+            SwingUtilities.invokeAndWait(() -> button3.setSelected(true));\n+            robot.waitForIdle();\n+            robot.delay(200);\n@@ -107,2 +162,3 @@\n-        robot.waitForIdle();\n-        robot.delay(200);\n+            System.out.println(\"\\n\\n*** Tab 2nd\");\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n@@ -110,5 +166,2 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            if( !button3.hasFocus() ) {\n-                frame.dispose();\n-                throw new RuntimeException(\n-                        \"selected Button 3 should get focus\");\n+            if (!button3FocusLatch.await(FOCUS_TIMEOUT, SECONDS)) {\n+                throw new RuntimeException(\"Selected Button 3 should get focus\");\n@@ -116,1 +169,28 @@\n-        });\n+        } catch (Exception e) {\n+            BufferedImage image = robot.createScreenCapture(getFrameBounds());\n+            ImageIO.write(image, \"png\",\n+                          new File(\"image.png\"));\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    System.err.println(\"Current focus owner: \"\n+                                       + getCurrentKeyboardFocusManager()\n+                                         .getFocusOwner()));\n+\n+            throw e;\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    private static Rectangle getFrameBounds() throws Exception {\n+        Rectangle[] bounds = new Rectangle[1];\n+        SwingUtilities.invokeAndWait(() -> bounds[0] = frame.getBounds());\n+        return bounds[0];\n+    }\n+\n+    private static final class LatchFocusListener extends FocusAdapter {\n+        private final CountDownLatch focusGainedLatch;\n+\n+        private LatchFocusListener(CountDownLatch focusGainedLatch) {\n+            this.focusGainedLatch = focusGainedLatch;\n+        }\n@@ -118,1 +198,4 @@\n-        SwingUtilities.invokeLater(frame::dispose);\n+        @Override\n+        public void focusGained(FocusEvent e) {\n+            focusGainedLatch.countDown();\n+        }\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/ButtonGroupFocus\/ButtonGroupFocusTest.java","additions":122,"deletions":39,"binary":false,"changes":161,"status":"modified"}]}