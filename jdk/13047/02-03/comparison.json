{"files":[{"patch":"@@ -31,0 +31,10 @@\n+import jdk.internal.foreign.abi.Binding.Allocate;\n+import jdk.internal.foreign.abi.Binding.BoxAddress;\n+import jdk.internal.foreign.abi.Binding.BufferLoad;\n+import jdk.internal.foreign.abi.Binding.BufferStore;\n+import jdk.internal.foreign.abi.Binding.Cast;\n+import jdk.internal.foreign.abi.Binding.Copy;\n+import jdk.internal.foreign.abi.Binding.Dup;\n+import jdk.internal.foreign.abi.Binding.UnboxAddress;\n+import jdk.internal.foreign.abi.Binding.VMLoad;\n+import jdk.internal.foreign.abi.Binding.VMStore;\n@@ -440,3 +450,3 @@\n-                .filter(Binding.BoxAddress.class::isInstance)\n-                .map(Binding.BoxAddress.class::cast)\n-                .anyMatch(Binding.BoxAddress::needsScope);\n+                .filter(BoxAddress.class::isInstance)\n+                .map(BoxAddress.class::cast)\n+                .anyMatch(BoxAddress::needsScope);\n@@ -471,10 +481,10 @@\n-                case Binding.VMStore vmStore -> emitVMStore(vmStore);\n-                case Binding.VMLoad vmLoad -> emitVMLoad(vmLoad);\n-                case Binding.BufferStore bufferStore -> emitBufferStore(bufferStore);\n-                case Binding.BufferLoad bufferLoad -> emitBufferLoad(bufferLoad);\n-                case Binding.Copy copy -> emitCopyBuffer(copy);\n-                case Binding.Allocate allocate -> emitAllocBuffer(allocate);\n-                case Binding.BoxAddress boxAddress -> emitBoxAddress(boxAddress);\n-                case Binding.UnboxAddress unused -> emitUnboxAddress();\n-                case Binding.Dup unused -> emitDupBinding();\n-                case Binding.Cast cast -> emitCast(cast);\n+                case VMStore vmStore         -> emitVMStore(vmStore);\n+                case VMLoad vmLoad           -> emitVMLoad(vmLoad);\n+                case BufferStore bufferStore -> emitBufferStore(bufferStore);\n+                case BufferLoad bufferLoad   -> emitBufferLoad(bufferLoad);\n+                case Copy copy               -> emitCopyBuffer(copy);\n+                case Allocate allocate       -> emitAllocBuffer(allocate);\n+                case BoxAddress boxAddress   -> emitBoxAddress(boxAddress);\n+                case UnboxAddress unused     -> emitUnboxAddress();\n+                case Dup unused              -> emitDupBinding();\n+                case Cast cast               -> emitCast(cast);\n@@ -582,1 +592,1 @@\n-    private void emitBoxAddress(Binding.BoxAddress boxAddress) {\n+    private void emitBoxAddress(BoxAddress boxAddress) {\n@@ -594,1 +604,1 @@\n-    private void emitAllocBuffer(Binding.Allocate binding) {\n+    private void emitAllocBuffer(Allocate binding) {\n@@ -605,1 +615,1 @@\n-    private void emitBufferStore(Binding.BufferStore bufferStore) {\n+    private void emitBufferStore(BufferStore bufferStore) {\n@@ -687,1 +697,1 @@\n-    private void emitVMStore(Binding.VMStore vmStore) {\n+    private void emitVMStore(VMStore vmStore) {\n@@ -714,1 +724,1 @@\n-    private void emitVMLoad(Binding.VMLoad vmLoad) {\n+    private void emitVMLoad(VMLoad vmLoad) {\n@@ -743,1 +753,1 @@\n-    private void emitCast(Binding.Cast cast) {\n+    private void emitCast(Cast cast) {\n@@ -776,1 +786,1 @@\n-    private void emitBufferLoad(Binding.BufferLoad bufferLoad) {\n+    private void emitBufferLoad(BufferLoad bufferLoad) {\n@@ -858,1 +868,1 @@\n-    private void emitCopyBuffer(Binding.Copy copy) {\n+    private void emitCopyBuffer(Copy copy) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":31,"deletions":21,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            case StorageType.FLOAT -> FLOAT_REG_SIZE;\n+            case StorageType.FLOAT   -> FLOAT_REG_SIZE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/RISCV64Architecture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-                        case FLOAT -> FieldCounter.SINGLE_FLOAT;\n+                        case FLOAT   -> FieldCounter.SINGLE_FLOAT;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-            case StorageType.VECTOR -> VECTOR_REG_SIZE;\n-            case StorageType.X87 -> X87_REG_SIZE;\n+            case StorageType.VECTOR  -> VECTOR_REG_SIZE;\n+            case StorageType.X87     -> X87_REG_SIZE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}