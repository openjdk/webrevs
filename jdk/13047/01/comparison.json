{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -200,1 +200,1 @@\n-public interface Binding {\n+public sealed interface Binding {\n@@ -295,15 +295,0 @@\n-    enum Tag {\n-        VM_STORE,\n-        VM_LOAD,\n-        BUFFER_STORE,\n-        BUFFER_LOAD,\n-        COPY_BUFFER,\n-        ALLOC_BUFFER,\n-        BOX_ADDRESS,\n-        UNBOX_ADDRESS,\n-        DUP,\n-        CAST\n-    }\n-\n-    Tag tag();\n-\n@@ -506,1 +491,1 @@\n-    interface Move extends Binding {\n+    sealed interface Move extends Binding {\n@@ -517,4 +502,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.VM_STORE;\n-        }\n@@ -542,4 +523,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.VM_LOAD;\n-        }\n@@ -559,1 +536,1 @@\n-    interface Dereference extends Binding {\n+    sealed interface Dereference extends Binding {\n@@ -571,4 +548,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.BUFFER_STORE;\n-        }\n@@ -632,4 +605,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.BUFFER_LOAD;\n-        }\n@@ -696,5 +665,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.COPY_BUFFER;\n-        }\n-\n@@ -726,5 +690,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.ALLOC_BUFFER;\n-        }\n-\n@@ -751,5 +710,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.UNBOX_ADDRESS;\n-        }\n-\n@@ -777,5 +731,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.BOX_ADDRESS;\n-        }\n-\n@@ -806,5 +755,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.DUP;\n-        }\n-\n@@ -864,5 +808,0 @@\n-        @Override\n-        public Tag tag() {\n-            return Tag.CAST;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":4,"deletions":65,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -470,11 +470,11 @@\n-            switch (binding.tag()) {\n-                case VM_STORE -> emitVMStore((Binding.VMStore) binding);\n-                case VM_LOAD -> emitVMLoad((Binding.VMLoad) binding);\n-                case BUFFER_STORE -> emitBufferStore((Binding.BufferStore) binding);\n-                case BUFFER_LOAD -> emitBufferLoad((Binding.BufferLoad) binding);\n-                case COPY_BUFFER -> emitCopyBuffer((Binding.Copy) binding);\n-                case ALLOC_BUFFER -> emitAllocBuffer((Binding.Allocate) binding);\n-                case BOX_ADDRESS -> emitBoxAddress((Binding.BoxAddress) binding);\n-                case UNBOX_ADDRESS -> emitUnboxAddress();\n-                case DUP -> emitDupBinding();\n-                case CAST -> emitCast((Binding.Cast) binding);\n+            switch (binding) {\n+                case Binding.VMStore vmStore -> emitVMStore(vmStore);\n+                case Binding.VMLoad vmLoad -> emitVMLoad(vmLoad);\n+                case Binding.BufferStore bufferStore -> emitBufferStore(bufferStore);\n+                case Binding.BufferLoad bufferLoad -> emitBufferLoad(bufferLoad);\n+                case Binding.Copy copy -> emitCopyBuffer(copy);\n+                case Binding.Allocate allocate -> emitAllocBuffer(allocate);\n+                case Binding.BoxAddress boxAddress -> emitBoxAddress(boxAddress);\n+                case Binding.UnboxAddress unused -> emitUnboxAddress();\n+                case Binding.Dup unused -> emitDupBinding();\n+                case Binding.Cast cast -> emitCast(cast);\n@@ -641,1 +641,1 @@\n-                    case 4 -> {\n+                    case Integer.BYTES -> {\n@@ -645,1 +645,1 @@\n-                    case 2 -> {\n+                    case Short.BYTES -> {\n@@ -649,1 +649,1 @@\n-                    case 1 -> {\n+                    case Byte.BYTES -> {\n@@ -805,1 +805,1 @@\n-                    case 4 -> {\n+                    case Integer.BYTES -> {\n@@ -810,1 +810,1 @@\n-                    case 2 -> {\n+                    case Short.BYTES -> {\n@@ -815,1 +815,1 @@\n-                    case 1 -> {\n+                    case Byte.BYTES -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.util.EnumSet;\n@@ -40,1 +39,0 @@\n-import java.util.Set;\n@@ -43,1 +41,0 @@\n-import static jdk.internal.foreign.abi.Binding.Tag.*;\n@@ -95,1 +92,1 @@\n-        long returnBufferSize = needsReturnBuffer ? computeReturnBuferSize() : 0;\n+        long returnBufferSize = needsReturnBuffer ? computeReturnBufferSize() : 0;\n@@ -174,1 +171,1 @@\n-    private long computeReturnBuferSize() {\n+    private long computeReturnBufferSize() {\n@@ -194,13 +191,0 @@\n-    private static final Set<Binding.Tag> UNBOX_TAGS = EnumSet.of(\n-        VM_STORE,\n-        \/\/VM_LOAD,\n-        \/\/BUFFER_STORE,\n-        BUFFER_LOAD,\n-        COPY_BUFFER,\n-        \/\/ALLOC_BUFFER,\n-        \/\/BOX_ADDRESS,\n-        UNBOX_ADDRESS,\n-        DUP,\n-        CAST\n-    );\n-\n@@ -212,1 +196,1 @@\n-            if (!UNBOX_TAGS.contains(b.tag()))\n+            if (!isUnbox(b))\n@@ -222,12 +206,14 @@\n-    private static final Set<Binding.Tag> BOX_TAGS = EnumSet.of(\n-        \/\/VM_STORE,\n-        VM_LOAD,\n-        BUFFER_STORE,\n-        \/\/BUFFER_LOAD,\n-        COPY_BUFFER,\n-        ALLOC_BUFFER,\n-        BOX_ADDRESS,\n-        \/\/UNBOX_ADDRESS,\n-        DUP,\n-        CAST\n-    );\n+    static boolean isUnbox(Binding binding) {\n+        return switch (binding) {\n+            case Binding.VMStore unused -> true;\n+            case Binding.VMLoad unused -> false;\n+            case Binding.BufferStore unused -> false;\n+            case Binding.BufferLoad unused -> true;\n+            case Binding.Copy unused -> true;\n+            case Binding.Allocate unused -> false;\n+            case Binding.BoxAddress unused -> false;\n+            case Binding.UnboxAddress unused -> true;\n+            case Binding.Dup unused -> true;\n+            case Binding.Cast unused-> true;\n+        };\n+    }\n@@ -239,1 +225,1 @@\n-            if (!BOX_TAGS.contains(b.tag()))\n+            if (!isBox(b))\n@@ -251,0 +237,16 @@\n+\n+    static boolean isBox(Binding binding) {\n+        return switch (binding) {\n+            case Binding.VMStore unused -> false;\n+            case Binding.VMLoad unused -> true;\n+            case Binding.BufferStore unused -> true;\n+            case Binding.BufferLoad unused -> false;\n+            case Binding.Copy unused -> true;\n+            case Binding.Allocate unused -> true;\n+            case Binding.BoxAddress unused -> true;\n+            case Binding.UnboxAddress unused -> false;\n+            case Binding.Dup unused -> true;\n+            case Binding.Cast unused-> true;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,3 +49,3 @@\n-        switch (cls) {\n-            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n-            case StorageType.VECTOR: return VECTOR_REG_SIZE;\n+        return switch (cls) {\n+            case StorageType.INTEGER -> INTEGER_REG_SIZE;\n+            case StorageType.VECTOR -> VECTOR_REG_SIZE;\n@@ -53,3 +53,2 @@\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+            default -> throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Architecture.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,3 +51,3 @@\n-        switch (cls) {\n-            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n-            case StorageType.FLOAT: return FLOAT_REG_SIZE;\n+        return switch (cls) {\n+            case StorageType.INTEGER -> INTEGER_REG_SIZE;\n+            case StorageType.FLOAT -> FLOAT_REG_SIZE;\n@@ -55,3 +55,2 @@\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+            default -> throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/RISCV64Architecture.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,12 +86,16 @@\n-            if (layout instanceof ValueLayout valueLayout) {\n-                return switch (classifyValueType(valueLayout)) {\n-                    case INTEGER -> FieldCounter.SINGLE_INTEGER;\n-                    case FLOAT -> FieldCounter.SINGLE_FLOAT;\n-                    case POINTER -> FieldCounter.SINGLE_POINTER;\n-                    default -> throw new IllegalStateException(\"Should not reach here.\");\n-                };\n-            } else if (layout instanceof GroupLayout groupLayout) {\n-                FieldCounter currCounter = FieldCounter.EMPTY;\n-                for (MemoryLayout memberLayout : groupLayout.memberLayouts()) {\n-                    if (memberLayout instanceof PaddingLayout) {\n-                        continue;\n+            switch (layout) {\n+                case ValueLayout valueLayout -> {\n+                    return switch (classifyValueType(valueLayout)) {\n+                        case INTEGER -> FieldCounter.SINGLE_INTEGER;\n+                        case FLOAT -> FieldCounter.SINGLE_FLOAT;\n+                        case POINTER -> FieldCounter.SINGLE_POINTER;\n+                        default -> throw new IllegalStateException(\"Should not reach here.\");\n+                    };\n+                }\n+                case GroupLayout groupLayout -> {\n+                    FieldCounter currCounter = FieldCounter.EMPTY;\n+                    for (MemoryLayout memberLayout : groupLayout.memberLayouts()) {\n+                        if (memberLayout instanceof PaddingLayout) {\n+                            continue;\n+                        }\n+                        currCounter = currCounter.add(flatten(memberLayout));\n@@ -99,1 +103,1 @@\n-                    currCounter = currCounter.add(flatten(memberLayout));\n+                    return currCounter;\n@@ -101,5 +105,6 @@\n-                return currCounter;\n-            } else if (layout instanceof SequenceLayout sequenceLayout) {\n-                long elementCount = sequenceLayout.elementCount();\n-                if (elementCount == 0) {\n-                    return FieldCounter.EMPTY;\n+                case SequenceLayout sequenceLayout -> {\n+                    long elementCount = sequenceLayout.elementCount();\n+                    if (elementCount == 0) {\n+                        return FieldCounter.EMPTY;\n+                    }\n+                    return flatten(sequenceLayout.elementLayout()).mul(elementCount);\n@@ -107,3 +112,1 @@\n-                return flatten(sequenceLayout.elementLayout()).mul(elementCount);\n-            } else {\n-                throw new IllegalStateException(\"Cannot get here: \" + layout);\n+                case null, default -> throw new IllegalStateException(\"Cannot get here: \" + layout);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/TypeClass.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,4 +58,4 @@\n-        switch (cls) {\n-            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n-            case StorageType.VECTOR: return VECTOR_REG_SIZE;\n-            case StorageType.X87: return X87_REG_SIZE;\n+        return switch (cls) {\n+            case StorageType.INTEGER -> INTEGER_REG_SIZE;\n+            case StorageType.VECTOR -> VECTOR_REG_SIZE;\n+            case StorageType.X87 -> X87_REG_SIZE;\n@@ -63,3 +63,2 @@\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" +cls);\n+            default -> throw new IllegalArgumentException(\"Invalid Storage Class: \" +cls);\n+        };\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/X86_64Architecture.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-                forUpcall ? new BoxBindingCalculator(true) : new UnboxBindingCalculator(true);\n+                    forUpcall ? new BoxBindingCalculator(true) : new UnboxBindingCalculator(true);\n@@ -91,1 +91,1 @@\n-                forUpcall ? new UnboxBindingCalculator(false) : new BoxBindingCalculator(false);\n+                    forUpcall ? new UnboxBindingCalculator(false) : new BoxBindingCalculator(false);\n@@ -174,1 +174,1 @@\n-                 [type][nRegs++];\n+                    [type][nRegs++];\n@@ -199,1 +199,1 @@\n-                case STRUCT_REGISTER: {\n+                case STRUCT_REGISTER -> {\n@@ -205,1 +205,0 @@\n-                    break;\n@@ -207,1 +206,1 @@\n-                case STRUCT_REFERENCE: {\n+                case STRUCT_REFERENCE -> {\n@@ -213,1 +212,0 @@\n-                    break;\n@@ -215,1 +213,1 @@\n-                case POINTER: {\n+                case POINTER -> {\n@@ -219,1 +217,0 @@\n-                    break;\n@@ -221,1 +218,1 @@\n-                case INTEGER: {\n+                case INTEGER -> {\n@@ -224,1 +221,0 @@\n-                    break;\n@@ -226,1 +222,1 @@\n-                case FLOAT: {\n+                case FLOAT -> {\n@@ -229,1 +225,0 @@\n-                    break;\n@@ -231,1 +226,1 @@\n-                case VARARG_FLOAT: {\n+                case VARARG_FLOAT -> {\n@@ -240,1 +235,0 @@\n-                    break;\n@@ -242,2 +236,1 @@\n-                default:\n-                    throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n@@ -261,1 +254,1 @@\n-                case STRUCT_REGISTER: {\n+                case STRUCT_REGISTER -> {\n@@ -269,1 +262,0 @@\n-                    break;\n@@ -271,1 +263,1 @@\n-                case STRUCT_REFERENCE: {\n+                case STRUCT_REFERENCE -> {\n@@ -276,1 +268,0 @@\n-                    break;\n@@ -278,1 +269,1 @@\n-                case POINTER: {\n+                case POINTER -> {\n@@ -282,1 +273,0 @@\n-                    break;\n@@ -284,1 +274,1 @@\n-                case INTEGER: {\n+                case INTEGER -> {\n@@ -287,1 +277,0 @@\n-                    break;\n@@ -289,1 +278,1 @@\n-                case FLOAT: {\n+                case FLOAT -> {\n@@ -292,1 +281,0 @@\n-                    break;\n@@ -294,2 +282,1 @@\n-                default:\n-                    throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n+                default -> throw new UnsupportedOperationException(\"Unhandled class \" + argumentClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"}]}