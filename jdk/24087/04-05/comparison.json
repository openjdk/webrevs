{"files":[{"patch":"@@ -1,3 +1,8 @@\n-keys=jpackagePlatformPackage\n-requires.properties=jpackage.test.SQETest jpackage.test.SignEnv\n-maxOutputSize=2000000\n+keys = \\\n+    jpackagePlatformPackage\n+\n+requires.properties = \\\n+    jpackage.test.SQETest \\\n+    jpackage.test.MacSignTests\n+\n+maxOutputSize = 2000000\n@@ -12,1 +17,3 @@\n-exclusiveAccess.dirs=share windows\n+exclusiveAccess.dirs = \\\n+    share \\\n+    windows\n@@ -14,5 +21,6 @@\n-modules=jdk.jpackage\/jdk.jpackage.internal:+open \\\n-        jdk.jpackage\/jdk.jpackage.internal.util \\\n-        jdk.jpackage\/jdk.jpackage.internal.util.function \\\n-        java.base\/jdk.internal.util \\\n-        jdk.jlink\/jdk.tools.jlink.internal\n+modules = \\\n+    jdk.jpackage\/jdk.jpackage.internal:+open \\\n+    jdk.jpackage\/jdk.jpackage.internal.util \\\n+    jdk.jpackage\/jdk.jpackage.internal.util.function \\\n+    java.base\/jdk.internal.util \\\n+    jdk.jlink\/jdk.tools.jlink.internal\n","filename":"test\/jdk\/tools\/jpackage\/TEST.properties","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -521,1 +521,0 @@\n-        trace(\"Skip the test: \" + reason);\n@@ -525,0 +524,2 @@\n+        return throwSkippedException(reason);\n+    }\n@@ -526,0 +527,2 @@\n+    public static RuntimeException throwSkippedException(RuntimeException ex) {\n+        trace(\"Skip the test: \" + ex.getMessage());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-            if (!KEEP_WORK_DIR.contains(status)) {\n+            if (!KEEP_WORK_DIR.contains(status) && Files.isDirectory(workDir)) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @requires (jpackage.test.SignEnv == \"setup\")\n+ * @requires (jpackage.test.MacSignTests == \"setup\")\n@@ -59,1 +59,1 @@\n- * @requires (jpackage.test.SignEnv == \"teardown\")\n+ * @requires (jpackage.test.MacSignTests == \"teardown\")\n@@ -91,0 +91,4 @@\n+        private static List<KeychainWithCertsSpec> signingEnv() {\n+            return Stream.of(values()).map(StandardKeychain::spec).toList();\n+        }\n+\n@@ -95,1 +99,1 @@\n-        MacSign.setUp(Stream.of(StandardKeychain.values()).map(StandardKeychain::spec).toList());\n+        MacSign.setUp(StandardKeychain.signingEnv());\n@@ -99,1 +103,11 @@\n-        MacSign.tearDown(Stream.of(StandardKeychain.values()).map(StandardKeychain::spec).toList());\n+        MacSign.tearDown(StandardKeychain.signingEnv());\n+    }\n+\n+    public static void verifySignTestEnvReady() {\n+        if (!Inner.SIGN_ENV_READY) {\n+            TKit.throwSkippedException(new IllegalStateException(\"Misconfigured signing test environment\"));\n+        }\n+    }\n+\n+    private final class Inner {\n+        private final static boolean SIGN_ENV_READY = MacSign.isDeployed(StandardKeychain.signingEnv());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"}]}