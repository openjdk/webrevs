{"files":[{"patch":"@@ -1319,1 +1319,1 @@\n-void MacroAssembler::update_word_crc32(Register crc, Register v, Register tmp1, Register tmp2,\n+void MacroAssembler::update_word_crc32(Register crc, Register v, Register tmp1, Register tmp2, Register tmp3,\n@@ -1331,14 +1331,7 @@\n-  \/\/ In order to access table elements according to initial algorithm\n-  \/\/ the following actions should be performed (with no Zba enabled):\n-  \/\/  tmp1 = v >> 8\n-  \/\/  tmp1 = tmp1 & right_8_bits\n-  \/\/  tmp1 = tmp1 << 2\n-  \/\/  tmp1 += table2\n-  \/\/ Which is the same as:\n-  \/\/  tmp1 = v >> 6\n-  \/\/  tmp1 = tmp1 & (right_8_bits << 2)\n-  \/\/  tmp1 += table2\n-\n-  srli(tmp1, v, 6);\n-  andi(tmp1, tmp1, (right_8_bits << 2));\n-  add(tmp1, tmp1, table2);\n+  slli(tmp1, v, 16);\n+  slli(tmp3, v, 8);\n+\n+  srliw(tmp1, tmp1, 24);\n+  srliw(tmp3, tmp3, 24);\n+\n+  shadd(tmp1, tmp1, table2, tmp1, 2);\n@@ -1347,3 +1340,1 @@\n-  srli(tmp1, v, 14);\n-  andi(tmp1, tmp1, (right_8_bits << 2));\n-  add(tmp1, tmp1, table1);\n+  shadd(tmp3, tmp3, table1, tmp3, 2);\n@@ -1352,1 +1343,1 @@\n-  lwu(tmp2, Address(tmp1));\n+  lwu(tmp2, Address(tmp3));\n@@ -1376,1 +1367,1 @@\n-        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5) {\n+        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5, Register tmp6) {\n@@ -1408,2 +1399,2 @@\n-      update_word_crc32(crc, tmp1, tmp2, tmp4, table0, table1, table2, table3, false);\n-      update_word_crc32(crc, tmp1, tmp2, tmp4, table0, table1, table2, table3, true);\n+      update_word_crc32(crc, tmp1, tmp2, tmp4, tmp6, table0, table1, table2, table3, false);\n+      update_word_crc32(crc, tmp1, tmp2, tmp4, tmp6, table0, table1, table2, table3, true);\n@@ -1422,1 +1413,1 @@\n-    update_word_crc32(crc, tmp1, tmp2, tmp4, table0, table1, table2, table3, false);\n+    update_word_crc32(crc, tmp1, tmp2, tmp4, tmp6, table0, table1, table2, table3, false);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":14,"deletions":23,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1230,2 +1230,2 @@\n-        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5);\n-  void update_word_crc32(Register crc, Register v, Register tmp1, Register tmp2,\n+        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5, Register tmp6);\n+  void update_word_crc32(Register crc, Register v, Register tmp1, Register tmp2, Register tmp3,\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5287,0 +5287,1 @@\n+    const Register tmp6 = x31; \/\/ t6\n@@ -5292,1 +5293,1 @@\n-                    table3, tmp1, tmp2, tmp3, tmp4, tmp5);\n+                    table3, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,2 +152,9 @@\n-  if (FLAG_IS_DEFAULT(UseCRC32Intrinsics)) {\n-    FLAG_SET_DEFAULT(UseCRC32Intrinsics, true);\n+  if (UseZba) {\n+    if (FLAG_IS_DEFAULT(UseCRC32Intrinsics)) {\n+      FLAG_SET_DEFAULT(UseCRC32Intrinsics, true);\n+    }\n+  } else {\n+    if (!FLAG_IS_DEFAULT(UseCRC32Intrinsics)) {\n+      warning(\"CRC32 intrinsic requires Zba instructions (not available on this CPU)\");\n+    }\n+    FLAG_SET_DEFAULT(UseCRC32Intrinsics, false);\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}