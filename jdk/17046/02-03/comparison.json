{"files":[{"patch":"@@ -3665,2 +3665,2 @@\n-static const int64_t bits32 = right_n_bits(32);\n-static const int64_t bits8 = right_n_bits(8);\n+static const int64_t right_32_bits = right_n_bits(32);\n+static const int64_t right_8_bits = right_n_bits(8);\n@@ -3684,1 +3684,1 @@\n-  andi(val, val, bits8);\n+  andi(val, val, right_8_bits);\n@@ -3713,1 +3713,1 @@\n-  xorr(v, crc, v);\n+  xorr(v, v, crc);\n@@ -3715,1 +3715,1 @@\n-  andi(tmp1, v, bits8);\n+  andi(tmp1, v, right_8_bits);\n@@ -3722,1 +3722,1 @@\n-  \/\/  tmp1 = tmp1 & bits8\n+  \/\/  tmp1 = tmp1 & right_8_bits\n@@ -3727,1 +3727,1 @@\n-  \/\/  tmp1 = tmp1 & (bits8 << 2)\n+  \/\/  tmp1 = tmp1 & (right_8_bits << 2)\n@@ -3731,1 +3731,1 @@\n-  andi(tmp1, tmp1, (bits8 << 2));\n+  andi(tmp1, tmp1, (right_8_bits << 2));\n@@ -3738,1 +3738,1 @@\n-  andi(tmp1, tmp1, (bits8 << 2));\n+  andi(tmp1, tmp1, (right_8_bits << 2));\n@@ -3745,1 +3745,1 @@\n-  andi(tmp1, tmp1, (bits8 << 2));\n+  andi(tmp1, tmp1, (right_8_bits << 2));\n@@ -3762,1 +3762,1 @@\n-  Label L_by16_loop, L_by16_loop_entry, L_by4, L_by4_loop, L_by1, L_by1_loop, L_exit;\n+  Label L_by16_loop, L_unroll_loop, L_unroll_loop_entry, L_by4, L_by4_loop, L_by1, L_by1_loop, L_exit;\n@@ -3764,1 +3764,4 @@\n-  mv(tmp5, bits32);\n+  const int64_t unroll = 16;\n+  const int64_t unroll_words = unroll*wordSize;\n+  mv(tmp5, right_32_bits);\n+  subw(len, len, unroll_words);\n@@ -3773,3 +3776,2 @@\n-  subw(len, len, 16);\n-  bge(len, zr, L_by16_loop);\n-  addiw(len, len, 16-4);\n+  bge(len, zr, L_unroll_loop_entry);\n+  addiw(len, len, unroll_words-4);\n@@ -3799,11 +3801,15 @@\n-  bind(L_by16_loop);\n-    subw(len, len, 16);\n-    ld(tmp, Address(buf));\n-    update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, false);\n-    update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, true);\n-    ld(tmp, Address(buf, wordSize));\n-    addi(buf, buf, 16);\n-    update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, false);\n-    update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, true);\n-    bge(len, zr, L_by16_loop);\n-    addiw(len, len, 16-4);\n+  bind(L_unroll_loop_entry);\n+    const Register buf_end = x30; \/\/ t5\n+    add(buf_end, buf, len); \/\/ buf_end will be used as endpoint for loop below\n+    andi(len, len, unroll_words-1); \/\/ len = (len % unroll_words)\n+    sub(len, len, unroll_words); \/\/ Length after all iterations\n+  bind(L_unroll_loop);\n+    for (int i = 0; i < unroll; i++) {\n+      ld(tmp, Address(buf, i*wordSize));\n+      update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, false);\n+      update_word_crc32(crc, tmp, tmp2, tmp4, table0, table1, table2, table3, true);\n+    }\n+\n+    addi(buf, buf, unroll_words);\n+    ble(buf, buf_end, L_unroll_loop);\n+    addiw(len, len, unroll_words-4);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":32,"deletions":26,"binary":false,"changes":58,"status":"modified"}]}