{"files":[{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4079449\n+ * @key headful\n+ * @summary MenuItem objects return null if they are activated by shortcut\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import static java.awt.event.KeyEvent.VK_CONTROL;\n+import static java.awt.event.KeyEvent.VK_META;\n+\n+public class ActionCommandTest implements ActionListener {\n+\n+    static volatile Frame frame;\n+    static volatile boolean event = false;\n+    static volatile boolean failed = false;\n+    static final String ITEMTEXT = \"Testitem\";\n+\n+    static void createUI() {\n+        frame = new Frame(\"ActionCommand Menu Shortcut Test\");\n+        MenuBar mb = new MenuBar();\n+        Menu m = new Menu(\"Test\");\n+        MenuItem mi = new MenuItem(ITEMTEXT, new MenuShortcut(KeyEvent.VK_T));\n+        mi.addActionListener(new ActionCommandTest());\n+        m.add(mi);\n+        mb.add(m);\n+        frame.setMenuBar(mb);\n+        frame.setBounds(50, 400, 200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args ) throws Exception {\n+\n+        EventQueue.invokeAndWait(ActionCommandTest::createUI);\n+        try {\n+            Robot robot = new Robot();\n+\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            \/\/ Ensure window has focus\n+            Point p = frame.getLocationOnScreen();\n+            robot.mouseMove(p.x + frame.getWidth() \/ 2, p.y + frame.getHeight() \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            \/\/ invoke short cut.\n+            robot.keyPress(KeyEvent.VK_T);\n+            robot.delay(50);\n+            robot.keyRelease(KeyEvent.VK_T);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+        } finally  {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(frame::dispose);\n+            }\n+        }\n+        if (failed) {\n+           throw new RuntimeException(\"No actioncommand\");\n+        }\n+    }\n+\n+    \/\/ Since no ActionCommand is set, this should be the menuitem's label.\n+    public void actionPerformed(ActionEvent e) {\n+        event = true;\n+        String s = e.getActionCommand();\n+        if (s == null || !s.equals(ITEMTEXT)) {\n+            failed = true;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/MenuShortcut\/ActionCommandTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4167811\n+ * @summary tests that shortcuts work for Checkbox menu items\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CheckMenuShortcut\n+*\/\n+\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.TextArea;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+\n+public class CheckMenuShortcut implements ActionListener, ItemListener {\n+\n+     static final String INSTRUCTIONS = \"\"\"\n+         A window that contains a text area will be displayed.\n+         The window will have a menu labeled 'Window Menu'.  Click on the menu to see its items.\n+\n+         The two menu items should have shortcuts which in order are : Ctrl-A, Ctrl-I.\n+         On macOS these will be Command-A, Command-I.\n+\n+         If the second item only has the label 'checkbox item' and no shortcut\n+         ie none of Ctrl-I or Ctrl-i, or Command-I or Command-i on macOS painted on it, the test FAILS.\n+\n+         The same second item - labeled 'checkbox item' is in fact a Checkbox menu item.\n+         The menu item should NOT be checked (eg no tick mark).\n+\n+         Dismiss the menu by clicking inside the window, do not select any of menu items.\n+         After that press Ctrl-i, (Command-i on macOS).\n+\n+         After that click on the menu again. If the second menu item 'checkbox item' is now\n+         checked, the test PASSES, if it is not checked, the test FAILS.\n+       \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+       PassFailJFrame.builder()\n+                .title(\"CheckboxMenuItem Shortcut Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(60)\n+                .logArea()\n+                .testUI(CheckMenuShortcut::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+\n+    static Frame createUI() {\n+\n+        MenuBar mainMenu;\n+        Menu menu;\n+        MenuItem action;\n+        CheckboxMenuItem item;\n+        TextArea pane;\n+\n+        boolean isMac = System.getProperty(\"os.name\").startsWith(\"Mac\");\n+        String ctrlA = (isMac) ? \"Command-A\" : \"Ctrl-A\";\n+        String ctrlI = (isMac) ? \"Command-I\" : \"Ctrl-I\";\n+\n+        CheckMenuShortcut cms = new CheckMenuShortcut();\n+        Frame frame = new Frame(\"CheckMenuShortcut\");\n+\n+        mainMenu = new MenuBar();\n+        menu = new Menu(\"Window Menu\");\n+\n+        action = new MenuItem(\"action\");\n+        action.setShortcut(new MenuShortcut(KeyEvent.VK_A, false));\n+        action.addActionListener(cms);\n+        action.setActionCommand(\"action\");\n+        menu.add(action);\n+\n+        item = new CheckboxMenuItem(\"checkbox item\", false);\n+        item.setShortcut(new MenuShortcut(KeyEvent.VK_I,false));\n+        item.addItemListener(cms);\n+        item.addActionListener(cms);\n+        menu.add(item);\n+\n+        mainMenu.add(menu);\n+\n+        frame.setMenuBar(mainMenu);\n+\n+        pane = new TextArea(ctrlA + \" -- action menu test\\n\", 10, 40, TextArea.SCROLLBARS_VERTICAL_ONLY);\n+        Dimension mySize = frame.getSize();\n+        Insets myIns = frame.getInsets();\n+        pane.setBounds(new Rectangle(mySize.width - myIns.left - myIns.right,\n+                                     mySize.height - myIns.top - myIns.bottom));\n+        pane.setLocation(myIns.left,myIns.top);\n+        frame.add(pane);\n+\n+        pane.append(ctrlI + \" -- item menu test\\n\");\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public void itemStateChanged(ItemEvent evt) {\n+        PassFailJFrame.log(\"Got item: \" + evt.getItem() + \"\\n\");\n+    }\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        PassFailJFrame.log(\"Got action: \" + evt.getActionCommand() + \"\\n\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuShortcut\/CheckMenuShortcut.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4034665\n+ * @key headful\n+ * @summary Function keys should work correctly as shortcuts\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import static java.awt.event.KeyEvent.VK_CONTROL;\n+import static java.awt.event.KeyEvent.VK_META;\n+\n+public class FunctionKeyShortcut implements ActionListener {\n+\n+    static volatile Frame frame;\n+    static volatile boolean event = false;\n+    static volatile boolean failed = false;\n+\n+    static final boolean isMac = System.getProperty(\"os.name\").contains(\"OS X\");\n+\n+    static void createUI() {\n+        frame = new Frame(\"Function Key Menu Shortcut Test\");\n+        MenuBar mb = new MenuBar();\n+        Menu m = new Menu(\"Test\");\n+        MenuItem mi1 = new MenuItem(\"Function key 1\", new MenuShortcut(KeyEvent.VK_F1));\n+        MenuItem mi2 = new MenuItem(\"Function key 2\", new MenuShortcut(KeyEvent.VK_F2));\n+        MenuItem mi3 = new MenuItem(\"Function key 3\", new MenuShortcut(KeyEvent.VK_F3));\n+        MenuItem mi4 = new MenuItem(\"Function key 4\", new MenuShortcut(KeyEvent.VK_F4));\n+        MenuItem mi5 = new MenuItem(\"Function key 5\", new MenuShortcut(KeyEvent.VK_F5));\n+        MenuItem mi6 = new MenuItem(\"Function key 6\", new MenuShortcut(KeyEvent.VK_F6));\n+        MenuItem mi7 = new MenuItem(\"Function key 7\", new MenuShortcut(KeyEvent.VK_F7));\n+        MenuItem mi8 = new MenuItem(\"Function key 8\", new MenuShortcut(KeyEvent.VK_F8));\n+        MenuItem mi9 = new MenuItem(\"Function key 8\", new MenuShortcut(KeyEvent.VK_F9));\n+\n+        FunctionKeyShortcut fks = new FunctionKeyShortcut();\n+        mi1.addActionListener(fks);\n+        mi2.addActionListener(fks);\n+        mi3.addActionListener(fks);\n+        mi4.addActionListener(fks);\n+        mi5.addActionListener(fks);\n+        mi6.addActionListener(fks);\n+        mi7.addActionListener(fks);\n+        mi8.addActionListener(fks);\n+        mi9.addActionListener(fks);\n+\n+        m.add(mi1);\n+        m.add(mi2);\n+        m.add(mi3);\n+        m.add(mi4);\n+        m.add(mi5);\n+        m.add(mi6);\n+        m.add(mi7);\n+        m.add(mi8);\n+        m.add(mi9);\n+\n+        mb.add(m);\n+        frame.setMenuBar(mb);\n+        frame.setBounds(50,400,200,200);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args ) throws Exception {\n+\n+        EventQueue.invokeAndWait(FunctionKeyShortcut::createUI);\n+        try {\n+            Robot robot = new Robot();\n+\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            \/\/ Ensure window has focus\n+            Point p = frame.getLocationOnScreen();\n+            robot.mouseMove(p.x + frame.getWidth() \/ 2, p.y + frame.getHeight() \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            int mod = (isMac) ? KeyEvent.VK_META : KeyEvent.VK_CONTROL;\n+            robot.keyPress(mod);\n+            robot.keyPress(KeyEvent.VK_F1);\n+            robot.delay(50);\n+            robot.keyRelease(KeyEvent.VK_F1);\n+            robot.keyRelease(mod);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+        } finally  {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(frame::dispose);\n+            }\n+        }\n+        if (!event || failed) {\n+           throw new RuntimeException(\"No actioncommand\");\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        System.out.println(\"Got \" + e);\n+        String s = e.getActionCommand();\n+        event = true;\n+        if (s == null || !s.equals(\"Function key 1\")) {\n+            failed = true;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/MenuShortcut\/FunctionKeyShortcut.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4080225\n+ * @summary A replaced menu shortcut does not draw in the menu.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MenuItemShortcutReplaceTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * Manual test because visual verification of the shortcut being painted is required.\n+ *\/\n+\n+public class MenuItemShortcutReplaceTest implements ActionListener {\n+\n+    static boolean isMac = System.getProperty(\"os.name\").startsWith(\"Mac\");\n+    static String shortcut = (isMac) ? \"Cmd\" : \"Ctrl\";\n+    static String instructions =\n+         \"1. On the frame 'MenuItem Shortcut Replace Test' click on the Menu 'Click here'.\\n\" +\n+         \"   You will see a MenuItem 'MenuItem1' with the shortcut key displayed as\" +\n+         \" '\" + shortcut + \"+M'.\\n\" +\n+         \"2. Click the 'Change Shortcutkey' button.\\n\" +\n+         \"3. Now click on the Menu again to see the MenuItem.\\n\" +\n+         \"4. If the shortcut key displayed near the MenuItem is changed to \" +\n+         \"'\" + shortcut + \"+C', press 'Pass' else press 'Fail'\";\n+\n+    public static void main(String[] args) throws Exception {\n+       PassFailJFrame.builder()\n+                .title(\"MenuItem Shortcut Replace Test Instructions\")\n+                .instructions(instructions)\n+                .columns(60)\n+                .logArea()\n+                .testUI(MenuItemShortcutReplaceTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+\n+    }\n+\n+    static volatile Button change;\n+    static volatile MenuItem mi;\n+    static volatile MenuShortcut ms;\n+\n+    static Frame createUI() {\n+        Frame frame = new Frame(\"MenuItem Shortcut Replace Test\");\n+        MenuBar mb = new MenuBar();\n+        change = new Button(\"Change ShortcutKey\");\n+        Panel p = new Panel();\n+        p.add(change);\n+        MenuItemShortcutReplaceTest misrt = new MenuItemShortcutReplaceTest();\n+        change.addActionListener(misrt);\n+        Menu m = new Menu(\"Click here\");\n+        mb.add(m);\n+        mi = new MenuItem(\"MenuItem1\");\n+        m.add(mi);\n+        mi.addActionListener(misrt);\n+        frame.setMenuBar(mb);\n+        \/\/Set the shortcut key for the menuitem\n+        ms = new MenuShortcut(KeyEvent.VK_M);\n+        mi.setShortcut(ms);\n+        frame.add(p, BorderLayout.SOUTH);\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        \/\/change the shortcut key\n+        if (e.getSource() == change) {\n+            ms = new MenuShortcut(KeyEvent.VK_C);\n+            mi.setShortcut(ms);\n+            PassFailJFrame.log(\"Shortcut key set to \"+shortcut+\"C\");\n+        }\n+        if (e.getSource() == mi) {\n+            PassFailJFrame.log(\"MenuItem Selected\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuShortcut\/MenuItemShortcutReplaceTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6364746 6400007\n+ * @summary Cursor should be changed correctly while Swing menu is open (input is grabbed).\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CursorTest\n+*\/\n+\n+import java.awt.FlowLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class CursorTest {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        After the test starts you will see a frame titled \"Cursor Test Window\",\n+        with two menus in the menubar (menu1 and menu2), and a textfield and\n+        a button, labeled \"JButton\".\n+        1. Open menu1 (it should be small and fit within the border of the frame),\n+        2. Verify that the pointer image (cursor) is the default desktop cursor.\n+        3. Move the mouse over the text field - the cursor should change its shape to caret,\n+        4. Move the mouse over the button - the cursor should be default one,\n+        5. Move the mouse to the border of the frame - cursor should be a resize one\n+           (exact shape is dependent on the border you move over),\n+        6. Move the mouse out of the frame - cursor should be default one,\n+        7. Perform steps 2-6 in reverse order (after this the mouse should be over the open menu1),\n+        8. Open menu2, it should be big enough to not fit within the frame,\n+        9. Repeat steps 2-7 (you should end up with mouse over opened menu2 :),\n+        10. Close the menu.\n+        11. If on every step the cursor was as described, press Pass, press Fail otherwise.\n+        \"\"\";\n+\n+    static JFrame createUI() {\n+\n+        JButton but = new JButton(\"JButton\");\n+        JPanel panel = new JPanel();\n+        JTextField jtf = new JTextField(\"JTextField\", 20);\n+\n+        JFrame.setDefaultLookAndFeelDecorated(true);\n+        JFrame frame = new JFrame(\"Cursor Test Window\");\n+        frame.setLayout(new FlowLayout());\n+        panel.add(but);\n+\n+        frame.getContentPane().add(jtf);\n+        frame.getContentPane().add(panel);\n+\n+        JMenu menu1 = new JMenu(\"menu1\");\n+        menu1.add(new JMenuItem(\"menu1,item1\"));\n+        JMenuBar mb = new JMenuBar();\n+        mb.add(menu1);\n+        JMenu menu2 = new JMenu(\"menu2\");\n+        for (int i = 0; i < 10; i++) {\n+            menu2.add(new JMenuItem(\"menu2,item\"+i));\n+        }\n+        mb.add(menu2);\n+        frame.setJMenuBar(mb);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+       PassFailJFrame.builder()\n+                .title(\"Cursor Test\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(60)\n+                .testUI(CursorTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/grab\/CursorTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6364741\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @summary REG: Using frame's menu actions does not make swing menu disappear on WinXP,\n+ *          since Mustang-b53\n+ *\/\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+\n+public class SystemMenuTest implements MenuListener {\n+\n+    static volatile JMenu menu;\n+    static volatile JMenu sub_menu;\n+    static volatile JFrame frame;\n+\n+    static volatile int selectCount = 0;\n+    static volatile int deselectCount = 0;\n+    static volatile boolean failed = false;\n+    static volatile String reason = \"none\";\n+\n+    static void createUI() {\n+        SystemMenuTest smt = new SystemMenuTest();\n+        sub_menu = new JMenu(\"SubMenu\");\n+        sub_menu.addMenuListener(smt);\n+        sub_menu.add(new JMenuItem(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+        sub_menu.add(new JMenuItem(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"));\n+        menu = new JMenu(\"Menu\");\n+        menu.addMenuListener(smt);\n+        menu.add(sub_menu);\n+        JMenuBar mb = new JMenuBar();\n+        mb.add(menu);\n+\n+        frame = new JFrame(\"JFrame\");\n+        frame.setJMenuBar(mb);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        Robot robot = new Robot();\n+\n+        SwingUtilities.invokeAndWait(SystemMenuTest::createUI);\n+\n+        try {\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            Point p = menu.getLocationOnScreen();\n+            robot.mouseMove(p.x + menu.getWidth() \/ 2, p.y + menu.getHeight() \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            p = sub_menu.getLocationOnScreen();\n+            robot.mouseMove(p.x + sub_menu.getWidth() \/ 2, p.y + sub_menu.getHeight() \/2 );\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            \/\/ Alt-Space to invoke System Menu, should close Swing menus.\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_SPACE);\n+            robot.delay(50);\n+            robot.keyRelease(KeyEvent.VK_SPACE);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+\n+            if (selectCount != 2 || deselectCount != 2) {\n+                throw new RuntimeException(\"unexpected selection count \" + selectCount + \", \" + deselectCount);\n+            }\n+            if (failed) {\n+                throw new RuntimeException(\"Failed because \" + reason);\n+            }\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(frame::dispose);\n+            }\n+        }\n+    }\n+\n+    public void menuCanceled(MenuEvent e) {\n+       System.out.println(\"cancelled\"+e.getSource());\n+    }\n+\n+    public void menuDeselected(MenuEvent e) {\n+       deselectCount++;\n+       if (selectCount != 2) {\n+          failed = true;\n+          reason = \"deselect without two selects\";\n+       }\n+       System.out.println(\"deselected\"+e.getSource());\n+    }\n+\n+    public void menuSelected(MenuEvent e) {\n+       if (deselectCount != 0) {\n+          failed = true;\n+          reason = \"select without non-zero deselects\";\n+       }\n+       selectCount++;\n+       System.out.println(\"selected\"+e.getSource());\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/grab\/SystemMenuTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}