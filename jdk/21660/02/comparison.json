{"files":[{"patch":"@@ -231,1 +231,7 @@\n-      BasicType element_type = _vloop_analyzer.types().velt_basic_type(p0);\n+      \/\/ In some rare case, p0 is Convert node such as a ConvL2I: all\n+      \/\/ ConvL2I nodes in the pack only differ in their types.\n+      \/\/ velt_basic_type(p0) is the output type of the pack. In the\n+      \/\/ case of a ConvL2I, it can be int or some narrower type such\n+      \/\/ as short etc. But given we replicate the input of the Convert\n+      \/\/ node, we have to use the input type instead.\n+      BasicType element_type = p0->is_Convert() ? p0->in(1)->bottom_type()->basic_type() : _vloop_analyzer.types().velt_basic_type(p0);\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8341834\n+ * @summary C2 compilation fails with \"bad AD file\" due to Replicate\n+ * @run main\/othervm -XX:CompileCommand=compileonly,TestReplicateAtConv::test -Xcomp TestReplicateAtConv\n+ *\/\n+\n+public class TestReplicateAtConv {\n+    public static long val = 0;\n+\n+    public static void test() {\n+        int array[] = new int[500];\n+\n+        for (int i = 0; i < 100; i++) {\n+            for (long l = 100; l > i; l--) {\n+                val = 42 + (l + i);\n+                array[(int)l] = (int)l - (int)val;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReplicateAtConv.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}