{"files":[{"patch":"@@ -58,1 +58,22 @@\n-  char* orig = os::strdup(mem->cgroup_path());\n+  char* orig = nullptr;\n+  julong phys_mem = os::Linux::physical_memory();\n+  \/\/ adjust orig path down to the actual mounted suffix\n+  char *start_suffix = os::strdup(mem->cgroup_path());\n+  char *suffix = start_suffix;\n+  while (!os::file_exists(mem->subsystem_path())) {\n+    if (*suffix == 0) break;\n+    suffix = strchr(suffix+1, '\/');\n+    if (suffix == nullptr) break;\n+    mem->set_subsystem_path(suffix);\n+  }\n+  if (suffix != nullptr && *suffix == '\/') {\n+    orig = os::strdup(suffix);\n+  } else {\n+    orig = os::strdup(\"\/\");\n+    mem->set_subsystem_path(orig);\n+  }\n+  if (strcmp(start_suffix, orig) != 0) {\n+    log_trace(os, container)(\"Adjusted path suffix to: %s.\", orig);\n+  }\n+  os::free(start_suffix);\n+  \/\/ adjust up the hierarchy to locate the lowest limit\n@@ -61,2 +82,0 @@\n-  assert(cg_path[0] == '\/', \"cgroup path must start with '\/'\");\n-  julong phys_mem = os::Linux::physical_memory();\n@@ -66,0 +85,5 @@\n+  if (limit > 0 && limit < lowest_limit) {\n+    lowest_limit = limit;\n+    os::free(limit_cg_path); \/\/ handles nullptr\n+    limit_cg_path = os::strdup(cg_path);\n+  }\n@@ -113,1 +137,21 @@\n-  char* orig = os::strdup(cpu->cgroup_path());\n+  char* orig = nullptr;\n+  \/\/ adjust orig path down to the actual mounted suffix\n+  char *start_suffix = os::strdup(cpu->cgroup_path());\n+  char *suffix = start_suffix;\n+  while (!os::file_exists(cpu->subsystem_path())) {\n+    if (*suffix == 0) break;\n+    suffix = strchr(suffix+1, '\/');\n+    if (suffix == nullptr) break;\n+    cpu->set_subsystem_path(suffix);\n+  }\n+  if (suffix != nullptr && *suffix == '\/') {\n+    orig = os::strdup(suffix);\n+  } else {\n+    orig = os::strdup(\"\/\");\n+    cpu->set_subsystem_path(orig);\n+  }\n+  if (strcmp(start_suffix, orig) != 0) {\n+    log_trace(os, container)(\"Adjusted path suffix to: %s.\", orig);\n+  }\n+  os::free(start_suffix);\n+  \/\/ adjust up the hierarchy to locate the lowest limit\n@@ -116,1 +160,0 @@\n-  assert(cg_path[0] == '\/', \"cgroup path must start with '\/'\");\n@@ -121,0 +164,5 @@\n+  if (cpus != host_cpus && cpus < lowest_limit) {\n+    lowest_limit = cpus;\n+    os::free(limit_cg_path); \/\/ handles nullptr\n+    limit_cg_path = os::strdup(cg_path);\n+  }\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":53,"deletions":5,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-        \/\/ hosts only\n@@ -58,0 +57,13 @@\n+        if (strstr((char*)cgroup_path, \"..\/\") != nullptr) {\n+          log_warning(os, container)(\"Cgroup v1 path at [%s] is [%s], cgroup limits can be wrong.\",\n+            _mount_point, cgroup_path);\n+        }\n+      }\n+    } else {\n+      \/\/ containers with cgroupns=host, default setting is _root==cgroup_path\n+      if (strcmp(_root, cgroup_path) != 0) {\n+        if (strcmp(cgroup_path,\"\/\") != 0) {\n+          \/\/ When moved to a subgroup, between subgroups, the path suffix will change.\n+          \/\/ Rely on path adjustment that determines the actual suffix.\n+          ss.print_raw(cgroup_path);\n+        }\n@@ -59,4 +71,0 @@\n-    } else if (strcmp(_root, cgroup_path) != 0) {\n-      \/\/ containers only, warn if doesn't match\n-      log_warning(os, container)(\"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s]\",\n-        _mount_point, _root, cgroup_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Red Hat Inc.\n+ * Copyright (c) 2020, 2024, Red Hat Inc.\n@@ -319,0 +319,4 @@\n+    if (strstr((char*)cgroup_path, \"..\/\") != nullptr) {\n+      log_warning(os, container)(\"Cgroup v2 path at [%s] is [%s], cgroup limits can be wrong.\",\n+        mount_path, cgroup_path);\n+    }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                \/\/ host processes \/ containers w\/private cgroup namespace\n+                \/\/ host processes and containers with cgroupns=private\n@@ -52,1 +52,0 @@\n-                    \/\/ hosts only\n@@ -54,0 +53,14 @@\n+                    if (cgroupPath.indexOf(\"..\/\") != -1) {\n+                        System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n+                                \"Cgroup v1 path at [%s] is [%s], cgroup limits can be wrong.\",\n+                                mountPoint, cgroupPath));\n+                    }\n+                }\n+            } else {\n+                \/\/ containers with cgroupns=host, default setting is _root==cgroup_path\n+                if (!cgroupPath.equals(root)) {\n+                    if (!cgroupPath.equals(\"\/\")) {\n+                        \/\/ When moved to a subgroup, between subgroups, the path suffix will change.\n+                        \/\/ Rely on path adjustment that determines the actual suffix.\n+                        path += cgroupPath;\n+                    }\n@@ -55,5 +68,0 @@\n-            } else if (!root.equals(cgroupPath)) {\n-                \/\/ containers only, warn if doesn't match\n-                System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n-                        \"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s].\",\n-                        mountPoint, root, cgroupPath));\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat Inc.\n+ * Copyright (c) 2020, 2024, Red Hat Inc.\n@@ -28,0 +28,1 @@\n+import java.lang.System.Logger.Level;\n@@ -39,0 +40,5 @@\n+        if (cgroupPath.indexOf(\"..\/\") != -1) {\n+            System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n+                    \"Cgroup v2 path at [%s] is [%s], cgroup limits can be wrong.\",\n+                    mountPath, cgroupPath));\n+        }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2SubsystemController.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -441,1 +441,1 @@\n-    \"\/sys\/fs\/cgroup\/cpu,cpuacct\"                                             \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\/cpu,cpuacct\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\" \/\/ expected_path\n@@ -444,4 +444,4 @@\n-    \"\/sys\/fs\/cgroup\/memory\", \/\/ mount_path\n-    \"\/a\",                    \/\/ root_path\n-    \"\/a\/b\",                  \/\/ cgroup_path\n-    \"\/sys\/fs\/cgroup\/memory\"  \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\/memory\",    \/\/ mount_path\n+    \"\/a\",                       \/\/ root_path\n+    \"\/a\/b\",                     \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/a\/b\" \/\/ expected_path\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (C) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.internal.platform.Metrics;\n+\n+import java.util.ArrayList;\n+\n+\/*\n+ * @test\n+ * @bug 8343191\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.platform\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox CheckOperatingSystemMXBean\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar jdk.test.whitebox.WhiteBox\n+ * @run main TestMemoryWithSubgroups\n+ *\/\n+public class TestMemoryWithSubgroups {\n+\n+    private static final String imageName = Common.imageName(\"subgroup\");\n+\n+    public static void main(String[] args) throws Exception {\n+        Metrics metrics = Metrics.systemMetrics();\n+        if (metrics == null) {\n+            System.out.println(\"Cgroup not configured.\");\n+            return;\n+        }\n+        if (!DockerTestUtils.canTestDocker()) {\n+            System.out.println(\"Unable to run docker tests.\");\n+            return;\n+        }\n+        if (\"cgroupv1\".equals(metrics.getProvider())) {\n+\n+            Common.prepareWhiteBox();\n+            DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+            try {\n+                testMemoryLimitSubgroupV1(\"100m\", \"104857600\", false);\n+                testMemoryLimitSubgroupV1(\"500m\", \"524288000\", false);\n+                testMemoryLimitSubgroupV1(\"100m\", \"104857600\", true);\n+                testMemoryLimitSubgroupV1(\"500m\", \"524288000\", true);\n+            } finally {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        } else if (\"cgroupv2\".equals(metrics.getProvider())) {\n+\n+            Common.prepareWhiteBox();\n+            DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+            try {\n+                testMemoryLimitSubgroupV2(\"100m\", \"104857600\", false);\n+                testMemoryLimitSubgroupV2(\"500m\", \"524288000\", false);\n+                testMemoryLimitSubgroupV2(\"100m\", \"104857600\", true);\n+                testMemoryLimitSubgroupV2(\"500m\", \"524288000\", true);\n+            } finally {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        } else {\n+            System.out.println(\"Metrics are from neither cgroup v1 nor v2, skipped for now.\");\n+        }\n+    }\n+\n+    private static void testMemoryLimitSubgroupV1(String valueToSet, String expectedValue, boolean privateNamespace)\n+            throws Exception {\n+\n+        Common.logNewTestCase(\"Cgroup V1 subgroup memory limit: \" + valueToSet);\n+\n+        DockerRunOptions opts = new DockerRunOptions(imageName, \"sh\", \"-c\");\n+        opts.javaOpts = new ArrayList<>();\n+        opts.appendTestJavaOptions = false;\n+        opts.addDockerOpts(\"--privileged\")\n+            .addDockerOpts(\"--cgroupns=\" + (privateNamespace ? \"private\" : \"host\"))\n+            .addDockerOpts(\"--memory\", \"1g\");\n+        opts.addClassOptions(\"mkdir -p \/sys\/fs\/cgroup\/memory\/test ; \" +\n+            \"echo \" + valueToSet + \" > \/sys\/fs\/cgroup\/memory\/test\/memory.limit_in_bytes ; \" +\n+            \"echo $$ > \/sys\/fs\/cgroup\/memory\/test\/cgroup.procs ; \" +\n+            \"\/jdk\/bin\/java -Xlog:os+container=trace -version\");\n+\n+        Common.run(opts)\n+            .shouldMatch(\"Lowest limit was:.*\" + expectedValue);\n+    }\n+\n+    private static void testMemoryLimitSubgroupV2(String valueToSet, String expectedValue, boolean privateNamespace)\n+            throws Exception {\n+\n+        Common.logNewTestCase(\"Cgroup V2 subgroup memory limit: \" + valueToSet);\n+\n+        DockerRunOptions opts = new DockerRunOptions(imageName, \"sh\", \"-c\");\n+        opts.javaOpts = new ArrayList<>();\n+        opts.appendTestJavaOptions = false;\n+        opts.addDockerOpts(\"--privileged\")\n+            .addDockerOpts(\"--cgroupns=\" + (privateNamespace ? \"private\" : \"host\"))\n+            .addDockerOpts(\"--memory\", \"1g\");\n+        opts.addClassOptions(\"mkdir -p \/sys\/fs\/cgroup\/memory\/test ; \" +\n+            \"echo $$ > \/sys\/fs\/cgroup\/memory\/test\/cgroup.procs ; \" +\n+            \"echo '+memory' > \/sys\/fs\/cgroup\/cgroup.subtree_control ; \" +\n+            \"echo '+memory' > \/sys\/fs\/cgroup\/memory\/cgroup.subtree_control ; \" +\n+            \"echo \" + valueToSet + \" > \/sys\/fs\/cgroup\/memory\/test\/memory.max ; \" +\n+            \"\/jdk\/bin\/java -Xlog:os+container=trace -version\");\n+\n+        Common.run(opts)\n+            .shouldMatch(\"Lowest limit was:.*\" + expectedValue);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithSubgroups.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -77,1 +77,1 @@\n-        String expectedPath = mountPoint;\n+        String expectedPath = mountPoint + cgroupPath;\n@@ -88,1 +88,1 @@\n-        String expectedPath = mountPoint;\n+        String expectedPath = mountPoint + cgroupPath;\n@@ -99,1 +99,1 @@\n-        String expectedPath = mountPoint;\n+        String expectedPath = mountPoint + cgroupPath;\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-        String expectedPath = expectedMountPoint;\n+        String expectedPath = expectedMountPoint + cpuInfo.getCgroupPath();\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}