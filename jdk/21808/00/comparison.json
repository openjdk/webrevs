{"files":[{"patch":"@@ -106,0 +106,4 @@\n+  bool all_controllers_read_only = true;\n+  for (int n = 0; n < CG_INFO_LENGTH && all_controllers_read_only; n++) {\n+    all_controllers_read_only &= cg_infos[n]._read_only;\n+  }\n@@ -110,1 +114,1 @@\n-        memory = new CgroupV1MemoryController(CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only));\n+        memory = new CgroupV1MemoryController(CgroupV1Controller(info._root_mount_path, info._mount_path, all_controllers_read_only));\n@@ -113,1 +117,1 @@\n-        cpuset = new CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only);\n+        cpuset = new CgroupV1Controller(info._root_mount_path, info._mount_path, all_controllers_read_only);\n@@ -116,1 +120,1 @@\n-        cpu = new CgroupV1CpuController(CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only));\n+        cpu = new CgroupV1CpuController(CgroupV1Controller(info._root_mount_path, info._mount_path, all_controllers_read_only));\n@@ -119,1 +123,1 @@\n-        cpuacct = new CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only);\n+        cpuacct = new CgroupV1Controller(info._root_mount_path, info._mount_path, all_controllers_read_only);\n@@ -122,1 +126,1 @@\n-        pids = new CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only);\n+        pids = new CgroupV1Controller(info._root_mount_path, info._mount_path, all_controllers_read_only);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -52,2 +52,3 @@\n-    if (strcmp(_root, \"\/\") == 0) {\n-      ss.print_raw(_mount_point);\n+    ss.print_raw(_mount_point);\n+    if (strcmp(_root, \"\/\") == 0 || !is_read_only()) {\n+      \/\/ host processes \/ containers w\/private cgroup namespace\n@@ -55,0 +56,1 @@\n+        \/\/ hosts only\n@@ -57,16 +59,4 @@\n-      _path = os::strdup(ss.base());\n-    } else {\n-      if (strcmp(_root, cgroup_path) == 0) {\n-        ss.print_raw(_mount_point);\n-        _path = os::strdup(ss.base());\n-      } else {\n-        char *p = strstr((char*)cgroup_path, _root);\n-        if (p != nullptr && p == _root) {\n-          if (strlen(cgroup_path) > strlen(_root)) {\n-            ss.print_raw(_mount_point);\n-            const char* cg_path_sub = cgroup_path + strlen(_root);\n-            ss.print_raw(cg_path_sub);\n-            _path = os::strdup(ss.base());\n-          }\n-        }\n-      }\n+    } else if (strcmp(_root, cgroup_path) != 0) {\n+      \/\/ containers only, warn if doesn't match\n+      log_warning(os, container)(\"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s]\",\n+        _mount_point, _root, cgroup_path);\n@@ -74,0 +64,1 @@\n+    _path = os::strdup(ss.base());\n@@ -221,0 +212,1 @@\n+  \/\/ (all v1 controllers are initialized with a single combined read-only flag)\n@@ -222,4 +214,1 @@\n-  return _memory->controller()->is_read_only() &&\n-         _cpu->controller()->is_read_only() &&\n-         _cpuacct->is_read_only() &&\n-         _cpuset->is_read_only();\n+  return _memory->controller()->is_read_only();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    private String mountOptions;\n@@ -79,0 +80,8 @@\n+    public String getMountOptions() {\n+        return mountOptions;\n+    }\n+\n+    public void setMountOptions(String mountOptions) {\n+        this.mountOptions = mountOptions;\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupInfo.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -78,2 +78,3 @@\n-        \"[^-]+-\\\\s+\" +                         \/\/ (6), (7), (8)\n-        \"([^\\\\s]+)\\\\s+\" +                      \/\/ (9)          - group 3: filesystem type\n+        \"([^\\\\s]+)\\\\s+\" +                      \/\/ (6)          - group 3: mount options\n+        \"[^-]*-\\\\s+\" +                         \/\/ (7), (8)\n+        \"([^\\\\s]+)\\\\s+\" +                      \/\/ (9)          - group 4: filesystem type\n@@ -312,1 +313,2 @@\n-            String fsType = lineMatcher.group(3);\n+            String mountOptions = lineMatcher.group(3);\n+            String fsType = lineMatcher.group(4);\n@@ -325,1 +327,1 @@\n-                            setMountPoints(info, mountPath, mountRoot);\n+                            setMountPoints(info, mountPath, mountRoot, mountOptions);\n@@ -339,1 +341,1 @@\n-                        setMountPoints(info, mountPath, mountRoot);\n+                        setMountPoints(info, mountPath, mountRoot, mountOptions);\n@@ -348,1 +350,1 @@\n-    private static void setMountPoints(CgroupInfo info, String mountPath, String mountRoot) {\n+    private static void setMountPoints(CgroupInfo info, String mountPath, String mountRoot, String mountOptions) {\n@@ -362,0 +364,1 @@\n+        info.setMountOptions(mountOptions);\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-    public CgroupV1MemorySubSystemController(String root, String mountPoint) {\n-        super(root, mountPoint);\n+    public CgroupV1MemorySubSystemController(String root, String mountPoint, boolean isContainerized) {\n+        super(root, mountPoint, isContainerized);\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1MemorySubSystemController.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,0 +75,18 @@\n+        boolean allControllersReadOnly = true;\n+\n+        for (CgroupInfo info: infos.values()) {\n+            String mo = info.getMountOptions();\n+            boolean readOnly = false;\n+            if (mo != null) {\n+                for (String o : mo.split(\",\")) {\n+                    if (o.equals(\"ro\")) {\n+                        readOnly = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (!readOnly) {\n+                allControllersReadOnly = false;\n+                break;\n+            }\n+        }\n@@ -83,1 +101,1 @@\n-                    CgroupV1MemorySubSystemController controller = new CgroupV1MemorySubSystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1MemorySubSystemController controller = new CgroupV1MemorySubSystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n@@ -96,1 +114,1 @@\n-                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n@@ -105,1 +123,1 @@\n-                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n@@ -114,1 +132,1 @@\n-                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n@@ -123,1 +141,1 @@\n-                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n@@ -132,1 +150,1 @@\n-                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint());\n+                    CgroupV1SubsystemController controller = new CgroupV1SubsystemController(info.getMountRoot(), info.getMountPoint(), allControllersReadOnly);\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.System.Logger.Level;\n+\n@@ -39,0 +41,1 @@\n+    boolean isContainerized = false;\n@@ -40,1 +43,1 @@\n-    public CgroupV1SubsystemController(String root, String mountPoint) {\n+    public CgroupV1SubsystemController(String root, String mountPoint, boolean isContainerized) {\n@@ -43,0 +46,1 @@\n+        this.isContainerized = isContainerized;\n@@ -47,1 +51,3 @@\n-            if (root.equals(\"\/\")) {\n+            String path = mountPoint;\n+            if (root.equals(\"\/\") || !isContainerized) {\n+                \/\/ host processes \/ containers w\/private cgroup namespace\n@@ -49,17 +55,2 @@\n-                    path = mountPoint + cgroupPath;\n-                }\n-                else {\n-                    path = mountPoint;\n-                }\n-            }\n-            else {\n-                if (root.equals(cgroupPath)) {\n-                    path = mountPoint;\n-                }\n-                else {\n-                    if (cgroupPath.startsWith(root)) {\n-                        if (cgroupPath.length() > root.length()) {\n-                            String cgroupSubstr = cgroupPath.substring(root.length());\n-                            path = mountPoint + cgroupSubstr;\n-                        }\n-                    }\n+                    \/\/ hosts only\n+                    path += cgroupPath;\n@@ -67,0 +58,5 @@\n+            } else if (!root.equals(cgroupPath)) {\n+                \/\/ containers only, warn if doesn't match\n+                System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n+                        \"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s].\",\n+                        mountPoint, root, cgroupPath));\n@@ -68,0 +64,1 @@\n+            this.path = path;\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  bool read_only;\n@@ -429,1 +430,2 @@\n-    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\" \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\",\/\/ expected_path\n+    false                                                                \/\/ read-only mount\n@@ -435,1 +437,2 @@\n-    \"\/sys\/fs\/cgroup\/mem\"                             \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\/mem\",                            \/\/ expected_path\n+    true                                             \/\/ read-only mount\n@@ -437,1 +440,29 @@\n-  int length = 2;\n+  TestCase host_non_standard = {\n+    \"\/sys\/fs\/cgroup\/mem\",                                              \/\/ mount_path\n+    \"\/user.slice\/user-1000.slice\",                                     \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\",                   \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/mem\/user.slice\/user-1000.slice\/user@1000.service\", \/\/ expected_path\n+    false                                                              \/\/ read-only mount\n+  };\n+  TestCase container_moving_cgroup = {\n+    \"\/sys\/fs\/cgroup\/cpu,cpuacct\",                                            \/\/ mount_path\n+    \"\/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c\", \/\/ root_path\n+    \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\",  \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/cpu,cpuacct\",                                            \/\/ expected_path\n+    true                                                                     \/\/ read-only mount\n+  };\n+  TestCase container_prefix = {\n+    \"\/sys\/fs\/cgroup\/memory\", \/\/ mount_path\n+    \"\/a\",                    \/\/ root_path\n+    \"\/a\/b\",                  \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\", \/\/ expected_path\n+    true                     \/\/ read-only mount\n+  };\n+  TestCase host_prefix = {\n+    \"\/sys\/fs\/cgroup\/memory\",     \/\/ mount_path\n+    \"\/a\",                        \/\/ root_path\n+    \"\/a\/b\",                      \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/a\/b\", \/\/ expected_path\n+    false                        \/\/ read-only mount\n+  };\n+  int length = 6;\n@@ -439,1 +470,5 @@\n-                            &container_engine };\n+                            &container_engine,\n+                            &host_non_standard,\n+                            &container_moving_cgroup,\n+                            &container_prefix,\n+                            &host_prefix };\n@@ -443,1 +478,1 @@\n-                                                       true \/* read-only mount *\/);\n+                                                       testCases[i]->read_only \/* read-only mount *\/);\n@@ -454,1 +489,2 @@\n-    \"\/sys\/fs\/cgroup\"        \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\",       \/\/ expected_path\n+    true                    \/\/ read-only mount\n@@ -460,1 +496,2 @@\n-    \"\/sys\/fs\/cgroup\/foobar\" \/\/ expected_path\n+    \"\/sys\/fs\/cgroup\/foobar\",\/\/ expected_path\n+    true                    \/\/ read-only mount\n@@ -468,1 +505,1 @@\n-                                                       true \/* read-only mount *\/);\n+                                                       testCases[i]->read_only \/* read-only mount *\/);\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":45,"deletions":8,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint, true);\n@@ -60,1 +60,1 @@\n-        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint, false);\n@@ -67,0 +67,3 @@\n+    \/*\n+     * Less common cases: Containers\n+     *\/\n@@ -71,1 +74,1 @@\n-        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint, false);\n@@ -74,1 +77,1 @@\n-        String expectedPath = mountPoint + \"\/some\";\n+        String expectedPath = mountPoint + cgroupPath;\n@@ -76,0 +79,3 @@\n+        ctrl = new CgroupV1SubsystemController(root, mountPoint, true);\n+        ctrl.setPath(cgroupPath);\n+        assertEquals(mountPoint, ctrl.path());\n@@ -78,0 +84,27 @@\n+    @Test\n+    public void testCgPathPrefixRoot() {\n+        String root = \"\/a\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/memory\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint, false);\n+        String cgroupPath = \"\/a\/b\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint + cgroupPath;\n+        assertEquals(expectedPath, ctrl.path());\n+        ctrl = new CgroupV1SubsystemController(root, mountPoint, true);\n+        ctrl.setPath(cgroupPath);\n+        assertEquals(mountPoint, ctrl.path());\n+    }\n+\n+    @Test\n+    public void testCgPathFallbackToMountPoint() {\n+        String root = \"\/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/cpu,cpuacct\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint, false);\n+        String cgroupPath = \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint + cgroupPath;\n+        assertEquals(expectedPath, ctrl.path());\n+        ctrl = new CgroupV1SubsystemController(root, mountPoint, true);\n+        ctrl.setPath(cgroupPath);\n+        assertEquals(mountPoint, ctrl.path());\n+    }\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.platform.cgroupv1.CgroupV1SubsystemController;\n@@ -78,0 +79,1 @@\n+    private Path cgroupv1MntInfoNonTrivialRoot;\n@@ -80,0 +82,1 @@\n+    private Path cgroupv1SelfNonTrivialRoot;\n@@ -178,0 +181,1 @@\n+    private String mntInfoNonTrivialRoot = \"2207 2196 0:43 \/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c \/sys\/fs\/cgroup\/cpu,cpuacct ro,nosuid,nodev,noexec,relatime master:25 - cgroup cgroup rw,cpu,cpuacct\\n\";\n@@ -233,0 +237,1 @@\n+    private String cgroupv1SelfNTRoot = \"11:cpu,cpuacct:\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\\n\";\n@@ -297,0 +302,3 @@\n+            cgroupv1MntInfoNonTrivialRoot = Paths.get(existingDirectory.toString(), \"mountinfo_nt_root\");\n+            Files.writeString(cgroupv1MntInfoNonTrivialRoot, mntInfoNonTrivialRoot);\n+\n@@ -303,0 +311,3 @@\n+            cgroupv1SelfNonTrivialRoot = Paths.get(existingDirectory.toString(), \"self_nt_root_cgv1\");\n+            Files.writeString(cgroupv1SelfNonTrivialRoot, cgroupv1SelfNTRoot);\n+\n@@ -452,0 +463,26 @@\n+    @Test\n+    public void testMountPrefixCgroupsV1() throws IOException {\n+        String cgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n+        String mountInfo = cgroupv1MntInfoNonTrivialRoot.toString();\n+        String selfCgroup = cgroupv1SelfNonTrivialRoot.toString();\n+        Optional<CgroupTypeResult> result = CgroupSubsystemFactory.determineType(mountInfo, cgroups, selfCgroup);\n+\n+        assertTrue(\"Expected non-empty cgroup result\", result.isPresent());\n+        CgroupTypeResult res = result.get();\n+        CgroupInfo cpuInfo = res.getInfos().get(\"cpu\");\n+        assertEquals(cpuInfo.getCgroupPath(), \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\");\n+        String expectedMountPoint = \"\/sys\/fs\/cgroup\/cpu,cpuacct\";\n+        assertEquals(expectedMountPoint, cpuInfo.getMountPoint());\n+        CgroupV1SubsystemController cgroupv1MemoryController = new CgroupV1SubsystemController(cpuInfo.getMountRoot(), cpuInfo.getMountPoint(), false);\n+        cgroupv1MemoryController.setPath(cpuInfo.getCgroupPath());\n+        String actualPath = cgroupv1MemoryController.path();\n+        assertNotNull(\"Controller path should not have been null\", actualPath);\n+        String expectedPath = expectedMountPoint + cpuInfo.getCgroupPath();\n+        assertEquals(\"Should be equal to mount point plus cgroup path in host mode\", expectedPath, actualPath);\n+        \/\/ set readonly=true and repeat\n+        cgroupv1MemoryController = new CgroupV1SubsystemController(cpuInfo.getMountRoot(), cpuInfo.getMountPoint(), true);\n+        cgroupv1MemoryController.setPath(cpuInfo.getCgroupPath());\n+        actualPath = cgroupv1MemoryController.path();\n+        assertEquals(\"Should be equal to mount point in container mode\", expectedMountPoint, actualPath);\n+    }\n+\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}