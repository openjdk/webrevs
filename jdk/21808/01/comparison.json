{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    ss.print_raw(_mount_point);\n@@ -53,1 +54,1 @@\n-      ss.print_raw(_mount_point);\n+      \/\/ host processes \/ containers w\/private cgroup namespace\n@@ -55,0 +56,1 @@\n+        \/\/ hosts only\n@@ -57,16 +59,4 @@\n-      _path = os::strdup(ss.base());\n-    } else {\n-      if (strcmp(_root, cgroup_path) == 0) {\n-        ss.print_raw(_mount_point);\n-        _path = os::strdup(ss.base());\n-      } else {\n-        char *p = strstr((char*)cgroup_path, _root);\n-        if (p != nullptr && p == _root) {\n-          if (strlen(cgroup_path) > strlen(_root)) {\n-            ss.print_raw(_mount_point);\n-            const char* cg_path_sub = cgroup_path + strlen(_root);\n-            ss.print_raw(cg_path_sub);\n-            _path = os::strdup(ss.base());\n-          }\n-        }\n-      }\n+    } else if (strcmp(_root, cgroup_path) != 0) {\n+      \/\/ containers only, warn if doesn't match\n+      log_warning(os, container)(\"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s]\",\n+        _mount_point, _root, cgroup_path);\n@@ -74,0 +64,1 @@\n+    _path = os::strdup(ss.base());\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.System.Logger.Level;\n@@ -47,0 +48,1 @@\n+            String path = mountPoint;\n@@ -48,0 +50,1 @@\n+                \/\/ host processes \/ containers w\/private cgroup namespace\n@@ -49,17 +52,2 @@\n-                    path = mountPoint + cgroupPath;\n-                }\n-                else {\n-                    path = mountPoint;\n-                }\n-            }\n-            else {\n-                if (root.equals(cgroupPath)) {\n-                    path = mountPoint;\n-                }\n-                else {\n-                    if (cgroupPath.startsWith(root)) {\n-                        if (cgroupPath.length() > root.length()) {\n-                            String cgroupSubstr = cgroupPath.substring(root.length());\n-                            path = mountPoint + cgroupSubstr;\n-                        }\n-                    }\n+                    \/\/ hosts only\n+                    path += cgroupPath;\n@@ -67,0 +55,5 @@\n+            } else if (!root.equals(cgroupPath)) {\n+                \/\/ containers only, warn if doesn't match\n+                System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n+                        \"Cgroup v1 controller (%s) mounting root [%s] doesn't match cgroup [%s].\",\n+                        mountPoint, root, cgroupPath));\n@@ -68,0 +61,1 @@\n+            this.path = path;\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -437,1 +437,13 @@\n-  int length = 2;\n+  TestCase container_moving_cgroup = {\n+    \"\/sys\/fs\/cgroup\/cpu,cpuacct\",                                            \/\/ mount_path\n+    \"\/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c\", \/\/ root_path\n+    \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\",  \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/cpu,cpuacct\"                                             \/\/ expected_path\n+  };\n+  TestCase container_prefix = {\n+    \"\/sys\/fs\/cgroup\/memory\", \/\/ mount_path\n+    \"\/a\",                    \/\/ root_path\n+    \"\/a\/b\",                  \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\"  \/\/ expected_path\n+  };\n+  int length = 4;\n@@ -439,1 +451,3 @@\n-                            &container_engine };\n+                            &container_engine,\n+                            &container_moving_cgroup,\n+                            &container_prefix };\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Red Hat, Inc.\n+ * Copyright (c) 2022, 2024, Red Hat, Inc.\n@@ -67,0 +67,3 @@\n+    \/*\n+     * Less common cases: Containers\n+     *\/\n@@ -74,1 +77,12 @@\n-        String expectedPath = mountPoint + \"\/some\";\n+        String expectedPath = mountPoint;\n+        assertEquals(expectedPath, ctrl.path());\n+    }\n+\n+    @Test\n+    public void testCgPathPrefixRoot() {\n+        String root = \"\/a\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/memory\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        String cgroupPath = \"\/a\/b\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint;\n@@ -78,0 +92,10 @@\n+    @Test\n+    public void testCgPathFallbackToMountPoint() {\n+        String root = \"\/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/cpu,cpuacct\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        String cgroupPath = \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint;\n+        assertEquals(expectedPath, ctrl.path());\n+    }\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Red Hat Inc.\n+ * Copyright (c) 2020, 2024, Red Hat Inc.\n@@ -47,0 +47,1 @@\n+import jdk.internal.platform.cgroupv1.CgroupV1SubsystemController;\n@@ -78,0 +79,1 @@\n+    private Path cgroupv1MntInfoNonTrivialRoot;\n@@ -80,0 +82,1 @@\n+    private Path cgroupv1SelfNonTrivialRoot;\n@@ -178,0 +181,1 @@\n+    private String mntInfoNonTrivialRoot = \"2207 2196 0:43 \/system.slice\/garden.service\/garden\/good\/2f57368b-0eda-4e52-64d8-af5c \/sys\/fs\/cgroup\/cpu,cpuacct ro,nosuid,nodev,noexec,relatime master:25 - cgroup cgroup rw,cpu,cpuacct\\n\";\n@@ -233,0 +237,1 @@\n+    private String cgroupv1SelfNTRoot = \"11:cpu,cpuacct:\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\\n\";\n@@ -297,0 +302,3 @@\n+            cgroupv1MntInfoNonTrivialRoot = Paths.get(existingDirectory.toString(), \"mountinfo_nt_root\");\n+            Files.writeString(cgroupv1MntInfoNonTrivialRoot, mntInfoNonTrivialRoot);\n+\n@@ -303,0 +311,3 @@\n+            cgroupv1SelfNonTrivialRoot = Paths.get(existingDirectory.toString(), \"self_nt_root_cgv1\");\n+            Files.writeString(cgroupv1SelfNonTrivialRoot, cgroupv1SelfNTRoot);\n+\n@@ -452,0 +463,21 @@\n+    @Test\n+    public void testMountPrefixCgroupsV1() throws IOException {\n+        String cgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n+        String mountInfo = cgroupv1MntInfoNonTrivialRoot.toString();\n+        String selfCgroup = cgroupv1SelfNonTrivialRoot.toString();\n+        Optional<CgroupTypeResult> result = CgroupSubsystemFactory.determineType(mountInfo, cgroups, selfCgroup);\n+\n+        assertTrue(\"Expected non-empty cgroup result\", result.isPresent());\n+        CgroupTypeResult res = result.get();\n+        CgroupInfo cpuInfo = res.getInfos().get(\"cpu\");\n+        assertEquals(cpuInfo.getCgroupPath(), \"\/system.slice\/garden.service\/garden\/bad\/2f57368b-0eda-4e52-64d8-af5c\");\n+        String expectedMountPoint = \"\/sys\/fs\/cgroup\/cpu,cpuacct\";\n+        assertEquals(expectedMountPoint, cpuInfo.getMountPoint());\n+        CgroupV1SubsystemController cgroupv1MemoryController = new CgroupV1SubsystemController(cpuInfo.getMountRoot(), cpuInfo.getMountPoint());\n+        cgroupv1MemoryController.setPath(cpuInfo.getCgroupPath());\n+        String actualPath = cgroupv1MemoryController.path();\n+        assertNotNull(\"Controller path should not have been null\", actualPath);\n+        String expectedPath = expectedMountPoint;\n+        assertEquals(\"Should be equal to the mount point path\", expectedPath, actualPath);\n+    }\n+\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}