{"files":[{"patch":"@@ -52,0 +52,6 @@\n+  assert(mem->cgroup_path() != nullptr, \"invariant\");\n+  if (strstr(mem->cgroup_path(), \"..\/\") != nullptr) {\n+    mem->set_subsystem_path(\"\/\");\n+    log_warning(os, container)(\"Cgroup memory controller path includes '..\/', detected limits won't be accurate\");\n+    return;\n+  }\n@@ -57,1 +63,0 @@\n-  assert(mem->cgroup_path() != nullptr, \"invariant\");\n@@ -109,0 +114,6 @@\n+  assert(cpu->cgroup_path() != nullptr, \"invariant\");\n+  if (strstr(cpu->cgroup_path(), \"..\/\") != nullptr) {\n+    cpu->set_subsystem_path(\"\/\");\n+    log_warning(os, container)(\"Cgroup cpu controller path includes '..\/', detected limits won't be accurate\");\n+    return;\n+  }\n@@ -114,1 +125,0 @@\n-  assert(cpu->cgroup_path() != nullptr, \"invariant\");\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,5 +56,1 @@\n-        if (strstr(cgroup_path, \"..\/\") == nullptr) {\n-          ss.print_raw(cgroup_path);\n-        } else {\n-          log_warning(os, container)(\"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n-        }\n+        ss.print_raw(cgroup_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -295,0 +295,4 @@\n+  if (_cgroup_path != nullptr) {\n+    os::free(_cgroup_path);\n+  }\n+  _cgroup_path = os::strdup(cgroup_path);\n@@ -318,5 +322,1 @@\n-    if (strstr(cgroup_path, \"..\/\") == nullptr) {\n-      ss.print_raw(cgroup_path);\n-    } else {\n-      log_warning(os, container)(\"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n-    }\n+    ss.print_raw(cgroup_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,6 +54,1 @@\n-                    if (cgroupPath.indexOf(\"..\/\") == -1) {\n-                        path += cgroupPath;\n-                    } else {\n-                        System.getLogger(\"jdk.internal.platform\").log(Level.WARNING,\n-                                \"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n-                    }\n+                    path += cgroupPath;\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.System.Logger.Level;\n@@ -39,7 +38,1 @@\n-        if (cgroupPath.indexOf(\"..\/\") == -1) {\n-            this.path = Paths.get(mountPath, cgroupPath).toString();\n-        } else {\n-            this.path = mountPath;\n-            System.getLogger(\"jdk.internal.platform\").log(Level.WARNING,\n-                    \"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n-        }\n+        this.path = Paths.get(mountPath, cgroupPath).toString();\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2SubsystemController.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cgroupUtil_linux.hpp\"\n@@ -456,0 +457,66 @@\n+TEST(cgroupTest, set_cgroupv1_subsystem_path_adjusted) {\n+  TestCase memory = {\n+    \"\/sys\/fs\/cgroup\/memory\", \/\/ mount_path\n+    \"\/\",                     \/\/ root_path\n+    \"..\/test1\",              \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\"  \/\/ expected_path\n+  };\n+  TestCase cpu = {\n+    \"\/sys\/fs\/cgroup\/cpu\", \/\/ mount_path\n+    \"\/\",                  \/\/ root_path\n+    \"..\/..\/test2\",        \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/cpu\"  \/\/ expected_path\n+  };\n+  CgroupCpuController* ccc = new CgroupV1CpuController(CgroupV1Controller((char*)cpu.root_path,\n+                                                                          (char*)cpu.mount_path,\n+                                                                          true \/* read-only mount *\/));\n+  ccc->set_subsystem_path((char*)cpu.cgroup_path);\n+  EXPECT_TRUE(ccc->needs_hierarchy_adjustment());\n+\n+  CgroupUtil::adjust_controller(ccc);\n+  ASSERT_STREQ(cpu.expected_path, ccc->subsystem_path());\n+  EXPECT_FALSE(ccc->needs_hierarchy_adjustment());\n+\n+  CgroupMemoryController* cmc = new CgroupV1MemoryController(CgroupV1Controller((char*)memory.root_path,\n+                                                                                (char*)memory.mount_path,\n+                                                                                true \/* read-only mount *\/));\n+  cmc->set_subsystem_path((char*)memory.cgroup_path);\n+  EXPECT_TRUE(cmc->needs_hierarchy_adjustment());\n+\n+  CgroupUtil::adjust_controller(cmc);\n+  ASSERT_STREQ(memory.expected_path, cmc->subsystem_path());\n+  EXPECT_FALSE(cmc->needs_hierarchy_adjustment());\n+}\n+\n+TEST(cgroupTest, set_cgroupv2_subsystem_path_adjusted) {\n+  TestCase memory = {\n+    \"\/sys\/fs\/cgroup\", \/\/ mount_path\n+    \"\/\",              \/\/ root_path\n+    \"..\/test1\",       \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\"  \/\/ expected_path\n+  };\n+  TestCase cpu = {\n+    \"\/sys\/fs\/cgroup\", \/\/ mount_path\n+    \"\/\",              \/\/ root_path\n+    \"..\/..\/test2\",    \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\"  \/\/ expected_path\n+  };\n+  CgroupCpuController* ccc = new CgroupV2CpuController(CgroupV2Controller((char*)cpu.mount_path,\n+                                                                          (char*)cpu.cgroup_path,\n+                                                                          true \/* read-only mount *\/));\n+  EXPECT_TRUE(ccc->needs_hierarchy_adjustment());\n+\n+  CgroupUtil::adjust_controller(ccc);\n+  ASSERT_STREQ(cpu.expected_path, ccc->subsystem_path());\n+  EXPECT_FALSE(ccc->needs_hierarchy_adjustment());\n+\n+  CgroupMemoryController* cmc = new CgroupV2MemoryController(CgroupV2Controller((char*)memory.mount_path,\n+                                                                                (char*)memory.cgroup_path,\n+                                                                                true \/* read-only mount *\/));\n+  EXPECT_TRUE(cmc->needs_hierarchy_adjustment());\n+\n+  CgroupUtil::adjust_controller(cmc);\n+  ASSERT_STREQ(memory.expected_path, cmc->subsystem_path());\n+  EXPECT_FALSE(cmc->needs_hierarchy_adjustment());\n+}\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}