{"files":[{"patch":"@@ -65,6 +65,2 @@\n-  jlong lowest_limit = phys_mem;\n-  if (limit > 0 && limit < lowest_limit) {\n-    lowest_limit = limit;\n-    os::free(limit_cg_path); \/\/ handles nullptr\n-    limit_cg_path = os::strdup(cg_path);\n-  }\n+  jlong lowest_limit = limit < 0 ? phys_mem : limit;\n+  julong orig_limit = ((julong)lowest_limit) != phys_mem ? lowest_limit : phys_mem;\n@@ -91,1 +87,1 @@\n-  if ((julong)lowest_limit != phys_mem) {\n+  if ((julong)lowest_limit != orig_limit) {\n@@ -101,0 +97,1 @@\n+    log_trace(os, container)(\"Lowest limit was: \" JLONG_FORMAT, lowest_limit);\n@@ -124,1 +121,2 @@\n-  int lowest_limit = host_cpus;\n+  int lowest_limit = cpus < host_cpus ? cpus: host_cpus;\n+  int orig_limit = lowest_limit != host_cpus ? lowest_limit : host_cpus;\n@@ -126,5 +124,0 @@\n-  if (cpus != host_cpus && cpus < lowest_limit) {\n-    lowest_limit = cpus;\n-    os::free(limit_cg_path); \/\/ handles nullptr\n-    limit_cg_path = os::strdup(cg_path);\n-  }\n@@ -151,1 +144,1 @@\n-  if (lowest_limit != host_cpus) {\n+  if (lowest_limit != orig_limit) {\n@@ -161,0 +154,1 @@\n+    log_trace(os, container)(\"Lowest limit was: %d\", lowest_limit);\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -56,4 +56,4 @@\n-        ss.print_raw(cgroup_path);\n-        if (strstr((char*)cgroup_path, \"..\/\") != nullptr) {\n-          log_warning(os, container)(\"Cgroup v1 path at [%s] is [%s], cgroup limits can be wrong.\",\n-            _mount_point, cgroup_path);\n+        if (strstr(cgroup_path, \"..\/\") == nullptr) {\n+          ss.print_raw(cgroup_path);\n+        } else {\n+          log_warning(os, container)(\"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -318,4 +318,4 @@\n-    ss.print_raw(cgroup_path);\n-    if (strstr((char*)cgroup_path, \"..\/\") != nullptr) {\n-      log_warning(os, container)(\"Cgroup v2 path at [%s] is [%s], cgroup limits can be wrong.\",\n-        mount_path, cgroup_path);\n+    if (strstr(cgroup_path, \"..\/\") == nullptr) {\n+      ss.print_raw(cgroup_path);\n+    } else {\n+      log_warning(os, container)(\"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.security.PrivilegedAction;\n@@ -80,0 +81,6 @@\n+    @SuppressWarnings(\"removal\")\n+    public static boolean isDirectory(Path path) {\n+        PrivilegedAction<Boolean> pa = () -> Files.isDirectory(path);\n+        return AccessController.doPrivileged(pa);\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupUtil.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -31,0 +32,1 @@\n+import jdk.internal.platform.CgroupUtil;\n@@ -52,5 +54,5 @@\n-                    path += cgroupPath;\n-                    if (cgroupPath.indexOf(\"..\/\") != -1) {\n-                        System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n-                                \"Cgroup v1 path at [%s] is [%s], cgroup limits can be wrong.\",\n-                                mountPoint, cgroupPath));\n+                    if (cgroupPath.indexOf(\"..\/\") == -1) {\n+                        path += cgroupPath;\n+                    } else {\n+                        System.getLogger(\"jdk.internal.platform\").log(Level.WARNING,\n+                                \"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n@@ -62,1 +64,1 @@\n-                    if (!cgroupPath.equals(\"\/\")) {\n+                    if (!cgroupPath.equals(\"\") && !cgroupPath.equals(\"\/\")) {\n@@ -64,2 +66,14 @@\n-                        \/\/ Rely on path adjustment that determines the actual suffix.\n-                        path += cgroupPath;\n+                        Path cgp = Path.of(cgroupPath);\n+                        int nameCount = cgp.getNameCount();\n+                        for (int i=0; i<nameCount; ++i) {\n+                            Path dir = Path.of(mountPoint, cgp.toString());\n+                            if (CgroupUtil.isDirectory(dir)) {\n+                                path = dir.toString();\n+                                if (i > 0) {\n+                                    System.getLogger(\"jdk.internal.platform\").log(Level.DEBUG, String.format(\n+                                            \"Cgroup v1 path reduced to: %s.\", cgp));\n+                                }\n+                                break;\n+                            }\n+                            cgp = (cgp.getNameCount() > 1) ? cgp.subpath(1, cgp.getNameCount()) : Path.of(\"\");\n+                        }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -39,5 +39,6 @@\n-        this.path = Paths.get(mountPath, cgroupPath).toString();\n-        if (cgroupPath.indexOf(\"..\/\") != -1) {\n-            System.getLogger(\"jdk.internal.platform\").log(Level.WARNING, String.format(\n-                    \"Cgroup v2 path at [%s] is [%s], cgroup limits can be wrong.\",\n-                    mountPath, cgroupPath));\n+        if (cgroupPath.indexOf(\"..\/\") == -1) {\n+            this.path = Paths.get(mountPath, cgroupPath).toString();\n+        } else {\n+            this.path = mountPath;\n+            System.getLogger(\"jdk.internal.platform\").log(Level.WARNING,\n+                    \"Cgroup cpu\/memory controller path includes '..\/', detected limits won't be accurate\");\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2SubsystemController.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -443,7 +443,1 @@\n-  TestCase container_prefix = {\n-    \"\/sys\/fs\/cgroup\/memory\",    \/\/ mount_path\n-    \"\/a\",                       \/\/ root_path\n-    \"\/a\/b\",                     \/\/ cgroup_path\n-    \"\/sys\/fs\/cgroup\/memory\/a\/b\" \/\/ expected_path\n-  };\n-  int length = 4;\n+  int length = 3;\n@@ -452,2 +446,1 @@\n-                            &container_moving_cgroup,\n-                            &container_prefix };\n+                            &container_moving_cgroup };\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @build jdk.test.whitebox.WhiteBox CheckOperatingSystemMXBean\n+ * @build jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithSubgroups.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,12 +77,1 @@\n-        String expectedPath = mountPoint + cgroupPath;\n-        assertEquals(expectedPath, ctrl.path());\n-    }\n-\n-    @Test\n-    public void testCgPathPrefixRoot() {\n-        String root = \"\/a\";\n-        String mountPoint = \"\/sys\/fs\/cgroup\/memory\";\n-        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n-        String cgroupPath = \"\/a\/b\";\n-        ctrl.setPath(cgroupPath);\n-        String expectedPath = mountPoint + cgroupPath;\n+        String expectedPath = mountPoint;\n@@ -93,1 +82,1 @@\n-    public void testCgPathFallbackToMountPoint() {\n+    public void testCgPathToMovedPath() {\n@@ -99,1 +88,1 @@\n-        String expectedPath = mountPoint + cgroupPath;\n+        String expectedPath = mountPoint;\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -479,2 +479,2 @@\n-        assertNotNull(\"Controller path should not have been null\", actualPath);\n-        String expectedPath = expectedMountPoint + cpuInfo.getCgroupPath();\n+        assertNotNull(actualPath);\n+        String expectedPath = expectedMountPoint;\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.platform.Metrics;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerfileConfig;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+\n+import java.util.ArrayList;\n+\n+\/*\n+ * @test\n+ * @bug 8343191\n+ * @key cgroups\n+ * @summary Cgroup v1 subsystem fails to set subsystem path\n+ * @requires container.support\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.platform\n+ * @build MetricsMemoryTester\n+ * @run main TestDockerMemoryMetricsSubgroup\n+ *\/\n+\n+public class TestDockerMemoryMetricsSubgroup {\n+    private static final String imageName =\n+            DockerfileConfig.getBaseImageName() + \":\" +\n+            DockerfileConfig.getBaseImageVersion();\n+\n+    public static void main(String[] args) throws Exception {\n+        Metrics metrics = Metrics.systemMetrics();\n+        if (metrics == null) {\n+            System.out.println(\"Cgroup not configured.\");\n+            return;\n+        }\n+        if (!DockerTestUtils.canTestDocker()) {\n+            System.out.println(\"Unable to run docker tests.\");\n+            return;\n+        }\n+        if (\"cgroupv1\".equals(metrics.getProvider())) {\n+            testMemoryLimitSubgroupV1(\"200m\", \"400m\", false);\n+            testMemoryLimitSubgroupV1(\"500m\", \"1G\", false);\n+            testMemoryLimitSubgroupV1(\"200m\", \"400m\", true);\n+            testMemoryLimitSubgroupV1(\"500m\", \"1G\", true);\n+        } else if (\"cgroupv2\".equals(metrics.getProvider())) {\n+            testMemoryLimitSubgroupV2(\"200m\", \"400m\", false);\n+            testMemoryLimitSubgroupV2(\"500m\", \"1G\", false);\n+            testMemoryLimitSubgroupV2(\"200m\", \"400m\", true);\n+            testMemoryLimitSubgroupV2(\"500m\", \"1G\", true);\n+        } else {\n+            System.out.println(\"Metrics are from neither cgroup v1 nor v2, skipped for now.\");\n+        }\n+    }\n+\n+    private static void testMemoryLimitSubgroupV1(String innerSize, String outerGroupMemorySize, boolean privateNamespace) throws Exception {\n+        Common.logNewTestCase(\"testMemoryLimitSubgroup, innerSize = \" + innerSize);\n+        DockerRunOptions opts =\n+            new DockerRunOptions(imageName, \"sh\", \"-c\");\n+        opts.javaOpts = new ArrayList<>();\n+        opts.appendTestJavaOptions = false;\n+        opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\")\n+            .addDockerOpts(\"--volume\", Utils.TEST_JDK + \":\/jdk\")\n+            .addDockerOpts(\"--privileged\")\n+            .addDockerOpts(\"--cgroupns=\" + (privateNamespace ? \"private\" : \"host\"))\n+            .addDockerOpts(\"--memory\", outerGroupMemorySize);\n+        opts.addClassOptions(\"mkdir -p \/sys\/fs\/cgroup\/memory\/test ; \" +\n+            \"echo \" + innerSize + \" > \/sys\/fs\/cgroup\/memory\/test\/memory.limit_in_bytes ; \" +\n+            \"echo $$ > \/sys\/fs\/cgroup\/memory\/test\/cgroup.procs ; \" +\n+            \"\/jdk\/bin\/java -cp \/test-classes\/ \" +\n+            \"--add-exports java.base\/jdk.internal.platform=ALL-UNNAMED \" +\n+            \"MetricsMemoryTester memory \" + innerSize);\n+\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0).shouldContain(\"TEST PASSED!!!\");\n+    }\n+\n+    private static void testMemoryLimitSubgroupV2(String innerSize, String outerGroupMemorySize, boolean privateNamespace) throws Exception {\n+        Common.logNewTestCase(\"testMemoryLimitSubgroup, innerSize = \" + innerSize);\n+        DockerRunOptions opts =\n+            new DockerRunOptions(imageName, \"sh\", \"-c\");\n+        opts.javaOpts = new ArrayList<>();\n+        opts.appendTestJavaOptions = false;\n+        opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\")\n+            .addDockerOpts(\"--volume\", Utils.TEST_JDK + \":\/jdk\")\n+            .addDockerOpts(\"--privileged\")\n+            .addDockerOpts(\"--cgroupns=\" + (privateNamespace ? \"private\" : \"host\"))\n+            .addDockerOpts(\"--memory\", outerGroupMemorySize);\n+        opts.addClassOptions(\"mkdir -p \/sys\/fs\/cgroup\/memory\/test ; \" +\n+            \"echo $$ > \/sys\/fs\/cgroup\/memory\/test\/cgroup.procs ; \" +\n+            \"echo '+memory' > \/sys\/fs\/cgroup\/cgroup.subtree_control ; \" +\n+            \"echo '+memory' > \/sys\/fs\/cgroup\/memory\/cgroup.subtree_control ; \" +\n+            \"echo \" + innerSize + \" > \/sys\/fs\/cgroup\/memory\/test\/memory.max ; \" +\n+            \"\/jdk\/bin\/java -cp \/test-classes\/ \" +\n+            \"--add-exports java.base\/jdk.internal.platform=ALL-UNNAMED \" +\n+            \"MetricsMemoryTester memory \" + innerSize);\n+\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0).shouldContain(\"TEST PASSED!!!\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetricsSubgroup.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}