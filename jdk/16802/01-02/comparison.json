{"files":[{"patch":"@@ -1679,1 +1679,1 @@\n-static void float16_to_float_nan_path(C2_MacroAssembler& masm, C2GeneralStub<FloatRegister, Register, Register>& stub) {\n+static void float16_to_float_slow_path(C2_MacroAssembler& masm, C2GeneralStub<FloatRegister, Register, Register>& stub) {\n@@ -1686,0 +1686,3 @@\n+  \/\/ following instructions mainly focus on NaN, as riscv does not handle\n+  \/\/ NaN well with fcvt, but the code also works for Inf at the same time.\n+\n@@ -1700,1 +1703,8 @@\n-  auto stub = C2CodeStub::make<FloatRegister, Register, Register>(dst, src, tmp, 20, float16_to_float_nan_path);\n+  auto stub = C2CodeStub::make<FloatRegister, Register, Register>(dst, src, tmp, 20, float16_to_float_slow_path);\n+\n+  \/\/ in riscv, NaN needs a special process as fcvt does not work in that case.\n+  \/\/ in riscv, Inf does not need a special process as fcvt can handle it correctly.\n+  \/\/ but we consider to get the slow path to process NaN and Inf at the same time,\n+  \/\/ as both of them are rare cases, and if we try to get the slow path to handle\n+  \/\/ only NaN case it would sacrifise the performance for normal cases,\n+  \/\/ i.e. non-NaN and non-Inf cases.\n@@ -1702,1 +1712,1 @@\n-  \/\/ check whether it's a NaN.\n+  \/\/ check whether it's a NaN or +\/- Inf.\n@@ -1705,1 +1715,1 @@\n-  \/\/ jump to stub processing NaN case\n+  \/\/ jump to stub processing NaN and Inf cases.\n@@ -1708,1 +1718,1 @@\n-  \/\/ non-NaN cases, just use built-in instructions.\n+  \/\/ non-NaN or non-Inf cases, just use built-in instructions.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -8288,1 +8288,1 @@\n-  ins_pipe(fp_f2i);\n+  ins_pipe(pipe_slow);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}