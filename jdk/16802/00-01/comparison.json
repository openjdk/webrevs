{"files":[{"patch":"@@ -1679,0 +1679,19 @@\n+static void float16_to_float_nan_path(C2_MacroAssembler& masm, C2GeneralStub<FloatRegister, Register, Register>& stub) {\n+#define __ masm.\n+  FloatRegister dst = stub.data<0>();\n+  Register src = stub.data<1>();\n+  Register tmp = stub.data<2>();\n+  __ bind(stub.entry());\n+\n+  \/\/ construct a NaN in 32 bits from the NaN in 16 bits,\n+  \/\/ we need the payloads of non-canonical NaNs to be preserved.\n+  __ mv(tmp, 0x7f800000);\n+  \/\/ sign-bit was already set via sign-extension if necessary.\n+  __ slli(t0, src, 13);\n+  __ orr(tmp, t0, tmp);\n+  __ fmv_w_x(dst, tmp);\n+\n+  __ j(stub.continuation());\n+#undef __\n+}\n+\n@@ -1681,1 +1700,1 @@\n-  Label nan_case, done;\n+  auto stub = C2CodeStub::make<FloatRegister, Register, Register>(dst, src, tmp, 20, float16_to_float_nan_path);\n@@ -1686,1 +1705,2 @@\n-  beq(t0, tmp, nan_case);\n+  \/\/ jump to stub processing NaN case\n+  beq(t0, tmp, stub->entry());\n@@ -1691,10 +1711,0 @@\n-  j(done);\n-\n-  \/\/ construct a NaN in 32 bits from the NaN in 16 bits,\n-  \/\/ we need the payloads of non-canonical NaNs to be preserved.\n-  bind(nan_case);\n-  mv(tmp, 0x7f800000);\n-  \/\/ sign-bit was already set via sign-extension if necessary.\n-  slli(t0, src, 13);\n-  orr(tmp, t0, tmp);\n-  fmv_w_x(dst, tmp);\n@@ -1702,1 +1712,1 @@\n-  bind(done);\n+  bind(stub->continuation());\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"}]}