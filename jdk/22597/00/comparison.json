{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include \"utilities\/ostream.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -33,0 +33,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -1030,8 +1031,0 @@\n-  \/\/ FIXME - some random stuff that was in os_windows.hpp\n-#ifdef _WINDOWS\n-  \/\/ strtok_s is the Windows thread-safe equivalent of POSIX strtok_r\n-# define strtok_r strtok_s\n-# define S_ISCHR(mode)   (((mode) & _S_IFCHR) == _S_IFCHR)\n-# define S_ISFIFO(mode)  (((mode) & _S_IFIFO) == _S_IFIFO)\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+# include <sys\/stat.h>\n@@ -83,0 +84,12 @@\n+\/\/ VS doesn't provide strtok_r, which is a POSIX function.  Instead, it\n+\/\/ provides the same function under the name strtok_s.  Note that this is\n+\/\/ *not* the same as the C99 Annex K strtok_s.  VS provides that function\n+\/\/ under the name strtok_s_l.  Make strtok_r a synonym so we can use that name\n+\/\/ in shared code.\n+const auto strtok_r = strtok_s;\n+\n+\/\/ VS doesn't provide POSIX macros S_ISFIFO or S_IFIFO.  It doesn't even\n+\/\/ provide _S_ISFIFO, per its usual naming convention for POSIX stuff.  But it\n+\/\/ does provide _S_IFIFO, so we can roll our own S_ISFIFO.\n+#define S_ISFIFO(mode) (((mode) & _S_IFIFO) == _S_IFIFO)\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}