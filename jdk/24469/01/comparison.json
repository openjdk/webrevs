{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,4 @@\n+ * @apiNote\n+ * {@link Writer#of(StringBuilder)} provides a method to write into an existing\n+ * {@link StringBuilder} that may be more efficient than {@code StringWriter}.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringWriter.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,0 +147,91 @@\n+    \/**\n+     * Returns a {@code Writer} that writes characters into a\n+     * {@code StringBuilder}. The writer is initially open and writing appends\n+     * after the last character in the string builder.\n+     *\n+     * <p> The resulting writer is not safe for use by multiple\n+     * concurrent threads. If the writer is to be used by more than one\n+     * thread it should be controlled by appropriate synchronization.\n+     *\n+     * <p> If the string builder changes while the writer is open, e.g. the length\n+     * changes, the behavior is undefined.\n+     *\n+     * @param sb {@code StringBuilder} consuming the character stream.\n+     * @return a {@code Writer} which writes characters into {@code sb}.\n+     * @throws NullPointerException if {@code sb} is {@code null}\n+     *\n+     * @since 25\n+     *\/\n+    public static Writer of(final StringBuilder sb) {\n+        Objects.requireNonNull(sb);\n+\n+        return new Writer() {\n+            private boolean isClosed;\n+\n+            \/** Check to make sure that the stream has not been closed *\/\n+            private void ensureOpen() throws IOException {\n+                if (isClosed)\n+                    throw new IOException(\"Stream closed\");\n+            }\n+\n+            @Override\n+            public void write(int c) throws IOException {\n+                ensureOpen();\n+                sb.append((char) c);\n+            }\n+\n+            @Override\n+            public void write(char[] cbuf, int off, int len) throws IOException {\n+                ensureOpen();\n+                Objects.checkFromIndexSize(off, len, cbuf.length);\n+                if (len == 0) {\n+                    return;\n+                }\n+                sb.append(cbuf, off, len);\n+            }\n+\n+            @Override\n+            public void write(String str) throws IOException {\n+                ensureOpen();\n+                sb.append(str);\n+            }\n+\n+            @Override\n+            public void write(String str, int off, int len) throws IOException {\n+                ensureOpen();\n+                sb.append(str, off, off + len);\n+            }\n+\n+            @Override\n+            public Writer append(CharSequence csq) throws IOException {\n+                ensureOpen();\n+                sb.append(csq);\n+                return this;\n+            }\n+\n+            @Override\n+            public Writer append(CharSequence csq, int start, int end) throws IOException {\n+                ensureOpen();\n+                sb.append(csq, start, end);\n+                return this;\n+            }\n+\n+            @Override\n+            public Writer append(char c) throws IOException {\n+                ensureOpen();\n+                sb.append(c);\n+                return this;\n+            }\n+\n+            @Override\n+            public void flush() throws IOException {\n+                ensureOpen();\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                isClosed = true;\n+            }\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Writer.java","additions":92,"deletions":1,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.Writer;\n+import java.io.StringWriter;\n+import java.io.IOException;\n+import java.util.function.Supplier;\n+\n+import org.testng.annotations.*;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 8353795\n+ * @summary Check for expected behavior of Writer.of().\n+ * @run testng Of\n+ *\/\n+public class Of {\n+    private static final String CONTENT = \"Some Writer Test\";\n+\n+    private static record Config(String id, Writer writer, Supplier<String> spy) {};\n+\n+    \/*\n+     * Writers to be tested.\n+     *\/\n+    @DataProvider\n+    public static Config[] writers() {\n+        var sw = new StringWriter();\n+        var sbld = new StringBuilder();\n+        var w = new Writer() {\n+            private String s = \"\";\n+            private boolean isClosed;\n+\n+            private void ensureOpen() throws IOException {\n+                if (isClosed)\n+                    throw new IOException(\"Stream closed\");\n+            }\n+\n+            @Override\n+            public Writer append(char c) throws IOException {\n+                ensureOpen();\n+                s += c;\n+                return this;\n+            }\n+\n+            @Override\n+            public Writer append(CharSequence csq) throws IOException {\n+                ensureOpen();\n+                s += String.valueOf(csq);\n+                return this;\n+            }\n+\n+            @Override\n+            public Writer append(CharSequence csq, int start, int end)\n+                    throws IOException {\n+                ensureOpen();\n+                s += String.valueOf(csq).subSequence(start, end);\n+                return this;\n+            }\n+\n+            @Override\n+            public void write(char[] cbuf, int off, int len) throws IOException {\n+                ensureOpen();\n+                s += new String(cbuf, off, len);\n+            }\n+\n+            @Override\n+            public void flush() throws IOException {\n+                ensureOpen();\n+            }\n+\n+            @Override\n+            public void close() throws IOException {\n+                isClosed = true;\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return s;\n+            }\n+        };\n+        return new Config[] {\n+            new Config(\"StringWriter\", sw, sw::toString),\n+            new Config(\"StringBuilder\", Writer.of(sbld), sbld::toString),\n+            new Config(\"Custom Writer\", w, w::toString),\n+        };\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendChar(Config config) throws IOException {\n+        for (int i = 0; i < CONTENT.length(); i++)\n+            config.writer.append(CONTENT.charAt(i));\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendCharSequence(Config config) throws IOException {\n+        config.writer.append((CharSequence) CONTENT);\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendCompleteSubCharSequence(Config config) throws IOException {\n+        config.writer.append((CharSequence) CONTENT, 0, CONTENT.length());\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendPartialSubCharSequence(Config config) throws IOException {\n+        config.writer.append((CharSequence) CONTENT, 1, CONTENT.length() - 1);\n+        assertEquals(config.spy.get(), CONTENT.substring(1, CONTENT.length() - 1));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteCharArray(Config config) throws IOException {\n+        config.writer.write(CONTENT.toCharArray());\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteCompleteSubCharArray(Config config) throws IOException {\n+        config.writer.write(CONTENT.toCharArray(), 0, CONTENT.length());\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWritePartialSubCharArray(Config config) throws IOException {\n+        config.writer.write(CONTENT.toCharArray(), 1, CONTENT.length() - 2);\n+        assertEquals(config.spy.get(), CONTENT.substring(1, CONTENT.length() - 1));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteChar(Config config) throws IOException {\n+        for (int i = 0; i < CONTENT.length(); i++)\n+            config.writer.write(CONTENT.charAt(i));\n+        assertEquals(config.spy.get(), CONTENT);\n+}\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteString(Config config) throws IOException {\n+        config.writer.write(CONTENT);\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteCompleteSubString(Config config) throws IOException {\n+        config.writer.write(CONTENT, 0, CONTENT.length());\n+        assertEquals(config.spy.get(), CONTENT);\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWritePartialSubString(Config config) throws IOException {\n+        config.writer.write(CONTENT, 1, CONTENT.length() - 2);\n+        assertEquals(config.spy.get(), CONTENT.substring(1, CONTENT.length() - 1));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendCharClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testAppendChar(config);\n+        else\n+            assertThrows(IOException.class, () -> config.writer.append('x'));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendCharSequenceClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testAppendCharSequence(config);\n+        else\n+            assertThrows(IOException.class, () ->\n+                    config.writer.append((CharSequence) CONTENT));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testAppendSubCharSequenceClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testAppendCompleteSubCharSequence(config);\n+        else\n+            assertThrows(IOException.class, () ->\n+                    config.writer.append((CharSequence) CONTENT, 0, CONTENT.length()));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteCharArrayClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testWriteCharArray(config);\n+        else\n+            assertThrows(IOException.class, () ->\n+                    config.writer.write(CONTENT.toCharArray()));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteSubCharArrayClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testWriteCompleteSubCharArray(config);\n+        else\n+            assertThrows(IOException.class, () ->\n+                    config.writer.write(CONTENT.toCharArray(), 0, CONTENT.length()));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteCharClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testWriteChar(config);\n+        else\n+            assertThrows(IOException.class, () -> config.writer.write('x'));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteStringClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testWriteString(config);\n+        else\n+            assertThrows(IOException.class, () -> config.writer.write(CONTENT));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testWriteSubStringClosed(Config config) throws IOException {\n+        config.writer.close();\n+\n+        \/\/ StringWriter intentionally never throws exceptions\n+        if (config.writer instanceof StringWriter)\n+            testWriteCompleteSubString(config);\n+        else\n+            assertThrows(IOException.class, () ->\n+                    config.writer.write(CONTENT, 0, CONTENT.length()));\n+    }\n+\n+    @Test(dataProvider = \"writers\")\n+    public void testClosedClosed(Config config) throws IOException {\n+        config.writer.close();\n+        config.writer.close();\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Writer\/Of.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"}]}