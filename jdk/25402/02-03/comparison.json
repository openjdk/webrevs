{"files":[{"patch":"@@ -2130,2 +2130,2 @@\n-    const char* name = method()->name()->as_C_string();\n-    const char* is_jvmci = \"\";\n+    LogStream ls(lt);\n+    const char* method_name = method()->name()->as_C_string();\n@@ -2134,12 +2134,4 @@\n-#if INCLUDE_JVMCI\n-    if (is_compiled_by_jvmci()) {\n-      if (jvmci_name() != nullptr) {\n-        name = jvmci_name();\n-      }\n-      is_jvmci = \"JVMCI compiled \";\n-    }\n-#endif\n-    log_debug(codecache)(\"Flushing nmethod %3d\/\" INTPTR_FORMAT \", level=%d, osr=%d, cold=%d, epoch=\" UINT64_FORMAT \", cold_count=\" UINT64_FORMAT \". \"\n-                       \"Cache capacity: %zuKb, free space: %zuKb. %smethod %s\",\n-                       _compile_id, p2i(this), _comp_level, is_osr_method(), is_cold(), _gc_epoch, CodeCache::cold_gc_count(),\n-                       codecache_capacity, codecache_free_space, is_jvmci, name);\n+    ls.print(\"Flushing nmethod %6d\/\" INTPTR_FORMAT \", level=%d, osr=%d, cold=%d, epoch=\" UINT64_FORMAT \", cold_count=\" UINT64_FORMAT \". \"\n+              \"Cache capacity: %zuKb, free space: %zuKb. method %s (%s)\",\n+              _compile_id, p2i(this), _comp_level, is_osr_method(), is_cold(), _gc_epoch, CodeCache::cold_gc_count(),\n+              codecache_capacity, codecache_free_space, method_name, compiler_name());\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"}]}