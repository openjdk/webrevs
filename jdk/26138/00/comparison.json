{"files":[{"patch":"@@ -1327,1 +1327,1 @@\n-                case MANDATORY_WARNING -> log.mandatoryWarning(pos, Warnings.ProcMessager(msg.toString()));\n+                case MANDATORY_WARNING -> log.warning(DiagnosticFlag.MANDATORY, pos, Warnings.ProcMessager(msg.toString()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        log.mandatoryWarning(pos,\n+        log.warning(pos,\n@@ -188,2 +188,1 @@\n-            log.mandatoryWarning(null,\n-                    LintWarnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n+            log.warning(LintWarnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            log.mandatoryWarning(pos, warningKey);\n+            log.warning(pos, warningKey);\n@@ -258,1 +258,1 @@\n-            log.mandatoryWarning(pos, warnKey);\n+            log.warning(pos, warnKey);\n@@ -275,1 +275,1 @@\n-            log.mandatoryWarning(pos, warnKey);\n+            log.warning(pos, warnKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1848,1 +1848,1 @@\n-            log.mandatoryNote(null, Notes.CompressedDiags);\n+            log.note(Notes.CompressedDiags);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-                log.mandatoryWarning(pos, Warnings.ProcMessager(msg.toString()));\n+                log.warning(DiagnosticFlag.MANDATORY, pos, Warnings.ProcMessager(msg.toString()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacMessager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1679,0 +1679,1 @@\n+# flags: mandatory\n@@ -1926,1 +1927,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -1932,1 +1933,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -1938,1 +1939,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -1949,1 +1950,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -1961,1 +1962,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -1967,1 +1968,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2367,1 +2368,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2373,1 +2374,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2383,1 +2384,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2391,1 +2392,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2397,1 +2398,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -2796,1 +2797,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -3193,1 +3194,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -3200,1 +3201,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -3304,1 +3305,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -3310,1 +3311,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n@@ -3316,0 +3317,1 @@\n+# flags: mandatory\n@@ -4273,1 +4275,1 @@\n-# flags: aggregate\n+# flags: aggregate, mandatory\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        report(diags.warning(source, null, warningKey));\n+        report(diags.warning(null, source, null, warningKey));\n@@ -173,1 +173,1 @@\n-        report(diags.warning(source, pos, warningKey));\n+        report(diags.warning(null, source, pos, warningKey));\n@@ -178,0 +178,1 @@\n+     *  @param flag   A flag to set on the diagnostic\n@@ -181,2 +182,2 @@\n-    public void warning(int pos, Warning warningKey) {\n-        report(diags.warning(source, wrap(pos), warningKey));\n+    public void warning(DiagnosticFlag flag, DiagnosticPosition pos, Warning warningKey) {\n+        report(diags.warning(flag, source, pos, warningKey));\n@@ -185,1 +186,2 @@\n-    \/** Report a warning.\n+    \/** Report a warning, unless suppressed by the  -nowarn option or the\n+     *  maximum number of warnings has been reached.\n@@ -189,2 +191,2 @@\n-    public void mandatoryWarning(DiagnosticPosition pos, Warning warningKey) {\n-        report(diags.mandatoryWarning(source, pos, warningKey));\n+    public void warning(int pos, Warning warningKey) {\n+        report(diags.warning(null, source, wrap(pos), warningKey));\n@@ -197,1 +199,1 @@\n-        report(diags.note(source, null, noteKey));\n+        report(diags.note(null, source, null, noteKey));\n@@ -204,1 +206,1 @@\n-        report(diags.note(source, pos, noteKey));\n+        report(diags.note(null, source, pos, noteKey));\n@@ -208,0 +210,1 @@\n+     *  @param flag       A flag to set on the diagnostic\n@@ -210,2 +213,2 @@\n-    public void note(int pos, Note noteKey) {\n-        report(diags.note(source, wrap(pos), noteKey));\n+    public void note(DiagnosticFlag flag, DiagnosticPosition pos, Note noteKey) {\n+        report(diags.note(flag, source, pos, noteKey));\n@@ -217,2 +220,2 @@\n-    public void note(JavaFileObject file, Note noteKey) {\n-        report(diags.note(getSource(file), null, noteKey));\n+    public void note(int pos, Note noteKey) {\n+        report(diags.note(null, source, wrap(pos), noteKey));\n@@ -224,2 +227,2 @@\n-    public void mandatoryNote(final JavaFileObject file, Note noteKey) {\n-        report(diags.mandatoryNote(getSource(file), noteKey));\n+    public void note(JavaFileObject file, Note noteKey) {\n+        report(diags.note(null, getSource(file), null, noteKey));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractLog.java","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -119,27 +119,0 @@\n-        \/**\n-         * Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n-         *  @param lc     The lint category for the diagnostic\n-         *  @param source The source of the compilation unit, if any, in which to report the warning.\n-         *  @param pos    The source position at which to report the warning.\n-         *  @param key    The key for the localized warning message.\n-         *  @param args   Fields of the warning message.\n-         *  @see MandatoryWarningHandler\n-         *\/\n-        public JCDiagnostic mandatoryWarning(\n-                LintCategory lc,\n-                DiagnosticSource source, DiagnosticPosition pos, String key, Object... args) {\n-            return mandatoryWarning(source, pos, warningKey(lc, key, args));\n-        }\n-\n-        \/**\n-         * Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n-         *  @param source The source of the compilation unit, if any, in which to report the warning.\n-         *  @param pos    The source position at which to report the warning.\n-         *  @param warningKey    The key for the localized warning message.\n-         *  @see MandatoryWarningHandler\n-         *\/\n-        public JCDiagnostic mandatoryWarning(\n-                DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n-            return create(EnumSet.of(DiagnosticFlag.MANDATORY), source, pos, warningKey);\n-        }\n-\n@@ -157,1 +130,1 @@\n-            return warning(source, pos, warningKey(lc, key, args));\n+            return warning(null, source, pos, warningKey(lc, key, args));\n@@ -162,0 +135,1 @@\n+         *  @param flag   A flag to add to the diagnostic.\n@@ -168,22 +142,2 @@\n-                DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n-            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, warningKey);\n-        }\n-\n-        \/**\n-         * Create a note diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n-         *  @param source The source of the compilation unit, if any, in which to report the warning.\n-         *  @param key    The key for the localized warning message.\n-         *  @param args   Fields of the warning message.\n-         *  @see MandatoryWarningHandler\n-         *\/\n-        public JCDiagnostic mandatoryNote(DiagnosticSource source, String key, Object... args) {\n-            return mandatoryNote(source, noteKey(key, args));\n-        }\n-\n-        \/**\n-         * Create a note diagnostic that will not be hidden by the -nowarn or -Xlint:none options.\n-         *  @param noteKey    The key for the localized note message.\n-         *  @see MandatoryWarningHandler\n-         *\/\n-        public JCDiagnostic mandatoryNote(DiagnosticSource source, Note noteKey) {\n-            return create(EnumSet.of(DiagnosticFlag.MANDATORY), source, null, noteKey);\n+                DiagnosticFlag flag, DiagnosticSource source, DiagnosticPosition pos, Warning warningKey) {\n+            return create(flag != null ? EnumSet.of(flag) : EnumSet.noneOf(DiagnosticFlag.class), source, pos, warningKey);\n@@ -199,1 +153,1 @@\n-            return note(source, pos, noteKey(key, args));\n+            return note(null, source, pos, noteKey(key, args));\n@@ -204,0 +158,1 @@\n+         *  @param flag   A flag to add to the diagnostic.\n@@ -209,2 +164,2 @@\n-                DiagnosticSource source, DiagnosticPosition pos, Note noteKey) {\n-            return create(EnumSet.noneOf(DiagnosticFlag.class), source, pos, noteKey);\n+                DiagnosticFlag flag, DiagnosticSource source, DiagnosticPosition pos, Note noteKey) {\n+            return create(flag != null ? EnumSet.of(flag) : EnumSet.noneOf(DiagnosticFlag.class), source, pos, noteKey);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":8,"deletions":53,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -208,1 +209,1 @@\n-        list.add(log.diags.mandatoryNote(log.getSource(file), new Note(null, \"compiler\", msg, args)));\n+        list.add(log.diags.note(DiagnosticFlag.MANDATORY, log.getSource(file), null, new Note(null, \"compiler\", msg, args)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/WarningAggregator.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}