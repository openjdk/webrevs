{"files":[{"patch":"@@ -454,0 +454,4 @@\n+    if (st->was_truncated()) {\n+      char msg [] = \"\\n(truncated)\\n\";\n+      AixAttachListener::write_fully(this->socket(), msg, strlen(msg));\n+    }\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -421,0 +421,4 @@\n+    if (st->was_truncated()) {\n+      char msg [] = \"\\n(truncated)\\n\";\n+      BsdAttachListener::write_fully(this->socket(), msg, strlen(msg));\n+    }\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -421,0 +421,4 @@\n+    if (st->was_truncated()) {\n+      char msg [] = \"\\n(truncated)\\n\";\n+      LinuxAttachListener::write_fully(this->socket(), msg, strlen(msg));\n+    }\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1892,1 +1892,1 @@\n-  while ((bytes = ::read(fd, buf, sizeof(buf)-1)) > 0) {\n+  while (!st->was_truncated() && (bytes = ::read(fd, buf, sizeof(buf)-1)) > 0) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  while ((malloc_site = malloc_itr.next()) != nullptr) {\n+  while (!output()->was_truncated() && (malloc_site = malloc_itr.next()) != nullptr) {\n@@ -351,1 +351,1 @@\n-  while ((virtual_memory_site = virtual_memory_itr.next()) != nullptr) {\n+  while (!output()->was_truncated() && (virtual_memory_site = virtual_memory_itr.next()) != nullptr) {\n@@ -381,1 +381,1 @@\n-  while ((rgn = itr.next()) != nullptr) {\n+  while (!output()->was_truncated() && (rgn = itr.next()) != nullptr) {\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1213,1 +1213,1 @@\n-           t_list != nullptr; t_list = t_list->next_list()) {\n+          !st->was_truncated() && t_list != nullptr; t_list = t_list->next_list()) {\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1030,4 +1030,4 @@\n-      \/\/ Impose a cap beyond which the buffer cannot grow - a size which\n-      \/\/ in all probability indicates a real error, e.g. faulty printing\n-      \/\/ code looping, while not affecting cases of just-very-large-but-its-normal\n-      \/\/ output.\n+      \/\/ We assume that child classes will override flush() and drain the buffer. In case\n+      \/\/ they don't, or in case bufferedStream is used directly, the buffer will never be\n+      \/\/ drained. In that case, impose a maximum cap beyond which the buffer would never\n+      \/\/ grow. Truncate any output beyond that cap.\n@@ -1036,5 +1036,0 @@\n-        \/\/ In debug VM, assert right away.\n-        assert(false, \"Exceeded max buffer size for this string.\");\n-        \/\/ Release VM: silently truncate. We do this since these kind of errors\n-        \/\/ are both difficult to predict with testing (depending on logging content)\n-        \/\/ and usually not serious enough to kill a production VM for it.\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -134,0 +134,3 @@\n+   \/\/ child classes may truncate output, e.g. in case of internal buffer exhaustion.\n+   virtual bool was_truncated() const { return false; }\n+\n@@ -302,1 +305,3 @@\n-  virtual void write(const char* c, size_t len);\n+  virtual void write(const char* c, size_t len) override;\n+  bool was_truncated() const override { return truncated; }\n+  \/\/ Returns number of characters written, exclusing terminating zero.\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1348,1 +1348,0 @@\n-\n@@ -1416,0 +1415,1 @@\n+  if (st->was_truncated()) return;\n@@ -1436,0 +1436,1 @@\n+  if (st->was_truncated()) return;\n@@ -1442,0 +1443,1 @@\n+  if (st->was_truncated()) return;\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}