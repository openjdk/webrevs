{"files":[{"patch":"@@ -84,0 +84,2 @@\n+        @JEP(number=468, title=\"Derived Record Creation\", status=\"Preview\")\n+        DERIVED_RECORD_CREATION,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -124,1 +126,8 @@\n-    BINDING_VARIABLE;\n+    BINDING_VARIABLE,\n+\n+    \/**\n+     * A local component variable in a derived record creation expression.\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    COMPONENT_LOCAL_VARIABLE;\n@@ -203,1 +212,2 @@\n-     * {@code RESOURCE_VARIABLE}, and {@code BINDING_VARIABLE}.\n+     * {@code RESOURCE_VARIABLE}, {@code BINDING_VARIABLE}, and\n+     * {@code COMPONENT_LOCAL_VARIABLE}\n@@ -212,1 +222,1 @@\n-             BINDING_VARIABLE -> true;\n+             BINDING_VARIABLE, COMPONENT_LOCAL_VARIABLE -> true;\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.SourceVersion;\n+import javax.annotation.processing.SupportedSourceVersion;\n+\n+\/**\n+ * A skeletal visitor for annotation values with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods\n+ * @param <P> the type of the additional parameter to this visitor's methods.\n+ *\n+ * @see <a href=\"AbstractAnnotationValueVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractAnnotationValueVisitor6\n+ * @see AbstractAnnotationValueVisitor7\n+ * @see AbstractAnnotationValueVisitor8\n+ * @see AbstractAnnotationValueVisitor9\n+ * @see AbstractAnnotationValueVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public abstract class AbstractAnnotationValueVisitorPreview<R, P> extends AbstractAnnotationValueVisitor14<R, P> {\n+\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractAnnotationValueVisitorPreview() {\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractAnnotationValueVisitorPreview.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import javax.lang.model.element.RecordComponentElement;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A skeletal visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"AbstractElementVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractElementVisitor6\n+ * @see AbstractElementVisitor7\n+ * @see AbstractElementVisitor8\n+ * @see AbstractElementVisitor9\n+ * @see AbstractElementVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public abstract class AbstractElementVisitorPreview<R, P> extends AbstractElementVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractElementVisitorPreview(){\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractElementVisitorPreview.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A skeletal visitor of types with default behavior appropriate for a\n+ * preview source version.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"AbstractTypeVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see AbstractTypeVisitor6\n+ * @see AbstractTypeVisitor7\n+ * @see AbstractTypeVisitor8\n+ * @see AbstractTypeVisitor9\n+ * @see AbstractTypeVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public abstract class AbstractTypeVisitorPreview<R, P> extends AbstractTypeVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call.\n+     *\/\n+    protected AbstractTypeVisitorPreview() {\n+        super();\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractTypeVisitorPreview.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+\n@@ -267,0 +269,3 @@\n+        case COMPONENT_LOCAL_VARIABLE:\n+            return visitVariableAsComponentLocalVariable(e, p);\n+\n@@ -367,0 +372,16 @@\n+    \/**\n+     * Visits a {@code COMPONENT_LOCAL_VARIABLE} variable element.\n+     *\n+     * @implSpec This implementation calls {@code visitUnknown}.\n+     *\n+     * @param e the element to visit\n+     * @param p a visitor-specified parameter\n+     * @return  the result of {@code visitUnknown}\n+     *\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    public R visitVariableAsComponentLocalVariable(VariableElement e, P p) {\n+        return visitUnknown(e, p);\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitor6.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.lang.model.element.*;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.SourceVersion;\n+\n+\/**\n+ * A visitor of program elements based on their {@linkplain\n+ * ElementKind kind} with default behavior appropriate for a preview\n+ * source version.\n+ *\n+ * For {@linkplain\n+ * Element elements} <code><i>Xyz<\/i><\/code> that may have more than one\n+ * kind, the <code>visit<i>Xyz<\/i><\/code> methods in this class delegate\n+ * to the <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> method corresponding to the\n+ * first argument's kind.  The <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> methods\n+ * call {@link #defaultAction defaultAction}, passing their arguments\n+ * to {@code defaultAction}'s corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"ElementKindVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see ElementKindVisitor6\n+ * @see ElementKindVisitor7\n+ * @see ElementKindVisitor8\n+ * @see ElementKindVisitor9\n+ * @see ElementKindVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class ElementKindVisitorPreview<R, P> extends ElementKindVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected ElementKindVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected ElementKindVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+\n+    \/**\n+     * {@inheritDoc ElementKindVisitor6}\n+     *\n+     * @implSpec This implementation calls {@code defaultAction}.\n+     *\n+     * @param e {@inheritDoc ElementKindVisitor6}\n+     * @param p {@inheritDoc ElementKindVisitor6}\n+     * @return  the result of {@code defaultAction}\n+     *\n+     * @since 23\n+     *\/\n+    @Override\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    public R visitVariableAsComponentLocalVariable(VariableElement e, P p) {\n+        return defaultAction(e, p);\n+     }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitorPreview.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.lang.model.element.*;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A scanning visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * The <code>visit<i>Xyz<\/i><\/code> methods in this class scan their\n+ * component elements by calling {@link ElementScanner6#scan(Element,\n+ * Object) scan} on their {@linkplain Element#getEnclosedElements\n+ * enclosed elements}, {@linkplain ExecutableElement#getParameters\n+ * parameters}, etc., as indicated in the individual method\n+ * specifications.  A subclass can control the order elements are\n+ * visited by overriding the <code>visit<i>Xyz<\/i><\/code> methods.\n+ * Note that clients of a scanner may get the desired behavior by\n+ * invoking {@code v.scan(e, p)} rather than {@code v.visit(e, p)} on\n+ * the root objects of interest.\n+ *\n+ * <p>When a subclass overrides a <code>visit<i>Xyz<\/i><\/code> method, the\n+ * new method can cause the enclosed elements to be scanned in the\n+ * default way by calling <code>super.visit<i>Xyz<\/i><\/code>.  In this\n+ * fashion, the concrete visitor can control the ordering of traversal\n+ * over the component elements with respect to the additional\n+ * processing; for example, consistently calling\n+ * <code>super.visit<i>Xyz<\/i><\/code> at the start of the overridden\n+ * methods will yield a preorder traversal, etc.  If the component\n+ * elements should be traversed in some other order, instead of\n+ * calling <code>super.visit<i>Xyz<\/i><\/code>, an overriding visit method\n+ * should call {@code scan} with the elements in the desired order.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"ElementScanner6.html#note_for_subclasses\"><strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see ElementScanner6\n+ * @see ElementScanner7\n+ * @see ElementScanner8\n+ * @see ElementScanner9\n+ * @see ElementScanner14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class ElementScannerPreview<R, P> extends ElementScanner14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected ElementScannerPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the default value\n+     *\/\n+    protected ElementScannerPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScannerPreview.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor for annotation values with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * Visit methods call {@link #defaultAction\n+ * defaultAction} passing their arguments to {@code defaultAction}'s\n+ * corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods\n+ * @param <P> the type of the additional parameter to this visitor's methods.\n+ *\n+ * @see <a href=\"SimpleAnnotationValueVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleAnnotationValueVisitor6\n+ * @see SimpleAnnotationValueVisitor7\n+ * @see SimpleAnnotationValueVisitor8\n+ * @see SimpleAnnotationValueVisitor9\n+ * @see SimpleAnnotationValueVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class SimpleAnnotationValueVisitorPreview<R, P> extends SimpleAnnotationValueVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleAnnotationValueVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleAnnotationValueVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleAnnotationValueVisitorPreview.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.ElementVisitor;\n+import javax.lang.model.element.RecordComponentElement;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor of program elements with default behavior\n+ * appropriate for a preview source version.\n+ *\n+ * Visit methods corresponding to {@code RELEASE_14} and earlier\n+ * language constructs call {@link #defaultAction defaultAction},\n+ * passing their arguments to {@code defaultAction}'s corresponding\n+ * parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@code Void}\n+ *             for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's methods.  Use {@code Void}\n+ *              for visitors that do not need an additional parameter.\n+ *\n+ * @see <a href=\"SimpleElementVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleElementVisitor6\n+ * @see SimpleElementVisitor7\n+ * @see SimpleElementVisitor8\n+ * @see SimpleElementVisitor9\n+ * @see SimpleElementVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class SimpleElementVisitorPreview<R, P> extends SimpleElementVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleElementVisitorPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleElementVisitorPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleElementVisitorPreview.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A simple visitor of types with default behavior appropriate for a\n+ * preview source version.\n+ *\n+ * Visit methods corresponding to {@code RELEASE_14} and earlier\n+ * language constructs call {@link #defaultAction defaultAction},\n+ * passing their arguments to {@code defaultAction}'s corresponding\n+ * parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"SimpleTypeVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see SimpleTypeVisitor6\n+ * @see SimpleTypeVisitor7\n+ * @see SimpleTypeVisitor8\n+ * @see SimpleTypeVisitor9\n+ * @see SimpleTypeVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class SimpleTypeVisitorPreview<R, P> extends SimpleTypeVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses; uses {@code null} for the\n+     * default value.\n+     *\/\n+    protected SimpleTypeVisitorPreview(){\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses; uses the argument for the\n+     * default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected SimpleTypeVisitorPreview(R defaultValue){\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleTypeVisitorPreview.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javax.lang.model.util;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.type.*;\n+import static javax.lang.model.SourceVersion.*;\n+\n+\/**\n+ * A visitor of types based on their {@linkplain TypeKind kind} with\n+ * default behavior appropriate for a preview source version.\n+ *\n+ * For {@linkplain\n+ * TypeMirror types} <code><i>Xyz<\/i><\/code> that may have more than one\n+ * kind, the <code>visit<i>Xyz<\/i><\/code> methods in this class delegate\n+ * to the <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> method corresponding to the\n+ * first argument's kind.  The <code>visit<i>Xyz<\/i>As<i>Kind<\/i><\/code> methods\n+ * call {@link #defaultAction defaultAction}, passing their arguments\n+ * to {@code defaultAction}'s corresponding parameters.\n+ *\n+ * @apiNote\n+ * Methods in this class may be overridden subject to their general\n+ * contract.\n+ *\n+ * @param <R> the return type of this visitor's methods.  Use {@link\n+ *            Void} for visitors that do not need to return results.\n+ * @param <P> the type of the additional parameter to this visitor's\n+ *            methods.  Use {@code Void} for visitors that do not need an\n+ *            additional parameter.\n+ *\n+ * @see <a href=\"TypeKindVisitor6.html#note_for_subclasses\">\n+ * <strong>Compatibility note for subclasses<\/strong><\/a>\n+ * @see TypeKindVisitor6\n+ * @see TypeKindVisitor7\n+ * @see TypeKindVisitor8\n+ * @see TypeKindVisitor9\n+ * @see TypeKindVisitor14\n+ * @since 23\n+ *\/\n+@SupportedSourceVersion(RELEASE_23)\n+@PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+public class TypeKindVisitorPreview<R, P> extends TypeKindVisitor14<R, P> {\n+    \/**\n+     * Constructor for concrete subclasses to call; uses {@code null}\n+     * for the default value.\n+     *\/\n+    protected TypeKindVisitorPreview() {\n+        super(null);\n+    }\n+\n+    \/**\n+     * Constructor for concrete subclasses to call; uses the argument\n+     * for the default value.\n+     *\n+     * @param defaultValue the value to assign to {@link #DEFAULT_VALUE}\n+     *\/\n+    protected TypeKindVisitorPreview(R defaultValue) {\n+        super(defaultValue);\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/TypeKindVisitorPreview.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -231,0 +231,7 @@\n+        \/**\n+         * Used for instances of {@link DerivedInstanceTree}.\n+         * @since 23\n+         *\/\n+        @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+        DERIVED_INSTANCE(DerivedInstanceTree.class),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,0 +382,10 @@\n+    \/**\n+     * Visits a {@code DerivedInstanceTree} node.\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    R visitDerivedInstance(DerivedInstanceTree node, P p);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/TreeVisitor.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -547,0 +547,16 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation calls {@code defaultAction}.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p {@inheritDoc}\n+     * @return  the result of {@code defaultAction}\n+     * @since 23\n+     *\/\n+    @Override\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    public R visitDerivedInstance(DerivedInstanceTree node, P p) {\n+        return defaultAction(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleTreeVisitor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -672,0 +672,18 @@\n+     * @return the result of scanning\n+     * @since 23\n+     *\/\n+    @Override\n+    @PreviewFeature(feature=PreviewFeature.Feature.DERIVED_RECORD_CREATION, reflective=true)\n+    public R visitDerivedInstance(DerivedInstanceTree node, P p) {\n+        R r = scan(node.getExpression(), p);\n+        r = scanAndReduce(node.getBlock(), p, r);\n+        return r;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation scans the children in left to right order.\n+     *\n+     * @param node  {@inheritDoc}\n+     * @param p  {@inheritDoc}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreeScanner.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -392,0 +392,5 @@\n+    \/**\n+     * Flag to indicate component local variables.\n+     *\/\n+    public static final long COMPONENT_LOCAL_VARIABLE = 1L<<62; \/\/ VarSymbols\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,0 +213,1 @@\n+            case DERIVED_INSTANCE -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+        DERIVED_INSTANCE(JDK23, Fragments.FeatureDerivedInstance, DiagKind.NORMAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1766,0 +1766,3 @@\n+            } else if ((flags & COMPONENT_LOCAL_VARIABLE) != 0) {\n+                ElementKind kind = ElementKind.COMPONENT_LOCAL_VARIABLE;\n+                return kind;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3969,0 +3969,39 @@\n+    @Override\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        Type exprType = attribExpr(tree.expr, env);\n+        Env<AttrContext> blockEnv =\n+            env.dup(tree, env.info.dup(env.info.scope.dup()));\n+\n+        try {\n+            ListBuffer<VarSymbol> componentLocalVariables = new ListBuffer<>();\n+\n+            if ((exprType.tsym.flags() & RECORD) == 0) {\n+                log.error(tree, Errors.DerivedExpressionNoRecord);\n+            } else {\n+                ClassSymbol recordType = (ClassSymbol) exprType.tsym;\n+\n+                for (RecordComponent component : recordType.getRecordComponents()) {\n+                    VarSymbol outgoing = new VarSymbol(COMPONENT_LOCAL_VARIABLE,\n+                                                       component.name,\n+                                                       types.memberType(exprType, component),\n+                                                       env.info.scope.owner);\n+\n+                    outgoing.pos = tree.pos;\n+                    componentLocalVariables.append(outgoing);\n+                    blockEnv.info.scope.enter(outgoing);\n+                }\n+            }\n+\n+            tree.componentLocalVariables = componentLocalVariables.toList();\n+\n+            attribStat(tree.block, blockEnv);\n+\n+            chk.checkDerivedInstanceBlockStructure(tree);\n+\n+            result = check(tree, exprType, KindSelector.VAL, resultInfo);;\n+        } finally {\n+            blockEnv.info.scope.leave();\n+        }\n+\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,1 @@\n+import java.util.function.Function;\n@@ -4911,0 +4912,86 @@\n+    void checkDerivedInstanceBlockStructure(JCDerivedInstance instance) {\n+        new TreeScanner() {\n+            private final Set<JCTree> seenTrees =\n+                    Collections.newSetFromMap(new IdentityHashMap<>());\n+            private final Set<VarSymbol> seenVariables = new HashSet<>();\n+            @Override\n+            public void scan(JCTree tree) {\n+                seenTrees.add(tree);\n+                super.scan(tree);\n+            }\n+            @Override\n+            public void visitClassDef(JCClassDecl tree) {\n+                \/\/no limits on the inside of the nested class decl\n+            }\n+            @Override\n+            public void visitReturn(JCReturn tree) {\n+                log.error(tree.pos(), Errors.WithReturnNotAllowed);\n+                super.visitReturn(tree);\n+            }\n+\n+            @Override\n+            public void visitBreak(JCBreak tree) {\n+                if (!seenTrees.contains(tree.target)) {\n+                    log.error(tree.pos(), Errors.WithBreakNotAllowed);\n+                }\n+                super.visitBreak(tree);\n+            }\n+\n+            @Override\n+            public void visitContinue(JCContinue tree) {\n+                if (!seenTrees.contains(tree.target)) {\n+                    log.error(tree.pos(), Errors.WithContinueNotAllowed);\n+                }\n+                super.visitContinue(tree);\n+            }\n+\n+            @Override\n+            public void visitYield(JCYield tree) {\n+                if (!seenTrees.contains(tree.target)) {\n+                    log.error(tree.pos(), Errors.WithYieldNotAllowed);\n+                }\n+                super.visitYield(tree);\n+            }\n+\n+            @Override\n+            public void visitVarDef(JCVariableDecl tree) {\n+                seenVariables.add(tree.sym);\n+                super.visitVarDef(tree);\n+            }\n+            @Override\n+            public void visitAssign(JCAssign tree) {\n+                checkInvalidAssignTarget(tree.lhs);\n+                super.visitAssign(tree);\n+            }\n+\n+            @Override\n+            public void visitAssignop(JCAssignOp tree) {\n+                checkInvalidAssignTarget(tree.lhs);\n+                super.visitAssignop(tree);\n+            }\n+\n+            @Override\n+            public void visitUnary(JCUnary tree) {\n+                switch (tree.getTag()) {\n+                    case PREDEC, PREINC, POSTDEC, POSTINC -> {\n+                        checkInvalidAssignTarget(tree.arg);\n+                    }\n+                }\n+                super.visitUnary(tree);\n+            }\n+\n+            private void checkInvalidAssignTarget(JCTree operand) {\n+                if (operand instanceof JCIdent var &&\n+                    !seenVariables.contains(var.sym)) {\n+                    log.error(var.pos(), Errors.WithAssignmentNotAllowed(var.sym));\n+                }\n+            }\n+\n+            @Override\n+            public void visitDerivedInstance(JCDerivedInstance tree) {\n+                seenVariables.addAll(tree.componentLocalVariables);\n+                super.visitDerivedInstance(tree);\n+            }\n+        }.scan(instance);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2114,1 +2114,2 @@\n-        \/** A mapping from addresses to variable symbols.\n+        \/** A mapping from addresses to variable symbols, and their diagnostic\n+         *  position.\n@@ -2116,1 +2117,2 @@\n-        protected JCVariableDecl[] vardecls;\n+        protected VarSymbol[] vars;\n+        protected JCTree[]    vardecls;\n@@ -2184,1 +2186,1 @@\n-                    if (!(isFinalUninitializedStaticField(vardecls[address].sym))) {\n+                    if (!(isFinalUninitializedStaticField(vars[address]))) {\n@@ -2219,1 +2221,9 @@\n-            VarSymbol sym = varDecl.sym;\n+            newVar(varDecl, varDecl.sym);\n+        }\n+\n+        \/** Initialize new trackable variable by setting its address field\n+         *  to the next available sequence number and entering it under that\n+         *  index into the vars array.\n+         *\/\n+        void newVar(JCTree pos,VarSymbol sym) {\n+            vars = ArrayUtils.ensureCapacity(vars, nextadr);\n@@ -2225,1 +2235,2 @@\n-            vardecls[nextadr] = varDecl;\n+            vars[nextadr] = sym;\n+            vardecls[nextadr] = pos;\n@@ -2301,1 +2312,1 @@\n-                (sym.flags_field & CLASH) == 0) {\n+                (sym.flags_field & (CLASH | COMPONENT_LOCAL_VARIABLE)) == 0) {\n@@ -2434,2 +2445,1 @@\n-                        JCVariableDecl vardecl = vardecls[i];\n-                        VarSymbol var = vardecl.sym;\n+                        VarSymbol var = vars[i];\n@@ -2437,0 +2447,1 @@\n+                            JCTree vardecl = vardecls[i];\n@@ -2521,2 +2532,2 @@\n-                            JCVariableDecl vardecl = vardecls[i];\n-                            VarSymbol var = vardecl.sym;\n+                            VarSymbol var = vars[i];\n+                            JCTree vardecl = vardecls[i];\n@@ -2579,1 +2590,1 @@\n-                        checkInit(exit.tree.pos(), vardecls[i].sym);\n+                        checkInit(exit.tree.pos(), vars[i]);\n@@ -3047,1 +3058,1 @@\n-                        VarSymbol sym = vardecls[address].sym;\n+                        VarSymbol sym = vars[address];\n@@ -3209,0 +3220,12 @@\n+        @Override\n+        public void visitDerivedInstance(JCDerivedInstance tree) {\n+            scan(tree.expr);\n+            int nextadrPrev = nextadr;\n+            for (VarSymbol component : tree.componentLocalVariables) {\n+                newVar(tree, component);\n+                letInit(tree.pos(), component);\n+            }\n+            scan(tree.block);\n+            nextadr = nextadrPrev;\n+        }\n+\n@@ -3236,0 +3259,5 @@\n+                if (vars == null)\n+                    vars = new VarSymbol[32];\n+                else\n+                    for (int i=0; i<vars.length; i++)\n+                        vars[i] = null;\n@@ -3237,1 +3265,1 @@\n-                    vardecls = new JCVariableDecl[32];\n+                    vardecls = new JCTree[32];\n@@ -3253,0 +3281,4 @@\n+                if (vars != null) {\n+                    for (int i=0; i<vars.length; i++)\n+                        vars[i] = null;\n+                }\n@@ -3451,0 +3483,8 @@\n+        @Override\n+        public void visitDerivedInstance(JCDerivedInstance tree) {\n+            if (declaredInsideGuard != null) {\n+                tree.componentLocalVariables.forEach(declaredInsideGuard::enter);\n+            }\n+            super.visitDerivedInstance(tree);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":53,"deletions":13,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCDerivedInstance;\n@@ -105,0 +106,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCYield;\n@@ -1361,0 +1363,57 @@\n+    @Override\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        ListBuffer<JCStatement> newBlock = new ListBuffer<>();\n+        VarSymbol temp;\n+        if (tree.expr instanceof JCIdent i &&\n+            i.sym.kind == Kind.VAR &&\n+            (i.sym.owner.kind == Kind.MTH || i.sym.owner.kind == Kind.VAR)) {\n+            temp = (VarSymbol) i.sym;\n+        } else {\n+            temp = new VarSymbol(Flags.SYNTHETIC,\n+                    names.fromString(\"expr\" + variableIndex++ + target.syntheticNameChar() + \"temp\"),\n+                    tree.expr.type,\n+                    currentMethodSym);\n+            newBlock.add(make.VarDef(temp, translate(tree.expr)));\n+        }\n+\n+\n+        ClassSymbol recordClass = (ClassSymbol) tree.expr.type.tsym;\n+        List<VarSymbol> outgoingBindingsIt = tree.componentLocalVariables;\n+        List<? extends RecordComponent> recordComponentsIt = recordClass.getRecordComponents();\n+\n+        while (outgoingBindingsIt.nonEmpty()) {\n+            Type erasedComponentType = types.erasure(recordComponentsIt.head.type);\n+            newBlock.add(make.VarDef(outgoingBindingsIt.head,\n+                                     make.App(make.Select(make.Ident(temp),\n+                                                          recordComponentsIt.head.accessor))\n+                                         .setType(erasedComponentType)));\n+            outgoingBindingsIt = outgoingBindingsIt.tail;\n+            recordComponentsIt = recordComponentsIt.tail;\n+        }\n+\n+        newBlock.add(translate(tree.block));\n+\n+        JCNewClass createNew = make.NewClass(null,\n+                                             List.nil(),\n+                                             make.QualIdent(recordClass),\n+                                             tree.componentLocalVariables.map(make::Ident),\n+                                             null);\n+\n+        createNew.type = tree.type;\n+\n+        List<Type> canonicalConstructorTypes =\n+                recordClass.getRecordComponents()\n+                           .stream()\n+                           .map(c -> types.erasure(c.type))\n+                           .collect(List.collector());\n+        MethodSymbol init = rs.resolveInternalMethod(tree.pos(),\n+                                                     env,\n+                                                     tree.type,\n+                                                     names.init,\n+                                                     canonicalConstructorTypes,\n+                                                     List.nil());\n+        createNew.constructor = init;\n+\n+        result = make.LetExpr(newBlock.toList(), createNew).setType(tree.type);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -738,0 +738,8 @@\n+    @Override\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        tree.expr = translate(tree.expr, pt);\n+        tree.block = translate(tree.block);\n+        tree.type = erasure(tree.expr.type);\n+        result = tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1225,14 +1225,1 @@\n-                while (code.state.stacksize > 0) {\n-                    Type type = code.state.peek();\n-                    Name varName = names.fromString(target.syntheticNameChar() +\n-                                                    \"stack\" +\n-                                                    target.syntheticNameChar() +\n-                                                    tree.pos +\n-                                                    target.syntheticNameChar() +\n-                                                    code.state.stacksize);\n-                    VarSymbol var = new VarSymbol(Flags.SYNTHETIC, varName, type,\n-                                                  this.env.enclMethod.sym);\n-                    LocalItem item = items.new LocalItem(type, code.newLocal(var));\n-                    stackBeforeSwitchExpression = stackBeforeSwitchExpression.prepend(item);\n-                    item.store();\n-                }\n+                stackBeforeSwitchExpression = stashStackToLocalVariables(tree);\n@@ -1253,4 +1240,0 @@\n-    \/\/where:\n-        private boolean hasTry(JCSwitchExpression tree) {\n-            class HasTryScanner extends TreeScanner {\n-                private boolean hasTry;\n@@ -1258,4 +1241,3 @@\n-                @Override\n-                public void visitTry(JCTry tree) {\n-                    hasTry = true;\n-                }\n+    private boolean hasTry(JCTree tree) {\n+        class HasTryScanner extends TreeScanner {\n+            private boolean hasTry;\n@@ -1263,4 +1245,4 @@\n-                @Override\n-                public void visitSynchronized(JCSynchronized tree) {\n-                    hasTry = true;\n-                }\n+            @Override\n+            public void visitTry(JCTry tree) {\n+                hasTry = true;\n+            }\n@@ -1268,3 +1250,4 @@\n-                @Override\n-                public void visitClassDef(JCClassDecl tree) {\n-                }\n+            @Override\n+            public void visitSynchronized(JCSynchronized tree) {\n+                hasTry = true;\n+            }\n@@ -1272,4 +1255,8 @@\n-                @Override\n-                public void visitLambda(JCLambda tree) {\n-                }\n-            };\n+            @Override\n+            public void visitClassDef(JCClassDecl tree) {\n+            }\n+\n+            @Override\n+            public void visitLambda(JCLambda tree) {\n+            }\n+        };\n@@ -1277,1 +1264,1 @@\n-            HasTryScanner hasTryScanner = new HasTryScanner();\n+        HasTryScanner hasTryScanner = new HasTryScanner();\n@@ -1279,3 +1266,3 @@\n-            hasTryScanner.scan(tree);\n-            return hasTryScanner.hasTry;\n-        }\n+        hasTryScanner.scan(tree);\n+        return hasTryScanner.hasTry;\n+    }\n@@ -1855,2 +1842,1 @@\n-            for (LocalItem li : stackBeforeSwitchExpression)\n-                li.load();\n+            reloadStackFromVariables(stackBeforeSwitchExpression);\n@@ -1859,0 +1845,5 @@\n+    private void reloadStackFromVariables(List<LocalItem> variables) {\n+        for (LocalItem li : variables)\n+            li.load();\n+    }\n+\n@@ -2415,0 +2406,11 @@\n+        List<LocalItem> stashedStack;\n+\n+        if (hasTry(tree)) {\n+            \/\/if the let expression contains try-catch, the catch handlers need to have\n+            \/\/an empty stack. So stash whole stack to local variables, and restore it\n+            \/\/at the end:\n+            stashedStack = stashStackToLocalVariables(tree);\n+        } else {\n+            stashedStack = List.nil();\n+        }\n+\n@@ -2421,0 +2423,1 @@\n+            reloadStackFromVariables(stashedStack);\n@@ -2426,0 +2429,20 @@\n+    private List<LocalItem> stashStackToLocalVariables(JCTree tree) {\n+        List<LocalItem> variables = List.nil();\n+\n+        while (code.state.stacksize > 0) {\n+            Type type = code.state.peek();\n+            Name varName = names.fromString(target.syntheticNameChar() +\n+                                            \"stack\" +\n+                                            target.syntheticNameChar() +\n+                                            tree.pos +\n+                                            target.syntheticNameChar() +\n+                                            code.state.stacksize);\n+            VarSymbol var = new VarSymbol(Flags.SYNTHETIC, varName, type,\n+                                          this.env.enclMethod.sym);\n+            LocalItem item = items.new LocalItem(type, code.newLocal(var));\n+            variables = variables.prepend(item);\n+            item.store();\n+        }\n+\n+        return variables;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":62,"deletions":39,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCDerivedInstance;\n@@ -1570,0 +1571,6 @@\n+\n+            @Override\n+            public void visitDerivedInstance(JCDerivedInstance tree) {\n+                hasPatterns |= true;\n+                super.visitDerivedInstance(tree);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1823,0 +1823,11 @@\n+            } else if (isMode(EXPR) && token.kind == IDENTIFIER &&\n+                       token.name() == names.with && peekToken(LBRACE)) {\n+                int pos = token.pos;\n+\n+                checkSourceLevel(pos, Feature.DERIVED_INSTANCE);\n+\n+                nextToken();\n+\n+                JCBlock block = block();\n+\n+                t = F.at(pos).DerivedInstance(t, block);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+    @SuppressWarnings(\"preview\")\n@@ -92,1 +93,1 @@\n-        extends SimpleElementVisitor14<PrintingElementVisitor, Boolean> {\n+        extends SimpleElementVisitorPreview<PrintingElementVisitor, Boolean> {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3234,0 +3234,3 @@\n+compiler.misc.feature.derived.instance=\\\n+    derived record creation\n+\n@@ -3948,0 +3951,19 @@\n+# 0: symbol\n+compiler.err.with.assignment.not.allowed=\\\n+    assignment to {0} not allowed inside the block of the derived record creation expression\n+\n+compiler.err.with.return.not.allowed=\\\n+    return not allowed inside the block of the derived record creation expression\n+\n+compiler.err.with.break.not.allowed=\\\n+    break statement not allowed to transfer control outside of the block of the derived record creation expression\n+\n+compiler.err.with.continue.not.allowed=\\\n+    continue statement not allowed to transfer control outside of the block of the derived record creation expression\n+\n+compiler.err.with.yield.not.allowed=\\\n+    yield statement not allowed to transfer control outside of the block of the derived record creation expression\n+\n+compiler.err.derived.expression.no.record=\\\n+    the parameter for the derived record creation expression is not a record class\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,0 +228,4 @@\n+        \/** Derived record creation expression, of type JCDerivedInstance.\n+         *\/\n+        DERIVEDRECORDCREATION,\n+\n@@ -2049,0 +2053,30 @@\n+    \/**\n+     * A reconstruction subexpression ( ... )\n+     *\/\n+    public static class JCDerivedInstance extends JCExpression implements DerivedInstanceTree {\n+        public JCExpression expr;\n+        public JCBlock block;\n+        public List<VarSymbol> componentLocalVariables;\n+        protected JCDerivedInstance(JCExpression expr, JCBlock block) {\n+            this.expr = expr;\n+            this.block = block;\n+        }\n+        @Override\n+        public void accept(Visitor v) { v.visitDerivedInstance(this); }\n+\n+        @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() { return Kind.DERIVED_INSTANCE; }\n+        @DefinedBy(Api.COMPILER_TREE)\n+        public JCExpression getExpression() { return expr; }\n+        @DefinedBy(Api.COMPILER_TREE)\n+        public JCBlock getBlock() { return block; }\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R,D> R accept(TreeVisitor<R,D> v, D d) {\n+            return v.visitDerivedInstance(this, d);\n+        }\n+        @Override\n+        public Tag getTag() {\n+            return DERIVEDRECORDCREATION;\n+        }\n+    }\n+\n@@ -3573,0 +3607,1 @@\n+        public void visitDerivedInstance(JCDerivedInstance that) { visitTree(that); }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1494,0 +1494,11 @@\n+    @Override\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        try {\n+            printExpr(tree.expr);\n+            print(\" with \");\n+            printExpr(tree.block);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -359,0 +359,8 @@\n+    @DefinedBy(Api.COMPILER_TREE)\n+    public JCTree visitDerivedInstance(DerivedInstanceTree node, P p) {\n+        JCDerivedInstance t = (JCDerivedInstance) node;\n+        JCExpression expr = copy(t.expr, p);\n+        JCBlock block = copy(t.block, p);\n+        return M.at(t.pos).DerivedInstance(expr, block);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -594,0 +594,4 @@\n+            case DERIVEDRECORDCREATION: {\n+                JCDerivedInstance node = (JCDerivedInstance) tree;\n+                return getStartPos(node.expr);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -452,0 +452,6 @@\n+    public JCDerivedInstance DerivedInstance(JCExpression expr, JCBlock block) {\n+        JCDerivedInstance tree = new JCDerivedInstance(expr, block);\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,0 +279,5 @@\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        scan(tree.expr);\n+        scan(tree.block);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeScanner.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,0 +327,7 @@\n+    @Override\n+    public void visitDerivedInstance(JCDerivedInstance tree) {\n+        tree.expr = translate(tree.expr);\n+        tree.block = translate(tree.block);\n+        result = tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeTranslator.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+        \"var v = a with { i = 0; };\",\n@@ -93,1 +94,2 @@\n-        \"\\\"\\\\{0}\\\"\"\n+        \"\\\"\\\\{0}\\\"\",\n+        \"a with { i = 0; }\",\n@@ -136,0 +138,1 @@\n+        \"var v = a with { i = 0; }\",\n@@ -233,0 +236,1 @@\n+        \"a with {\",\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression in JShell\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jshell\n+ * @build Compiler KullaTesting TestingInputStream ExpectedDiagnostic\n+ * @run testng DerivedRecordCreationTest\n+ *\/\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+@Test\n+public class DerivedRecordCreationTest extends KullaTesting {\n+\n+    public void derivedRecordInVarInit() {\n+        assertEval(\"record A(int i) {}\");\n+        assertEval(\"var v1 = new A(0);\");\n+        assertEval(\"var v2 = v1 with { i = -1; };\");\n+        assertEval(\"v2\", \"A[i=-1]\");\n+    }\n+\n+    public void derivedRecordInClass() {\n+        assertEval(\"record A(int i) {}\");\n+        assertEval(\"\"\"\n+                   class Test {\n+                       public static A test(A arg) {\n+                           A a = arg with {\n+                               i = 32;\n+                           };\n+                           return a;\n+                       }\n+                   }\n+                   \"\"\");\n+    }\n+\n+    @BeforeMethod\n+    public void setUp() {\n+        setUp(bc -> bc.compilerOptions(\"--enable-preview\",\n+                                       \"--source\", System.getProperty(\"java.specification.version\"))\n+                      .remoteVMOptions(\"--enable-preview\"));\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/jshell\/DerivedRecordCreationTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt.orig","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","status":"copied"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.derived.expression.no.record\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class DerivedExpressionNoRecord {\n+    Object test(Object o) {\n+        return o with { };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/DerivedExpressionNoRecord.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.misc.feature.derived.instance\n+\/\/ key: compiler.err.preview.feature.disabled\n+\/\/ options: --release 22\n+\n+class FeatureDerivedInstance {\n+    R test(R r) {\n+        return r with {\n+            value = \"\";\n+        };\n+    }\n+\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FeatureDerivedInstance.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.with.assignment.not.allowed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class WithAssignmentNotAllowed {\n+    R test(R r) {\n+        int i;\n+        return r with {\n+            i = 0;\n+        };\n+    }\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithAssignmentNotAllowed.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.with.break.not.allowed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class WithBreakNotAllowed {\n+    void test(R r) {\n+        while (true) {\n+            r = r with {\n+                break;\n+            };\n+        }\n+    }\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithBreakNotAllowed.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.with.continue.not.allowed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class WithContinueNotAllowed {\n+    void test(R r) {\n+        while (true) {\n+            r = r with {\n+                continue;\n+            };\n+        }\n+    }\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithContinueNotAllowed.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.with.return.not.allowed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class WithReturnNotAllowed {\n+    R test(R r) {\n+        r = r with {\n+            return r;\n+        };\n+    }\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithReturnNotAllowed.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.with.yield.not.allowed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview --release ${jdk.version}\n+\n+class WithYieldNotAllowed {\n+    R test(R r) {\n+        return switch(0) {\n+            default -> r with {\n+                yield r;\n+            };\n+        };\n+    }\n+    record R(String value) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithYieldNotAllowed.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -117,1 +117,2 @@\n-    public static abstract class AbstractAnnotationValueVisitor<R, P> extends AbstractAnnotationValueVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractAnnotationValueVisitor<R, P> extends AbstractAnnotationValueVisitorPreview<R, P> {\n@@ -128,1 +129,2 @@\n-    public static abstract class AbstractElementVisitor<R, P> extends AbstractElementVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractElementVisitor<R, P> extends AbstractElementVisitorPreview<R, P> {\n@@ -138,1 +140,2 @@\n-    public static abstract class AbstractTypeVisitor<R, P> extends AbstractTypeVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static abstract class AbstractTypeVisitor<R, P> extends AbstractTypeVisitorPreview<R, P> {\n@@ -148,1 +151,2 @@\n-    public static class ElementKindVisitor<R, P> extends ElementKindVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class ElementKindVisitor<R, P> extends ElementKindVisitorPreview<R, P> {\n@@ -169,1 +173,2 @@\n-    public static class ElementScanner<R, P> extends ElementScanner14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class ElementScanner<R, P> extends ElementScannerPreview<R, P> {\n@@ -188,1 +193,2 @@\n-    public static class SimpleAnnotationValueVisitor<R, P> extends SimpleAnnotationValueVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleAnnotationValueVisitor<R, P> extends SimpleAnnotationValueVisitorPreview<R, P> {\n@@ -209,1 +215,2 @@\n-    public static class SimpleElementVisitor<R, P> extends SimpleElementVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleElementVisitor<R, P> extends SimpleElementVisitorPreview<R, P> {\n@@ -230,1 +237,2 @@\n-    public static class SimpleTypeVisitor<R, P> extends SimpleTypeVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class SimpleTypeVisitor<R, P> extends SimpleTypeVisitorPreview<R, P> {\n@@ -251,1 +259,2 @@\n-    public static class TypeKindVisitor<R, P> extends TypeKindVisitor14<R, P> {\n+    @SuppressWarnings(\"preview\")\n+    public static class TypeKindVisitor<R, P> extends TypeKindVisitorPreview<R, P> {\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8222430 8282411\n+ * @bug 8222430 8282411 8329556\n@@ -89,1 +89,1 @@\n-        \/\/ RESOURCE_VARIABLE, BINDING_VARIABLE\n+        \/\/ RESOURCE_VARIABLE, BINDING_VARIABLE, COMPONENT_LOCAL_VARIABLE\n@@ -97,1 +97,2 @@\n-                                       ElementKind.BINDING_VARIABLE).contains(k),\n+                                       ElementKind.BINDING_VARIABLE,\n+                                       ElementKind.COMPONENT_LOCAL_VARIABLE).contains(k),\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestElementKindPredicates.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}