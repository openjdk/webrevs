{"files":[{"patch":"@@ -183,1 +183,1 @@\n-help.usage = Verwendung:   jshell <option>... <load-file>...\\nMögliche Optionen:\\n    --class-path <path>   Gibt an, wo die Benutzerklassendateien gespeichert sind\\n    --module-path <path>  Gibt an, wo die Anwendungsmodule gespeichert sind\\n    --add-modules <module>(,<module>)*\\n                          Gibt aufzulösende Module oder alle Module im\\n                            Modulpfad an, wenn <module> ALL-MODULE-PATHs lautet\\n    --enable-native-access\\n                          Ermöglicht Ausführung eingeschränkter nativer Methoden durch Code\\n    --enable-preview      Code kann Vorschaufeatures in diesem Release nutzen\\n    --startup <Datei>      Ersetzung der Startdefinitionen mit einer Ausführung\\n    --no-startup          Startdefinitionen werden nicht ausgeführt\\n    --feedback <Modus>     Gibt den anfänglichen Feedbackmodus an. Der Modus kann\\n                            vordefiniert (Silent, Concise, Normal oder Verbose) oder\\n                            vorab benutzerdefiniert sein\\n    -q                    Stilles Feedback. Identisch mit: --feedback concise\\n    -s                    Äußerst stilles Feedback. Identisch mit: --feedback silent\\n    -v                    Verbose-Feedback. Identisch mit: --feedback verbose\\n    -J<flag>              Übergibt <flag> an das Laufzeitsystem, hat aber keine Auswirkungen\\n                            auf die Ausführung von Code-Snippets. Um Kennzeichen anzugeben,\\n                            die die Ausführung von Code-Snippets beeinflussen, verwenden Sie\\n                            -R<flag>. Verwenden Sie alternativ dazu -J<flag> mit\\n                            --execution local.\\n    -R<flag>              Übergibt <flag> nur dann an das Laufzeitsystem, wenn\\n                            Code-Snippets ausgeführt werden. Beispiel: -R-Dfoo=bar\\n                            bedeutet, dass die Ausführung des Snippets\\n                            System.getProperty(\"foo\") \"bar\" zurückgibt.\\n    -C<flag>              Übergibt <flag> an den Java-Compiler in JShell.\\n                            Beispiel: -C-Xlint aktiviert alle empfohlenen\\n                            LINT-Warnungen, und -C--release=<N> kompiliert für\\n                            Java SE N, wie wenn --release N angegeben wird.\\n                            Verwenden Sie ein -C pro Compiler-Kennzeichen oder Kennzeichenargument\\n    --version             Gibt Versionsinformationen aus und beendet den Vorgang\\n    --show-version        Gibt Versionsinformationen aus und setzt den Vorgang fort\\n    --help, -?, -h        Gibt diese Zusammenfassung der Standardoptionen aus und beendet den Vorgang\\n    --help-extra, -X      Gibt Hilfetext zu Nicht-Standardoptionen aus und beendet den Vorgang\\n\\nEin Dateiargument kann ein Dateiname oder einer der vordefinierten Dateinamen sein: DEFAULT,\\nPRINTING, TOOLING oder JAVASE.\\nEine Ladedatei kann auch \"-\" zur Angabe einer Standardeingabe ohne interaktiven I\/O sein.\\n\\nWeitere Informationen zu den Auswertungskontextoptionen (--class-path,\\n--module-path und --add-modules) finden Sie unter:\\n\\t\/help context\\n\\nEin Pfad listet die zu durchsuchenden Verzeichnisse und Archive auf. Verwenden Sie unter Windows ein\\nSemikolon (;), um Elemente im Pfad zu trennen. Verwenden Sie auf anderen Plattformen einen\\nDoppelpunkt (:), um Elemente zu trennen.\\n\n+help.usage = Verwendung:   jshell <Option>... <Ladedatei>...\\nMögliche Optionen:\\n    --class-path <Pfad>   Gibt an, wo die Benutzerklassendateien gespeichert sind\\n    --module-path <Pfad>  Gibt an, wo die Anwendungsmodule gespeichert sind\\n    --add-modules <Modul>(,<Modul>)*\\n                         Gibt aufzulösende Module oder alle Module im\\n                            Modulpfad an, wenn <Modul> ALL-MODULE-PATHs lautet\\n    --enable-native-access\\n                          Ermöglicht Ausführung eingeschränkter nativer Methoden durch Code\\n    --enable-preview      Code kann Vorschaufeatures in diesem Release nutzen\\n    --startup <Datei>      Ersetzung der Startdefinitionen mit einer Ausführung\\n    --no-startup          Startdefinitionen werden nicht ausgeführt\\n    --feedback <Modus>     Gibt den anfänglichen Feedbackmodus an. Der Modus kann\\n                            vordefiniert (Silent, Concise, Normal oder Verbose) oder\\n                            vorab benutzerdefiniert sein\\n    -q                    Stilles Feedback. Identisch mit: --feedback concise\\n    -s                    Äußerst stilles Feedback. Identisch mit: --feedback silent\\n    -v                    Verbose-Feedback. Identisch mit: --feedback verbose\\n    -J<Kennzeichen>              Übergibt <Kennzeichen> an das Laufzeitsystem, hat aber keine Auswirkungen\\n                            auf die Ausführung von Code-Snippets. Um Kennzeichen anzugeben,\\n                            die die Ausführung von Code-Snippets beeinflussen, verwenden Sie\\n                            -R<Kennzeichen>. Verwenden Sie alternativ dazu -J<Kennzeichen> mit\\n                            --execution local.\\n    -R<Kennzeichen>              Übergibt <Kennzeichen> nur dann an das Laufzeitsystem, wenn\\n                            Code-Snippets ausgeführt werden. Beispiel: -R-Dfoo=bar\\n                            bedeutet, dass die Ausführung des Snippets\\n                            System.getProperty(\"foo\") \"bar\" zurückgibt.\\n    -C<flag>              Übergibt <Kennzeichen> an den Java-Compiler in JShell.\\n                            Beispiel: -C-Xlint aktiviert alle empfohlenen\\n                            LINT-Warnungen, und -C--release=<N> kompiliert für\\n                            Java SE N, wie wenn --release N angegeben wird.\\n                            Verwenden Sie ein -C pro Compiler-Kennzeichen oder Kennzeichenargument\\n    --version             Gibt Versionsinformationen aus und beendet den Vorgang\\n    --show-version        Gibt Versionsinformationen aus und setzt den Vorgang fort\\n    --help, -?, -h        Gibt diese Zusammenfassung der Standardoptionen aus und beendet den Vorgang\\n    --help-extra, -X      Gibt Hilfetext zu Nicht-Standardoptionen aus und beendet den Vorgang\\n\\nEin Dateiargument kann ein Dateiname oder einer der vordefinierten Dateinamen sein: DEFAULT,\\nPRINTING, TOOLING oder JAVASE.\\nEine Ladedatei kann auch \"-\" zur Angabe einer Standardeingabe ohne interaktiven I\/O sein.\\n\\nWeitere Informationen zu den Auswertungskontextoptionen (--class-path,\\n--module-path und --add-modules) finden Sie unter:\\n\\t\/help context\\n\\nEin Pfad listet die zu durchsuchenden Verzeichnisse und Archive auf. Verwenden Sie unter Windows ein\\nSemikolon (;), um Elemente im Pfad zu trennen. Verwenden Sie auf anderen Plattformen einen\\nDoppelpunkt (:), um Elemente zu trennen.\\n\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}