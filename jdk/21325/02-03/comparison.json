{"files":[{"patch":"@@ -369,1 +369,1 @@\n-  const char* utf8_str = symbol->get_utf8();\n+  const char* utf8_str = (char*)symbol->bytes();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    int num_unicode_points = UTF8::unicode_length(utf8_str, utf8_len);\n+    int unicode_length = UTF8::unicode_length(utf8_str, utf8_len);\n@@ -188,4 +188,4 @@\n-    jchar a;\n-    while (num_unicode_points-- > 0) {\n-      utf8_str = UTF8::next(utf8_str, &a);\n-      h = 31 * h + ((unsigned int)a);\n+    jchar c;\n+    while (unicode_length-- > 0) {\n+      utf8_str = UTF8::next(utf8_str, &c);\n+      h = 31 * h + ((unsigned int)c);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -133,0 +133,4 @@\n+const char* StringTable::get_symbol_utf8(StringWrapper symbol) {\n+  return reinterpret_cast<const char*>(symbol.symbol_str->bytes());\n+}\n+\n@@ -140,1 +144,1 @@\n-    return java_lang_String::hash_code(wrapped_str.symbol_str->get_utf8(), len);\n+    return java_lang_String::hash_code(get_symbol_utf8(wrapped_str), len);\n@@ -143,0 +147,2 @@\n+  default:\n+    ShouldNotReachHere();\n@@ -144,1 +150,0 @@\n-  ShouldNotReachHere();\n@@ -155,1 +160,1 @@\n-    return java_lang_String::equals(java_string, wrapped_str.symbol_str->get_utf8(), len);\n+    return java_lang_String::equals(java_string, get_symbol_utf8(wrapped_str), len);\n@@ -158,0 +163,2 @@\n+  default:\n+    ShouldNotReachHere();\n@@ -159,1 +166,0 @@\n-  ShouldNotReachHere();\n@@ -394,1 +400,1 @@\n-    StringTableLookupUTF8 lookup(thread, hash, name.symbol_str->get_utf8(), len);\n+    StringTableLookupUTF8 lookup(thread, hash, get_symbol_utf8(name), len);\n@@ -419,1 +425,1 @@\n-    const char* utf8_str = wrapped_str.symbol_str->get_utf8();\n+    const char* utf8_str = get_symbol_utf8(wrapped_str);\n@@ -433,0 +439,2 @@\n+  default:\n+    ShouldNotReachHere();\n@@ -434,1 +442,0 @@\n-  ShouldNotReachHere();\n@@ -448,0 +455,2 @@\n+  default:\n+    ShouldNotReachHere();\n@@ -449,1 +458,0 @@\n-  ShouldNotReachHere();\n@@ -491,1 +499,1 @@\n-    const jchar *chars = to_unicode(name, length, CHECK_NULL);\n+    const jchar* chars = to_unicode(name, length, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+  static const char* get_symbol_utf8(StringWrapper symbol_str);\n@@ -88,1 +89,0 @@\n-  static void print_string(StringWrapper wrapped_str, int len, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,3 +261,0 @@\n-  \/\/ Returns the non-null-terminated utf8 string stored in the symbol\n-  const char* get_utf8() const { return reinterpret_cast<const char*>(bytes()); }\n-\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\/\/ Simple ASCII string \" Java(R)!! \"\n+\/\/ Simple ASCII string \"Java(R)!!\"\n@@ -35,1 +35,1 @@\n-\/\/ Complex string \" Jāvá®!☺☻ \", UTF8 has character lengths 13122133 = 16\n+\/\/ Complex string \"Jāvá®!☺☻\", UTF8 has character lengths 13122133 = 16\n","filename":"test\/hotspot\/gtest\/classfile\/test_stringConversion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}