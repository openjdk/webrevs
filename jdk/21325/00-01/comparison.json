{"files":[{"patch":"@@ -740,1 +740,1 @@\n-bool java_lang_String::equals(oop java_string, const jchar* chars, int num_unicode_points) {\n+bool java_lang_String::equals(oop java_string, const jchar* chars, int len) {\n@@ -745,1 +745,1 @@\n-  if (length != num_unicode_points) {\n+  if (length != len) {\n@@ -750,1 +750,1 @@\n-    for (int i = 0; i < num_unicode_points; i++) {\n+    for (int i = 0; i < len; i++) {\n@@ -756,1 +756,1 @@\n-    for (int i = 0; i < num_unicode_points; i++) {\n+    for (int i = 0; i < len; i++) {\n@@ -765,1 +765,1 @@\n-bool java_lang_String::equals(oop java_string, const char* utf8_string, int num_unicode_points) {\n+bool java_lang_String::equals(oop java_string, const char* utf8_string, int utf8_len) {\n@@ -770,1 +770,2 @@\n-  if (length != num_unicode_points) {\n+  int unicode_length = UTF8::unicode_length(utf8_string, utf8_len);\n+  if (length != unicode_length) {\n@@ -776,1 +777,1 @@\n-    for (int i = 0; i < num_unicode_points; i++) {\n+    for (int i = 0; i < unicode_length; i++) {\n@@ -783,1 +784,1 @@\n-    for (int i = 0; i < num_unicode_points; i++) {\n+    for (int i = 0; i < unicode_length; i++) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  static unsigned int hash_code(const char *utf8_str, int num_unicode_points) {\n+  static unsigned int hash_code(const char *utf8_str, int utf8_len) {\n@@ -186,0 +186,1 @@\n+    int num_unicode_points = UTF8::unicode_length(utf8_str, utf8_len);\n@@ -198,2 +199,3 @@\n-  static bool equals(oop java_string, const jchar* chars, int num_unicode_points);\n-  static bool equals(oop java_string, const char* chars, int num_unicode_points);\n+  \/\/ Compare strings (of different types\/encodings), length is the string (array) length\n+  static bool equals(oop java_string, const jchar* chars, int len);\n+  static bool equals(oop java_string, const char* utf8_str, int utf8_len);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-  bool equals(WeakHandle* value) {\n+  bool equals(const WeakHandle* value) {\n@@ -241,1 +241,1 @@\n-  int _len;\n+  int _utf8_len;\n@@ -244,2 +244,2 @@\n-  StringTableLookupUTF8(Thread* thread, uintx hash, const char* key, int len)\n-      : StringTableLookup(thread, hash), _str(key), _len(len) {}\n+  StringTableLookupUTF8(Thread* thread, uintx hash, const char* key, int utf8_len)\n+      : StringTableLookup(thread, hash), _str(key), _utf8_len(utf8_len) {}\n@@ -247,1 +247,1 @@\n-  bool equals(WeakHandle* value) {\n+  bool equals(const WeakHandle* value) {\n@@ -252,1 +252,1 @@\n-    bool equals = java_lang_String::equals(val_oop, _str, _len);\n+    bool equals = java_lang_String::equals(val_oop, _str, _utf8_len);\n@@ -411,1 +411,2 @@\n-const jchar *StringTable::to_unicode(StringWrapper wrapped_str, int len, TRAPS) {\n+\/\/ Converts and allocates to a unicode string and stores the unicode length in len\n+const jchar *StringTable::to_unicode(StringWrapper wrapped_str, int &len, TRAPS) {\n@@ -418,2 +419,5 @@\n-    jchar *chars = NEW_RESOURCE_ARRAY(jchar, len);\n-    UTF8::convert_to_unicode(wrapped_str.symbol_str->get_utf8(), chars, len);\n+    const char* utf8_str = wrapped_str.symbol_str->get_utf8();\n+    int unicode_length = UTF8::unicode_length(utf8_str, wrapped_str.symbol_str->utf8_length());\n+    jchar *chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n+    UTF8::convert_to_unicode(utf8_str, chars, unicode_length);\n+    len = unicode_length;\n@@ -423,2 +427,4 @@\n-    jchar *chars = NEW_RESOURCE_ARRAY(jchar, len);\n-    UTF8::convert_to_unicode(wrapped_str.utf8_str, chars, len);\n+    int unicode_length = UTF8::unicode_length(wrapped_str.utf8_str);\n+    jchar *chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n+    UTF8::convert_to_unicode(wrapped_str.utf8_str, chars, unicode_length);\n+    len = unicode_length;\n@@ -450,1 +456,2 @@\n-  int length = UTF8::unicode_length(symbol->get_utf8(), symbol->utf8_length());\n+  \/\/ int length = UTF8::unicode_length(symbol->get_utf8(), symbol->utf8_length());\n+  int length = symbol->utf8_length();\n@@ -467,1 +474,2 @@\n-  int length = UTF8::unicode_length(utf8_string);\n+  \/\/ int length = UTF8::unicode_length(utf8_string);\n+  int length = strlen(utf8_string);\n@@ -484,2 +492,3 @@\n-    const jchar *chars = to_unicode(name, len, CHECK_NULL);\n-    hash = hash_string(chars, len, true);\n+    int length = len;\n+    const jchar *chars = to_unicode(name, length, CHECK_NULL);\n+    hash = hash_string(chars, length, true);\n@@ -501,1 +510,0 @@\n-  assert(len == java_lang_String::length(string_h()), \"Must be same length\");\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  static const jchar *to_unicode(StringWrapper wrapped_str, int len, TRAPS);\n+  static const jchar *to_unicode(StringWrapper wrapped_str, int &len, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-void compare_utf8_utf8(const char* utf8_str1, const char* utf8_str2, int num_chars) {\n-    EXPECT_EQ(java_lang_String::hash_code(utf8_str1, num_chars), java_lang_String::hash_code(utf8_str2, num_chars));\n+void compare_utf8_utf8(const char* utf8_str1, const char* utf8_str2, int utf8_len) {\n+    EXPECT_EQ(java_lang_String::hash_code(utf8_str1, utf8_len), java_lang_String::hash_code(utf8_str2, utf8_len));\n@@ -48,2 +48,2 @@\n-void compare_utf8_unicode(const char* utf8_str, const jchar* unicode_str, int num_chars) {\n-    EXPECT_EQ(java_lang_String::hash_code(utf8_str, num_chars), java_lang_String::hash_code(unicode_str, num_chars));\n+void compare_utf8_unicode(const char* utf8_str, const jchar* unicode_str, int utf8_len, int unicode_len) {\n+    EXPECT_EQ(java_lang_String::hash_code(utf8_str, utf8_len), java_lang_String::hash_code(unicode_str, unicode_len));\n@@ -52,3 +52,3 @@\n-void compare_utf8_oop(const char* utf8_str, Handle oop_str, int num_chars) {\n-    EXPECT_EQ(java_lang_String::hash_code(utf8_str, num_chars), java_lang_String::hash_code(oop_str()));\n-    EXPECT_TRUE(java_lang_String::equals(oop_str(), utf8_str, num_chars));\n+void compare_utf8_oop(const char* utf8_str, Handle oop_str, int utf8_len, int unicode_len) {\n+    EXPECT_EQ(java_lang_String::hash_code(utf8_str, utf8_len), java_lang_String::hash_code(oop_str()));\n+    EXPECT_TRUE(java_lang_String::equals(oop_str(), utf8_str, utf8_len));\n@@ -57,3 +57,3 @@\n-void compare_unicode_unicode(const jchar* unicode_str1, const jchar* unicode_str2, int num_chars) {\n-    EXPECT_EQ(java_lang_String::hash_code(unicode_str1, num_chars), java_lang_String::hash_code(unicode_str2, num_chars));\n-    for (int i = 0; i < num_chars; i++) {\n+void compare_unicode_unicode(const jchar* unicode_str1, const jchar* unicode_str2, int unicode_len) {\n+    EXPECT_EQ(java_lang_String::hash_code(unicode_str1, unicode_len), java_lang_String::hash_code(unicode_str2, unicode_len));\n+    for (int i = 0; i < unicode_len; i++) {\n@@ -64,3 +64,3 @@\n-void compare_unicode_oop(const jchar* unicode_str, Handle oop_str, int num_chars) {\n-    EXPECT_EQ(java_lang_String::hash_code(unicode_str, num_chars), java_lang_String::hash_code(oop_str()));\n-    EXPECT_TRUE(java_lang_String::equals(oop_str(), unicode_str, num_chars));\n+void compare_unicode_oop(const jchar* unicode_str, Handle oop_str, int unicode_len) {\n+    EXPECT_EQ(java_lang_String::hash_code(unicode_str, unicode_len), java_lang_String::hash_code(oop_str()));\n+    EXPECT_TRUE(java_lang_String::equals(oop_str(), unicode_str, unicode_len));\n@@ -74,1 +74,1 @@\n-void test_utf8_convert(const char* utf8_str, int num_chars) {\n+void test_utf8_convert(const char* utf8_str, int utf8_len, int unicode_len) {\n@@ -82,2 +82,2 @@\n-    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, num_chars);\n-    UTF8::convert_to_unicode(utf8_str, unicode_str_from_utf8, num_chars);\n+    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, unicode_len);\n+    UTF8::convert_to_unicode(utf8_str, unicode_str_from_utf8, unicode_len);\n@@ -86,2 +86,2 @@\n-    compare_utf8_unicode(utf8_str, unicode_str_from_utf8, num_chars);\n-    compare_utf8_oop(utf8_str, oop_str_from_utf8, num_chars);\n+    compare_utf8_unicode(utf8_str, unicode_str_from_utf8, utf8_len, unicode_len);\n+    compare_utf8_oop(utf8_str, oop_str_from_utf8, utf8_len, unicode_len);\n@@ -89,1 +89,1 @@\n-    size_t length = num_chars;\n+    size_t length = unicode_len;\n@@ -96,2 +96,2 @@\n-    compare_utf8_utf8(utf8_str, utf8_str_from_unicode, num_chars);\n-    compare_utf8_utf8(utf8_str, utf8_str_from_oop, num_chars);\n+    compare_utf8_utf8(utf8_str, utf8_str_from_unicode, utf8_len);\n+    compare_utf8_utf8(utf8_str, utf8_str_from_oop, utf8_len);\n@@ -100,1 +100,1 @@\n-void test_unicode_convert(const jchar* unicode_str, int num_chars) {\n+void test_unicode_convert(const jchar* unicode_str, int utf8_len, int unicode_len) {\n@@ -106,1 +106,1 @@\n-    size_t length = num_chars;\n+    size_t length = unicode_len;\n@@ -108,1 +108,1 @@\n-    Handle oop_str_from_unicode = java_lang_String::create_from_unicode(unicode_str, num_chars, THREAD);\n+    Handle oop_str_from_unicode = java_lang_String::create_from_unicode(unicode_str, unicode_len, THREAD);\n@@ -112,2 +112,2 @@\n-    compare_utf8_unicode(utf8_str_from_unicode, unicode_str, num_chars);\n-    compare_unicode_oop(unicode_str, oop_str_from_unicode, num_chars);\n+    compare_utf8_unicode(utf8_str_from_unicode, unicode_str, utf8_len, unicode_len);\n+    compare_unicode_oop(unicode_str, oop_str_from_unicode, unicode_len);\n@@ -116,2 +116,2 @@\n-    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, num_chars);\n-    UTF8::convert_to_unicode(utf8_str_from_unicode, unicode_str_from_utf8, num_chars);\n+    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, unicode_len);\n+    UTF8::convert_to_unicode(utf8_str_from_unicode, unicode_str_from_utf8, unicode_len);\n@@ -120,2 +120,2 @@\n-    compare_unicode_unicode(unicode_str, unicode_str_from_utf8, num_chars);\n-    compare_unicode_unicode(unicode_str, unicode_str_from_oop, num_chars);\n+    compare_unicode_unicode(unicode_str, unicode_str_from_utf8, unicode_len);\n+    compare_unicode_unicode(unicode_str, unicode_str_from_oop, unicode_len);\n@@ -124,2 +124,2 @@\n-void test_utf8_unicode_cross(const char* utf8_str, const jchar* unicode_str, int num_chars) {\n-    compare_utf8_unicode(utf8_str, unicode_str, num_chars);\n+void test_utf8_unicode_cross(const char* utf8_str, const jchar* unicode_str, int utf8_len, int unicode_len) {\n+    compare_utf8_unicode(utf8_str, unicode_str, utf8_len, unicode_len);\n@@ -132,1 +132,1 @@\n-    size_t length = num_chars;\n+    size_t length = unicode_len;\n@@ -135,2 +135,2 @@\n-    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, num_chars);\n-    UTF8::convert_to_unicode(utf8_str, unicode_str_from_utf8, num_chars);\n+    jchar* unicode_str_from_utf8 = NEW_RESOURCE_ARRAY(jchar, unicode_len);\n+    UTF8::convert_to_unicode(utf8_str, unicode_str_from_utf8, unicode_len);\n@@ -138,1 +138,1 @@\n-    Handle oop_str_from_unicode = java_lang_String::create_from_unicode(unicode_str, num_chars, THREAD);\n+    Handle oop_str_from_unicode = java_lang_String::create_from_unicode(unicode_str, unicode_len, THREAD);\n@@ -141,2 +141,2 @@\n-    compare_utf8_utf8(utf8_str, utf8_str_from_unicode, num_chars);\n-    compare_utf8_oop(utf8_str, oop_str_from_unicode, num_chars);\n+    compare_utf8_utf8(utf8_str, utf8_str_from_unicode, utf8_len);\n+    compare_utf8_oop(utf8_str, oop_str_from_unicode, utf8_len, unicode_len);\n@@ -144,2 +144,2 @@\n-    compare_unicode_unicode(unicode_str, unicode_str_from_utf8, num_chars);\n-    compare_unicode_oop(unicode_str, oop_str_from_utf8, num_chars);\n+    compare_unicode_unicode(unicode_str, unicode_str_from_utf8, unicode_len);\n+    compare_unicode_oop(unicode_str, oop_str_from_utf8, unicode_len);\n@@ -147,2 +147,2 @@\n-    compare_utf8_oop(utf8_str_from_unicode, oop_str_from_utf8, num_chars);\n-    compare_unicode_oop(unicode_str_from_utf8, oop_str_from_unicode, num_chars);\n+    compare_utf8_oop(utf8_str_from_unicode, oop_str_from_utf8, utf8_len, unicode_len);\n+    compare_unicode_oop(unicode_str_from_utf8, oop_str_from_unicode, unicode_len);\n@@ -150,1 +150,1 @@\n-    compare_utf8_unicode(utf8_str_from_unicode, unicode_str_from_utf8, num_chars);\n+    compare_utf8_unicode(utf8_str_from_unicode, unicode_str_from_utf8, utf8_len, unicode_len);\n@@ -157,1 +157,1 @@\n-    test_utf8_convert(utf8_str, ASCII_LENGTH);\n+    test_utf8_convert(utf8_str, ASCII_LENGTH, ASCII_LENGTH);\n@@ -163,1 +163,1 @@\n-    test_utf8_convert(utf8_str, UNICODE_LENGTH);\n+    test_utf8_convert(utf8_str, UTF8_LENGTH, UNICODE_LENGTH);\n@@ -169,1 +169,1 @@\n-    test_unicode_convert(unicode_str, ASCII_LENGTH);\n+    test_unicode_convert(unicode_str, ASCII_LENGTH, ASCII_LENGTH);\n@@ -175,1 +175,1 @@\n-    test_unicode_convert(unicode_str, UNICODE_LENGTH);\n+    test_unicode_convert(unicode_str, UTF8_LENGTH, UNICODE_LENGTH);\n@@ -184,1 +184,1 @@\n-    test_utf8_unicode_cross(utf8_str, unicode_str, ASCII_LENGTH);\n+    test_utf8_unicode_cross(utf8_str, unicode_str, ASCII_LENGTH, ASCII_LENGTH);\n@@ -193,1 +193,1 @@\n-    test_utf8_unicode_cross(utf8_str, unicode_str, UNICODE_LENGTH);\n+    test_utf8_unicode_cross(utf8_str, unicode_str, UTF8_LENGTH, UNICODE_LENGTH);\n","filename":"test\/hotspot\/gtest\/classfile\/test_stringConversion.cpp","additions":49,"deletions":49,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -47,3 +47,2 @@\n-    int num_chars = UTF8::unicode_length(utf8_str, utf8_length);\n-    EXPECT_TRUE(java_lang_String::equals(interned_string_from_utf8, utf8_str, num_chars));\n-    EXPECT_EQ(java_lang_String::hash_code(utf8_str, num_chars),java_lang_String::hash_code(interned_string_from_utf8));\n+    EXPECT_TRUE(java_lang_String::equals(interned_string_from_utf8, utf8_str, utf8_length));\n+    EXPECT_EQ(java_lang_String::hash_code(utf8_str, utf8_length),java_lang_String::hash_code(interned_string_from_utf8));\n","filename":"test\/hotspot\/gtest\/classfile\/test_stringIntern.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}