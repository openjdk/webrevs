{"files":[{"patch":"@@ -184,1 +184,1 @@\n-  static unsigned int hash_code(const char *utf8_str, size_t utf8_len) {\n+  static unsigned int hash_code(const char* utf8_str, size_t utf8_len) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,2 @@\n-bool StringTable::wrapped_string_equals(oop java_string, StringWrapper wrapped_str, int _) {\n+\/\/ Unnamed int needed to fit CompactHashtable's equals type signature\n+bool StringTable::wrapped_string_equals(oop java_string, StringWrapper wrapped_str, int) {\n@@ -418,1 +419,1 @@\n-const jchar *StringTable::to_unicode(StringWrapper wrapped_str, int &len, TRAPS) {\n+const jchar* StringTable::to_unicode(StringWrapper wrapped_str, int &len, TRAPS) {\n@@ -421,0 +422,1 @@\n+    len = static_cast<int>(wrapped_str.length);\n@@ -423,0 +425,1 @@\n+    len = static_cast<int>(wrapped_str.length);\n@@ -427,1 +430,1 @@\n-    jchar *chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n+    jchar* chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n@@ -434,1 +437,1 @@\n-    jchar *chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n+    jchar* chars = NEW_RESOURCE_ARRAY(jchar, unicode_length);\n@@ -445,1 +448,1 @@\n-Handle StringTable::to_handle(StringWrapper wrapped_str, TRAPS) {\n+Handle StringTable::handle_from_wrapped_string(StringWrapper wrapped_str, TRAPS) {\n@@ -512,1 +515,1 @@\n-  Handle string_h = to_handle(name, CHECK_NULL);\n+  Handle string_h = handle_from_wrapped_string(name, CHECK_NULL);\n@@ -897,0 +900,1 @@\n+  \/\/ len is required but is already part of StringWrapper, so 0 is used\n@@ -902,1 +906,2 @@\n-  return _shared_table.lookup(wrapped_name, java_lang_String::hash_code(name, len), len);\n+  \/\/ len is required but is already part of StringWrapper, so 0 is used\n+  return _shared_table.lookup(wrapped_name, java_lang_String::hash_code(name, len), 0);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  \/\/ typedef enum { obj_str, unicode_str, symbol_str, utf8_str } StringType;\n@@ -83,1 +82,2 @@\n-  static bool wrapped_string_equals(oop java_string, StringWrapper wrapped_str, int _ = 0);\n+  \/\/ Unnamed int needed to fit CompactHashtable's equals type signature\n+  static bool wrapped_string_equals(oop java_string, StringWrapper wrapped_str, int = 0);\n@@ -88,2 +88,2 @@\n-  static const jchar *to_unicode(StringWrapper wrapped_str, int &len, TRAPS);\n-  static Handle to_handle(StringWrapper wrapped_str, TRAPS);\n+  static const jchar* to_unicode(StringWrapper wrapped_str, int &len, TRAPS);\n+  static Handle handle_from_wrapped_string(StringWrapper wrapped_str, TRAPS);\n@@ -122,1 +122,1 @@\n-  static oop intern(const char *utf8_string, TRAPS);\n+  static oop intern(const char* utf8_string, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}