{"files":[{"patch":"@@ -497,0 +497,10 @@\n+\n+        PlatformPackage thePackage = createMetaPackage(params);\n+\n+        new ScriptRunner()\n+              .setDirectory(thePackage.sourceRoot())\n+              .setResourceCategoryId(\"resource.post-app-image-script\")\n+              .setScriptNameSuffix(\"post-image\")\n+              .setEnvironmentVariable(\"JpAppImageDir\", thePackage.sourceRoot().toAbsolutePath().toString())\n+              .run(params);\n+\n@@ -502,2 +512,0 @@\n-        PlatformPackage thePackage = createMetaPackage(params);\n-\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxDebBundler.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -299,0 +299,9 @@\n+        PlatformPackage thePackage = createMetaPackage(params);\n+\n+        new ScriptRunner()\n+                .setDirectory(thePackage.sourceRoot())\n+                .setResourceCategoryId(\"resource.post-app-image-script\")\n+                .setScriptNameSuffix(\"post-image\")\n+                .setEnvironmentVariable(\"JpAppImageDir\", thePackage.sourceRoot().toAbsolutePath().toString())\n+                .run(params);\n+\n@@ -307,2 +316,0 @@\n-        PlatformPackage thePackage = createMetaPackage(params);\n-\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxRpmBundler.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -83,4 +83,6 @@\n-                Path configScript = getConfig_Script(params);\n-                if (IOUtils.exists(configScript)) {\n-                    IOUtils.run(\"bash\", configScript);\n-                }\n+                new ScriptRunner()\n+                        .setDirectory(appLocation)\n+                        .setResourceCategoryId(\"resource.post-app-image-script\")\n+                        .setScriptNameSuffix(\"post-image\")\n+                        .setEnvironmentVariable(\"JpAppImageDir\", appLocation.toAbsolutePath().toString())\n+                        .run(params);\n@@ -200,4 +202,0 @@\n-        createResource(null, params)\n-                .setCategory(I18N.getString(\"resource.post-install-script\"))\n-                .saveToFile(getConfig_Script(params));\n-\n@@ -211,6 +209,0 @@\n-    \/\/ name of post-image script\n-    private Path getConfig_Script(Map<String, ? super Object> params) {\n-        return CONFIG_ROOT.fetchFrom(params).resolve(\n-                APP_NAME.fetchFrom(params) + \"-post-image.sh\");\n-    }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -57,3 +57,0 @@\n-import static jdk.jpackage.internal.MacBaseInstallerBundler.SIGNING_KEYCHAIN;\n-import static jdk.jpackage.internal.MacBaseInstallerBundler.SIGNING_KEY_USER;\n-import static jdk.jpackage.internal.MacBaseInstallerBundler.INSTALLER_SIGN_IDENTITY;\n@@ -157,0 +154,1 @@\n+                prepareCPLFile(params, appImageDir);\n@@ -158,3 +156,2 @@\n-                Path configScript = getConfig_Script(params);\n-                if (IOUtils.exists(configScript)) {\n-                    IOUtils.run(\"bash\", configScript);\n+                if (withServicesPkg(params)) {\n+                    prepareServicesPkg(params);\n@@ -163,0 +160,11 @@\n+                if (!APP_STORE.fetchFrom(params)) {\n+                    preparePackageScripts(params);\n+                }\n+\n+                new ScriptRunner()\n+                        .setDirectory(appImageDir)\n+                        .setResourceCategoryId(\"resource.post-app-image-script\")\n+                        .setScriptNameSuffix(\"post-image\")\n+                        .setEnvironmentVariable(\"JpAppImageDir\", appImageDir.toAbsolutePath().toString())\n+                        .run(params);\n+\n@@ -363,4 +371,0 @@\n-        createResource(null, params)\n-                .setCategory(I18N.getString(\"resource.post-install-script\"))\n-                .saveToFile(getConfig_Script(params));\n-\n@@ -370,6 +374,0 @@\n-    \/\/ name of post-image script\n-    private Path getConfig_Script(Map<String, ? super Object> params) {\n-        return CONFIG_ROOT.fetchFrom(params).resolve(\n-                APP_NAME.fetchFrom(params) + \"-post-image.sh\");\n-    }\n-\n@@ -467,2 +465,1 @@\n-    private void createServicesPkg(Map<String, Object> params) throws\n-            IOException {\n+    private void prepareServicesPkg(Map<String, Object> params) throws IOException {\n@@ -485,13 +482,1 @@\n-        var pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n-                \"--root\",\n-                srcRoot.toString(),\n-                \"--install-location\",\n-                \"\/\",\n-                \"--scripts\",\n-                scriptsDir.toString(),\n-                \"--identifier\",\n-                getServicesIdentifier(params),\n-                getPackages_ServicesPackage(params).toAbsolutePath().toString());\n-        IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n-\n-        createSupportPkg(params, data);\n+        prepareSupportPkg(params, data);\n@@ -500,1 +485,1 @@\n-    private void createSupportPkg(Map<String, Object> params,\n+    private void prepareSupportPkg(Map<String, Object> params,\n@@ -521,0 +506,29 @@\n+    }\n+\n+    private void createServicesPkg(Map<String, Object> params) throws\n+            IOException {\n+        Path root = TEMP_ROOT.fetchFrom(params).resolve(\"services\");\n+\n+        Path srcRoot = root.resolve(\"src\");\n+\n+        Path scriptsDir = root.resolve(\"scripts\");\n+\n+        var pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n+                \"--root\",\n+                srcRoot.toString(),\n+                \"--install-location\",\n+                \"\/\",\n+                \"--scripts\",\n+                scriptsDir.toString(),\n+                \"--identifier\",\n+                getServicesIdentifier(params),\n+                getPackages_ServicesPackage(params).toAbsolutePath().toString());\n+        IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+\n+        createSupportPkg(params);\n+    }\n+\n+    private void createSupportPkg(Map<String, Object> params) throws IOException {\n+        Path root = TEMP_ROOT.fetchFrom(params).resolve(\"support\");\n+\n+        Path srcRoot = root.resolve(\"src\");\n@@ -533,0 +547,17 @@\n+    private void prepareCPLFile(Map<String, ? super Object> params, Path appLocation) throws IOException {\n+        String root = getRoot(params, appLocation);\n+        \/\/ Generate default CPL file\n+        Path cpl = CONFIG_ROOT.fetchFrom(params).resolve(\"cpl.plist\");\n+        ProcessBuilder pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n+                \"--root\",\n+                root,\n+                \"--install-location\",\n+                getInstallDir(params, false),\n+                \"--analyze\",\n+                cpl.toAbsolutePath().toString());\n+\n+        IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+\n+        patchCPLFile(cpl);\n+    }\n+\n@@ -545,11 +576,1 @@\n-            \/\/ Generate default CPL file\n-            Path cpl = CONFIG_ROOT.fetchFrom(params).resolve(\"cpl.plist\");\n-            ProcessBuilder pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n-                    \"--root\",\n-                    root,\n-                    \"--install-location\",\n-                    getInstallDir(params, false),\n-                    \"--analyze\",\n-                    cpl.toAbsolutePath().toString());\n-\n-            IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+            ProcessBuilder pb;\n@@ -557,1 +578,1 @@\n-            patchCPLFile(cpl);\n+            Path cpl = CONFIG_ROOT.fetchFrom(params).resolve(\"cpl.plist\");\n@@ -573,1 +594,0 @@\n-                preparePackageScripts(params);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":65,"deletions":45,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-resource.post-install-script=script to run after application image is populated\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+resource.post-app-image-script=script to run after application image is populated\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,8 +434,0 @@\n-\n-            new ScriptRunner()\n-            .setDirectory(imageDir)\n-            .setResourceCategoryId(\"resource.post-app-image-script\")\n-            .setScriptNameSuffix(\"post-image\")\n-            .setEnvironmentVariable(\"JpAppImageDir\", imageDir.toAbsolutePath().toString())\n-            .run(params);\n-\n@@ -603,0 +595,9 @@\n+        final var imageDir = WIN_APP_IMAGE.fetchFrom(params);\n+\n+        new ScriptRunner()\n+                .setDirectory(imageDir)\n+                .setResourceCategoryId(\"resource.post-app-image-script\")\n+                .setScriptNameSuffix(\"post-image\")\n+                .setEnvironmentVariable(\"JpAppImageDir\", imageDir.toAbsolutePath().toString())\n+                .run(params);\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-resource.post-app-image-script=script to run after application image is populated\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        assertFunc = MethodCallConfig.build(\"assertEquals\", String.class, String.class, String.class);\n+        assertFunc = MethodCallConfig.build(\"assertEquals\", Object.class, Object.class, String.class);\n@@ -71,1 +71,1 @@\n-        assertFunc = MethodCallConfig.build(\"assertNotEquals\", String.class, String.class, String.class);\n+        assertFunc = MethodCallConfig.build(\"assertNotEquals\", Object.class, Object.class, String.class);\n@@ -283,1 +283,1 @@\n-        final static class Builder {\n+        static final class Builder {\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/TKitTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,5 @@\n-        return new Comm<T>(common, unique1, unique2);\n+        return new Comm<>(common, unique1, unique2);\n+    }\n+\n+    public boolean uniqueEmpty() {\n+        return unique1.isEmpty() && unique2.isEmpty();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Comm.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,435 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.util.XmlUtils;\n+\n+public enum JPackageUserScript {\n+    POST_IMAGE(\"post-image\"),\n+    POST_MSI(\"post-msi\");\n+\n+    JPackageUserScript(String suffix) {\n+        if (TKit.isWindows()) {\n+            this.suffix = suffix + \".wsf\";\n+        } else {\n+            this.suffix = suffix + \".sh\";\n+        }\n+    }\n+\n+    public enum WinGlobals {\n+        JS_SHELL(\"var shell = new ActiveXObject('WScript.Shell')\"),\n+        JS_FS(\"var fs = new ActiveXObject('Scripting.FileSystemObject')\");\n+\n+        WinGlobals(String expr) {\n+            this.expr = expr;\n+        }\n+\n+        public String expr() {\n+            return expr;\n+        }\n+\n+        private final String expr;\n+    }\n+\n+    public void create(JPackageCommand cmd, List<String> script) {\n+        create(scriptPath(cmd), script);\n+    }\n+\n+    public static class PackagingDirectoryVerifierBuilder {\n+\n+        public PackagingDirectoryVerifierBuilder withUnchangedDirectory(Path v) {\n+            unchangedDirectories.add(verifyPath(v));\n+            return this;\n+        }\n+\n+        public PackagingDirectoryVerifierBuilder withUnchangedDirectory(String v) {\n+            return withUnchangedDirectory(Path.of(v));\n+        }\n+\n+        public PackagingDirectoryVerifierBuilder withEmptyDirectory(Path v) {\n+            emptyDirectories.add(verifyPath(v));\n+            return this;\n+        }\n+\n+        public PackagingDirectoryVerifierBuilder withEmptyDirectory(String v) {\n+            return withEmptyDirectory(Path.of(v));\n+        }\n+\n+        public PackagingDirectoryVerifierBuilder withNonexistantPath(Path v) {\n+            nonexistantPaths.add(verifyPath(v));\n+            return this;\n+        }\n+\n+        public PackagingDirectoryVerifierBuilder withNonexistantPath(String v) {\n+            return withNonexistantPath(Path.of(v));\n+        }\n+\n+        public PackageTest apply(PackageTest test) {\n+            return verifyPackagingDirectories(test, unchangedDirectories, emptyDirectories, nonexistantPaths);\n+        }\n+\n+        private Path verifyPath(Path v) {\n+            if (v.isAbsolute() ) {\n+                throw new IllegalArgumentException();\n+            }\n+            return v;\n+        }\n+\n+        private final List<Path> unchangedDirectories = new ArrayList<>();\n+        private final List<Path> emptyDirectories = new ArrayList<>();\n+        private final List<Path> nonexistantPaths = new ArrayList<>();\n+    }\n+\n+    public static PackagingDirectoryVerifierBuilder verifyPackagingDirectories() {\n+        return new PackagingDirectoryVerifierBuilder();\n+    }\n+\n+    public static PackageTest verifyPackagingDirectories(PackageTest test) {\n+        return new PackagingDirectoryVerifierBuilder().apply(test);\n+    }\n+\n+    public interface EnvVarVerifier {\n+        boolean isEmpty();\n+        List<String> createScript();\n+        void verify(Map<String, Object> envVarsWithExpectedValues);\n+    }\n+\n+    public interface ExpectedEnvVarValue {\n+        Object fromString(String v);\n+        Object value();\n+\n+        static ExpectedEnvVarValue create(Object expectedValue, Function<String, Object> conv) {\n+            Objects.requireNonNull(expectedValue);\n+            Objects.requireNonNull(conv);\n+            return new ExpectedEnvVarValue() {\n+\n+                @Override\n+                public Object fromString(String v) {\n+                    return conv.apply(v);\n+                }\n+\n+                @Override\n+                public Object value() {\n+                    return expectedValue;\n+                }\n+            };\n+        }\n+    }\n+\n+    public static final class EnvVarVerifierBuilder {\n+\n+        public EnvVarVerifierBuilder outputDir(Path v) {\n+            outputDir = v;\n+            return this;\n+        }\n+\n+        public EnvVarVerifierBuilder envVar(String v) {\n+            envVarNames.add(v);\n+            return this;\n+        }\n+\n+        public EnvVarVerifier create() {\n+            return new DefaultEnvVarVerifier(envVarNames, Optional.ofNullable(outputDir).orElseGet(() -> {\n+                return TKit.createTempDirectory(\"env-vars\");\n+            }).toAbsolutePath());\n+        }\n+\n+        private final Set<String> envVarNames = new HashSet<>();\n+        private Path outputDir;\n+    }\n+\n+    public static EnvVarVerifierBuilder verifyEnvVariables() {\n+        return new EnvVarVerifierBuilder();\n+    }\n+\n+    private record DefaultEnvVarVerifier(Set<String> envVarNames, Path outputDir) implements EnvVarVerifier {\n+        DefaultEnvVarVerifier {\n+            Objects.requireNonNull(envVarNames);\n+            Objects.requireNonNull(outputDir);\n+        }\n+\n+        @Override\n+        public boolean isEmpty() {\n+            return envVarNames.isEmpty();\n+        }\n+\n+        @Override\n+        public List<String> createScript() {\n+            final List<String> script = new ArrayList<>();\n+\n+            if (TKit.isWindows()) {\n+                script.add(WinGlobals.JS_SHELL.expr());\n+                script.add(WinGlobals.JS_FS.expr());\n+            }\n+\n+            script.addAll(envVarNames.stream().sorted().map(envVarName -> {\n+                final var outputFile = outputDir.resolve(envVarName);\n+                if (TKit.isWindows()) {\n+                    return Stream.of(\n+                            String.format(\"WScript.Echo('Env var: %s')\", envVarName),\n+                            \"{\",\n+                            String.format(\"    var o = fs.CreateTextFile('%s', true)\", outputFile.toString().replace('\\\\', '\/')),\n+                            String.format(\"    o.Write(shell.ExpandEnvironmentStrings('%%%s%%'))\", envVarName),\n+                            \"    o.Close()\",\n+                            \"}\"\n+                    );\n+                } else {\n+                    return Stream.of(\n+                            String.format(\"printf 'Env var: %%s\\\\n' '%s'\", envVarName),\n+                            String.format(\"printf '%%s' \\\"${%s}\\\" > '%s'\", envVarName, outputFile)\n+                    );\n+                }\n+            }).flatMap(x -> x).toList());\n+\n+            return script;\n+        }\n+\n+        @Override\n+        public void verify(Map<String, Object> envVarsWithExpectedValues) {\n+            if (!Comm.compare(envVarNames, envVarsWithExpectedValues.keySet()).uniqueEmpty()) {\n+                throw new IllegalArgumentException();\n+            }\n+            try {\n+                for (final var envVarName : envVarNames.stream().sorted().toList()) {\n+                    Object actualValue = Files.readString(outputDir.resolve(envVarName));\n+                    Object expetedValue = envVarsWithExpectedValues.get(envVarName);\n+                    if (expetedValue instanceof ExpectedEnvVarValue ext) {\n+                        actualValue = ext.fromString((String)actualValue);\n+                        expetedValue = ext.value();\n+                    }\n+                    TKit.assertEquals(expetedValue, actualValue, String.format(\"Check value of [%s] environment variable\", envVarName));\n+                }\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }\n+    }\n+\n+    private void create(Path scriptFilePath, List<String> script) {\n+        try {\n+            if (TKit.isWindows()) {\n+                XmlUtils.createXml(scriptFilePath, xml -> {\n+                    xml.writeStartElement(\"job\");\n+                    xml.writeAttribute(\"id\", \"main\");\n+                    xml.writeStartElement(\"script\");\n+                    xml.writeAttribute(\"language\", \"JScript\");\n+                    xml.writeCData(\"\\n\" + String.join(\"\\n\", script) + \"\\n\");\n+                    xml.writeEndElement();\n+                    xml.writeEndElement();\n+                });\n+            } else {\n+                Files.write(scriptFilePath, script);\n+            }\n+            TKit.traceFileContents(scriptFilePath, String.format(\"[%s] script\", name()));\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private Path scriptPath(JPackageCommand cmd) {\n+        return Path.of(cmd.getArgumentValue(\"--resource-dir\"), String.format(\"%s-%s\", cmd.name(), suffix));\n+    }\n+\n+    private static PackageTest verifyPackagingDirectories(PackageTest test,\n+            List<Path> additionalUnchangedDirectories, List<Path> additionalEmptyDirectories, List<Path> additionalNonexistantPaths) {\n+\n+        final Map<PackageType, Path> capturedConfigDirs = new HashMap<>();\n+        final Map<PackageType, Path> capturedAppImageDirs = new HashMap<>();\n+        final var capturedAdditionalDirs = Stream.generate(() -> {\n+            return new HashMap<PackageType, Path>();\n+        }).limit(additionalUnchangedDirectories.size()).toList();\n+\n+        return test.addInitializer(cmd -> {\n+            setupDirectory(cmd, \"temp\", \"--temp\");\n+            setupDirectory(cmd, \"resources\", \"--resource-dir\");\n+\n+            final var configDirContets = TKit.createTempFile(addPkgTypeSuffix(\"config-listing\", cmd) + \".txt\").toAbsolutePath();\n+            capturedConfigDirs.put(cmd.packageType(), configDirContets);\n+\n+            final var appImageDirContets = TKit.createTempFile(addPkgTypeSuffix(\"app-image-listing\", cmd) + \".txt\").toAbsolutePath();\n+            capturedAppImageDirs.put(cmd.packageType(), appImageDirContets);\n+\n+            final var additionalDirContets = IntStream.range(0, additionalUnchangedDirectories.size()).mapToObj(i -> {\n+                return String.format(\"additional-dir-%d\", i);\n+            }).map(name -> {\n+                return addPkgTypeSuffix(name, cmd) + \".txt\";\n+            }).map(TKit::createTempFile).map(Path::toAbsolutePath).toList();\n+            for (int i = 0; i != additionalUnchangedDirectories.size(); i++) {\n+                capturedAdditionalDirs.get(i).put(cmd.packageType(), additionalDirContets.get(i));\n+            }\n+\n+            final List<String> script = new ArrayList<>();\n+            if (TKit.isWindows()) {\n+                script.addAll(List.of(\n+                        \"function listDir (dir) {\",\n+                        \"    o.WriteLine(dir.Path)\",\n+                        \"    for(var e = new Enumerator(dir.Files); !e.atEnd(); e.moveNext()) {\",\n+                        \"        o.WriteLine(e.item().Path)\",\n+                        \"    }\",\n+                        \"    for(var e = new Enumerator(dir.SubFolders); !e.atEnd(); e.moveNext()) {\",\n+                        \"        listDir(e.item())\",\n+                        \"    }\",\n+                        \"}\",\n+                        WinGlobals.JS_FS.expr(),\n+                        WinGlobals.JS_SHELL.expr(),\n+                        String.format(\"var o = fs.CreateTextFile('%s', true)\", configDirContets.toString().replace('\\\\', '\/')),\n+                        \"var configDir = fs.GetFolder(fs.GetParentFolderName(WScript.ScriptFullName))\",\n+                        \"listDir(configDir)\",\n+                        \"o.Close()\",\n+                        String.format(\"o = fs.CreateTextFile('%s', true)\", appImageDirContets.toString().replace('\\\\', '\/')),\n+                        \"listDir(fs.GetFolder(shell.CurrentDirectory))\",\n+                        \"o.Close()\"\n+                ));\n+            } else {\n+                script.addAll(List.of(\n+                        \"set -e\",\n+                        String.format(\"find \\\"${0%%\/*}\\\" >> '%s'\", configDirContets),\n+                        String.format(\"find \\\"$PWD\\\" >> '%s'\", appImageDirContets)\n+                ));\n+            }\n+\n+            script.addAll(IntStream.range(0, additionalUnchangedDirectories.size()).mapToObj(i -> {\n+                final var dirAsStr = additionalPathInScript(additionalUnchangedDirectories.get(i));\n+                final var captureFile = additionalDirContets.get(i);\n+                if (TKit.isWindows()) {\n+                    return Stream.of(\n+                            String.format(\"WScript.Echo('Save directory listing: ' + %s)\", dirAsStr),\n+                            String.format(\"o = fs.CreateTextFile('%s', true)\", captureFile.toString().replace('\\\\', '\/')),\n+                            String.format(\"listDir(fs.GetFolder(%s))\", dirAsStr),\n+                            \"o.Close()\"\n+                    );\n+                } else {\n+                    return Stream.of(\n+                            String.format(\"printf 'Save directory listing: %%s\\\\n' %s\", dirAsStr),\n+                            String.format(\"find %s >> '%s'\", dirAsStr, captureFile)\n+                    );\n+                }\n+            }).flatMap(x -> x).toList());\n+\n+            script.addAll(additionalEmptyDirectories.stream().map(JPackageUserScript::additionalPathInScript).map(dirAsStr -> {\n+                if (TKit.isWindows()) {\n+                    return Stream.of(\n+                            String.format(\"WScript.Echo('Check directory: ' + %s)\", dirAsStr),\n+                            \"{\",\n+                            \"    WScript.Echo('  exists')\",\n+                            String.format(\"    var f = fs.GetFolder(%s)\", dirAsStr),\n+                            \"    WScript.Echo('  is empty')\",\n+                            \"    if (f.SubFolders.Count != 0 || f.Files.Count != 0) WScript.Quit(1)\",\n+                            \"}\"\n+                    );\n+                } else {\n+                    return Stream.of(\n+                            String.format(\"printf 'Check directory: %%s\\\\n' %s\", dirAsStr),\n+                            \"echo '  exists'\",\n+                            String.format(\"[ -d %s ]\", dirAsStr),\n+                            \"echo '  is empty'\",\n+                            \"exec 3>&1\",\n+                            String.format(\"[ -z \\\"$(find %s -mindepth 1 -maxdepth 1 3>&- | tee \/dev\/fd\/3)\\\" ]\", dirAsStr),\n+                            \"exec 3>&-\"\n+                    );\n+                }\n+            }).flatMap(x -> x).toList());\n+\n+            script.addAll(additionalNonexistantPaths.stream().map(JPackageUserScript::additionalPathInScript).map(pathAsStr -> {\n+                if (TKit.isWindows()) {\n+                    return Stream.of(\n+                            String.format(\"WScript.Echo('Check nonexistant: ' + %s)\", pathAsStr),\n+                            String.format(\"if (fs.FileExists(%s) || fs.FolderExists(%s)) WScript.Quit(1)\", pathAsStr, pathAsStr)\n+                    );\n+                } else {\n+                    return Stream.of(\n+                            String.format(\"printf 'Check nonexistant: %%s\\\\n' %s\", pathAsStr),\n+                            String.format(\"[ ! -e %s ]\", pathAsStr)\n+                    );\n+                }\n+            }).flatMap(x -> x).toList());\n+\n+            POST_IMAGE.create(cmd, script);\n+        }).addBundleVerifier(cmd -> {\n+            final var configDir = verifyDirectoryContents(capturedConfigDirs.get(cmd.packageType()));\n+            verifyDirectoryContents(capturedAppImageDirs.get(cmd.packageType()));\n+            for (final var v : capturedAdditionalDirs) {\n+                verifyDirectoryContents(v.get(cmd.packageType()));\n+            }\n+            additionalNonexistantPaths.forEach(path -> {\n+                TKit.assertPathExists(configDir.resolve(path), true);\n+            });\n+            additionalEmptyDirectories.forEach(path -> {\n+                TKit.assertDirectoryNotEmpty(configDir.resolve(path));\n+            });\n+        });\n+    }\n+\n+    private static String additionalPathInScript(Path path) {\n+        path = path.normalize();\n+        if (TKit.isWindows()) {\n+            return String.format(\"configDir.Path + '\/%s'\", path.toString().replace('\\\\', '\/'));\n+        } else {\n+            return String.format(\"\\\"${0%%\/*}\\\"'\/%s'\", path);\n+        }\n+    }\n+\n+    private static Path verifyDirectoryContents(Path fileWithExpectedDirContents) throws IOException {\n+        TKit.trace(String.format(\"Process [%s] file...\", fileWithExpectedDirContents));\n+\n+        final var data = Files.readAllLines(fileWithExpectedDirContents);\n+        final var dir = Path.of(data.getFirst());\n+        final var capturedDirContents = data.stream().skip(1).map(Path::of).map(dir::relativize).toList();\n+\n+        \/\/ Verify new files are not created in the \"config\" directory after the script execution.\n+        TKit.assertDirectoryContentRecursive(dir).removeAll(capturedDirContents).match();\n+\n+        return dir;\n+    }\n+\n+    private static Path setupDirectory(JPackageCommand cmd, String role, String argName) {\n+        if (!cmd.hasArgument(argName)) {\n+            cmd.setArgumentValue(argName, TKit.createTempDirectory(addPkgTypeSuffix(role, cmd)));\n+        }\n+\n+        return Path.of(cmd.getArgumentValue(argName));\n+    }\n+\n+    private static String addPkgTypeSuffix(String str, JPackageCommand cmd) {\n+        cmd.verifyIsOfType(PackageType.NATIVE);\n+        Objects.requireNonNull(str);\n+        return String.format(\"%s-%s\", str, cmd.packageType().getType());\n+    }\n+\n+    private final String suffix;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageUserScript.java","additions":435,"deletions":0,"binary":false,"changes":435,"status":"added"},{"patch":"@@ -312,1 +312,1 @@\n-        Long packageSize = LinuxHelper.getInstalledPackageSizeKB(cmd);\n+        long packageSize = LinuxHelper.getInstalledPackageSizeKB(cmd);\n@@ -314,1 +314,1 @@\n-        TKit.assertNotEquals(0L, packageSize, String.format(\n+        TKit.assertNotEquals(0, packageSize, String.format(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -659,1 +659,1 @@\n-    public static void assertEquals(String expected, String actual, String msg) {\n+    public static void assertEquals(Object expected, Object actual, String msg) {\n@@ -671,1 +671,1 @@\n-    public static void assertNotEquals(String expected, String actual, String msg) {\n+    public static void assertNotEquals(Object expected, Object actual, String msg) {\n@@ -763,1 +763,1 @@\n-                        TKit.assertTrue(actualIsEmpty, String.format(\"Check [%s] is not an empty directory\", path));\n+                        TKit.assertTrue(actualIsEmpty, String.format(\"Check [%s] is an empty directory\", path));\n@@ -765,1 +765,1 @@\n-                        TKit.assertTrue(!actualIsEmpty, String.format(\"Check [%s] is an empty directory\", path));\n+                        TKit.assertTrue(!actualIsEmpty, String.format(\"Check [%s] is not an empty directory\", path));\n@@ -806,1 +806,5 @@\n-        return new DirectoryContentVerifier(dir);\n+        return new DirectoryContentVerifier(dir, ThrowingSupplier.toSupplier(() -> {\n+            try (var files = Files.list(dir)) {\n+                return files.map(Path::getFileName).collect(toSet());\n+            }\n+        }).get());\n@@ -809,8 +813,7 @@\n-    public static final class DirectoryContentVerifier {\n-        public DirectoryContentVerifier(Path baseDir) {\n-            this(baseDir, ThrowingSupplier.toSupplier(() -> {\n-                try (var files = Files.list(baseDir)) {\n-                    return files.map(Path::getFileName).collect(toSet());\n-                }\n-            }).get());\n-        }\n+    public static DirectoryContentVerifier assertDirectoryContentRecursive(Path dir) {\n+        return new DirectoryContentVerifier(dir, ThrowingSupplier.toSupplier(() -> {\n+            try (var files = Files.walk(dir).skip(1)) {\n+                return files.map(dir::relativize).collect(toSet());\n+            }\n+        }).get());\n+    }\n@@ -818,0 +821,1 @@\n+    public static final class DirectoryContentVerifier {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        TKit.assertNotEquals(0, countStrings.apply(List.of(expectedPrefix)),\n+        TKit.assertNotEquals(0, countStrings.apply(List.of(expectedPrefix)).longValue(),\n@@ -174,1 +174,1 @@\n-        TKit.assertEquals(0, countStrings.apply(unexpectedPrefixes),\n+        TKit.assertEquals(0, countStrings.apply(unexpectedPrefixes).longValue(),\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static jdk.internal.util.OperatingSystem.LINUX;\n+import static jdk.internal.util.OperatingSystem.MACOS;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.ApplicationLayout;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageUserScript;\n+import jdk.jpackage.test.JPackageUserScript.WinGlobals;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with user-supplied post app image script\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @compile -Xlint:all -Werror PostImageScriptTest.java\n+ * @run main\/othervm\/timeout=720 -Xmx512m\n+ *  jdk.jpackage.test.Main\n+ *  --jpt-run=PostImageScriptTest\n+ *\/\n+\n+public class PostImageScriptTest {\n+\n+    public enum Mode {\n+        APP,\n+        RUNTIME,\n+        EXTERNAL_APP_IMAGE\n+    }\n+\n+    public record TestSpec(Mode mode, boolean verifyAppImageContents) {\n+\n+        public TestSpec {\n+            Objects.requireNonNull(mode);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            final var sb = new StringBuilder();\n+            sb.append(mode);\n+            if (verifyAppImageContents) {\n+                sb.append(\"; verifyAppImageContents\");\n+            }\n+            return sb.toString();\n+        }\n+\n+        static PackageTest createTest(Mode mode, PackageType... types) {\n+            if (types.length > 0 && Stream.of(types).allMatch(Predicate.not(PackageType::isEnabled))) {\n+                throw TKit.throwSkippedException(String.format(\"All native packagers from %s list are disabled\", List.of(types)));\n+            }\n+\n+            final var test = new PackageTest().forTypes(types);\n+\n+            final var appImageCmd = JPackageCommand.helloAppImage()\n+                    .setFakeRuntime().setArgumentValue(\"--dest\", TKit.createTempDirectory(\"appimage\"));\n+\n+            appImageCmd.execute();\n+\n+            switch (mode) {\n+                case APP -> {\n+                    test.configureHelloApp();\n+                    test.addInitializer(cmd -> {\n+                        cmd.addArguments(\"--runtime-image\", appImageCmd.appRuntimeDirectory());\n+                    });\n+                }\n+                case RUNTIME -> {\n+                    test.addInitializer(cmd -> {\n+                        cmd.removeArgumentWithValue(\"--input\");\n+                        cmd.addArguments(\"--runtime-image\", appImageCmd.appRuntimeDirectory());\n+                    });\n+                }\n+                case EXTERNAL_APP_IMAGE -> {\n+                    test.addInitializer(cmd -> {\n+                        cmd.removeArgumentWithValue(\"--input\");\n+                        cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                    });\n+                }\n+            }\n+\n+            test.addInitializer(cmd -> {\n+                cmd.setArgumentValue(\"--resource-dir\", TKit.createTempDirectory(\"resources\"));\n+            });\n+\n+            return test;\n+        }\n+\n+        PackageTest createTest() {\n+            return createTest(mode);\n+        }\n+\n+        PackageTest initTest() {\n+            return initTest(createTest());\n+        }\n+\n+        PackageTest initTest(PackageTest test) {\n+            if (verifyAppImageContents) {\n+                test.addInitializer(cmd -> {\n+                    final Path runtimeDir;\n+                    if (TKit.isLinux()) {\n+                        runtimeDir = Path.of(\"\/\").relativize(cmd.appRuntimeDirectory());\n+                    } else if (!cmd.isRuntime()) {\n+                        runtimeDir = ApplicationLayout.platformAppImage().runtimeHomeDirectory();\n+                    } else if (TKit.isOSX()) {\n+                        runtimeDir = Path.of(\"Contents\/Home\");\n+                    } else {\n+                        runtimeDir = Path.of(\"\");\n+                    }\n+\n+                    final Path runtimeBinDir = runtimeDir.resolve(\"bin\");\n+\n+                    if (TKit.isWindows()) {\n+                        JPackageUserScript.POST_IMAGE.create(cmd, List.of(\n+                                WinGlobals.JS_SHELL.expr(),\n+                                WinGlobals.JS_FS.expr(),\n+                                \"WScript.Echo('PWD: ' + fs.GetFolder(shell.CurrentDirectory).Path)\",\n+                                String.format(\"WScript.Echo('Probe directory: %s')\", runtimeBinDir),\n+                                String.format(\"fs.GetFolder('%s')\", runtimeBinDir.toString().replace('\\\\', '\/'))\n+                        ));\n+                    } else {\n+                        JPackageUserScript.POST_IMAGE.create(cmd, List.of(\n+                                \"set -e\",\n+                                \"printf 'PWD: %s\\\\n' \\\"$PWD\\\"\",\n+                                String.format(\"printf 'Probe directory: %%s\\\\n' '%s'\", runtimeBinDir),\n+                                String.format(\"[ -d '%s' ]\", runtimeBinDir)\n+                        ));\n+                    }\n+                });\n+            } else {\n+                JPackageUserScript.verifyPackagingDirectories(test);\n+            }\n+\n+            return test;\n+        }\n+    }\n+\n+    @Test\n+    @ParameterSupplier(value=\"createVerifyAppImageContentsTestSpecs\")\n+    @ParameterSupplier(value=\"createVerifyNoNewFilesInDirectoriesTestSpecs\")\n+    public static void test(TestSpec spec) {\n+        spec.initTest().run(Action.CREATE);\n+    }\n+\n+    public static Collection<Object[]> createVerifyAppImageContentsTestSpecs() {\n+        return createModeTestSpecs(true);\n+    }\n+\n+    public static Collection<Object[]> createVerifyNoNewFilesInDirectoriesTestSpecs() {\n+        return createModeTestSpecs(false);\n+    }\n+\n+    @Test(ifOS = LINUX)\n+    @ParameterSupplier(value=\"createVerifyAppImageContentsTestSpecs\")\n+    public static void testWithInstallDir(TestSpec spec) {\n+        spec.initTest(spec.createTest().addInitializer(cmd -> {\n+            cmd.addArguments(\"--install-dir\", \"\/usr\");\n+        })).run(Action.CREATE);\n+    }\n+\n+    @Test(ifOS = MACOS)\n+    @Parameter(\"APP\")\n+    public static void testWithServices(Mode mode) {\n+        final var test = TestSpec.createTest(mode, PackageType.MAC_PKG).addInitializer(cmd -> {\n+            cmd.addArgument(\"--launcher-as-service\");\n+        });\n+\n+        JPackageUserScript.verifyPackagingDirectories()\n+                .withUnchangedDirectory(\"..\/services\")\n+                .withUnchangedDirectory(\"..\/support\")\n+                .withEmptyDirectory(\"..\/packages\")\n+                .apply(test).run(Action.CREATE);\n+    }\n+\n+    @Test\n+    public static void testEnvVars() {\n+        final Map<PackageType, JPackageUserScript.EnvVarVerifier> verifiers = new HashMap<>();\n+\n+        final var imageDirOutputPrefix = \"image-dir=\";\n+\n+        TestSpec.createTest(Mode.APP).addInitializer(cmd -> {\n+            final var verifier = JPackageUserScript.verifyEnvVariables().envVar(\"JpAppImageDir\").create();\n+            verifiers.put(cmd.packageType(), verifier);\n+\n+            final List<String> script = new ArrayList<>();\n+            script.addAll(verifier.createScript());\n+            if (TKit.isWindows()) {\n+                script.add(\"WScript.Echo('\" + imageDirOutputPrefix + \"' + fs.GetFolder(shell.CurrentDirectory).Path)\");\n+            } else {\n+                script.add(\"printf '\" + imageDirOutputPrefix + \"%s\\\\n' \\\"$PWD\\\"\");\n+            }\n+\n+            JPackageUserScript.POST_IMAGE.create(cmd, script);\n+\n+            cmd.saveConsoleOutput(true);\n+\n+        }).addBundleVerifier((cmd, result) -> {\n+            final var imageDir = result.stdout().getOutput().stream().map(String::stripLeading).filter(str -> {\n+                return str.startsWith(imageDirOutputPrefix);\n+            }).map(str -> {\n+                return str.substring(imageDirOutputPrefix.length());\n+            }).findFirst().orElseThrow();\n+            final var verifier = verifiers.get(cmd.packageType());\n+            \/\/ On macOS, the path to app image set from jpackage starts with \"\/var\"\n+            \/\/ and the value of `PWD` variable in the \"post-image\" script is a path\n+            \/\/ starting with \"\/private\/var\", which is a target of \"\/var\" symlink.\n+            \/\/\n+            \/\/ Can't use Path.toRealPath() to resolve symlinks because the app image directory is gone.\n+            \/\/\n+            \/\/ Instead, the workaround is to strip all leading path components\n+            \/\/ before the path component starting with \"jdk.jpackage\" substring.\n+            verifier.verify(Map.of(\"JpAppImageDir\", JPackageUserScript.ExpectedEnvVarValue.create(\n+                    stripLeadingNonJPackagePathComponents(imageDir),\n+                    PostImageScriptTest::stripLeadingNonJPackagePathComponents)));\n+        }).run(Action.CREATE);\n+    }\n+\n+    private static Collection<Object[]> createModeTestSpecs(boolean verifyAppImageContents) {\n+        return Stream.of(Mode.values()).map(mode -> {\n+            return new TestSpec(mode, verifyAppImageContents);\n+        }).map(spec -> {\n+            return new Object[] {spec};\n+        }).toList();\n+    }\n+\n+    private static Path stripLeadingNonJPackagePathComponents(String path) {\n+        if (!Path.of(path).isAbsolute()) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        final var m = JPACKAGE_TEMP_DIR_REGEXP.matcher(path);\n+        if (!m.find()) {\n+            TKit.assertUnexpected(String.format(\"jpackage temp directory not foind in [%s] path\", path));\n+        }\n+\n+        return Path.of(m.group());\n+    }\n+\n+    private static final Pattern JPACKAGE_TEMP_DIR_REGEXP = Pattern.compile(\"[\\\\\\\\\/]jdk\\\\.jpackage.+$\",\n+            TKit.isWindows() ? 0 : Pattern.CASE_INSENSITIVE);\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/PostImageScriptTest.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"},{"patch":"@@ -27,5 +27,0 @@\n-import jdk.jpackage.internal.util.XmlUtils;\n-import jdk.jpackage.test.TKit;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.Annotations.Test;\n@@ -34,0 +29,1 @@\n+import jdk.jpackage.test.Annotations.Test;\n@@ -35,0 +31,5 @@\n+import jdk.jpackage.test.JPackageUserScript;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n@@ -110,1 +111,1 @@\n-        test.run();\n+        test.run(Action.CREATE);\n@@ -118,1 +119,1 @@\n-                scriptSuffixName = \"post-image\";\n+                script = JPackageUserScript.POST_IMAGE;\n@@ -122,1 +123,1 @@\n-                scriptSuffixName = \"post-msi\";\n+                script = JPackageUserScript.POST_MSI;\n@@ -152,7 +153,1 @@\n-           XmlUtils.createXml(Path.of(cmd.getArgumentValue(\"--resource-dir\"),\n-                    String.format(\"%s-%s.wsf\", cmd.name(), scriptSuffixName)), xml -> {\n-                xml.writeStartElement(\"job\");\n-                xml.writeAttribute(\"id\", \"main\");\n-                xml.writeStartElement(\"script\");\n-                xml.writeAttribute(\"language\", \"JScript\");\n-                xml.writeCData(String.join(\"\\n\", List.of(\n+            script.create(cmd, List.of(\n@@ -164,4 +159,1 @@\n-                )));\n-                xml.writeEndElement();\n-                xml.writeEndElement();\n-            });\n+            ));\n@@ -171,1 +163,1 @@\n-        private final String scriptSuffixName;\n+        private final JPackageUserScript script;\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinScriptTest.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"}]}