{"files":[{"patch":"@@ -24,3 +24,0 @@\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileWriter;\n@@ -28,2 +25,0 @@\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n@@ -35,3 +30,0 @@\n-    private static final String FS = File.separator;\n-    private static final Path CWD = Paths.get(\".\");\n-    private static final String processIdFilePath = CWD + FS + \"process.tmp\";\n@@ -40,1 +32,0 @@\n-\n@@ -44,23 +35,0 @@\n-\n-        File file = new File(processIdFilePath);\n-        BufferedWriter writer = null;\n-        try {\n-            if (file.createNewFile()) {\n-                logger.info(file.getAbsolutePath().toString());\n-                writer = new BufferedWriter(new FileWriter(file));\n-                writer.write(\"\" + process.pid());\n-                writer.close();\n-                logger.info(\"Successfully written processid to file \"\n-                        + processIdFilePath);\n-            }\n-        } catch (IOException e) {\n-            throw new IOException(e);\n-        } finally {\n-            try {\n-                if (writer != null) {\n-                    writer.close();\n-                }\n-            } catch (IOException ex) {\n-                throw new IOException(ex);\n-            }\n-        }\n@@ -69,1 +37,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jpackage\/apps\/ThirdPartyAppLauncher.java","additions":1,"deletions":33,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8325203\n+ * @summary Test that Jpackage windows executable application kills the launched 3rd party application\n+ *          when System.exit(0) is invoked along with terminating java program.\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Utils\n+ * @requires os.family == \"windows\"\n+ * @build JpackageTest\n+ * @build jdk.jpackage.test.*\n+ * @build JpackageTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=JpackageTest\n+ *\/\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import java.nio.file.Path;\n+import java.util.logging.Logger;\n+\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.TKit;\n+\n+public class JpackageTest {\n+    private static final Logger logger = Logger\n+            .getLogger(JpackageTest.class.getName());\n+    private static final Path TEST_APP_JAVA = TKit.TEST_SRC_ROOT\n+            .resolve(\"apps\/ThirdPartyAppLauncher.java\");\n+\n+    @Test\n+    public static void test() throws Throwable {\n+        JpackageTest test = new JpackageTest();\n+        long regeditPid = 0;\n+        try {\n+            JPackageCommand cmd = JPackageCommand\n+                    .helloAppImage(TEST_APP_JAVA + \"*Hello\");\n+\n+            \/\/ Create the image of the third party application launcher\n+            cmd.executeAndAssertImageCreated();\n+\n+            \/*\n+             * Start the third party application launcher and dump and save the\n+             * output of the application\n+             *\/\n+            List<String> output = new Executor().saveOutput().dumpOutput()\n+                    .setExecutable(cmd.appLauncherPath().toAbsolutePath())\n+                    .execute(0).getOutput();\n+            String pidStr = output.get(1);\n+\n+            \/\/ parse to get regedit PID\n+            regeditPid = Long.parseLong(pidStr.split(\"=\", 2)[1]);\n+            logger.info(\"Regedit PID is \" + regeditPid);\n+\n+            \/*\n+             * Check whether the termination of third party application launcher\n+             * also terminating the launched third party application. If third\n+             * party application is not terminated the test is successful else\n+             * failure\n+             *\/\n+            Optional<ProcessHandle> processHandle = ProcessHandle\n+                    .of(regeditPid);\n+            boolean isAlive = processHandle.isPresent()\n+                    && processHandle.get().isAlive();\n+            if (isAlive) {\n+                logger.info(\"Test Successful\");\n+            } else {\n+                logger.info(\"Test failed\");\n+                throw new RuntimeException(\n+                        \"Test failed: Third party software is terminated\");\n+            }\n+\n+        } finally {\n+            \/\/ Kill only a specific regedit instance\n+            Runtime.getRuntime().exec(\"taskkill \/F \/PID \" + regeditPid);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jpackage\/share\/JpackageTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -1,172 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8325203\n- * @library ..\/helpers\n- * @library \/test\/lib\n- * @build jdk.test.lib.Utils\n- *        jdk.test.lib.util.JarUtils\n- * @requires os.family == \"windows\"\n- * @run main\/othervm JpackageTest\n- * @summary Test that Jpackage windows executable application kills the launched 3rd party application\n- *          when System.exit(0) is invoked along with terminating java program.\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Optional;\n-import java.util.jar.Attributes;\n-import java.util.jar.Manifest;\n-import java.util.logging.Logger;\n-\n-import jdk.jpackage.test.TKit;\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-\n-public class JpackageTest {\n-    private static final Logger logger = Logger\n-            .getLogger(JpackageTest.class.getName());\n-    private static final String APPLICATION_NAME = \"ThirdPartyAppLauncher\";\n-    private static final String FS = File.separator;\n-    private static final String SRC_FILE = TKit.TEST_SRC_ROOT\n-            .resolve(\"apps\" + FS + APPLICATION_NAME + \".java\").toString();\n-    private static final String CLASS_FILE = APPLICATION_NAME + \".class\";\n-    private static final String JAR_FILE = APPLICATION_NAME + \".jar\";\n-    private static final String INSTALLER = APPLICATION_NAME + \"-1.0.exe\";\n-    private static final String JAVA_HOME = System.getProperty(\"test.jdk\");\n-    private static final String JPACKAGE = JAVA_HOME + FS + \"bin\" + FS\n-            + \"jpackage\";\n-    private static final String APPLICATION_PATH = \"C:\" + FS + \"Program Files\"\n-            + FS + APPLICATION_NAME + FS;\n-    private static final String EXECUTABLE_APPLICATION = APPLICATION_PATH\n-            + APPLICATION_NAME + \".exe\";\n-    private static final Path CWD = Paths.get(\".\");\n-    private static final String processIdFilePath = CWD.toString() + FS\n-            + \"process.tmp\";\n-    private static final Path srcDir = Paths\n-            .get(System.getProperty(\"test.src\", \".\"));\n-    private static final Path classesDir = Paths\n-            .get(System.getProperty(\"test.classes\", \".\"));\n-\n-    public static void main(String[] args) throws Throwable {\n-        JpackageTest test = new JpackageTest();\n-        try {\n-            test.closeThirdPartyApplication();\n-            test.setUp();\n-            test.run();\n-        } finally {\n-            test.cleanUp();\n-        }\n-    }\n-\n-    \/**\n-     * Sets up the prerequisites for executing the test - Compile the third\n-     * party application launcher source - Create a jar of third party\n-     * application launcher - Create a windows installer package of third party\n-     * application launcher\n-     *\/\n-    private void setUp() throws Throwable {\n-\n-        CompilerUtils.compile(srcDir.resolve(SRC_FILE), classesDir);\n-        logger.info(\"Compiled Successfully\");\n-\n-        Manifest manifest = new Manifest();\n-        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,\n-                \"1.0\");\n-        manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS,\n-                APPLICATION_NAME);\n-\n-        JarUtils.createJarFile(Paths.get(JAR_FILE), manifest, classesDir,\n-                classesDir.resolve(CLASS_FILE));\n-        logger.info(\"Jar Created Successfully\");\n-\n-        ProcessTools\n-                .executeCommand(JPACKAGE, \"--input\", CWD.toString(), \"--name\",\n-                        APPLICATION_NAME, \"--main-jar\", JAR_FILE,\n-                        \"--main-class\", APPLICATION_NAME, \"--type\", \"exe\")\n-                .shouldHaveExitValue(0);\n-        logger.info(\"Package Successfully\");\n-\n-        ProcessTools.executeCommand(INSTALLER).shouldHaveExitValue(0);\n-        logger.info(\"Installed Successfully\");\n-    }\n-\n-    \/**\n-     * Execute the test - Start the third party application launcher - Check\n-     * whether the termination of third party application launcher also\n-     * terminating the launched third party application - If third party\n-     * application is not terminated the test is successful else failure\n-     *\/\n-    private void run() throws Throwable {\n-        ProcessTools.executeCommand(EXECUTABLE_APPLICATION)\n-                .shouldHaveExitValue(0);\n-        logger.info(\"Launched Successfully\");\n-\n-        long processId = readProcessId();\n-        logger.info(\n-                \"Successfully read processid from file \" + processIdFilePath);\n-        logger.info(\"Process Id is \" + processId);\n-\n-        Optional<ProcessHandle> processHandle = ProcessHandle.of(processId);\n-        boolean isAlive = processHandle.isPresent()\n-                && processHandle.get().isAlive();\n-        if (isAlive) {\n-            logger.info(\"Test Successful\");\n-        } else {\n-            logger.info(\"Test failed\");\n-            throw new RuntimeException(\n-                    \"Test failed: Third party software is terminated\");\n-        }\n-    }\n-\n-    \/**\n-     * Helper function to read processId from file\n-     *\/\n-    private long readProcessId() throws Throwable {\n-\n-        Path path = Paths.get(processIdFilePath);\n-        long processId = Long.parseLong(Files.readAllLines(path).get(0));\n-        return processId;\n-    }\n-\n-    \/**\n-     * Kill if any regedit.exe is running before launching\n-     *\/\n-    private void closeThirdPartyApplication() throws Throwable {\n-        Runtime.getRuntime().exec(\"taskkill \/F \/IM regedit.exe\");\n-    }\n-\n-    \/**\n-     * Uninstalls the application and terminates the third party application\n-     *\/\n-    private void cleanUp() throws Throwable {\n-        ProcessTools.executeCommand(INSTALLER, \"\/q\", \"REMOVE=ALL\")\n-                .shouldHaveExitValue(0);\n-        closeThirdPartyApplication();\n-        logger.info(\"Cleanup Successful\");\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/JpackageTest.java","additions":0,"deletions":172,"binary":false,"changes":172,"status":"deleted"}]}