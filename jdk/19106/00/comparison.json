{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    private static final List<String> UNCATEGORIZED = List.of(\"Uncategorized\");\n+    private static final String[] UNCATEGORIZED = { \"Uncategorized\" };\n@@ -238,5 +238,2 @@\n-        Category c = platformEventType.getAnnotation(Category.class);\n-        if (c == null) {\n-            return UNCATEGORIZED;\n-        }\n-        return List.of(c.value());\n+        String[] categories = platformEventType.getAnnotationValue(Category.class, UNCATEGORIZED);\n+        return List.of(categories);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,5 +75,1 @@\n-        Label label = getAnnotation(Label.class);\n-        if (label == null) {\n-            return null;\n-        }\n-        return label.value();\n+        return getAnnotationValue(Label.class, null);\n@@ -83,5 +79,1 @@\n-        Description description = getAnnotation(Description.class);\n-        if (description == null) {\n-            return null;\n-        }\n-        return description.value();\n+        return getAnnotationValue(Description.class, null);\n@@ -103,1 +95,14 @@\n-    private AnnotationElement getAnnotationElement(Class<? extends Annotation> clazz) {\n+    \/**\n+     * Convenience method that returns the annotation value, or a default value\n+     * if the type lacks the annotation.\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getAnnotationValue(Class<? extends java.lang.annotation.Annotation> clazz, T defaultValue) {\n+        AnnotationElement ae = getAnnotationElement(clazz);\n+        if (ae == null) {\n+            return defaultValue;\n+        }\n+        return (T) ae.getValues().get(0);\n+    }\n+\n+    AnnotationElement getAnnotationElement(Class<? extends Annotation> clazz) {\n@@ -126,2 +131,2 @@\n-            Unsigned unsigned = getAnnotation(Unsigned.class);\n-            unsignedFlag = (byte) (unsigned == null ? 0 :1);\n+            AnnotationElement ae = getAnnotationElement(Unsigned.class);\n+            unsignedFlag = (byte) (ae == null ? 0 :1);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/AnnotationConstruct.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,0 @@\n-        Enabled enabled = type.getAnnotation(Enabled.class);\n@@ -297,4 +296,2 @@\n-        String def = type.isJVM() ? \"false\" : \"true\";\n-        if (enabled != null) {\n-            def = Boolean.toString(enabled.value());\n-        }\n+        Boolean defaultValue = Boolean.valueOf(!type.isJVM());\n+        String def = type.getAnnotationValue(Enabled.class, defaultValue).toString();\n@@ -306,5 +303,1 @@\n-        Threshold threshold = type.getAnnotation(Threshold.class);\n-        String def = \"0 ns\";\n-        if (threshold != null) {\n-            def = threshold.value();\n-        }\n+        String def = type.getAnnotationValue(Threshold.class, \"0 ns\");\n@@ -316,5 +309,1 @@\n-        StackTrace stackTrace = type.getAnnotation(StackTrace.class);\n-        String def = \"true\";\n-        if (stackTrace != null) {\n-            def = Boolean.toString(stackTrace.value());\n-        }\n+        String def = type.getAnnotationValue(StackTrace.class, Boolean.TRUE).toString();\n@@ -326,5 +315,1 @@\n-        Cutoff cutoff = type.getAnnotation(Cutoff.class);\n-        String def = Cutoff.INFINITY;\n-        if (cutoff != null) {\n-            def = cutoff.value();\n-        }\n+        String def = type.getAnnotationValue(Cutoff.class, Cutoff.INFINITY);\n@@ -336,5 +321,1 @@\n-        Throttle throttle = type.getAnnotation(Throttle.class);\n-        String def = Throttle.DEFAULT;\n-        if (throttle != null) {\n-            def = throttle.value();\n-        }\n+        String def = type.getAnnotationValue(Throttle.class, Throttle.DEFAULT);\n@@ -346,3 +327,2 @@\n-        Level level = type.getAnnotation(Level.class);\n-        String[] values = level.value();\n-        String def = values[0];\n+        String[] levels = type.getAnnotationValue(Level.class, new String[0]);\n+        String def = levels[0]; \/\/ Level value always exists\n@@ -350,1 +330,1 @@\n-        return new Control(new LevelSetting(type, values), def);\n+        return new Control(new LevelSetting(type, levels), def);\n@@ -354,5 +334,1 @@\n-        Period period = type.getAnnotation(Period.class);\n-        String def = \"everyChunk\";\n-        if (period != null) {\n-            def = period.value();\n-        }\n+        String def = type.getAnnotationValue(Period.class, \"everyChunk\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":11,"deletions":35,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -76,4 +76,4 @@\n-                pEventType.setHasCutoff(eventType.getAnnotation(Cutoff.class) != null);\n-                pEventType.setHasThrottle(eventType.getAnnotation(Throttle.class) != null);\n-                pEventType.setHasLevel(eventType.getAnnotation(Level.class) != null);\n-                pEventType.setHasPeriod(eventType.getAnnotation(Period.class) != null);\n+                pEventType.setHasCutoff(type.hasAnnotation(Cutoff.class));\n+                pEventType.setHasThrottle(type.hasAnnotation(Throttle.class));\n+                pEventType.setHasLevel(type.hasAnnotation(Level.class));\n+                pEventType.setHasPeriod(type.hasAnnotation(Period.class));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -267,0 +267,4 @@\n+    public <T> T getAnnotationValue(Class<? extends java.lang.annotation.Annotation> clazz, T defaultValue) {\n+       return annos.getAnnotationValue(clazz, defaultValue);\n+    }\n+\n@@ -362,0 +366,4 @@\n+\n+    public boolean hasAnnotation(Class<? extends java.lang.annotation.Annotation> clazz) {\n+        return annos.getAnnotationElement(clazz) != null;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}