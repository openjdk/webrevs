{"files":[{"patch":"@@ -145,1 +145,5 @@\n-                if (output.contains(\"CompressedClassSpaceBaseAddress=\" + thisBaseString + \" given, but reserving class space failed.\")) {\n+                if (output.contains(\"CompressedClassSpaceBaseAddress=\" + thisBaseString + \" given, but reserving class space failed.\") ||\n+                    output.matches (\"CompressedClassSpaceBaseAddress=\" + thisBaseString + \" given with shift .*, cannot be used to encode class pointers\")) {\n+                    \/\/ possible output:\n+                    \/\/     CompressedClassSpaceBaseAddress=0x0000000c00000000 given, but reserving class space failed.\n+                    \/\/     CompressedClassSpaceBaseAddress=0x0000000d00000000 given with shift 6, cannot be used to encode class pointers\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/AccessZeroNKlassHitsProtectionZone.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -357,0 +357,21 @@\n+    \/**\n+     * Returns true if stdout matches the given pattern\n+     *\/\n+    public boolean stdoutMatches(String regexp) {\n+        return getStdout().matches(regexp);\n+    }\n+\n+    \/**\n+     * Returns true if stderr matches the given pattern\n+     *\/\n+    public boolean stderrMatches(String regexp) {\n+        return getStderr().matches(regexp);\n+    }\n+\n+    \/**\n+     * Returns true if either stdout or stderr matches the given pattern\n+     *\/\n+    public boolean matches(String regexp) {\n+        return stdoutMatches(regexp) || stderrMatches(regexp);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}