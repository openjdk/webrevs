{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,1 @@\n-void JvmtiAgentList::add(const char* name, char* options, bool absolute_path) {\n+void JvmtiAgentList::add(const char* name, const char* options, bool absolute_path) {\n@@ -131,1 +131,1 @@\n-void JvmtiAgentList::add_xrun(const char* name, char* options, bool absolute_path) {\n+void JvmtiAgentList::add_xrun(const char* name, const char* options, bool absolute_path) {\n@@ -201,4 +201,2 @@\n-jint JvmtiAgentList::load_agent(const char* agent_name, const char* absParam,\n-                           const char* options, outputStream* st) {\n-  \/\/ The abs parameter should be \"true\" or \"false\"\n-  const bool is_absolute_path = (absParam != nullptr) && (strcmp(absParam, \"true\") == 0);\n+void JvmtiAgentList::load_agent(const char* agent_name, bool is_absolute_path,\n+                                const char* options, outputStream* st) {\n@@ -211,2 +209,0 @@\n-  \/\/ Agent_OnAttach executed so completion status is JNI_OK\n-  return JNI_OK;\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,0 @@\n- public:\n@@ -70,2 +69,4 @@\n-  static void add(const char* name, char* options, bool absolute_path) NOT_JVMTI_RETURN;\n-  static void add_xrun(const char* name, char* options, bool absolute_path) NOT_JVMTI_RETURN;\n+\n+ public:\n+  static void add(const char* name, const char* options, bool absolute_path) NOT_JVMTI_RETURN;\n+  static void add_xrun(const char* name, const char* options, bool absolute_path) NOT_JVMTI_RETURN;\n@@ -74,2 +75,2 @@\n-  static jint load_agent(const char* agent, const char* absParam,\n-                         const char* options, outputStream* st) NOT_JVMTI_RETURN_(0);\n+  static void load_agent(const char* agent, bool is_absolute_path,\n+                         const char* options, outputStream* st) NOT_JVMTI_RETURN;\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -138,1 +138,6 @@\n-  return JvmtiAgentList::load_agent(agent, absParam, options, out);\n+  \/\/ The abs parameter should be \"true\" or \"false\".\n+  const bool is_absolute_path = (absParam != nullptr) && (strcmp(absParam, \"true\") == 0);\n+  JvmtiAgentList::load_agent(agent, is_absolute_path, options, out);\n+\n+  \/\/ Agent_OnAttach result or error message is written to 'out'.\n+  return JNI_OK;\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-      JvmtiAgentList::load_agent(\"instrument\", \"false\", _libpath.value(), output());\n+      JvmtiAgentList::load_agent(\"instrument\", false, _libpath.value(), output());\n@@ -328,1 +328,1 @@\n-      JvmtiAgentList::load_agent(\"instrument\", \"false\", opt, output());\n+      JvmtiAgentList::load_agent(\"instrument\", false, opt, output());\n@@ -333,1 +333,1 @@\n-    JvmtiAgentList::load_agent(_libpath.value(), \"true\", _option.value(), output());\n+    JvmtiAgentList::load_agent(_libpath.value(), true, _option.value(), output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,7 +99,8 @@\n-        InputStream in = execute(\"load\",\n-                                 agentLibrary,\n-                                 isAbsolute ? \"true\" : \"false\",\n-                                 options);\n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n-            String result = reader.readLine();\n-            if (result == null) {\n+        String errorMsg = \"Failed to load agent library\";\n+        try {\n+            InputStream in = execute(\"load\",\n+                                     agentLibrary,\n+                                     isAbsolute ? \"true\" : \"false\",\n+                                     options);\n+            String result = readErrorMessage(in);\n+            if (result.isEmpty()) {\n@@ -113,1 +114,4 @@\n-                throw new AgentLoadException(result);\n+                if (!result.isEmpty()) {\n+                    errorMsg += \": \" + result;\n+                }\n+                throw new AgentLoadException(errorMsg);\n@@ -115,0 +119,4 @@\n+        } catch (AttachOperationFailedException ex) {\n+            \/\/ execute() throws AttachOperationFailedException if attach agent reported error.\n+            \/\/ Convert it to AgentLoadException.\n+            throw new AgentLoadException(errorMsg + \": \" + ex.getMessage());\n@@ -402,13 +410,2 @@\n-            \/\/ Special-case the \"load\" command so that the right exception is\n-            \/\/ thrown.\n-            if (cmd.equals(\"load\")) {\n-                String msg = \"Failed to load agent library\";\n-                if (!message.isEmpty()) {\n-                    msg += \": \" + message;\n-                }\n-                throw new AgentLoadException(msg);\n-            } else {\n-                if (message.isEmpty()) {\n-                    message = \"Command failed in target VM\";\n-                }\n-                throw new AttachOperationFailedException(message);\n+            if (message.isEmpty()) {\n+                message = \"Command failed in target VM\";\n@@ -416,0 +413,1 @@\n+            throw new AttachOperationFailedException(message);\n","filename":"src\/jdk.attach\/share\/classes\/sun\/tools\/attach\/HotSpotVirtualMachine.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8325530\n+ * @summary Test that failed VirtualMachine.loadAgentPath\/loadAgentLibrary reports detailed reason\n+ * @requires vm.jvmti\n+ * @modules jdk.attach\n+ * @library \/test\/lib\n+ * @run driver FailedLoadAgentTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import com.sun.tools.attach.AgentLoadException;\n+import com.sun.tools.attach.VirtualMachine;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.apps.LingeredApp;\n+\n+public class FailedLoadAgentTest {\n+    private static final String jvmtiAgentLib = \"FailedLoadAgentTestNotExists\";\n+    private static final String jvmtiAgentPath = getLibPath(jvmtiAgentLib);\n+\n+    private static String getLibPath(String libName) {\n+        String fullName = Platform.buildSharedLibraryName(libName);\n+        return Path.of(Utils.TEST_NATIVE_PATH, fullName).toAbsolutePath().toString();\n+    }\n+\n+    private interface TestAction {\n+        void test() throws Exception;\n+    }\n+\n+    private static void test(TestAction action) throws Exception {\n+        try {\n+            action.test();\n+            throw new RuntimeException(\"AgentLoadException not thrown\");\n+        } catch (AgentLoadException ex) {\n+            System.out.println(\"AgentLoadException thrown as expected:\");\n+            ex.printStackTrace(System.out);\n+            String msg = ex.getMessage();\n+            \/\/ Attach agent prints general \"<agent> was not loaded.\" message on error.\n+            \/\/ But additionally we expect detailed message with the reason.\n+            String parts[] = msg.split(\"was not loaded.\");\n+            if (parts.length < 2 || parts[1].isEmpty()) {\n+                throw new RuntimeException(\"AgentLoadException message is vague\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        LingeredApp theApp = null;\n+        try {\n+            theApp = new LingeredApp();\n+            LingeredApp.startApp(theApp, \"-XX:+EnableDynamicAgentLoading\");\n+\n+            VirtualMachine vm = VirtualMachine.attach(Long.toString(theApp.getPid()));\n+\n+            \/\/ absolute path\n+            test(() -> vm.loadAgentPath(jvmtiAgentPath));\n+            \/\/ relative path\n+            test(() -> vm.loadAgentLibrary(jvmtiAgentLib));\n+\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/FailedLoadAgentTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}