{"files":[{"patch":"@@ -26,1 +26,1 @@\n-import nsk.share.Consts;\n+\n@@ -29,1 +29,0 @@\n-import vm.mlvm.share.CustomClassLoaders;\n@@ -32,0 +31,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n@@ -36,3 +37,0 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n-\n@@ -47,1 +45,1 @@\n-        List<Class> classes = new ArrayList<Class>();\n+        List<ClassDesc> classes = new ArrayList<>();\n@@ -54,2 +52,2 @@\n-        for (Class a : classes) {\n-            for (Class b : classes) {\n+        for (ClassDesc a : classes) {\n+            for (ClassDesc b : classes) {\n@@ -57,1 +55,1 @@\n-                MethodType.methodType(a, b);\n+                MethodType.methodType(a.getClass(), b.getClass());\n@@ -65,4 +63,7 @@\n-    private static Class generateClass(String name) throws ClassNotFoundException{\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(V1_1, ACC_PUBLIC, name, null, \"java\/lang\/Object\", null);\n-        return CustomClassLoaders.makeClassBytesLoader(cw.toByteArray(), name).loadClass(name);\n+    private static ClassDesc generateClass(String name) throws ClassNotFoundException{\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(name),\n+                ClassBuilder -> ClassBuilder\n+                        .withFlags(ClassFile.ACC_PUBLIC)\n+                        .withSuperclass(ClassDesc.ofInternalName(\"java\/lang\/Object\")));\n+\n+        return ClassFile.of().parse(bytes).thisClass().asSymbol();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/regression\/b7127687\/Test.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *\n+ * @enablePreview\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/regression\/b7127687\/TestDescription.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}