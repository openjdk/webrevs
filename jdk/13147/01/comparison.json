{"files":[{"patch":"@@ -294,1 +294,1 @@\n-  uint min_old_cset_length = p->calc_min_old_cset_length(candidates);\n+  uint min_old_cset_length = p->calc_min_old_cset_length(candidates->num_regions());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-  uint min_old_regions_end = MIN2(candidates->cur_idx() + calc_min_old_cset_length(candidates),\n+  uint min_old_regions_end = MIN2(candidates->cur_idx() + calc_min_old_cset_length(candidates->num_regions()),\n@@ -1383,1 +1383,1 @@\n-uint G1Policy::calc_min_old_cset_length(G1CollectionSetCandidates* candidates) const {\n+uint G1Policy::calc_min_old_cset_length(uint num_candidate_regions) const {\n@@ -1393,9 +1393,3 @@\n-\n-  const size_t region_num = candidates->num_regions();\n-  const size_t gc_num = (size_t) MAX2(G1MixedGCCountTarget, (uintx) 1);\n-  size_t result = region_num \/ gc_num;\n-  \/\/ emulate ceiling\n-  if (result * gc_num < region_num) {\n-    result += 1;\n-  }\n-  return (uint) result;\n+  const size_t gc_num = MAX2((size_t)G1MixedGCCountTarget, (size_t)1);\n+  \/\/ Round up to be conservative.\n+  return (uint)ceil((double)num_candidate_regions \/ gc_num);\n@@ -1436,1 +1430,1 @@\n-  const uint min_old_cset_length = calc_min_old_cset_length(candidates);\n+  const uint min_old_cset_length = calc_min_old_cset_length(candidates->num_regions());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -260,2 +260,3 @@\n-  \/\/ during a mixed GC.\n-  uint calc_min_old_cset_length(G1CollectionSetCandidates* candidates) const;\n+  \/\/ during a single mixed GC given the initial number of regions selected during\n+  \/\/ marking.\n+  uint calc_min_old_cset_length(uint num_candidate_regions) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}