{"files":[{"patch":"@@ -791,0 +791,26 @@\n+    \/**\n+     * Returns a copy of this instant with the specified duration added, with\n+     * saturated semantics.\n+     * <p>\n+     * If the result is \"earlier\" than {@link Instant#MIN}, this method returns\n+     * {@code MIN}. If the result is \"later\" than {@link Instant#MAX}, it\n+     * returns {@code MAX}. Otherwise it returns {@code this.}{@link #plus plus(duration)}.\n+     *\n+     * @apiNote This method can be used to calculate a deadline from\n+     * this instant and a timeout. Unlike {@code plus(TemporalAmount)},\n+     * this method never throws {@link ArithmeticException} or {@link DateTimeException}\n+     * due to numeric overflow or {@code Instant} range violation.\n+     *\n+     * @param duration the duration to add, not null\n+     * @return an {@code Instant} based on this instant with the addition made, not null\n+     *\n+     * @since 26\n+     *\/\n+    public Instant plusSaturating(Duration duration) {\n+        if (duration.isNegative()) {\n+            return until(Instant.MIN).compareTo(duration) >= 0 ? Instant.MIN : plus(duration);\n+        } else {\n+            return until(Instant.MAX).compareTo(duration) <= 0 ? Instant.MAX : plus(duration);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+import java.util.Optional;\n@@ -1228,0 +1229,77 @@\n+    @DataProvider(name = \"PlusSaturating\")\n+    Object[][] provider_plusSaturating() {\n+        return new Object[][]{\n+                \/\/ 1. {edge or constant instants} x {edge or constant durations}\n+                {Instant.MIN, Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.MIN, Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.MIN, Duration.ZERO, Optional.empty()},\n+                {Instant.MIN, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Optional.of(Instant.MAX)},\n+                {Instant.EPOCH, Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.EPOCH, Duration.ZERO, Optional.empty()},\n+                {Instant.EPOCH, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Optional.of(Instant.MAX)},\n+                {Instant.MAX, Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.MAX, Duration.ZERO, Optional.empty()},\n+                {Instant.MAX, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Optional.of(Instant.MAX)},\n+                \/\/ 2. {edge or constant instants} x {normal durations}\n+                {Instant.MIN, Duration.ofDays(-32), Optional.of(Instant.MIN)},\n+                {Instant.MIN, Duration.ofDays(32), Optional.empty()},\n+                {Instant.EPOCH, Duration.ofDays(-32), Optional.empty()},\n+                {Instant.EPOCH, Duration.ofDays(32), Optional.empty()},\n+                {Instant.MAX, Duration.ofDays(-32), Optional.empty()},\n+                {Instant.MAX, Duration.ofDays(32), Optional.of(Instant.MAX)},\n+                \/\/ 3. {normal instants with both positive and negative epoch seconds} x {edge or constant durations}\n+                {Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ZERO, Optional.empty()},\n+                {Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Optional.of(Instant.MAX)},\n+                {Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MIN_VALUE, 0), Optional.of(Instant.MIN)},\n+                {Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ZERO, Optional.empty()},\n+                {Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Optional.of(Instant.MAX)},\n+                \/\/ 4. {normal instants with both positive and negative epoch seconds} x {normal durations}\n+                {Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofDays(-32), Optional.empty()},\n+                {Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofDays(32), Optional.empty()},\n+                {Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofDays(-32), Optional.empty()},\n+                {Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofDays(32), Optional.empty()},\n+                \/\/ 5. instant boundary\n+                {Instant.MIN, Duration.between(Instant.MIN, Instant.MAX), Optional.of(Instant.MAX)},\n+                {Instant.EPOCH, Duration.between(Instant.EPOCH, Instant.MAX), Optional.of(Instant.MAX)},\n+                {Instant.EPOCH, Duration.between(Instant.EPOCH, Instant.MIN), Optional.of(Instant.MIN)},\n+                {Instant.MAX, Duration.between(Instant.MAX, Instant.MIN), Optional.of(Instant.MIN)}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"PlusSaturating\")\n+    public void plusSaturating(Instant i, Duration d, Optional<Instant> value) {\n+        var actual = i.plusSaturating(d);\n+        try {\n+            assertEquals(actual, i.plus(d));\n+            \/\/ If `value` is present, perform an additional check. It may be\n+            \/\/ important to ensure that not only does the result of `plusSaturating`\n+            \/\/ match that of `plus`, but that it also matches our expectation.\n+            \/\/ Because if it doesn’t, then the test isn’t testing what we think\n+            \/\/ it is, and needs to be fixed.\n+            value.ifPresent(instant -> assertEquals(actual, instant));\n+        } catch (DateTimeException \/* instant overflow *\/\n+                 | ArithmeticException \/* long overflow *\/ e) {\n+            if (value.isEmpty()) {\n+                throw new AssertionError();\n+            }\n+            assertEquals(actual, value.get());\n+        }\n+    }\n+\n+    @DataProvider(name = \"PlusSaturating_null\")\n+    Object[][] provider_plusSaturating_null() {\n+        return new Object[][]{\n+                {Instant.MIN},\n+                {Instant.EPOCH},\n+                {Instant.MAX},\n+                \/\/ any non-random but also non-special instant\n+                {Instant.parse(\"2025-10-13T20:47:50.369955Z\")},\n+        };\n+    }\n+\n+    @Test(expectedExceptions = NullPointerException.class, dataProvider = \"PlusSaturating_null\")\n+    public void test_plusSaturating_null(Instant i) {\n+        i.plusSaturating(null);\n+    }\n+\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/TCKInstant.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"}]}