{"files":[{"patch":"@@ -791,0 +791,25 @@\n+    \/**\n+     * Returns a copy of this instant with the specified duration added.\n+     * <p>\n+     * This method behaves the same as {@link #plus(TemporalAmount)} passed\n+     * with the specified duration as its argument, if no numeric overflow\n+     * occurs. If it does, then instead of throwing {@link ArithmeticException}\n+     * or {@link DateTimeException} like {@code plus} does, this method returns\n+     * {@link Instant#MIN} or {@link Instant#MAX} if the result exceeds minimum\n+     * or maximum instant respectively.\n+     *\n+     * @param duration the duration to add, not null\n+     * @return an {@code Instant} based on this instant with the addition made, not null\n+     *\n+     * @since 26\n+     *\/\n+    public Instant plusSaturating(Duration duration) {\n+        if (duration.isNegative()) {\n+            return Duration.between(this, Instant.MIN).compareTo(duration) >= 0\n+                    ? Instant.MIN : this.plus(duration);\n+        } else {\n+            return Duration.between(this, Instant.MAX).compareTo(duration) >= 0\n+                    ? this.plus(duration) : Instant.MAX;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1228,0 +1228,45 @@\n+    @Test\n+    void saturating_plus() {\n+        \/\/ This test verifies a subset of the following cartesian product:\n+        \/\/ {edge or constant instants, normal instants} x {edge or constant durations, normal durations)\n+        \/\/ 1. {edge or constant instants} x {edge or constant durations}\n+        verifySaturating(Instant.MIN, Duration.ofSeconds(Long.MIN_VALUE, 0), Instant.MIN);\n+        verifySaturating(Instant.MIN, Duration.ZERO);\n+        verifySaturating(Instant.MIN, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Instant.MAX);\n+        verifySaturating(Instant.EPOCH, Duration.ofSeconds(Long.MIN_VALUE, 0), Instant.MIN);\n+        verifySaturating(Instant.EPOCH, Duration.ZERO);\n+        verifySaturating(Instant.EPOCH, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Instant.MAX);\n+        verifySaturating(Instant.MAX, Duration.ofSeconds(Long.MIN_VALUE, 0), Instant.MIN);\n+        verifySaturating(Instant.MAX, Duration.ZERO);\n+        verifySaturating(Instant.MAX, Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Instant.MAX);\n+        \/\/ 2. {edge or constant instants} x {normal durations}\n+        verifySaturating(Instant.MIN, Duration.ofDays(-32));\n+        verifySaturating(Instant.MIN, Duration.ofDays(32));\n+        verifySaturating(Instant.EPOCH, Duration.ofDays(-32));\n+        verifySaturating(Instant.EPOCH, Duration.ofDays(32));\n+        verifySaturating(Instant.MAX, Duration.ofDays(-32));\n+        verifySaturating(Instant.MAX, Duration.ofDays(32));\n+        \/\/ 3. {normal instants with both positive and negative epoch seconds} x {edge or constant durations}\n+        verifySaturating(Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MIN_VALUE, 0), Instant.MIN);\n+        verifySaturating(Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ZERO);\n+        verifySaturating(Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Instant.MAX);\n+        verifySaturating(Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MIN_VALUE, 0), Instant.MIN);\n+        verifySaturating(Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ZERO);\n+        verifySaturating(Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofSeconds(Long.MAX_VALUE, 999_999_999), Instant.MAX);\n+        \/\/ 4. {normal instants with both positive and negative epoch seconds} x {normal durations}\n+        verifySaturating(Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofDays(-32));\n+        verifySaturating(Instant.parse(\"1950-01-01T00:00:00Z\"), Duration.ofDays(32));\n+        verifySaturating(Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofDays(-32));\n+        verifySaturating(Instant.parse(\"1990-01-01T00:00:00Z\"), Duration.ofDays(32));\n+    }\n+\n+    private static void verifySaturating(Instant i, Duration d, Instant... optionalInstant) {\n+        var actual = i.plusSaturating(d);\n+        try {\n+            assertEquals(actual, i.plus(d));\n+        } catch (DateTimeException \/* instant overflow *\/\n+                 | ArithmeticException \/* long overflow *\/ e) {\n+            assertEquals(actual, optionalInstant[0]);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/TCKInstant.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}