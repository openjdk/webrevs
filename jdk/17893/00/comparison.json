{"files":[{"patch":"@@ -2611,50 +2611,0 @@\n-\/\/ Map a block of memory.\n-char* os::pd_map_memory(int fd, const char* file_name, size_t file_offset,\n-                        char *addr, size_t bytes, bool read_only,\n-                        bool allow_exec) {\n-  int prot;\n-  int flags = MAP_PRIVATE;\n-\n-  if (read_only) {\n-    prot = PROT_READ;\n-    flags = MAP_SHARED;\n-  } else {\n-    prot = PROT_READ | PROT_WRITE;\n-    flags = MAP_PRIVATE;\n-  }\n-\n-  if (allow_exec) {\n-    prot |= PROT_EXEC;\n-  }\n-\n-  if (addr != nullptr) {\n-    flags |= MAP_FIXED;\n-  }\n-\n-  \/\/ Allow anonymous mappings if 'fd' is -1.\n-  if (fd == -1) {\n-    flags |= MAP_ANONYMOUS;\n-  }\n-\n-  char* mapped_address = (char*)::mmap(addr, (size_t)bytes, prot, flags,\n-                                     fd, file_offset);\n-  if (mapped_address == MAP_FAILED) {\n-    return nullptr;\n-  }\n-  return mapped_address;\n-}\n-\n-\/\/ Remap a block of memory.\n-char* os::pd_remap_memory(int fd, const char* file_name, size_t file_offset,\n-                          char *addr, size_t bytes, bool read_only,\n-                          bool allow_exec) {\n-  \/\/ same as map_memory() on this OS\n-  return os::map_memory(fd, file_name, file_offset, addr, bytes, read_only,\n-                        allow_exec);\n-}\n-\n-\/\/ Unmap a block of memory.\n-bool os::pd_unmap_memory(char* addr, size_t bytes) {\n-  return munmap(addr, bytes) == 0;\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2348,47 +2348,0 @@\n-\/\/ Map a block of memory.\n-char* os::pd_map_memory(int fd, const char* file_name, size_t file_offset,\n-                        char *addr, size_t bytes, bool read_only,\n-                        bool allow_exec) {\n-  int prot;\n-  int flags;\n-\n-  if (read_only) {\n-    prot = PROT_READ;\n-    flags = MAP_SHARED;\n-  } else {\n-    prot = PROT_READ | PROT_WRITE;\n-    flags = MAP_PRIVATE;\n-  }\n-\n-  if (allow_exec) {\n-    prot |= PROT_EXEC;\n-  }\n-\n-  if (addr != nullptr) {\n-    flags |= MAP_FIXED;\n-  }\n-\n-  char* mapped_address = (char*)mmap(addr, (size_t)bytes, prot, flags,\n-                                     fd, file_offset);\n-  if (mapped_address == MAP_FAILED) {\n-    return nullptr;\n-  }\n-  return mapped_address;\n-}\n-\n-\n-\/\/ Remap a block of memory.\n-char* os::pd_remap_memory(int fd, const char* file_name, size_t file_offset,\n-                          char *addr, size_t bytes, bool read_only,\n-                          bool allow_exec) {\n-  \/\/ same as map_memory() on this OS\n-  return os::map_memory(fd, file_name, file_offset, addr, bytes, read_only,\n-                        allow_exec);\n-}\n-\n-\n-\/\/ Unmap a block of memory.\n-bool os::pd_unmap_memory(char* addr, size_t bytes) {\n-  return munmap(addr, bytes) == 0;\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -5070,45 +5070,0 @@\n-\/\/ Map a block of memory.\n-char* os::pd_map_memory(int fd, const char* file_name, size_t file_offset,\n-                        char *addr, size_t bytes, bool read_only,\n-                        bool allow_exec) {\n-  int prot;\n-  int flags = MAP_PRIVATE;\n-\n-  if (read_only) {\n-    prot = PROT_READ;\n-  } else {\n-    prot = PROT_READ | PROT_WRITE;\n-  }\n-\n-  if (allow_exec) {\n-    prot |= PROT_EXEC;\n-  }\n-\n-  if (addr != nullptr) {\n-    flags |= MAP_FIXED;\n-  }\n-\n-  char* mapped_address = (char*)mmap(addr, (size_t)bytes, prot, flags,\n-                                     fd, file_offset);\n-  if (mapped_address == MAP_FAILED) {\n-    return nullptr;\n-  }\n-  return mapped_address;\n-}\n-\n-\n-\/\/ Remap a block of memory.\n-char* os::pd_remap_memory(int fd, const char* file_name, size_t file_offset,\n-                          char *addr, size_t bytes, bool read_only,\n-                          bool allow_exec) {\n-  \/\/ same as map_memory() on this OS\n-  return os::map_memory(fd, file_name, file_offset, addr, bytes, read_only,\n-                        allow_exec);\n-}\n-\n-\n-\/\/ Unmap a block of memory.\n-bool os::pd_unmap_memory(char* addr, size_t bytes) {\n-  return munmap(addr, bytes) == 0;\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2034,0 +2034,50 @@\n+\n+\/\/ Map file into memory; uses mmap().\n+\/\/ Notes:\n+\/\/ - if caller specifies addr, MAP_FIXED is used. That means existing\n+\/\/   mappings will be replaced.\n+\/\/ - The file descriptor must be valid (to create anonymous mappings, use\n+\/\/   os::reserve_memory()).\n+\/\/ Returns address to mapped memory, nullptr on error\n+char* os::pd_map_memory(int fd, const char* unused,\n+                        size_t file_offset, char *addr, size_t bytes,\n+                        bool read_only, bool allow_exec) {\n+\n+  assert(fd != -1, \"Specify a valid file descriptor\");\n+\n+  int prot;\n+  int flags = MAP_PRIVATE;\n+\n+  if (read_only) {\n+    prot = PROT_READ;\n+  } else {\n+    prot = PROT_READ | PROT_WRITE;\n+  }\n+\n+  if (allow_exec) {\n+    prot |= PROT_EXEC;\n+  }\n+\n+  if (addr != nullptr) {\n+    flags |= MAP_FIXED;\n+  }\n+\n+  char* mapped_address = (char*)mmap(addr, (size_t)bytes, prot, flags,\n+                                     fd, file_offset);\n+  if (mapped_address == MAP_FAILED) {\n+    return nullptr;\n+  }\n+\n+  \/\/ If we did specify an address, and the mapping succeeded, it should\n+  \/\/ have returned that address since we specify MAP_FIXED\n+  assert(addr == nullptr || addr == mapped_address,\n+         \"mmap+MAP_FIXED returned \" PTR_FORMAT \", expected \" PTR_FORMAT,\n+         p2i(mapped_address), p2i(addr));\n+\n+  return mapped_address;\n+}\n+\n+\/\/ Unmap a block of memory. Uses munmap.\n+bool os::pd_unmap_memory(char* addr, size_t bytes) {\n+  return munmap(addr, bytes) == 0;\n+}\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -5170,16 +5170,0 @@\n-\n-\/\/ Remap a block of memory.\n-char* os::pd_remap_memory(int fd, const char* file_name, size_t file_offset,\n-                          char *addr, size_t bytes, bool read_only,\n-                          bool allow_exec) {\n-  \/\/ This OS does not allow existing memory maps to be remapped so we\n-  \/\/ would have to unmap the memory before we remap it.\n-\n-  \/\/ Because there is a small window between unmapping memory and mapping\n-  \/\/ it in again with different protections, CDS archives are mapped RW\n-  \/\/ on windows, so this function isn't called.\n-  ShouldNotReachHere();\n-  return nullptr;\n-}\n-\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1693,3 +1693,6 @@\n-  char *base = os::remap_memory(_fd, _full_path, r->file_offset(),\n-                                addr, size, false \/* !read_only *\/,\n-                                r->allow_exec());\n+  \/\/ This path should not be reached for Windows; see JDK-8222379.\n+  assert(WINDOWS_ONLY(false) NOT_WINDOWS(true), \"Don't call on Windows\");\n+  \/\/ Replace old mapping with new one that is writable.\n+  char *base = os::map_memory(_fd, _full_path, r->file_offset(),\n+                              addr, size, false \/* !read_only *\/,\n+                              r->allow_exec());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2161,7 +2161,0 @@\n-char* os::remap_memory(int fd, const char* file_name, size_t file_offset,\n-                             char *addr, size_t bytes, bool read_only,\n-                             bool allow_exec) {\n-  return pd_remap_memory(fd, file_name, file_offset, addr, bytes,\n-                    read_only, allow_exec);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -220,3 +220,0 @@\n-  static char*  pd_remap_memory(int fd, const char* file_name, size_t file_offset,\n-                             char *addr, size_t bytes, bool read_only,\n-                             bool allow_exec);\n@@ -510,3 +507,0 @@\n-  static char*  remap_memory(int fd, const char* file_name, size_t file_offset,\n-                             char *addr, size_t bytes, bool read_only,\n-                             bool allow_exec);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}