{"files":[{"patch":"@@ -1029,0 +1029,2 @@\n+  check_main_module_name();\n+\n@@ -2410,0 +2412,30 @@\n+void FileMapInfo::check_main_module_name() {\n+  const char* runtime_main_module_name = Arguments::get_property(\"jdk.module.main\");\n+  const char* archived_main_module_name = main_module_name();\n+  bool no_archived_main_module_name = strcmp(archived_main_module_name, \"\") == 0;\n+\n+  log_info(cds)(\"_archived_main_module_name: '%s'\", archived_main_module_name);\n+  bool disable = false;\n+  if (runtime_main_module_name == nullptr) {\n+    if (!no_archived_main_module_name) {\n+      log_info(cds)(\"Module %s specified during dump time but not during runtime\", archived_main_module_name);\n+      disable = true;\n+    }\n+  } else {\n+    if (no_archived_main_module_name) {\n+      log_info(cds)(\"Module %s specified during runtime but not during dump time\", runtime_main_module_name);\n+      disable = true;\n+    } else if (strcmp(runtime_main_module_name, archived_main_module_name) != 0) {\n+      log_info(cds)(\"Mismatched modules: runtime %s dump time %s\", runtime_main_module_name, archived_main_module_name);\n+      disable = true;\n+    }\n+  }\n+\n+  if (disable) {\n+    log_info(cds)(\"Disabling optimized module handling\");\n+    CDSConfig::stop_using_optimized_module_handling();\n+  }\n+  log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+  log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -214,0 +214,1 @@\n+  size_t _main_module_name_offset;      \/\/ property of \"jdk.module.main\"\n@@ -268,0 +269,1 @@\n+  char* main_module_name()                 const { return from_mapped_offset(_main_module_name_offset); }\n@@ -290,0 +292,1 @@\n+  void set_main_module_name(char* p)             { set_as_offset(p, &_main_module_name_offset); }\n@@ -404,0 +407,2 @@\n+  char* main_module_name()                    const { return header()->main_module_name(); }\n+  void  set_main_module_name(char* p)         const { header()->set_main_module_name(p); }\n@@ -489,0 +494,1 @@\n+  void check_main_module_name();\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -430,1 +430,0 @@\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n@@ -478,0 +477,1 @@\n+  char* _archived_main_module_name;\n@@ -489,1 +489,2 @@\n-    VM_Operation(), _heap_info(), _map_info(nullptr), _builder(b) {}\n+    VM_Operation(), _heap_info(), _map_info(nullptr), _builder(b),\n+    _archived_main_module_name(nullptr) {}\n@@ -498,0 +499,9 @@\n+\n+  void dump_main_module_name() {\n+    const char* module_name = Arguments::get_property(\"jdk.module.main\");\n+    if (module_name != nullptr) {\n+      _archived_main_module_name = ArchiveBuilder::current()->ro_strdup(module_name);\n+    } else {\n+      _archived_main_module_name = ArchiveBuilder::current()->ro_strdup(\"\");\n+    }\n+  }\n@@ -537,1 +547,1 @@\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n+  CDS_JAVA_HEAP_ONLY(dump_main_module_name();)\n@@ -600,0 +610,1 @@\n+  _map_info->set_main_module_name(_archived_main_module_name);\n@@ -1512,4 +1523,0 @@\n-  if (!mapinfo->validate_aot_class_linking()) {\n-    return MAP_ARCHIVE_OTHER_FAILURE;\n-  }\n-\n@@ -1536,0 +1543,5 @@\n+  if (!mapinfo->validate_aot_class_linking()) {\n+    unmap_archive(mapinfo);\n+    return MAP_ARCHIVE_OTHER_FAILURE;\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -567,41 +567,0 @@\n-char* Modules::_archived_main_module_name = nullptr;\n-\n-void Modules::dump_main_module_name() {\n-  const char* module_name = Arguments::get_property(\"jdk.module.main\");\n-  if (module_name != nullptr) {\n-    _archived_main_module_name = ArchiveBuilder::current()->ro_strdup(module_name);\n-  }\n-  ArchivePtrMarker::mark_pointer(&_archived_main_module_name);\n-}\n-\n-void Modules::serialize(SerializeClosure* soc) {\n-  soc->do_ptr(&_archived_main_module_name);\n-  if (soc->reading()) {\n-    const char* runtime_main_module = Arguments::get_property(\"jdk.module.main\");\n-    log_info(cds)(\"_archived_main_module_name %s\",\n-      _archived_main_module_name != nullptr ? _archived_main_module_name : \"(null)\");\n-    bool disable = false;\n-    if (runtime_main_module == nullptr) {\n-      if (_archived_main_module_name != nullptr) {\n-        log_info(cds)(\"Module %s specified during dump time but not during runtime\", _archived_main_module_name);\n-        disable = true;\n-      }\n-    } else {\n-      if (_archived_main_module_name == nullptr) {\n-        log_info(cds)(\"Module %s specified during runtime but not during dump time\", runtime_main_module);\n-        disable = true;\n-      } else if (strcmp(runtime_main_module, _archived_main_module_name) != 0) {\n-        log_info(cds)(\"Mismatched modules: runtime %s dump time %s\", runtime_main_module, _archived_main_module_name);\n-        disable = true;\n-      }\n-    }\n-\n-    if (disable) {\n-      log_info(cds)(\"Disabling optimized module handling\");\n-      CDSConfig::stop_using_optimized_module_handling();\n-    }\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":0,"deletions":41,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,6 +62,0 @@\n-  static void dump_main_module_name() NOT_CDS_JAVA_HEAP_RETURN;\n-  static void serialize(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n-\n-#if INCLUDE_CDS_JAVA_HEAP\n-  static char* _archived_main_module_name;\n-#endif\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,0 +65,5 @@\n+        testCase(\"Cannot use a different main module\");\n+        TestCommon.run(\"-cp\", appJar, \"-Xlog:cds\", \"-m\", \"jdk.compiler\/com.sun.tools.javac.Main\")\n+            .assertAbnormalExit(\"CDS archive has aot-linked classes.\" +\n+                                \" It cannot be used when archived full module graph is not used.\");\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/AOTClassLinkingVMOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}