{"files":[{"patch":"@@ -43,0 +43,5 @@\n+bool AOTLinkedClassBulkLoader::_boot2_completed = false;\n+bool AOTLinkedClassBulkLoader::_platform_completed = false;\n+bool AOTLinkedClassBulkLoader::_app_completed = false;\n+bool AOTLinkedClassBulkLoader::_all_completed = false;\n+\n@@ -63,0 +68,2 @@\n+  _boot2_completed = true;\n+\n@@ -64,0 +71,2 @@\n+  _platform_completed = true;\n+\n@@ -65,0 +74,2 @@\n+  _app_completed = true;\n+  _all_completed = true;\n@@ -327,0 +338,50 @@\n+\n+bool AOTLinkedClassBulkLoader::is_pending_aot_linked_class(Klass* k) {\n+  if (!CDSConfig::is_using_aot_linked_classes()) {\n+    return false;\n+  }\n+\n+  if (_all_completed) { \/\/ no more pending aot-linked classes\n+    return false;\n+  }\n+\n+  if (k->is_objArray_klass()) {\n+    k = ObjArrayKlass::cast(k)->bottom_klass();\n+  }\n+  if (!k->is_instance_klass()) {\n+    \/\/ type array klasses (and their higher domensions),\n+    \/\/ must have been loaded before a GC can ever happen.\n+    return false;\n+  }\n+\n+  \/\/ There's a small window during VM start-up where a not-yet loaded aot-linked\n+  \/\/ class k may be discovered by the GC during VM initialization. This can happen\n+  \/\/ when the heap contains an aot-cached instance of k, but k is not ready to be\n+  \/\/ loaded yet. (TODO: JDK-8342429 eliminates this possibility)\n+  \/\/\n+  \/\/ The following checks try to limit this window as much as possible for each of\n+  \/\/ the four AOTLinkedClassCategory of classes that can be aot-linked.\n+\n+  InstanceKlass* ik = InstanceKlass::cast(k);\n+  if (ik->is_shared_boot_class()) {\n+    if (ik->module() != nullptr && ik->in_javabase_module()) {\n+      \/\/ AOTLinkedClassCategory::BOOT1 -- all aot-linked classes in\n+      \/\/ java.base must have been loaded before a GC can ever happen.\n+      return false;\n+    } else {\n+      \/\/ AOTLinkedClassCategory::BOOT2 classes cannot be loaded until\n+      \/\/ module system is ready.\n+      return !_boot2_completed;\n+    }\n+  } else if (ik->is_shared_platform_class()) {\n+    \/\/ AOTLinkedClassCategory::PLATFORM classes cannot be loaded until\n+    \/\/ the platform class loader is initialized.\n+    return !_platform_completed;\n+  } else if (ik->is_shared_app_class()) {\n+    \/\/ AOTLinkedClassCategory::APP cannot be loaded until the app class loader\n+    \/\/ is initialized.\n+    return !_app_completed;\n+  } else {\n+    return false;\n+  }\n+}\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+  static bool _boot2_completed;\n+  static bool _platform_completed;\n+  static bool _app_completed;\n+  static bool _all_completed;\n@@ -54,1 +58,0 @@\n-\n@@ -61,0 +64,2 @@\n+\n+  static bool is_pending_aot_linked_class(Klass* k);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"cds\/aotLinkedClassBulkLoader.hpp\"\n@@ -72,0 +73,13 @@\n+\n+#ifdef ASSERT\n+\/\/ A not-yet loaded aot-linked class k may be discovered by the GC during VM\n+\/\/ initialization only. This can happen when the heap contains an aot-cached\n+\/\/ instance of k, but k is not ready to be loaded yet. (TODO: JDK-8342429\n+\/\/ eliminates this possibility)\n+\/\/\n+\/\/ AOTLinkedClassBulkLoader checks the the exact (narrow set of) conditions\n+\/\/ when this could happen.\n+void ClaimMetadataVisitingOopIterateClosure::assert_is_pending_aot_linked_class(Klass* k) {\n+  assert(AOTLinkedClassBulkLoader::is_pending_aot_linked_class(k), \"sanity\");\n+}\n+#endif\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -175,0 +176,2 @@\n+ private:\n+  static void assert_is_pending_aot_linked_class(Klass* k) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,5 +49,1 @@\n-  if (cld != nullptr) {\n-    \/\/ Could be null during early VM bootstrap for archived heap objects whose\n-    \/\/ class has not yet been loaded by CDS.\n-    cld->oops_do(this, _claim);\n-  }\n+  cld->oops_do(this, _claim);\n@@ -58,1 +54,5 @@\n-  ClaimMetadataVisitingOopIterateClosure::do_cld(cld);\n+  if (cld != nullptr) {\n+    ClaimMetadataVisitingOopIterateClosure::do_cld(cld);\n+  } else {\n+    assert_is_pending_aot_linked_class(k);\n+  }\n","filename":"src\/hotspot\/share\/memory\/iterator.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}