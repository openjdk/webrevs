{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import java.util.Arrays;\n-import java.util.spi.ToolProvider;\n@@ -33,0 +31,1 @@\n+import jdk.test.lib.helpers.ClassFileInstaller;\n@@ -45,0 +44,1 @@\n+ *        asmlib.Instrumentor NativeMethodPrefixAgent\n@@ -46,3 +46,1 @@\n- * @comment When this test is compiled by jtreg, it also compiles everything under this test's\n- *          source directory. One such class under asmlib\/Instrumentor.java uses ClassFile API\n- *          which is a PreviewFeature. Hence we enablePreview for this test\n+ * @comment The test uses asmlib\/Instrumentor.java which relies on ClassFile API PreviewFeature.\n@@ -53,8 +51,0 @@\n-    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n-            .orElseThrow(() -> new RuntimeException(\"jar tool not found\")\n-            );\n-\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() -> new RuntimeException(\"javac tool not found\")\n-            );\n-\n@@ -86,6 +76,4 @@\n-        final Path outputDir = Files.createTempDirectory(Path.of(\".\"), \"NativeMethodPrefixApp\");\n-        final Path bootClassesDir = outputDir.resolve(\"bootclasses\");\n-        compileBootpathClasses(bootClassesDir);\n-        final Path agentClasses = outputDir.resolve(\"agentclasses\");\n-        compileAgentClasses(agentClasses);\n-\n+        \/\/ first setup a directory containing (only) the classes needed in boot classpath\n+        \/\/ of the application jar to be launched\n+        final Path bootClassesDir = createBootClassesDir();\n+        final Path agentJar = Path.of(\"NativeMethodPrefixAgent.jar\");\n@@ -98,1 +86,1 @@\n-                + \"Boot-Class-Path: \" + bootClassesDir.toString().replace(File.separatorChar, '\/')\n+                + \"Boot-Class-Path: \" + bootClassesDir.toString().replace(File.separatorChar, '\/') + \"\/\"\n@@ -100,35 +88,7 @@\n-        System.err.println(\"manifest is:\\n\" + manifest);\n-        final Path manifestFile = Files.writeString(Path.of(\"agentmanifest.mf\"), manifest);\n-        final Path agentJarFile = Path.of(\"NativeMethodPrefixAgent.jar\").toAbsolutePath();\n-        final String[] jarCmdArgs = {\"cvfm\",\n-                agentJarFile.toString(), manifestFile.toString(),\n-                \"-C\", agentClasses.toAbsolutePath().toString(), \".\"};\n-        System.out.println(\"invoking jar with args: \" + Arrays.toString(jarCmdArgs));\n-        final int exitCode = JAR_TOOL.run(System.out, System.err, jarCmdArgs);\n-        if (exitCode != 0) {\n-            throw new Exception(\"jar command failed with exit code: \" + exitCode);\n-        }\n-        return agentJarFile;\n-    }\n-\n-    private static void compileBootpathClasses(final Path destDir) throws Exception {\n-        \/\/ directory containing this current test file\n-        final String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null) {\n-            throw new Exception(\"test.src system property isn't set\");\n-        }\n-        final Path bootReporterSourceDir = Path.of(testSrc)\n-                .resolve(\"bootreporter\").toAbsolutePath();\n-        \/\/ this directory must be present\n-        if (!Files.isDirectory(bootReporterSourceDir)) {\n-            throw new Exception(bootReporterSourceDir.toString() + \" is missing or not a directory\");\n-        }\n-        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n-                bootReporterSourceDir.resolve(\"StringIdCallback.java\").toString(),\n-                bootReporterSourceDir.resolve(\"StringIdCallbackReporter.java\").toString()\n-        };\n-        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n-        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n-        if (exitCode != 0 ){\n-            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n-        }\n+        System.out.println(\"Manifest is:\\n\" + manifest);\n+        \/\/ create the agent jar\n+        ClassFileInstaller.writeJar(agentJar.getFileName().toString(),\n+                ClassFileInstaller.Manifest.fromString(manifest),\n+                \"NativeMethodPrefixAgent\",\n+                \"asmlib.Instrumentor\");\n+        return agentJar;\n@@ -137,27 +97,5 @@\n-    private static void compileAgentClasses(final Path destDir) throws Exception {\n-        \/\/ directory containing this current test file\n-        final String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null) {\n-            throw new Exception(\"test.src system property isn't set\");\n-        }\n-        final Path agentJavaSrc = Path.of(testSrc).resolve(\"NativeMethodPrefixAgent.java\")\n-                .toAbsolutePath();\n-        \/\/ this file must be present\n-        if (!Files.isRegularFile(agentJavaSrc)) {\n-            throw new Exception(agentJavaSrc.toString() + \" is missing or not a file\");\n-        }\n-        final Path instrumentorJavaSrc = Path.of(testSrc)\n-                .resolve(\"asmlib\", \"Instrumentor.java\").toAbsolutePath();\n-        \/\/ this file must be present\n-        if (!Files.isRegularFile(instrumentorJavaSrc)) {\n-            throw new Exception(instrumentorJavaSrc.toString() + \" is missing or not a file\");\n-        }\n-        final String currentRuntimeVersion = String.valueOf(Runtime.version().feature());\n-        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n-                \/\/ enable preview since asmlib\/Instrumentor.java uses ClassFile API PreviewFeature\n-                \"--enable-preview\", \"--release\", currentRuntimeVersion,\n-                agentJavaSrc.toString(), instrumentorJavaSrc.toString()};\n-        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n-        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n-        if (exitCode != 0 ){\n-            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n+    private static Path createBootClassesDir() throws Exception {\n+        final Path bootreporterClassesDir = Path.of(System.getProperty(\"test.classes\"))\n+                .resolve(\"bootreporter\");\n+        if (!Files.isDirectory(bootreporterClassesDir)) {\n+            throw new Exception(bootreporterClassesDir + \" is missing or not a directory\");\n@@ -165,0 +103,9 @@\n+        \/\/ copy over the bootreporter.StringIdCallback and bootreporter.StringIdCallbackReporter\n+        \/\/ into the boot classpath directory\n+        final Path bootClassesDir = Path.of(\"bootclasses\");\n+        Files.createDirectories(bootClassesDir.resolve(\"bootreporter\"));\n+        Files.copy(bootreporterClassesDir.resolve(\"StringIdCallback.class\"),\n+                bootClassesDir.resolve(\"bootreporter\", \"StringIdCallback.class\"));\n+        Files.copy(bootreporterClassesDir.resolve(\"StringIdCallbackReporter.class\"),\n+                bootClassesDir.resolve(\"bootreporter\", \"StringIdCallbackReporter.class\"));\n+        return bootClassesDir;\n@@ -168,1 +115,1 @@\n-        final OutputAnalyzer oa = ProcessTools.executeLimitedTestJava(\n+        final OutputAnalyzer oa = ProcessTools.executeTestJava(\n@@ -195,0 +142,1 @@\n+    @Override\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixApp.java","additions":31,"deletions":83,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.File;\n@@ -27,1 +26,0 @@\n-import java.nio.file.Files;\n@@ -29,2 +27,0 @@\n-import java.util.*;\n-import java.util.spi.ToolProvider;\n@@ -34,0 +30,1 @@\n+import jdk.test.lib.helpers.ClassFileInstaller;\n@@ -42,1 +39,1 @@\n- * @build bootreporter.StringIdCallback bootreporter.StringIdCallbackReporter\n+ * @build RetransformAgent asmlib.Instrumentor\n@@ -44,3 +41,1 @@\n- * @comment When this test is compiled by jtreg, it also compiles everything under this test's\n- *          source directory. One such class under asmlib\/Instrumentor.java uses ClassFile API\n- *          which is a PreviewFeature. Hence we enablePreview for this test\n+ * @comment The test uses asmlib\/Instrumentor.java which relies on ClassFile API PreviewFeature.\n@@ -51,8 +46,0 @@\n-    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n-            .orElseThrow(() -> new RuntimeException(\"jar tool not found\")\n-            );\n-\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() -> new RuntimeException(\"javac tool not found\")\n-            );\n-\n@@ -77,6 +64,1 @@\n-        final Path outputDir = Files.createTempDirectory(Path.of(\".\"), \"RetransformApp\");\n-        final Path bootClassesDir = outputDir.resolve(\"bootclasses\");\n-        compileBootpathClasses(bootClassesDir);\n-        final Path agentClasses = outputDir.resolve(\"agentclasses\");\n-        compileAgentClasses(agentClasses);\n-\n+        Path agentJar = Path.of(\"RetransformAgent.jar\");\n@@ -87,68 +69,7 @@\n-                \"\"\"\n-                + \"Boot-Class-Path: \" + bootClassesDir.toString().replace(File.separatorChar, '\/')\n-                + \"\\n\";\n-        System.err.println(\"manifest is:\\n\" + manifest);\n-        final Path manifestFile = Files.writeString(Path.of(\"agentmanifest.mf\"), manifest);\n-        final Path agentJarFile = Path.of(\"RetransformAgent.jar\").toAbsolutePath();\n-        final String[] jarCmdArgs = {\"cvfm\",\n-                agentJarFile.toString(), manifestFile.toString(),\n-                \"-C\", agentClasses.toAbsolutePath().toString(), \".\"};\n-        System.out.println(\"invoking jar with args: \" + Arrays.toString(jarCmdArgs));\n-        final int exitCode = JAR_TOOL.run(System.out, System.err, jarCmdArgs);\n-        if (exitCode != 0) {\n-            throw new Exception(\"jar command failed with exit code: \" + exitCode);\n-        }\n-        return agentJarFile;\n-    }\n-\n-    private static void compileBootpathClasses(final Path destDir) throws Exception {\n-        \/\/ directory containing this current test file\n-        final String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null) {\n-            throw new Exception(\"test.src system property isn't set\");\n-        }\n-        final Path bootReporterSourceDir = Path.of(testSrc)\n-                .resolve(\"bootreporter\").toAbsolutePath();\n-        \/\/ this directory must be present\n-        if (!Files.isDirectory(bootReporterSourceDir)) {\n-            throw new Exception(bootReporterSourceDir.toString() + \" is missing or not a directory\");\n-        }\n-        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n-                bootReporterSourceDir.resolve(\"StringIdCallback.java\").toString(),\n-                bootReporterSourceDir.resolve(\"StringIdCallbackReporter.java\").toString()\n-        };\n-        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n-        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n-        if (exitCode != 0 ){\n-            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n-        }\n-    }\n-\n-    private static void compileAgentClasses(final Path destDir) throws Exception {\n-        \/\/ directory containing this current test file\n-        final String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null) {\n-            throw new Exception(\"test.src system property isn't set\");\n-        }\n-        final Path agentJavaSrc = Path.of(testSrc).resolve(\"RetransformAgent.java\")\n-                .toAbsolutePath();\n-        \/\/ this file must be present\n-        if (!Files.isRegularFile(agentJavaSrc)) {\n-            throw new Exception(agentJavaSrc.toString() + \" is missing or not a file\");\n-        }\n-        final Path instrumentorJavaSrc = Path.of(testSrc)\n-                .resolve(\"asmlib\", \"Instrumentor.java\").toAbsolutePath();\n-        \/\/ this file must be present\n-        if (!Files.isRegularFile(instrumentorJavaSrc)) {\n-            throw new Exception(instrumentorJavaSrc.toString() + \" is missing or not a file\");\n-        }\n-        final String currentRuntimeVersion = String.valueOf(Runtime.version().feature());\n-        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n-                \/\/ enable preview since asmlib\/Instrumentor.java uses ClassFile API PreviewFeature\n-                \"--enable-preview\", \"--release\", currentRuntimeVersion,\n-                agentJavaSrc.toString(), instrumentorJavaSrc.toString()};\n-        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n-        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n-        if (exitCode != 0 ){\n-            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n-        }\n+                \"\"\";\n+        System.out.println(\"Manifest is:\\n\" + manifest);\n+        ClassFileInstaller.writeJar(agentJar.getFileName().toString(),\n+                ClassFileInstaller.Manifest.fromString(manifest),\n+                \"RetransformAgent\",\n+                \"asmlib.Instrumentor\");\n+        return agentJar;\n@@ -158,1 +79,1 @@\n-        final OutputAnalyzer oa = ProcessTools.executeLimitedTestJava(\n+        final OutputAnalyzer oa = ProcessTools.executeTestJava(\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformApp.java","additions":12,"deletions":91,"binary":false,"changes":103,"status":"modified"}]}