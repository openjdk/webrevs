{"files":[{"patch":"@@ -1,105 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-AGENT=\"$1\"\n-APP=\"$2\"\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]\n-then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-   Linux )\n-      PATHSEP=\":\"\n-      ;;\n-\n-   Windows* | CYGWIN*)\n-      PATHSEP=\";\"\n-      ;;\n-\n-   # catch all other OSs\n-   * )\n-      echo \"Unrecognized system!  $OS\"\n-      fail \"Unrecognized system!  $OS\"\n-      ;;\n-esac\n-\n-JAVAC=\"${COMPILEJAVA}\/bin\/javac -g\"\n-JAR=\"${COMPILEJAVA}\/bin\/jar\"\n-\n-cp ${TESTSRC}\/${AGENT}.java .\n-cp ${TESTSRC}\/${APP}.java .\n-rm -rf asmlib\n-mkdir asmlib\n-cp ${TESTSRC}\/asmlib\/*.java asmlib\n-rm -rf bootpath\n-mkdir -p bootpath\/bootreporter\n-cp ${TESTSRC}\/bootreporter\/*.java bootpath\/bootreporter\n-\n-cd bootpath\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} bootreporter\/*.java\n-cd ..\n-\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    --enable-preview --release 23 \\\n-    ${AGENT}.java asmlib\/*.java\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -classpath .${PATHSEP}bootpath ${APP}.java\n-\n-echo \"Manifest-Version: 1.0\"    >  ${AGENT}.mf\n-echo Premain-Class: ${AGENT} >> ${AGENT}.mf\n-echo Boot-Class-Path: bootpath >> ${AGENT}.mf\n-shift 2\n-while [ $# != 0 ] ; do\n-  echo $1 >> ${AGENT}.mf\n-  shift\n-done\n-\n-${JAR} ${TESTTOOLVMOPTS} cvfm ${AGENT}.jar ${AGENT}.mf ${AGENT}*.class asmlib\/*.class\n-\n-# rm -rf  ${AGENT}.java asmlib ${AGENT}.mf ${AGENT}*.class\n","filename":"test\/jdk\/java\/lang\/instrument\/MakeJAR2.sh","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,14 +24,0 @@\n-\/*\n- * @test\n- * @bug 6263319\n- * @requires ((vm.opt.StartFlightRecording == null) | (vm.opt.StartFlightRecording == false)) & ((vm.opt.FlightRecorder == null) | (vm.opt.FlightRecorder == false))\n- * @summary test setNativeMethodPrefix\n- * @author Robert Field, Sun Microsystems\n- *\n- * @enablePreview\n- * @modules java.management\n- *          java.instrument\n- * @run shell\/timeout=240 MakeJAR2.sh NativeMethodPrefixAgent NativeMethodPrefixApp 'Can-Retransform-Classes: true' 'Can-Set-Native-Method-Prefix: true'\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-CheckIntrinsics -javaagent:NativeMethodPrefixAgent.jar NativeMethodPrefixApp\n- *\/\n-\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixAgent.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n-import java.io.PrintStream;\n-import java.util.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -28,0 +28,3 @@\n+import java.util.Arrays;\n+import java.util.spi.ToolProvider;\n+\n@@ -29,0 +32,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -30,0 +35,15 @@\n+\/*\n+ * @test\n+ * @bug 6263319\n+ * @summary test setNativeMethodPrefix\n+ * @requires ((vm.opt.StartFlightRecording == null) | (vm.opt.StartFlightRecording == false)) & ((vm.opt.FlightRecorder == null) | (vm.opt.FlightRecorder == false))\n+ * @modules java.management\n+ *          java.instrument\n+ * @library \/test\/lib\n+ * @build bootreporter.StringIdCallback bootreporter.StringIdCallbackReporter\n+ * @enablePreview\n+ * @comment When this test is compiled by jtreg, it also compiles everything under this test's\n+ *          source directory. One such class under asmlib\/Instrumentor.java uses ClassFile API\n+ *          which is a PreviewFeature. Hence we enablePreview for this test\n+ * @run driver NativeMethodPrefixApp roleDriver\n+ *\/\n@@ -32,0 +52,8 @@\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+            .orElseThrow(() -> new RuntimeException(\"jar tool not found\")\n+            );\n+\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+            .orElseThrow(() -> new RuntimeException(\"javac tool not found\")\n+            );\n+\n@@ -37,1 +65,99 @@\n-    static boolean gotIt[] = {false, false, false};\n+    static boolean[] gotIt = {false, false, false};\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            if (!\"roleDriver\".equals(args[0])) {\n+                throw new Exception(\"unexpected program argument: \" + args[0]);\n+            }\n+            \/\/ launch the NativeMethodPrefixApp java process after creating the necessary\n+            \/\/ infrastructure\n+            System.out.println(\"creating agent jar\");\n+            final Path agentJar = createAgentJar();\n+            System.out.println(\"launching app, with javaagent jar: \" + agentJar);\n+            launchApp(agentJar);\n+        } else {\n+            System.err.println(\"running app\");\n+            new NativeMethodPrefixApp().run();\n+        }\n+    }\n+\n+    private static Path createAgentJar() throws Exception {\n+        final Path outputDir = Files.createTempDirectory(Path.of(\".\"), \"6263319-test\");\n+        final Path bootClassesDir = outputDir.resolve(\"bootclasses\");\n+        compileBootpathClasses(bootClassesDir);\n+        final Path agentClasses = outputDir.resolve(\"agentclasses\");\n+        compileAgentClasses(agentClasses);\n+\n+        final String manifest = \"\"\"\n+                Manifest-Version: 1.0\n+                Premain-Class: NativeMethodPrefixAgent\n+                Can-Retransform-Classes: true\n+                Can-Set-Native-Method-Prefix: true\n+                \"\"\"\n+                + \"Boot-Class-Path: \" + bootClassesDir.toString() + \"\\n\";\n+        System.err.println(\"manifest is: \" + manifest);\n+        final Path manifestFile = Files.writeString(Path.of(\"agentmanifest.mf\"), manifest);\n+        final Path agentJarFile = Path.of(\"NativeMethodPrefixAgent.jar\").toAbsolutePath();\n+        final String[] jarCmdArgs = {\"cvfm\",\n+                agentJarFile.toString(), manifestFile.toString(),\n+                \"-C\", agentClasses.toAbsolutePath().toString(), \".\"};\n+        System.out.println(\"invoking jar with args: \" + Arrays.toString(jarCmdArgs));\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, jarCmdArgs);\n+        if (exitCode != 0) {\n+            throw new Exception(\"jar command failed with exit code: \" + exitCode);\n+        }\n+        return agentJarFile;\n+    }\n+\n+    private static void compileBootpathClasses(final Path destDir) throws Exception {\n+        \/\/ directory containing this current test file\n+        final String testSrc = System.getProperty(\"test.src\");\n+        if (testSrc == null) {\n+            throw new Exception(\"test.src system property isn't set\");\n+        }\n+        final Path bootReporterSourceDir = Path.of(testSrc)\n+                .resolve(\"bootreporter\").toAbsolutePath();\n+        \/\/ this directory must be present\n+        if (!Files.isDirectory(bootReporterSourceDir)) {\n+            throw new Exception(bootReporterSourceDir.toString() + \" is missing or not a directory\");\n+        }\n+        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n+                bootReporterSourceDir.resolve(\"StringIdCallback.java\").toString(),\n+                bootReporterSourceDir.resolve(\"StringIdCallbackReporter.java\").toString()\n+        };\n+        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n+        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n+        if (exitCode != 0 ){\n+            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n+        }\n+    }\n+\n+    private static void compileAgentClasses(final Path destDir) throws Exception {\n+        \/\/ directory containing this current test file\n+        final String testSrc = System.getProperty(\"test.src\");\n+        if (testSrc == null) {\n+            throw new Exception(\"test.src system property isn't set\");\n+        }\n+        final Path agentJavaSrc = Path.of(testSrc).resolve(\"NativeMethodPrefixAgent.java\")\n+                .toAbsolutePath();\n+        \/\/ this file must be present\n+        if (!Files.isRegularFile(agentJavaSrc)) {\n+            throw new Exception(agentJavaSrc.toString() + \" is missing or not a file\");\n+        }\n+        final Path instrumentorJavaSrc = Path.of(testSrc)\n+                .resolve(\"asmlib\", \"Instrumentor.java\").toAbsolutePath();\n+        \/\/ this file must be present\n+        if (!Files.isRegularFile(instrumentorJavaSrc)) {\n+            throw new Exception(instrumentorJavaSrc.toString() + \" is missing or not a file\");\n+        }\n+        final String currentRuntimeVersion = String.valueOf(Runtime.version().feature());\n+        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n+                \/\/ enable preview since asmlib\/Instrumentor.java uses ClassFile API PreviewFeature\n+                \"--enable-preview\", \"--release\", currentRuntimeVersion,\n+                agentJavaSrc.toString(), instrumentorJavaSrc.toString()};\n+        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n+        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n+        if (exitCode != 0 ){\n+            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n+        }\n+    }\n@@ -39,2 +165,9 @@\n-    public static void main(String args[]) throws Exception {\n-        (new NativeMethodPrefixApp()).run(args, System.err);\n+    private static void launchApp(final Path agentJar) throws Exception {\n+        final OutputAnalyzer oa = ProcessTools.executeLimitedTestJava(\n+                \"--enable-preview\", \/\/ due to usage of ClassFile API PreviewFeature in the agent\n+                \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CheckIntrinsics\",\n+                \"-javaagent:\" + agentJar.toString(),\n+                NativeMethodPrefixApp.class.getName());\n+        oa.shouldHaveExitValue(0);\n+        \/\/ make available stdout\/stderr in the logs, even in case of successful completion\n+        oa.reportDiagnosticSummary();\n@@ -43,1 +176,1 @@\n-    public void run(String args[], PrintStream out) throws Exception {\n+    private void run() throws Exception {\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixApp.java","additions":140,"deletions":7,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,12 +24,0 @@\n-\/*\n- * @test\n- * @bug 6274264 6274241 5070281\n- * @summary test retransformClasses\n- * @author Robert Field, Sun Microsystems\n- *\n- * @enablePreview\n- * @modules java.instrument\n- * @run shell\/timeout=240 MakeJAR2.sh RetransformAgent RetransformApp 'Can-Retransform-Classes: true'\n- * @run main\/othervm -javaagent:RetransformAgent.jar RetransformApp\n- *\/\n-\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformAgent.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -27,0 +29,1 @@\n+import java.util.spi.ToolProvider;\n@@ -28,0 +31,17 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 6274264 6274241 5070281\n+ * @summary test retransformClasses\n+ *\n+ * @modules java.instrument\n+ * @library \/test\/lib\n+ * @build bootreporter.StringIdCallback bootreporter.StringIdCallbackReporter\n+ * @enablePreview\n+ * @comment When this test is compiled by jtreg, it also compiles everything under this test's\n+ *          source directory. One such class under asmlib\/Instrumentor.java uses ClassFile API\n+ *          which is a PreviewFeature. Hence we enablePreview for this test\n+ * @run driver RetransformApp roleDriver\n+ *\/\n@@ -30,2 +50,114 @@\n-    public static void main(String args[]) throws Exception {\n-        (new RetransformApp()).run(args, System.out);\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+            .orElseThrow(() -> new RuntimeException(\"jar tool not found\")\n+            );\n+\n+    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n+            .orElseThrow(() -> new RuntimeException(\"javac tool not found\")\n+            );\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            if (!\"roleDriver\".equals(args[0])) {\n+                throw new Exception(\"unexpected program argument: \" + args[0]);\n+            }\n+            \/\/ launch the RetransformApp java process after creating the necessary\n+            \/\/ infrastructure\n+            System.out.println(\"creating agent jar\");\n+            final Path agentJar = createAgentJar();\n+            System.out.println(\"launching app, with javaagent jar: \" + agentJar);\n+            launchApp(agentJar);\n+        } else {\n+            System.err.println(\"running app\");\n+            new RetransformApp().run(System.out);\n+        }\n+    }\n+\n+    private static Path createAgentJar() throws Exception {\n+        final Path outputDir = Files.createTempDirectory(Path.of(\".\"), \"RetransformApp-test\");\n+        final Path bootClassesDir = outputDir.resolve(\"bootclasses\");\n+        compileBootpathClasses(bootClassesDir);\n+        final Path agentClasses = outputDir.resolve(\"agentclasses\");\n+        compileAgentClasses(agentClasses);\n+\n+        final String manifest = \"\"\"\n+                Manifest-Version: 1.0\n+                Premain-Class: RetransformAgent\n+                Can-Retransform-Classes: true\n+                \"\"\"\n+                + \"Boot-Class-Path: \" + bootClassesDir.toString() + \"\\n\";\n+        System.err.println(\"manifest is: \" + manifest);\n+        final Path manifestFile = Files.writeString(Path.of(\"agentmanifest.mf\"), manifest);\n+        final Path agentJarFile = Path.of(\"RetransformAgent.jar\").toAbsolutePath();\n+        final String[] jarCmdArgs = {\"cvfm\",\n+                agentJarFile.toString(), manifestFile.toString(),\n+                \"-C\", agentClasses.toAbsolutePath().toString(), \".\"};\n+        System.out.println(\"invoking jar with args: \" + Arrays.toString(jarCmdArgs));\n+        final int exitCode = JAR_TOOL.run(System.out, System.err, jarCmdArgs);\n+        if (exitCode != 0) {\n+            throw new Exception(\"jar command failed with exit code: \" + exitCode);\n+        }\n+        return agentJarFile;\n+    }\n+\n+    private static void compileBootpathClasses(final Path destDir) throws Exception {\n+        \/\/ directory containing this current test file\n+        final String testSrc = System.getProperty(\"test.src\");\n+        if (testSrc == null) {\n+            throw new Exception(\"test.src system property isn't set\");\n+        }\n+        final Path bootReporterSourceDir = Path.of(testSrc)\n+                .resolve(\"bootreporter\").toAbsolutePath();\n+        \/\/ this directory must be present\n+        if (!Files.isDirectory(bootReporterSourceDir)) {\n+            throw new Exception(bootReporterSourceDir.toString() + \" is missing or not a directory\");\n+        }\n+        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n+                bootReporterSourceDir.resolve(\"StringIdCallback.java\").toString(),\n+                bootReporterSourceDir.resolve(\"StringIdCallbackReporter.java\").toString()\n+        };\n+        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n+        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n+        if (exitCode != 0 ){\n+            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n+        }\n+    }\n+\n+    private static void compileAgentClasses(final Path destDir) throws Exception {\n+        \/\/ directory containing this current test file\n+        final String testSrc = System.getProperty(\"test.src\");\n+        if (testSrc == null) {\n+            throw new Exception(\"test.src system property isn't set\");\n+        }\n+        final Path agentJavaSrc = Path.of(testSrc).resolve(\"RetransformAgent.java\")\n+                .toAbsolutePath();\n+        \/\/ this file must be present\n+        if (!Files.isRegularFile(agentJavaSrc)) {\n+            throw new Exception(agentJavaSrc.toString() + \" is missing or not a file\");\n+        }\n+        final Path instrumentorJavaSrc = Path.of(testSrc)\n+                .resolve(\"asmlib\", \"Instrumentor.java\").toAbsolutePath();\n+        \/\/ this file must be present\n+        if (!Files.isRegularFile(instrumentorJavaSrc)) {\n+            throw new Exception(instrumentorJavaSrc.toString() + \" is missing or not a file\");\n+        }\n+        final String currentRuntimeVersion = String.valueOf(Runtime.version().feature());\n+        final String[] javacCmdArgs = {\"-d\", destDir.toString(),\n+                \/\/ enable preview since asmlib\/Instrumentor.java uses ClassFile API PreviewFeature\n+                \"--enable-preview\", \"--release\", currentRuntimeVersion,\n+                agentJavaSrc.toString(), instrumentorJavaSrc.toString()};\n+        System.out.println(\"invoking javac with args: \" + Arrays.toString(javacCmdArgs));\n+        final int exitCode = JAVAC_TOOL.run(System.out, System.err, javacCmdArgs);\n+        if (exitCode != 0 ){\n+            throw new Exception(\"javac command failed with exit code: \" + exitCode);\n+        }\n+    }\n+\n+    private static void launchApp(final Path agentJar) throws Exception {\n+        final OutputAnalyzer oa = ProcessTools.executeLimitedTestJava(\n+                \"--enable-preview\", \/\/ due to usage of ClassFile API PreviewFeature in the agent\n+                \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-CheckIntrinsics\",\n+                \"-javaagent:\" + agentJar.toString(),\n+                RetransformApp.class.getName());\n+        oa.shouldHaveExitValue(0);\n+        \/\/ make available stdout\/stderr in the logs, even in case of successful completion\n+        oa.reportDiagnosticSummary();\n@@ -38,1 +170,1 @@\n-    public void run(String args[], PrintStream out) throws Exception {\n+    public void run(PrintStream out) throws Exception {\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformApp.java","additions":136,"deletions":4,"binary":false,"changes":140,"status":"modified"}]}