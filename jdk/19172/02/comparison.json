{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2016, 2024, Red Hat, Inc. All rights reserved.\n@@ -31,1 +31,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/jfrbitset.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"nmt\/memflags.hpp\"\n@@ -102,57 +103,0 @@\n-#define MEMORY_TYPES_DO(f)                                                           \\\n-  \/* Memory type by sub systems. It occupies lower byte. *\/                          \\\n-  f(mtJavaHeap,       \"Java Heap\")   \/* Java heap                                 *\/ \\\n-  f(mtClass,          \"Class\")       \/* Java classes                              *\/ \\\n-  f(mtThread,         \"Thread\")      \/* thread objects                            *\/ \\\n-  f(mtThreadStack,    \"Thread Stack\")                                                \\\n-  f(mtCode,           \"Code\")        \/* generated code                            *\/ \\\n-  f(mtGC,             \"GC\")                                                          \\\n-  f(mtGCCardSet,      \"GCCardSet\")   \/* G1 card set remembered set                *\/ \\\n-  f(mtCompiler,       \"Compiler\")                                                    \\\n-  f(mtJVMCI,          \"JVMCI\")                                                       \\\n-  f(mtInternal,       \"Internal\")    \/* memory used by VM, but does not belong to *\/ \\\n-                                     \/* any of above categories, and not used by  *\/ \\\n-                                     \/* NMT                                       *\/ \\\n-  f(mtOther,          \"Other\")       \/* memory not used by VM                     *\/ \\\n-  f(mtSymbol,         \"Symbol\")                                                      \\\n-  f(mtNMT,            \"Native Memory Tracking\")  \/* memory used by NMT            *\/ \\\n-  f(mtClassShared,    \"Shared class space\")      \/* class data sharing            *\/ \\\n-  f(mtChunk,          \"Arena Chunk\") \/* chunk that holds content of arenas        *\/ \\\n-  f(mtTest,           \"Test\")        \/* Test type for verifying NMT               *\/ \\\n-  f(mtTracing,        \"Tracing\")                                                     \\\n-  f(mtLogging,        \"Logging\")                                                     \\\n-  f(mtStatistics,     \"Statistics\")                                                  \\\n-  f(mtArguments,      \"Arguments\")                                                   \\\n-  f(mtModule,         \"Module\")                                                      \\\n-  f(mtSafepoint,      \"Safepoint\")                                                   \\\n-  f(mtSynchronizer,   \"Synchronization\")                                             \\\n-  f(mtServiceability, \"Serviceability\")                                              \\\n-  f(mtMetaspace,      \"Metaspace\")                                                   \\\n-  f(mtStringDedup,    \"String Deduplication\")                                        \\\n-  f(mtObjectMonitor,  \"Object Monitors\")                                             \\\n-  f(mtNone,           \"Unknown\")                                                     \\\n-  \/\/end\n-\n-#define MEMORY_TYPE_DECLARE_ENUM(type, human_readable) \\\n-  type,\n-\n-\/*\n- * Memory types\n- *\/\n-enum class MEMFLAGS : uint8_t  {\n-  MEMORY_TYPES_DO(MEMORY_TYPE_DECLARE_ENUM)\n-  mt_number_of_types   \/\/ number of memory types (mtDontTrack\n-                       \/\/ is not included as validate type)\n-};\n-\/\/ Extra insurance that MEMFLAGS truly has the same size as uint8_t.\n-STATIC_ASSERT(sizeof(MEMFLAGS) == sizeof(uint8_t));\n-\n-#define MEMORY_TYPE_SHORTNAME(type, human_readable) \\\n-  constexpr MEMFLAGS type = MEMFLAGS::type;\n-\n-\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MEMFLAGS::mtGC.\n-MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME)\n-\n-\/\/ Make an int version of the sentinel end value.\n-constexpr int mt_number_of_types = static_cast<int>(MEMFLAGS::mt_number_of_types);\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":2,"deletions":58,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"memory\/allocation.hpp\"\n-#include \"memory\/allocation.inline.hpp\"\n@@ -28,0 +26,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/allocationSite.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"nmt\/memflags.hpp\"\n@@ -30,0 +31,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -34,0 +36,4 @@\n+\/\/ The malloc header, as well as the coming VMATree implementation, rely on MEMFLAGS\n+\/\/ fitting into eight bits.\n+STATIC_ASSERT(sizeof(MEMFLAGS) == sizeof(uint8_t));\n+\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +29,2 @@\n-#include \"memory\/allocation.hpp\" \/\/ for mt_number_of_types\n+#include \"nmt\/memflags.hpp\"\n+#include \"utilities\/debug.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memFlagBitmap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2023, Red Hat, Inc. and\/or its affiliates.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Red Hat, Inc. and\/or its affiliates.\n@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -30,0 +29,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_NMT_MEMFLAGS_HPP\n+#define SHARE_NMT_MEMFLAGS_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#define MEMORY_TYPES_DO(f)                                                           \\\n+  \/* Memory type by sub systems. It occupies lower byte. *\/                          \\\n+  f(mtJavaHeap,       \"Java Heap\")   \/* Java heap                                 *\/ \\\n+  f(mtClass,          \"Class\")       \/* Java classes                              *\/ \\\n+  f(mtThread,         \"Thread\")      \/* thread objects                            *\/ \\\n+  f(mtThreadStack,    \"Thread Stack\")                                                \\\n+  f(mtCode,           \"Code\")        \/* generated code                            *\/ \\\n+  f(mtGC,             \"GC\")                                                          \\\n+  f(mtGCCardSet,      \"GCCardSet\")   \/* G1 card set remembered set                *\/ \\\n+  f(mtCompiler,       \"Compiler\")                                                    \\\n+  f(mtJVMCI,          \"JVMCI\")                                                       \\\n+  f(mtInternal,       \"Internal\")    \/* memory used by VM, but does not belong to *\/ \\\n+                                     \/* any of above categories, and not used by  *\/ \\\n+                                     \/* NMT                                       *\/ \\\n+  f(mtOther,          \"Other\")       \/* memory not used by VM                     *\/ \\\n+  f(mtSymbol,         \"Symbol\")                                                      \\\n+  f(mtNMT,            \"Native Memory Tracking\")  \/* memory used by NMT            *\/ \\\n+  f(mtClassShared,    \"Shared class space\")      \/* class data sharing            *\/ \\\n+  f(mtChunk,          \"Arena Chunk\") \/* chunk that holds content of arenas        *\/ \\\n+  f(mtTest,           \"Test\")        \/* Test type for verifying NMT               *\/ \\\n+  f(mtTracing,        \"Tracing\")                                                     \\\n+  f(mtLogging,        \"Logging\")                                                     \\\n+  f(mtStatistics,     \"Statistics\")                                                  \\\n+  f(mtArguments,      \"Arguments\")                                                   \\\n+  f(mtModule,         \"Module\")                                                      \\\n+  f(mtSafepoint,      \"Safepoint\")                                                   \\\n+  f(mtSynchronizer,   \"Synchronization\")                                             \\\n+  f(mtServiceability, \"Serviceability\")                                              \\\n+  f(mtMetaspace,      \"Metaspace\")                                                   \\\n+  f(mtStringDedup,    \"String Deduplication\")                                        \\\n+  f(mtObjectMonitor,  \"Object Monitors\")                                             \\\n+  f(mtNone,           \"Unknown\")                                                     \\\n+  \/\/end\n+\n+#define MEMORY_TYPE_DECLARE_ENUM(type, human_readable) \\\n+  type,\n+\n+enum class MEMFLAGS : uint8_t  {\n+  MEMORY_TYPES_DO(MEMORY_TYPE_DECLARE_ENUM)\n+  mt_number_of_types   \/\/ number of memory types (mtDontTrack\n+                       \/\/ is not included as validate type)\n+};\n+\n+#define MEMORY_TYPE_SHORTNAME(type, human_readable) \\\n+  constexpr MEMFLAGS type = MEMFLAGS::type;\n+\n+\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MEMFLAGS::mtGC.\n+MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME)\n+\n+\/\/ Make an int version of the sentinel end value.\n+constexpr int mt_number_of_types = static_cast<int>(MEMFLAGS::mt_number_of_types);\n+\n+#endif \/\/ SHARE_NMT_MEMFLAGS_HPP\n","filename":"src\/hotspot\/share\/nmt\/memflags.hpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,2 @@\n-#include \"memory\/allocation.hpp\" \/\/ for MEMFLAGS only\n+#include \"memory\/allStatic.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n-\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/services\/mallocLimit.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/services\/mallocLimit.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"nmt\/memflags.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}