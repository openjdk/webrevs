{"files":[{"patch":"@@ -415,3 +415,5 @@\n-     * test failure. However, if such cases are expected in a test class, this flag can be set to true, which\n-     * allows the all test to pass even if there is no compilation. Any associated {@link IR} rule is only executed\n-     * if the test method was compiled, and else it is ignored silently.\n+     * test failure. However, if such cases are expected in multiple methods in a test class, this flag can be set to\n+     * true, which allows any test to pass even if there is a compilation bailout. If only selected methods are prone\n+     * to bail out, it is preferred to use {@link Test#allowNotCompilable()} instead for more fine-grained control.\n+     * By setting this flag, any associated {@link IR} rule of a test is only executed if the test method was compiled, \n+     * and else it is ignored silently.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- * by \"allowNotCompilable\".\n+ * by \"allowNotCompilable\". This happens when the compiler bails out of a compilation (i.e. no compilation) but we treat\n+ * this as valid case. Any associated IR rules pass silently.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irmethod\/NotCompilableIRMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n- * but this was exlicitly allowed by \"allowNotCompilable\".\n+ * but this was exlicitly allowed by \"allowNotCompilable\". This happens when the compiler bails out of a compilation\n+ * (i.e. no compilation) but we treat this as valid case. Any associated IR rules pass silently.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irmethod\/NotCompilableIRMethodMatchResult.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}