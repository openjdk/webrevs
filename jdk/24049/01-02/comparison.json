{"files":[{"patch":"@@ -418,1 +418,1 @@\n-     * By setting this flag, any associated {@link IR} rule of a test is only executed if the test method was compiled, \n+     * By setting this flag, any associated {@link IR} rule of a test is only executed if the test method was compiled,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    public static final String NOT_COMPILABLE_TAG = \"[NOT_COMPILABLE]\";\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/shared\/TestFrameworkSocket.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import compiler.lib.ir_framework.shared.TestFrameworkSocket;\n+\n@@ -112,4 +114,0 @@\n-    \/**\n-     * Exception thrown when a test method is compiled that is not compilable, and this is\n-     * explicitly allowed with \"allowNotCompilable\".\n-     *\/\n@@ -122,1 +120,5 @@\n-            TestRun.check(test.isAllowNotCompilable(), \"Only allowNotCompilable methods should throw MethodNotCompilableException.\");\n+            final Method testMethod = test.getTestMethod();\n+            TestFrameworkSocket.write(\"Method not compilable: \" + testMethod, TestFrameworkSocket.NOT_COMPILABLE_TAG, true);\n+            TestRun.check(test.isAllowNotCompilable(),\n+                          \"Method \" + testMethod + \" not compilable (anymore) at level \" + test.getCompLevel() +\n+                          \". Most likely, this is not expected, but if it is, you can use 'allowNotCompilable'.\");\n@@ -170,2 +172,1 @@\n-        final boolean isCompilable = WHITE_BOX.isMethodCompilable(testMethod, test.getCompLevel().getValue(), false);\n-        if (!isCompilable && test.isAllowNotCompilable()) {\n+        if (!WHITE_BOX.isMethodCompilable(testMethod, test.getCompLevel().getValue(), false)) {\n@@ -174,2 +175,0 @@\n-        TestRun.check(WHITE_BOX.isMethodCompilable(testMethod, test.getCompLevel().getValue(), false),\n-                      \"Method \" + testMethod + \" not compilable (anymore) at level \" + test.getCompLevel());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/AbstractTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            throw new RuntimeException(\"should have thrown TestRunException\");\n+            throw new RuntimeException(\"should have thrown TestRunException or IRViolationException\");\n@@ -102,1 +102,5 @@\n-        } catch (IRViolationException e) {}\n+            \/\/ Happens when we hit the issue during explicit compilabion by the Framework.\n+        } catch (IRViolationException e) {\n+            \/\/ Happens in STANDALONE Run case, where the user is responsible for ensuring\n+            \/\/ compilation. The failure happens during IR matching.\n+        }\n@@ -120,2 +124,1 @@\n-        } catch (TestVMException e) {\n-        } catch (IRViolationException e) {}\n+        } catch (TestVMException e) {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestNotCompilable.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -403,1 +403,1 @@\n-        throw new RuntimeException(\"Should not reach here\");\n+        throw new RuntimeException(\"No test should bailout from compilation\");\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}