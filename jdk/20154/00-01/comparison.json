{"files":[{"patch":"@@ -36,2 +36,2 @@\n-    private static ClassFileTransformer t0, t1, t2;\n-    private static Instrumentation inst;\n+    static ClassFileTransformer t0, t1, t2;\n+    static Instrumentation inst;\n@@ -61,2 +61,2 @@\n-        private final String trname;\n-        private final int transformId;\n+        final String trname;\n+        final int transformId;\n@@ -72,3 +72,7 @@\n-        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n-                                ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n-\n+        public byte[]\n+        transform(\n+            ClassLoader loader,\n+            String className,\n+            Class<?> classBeingRedefined,\n+            ProtectionDomain    protectionDomain,\n+            byte[] classfileBuffer) {\n@@ -76,1 +80,20 @@\n-                return doTransform(className, classBeingRedefined, classfileBuffer);\n+                \/\/ we only transform a specific application class\n+                if (!className.equals(CLASS_TO_TRANSFORM)) {\n+                    return null;\n+                }\n+                if (classBeingRedefined != null) {\n+                    return null;\n+                }\n+                \/\/ use a byte code generator which creates wrapper methods,\n+                \/\/ with a configured native method prefix, for each native method on the\n+                \/\/ class being transformed\n+                final Instrumentor byteCodeGenerator = Instrumentor.instrFor(classfileBuffer)\n+                        .addNativeMethodTrackingInjection(nativeMethodPrefix,\n+                                (name, cb) -> {\n+                                    cb.loadConstant(name);\n+                                    cb.loadConstant(transformId);\n+                                    cb.invokestatic(CD_StringIdCallbackReporter,\n+                                            \"tracker\", MTD_void_String_int);\n+                                });\n+                \/\/ generate the bytecode\n+                return byteCodeGenerator.apply();\n@@ -82,25 +105,0 @@\n-\n-        private byte[] doTransform(String className, Class<?> classBeingRedefined,\n-                                   byte[] classfileBuffer) {\n-            \/\/ we only transform a specific application class\n-            if (!className.equals(CLASS_TO_TRANSFORM)) {\n-                return null;\n-            }\n-            if (classBeingRedefined != null) {\n-                return null;\n-            }\n-            \/\/ use a byte code generator which creates wrapper methods,\n-            \/\/ with a configured native method prefix, for each native method on the\n-            \/\/ class being transformed\n-            final Instrumentor byteCodeGenerator = Instrumentor.instrFor(classfileBuffer)\n-                    .addNativeMethodTrackingInjection(nativeMethodPrefix,\n-                            (name, cb) -> {\n-                                cb.loadConstant(name);\n-                                cb.loadConstant(transformId);\n-                                cb.invokestatic(CD_StringIdCallbackReporter,\n-                                        \"tracker\", MTD_void_String_int);\n-                            });\n-            \/\/ generate the bytecode\n-            return byteCodeGenerator.apply();\n-        }\n-\n@@ -124,1 +122,4 @@\n-    public static void premain(String agentArgs, Instrumentation instArg) throws Exception {\n+    public static void\n+    premain (String agentArgs, Instrumentation instArg)\n+        throws IOException, IllegalClassFormatException,\n+        ClassNotFoundException, UnmodifiableClassException {\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixAgent.java","additions":35,"deletions":34,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n- * @run main\/native\/timeout=240 NativeMethodPrefixApp roleDriver\n- * @comment The test uses a higher timeout to prevent test timeouts noted in JDK-6528548\n+ * @run main\/native NativeMethodPrefixApp roleDriver\n@@ -51,2 +50,2 @@\n-    private static final String goldenNativeMethodName = \"fooBarNativeMethod\";\n-    private static final boolean[] gotIt = {false, false, false};\n+    static String goldenNativeMethodName = \"fooBarNativeMethod\";\n+    static boolean[] gotIt = {false, false, false};\n","filename":"test\/jdk\/java\/lang\/instrument\/NativeMethodPrefixApp.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include <stdio.h>\n","filename":"test\/jdk\/java\/lang\/instrument\/libNativeMethodPrefix.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}