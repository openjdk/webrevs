{"files":[{"patch":"@@ -1420,0 +1420,1 @@\n+  INSN(vfsgnj_vv, 0b1010111, 0b001, 0b001000);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1679,0 +1679,14 @@\n+void C2_MacroAssembler::signum_fp_v(VectorRegister dst, BasicType bt, int vlen,\n+                                    VectorRegister zero, VectorRegister one) {\n+  vsetvli_helper(bt, vlen);\n+\n+  \/\/ check if input is -0, +0, signaling NaN or quiet NaN\n+  vfclass_v(v0, dst);\n+  mv(t0, fclass_mask::zero | fclass_mask::nan);\n+  vand_vx(v0, v0, t0);\n+  vmseq_vv(v0, v0, zero);\n+\n+  \/\/ use floating-point 1.0 with a sign of input\n+  vfsgnj_vv(dst, one, dst, v0_t);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -166,0 +166,2 @@\n+  void signum_fp_v(VectorRegister dst, BasicType bt, int vlen, VectorRegister zero, VectorRegister one);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3663,0 +3663,17 @@\n+\/\/ ------------------------------ Vector signum --------------------------------\n+\n+\/\/ Vector Math.signum\n+\n+instruct vsignum_reg(vReg dst, vReg zero, vReg one, vRegMask_V0 v0) %{\n+  match(Set dst (SignumVF dst (Binary zero one)));\n+  match(Set dst (SignumVD dst (Binary zero one)));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vsignum $dst, $dst\\t\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ signum_fp_v(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n+                   as_VectorRegister($zero$$reg), as_VectorRegister($one$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @summary Accelerate Math.signum function for AVX, AVX512 and aarch64 (Neon and SVE)\n+ * @summary Accelerate Math.signum function for AVX, AVX512, aarch64 (Neon and SVE)\n+ *          and riscv64 (vector)\n@@ -29,1 +30,2 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx.*\") | os.arch == \"aarch64\"\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx.*\") | os.arch == \"aarch64\" |\n+ *           (os.arch == \"riscv64\" & vm.cpu.features ~= \".*v,.*\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSignumVector.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}