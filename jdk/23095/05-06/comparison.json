{"files":[{"patch":"@@ -310,1 +310,1 @@\n-    \/\/ immutable; may differ when preview is on\n+    \/\/ immutable\n@@ -312,1 +312,1 @@\n-    \/\/ historical locations up to a given version; immutable, same when preview on\n+    \/\/ historical locations up to a given version; immutable\n@@ -343,11 +343,3 @@\n-     *\n-     * {@previewNote 0 When preview features are enabled:}\n-     * Returns kinds constructs the flag can be applied to in class\n-     * files that depend on the preview features of the current Java SE\n-     * release.\n-     * {@previewNote}\n-     *\n-     * @apiNote\n-     * {@link #locations(ClassFileFormatVersion)\n-     * locations(ClassFileFormatVersion.latest())} is not affected by\n-     * whether preview features are enabled.\n+     * <p>\n+     * This method may return an empty set if the flag is not defined in\n+     * the current class file format version.\n@@ -362,0 +354,4 @@\n+     * <p>\n+     * This method may return an empty set if the flag is not defined in\n+     * the given {@code cffv}.\n+     *\n@@ -371,7 +367,1 @@\n-     * appropriate for the location in the current class file format version}\n-     *\n-     * {@previewNote 0 When preview features are enabled:}\n-     * Returns an unmodifiable set of access flags for the given mask value\n-     * appropriate for the location in class files that depend on the preview\n-     * features of the current Java SE release.\n-     * {@previewNote}\n+     * appropriate for the location in question}\n@@ -382,2 +372,1 @@\n-     * positions not defined for the location in question\n-     * @throws NullPointerException if {@code location} is {@code null}\n+     * positions not support for the location in question\n@@ -387,1 +376,3 @@\n-        int unmatchedMask = mask & (~location.parsingMask()); \/\/ flagMask rejects strictfp\n+        int flagsMask = location.flagsMask();\n+        int parsingMask = location == Location.METHOD ? flagsMask | ACC_STRICT : flagsMask; \/\/ flagMask lacks strictfp\n+        int unmatchedMask = mask & (~parsingMask);\n@@ -601,1 +592,1 @@\n-            ClassFileFormatVersion lastVersion = null; \/\/ represents preview\n+            ClassFileFormatVersion lastVersion = ClassFileFormatVersion.latest();\n@@ -604,1 +595,1 @@\n-                if (lastVersion != null && lastVersion.compareTo(historyVersion) <= 0) {\n+                if (lastVersion.compareTo(historyVersion) <= 0) {\n@@ -627,14 +618,4 @@\n-         * this location in the latest class file format version}  If {@code\n-         * mask & ~location.flagsMask() != 0}, then a bit mask {@code mask} has\n-         * one or more undefined bits set for {@code location}.  This union of\n-         * access flags mask may not itself be a valid flag value.\n-         *\n-         * {@previewNote 0 When preview features are enabled:}\n-         * Returns the union of integer masks of all access flags defined for\n-         * this location in class files that depend on the preview features of\n-         * the current Java SE release.\n-         * {@previewNote}\n-         *\n-         * @apiNote\n-         * {@link #flagsMask(ClassFileFormatVersion) flagsMask(ClassFileFormatVersion.latest())}\n-         * is not affected by whether preview features are enabled.\n+         * this location in the current class file format version}\n+         * <p>\n+         * This method may return {@code 0} if the structure does not exist in\n+         * the current class file format version.\n@@ -648,5 +629,0 @@\n-        \/\/ Temporary shortcut to allow strict to be parsed\n-        private int parsingMask() {\n-            return this == METHOD ? flagsMask | ACC_STRICT : flagsMask;\n-        }\n-\n@@ -655,5 +631,1 @@\n-         * this location in the given class file format version}  If {@code\n-         * mask & ~location.flagsMask(cffv) != 0}, then a bit mask {@code mask}\n-         * has one or more undefined bits set for {@code location} in {@code\n-         * cffv}.  This union of access flags mask may not itself be a valid\n-         * flag value.\n+         * this location in the given class file format version}\n@@ -661,1 +633,1 @@\n-         * This method may return {@code 0} if the structure did not exist in\n+         * This method may return {@code 0} if the structure does not exist in\n@@ -674,10 +646,4 @@\n-         * flag enums}  This set may include mutually exclusive flags.\n-         *\n-         * {@previewNote 0 When preview features are enabled:}\n-         * Returns all access flags defined for the location in class files\n-         * that depend on the preview features of the current Java SE release.\n-         * {@previewNote}\n-         *\n-         * @apiNote\n-         * {@link #flags(ClassFileFormatVersion) flags(ClassFileFormatVersion.latest())}\n-         * is not affected by whether preview features are enabled.\n+         * flag enums, in the current class file format version}\n+         * <p>\n+         * This method may return an empty set if the structure does not exist\n+         * in the current class file format version.\n@@ -693,1 +659,1 @@\n-         * enums}  This set may include mutually exclusive flags.\n+         * enums, in the given class file format version}\n@@ -695,2 +661,2 @@\n-         * This method may return an empty set if the structure did not exist in\n-         * the given {@code cffv}.\n+         * This method may return an empty set if the structure does not exist\n+         * in the given {@code cffv}.\n@@ -735,1 +701,1 @@\n-            CLASS_FLAGS = createDefinition(PUBLIC, FINAL, SUPER, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM, AccessFlag.MODULE),\n+            CLASS_FLAGS = createDefinition(PUBLIC, FINAL, SUPER, INTERFACE, ABSTRACT, SYNTHETIC, ANNOTATION, ENUM, MODULE),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":30,"deletions":64,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,0 +141,1 @@\n+        testImmutableSet(AccessFlag.maskToAccessFlags(Modifier.PUBLIC | Modifier.STATIC | Modifier.SYNCHRONIZED, AccessFlag.Location.METHOD), AccessFlag.ABSTRACT);\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}