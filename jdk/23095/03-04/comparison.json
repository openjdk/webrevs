{"files":[{"patch":"@@ -310,2 +310,1 @@\n-    \/\/ Intentionally using Set rather than EnumSet since EnumSet is\n-    \/\/ mutable.\n+    \/\/ immutable; may differ when preview is on\n@@ -313,1 +312,1 @@\n-    \/\/ historical locations up to a given version\n+    \/\/ historical locations up to a given version; immutable, same when preview on\n@@ -343,1 +342,12 @@\n-     * latest class file format version}\n+     * current class file format version}\n+     *\n+     * {@previewNote 0 When preview features are enabled:}\n+     * Returns kinds constructs the flag can be applied to in class\n+     * files that depend on the preview features of the current Java SE\n+     * release.\n+     * {@previewNote}\n+     *\n+     * @apiNote\n+     * {@link #locations(ClassFileFormatVersion)\n+     * locations(ClassFileFormatVersion.latest())} is not affected by\n+     * whether preview features are enabled.\n@@ -361,1 +371,7 @@\n-     * appropriate for the location in question}\n+     * appropriate for the location in the current class file format version}\n+     *\n+     * {@previewNote 0 When preview features are enabled:}\n+     * Returns an unmodifiable set of access flags for the given mask value\n+     * appropriate for the location in class files that depend on the preview\n+     * features of the current Java SE release.\n+     * {@previewNote}\n@@ -366,1 +382,1 @@\n-     * positions not support for the location in question\n+     * positions not defined for the location in question\n@@ -585,1 +601,1 @@\n-            var lastVersion = ClassFileFormatVersion.latest();\n+            ClassFileFormatVersion lastVersion = null; \/\/ represents preview\n@@ -588,1 +604,1 @@\n-                if (lastVersion.compareTo(historyVersion) <= 0) {\n+                if (lastVersion != null && lastVersion.compareTo(historyVersion) <= 0) {\n@@ -616,0 +632,10 @@\n+         * {@previewNote 0 When preview features are enabled:}\n+         * Returns the union of integer masks of all access flags defined for\n+         * this location in class files that depend on the preview features of\n+         * the current Java SE release.\n+         * {@previewNote}\n+         *\n+         * @apiNote\n+         * {@link #flagsMask(ClassFileFormatVersion) flagsMask(ClassFileFormatVersion.latest())}\n+         * is not affected by whether preview features are enabled.\n+         *\n@@ -650,0 +676,9 @@\n+         * {@previewNote 0 When preview features are enabled:}\n+         * Returns all access flags defined for the location in class files\n+         * that depend on the preview features of the current Java SE release.\n+         * {@previewNote}\n+         *\n+         * @apiNote\n+         * {@link #flags(ClassFileFormatVersion) flags(ClassFileFormatVersion.latest())}\n+         * is not affected by whether preview features are enabled.\n+         *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":43,"deletions":8,"binary":false,"changes":51,"status":"modified"}]}