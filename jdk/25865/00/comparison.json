{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include <stdbool.h>\n@@ -232,5 +233,14 @@\n-    \/\/ Copy out the char* if running on version other than 10.16 Mac OS (10.16 == 11.x)\n-    \/\/ or explicitly requesting version compatibility\n-    if (!((long)osVer.majorVersion == 10 && (long)osVer.minorVersion >= 16) ||\n-            (getenv(\"SYSTEM_VERSION_COMPAT\") != NULL)) {\n-        if (osVer.patchVersion == 0) { \/\/ Omit trailing \".0\"\n+    \/\/ Some macOS versions require special handling. for example, when the NSOperatingSystemVersion\n+    \/\/ reports 10.16 as the version then it should be treated as 11. Similarly, when it reports 16.0\n+    \/\/ as the version then it should be treated as 26.\n+    \/\/ If the SYSTEM_VERSION_COMPAT environment variable (a macOS construct) is set to 1, then we\n+    \/\/ don't do any special handling for any versions and just literally use the value that\n+    \/\/ NSOperatingSystemVersion reports.\n+    const char* envVal = getenv(\"SYSTEM_VERSION_COMPAT\");\n+    const bool versionCompatEnabled = envVal != NULL && strncmp(envVal, \"1\", 1) == 0;\n+    const bool requiresSpecialHandling = ((long) osVer.majorVersion == 10 && (long) osVer.minorVersion >= 16)\n+                                         || ((long) osVer.majorVersion == 16 && (long) osVer.minorVersion >= 0);\n+    if (!requiresSpecialHandling || versionCompatEnabled) {\n+        \/\/ no special handling - just use the version reported by NSOperatingSystemVersion\n+        if (osVer.patchVersion == 0) {\n+            \/\/ Omit trailing \".0\"\n@@ -244,5 +254,6 @@\n-        \/\/ Version 10.16, without explicit env setting of SYSTEM_VERSION_COMPAT\n-        \/\/ AKA 11+ Read the *real* ProductVersion from the hidden link to avoid SYSTEM_VERSION_COMPAT\n-        \/\/ If not found, fallback below to the SystemVersion.plist\n-        NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile :\n-                         @\"\/System\/Library\/CoreServices\/.SystemVersionPlatform.plist\"];\n+        \/\/ Requires special handling. We ignore the version reported by the NSOperatingSystemVersion\n+        \/\/ API and instead read the *real* ProductVersion from\n+        \/\/ \/System\/Library\/CoreServices\/.SystemVersionPlatform.plist.\n+        \/\/ If not found there, then as a last resort we fallback to \/System\/Library\/CoreServices\/SystemVersion.plist\n+        NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile:\n+            @\"\/System\/Library\/CoreServices\/.SystemVersionPlatform.plist\"];\n@@ -250,1 +261,1 @@\n-            nsVerStr = [version objectForKey : @\"ProductVersion\"];\n+            nsVerStr = [version objectForKey: @\"ProductVersion\"];\n@@ -253,1 +264,1 @@\n-    \/\/ Fallback to reading the SystemVersion.plist\n+    \/\/ Last resort - fallback to reading the SystemVersion.plist\n@@ -255,2 +266,2 @@\n-        NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile :\n-                                 @\"\/System\/Library\/CoreServices\/SystemVersion.plist\"];\n+        NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile:\n+            @\"\/System\/Library\/CoreServices\/SystemVersion.plist\"];\n@@ -258,1 +269,1 @@\n-            nsVerStr = [version objectForKey : @\"ProductVersion\"];\n+            nsVerStr = [version objectForKey: @\"ProductVersion\"];\n","filename":"src\/java.base\/macosx\/native\/libjava\/java_props_macosx.c","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +32,1 @@\n- * @bug 8132374\n+ * @bug 8132374 8359830\n@@ -35,0 +36,1 @@\n+ * @build jtreg.SkippedException\n@@ -40,1 +42,1 @@\n-    public static void main(String args[]) throws Throwable {\n+    public static void main(String[] args) throws Throwable {\n@@ -43,1 +45,1 @@\n-            throw new Error(\"Cant query 'os.version' property!\");\n+            throw new Error(\"Missing value for os.version system property\");\n@@ -47,0 +49,1 @@\n+            output.shouldHaveExitValue(0);\n@@ -50,14 +53,3 @@\n-        }\n-        else if (Platform.isOSX()) {\n-            OutputAnalyzer output = ProcessTools.executeProcess(\"sw_vers\", \"-productVersion\");\n-            String swVersOutput = output.getOutput().trim();\n-            if (!osVersion.equals(swVersOutput)) {\n-                \/\/ This section can be removed if minimum build SDK is xcode 12+\n-                if (swVersOutput.startsWith(osVersion)) {\n-                    throw new SkippedException(\"MacOS version only matches in parts, this is expected when \" +\n-                                               \"JDK was built with Xcode < 12 and MacOS version patch is > 0\");\n-                }\n-                throw new Error(osVersion + \" != \" + swVersOutput);\n-            }\n-        }\n-        else if (Platform.isAix()) {\n+        } else if (Platform.isOSX()) {\n+            testMacOS(osVersion);\n+        } else if (Platform.isAix()) {\n@@ -65,0 +57,1 @@\n+            output1.shouldHaveExitValue(0);\n@@ -66,0 +59,1 @@\n+            output2.shouldHaveExitValue(0);\n@@ -70,2 +64,1 @@\n-        }\n-        else if (Platform.isWindows()) {\n+        } else if (Platform.isWindows()) {\n@@ -73,0 +66,1 @@\n+            output.shouldHaveExitValue(0);\n@@ -77,3 +71,2 @@\n-        }\n-        else {\n-            System.out.println(\"This test is currently not supported on \" +\n+        } else {\n+            throw new jtreg.SkippedException(\"This test is currently not supported on \" +\n@@ -83,0 +76,17 @@\n+\n+    private static void testMacOS(final String sysPropOsVersion) throws Exception {\n+        final ProcessBuilder pb = new ProcessBuilder(\"sw_vers\", \"-productVersion\");\n+        \/\/ if the test was launched with SYSTEM_VERSION_COMPAT environment variable set,\n+        \/\/ then propagate that to the sw_vers too\n+        final String versionCompat = System.getenv().get(\"SYSTEM_VERSION_COMPAT\");\n+        if (versionCompat != null) {\n+            pb.environment().put(\"SYSTEM_VERSION_COMPAT\", versionCompat);\n+        }\n+        final OutputAnalyzer output = ProcessTools.executeCommand(pb);\n+        output.shouldHaveExitValue(0);\n+        final String swVersOutput = output.getOutput().trim();\n+        if (!sysPropOsVersion.equals(swVersOutput)) {\n+            throw new Error(\"sw_vers reports macOS version: \" + swVersOutput\n+                    + \" but os.version system property reports version: \" + sysPropOsVersion);\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/System\/OsVersionTest.java","additions":32,"deletions":22,"binary":false,"changes":54,"status":"modified"}]}