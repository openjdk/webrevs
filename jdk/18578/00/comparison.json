{"files":[{"patch":"@@ -57,0 +57,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#ARRAY_LOAD}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#ARRAY_STORE}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#BRANCH}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#CONVERT}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,2 @@\n+         * @throws IllegalArgumentException if the opcode kind is not\n+         *         {@link Opcode.Kind#DISCONTINUED_JSR}.\n@@ -112,0 +114,2 @@\n+         * @throws IllegalArgumentException if the opcode kind is not\n+         *         {@link Opcode.Kind#DISCONTINUED_RET}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#FIELD_ACCESS}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#INVOKE}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#LOAD}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#MONITOR}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -54,0 +55,2 @@\n+     * @throws IllegalArgumentException when the {@code typeKind} is not a legal\n+     *                                  primitive array component type\n@@ -56,0 +59,3 @@\n+        if (requireNonNull(typeKind).newarraycode() < 0) {\n+            throw new IllegalArgumentException(\"Illegal component type: \" + typeKind.typeName());\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#OPERATOR}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#RETURN}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#STACK}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#STORE}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+     * @throws IllegalArgumentException if the opcode kind is not\n+     *         {@link Opcode.Kind#TYPE_CHECK}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}