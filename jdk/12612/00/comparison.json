{"files":[{"patch":"@@ -4519,1 +4519,1 @@\n-            cachedTree = new HashMap<>();\n+            cachedTree = HashMap.newHashMap(1);\n@@ -4521,1 +4521,1 @@\n-            cachedTreeCI = new HashMap<>();\n+            cachedTreeCI = HashMap.newHashMap(1);\n@@ -4530,3 +4530,2 @@\n-            Set<String> regionIds = new HashSet<>(ZoneRulesProvider.getAvailableZoneIds());\n-            Set<String> nonRegionIds = new HashSet<>(64);\n-            int regionIdsSize = regionIds.size();\n+            Set<String> availableZoneIds = ZoneRulesProvider.getAvailableZoneIds();\n+            int regionIdsSize = availableZoneIds.size();\n@@ -4545,0 +4544,2 @@\n+                Set<String> nonRegionIds = HashSet.newHashSet(64);\n+                Set<String> regionIds = new HashSet<>(availableZoneIds);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package time.format;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(4)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+public class ZonedDateTimeFormatterBenchmark {\n+\n+    private static final DateTimeFormatter df = new DateTimeFormatterBuilder()\n+            .appendPattern(\"yyyy:MM:dd:HH:mm:v\")\n+            .toFormatter();\n+    private static final String TEXT = \"2015:03:10:12:13:ECT\";\n+\n+    @Setup\n+    public void setUp() {\n+        ZonedDateTime.parse(TEXT, df);\n+    }\n+\n+    @Benchmark\n+    public ZonedDateTime parse() {\n+        return ZonedDateTime.parse(TEXT, df);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/format\/ZonedDateTimeFormatterBenchmark.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}