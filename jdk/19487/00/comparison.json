{"files":[{"patch":"@@ -1,54 +0,0 @@\n-#\n-# Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-default: all\n-\n-include $(SPEC)\n-include MakeBase.gmk\n-\n-################################################################################\n-#\n-# Concatenate exported.symbols files for modules into a single global file.\n-#\n-\n-GLOBAL_SYMBOLS_FILE := $(SUPPORT_OUTPUTDIR)\/build-static\/exported.symbols\n-\n-EXPORTED_SYMBOLS_MODULES := java.base jdk.jdwp.agent\n-\n-MODULES_SYMBOLS_FILES := $(foreach module, $(EXPORTED_SYMBOLS_MODULES), \\\n-    $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(module)\/$(module).symbols)\n-\n-$(GLOBAL_SYMBOLS_FILE): $(MODULES_SYMBOLS_FILES)\n-\t$(call LogInfo, Generating global exported.symbols file)\n-\t$(call MakeTargetDir)\n-\t$(CAT) $^ > $@\n-\n-TARGETS += $(GLOBAL_SYMBOLS_FILE)\n-\n-################################################################################\n-\n-all: $(TARGETS)\n-\n-.PHONY: default all\n","filename":"make\/BuildStatic.gmk","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -99,8 +99,0 @@\n-################################################################################\n-# Special targets for certain modules\n-\n-$(eval $(call SetupTarget, generate-exported-symbols, \\\n-    MAKEFILE := BuildStatic, \\\n-    DEPS := java.base-libs jdk.jdwp.agent-libs, \\\n-))\n-\n@@ -908,4 +900,0 @@\n-  ifeq ($(STATIC_BUILD), true)\n-    $(LAUNCHER_TARGETS): generate-exported-symbols\n-  endif\n-\n","filename":"make\/Main.gmk","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -644,5 +644,2 @@\n-    # Linking is different on MacOSX\n-    JDK_PICFLAG=''\n-    if test \"x$STATIC_BUILD\" = xtrue; then\n-      JVM_PICFLAG=\"\"\n-    fi\n+    # Linking is different on macOS\n+    JVM_PICFLAG=\"\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -270,5 +270,1 @@\n-        if test \"x$STATIC_BUILD\" = xtrue; then\n-          with_native_debug_symbols=\"none\"\n-        else\n-          with_native_debug_symbols=\"external\"\n-        fi\n+        with_native_debug_symbols=\"external\"\n@@ -546,18 +542,1 @@\n-  UTIL_ARG_ENABLE(NAME: static-build, DEFAULT: false, RESULT: STATIC_BUILD,\n-      DESC: [enable static library build],\n-      CHECKING_MSG: [if static build is enabled],\n-      CHECK_AVAILABLE: [\n-        AC_MSG_CHECKING([if static build is available])\n-        if test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\"; then\n-          AC_MSG_RESULT([yes])\n-        else\n-          AC_MSG_RESULT([no])\n-          AVAILABLE=false\n-        fi\n-      ],\n-      IF_ENABLED: [\n-        STATIC_BUILD_CFLAGS=\"-DSTATIC_BUILD=1\"\n-        CFLAGS_JDKLIB_EXTRA=\"$CFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS\"\n-        CXXFLAGS_JDKLIB_EXTRA=\"$CXXFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS\"\n-      ])\n-  AC_SUBST(STATIC_BUILD)\n+  UTIL_DEPRECATED_ARG_ENABLE(static-build)\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    serialgc services shenandoahgc static-build vm-structs zero zgc \\\n+    serialgc services shenandoahgc vm-structs zero zgc \\\n@@ -312,16 +312,0 @@\n-###############################################################################\n-# Check if the feature 'static-build' is available on this platform.\n-#\n-AC_DEFUN_ONCE([JVM_FEATURES_CHECK_STATIC_BUILD],\n-[\n-  JVM_FEATURES_CHECK_AVAILABILITY(static-build, [\n-    AC_MSG_CHECKING([if static-build is enabled in configure])\n-    if test \"x$STATIC_BUILD\" = \"xtrue\"; then\n-      AC_MSG_RESULT([yes])\n-    else\n-      AC_MSG_RESULT([no, use --enable-static-build to enable static build.])\n-      AVAILABLE=false\n-    fi\n-  ])\n-])\n-\n@@ -398,1 +382,0 @@\n-  JVM_FEATURES_CHECK_STATIC_BUILD\n","filename":"make\/autoconf\/jvm-features.m4","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -635,1 +635,0 @@\n-STATIC_BUILD := @STATIC_BUILD@\n","filename":"make\/autoconf\/spec.gmk.template","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -181,1 +181,5 @@\n-    SHARED_LIBRARY_SUFFIX='.so'\n+    if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+      SHARED_LIBRARY_SUFFIX='.dylib'\n+    else\n+      SHARED_LIBRARY_SUFFIX='.so'\n+    fi\n@@ -185,13 +189,0 @@\n-    if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-      # For full static builds, we're overloading the shared library suffix\n-      # in order to limit the amount of changes required.\n-      # It would be better to remove SHARED and just use LIBRARY and\n-      # LIBRARY_SUFFIX for libraries that can be built either\n-      # shared or static and use STATIC_* for libraries that are\n-      # always built statically.\n-      if test \"x$STATIC_BUILD\" = xtrue; then\n-        SHARED_LIBRARY_SUFFIX='.a'\n-      else\n-        SHARED_LIBRARY_SUFFIX='.dylib'\n-      fi\n-    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -197,3 +197,0 @@\n-  ifeq ($(STATIC_BUILD), true)\n-     $1_$2_STATIC_LIBRARY := true\n-  endif\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -262,8 +262,0 @@\n-  # If we're doing a static build and producing a library\n-  # force it to be a static library and remove the -l libraries\n-  ifeq ($(STATIC_BUILD), true)\n-    ifeq ($$($1_TYPE), LIBRARY)\n-      $1_TYPE := STATIC_LIBRARY\n-    endif\n-  endif\n-\n","filename":"make\/common\/NativeCompilation.gmk","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -111,13 +111,0 @@\n-\n-    ifeq ($(STATIC_BUILD), true)\n-      $1_LDFLAGS += -exported_symbols_list \\\n-              $(SUPPORT_OUTPUTDIR)\/build-static\/exported.symbols\n-      $1_LIBS += \\\n-          $$(shell $(FIND) $(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base -name \"*.a\") \\\n-          $(SUPPORT_OUTPUTDIR)\/modules_libs\/jdk.jdwp.agent\/libdt_socket.a \\\n-          $(SUPPORT_OUTPUTDIR)\/modules_libs\/jdk.jdwp.agent\/libjdwp.a \\\n-          -framework CoreFoundation \\\n-          -framework Foundation \\\n-          -framework SystemConfiguration \\\n-          -lstdc++ -liconv\n-    endif\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -117,7 +117,0 @@\n-        ifeq ($(STATIC_BUILD), true)\n-\t  $(RM) $$(@D)\/$$(basename $$(@F)).symbols; \\\n-\t  $(ECHO) \"Getting symbols from nm\"; \\\n-\t  $(NM) $(NMFLAGS) -m $$($1_TARGET) | $(GREP)  \"__TEXT\" | \\\n-\t      $(EGREP) -v \"non-external|private extern|__TEXT,__eh_frame\" | \\\n-\t      $(SED) -e  's\/.* \/\/' > $$(@D)\/$$(basename $$(@F)).symbols\n-        endif\n","filename":"make\/common\/native\/Link.gmk","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -81,4 +81,0 @@\n-ifeq ($(call check-jvm-feature, static-build), true)\n-  JVM_CFLAGS_FEATURES += -DSTATIC_BUILD=1\n-endif\n-\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-ifeq ($(call isTargetOsType, unix)+$(STATIC_BUILD), true+false)\n+ifeq ($(call isTargetOsType, unix), true)\n@@ -148,29 +148,0 @@\n-################################################################################\n-# Create the symbols file for static builds.\n-ifeq ($(STATIC_BUILD), true)\n-  STATIC_SYMBOLS_DIR := $(SUPPORT_OUTPUTDIR)\/modules_libs\/java.base\n-  JAVA_BASE_EXPORT_SYMBOLS_SRC := \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)jli.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)java.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)net.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)nio.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)verify.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)zip.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)jimage.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/server\/$(LIBRARY_PREFIX)jvm.symbols \\\n-      #\n-\n-  JAVA_BASE_EXPORT_SYMBOL_FILE := $(STATIC_SYMBOLS_DIR)\/java.base.symbols\n-\n-  $(JAVA_BASE_EXPORT_SYMBOL_FILE): $(JAVA_BASE_EXPORT_SYMBOLS_SRC)\n-\t$(call LogInfo, Generating java.base.symbols file)\n-\t$(CAT) $^ > $@\n-\n-  # The individual symbol files is generated when the respective lib is built\n-  $(JAVA_BASE_EXPORT_SYMBOLS_SRC): $(BUILD_LIBJLI) $(BUILD_LIBJAVA) \\\n-      $(BUILD_LIBNET) $(BUILD_LIBNIO) $(BUILD_LIBVERIFY) $(BUILD_LIBZIP) \\\n-      $(BUILD_LIBJIMAGE)\n-\n-  TARGETS += $(JAVA_BASE_EXPORT_SYMBOL_FILE)\n-endif\n-\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -71,21 +71,0 @@\n-\n-################################################################################\n-# Setup static build symbols\n-\n-ifeq ($(STATIC_BUILD), true)\n-  STATIC_SYMBOLS_DIR := $(SUPPORT_OUTPUTDIR)\/modules_libs\/jdk.jdwp.agent\n-  JDK_JDWP_AGENT_EXPORT_SYMBOLS_SRC := \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)dt_socket.symbols \\\n-      $(STATIC_SYMBOLS_DIR)\/$(LIBRARY_PREFIX)jdwp.symbols\n-\n-  JDK_JDWP_AGENT_EXPORT_SYMBOL_FILE := $(STATIC_SYMBOLS_DIR)\/jdk.jdwp.agent.symbols\n-\n-  $(JDK_JDWP_AGENT_EXPORT_SYMBOL_FILE): $(JDK_JDWP_AGENT_EXPORT_SYMBOLS_SRC)\n-\t$(call LogInfo, Generating jdk.jdwp.agent symbols file)\n-\t$(CAT) $^ > $@\n-\n-  # The individual symbol files is generated when the respective lib is built\n-  $(JDK_JDWP_AGENT_EXPORT_SYMBOLS_SRC): $(BUILD_LIBDT_SOCKET) $(BUILD_LIBJDWP)\n-\n-  TARGETS += $(JDK_JDWP_AGENT_EXPORT_SYMBOL_FILE)\n-endif\n","filename":"make\/modules\/jdk.jdwp.agent\/Lib.gmk","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"}]}