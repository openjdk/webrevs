{"files":[{"patch":"@@ -330,2 +330,4 @@\n-            TestFormat.checkNoThrow(scenarioIndices.add(scenarioIndex),\n-                             \"Cannot define two scenarios with the same index \" + scenarioIndex);\n+            if (!scenarioIndices.add(scenarioIndex)) {\n+                TestFormat.failNoThrow(\"Cannot define two scenarios with the same index \" + scenarioIndex);\n+                continue;\n+            }\n@@ -339,1 +341,1 @@\n-     * Add the cross-product (cartesian product) of sets of flags as Scenarios. Unlike when when constructing\n+     * Add the cross-product (cartesian product) of sets of flags as Scenarios. Unlike when constructing\n@@ -341,1 +343,4 @@\n-     * flags that have to be specified togeher. Further, an empty string in a set stands in for \"no flag\".\n+     * flags that have to be specified together. Further, an empty string in a set stands in for \"no flag\".\n+     * <p>\n+     * Passing a single set will create a scenario for each of the provided flags in the set (i.e. the same as\n+     * passing an additional set with an empty string only).\n@@ -358,1 +363,1 @@\n-     * @param sets sets of flags to generate the cross product for.\n+     * @param flagSets sets of flags to generate the cross product for.\n@@ -379,1 +384,1 @@\n-                Stream.of(Collections.<String>emptyList()), \/\/ Initialize Stream<List<String>> acc with a Stream containing an empty list of Strings.\n+                Stream.of(Collections.emptyList()), \/\/ Initialize Stream<List<String>> acc with a Stream containing an empty list of Strings.\n@@ -387,2 +392,2 @@\n-                    ), \/\/ ...that get flattend into one big List<List<String>>.\n-                (a, b) -> Stream.concat(a, b)); \/\/ combiner; if any reduction steps are executed in parallel, just concat two streams.\n+                    ), \/\/ ...that get flattened into one big List<List<String>>.\n+                Stream::concat); \/\/ combiner; if any reduction steps are executed in parallel, just concat two streams.\n@@ -394,1 +399,1 @@\n-                     .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split muliple flags in the same string into separate strings.\n+                     .map(s -> Set.of(s.split(\"[ ]\"))) \/\/ Split multiple flags in the same string into separate strings.\n@@ -397,1 +402,1 @@\n-                     .collect(Collectors.toList())\n+                     .toList()\n@@ -399,1 +404,1 @@\n-            .collect(Collectors.toList()).toArray(new Scenario[0]);\n+            .toList().toArray(new Scenario[0]);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n-import java.util.Set;\n+import java.lang.reflect.Field;\n+import java.util.*;\n+import java.util.stream.Collectors;\n@@ -29,1 +31,0 @@\n-import compiler.lib.ir_framework.shared.TestRunException;\n@@ -35,0 +36,1 @@\n+ * @bug 8365262 8369232\n@@ -42,5 +44,0 @@\n-    static void hasNFailures(String s, int count) {\n-        if (!s.matches(\"The following scenarios have failed: (#[0-9](, )?){\" + count + \"}. Please check stderr for more information.\")) {\n-            throw new RuntimeException(\"Expected \" + count + \" failures in \\\"\" + s + \"\\\"\");\n-        }\n-    }\n@@ -49,11 +46,3 @@\n-        \/\/ Test argument handling\n-        try {\n-            TestFramework t = new TestFramework();\n-            t.addCrossProductScenarios((Set<String>[]) null);\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestFormatException e) {}\n-        try {\n-            TestFramework t = new TestFramework();\n-            t.addCrossProductScenarios(Set.of(\"foo\", \"bar\"), null);\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestFormatException e) {}\n+        expectFormatFailure((Set<String>[]) null);\n+        expectFormatFailure(Set.of(\"foo\", \"bar\"), null);\n+\n@@ -63,1 +52,1 @@\n-            Asserts.fail(\"Should have thrown exception\");\n+            shouldHaveThrown();\n@@ -65,0 +54,1 @@\n+\n@@ -73,10 +63,13 @@\n-        try {\n-            TestFramework t1 = new TestFramework();\n-            t1.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\",\n-                                               \"-XX:TLABRefillWasteFraction=53\",\n-                                               \"-XX:TLABRefillWasteFraction=64\"));\n-            t1.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 3);\n-        }\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"-XX:TLABRefillWasteFraction=51\",\n+                                           \"-XX:TLABRefillWasteFraction=53\",\n+                                           \"-XX:TLABRefillWasteFraction=64\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=64\")\n+                ))\n+                .run();\n@@ -85,9 +78,13 @@\n-        try {\n-            TestFramework t2 = new TestFramework();\n-            t2.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=53\"),\n-                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\", \"-XX:+UseNewCode3\"));\n-            t2.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 3);\n-        }\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"-XX:TLABRefillWasteFraction=53\"),\n+                                    Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\", \"-XX:+UseNewCode3\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode3\")\n+                ))\n+                .run();\n+\n@@ -96,9 +93,14 @@\n-        try {\n-            TestFramework t3 = new TestFramework();\n-            t3.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:TLABRefillWasteFraction=64\"),\n-                                        Set.of(\"-XX:+UseNewCode\", \"-XX:-UseNewCode\"));\n-            t3.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 4);\n-        }\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:TLABRefillWasteFraction=64\"),\n+                                    Set.of(\"-XX:+UseNewCode\", \"-XX:-UseNewCode\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:-UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=64\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=64\", \"-XX:-UseNewCode\")\n+                ))\n+                .run();\n+\n@@ -107,9 +109,51 @@\n-        try {\n-            TestFramework t4 = new TestFramework();\n-            t4.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=50 -XX:+UseNewCode\", \"-XX:TLABRefillWasteFraction=40\"),\n-                                        Set.of(\"-XX:+UseNewCode2\"));\n-            t4.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 1);\n-        }\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"-XX:TLABRefillWasteFraction=50 -XX:+UseNewCode\", \"-XX:TLABRefillWasteFraction=40\"),\n+                                    Set.of(\"-XX:+UseNewCode2\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=40\", \"-XX:+UseNewCode2\")\n+                ))\n+                .run();\n+\n+        \/\/ Test with an empty string, resulting in 6 scenarios.\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"\", \"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n+                                    Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode2\")\n+                ))\n+                .run();\n+\n+        \/\/ Test with 3 input sets which equals to 2x2x2 = 8 scenarios.\n+        new TestCase()\n+                .inputFlags(Set.of(\n+                                    Set.of(\"-XX:TLABRefillWasteFraction=51\",\n+                                           \"-XX:TLABRefillWasteFraction=53\"),\n+                                    Set.of(\"-XX:+UseNewCode\",\n+                                           \"-XX:-UseNewCode\"),\n+                                    Set.of(\"-XX:+UseNewCode2\",\n+                                           \"-XX:-UseNewCode2\")\n+                            )\n+                )\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:-UseNewCode\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:-UseNewCode\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode\", \"-XX:-UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\", \"-XX:-UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:-UseNewCode\", \"-XX:-UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:-UseNewCode\", \"-XX:-UseNewCode2\")\n+                ))\n+                .run();\n@@ -117,1 +161,4 @@\n-        \/\/ Test with an empty string. All 6 scenarios fail because 64 is the default value for TLABRefillWasteFraction.\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.addScenarios(new Scenario(0, \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\"));\n+        testFramework.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n+                                               Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n@@ -119,7 +166,4 @@\n-            TestFramework t5 = new TestFramework();\n-            t5.addCrossProductScenarios(Set.of(\"\", \"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n-                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n-            t5.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 6);\n+            testFramework.addScenarios(new Scenario(4, \"-XX:+UseNewCode3\")); \/\/ fails because index 4 is already used\n+            shouldHaveThrown();\n+        } catch (TestFormatException _) {\n+            \/\/ Expected.\n@@ -127,0 +171,1 @@\n+        testFramework.addScenarios(new Scenario(5, \"-XX:+UseNewCode3\"));\n@@ -128,0 +173,14 @@\n+        new TestCase()\n+                .expectedScenariosWithFlags(Set.of(\n+                        Set.of(\"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode\"),\n+                        Set.of(\"-XX:TLABRefillWasteFraction=53\", \"-XX:+UseNewCode2\"),\n+                        Set.of(\"-XX:+UseNewCode3\")\n+                ))\n+                .runWithPreAddedScenarios(testFramework);\n+    }\n+\n+    private static void expectFormatFailure(Set<String>... flagSets) {\n+        TestFramework testFramework = new TestFramework();\n@@ -129,13 +188,4 @@\n-            TestFramework t6 = new TestFramework();\n-            t6.addScenarios(new Scenario(0, \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UseNewCode\")); \/\/ failPair\n-            t6.addCrossProductScenarios(Set.of(\"-XX:TLABRefillWasteFraction=51\", \"-XX:TLABRefillWasteFraction=53\"),\n-                                        Set.of(\"-XX:+UseNewCode\", \"-XX:+UseNewCode2\"));\n-            try {\n-                t6.addScenarios(new Scenario(4, \"-XX:+UseNewCode3\")); \/\/ fails because index 4 is already used\n-            Asserts.fail(\"Should have thrown exception\");\n-            } catch (TestFormatException e) {}\n-            t6.addScenarios(new Scenario(5, \"-XX:+UseNewCode3\")); \/\/ fail default\n-            t6.start();\n-            Asserts.fail(\"Should have thrown exception\");\n-        } catch (TestRunException e) {\n-            hasNFailures(e.getMessage(), 6);\n+            testFramework.addCrossProductScenarios(flagSets);\n+            shouldHaveThrown();\n+        } catch (TestFormatException _) {\n+            \/\/ Expected.\n@@ -145,3 +195,2 @@\n-    @Test\n-    @IR(applyIf = {\"TLABRefillWasteFraction\", \"64\"}, counts = {IRNode.CALL, \"1\"})\n-    public void failDefault() {\n+    private static void shouldHaveThrown() {\n+        Asserts.fail(\"Should have thrown exception\");\n@@ -150,4 +199,3 @@\n-    @Test\n-    @IR(applyIf = {\"TLABRefillWasteFraction\", \"51\"}, counts = {IRNode.CALL, \"1\"})\n-    public void fail1() {\n-    }\n+    static class TestCase {\n+        private Set<Set<String>> inputFlags;\n+        private Set<Set<String>> expectedScenariosWithFlags;\n@@ -155,3 +203,97 @@\n-    @Test\n-    @IR(applyIf = {\"TLABRefillWasteFraction\", \"53\"}, counts = {IRNode.CALL, \"1\"})\n-    public void fail2() {\n+        public TestCase inputFlags(Set<Set<String>> inputFlags) {\n+            this.inputFlags = inputFlags;\n+            return this;\n+        }\n+\n+        public TestCase expectedScenariosWithFlags(Set<Set<String>> expectedScenariosWithFlags) {\n+            this.expectedScenariosWithFlags = expectedScenariosWithFlags;\n+            return this;\n+        }\n+\n+        public void run() {\n+            TestFramework testFramework = new TestFramework();\n+            testFramework.addCrossProductScenarios(inputFlags.toArray(new Set[0]));\n+            runWithPreAddedScenarios(testFramework);\n+        }\n+\n+        public void runWithPreAddedScenarios(TestFramework testFramework) {\n+            List<Scenario> scenariosFromCrossProduct = getScenarios(testFramework);\n+            assertScenarioCount(expectedScenariosWithFlags.size(), scenariosFromCrossProduct);\n+            assertScenariosWithFlags(scenariosFromCrossProduct, expectedScenariosWithFlags);\n+            assertSameResultWhenManuallyAdding(scenariosFromCrossProduct, expectedScenariosWithFlags);\n+        }\n+\n+        private static List<Scenario> getScenarios(TestFramework testFramework) {\n+            Field field;\n+            try {\n+                field = TestFramework.class.getDeclaredField(\"scenarios\");\n+                field.setAccessible(true);\n+                return (List<Scenario>)field.get(testFramework);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private static void assertScenarioCount(int expectedCount, List<Scenario> scenarios) {\n+            Asserts.assertEQ(expectedCount, scenarios.size(), \"Scenario count is off\");\n+        }\n+\n+        \/**\n+         * Check that the added scenarios to the IR framework with TestFramework.addCrossProductScenarios()\n+         * (i.e. 'scenariosFromCrossProduct') match the expected flag combos (i.e. 'expectedScenariosWithFlags').\n+         *\/\n+        private static void assertScenariosWithFlags(List<Scenario> scenariosFromCrossProduct,\n+                                                     Set<Set<String>> expectedScenariosWithFlags) {\n+            outer:\n+            for (Set<String> expectedScenarioFlags : expectedScenariosWithFlags) {\n+                for (Scenario scenario : scenariosFromCrossProduct) {\n+                    Set<String> scenarioFlags = new HashSet<>(scenario.getFlags());\n+                    if (scenarioFlags.equals(expectedScenarioFlags)) { \/\/ equals() ignores order\n+                        continue outer;\n+                    }\n+                }\n+                System.err.println(\"Scenarios from cross product:\");\n+                for (Scenario s : scenariosFromCrossProduct) {\n+                    System.err.println(Arrays.toString(s.getFlags().toArray()));\n+                }\n+                throw new RuntimeException(\"Could not find a scenario with the provided flags: \" + Arrays.toString(expectedScenarioFlags.toArray()));\n+            }\n+        }\n+\n+        \/**\n+         * Add scenarios for the provided flag sets in 'expectedScenariosWithFlags' by using TestFramework.addScenarios().\n+         * We should end up with the same scenarios as if we added them with TestFramework.addCrossProductScenarios().\n+         * This is verified by this method by comparing the flags of the scenarios, ignoring scenario indices.\n+         *\/\n+        private static void assertSameResultWhenManuallyAdding(List<Scenario> scenariosFromCrossProduct,\n+                                                               Set<Set<String>> expectedScenariosWithFlags) {\n+            List<Scenario> expectedScenarios = getScenariosWIthFlags(expectedScenariosWithFlags);\n+            List<Scenario> fetchedScenarios = addScenariosAndFetchFromFramework(expectedScenarios);\n+            assertSameScenarios(scenariosFromCrossProduct, fetchedScenarios);\n+        }\n+\n+        private static List<Scenario> getScenariosWIthFlags(Set<Set<String>> expectedScenariosWithFlags) {\n+            List<Scenario> expecedScenarioList = new ArrayList<>();\n+            int index = -1; \/\/ Use some different indices - should not matter what we choose.\n+            for (Set<String> expectedScenarioFlags : expectedScenariosWithFlags) {\n+                expecedScenarioList.add(new Scenario(index--, expectedScenarioFlags.toArray(new String[0])));\n+            }\n+            return expecedScenarioList;\n+        }\n+\n+        private static List<Scenario> addScenariosAndFetchFromFramework(List<Scenario> expecedScenarioList) {\n+            TestFramework testFramework = new TestFramework();\n+            testFramework.addScenarios(expecedScenarioList.toArray(new Scenario[0]));\n+            return getScenarios(testFramework);\n+        }\n+\n+        private static void assertSameScenarios(List<Scenario> scenariosFromCrossProduct,\n+                                                List<Scenario> expectedScenarios) {\n+            assertScenariosWithFlags(scenariosFromCrossProduct, fetchFlags(expectedScenarios));\n+        }\n+\n+        private static Set<Set<String>> fetchFlags(List<Scenario> scenarios) {\n+            return scenarios.stream()\n+                    .map(scenario -> new HashSet<>(scenario.getFlags()))\n+                    .collect(Collectors.toSet());\n+        }\n@@ -161,3 +303,1 @@\n-    @IR(applyIfAnd = {\"TLABRefillWasteFraction\", \"50\", \"UseNewCode\", \"true\"}, counts = {IRNode.CALL, \"1\"})\n-    public void failPair() {\n-    }\n+    public void notActuallyRun() {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":230,"deletions":90,"binary":false,"changes":320,"status":"modified"}]}