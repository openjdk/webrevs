{"files":[{"patch":"@@ -27,4 +27,2 @@\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;\n+import java.util.stream.Collectors;\n@@ -222,3 +220,4 @@\n-            List<Scenario> scenarios = getScenarios(testFramework);\n-            assertScenarioCount(expectedScenariosWithFlags.size(), scenarios);\n-            assertScenariosWithFlags(scenarios, expectedScenariosWithFlags);\n+            List<Scenario> scenariosFromCrossProduct = getScenarios(testFramework);\n+            assertScenarioCount(expectedScenariosWithFlags.size(), scenariosFromCrossProduct);\n+            assertScenariosWithFlags(scenariosFromCrossProduct, expectedScenariosWithFlags);\n+            assertSameResultWhenManuallyAdding(scenariosFromCrossProduct, expectedScenariosWithFlags);\n@@ -242,2 +241,6 @@\n-        \/\/ Check that the added scenarios to the IR framework match the expectation.\n-        private static void assertScenariosWithFlags(List<Scenario> scenarios, Set<Set<String>> expectedScenariosWithFlags) {\n+        \/**\n+         * Check that the added scenarios to the IR framework with TestFramework.addCrossProductScenarios()\n+         * (i.e. 'scenariosFromCrossProduct') match the expected flag combos (i.e. 'expectedScenariosWithFlags').\n+         *\/\n+        private static void assertScenariosWithFlags(List<Scenario> scenariosFromCrossProduct,\n+                                                     Set<Set<String>> expectedScenariosWithFlags) {\n@@ -246,1 +249,1 @@\n-                for (Scenario scenario : scenarios) {\n+                for (Scenario scenario : scenariosFromCrossProduct) {\n@@ -252,2 +255,2 @@\n-                System.err.println(\"Found scenarios:\");\n-                for (Scenario s : scenarios) {\n+                System.err.println(\"Scenarios from cross product:\");\n+                for (Scenario s : scenariosFromCrossProduct) {\n@@ -259,0 +262,38 @@\n+\n+        \/**\n+         * Add scenarios for the provided flag sets in 'expectedScenariosWithFlags' by using TestFramework.addScenarios().\n+         * We should end up with the same scenarios as if we added them with TestFramework.addCrossProductScenarios().\n+         * This is verified by this method by comparing the flags of the scenarios, ignoring scenario indices.\n+         *\/\n+        private static void assertSameResultWhenManuallyAdding(List<Scenario> scenariosFromCrossProduct,\n+                                                               Set<Set<String>> expectedScenariosWithFlags) {\n+            List<Scenario> expectedScenarios = getScenariosWIthFlags(expectedScenariosWithFlags);\n+            List<Scenario> fetchedScenarios = addScenariosAndFetchFromFramework(expectedScenarios);\n+            assertSameScenarios(scenariosFromCrossProduct, fetchedScenarios);\n+        }\n+\n+        private static List<Scenario> getScenariosWIthFlags(Set<Set<String>> expectedScenariosWithFlags) {\n+            List<Scenario> expecedScenarioList = new ArrayList<>();\n+            int index = -1; \/\/ Use some different indices - should not matter what we choose.\n+            for (Set<String> expectedScenarioFlags : expectedScenariosWithFlags) {\n+                expecedScenarioList.add(new Scenario(index--, expectedScenarioFlags.toArray(new String[0])));\n+            }\n+            return expecedScenarioList;\n+        }\n+\n+        private static List<Scenario> addScenariosAndFetchFromFramework(List<Scenario> expecedScenarioList) {\n+            TestFramework testFramework = new TestFramework();\n+            testFramework.addScenarios(expecedScenarioList.toArray(new Scenario[0]));\n+            return getScenarios(testFramework);\n+        }\n+\n+        private static void assertSameScenarios(List<Scenario> scenariosFromCrossProduct,\n+                                                List<Scenario> expectedScenarios) {\n+            assertScenariosWithFlags(scenariosFromCrossProduct, fetchFlags(expectedScenarios));\n+        }\n+\n+        private static Set<Set<String>> fetchFlags(List<Scenario> scenarios) {\n+            return scenarios.stream()\n+                    .map(scenario -> new HashSet<>(scenario.getFlags()))\n+                    .collect(Collectors.toSet());\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":53,"deletions":12,"binary":false,"changes":65,"status":"modified"}]}