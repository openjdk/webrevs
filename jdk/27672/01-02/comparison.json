{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -32,0 +34,1 @@\n+import compiler.lib.ir_framework.shared.TestRunException;\n@@ -53,1 +56,4 @@\n-        } catch (NullPointerException e) {} \/\/ Set.of prevents null elements\n+        } catch (NullPointerException _) {\n+            \/\/ Expected: Set.of prevents null elements\n+        }\n+\n@@ -183,0 +189,2 @@\n+\n+        runEndToEndTest();\n@@ -226,11 +234,0 @@\n-        private static List<Scenario> getScenarios(TestFramework testFramework) {\n-            Field field;\n-            try {\n-                field = TestFramework.class.getDeclaredField(\"scenarios\");\n-                field.setAccessible(true);\n-                return (List<Scenario>)field.get(testFramework);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n@@ -247,1 +244,0 @@\n-            outer:\n@@ -249,5 +245,5 @@\n-                for (Scenario scenario : scenariosFromCrossProduct) {\n-                    Set<String> scenarioFlags = new HashSet<>(scenario.getFlags());\n-                    if (scenarioFlags.equals(expectedScenarioFlags)) { \/\/ equals() ignores order\n-                        continue outer;\n-                    }\n+                if (scenariosFromCrossProduct.stream()\n+                        .map(Scenario::getFlags)\n+                        .map(Set::copyOf)\n+                        .anyMatch(flags -> flags.equals(expectedScenarioFlags))) {\n+                    continue;\n@@ -302,0 +298,43 @@\n+    private static List<Scenario> getScenarios(TestFramework testFramework) {\n+        Field field;\n+        try {\n+            field = TestFramework.class.getDeclaredField(\"scenarios\");\n+            field.setAccessible(true);\n+            return (List<Scenario>)field.get(testFramework);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     *  Also run a simple end-to-end test to sanity check the API method. We capture the stderr to fetch the\n+     *  scenario flags.\n+     *\/\n+    private static void runEndToEndTest() {\n+        TestFramework testFramework = new TestFramework();\n+\n+        \/\/ Capture stderr\n+        PrintStream originalErr = System.err;\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(outputStream);\n+        System.setErr(printStream);\n+\n+        try {\n+            testFramework\n+                    .addCrossProductScenarios(Set.of(\"-XX:+UseNewCode\", \"-XX:-UseNewCode\"),\n+                                              Set.of(\"-XX:+UseNewCode2\", \"-XX:-UseNewCode2\"))\n+                    .addFlags()\n+                    .start();\n+            shouldHaveThrown();\n+        } catch (TestRunException e) {\n+            \/\/ Expected.\n+            System.setErr(originalErr);\n+            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #2, #3\"));\n+            String stdErr = outputStream.toString();\n+            Asserts.assertTrue(stdErr.contains(\"Scenario flags: [-XX:+UseNewCode, -XX:+UseNewCode2]\"));\n+            Asserts.assertTrue(stdErr.contains(\"Scenario flags: [-XX:-UseNewCode, -XX:-UseNewCode2]\"));\n+            Asserts.assertTrue(stdErr.contains(\"Scenario flags: [-XX:+UseNewCode, -XX:-UseNewCode2]\"));\n+            Asserts.assertTrue(stdErr.contains(\"Scenario flags: [-XX:-UseNewCode, -XX:+UseNewCode2]\"));\n+        }\n+    }\n+\n@@ -303,1 +342,3 @@\n-    public void notActuallyRun() {}\n+    public void endToEndTest() {\n+        throw new RuntimeException(\"executed test\");\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenariosCrossProduct.java","additions":60,"deletions":19,"binary":false,"changes":79,"status":"modified"}]}