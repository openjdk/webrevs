{"files":[{"patch":"@@ -212,0 +212,10 @@\n+<h4 id=\"conventions-for-lock-free-code\">Conventions for Lock-free\n+Code<\/h4>\n+<p>Sometimes variables are accessed concurrently without appropriate\n+synchronization context, such as a held mutex or at a safepoint. In such\n+cases the variable should be declared <code>volatile<\/code> and it\n+should NOT be accessed as a normal C++ lvalue. Rather, access should be\n+performed via functions from <code>Atomic<\/code>, such as\n+<code>Atomic::load<\/code>, <code>Atomic::store<\/code>, etc.<\/p>\n+<p>This special formulation makes it more clear to maintainers that the\n+variable is accessed concurrently in a lock-free manner.<\/p>\n","filename":"doc\/hotspot-style.html","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -138,0 +138,11 @@\n+#### Conventions for Lock-free Code\n+\n+Sometimes variables are accessed concurrently without appropriate synchronization\n+context, such as a held mutex or at a safepoint. In such cases the variable should\n+be declared `volatile` and it should NOT be accessed as a normal C++ lvalue. Rather,\n+access should be performed via functions from `Atomic`, such as `Atomic::load`,\n+`Atomic::store`, etc.\n+\n+This special formulation makes it more clear to maintainers that the variable is\n+accessed concurrently in a lock-free manner.\n+\n","filename":"doc\/hotspot-style.md","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}