{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferences.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferencesFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1059,1 +1059,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/AbstractPreferences.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -220,1 +220,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -248,4 +247,0 @@\n-        return factory1();\n-    }\n-\n-    private static PreferencesFactory factory1() {\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/Preferences.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-\/\/import java.security.AccessController;\n-\/\/import java.security.PrivilegedAction;\n-\/\/import java.security.PrivilegedExceptionAction;\n@@ -58,5 +55,1 @@\n-\/\/        PrivilegedAction<Void> load = () -> {\n-            System.loadLibrary(\"prefs\");\n-\/\/            return null;\n-\/\/        };\n-\/\/        AccessController.doPrivileged(load);\n+        System.loadLibrary(\"prefs\");\n@@ -119,1 +112,0 @@\n-\/\/    @SuppressWarnings(\"removal\")\n@@ -121,26 +113,6 @@\n-\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/            public Void run() {\n-                userRootDir =\n-                      new File(System.getProperty(\"java.util.prefs.userRoot\",\n-                      System.getProperty(\"user.home\")), \".java\/.userPrefs\");\n-                \/\/ Attempt to create root dir if it does not yet exist.\n-                if (!userRootDir.exists()) {\n-                    if (userRootDir.mkdirs()) {\n-                        try {\n-                            chmod(userRootDir.getCanonicalPath(), USER_RWX);\n-                        } catch (IOException e) {\n-                            getLogger().warning(\"Could not change permissions\" +\n-                                \" on userRoot directory. \");\n-                        }\n-                        getLogger().info(\"Created user preferences directory.\");\n-                    }\n-                    else\n-                        getLogger().warning(\"Couldn't create user preferences\" +\n-                        \" directory. User preferences are unusable.\");\n-                }\n-                isUserRootWritable = userRootDir.canWrite();\n-                String USER_NAME = System.getProperty(\"user.name\");\n-                userLockFile = new File (userRootDir,\".user.lock.\" + USER_NAME);\n-                userRootModFile = new File (userRootDir,\n-                                               \".userRootModFile.\" + USER_NAME);\n-                if (!userRootModFile.exists())\n+        userRootDir =\n+              new File(System.getProperty(\"java.util.prefs.userRoot\",\n+              System.getProperty(\"user.home\")), \".java\/.userPrefs\");\n+        \/\/ Attempt to create root dir if it does not yet exist.\n+        if (!userRootDir.exists()) {\n+            if (userRootDir.mkdirs()) {\n@@ -148,10 +120,1 @@\n-                    \/\/ create if does not exist.\n-                    userRootModFile.createNewFile();\n-                    \/\/ Only user can read\/write userRootModFile.\n-                    int result = chmod(userRootModFile.getCanonicalPath(),\n-                                                               USER_READ_WRITE);\n-                    if (result !=0)\n-                        getLogger().warning(\"Problem creating userRoot \" +\n-                            \"mod file. Chmod failed on \" +\n-                             userRootModFile.getCanonicalPath() +\n-                             \" Unix error code \" + result);\n+                    chmod(userRootDir.getCanonicalPath(), USER_RWX);\n@@ -159,1 +122,2 @@\n-                    getLogger().warning(e.toString());\n+                    getLogger().warning(\"Could not change permissions\" +\n+                        \" on userRoot directory. \");\n@@ -161,4 +125,27 @@\n-                userRootModTime = userRootModFile.lastModified();\n-\/\/                return null;\n-\/\/            }\n-\/\/        });\n+                getLogger().info(\"Created user preferences directory.\");\n+            }\n+            else\n+                getLogger().warning(\"Couldn't create user preferences\" +\n+                \" directory. User preferences are unusable.\");\n+        }\n+        isUserRootWritable = userRootDir.canWrite();\n+        String USER_NAME = System.getProperty(\"user.name\");\n+        userLockFile = new File (userRootDir,\".user.lock.\" + USER_NAME);\n+        userRootModFile = new File (userRootDir,\n+                                       \".userRootModFile.\" + USER_NAME);\n+        if (!userRootModFile.exists())\n+        try {\n+            \/\/ create if does not exist.\n+            userRootModFile.createNewFile();\n+            \/\/ Only user can read\/write userRootModFile.\n+            int result = chmod(userRootModFile.getCanonicalPath(),\n+                                                       USER_READ_WRITE);\n+            if (result !=0)\n+                getLogger().warning(\"Problem creating userRoot \" +\n+                    \"mod file. Chmod failed on \" +\n+                     userRootModFile.getCanonicalPath() +\n+                     \" Unix error code \" + result);\n+        } catch (IOException e) {\n+            getLogger().warning(e.toString());\n+        }\n+        userRootModTime = userRootModFile.lastModified();\n@@ -187,1 +174,0 @@\n-\/\/    @SuppressWarnings(\"removal\")\n@@ -189,28 +175,20 @@\n-\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/            public Void run() {\n-                String systemPrefsDirName =\n-                  System.getProperty(\"java.util.prefs.systemRoot\",\"\/etc\/.java\");\n-                systemRootDir =\n-                     new File(systemPrefsDirName, \".systemPrefs\");\n-                \/\/ Attempt to create root dir if it does not yet exist.\n-                if (!systemRootDir.exists()) {\n-                    \/\/ system root does not exist in \/etc\/.java\n-                    \/\/ Switching  to java.home\n-                    systemRootDir =\n-                                  new File(System.getProperty(\"java.home\"),\n-                                                            \".systemPrefs\");\n-                    if (!systemRootDir.exists()) {\n-                        if (systemRootDir.mkdirs()) {\n-                            getLogger().info(\n-                                \"Created system preferences directory \"\n-                                + \"in java.home.\");\n-                            try {\n-                                chmod(systemRootDir.getCanonicalPath(),\n-                                                          USER_RWX_ALL_RX);\n-                            } catch (IOException e) {\n-                            }\n-                        } else {\n-                            getLogger().warning(\"Could not create \"\n-                                + \"system preferences directory. System \"\n-                                + \"preferences are unusable.\");\n-                        }\n+        String systemPrefsDirName =\n+          System.getProperty(\"java.util.prefs.systemRoot\",\"\/etc\/.java\");\n+        systemRootDir =\n+             new File(systemPrefsDirName, \".systemPrefs\");\n+        \/\/ Attempt to create root dir if it does not yet exist.\n+        if (!systemRootDir.exists()) {\n+            \/\/ system root does not exist in \/etc\/.java\n+            \/\/ Switching  to java.home\n+            systemRootDir =\n+                          new File(System.getProperty(\"java.home\"),\n+                                                    \".systemPrefs\");\n+            if (!systemRootDir.exists()) {\n+                if (systemRootDir.mkdirs()) {\n+                    getLogger().info(\n+                        \"Created system preferences directory \"\n+                        + \"in java.home.\");\n+                    try {\n+                        chmod(systemRootDir.getCanonicalPath(),\n+                                                  USER_RWX_ALL_RX);\n+                    } catch (IOException e) {\n@@ -218,0 +196,4 @@\n+                } else {\n+                    getLogger().warning(\"Could not create \"\n+                        + \"system preferences directory. System \"\n+                        + \"preferences are unusable.\");\n@@ -219,20 +201,19 @@\n-                isSystemRootWritable = systemRootDir.canWrite();\n-                systemLockFile = new File(systemRootDir, \".system.lock\");\n-                systemRootModFile =\n-                               new File (systemRootDir,\".systemRootModFile\");\n-                if (!systemRootModFile.exists() && isSystemRootWritable)\n-                try {\n-                    \/\/ create if does not exist.\n-                    systemRootModFile.createNewFile();\n-                    int result = chmod(systemRootModFile.getCanonicalPath(),\n-                                                          USER_RW_ALL_READ);\n-                    if (result !=0)\n-                        getLogger().warning(\"Chmod failed on \" +\n-                               systemRootModFile.getCanonicalPath() +\n-                              \" Unix error code \" + result);\n-                } catch (IOException e) { getLogger().warning(e.toString());\n-                }\n-                systemRootModTime = systemRootModFile.lastModified();\n-\/\/                return null;\n-\/\/            }\n-\/\/        });\n+            }\n+        }\n+        isSystemRootWritable = systemRootDir.canWrite();\n+        systemLockFile = new File(systemRootDir, \".system.lock\");\n+        systemRootModFile =\n+                       new File (systemRootDir,\".systemRootModFile\");\n+        if (!systemRootModFile.exists() && isSystemRootWritable)\n+        try {\n+            \/\/ create if does not exist.\n+            systemRootModFile.createNewFile();\n+            int result = chmod(systemRootModFile.getCanonicalPath(),\n+                                                  USER_RW_ALL_READ);\n+            if (result !=0)\n+                getLogger().warning(\"Chmod failed on \" +\n+                       systemRootModFile.getCanonicalPath() +\n+                      \" Unix error code \" + result);\n+        } catch (IOException e) { getLogger().warning(e.toString());\n+        }\n+        systemRootModTime = systemRootModFile.lastModified();\n@@ -458,1 +439,0 @@\n-\/\/    @SuppressWarnings(\"removal\")\n@@ -468,12 +448,7 @@\n-\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/            public Void run() {\n-                Runtime.getRuntime().addShutdownHook(\n-                    new Thread(null, null, \"Sync Timer Thread\", 0, false) {\n-                    public void run() {\n-                        syncTimer.cancel();\n-                        syncWorld();\n-                    }\n-                });\n-\/\/                return null;\n-\/\/            }\n-\/\/        });\n+        Runtime.getRuntime().addShutdownHook(\n+            new Thread(null, null, \"Sync Timer Thread\", 0, false) {\n+            public void run() {\n+                syncTimer.cancel();\n+                syncWorld();\n+            }\n+        });\n@@ -528,1 +503,0 @@\n-\/\/    @SuppressWarnings(\"removal\")\n@@ -535,6 +509,1 @@\n-\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/            public Void run() {\n-                newNode = !dir.exists();\n-\/\/                return null;\n-\/\/            }\n-\/\/        });\n+        newNode = !dir.exists();\n@@ -600,35 +569,25 @@\n-\/\/        try {\n-\/\/            AccessController.doPrivileged(\n-\/\/                new PrivilegedExceptionAction<Void>() {\n-\/\/                public Void run() throws BackingStoreException {\n-                    Map<String, String> m = new TreeMap<>();\n-                    long newLastSyncTime = 0;\n-                    try {\n-                        newLastSyncTime = prefsFile.lastModified();\n-                        try (FileInputStream fis = new FileInputStream(prefsFile)) {\n-                            XmlSupport.importMap(fis, m);\n-                        }\n-                    } catch(Exception e) {\n-                        if (e instanceof InvalidPreferencesFormatException) {\n-                            getLogger().warning(\"Invalid preferences format in \"\n-                                                        +  prefsFile.getPath());\n-                            prefsFile.renameTo( new File(\n-                                                    prefsFile.getParentFile(),\n-                                                  \"IncorrectFormatPrefs.xml\"));\n-                            m = new TreeMap<>();\n-                        } else if (e instanceof FileNotFoundException) {\n-                        getLogger().warning(\"Prefs file removed in background \"\n-                                           + prefsFile.getPath());\n-                        } else {\n-                            throw new BackingStoreException(e);\n-                        }\n-                    }\n-                    \/\/ Attempt succeeded; update state\n-                    prefsCache = m;\n-                    lastSyncTime = newLastSyncTime;\n-\/\/                    return null;\n-\/\/                }\n-\/\/            });\n-\/\/        } catch (PrivilegedActionException e) { \/\/ get rid of?\n-\/\/            throw (BackingStoreException) e.getException();\n-\/\/        }\n+        Map<String, String> m = new TreeMap<>();\n+        long newLastSyncTime = 0;\n+        try {\n+            newLastSyncTime = prefsFile.lastModified();\n+            try (FileInputStream fis = new FileInputStream(prefsFile)) {\n+                XmlSupport.importMap(fis, m);\n+            }\n+        } catch(Exception e) {\n+            if (e instanceof InvalidPreferencesFormatException) {\n+                getLogger().warning(\"Invalid preferences format in \"\n+                                            +  prefsFile.getPath());\n+                prefsFile.renameTo( new File(\n+                                        prefsFile.getParentFile(),\n+                                      \"IncorrectFormatPrefs.xml\"));\n+                m = new TreeMap<>();\n+            } else if (e instanceof FileNotFoundException) {\n+            getLogger().warning(\"Prefs file removed in background \"\n+                               + prefsFile.getPath());\n+            } else {\n+                throw new BackingStoreException(e);\n+            }\n+        }\n+        \/\/ Attempt succeeded; update state\n+        prefsCache = m;\n+        lastSyncTime = newLastSyncTime;\n@@ -766,3 +725,0 @@\n-        syncSpiPrivileged();\n-    }\n-    private void syncSpiPrivileged() throws BackingStoreException {\n","filename":"src\/java.prefs\/unix\/classes\/java\/util\/prefs\/FileSystemPreferences.java","additions":113,"deletions":157,"binary":false,"changes":270,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-\/\/import java.security.AccessController;\n-\/\/import java.security.PrivilegedAction;\n","filename":"src\/java.prefs\/windows\/classes\/java\/util\/prefs\/WindowsPreferences.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}