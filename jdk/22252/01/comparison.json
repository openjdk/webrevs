{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-    \/\/ fixme need security checks?\n-\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferences.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -87,7 +87,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"prefs\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"prefs\");\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferencesFile.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -1061,1 +1059,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1063,6 +1060,1 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    return root == Preferences.userRoot();\n-            }\n-            }).booleanValue();\n+        return root == Preferences.userRoot();\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/AbstractPreferences.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -40,7 +37,0 @@\n-\/\/ These imports needed only as a workaround for a JavaDoc bug\n-import java.lang.RuntimePermission;\n-import java.lang.Integer;\n-import java.lang.Long;\n-import java.lang.Float;\n-import java.lang.Double;\n-\n@@ -230,1 +220,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -233,5 +222,1 @@\n-        String factoryName = AccessController.doPrivileged(\n-            new PrivilegedAction<String>() {\n-                public String run() {\n-                    return System.getProperty(\n-                        \"java.util.prefs.PreferencesFactory\");}});\n+        String factoryName = System.getProperty(\"java.util.prefs.PreferencesFactory\");\n@@ -239,4 +224,0 @@\n-            \/\/ FIXME: This code should be run in a doPrivileged and\n-            \/\/ not use the context classloader, to avoid being\n-            \/\/ dependent on the invoking thread.\n-            \/\/ Checking AllPermission also seems wrong.\n@@ -253,4 +234,0 @@\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        sm.checkPermission(new java.security.AllPermission());\n-                    }\n@@ -270,8 +247,0 @@\n-\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<PreferencesFactory>() {\n-                public PreferencesFactory run() {\n-                    return factory1();}});\n-    }\n-\n-    private static PreferencesFactory factory1() {\n@@ -430,7 +399,0 @@\n-    \/**\n-     * This permission object represents the permission required to get\n-     * access to the user or system root (which in turn allows for all\n-     * other operations).\n-     *\/\n-    private static Permission prefsPerm = new RuntimePermission(\"preferences\");\n-\n@@ -443,5 +405,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkPermission(prefsPerm);\n-\n@@ -457,5 +414,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkPermission(prefsPerm);\n-\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/Preferences.java","additions":1,"deletions":49,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -56,1 +53,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -58,5 +55,1 @@\n-        PrivilegedAction<Void> load = () -> {\n-            System.loadLibrary(\"prefs\");\n-            return null;\n-        };\n-        AccessController.doPrivileged(load);\n+        System.loadLibrary(\"prefs\");\n@@ -70,2 +63,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-             Integer.getInteger(\"java.util.prefs.syncInterval\", 30)));\n+            Integer.getInteger(\"java.util.prefs.syncInterval\", 30));\n@@ -120,1 +112,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -122,26 +113,6 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                userRootDir =\n-                      new File(System.getProperty(\"java.util.prefs.userRoot\",\n-                      System.getProperty(\"user.home\")), \".java\/.userPrefs\");\n-                \/\/ Attempt to create root dir if it does not yet exist.\n-                if (!userRootDir.exists()) {\n-                    if (userRootDir.mkdirs()) {\n-                        try {\n-                            chmod(userRootDir.getCanonicalPath(), USER_RWX);\n-                        } catch (IOException e) {\n-                            getLogger().warning(\"Could not change permissions\" +\n-                                \" on userRoot directory. \");\n-                        }\n-                        getLogger().info(\"Created user preferences directory.\");\n-                    }\n-                    else\n-                        getLogger().warning(\"Couldn't create user preferences\" +\n-                        \" directory. User preferences are unusable.\");\n-                }\n-                isUserRootWritable = userRootDir.canWrite();\n-                String USER_NAME = System.getProperty(\"user.name\");\n-                userLockFile = new File (userRootDir,\".user.lock.\" + USER_NAME);\n-                userRootModFile = new File (userRootDir,\n-                                               \".userRootModFile.\" + USER_NAME);\n-                if (!userRootModFile.exists())\n+        userRootDir =\n+              new File(System.getProperty(\"java.util.prefs.userRoot\",\n+              System.getProperty(\"user.home\")), \".java\/.userPrefs\");\n+        \/\/ Attempt to create root dir if it does not yet exist.\n+        if (!userRootDir.exists()) {\n+            if (userRootDir.mkdirs()) {\n@@ -149,10 +120,1 @@\n-                    \/\/ create if does not exist.\n-                    userRootModFile.createNewFile();\n-                    \/\/ Only user can read\/write userRootModFile.\n-                    int result = chmod(userRootModFile.getCanonicalPath(),\n-                                                               USER_READ_WRITE);\n-                    if (result !=0)\n-                        getLogger().warning(\"Problem creating userRoot \" +\n-                            \"mod file. Chmod failed on \" +\n-                             userRootModFile.getCanonicalPath() +\n-                             \" Unix error code \" + result);\n+                    chmod(userRootDir.getCanonicalPath(), USER_RWX);\n@@ -160,1 +122,2 @@\n-                    getLogger().warning(e.toString());\n+                    getLogger().warning(\"Could not change permissions\" +\n+                        \" on userRoot directory. \");\n@@ -162,2 +125,1 @@\n-                userRootModTime = userRootModFile.lastModified();\n-                return null;\n+                getLogger().info(\"Created user preferences directory.\");\n@@ -165,1 +127,25 @@\n-        });\n+            else\n+                getLogger().warning(\"Couldn't create user preferences\" +\n+                \" directory. User preferences are unusable.\");\n+        }\n+        isUserRootWritable = userRootDir.canWrite();\n+        String USER_NAME = System.getProperty(\"user.name\");\n+        userLockFile = new File (userRootDir,\".user.lock.\" + USER_NAME);\n+        userRootModFile = new File (userRootDir,\n+                                       \".userRootModFile.\" + USER_NAME);\n+        if (!userRootModFile.exists())\n+        try {\n+            \/\/ create if does not exist.\n+            userRootModFile.createNewFile();\n+            \/\/ Only user can read\/write userRootModFile.\n+            int result = chmod(userRootModFile.getCanonicalPath(),\n+                                                       USER_READ_WRITE);\n+            if (result !=0)\n+                getLogger().warning(\"Problem creating userRoot \" +\n+                    \"mod file. Chmod failed on \" +\n+                     userRootModFile.getCanonicalPath() +\n+                     \" Unix error code \" + result);\n+        } catch (IOException e) {\n+            getLogger().warning(e.toString());\n+        }\n+        userRootModTime = userRootModFile.lastModified();\n@@ -188,1 +174,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -190,28 +175,20 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                String systemPrefsDirName =\n-                  System.getProperty(\"java.util.prefs.systemRoot\",\"\/etc\/.java\");\n-                systemRootDir =\n-                     new File(systemPrefsDirName, \".systemPrefs\");\n-                \/\/ Attempt to create root dir if it does not yet exist.\n-                if (!systemRootDir.exists()) {\n-                    \/\/ system root does not exist in \/etc\/.java\n-                    \/\/ Switching  to java.home\n-                    systemRootDir =\n-                                  new File(System.getProperty(\"java.home\"),\n-                                                            \".systemPrefs\");\n-                    if (!systemRootDir.exists()) {\n-                        if (systemRootDir.mkdirs()) {\n-                            getLogger().info(\n-                                \"Created system preferences directory \"\n-                                + \"in java.home.\");\n-                            try {\n-                                chmod(systemRootDir.getCanonicalPath(),\n-                                                          USER_RWX_ALL_RX);\n-                            } catch (IOException e) {\n-                            }\n-                        } else {\n-                            getLogger().warning(\"Could not create \"\n-                                + \"system preferences directory. System \"\n-                                + \"preferences are unusable.\");\n-                        }\n+        String systemPrefsDirName =\n+          System.getProperty(\"java.util.prefs.systemRoot\",\"\/etc\/.java\");\n+        systemRootDir =\n+             new File(systemPrefsDirName, \".systemPrefs\");\n+        \/\/ Attempt to create root dir if it does not yet exist.\n+        if (!systemRootDir.exists()) {\n+            \/\/ system root does not exist in \/etc\/.java\n+            \/\/ Switching  to java.home\n+            systemRootDir =\n+                          new File(System.getProperty(\"java.home\"),\n+                                                    \".systemPrefs\");\n+            if (!systemRootDir.exists()) {\n+                if (systemRootDir.mkdirs()) {\n+                    getLogger().info(\n+                        \"Created system preferences directory \"\n+                        + \"in java.home.\");\n+                    try {\n+                        chmod(systemRootDir.getCanonicalPath(),\n+                                                  USER_RWX_ALL_RX);\n+                    } catch (IOException e) {\n@@ -219,0 +196,4 @@\n+                } else {\n+                    getLogger().warning(\"Could not create \"\n+                        + \"system preferences directory. System \"\n+                        + \"preferences are unusable.\");\n@@ -220,18 +201,0 @@\n-                isSystemRootWritable = systemRootDir.canWrite();\n-                systemLockFile = new File(systemRootDir, \".system.lock\");\n-                systemRootModFile =\n-                               new File (systemRootDir,\".systemRootModFile\");\n-                if (!systemRootModFile.exists() && isSystemRootWritable)\n-                try {\n-                    \/\/ create if does not exist.\n-                    systemRootModFile.createNewFile();\n-                    int result = chmod(systemRootModFile.getCanonicalPath(),\n-                                                          USER_RW_ALL_READ);\n-                    if (result !=0)\n-                        getLogger().warning(\"Chmod failed on \" +\n-                               systemRootModFile.getCanonicalPath() +\n-                              \" Unix error code \" + result);\n-                } catch (IOException e) { getLogger().warning(e.toString());\n-                }\n-                systemRootModTime = systemRootModFile.lastModified();\n-                return null;\n@@ -239,1 +202,18 @@\n-        });\n+        }\n+        isSystemRootWritable = systemRootDir.canWrite();\n+        systemLockFile = new File(systemRootDir, \".system.lock\");\n+        systemRootModFile =\n+                       new File (systemRootDir,\".systemRootModFile\");\n+        if (!systemRootModFile.exists() && isSystemRootWritable)\n+        try {\n+            \/\/ create if does not exist.\n+            systemRootModFile.createNewFile();\n+            int result = chmod(systemRootModFile.getCanonicalPath(),\n+                                                  USER_RW_ALL_READ);\n+            if (result !=0)\n+                getLogger().warning(\"Chmod failed on \" +\n+                       systemRootModFile.getCanonicalPath() +\n+                      \" Unix error code \" + result);\n+        } catch (IOException e) { getLogger().warning(e.toString());\n+        }\n+        systemRootModTime = systemRootModFile.lastModified();\n@@ -459,1 +439,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -469,10 +448,5 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                Runtime.getRuntime().addShutdownHook(\n-                    new Thread(null, null, \"Sync Timer Thread\", 0, false) {\n-                    public void run() {\n-                        syncTimer.cancel();\n-                        syncWorld();\n-                    }\n-                });\n-                return null;\n+        Runtime.getRuntime().addShutdownHook(\n+            new Thread(null, null, \"Sync Timer Thread\", 0, false) {\n+            public void run() {\n+                syncTimer.cancel();\n+                syncWorld();\n@@ -529,1 +503,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -536,6 +509,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                newNode = !dir.exists();\n-                return null;\n-            }\n-        });\n+        newNode = !dir.exists();\n@@ -599,1 +567,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -601,0 +569,2 @@\n+        Map<String, String> m = new TreeMap<>();\n+        long newLastSyncTime = 0;\n@@ -602,33 +572,18 @@\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    Map<String, String> m = new TreeMap<>();\n-                    long newLastSyncTime = 0;\n-                    try {\n-                        newLastSyncTime = prefsFile.lastModified();\n-                        try (FileInputStream fis = new FileInputStream(prefsFile)) {\n-                            XmlSupport.importMap(fis, m);\n-                        }\n-                    } catch(Exception e) {\n-                        if (e instanceof InvalidPreferencesFormatException) {\n-                            getLogger().warning(\"Invalid preferences format in \"\n-                                                        +  prefsFile.getPath());\n-                            prefsFile.renameTo( new File(\n-                                                    prefsFile.getParentFile(),\n-                                                  \"IncorrectFormatPrefs.xml\"));\n-                            m = new TreeMap<>();\n-                        } else if (e instanceof FileNotFoundException) {\n-                        getLogger().warning(\"Prefs file removed in background \"\n-                                           + prefsFile.getPath());\n-                        } else {\n-                            throw new BackingStoreException(e);\n-                        }\n-                    }\n-                    \/\/ Attempt succeeded; update state\n-                    prefsCache = m;\n-                    lastSyncTime = newLastSyncTime;\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n+            newLastSyncTime = prefsFile.lastModified();\n+            try (FileInputStream fis = new FileInputStream(prefsFile)) {\n+                XmlSupport.importMap(fis, m);\n+            }\n+        } catch(Exception e) {\n+            if (e instanceof InvalidPreferencesFormatException) {\n+                getLogger().warning(\"Invalid preferences format in \"\n+                                            +  prefsFile.getPath());\n+                prefsFile.renameTo( new File(\n+                                        prefsFile.getParentFile(),\n+                                      \"IncorrectFormatPrefs.xml\"));\n+                m = new TreeMap<>();\n+            } else if (e instanceof FileNotFoundException) {\n+            getLogger().warning(\"Prefs file removed in background \"\n+                               + prefsFile.getPath());\n+            } else {\n+                throw new BackingStoreException(e);\n+            }\n@@ -636,0 +591,3 @@\n+        \/\/ Attempt succeeded; update state\n+        prefsCache = m;\n+        lastSyncTime = newLastSyncTime;\n@@ -647,1 +605,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -650,23 +607,13 @@\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    try {\n-                        if (!dir.exists() && !dir.mkdirs())\n-                            throw new BackingStoreException(dir +\n-                                                             \" create failed.\");\n-                        try (FileOutputStream fos = new FileOutputStream(tmpFile)) {\n-                            XmlSupport.exportMap(fos, prefsCache);\n-                        }\n-                        if (!tmpFile.renameTo(prefsFile))\n-                            throw new BackingStoreException(\"Can't rename \" +\n-                            tmpFile + \" to \" + prefsFile);\n-                    } catch(Exception e) {\n-                        if (e instanceof BackingStoreException)\n-                            throw (BackingStoreException)e;\n-                        throw new BackingStoreException(e);\n-                    }\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n+            if (!dir.exists() && !dir.mkdirs())\n+                throw new BackingStoreException(dir +\n+                                                 \" create failed.\");\n+            try (FileOutputStream fos = new FileOutputStream(tmpFile)) {\n+                XmlSupport.exportMap(fos, prefsCache);\n+            }\n+            if (!tmpFile.renameTo(prefsFile))\n+                throw new BackingStoreException(\"Can't rename \" +\n+                tmpFile + \" to \" + prefsFile);\n+        } catch(BackingStoreException e) {\n+            throw e;\n+        } catch(Exception e) {\n+            throw new BackingStoreException(e);\n@@ -681,1 +628,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -683,13 +629,8 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<String[]>() {\n-                public String[] run() {\n-                    List<String> result = new ArrayList<>();\n-                    File[] dirContents = dir.listFiles();\n-                    if (dirContents != null) {\n-                        for (int i = 0; i < dirContents.length; i++)\n-                            if (dirContents[i].isDirectory())\n-                                result.add(nodeName(dirContents[i].getName()));\n-                    }\n-                    return result.toArray(EMPTY_STRING_ARRAY);\n-               }\n-            });\n+        List<String> result = new ArrayList<>();\n+        File[] dirContents = dir.listFiles();\n+        if (dirContents != null) {\n+            for (int i = 0; i < dirContents.length; i++)\n+                if (dirContents[i].isDirectory())\n+                    result.add(nodeName(dirContents[i].getName()));\n+        }\n+        return result.toArray(EMPTY_STRING_ARRAY);\n@@ -720,1 +661,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -722,30 +662,17 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    if (changeLog.contains(nodeCreate)) {\n-                        changeLog.remove(nodeCreate);\n-                        nodeCreate = null;\n-                        return null;\n-                    }\n-                    if (!dir.exists())\n-                        return null;\n-                    prefsFile.delete();\n-                    tmpFile.delete();\n-                    \/\/ dir should be empty now.  If it's not, empty it\n-                    File[] junk = dir.listFiles();\n-                    if (junk.length != 0) {\n-                        getLogger().warning(\n-                           \"Found extraneous files when removing node: \"\n-                            + Arrays.asList(junk));\n-                        for (int i=0; i<junk.length; i++)\n-                            junk[i].delete();\n-                    }\n-                    if (!dir.delete())\n-                        throw new BackingStoreException(\"Couldn't delete dir: \"\n-                                                                         + dir);\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n+        if (changeLog.contains(nodeCreate)) {\n+            changeLog.remove(nodeCreate);\n+            nodeCreate = null;\n+            return;\n+        }\n+        if (!dir.exists())\n+            return;\n+        prefsFile.delete();\n+        tmpFile.delete();\n+        \/\/ dir should be empty now.  If it's not, empty it\n+        File[] junk = dir.listFiles();\n+        if (junk.length != 0) {\n+            getLogger().warning(\n+               \"Found extraneous files when removing node: \"\n+                + Arrays.asList(junk));\n+            for (int i=0; i<junk.length; i++)\n+                junk[i].delete();\n@@ -753,0 +680,3 @@\n+        if (!dir.delete())\n+            throw new BackingStoreException(\"Couldn't delete dir: \"\n+                                                             + dir);\n@@ -755,1 +685,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -768,17 +697,12 @@\n-           if (!lockFile(shared))\n-               throw(new BackingStoreException(\"Couldn't get file lock.\"));\n-           final Long newModTime =\n-                AccessController.doPrivileged(\n-                    new PrivilegedAction<Long>() {\n-               public Long run() {\n-                   long nmt;\n-                   if (isUserNode()) {\n-                       nmt = userRootModFile.lastModified();\n-                       isUserRootModified = userRootModTime == nmt;\n-                   } else {\n-                       nmt = systemRootModFile.lastModified();\n-                       isSystemRootModified = systemRootModTime == nmt;\n-                   }\n-                   return nmt;\n-               }\n-           });\n+           if (!lockFile(shared)) {\n+               throw (new BackingStoreException(\"Couldn't get file lock.\"));\n+           }\n+           long nmt;\n+           if (isUserNode()) {\n+               nmt = userRootModFile.lastModified();\n+               isUserRootModified = userRootModTime == nmt;\n+           } else {\n+               nmt = systemRootModFile.lastModified();\n+               isSystemRootModified = systemRootModTime == nmt;\n+           }\n+           final long newModTime = nmt;\n@@ -787,12 +711,7 @@\n-               AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                   public Void run() {\n-                   if (isUserNode()) {\n-                       userRootModTime = newModTime.longValue() + 1000;\n-                       userRootModFile.setLastModified(userRootModTime);\n-                   } else {\n-                       systemRootModTime = newModTime.longValue() + 1000;\n-                       systemRootModFile.setLastModified(systemRootModTime);\n-                   }\n-                   return null;\n-                   }\n-               });\n+               if (isUserNode()) {\n+                   userRootModTime = newModTime + 1000;\n+                   userRootModFile.setLastModified(userRootModTime);\n+               } else {\n+                   systemRootModTime = newModTime + 1000;\n+                   systemRootModFile.setLastModified(systemRootModTime);\n+               }\n@@ -805,1 +724,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -807,13 +725,0 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    syncSpiPrivileged();\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n-        }\n-    }\n-    private void syncSpiPrivileged() throws BackingStoreException {\n","filename":"src\/java.prefs\/unix\/classes\/java\/util\/prefs\/FileSystemPreferences.java","additions":170,"deletions":265,"binary":false,"changes":435,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,1 +51,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -55,5 +53,1 @@\n-        PrivilegedAction<Void> load = () -> {\n-            System.loadLibrary(\"prefs\");\n-            return null;\n-        };\n-        AccessController.doPrivileged(load);\n+        System.loadLibrary(\"prefs\");\n","filename":"src\/java.prefs\/windows\/classes\/java\/util\/prefs\/WindowsPreferences.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"}]}