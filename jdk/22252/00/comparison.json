{"files":[{"patch":"@@ -31,2 +31,0 @@\n-    \/\/ fixme need security checks?\n-\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferences.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -87,7 +87,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"prefs\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"prefs\");\n","filename":"src\/java.prefs\/macosx\/classes\/java\/util\/prefs\/MacOSXPreferencesFile.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -1063,6 +1061,1 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    return root == Preferences.userRoot();\n-            }\n-            }).booleanValue();\n+        return root == Preferences.userRoot();\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/AbstractPreferences.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -40,7 +37,0 @@\n-\/\/ These imports needed only as a workaround for a JavaDoc bug\n-import java.lang.RuntimePermission;\n-import java.lang.Integer;\n-import java.lang.Long;\n-import java.lang.Float;\n-import java.lang.Double;\n-\n@@ -233,5 +223,1 @@\n-        String factoryName = AccessController.doPrivileged(\n-            new PrivilegedAction<String>() {\n-                public String run() {\n-                    return System.getProperty(\n-                        \"java.util.prefs.PreferencesFactory\");}});\n+        String factoryName = System.getProperty(\"java.util.prefs.PreferencesFactory\");\n@@ -239,4 +225,0 @@\n-            \/\/ FIXME: This code should be run in a doPrivileged and\n-            \/\/ not use the context classloader, to avoid being\n-            \/\/ dependent on the invoking thread.\n-            \/\/ Checking AllPermission also seems wrong.\n@@ -253,4 +235,0 @@\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        sm.checkPermission(new java.security.AllPermission());\n-                    }\n@@ -270,5 +248,1 @@\n-\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<PreferencesFactory>() {\n-                public PreferencesFactory run() {\n-                    return factory1();}});\n+        return factory1();\n@@ -430,7 +404,0 @@\n-    \/**\n-     * This permission object represents the permission required to get\n-     * access to the user or system root (which in turn allows for all\n-     * other operations).\n-     *\/\n-    private static Permission prefsPerm = new RuntimePermission(\"preferences\");\n-\n@@ -443,5 +410,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkPermission(prefsPerm);\n-\n@@ -457,5 +419,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkPermission(prefsPerm);\n-\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/Preferences.java","additions":2,"deletions":45,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n+\/\/import java.security.AccessController;\n+\/\/import java.security.PrivilegedAction;\n+\/\/import java.security.PrivilegedExceptionAction;\n@@ -56,1 +56,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -58,1 +58,1 @@\n-        PrivilegedAction<Void> load = () -> {\n+\/\/        PrivilegedAction<Void> load = () -> {\n@@ -60,3 +60,3 @@\n-            return null;\n-        };\n-        AccessController.doPrivileged(load);\n+\/\/            return null;\n+\/\/        };\n+\/\/        AccessController.doPrivileged(load);\n@@ -70,2 +70,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-             Integer.getInteger(\"java.util.prefs.syncInterval\", 30)));\n+            Integer.getInteger(\"java.util.prefs.syncInterval\", 30));\n@@ -120,1 +119,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -122,2 +121,2 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n+\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+\/\/            public Void run() {\n@@ -163,3 +162,3 @@\n-                return null;\n-            }\n-        });\n+\/\/                return null;\n+\/\/            }\n+\/\/        });\n@@ -188,1 +187,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -190,2 +189,2 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n+\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+\/\/            public Void run() {\n@@ -237,3 +236,3 @@\n-                return null;\n-            }\n-        });\n+\/\/                return null;\n+\/\/            }\n+\/\/        });\n@@ -459,1 +458,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -469,2 +468,2 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n+\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+\/\/            public Void run() {\n@@ -478,3 +477,3 @@\n-                return null;\n-            }\n-        });\n+\/\/                return null;\n+\/\/            }\n+\/\/        });\n@@ -529,1 +528,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -536,2 +535,2 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n+\/\/        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+\/\/            public Void run() {\n@@ -539,3 +538,3 @@\n-                return null;\n-            }\n-        });\n+\/\/                return null;\n+\/\/            }\n+\/\/        });\n@@ -599,1 +598,1 @@\n-    @SuppressWarnings(\"removal\")\n+\/\/    @SuppressWarnings(\"removal\")\n@@ -601,4 +600,4 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n+\/\/        try {\n+\/\/            AccessController.doPrivileged(\n+\/\/                new PrivilegedExceptionAction<Void>() {\n+\/\/                public Void run() throws BackingStoreException {\n@@ -630,6 +629,6 @@\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n-        }\n+\/\/                    return null;\n+\/\/                }\n+\/\/            });\n+\/\/        } catch (PrivilegedActionException e) { \/\/ get rid of?\n+\/\/            throw (BackingStoreException) e.getException();\n+\/\/        }\n@@ -647,1 +646,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -650,23 +648,13 @@\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    try {\n-                        if (!dir.exists() && !dir.mkdirs())\n-                            throw new BackingStoreException(dir +\n-                                                             \" create failed.\");\n-                        try (FileOutputStream fos = new FileOutputStream(tmpFile)) {\n-                            XmlSupport.exportMap(fos, prefsCache);\n-                        }\n-                        if (!tmpFile.renameTo(prefsFile))\n-                            throw new BackingStoreException(\"Can't rename \" +\n-                            tmpFile + \" to \" + prefsFile);\n-                    } catch(Exception e) {\n-                        if (e instanceof BackingStoreException)\n-                            throw (BackingStoreException)e;\n-                        throw new BackingStoreException(e);\n-                    }\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n+            if (!dir.exists() && !dir.mkdirs())\n+                throw new BackingStoreException(dir +\n+                                                 \" create failed.\");\n+            try (FileOutputStream fos = new FileOutputStream(tmpFile)) {\n+                XmlSupport.exportMap(fos, prefsCache);\n+            }\n+            if (!tmpFile.renameTo(prefsFile))\n+                throw new BackingStoreException(\"Can't rename \" +\n+                tmpFile + \" to \" + prefsFile);\n+        } catch(BackingStoreException e) {\n+            throw e;\n+        } catch(Exception e) {\n+            throw new BackingStoreException(e);\n@@ -681,1 +669,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -683,13 +670,8 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<String[]>() {\n-                public String[] run() {\n-                    List<String> result = new ArrayList<>();\n-                    File[] dirContents = dir.listFiles();\n-                    if (dirContents != null) {\n-                        for (int i = 0; i < dirContents.length; i++)\n-                            if (dirContents[i].isDirectory())\n-                                result.add(nodeName(dirContents[i].getName()));\n-                    }\n-                    return result.toArray(EMPTY_STRING_ARRAY);\n-               }\n-            });\n+        List<String> result = new ArrayList<>();\n+        File[] dirContents = dir.listFiles();\n+        if (dirContents != null) {\n+            for (int i = 0; i < dirContents.length; i++)\n+                if (dirContents[i].isDirectory())\n+                    result.add(nodeName(dirContents[i].getName()));\n+        }\n+        return result.toArray(EMPTY_STRING_ARRAY);\n@@ -720,1 +702,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -722,30 +703,4 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    if (changeLog.contains(nodeCreate)) {\n-                        changeLog.remove(nodeCreate);\n-                        nodeCreate = null;\n-                        return null;\n-                    }\n-                    if (!dir.exists())\n-                        return null;\n-                    prefsFile.delete();\n-                    tmpFile.delete();\n-                    \/\/ dir should be empty now.  If it's not, empty it\n-                    File[] junk = dir.listFiles();\n-                    if (junk.length != 0) {\n-                        getLogger().warning(\n-                           \"Found extraneous files when removing node: \"\n-                            + Arrays.asList(junk));\n-                        for (int i=0; i<junk.length; i++)\n-                            junk[i].delete();\n-                    }\n-                    if (!dir.delete())\n-                        throw new BackingStoreException(\"Couldn't delete dir: \"\n-                                                                         + dir);\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n+        if (changeLog.contains(nodeCreate)) {\n+            changeLog.remove(nodeCreate);\n+            nodeCreate = null;\n+            return;\n@@ -753,0 +708,16 @@\n+        if (!dir.exists())\n+            return;\n+        prefsFile.delete();\n+        tmpFile.delete();\n+        \/\/ dir should be empty now.  If it's not, empty it\n+        File[] junk = dir.listFiles();\n+        if (junk.length != 0) {\n+            getLogger().warning(\n+               \"Found extraneous files when removing node: \"\n+                + Arrays.asList(junk));\n+            for (int i=0; i<junk.length; i++)\n+                junk[i].delete();\n+        }\n+        if (!dir.delete())\n+            throw new BackingStoreException(\"Couldn't delete dir: \"\n+                                                             + dir);\n@@ -755,1 +726,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -768,17 +738,12 @@\n-           if (!lockFile(shared))\n-               throw(new BackingStoreException(\"Couldn't get file lock.\"));\n-           final Long newModTime =\n-                AccessController.doPrivileged(\n-                    new PrivilegedAction<Long>() {\n-               public Long run() {\n-                   long nmt;\n-                   if (isUserNode()) {\n-                       nmt = userRootModFile.lastModified();\n-                       isUserRootModified = userRootModTime == nmt;\n-                   } else {\n-                       nmt = systemRootModFile.lastModified();\n-                       isSystemRootModified = systemRootModTime == nmt;\n-                   }\n-                   return nmt;\n-               }\n-           });\n+           if (!lockFile(shared)) {\n+               throw (new BackingStoreException(\"Couldn't get file lock.\"));\n+           }\n+           long nmt;\n+           if (isUserNode()) {\n+               nmt = userRootModFile.lastModified();\n+               isUserRootModified = userRootModTime == nmt;\n+           } else {\n+               nmt = systemRootModFile.lastModified();\n+               isSystemRootModified = systemRootModTime == nmt;\n+           }\n+           final long newModTime = nmt;\n@@ -787,12 +752,7 @@\n-               AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                   public Void run() {\n-                   if (isUserNode()) {\n-                       userRootModTime = newModTime.longValue() + 1000;\n-                       userRootModFile.setLastModified(userRootModTime);\n-                   } else {\n-                       systemRootModTime = newModTime.longValue() + 1000;\n-                       systemRootModFile.setLastModified(systemRootModTime);\n-                   }\n-                   return null;\n-                   }\n-               });\n+               if (isUserNode()) {\n+                   userRootModTime = newModTime + 1000;\n+                   userRootModFile.setLastModified(userRootModTime);\n+               } else {\n+                   systemRootModTime = newModTime + 1000;\n+                   systemRootModFile.setLastModified(systemRootModTime);\n+               }\n@@ -805,1 +765,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -807,11 +766,1 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws BackingStoreException {\n-                    syncSpiPrivileged();\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw (BackingStoreException) e.getException();\n-        }\n+        syncSpiPrivileged();\n","filename":"src\/java.prefs\/unix\/classes\/java\/util\/prefs\/FileSystemPreferences.java","additions":105,"deletions":156,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+\/\/import java.security.AccessController;\n+\/\/import java.security.PrivilegedAction;\n@@ -53,1 +53,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -55,5 +55,1 @@\n-        PrivilegedAction<Void> load = () -> {\n-            System.loadLibrary(\"prefs\");\n-            return null;\n-        };\n-        AccessController.doPrivileged(load);\n+        System.loadLibrary(\"prefs\");\n","filename":"src\/java.prefs\/windows\/classes\/java\/util\/prefs\/WindowsPreferences.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}