{"files":[{"patch":"@@ -564,1 +564,2 @@\n-    guarantee(expressions != nullptr && expressions->length() > 0, \"must have exception to throw\");\n+    guarantee(expressions != nullptr && expressions->length() == 1, \"should have only exception on stack\");\n+    guarantee(exec_mode != Unpack_exception, \"rethrow_exception set with Unpack_exception\");\n@@ -740,0 +741,1 @@\n+    assert(array->element(0)->rethrow_exception(), \"must be\");\n@@ -995,7 +997,21 @@\n-      int iframe_expr_ssize = iframe->interpreter_frame_expression_stack_size();\n-      int oopmap_expr_invoke_ssize = mask.expression_stack_size() + cur_invoke_parameter_size;\n-      int expr_ssize_before = iframe_expr_ssize + top_frame_expression_stack_adjustment;\n-      int oopmap_expr_callee_ssize = mask.expression_stack_size() + callee_size_of_parameters;\n-      if (!((is_top_frame && exec_mode == Unpack_exception && iframe_expr_ssize == 0) ||\n-            (reexecute ? expr_ssize_before == oopmap_expr_invoke_ssize :\n-                         iframe_expr_ssize == oopmap_expr_callee_ssize))) {\n+      auto match = [&]() {\n+        int iframe_expr_ssize = iframe->interpreter_frame_expression_stack_size();\n+#if INCLUDE_JVMCI\n+        if (is_top_frame && el->rethrow_exception()) {\n+          return iframe_expr_ssize == 1;\n+        }\n+#endif\n+        \/\/ This should only be needed for C1\n+        if (is_top_frame && exec_mode == Unpack_exception && iframe_expr_ssize == 0) {\n+          return true;\n+        }\n+        if (reexecute) {\n+          int expr_ssize_before = iframe_expr_ssize + top_frame_expression_stack_adjustment;\n+          int oopmap_expr_invoke_ssize = mask.expression_stack_size() + cur_invoke_parameter_size;\n+          return expr_ssize_before == oopmap_expr_invoke_ssize;\n+        } else {\n+          int oopmap_expr_callee_ssize = mask.expression_stack_size() + callee_size_of_parameters;\n+          return iframe_expr_ssize == oopmap_expr_callee_ssize;\n+        }\n+      };\n+      if (!match()) {\n@@ -1015,0 +1031,3 @@\n+#if INCLUDE_JVMCI\n+        tty->print_cr(\"  rethrow_exception = %s\", el->rethrow_exception() ? \"true\" : \"false\");\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"code\/scopeDesc.hpp\"\n@@ -65,0 +66,3 @@\n+#if INCLUDE_JVMCI\n+  _rethrow = vf->scope()->rethrow_exception();\n+#endif\n@@ -182,0 +186,2 @@\n+    case Deoptimization::Unpack_exception:\n+      assert(raw_bci() >= 0, \"bad bci %d for Unpack_exception\", raw_bci());\n@@ -217,2 +223,0 @@\n-  bool use_next_mdp = false; \/\/ true if we should use the mdp associated with the next bci\n-                             \/\/ rather than the one associated with bcp\n@@ -220,1 +224,11 @@\n-  if (raw_bci() == SynchronizationEntryBCI) {\n+  if (is_top_frame && exec_mode == Deoptimization::Unpack_exception) {\n+#if 1\n+    assert(raw_bci() >= 0, \"bad bci %d for Unpack_exception\", raw_bci());\n+#endif\n+    bcp = method()->bcp_from(bci());\n+    \/\/ exception is pending\n+    pc = Interpreter::rethrow_exception_entry();\n+    \/\/ [phh] We're going to end up in some handler or other, so it doesn't\n+    \/\/ matter what mdp we point to.  See exception_handler_for_exception()\n+    \/\/ in interpreterRuntime.cpp.\n+  } else if (raw_bci() == SynchronizationEntryBCI) {\n@@ -230,3 +244,0 @@\n-      \/\/ Do not special-case _athrow or _return_register_finalizer\n-      pc = Interpreter::deopt_entry(vtos, 0);\n-      break;\n@@ -234,0 +245,1 @@\n+      \/\/ Do not special-case _athrow or _return_register_finalizer\n@@ -235,1 +247,0 @@\n-      assert(pc == Interpreter::deopt_reexecute_entry(method(), bcp), \"athrow or return with Unpack_reexecute?\");\n@@ -245,1 +256,0 @@\n-    use_next_mdp = true;\n@@ -276,0 +286,3 @@\n+#if 1\n+      assert(exec_mode != Deoptimization::Unpack_exception, \"TODO\");\n+#endif\n@@ -286,1 +299,0 @@\n-        assert(use_next_mdp, \"must be\");\n@@ -293,1 +305,0 @@\n-        use_next_mdp = false;\n@@ -299,6 +310,8 @@\n-    } else if (!realloc_failure_exception && JvmtiExport::can_force_early_return() && state != nullptr &&\n-               state->is_earlyret_pending()) {\n-      \/\/ Force early return from top frame after deoptimization\n-      pc = Interpreter::remove_activation_early_entry(state->earlyret_tos());\n-    } else {\n-      if (realloc_failure_exception && JvmtiExport::can_force_early_return() && state != nullptr && state->is_earlyret_pending()) {\n+    } else if (JvmtiExport::can_force_early_return() && state != nullptr && state->is_earlyret_pending()) {\n+#if 1\n+      assert(exec_mode != Deoptimization::Unpack_exception, \"TODO\");\n+#endif\n+      if (!realloc_failure_exception) {\n+        \/\/ Force early return from top frame after deoptimization\n+        pc = Interpreter::remove_activation_early_entry(state->earlyret_tos());\n+      } else {\n@@ -309,23 +322,0 @@\n-      \/\/ Possibly override the previous pc computation of the top (youngest) frame\n-      switch (exec_mode) {\n-      case Deoptimization::Unpack_deopt:\n-        \/\/ use what we've got\n-        break;\n-      case Deoptimization::Unpack_exception:\n-        \/\/ exception is pending\n-        pc = SharedRuntime::raw_exception_handler_for_return_address(thread, pc);\n-        \/\/ [phh] We're going to end up in some handler or other, so it doesn't\n-        \/\/ matter what mdp we point to.  See exception_handler_for_exception()\n-        \/\/ in interpreterRuntime.cpp.\n-        break;\n-      case Deoptimization::Unpack_uncommon_trap:\n-      case Deoptimization::Unpack_reexecute:\n-        \/\/ redo last byte code\n-        assert(!use_next_mdp, \"must be\");\n-        assert(reexecute, \"must be\");\n-        \/\/ Was Interpreter::deopt_reexecute_entry()\n-        assert(pc == Interpreter::deopt_entry(vtos, 0), \"pc changed\");\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-      }\n@@ -333,1 +323,0 @@\n-    assert(use_next_mdp == !reexecute, \"!\");\n@@ -375,3 +364,0 @@\n-  if (ProfileInterpreter) {\n-    iframe()->interpreter_frame_set_mdp(nullptr); \/\/ clear out the mdp.\n-  }\n@@ -381,1 +367,1 @@\n-    if (mdo != nullptr) {\n+    if (mdo != nullptr && exec_mode != Deoptimization::Unpack_exception) {\n@@ -383,1 +369,1 @@\n-      if (use_next_mdp) ++bci;\n+      if (!reexecute) ++bci;\n@@ -386,0 +372,2 @@\n+    } else {\n+      iframe()->interpreter_frame_set_mdp(nullptr); \/\/ clear out the mdp.\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":33,"deletions":45,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+#if INCLUDE_JVMCI\n+    bool _rethrow;                                               \/\/ from ScopeDesc::rethrow_exception()\n+#endif\n@@ -76,0 +79,3 @@\n+#if INCLUDE_JVMCI\n+  bool rethrow_exception(void) const  { return _rethrow; }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}