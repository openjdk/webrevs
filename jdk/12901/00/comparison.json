{"files":[{"patch":"@@ -5306,1 +5306,1 @@\n-instruct vmaskcast_narrow_sve(pReg dst, pReg src) %{\n+instruct vmaskcast_narrow_sve(pReg dst, pReg src, pReg ptmp) %{\n@@ -5310,1 +5310,2 @@\n-  format %{ \"vmaskcast_narrow_sve $dst, $src\" %}\n+  effect(TEMP_DEF dst, TEMP ptmp);\n+  format %{ \"vmaskcast_narrow_sve $dst, $src\\t# KILL $ptmp\" %}\n@@ -5317,1 +5318,1 @@\n-    __ sve_vmaskcast_narrow($dst$$PRegister, $src$$PRegister,\n+    __ sve_vmaskcast_narrow($dst$$PRegister, $src$$PRegister, $ptmp$$PRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3703,1 +3703,1 @@\n-instruct vmaskcast_narrow_sve(pReg dst, pReg src) %{\n+instruct vmaskcast_narrow_sve(pReg dst, pReg src, pReg ptmp) %{\n@@ -3707,1 +3707,2 @@\n-  format %{ \"vmaskcast_narrow_sve $dst, $src\" %}\n+  effect(TEMP_DEF dst, TEMP ptmp);\n+  format %{ \"vmaskcast_narrow_sve $dst, $src\\t# KILL $ptmp\" %}\n@@ -3714,1 +3715,1 @@\n-    __ sve_vmaskcast_narrow($dst$$PRegister, $src$$PRegister,\n+    __ sve_vmaskcast_narrow($dst$$PRegister, $src$$PRegister, $ptmp$$PRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1313,1 +1313,1 @@\n-void C2_MacroAssembler::sve_vmaskcast_narrow(PRegister dst, PRegister src,\n+void C2_MacroAssembler::sve_vmaskcast_narrow(PRegister dst, PRegister src, PRegister ptmp,\n@@ -1316,0 +1316,10 @@\n+  \/\/ To ensure the higher order bits of the resultant narrowed vector are 0, an all-zero predicate is\n+  \/\/ passed as the second argument. An example narrowing operation with a given mask would be -\n+  \/\/ 128Long -> 64Int on a 128-bit machine i.e 2L -> 2I\n+  \/\/ Mask (for 2 Longs) : TF\n+  \/\/ Predicate register for the above mask (16 bits) : 00000001 00000000\n+  \/\/ After narrowing (uzp1 dst.b, src.b, ptmp.b) : 0000 0000 0001 0000\n+  \/\/ Which translates to mask for 2 integers as : TF (lower half is considered while upper half is 0)\n+  assert_different_registers(src, ptmp);\n+  assert_different_registers(dst, ptmp);\n+  sve_pfalse(ptmp);\n@@ -1317,1 +1327,1 @@\n-    sve_uzp1(dst, B, src, src);\n+    sve_uzp1(dst, B, src, ptmp);\n@@ -1319,2 +1329,2 @@\n-    sve_uzp1(dst, H, src, src);\n-    sve_uzp1(dst, B, dst, dst);\n+    sve_uzp1(dst, H, src, ptmp);\n+    sve_uzp1(dst, B, dst, ptmp);\n@@ -1322,3 +1332,3 @@\n-    sve_uzp1(dst, S, src, src);\n-    sve_uzp1(dst, H, dst, dst);\n-    sve_uzp1(dst, B, dst, dst);\n+    sve_uzp1(dst, S, src, ptmp);\n+    sve_uzp1(dst, H, dst, ptmp);\n+    sve_uzp1(dst, B, dst, ptmp);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  void sve_vmaskcast_narrow(PRegister dst, PRegister src,\n+  void sve_vmaskcast_narrow(PRegister dst, PRegister src, PRegister ptmp,\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2021, 2023, Arm Limited. All rights reserved.\n@@ -67,1 +67,4 @@\n-        for (int i = 0; i < 64; i++) {\n+        \/\/ Making sure atleast one of the elements in the mask is \"true\" to ensure the result of trueCount()\n+        \/\/ before and after the cast can be accurately verified.\n+        mask_arr[0] = true;\n+        for (int i = 1; i < 64; i++) {\n@@ -75,1 +78,6 @@\n-    public static void testByte64ToShort128() {\n+    public static VectorMask<Short> testByte64ToShort128(VectorMask<Byte> v) {\n+        return v.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testByte64ToShort128\")\n+    public static void testByte64ToShort128_runner() {\n@@ -77,1 +85,3 @@\n-        Asserts.assertEquals(mByte64.cast(ShortVector.SPECIES_128).toString(), mByte64.toString());\n+        VectorMask<Short> res = testByte64ToShort128(mByte64);\n+        Asserts.assertEquals(res.toString(), mByte64.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte64.trueCount());\n@@ -82,1 +92,6 @@\n-    public static void testByte64ToInt256() {\n+    public static VectorMask<Integer> testByte64ToInt256(VectorMask<Byte> v) {\n+        return v.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testByte64ToInt256\")\n+    public static void testByte64ToInt256_runner() {\n@@ -84,1 +99,3 @@\n-        Asserts.assertEquals(mByte64.cast(IntVector.SPECIES_256).toString(), mByte64.toString());\n+        VectorMask<Integer> res = testByte64ToInt256(mByte64);\n+        Asserts.assertEquals(res.toString(), mByte64.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte64.trueCount());\n@@ -89,1 +106,6 @@\n-    public static void testByte64ToFloat256() {\n+    public static VectorMask<Float> testByte64ToFloat256(VectorMask<Byte> v) {\n+        return v.cast(FloatVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testByte64ToFloat256\")\n+    public static void testByte64ToFloat256_runner() {\n@@ -91,1 +113,3 @@\n-        Asserts.assertEquals(mByte64.cast(FloatVector.SPECIES_256).toString(), mByte64.toString());\n+        VectorMask<Float> res = testByte64ToFloat256(mByte64);\n+        Asserts.assertEquals(res.toString(), mByte64.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte64.trueCount());\n@@ -96,1 +120,6 @@\n-    public static void testByte64ToLong512() {\n+    public static VectorMask<Long> testByte64ToLong512(VectorMask<Byte> v) {\n+        return v.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testByte64ToLong512\")\n+    public static void testByte64ToLong512_runner() {\n@@ -98,1 +127,3 @@\n-        Asserts.assertEquals(mByte64.cast(LongVector.SPECIES_512).toString(), mByte64.toString());\n+        VectorMask<Long> res = testByte64ToLong512(mByte64);\n+        Asserts.assertEquals(res.toString(), mByte64.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte64.trueCount());\n@@ -103,1 +134,6 @@\n-    public static void testByte64ToDouble512() {\n+    public static VectorMask<Double> testByte64ToDouble512(VectorMask<Byte> v) {\n+       return v.cast(DoubleVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testByte64ToDouble512\")\n+    public static void testByte64ToDouble512_runner() {\n@@ -105,1 +141,3 @@\n-        Asserts.assertEquals(mByte64.cast(DoubleVector.SPECIES_512).toString(), mByte64.toString());\n+        VectorMask<Double> res = testByte64ToDouble512(mByte64);\n+        Asserts.assertEquals(res.toString(), mByte64.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte64.trueCount());\n@@ -110,1 +148,6 @@\n-    public static void testByte128ToShort256() {\n+    public static VectorMask<Short> testByte128ToShort256(VectorMask<Byte> v) {\n+        return v.cast(ShortVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testByte128ToShort256\")\n+    public static void testByte128ToShort256_runner() {\n@@ -112,1 +155,3 @@\n-        Asserts.assertEquals(mByte128.cast(ShortVector.SPECIES_256).toString(), mByte128.toString());\n+        VectorMask<Short> res = testByte128ToShort256(mByte128);\n+        Asserts.assertEquals(res.toString(), mByte128.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte128.trueCount());\n@@ -117,1 +162,6 @@\n-    public static void testByte128ToInt512() {\n+    public static VectorMask<Integer> testByte128ToInt512(VectorMask<Byte> v) {\n+        return v.cast(IntVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testByte128ToInt512\")\n+    public static void testByte128ToInt512_runner() {\n@@ -119,1 +169,3 @@\n-        Asserts.assertEquals(mByte128.cast(IntVector.SPECIES_512).toString(), mByte128.toString());\n+        VectorMask<Integer> res = testByte128ToInt512(mByte128);\n+        Asserts.assertEquals(res.toString(), mByte128.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte128.trueCount());\n@@ -124,1 +176,6 @@\n-    public static void testByte128ToFloat512() {\n+    public static VectorMask<Float> testByte128ToFloat512(VectorMask<Byte> v) {\n+        return v.cast(FloatVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testByte128ToFloat512\")\n+    public static void testByte128ToFloat512_runner() {\n@@ -126,1 +183,3 @@\n-        Asserts.assertEquals(mByte128.cast(FloatVector.SPECIES_512).toString(), mByte128.toString());\n+        VectorMask<Float> res = testByte128ToFloat512(mByte128);\n+        Asserts.assertEquals(res.toString(), mByte128.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte128.trueCount());\n@@ -131,1 +190,6 @@\n-    public static void testByte256ToShort512() {\n+    public static VectorMask<Short> testByte256ToShort512(VectorMask<Byte> v) {\n+        return v.cast(ShortVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testByte256ToShort512\")\n+    public static void testByte256ToShort512_runner() {\n@@ -133,1 +197,3 @@\n-        Asserts.assertEquals(mByte256.cast(ShortVector.SPECIES_512).toString(), mByte256.toString());\n+        VectorMask<Short> res = testByte256ToShort512(mByte256);\n+        Asserts.assertEquals(res.toString(), mByte256.toString());\n+        Asserts.assertEquals(res.trueCount(), mByte256.trueCount());\n@@ -139,1 +205,6 @@\n-    public static void testShort64ToInt128() {\n+    public static VectorMask<Integer> testShort64ToInt128(VectorMask<Short> v) {\n+        return v.cast(IntVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testShort64ToInt128\")\n+    public static void testShort64ToInt128_runner() {\n@@ -141,1 +212,3 @@\n-        Asserts.assertEquals(mShort64.cast(IntVector.SPECIES_128).toString(), mShort64.toString());\n+        VectorMask<Integer> res = testShort64ToInt128(mShort64);\n+        Asserts.assertEquals(res.toString(), mShort64.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort64.trueCount());\n@@ -146,1 +219,6 @@\n-    public static void testShort64ToFloat128() {\n+    public static VectorMask<Float> testShort64ToFloat128(VectorMask<Short> v) {\n+        return v.cast(FloatVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testShort64ToFloat128\")\n+    public static void testShort64ToFloat128_runner() {\n@@ -148,1 +226,3 @@\n-        Asserts.assertEquals(mShort64.cast(FloatVector.SPECIES_128).toString(), mShort64.toString());\n+        VectorMask<Float> res = testShort64ToFloat128(mShort64);\n+        Asserts.assertEquals(res.toString(), mShort64.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort64.trueCount());\n@@ -153,1 +233,6 @@\n-    public static void testShort64ToLong256() {\n+    public static VectorMask<Long> testShort64ToLong256(VectorMask<Short> v) {\n+        return v.cast(LongVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testShort64ToLong256\")\n+    public static void testShort64ToLong256_runner() {\n@@ -155,1 +240,3 @@\n-        Asserts.assertEquals(mShort64.cast(LongVector.SPECIES_256).toString(), mShort64.toString());\n+        VectorMask<Long> res = testShort64ToLong256(mShort64);\n+        Asserts.assertEquals(res.toString(), mShort64.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort64.trueCount());\n@@ -160,1 +247,6 @@\n-    public static void testShort64ToDouble256() {\n+    public static VectorMask<Double> testShort64ToDouble256(VectorMask<Short> v) {\n+        return v.cast(DoubleVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testShort64ToDouble256\")\n+    public static void testShort64ToDouble256_runner() {\n@@ -162,1 +254,3 @@\n-        Asserts.assertEquals(mShort64.cast(DoubleVector.SPECIES_256).toString(), mShort64.toString());\n+        VectorMask<Double> res = testShort64ToDouble256(mShort64);\n+        Asserts.assertEquals(res.toString(), mShort64.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort64.trueCount());\n@@ -167,1 +261,6 @@\n-    public static void testShort128ToByte64() {\n+    public static VectorMask<Byte> testShort128ToByte64(VectorMask<Short> v) {\n+        return v.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testShort128ToByte64\")\n+    public static void testShort128ToByte64_runner() {\n@@ -169,1 +268,3 @@\n-        Asserts.assertEquals(mShort128.cast(ByteVector.SPECIES_64).toString(), mShort128.toString());\n+        VectorMask<Byte> res = testShort128ToByte64(mShort128);\n+        Asserts.assertEquals(res.toString(), mShort128.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort128.trueCount());\n@@ -174,1 +275,6 @@\n-    public static void testShort128ToInt256() {\n+    public static VectorMask<Integer> testShort128ToInt256(VectorMask<Short> v) {\n+        return v.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testShort128ToInt256\")\n+    public static void testShort128ToInt256_runner() {\n@@ -176,1 +282,3 @@\n-        Asserts.assertEquals(mShort128.cast(IntVector.SPECIES_256).toString(), mShort128.toString());\n+        VectorMask<Integer> res = testShort128ToInt256(mShort128);\n+        Asserts.assertEquals(res.toString(), mShort128.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort128.trueCount());\n@@ -181,1 +289,6 @@\n-    public static void testShort128ToFloat256() {\n+    public static VectorMask<Float> testShort128ToFloat256(VectorMask<Short> v) {\n+        return v.cast(FloatVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testShort128ToFloat256\")\n+    public static void testShort128ToFloat256_runner() {\n@@ -183,1 +296,3 @@\n-        Asserts.assertEquals(mShort128.cast(FloatVector.SPECIES_256).toString(), mShort128.toString());\n+        VectorMask<Float> res = testShort128ToFloat256(mShort128);\n+        Asserts.assertEquals(res.toString(), mShort128.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort128.trueCount());\n@@ -188,1 +303,6 @@\n-    public static void testShort128ToLong512() {\n+    public static VectorMask<Long> testShort128ToLong512(VectorMask<Short> v) {\n+        return v.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testShort128ToLong512\")\n+    public static void testShort128ToLong512_runner() {\n@@ -190,1 +310,3 @@\n-        Asserts.assertEquals(mShort128.cast(LongVector.SPECIES_512).toString(), mShort128.toString());\n+        VectorMask<Long> res = testShort128ToLong512(mShort128);\n+        Asserts.assertEquals(res.toString(), mShort128.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort128.trueCount());\n@@ -195,1 +317,6 @@\n-    public static void testShort128ToDouble512() {\n+    public static VectorMask<Double> testShort128ToDouble512(VectorMask<Short> v) {\n+        return v.cast(DoubleVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testShort128ToDouble512\")\n+    public static void testShort128ToDouble512_runner() {\n@@ -197,1 +324,3 @@\n-        Asserts.assertEquals(mShort128.cast(DoubleVector.SPECIES_512).toString(), mShort128.toString());\n+        VectorMask<Double> res = testShort128ToDouble512(mShort128);\n+        Asserts.assertEquals(res.toString(), mShort128.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort128.trueCount());\n@@ -202,1 +331,6 @@\n-    public static void testShort256ToByte128() {\n+    public static VectorMask<Byte> testShort256ToByte128(VectorMask<Short> v) {\n+       return v.cast(ByteVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testShort256ToByte128\")\n+    public static void testShort256ToByte128_runner() {\n@@ -204,1 +338,3 @@\n-        Asserts.assertEquals(mShort256.cast(ByteVector.SPECIES_128).toString(), mShort256.toString());\n+        VectorMask<Byte> res = testShort256ToByte128(mShort256);\n+        Asserts.assertEquals(res.toString(), mShort256.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort256.trueCount());\n@@ -209,1 +345,6 @@\n-    public static void testShort256ToInt512() {\n+    public static VectorMask<Integer> testShort256ToInt512(VectorMask<Short> v) {\n+        return v.cast(IntVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testShort256ToInt512\")\n+    public static void testShort256ToInt512_runner() {\n@@ -211,1 +352,3 @@\n-        Asserts.assertEquals(mShort256.cast(IntVector.SPECIES_512).toString(), mShort256.toString());\n+        VectorMask<Integer> res = testShort256ToInt512(mShort256);\n+        Asserts.assertEquals(res.toString(), mShort256.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort256.trueCount());\n@@ -216,1 +359,6 @@\n-    public static void testShort256ToFloat512() {\n+    public static VectorMask<Float> testShort256ToFloat512(VectorMask<Short> v) {\n+        return v.cast(FloatVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testShort256ToFloat512\")\n+    public static void testShort256ToFloat512_runner() {\n@@ -218,1 +366,3 @@\n-        Asserts.assertEquals(mShort256.cast(FloatVector.SPECIES_512).toString(), mShort256.toString());\n+        VectorMask<Float> res = testShort256ToFloat512(mShort256);\n+        Asserts.assertEquals(res.toString(), mShort256.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort256.trueCount());\n@@ -223,1 +373,6 @@\n-    public static void testShort512ToByte256() {\n+    public static VectorMask<Byte> testShort512ToByte256(VectorMask<Short> v) {\n+        return v.cast(ByteVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testShort512ToByte256\")\n+    public static void testShort512ToByte256_runner() {\n@@ -225,1 +380,3 @@\n-        Asserts.assertEquals(mShort512.cast(ByteVector.SPECIES_256).toString(), mShort512.toString());\n+        VectorMask<Byte> res = testShort512ToByte256(mShort512);\n+        Asserts.assertEquals(res.toString(), mShort512.toString());\n+        Asserts.assertEquals(res.trueCount(), mShort512.trueCount());\n@@ -231,1 +388,6 @@\n-    public static void testInt64ToLong128() {\n+    public static VectorMask<Long> testInt64ToLong128(VectorMask<Integer> v) {\n+        return v.cast(LongVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testInt64ToLong128\")\n+    public static void testInt64ToLong128_runner() {\n@@ -233,1 +395,3 @@\n-        Asserts.assertEquals(mInt64.cast(LongVector.SPECIES_128).toString(), mInt64.toString());\n+        VectorMask<Long> res = testInt64ToLong128(mInt64);\n+        Asserts.assertEquals(res.toString(), mInt64.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt64.trueCount());\n@@ -238,1 +402,6 @@\n-    public static void testInt64ToDouble128() {\n+    public static VectorMask<Double> testInt64ToDouble128(VectorMask<Integer> v) {\n+        return v.cast(DoubleVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testInt64ToDouble128\")\n+    public static void testInt64ToDouble128_runner() {\n@@ -240,1 +409,3 @@\n-        Asserts.assertEquals(mInt64.cast(DoubleVector.SPECIES_128).toString(), mInt64.toString());\n+        VectorMask<Double> res = testInt64ToDouble128(mInt64);\n+        Asserts.assertEquals(res.toString(), mInt64.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt64.trueCount());\n@@ -245,1 +416,6 @@\n-    public static void testInt128ToShort64() {\n+    public static VectorMask<Short> testInt128ToShort64(VectorMask<Integer> v) {\n+        return v.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testInt128ToShort64\")\n+    public static void testInt128ToShort64_runner() {\n@@ -247,1 +423,3 @@\n-        Asserts.assertEquals(mInt128.cast(ShortVector.SPECIES_64).toString(), mInt128.toString());\n+        VectorMask<Short> res = testInt128ToShort64(mInt128);\n+        Asserts.assertEquals(res.toString(), mInt128.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt128.trueCount());\n@@ -252,1 +430,6 @@\n-    public static void testInt128ToLong256() {\n+    public static VectorMask<Long> testInt128ToLong256(VectorMask<Integer> v) {\n+        return v.cast(LongVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testInt128ToLong256\")\n+    public static void testInt128ToLong256_runner() {\n@@ -254,1 +437,3 @@\n-        Asserts.assertEquals(mInt128.cast(LongVector.SPECIES_256).toString(), mInt128.toString());\n+        VectorMask<Long> res = testInt128ToLong256(mInt128);\n+        Asserts.assertEquals(res.toString(), mInt128.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt128.trueCount());\n@@ -259,1 +444,6 @@\n-    public static void testInt128ToDouble256() {\n+    public static VectorMask<Double> testInt128ToDouble256(VectorMask<Integer> v) {\n+        return v.cast(DoubleVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testInt128ToDouble256\")\n+    public static void testInt128ToDouble256_runner() {\n@@ -261,1 +451,3 @@\n-        Asserts.assertEquals(mInt128.cast(DoubleVector.SPECIES_256).toString(), mInt128.toString());\n+        VectorMask<Double> res = testInt128ToDouble256(mInt128);\n+        Asserts.assertEquals(res.toString(), mInt128.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt128.trueCount());\n@@ -266,1 +458,6 @@\n-    public static void testInt256ToShort128() {\n+    public static VectorMask<Short> testInt256ToShort128(VectorMask<Integer> v) {\n+        return v.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testInt256ToShort128\")\n+    public static void testInt256ToShort128_runner() {\n@@ -268,1 +465,3 @@\n-        Asserts.assertEquals(mInt256.cast(ShortVector.SPECIES_128).toString(), mInt256.toString());\n+        VectorMask<Short> res = testInt256ToShort128(mInt256);\n+        Asserts.assertEquals(res.toString(), mInt256.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt256.trueCount());\n@@ -273,1 +472,6 @@\n-    public static void testInt256ToByte64() {\n+    public static VectorMask<Byte> testInt256ToByte64(VectorMask<Integer> v) {\n+    return v.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testInt256ToByte64\")\n+    public static void testInt256ToByte64_runner() {\n@@ -275,1 +479,3 @@\n-        Asserts.assertEquals(mInt256.cast(ByteVector.SPECIES_64).toString(), mInt256.toString());\n+        VectorMask<Byte> res = testInt256ToByte64(mInt256);\n+        Asserts.assertEquals(res.toString(), mInt256.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt256.trueCount());\n@@ -280,1 +486,6 @@\n-    public static void testInt256ToLong512() {\n+    public static VectorMask<Long> testInt256ToLong512(VectorMask<Integer> v) {\n+        return v.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testInt256ToLong512\")\n+    public static void testInt256ToLong512_runner() {\n@@ -282,1 +493,3 @@\n-        Asserts.assertEquals(mInt256.cast(LongVector.SPECIES_512).toString(), mInt256.toString());\n+        VectorMask<Long> res = testInt256ToLong512(mInt256);\n+        Asserts.assertEquals(res.toString(), mInt256.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt256.trueCount());\n@@ -287,1 +500,6 @@\n-    public static void testInt256ToDouble512() {\n+    public static VectorMask<Double> testInt256ToDouble512(VectorMask<Integer> v) {\n+        return v.cast(DoubleVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testInt256ToDouble512\")\n+    public static void testInt256ToDouble512_runner() {\n@@ -289,1 +507,3 @@\n-        Asserts.assertEquals(mInt256.cast(DoubleVector.SPECIES_512).toString(), mInt256.toString());\n+        VectorMask<Double> res = testInt256ToDouble512(mInt256);\n+        Asserts.assertEquals(res.toString(), mInt256.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt256.trueCount());\n@@ -294,1 +514,6 @@\n-    public static void testInt512ToShort256() {\n+    public static VectorMask<Short> testInt512ToShort256(VectorMask<Integer> v) {\n+        return v.cast(ShortVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testInt512ToShort256\")\n+    public static void testInt512ToShort256_runner() {\n@@ -296,1 +521,3 @@\n-        Asserts.assertEquals(mInt512.cast(ShortVector.SPECIES_256).toString(), mInt512.toString());\n+        VectorMask<Short> res = testInt512ToShort256(mInt512);\n+        Asserts.assertEquals(res.toString(), mInt512.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt512.trueCount());\n@@ -301,1 +528,6 @@\n-    public static void testInt512ToByte128() {\n+    public static VectorMask<Byte> testInt512ToByte128(VectorMask<Integer> v) {\n+        return v.cast(ByteVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testInt512ToByte128\")\n+    public static void testInt512ToByte128_runner() {\n@@ -303,1 +535,3 @@\n-        Asserts.assertEquals(mInt512.cast(ByteVector.SPECIES_128).toString(), mInt512.toString());\n+        VectorMask<Byte> res = testInt512ToByte128(mInt512);\n+        Asserts.assertEquals(res.toString(), mInt512.toString());\n+        Asserts.assertEquals(res.trueCount(), mInt512.trueCount());\n@@ -309,1 +543,6 @@\n-    public static void testFloat64ToLong128() {\n+    public static VectorMask<Long> testFloat64ToLong128(VectorMask<Float> v) {\n+        return v.cast(LongVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testFloat64ToLong128\")\n+    public static void testFloat64ToLong128_runner() {\n@@ -311,1 +550,3 @@\n-        Asserts.assertEquals(mFloat64.cast(LongVector.SPECIES_128).toString(), mFloat64.toString());\n+        VectorMask<Long> res = testFloat64ToLong128(mFloat64);\n+        Asserts.assertEquals(res.toString(), mFloat64.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat64.trueCount());\n@@ -316,1 +557,6 @@\n-    public static void testFloat64ToDouble128() {\n+    public static VectorMask<Double> testFloat64ToDouble128(VectorMask<Float> v) {\n+        return v.cast(DoubleVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testFloat64ToDouble128\")\n+    public static void testFloat64ToDouble128_runner() {\n@@ -318,1 +564,3 @@\n-        Asserts.assertEquals(mFloat64.cast(DoubleVector.SPECIES_128).toString(), mFloat64.toString());\n+        VectorMask<Double> res = testFloat64ToDouble128(mFloat64);\n+        Asserts.assertEquals(res.toString(), mFloat64.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat64.trueCount());\n@@ -323,1 +571,6 @@\n-    public static void testFloat128ToShort64() {\n+    public static VectorMask<Short> testFloat128ToShort64(VectorMask<Float> v) {\n+        return v.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testFloat128ToShort64\")\n+    public static void testFloat128ToShort64_runner() {\n@@ -325,1 +578,3 @@\n-        Asserts.assertEquals(mFloat128.cast(ShortVector.SPECIES_64).toString(), mFloat128.toString());\n+        VectorMask<Short> res = testFloat128ToShort64(mFloat128);\n+        Asserts.assertEquals(res.toString(), mFloat128.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat128.trueCount());\n@@ -330,1 +585,6 @@\n-    public static void testFloat128ToLong256() {\n+    public static VectorMask<Long> testFloat128ToLong256(VectorMask<Float> v) {\n+        return v.cast(LongVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testFloat128ToLong256\")\n+    public static void testFloat128ToLong256_runner() {\n@@ -332,1 +592,3 @@\n-        Asserts.assertEquals(mFloat128.cast(LongVector.SPECIES_256).toString(), mFloat128.toString());\n+        VectorMask<Long> res = testFloat128ToLong256(mFloat128);\n+        Asserts.assertEquals(res.toString(), mFloat128.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat128.trueCount());\n@@ -337,1 +599,6 @@\n-    public static void testFloat128ToDouble256() {\n+    public static VectorMask<Double> testFloat128ToDouble256(VectorMask<Float> v) {\n+        return v.cast(DoubleVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testFloat128ToDouble256\")\n+    public static void testFloat128ToDouble256_runner() {\n@@ -339,1 +606,3 @@\n-        Asserts.assertEquals(mFloat128.cast(DoubleVector.SPECIES_256).toString(), mFloat128.toString());\n+        VectorMask<Double> res = testFloat128ToDouble256(mFloat128);\n+        Asserts.assertEquals(res.toString(), mFloat128.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat128.trueCount());\n@@ -344,1 +613,6 @@\n-    public static void testFloat256ToShort128() {\n+    public static VectorMask<Short> testFloat256ToShort128(VectorMask<Float> v) {\n+        return v.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testFloat256ToShort128\")\n+    public static void testFloat256ToShort128_runner() {\n@@ -346,1 +620,3 @@\n-        Asserts.assertEquals(mFloat256.cast(ShortVector.SPECIES_128).toString(), mFloat256.toString());\n+        VectorMask<Short> res = testFloat256ToShort128(mFloat256);\n+        Asserts.assertEquals(res.toString(), mFloat256.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat256.trueCount());\n@@ -351,1 +627,6 @@\n-    public static void testFloat256ToByte64() {\n+    public static VectorMask<Byte> testFloat256ToByte64(VectorMask<Float> v) {\n+        return v.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testFloat256ToByte64\")\n+    public static void testFloat256ToByte64_runner() {\n@@ -353,1 +634,3 @@\n-        Asserts.assertEquals(mFloat256.cast(ByteVector.SPECIES_64).toString(), mFloat256.toString());\n+        VectorMask<Byte> res = testFloat256ToByte64(mFloat256);\n+        Asserts.assertEquals(res.toString(), mFloat256.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat256.trueCount());\n@@ -358,1 +641,6 @@\n-    public static void testFloat256ToLong512() {\n+    public static VectorMask<Long> testFloat256ToLong512(VectorMask<Float> v) {\n+        return v.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testFloat256ToLong512\")\n+    public static void testFloat256ToLong512_runner() {\n@@ -360,1 +648,3 @@\n-        Asserts.assertEquals(mFloat256.cast(LongVector.SPECIES_512).toString(), mFloat256.toString());\n+        VectorMask<Long> res = testFloat256ToLong512(mFloat256);\n+        Asserts.assertEquals(res.toString(), mFloat256.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat256.trueCount());\n@@ -365,1 +655,6 @@\n-    public static void testFloat256ToDouble512() {\n+    public static VectorMask<Double> testFloat256ToDouble512(VectorMask<Float> v) {\n+        return v.cast(DoubleVector.SPECIES_512);\n+    }\n+\n+    @Run(test = \"testFloat256ToDouble512\")\n+    public static void testFloat256ToDouble512_runner() {\n@@ -367,1 +662,3 @@\n-        Asserts.assertEquals(mFloat256.cast(DoubleVector.SPECIES_512).toString(), mFloat256.toString());\n+        VectorMask<Double> res = testFloat256ToDouble512(mFloat256);\n+        Asserts.assertEquals(res.toString(), mFloat256.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat256.trueCount());\n@@ -372,1 +669,6 @@\n-    public static void testFloat512ToShort256() {\n+    public static VectorMask<Short> testFloat512ToShort256(VectorMask<Float> v) {\n+        return v.cast(ShortVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testFloat512ToShort256\")\n+    public static void testFloat512ToShort256_runner() {\n@@ -374,1 +676,3 @@\n-        Asserts.assertEquals(mFloat512.cast(ShortVector.SPECIES_256).toString(), mFloat512.toString());\n+        VectorMask<Short> res = testFloat512ToShort256(mFloat512);\n+        Asserts.assertEquals(res.toString(), mFloat512.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat512.trueCount());\n@@ -379,1 +683,6 @@\n-    public static void testFloat512ToByte128() {\n+    public static VectorMask<Byte> testFloat512ToByte128(VectorMask<Float> v) {\n+        return v.cast(ByteVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testFloat512ToByte128\")\n+    public static void testFloat512ToByte128_runner() {\n@@ -381,1 +690,3 @@\n-        Asserts.assertEquals(mFloat512.cast(ByteVector.SPECIES_128).toString(), mFloat512.toString());\n+        VectorMask<Byte> res = testFloat512ToByte128(mFloat512);\n+        Asserts.assertEquals(res.toString(), mFloat512.toString());\n+        Asserts.assertEquals(res.trueCount(), mFloat512.trueCount());\n@@ -387,1 +698,6 @@\n-    public static void testLong128ToInt64() {\n+    public static VectorMask<Integer> testLong128ToInt64(VectorMask<Long> v) {\n+        return v.cast(IntVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testLong128ToInt64\")\n+    public static void testLong128ToInt64_runner() {\n@@ -389,1 +705,3 @@\n-        Asserts.assertEquals(mLong128.cast(IntVector.SPECIES_64).toString(), mLong128.toString());\n+        VectorMask<Integer> res = testLong128ToInt64(mLong128);\n+        Asserts.assertEquals(res.toString(), mLong128.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong128.trueCount());\n@@ -394,1 +712,6 @@\n-    public static void testLong128ToFloat64() {\n+    public static VectorMask<Float> testLong128ToFloat64(VectorMask<Long> v) {\n+        return v.cast(FloatVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testLong128ToFloat64\")\n+    public static void testLong128ToFloat64_runner() {\n@@ -396,1 +719,3 @@\n-        Asserts.assertEquals(mLong128.cast(FloatVector.SPECIES_64).toString(), mLong128.toString());\n+        VectorMask<Float> res = testLong128ToFloat64(mLong128);\n+        Asserts.assertEquals(res.toString(), mLong128.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong128.trueCount());\n@@ -401,1 +726,6 @@\n-    public static void testLong256ToInt128() {\n+    public static VectorMask<Integer> testLong256ToInt128(VectorMask<Long> v) {\n+        return v.cast(IntVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testLong256ToInt128\")\n+    public static void testLong256ToInt128_runner() {\n@@ -403,1 +733,3 @@\n-        Asserts.assertEquals(mLong256.cast(IntVector.SPECIES_128).toString(), mLong256.toString());\n+        VectorMask<Integer> res = testLong256ToInt128(mLong256);\n+        Asserts.assertEquals(res.toString(), mLong256.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong256.trueCount());\n@@ -408,1 +740,6 @@\n-    public static void testLong256ToFloat128() {\n+    public static VectorMask<Float> testLong256ToFloat128(VectorMask<Long> v) {\n+        return v.cast(FloatVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testLong256ToFloat128\")\n+    public static void testLong256ToFloat128_runner() {\n@@ -410,1 +747,3 @@\n-        Asserts.assertEquals(mLong256.cast(FloatVector.SPECIES_128).toString(), mLong256.toString());\n+        VectorMask<Float> res = testLong256ToFloat128(mLong256);\n+        Asserts.assertEquals(res.toString(), mLong256.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong256.trueCount());\n@@ -415,1 +754,6 @@\n-    public static void testLong256ToShort64() {\n+    public static VectorMask<Short> testLong256ToShort64(VectorMask<Long> v) {\n+       return v.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testLong256ToShort64\")\n+    public static void testLong256ToShort64_runner() {\n@@ -417,1 +761,3 @@\n-        Asserts.assertEquals(mLong256.cast(ShortVector.SPECIES_64).toString(), mLong256.toString());\n+        VectorMask<Short> res = testLong256ToShort64(mLong256);\n+        Asserts.assertEquals(res.toString(), mLong256.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong256.trueCount());\n@@ -422,1 +768,6 @@\n-    public static void testLong512ToInt256() {\n+    public static VectorMask<Integer> testLong512ToInt256(VectorMask<Long> v) {\n+        return v.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testLong512ToInt256\")\n+    public static void testLong512ToInt256_runner() {\n@@ -424,1 +775,3 @@\n-        Asserts.assertEquals(mLong512.cast(IntVector.SPECIES_256).toString(), mLong512.toString());\n+        VectorMask<Integer> res = testLong512ToInt256(mLong512);\n+        Asserts.assertEquals(res.toString(), mLong512.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong512.trueCount());\n@@ -429,1 +782,6 @@\n-    public static void testLong512ToFloat256() {\n+    public static VectorMask<Float> testLong512ToFloat256(VectorMask<Long> v) {\n+        return v.cast(FloatVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testLong512ToFloat256\")\n+    public static void testLong512ToFloat256_runner() {\n@@ -431,1 +789,3 @@\n-        Asserts.assertEquals(mLong512.cast(FloatVector.SPECIES_256).toString(), mLong512.toString());\n+        VectorMask<Float> res = testLong512ToFloat256(mLong512);\n+        Asserts.assertEquals(res.toString(), mLong512.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong512.trueCount());\n@@ -436,1 +796,6 @@\n-    public static void testLong512ToShort128() {\n+    public static VectorMask<Short> testLong512ToShort128(VectorMask<Long> v) {\n+        return v.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testLong512ToShort128\")\n+    public static void testLong512ToShort128_runner() {\n@@ -438,1 +803,3 @@\n-        Asserts.assertEquals(mLong512.cast(ShortVector.SPECIES_128).toString(), mLong512.toString());\n+        VectorMask<Short> res = testLong512ToShort128(mLong512);\n+        Asserts.assertEquals(res.toString(), mLong512.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong512.trueCount());\n@@ -443,1 +810,6 @@\n-    public static void testLong512ToByte64() {\n+    public static VectorMask<Byte> testLong512ToByte64(VectorMask<Long> v) {\n+        return v.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testLong512ToByte64\")\n+    public static void testLong512ToByte64_runner() {\n@@ -445,1 +817,3 @@\n-        Asserts.assertEquals(mLong512.cast(ByteVector.SPECIES_64).toString(), mLong512.toString());\n+        VectorMask<Byte> res = testLong512ToByte64(mLong512);\n+        Asserts.assertEquals(res.toString(), mLong512.toString());\n+        Asserts.assertEquals(res.trueCount(), mLong512.trueCount());\n@@ -451,1 +825,6 @@\n-    public static void testDouble128ToInt64() {\n+    public static VectorMask<Integer> testDouble128ToInt64(VectorMask<Double> v) {\n+        return v.cast(IntVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testDouble128ToInt64\")\n+    public static void testDouble128ToInt64_runner() {\n@@ -453,1 +832,3 @@\n-        Asserts.assertEquals(mDouble128.cast(IntVector.SPECIES_64).toString(), mDouble128.toString());\n+        VectorMask<Integer> res = testDouble128ToInt64(mDouble128);\n+        Asserts.assertEquals(res.toString(), mDouble128.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble128.trueCount());\n@@ -458,1 +839,6 @@\n-    public static void testDouble128ToFloat64() {\n+    public static VectorMask<Float> testDouble128ToFloat64(VectorMask<Double> v) {\n+        return v.cast(FloatVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testDouble128ToFloat64\")\n+    public static void testDouble128ToFloat64_runner() {\n@@ -460,1 +846,3 @@\n-        Asserts.assertEquals(mDouble128.cast(FloatVector.SPECIES_64).toString(), mDouble128.toString());\n+        VectorMask<Float> res = testDouble128ToFloat64(mDouble128);\n+        Asserts.assertEquals(res.toString(), mDouble128.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble128.trueCount());\n@@ -465,1 +853,6 @@\n-    public static void testDouble256ToInt128() {\n+    public static VectorMask<Integer> testDouble256ToInt128(VectorMask<Double> v) {\n+        return v.cast(IntVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testDouble256ToInt128\")\n+    public static void testDouble256ToInt128_runner() {\n@@ -467,1 +860,3 @@\n-        Asserts.assertEquals(mDouble256.cast(IntVector.SPECIES_128).toString(), mDouble256.toString());\n+        VectorMask<Integer> res = testDouble256ToInt128(mDouble256);\n+        Asserts.assertEquals(res.toString(), mDouble256.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble256.trueCount());\n@@ -472,1 +867,6 @@\n-    public static void testDouble256ToFloat128() {\n+    public static VectorMask<Float> testDouble256ToFloat128(VectorMask<Double> v) {\n+        return v.cast(FloatVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testDouble256ToFloat128\")\n+    public static void testDouble256ToFloat128_runner() {\n@@ -474,1 +874,3 @@\n-        Asserts.assertEquals(mDouble256.cast(FloatVector.SPECIES_128).toString(), mDouble256.toString());\n+        VectorMask<Float> res = testDouble256ToFloat128(mDouble256);\n+        Asserts.assertEquals(res.toString(), mDouble256.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble256.trueCount());\n@@ -479,1 +881,6 @@\n-    public static void testDouble256ToShort64() {\n+    public static VectorMask<Short> testDouble256ToShort64(VectorMask<Double> v) {\n+        return v.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testDouble256ToShort64\")\n+    public static void testDouble256ToShort64_runner() {\n@@ -481,1 +888,3 @@\n-        Asserts.assertEquals(mDouble256.cast(ShortVector.SPECIES_64).toString(), mDouble256.toString());\n+        VectorMask<Short> res = testDouble256ToShort64(mDouble256);\n+        Asserts.assertEquals(res.toString(), mDouble256.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble256.trueCount());\n@@ -486,1 +895,6 @@\n-    public static void testDouble512ToInt256() {\n+    public static VectorMask<Integer> testDouble512ToInt256(VectorMask<Double> v) {\n+        return v.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testDouble512ToInt256\")\n+    public static void testDouble512ToInt256_runner() {\n@@ -488,1 +902,3 @@\n-        Asserts.assertEquals(mDouble512.cast(IntVector.SPECIES_256).toString(), mDouble512.toString());\n+        VectorMask<Integer> res = testDouble512ToInt256(mDouble512);\n+        Asserts.assertEquals(res.toString(), mDouble512.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble512.trueCount());\n@@ -493,1 +909,6 @@\n-    public static void testDouble512ToFloat256() {\n+    public static VectorMask<Float> testDouble512ToFloat256(VectorMask<Double> v) {\n+        return v.cast(FloatVector.SPECIES_256);\n+    }\n+\n+    @Run(test = \"testDouble512ToFloat256\")\n+    public static void testDouble512ToFloat256_runner() {\n@@ -495,1 +916,3 @@\n-        Asserts.assertEquals(mDouble512.cast(FloatVector.SPECIES_256).toString(), mDouble512.toString());\n+        VectorMask<Float> res = testDouble512ToFloat256(mDouble512);\n+        Asserts.assertEquals(res.toString(), mDouble512.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble512.trueCount());\n@@ -500,1 +923,6 @@\n-    public static void testDouble512ToShort128() {\n+    public static VectorMask<Short> testDouble512ToShort128(VectorMask<Double> v) {\n+        return v.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Run(test = \"testDouble512ToShort128\")\n+    public static void testDouble512ToShort128_runner() {\n@@ -502,1 +930,3 @@\n-        Asserts.assertEquals(mDouble512.cast(ShortVector.SPECIES_128).toString(), mDouble512.toString());\n+        VectorMask<Short> res = testDouble512ToShort128(mDouble512);\n+        Asserts.assertEquals(res.toString(), mDouble512.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble512.trueCount());\n@@ -507,1 +937,6 @@\n-    public static void testDouble512ToByte64() {\n+    public static VectorMask<Byte> testDouble512ToByte64(VectorMask<Double> v) {\n+        return v.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Run(test = \"testDouble512ToByte64\")\n+    public static void testDouble512ToByte64_runner() {\n@@ -509,1 +944,3 @@\n-        Asserts.assertEquals(mDouble512.cast(ByteVector.SPECIES_64).toString(), mDouble512.toString());\n+        VectorMask<Byte> res = testDouble512ToByte64(mDouble512);\n+        Asserts.assertEquals(res.toString(), mDouble512.toString());\n+        Asserts.assertEquals(res.trueCount(), mDouble512.trueCount());\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java","additions":563,"deletions":126,"binary":false,"changes":689,"status":"modified"}]}