{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,7 @@\n+ * <P>To read from {@link System#in}, use the system property value\n+ * {@link System##stdin.encoding stdin.encoding} as the {@code Charset}:\n+ *\n+ * {@snippet lang=java :\n+ *     new InputStreamReader(System.in, System.getProperty(\"stdin.encoding\"));\n+ * }\n+ *\n@@ -56,0 +63,1 @@\n+ * @see System##stdin.encoding stdin.encoding\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStreamReader.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -127,4 +127,13 @@\n-     * within an {@link java.io.InputStreamReader InputStreamReader} or other object\n-     * that handles character encoding. After this is done, subsequent reading should\n-     * use only the wrapper object; operating directly on {@code System.in} results\n-     * in unspecified behavior.\n+     * within the object that handles character encoding. After this is done,\n+     * subsequent reading should use only the wrapper object; continuing to\n+     * operate directly on {@code System.in} results in unspecified behavior.\n+     * <p>\n+     * Here are two common examples. Using an {@link java.io.InputStreamReader\n+     * InputStreamReader}:\n+     * {@snippet lang=java :\n+     *     new InputStreamReader(System.in, System.getProperty(\"stdin.encoding\"));\n+     * }\n+     * Or using a {@link java.util.Scanner Scanner}:\n+     * {@snippet lang=java :\n+     *     new Scanner(System.in, System.getProperty(\"stdin.encoding\"));\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n- * <p>As another example, this code allows {@code long} types to be\n+ * <p>This code allows {@code long} types to be\n@@ -90,0 +90,13 @@\n+ * <p>This code uses a {@code Scanner} to read lines from {@link System#in}. The\n+ * {@code Scanner} uses the system property value of\n+ * {@link System##stdin.encoding stdin.encoding} as the {@code Charset}. Specifying\n+ * the charset explicitly is important when reading from {@code System.in}, as it\n+ * may differ from the {@link Charset#defaultCharset() default charset} depending\n+ * on the host environment or user configuration:\n+ * {@snippet :\n+ *      Scanner sc = new Scanner(System.in, System.getProperty(\"stdin.encoding\"));\n+ *      while (sc.hasNextLine()) {\n+ *          String aLine = sc.nextLine();\n+ *      }\n+ * }\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/Scanner.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,3 @@\n-     *                  (new InputStreamReader(System.in))).readLine());\n+     *                  (new InputStreamReader(\n+     *                          System.in,\n+     *                          System.getProperty(\"stdin.encoding\")))).readLine());\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/callback\/CallbackHandler.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}