{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.awt.KeyboardFocusManager;\n@@ -125,0 +126,2 @@\n+    \/** KeyboardFocusListener *\/\n+    protected KeyboardFocusListener keyboardFocusListener;\n@@ -359,0 +362,1 @@\n+        keyboardFocusListener = createKeyboardFocusListener();\n@@ -365,0 +369,2 @@\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .addPropertyChangeListener(keyboardFocusListener);\n@@ -446,0 +452,2 @@\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .removePropertyChangeListener(keyboardFocusListener);\n@@ -512,0 +520,8 @@\n+    \/**\n+     * Creates a keyboard focus listener.\n+     * @return a keyboard focus listener\n+     *\/\n+    protected KeyboardFocusListener createKeyboardFocusListener() {\n+        return new KeyboardFocusListener();\n+    }\n+\n@@ -1205,0 +1221,29 @@\n+    \/**\n+     * A listener to listen for keyboard focus changes.\n+     *\/\n+    protected class KeyboardFocusListener extends MouseAdapter implements PropertyChangeListener {\n+        \/**\n+         * Constructs a {@code KeyboardFocusListener}.\n+         *\/\n+        protected KeyboardFocusListener() {}\n+\n+        @Override\n+        public void propertyChange(PropertyChangeEvent e) {\n+            String propertyName = e.getPropertyName();\n+\n+            if (\"focusOwner\" == propertyName) {\n+                \/\/ Stop scrolling if no longer focus owner\n+                if (e.getNewValue() == null && scrollTimer.isRunning()) {\n+                    scrollTimer.stop();\n+                    buttonListener.handledEvent = false;\n+                    scrollbar.setValueIsAdjusting(false);\n+                    if (incrButton.getModel().isPressed()) {\n+                        incrButton.getModel().setPressed(false);\n+                    } else if (decrButton.getModel().isPressed()) {\n+                        decrButton.getModel().setPressed(false);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicScrollBarUI.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+\n+\/*\n+ * @test\n+ * @bug 6672644\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Tests JComboBox scrollbar behavior when alt-tabbing\n+ * @run main\/manual JComboBoxScrollFocusTest\n+ *\/\n+\n+public class JComboBoxScrollFocusTest {\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+             Click on the dropdown button for the JComboBox in the test frame.\n+             Then, press and hold the left click button on the down arrow button\n+             in the popup list. While holding the left click button, the list\n+             should be scrolling down. Press ALT + TAB while holding down the\n+             left click to switch focus to a different window. Focus the test\n+             frame again and click the dropdown button for the JComboBox again.\n+             The list should not be automatically scrolling.\n+\n+             If you are able to execute all steps successfully then the test\n+             passes, otherwise it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+                .builder()\n+                .title(\"JComboBoxScrollFocusTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(JComboBoxScrollFocusTest::createAndShowGUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JFrame createAndShowGUI() {\n+        JFrame frame = new JFrame(\"JComboBoxScrollFocusTest Test Frame\");\n+        JComboBox combobox = new JComboBox();\n+        for (int i = 0; i < 100; i ++) {\n+            combobox.addItem(String.valueOf(i));\n+        }\n+        frame.add(combobox);\n+        frame.setSize(400, 200);\n+        frame.setLocationRelativeTo(null);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/JComboBoxScrollFocusTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}