{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3828,2 +3828,1 @@\n-      fileStream fs(stdout);\n-      os::print_memory_mappings((char*)start, bytes, &fs);\n+      os::print_memory_mappings((char*)start, bytes, tty);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -468,1 +468,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/threadCritical.hpp\"\n@@ -127,1 +128,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      ThreadCritical tc;\n@@ -153,1 +154,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      ThreadCritical tc;\n@@ -164,1 +165,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      ThreadCritical tc;\n@@ -172,1 +173,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n@@ -180,1 +181,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n@@ -189,1 +190,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n@@ -198,1 +199,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    MemoryFileTracker::Instance::Locker lock;\n@@ -212,1 +213,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      ThreadCritical tc;\n@@ -221,1 +222,1 @@\n-      NmtVirtualMemoryLocker ml;\n+      ThreadCritical tc;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutex.hpp\"\n@@ -37,0 +38,1 @@\n+PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -133,0 +135,1 @@\n+  _mutex = new PlatformMutex();\n@@ -193,0 +196,8 @@\n+\n+MemoryFileTracker::Instance::Locker::Locker() {\n+  MemoryFileTracker::Instance::_mutex->lock();\n+}\n+\n+MemoryFileTracker::Instance::Locker::~Locker() {\n+  MemoryFileTracker::Instance::_mutex->unlock();\n+}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/mutex.hpp\"\n@@ -83,0 +84,1 @@\n+    static PlatformMutex* _mutex;\n@@ -85,0 +87,5 @@\n+    class Locker : public StackObj {\n+    public:\n+      Locker();\n+      ~Locker();\n+    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n-#include \"runtime\/thread.hpp\"\n@@ -142,8 +140,0 @@\n-\/\/ Same as MutexLocker but can be used during VM init.\n-\/\/ Performs no action if given a null mutex or with detached threads.\n-class NmtVirtualMemoryLocker: public ConditionalMutexLocker {\n-public:\n-    NmtVirtualMemoryLocker() :\n-            ConditionalMutexLocker(NmtVirtualMemory_lock, Thread::current_or_null_safe() != nullptr, Mutex::_no_safepoint_check_flag) {\n-    }\n-};\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/threadCritical.hpp\"\n@@ -55,1 +56,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  ThreadCritical tc;\n@@ -65,1 +66,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  ThreadCritical tc;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/threadCritical.hpp\"\n@@ -623,1 +624,0 @@\n-    assert_lock_strong(NmtVirtualMemory_lock);\n@@ -664,1 +664,1 @@\n-  NmtVirtualMemoryLocker ml;\n+  ThreadCritical tc;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -297,1 +296,1 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , service-5); \/\/ Must be lower than NmtVirtualMemory_lock due to MemTracker::print_containing_region\n+  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , tty-1);\n@@ -301,1 +300,0 @@\n-  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2169,1 +2169,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n@@ -2191,1 +2191,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n@@ -2276,1 +2276,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n@@ -2315,1 +2315,1 @@\n-    NmtVirtualMemoryLocker ml;\n+    ThreadCritical tc;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -720,4 +720,0 @@\n-  if (MemTracker::enabled() && NmtVirtualMemory_lock != nullptr && NmtVirtualMemory_lock->owned_by_self()) {\n-    \/\/ Manually unlock to avoid reentrancy due to mallocs in detailed mode.\n-    NmtVirtualMemory_lock->unlock();\n-  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}