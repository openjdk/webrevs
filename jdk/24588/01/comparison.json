{"files":[{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4193267\n+ * @summary Tests that JList first and last visible indices are\n+ * updated properly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4193267\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextField;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.GridLayout;\n+\n+public class bug4193267 {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            Resize the frame \"JList\" with a different ways and scroll the list\n+            (if it possible). The indices of first and last visible elements\n+            should be indicated in the corresponding fields in \"Index\" frame.\n+            If the indicated indices is not right then test fails.\n+\n+            Note:\n+              - the first and last visible indices should be -1 if nothing\n+              is visible;\n+              - the first or last visible cells may only be partially visible.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .title(\"bug4193267 Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .positionTestUI(WindowLayouts::rightOneRow)\n+            .columns(35)\n+            .testUI(initialize())\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame[] initialize() {\n+        String[] data = {\"000000000000000\", \"111111111111111\",\n+            \"222222222222222\", \"333333333333333\",\n+            \"444444444444444\", \"555555555555555\",\n+            \"666666666666666\", \"777777777777777\",\n+            \"888888888888888\", \"999999999999999\"};\n+        JList lst;\n+        JScrollPane jsp;\n+        JTextField first, last;\n+        JFrame[] fr = new JFrame[2];\n+        fr[0] = new JFrame(\"JList\");\n+        lst = new JList(data);\n+        lst.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        lst.setVisibleRowCount(4);\n+        jsp = new JScrollPane(lst);\n+        fr[0].add(jsp);\n+        fr[0].setSize(400, 200);\n+\n+        JPanel pL = new JPanel();\n+        pL.setLayout(new GridLayout(2, 1));\n+        pL.add(new JLabel(\"First Visible Index\"));\n+        pL.add(new JLabel(\"Last Visible Index\"));\n+\n+        JPanel p = new JPanel();\n+        p.setLayout(new GridLayout(2, 1));\n+        first = new JTextField(\"0\", 2);\n+        first.setEditable(false);\n+        first.setBackground(Color.white);\n+        p.add(first);\n+        last = new JTextField(\"9\", 2);\n+        last.setEditable(false);\n+        last.setBackground(Color.white);\n+        p.add(last);\n+\n+        fr[1] = new JFrame(\"Index\");\n+        fr[1].setSize(200, 200);\n+        fr[1].setLayout(new FlowLayout());\n+        fr[1].add(pL);\n+        fr[1].add(p);\n+\n+        jsp.getViewport().addChangeListener(new ChangeListener() {\n+            public void stateChanged(ChangeEvent e) {\n+                first.setText(String.valueOf(lst.getFirstVisibleIndex()));\n+                last.setText(String.valueOf(lst.getLastVisibleIndex()));\n+            }\n+        });\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4193267.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4249161\n+ * @summary Tests that JList.setComponentOrientation() works correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4249161\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+import java.awt.BorderLayout;\n+import java.awt.ComponentOrientation;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class bug4249161 {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+            1. With a scroll bar, confirm that all words (\"one\" - \"twenty\") are\n+            aligned at the left side of a list.\n+            2. Press \"Change!\" button. All words on the list should be moved\n+            to the right side.\n+            3. Press the same button again. All words should be moved to the\n+            left side.\n+\n+            If all items in a list are moved as soon as \"Change!\" button is\n+            pressed, test passes.\n+            \"\"\";\n+        PassFailJFrame.builder()\n+            .title(\"bug4249161 Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(35)\n+            .testUI(initialize())\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static JFrame initialize() {\n+        JFrame fr = new JFrame(\"bug4249161\");\n+\n+        String[] data = {\"one\", \"two\", \"three\", \"four\", \"five\",\n+            \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n+            \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n+            \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n+        };\n+        final JList list = new JList(data);\n+        list.setSize(200, 200);\n+        list.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+        JScrollPane pane = new JScrollPane(list);\n+        fr.add(pane);\n+\n+        JButton button = new JButton(\"Change!\");\n+        button.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                if (list.getComponentOrientation() !=\n+                    ComponentOrientation.RIGHT_TO_LEFT) {\n+                    list.setComponentOrientation\n+                        (ComponentOrientation.RIGHT_TO_LEFT);\n+                } else {\n+                    list.setComponentOrientation\n+                        (ComponentOrientation.LEFT_TO_RIGHT);\n+                }\n+            }\n+        });\n+        fr.add(button, BorderLayout.SOUTH);\n+        fr.setSize(200, 300);\n+        fr.setAlwaysOnTop(true);\n+        return fr;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4249161.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4618767\n+ * @summary First letter navigation in JList interferes with mnemonics\n+ * @key headful\n+ * @run main bug4618767\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class bug4618767 {\n+    private static JFrame f;\n+    private static final JList list = new\n+        JList(new String[] {\"one\", \"two\", \"three\", \"four\"});\n+    private static boolean menuSelected;\n+    private static volatile boolean failed;\n+    private static CountDownLatch listGainedFocusLatch = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            createUI();\n+            runTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createUI() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            f = new JFrame(\"bug4618767\");\n+            JMenu menu = new JMenu(\"File\");\n+            menu.setMnemonic('F');\n+            JMenuItem menuItem = new JMenuItem(\"item\");\n+            menu.add(menuItem);\n+            JMenuBar menuBar = new JMenuBar();\n+            menuBar.add(menu);\n+            f.setJMenuBar(menuBar);\n+\n+            menu.addMenuListener(new MenuListener() {\n+                public void menuCanceled(MenuEvent e) {}\n+                public void menuDeselected(MenuEvent e) {}\n+                public void menuSelected(MenuEvent e) {\n+                    menuSelected = true;\n+                }\n+            });\n+\n+            list.addFocusListener(new FocusAdapter() {\n+                @Override\n+                public void focusGained(FocusEvent e) {\n+                    listGainedFocusLatch.countDown();\n+                }\n+            });\n+            f.add(list);\n+            f.pack();\n+            f.setLocationRelativeTo(null);\n+            f.setAlwaysOnTop(true);\n+            f.setVisible(true);\n+        });\n+    }\n+\n+    private static void runTest() throws Exception {\n+        if (!listGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Waited too long, but can't gain\" +\n+                \" focus for list\");\n+        }\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_O);\n+        robot.keyRelease(KeyEvent.VK_O);\n+        robot.waitForIdle();\n+        robot.keyPress(KeyEvent.VK_ALT);\n+        robot.keyPress(KeyEvent.VK_F);\n+        robot.keyRelease(KeyEvent.VK_F);\n+        robot.keyRelease(KeyEvent.VK_ALT);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (menuSelected && list.getSelectedIndex()!= 0) {\n+                failed = true;\n+            }\n+        });\n+        if (failed) {\n+            throw new RuntimeException(\"Mnemonics interferes with Jlist\" +\n+                \" item selection using KeyEvent\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/bug4618767.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}