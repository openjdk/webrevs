{"files":[{"patch":"@@ -59,8 +59,2 @@\n-        private static final boolean VALUE = getValue();\n-\n-        @SuppressWarnings(\"removal\")\n-        private static boolean getValue() {\n-            return AccessController.doPrivileged(\n-                (PrivilegedAction<Boolean>)\n-                () -> Boolean.getBoolean(\"jdk.crypto.KeyAgreement.legacyKDF\"));\n-        }\n+        private static final boolean VALUE =\n+            Boolean.getBoolean(\"jdk.crypto.KeyAgreement.legacyKDF\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKeyAgreement.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.security.AccessController;\n@@ -40,1 +39,0 @@\n-import java.security.PrivilegedAction;\n@@ -838,1 +836,0 @@\n-                            final ObjectInputStream ois2 = ois;\n@@ -840,7 +837,2 @@\n-                            @SuppressWarnings(\"removal\")\n-                            var dummy = AccessController.doPrivileged(\n-                                (PrivilegedAction<Void>)() -> {\n-                                    ois2.setObjectInputFilter(\n-                                        new DeserializationChecker(fullLength));\n-                                    return null;\n-                            });\n+                            ois.setObjectInputFilter(\n+                                new DeserializationChecker(fullLength));\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -83,5 +82,1 @@\n-            AccessController.doPrivileged(\n-                    (PrivilegedAction<Void>) () -> {\n-                        ois.setObjectInputFilter(new DeserializationChecker(maxLength));\n-                        return null;\n-                    });\n+                ois.setObjectInputFilter(new DeserializationChecker(maxLength));\n@@ -116,10 +111,2 @@\n-            @SuppressWarnings(\"removal\")\n-            String prop = AccessController.doPrivileged(\n-                    (PrivilegedAction<String>) () -> {\n-                        String tmp = System.getProperty(KEY_SERIAL_FILTER);\n-                        if (tmp != null) {\n-                            return tmp;\n-                        } else {\n-                            return Security.getProperty(KEY_SERIAL_FILTER);\n-                        }\n-                    });\n+            String prop = System.getProperty(\n+                 KEY_SERIAL_FILTER, Security.getProperty(KEY_SERIAL_FILTER));\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SealedObjectForKeyProtector.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -31,1 +30,0 @@\n-import java.security.PrivilegedAction;\n@@ -124,1 +122,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -129,13 +126,2 @@\n-        \/\/ if there is no security manager installed, put directly into\n-        \/\/ the provider\n-        if (System.getSecurityManager() == null) {\n-            putEntries();\n-        } else {\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    putEntries();\n-                    return null;\n-                }\n-            });\n-        }\n+        putEntries();\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -79,1 +79,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -112,9 +111,1 @@\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<> () {\n-                    @Override\n-                    public Void run() throws Exception {\n-                        setupJurisdictionPolicies();\n-                        return null;\n-                    }\n-                }\n-            );\n+            setupJurisdictionPolicies();\n@@ -288,14 +279,8 @@\n-                url = AccessController.doPrivileged(\n-                    new PrivilegedAction<>() {\n-                        @Override\n-                        public URL run() {\n-                            ProtectionDomain pd = clazz.getProtectionDomain();\n-                            if (pd != null) {\n-                                CodeSource cs = pd.getCodeSource();\n-                                if (cs != null) {\n-                                    return cs.getLocation();\n-                                }\n-                            }\n-                            return NULL_URL;\n-                        }\n-                    });\n+                url = NULL_URL;\n+                ProtectionDomain pd = clazz.getProtectionDomain();\n+                if (pd != null) {\n+                    CodeSource cs = pd.getCodeSource();\n+                    if (cs != null) {\n+                        url = cs.getLocation();\n+                    }\n+                }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":9,"deletions":24,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -68,5 +68,1 @@\n-        PrivilegedAction<JceSecurityManager> paSM = JceSecurityManager::new;\n-        @SuppressWarnings(\"removal\")\n-        JceSecurityManager dummySecurityManager =\n-                AccessController.doPrivileged(paSM);\n-        INSTANCE = dummySecurityManager;\n+        INSTANCE = new JceSecurityManager();\n@@ -74,6 +70,2 @@\n-        PrivilegedAction<StackWalker> paWalker =\n-                () -> StackWalker.getInstance(Set.of(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE));\n-        @SuppressWarnings(\"removal\")\n-        StackWalker dummyWalker = AccessController.doPrivileged(paWalker);\n-\n-        WALKER = dummyWalker;\n+        WALKER = StackWalker.getInstance(\n+                Set.of(Option.DROP_METHOD_INFO, Option.RETAIN_CLASS_REFERENCE));\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurityManager.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,14 +103,6 @@\n-                @SuppressWarnings(\"removal\")\n-                var tmp = AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<JarFile>) () -> {\n-                            JarURLConnection conn =\n-                                (JarURLConnection) url.openConnection();\n-                            \/\/ You could do some caching here as\n-                            \/\/ an optimization.\n-                            conn.setUseCaches(false);\n-                            return conn.getJarFile();\n-                        });\n-                jf = tmp;\n-            } catch (java.security.PrivilegedActionException pae) {\n-                throw new SecurityException(\"Cannot load \" + url,\n-                    pae.getCause());\n+                JarURLConnection conn = (JarURLConnection) url.openConnection();\n+                \/\/ You could do some caching here as an optimization.\n+                conn.setUseCaches(false);\n+                jf = conn.getJarFile();\n+            } catch (IOException ioe) {\n+                throw new SecurityException(\"Cannot load \" + url, ioe);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/ProviderVerifier.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"}]}