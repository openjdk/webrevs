{"files":[{"patch":"@@ -36,1 +36,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -44,1 +44,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -52,1 +52,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -60,1 +60,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -68,1 +68,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -76,1 +76,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -84,1 +84,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -92,1 +92,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -100,1 +100,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -108,1 +108,1 @@\n- * @bug 8310190\n+ * @bug 8329273\n@@ -117,1 +117,1 @@\n-\/\/  * @bug 8310190\n+\/\/  * @bug 8329273\n@@ -125,1 +125,1 @@\n-\/\/  * @bug 8310190\n+\/\/  * @bug 8329273\n@@ -133,1 +133,1 @@\n-\/\/  * @bug 8310190\n+\/\/  * @bug 8329273\n@@ -166,13 +166,13 @@\n-            case \"ByteArray\"        -> ( () -> { return newMemorySegmentOfByteArray(); } );\n-            case \"CharArray\"        -> ( () -> { return newMemorySegmentOfCharArray(); } );\n-            case \"ShortArray\"       -> ( () -> { return newMemorySegmentOfShortArray(); } );\n-            case \"IntArray\"         -> ( () -> { return newMemorySegmentOfIntArray(); } );\n-            case \"LongArray\"        -> ( () -> { return newMemorySegmentOfLongArray(); } );\n-            case \"FloatArray\"       -> ( () -> { return newMemorySegmentOfFloatArray(); } );\n-            case \"DoubleArray\"      -> ( () -> { return newMemorySegmentOfDoubleArray(); } );\n-            case \"ByteBuffer\"       -> ( () -> { return newMemorySegmentOfByteBuffer(); } );\n-            case \"ByteBufferDirect\" -> ( () -> { return newMemorySegmentOfByteBufferDirect(); } );\n-            case \"Native\"           -> ( () -> { return newMemorySegmentOfNative(); } );\n-            case \"MixedArray\"       -> ( () -> { return newMemorySegmentOfMixedArray(); } );\n-            case \"MixedBuffer\"      -> ( () -> { return newMemorySegmentOfMixedBuffer(); } );\n-            case \"Mixed\"            -> ( () -> { return newMemorySegmentOfMixed(); } );\n+            case \"ByteArray\"        -> TestMemorySegmentImpl::newMemorySegmentOfByteArray;\n+            case \"CharArray\"        -> TestMemorySegmentImpl::newMemorySegmentOfCharArray;\n+            case \"ShortArray\"       -> TestMemorySegmentImpl::newMemorySegmentOfShortArray;\n+            case \"IntArray\"         -> TestMemorySegmentImpl::newMemorySegmentOfIntArray;\n+            case \"LongArray\"        -> TestMemorySegmentImpl::newMemorySegmentOfLongArray;\n+            case \"FloatArray\"       -> TestMemorySegmentImpl::newMemorySegmentOfFloatArray;\n+            case \"DoubleArray\"      -> TestMemorySegmentImpl::newMemorySegmentOfDoubleArray;\n+            case \"ByteBuffer\"       -> TestMemorySegmentImpl::newMemorySegmentOfByteBuffer;\n+            case \"ByteBufferDirect\" -> TestMemorySegmentImpl::newMemorySegmentOfByteBufferDirect;\n+            case \"Native\"           -> TestMemorySegmentImpl::newMemorySegmentOfNative;\n+            case \"MixedArray\"       -> TestMemorySegmentImpl::newMemorySegmentOfMixedArray;\n+            case \"MixedBuffer\"      -> TestMemorySegmentImpl::newMemorySegmentOfMixedBuffer;\n+            case \"Mixed\"            -> TestMemorySegmentImpl::newMemorySegmentOfMixed;\n@@ -197,75 +197,25 @@\n-        tests.put(\"testMemorySegmentBadExitCheck\", () -> {\n-            return testMemorySegmentBadExitCheck(copy(a));\n-        });\n-        tests.put(\"testIntLoop_iv_byte\", () -> {\n-            return testIntLoop_iv_byte(copy(a));\n-        });\n-        tests.put(\"testIntLoop_longIndex_intInvar_sameAdr_byte\", () -> {\n-            return testIntLoop_longIndex_intInvar_sameAdr_byte(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_longInvar_sameAdr_byte\", () -> {\n-            return testIntLoop_longIndex_longInvar_sameAdr_byte(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_intInvar_byte\", () -> {\n-            return testIntLoop_longIndex_intInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_longInvar_byte\", () -> {\n-            return testIntLoop_longIndex_longInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_intIndex_intInvar_byte\", () -> {\n-            return testIntLoop_intIndex_intInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_iv_int\", () -> {\n-            return testIntLoop_iv_int(copy(a));\n-        });\n-        tests.put(\"testIntLoop_longIndex_intInvar_sameAdr_int\", () -> {\n-            return testIntLoop_longIndex_intInvar_sameAdr_int(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_longInvar_sameAdr_int\", () -> {\n-            return testIntLoop_longIndex_longInvar_sameAdr_int(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_intInvar_int\", () -> {\n-            return testIntLoop_longIndex_intInvar_int(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_longIndex_longInvar_int\", () -> {\n-            return testIntLoop_longIndex_longInvar_int(copy(a), 0);\n-        });\n-        tests.put(\"testIntLoop_intIndex_intInvar_int\", () -> {\n-            return testIntLoop_intIndex_intInvar_int(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_iv_byte\", () -> {\n-            return testLongLoop_iv_byte(copy(a));\n-        });\n-        tests.put(\"testLongLoop_longIndex_intInvar_sameAdr_byte\", () -> {\n-            return testLongLoop_longIndex_intInvar_sameAdr_byte(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_longInvar_sameAdr_byte\", () -> {\n-            return testLongLoop_longIndex_longInvar_sameAdr_byte(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_intInvar_byte\", () -> {\n-            return testLongLoop_longIndex_intInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_longInvar_byte\", () -> {\n-            return testLongLoop_longIndex_longInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_intIndex_intInvar_byte\", () -> {\n-            return testLongLoop_intIndex_intInvar_byte(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_iv_int\", () -> {\n-            return testLongLoop_iv_int(copy(a));\n-        });\n-        tests.put(\"testLongLoop_longIndex_intInvar_sameAdr_int\", () -> {\n-            return testLongLoop_longIndex_intInvar_sameAdr_int(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_longInvar_sameAdr_int\", () -> {\n-            return testLongLoop_longIndex_longInvar_sameAdr_int(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_intInvar_int\", () -> {\n-            return testLongLoop_longIndex_intInvar_int(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_longIndex_longInvar_int\", () -> {\n-            return testLongLoop_longIndex_longInvar_int(copy(a), 0);\n-        });\n-        tests.put(\"testLongLoop_intIndex_intInvar_int\", () -> {\n-            return testLongLoop_intIndex_intInvar_int(copy(a), 0);\n-        });\n+        tests.put(\"testMemorySegmentBadExitCheck\",                 () -> testMemorySegmentBadExitCheck(copy(a)));\n+        tests.put(\"testIntLoop_iv_byte\",                           () -> testIntLoop_iv_byte(copy(a)));\n+        tests.put(\"testIntLoop_longIndex_intInvar_sameAdr_byte\",   () -> testIntLoop_longIndex_intInvar_sameAdr_byte(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_longInvar_sameAdr_byte\",  () -> testIntLoop_longIndex_longInvar_sameAdr_byte(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_intInvar_byte\",           () -> testIntLoop_longIndex_intInvar_byte(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_longInvar_byte\",          () -> testIntLoop_longIndex_longInvar_byte(copy(a), 0));\n+        tests.put(\"testIntLoop_intIndex_intInvar_byte\",            () -> testIntLoop_intIndex_intInvar_byte(copy(a), 0));\n+        tests.put(\"testIntLoop_iv_int\",                            () -> testIntLoop_iv_int(copy(a)));\n+        tests.put(\"testIntLoop_longIndex_intInvar_sameAdr_int\",    () -> testIntLoop_longIndex_intInvar_sameAdr_int(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_longInvar_sameAdr_int\",   () -> testIntLoop_longIndex_longInvar_sameAdr_int(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_intInvar_int\",            () -> testIntLoop_longIndex_intInvar_int(copy(a), 0));\n+        tests.put(\"testIntLoop_longIndex_longInvar_int\",           () -> testIntLoop_longIndex_longInvar_int(copy(a), 0));\n+        tests.put(\"testIntLoop_intIndex_intInvar_int\",             () -> testIntLoop_intIndex_intInvar_int(copy(a), 0));\n+        tests.put(\"testLongLoop_iv_byte\",                          () -> testLongLoop_iv_byte(copy(a)));\n+        tests.put(\"testLongLoop_longIndex_intInvar_sameAdr_byte\",  () -> testLongLoop_longIndex_intInvar_sameAdr_byte(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_longInvar_sameAdr_byte\", () -> testLongLoop_longIndex_longInvar_sameAdr_byte(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_intInvar_byte\",          () -> testLongLoop_longIndex_intInvar_byte(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_longInvar_byte\",         () -> testLongLoop_longIndex_longInvar_byte(copy(a), 0));\n+        tests.put(\"testLongLoop_intIndex_intInvar_byte\",           () -> testLongLoop_intIndex_intInvar_byte(copy(a), 0));\n+        tests.put(\"testLongLoop_iv_int\",                           () -> testLongLoop_iv_int(copy(a)));\n+        tests.put(\"testLongLoop_longIndex_intInvar_sameAdr_int\",   () -> testLongLoop_longIndex_intInvar_sameAdr_int(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_longInvar_sameAdr_int\",  () -> testLongLoop_longIndex_longInvar_sameAdr_int(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_intInvar_int\",           () -> testLongLoop_longIndex_intInvar_int(copy(a), 0));\n+        tests.put(\"testLongLoop_longIndex_longInvar_int\",          () -> testLongLoop_longIndex_longInvar_int(copy(a), 0));\n+        tests.put(\"testLongLoop_intIndex_intInvar_int\",            () -> testLongLoop_intIndex_intInvar_int(copy(a), 0));\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMemorySegment.java","additions":51,"deletions":101,"binary":false,"changes":152,"status":"modified"}]}