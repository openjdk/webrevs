{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -314,1 +315,1 @@\n-                ProtocolVersion.valueOf(Short.toUnsignedInt(buf.getShort()));\n+                ProtocolVersion.valueOf(Record.getInt16(buf));\n@@ -321,1 +322,1 @@\n-                CipherSuite.valueOf(Short.toUnsignedInt(buf.getShort()));\n+                CipherSuite.valueOf(Record.getInt16(buf));\n@@ -325,1 +326,1 @@\n-        int i = Byte.toUnsignedInt(buf.get());\n+        int i = Record.getInt8(buf);\n@@ -328,1 +329,1 @@\n-                    Short.toUnsignedInt(buf.getShort())));\n+                    Record.getInt16(buf)));\n@@ -333,1 +334,1 @@\n-        i = Byte.toUnsignedInt(buf.get());\n+        i = Record.getInt8(buf);\n@@ -337,1 +338,1 @@\n-                    Short.toUnsignedInt(buf.getShort())));\n+                    Record.getInt16(buf)));\n@@ -342,11 +343,3 @@\n-        byte[] b;\n-        i = Short.toUnsignedInt(buf.getShort());\n-        if (i > 0) {\n-            b = new byte[i];\n-            \/\/ Get algorithm string\n-            buf.get(b, 0, i);\n-            \/\/ Encoded length\n-            i = Short.toUnsignedInt(buf.getShort());\n-            \/\/ Encoded SecretKey\n-            b = new byte[i];\n-            buf.get(b);\n+        byte[] b = Record.getBytes16(buf);\n+        if (b.length > 0) {\n+            b = Record.getBytes16(buf);\n@@ -359,4 +352,2 @@\n-        i = Byte.toUnsignedInt(buf.get());\n-        if (i > 0) {\n-            b = new byte[i];\n-            buf.get(b);\n+        b = Record.getBytes8(buf);\n+        if (b.length > 0) {\n@@ -369,10 +360,3 @@\n-        i = buf.get();\n-        if (i > 0) {\n-            b = new byte[i];\n-            \/\/ Get algorithm string\n-            buf.get(b, 0, i);\n-            \/\/ Encoded length\n-            i = Short.toUnsignedInt(buf.getShort());\n-            \/\/ Encoded SecretKey\n-            b = new byte[i];\n-            buf.get(b);\n+        b = Record.getBytes8(buf);\n+        if (b.length > 0) {\n+            b = Record.getBytes16(buf);\n@@ -383,0 +367,1 @@\n+\n@@ -384,1 +369,1 @@\n-        this.useExtendedMasterSecret = (buf.get() != 0);\n+        this.useExtendedMasterSecret = (Record.getInt8(buf) != 0);\n@@ -387,2 +372,2 @@\n-        i = buf.get();\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -391,2 +376,0 @@\n-            b = new byte[i];\n-            buf.get(b);\n@@ -397,2 +380,2 @@\n-        i = Byte.toUnsignedInt(buf.get());  \/\/ length\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -401,2 +384,0 @@\n-            b = new byte[i];\n-            buf.get(b, 0, b.length);\n@@ -407,1 +388,1 @@\n-        int len = Short.toUnsignedInt(buf.getShort());\n+        int len = Record.getInt16(buf);\n@@ -413,3 +394,1 @@\n-                int l = Byte.toUnsignedInt(buf.get());\n-                b = new byte[l];\n-                buf.get(b, 0, l);\n+                b = Record.getBytes8(buf);\n@@ -420,1 +399,0 @@\n-\n@@ -430,1 +408,1 @@\n-        len = Short.toUnsignedInt(buf.getShort());\n+        len = Record.getInt16(buf);\n@@ -437,2 +415,1 @@\n-            b = new byte[Short.toUnsignedInt(buf.getShort())];\n-            buf.get(b);\n+            b = Record.getBytes16(buf);\n@@ -443,2 +420,2 @@\n-        i = Byte.toUnsignedInt(buf.get());\n-        if (i == 0) {\n+        b = Record.getBytes8(buf);\n+        if (b.length == 0) {\n@@ -447,2 +424,0 @@\n-            b = new byte[i];\n-            buf.get(b, 0, i);\n@@ -451,1 +426,1 @@\n-        this.port = Short.toUnsignedInt(buf.getShort());\n+        this.port = Record.getInt16(buf);\n@@ -454,1 +429,1 @@\n-        i = buf.get();\n+        i = Record.getInt8(buf);\n@@ -473,1 +448,1 @@\n-        switch (buf.get()) {\n+        switch (Record.getInt8(buf)) {\n@@ -495,3 +470,1 @@\n-                i = buf.get();\n-                b = new byte[i];\n-                buf.get(b, 0, i);\n+                b = Record.getBytes8(buf);\n@@ -499,2 +472,0 @@\n-                \/\/ Get length of encoding\n-                i = Short.toUnsignedInt(buf.getShort());\n@@ -502,2 +473,1 @@\n-                b = new byte[i];\n-                buf.get(b);\n+                b = Record.getBytes16(buf);\n@@ -506,1 +476,1 @@\n-                i = buf.get();\n+                i = Record.getInt8(buf);\n@@ -508,2 +478,1 @@\n-                    this.pskIdentity = new byte[buf.get()];\n-                    buf.get(pskIdentity);\n+                    this.pskIdentity = Record.getBytes8(buf);\n@@ -523,0 +492,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":35,"deletions":65,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run main\/othervm ResumeClientTLS12withSNI\n+ * @modules java.base\/sun.security.tools.keytool\n+ * @run main\/othervm -Djavax.net.debug=all ResumeClientTLS12withSNI\n@@ -35,0 +36,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -44,12 +47,1 @@\n-    private static final boolean logging = false;\n-\n-    \/*\n-     * Enables the JSSE system debugging system property:\n-     *\n-     *     -Djavax.net.debug=ssl:handshake\n-     *\n-     * This gives a lot of low-level information about operations underway,\n-     * including specific handshake messages, and might be best examined\n-     * after gaining some familiarity with this application.\n-     *\/\n-    private static final boolean debug = true;\n+    private static final boolean logging = true;\n@@ -73,3 +65,0 @@\n-\n-    private byte[] previousSessionId;\n-\n@@ -80,2 +69,2 @@\n-    private static final String keyStoreFile = \"keystore_san.p12\";\n-    private static final String trustStoreFile = \"keystore_san.p12\";\n+    private static final String keyStoreFile = \"ks_san.p12\";\n+    private static final String trustStoreFile = \"ks_san.p12\";\n@@ -91,1 +80,0 @@\n-    private static final SNIHostName SNI_NAME = new SNIHostName(HOST_NAME);\n@@ -98,4 +86,10 @@\n-        if (debug) {\n-            System.setProperty(\"javax.net.debug\", \"ssl\");\n-        }\n-\n+        Files.deleteIfExists(Path.of(keyFilename));\n+\n+        sun.security.tools.keytool.Main.main(\n+                (\"-keystore \" + keyFilename + \" -storepass 123456 -keypass 123456 -dname\"\n+                 + \" CN=test\" + \" -alias ks_san -genkeypair -keyalg rsa -ext \"\n+                 + \"san=dns:localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.\"\n+                 + \"localhost123.localhost123.localhost123.localhost123.localhost123.com,\"\n+                 + \"dns:localhost456\").split(\" \"));\n@@ -106,0 +100,2 @@\n+\n+        Files.deleteIfExists(Path.of(keyFilename));\n@@ -186,4 +182,0 @@\n-            if (clientResult.getHandshakeStatus() == HandshakeStatus.FINISHED) {\n-                this.verifySessionResumption(this.previousSessionId, clientEngine);\n-                this.previousSessionId = clientEngine.getSession().getId();\n-            }\n@@ -203,4 +195,0 @@\n-            if (clientResult.getHandshakeStatus() == HandshakeStatus.FINISHED) {\n-                this.verifySessionResumption(this.previousSessionId, clientEngine);\n-                this.previousSessionId = clientEngine.getSession().getId();\n-            }\n@@ -265,1 +253,1 @@\n-        clientEngine = sslc.createSSLEngine(\"client\", 80);\n+        clientEngine = sslc.createSSLEngine(HOST_NAME, 80);\n@@ -268,1 +256,0 @@\n-        cliSSLParams.setServerNames(List.of(SNI_NAME));\n@@ -380,15 +367,0 @@\n-\n-    private void verifySessionResumption(final byte[] expected, final SSLEngine engine) {\n-        if (expected == null) {\n-            \/\/ we haven't yet created a session previously, so there isn't any\n-            \/\/ session to be expected to resume\n-            return;\n-        }\n-        final byte[] sessionId = engine.getSession().getId();\n-        \/\/ compare and verify if they are same\n-        if (Arrays.equals(expected, sessionId)) {\n-            System.out.println(this.sslc.getProvider().getName() + \" \" + this.sslc.getProtocol() + \" - Session resumption SUCCEEDED\");\n-        } else {\n-            System.out.println(this.sslc.getProvider().getName() + \" \" + this.sslc.getProtocol() + \" - Session resumption FAILED\");\n-        }\n-    }\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/ResumeClientTLS12withSNI.java","additions":20,"deletions":48,"binary":false,"changes":68,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/keystore_san.p12","binary":true,"status":"deleted"}]}