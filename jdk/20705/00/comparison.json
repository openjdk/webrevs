{"files":[{"patch":"@@ -786,0 +786,12 @@\n+\n+    static String concat(String prefix, String value, String suffix) {\n+        if (prefix == null) prefix = \"null\";\n+        if (value  == null) value  = \"null\";\n+        if (suffix == null) suffix = \"null\";\n+\n+        byte coder = (byte) (prefix.coder() | value.coder() | suffix.coder());\n+        int len = prefix.length() + value.length();\n+        byte[] buf = newArrayWithSuffix(suffix, len, coder);\n+        prepend(len, coder, buf, value, prefix);\n+        return new String(buf, coder);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2642,0 +2642,4 @@\n+            public String concat(String prefix, String value, String suffix) {\n+                return StringConcatHelper.concat(prefix, value, suffix);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import static jdk.internal.constant.ConstantUtils.concat;\n@@ -86,1 +87,1 @@\n-        return ClassDesc.ofDescriptor(\"L\" + binaryToInternal(name) + \";\");\n+        return ClassDesc.ofDescriptor(concat(\"L\", binaryToInternal(name), \";\"));\n@@ -112,1 +113,1 @@\n-        return ClassDesc.ofDescriptor(\"L\" + name + \";\");\n+        return ClassDesc.ofDescriptor(concat(\"L\", name, \";\"));\n@@ -135,2 +136,2 @@\n-        return ofDescriptor(\"L\" + binaryToInternal(packageName) +\n-                \"\/\" + className + \";\");\n+        return ofDescriptor('L' + binaryToInternal(packageName) +\n+                '\/' + className + ';');\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        this.className = CLASS_PREFIX + name;\n+        this.className = CLASS_PREFIX.concat(name);\n@@ -183,5 +183,10 @@\n-        String sfx = ctr.toString();\n-        while (sfx.length() < 3)\n-            sfx = \"0\" + sfx;\n-        className += sfx;\n-        return className;\n+\n+        var buf = new StringBuilder(className.length() + 3).append(className);\n+        int ctrVal = ctr;\n+        if (ctrVal < 10) {\n+            buf.repeat('0', 2);\n+        } else if (ctrVal < 100) {\n+            buf.append('0');\n+        }\n+        buf.append(ctrVal);\n+        return buf.toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -456,0 +456,5 @@\n+    \/**\n+     * Concatenation of prefix and suffix characters to a String for early bootstrap\n+     *\/\n+    String concat(String prefix, String value, String suffix);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -44,0 +46,2 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n@@ -69,1 +73,1 @@\n-        return ReferenceClassDescImpl.ofValidated(\"L\" + binaryToInternal(binaryName) + \";\");\n+        return ReferenceClassDescImpl.ofValidated(concat(\"L\", binaryToInternal(binaryName), \";\"));\n@@ -381,0 +385,4 @@\n+\n+    public static String concat(String prefix, String value, String suffix) {\n+        return JLA.concat(prefix, value, suffix);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}