{"files":[{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.reflect.Method;\n@@ -37,0 +38,4 @@\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n@@ -51,0 +56,1 @@\n+@ExtendWith(IO.TimingExtension.class)\n@@ -65,0 +71,5 @@\n+            try {\n+                var outputAnalyzer = ProcessTools.executeProcess(\n+                        expect.toAbsolutePath().toString(), \"-version\");\n+                outputAnalyzer.reportDiagnosticSummary();\n+            } catch (Exception _) { }\n@@ -177,0 +188,36 @@\n+\n+\n+    \/\/ adapted from https:\/\/raw.githubusercontent.com\/junit-team\/junit5\/main\/documentation\/src\/test\/java\/example\/timing\/TimingExtension.java\n+\n+    public static class TimingExtension implements BeforeTestExecutionCallback,\n+            AfterTestExecutionCallback {\n+\n+        private static final System.Logger logger = System.getLogger(\n+                TimingExtension.class.getName());\n+\n+        private static final String START_TIME = \"start time\";\n+\n+        @Override\n+        public void beforeTestExecution(ExtensionContext context) {\n+            getStore(context).put(START_TIME, time());\n+        }\n+\n+        @Override\n+        public void afterTestExecution(ExtensionContext context) {\n+            Method testMethod = context.getRequiredTestMethod();\n+            long startTime = getStore(context).remove(START_TIME, long.class);\n+            long duration = time() - startTime;\n+\n+            logger.log(System.Logger.Level.INFO, () ->\n+                    String.format(\"Method [%s] took %s ms.\", testMethod.getName(), duration));\n+        }\n+\n+        private ExtensionContext.Store getStore(ExtensionContext context) {\n+            return context.getStore(ExtensionContext.Namespace.create(getClass(),\n+                    context.getRequiredTestMethod()));\n+        }\n+\n+        private long time() {\n+            return System.nanoTime() \/ 1_000_000;\n+        }\n+    }\n","filename":"test\/jdk\/java\/io\/IO\/IO.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+set timeout 20\n@@ -33,1 +34,2 @@\n-        puts \"timeout\"; exit 1\n+        puts \"timeout\"\n+        exit 1\n","filename":"test\/jdk\/java\/io\/IO\/input.exp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,3 +24,1 @@\n-################################################################################\n-# This script does not expect\/verify anything and is only used to simulate tty #\n-################################################################################\n+# This script doesn't verify any output strings, it's only used to simulate tty\n@@ -28,1 +26,4 @@\n-# Use `noecho` below, otherwise, expect will output the expanded \"spawn ...\"\n+set stty_init \"rows 24 cols 80\"\n+set timeout 20\n+\n+# Use `-noecho` below, otherwise, expect will output the expanded \"spawn ...\"\n@@ -30,0 +31,1 @@\n+# counterpart\n@@ -32,1 +34,10 @@\n-expect eof\n+\n+expect {\n+    eof {\n+        exit 0\n+    }\n+    timeout {\n+        puts \"timeout\"\n+        exit 1\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/IO\/output.exp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}