{"files":[{"patch":"@@ -32,4 +32,1 @@\n- * @library \/\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm\/native -agentlib:agent8339725 Test8339725\n+ * @run main\/othervm\/timeout=300 Test8339725\n@@ -43,0 +40,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -44,0 +42,3 @@\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n@@ -52,2 +53,5 @@\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-agentpath:\" + Utils.TEST_NATIVE_PATH + File.separator + System.mapLibraryName(\"agent8339725\"), \"-Xmx100m\", gcArg, \"Test\");\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+            \"-agentpath:\" + Utils.TEST_NATIVE_PATH + File.separator + System.mapLibraryName(\"agent8339725\"),\n+            \"-Xmx50m\",\n+            gcArg,\n+            \"Test\");\n@@ -63,1 +67,1 @@\n-        for (int i = 0;; i++) {\n+        for (;;) {\n@@ -65,2 +69,4 @@\n-            Class<?> k = loader.findClass(\"TemplateFFFFFFFF\");\n-            Object o = k.getDeclaredConstructor().newInstance();\n+            Class<?> k = loader.findClass(\"MyClass\");\n+            Constructor<?> c = k.getDeclaredConstructor();\n+            c.setAccessible(true);\n+            c.newInstance();\n@@ -78,0 +84,17 @@\n+    static byte[] BYTES;\n+\n+    static {\n+        try (InputStream in = CustomClassLoader.class.getResourceAsStream(\"MyClass.class\")) {\n+            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+                byte[] buf = new byte[4096];\n+                int len;\n+                while ((len = in.read(buf)) != -1) {\n+                    baos.write(buf, 0, len);\n+                }\n+                BYTES = baos.toByteArray();\n+            }\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n@@ -80,7 +103,1 @@\n-        byte[] b = Base64.getDecoder()\n-                .decode(\"yv66vgAAADQADgoAAwALBwAMBwANAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJU\" +\n-                        \"YWJsZQEAEmRvVGVtcGxhdGVGRkZGRkZGRgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZUZGRkZGRkZG\" +\n-                        \"LmphdmEMAAQABQEAEFRlbXBsYXRlRkZGRkZGRkYBABBqYXZhL2xhbmcvT2JqZWN0ACEAAgADAAAA\" +\n-                        \"AAACAAEABAAFAAEABgAAAB0AAQABAAAABSq3AAGxAAAAAQAHAAAABgABAAAAAQABAAgABQABAAYA\" +\n-                        \"AAAZAAAAAQAAAAGxAAAAAQAHAAAABgABAAAAAwABAAkAAAACAAo=\");\n-        return defineClass(name, b, 0, b.length);\n+        return defineClass(name, BYTES, 0, BYTES.length);\n@@ -89,0 +106,3 @@\n+\n+class MyClass {\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/8339725\/Test8339725.java","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-static jvmtiEnv *jvmti;\n+static jvmtiEnv *_jvmti;\n@@ -33,1 +33,0 @@\n-static JNIEnv *_rb_env;\n@@ -38,1 +37,0 @@\n-static int reader_created = 0;\n@@ -40,15 +38,6 @@\n-void *get_method_details(void *arg)\n-{\n-    jmethodID method = (jmethodID)arg;\n-\n-    jclass method_class;\n-    char *class_name = NULL;\n-\n-    jvmtiError err = JVMTI_ERROR_NONE;\n-\n-    \/\/ For JVM 17, 21, 22 calling GetMethodDeclaringClass is enough.\n-    if ((err = jvmti->GetMethodDeclaringClass(method, &method_class)) == 0)\n-    {\n-        \/\/ JVM 8 needs this to crash\n-        jvmti->GetClassSignature(method_class, &class_name, NULL);\n-        jvmti->Deallocate((unsigned char *)class_name);\n+void get_method_details(jmethodID method) {\n+  jclass method_class;\n+  char *class_name = NULL;\n+  if (_jvmti->GetMethodDeclaringClass(method, &method_class) == JVMTI_ERROR_NONE) {\n+    if (_jvmti->GetClassSignature(method_class, &class_name, NULL) == JVMTI_ERROR_NONE) {\n+      _jvmti->Deallocate((unsigned char *)class_name);\n@@ -56,1 +45,1 @@\n-    return NULL;\n+  }\n@@ -59,13 +48,7 @@\n-void *read_ringbuffer(void *arg)\n-{\n-    JNIEnv *env;\n-    _jvm->AttachCurrentThread((void **)&env, NULL);\n-    _rb_env = env;\n-\n-    for (;;)\n-    {\n-        size_t id = ring_buffer[rand() % BUFFER_SIZE];\n-        if (id > 0)\n-        {\n-            get_method_details((void *)id);\n-        }\n+void* read_ringbuffer(void* arg) {\n+  JNIEnv *env;\n+  _jvm->AttachCurrentThreadAsDaemon((void **)&env, NULL);\n+  for (;;) {\n+    size_t id = ring_buffer[rand() % BUFFER_SIZE];\n+    if (id > 0) {\n+      get_method_details((jmethodID)id);\n@@ -73,1 +56,2 @@\n-    return NULL;\n+  }\n+  return NULL;\n@@ -79,22 +63,27 @@\n-                                         jclass klass)\n-{\n-    if (reader_created == 0)\n-    {\n-        pthread_t tid;\n-        pthread_create(&tid, NULL, read_ringbuffer, NULL);\n-\n-        reader_created = 1;\n-    }\n-\n-    \/\/ Get the list of methods\n-    jint method_count;\n-    jmethodID *methods;\n-    if (jvmti_env->GetClassMethods(klass, &method_count, &methods) == JVMTI_ERROR_NONE)\n-    {\n-        for (int i = 0; i < method_count; i++)\n-        {\n-            ring_buffer[ring_buffer_idx++] = (size_t)methods[i];\n-            ring_buffer_idx = ring_buffer_idx % BUFFER_SIZE;\n-        }\n-        jvmti_env->Deallocate((unsigned char *)methods);\n-    }\n+                                         jclass klass) {\n+  static bool reader_created = false;\n+\n+  char *class_name = NULL;\n+  if (jvmti_env->GetClassSignature(klass, &class_name, NULL) != JVMTI_ERROR_NONE) {\n+    return;\n+  }\n+  \/\/ We only care MyClass and only one thread loads it\n+  bool is_my_class = strcmp(class_name, \"LMyClass;\") == 0;\n+  jvmti_env->Deallocate((unsigned char *)class_name);\n+  if (!is_my_class) {\n+    return;\n+  }\n+\n+  if (!reader_created) {\n+    pthread_t tid;\n+    pthread_create(&tid, NULL, read_ringbuffer, NULL);\n+    reader_created = true;\n+  }\n+\n+  jint method_count;\n+  jmethodID *methods;\n+  if (jvmti_env->GetClassMethods(klass, &method_count, &methods) == JVMTI_ERROR_NONE) {\n+    ring_buffer[ring_buffer_idx++] = (size_t)methods[0];\n+    ring_buffer_idx = ring_buffer_idx % BUFFER_SIZE;\n+    jvmti_env->Deallocate((unsigned char *)methods);\n+  }\n@@ -103,4 +92,3 @@\n-JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved)\n-{\n-    jvmtiEventCallbacks callbacks;\n-    jvmtiError error;\n+JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jvmtiEventCallbacks callbacks;\n+  jvmtiError error;\n@@ -108,1 +96,1 @@\n-    _jvm = jvm;\n+  _jvm = jvm;\n@@ -110,5 +98,4 @@\n-    if (jvm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_0) != JNI_OK)\n-    {\n-        fprintf(stderr, \"Unable to access JVMTI!\\n\");\n-        return JNI_ERR;\n-    }\n+  if (jvm->GetEnv((void **)&_jvmti, JVMTI_VERSION_1_0) != JNI_OK) {\n+    fprintf(stderr, \"Unable to access JVMTI!\\n\");\n+    return JNI_ERR;\n+  }\n@@ -116,3 +103,3 @@\n-    \/\/ Set up the event callbacks\n-    memset(&callbacks, 0, sizeof(callbacks));\n-    callbacks.ClassPrepare = &ClassPrepareCallback;\n+  \/\/ Set up the event callbacks\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.ClassPrepare = &ClassPrepareCallback;\n@@ -120,7 +107,6 @@\n-    \/\/ Register the callbacks\n-    error = jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks));\n-    if (error != JVMTI_ERROR_NONE)\n-    {\n-        fprintf(stderr, \"Error setting event callbacks: %d\\n\", error);\n-        return JNI_ERR;\n-    }\n+  \/\/ Register the callbacks\n+  error = _jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks));\n+  if (error != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"Error setting event callbacks: %d\\n\", error);\n+    return JNI_ERR;\n+  }\n@@ -128,7 +114,6 @@\n-    \/\/ Enable the ClassPrepare event\n-    error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);\n-    if (error != JVMTI_ERROR_NONE)\n-    {\n-        fprintf(stderr, \"Error enabling ClassPrepare event: %d\\n\", error);\n-        return JNI_ERR;\n-    }\n+  \/\/ Enable the ClassPrepare event\n+  error = _jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);\n+  if (error != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"Error enabling ClassPrepare event: %d\\n\", error);\n+    return JNI_ERR;\n+  }\n@@ -136,1 +121,1 @@\n-    return JNI_OK;\n+  return JNI_OK;\n","filename":"test\/hotspot\/jtreg\/runtime\/8339725\/libagent8339725.cpp","additions":68,"deletions":83,"binary":false,"changes":151,"status":"modified"}]}