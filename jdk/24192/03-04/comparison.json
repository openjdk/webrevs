{"files":[{"patch":"@@ -26,2 +26,0 @@\n-import java.util.List;\n-import java.util.Map;\n@@ -31,1 +29,0 @@\n-import java.util.concurrent.RejectedExecutionException;\n@@ -33,8 +30,2 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.locks.LockSupport;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import jdk.jfr.EventType;\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.RecordedEvent;\n-import jdk.test.lib.Asserts;\n+import java.util.concurrent.CountDownLatch;\n+import jdk.jfr.consumer.RecordingStream;\n@@ -42,1 +33,0 @@\n-import jdk.test.lib.jfr.Events;\n@@ -83,0 +73,1 @@\n+    private static final int NUM_TASKS = 10_000;\n@@ -85,5 +76,8 @@\n-        try (Recording recording = new Recording()) {\n-            recording.enable(EventNames.VirtualThreadStart).withoutStackTrace();\n-            recording.enable(EventNames.VirtualThreadEnd).withoutStackTrace();\n-            recording.start();\n-            \/\/ execute 10_000 tasks, each in their own virtual thread\n+        CountDownLatch latch = new CountDownLatch(NUM_TASKS);\n+\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(EventNames.VirtualThreadStart).withoutStackTrace();\n+            rs.enable(EventNames.VirtualThreadEnd).withoutStackTrace();\n+            rs.onEvent(EventNames.VirtualThreadEnd, e -> latch.countDown());\n+            rs.startAsync();\n+            \/\/ Execute NUM_TASKS, each in their own virtual thread.\n@@ -92,1 +86,1 @@\n-                for (int i = 0; i < 10_000; i++) {\n+                for (int i = 0; i < NUM_TASKS; i++) {\n@@ -95,2 +89,0 @@\n-            } finally {\n-                recording.stop();\n@@ -98,8 +90,1 @@\n-\n-            Map<String, Integer> events = sumEvents(recording);\n-            System.err.println(events);\n-\n-            int startCount = events.getOrDefault(EventNames.VirtualThreadStart, 0);\n-            int endCount = events.getOrDefault(EventNames.VirtualThreadEnd, 0);\n-            Asserts.assertEquals(10_000, startCount, \"Expected 10000, got \" + startCount);\n-            Asserts.assertEquals(10_000, endCount, \"Expected 10000, got \" + endCount);\n+            latch.await();\n@@ -108,6 +93,0 @@\n-\n-    private static Map<String, Integer> sumEvents(Recording recording) throws Exception {\n-        List<RecordedEvent> events = Events.fromRecording(recording);\n-        return events.stream().map(RecordedEvent::getEventType)\n-                               .collect(Collectors.groupingBy(EventType::getName, Collectors.summingInt(x -> 1)));\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestJvmCommitIntrinsicAndEA.java","additions":13,"deletions":34,"binary":false,"changes":47,"status":"modified"}]}