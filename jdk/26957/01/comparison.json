{"files":[{"patch":"@@ -165,2 +165,2 @@\n-    if (log_is_enabled(Warning, jfr, startup))  {\n-      \/\/ if warning is set, assume user hasn't configured log level\n+    if (log_is_default(jfr, startup))  {\n+      \/\/ The user hasn't configured a log level\n@@ -168,1 +168,1 @@\n-      \/\/ default output by setting -Xlog:jfr+startup=error\/off\n+      \/\/ default output by setting -Xlog:jfr+startup=error\/warning\/off\n@@ -171,1 +171,1 @@\n-      LogConfiguration::configure_stdout(LogLevel::Warning, true, LOG_TAGS(jfr, startup));\n+      LogConfiguration::reset_stdout(true, LOG_TAGS(jfr, startup));\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+#define log_is_default(...) (!LogImpl<LOG_TAGS(__VA_ARGS__)>::is_output_level_configured_by_user())\n@@ -125,0 +126,4 @@\n+  static bool is_output_level_configured_by_user() {\n+    return LogTagSetMapping<T0, T1, T2, T3, T4>::tagset().is_output_level_configured_by_user();\n+  }\n+\n","filename":"src\/hotspot\/share\/logging\/log.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"logging\/logLevel.hpp\"\n@@ -240,1 +241,1 @@\n-void LogConfiguration::configure_output(size_t idx, const LogSelectionList& selections, const LogDecorators& decorators) {\n+void LogConfiguration::configure_output(size_t idx, const LogSelectionList& selections, const LogDecorators& decorators, bool is_user_provided) {\n@@ -268,0 +269,5 @@\n+      if (is_user_provided) {\n+        ts->set_output_level_configured_by_user();\n+      } else {\n+        ts->set_output_level_not_configured_by_user();\n+      }\n@@ -368,1 +374,1 @@\n-    configure_output(i, list, _outputs[i]->decorators());\n+    configure_output(i, list, _outputs[i]->decorators(), true);\n@@ -381,1 +387,13 @@\n-  configure_output(0, list, _outputs[0]->decorators());\n+  configure_output(0, list, _outputs[0]->decorators(), true);\n+  notify_update_listeners();\n+}\n+\n+void LogConfiguration::reset_stdout(int exact_match, ...) {\n+  va_list ap;\n+  va_start(ap, exact_match);\n+  LogSelectionList list = create_selection_list(LogLevel::Off, exact_match, ap);\n+  va_end(ap);\n+\n+  \/\/ Apply configuration to stdout (output #0), with the same decorators as before.\n+  ConfigurationLock cl;\n+  configure_output(0, list, _outputs[0]->decorators(), false);\n@@ -557,1 +575,1 @@\n-  configure_output(idx, selections, decorators);\n+  configure_output(idx, selections, decorators, true);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  static void configure_output(size_t idx, const LogSelectionList& tag_level_expression, const LogDecorators& decorators);\n+  static void configure_output(size_t idx, const LogSelectionList& tag_level_expression, const LogDecorators& decorators, bool is_user_provided);\n@@ -129,0 +129,3 @@\n+  \/\/ Configures logging on stdout for the given tags to be the default level, not specified by users\n+  static void reset_stdout(int exact_match, ...);\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  volatile bool _output_level_configured_by_user;\n@@ -69,1 +70,1 @@\n-  LogOutputList() : _active_readers(0) {\n+  LogOutputList() : _output_level_configured_by_user(false), _active_readers(0) {\n@@ -91,0 +92,12 @@\n+  void set_output_level_configured_by_user() {\n+    Atomic::release_store(&_output_level_configured_by_user, true);\n+  }\n+\n+  void set_output_level_not_configured_by_user() {\n+    Atomic::release_store(&_output_level_configured_by_user, false);\n+  }\n+\n+  bool is_output_level_configured_by_user() const {\n+    return Atomic::load_acquire(&_output_level_configured_by_user);\n+  }\n+\n","filename":"src\/hotspot\/share\/logging\/logOutputList.hpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -119,0 +119,12 @@\n+  void set_output_level_configured_by_user() {\n+    _output_list.set_output_level_configured_by_user();\n+  }\n+\n+  void set_output_level_not_configured_by_user() {\n+    _output_list.set_output_level_not_configured_by_user();\n+  }\n+\n+  bool is_output_level_configured_by_user() const {\n+    return _output_list.is_output_level_configured_by_user();\n+  }\n+\n","filename":"src\/hotspot\/share\/logging\/logTagSet.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+        System.err.println(\"Out: \" + pb.command());\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestMultipleStartupRecordings.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,2 +58,4 @@\n-         \/\/ Known limitation.\n-         \/\/ Can't turn off log with -Xlog:jfr+startup=warning\n+        startJfrJvm(\"-Xlog:jfr+startup=warning\")\n+             .shouldNotContain(\"[jfr,startup\")\n+             .shouldNotContain(\"Started recording\")\n+             .shouldNotContain(\"Use jcmd\");\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartupMessage.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}