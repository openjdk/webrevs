{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,1 +264,0 @@\n-            mechanism.freeHandle();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,8 +87,0 @@\n-    \/\/ pointer to native CK_MECHANISM structure\n-    \/\/ For mechanisms which have only mechanism id, the native structure\n-    \/\/ can be freed right after init and this field will not be used. However,\n-    \/\/ for mechanisms which have both mechanism id and parameters, it can\n-    \/\/ only be freed after operation is finished. Thus, the native pointer\n-    \/\/ will be stored here and then be explicitly freed by caller.\n-    private long pHandle = 0L;\n-\n@@ -183,1 +175,0 @@\n-        freeHandle();\n@@ -187,6 +178,0 @@\n-    public void freeHandle() {\n-        if (this.pHandle != 0L) {\n-            this.pHandle = PKCS11.freeMechanism(pHandle);\n-        }\n-    }\n-\n@@ -222,6 +207,0 @@\n-        if (pHandle != 0L) {\n-            sb.append(Constants.INDENT);\n-            sb.append(\"pHandle: \");\n-            sb.append(pHandle);\n-            sb.append(Constants.NEWLINE);\n-        }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/CK_MECHANISM.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,6 +103,0 @@\n-    \/* *****************************************************************************\n-     * Utility, Resource Clean up\n-     ******************************************************************************\/\n-    \/\/ always return 0L\n-    public static native long freeMechanism(long hMechanism);\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,0 @@\n-jfieldID mech_pHandleID;\n@@ -89,17 +88,0 @@\n-\/*\n- * This method is used to do free the memory allocated for CK_MECHANISM structure.\n- *\n- * Class:     sun_security_pkcs11_wrapper_PKCS11\n- * Method:    freeMechanism\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL\n-Java_sun_security_pkcs11_wrapper_PKCS11_freeMechanism\n-(JNIEnv *env, jclass thisClass, jlong ckpMechanism) {\n-    if (ckpMechanism != 0L) {\n-        freeCKMechanismPtr(jlong_to_ptr(ckpMechanism));\n-        TRACE1(\"DEBUG PKCS11_freeMechanism: free pMech = %lld\\n\", (long long int) ckpMechanism);\n-    }\n-    return 0L;\n-}\n-\n@@ -149,2 +131,0 @@\n-    mech_pHandleID = (*env)->GetFieldID(env, tmpClass, \"pHandle\", \"J\");\n-    if (mech_pHandleID == NULL) { return; }\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_general.c","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,7 +90,3 @@\n-    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK ||\n-            (ckpMechanism->pParameter == NULL)) {\n-        freeCKMechanismPtr(ckpMechanism);\n-    } else {\n-        (*env)->SetLongField(env, jMechanism, mech_pHandleID, ptr_to_jlong(ckpMechanism));\n-        TRACE1(\"DEBUG C_SignInit: stored pMech = 0x%lX\\n\", ptr_to_jlong(ckpMechanism));\n-    }\n+    TRACE1(\"DEBUG C_SignInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n@@ -313,7 +309,3 @@\n-    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK ||\n-            (ckpMechanism->pParameter == NULL)) {\n-        freeCKMechanismPtr(ckpMechanism);\n-    } else {\n-        (*env)->SetLongField(env, jMechanism, mech_pHandleID, ptr_to_jlong(ckpMechanism));\n-        TRACE1(\"DEBUG C_SignRecoverInit, stored pMech = 0x%lX\\n\", ptr_to_jlong(ckpMechanism));\n-    }\n+    TRACE1(\"DEBUG C_SignRecoverInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n@@ -423,7 +415,3 @@\n-    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK ||\n-            (ckpMechanism->pParameter == NULL)) {\n-        freeCKMechanismPtr(ckpMechanism);\n-    } else {\n-        (*env)->SetLongField(env, jMechanism, mech_pHandleID, ptr_to_jlong(ckpMechanism));\n-        TRACE1(\"DEBUG C_VerifyInit: stored pMech = 0x%lX\\n\", ptr_to_jlong(ckpMechanism));\n-    }\n+    TRACE1(\"DEBUG C_VerifyInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n@@ -611,7 +599,3 @@\n-    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK ||\n-            (ckpMechanism->pParameter == NULL)) {\n-        freeCKMechanismPtr(ckpMechanism);\n-    } else {\n-        (*env)->SetLongField(env, jMechanism, mech_pHandleID, ptr_to_jlong(ckpMechanism));\n-        TRACE1(\"DEBUG C_VerifyRecoverInit: stored pMech = 0x%lX\\n\", ptr_to_jlong(ckpMechanism));\n-    }\n+    TRACE1(\"DEBUG C_VerifyRecoverInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_sign.c","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -511,1 +511,0 @@\n-extern jfieldID mech_pHandleID;\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11wrapper.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}