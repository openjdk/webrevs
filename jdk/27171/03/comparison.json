{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -74,0 +75,2 @@\n+  ResourceMark rm;\n+\n@@ -237,30 +240,0 @@\n-\n-  \/\/ UseZvbb (depends on RVV).\n-  if (UseZvbb && !UseRVV) {\n-    warning(\"Cannot enable UseZvbb on cpu without RVV support.\");\n-    FLAG_SET_DEFAULT(UseZvbb, false);\n-  }\n-\n-  \/\/ UseZvbc (depends on RVV).\n-  if (UseZvbc && !UseRVV) {\n-    warning(\"Cannot enable UseZvbc on cpu without RVV support.\");\n-    FLAG_SET_DEFAULT(UseZvbc, false);\n-  }\n-\n-  \/\/ UseZvkn (depends on RVV).\n-  if (UseZvkn && !UseRVV) {\n-    warning(\"Cannot enable UseZvkn on cpu without RVV support.\");\n-    FLAG_SET_DEFAULT(UseZvkn, false);\n-  }\n-\n-  \/\/ UseZvfh (depends on RVV)\n-  if (UseZvfh) {\n-    if (!UseRVV) {\n-      warning(\"Cannot enable UseZvfh on cpu without RVV support.\");\n-      FLAG_SET_DEFAULT(UseZvfh, false);\n-    }\n-    if (!UseZfh) {\n-      warning(\"Cannot enable UseZvfh on cpu without Zfh support.\");\n-      FLAG_SET_DEFAULT(UseZvfh, false);\n-    }\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -73,0 +73,43 @@\n+\n+   protected:\n+    bool deps_all_enabled(RVFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVFeatureValue* next = dep0;\n+      bool enabled = true;\n+      while (next != nullptr && enabled) {\n+        enabled = next->enabled();\n+        next = va_arg(va, RVFeatureValue*);\n+      }\n+      va_end(va);\n+      return enabled;\n+    }\n+\n+    void deps_string(stringStream& ss, RVFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+      ss.print(\"%s (%s)\", dep0->pretty(), dep0->enabled() ? \"enabled\" : \"disabled\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVFeatureValue* next = nullptr;\n+      while ((next = va_arg(va, RVFeatureValue*)) != nullptr) {\n+        ss.print(\", %s (%s)\", next->pretty(), next->enabled() ? \"enabled\" : \"disabled\");\n+      }\n+      va_end(va);\n+    }\n+\n+    void verify_deps(RVFeatureValue* dep0, ...) {\n+      assert(dep0 != nullptr, \"must not\");\n+\n+      va_list va;\n+      va_start(va, dep0);\n+      RVFeatureValue* next = dep0;\n+      while (next != nullptr) {\n+        \/\/ The dependant must be declared before this.\n+        assert((uintptr_t)(this) > (uintptr_t)(next), \"Invalid\");\n+        next = va_arg(va, RVFeatureValue*);\n+      }\n+      va_end(va);\n+    }\n@@ -88,21 +131,28 @@\n-  #define UPDATE_DEFAULT_DEP(flag, dep)      \\\n-  void update_flag() {                       \\\n-      assert(enabled(), \"Must be.\");         \\\n-      \/* dep must be declared before *\/      \\\n-      assert((uintptr_t)(this) >             \\\n-             (uintptr_t)(&dep), \"Invalid\");  \\\n-      if (FLAG_IS_DEFAULT(flag)) {           \\\n-        if (dep.enabled()) {                 \\\n-          FLAG_SET_DEFAULT(flag, true);      \\\n-        } else {                             \\\n-          FLAG_SET_DEFAULT(flag, false);     \\\n-          \/* Sync CPU features with flags *\/ \\\n-          disable_feature();                 \\\n-        }                                    \\\n-      } else {                               \\\n-        \/* Sync CPU features with flags *\/   \\\n-        if (!flag) {                         \\\n-          disable_feature();                 \\\n-        }                                    \\\n-      }                                      \\\n-  }                                          \\\n+  #define UPDATE_DEFAULT_DEP(flag, dep0, ...)                                                               \\\n+  void update_flag() {                                                                                      \\\n+      assert(enabled(), \"Must be.\");                                                                        \\\n+      if (FLAG_IS_DEFAULT(flag)) {                                                                          \\\n+        if (this->deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                  \\\n+          FLAG_SET_DEFAULT(flag, true);                                                                     \\\n+        } else {                                                                                            \\\n+          FLAG_SET_DEFAULT(flag, false);                                                                    \\\n+          stringStream ss;                                                                                  \\\n+          deps_string(ss, dep0, ##__VA_ARGS__);                                                             \\\n+          warning(\"Cannot enable \" #flag \" on cpu without any of the supports: %s\", ss.as_string(true));    \\\n+          \/* Sync CPU features with flags *\/                                                                \\\n+          disable_feature();                                                                                \\\n+        }                                                                                                   \\\n+      } else {                                                                                              \\\n+        \/* Sync CPU features with flags *\/                                                                  \\\n+        if (!flag) {                                                                                        \\\n+          disable_feature();                                                                                \\\n+        } else if (!deps_all_enabled(dep0, ##__VA_ARGS__)) {                                                \\\n+          FLAG_SET_DEFAULT(flag, false);                                                                    \\\n+          stringStream ss;                                                                                  \\\n+          deps_string(ss, dep0, ##__VA_ARGS__);                                                             \\\n+          warning(\"Cannot enable \" #flag \" on cpu without any of the supports: %s\", ss.as_string(true));    \\\n+          \/* Sync CPU features with flags *\/                                                                \\\n+          disable_feature();                                                                                \\\n+        }                                                                                                   \\\n+      }                                                                                                     \\\n+  }                                                                                                         \\\n@@ -205,34 +255,34 @@\n-  #define RV_EXT_FEATURE_FLAGS(decl)                                                                   \\\n-  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_A            ,  a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_C            ,  c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))             \\\n-  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_H            ,  h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_V            ,  v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))             \\\n-  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))          \\\n-  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))          \\\n-  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))          \\\n-  decl(ext_Zba          ,  Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))             \\\n-  decl(ext_Zbb          ,  Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))             \\\n-  decl(ext_Zbc          ,  Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))             \\\n-  decl(ext_Zbkb         ,  Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))            \\\n-  decl(ext_Zcb          ,  Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))             \\\n-  decl(ext_Zfa          ,  Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))             \\\n-  decl(ext_Zfh          ,  Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))             \\\n-  decl(ext_Zfhmin       ,  Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))          \\\n-  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zicntr       ,  Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zic64b       ,  Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))          \\\n-  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))            \\\n-  decl(ext_Zihintpause  ,  Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))     \\\n-  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))           \\\n-  decl(ext_Zvbb         ,  Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n-  decl(ext_Zvbc         ,  Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n-  decl(ext_Zvfh         ,  Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n-  decl(ext_Zvkn         ,  Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n-  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))          \\\n+  #define RV_EXT_FEATURE_FLAGS(decl)                                                                                       \\\n+  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_A            ,  a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_C            ,  c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))                                 \\\n+  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_H            ,  h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_V            ,  v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))                                 \\\n+  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))                              \\\n+  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))                              \\\n+  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))                              \\\n+  decl(ext_Zba          ,  Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))                                 \\\n+  decl(ext_Zbb          ,  Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))                                 \\\n+  decl(ext_Zbc          ,  Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))                                 \\\n+  decl(ext_Zbkb         ,  Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))                                \\\n+  decl(ext_Zcb          ,  Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))                                 \\\n+  decl(ext_Zfa          ,  Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))                                 \\\n+  decl(ext_Zfh          ,  Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))                                 \\\n+  decl(ext_Zfhmin       ,  Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))                              \\\n+  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_Zicntr       ,  Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                                      \\\n+  decl(ext_Zic64b       ,  Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))                              \\\n+  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))                                \\\n+  decl(ext_Zihintpause  ,  Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))                         \\\n+  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))                               \\\n+  decl(ext_Zvbb         ,  Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, &ext_V, nullptr))           \\\n+  decl(ext_Zvbc         ,  Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, &ext_V, nullptr))           \\\n+  decl(ext_Zvfh         ,  Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, &ext_V, &ext_Zfh, nullptr)) \\\n+  decl(ext_Zvkn         ,  Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, &ext_V, nullptr))           \\\n+  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))                              \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":105,"deletions":55,"binary":false,"changes":160,"status":"modified"}]}