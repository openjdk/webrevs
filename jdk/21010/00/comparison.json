{"files":[{"patch":"@@ -252,0 +252,5 @@\n+\/\/ The goal is to sort the objects in increasing order of:\n+\/\/ - objects that have only oop pointers\n+\/\/ - objects that have both native and oop pointers\n+\/\/ - objects that have only native pointers\n+\/\/ - objects that have no pointers\n@@ -256,1 +261,1 @@\n-  if (!has_oop_ptr) {\n+  if (has_oop_ptr) {\n@@ -271,5 +276,0 @@\n-\/\/ The goal is to sort the objects in increasing order of:\n-\/\/ - objects that have no pointers\n-\/\/ - objects that have only native pointers\n-\/\/ - objects that have both native and oop pointers\n-\/\/ - objects that have only oop pointers\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1584,5 +1584,6 @@\n-\/\/ The start of the archived heap has many primitive arrays (String\n-\/\/ bodies) that are not marked by the oop\/ptr maps. So we must have\n-\/\/ lots of leading zeros.\n-size_t FileMapInfo::remove_bitmap_leading_zeros(CHeapBitMap* map) {\n-  size_t old_zeros = map->find_first_set_bit(0);\n+\/\/ The sorting code groups the objects with non-null oop\/ptrs together.\n+\/\/ Relevant bitmaps then have lots of leading and trailing zeros, which\n+\/\/ we do not have to store.\n+size_t FileMapInfo::remove_bitmap_zeros(CHeapBitMap* map) {\n+  BitMap::idx_t first_set = map->find_first_set_bit(0);\n+  BitMap::idx_t last_set  = map->find_last_set_bit(0);\n@@ -1592,1 +1593,1 @@\n-  map->truncate(old_zeros, map->size());\n+  map->truncate(first_set, last_set + 1);\n@@ -1594,4 +1595,11 @@\n-  DEBUG_ONLY(\n-    size_t new_zeros = map->find_first_set_bit(0);\n-    assert(new_zeros == 0, \"Should have removed leading zeros\");\n-  )\n+  log_info(cds, map)(\"Truncated bitmap \" PTR_FORMAT \" \" SIZE_FORMAT \" -> \" SIZE_FORMAT,\n+                     p2i(map), old_size, last_set - first_set);\n+\n+  LogTarget(Info, cds, map) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    map->print_on(&ls);\n+  }\n+\n+  assert(map->at(0), \"First bit should be set\");\n+  assert(map->at(map->size() - 1), \"Last bit should be set\");\n@@ -1599,1 +1607,2 @@\n-  return old_zeros;\n+\n+  return first_set;\n@@ -1604,4 +1613,4 @@\n-  size_t removed_rw_zeros = remove_bitmap_leading_zeros(rw_ptrmap);\n-  size_t removed_ro_zeros = remove_bitmap_leading_zeros(ro_ptrmap);\n-  header()->set_rw_ptrmap_start_pos(removed_rw_zeros);\n-  header()->set_ro_ptrmap_start_pos(removed_ro_zeros);\n+  size_t removed_rw_leading_zeros = remove_bitmap_zeros(rw_ptrmap);\n+  size_t removed_ro_leading_zeros = remove_bitmap_zeros(ro_ptrmap);\n+  header()->set_rw_ptrmap_start_pos(removed_rw_leading_zeros);\n+  header()->set_ro_ptrmap_start_pos(removed_ro_leading_zeros);\n@@ -1611,6 +1620,5 @@\n-    \/\/ Remove leading zeros\n-    size_t removed_oop_zeros = remove_bitmap_leading_zeros(heap_info->oopmap());\n-    size_t removed_ptr_zeros = remove_bitmap_leading_zeros(heap_info->ptrmap());\n-\n-    header()->set_heap_oopmap_start_pos(removed_oop_zeros);\n-    header()->set_heap_ptrmap_start_pos(removed_ptr_zeros);\n+    \/\/ Remove leading and trailing zeros\n+    size_t removed_oop_leading_zeros = remove_bitmap_zeros(heap_info->oopmap());\n+    size_t removed_ptr_leading_zeros = remove_bitmap_zeros(heap_info->ptrmap());\n+    header()->set_heap_oopmap_start_pos(removed_oop_leading_zeros);\n+    header()->set_heap_ptrmap_start_pos(removed_ptr_leading_zeros);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":29,"deletions":21,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-  size_t remove_bitmap_leading_zeros(CHeapBitMap* map);\n+  size_t remove_bitmap_zeros(CHeapBitMap* map);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}