{"files":[{"patch":"@@ -94,0 +94,7 @@\n+            \/\/ JDK-8340802: \"codesign\" may or may not fail if additional\n+            \/\/ content is specified based on macOS version. For example on\n+            \/\/ macOS 15 aarch64 \"codesign\" will not fail with additional content.\n+            \/\/ Since we only need to check that warning is displayed when\n+            \/\/ \"codesign\" fails and \"--app-content\" is provided, lets fail\n+            \/\/ \"codesign\" for some better reason like identity which does not\n+            \/\/ exists.\n@@ -95,1 +102,3 @@\n-                    new String[]{\"--app-content\", TEST_DUKE},\n+                    new String[]{\"--app-content\", TEST_DUKE,\n+                                 \"--mac-sign\",\n+                                 \"--mac-app-image-sign-identity\", \"test-identity\"},\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningOptionsTest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.internal.util.OSVersion;\n@@ -51,0 +52,1 @@\n+ * @modules java.base\/jdk.internal.util\n@@ -84,0 +86,11 @@\n+        \/\/ On macOS signing may or may not work for modified app bundles.\n+        \/\/ It works on macOS 15 and up, but fails on macOS below 15.\n+        final int expectedJPackageExitCode;\n+        final boolean isMacOS15 = (OSVersion.current().compareTo(\n+                                      new OSVersion(15, 0, 0)) > 0);\n+        if (testPathArgs.contains(TEST_BAD) || (TKit.isOSX() && !isMacOS15)) {\n+            expectedJPackageExitCode = 1;\n+        } else {\n+            expectedJPackageExitCode = 0;\n+        }\n+\n@@ -102,3 +115,1 @@\n-            \/\/ On macOS we always signing app image and signing will fail, since\n-            \/\/ test produces invalid app bundle.\n-            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) || TKit.isOSX() ? 1 : 0)\n+            .setExpectedExitCode(expectedJPackageExitCode)\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"}]}