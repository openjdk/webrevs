{"files":[{"patch":"@@ -624,4 +624,4 @@\n-            String reqHost = requests.findValue(\"Host\");\n-            if (reqHost == null || !reqHost.equalsIgnoreCase(host)) {\n-                requests.set(\"Host\", host);\n-            }\n+            \/\/ if the \"Host\" header hasn't been explicitly set, then set its\n+            \/\/ value to the one determined through the request URL\n+            requests.setIfNotSet(\"Host\", host);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.List;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+\/*\n+ * @test\n+ * @bug 8359709\n+ * @summary verify that if the Host header is allowed to be set by the application\n+ *          then the correct value gets set in a HTTP request issued through\n+ *          java.net.HttpURLConnection\n+ * @library \/test\/lib\n+ * @run junit HostHeaderTest\n+ * @run junit\/othervm -Dsun.net.http.allowRestrictedHeaders=true HostHeaderTest\n+ * @run junit\/othervm -Dsun.net.http.allowRestrictedHeaders=false HostHeaderTest\n+ *\/\n+class HostHeaderTest {\n+\n+    private static final String SERVER_CTX_ROOT = \"\/8359709\";\n+    private static final boolean allowsHostHeader = Boolean.getBoolean(\"sun.net.http.allowRestrictedHeaders\");\n+\n+    private static HttpServer server;\n+\n+    @BeforeAll\n+    static void beforeAll() throws Exception {\n+        final InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        server = HttpServer.create(addr, 0);\n+        server.createContext(SERVER_CTX_ROOT, new Handler());\n+        server.start();\n+        System.err.println(\"started server at \" + server.getAddress());\n+    }\n+\n+    @AfterAll\n+    static void afterAll() throws Exception {\n+        if (server != null) {\n+            System.err.println(\"stopping server \" + server.getAddress());\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    void testHostHeader() throws Exception {\n+        final InetSocketAddress serverAddr = server.getAddress();\n+        final URL reqURL = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(serverAddr.getPort())\n+                .path(SERVER_CTX_ROOT)\n+                .build().toURL();\n+        final URLConnection conn = reqURL.openConnection(Proxy.NO_PROXY);\n+\n+        conn.setRequestProperty(\"Host\", \"foobar\");\n+        if (!allowsHostHeader) {\n+            \/\/ if restricted headers aren't allowed to be set by the user, then\n+            \/\/ we expect the previous call to setRequestProperty to not set the Host\n+            \/\/ header\n+            assertNull(conn.getRequestProperty(\"Host\"), \"Host header unexpectedly set\");\n+        }\n+\n+        assertInstanceOf(HttpURLConnection.class, conn);\n+        final HttpURLConnection httpURLConn = (HttpURLConnection) conn;\n+\n+        \/\/ send the HTTP request\n+        System.err.println(\"sending request \" + reqURL);\n+        final int respCode = httpURLConn.getResponseCode();\n+        assertEquals(200, respCode, \"unexpected response code\");\n+        \/\/ verify that the server side handler received the expected\n+        \/\/ Host header value in the request\n+        try (final InputStream is = httpURLConn.getInputStream()) {\n+            final byte[] resp = is.readAllBytes();\n+            \/\/ if Host header wasn't explicitly set, then we expect it to be\n+            \/\/ derived from the request URL\n+            final String expected = allowsHostHeader\n+                    ? \"foobar\"\n+                    : reqURL.getHost() + \":\" + reqURL.getPort();\n+            final String actual = new String(resp, US_ASCII);\n+            assertEquals(expected, actual, \"unexpected Host header received on server side\");\n+        }\n+    }\n+\n+    private static final class Handler implements HttpHandler {\n+        private static final int NO_RESPONSE_BODY = -1;\n+\n+        @Override\n+        public void handle(final HttpExchange exchange) throws IOException {\n+            final List<String> headerVals = exchange.getRequestHeaders().get(\"Host\");\n+            System.err.println(\"Host header has value(s): \" + headerVals);\n+            \/\/ unexpected Host header value, respond with 400 status code\n+            if (headerVals == null || headerVals.size() != 1) {\n+                System.err.println(\"Unexpected header value(s) for Host header: \" + headerVals);\n+                exchange.sendResponseHeaders(400, NO_RESPONSE_BODY);\n+                return;\n+            }\n+            \/\/ respond back with the Host header value that we found in the request\n+            final byte[] response = headerVals.getFirst().getBytes(US_ASCII);\n+            exchange.sendResponseHeaders(200, response.length);\n+            try (final OutputStream os = exchange.getResponseBody()) {\n+                os.write(response);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HostHeaderTest.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}