{"files":[{"patch":"@@ -0,0 +1,255 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.InputVerifier;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.JWindow;\n+import javax.swing.SwingUtilities;\n+\n+import static java.awt.event.InputEvent.BUTTON1_DOWN_MASK;\n+\n+\/*\n+ * @test\n+ * @bug 4774166\n+ * @key headful\n+ * @summary InputVerifier should be called after a window loses and then regains focus\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build JRobot\n+ * @run main bug4774166\n+ *\/\n+\n+class TestPanel extends JPanel {\n+    JTextField tf1 = null;\n+    JTextField tf2 = null;\n+    volatile boolean verifierCalled;\n+\n+    public void init() {\n+        tf1 = new JTextField(10);\n+        tf2 = new JTextField(10);\n+\n+        InputVerifier verifier = new InputVerifier() {\n+            public boolean verify(JComponent input) {\n+                verifierCalled = true;\n+                return false;\n+            }\n+        };\n+\n+        setLayout(new FlowLayout());\n+        tf1.setInputVerifier(verifier);\n+        add(tf1);\n+        add(tf2);\n+        validate();\n+    }\n+}\n+\n+public class bug4774166 {\n+    private static JRobot robot = JRobot.getRobot();\n+\n+    JFrame testframe;\n+    JFrame testwindowframe;\n+    JFrame customframe;\n+    JWindow testwindow;\n+    JDialog testdialog;\n+    JTextField frametf1, frametf2, windowtf1, windowtf2, dialogtf1, dialogtf2;\n+    TestPanel testpanel;\n+\n+    volatile boolean isFocused;\n+    volatile boolean verifierCalled;\n+\n+    public void setupGUI() {\n+        testframe = new JFrame(\"Test 4774166\");\n+        testframe.setLayout(new FlowLayout());\n+        testframe.setBounds(100, 100, 200, 100);\n+\n+        testwindowframe = new JFrame(\"Owner of JWindow\");\n+        testwindowframe.setBounds(0, 0, 0, 0);\n+\n+        testwindow = new JWindow(testwindowframe);\n+        testwindow.setBounds(175, 325, 200, 100);\n+        testwindow.setLayout(new FlowLayout());\n+\n+        testdialog = new JDialog((JFrame)null, \"Test dialog\");\n+        testdialog.setBounds(420, 100, 200, 100);\n+        testdialog.setLayout(new FlowLayout());\n+\n+        InputVerifier verifier = new InputVerifier() {\n+            public boolean verify(JComponent input) {\n+                verifierCalled = true;\n+                return false;\n+            }\n+        };\n+\n+        frametf1 = new JTextField(10);\n+        frametf2 = new JTextField(10);\n+        frametf1.setInputVerifier(verifier);\n+        testframe.add(frametf1);\n+        testframe.add(frametf2);\n+        testframe.setVisible(true);\n+\n+        windowtf1 = new JTextField(10);\n+        windowtf2 = new JTextField(10);\n+        windowtf1.setInputVerifier(verifier);\n+        testwindow.add(windowtf1);\n+        testwindow.add(windowtf2);\n+        testwindowframe.setVisible(true);\n+        testwindow.setVisible(true);\n+\n+        dialogtf1 = new JTextField(10);\n+        dialogtf2 = new JTextField(10);\n+        dialogtf1.setInputVerifier(verifier);\n+        testdialog.add(dialogtf1);\n+        testdialog.add(dialogtf2);\n+        testdialog.setVisible(true);\n+\n+        customframe = new JFrame(\"Frame with custom panel\");\n+        customframe.setLayout(new FlowLayout());\n+        testpanel = new TestPanel();\n+        testpanel.init();\n+\n+        customframe.add(testpanel);\n+        customframe.setBounds(420, 250, 200, 100);\n+        customframe.pack();\n+        customframe.setVisible(true);\n+    }\n+\n+    public void performTest() throws InterruptedException, InvocationTargetException {\n+        robot.setAutoDelay(100);\n+        robot.delay(2000);\n+\n+        robot.clickMouseOn(frametf1, BUTTON1_DOWN_MASK);\n+        robot.hitKey(KeyEvent.VK_A);\n+        robot.hitKey(KeyEvent.VK_B);\n+        robot.hitKey(KeyEvent.VK_C);\n+        robot.hitKey(KeyEvent.VK_D);\n+        robot.hitKey(KeyEvent.VK_E);\n+\n+        robot.clickMouseOn(windowtf1, BUTTON1_DOWN_MASK);\n+        robot.hitKey(KeyEvent.VK_F);\n+        robot.hitKey(KeyEvent.VK_G);\n+        robot.hitKey(KeyEvent.VK_H);\n+        robot.hitKey(KeyEvent.VK_I);\n+        robot.hitKey(KeyEvent.VK_J);\n+\n+        robot.clickMouseOn(dialogtf1, BUTTON1_DOWN_MASK);\n+        robot.hitKey(KeyEvent.VK_K);\n+        robot.hitKey(KeyEvent.VK_L);\n+        robot.hitKey(KeyEvent.VK_M);\n+        robot.hitKey(KeyEvent.VK_N);\n+        robot.hitKey(KeyEvent.VK_O);\n+\n+        robot.clickMouseOn(testpanel.tf1, BUTTON1_DOWN_MASK);\n+        robot.hitKey(KeyEvent.VK_P);\n+        robot.hitKey(KeyEvent.VK_Q);\n+        robot.hitKey(KeyEvent.VK_R);\n+        robot.hitKey(KeyEvent.VK_S);\n+        robot.hitKey(KeyEvent.VK_T);\n+\n+        verifierCalled = false;\n+        robot.clickMouseOn(frametf2, BUTTON1_DOWN_MASK);\n+        robot.delay(2000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            isFocused = frametf1.isFocusOwner();\n+        });\n+        if (!isFocused) {\n+            throw new RuntimeException(\"Focus error. Test failed!\");\n+        }\n+        if (!verifierCalled) {\n+            throw new RuntimeException(\"Verifier was not called upon regaining focus\");\n+        }\n+\n+        verifierCalled = false;\n+        robot.clickMouseOn(windowtf2, BUTTON1_DOWN_MASK);\n+        robot.delay(2000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            isFocused = windowtf1.isFocusOwner();\n+        });\n+        if (!isFocused) {\n+            throw new RuntimeException(\"Focus error. Test failed!\");\n+        }\n+        if (!verifierCalled) {\n+            throw new RuntimeException(\"Verifier was not called upon regaining focus\");\n+        }\n+\n+        testpanel.verifierCalled = false;\n+        robot.clickMouseOn(testpanel.tf2, BUTTON1_DOWN_MASK);\n+        robot.delay(2000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            isFocused = testpanel.tf1.isFocusOwner();\n+        });\n+        if (!isFocused) {\n+            throw new RuntimeException(\"Focus error. Test failed!\");\n+        }\n+        if (!testpanel.verifierCalled) {\n+            throw new RuntimeException(\"Verifier was not called upon regaining focus\");\n+        }\n+\n+        verifierCalled = false;\n+        robot.clickMouseOn(dialogtf2, BUTTON1_DOWN_MASK);\n+        robot.delay(2000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            isFocused = dialogtf1.isFocusOwner();\n+        });\n+        if (!isFocused) {\n+            throw new RuntimeException(\"Focus error. Test failed!\");\n+        }\n+        if (!verifierCalled) {\n+            throw new RuntimeException(\"Verifier was not called upon regaining focus\");\n+        }\n+    }\n+\n+    public void cleanupGUI() {\n+        if (testframe != null) {\n+            testframe.dispose();\n+        }\n+        if (testwindowframe != null) {\n+            testwindowframe.dispose();\n+        }\n+        if (testwindow != null) {\n+            testwindow.dispose();\n+        }\n+        if (customframe != null) {\n+            customframe.dispose();\n+        }\n+        if (testdialog != null) {\n+            testdialog.dispose();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        bug4774166 b = new bug4774166();\n+        SwingUtilities.invokeAndWait(b::setupGUI);\n+        try {\n+            b.performTest();\n+        } finally {\n+            SwingUtilities.invokeAndWait(b::cleanupGUI);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/InputVerifier\/bug4774166.java","additions":255,"deletions":0,"binary":false,"changes":255,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4134035\n+ * @key headful\n+ * @summary Ensure default button reference is removed from the RootPane\n+ * when a hierarchy containing the RootPane's default button is removed\n+ * from the RootPane. (a memory leak)\n+ * @run main DefaultButtonLeak\n+ *\/\n+\n+public class DefaultButtonLeak {\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JFrame frame = new JFrame(\"DefaultButtonLeak\");\n+            try {\n+                JPanel bigPanel = new JPanel();\n+                bigPanel.setLayout(new GridLayout(10, 10));\n+                for (int i = 0; i < 100; i++) {\n+                    JButton button = new JButton(\"Button\" + i);\n+                    bigPanel.add(button);\n+                    if (i == 0) {\n+                        frame.getRootPane().setDefaultButton(button);\n+                    }\n+                }\n+                frame.add(bigPanel, BorderLayout.CENTER);\n+                frame.pack();\n+                frame.setVisible(true);\n+                frame.remove(bigPanel);\n+                if (frame.getRootPane().getDefaultButton() != null) {\n+                    throw new RuntimeException(\"RootPane default button reference not removed.\");\n+                }\n+            } finally {\n+                frame.setVisible(false);\n+                frame.dispose();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/DefaultButtonLeak.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4385611 8078655\n+ * @requires (os.family == \"windows\")\n+ * @summary The button's preferred width\/height calculation.\n+ * @run main bug4385611\n+ *\/\n+\n+public class bug4385611 {\n+    static JButton bt1, bt2;\n+    static final ImageIcon icon32x32 = generateImageIcon();\n+    static final Dimension DIM_32X32 = new Dimension(32, 32);\n+    static final Dimension DIM_33X33 = new Dimension(33, 33);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+                bt1 = new JButton(icon32x32);\n+                bt1.setMargin(new Insets(0, 0, 0, 0));\n+                bt1.setBorder(null);\n+                bt1.setFocusPainted(true);\n+\n+                bt2 = new JButton(icon32x32);\n+                bt2.setMargin(new Insets(0, 0, 0, 0));\n+                bt2.setBorder(null);\n+                bt2.setFocusPainted(false);\n+\n+                if (!bt1.getPreferredSize().equals(DIM_32X32) ||\n+                        !bt2.getPreferredSize().equals(DIM_32X32)) {\n+                    throw new RuntimeException(\"The button's preferred size should be 32x32\");\n+                }\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Can not initialize Metal LnF\", e);\n+            }\n+\n+            try {\n+                UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+                bt1.updateUI();\n+                bt1.setBorder(null);\n+                bt2.updateUI();\n+                bt2.setBorder(null);\n+                if (!bt1.getPreferredSize().equals(DIM_33X33) ||\n+                        !bt2.getPreferredSize().equals(DIM_32X32)) {\n+                    throw new RuntimeException(\"The button's preferred size should be \"\n+                            + \"33x33 and 32x32 correspondingly.\");\n+                }\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Can not initialize Windows LnF\", e);\n+            }\n+        });\n+    }\n+\n+    private static ImageIcon generateImageIcon() {\n+        BufferedImage image = new BufferedImage(32, 32, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = image.createGraphics();\n+        g.setColor(Color.YELLOW);\n+        g.fillRect(0, 0, 32, 32);\n+        g.dispose();\n+        return new ImageIcon(image);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JButton\/bug4385611.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Date;\n+import javax.swing.AbstractAction;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4706883\n+ * @summary REGRESSION: ActionMap misses VK_PRINTSCREEN\n+ * @key headful\n+ * @run main bug4706883\n+ *\/\n+\n+public class bug4706883 {\n+\n+    MyPanel panel;\n+    JFrame fr;\n+    boolean passed = false;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        bug4706883 test = new bug4706883();\n+        SwingUtilities.invokeAndWait(test::init);\n+        SwingUtilities.invokeAndWait(test::test);\n+    }\n+    public void init() {\n+        fr = new JFrame(\"Test\");\n+\n+        panel = new MyPanel();\n+        fr.add(panel);\n+\n+        panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put\n+            (KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN, 0, true),\n+             \"RELEASED\");\n+\n+        panel.getActionMap().put(\"RELEASED\", new AbstractAction() {\n+                public void actionPerformed(ActionEvent ev) {\n+                    setPassed(true);\n+                }\n+            });\n+\n+        fr.setSize(200, 200);\n+        fr.setVisible(true);\n+    }\n+\n+    public void test() {\n+        panel.doTest();\n+        try {\n+            Thread.sleep(1000);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (fr != null) {\n+                fr.setVisible(false);\n+                fr.dispose();\n+            }\n+        }\n+        if (!isPassed()) {\n+            throw new RuntimeException(\"The key binding for VK_PRINTSCREEN wasn't processed\");\n+        }\n+    }\n+\n+    class MyPanel extends JPanel {\n+        public void doTest() {\n+            KeyEvent e = new KeyEvent(this, KeyEvent.KEY_RELEASED,\n+                                      (new Date()).getTime(),\n+                                      0, KeyEvent.VK_PRINTSCREEN,\n+                                      KeyEvent.CHAR_UNDEFINED);\n+            processKeyEvent(e);\n+        }\n+    }\n+\n+    synchronized void setPassed(boolean passed) {\n+        this.passed = passed;\n+    }\n+\n+    synchronized boolean isPassed() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComponent\/bug4706883.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.java.swing.plaf.motif.MotifInternalFrameTitlePane;\n+import javax.swing.JInternalFrame;\n+\n+\/*\n+ * @test\n+ * @bug 4150591\n+ * @summary MotifInternalFrameTitlePane is public now and can be\n+ * instantiated by other classes within the desktop module without using Reflection.\n+ * This does not mean that this class will ever become part\n+ * of the official public Java API.\n+ * @modules java.desktop\/com.sun.java.swing.plaf.motif\n+ * @run main bug4150591\n+ *\/\n+\n+public class bug4150591 {\n+    public static void main(String[] args) {\n+        MotifInternalFrameTitlePane mtp = new MotifInternalFrameTitlePane(new JInternalFrame());\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/motif\/bug4150591.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}