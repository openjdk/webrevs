{"files":[{"patch":"@@ -108,4 +108,4 @@\n-  idx_t const cutoff = bit_in_word(end_bit);\n-  idx_t const start_word = to_words_align_down(start_bit);\n-  idx_t const end_word = to_words_align_up(end_bit);\n-  bm_word_t* const old_map = map();\n+  const idx_t cutoff = bit_in_word(end_bit);\n+  const idx_t start_word = to_words_align_down(start_bit);\n+  const idx_t end_word = to_words_align_up(end_bit);\n+  const bm_word_t* const old_map = map();\n@@ -113,1 +113,1 @@\n-  BitMapWithAllocator* derived = static_cast<BitMapWithAllocator*>(this);\n+  const BitMapWithAllocator* const derived = static_cast<BitMapWithAllocator*>(this);\n@@ -115,1 +115,1 @@\n-  bm_word_t* new_map = derived->allocate(end_word - start_word);\n+  bm_word_t* const new_map = derived->allocate(end_word - start_word);\n@@ -118,1 +118,1 @@\n-  idx_t const shift = bit_in_word(start_bit);\n+  const idx_t shift = bit_in_word(start_bit);\n@@ -120,1 +120,1 @@\n-  idx_t carry = 0;\n+  bm_word_t carry = 0;\n@@ -141,1 +141,1 @@\n-  bm_word_t* new_map = copy_of_range(start_bit, end_bit);\n+  bm_word_t* const new_map = copy_of_range(start_bit, end_bit);\n@@ -143,1 +143,1 @@\n-  BitMapWithAllocator* derived = static_cast<BitMapWithAllocator*>(this);\n+  const BitMapWithAllocator* const derived = static_cast<BitMapWithAllocator*>(this);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -242,0 +242,32 @@\n+\n+  template <class ResizableBitMapClass>\n+  static void testRandom() {\n+    for (int i = 0; i < 100; i++) {\n+      ResourceMark rm;\n+\n+      const size_t max_size = 1024;\n+      const size_t size = os::random() % max_size + 1;\n+      const size_t truncate_size = os::random() % size + 1;\n+      const size_t truncate_start = size == truncate_size ? 0 : os::random() % (size - truncate_size);\n+\n+      ResizableBitMapClass map(size);\n+      ResizableBitMapClass result(truncate_size);\n+\n+      for (BitMap::idx_t idx = 0; idx < truncate_start; idx++) {\n+        if (os::random() % 2 == 0) {\n+          map.set_bit(idx);\n+        }\n+      }\n+\n+      for (BitMap::idx_t idx = 0; idx < truncate_size; idx++) {\n+        if (os::random() % 2 == 0) {\n+          map.set_bit(truncate_start + idx);\n+          result.set_bit(idx);\n+        }\n+      }\n+\n+      map.truncate(truncate_start, truncate_start + truncate_size);\n+\n+      EXPECT_TRUE(map.is_same(result));\n+    }\n+  }\n@@ -397,0 +429,9 @@\n+\n+TEST_VM(BitMap, truncate_random) {\n+  BitMapTruncateTest::testRandom<ResourceBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ResourceBitMap\";\n+  BitMapTruncateTest::testRandom<TestCHeapBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type CHeapBitMap\";\n+  BitMapTruncateTest::testRandom<TestArenaBitMap>();\n+  EXPECT_FALSE(HasFailure()) << \"Failed on type ArenaBitMap\";\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}