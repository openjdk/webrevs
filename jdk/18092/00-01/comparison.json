{"files":[{"patch":"@@ -103,1 +103,1 @@\n-bm_word_t* GrowableBitMap<BitMapWithAllocator>::copy_of_range(idx_t start_bit, idx_t end_bit, bool clear) {\n+bm_word_t* GrowableBitMap<BitMapWithAllocator>::copy_of_range(idx_t start_bit, idx_t end_bit) {\n@@ -108,3 +108,3 @@\n-  idx_t cutoff = bit_in_word(end_bit);\n-  idx_t start_word = to_words_align_down(start_bit);\n-  idx_t end_word = to_words_align_up(end_bit);\n+  idx_t const cutoff = bit_in_word(end_bit);\n+  idx_t const start_word = to_words_align_down(start_bit);\n+  idx_t const end_word = to_words_align_up(end_bit);\n@@ -123,10 +123,2 @@\n-  for (idx_t i = end_word; i --> start_word;) {\n-    \/\/ First iteration is a special case:\n-    \/\/ There may be left over bits in the last word that we want to keep while discarding the rest\n-    if (i == end_word - 1 && cutoff > 0) {\n-      bm_word_t mask = bit_mask(cutoff) - 1;\n-      new_map[i-start_word] = old_map[i] & mask >> shift;\n-    } else {\n-      new_map[i-start_word] = old_map[i] >> shift;\n-    }\n-    new_map[i-start_word] |= carry;\n+  for (idx_t i = end_word; i-- > start_word;) {\n+    new_map[i-start_word] = old_map[i] >> shift;\n@@ -134,2 +126,4 @@\n-    \/\/ A full shift by BitsPerWord could be sign extended\n-    carry = old_map[i] << (BitsPerWord - shift) % BitsPerWord;\n+    if (shift != 0) {\n+      new_map[i-start_word] |= carry;\n+      carry = old_map[i] << (BitsPerWord - shift);\n+    }\n@@ -142,2 +136,2 @@\n-bm_word_t* GrowableBitMap<BitMapWithAllocator>::copy_of_range(idx_t start_bit, bool clear) {\n-  return copy_of_range(start_bit, size(), clear);\n+bm_word_t* GrowableBitMap<BitMapWithAllocator>::copy_of_range(idx_t start_bit) {\n+  return copy_of_range(start_bit, size());\n@@ -147,1 +141,1 @@\n-void GrowableBitMap<BitMapWithAllocator>::truncate(idx_t start_bit, idx_t end_bit, bool clear) {\n+void GrowableBitMap<BitMapWithAllocator>::truncate(idx_t start_bit, idx_t end_bit) {\n@@ -152,1 +146,1 @@\n-  bm_word_t* new_map = copy_of_range(start_bit, end_bit, clear);\n+  bm_word_t* new_map = copy_of_range(start_bit, end_bit);\n@@ -161,5 +155,0 @@\n-template <class BitMapWithAllocator>\n-void GrowableBitMap<BitMapWithAllocator>::truncate(idx_t start_bit, bool clear) {\n-  truncate(start_bit, size(), clear);\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -572,1 +572,1 @@\n-  bm_word_t* copy_of_range(idx_t start_bit, idx_t end_bit, bool clear = true);\n+  bm_word_t* copy_of_range(idx_t start_bit, idx_t end_bit);\n@@ -574,1 +574,1 @@\n-  bm_word_t* copy_of_range(idx_t start_bit, bool clear = true);\n+  bm_word_t* copy_of_range(idx_t start_bit);\n@@ -597,3 +597,1 @@\n-  void truncate(idx_t start_bit, idx_t end_bit, bool clear = true);\n-  \/\/ Truncate from the start bit to the end of the map\n-  void truncate(idx_t start_bit, bool clear = true);\n+  void truncate(idx_t start_bit, idx_t end_bit);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    map.truncate(1, 3, true);\n+    map.truncate(1, 3);\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_truncate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}