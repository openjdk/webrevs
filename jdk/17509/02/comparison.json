{"files":[{"patch":"@@ -4063,3 +4063,3 @@\n-\/\/ phase then the compiler has recorded all dependencies from startup.\n-\/\/ In that case we need only deoptimize and throw away all compiled code\n-\/\/ that depends on the class.\n+\/\/ phase or 'AlwaysRecordEvolDependencies' is true, then the compiler has\n+\/\/ recorded all dependencies from startup. In that case we need only\n+\/\/ deoptimize and throw away all compiled code that depends on the class.\n@@ -4067,7 +4067,7 @@\n-\/\/ If can_redefine_classes is obtained sometime after the onload\n-\/\/ phase then the dependency information may be incomplete. In that case\n-\/\/ the first call to RedefineClasses causes all compiled code to be\n-\/\/ thrown away. As can_redefine_classes has been obtained then\n-\/\/ all future compilations will record dependencies so second and\n-\/\/ subsequent calls to RedefineClasses need only throw away code\n-\/\/ that depends on the class.\n+\/\/ If can_redefine_classes is obtained sometime after the onload phase\n+\/\/ (and 'AlwaysRecordEvolDependencies' is false) then the dependency\n+\/\/ information may be incomplete. In that case the first call to\n+\/\/ RedefineClasses causes all compiled code to be thrown away. As\n+\/\/ can_redefine_classes has been obtained then all future compilations will\n+\/\/ record dependencies so second and subsequent calls to RedefineClasses\n+\/\/ need only throw away code that depends on the class.\n@@ -4078,0 +4078,1 @@\n+  assert(JvmtiExport::all_dependencies_are_recorded() || !AlwaysRecordEvolDependencies, \"sanity check\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2012,0 +2012,5 @@\n+                                                                            \\\n+  product(bool, AlwaysRecordEvolDependencies, true, DIAGNOSTIC,             \\\n+                \"Unconditionally record nmethod dependencies on class \"     \\\n+                \"rewriting\/transformation independently of the JVMTI \"      \\\n+                \" can_{retransform\/redefine}_classes capabilities.\")        \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -118,0 +118,6 @@\n+#if INCLUDE_JVMTI\n+  if (AlwaysRecordEvolDependencies) {\n+    JvmtiExport::set_can_hotswap_or_post_breakpoint(true);\n+    JvmtiExport::set_all_dependencies_are_recorded(true);\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}