{"files":[{"patch":"@@ -228,1 +228,1 @@\n-      const size_t young_evac_bytes = get_live_bytes_in_young_regions();\n+      const size_t young_evac_bytes = get_live_bytes_in_untenurable_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-  \/\/ Returns the amount of live bytes in young regions in the collection set. It is not known how many of these bytes will be promoted.\n-  inline size_t get_live_bytes_in_young_regions() const;\n+  \/\/ Returns the amount of live bytes in young regions with an age below the tenuring threshold.\n+  inline size_t get_live_bytes_in_untenurable_regions() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-size_t ShenandoahCollectionSet::get_live_bytes_in_young_regions() const {\n+size_t ShenandoahCollectionSet::get_live_bytes_in_untenurable_regions() const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -255,0 +255,22 @@\n+\/\/ Here's the algebra.\n+\/\/ Let SOEP = ShenandoahOldEvacRatioPercent,\n+\/\/     OE = old evac,\n+\/\/     YE = young evac, and\n+\/\/     TE = total evac = OE + YE\n+\/\/ By definition:\n+\/\/            SOEP\/100 = OE\/TE\n+\/\/                     = OE\/(OE+YE)\n+\/\/  => SOEP\/(100-SOEP) = OE\/((OE+YE)-OE)         \/\/ componendo-dividendo: If a\/b = c\/d, then a\/(b-a) = c\/(d-c)\n+\/\/                     = OE\/YE\n+\/\/  =>              OE = YE*SOEP\/(100-SOEP)\n+size_t get_maximum_old_evacuation_reserve(size_t maximum_young_evacuation_reserve, size_t old_available) {\n+  \/\/ We have to be careful in the event that SOEP is set to 100 by the user.\n+  assert(ShenandoahOldEvacRatioPercent <= 100, \"Error\");\n+  if (ShenandoahOldEvacRatioPercent == 100) {\n+    return old_available;\n+  }\n+\n+  const size_t ratio_of_old_in_collection_set = (maximum_young_evacuation_reserve * ShenandoahOldEvacRatioPercent) \/ (100 - ShenandoahOldEvacRatioPercent);\n+  return MIN2(ratio_of_old_in_collection_set, old_available);\n+}\n+\n@@ -279,16 +301,0 @@\n-  \/\/\n-  \/\/ Here's the algebra.\n-  \/\/ Let SOEP = ShenandoahOldEvacRatioPercent,\n-  \/\/     OE = old evac,\n-  \/\/     YE = young evac, and\n-  \/\/     TE = total evac = OE + YE\n-  \/\/ By definition:\n-  \/\/            SOEP\/100 = OE\/TE\n-  \/\/                     = OE\/(OE+YE)\n-  \/\/  => SOEP\/(100-SOEP) = OE\/((OE+YE)-OE)         \/\/ componendo-dividendo: If a\/b = c\/d, then a\/(b-a) = c\/(d-c)\n-  \/\/                     = OE\/YE\n-  \/\/  =>              OE = YE*SOEP\/(100-SOEP)\n-\n-  \/\/ We have to be careful in the event that SOEP is set to 100 by the user.\n-  assert(ShenandoahOldEvacRatioPercent <= 100, \"Error\");\n-  const size_t ratio_of_old_in_collection_set = (maximum_young_evacuation_reserve * ShenandoahOldEvacRatioPercent) \/ (100 - ShenandoahOldEvacRatioPercent);\n@@ -296,1 +302,3 @@\n-  const size_t maximum_old_evacuation_reserve = (ShenandoahOldEvacRatioPercent == 100) ? old_available : MIN2(ratio_of_old_in_collection_set, old_available);\n+  const size_t maximum_old_evacuation_reserve = get_maximum_old_evacuation_reserve(maximum_young_evacuation_reserve, old_available);\n+\n+\n@@ -354,0 +362,1 @@\n+  assert(consumed_by_advance_promotion <= old_promo_reserve, \"Cannot promote more than was reserved\");\n@@ -408,5 +417,4 @@\n-  const size_t young_evacuated = collection_set->get_live_bytes_in_young_regions();\n-  const size_t young_evacuated_reserve_used = (size_t) (ShenandoahEvacWaste * double(young_evacuated));\n-  const size_t total_young_available = young_generation->available_with_reserve();\n-  assert(young_evacuated_reserve_used <= total_young_available, \"Cannot evacuate more than is available in young\");\n-  young_generation->set_evacuation_reserve(young_evacuated_reserve_used);\n+  const size_t young_evacuated = collection_set->get_live_bytes_in_untenurable_regions();\n+  const size_t young_evacuated_commited = (size_t) (ShenandoahEvacWaste * double(young_evacuated));\n+  assert(young_evacuated_commited <= young_generation->available_with_reserve(), \"Cannot evacuate more than is available in young\");\n+  young_generation->set_evacuation_reserve(young_evacuated_commited);\n@@ -657,1 +665,1 @@\n-  return MIN2(tenurable_this_cycle, old_promotion_reserve);\n+  return MIN2(old_consumed, old_promotion_reserve);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n-  size_t initial_capacity_old = max_capacity() - max_capacity_young;\n@@ -305,3 +304,4 @@\n-      \/\/ We choose not to promote objects smaller than PLAB::min_size() by way of shared allocations, as this is too\n-      \/\/ costly.  Instead, we'll simply \"evacuate\" to young-gen memory (using a GCLAB) and will promote in a future\n-      \/\/ evacuation pass.  This condition is denoted by: is_promotion && has_plab && (size <= PLAB::min_size())\n+      \/\/ We choose not to promote objects smaller than PLAB::max_size() by way of shared allocations, as this is too\n+      \/\/ costly (such objects should use the PLAB). Instead, we'll simply \"evacuate\" to young-gen memory (using a GCLAB)\n+      \/\/ and will promote in a future evacuation pass.  This condition is denoted by: is_promotion && has_plab && (size\n+      \/\/ <= PLAB::max_size())\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    e.set_collectedYoung(cset->get_live_bytes_in_young_regions());\n+    e.set_collectedYoung(cset->get_live_bytes_in_untenurable_regions());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}