{"files":[{"patch":"@@ -56,1 +56,0 @@\n-import java.util.stream.Stream;\n@@ -61,1 +60,0 @@\n-import jdk.test.lib.Platform;\n@@ -63,2 +61,1 @@\n-import jdk.test.lib.artifacts.Artifact;\n-import jdk.test.lib.artifacts.ArtifactResolver;\n+import jdk.test.lib.security.NSSArtifactFetcher;\n@@ -81,5 +78,0 @@\n-    \/\/ Version of the NSS artifact. This coincides with the version of\n-    \/\/ the NSS version\n-    private static final String NSS_BUNDLE_VERSION = \"3.111\";\n-    private static final String NSSLIB = \"jpg.tests.jdk.nsslib\";\n-\n@@ -92,1 +84,1 @@\n-    static String nss_library = \"softokn3\";\n+    static String nss_library = NSSArtifactFetcher.DEFAULT_NSS_LIBRARY;\n@@ -228,19 +220,1 @@\n-        return getNSSLibDir(nss_library);\n-    }\n-\n-    static String getNSSLibDir(String library) throws Exception {\n-        Path libPath = getNSSLibPath(library);\n-        String libDir = String.valueOf(libPath.getParent()) + File.separatorChar;\n-        System.out.println(\"nssLibDir: \" + libDir);\n-        System.setProperty(\"pkcs11test.nss.libdir\", libDir);\n-        return libDir;\n-    }\n-\n-    private static Path getNSSLibPath() throws Exception {\n-        return getNSSLibPath(nss_library);\n-    }\n-\n-    static Path getNSSLibPath(String library) throws Exception {\n-        String osid = getOsId();\n-        Path libraryName = Path.of(System.mapLibraryName(library));\n-        return fetchNssLib(osid, libraryName);\n+        return NSSArtifactFetcher.getNSSLibDir(nss_library);\n@@ -249,9 +223,2 @@\n-    private static String getOsId() {\n-        String osName = props.getProperty(\"os.name\");\n-        if (osName.startsWith(\"Win\")) {\n-            osName = \"Windows\";\n-        } else if (osName.equals(\"Mac OS X\")) {\n-            osName = \"MacOSX\";\n-        }\n-        return osName + \"-\" + props.getProperty(\"os.arch\") + \"-\"\n-                + props.getProperty(\"sun.arch.data.model\");\n+    public static Path getNSSLibPath() throws Exception {\n+        return NSSArtifactFetcher.getNSSLibPath(nss_library);\n@@ -707,44 +674,0 @@\n-    private static Path fetchNssLib(String osId, Path libraryName) throws IOException {\n-        switch (osId) {\n-            case \"Windows-amd64-64\":\n-                return fetchNssLib(WINDOWS_X64.class, libraryName);\n-\n-            case \"MacOSX-x86_64-64\":\n-                return fetchNssLib(MACOSX_X64.class, libraryName);\n-\n-            case \"MacOSX-aarch64-64\":\n-                return fetchNssLib(MACOSX_AARCH64.class, libraryName);\n-\n-            case \"Linux-amd64-64\":\n-                if (Platform.isOracleLinux7()) {\n-                    throw new SkippedException(\"Skipping Oracle Linux prior to v8\");\n-                } else {\n-                    return fetchNssLib(LINUX_X64.class, libraryName);\n-                }\n-\n-            case \"Linux-aarch64-64\":\n-                if (Platform.isOracleLinux7()) {\n-                    throw new SkippedException(\"Skipping Oracle Linux prior to v8\");\n-                } else {\n-                    return fetchNssLib(LINUX_AARCH64.class, libraryName);\n-                }\n-            default:\n-                throw new SkippedException(\"Unsupported OS: \" + osId);\n-        }\n-    }\n-\n-    private static Path fetchNssLib(Class<?> clazz, Path libraryName) throws IOException {\n-        Path p = ArtifactResolver.fetchOne(clazz);\n-        return findNSSLibrary(p, libraryName);\n-    }\n-\n-    private static Path findNSSLibrary(Path path, Path libraryName) throws IOException {\n-        try(Stream<Path> files = Files.find(path, 10,\n-                (tp, attr) -> tp.getFileName().equals(libraryName))) {\n-\n-            return files.findAny()\n-                        .orElseThrow(() ->\n-                            new RuntimeException(\"NSS library \\\"\" + libraryName + \"\\\" was not found in \" + path));\n-        }\n-    }\n-\n@@ -850,40 +773,0 @@\n-    @Artifact(\n-            organization = NSSLIB,\n-            name = \"nsslib-windows_x64\",\n-            revision = NSS_BUNDLE_VERSION,\n-            extension = \"zip\")\n-    private static class WINDOWS_X64 {\n-    }\n-\n-    @Artifact(\n-            organization = NSSLIB,\n-            name = \"nsslib-macosx_x64\",\n-            revision = NSS_BUNDLE_VERSION,\n-            extension = \"zip\")\n-    private static class MACOSX_X64 {\n-    }\n-\n-    @Artifact(\n-            organization = NSSLIB,\n-            name = \"nsslib-macosx_aarch64\",\n-            revision = NSS_BUNDLE_VERSION,\n-            extension = \"zip\")\n-    private static class MACOSX_AARCH64 {\n-    }\n-\n-    @Artifact(\n-            organization = NSSLIB,\n-            name = \"nsslib-linux_x64\",\n-            revision = NSS_BUNDLE_VERSION,\n-            extension = \"zip\")\n-    private static class LINUX_X64 {\n-    }\n-\n-    @Artifact(\n-            organization = NSSLIB,\n-            name = \"nsslib-linux_aarch64\",\n-            revision = NSS_BUNDLE_VERSION,\n-            extension = \"zip\"\n-    )\n-    private static class LINUX_AARCH64{\n-    }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":5,"deletions":122,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+#        jdk.test.lib.security.artifacts.ThirdPartyArtifacts\n+#        jdk.test.lib.security.NSSArtifactFetcher\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.sh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.test.lib.artifacts.Artifact;\n+import jdk.test.lib.security.artifacts.ThirdPartyArtifacts;\n@@ -85,3 +85,0 @@\n-    private static final String ACVP_BUNDLE_LOC = \"jpg.tests.jdk\";\n-    private static final String ACVP_BUNDLE_NAME = \"ACVP-Server\";\n-    private static final String ACVP_BUNDLE_VERSION = \"1.1.0.38\";\n@@ -117,1 +114,1 @@\n-        Path archivePath = ArtifactResolver.fetchOne(ACVP_SERVER_TESTS.class);\n+        Path archivePath = ArtifactResolver.fetchOne(ThirdPartyArtifacts.ACVP_SERVER_TESTS.class);\n@@ -128,1 +125,3 @@\n-                String fullEntryName = ACVP_BUNDLE_NAME + \"-\" + ACVP_BUNDLE_VERSION + \"\/\" + testFile;\n+                String fullEntryName = ThirdPartyArtifacts.ACVP_BUNDLE_NAME\n+                                       + \"-\" + ThirdPartyArtifacts.ACVP_BUNDLE_VERSION\n+                                       + \"\/\" + testFile;\n@@ -188,9 +187,0 @@\n-\n-    @Artifact(\n-            organization = ACVP_BUNDLE_LOC,\n-            name = ACVP_BUNDLE_NAME,\n-            revision = ACVP_BUNDLE_VERSION,\n-            extension = \"zip\",\n-            unpack = false)\n-    private static class ACVP_SERVER_TESTS {\n-    }\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/Launcher.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.test.lib.security;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.artifacts.ArtifactResolver;\n+import jdk.test.lib.security.artifacts.ThirdPartyArtifacts;\n+import jtreg.SkippedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+\n+public class NSSArtifactFetcher {\n+\n+    public static final String DEFAULT_NSS_LIBRARY =  \"softokn3\";\n+\n+     private static Class<?> getNssLibClass(String osId){\n+        switch (osId) {\n+            case \"Windows-amd64-64\":\n+                return ThirdPartyArtifacts.NSS_WINDOWS_X64.class;\n+\n+            case \"MacOSX-x86_64-64\":\n+                return ThirdPartyArtifacts.NSS_MACOSX_X64.class;\n+\n+            case \"MacOSX-aarch64-64\":\n+                return ThirdPartyArtifacts.NSS_MACOSX_AARCH64.class;\n+\n+            case \"Linux-amd64-64\":\n+                if (Platform.isOracleLinux7()) {\n+                    throw new SkippedException(\"Skipping Oracle Linux prior to v8\");\n+                } else {\n+                    return ThirdPartyArtifacts.NSS_LINUX_X64.class;\n+                }\n+\n+            case \"Linux-aarch64-64\":\n+                if (Platform.isOracleLinux7()) {\n+                    throw new SkippedException(\"Skipping Oracle Linux prior to v8\");\n+                } else {\n+                    return ThirdPartyArtifacts.NSS_LINUX_AARCH64.class;\n+                }\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    \/**\n+     * This method returns the path to the directory containing library\n+     * (.so\/.dll\/.dylib) files, not the parent directory.\n+     *\n+     * @param library library name\n+     * @return NSS lib path\n+     *\/\n+    public static String getNSSLibDir(String library) throws Exception {\n+        final Path libPath = getNSSLibPath(library);\n+\n+        final String libDir = String.valueOf(libPath.getParent()) + File.separatorChar;\n+        System.out.println(\"nssLibDir: \" + libDir);\n+        System.setProperty(\"pkcs11test.nss.libdir\", libDir);\n+        return libDir;\n+    }\n+\n+    \/**\n+     * This method returns the NSS parent folder path containing all NSS Libraries\n+     * that might be installed.\n+     * Automatically detects the architecture, hence no parameter needed.\n+     *\n+     * @return NSS parent dir path\n+     *\/\n+    public static Path getNSSDirectory() {\n+        final String osId = getOsId();\n+        final Class<?> clazz = getNssLibClass(osId);\n+        if (clazz == null) {\n+            throw new SkippedException(\"Warning: unsupported OS: \" + osId\n+                                       + \", please initialize NSS library location, skipping test\");\n+        }\n+        return ArtifactResolver.fetchOne(clazz);\n+    }\n+\n+    public static Path getNSSLibPath(String library) throws Exception {\n+        final Path dir = getNSSDirectory();\n+\n+        return findNSSLibrary(dir, Path.of(System.mapLibraryName(library)));\n+    }\n+\n+    private static String getOsId() {\n+\n+        final Properties props = System.getProperties();\n+\n+        String osName = props.getProperty(\"os.name\");\n+        if (osName.startsWith(\"Win\")) {\n+            osName = \"Windows\";\n+        } else if (osName.equals(\"Mac OS X\")) {\n+            osName = \"MacOSX\";\n+        }\n+        return osName + \"-\" + props.getProperty(\"os.arch\") + \"-\"\n+               + props.getProperty(\"sun.arch.data.model\");\n+    }\n+\n+    private static Path findNSSLibrary(Path path, Path libraryName) throws IOException {\n+        try(Stream<Path> files = Files.find(path, 10,\n+                (tp, attr) -> tp.getFileName().equals(libraryName))) {\n+\n+            return files.findAny()\n+                    .orElseThrow(() ->\n+                            new RuntimeException(\"NSS library \\\"\" + libraryName + \"\\\" was not found in \" + path));\n+        }\n+    }\n+\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/security\/NSSArtifactFetcher.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.security.artifacts;\n+\n+import jdk.test.lib.artifacts.Artifact;\n+\n+public class ThirdPartyArtifacts {\n+\n+    public static final String ARTIFACT_BASE = \"jpg.tests.jdk\";\n+    public static final String ACVP_BUNDLE_NAME = \"ACVP-Server\";\n+    public static final String ACVP_BUNDLE_VERSION = \"1.1.0.38\";\n+\n+    \/\/ Version of the NSS artifact. This coincides with the version of\n+    \/\/ the NSS version\n+    public static final String NSS_BUNDLE_VERSION = \"3.111\";\n+    public static final String NSSLIB =  ARTIFACT_BASE + \".nsslib\";\n+\n+    @Artifact(\n+            organization = NSSLIB,\n+            name = \"nsslib-windows_x64\",\n+            revision = NSS_BUNDLE_VERSION,\n+            extension = \"zip\")\n+    public static class NSS_WINDOWS_X64 {\n+    }\n+\n+    @Artifact(\n+            organization = NSSLIB,\n+            name = \"nsslib-macosx_x64\",\n+            revision = NSS_BUNDLE_VERSION,\n+            extension = \"zip\")\n+    public static class NSS_MACOSX_X64 {\n+    }\n+\n+    @Artifact(\n+            organization = NSSLIB,\n+            name = \"nsslib-macosx_aarch64\",\n+            revision = NSS_BUNDLE_VERSION,\n+            extension = \"zip\")\n+    public static class NSS_MACOSX_AARCH64 {\n+    }\n+\n+    @Artifact(\n+            organization = NSSLIB,\n+            name = \"nsslib-linux_x64\",\n+            revision = NSS_BUNDLE_VERSION,\n+            extension = \"zip\")\n+    public static class NSS_LINUX_X64 {\n+    }\n+\n+    @Artifact(\n+            organization = NSSLIB,\n+            name = \"nsslib-linux_aarch64\",\n+            revision = NSS_BUNDLE_VERSION,\n+            extension = \"zip\"\n+    )\n+    public static class NSS_LINUX_AARCH64 {\n+    }\n+\n+    @Artifact(\n+            organization = ARTIFACT_BASE,\n+            name = ACVP_BUNDLE_NAME,\n+            revision = ACVP_BUNDLE_VERSION,\n+            extension = \"zip\",\n+            unpack = false)\n+    public static class ACVP_SERVER_TESTS {\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/security\/artifacts\/ThirdPartyArtifacts.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}