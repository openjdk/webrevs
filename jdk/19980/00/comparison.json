{"files":[{"patch":"@@ -453,0 +453,9 @@\n+     * @apiNote\n+     * {@link Throwable}s thrown by the constructor, including {@link\n+     * Error}s, are wrapped in {@link InvocationTargetException}s.\n+     * The wrapped throwable should be handled; ignoring the wrapped\n+     * throwable, such as passing the {@link InvocationTargetException}\n+     * as the cause to construct a new throwable, may fail in cases\n+     * like {@link OutOfMemoryError} or {@link StackOverflowError}.\n+     * The JVM may throw new errors that hide the original ones.\n+     *\n@@ -474,1 +483,1 @@\n-     *              throws an exception.\n+     *              throws any {@link Throwable}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -529,0 +529,10 @@\n+     * @apiNote\n+     * {@link Throwable}s thrown by the underlying method, including\n+     * {@link Error}s like {@link AbstractMethodError}, are wrapped\n+     * in {@link InvocationTargetException}s.\n+     * The wrapped throwable should be handled; ignoring the wrapped\n+     * throwable, such as passing the {@link InvocationTargetException}\n+     * as the cause to construct a new throwable, may fail in cases\n+     * like {@link OutOfMemoryError} or {@link StackOverflowError}.\n+     * The JVM may throw new errors that hide the original ones.\n+     *\n@@ -549,1 +559,1 @@\n-     *              throws an exception.\n+     *              throws any {@link Throwable}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}