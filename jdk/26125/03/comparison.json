{"files":[{"patch":"@@ -3275,1 +3275,4 @@\n-  assert(OptimizePtrCompare, \"sanity\");\n+  const TypeInt* UNKNOWN = TypeInt::CC;    \/\/ [-1, 0,1]\n+  if (!OptimizePtrCompare) {\n+    return UNKNOWN;\n+  }\n@@ -3278,1 +3281,0 @@\n-  const TypeInt* UNKNOWN = TypeInt::CC;    \/\/ [-1, 0,1]\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8361140\n+ * @summary Test ConnectionGraph::reduce_phi_on_cmp when OptimizePtrCompare is disabled\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.TestReducePhiOnCmpWithNoOptPtrCompare\n+ *\/\n+\n+package compiler.c2;\n+\n+import java.util.Random;\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+public class TestReducePhiOnCmpWithNoOptPtrCompare {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:-OptimizePtrCompare\",\"-XX:+VerifyReduceAllocationMerges\",\"-XX:+IgnoreUnrecognizedVMOptions\");\n+    }\n+\n+    @Run(test = {\"testReducePhiOnCmp_C2\"})\n+    public void runner(RunInfo info) {\n+        Random random = info.getRandom();\n+        boolean cond = random.nextBoolean();\n+        int x = random.nextInt();\n+        int y = random.nextInt();\n+        Asserts.assertEQ(testReducePhiOnCmp_Interp(cond, x, y),testReducePhiOnCmp_C2(cond, x, y));\n+    }\n+\n+    @Test\n+    int testReducePhiOnCmp_C2(boolean cond, int x, int y) { return testReducePhiOnCmp(cond, x, y); }\n+\n+    @DontCompile\n+    int testReducePhiOnCmp_Interp(boolean cond, int x, int y) { return testReducePhiOnCmp(cond, x, y); }\n+\n+    int testReducePhiOnCmp(boolean cond,int x,int y) {\n+        Point p = null;\n+\n+        if (cond) {\n+            p = new Point(x*x, y*y);\n+        } else if (x > y) {\n+            p = new Point(x+y, x*y);\n+        }\n+\n+        if (p != null) {\n+            return p.x * p.y;\n+        } else {\n+            return 1984;\n+        }\n+    }\n+\n+    static class Point {\n+        int x, y;\n+        Point(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this) return true;\n+            if (!(o instanceof Point)) return false;\n+            Point p = (Point) o;\n+            return (p.x == x) && (p.y == y);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReducePhiOnCmpWithNoOptPtrCompare.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -79,1 +79,15 @@\n-        framework.addScenarios(scenario0, scenario1, scenario2).start();\n+        Scenario scenario3 = new Scenario(3, \"-XX:+UnlockDiagnosticVMOptions\",\n+                                             \"-XX:+ReduceAllocationMerges\",\n+                                             \"-XX:+TraceReduceAllocationMerges\",\n+                                             \"-XX:+DeoptimizeALot\",\n+                                             \"-XX:+UseCompressedOops\",\n+                                             \"-XX:+UseCompressedClassPointers\",\n+                                             \"-XX:-OptimizePtrCompare\",\n+                                             \"-XX:+VerifyReduceAllocationMerges\",\n+                                             \"-XX:CompileCommand=inline,*::charAt*\",\n+                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n+                                             \"-XX:CompileCommand=inline,*Point::*\",\n+                                             \"-XX:CompileCommand=inline,*Nested::*\",\n+                                             \"-XX:CompileCommand=exclude,*::dummy*\");\n+\n+        framework.addScenarios(scenario0, scenario1, scenario2, scenario3).start();\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/AllocationMergesTests.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}