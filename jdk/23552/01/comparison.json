{"files":[{"patch":"@@ -950,5 +950,19 @@\n-  \/\/ Concurrent weak root processing\n-  ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  heap->workers()->run_task(&task);\n+  {\n+    \/\/ Concurrent weak root processing\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    heap->workers()->run_task(&task);\n+  }\n+\n+  {\n+    \/\/ It is possible for mutators executing the load reference barrier to have\n+    \/\/ loaded an oop through a weak handle that has since been nulled out by\n+    \/\/ weak root processing. Handshaking here forces them to complete the\n+    \/\/ barrier before the GC cycle continues and does something that would\n+    \/\/ change the evaluation of the barrier (for example, resetting the TAMS\n+    \/\/ on trashed regions could make an oop appear to be marked _after_ the\n+    \/\/ region has been recycled).\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_rendezvous);\n+    heap->rendezvous_threads(\"Shenandoah Concurrent Weak Roots\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-  _abbreviated(false) {\n+  _abbreviated(false),\n+  _consecutive_degen_with_bad_progress(0) {\n@@ -304,2 +305,11 @@\n-  \/\/ Check for futility and fail. There is no reason to do several back-to-back Degenerated cycles,\n-  \/\/ because that probably means the heap is overloaded and\/or fragmented.\n+  \/\/ The most common scenario for lack of good progress following a degenerated GC is an accumulation of floating\n+  \/\/ garbage during the most recently aborted concurrent GC effort.  With generational GC, it is far more effective to\n+  \/\/ reclaim this floating garbage with another degenerated cycle (which focuses on young generation and might require\n+  \/\/ a pause of 200 ms) rather than a full GC cycle (which may require over 2 seconds with a 10 GB old generation).\n+  \/\/\n+  \/\/ In generational mode, we'll only upgrade to full GC if we've done two degen cycles in a row and both indicated\n+  \/\/ bad progress.  In non-generational mode, we'll preserve the original behavior, which is to upgrade to full\n+  \/\/ immediately following a degenerated cycle with bad progress.  This preserves original behavior of non-generational\n+  \/\/ Shenandoah so as to avoid introducing \"surprising new behavior.\"  It also makes less sense with non-generational\n+  \/\/ Shenandoah to replace a full GC with a degenerated GC, because both have similar pause times in non-generational\n+  \/\/ mode.\n@@ -307,0 +317,6 @@\n+    _consecutive_degen_with_bad_progress++;\n+  } else {\n+    _consecutive_degen_with_bad_progress = 0;\n+  }\n+  if (!heap->mode()->is_generational() ||\n+      ((heap->shenandoah_policy()->consecutive_degenerated_gc_count() > 1) && (_consecutive_degen_with_bad_progress >= 2))) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  size_t _consecutive_degen_with_bad_progress;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}