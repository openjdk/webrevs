{"files":[{"patch":"@@ -950,5 +950,19 @@\n-  \/\/ Concurrent weak root processing\n-  ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  heap->workers()->run_task(&task);\n+  {\n+    \/\/ Concurrent weak root processing\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    heap->workers()->run_task(&task);\n+  }\n+\n+  {\n+    \/\/ It is possible for mutators executing the load reference barrier to have\n+    \/\/ loaded an oop through a weak handle that has since been nulled out by\n+    \/\/ weak root processing. Handshaking here forces them to complete the\n+    \/\/ barrier before the GC cycle continues and does something that would\n+    \/\/ change the evaluation of the barrier (for example, resetting the TAMS\n+    \/\/ on trashed regions could make an oop appear to be marked _after_ the\n+    \/\/ region has been recycled).\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_rendezvous);\n+    heap->rendezvous_threads(\"Shenandoah Concurrent Weak Roots\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}