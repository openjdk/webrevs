{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.Paths;\n@@ -40,0 +41,2 @@\n+    private static String javaHome = System.getProperty(\"java.home\");\n+\n@@ -41,1 +44,0 @@\n-        String javaHome = System.getProperty(\"java.home\");\n@@ -46,0 +48,1 @@\n+                    JModSymbolFileMatcher jsfm = new JModSymbolFileMatcher(jmodFile.toString());\n@@ -47,1 +50,1 @@\n-                                    .anyMatch(JmodExcludedFiles::isNativeDebugSymbol)) {\n+                                    .anyMatch(jsfm::isNativeDebugSymbol)) {\n@@ -55,4 +58,5 @@\n-    private static boolean isNativeDebugSymbol(String name) {\n-        int index = name.indexOf(\"\/\");\n-        if (index < 0) {\n-            throw new RuntimeException(\"unexpected entry name: \" + name);\n+    static class JModSymbolFileMatcher {\n+        private String jmod;\n+\n+        JModSymbolFileMatcher(String jmod) {\n+            this.jmod = jmod;\n@@ -60,7 +64,32 @@\n-        String section = name.substring(0, index);\n-        if (section.equals(\"lib\") || section.equals(\"bin\")) {\n-            if (OperatingSystem.isMacOS()) {\n-                String n = name.substring(index+1);\n-                int i = n.indexOf(\"\/\");\n-                if (i != -1) {\n-                    return n.substring(0, i).endsWith(\".dSYM\");\n+\n+        boolean isNativeDebugSymbol(String name) {\n+            int index = name.indexOf(\"\/\");\n+            if (index < 0) {\n+                throw new RuntimeException(\"unexpected entry name: \" + name);\n+            }\n+            String section = name.substring(0, index);\n+            if (section.equals(\"lib\") || section.equals(\"bin\")) {\n+                if (OperatingSystem.isMacOS()) {\n+                    String n = name.substring(index + 1);\n+                    int i = n.indexOf(\"\/\");\n+                    if (i != -1) {\n+                        if (n.substring(0, i).endsWith(\".dSYM\")) {\n+                            System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n+                            return true;\n+                        }\n+                    }\n+                }\n+                if (OperatingSystem.isWindows() && name.endsWith(\".pdb\")) {\n+                    \/\/ on Windows we check if we should have public symbols through --with-external-symbols-in-bundles=public (JDK-8237192)\n+                    String strippedpdb = javaHome + \"\/bin\/\" + name.substring(index + 1, name.length() - 4) + \".stripped.pdb\";\n+                    if (!Files.exists(Paths.get(strippedpdb))) {\n+                        System.err.println(\"Found symbols in \" + jmod + \": \" + name +\n+                                \". No stripped pdb file \" + strippedpdb + \" exists.\");\n+                        return true;\n+                    }\n+                }\n+                if (name.endsWith(\".diz\")\n+                        || name.endsWith(\".debuginfo\")\n+                        || name.endsWith(\".map\")) {\n+                    System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n+                    return true;\n@@ -69,4 +98,1 @@\n-            return name.endsWith(\".diz\")\n-                    || name.endsWith(\".debuginfo\")\n-                    || name.endsWith(\".map\")\n-                    || name.endsWith(\".pdb\");\n+            return false;\n@@ -74,1 +100,0 @@\n-        return false;\n","filename":"test\/jdk\/jdk\/modules\/etc\/JmodExcludedFiles.java","additions":43,"deletions":18,"binary":false,"changes":61,"status":"modified"}]}