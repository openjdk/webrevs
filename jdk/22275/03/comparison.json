{"files":[{"patch":"@@ -1756,6 +1756,2 @@\n-  Node* init = target_loop_head->init_trip();\n-  Node* stride = target_loop_head->stride();\n-  LoopNode* target_outer_loop_head = target_loop_head->skip_strip_mined();\n-  Node* target_loop_entry = target_outer_loop_head->in(LoopNode::EntryControl);\n-  CreateAssertionPredicatesVisitor create_assertion_predicates_visitor(init, stride, target_loop_entry, this,\n-                                                                       _node_in_loop_body, clone_template);\n+  CreateAssertionPredicatesVisitor create_assertion_predicates_visitor(target_loop_head, this, _node_in_loop_body,\n+                                                                       clone_template);\n@@ -1765,5 +1761,0 @@\n-  if (create_assertion_predicates_visitor.has_created_predicates()) {\n-    IfTrueNode* last_created_predicate_success_proj = create_assertion_predicates_visitor.last_created_success_proj();\n-    _igvn.replace_input_of(target_outer_loop_head, LoopNode::EntryControl, last_created_predicate_success_proj);\n-    set_idom(target_outer_loop_head, last_created_predicate_success_proj, dom_depth(target_outer_loop_head));\n-  }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1366,0 +1366,6 @@\n+  \/\/ Replace the control input of 'node' with 'new_control' and set the dom depth to the one of 'new_control'.\n+  void replace_control(Node* node, Node* new_control) {\n+    _igvn.replace_input_of(node, 0, new_control);\n+    set_idom(node, new_control, dom_depth(new_control));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -882,0 +882,13 @@\n+CreateAssertionPredicatesVisitor::CreateAssertionPredicatesVisitor(CountedLoopNode* target_loop_head,\n+                                                                   PhaseIdealLoop* phase,\n+                                                                   const NodeInLoopBody& node_in_loop_body,\n+                                                                   const bool clone_template)\n+    : _init(target_loop_head->init_trip()),\n+      _stride(target_loop_head->stride()),\n+      _old_target_loop_entry(target_loop_head->skip_strip_mined()->in(LoopNode::EntryControl)),\n+      _current_predicate_chain_head(target_loop_head->skip_strip_mined()), \/\/ Initially no predicates, yet.\n+      _phase(phase),\n+      _has_hoisted_check_parse_predicates(false),\n+      _node_in_loop_body(node_in_loop_body),\n+      _clone_template(clone_template) {}\n+\n@@ -898,1 +911,6 @@\n-    _new_control = clone_template_and_replace_init_input(template_assertion_predicate);\n+    IfTrueNode* cloned_template_success_proj = clone_template_and_replace_init_input(template_assertion_predicate);\n+    initialize_from_template(template_assertion_predicate, cloned_template_success_proj);\n+    _current_predicate_chain_head = cloned_template_success_proj->in(0);\n+  } else {\n+    IfTrueNode* initialized_success_proj = initialize_from_template(template_assertion_predicate, _old_target_loop_entry);\n+    _current_predicate_chain_head = initialized_success_proj->in(0);\n@@ -900,1 +918,0 @@\n-  _new_control = initialize_from_template(template_assertion_predicate);\n@@ -905,1 +922,1 @@\n-    const TemplateAssertionPredicate& template_assertion_predicate) const {\n+    const TemplateAssertionPredicate& template_assertion_predicate, Node* new_control) const {\n@@ -910,1 +927,1 @@\n-                                                                                                   _new_control,\n+                                                                                                   new_control,\n@@ -914,0 +931,1 @@\n+  rewire_to_old_predicate_chain_head(initialized_predicate);\n@@ -921,2 +939,40 @@\n-  _phase->register_new_node(opaque_init, _new_control);\n-  return template_assertion_predicate.clone_and_replace_init(_new_control, opaque_init, _phase);\n+  _phase->register_new_node(opaque_init, _old_target_loop_entry);\n+  return template_assertion_predicate.clone_and_replace_init(_old_target_loop_entry, opaque_init, _phase);\n+}\n+\n+\/\/ Rewire the newly created predicates to the old predicate chain head (i.e. '_current_predicate_chain_head') by\n+\/\/ rewiring the current control input of '_current_predicate_chain_head' from '_old_target_loop_entry' to\n+\/\/ 'initialized_assertion_predicate_success_proj'. This is required because we walk the predicate chain from the loop\n+\/\/ up and clone Template Assertion Predicates on the fly:\n+\/\/\n+\/\/          x\n+\/\/          |                                               old target\n+\/\/  Template Assertion                                      loop entry\n+\/\/     Predicate 1             old target        clone           |    \\\n+\/\/          |                  loop entry        TAP 2           |     cloned Template Assertion\n+\/\/  Template Assertion             |            ======>          |            Predicate 2\n+\/\/     Predicate 2            target loop                        |\n+\/\/          |                                               target loop #_current_predicate_chain_head\n+\/\/     source loop\n+\/\/\n+\/\/\n+\/\/               old target                                                        old target\n+\/\/               loop entry                                                        loop entry\n+\/\/                    |    \\                                 rewire                     |\n+\/\/                    |    cloned Template Assertion         to old         cloned Template Assertion #current_predicate\n+\/\/   initialize       |           Predicate 2               predicate              Predicate 2         _chain_head (new)\n+\/\/     TAP 2          |               |                     chain head                  |\n+\/\/    ======>         |      Initialized Assertion           ======>           Initialized Assertion\n+\/\/                    |          Predicate 2                                        Predicate 2\n+\/\/                    |                                                                 |\n+\/\/               target loop #_current_predicate_chain_head                        target loop\n+\/\/\n+void CreateAssertionPredicatesVisitor::rewire_to_old_predicate_chain_head(\n+    Node* initialized_assertion_predicate_success_proj) const {\n+  if (_current_predicate_chain_head->is_Loop()) {\n+    assert(_current_predicate_chain_head->in(LoopNode::EntryControl) == _old_target_loop_entry, \"must be old loop entry\");\n+    _phase->replace_loop_entry(_current_predicate_chain_head->as_Loop(), initialized_assertion_predicate_success_proj);\n+  } else {\n+    assert(_current_predicate_chain_head->in(0) == _old_target_loop_entry, \"must be old loop entry\");\n+    _phase->replace_control(_current_predicate_chain_head, initialized_assertion_predicate_success_proj);\n+  }\n@@ -955,1 +1011,1 @@\n-    _phase->igvn().replace_input_of(new_control_out, LoopNode::EntryControl, initialized_success_proj);\n+    _phase->replace_loop_entry(new_control_out->as_Loop(), initialized_success_proj);\n@@ -957,1 +1013,1 @@\n-    _phase->igvn().replace_input_of(new_control_out, 0, initialized_success_proj);\n+    _phase->replace_control(new_control_out, initialized_success_proj);\n@@ -959,1 +1015,0 @@\n-  _phase->set_idom(new_control_out, initialized_success_proj, _phase->dom_depth(new_control_out));\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":64,"deletions":9,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -987,1 +987,1 @@\n-  Node* _new_control;\n+  Node* _current_predicate_chain_head;\n@@ -994,1 +994,3 @@\n-  IfTrueNode* initialize_from_template(const TemplateAssertionPredicate& template_assertion_predicate) const;\n+  IfTrueNode* initialize_from_template(const TemplateAssertionPredicate& template_assertion_predicate,\n+                                       Node* new_control) const;\n+  void rewire_to_old_predicate_chain_head(Node* initialized_assertion_predicate_success_proj) const;\n@@ -997,10 +999,2 @@\n-  CreateAssertionPredicatesVisitor(Node* init, Node* stride, Node* new_control, PhaseIdealLoop* phase,\n-                                   const NodeInLoopBody& node_in_loop_body, const bool clone_template)\n-      : _init(init),\n-        _stride(stride),\n-        _old_target_loop_entry(new_control),\n-        _new_control(new_control),\n-        _phase(phase),\n-        _has_hoisted_check_parse_predicates(false),\n-        _node_in_loop_body(node_in_loop_body),\n-        _clone_template(clone_template) {}\n+  CreateAssertionPredicatesVisitor(CountedLoopNode* target_loop_head, PhaseIdealLoop* phase,\n+                                   const NodeInLoopBody& node_in_loop_body, bool clone_template);\n@@ -1013,14 +1007,0 @@\n-\n-  \/\/ Did we create any new Initialized Assertion Predicates?\n-  bool has_created_predicates() const {\n-    return _new_control != _old_target_loop_entry;\n-  }\n-\n-  \/\/ Return the last created node by this visitor or the originally provided 'new_control' to the visitor if there was\n-  \/\/ no new node created (i.e. no Template Assertion Predicates found).\n-  IfTrueNode* last_created_success_proj() const {\n-    assert(has_created_predicates(), \"should only be queried if new nodes have been created\");\n-    assert(_new_control->unique_ctrl_out_or_null() == nullptr, \"no control outputs, yet\");\n-    assert(_new_control->is_IfTrue(), \"Assertion Predicates only have IfTrue on success proj\");\n-    return _new_control->as_IfTrue();\n-  }\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"}]}