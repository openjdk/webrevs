{"files":[{"patch":"@@ -204,1 +204,1 @@\n-      InstanceKlass* s = ik->java_super();\n+      InstanceKlass* s = ik->super();\n@@ -239,1 +239,1 @@\n-    InstanceKlass* s = ik->java_super();\n+    InstanceKlass* s = ik->super();\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    InstanceKlass* super = ik->java_super();\n+    InstanceKlass* super = ik->super();\n@@ -154,1 +154,1 @@\n-  InstanceKlass* s = ik->java_super();\n+  InstanceKlass* s = ik->super();\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-      assert(ik->java_super()->is_loaded(), \"must be\");\n+      assert(ik->super()->is_loaded(), \"must be\");\n@@ -437,1 +437,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-  if (k->java_super() != specified_super) {\n+  if (k->super() != specified_super) {\n@@ -567,1 +567,1 @@\n-          k->java_super()->external_name());\n+          k->super()->external_name());\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-    InstanceKlass* super = k->java_super();\n+    InstanceKlass* super = k->super();\n@@ -168,1 +168,1 @@\n-    InstanceKlass* super = k->java_super();\n+    InstanceKlass* super = k->super();\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  sort_methods(ik->java_super());\n+  sort_methods(ik->super());\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    klass = klass->java_super();\n+    klass = klass->super();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,2 +194,2 @@\n-    if (ik->java_super()) {\n-      dump(ik->java_super());\n+    if (ik->super()) {\n+      dump(ik->super());\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1575,1 +1575,1 @@\n-      ik = ik->java_super();\n+      ik = ik->super();\n@@ -1594,1 +1594,1 @@\n-    ik = ik->java_super();\n+    ik = ik->super();\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3960,1 +3960,1 @@\n-  const InstanceKlass* const super = ik->java_super();\n+  const InstanceKlass* const super = ik->super();\n@@ -4095,1 +4095,1 @@\n-  const InstanceKlass* const super = this_klass->java_super();\n+  const InstanceKlass* const super = this_klass->super();\n@@ -4213,1 +4213,1 @@\n-      const InstanceKlass* k = this_klass->java_super();\n+      const InstanceKlass* k = this_klass->super();\n@@ -4245,1 +4245,1 @@\n-          k = super_m->method_holder()->java_super();\n+          k = super_m->method_holder()->super();\n@@ -4249,1 +4249,1 @@\n-        k = k->java_super();\n+        k = k->super();\n@@ -5295,1 +5295,1 @@\n-      if (ik->java_super() != nullptr) {\n+      if (ik->super() != nullptr) {\n@@ -5298,1 +5298,1 @@\n-                   ik->java_super()->external_name());\n+                   ik->super()->external_name());\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    InstanceKlass* next_super() { return _class->java_super(); }\n+    InstanceKlass* next_super() { return _class->super(); }\n@@ -639,1 +639,1 @@\n-  InstanceKlass* super = klass->java_super();\n+  InstanceKlass* super = klass->super();\n@@ -671,1 +671,1 @@\n-    super = super->java_super();\n+    super = super->super();\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-    ik = ik->java_super() == nullptr ? nullptr : ik->java_super();\n+    ik = ik->super() == nullptr ? nullptr : ik->super();\n@@ -477,1 +477,1 @@\n-          ik = ik->java_super();\n+          ik = ik->super();\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-      InstanceKlass* superk = klassk->java_super();\n+      InstanceKlass* superk = klassk->super();\n@@ -1052,1 +1052,1 @@\n-    bool check_super = check_shared_class_super_type(ik, ik->java_super(),\n+    bool check_super = check_shared_class_super_type(ik, ik->super(),\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-    k = k->java_super();\n+    k = k->super();\n@@ -332,1 +332,1 @@\n-  InstanceKlass* super = k->java_super();\n+  InstanceKlass* super = k->super();\n@@ -574,1 +574,1 @@\n-  if (k->java_super() != nullptr && has_been_redefined(k->java_super())) {\n+  if (k->super() != nullptr && has_been_redefined(k->super())) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-  InstanceKlass* super = klass->java_super();\n+  InstanceKlass* super = klass->super();\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-  InstanceKlass* const super = ik->java_super();\n+  InstanceKlass* const super = ik->super();\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    ik = ik->java_super();\n+    ik = ik->super();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -367,0 +367,1 @@\n+        assert(cie->klass()->is_instance_klass(), \"elements array contains only instance klasses\");\n@@ -405,1 +406,1 @@\n-  Klass* super = ((InstanceKlass*)cie->klass())->java_super();\n+  InstanceKlass* super = InstanceKlass::cast(cie->klass())->super();\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-        result = result->java_super();\n+        result = result->super();\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -680,1 +680,1 @@\n-  deallocate_interfaces(loader_data, java_super(), local_interfaces(), transitive_interfaces());\n+  deallocate_interfaces(loader_data, super(), local_interfaces(), transitive_interfaces());\n@@ -751,1 +751,1 @@\n-         java_super() == vmClasses::Record_klass();\n+         super() == vmClasses::Record_klass();\n@@ -766,1 +766,1 @@\n-  InstanceKlass* s = java_super();\n+  InstanceKlass* s = super();\n@@ -768,1 +768,1 @@\n-          (s != nullptr && s->java_super() == vmClasses::Enum_klass()));\n+          (s != nullptr && s->super() == vmClasses::Enum_klass()));\n@@ -832,1 +832,1 @@\n-  InstanceKlass* s = java_super();\n+  InstanceKlass* s = super();\n@@ -945,1 +945,1 @@\n-  InstanceKlass* super_klass = java_super();\n+  InstanceKlass* super_klass = super();\n@@ -1468,1 +1468,1 @@\n-  InstanceKlass* super_ik = ik->java_super();\n+  InstanceKlass* super_ik = ik->super();\n@@ -1834,1 +1834,1 @@\n-  { InstanceKlass* supr = java_super();\n+  { InstanceKlass* supr = super();\n@@ -1854,1 +1854,1 @@\n-  { InstanceKlass* supr = java_super();\n+  { InstanceKlass* supr = super();\n@@ -1879,1 +1879,1 @@\n-    klass = klass->java_super();\n+    klass = klass->super();\n@@ -1922,1 +1922,1 @@\n-  InstanceKlass* super = java_super();\n+  InstanceKlass* super = this->super();\n@@ -1939,1 +1939,1 @@\n-  InstanceKlass* super = java_super();\n+  InstanceKlass* super = this->super();\n@@ -2244,1 +2244,1 @@\n-    klass = klass->java_super();\n+    klass = klass->super();\n@@ -2259,1 +2259,1 @@\n-    klass = klass->java_super();\n+    klass = klass->super();\n@@ -2856,1 +2856,1 @@\n-  if (java_super() != nullptr && !java_super()->can_be_verified_at_dumptime()) {\n+  if (super() != nullptr && !super()->can_be_verified_at_dumptime()) {\n@@ -3988,1 +3988,1 @@\n-                       p2i(this),  p2i(java_super()));\n+                       p2i(this),  p2i(super()));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -921,0 +921,6 @@\n+  \/\/ This hides Klass::super(). The _super of an InstanceKlass is\n+  \/\/ always an InstanceKlass (or nullptr)\n+  InstanceKlass* super() const {\n+    return (Klass::super() == nullptr) ? nullptr : InstanceKlass::cast(Klass::super());\n+  }\n+\n@@ -922,1 +928,1 @@\n-    return (super() == nullptr) ? nullptr : cast(super());\n+    return InstanceKlass::super();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -220,1 +220,3 @@\n-  \/\/ If this is not what your code expects, you're probably looking for Klass::java_super().\n+  \/\/ If this is not what your code expects, you're probably looking for:\n+  \/\/ - Klass::java_super() - if you have a Klass*\n+  \/\/ - InstanceKlass::super() - if you have an InstanceKlass* ik, ik->super() returns InstanceKlass*.\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-    superk = superk->java_super();\n+    superk = superk->super();\n@@ -686,1 +686,1 @@\n-  const InstanceKlass* k = super;\n+  const InstanceKlass* ik = super;\n@@ -691,1 +691,1 @@\n-  while (k != nullptr) {\n+  while (ik != nullptr) {\n@@ -693,1 +693,1 @@\n-    super_method = InstanceKlass::cast(k)->lookup_method(name, signature);\n+    super_method = ik->lookup_method(name, signature);\n@@ -725,1 +725,1 @@\n-      k = superk->java_super(); \/\/ haven't found an override match yet; continue to look\n+      ik = superk->super(); \/\/ haven't found an override match yet; continue to look\n@@ -777,1 +777,1 @@\n-    if (is_miranda(m, ik()->methods(), ik()->default_methods(), ik()->java_super(), klass()->is_interface())) {\n+    if (is_miranda(m, ik()->methods(), ik()->default_methods(), ik()->super(), klass()->is_interface())) {\n@@ -868,1 +868,1 @@\n-  for (const InstanceKlass* cursuper = super; cursuper != nullptr; cursuper = cursuper->java_super()) {\n+  for (const InstanceKlass* cursuper = super; cursuper != nullptr; cursuper = cursuper->super()) {\n@@ -962,1 +962,1 @@\n-  get_mirandas(&mirandas, nullptr, ik()->java_super(), ik()->methods(),\n+  get_mirandas(&mirandas, nullptr, ik()->super(), ik()->methods(),\n@@ -1574,2 +1574,1 @@\n-    InstanceKlass* sk = InstanceKlass::cast(super);\n-    klassVtable vt = sk->vtable();\n+    klassVtable vt = super->vtable();\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-  for (InstanceKlass* super_klass = ik->java_super(); super_klass != nullptr; super_klass = super_klass->java_super()) {\n+  for (InstanceKlass* super_klass = ik->super(); super_klass != nullptr; super_klass = super_klass->super()) {\n@@ -482,1 +482,1 @@\n-  for (InstanceKlass* klass = ik; klass != nullptr; klass = klass->java_super()) {\n+  for (InstanceKlass* klass = ik; klass != nullptr; klass = klass->super()) {\n@@ -487,1 +487,1 @@\n-  for (InstanceKlass* klass = ik; klass != nullptr; klass = klass->java_super()) {\n+  for (InstanceKlass* klass = ik; klass != nullptr; klass = klass->super()) {\n@@ -2601,4 +2601,4 @@\n-    InstanceKlass* java_super = ik->java_super();\n-    if (java_super != nullptr && java_super != vmClasses::Object_klass()) {\n-      oop super = java_super->java_mirror();\n-      if (!CallbackInvoker::report_superclass_reference(mirror, super)) {\n+    InstanceKlass* super_klass = ik->super();\n+    if (super_klass != nullptr && super_klass != vmClasses::Object_klass()) {\n+      oop super_oop = super_klass->java_mirror();\n+      if (!CallbackInvoker::report_superclass_reference(mirror, super_oop)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1479,1 +1479,1 @@\n-  InstanceKlass* super = klass->java_super();\n+  InstanceKlass* super = klass->super();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1143,1 +1143,1 @@\n-                         InstanceKlass::cast(exception->klass())->external_name());\n+                         exception->klass()->external_name());\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-            InstanceKlass::cast(PENDING_EXCEPTION->klass())->\n+            PENDING_EXCEPTION->klass()->\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -768,1 +768,1 @@\n-  static void dump_instance_class(AbstractDumpWriter* writer, Klass* k);\n+  static void dump_instance_class(AbstractDumpWriter* writer, InstanceKlass* ik);\n@@ -1207,3 +1207,1 @@\n-void DumperSupport::dump_instance_class(AbstractDumpWriter* writer, Klass* k) {\n-  InstanceKlass* ik = InstanceKlass::cast(k);\n-\n+void DumperSupport::dump_instance_class(AbstractDumpWriter* writer, InstanceKlass* ik) {\n@@ -1230,2 +1228,2 @@\n-  InstanceKlass* java_super = ik->java_super();\n-  if (java_super == nullptr) {\n+  InstanceKlass* super = ik->super();\n+  if (super == nullptr) {\n@@ -1234,1 +1232,1 @@\n-    writer->write_classID(java_super);\n+    writer->write_classID(super);\n@@ -1508,1 +1506,1 @@\n-      DumperSupport::dump_instance_class(writer(), k);\n+      DumperSupport::dump_instance_class(writer(), InstanceKlass::cast(k));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}