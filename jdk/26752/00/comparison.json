{"files":[{"patch":"@@ -47,1 +47,0 @@\n-import sun.awt.AppContext;\n@@ -108,0 +107,5 @@\n+    private static final IIORegistry registry;\n+    static {\n+        registry = new IIORegistry();\n+    }\n+\n@@ -112,5 +116,1 @@\n-     *\n-     * <p> Each {@code ThreadGroup} will receive its own instance.\n-     *\n-     * @return the default registry for the current\n-     * {@code ThreadGroup}.\n+     * @return the default registry for the Image I\/O API\n@@ -119,8 +119,0 @@\n-        AppContext context = AppContext.getAppContext();\n-        IIORegistry registry =\n-            (IIORegistry)context.get(IIORegistry.class);\n-        if (registry == null) {\n-            \/\/ Create an instance for this AppContext\n-            registry = new IIORegistry();\n-            context.put(IIORegistry.class, registry);\n-        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/IIORegistry.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n- * sees fit, so long as it has the appropriate runtime permission.\n+ * sees fit.\n@@ -286,2 +286,1 @@\n-     * it is deregistered from a category or when the registry is\n-     * finalized.\n+     * it is deregistered from a category.\n@@ -316,2 +315,1 @@\n-     * it is deregistered from a category or when the registry is\n-     * finalized.\n+     * it is deregistered from a category.\n@@ -663,0 +661,6 @@\n+     * <p>\n+     * If an application creates a new {@code ServiceRegistry} instance and registers providers,\n+     * and at some point no longer needs the instance, it should call this method to ensure\n+     * that all providers which are instances of {@link RegisterableService}\n+     * receive a {@link RegisterableService#onDeregistration(ServiceRegistry, Class<?>)} call back,\n+     * before allowing the instance to be garbage collected.\n@@ -670,20 +674,0 @@\n-    \/**\n-     * Finalizes this object prior to garbage collection.  The\n-     * {@code deregisterAll} method is called to deregister all\n-     * currently registered service providers.  This method should not\n-     * be called from application code.\n-     *\n-     * @throws Throwable if an error occurs during superclass\n-     * finalization.\n-     *\n-     * @deprecated Finalization has been deprecated for removal.  See\n-     * {@link java.lang.Object#finalize} for background information and details\n-     * about migration options.\n-     *\/\n-    @Deprecated(since=\"9\", forRemoval=true)\n-    @SuppressWarnings(\"removal\")\n-    public void finalize() throws Throwable {\n-        deregisterAll();\n-        super.finalize();\n-    }\n-\n@@ -824,4 +808,0 @@\n-    @SuppressWarnings(\"removal\")\n-    public synchronized void finalize() {\n-        clear();\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/spi\/ServiceRegistry.java","additions":9,"deletions":29,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4421190\n- * @summary Tests that Image I\/O statics may be referenced properly from\n- *          multiple AppContexts, as would be the case for multiple Applets in a\n- *          single VM. Each AppContext should get its own copy of the registry\n- *          and the caching parameters in the ImageIO class.\n- * @modules java.desktop\/sun.awt\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import javax.imageio.ImageIO;\n-import javax.imageio.spi.IIORegistry;\n-\n-import sun.awt.SunToolkit;\n-\n-class TestThread extends Thread {\n-\n-    IIORegistry registry;\n-    boolean useCache;\n-    File cacheDirectory;\n-    boolean cacheSettingsOK = false;\n-    String threadName;\n-\n-    boolean gotCrosstalk = false;\n-\n-    public TestThread(ThreadGroup tg,\n-                      boolean useCache, File cacheDirectory,\n-                      String threadName) {\n-        super(tg, threadName);\n-        this.useCache = useCache;\n-        this.cacheDirectory = cacheDirectory;\n-        this.threadName = threadName;\n-    }\n-\n-    public void run() {\n-\/\/          System.out.println(\"Thread \" + threadName + \" in thread group \" +\n-\/\/                             getThreadGroup().getName());\n-\n-        \/\/ Create a new AppContext as though we were an applet\n-        SunToolkit.createNewAppContext();\n-\n-        \/\/ Get default registry and store reference\n-        this.registry = IIORegistry.getDefaultInstance();\n-\n-        for (int i = 0; i < 10; i++) {\n-\/\/              System.out.println(threadName +\n-\/\/                                 \": setting cache parameters to \" +\n-\/\/                                 useCache + \", \" + cacheDirectory);\n-            ImageIO.setUseCache(useCache);\n-            ImageIO.setCacheDirectory(cacheDirectory);\n-\n-            try {\n-                sleep(1000L);\n-            } catch (InterruptedException e) {\n-            }\n-\n-\/\/              System.out.println(threadName + \": reading cache parameters\");\n-            boolean newUseCache = ImageIO.getUseCache();\n-            File newCacheDirectory = ImageIO.getCacheDirectory();\n-            if (newUseCache != useCache ||\n-                newCacheDirectory != cacheDirectory) {\n-\/\/                  System.out.println(threadName + \": got \" +\n-\/\/                                     newUseCache + \", \" +\n-\/\/                                     newCacheDirectory);\n-\/\/                  System.out.println(threadName + \": crosstalk encountered!\");\n-                gotCrosstalk = true;\n-            }\n-        }\n-    }\n-\n-    public IIORegistry getRegistry() {\n-        return registry;\n-    }\n-\n-    public boolean gotCrosstalk() {\n-        return gotCrosstalk;\n-    }\n-}\n-\n-public class AppContextTest {\n-\n-    public AppContextTest() {\n-        ThreadGroup tg0 = new ThreadGroup(\"ThreadGroup0\");\n-        ThreadGroup tg1 = new ThreadGroup(\"ThreadGroup1\");\n-\n-        TestThread t0 =\n-            new TestThread(tg0, false, null, \"TestThread 0\");\n-        TestThread t1 =\n-            new TestThread(tg1, true, new File(\".\"), \"TestThread 1\");\n-\n-        t0.start();\n-        t1.start();\n-\n-        try {\n-            t0.join();\n-        } catch (InterruptedException ie0) {\n-        }\n-        try {\n-            t1.join();\n-        } catch (InterruptedException ie1) {\n-        }\n-\n-        if (t0.gotCrosstalk() || t1.gotCrosstalk()) {\n-            throw new RuntimeException(\"ImageIO methods had crosstalk!\");\n-        }\n-\n-        if (t0.getRegistry() == t1.getRegistry()) {\n-            throw new RuntimeException(\"ThreadGroups had same IIORegistry!\");\n-        }\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        new AppContextTest();\n-    }\n-}\n","filename":"test\/jdk\/javax\/imageio\/AppContextTest.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"}]}