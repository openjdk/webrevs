{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -276,9 +277,3 @@\n-        private static final VarHandle COUNT;\n-        static {\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                COUNT = l.findVarHandle(BaseThreadFactory.class, \"count\", long.class);\n-            } catch (Exception e) {\n-                throw new InternalError(e);\n-            }\n-        }\n+        private static final VarHandle COUNT = MhUtil.findVarHandle(\n+                MethodHandles.lookup(), \"count\", long.class);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -684,10 +685,3 @@\n-        private static final MethodHandle MH_asSpreader;\n-\n-        static {\n-            try {\n-                MH_asSpreader = IMPL_LOOKUP.findVirtual(MethodHandle.class, \"asSpreader\",\n-                        MethodType.methodType(MethodHandle.class, Class.class, int.class));\n-            } catch (ReflectiveOperationException ex) {\n-                throw newInternalError(ex);\n-            }\n-        }\n+        private static final MethodHandle MH_asSpreader = MhUtil.findVirtual(\n+                IMPL_LOOKUP, MethodHandle.class, \"asSpreader\",\n+                MethodType.methodType(MethodHandle.class, Class.class, int.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -105,8 +106,4 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            STATE = l.findVarHandle(Socket.class, \"state\", int.class);\n-            IN = l.findVarHandle(Socket.class, \"in\", InputStream.class);\n-            OUT = l.findVarHandle(Socket.class, \"out\", OutputStream.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        STATE = MhUtil.findVarHandle(l, \"state\", int.class);\n+        IN = MhUtil.findVarHandle(l, \"in\", InputStream.class);\n+        OUT = MhUtil.findVarHandle(l, \"out\", OutputStream.class);\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -432,9 +434,3 @@\n-    private static final VarHandle ATTACHMENT;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            ATTACHMENT = l.findVarHandle(SelectionKey.class, \"attachment\", Object.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n+    private static final VarHandle ATTACHMENT = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"attachment\", Object.class);\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/SelectionKey.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -49,9 +50,2 @@\n-    private static final VarHandle INVALID;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            INVALID = l.findVarHandle(AbstractSelectionKey.class, \"invalid\", boolean.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n+    private static final VarHandle INVALID = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"invalid\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectionKey.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+\n+import jdk.internal.invoke.MhUtil;\n@@ -75,9 +77,3 @@\n-    private static final VarHandle CLOSED;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            CLOSED = l.findVarHandle(AbstractSelector.class, \"closed\", boolean.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n+    private static final VarHandle CLOSED = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"closed\", boolean.class);\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelector.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -3082,8 +3084,4 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            RESULT = l.findVarHandle(CompletableFuture.class, \"result\", Object.class);\n-            STACK = l.findVarHandle(CompletableFuture.class, \"stack\", Completion.class);\n-            NEXT = l.findVarHandle(Completion.class, \"next\", Completion.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        RESULT = MhUtil.findVarHandle(l, \"result\", Object.class);\n+        STACK = MhUtil.findVarHandle(l, \"stack\", Completion.class);\n+        NEXT = MhUtil.findVarHandle(l, Completion.class, \"next\", Completion.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -533,9 +535,5 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            BOUND = l.findVarHandle(Exchanger.class, \"bound\", int.class);\n-            MATCH = l.findVarHandle(Node.class, \"match\", Object.class);\n-            ENTRY = l.findVarHandle(Slot.class, \"entry\", Node.class);\n-            AA = MethodHandles.arrayElementVarHandle(Slot[].class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        BOUND = MhUtil.findVarHandle(l, \"bound\", int.class);\n+        MATCH = MhUtil.findVarHandle(l, Node.class, \"match\", Object.class);\n+        ENTRY = MhUtil.findVarHandle(l, Slot.class, \"entry\", Node.class);\n+        AA = MethodHandles.arrayElementVarHandle(Slot[].class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Exchanger.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -585,8 +587,4 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            STATE = l.findVarHandle(FutureTask.class, \"state\", int.class);\n-            RUNNER = l.findVarHandle(FutureTask.class, \"runner\", Thread.class);\n-            WAITERS = l.findVarHandle(FutureTask.class, \"waiters\", WaitNode.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        STATE = MhUtil.findVarHandle(l, \"state\", int.class);\n+        RUNNER = MhUtil.findVarHandle(l, \"runner\", Thread.class);\n+        WAITERS = MhUtil.findVarHandle(l, \"waiters\", WaitNode.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -1140,1 +1142,2 @@\n-    private static final VarHandle STATE;\n+    private static final VarHandle STATE = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"state\", long.class);\n@@ -1142,7 +1145,0 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            STATE = l.findVarHandle(Phaser.class, \"state\", long.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Phaser.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -1096,11 +1097,4 @@\n-    private static final VarHandle ALLOCATIONSPINLOCK;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            ALLOCATIONSPINLOCK = l.findVarHandle(PriorityBlockingQueue.class,\n-                                                 \"allocationSpinLock\",\n-                                                 int.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle ALLOCATIONSPINLOCK =\n+            MhUtil.findVarHandle(\n+                    MethodHandles.lookup(), \"allocationSpinLock\", int.class);\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/PriorityBlockingQueue.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -993,7 +994,3 @@\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                FIRST_RESULT = l.findVarHandle(ShutdownOnSuccess.class, \"firstResult\", Object.class);\n-                FIRST_EXCEPTION = l.findVarHandle(ShutdownOnSuccess.class, \"firstException\", Throwable.class);\n-            } catch (Exception e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n+            MethodHandles.Lookup l = MethodHandles.lookup();\n+            FIRST_RESULT = MhUtil.findVarHandle(l, \"firstResult\", Object.class);\n+            FIRST_EXCEPTION = MhUtil.findVarHandle(l, \"firstException\", Throwable.class);\n@@ -1180,9 +1177,2 @@\n-        private static final VarHandle FIRST_EXCEPTION;\n-        static {\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                FIRST_EXCEPTION = l.findVarHandle(ShutdownOnFailure.class, \"firstException\", Throwable.class);\n-            } catch (Exception e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n-        }\n+        private static final VarHandle FIRST_EXCEPTION =\n+                MhUtil.findVarHandle(MethodHandles.lookup(), \"firstException\", Throwable.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -1508,10 +1510,4 @@\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                CTL = l.findVarHandle(BufferedSubscription.class, \"ctl\",\n-                                      int.class);\n-                DEMAND = l.findVarHandle(BufferedSubscription.class, \"demand\",\n-                                         long.class);\n-                QA = MethodHandles.arrayElementVarHandle(Object[].class);\n-            } catch (ReflectiveOperationException e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n+            MethodHandles.Lookup l = MethodHandles.lookup();\n+            CTL = MhUtil.findVarHandle(l, \"ctl\", int.class);\n+            DEMAND = MhUtil.findVarHandle(l, \"demand\", long.class);\n+            QA = MethodHandles.arrayElementVarHandle(Object[].class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -51,9 +52,2 @@\n-    private static final VarHandle STATE;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            STATE = l.findVarHandle(ThreadPerTaskExecutor.class, \"state\", int.class);\n-        } catch (Exception e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle STATE = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"state\", int.class);\n@@ -509,8 +503,4 @@\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                RESULT = l.findVarHandle(AnyResultHolder.class, \"result\", Object.class);\n-                EXCEPTION = l.findVarHandle(AnyResultHolder.class, \"exception\", Throwable.class);\n-                EXCEPTION_COUNT = l.findVarHandle(AnyResultHolder.class, \"exceptionCount\", int.class);\n-            } catch (Exception e) {\n-                throw new InternalError(e);\n-            }\n+            MethodHandles.Lookup l = MethodHandles.lookup();\n+            RESULT = MhUtil.findVarHandle(l, \"result\", Object.class);\n+            EXCEPTION = MhUtil.findVarHandle(l, \"exception\", Throwable.class);\n+            EXCEPTION_COUNT = MhUtil.findVarHandle(l, \"exceptionCount\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPerTaskExecutor.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -53,9 +55,2 @@\n-    private static final VarHandle VALUE;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            VALUE = l.findVarHandle(AtomicBoolean.class, \"value\", int.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle VALUE = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"value\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicBoolean.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -193,10 +195,2 @@\n-    private static final VarHandle PAIR;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            PAIR = l.findVarHandle(AtomicMarkableReference.class, \"pair\",\n-                                   Pair.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle PAIR = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"pair\", Pair.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicMarkableReference.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -53,9 +55,2 @@\n-    private static final VarHandle VALUE;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            VALUE = l.findVarHandle(AtomicReference.class, \"value\", Object.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle VALUE = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"value\", Object.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReference.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -193,10 +195,2 @@\n-    private static final VarHandle PAIR;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            PAIR = l.findVarHandle(AtomicStampedReference.class, \"pair\",\n-                                   Pair.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n-    }\n+    private static final VarHandle PAIR = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"pair\", Pair.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicStampedReference.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -141,9 +143,2 @@\n-        private static final VarHandle VALUE;\n-        static {\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                VALUE = l.findVarHandle(Cell.class, \"value\", long.class);\n-            } catch (ReflectiveOperationException e) {\n-                throw new ExceptionInInitializerError(e);\n-            }\n-        }\n+        private static final VarHandle VALUE = MhUtil.findVarHandle(\n+                MethodHandles.lookup(), \"value\", long.class);\n@@ -384,6 +379,4 @@\n-        try {\n-            MethodHandles.Lookup l1 = MethodHandles.lookup();\n-            BASE = l1.findVarHandle(Striped64.class,\n-                    \"base\", long.class);\n-            CELLSBUSY = l1.findVarHandle(Striped64.class,\n-                    \"cellsBusy\", int.class);\n+        MethodHandles.Lookup l1 = MethodHandles.lookup();\n+\n+        BASE = MhUtil.findVarHandle(l1, \"base\", long.class);\n+        CELLSBUSY = MhUtil.findVarHandle(l1, \"cellsBusy\", int.class);\n@@ -391,1 +384,1 @@\n-            MethodHandles.Lookup l2 = java.security.AccessController.doPrivileged(\n+        MethodHandles.Lookup l2 = java.security.AccessController.doPrivileged(\n@@ -400,5 +393,1 @@\n-            THREAD_PROBE = l2.findVarHandle(Thread.class,\n-                    \"threadLocalRandomProbe\", int.class);\n-        } catch (ReflectiveOperationException e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n+        THREAD_PROBE = MhUtil.findVarHandle(l2, \"threadLocalRandomProbe\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/Striped64.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.invoke.MhUtil;\n+\n@@ -373,9 +375,2 @@\n-        private static final VarHandle NEXT;\n-        static {\n-            try {\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                NEXT = l.findVarHandle(ForEachOrderedTask.class, \"next\", ForEachOrderedTask.class);\n-            } catch (Exception e) {\n-                throw new InternalError(e);\n-            }\n-        }\n+        private static final VarHandle NEXT = MhUtil.findVarHandle(\n+                MethodHandles.lookup(), \"next\", ForEachOrderedTask.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ForEachOps.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -456,10 +457,2 @@\n-            private static final VarHandle NEXT;\n-\n-            static {\n-                try {\n-                    MethodHandles.Lookup l = MethodHandles.lookup();\n-                    NEXT = l.findVarHandle(Hybrid.class, \"next\", Hybrid.class);\n-                } catch (Exception e) {\n-                    throw new InternalError(e);\n-                }\n-            }\n+            private static final VarHandle NEXT = MhUtil.findVarHandle(\n+                    MethodHandles.lookup(), \"next\", Hybrid.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -43,9 +44,2 @@\n-    static final VarHandle ASYNC_RELEASE_COUNT;\n-\n-    static {\n-        try {\n-            ASYNC_RELEASE_COUNT = MethodHandles.lookup().findVarHandle(ConfinedSession.class, \"asyncReleaseCount\", int.class);\n-        } catch (Throwable ex) {\n-            throw new ExceptionInInitializerError(ex);\n-        }\n-    }\n+    static final VarHandle ASYNC_RELEASE_COUNT= MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"asyncReleaseCount\", int.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -60,1 +61,3 @@\n-    static final VarHandle STATE;\n+    static final VarHandle STATE = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"state\", int.class);\n+\n@@ -72,8 +75,0 @@\n-    static {\n-        try {\n-            STATE = MethodHandles.lookup().findVarHandle(MemorySessionImpl.class, \"state\", int.class);\n-        } catch (Exception ex) {\n-            throw new ExceptionInInitializerError(ex);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -94,9 +95,2 @@\n-        static final VarHandle FST;\n-\n-        static {\n-            try {\n-                FST = MethodHandles.lookup().findVarHandle(ResourceList.class, \"fst\", ResourceCleanup.class);\n-            } catch (Throwable ex) {\n-                throw new ExceptionInInitializerError();\n-            }\n-        }\n+        static final VarHandle FST = MhUtil.findVarHandle(\n+                MethodHandles.lookup(), ResourceList.class, \"fst\", ResourceCleanup.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -41,1 +42,0 @@\n-import java.util.Map;\n@@ -59,2 +59,3 @@\n-    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS;\n-    private static final MethodHandle EMPTY_OBJECT_ARRAY_HANDLE = MethodHandles.constant(Object[].class, new Object[0]);\n+    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS = MhUtil.findVirtual(\n+            MethodHandles.lookup(), DowncallLinker.class, \"invokeInterpBindings\",\n+            methodType(Object.class, SegmentAllocator.class, Object[].class, InvocationData.class));\n@@ -62,9 +63,1 @@\n-    static {\n-        try {\n-            MethodHandles.Lookup lookup = MethodHandles.lookup();\n-            MH_INVOKE_INTERP_BINDINGS = lookup.findVirtual(DowncallLinker.class, \"invokeInterpBindings\",\n-                    methodType(Object.class, SegmentAllocator.class, Object[].class, InvocationData.class));\n-        } catch (ReflectiveOperationException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n+    private static final MethodHandle EMPTY_OBJECT_ARRAY_HANDLE = MethodHandles.constant(Object[].class, new Object[0]);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -160,9 +161,3 @@\n-            static final MethodHandle MH_SCALE;\n-            static {\n-                try {\n-                    MH_SCALE = MethodHandles.lookup().findVirtual(MemoryLayout.class, \"scale\",\n-                            MethodType.methodType(long.class, long.class, long.class));\n-                } catch (ReflectiveOperationException e) {\n-                    throw new ExceptionInInitializerError(e);\n-                }\n-            }\n+            static final MethodHandle MH_SCALE = MhUtil.findVirtual(\n+                    MethodHandles.lookup(), MemoryLayout.class, \"scale\",\n+                    MethodType.methodType(long.class, long.class, long.class));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.invoke;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+\n+\/**\n+ * Static factories for certain VarHandle\/MethodHandle variants.\n+ * <p>\n+ * The methods will throw an {@link InternalError} if the lookup fails.\n+ * <p>\n+ * Here is an example of how one of these methods could be used:\n+ * {@snippet lang=java\n+ * static MethodHandle BAR_HANDLE =\n+ *         MhUtil.findVirtual(MethodHandles.lookup(),\n+ *                 Foo.class,\"bar\",MethodType.methodType(int.class));\n+ * }\n+ *\/\n+public final class MhUtil {\n+\n+    private MhUtil() {}\n+\n+    public static VarHandle findVarHandle(MethodHandles.Lookup lookup,\n+                                          String name,\n+                                          Class<?> type) {\n+        return findVarHandle(lookup, lookup.lookupClass(), name, type);\n+    }\n+\n+    public static VarHandle findVarHandle(MethodHandles.Lookup lookup,\n+                                          Class<?> recv,\n+                                          String name,\n+                                          Class<?> type) {\n+        try {\n+            return lookup.findVarHandle(recv, name, type);\n+        } catch (ReflectiveOperationException e) {\n+            throw new InternalError(e);\n+        }\n+    }\n+\n+\n+    public static MethodHandle findVirtual(MethodHandles.Lookup lookup,\n+                                           Class<?> refc,\n+                                           String name,\n+                                           MethodType type) {\n+        try {\n+            return lookup.findVirtual(refc, name, type);\n+        } catch (ReflectiveOperationException e) {\n+            throw new InternalError(e);\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/MhUtil.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -87,7 +88,3 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            THREAD_COUNT = l.findVarHandle(ThreadFlock.class, \"threadCount\", int.class);\n-            PERMIT = l.findVarHandle(ThreadFlock.class, \"permit\", boolean.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        THREAD_COUNT = MhUtil.findVarHandle(l, \"threadCount\", int.class);\n+        PERMIT = MhUtil.findVarHandle(l, \"permit\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/ThreadFlock.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -313,11 +314,4 @@\n-            static final JavaLangInvokeAccess JLIA;\n-            static final MethodHandle NATIVE_ACCESSOR_INVOKE;\n-            static {\n-                try {\n-                    JLIA = SharedSecrets.getJavaLangInvokeAccess();\n-                    NATIVE_ACCESSOR_INVOKE = MethodHandles.lookup().findVirtual(NativeAccessor.class, \"invoke\",\n-                            genericMethodType(1, true));\n-                } catch (NoSuchMethodException|IllegalAccessException e) {\n-                    throw new InternalError(e);\n-                }\n-            }\n+            static final JavaLangInvokeAccess JLIA = SharedSecrets.getJavaLangInvokeAccess();\n+            static final MethodHandle NATIVE_ACCESSOR_INVOKE = MhUtil.findVirtual(\n+                    MethodHandles.lookup(), NativeAccessor.class, \"invoke\",\n+                    genericMethodType(1, true));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -44,9 +45,3 @@\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            CLOSED = l.findVarHandle(SharedThreadContainer.class,\n-                    \"closed\", boolean.class);\n-            VIRTUAL_THREADS = l.findVarHandle(SharedThreadContainer.class,\n-                    \"virtualThreads\", Set.class);\n-        } catch (Exception e) {\n-            throw new ExceptionInInitializerError(e);\n-        }\n+        MethodHandles.Lookup l = MethodHandles.lookup();\n+        CLOSED = MhUtil.findVarHandle(l, \"closed\", boolean.class);\n+        VIRTUAL_THREADS = MhUtil.findVarHandle(l, \"virtualThreads\", Set.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/SharedThreadContainer.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -78,0 +77,1 @@\n+import jdk.internal.invoke.MhUtil;\n@@ -152,9 +152,2 @@\n-    private static final VarHandle SOCKET;\n-    static {\n-        try {\n-            MethodHandles.Lookup l = MethodHandles.lookup();\n-            SOCKET = l.findVarHandle(DatagramChannelImpl.class, \"socket\", DatagramSocket.class);\n-        } catch (Exception e) {\n-            throw new InternalError(e);\n-        }\n-    }\n+    private static final VarHandle SOCKET = MhUtil.findVarHandle(\n+            MethodHandles.lookup(), \"socket\", DatagramSocket.class);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"}]}