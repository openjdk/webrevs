{"files":[{"patch":"@@ -277,1 +277,1 @@\n-        private static final VarHandle COUNT = MethodHandlesInternal.findVarHandleOrThrow(\n+        private static final VarHandle COUNT = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -686,2 +686,3 @@\n-        private static final MethodHandle MH_asSpreader = MethodHandlesInternal.findVirtualOrThrow(\n-                IMPL_LOOKUP, MethodHandle.class, \"asSpreader\", MethodType.methodType(MethodHandle.class, Class.class, int.class));\n+        private static final MethodHandle MH_asSpreader = MethodHandlesInternal.findVirtual(\n+                IMPL_LOOKUP, MethodHandle.class, \"asSpreader\",\n+                MethodType.methodType(MethodHandle.class, Class.class, int.class));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -107,3 +107,6 @@\n-        STATE = MethodHandlesInternal.findVarHandleOrThrow(l, Socket.class, \"state\", int.class);\n-        IN = MethodHandlesInternal.findVarHandleOrThrow(l, Socket.class, \"in\", InputStream.class);\n-        OUT = MethodHandlesInternal.findVarHandleOrThrow(l, Socket.class, \"out\", OutputStream.class);\n+        STATE = MethodHandlesInternal.findVarHandle(\n+                l, Socket.class, \"state\", int.class);\n+        IN = MethodHandlesInternal.findVarHandle(\n+                l, Socket.class, \"in\", InputStream.class);\n+        OUT = MethodHandlesInternal.findVarHandle(\n+                l, Socket.class, \"out\", OutputStream.class);\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-    private static final VarHandle ATTACHMENT = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle ATTACHMENT = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/SelectionKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private static final VarHandle INVALID = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle INVALID = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectionKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    private static final VarHandle CLOSED = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle CLOSED = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3085,3 +3085,6 @@\n-        RESULT = MethodHandlesInternal.findVarHandleOrThrow(l, CompletableFuture.class, \"result\", Object.class);\n-        STACK = MethodHandlesInternal.findVarHandleOrThrow(l, CompletableFuture.class, \"stack\", Completion.class);\n-        NEXT = MethodHandlesInternal.findVarHandleOrThrow(l, Completion.class, \"next\", Completion.class);\n+        RESULT = MethodHandlesInternal.findVarHandle(\n+                l, CompletableFuture.class, \"result\", Object.class);\n+        STACK = MethodHandlesInternal.findVarHandle(\n+                l, CompletableFuture.class, \"stack\", Completion.class);\n+        NEXT = MethodHandlesInternal.findVarHandle(\n+                l, Completion.class, \"next\", Completion.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -536,3 +536,6 @@\n-        BOUND = MethodHandlesInternal.findVarHandleOrThrow(l, Exchanger.class, \"bound\", int.class);\n-        MATCH = MethodHandlesInternal.findVarHandleOrThrow(l, Node.class, \"match\", Object.class);\n-        ENTRY = MethodHandlesInternal.findVarHandleOrThrow(l, Slot.class, \"entry\", Node.class);\n+        BOUND = MethodHandlesInternal.findVarHandle(\n+                l, Exchanger.class, \"bound\", int.class);\n+        MATCH = MethodHandlesInternal.findVarHandle(\n+                l, Node.class, \"match\", Object.class);\n+        ENTRY = MethodHandlesInternal.findVarHandle(\n+                l, Slot.class, \"entry\", Node.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Exchanger.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -588,3 +588,6 @@\n-        STATE = MethodHandlesInternal.findVarHandleOrThrow(l, FutureTask.class, \"state\", int.class);\n-        RUNNER = MethodHandlesInternal.findVarHandleOrThrow(l, FutureTask.class, \"runner\", Thread.class);\n-        WAITERS = MethodHandlesInternal.findVarHandleOrThrow(l, FutureTask.class, \"waiters\", WaitNode.class);\n+        STATE = MethodHandlesInternal.findVarHandle(\n+                l, FutureTask.class, \"state\", int.class);\n+        RUNNER = MethodHandlesInternal.findVarHandle(\n+                l, FutureTask.class, \"runner\", Thread.class);\n+        WAITERS = MethodHandlesInternal.findVarHandle(\n+                l, FutureTask.class, \"waiters\", WaitNode.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1142,1 +1142,1 @@\n-    private static final VarHandle STATE = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Phaser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1097,5 +1097,4 @@\n-    private static final VarHandle ALLOCATIONSPINLOCK = MethodHandlesInternal.findVarHandleOrThrow(\n-            MethodHandles.lookup(),\n-            PriorityBlockingQueue.class,\n-            \"allocationSpinLock\",\n-            int.class);\n+    private static final VarHandle ALLOCATIONSPINLOCK =\n+            MethodHandlesInternal.findVarHandle(\n+                    MethodHandles.lookup(),\n+                    PriorityBlockingQueue.class, \"allocationSpinLock\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/PriorityBlockingQueue.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -995,2 +995,4 @@\n-                FIRST_RESULT = MethodHandlesInternal.findVarHandleOrThrow(l, ShutdownOnSuccess.class, \"firstResult\", Object.class);\n-                FIRST_EXCEPTION = MethodHandlesInternal.findVarHandleOrThrow(l, ShutdownOnSuccess.class, \"firstException\", Throwable.class);\n+                FIRST_RESULT = MethodHandlesInternal.findVarHandle(\n+                        l, ShutdownOnSuccess.class, \"firstResult\", Object.class);\n+                FIRST_EXCEPTION = MethodHandlesInternal.findVarHandle(\n+                        l, ShutdownOnSuccess.class, \"firstException\", Throwable.class);\n@@ -1177,2 +1179,3 @@\n-        private static final VarHandle FIRST_EXCEPTION = MethodHandlesInternal.findVarHandleOrThrow(\n-                MethodHandles.lookup(), ShutdownOnFailure.class, \"firstException\", Throwable.class);\n+        private static final VarHandle FIRST_EXCEPTION =\n+                MethodHandlesInternal.findVarHandle(MethodHandles.lookup(),\n+                        ShutdownOnFailure.class, \"firstException\", Throwable.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1511,2 +1511,4 @@\n-            CTL = MethodHandlesInternal.findVarHandleOrThrow(l, BufferedSubscription.class, \"ctl\", int.class);\n-            DEMAND = MethodHandlesInternal.findVarHandleOrThrow(l, BufferedSubscription.class, \"demand\", long.class);\n+            CTL = MethodHandlesInternal.findVarHandle(\n+                    l, BufferedSubscription.class, \"ctl\", int.class);\n+            DEMAND = MethodHandlesInternal.findVarHandle(\n+                    l, BufferedSubscription.class, \"demand\", long.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private static final VarHandle STATE = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n@@ -504,3 +504,6 @@\n-            RESULT = MethodHandlesInternal.findVarHandleOrThrow(l, AnyResultHolder.class, \"result\", Object.class);\n-            EXCEPTION = MethodHandlesInternal.findVarHandleOrThrow(l, AnyResultHolder.class, \"exception\", Throwable.class);\n-            EXCEPTION_COUNT = MethodHandlesInternal.findVarHandleOrThrow(l, AnyResultHolder.class, \"exceptionCount\", int.class);\n+            RESULT = MethodHandlesInternal.findVarHandle(\n+                    l, AnyResultHolder.class, \"result\", Object.class);\n+            EXCEPTION = MethodHandlesInternal.findVarHandle(\n+                    l, AnyResultHolder.class, \"exception\", Throwable.class);\n+            EXCEPTION_COUNT = MethodHandlesInternal.findVarHandle(\n+                    l, AnyResultHolder.class, \"exceptionCount\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPerTaskExecutor.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandleOrThrow(\n-            MethodHandles.lookup(),AtomicBoolean.class, \"value\", int.class);\n+    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n+            MethodHandles.lookup(), AtomicBoolean.class, \"value\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicBoolean.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicMarkableReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicStampedReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-        private static final VarHandle VALUE = MethodHandlesInternal.findVarHandleOrThrow(\n+        private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n@@ -381,1 +381,1 @@\n-        BASE = MethodHandlesInternal.findVarHandleOrThrow(\n+        BASE = MethodHandlesInternal.findVarHandle(\n@@ -383,1 +383,1 @@\n-        CELLSBUSY = MethodHandlesInternal.findVarHandleOrThrow(\n+        CELLSBUSY = MethodHandlesInternal.findVarHandle(\n@@ -395,1 +395,1 @@\n-        THREAD_PROBE = MethodHandlesInternal.findVarHandleOrThrow(\n+        THREAD_PROBE = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/Striped64.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -375,2 +375,2 @@\n-        private static final VarHandle NEXT = MethodHandlesInternal.findVarHandleOrThrow(\n-                MethodHandles.lookup(),ForEachOrderedTask.class, \"next\", ForEachOrderedTask.class);\n+        private static final VarHandle NEXT = MethodHandlesInternal.findVarHandle(\n+                MethodHandles.lookup(), ForEachOrderedTask.class, \"next\", ForEachOrderedTask.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ForEachOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-            private static final VarHandle NEXT = MethodHandlesInternal.findVarHandleOrThrow(\n+            private static final VarHandle NEXT = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    static final VarHandle ASYNC_RELEASE_COUNT= MethodHandlesInternal.findVarHandleOrThrow(\n+    static final VarHandle ASYNC_RELEASE_COUNT= MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    static final VarHandle STATE = MethodHandlesInternal.findVarHandleOrThrow(\n+    static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        static final VarHandle FST = MethodHandlesInternal.findVarHandleOrThrow(\n+        static final VarHandle FST = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.Map;\n@@ -60,1 +59,1 @@\n-    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS = MethodHandlesInternal.findVirtualOrThrow(\n+    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS = MethodHandlesInternal.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-            static final MethodHandle MH_SCALE = MethodHandlesInternal.findVirtualOrThrow(\n+            static final MethodHandle MH_SCALE = MethodHandlesInternal.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,2 +89,4 @@\n-        THREAD_COUNT = MethodHandlesInternal.findVarHandleOrThrow(l, ThreadFlock.class, \"threadCount\", int.class);\n-        PERMIT = MethodHandlesInternal.findVarHandleOrThrow(l, ThreadFlock.class, \"permit\", boolean.class);\n+        THREAD_COUNT = MethodHandlesInternal.findVarHandle(\n+                l, ThreadFlock.class, \"threadCount\", int.class);\n+        PERMIT = MethodHandlesInternal.findVarHandle(\n+                l, ThreadFlock.class, \"permit\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/ThreadFlock.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-            static final MethodHandle NATIVE_ACCESSOR_INVOKE = MethodHandlesInternal.findVirtualOrThrow(\n+            static final MethodHandle NATIVE_ACCESSOR_INVOKE = MethodHandlesInternal.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- * This class contains a number of static factories for certain VarHandle\/MethodHandle types\n+ * This class contains a number of static factories for certain\n+ * VarHandle\/MethodHandle variants.\n@@ -36,1 +37,3 @@\n- * The methods are intended to be called from a static context:\n+ * The methods will throw an {@link InternalError} if the lookup fails.\n+ * <p>\n+ * Here is an example of how one of these methods could be used:\n@@ -39,1 +42,1 @@\n- *         MethodHandlesInternal.findVirtualOrThrow(MethodHandles.lookup(),\n+ *         MethodHandlesInternal.findVirtual(MethodHandles.lookup(),\n@@ -47,1 +50,4 @@\n-    public static VarHandle findVarHandleOrThrow(MethodHandles.Lookup lookup, Class<?> recv, String name, Class<?> type) {\n+    public static VarHandle findVarHandle(MethodHandles.Lookup lookup,\n+                                          Class<?> recv,\n+                                          String name,\n+                                          Class<?> type) {\n@@ -51,1 +57,1 @@\n-            throw new ExceptionInInitializerError(e);\n+            throw new InternalError(e);\n@@ -55,1 +61,4 @@\n-    public static MethodHandle findVirtualOrThrow(MethodHandles.Lookup lookup, Class<?> refc, String name, MethodType type) {\n+    public static MethodHandle findVirtual(MethodHandles.Lookup lookup,\n+                                           Class<?> refc,\n+                                           String name,\n+                                           MethodType type) {\n@@ -59,1 +68,1 @@\n-            throw new ExceptionInInitializerError(e);\n+            throw new InternalError(e);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandlesInternal.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        CLOSED = MethodHandlesInternal.findVarHandleOrThrow(\n+        CLOSED = MethodHandlesInternal.findVarHandle(\n@@ -48,1 +48,1 @@\n-        VIRTUAL_THREADS = MethodHandlesInternal.findVarHandleOrThrow(\n+        VIRTUAL_THREADS = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/SharedThreadContainer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -153,1 +152,1 @@\n-    private static final VarHandle SOCKET = MethodHandlesInternal.findVarHandleOrThrow(\n+    private static final VarHandle SOCKET = MethodHandlesInternal.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}