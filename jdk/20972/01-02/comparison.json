{"files":[{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -278,1 +278,1 @@\n-                MethodHandles.lookup(), BaseThreadFactory.class, \"count\", long.class);\n+                MethodHandles.lookup(), \"count\", long.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -107,6 +107,3 @@\n-        STATE = MethodHandlesInternal.findVarHandle(\n-                l, Socket.class, \"state\", int.class);\n-        IN = MethodHandlesInternal.findVarHandle(\n-                l, Socket.class, \"in\", InputStream.class);\n-        OUT = MethodHandlesInternal.findVarHandle(\n-                l, Socket.class, \"out\", OutputStream.class);\n+        STATE = MethodHandlesInternal.findVarHandle(l, \"state\", int.class);\n+        IN = MethodHandlesInternal.findVarHandle(l, \"in\", InputStream.class);\n+        OUT = MethodHandlesInternal.findVarHandle(l, \"out\", OutputStream.class);\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -435,1 +435,1 @@\n-            MethodHandles.lookup(), SelectionKey.class, \"attachment\", Object.class);\n+            MethodHandles.lookup(), \"attachment\", Object.class);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/SelectionKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -51,1 +51,1 @@\n-            MethodHandles.lookup(), AbstractSelectionKey.class, \"invalid\", boolean.class);\n+            MethodHandles.lookup(), \"invalid\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectionKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -78,1 +78,1 @@\n-        MethodHandles.lookup(), AbstractSelector.class, \"closed\", boolean.class);\n+            MethodHandles.lookup(), \"closed\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -536,2 +536,1 @@\n-        BOUND = MethodHandlesInternal.findVarHandle(\n-                l, Exchanger.class, \"bound\", int.class);\n+        BOUND = MethodHandlesInternal.findVarHandle(l, \"bound\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Exchanger.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -588,6 +588,3 @@\n-        STATE = MethodHandlesInternal.findVarHandle(\n-                l, FutureTask.class, \"state\", int.class);\n-        RUNNER = MethodHandlesInternal.findVarHandle(\n-                l, FutureTask.class, \"runner\", Thread.class);\n-        WAITERS = MethodHandlesInternal.findVarHandle(\n-                l, FutureTask.class, \"waiters\", WaitNode.class);\n+        STATE = MethodHandlesInternal.findVarHandle(l, \"state\", int.class);\n+        RUNNER = MethodHandlesInternal.findVarHandle(l, \"runner\", Thread.class);\n+        WAITERS = MethodHandlesInternal.findVarHandle(l, \"waiters\", WaitNode.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -1143,1 +1143,1 @@\n-            MethodHandles.lookup(), Phaser.class, \"state\", long.class);\n+            MethodHandles.lookup(), \"state\", long.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Phaser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -1099,2 +1099,1 @@\n-                    MethodHandles.lookup(),\n-                    PriorityBlockingQueue.class, \"allocationSpinLock\", int.class);\n+                    MethodHandles.lookup(), \"allocationSpinLock\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/PriorityBlockingQueue.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -994,5 +994,3 @@\n-                MethodHandles.Lookup l = MethodHandles.lookup();\n-                FIRST_RESULT = MethodHandlesInternal.findVarHandle(\n-                        l, ShutdownOnSuccess.class, \"firstResult\", Object.class);\n-                FIRST_EXCEPTION = MethodHandlesInternal.findVarHandle(\n-                        l, ShutdownOnSuccess.class, \"firstException\", Throwable.class);\n+            MethodHandles.Lookup l = MethodHandles.lookup();\n+            FIRST_RESULT = MethodHandlesInternal.findVarHandle(l, \"firstResult\", Object.class);\n+            FIRST_EXCEPTION = MethodHandlesInternal.findVarHandle(l, \"firstException\", Throwable.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -1511,4 +1511,2 @@\n-            CTL = MethodHandlesInternal.findVarHandle(\n-                    l, BufferedSubscription.class, \"ctl\", int.class);\n-            DEMAND = MethodHandlesInternal.findVarHandle(\n-                    l, BufferedSubscription.class, \"demand\", long.class);\n+            CTL = MethodHandlesInternal.findVarHandle(l, \"ctl\", int.class);\n+            DEMAND = MethodHandlesInternal.findVarHandle(l, \"demand\", long.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -53,1 +53,1 @@\n-            MethodHandles.lookup(), ThreadPerTaskExecutor.class, \"state\", int.class);\n+            MethodHandles.lookup(), \"state\", int.class);\n@@ -504,2 +504,1 @@\n-            RESULT = MethodHandlesInternal.findVarHandle(\n-                    l, AnyResultHolder.class, \"result\", Object.class);\n+            RESULT = MethodHandlesInternal.findVarHandle(l, \"result\", Object.class);\n@@ -507,1 +506,1 @@\n-                    l, AnyResultHolder.class, \"exception\", Throwable.class);\n+                    l, \"exception\", Throwable.class);\n@@ -509,1 +508,1 @@\n-                    l, AnyResultHolder.class, \"exceptionCount\", int.class);\n+                    l, \"exceptionCount\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPerTaskExecutor.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -56,1 +56,1 @@\n-            MethodHandles.lookup(), AtomicBoolean.class, \"value\", int.class);\n+            MethodHandles.lookup(), \"value\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicBoolean.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -196,1 +196,1 @@\n-            MethodHandles.lookup(), AtomicMarkableReference.class, \"pair\", Pair.class);;\n+            MethodHandles.lookup(), \"pair\", Pair.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicMarkableReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -56,1 +56,1 @@\n-            MethodHandles.lookup(), AtomicReference.class, \"value\", Object.class);\n+            MethodHandles.lookup(), \"value\", Object.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -196,1 +196,1 @@\n-            MethodHandles.lookup(), AtomicStampedReference.class, \"pair\", Pair.class);\n+            MethodHandles.lookup(), \"pair\", Pair.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicStampedReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -144,1 +144,1 @@\n-                MethodHandles.lookup(), Cell.class, \"value\", long.class);\n+                MethodHandles.lookup(), \"value\", long.class);\n@@ -381,4 +381,2 @@\n-        BASE = MethodHandlesInternal.findVarHandle(\n-                l1, Striped64.class, \"base\", long.class);\n-        CELLSBUSY = MethodHandlesInternal.findVarHandle(\n-                l1, Striped64.class, \"cellsBusy\", int.class);\n+        BASE = MethodHandlesInternal.findVarHandle(l1, \"base\", long.class);\n+        CELLSBUSY = MethodHandlesInternal.findVarHandle(l1, \"cellsBusy\", int.class);\n@@ -396,1 +394,1 @@\n-                l2, Thread.class, \"threadLocalRandomProbe\", int.class);\n+                l2, \"threadLocalRandomProbe\", int.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/Striped64.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -376,1 +376,1 @@\n-                MethodHandles.lookup(), ForEachOrderedTask.class, \"next\", ForEachOrderedTask.class);\n+                MethodHandles.lookup(), \"next\", ForEachOrderedTask.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ForEachOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -458,1 +458,1 @@\n-                    MethodHandles.lookup(), Hybrid.class, \"next\", Hybrid.class);\n+                    MethodHandles.lookup(), \"next\", Hybrid.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -45,1 +45,1 @@\n-            MethodHandles.lookup(), ConfinedSession.class, \"asyncReleaseCount\", int.class);\n+            MethodHandles.lookup(), \"asyncReleaseCount\", int.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -62,1 +62,1 @@\n-            MethodHandles.lookup(), MemorySessionImpl.class, \"state\", int.class);\n+            MethodHandles.lookup(), \"state\", int.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.reflect;\n+package jdk.internal.invoke;\n@@ -50,0 +50,6 @@\n+    public static VarHandle findVarHandle(MethodHandles.Lookup lookup,\n+                                          String name,\n+                                          Class<?> type) {\n+        return findVarHandle(lookup, lookup.lookupClass(), name, type);\n+    }\n+\n@@ -61,0 +67,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/MethodHandlesInternal.java","additions":8,"deletions":1,"binary":false,"changes":9,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandlesInternal.java","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -89,4 +89,2 @@\n-        THREAD_COUNT = MethodHandlesInternal.findVarHandle(\n-                l, ThreadFlock.class, \"threadCount\", int.class);\n-        PERMIT = MethodHandlesInternal.findVarHandle(\n-                l, ThreadFlock.class, \"permit\", boolean.class);\n+        THREAD_COUNT = MethodHandlesInternal.findVarHandle(l, \"threadCount\", int.class);\n+        PERMIT = MethodHandlesInternal.findVarHandle(l, \"permit\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/ThreadFlock.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.invoke.MethodHandlesInternal;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -46,4 +46,2 @@\n-        CLOSED = MethodHandlesInternal.findVarHandle(\n-                l, SharedThreadContainer.class, \"closed\", boolean.class);\n-        VIRTUAL_THREADS = MethodHandlesInternal.findVarHandle(\n-                l, SharedThreadContainer.class, \"virtualThreads\", Set.class);\n+        CLOSED = MethodHandlesInternal.findVarHandle(l, \"closed\", boolean.class);\n+        VIRTUAL_THREADS = MethodHandlesInternal.findVarHandle(l, \"virtualThreads\", Set.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/SharedThreadContainer.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-import jdk.internal.reflect.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesInternal;\n@@ -153,1 +153,1 @@\n-            MethodHandles.lookup(), DatagramChannelImpl.class, \"socket\", DatagramSocket.class);\n+            MethodHandles.lookup(), \"socket\", DatagramSocket.class);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}