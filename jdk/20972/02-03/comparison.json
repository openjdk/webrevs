{"files":[{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -277,1 +277,1 @@\n-        private static final VarHandle COUNT = MethodHandlesInternal.findVarHandle(\n+        private static final VarHandle COUNT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -686,1 +686,1 @@\n-        private static final MethodHandle MH_asSpreader = MethodHandlesInternal.findVirtual(\n+        private static final MethodHandle MH_asSpreader = MethodHandlesUtil.findVirtual(\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -107,3 +107,3 @@\n-        STATE = MethodHandlesInternal.findVarHandle(l, \"state\", int.class);\n-        IN = MethodHandlesInternal.findVarHandle(l, \"in\", InputStream.class);\n-        OUT = MethodHandlesInternal.findVarHandle(l, \"out\", OutputStream.class);\n+        STATE = MethodHandlesUtil.findVarHandle(l, \"state\", int.class);\n+        IN = MethodHandlesUtil.findVarHandle(l, \"in\", InputStream.class);\n+        OUT = MethodHandlesUtil.findVarHandle(l, \"out\", OutputStream.class);\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -434,1 +434,1 @@\n-    private static final VarHandle ATTACHMENT = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle ATTACHMENT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/SelectionKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -50,1 +50,1 @@\n-    private static final VarHandle INVALID = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle INVALID = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelectionKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -77,1 +77,1 @@\n-    private static final VarHandle CLOSED = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle CLOSED = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AbstractSelector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -3085,1 +3085,1 @@\n-        RESULT = MethodHandlesInternal.findVarHandle(\n+        RESULT = MethodHandlesUtil.findVarHandle(\n@@ -3087,1 +3087,1 @@\n-        STACK = MethodHandlesInternal.findVarHandle(\n+        STACK = MethodHandlesUtil.findVarHandle(\n@@ -3089,1 +3089,1 @@\n-        NEXT = MethodHandlesInternal.findVarHandle(\n+        NEXT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -536,2 +536,2 @@\n-        BOUND = MethodHandlesInternal.findVarHandle(l, \"bound\", int.class);\n-        MATCH = MethodHandlesInternal.findVarHandle(\n+        BOUND = MethodHandlesUtil.findVarHandle(l, \"bound\", int.class);\n+        MATCH = MethodHandlesUtil.findVarHandle(\n@@ -539,1 +539,1 @@\n-        ENTRY = MethodHandlesInternal.findVarHandle(\n+        ENTRY = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Exchanger.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -588,3 +588,3 @@\n-        STATE = MethodHandlesInternal.findVarHandle(l, \"state\", int.class);\n-        RUNNER = MethodHandlesInternal.findVarHandle(l, \"runner\", Thread.class);\n-        WAITERS = MethodHandlesInternal.findVarHandle(l, \"waiters\", WaitNode.class);\n+        STATE = MethodHandlesUtil.findVarHandle(l, \"state\", int.class);\n+        RUNNER = MethodHandlesUtil.findVarHandle(l, \"runner\", Thread.class);\n+        WAITERS = MethodHandlesUtil.findVarHandle(l, \"waiters\", WaitNode.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -1142,1 +1142,1 @@\n-    private static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle STATE = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Phaser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -1098,1 +1098,1 @@\n-            MethodHandlesInternal.findVarHandle(\n+            MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/PriorityBlockingQueue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -995,2 +995,2 @@\n-            FIRST_RESULT = MethodHandlesInternal.findVarHandle(l, \"firstResult\", Object.class);\n-            FIRST_EXCEPTION = MethodHandlesInternal.findVarHandle(l, \"firstException\", Throwable.class);\n+            FIRST_RESULT = MethodHandlesUtil.findVarHandle(l, \"firstResult\", Object.class);\n+            FIRST_EXCEPTION = MethodHandlesUtil.findVarHandle(l, \"firstException\", Throwable.class);\n@@ -1178,1 +1178,1 @@\n-                MethodHandlesInternal.findVarHandle(MethodHandles.lookup(),\n+                MethodHandlesUtil.findVarHandle(MethodHandles.lookup(),\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -1511,2 +1511,2 @@\n-            CTL = MethodHandlesInternal.findVarHandle(l, \"ctl\", int.class);\n-            DEMAND = MethodHandlesInternal.findVarHandle(l, \"demand\", long.class);\n+            CTL = MethodHandlesUtil.findVarHandle(l, \"ctl\", int.class);\n+            DEMAND = MethodHandlesUtil.findVarHandle(l, \"demand\", long.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/SubmissionPublisher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -52,1 +52,1 @@\n-    private static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle STATE = MethodHandlesUtil.findVarHandle(\n@@ -504,2 +504,2 @@\n-            RESULT = MethodHandlesInternal.findVarHandle(l, \"result\", Object.class);\n-            EXCEPTION = MethodHandlesInternal.findVarHandle(\n+            RESULT = MethodHandlesUtil.findVarHandle(l, \"result\", Object.class);\n+            EXCEPTION = MethodHandlesUtil.findVarHandle(\n@@ -507,1 +507,1 @@\n-            EXCEPTION_COUNT = MethodHandlesInternal.findVarHandle(\n+            EXCEPTION_COUNT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPerTaskExecutor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -55,1 +55,1 @@\n-    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle VALUE = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicBoolean.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -195,1 +195,1 @@\n-    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle PAIR = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicMarkableReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -55,1 +55,1 @@\n-    private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle VALUE = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -195,1 +195,1 @@\n-    private static final VarHandle PAIR = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle PAIR = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicStampedReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -143,1 +143,1 @@\n-        private static final VarHandle VALUE = MethodHandlesInternal.findVarHandle(\n+        private static final VarHandle VALUE = MethodHandlesUtil.findVarHandle(\n@@ -381,2 +381,2 @@\n-        BASE = MethodHandlesInternal.findVarHandle(l1, \"base\", long.class);\n-        CELLSBUSY = MethodHandlesInternal.findVarHandle(l1, \"cellsBusy\", int.class);\n+        BASE = MethodHandlesUtil.findVarHandle(l1, \"base\", long.class);\n+        CELLSBUSY = MethodHandlesUtil.findVarHandle(l1, \"cellsBusy\", int.class);\n@@ -393,1 +393,1 @@\n-        THREAD_PROBE = MethodHandlesInternal.findVarHandle(\n+        THREAD_PROBE = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/Striped64.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -375,1 +375,1 @@\n-        private static final VarHandle NEXT = MethodHandlesInternal.findVarHandle(\n+        private static final VarHandle NEXT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ForEachOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -457,1 +457,1 @@\n-            private static final VarHandle NEXT = MethodHandlesInternal.findVarHandle(\n+            private static final VarHandle NEXT = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/GathererOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -44,1 +44,1 @@\n-    static final VarHandle ASYNC_RELEASE_COUNT= MethodHandlesInternal.findVarHandle(\n+    static final VarHandle ASYNC_RELEASE_COUNT= MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -61,1 +61,1 @@\n-    static final VarHandle STATE = MethodHandlesInternal.findVarHandle(\n+    static final VarHandle STATE = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -95,1 +95,1 @@\n-        static final VarHandle FST = MethodHandlesInternal.findVarHandle(\n+        static final VarHandle FST = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SharedSession.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -59,1 +59,1 @@\n-    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS = MethodHandlesInternal.findVirtual(\n+    private static final MethodHandle MH_INVOKE_INTERP_BINDINGS = MethodHandlesUtil.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -161,1 +161,1 @@\n-            static final MethodHandle MH_SCALE = MethodHandlesInternal.findVirtual(\n+            static final MethodHandle MH_SCALE = MethodHandlesUtil.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- *         MethodHandlesInternal.findVirtual(MethodHandles.lookup(),\n+ *         MethodHandlesUtil.findVirtual(MethodHandles.lookup(),\n@@ -46,1 +46,1 @@\n-public final class MethodHandlesInternal {\n+public final class MethodHandlesUtil {\n@@ -48,1 +48,1 @@\n-    private MethodHandlesInternal() {}\n+    private MethodHandlesUtil() {}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/MethodHandlesUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/invoke\/MethodHandlesInternal.java","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -89,2 +89,2 @@\n-        THREAD_COUNT = MethodHandlesInternal.findVarHandle(l, \"threadCount\", int.class);\n-        PERMIT = MethodHandlesInternal.findVarHandle(l, \"permit\", boolean.class);\n+        THREAD_COUNT = MethodHandlesUtil.findVarHandle(l, \"threadCount\", int.class);\n+        PERMIT = MethodHandlesUtil.findVarHandle(l, \"permit\", boolean.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/ThreadFlock.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -315,1 +315,1 @@\n-            static final MethodHandle NATIVE_ACCESSOR_INVOKE = MethodHandlesInternal.findVirtual(\n+            static final MethodHandle NATIVE_ACCESSOR_INVOKE = MethodHandlesUtil.findVirtual(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -46,2 +46,2 @@\n-        CLOSED = MethodHandlesInternal.findVarHandle(l, \"closed\", boolean.class);\n-        VIRTUAL_THREADS = MethodHandlesInternal.findVarHandle(l, \"virtualThreads\", Set.class);\n+        CLOSED = MethodHandlesUtil.findVarHandle(l, \"closed\", boolean.class);\n+        VIRTUAL_THREADS = MethodHandlesUtil.findVarHandle(l, \"virtualThreads\", Set.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/SharedThreadContainer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-import jdk.internal.invoke.MethodHandlesInternal;\n+import jdk.internal.invoke.MethodHandlesUtil;\n@@ -152,1 +152,1 @@\n-    private static final VarHandle SOCKET = MethodHandlesInternal.findVarHandle(\n+    private static final VarHandle SOCKET = MethodHandlesUtil.findVarHandle(\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}