{"files":[{"patch":"@@ -55,1 +55,3 @@\n- * @run junit JarExtractTest\n+ * @comment The test relies on verification of error messages generated by jar tool, so we use\n+ *          a fixed en_US locale for this test.\n+ * @run junit\/othervm -Duser.language=en -Duser.country=US JarExtractTest\n@@ -249,0 +251,21 @@\n+    \/**\n+     * Tests that when the destination directory specified for jar extract is actually a file\n+     * or one of the path component in the specified destination path is a file, then the\n+     * extraction fails.\n+     *\/\n+    @Test\n+    public void testExtractToNonDirectory() throws Exception {\n+        final String expectedErrMsg = \"could not create directory\";\n+        final Path notADir1 = Files.createTempFile(Path.of(\".\"), \"8173970\", \".txt\");\n+        final Path notADir2 = notADir1.resolve(\"foobar\");\n+        for (final Path dest : List.of(notADir1, notADir2)) {\n+            final String[] args = {\"-x\", \"-f\", testJarPath.toString(), \"-C\", dest.toString()};\n+            final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+            printJarCommand(args);\n+            int exitCode = JAR_TOOL.run(System.out, new PrintStream(err), args);\n+            assertNotEquals(0, exitCode, \"jar extraction was expected to fail but didn't\");\n+            \/\/ verify it did indeed fail due to the right reason\n+            assertTrue(err.toString(StandardCharsets.UTF_8).contains(expectedErrMsg));\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/JarExtractTest.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}