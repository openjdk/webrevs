{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Iterator;\n@@ -190,0 +191,16 @@\n+    private static void awaitThreads(Thread... threads) {\n+        awaitThreads(Arrays.asList(threads));\n+    }\n+\n+    private static void awaitThreads(Iterable<Thread> threads) {\n+        for (var t : threads) {\n+            try {\n+                if (!t.join(TIMEOUT)) {\n+                    fail(\"Thread not stopping \" + t);\n+                }\n+            } catch (InterruptedException ex) {\n+                fail(ex);\n+            }\n+        }\n+    }\n+\n@@ -218,2 +235,1 @@\n-        innocuous.join(TIMEOUT);\n-        refreshInput.join(TIMEOUT);\n+        awaitThreads(innocuous, refreshInput);\n@@ -307,1 +323,1 @@\n-    @RepeatedTest(4)\n+    @Test\n@@ -334,7 +350,1 @@\n-        for (var t : threads) {\n-            try {\n-                t.join(TIMEOUT);\n-            } catch (InterruptedException e) {\n-                fail(e);\n-            }\n-        }\n+        awaitThreads(threads);\n@@ -364,7 +374,1 @@\n-        for (var t : threads) {\n-            try {\n-                t.join(TIMEOUT);\n-            } catch (InterruptedException e) {\n-                fail(e);\n-            }\n-        }\n+        awaitThreads(threads);\n@@ -394,0 +398,2 @@\n+    private static final ScopedValue<Integer> THREAD_ID = ScopedValue.newInstance();\n+\n@@ -401,1 +407,0 @@\n-        ScopedValue<Integer> threadId = ScopedValue.newInstance();\n@@ -406,1 +411,1 @@\n-                int id = threadId.get();\n+                int id = THREAD_ID.get();\n@@ -422,1 +427,1 @@\n-        ScopedValue.where(threadId, -1).run(() -> clv.get(long.class)); \/\/ set up unrelated class\n+        ScopedValue.where(THREAD_ID, -1).run(() -> clv.get(long.class)); \/\/ set up unrelated class\n@@ -424,1 +429,1 @@\n-                ScopedValue.where(threadId, 1).run(() -> {\n+                ScopedValue.where(THREAD_ID, 1).run(() -> {\n@@ -429,1 +434,1 @@\n-                ScopedValue.where(threadId, 2).run(() -> {\n+                ScopedValue.where(THREAD_ID, 2).run(() -> {\n@@ -436,2 +441,1 @@\n-        t1.join(TIMEOUT);\n-        t2.join(TIMEOUT);\n+        awaitThreads(t1, t2);\n@@ -440,0 +444,38 @@\n+\n+    @Test\n+    @Timeout(value = 4, unit = TimeUnit.SECONDS)\n+    void testNoObsoleteInstallation() throws InterruptedException {\n+        CountDownLatch slowComputationStart = new CountDownLatch(1);\n+        CountDownLatch slowComputationContinue = new CountDownLatch(1);\n+        ClassValue<Integer> clv = new ClassValue<>() {\n+            @Override\n+            protected Integer computeValue(Class<?> type) {\n+                if (!THREAD_ID.isBound()) {\n+                    return 5;\n+                }\n+                int threadId = THREAD_ID.get();\n+                if (threadId == 1) {\n+                    if (slowComputationContinue.getCount() == 0) {\n+                        return 42;\n+                    } else {\n+                        \/\/ First invocation\n+                        slowComputationStart.countDown();\n+                        await(slowComputationContinue);\n+                        return -1;\n+                    }\n+                } else {\n+                    return fail(\"Unknown thread \" + threadId);\n+                }\n+            }\n+        };\n+        var t = Thread.startVirtualThread(() -> ScopedValue.where(THREAD_ID, 1).run(() -> {\n+            int v = clv.get(int.class);\n+            assertEquals(42, v, \"recomputed value\");\n+        }));\n+        await(slowComputationStart);\n+        assertEquals(5, clv.get(int.class), \"fast computation installed value\");\n+        clv.remove(int.class);\n+        slowComputationContinue.countDown();\n+        awaitThreads(t);\n+        assertEquals(42, clv.get(int.class), \"slow computation reinstalled value\");\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/ClassValueTest.java","additions":66,"deletions":24,"binary":false,"changes":90,"status":"modified"}]}