{"files":[{"patch":"@@ -45,1 +45,1 @@\n- * returns an associated value, initially created by an invocation to {@link\n+ * returns the associated value, initially created by an invocation to {@link\n@@ -47,1 +47,1 @@\n- * only one value is ever associated.\n+ * exactly one value is associated to a {@code Class} and returned.\n@@ -49,3 +49,3 @@\n- * Another operation is {@link #remove remove}: it clears an associated value,\n- * and ensures subsequent associated values are computed with input states\n- * up-to-date with the removal.\n+ * Another operation is {@link #remove remove}: it clears the associated value\n+ * (if it exists), and ensures the next associated value is computed with input\n+ * states up-to-date with the removal.\n@@ -83,2 +83,2 @@\n-     * This method is invoked when an initial read-only access by {@link #get\n-     * get} failed to find this association.\n+     * This method is invoked when the initial read-only access by {@link #get\n+     * get} finds no associated value.\n@@ -87,3 +87,2 @@\n-     * not attempt to associate a value, and may terminate either by returning\n-     * an observed associated value, if it exists, or by propagating that\n-     * exception.\n+     * not attempt to associate a value, and may terminate by returning the\n+     * associated value if it exists, or by propagating that exception otherwise.\n@@ -91,2 +90,2 @@\n-     * Otherwise, the value is computed and returned.  An attempt to install the\n-     * value happens, which can end up observing:\n+     * Otherwise, the value is computed and returned.  An attempt to associate\n+     * the return value happens, with one of the following outcomes:\n@@ -94,2 +93,2 @@\n-     * <li>This association is already associated by another attempt. The\n-     * associated value is returned.<\/li>\n+     * <li>The associated value is present; it is returned and no association\n+     * is done.<\/li>\n@@ -98,5 +97,4 @@\n-     * that computed the value for this attempt.  A retry attempt, which that\n-     * {@code remove} call happens-before, happens to re-establish this\n-     * happens-before relationship.<\/li>\n-     * <li>Otherwise, this attempt successfully associates this value, and\n-     * returns the newly associated value.<\/li>\n+     * that computed the value to associate.  A new invocation to {@code\n+     * computeValue}, which that {@code remove} call happens-before, happens to\n+     * re-establish this happens-before relationship.<\/li>\n+     * <li>Otherwise, this value is successfully associated and returned.<\/li>\n@@ -108,1 +106,1 @@\n-     * same association.  The recursive {@code get}, if the recursion stops,\n+     * same {@code type}.  The recursive {@code get}, if the recursion stops,\n@@ -112,1 +110,2 @@\n-     * the finish of this {@code computeValue}.\n+     * the finish of this {@code computeValue}; the result from this {@code\n+     * computeValue} still may be associated.\n@@ -126,2 +125,2 @@\n-     * from a {@link #computeValue computeValue} invocation until a value is\n-     * successfully associated.\n+     * from a {@link #computeValue computeValue} invocation until the associated\n+     * value exists, which may be from another thread.\n@@ -130,1 +129,1 @@\n-     * In this case, no value is associated.\n+     * In this case, no association happens.\n@@ -157,4 +156,5 @@\n-     * Removes the associated value for the given {@code Class}.  If this\n-     * association is subsequently {@linkplain #get accessed}, this removal\n-     * happens-before (JLS {@jls 17.4.5}) the finish of the {@link #computeValue\n-     * computeValue} call that returned the associated value.\n+     * Removes the associated value for the given {@code Class} and invalidates\n+     * all out-of-date computations.  If this association is subsequently\n+     * {@linkplain #get accessed}, this removal happens-before (JLS {@jls\n+     * 17.4.5}) the finish of the {@link #computeValue computeValue} call that\n+     * returned the associated value.\n@@ -173,1 +173,1 @@\n-        map.setAccess(this, value);\n+        map.forcedAssociateAccess(this, value);\n@@ -228,0 +228,2 @@\n+                \/\/ no value is associated, but there may be already associated\n+                \/\/ value. Return that if it exists.\n@@ -241,2 +243,2 @@\n-            \/\/ computeValue succeed, proceed to install\n-            accessed = map.installAccess(this, permission, makeEntry(version(), value));\n+            \/\/ computeValue succeed, proceed to associate\n+            accessed = map.associateAccess(this, permission, value);\n@@ -316,1 +318,1 @@\n-    Version<T> version() { return version; }\n+\n@@ -318,5 +320,5 @@\n-    static final class Version<T> {\n-        private final ClassValue<T> classValue;\n-        Version(ClassValue<T> classValue) { this.classValue = classValue; }\n-        ClassValue<T> classValue() { return classValue; }\n-        boolean isLive() { return classValue.version() == this; }\n+\n+    record Version<T>(\/* Object identity, *\/ClassValue<T> classValue) {\n+        boolean isLive() {\n+            return classValue.version == this;\n+        }\n@@ -374,4 +376,1 @@\n-            if (!version.refersTo(v2)) {\n-                return new Entry<>(v2, value);\n-            }\n-            return this;\n+            return version.refersTo(v2) ? this : new Entry<>(v2, value);\n@@ -455,1 +454,1 @@\n-        \/\/ A simple read access to this map, for the initial get access.\n+        \/\/ A simple read access to this map, for the initial step of get or failure recovery.\n@@ -462,1 +461,1 @@\n-                var updated = entry.refreshVersion(classValue.version());\n+                var updated = entry.refreshVersion(classValue.version);\n@@ -470,2 +469,2 @@\n-        \/\/ An installation attempt, for when a computeValue finishes.\n-        synchronized <T> Object installAccess(ClassValue<T> classValue, RemovalToken computationalToken, Entry<T> entry) {\n+        \/\/ An association attempt, for when a computeValue returns a value.\n+        synchronized <T> Object associateAccess(ClassValue<T> classValue, RemovalToken computationalToken, T value) {\n@@ -474,1 +473,1 @@\n-                return item; \/\/ somebody already installed\n+                return item; \/\/ value already associated\n@@ -477,0 +476,1 @@\n+                var entry = makeEntry(classValue.version, value);\n@@ -486,1 +486,1 @@\n-        \/\/ A removal, requiring subsequent installations to be up-to-date with it.\n+        \/\/ A removal, requiring subsequent associations to be up-to-date with it.\n@@ -494,2 +494,2 @@\n-        \/\/ A set, requires cache to flush.\n-        synchronized <T> void setAccess(ClassValue<T> classValue, T value) {\n+        \/\/ A forced association, requires cache to flush.\n+        synchronized <T> void forcedAssociateAccess(ClassValue<T> classValue, T value) {\n@@ -498,1 +498,1 @@\n-            var entry = makeEntry(classValue.version(), value);\n+            var entry = makeEntry(classValue.version, value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassValue.java","additions":50,"deletions":50,"binary":false,"changes":100,"status":"modified"}]}