{"files":[{"patch":"@@ -354,1 +354,1 @@\n-                return others.put(t, int.class) != null;\n+                return others.put(t, int.class) == null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,4 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n@@ -32,3 +37,2 @@\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -38,0 +42,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -39,0 +44,2 @@\n+import jdk.test.lib.util.ForceGC;\n+import org.junit.jupiter.api.Disabled;\n@@ -43,1 +50,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -224,0 +231,111 @@\n+\n+    private static Class<?> createWeakClass() {\n+        var bytes = ClassFile.of().build(ClassDesc.of(\"WeakTest\"), _ -> {});\n+        try {\n+            return MethodHandles.lookup().defineHiddenClass(bytes, true).lookupClass();\n+        } catch (IllegalAccessException ex) {\n+            return fail(ex);\n+        }\n+    }\n+\n+    @Test\n+    void testWeakAgainstClass() {\n+        Class<?> hidden = createWeakClass();\n+        ClassValue<int[]> cv = new ClassValue<>() {\n+            @Override\n+            protected int[] computeValue(Class<?> type) {\n+                return new int[23];\n+            }\n+        };\n+\n+        WeakReference<?> ref = new WeakReference<>(cv.get(hidden));\n+        hidden = null; \/\/ Remove reference for interpreter\n+        if (!ForceGC.wait(() -> ref.refersTo(null))) {\n+            fail(\"Timeout\");\n+        }\n+    }\n+\n+    @Test\n+    @Disabled \/\/ JDK-8352622\n+    void testWeakAgainstClassValue() {\n+        ClassValue<int[]> cv = new ClassValue<>() {\n+            @Override\n+            protected int[] computeValue(Class<?> type) {\n+                return new int[23];\n+            }\n+        };\n+\n+        WeakReference<?> ref = new WeakReference<>(cv.get(int.class));\n+        cv = null; \/\/ Remove reference for interpreter\n+        if (!ForceGC.wait(() -> ref.refersTo(null))) {\n+            fail(\"Timeout\");\n+        }\n+    }\n+\n+    @RepeatedTest(4) \/\/ repeat 4 times\n+    void testSingletonWinner() {\n+        ClassValue<int[]> cv = new ClassValue<>() {\n+            @Override\n+            protected int[] computeValue(Class<?> type) {\n+                try {\n+                    Thread.sleep(COMPUTE_TIME_MILLIS);\n+                } catch (InterruptedException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n+                return new int[] {ThreadLocalRandom.current().nextInt()};\n+            }\n+        };\n+        AtomicReference<int[]> truth = new AtomicReference<>(null);\n+        AtomicInteger truthSwapCount = new AtomicInteger(0);\n+\n+        List<Thread> threads = new ArrayList<>(100);\n+        Runnable job = () -> {\n+            var res = cv.get(ClassValueTest.class);\n+            var item = truth.compareAndExchange(null, res);\n+            if (item != null) {\n+                assertSame(item, res);\n+            } else {\n+                truthSwapCount.incrementAndGet();\n+            }\n+        };\n+        for (int i = 0; i < 100; i++) {\n+            threads.add(Thread.startVirtualThread(job));\n+        }\n+        for (var t : threads) {\n+            try {\n+                t.join();\n+            } catch (InterruptedException e) {\n+                fail(e);\n+            }\n+        }\n+        assertEquals(1, truthSwapCount.get());\n+    }\n+\n+    @Test\n+    @Timeout(value = 4, unit = TimeUnit.SECONDS)\n+    void testRacyRemoveInCompute() {\n+        ClassValue<Object> cv = new ClassValue<>() {\n+            @Override\n+            protected Object computeValue(Class<?> type) {\n+                try {\n+                    Thread.sleep(COMPUTE_TIME_MILLIS);\n+                } catch (InterruptedException ex) {\n+                    throw new RuntimeException(ex);\n+                }\n+                remove(type);\n+                return Boolean.TRUE;\n+            }\n+        };\n+\n+        var threads = Arrays.stream(CLASSES).map(clz ->\n+                Thread.startVirtualThread(() ->\n+                        assertThrows(Throwable.class, () -> cv.get(clz))))\n+                .toList();\n+        for (var t : threads) {\n+            try {\n+                t.join();\n+            } catch (InterruptedException e) {\n+                fail(e);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/ClassValueTest.java","additions":122,"deletions":4,"binary":false,"changes":126,"status":"modified"}]}