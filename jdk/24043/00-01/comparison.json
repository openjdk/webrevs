{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n@@ -127,6 +129,8 @@\n-     * In order to explain the interaction between {@code get} and {@code remove} calls,\n-     * we must model the state transitions of a class value to take into account\n-     * the alternation between uninitialized and initialized states.\n-     * To do this, number these states sequentially from zero, and note that\n-     * uninitialized (or removed) states are numbered with even numbers,\n-     * while initialized (or re-initialized) states have odd numbers.\n+     * For a particular association, a {@code remove} call happens-before (JLS\n+     * {@jls 17.4.5}) any subsequent {@code get}, including any contingent {@code\n+     * computeValue} invocation that computed the associated value.  Naturally,\n+     * any {@code computeValue} that began before the {@code remove} call must\n+     * have its result discarded, because the removal must happen-before the\n+     * computation of the associated value.  The {@code get} call that invoked\n+     * the stale {@code computeValue} may retry to re-establish this\n+     * happens-before relationship.\n@@ -134,66 +138,3 @@\n-     * When a thread {@code T} removes a class value in state {@code 2N},\n-     * nothing happens, since the class value is already uninitialized.\n-     * Otherwise, the state is advanced atomically to {@code 2N+1}.\n-     * <p>\n-     * When a thread {@code T} queries a class value in state {@code 2N},\n-     * the thread first attempts to initialize the class value to state {@code 2N+1}\n-     * by invoking {@code computeValue} and installing the resulting value.\n-     * <p>\n-     * When {@code T} attempts to install the newly computed value,\n-     * if the state is still at {@code 2N}, the class value will be initialized\n-     * with the computed value, advancing it to state {@code 2N+1}.\n-     * <p>\n-     * Otherwise, whether the new state is even or odd,\n-     * {@code T} will discard the newly computed value\n-     * and retry the {@code get} operation.\n-     * <p>\n-     * Discarding and retrying is an important proviso,\n-     * since otherwise {@code T} could potentially install\n-     * a disastrously stale value.  For example:\n-     * <ul>\n-     * <li>{@code T} calls {@code CV.get(C)} and sees state {@code 2N}\n-     * <li>{@code T} quickly computes a time-dependent value {@code V0} and gets ready to install it\n-     * <li>{@code T} is hit by an unlucky paging or scheduling event, and goes to sleep for a long time\n-     * <li>...meanwhile, {@code T2} also calls {@code CV.get(C)} and sees state {@code 2N}\n-     * <li>{@code T2} quickly computes a similar time-dependent value {@code V1} and installs it on {@code CV.get(C)}\n-     * <li>{@code T2} (or a third thread) then calls {@code CV.remove(C)}, undoing {@code T2}'s work\n-     * <li> the previous actions of {@code T2} are repeated several times\n-     * <li> also, the relevant computed values change over time: {@code V1}, {@code V2}, ...\n-     * <li>...meanwhile, {@code T} wakes up and attempts to install {@code V0}; <em>this must fail<\/em>\n-     * <\/ul>\n-     * We can assume in the above scenario that {@code CV.computeValue} uses locks to properly\n-     * observe the time-dependent states as it computes {@code V1}, etc.\n-     * This does not remove the threat of a stale value, since there is a window of time\n-     * between the return of {@code computeValue} in {@code T} and the installation\n-     * of the new value.  No user synchronization is possible during this time.\n-     *\n-     * @apiNote\n-     * A single call to {@code remove} is not sufficient to prevent ongoing\n-     * computations from installing a stale value later, due to a compatibility\n-     * requirement to make calls from {@code computeValue} to {@code remove} to\n-     * return no-op.  In retrospect, this requirement to accommodate a niche\n-     * case complicated the usages of {@code remove} unfortunately.\n-     * <p>\n-     * Consider threads A and B:\n-     * {@snippet lang=java :\n-     * AtomicInteger input = new AtomicInteger(0);\n-     * ClassValue<Integer> cv = null; \/\/ @replace substring=\"null;\" replacement=\"...\"\n-     * Thread threadA = Thread.startVirtualThread(() -> {\n-     *     input.incrementAndGet(); \/\/ (a)\n-     *     \/\/ Insert a \"cv.get(int.class)\" call here to block stale values\n-     *     cv.remove(int.class); \/\/ (b) - no-op if B is computing\n-     * });\n-     * Thread threadB = Thread.startVirtualThread(() -> cv.get(int.class));\n-     * }\n-     * With this order of action:\n-     * <ol>\n-     * <li>B starts {@code get()} and {@code computeValue()}, but computation is slow\n-     * <li>(a) A updates input value to {@code 1} for {@code computeValue()}\n-     * <li>(b) A calls {@code remove} and returns, no-op as B is computing\n-     * <li>B finishes {@code computeValue()} and installs the outdated value {@code 0}\n-     * <\/ol>\n-     * To prevent observing such an outdated value after the removal, thread A\n-     * can call {@code get()} after it updates input and before it calls {@code\n-     * remove()}, at the location as shown in the snippet.  This way, thread B\n-     * will not be able to installation an outdated value that read input states\n-     * from before thread A's {@code get()}.\n+     * This relationship also means that a {@code computeValue} cannot invoke\n+     * {@code remove}: a step in a computation cannot happen-before the start\n+     * of that computation.\n@@ -338,1 +279,0 @@\n-        private final Entry<T> promise = new Entry<>(this);\n@@ -341,1 +281,1 @@\n-        Entry<T> promise() { return promise; }\n+        Entry<T> createPromise() { return new Entry<>(this); }\n@@ -346,0 +286,3 @@\n+     *  Shared for the map and the cache array.\n+     *  The states are only meaningful for the cache array; whatever in the map\n+     *  is authentic, but state informs the cache an entry may be out-of-date.\n@@ -366,1 +309,1 @@\n-            this.value = this;  \/\/ for a promise, value is not of type T, but Entry!\n+            this.value = new PromiseInfo();  \/\/ for a promise, value is not of type T, but PromiseInfo!\n@@ -371,1 +314,52 @@\n-        boolean isPromise() { return value == this; }\n+\n+        boolean isPromise() { return value instanceof PromiseInfo; }\n+\n+        void registerExtraThread() {\n+            var tracker = ((PromiseInfo) value);\n+            if (!tracker.add()) {\n+                \/\/ This is trivial: such a recursion already causes StackOverflowError\n+                throw new StackOverflowError(\"Recursive initialization of class value\");\n+            }\n+        }\n+\n+        void checkReentrancy() {\n+            var tracker = ((PromiseInfo) value);\n+            if (tracker.contains()) {\n+                throw new StackOverflowError(\"Recursive initialization of class value\");\n+            }\n+        }\n+\n+        \/\/ Must be accessed in synchronization blocks on the ClassValueMap (otherThreads)\n+        \/\/ Compared to ThreadTracker, this optimizes optimistically for\n+        \/\/ single-thread accessors and uses plain instead of concurrent data structures.\n+        static final class PromiseInfo {\n+            private final Thread initialThread;\n+            private Map<Thread, Object> otherThreads; \/\/ Must be identity\/thread ID-based\n+\n+            PromiseInfo() {\n+                initialThread = Thread.currentThread();\n+            }\n+\n+            boolean add() {\n+                Thread t = Thread.currentThread();\n+                if (initialThread == t) {\n+                    return false;\n+                }\n+\n+                var others = this.otherThreads;\n+                if (others == null) {\n+                    others = new IdentityHashMap<>();\n+                    this.otherThreads = others;\n+                }\n+                return others.put(t, int.class) != null;\n+            }\n+\n+            boolean contains() {\n+                Thread t = Thread.currentThread();\n+                if (initialThread == t)\n+                    return true;\n+                var map = otherThreads;\n+                return map != null && map.containsKey(t);\n+            }\n+        }\n+\n@@ -474,1 +468,1 @@\n-                e = v.promise();\n+                e = v.createPromise();\n@@ -484,1 +478,1 @@\n-                    e = v.promise();\n+                    e = v.createPromise();\n@@ -486,0 +480,2 @@\n+                } else {\n+                    e.registerExtraThread();\n@@ -511,0 +507,1 @@\n+                \/\/ Other threads can retry if successful or just propagate their exceptions.\n@@ -525,1 +522,3 @@\n-                \/\/ Some sort of mismatch; caller must try again.\n+                \/\/ Some sort of mismatch; caller must try again. This can happen when:\n+                \/\/ 1. Another thread computes and finishes exceptionally.\n+                \/\/ 2. A remove() is issued after computation started.\n@@ -538,9 +537,4 @@\n-                    \/\/ Due to compatibility requirements (7153157), we have to\n-                    \/\/ reinstate an outdated promise that called computeValue\n-                    \/\/ with outdated values because the remove call may come\n-                    \/\/ from computeValue (Why Remi!)\n-                    \/\/ If users wish to avoid seeing outdated promises, they\n-                    \/\/ should call CV.get(clazz) before calling CV.remove(clazz).\n-                    \/\/ They may see a future value in the next get after remove,\n-                    \/\/ but never an outdated value.\n-                    put(classValue.identity, e);\n+                    \/\/ Remove the outdated promise to force recomputation.\n+                    \/\/ Perform reentrancy checks so we fail if we are removing\n+                    \/\/ our own promise.\n+                    e.checkReentrancy();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassValue.java","additions":82,"deletions":88,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8351045\n+ * @bug 8351045 8351996\n@@ -191,1 +191,0 @@\n-            cv.get(int.class); \/\/ Invalidates ongoing computations using outdated input\n@@ -219,1 +218,5 @@\n-        assertEquals(Boolean.TRUE, cv.get(int.class));\n+        try {\n+            cv.get(int.class);\n+        } catch (Throwable ex) {\n+            \/\/ swallow if any\n+        }\n","filename":"test\/jdk\/java\/lang\/invoke\/ClassValueTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}