{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/*\n+ * @test\n+ * @summary Tests that recursive locking doesn't cause excessive native memory usage\n+ * @library \/test\/lib\n+ * @run main TestRecursiveMonitorChurn\n+ *\/\n+public class TestRecursiveMonitorChurn {\n+    static class Monitor {\n+        volatile int i, j;\n+        synchronized void doSomething() {\n+            i++;\n+            doSomethingElse();\n+        }\n+        synchronized void doSomethingElse() {\n+            j++;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 1 && args[0].equals(\"test\")) {\n+            \/\/ The actual test, in a forked JVM.\n+            for (int i = 0; i < 100000; i++) {\n+                Monitor m = new Monitor();\n+                m.doSomething();\n+            }\n+        } else {\n+            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                    \"-Xmx100M\", \"-XX:TieredStopAtLevel=1\", \"-XX:AsyncDeflationInterval=0\",\n+                    \"-XX:NativeMemoryTracking=summary\", \"-XX:+PrintNMTStatistics\",\n+                    \"-XX:LockingMode=2\",\n+                    \"TestRecursiveMonitorChurn\",\n+                    \"test\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.reportDiagnosticSummary();\n+\n+            output.shouldHaveExitValue(0);\n+\n+            \/\/ We want to see, in the final NMT printout, a committed object monitor size that is reasonably low.\n+            \/\/ Like this:\n+            \/\/ -           Object Monitors (reserved=208, committed=208)\n+            \/\/                             (malloc=208 #1) (at peak)\n+            \/\/\n+            \/\/ Without recursive locking support, this would look more like this:\n+            \/\/ -           Object Monitors (reserved=20800624, committed=20800624)\n+            \/\/                             (malloc=20800624 #100003) (at peak)\n+\n+            Pattern pat = Pattern.compile(\"- *Object Monitors.*reserved=(\\\\d+), committed=(\\\\d+).*\");\n+            boolean foundLine = false;\n+            for (String line : output.asLines()) {\n+                Matcher m = pat.matcher(line);\n+                if (m.matches()) {\n+                    long reserved = Long.parseLong(m.group(1));\n+                    long committed = Long.parseLong(m.group(2));\n+                    System.out.println(\">>>>> \" + line + \": \" + reserved + \" - \" + committed);\n+                    if (committed > 1000) {\n+                        throw new RuntimeException(\"Allocated too many monitors\");\n+                    }\n+                    foundLine = true;\n+                    break;\n+                }\n+            }\n+            if (!foundLine) {\n+                throw new RuntimeException(\"Did not find expected NMT output\");\n+            }\n+\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/locking\/TestRecursiveMonitorChurn.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}