{"files":[{"patch":"@@ -131,1 +131,2 @@\n-  static inline bool is_black(RBNode* node) {\n+  \/\/ True if node is black (nil nodes count as black)\n+  static inline bool is_black(const RBNode* node) {\n@@ -135,1 +136,1 @@\n-  static inline bool is_red(RBNode* node) {\n+  static inline bool is_red(const RBNode* node) {\n@@ -139,1 +140,0 @@\n-  RBNode* find_node(RBNode* curr, const K& k);\n@@ -141,1 +141,1 @@\n-   \/\/ If the node with key k already exist, the value is updated instead.\n+  \/\/ If the node with key k already exist, the value is updated instead.\n@@ -171,1 +171,1 @@\n-    RBNode* node = find_node(_root, k);\n+    RBNode* node = find_node(k);\n@@ -200,1 +200,1 @@\n-  enum BoundMode : uint8_t { STRICT, INCLUSIVE };\n+  enum BoundMode : uint8_t { EXCLUSIVE, INCLUSIVE };\n@@ -208,1 +208,1 @@\n-      int cmp_r = COMPARATOR::cmp(pos->key(), key);\n+      const int cmp_r = COMPARATOR::cmp(pos->key(), key);\n@@ -225,2 +225,2 @@\n-  \/\/ Change mode to STRICT to include node matching key\n-  RBNode* closest_gt(const K& key, BoundMode mode = STRICT) {\n+  \/\/ Change mode to INCLUSIVE to include node matching key\n+  RBNode* closest_gt(const K& key, BoundMode mode = EXCLUSIVE) {\n@@ -230,1 +230,1 @@\n-      int cmp_r = COMPARATOR::cmp(pos->key(), key);\n+      const int cmp_r = COMPARATOR::cmp(pos->key(), key);\n@@ -246,0 +246,15 @@\n+  const RBNode* closest_leq(const K& k, BoundMode mode = INCLUSIVE) const {\n+    return const_cast<RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->closest_leq(k, mode);\n+  }\n+\n+  const RBNode* closest_gt(const K& k, BoundMode mode = EXCLUSIVE) const {\n+    return const_cast<RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->closest_gt(k, mode);\n+  }\n+\n+  \/\/ Finds the node associated with the key\n+  RBNode* find_node(const K& k);\n+\n+  const RBNode* find_node(const K& k) const {\n+    return const_cast<RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->find_node(k);\n+  }\n+\n@@ -248,5 +263,2 @@\n-    RBNode* node = find_node(_root, key);\n-    if (node == nullptr) {\n-      return nullptr;\n-    }\n-    return &node->val();\n+    RBNode* node = find_node(key);\n+    return node == nullptr ? nullptr : &node->val();\n@@ -255,2 +267,4 @@\n-  \/\/ Finds the value associated with the key\n-  const V* find(const K& key) const { return find(key); }\n+  const V* find(const K& key) const {\n+    const RBNode* node = find_node(key);\n+    return node == nullptr ? nullptr : &node->val();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":31,"deletions":17,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -189,1 +189,2 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::find_node(RBNode* curr, const K& k) {\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::find_node(const K& k) {\n+  RBNode* curr = _root;\n@@ -191,1 +192,1 @@\n-    int key_cmp_k = COMPARATOR::cmp(k, curr->key());\n+    const int key_cmp_k = COMPARATOR::cmp(k, curr->key());\n@@ -216,1 +217,1 @@\n-    int key_cmp_k = COMPARATOR::cmp(k, curr->key());\n+    const int key_cmp_k = COMPARATOR::cmp(k, curr->key());\n@@ -235,1 +236,1 @@\n-  int key_cmp_k = COMPARATOR::cmp(k, parent->key());\n+  const int key_cmp_k = COMPARATOR::cmp(k, parent->key());\n@@ -528,1 +529,1 @@\n-  \n+\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-      Node* n = rbtree.find_node(rbtree._root, f);\n+      const Node* n = rbtree.find_node(f);\n@@ -312,1 +312,1 @@\n-    Node* node = _tree.find_node(_tree._root, num_nodes);\n+    Node* node = _tree.find_node(num_nodes);\n@@ -332,1 +332,1 @@\n-    Node* node = _tree.find_node(_tree._root, 0);\n+    Node* node = _tree.find_node(0);\n@@ -350,1 +350,1 @@\n-      a.push(rbtree.find_node(rbtree._root, i));\n+      a.push(rbtree.find_node(i));\n@@ -355,1 +355,1 @@\n-      Node* to_delete = rbtree.find_node(rbtree._root, r);\n+      Node* to_delete = rbtree.find_node(r);\n@@ -364,1 +364,1 @@\n-      Node* n = rbtree.find_node(rbtree._root, i);\n+      const Node* n = rbtree.find_node(i);\n@@ -377,1 +377,1 @@\n-      Node* inserted_node = rbtree.find_node(rbtree._root, i);\n+      Node* inserted_node = rbtree.find_node(i);\n@@ -383,1 +383,1 @@\n-      Node* to_delete = rbtree.find_node(rbtree._root, r);\n+      Node* to_delete = rbtree.find_node(r);\n@@ -453,1 +453,0 @@\n-      Node* node = tree.find_node(tree._root, i);\n@@ -456,1 +455,1 @@\n-    Node* start = tree.find_node(tree._root, 0);\n+    Node* start = tree.find_node(0);\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}