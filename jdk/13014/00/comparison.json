{"files":[{"patch":"@@ -75,3 +75,3 @@\n-        HtmlLinkInfo linkInfo = new HtmlLinkInfo(configuration, LINK_TYPE_PARAMS_AND_BOUNDS, member);\n-        linkInfo.addLineBreaksInTypeParameters = true;\n-        linkInfo.showTypeParameterAnnotations = true;\n+        HtmlLinkInfo linkInfo = new HtmlLinkInfo(configuration, LINK_TYPE_PARAMS_AND_BOUNDS, member)\n+                .addLineBreaksInTypeParameters(true)\n+                .showTypeParameterAnnotations(true);\n@@ -124,3 +124,3 @@\n-        HtmlLinkInfo linkInfo = new HtmlLinkInfo(configuration, LINK_TYPE_PARAMS,\n-                paramType).varargs(isVarArg);\n-        linkInfo.showTypeParameterAnnotations = true;\n+        HtmlLinkInfo linkInfo = new HtmlLinkInfo(configuration, LINK_TYPE_PARAMS, paramType)\n+                .varargs(isVarArg)\n+                .showTypeParameterAnnotations(true);\n@@ -145,2 +145,2 @@\n-        var info = new HtmlLinkInfo(configuration, SHOW_TYPE_PARAMS_AND_BOUNDS, rcvrType);\n-        info.linkToSelf = false;\n+        var info = new HtmlLinkInfo(configuration, SHOW_TYPE_PARAMS_AND_BOUNDS, rcvrType)\n+                .linkToSelf(false);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -118,3 +118,2 @@\n-                HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_AND_BOUNDS, typeElement);\n-        \/\/Let's not link to ourselves in the header.\n-        linkInfo.linkToSelf = false;\n+                HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_AND_BOUNDS, typeElement)\n+                .linkToSelf(false);  \/\/ Let's not link to ourselves in the header\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1783,1 +1783,1 @@\n-        linkInfo.label = Text.of(\"@\" + annotationDoc.getSimpleName());\n+        linkInfo.label(\"@\" + annotationDoc.getSimpleName());\n@@ -1899,1 +1899,1 @@\n-                        linkInfo.label = Text.of(name + utils.getDimension(t) + \".class\");\n+                        linkInfo.label(name + utils.getDimension(t) + \".class\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import javax.lang.model.element.TypeParameterElement;\n+import javax.lang.model.type.ArrayType;\n@@ -38,0 +40,3 @@\n+import javax.lang.model.type.TypeVariable;\n+import javax.lang.model.type.WildcardType;\n+import javax.lang.model.util.SimpleTypeVisitor14;\n@@ -48,0 +53,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -49,2 +55,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.links.LinkFactory;\n-import jdk.javadoc.internal.doclets.toolkit.util.links.LinkInfo;\n@@ -55,1 +59,1 @@\n-public class HtmlLinkFactory extends LinkFactory {\n+public class HtmlLinkFactory {\n@@ -59,0 +63,1 @@\n+    private final Utils utils;\n@@ -60,0 +65,5 @@\n+    \/**\n+     * Constructs a new link factory.\n+     *\n+     * @param writer the HTML doclet writer\n+     *\/\n@@ -61,1 +71,0 @@\n-        super(writer.configuration.utils);\n@@ -64,0 +73,1 @@\n+        utils = writer.configuration.utils;\n@@ -66,1 +76,3 @@\n-    @Override\n+    \/**\n+     * {@return a new instance of a content object}\n+     *\/\n@@ -71,2 +83,136 @@\n-    @Override\n-    protected Content getClassLink(LinkInfo linkInfo) {\n+    \/**\n+     * Constructs a link from the given link information.\n+     *\n+     * @param linkInfo the information about the link.\n+     * @return the link.\n+     *\/\n+    public Content getLink(HtmlLinkInfo linkInfo) {\n+        if (linkInfo.getType() != null) {\n+            SimpleTypeVisitor14<Content, HtmlLinkInfo> linkVisitor = new SimpleTypeVisitor14<>() {\n+\n+                final Content link = newContent();\n+\n+                \/\/ handles primitives, no types and error types\n+                @Override\n+                protected Content defaultAction(TypeMirror type, HtmlLinkInfo linkInfo) {\n+                    link.add(utils.getTypeName(type, false));\n+                    return link;\n+                }\n+\n+                int currentDepth = 0;\n+                @Override\n+                public Content visitArray(ArrayType type, HtmlLinkInfo linkInfo) {\n+                    \/\/ keep track of the dimension depth and replace the last dimension\n+                    \/\/ specifier with varargs, when the stack is fully unwound.\n+                    currentDepth++;\n+                    var componentType = type.getComponentType();\n+                    visit(componentType, linkInfo.forType(componentType));\n+                    currentDepth--;\n+                    if (utils.isAnnotated(type)) {\n+                        link.add(\" \");\n+                        link.add(getTypeAnnotationLinks(linkInfo));\n+                    }\n+                    \/\/ use vararg if required\n+                    if (linkInfo.isVarArg() && currentDepth == 0) {\n+                        link.add(\"...\");\n+                    } else {\n+                        link.add(\"[]\");\n+                    }\n+                    return link;\n+                }\n+\n+                @Override\n+                public Content visitWildcard(WildcardType type, HtmlLinkInfo linkInfo) {\n+                    link.add(getTypeAnnotationLinks(linkInfo));\n+                    link.add(\"?\");\n+                    TypeMirror extendsBound = type.getExtendsBound();\n+                    if (extendsBound != null) {\n+                        link.add(\" extends \");\n+                        link.add(getLink(getBoundsLinkInfo(linkInfo, extendsBound)));\n+                    }\n+                    TypeMirror superBound = type.getSuperBound();\n+                    if (superBound != null) {\n+                        link.add(\" super \");\n+                        link.add(getLink(getBoundsLinkInfo(linkInfo, superBound)));\n+                    }\n+                    return link;\n+                }\n+\n+                @Override\n+                public Content visitTypeVariable(TypeVariable type, HtmlLinkInfo linkInfo) {\n+                    link.add(getTypeAnnotationLinks(linkInfo));\n+                    TypeVariable typevariable = (utils.isArrayType(type))\n+                            ? (TypeVariable) utils.getComponentType(type)\n+                            : type;\n+                    Element owner = typevariable.asElement().getEnclosingElement();\n+                    if (linkInfo.linkTypeParameters() && utils.isTypeElement(owner)) {\n+                        linkInfo.setTypeElement((TypeElement) owner);\n+                        Content label = newContent();\n+                        label.add(utils.getTypeName(type, false));\n+                        linkInfo.label(label).skipPreview(true);\n+                        link.add(getClassLink(linkInfo));\n+                    } else {\n+                        \/\/ No need to link method type parameters.\n+                        link.add(utils.getTypeName(typevariable, false));\n+                    }\n+\n+                    if (linkInfo.showTypeBounds()) {\n+                        linkInfo.showTypeBounds(false);\n+                        TypeParameterElement tpe = ((TypeParameterElement) typevariable.asElement());\n+                        boolean more = false;\n+                        List<? extends TypeMirror> bounds = utils.getBounds(tpe);\n+                        for (TypeMirror bound : bounds) {\n+                            \/\/ we get everything as extends java.lang.Object we suppress\n+                            \/\/ all of them except those that have multiple extends\n+                            if (bounds.size() == 1 &&\n+                                    utils.typeUtils.isSameType(bound, utils.getObjectType()) &&\n+                                    !utils.isAnnotated(bound)) {\n+                                continue;\n+                            }\n+                            link.add(more ? \" & \" : \" extends \");\n+                            link.add(getLink(getBoundsLinkInfo(linkInfo, bound)));\n+                            more = true;\n+                        }\n+                    }\n+                    return link;\n+                }\n+\n+                @Override\n+                public Content visitDeclared(DeclaredType type, HtmlLinkInfo linkInfo) {\n+                    TypeMirror enc = type.getEnclosingType();\n+                    if (enc instanceof DeclaredType dt && utils.isGenericType(dt)) {\n+                        \/\/ If an enclosing type has type parameters render them as separate links as\n+                        \/\/ otherwise this information is lost. On the other hand, plain enclosing types\n+                        \/\/ are not linked separately as they are easy to reach from the nested type.\n+                        visitDeclared(dt, linkInfo.forType(dt));\n+                        link.add(\".\");\n+                    }\n+                    link.add(getTypeAnnotationLinks(linkInfo));\n+                    linkInfo.setTypeElement(utils.asTypeElement(type));\n+                    link.add(getClassLink(linkInfo));\n+                    if (linkInfo.showTypeParameters()) {\n+                        link.add(getTypeParameterLinks(linkInfo));\n+                    }\n+                    return link;\n+                }\n+            };\n+            return linkVisitor.visit(linkInfo.getType(), linkInfo);\n+        } else if (linkInfo.getTypeElement() != null) {\n+            Content link = newContent();\n+            link.add(getClassLink(linkInfo));\n+            if (linkInfo.showTypeParameters()) {\n+                link.add(getTypeParameterLinks(linkInfo));\n+            }\n+            return link;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    \/**\n+     * Returns a link to the given class.\n+     *\n+     * @param linkInfo the information about the link to construct\n+     * @return the link for the given class.\n+     *\/\n+    protected Content getClassLink(HtmlLinkInfo linkInfo) {\n@@ -74,2 +220,1 @@\n-        HtmlLinkInfo classLinkInfo = (HtmlLinkInfo) linkInfo;\n-        TypeElement typeElement = classLinkInfo.typeElement;\n+        TypeElement typeElement = linkInfo.getTypeElement();\n@@ -79,4 +224,5 @@\n-        boolean hasWhere = classLinkInfo.fragment != null && classLinkInfo.fragment.length() != 0;\n-        if (!hasWhere) {\n-            boolean isTypeLink = classLinkInfo.type != null &&\n-                     utils.isTypeVariable(utils.getComponentType(classLinkInfo.type));\n+        String fragment = linkInfo.getFragment();\n+        boolean hasFragment = fragment != null && !fragment.isEmpty();\n+        if (!hasFragment) {\n+            boolean isTypeLink = linkInfo.getType() != null &&\n+                     utils.isTypeVariable(utils.getComponentType(linkInfo.getType()));\n@@ -85,2 +231,2 @@\n-        Content label = classLinkInfo.getClassLinkLabel(configuration);\n-        if (classLinkInfo.context == HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_IN_LABEL) {\n+        Content label = linkInfo.getClassLinkLabel(configuration);\n+        if (linkInfo.getContext() == HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_IN_LABEL) {\n@@ -89,1 +235,1 @@\n-            label.add(getTypeParameterLinks(classLinkInfo));\n+            label.add(getTypeParameterLinks(linkInfo));\n@@ -93,2 +239,2 @@\n-        boolean showPreview = !classLinkInfo.skipPreview;\n-        if (!hasWhere && showPreview) {\n+        boolean showPreview = !linkInfo.isSkipPreview();\n+        if (!hasFragment && showPreview) {\n@@ -97,4 +243,4 @@\n-        } else if (classLinkInfo.context == HtmlLinkInfo.Kind.SHOW_PREVIEW\n-                && classLinkInfo.targetMember != null && showPreview) {\n-            flags = utils.elementFlags(classLinkInfo.targetMember);\n-            TypeElement enclosing = utils.getEnclosingTypeElement(classLinkInfo.targetMember);\n+        } else if (linkInfo.getContext() == HtmlLinkInfo.Kind.SHOW_PREVIEW\n+                && linkInfo.getTargetMember() != null && showPreview) {\n+            flags = utils.elementFlags(linkInfo.getTargetMember());\n+            TypeElement enclosing = utils.getEnclosingTypeElement(linkInfo.getTargetMember());\n@@ -110,1 +256,1 @@\n-                previewTarget = classLinkInfo.targetMember;\n+                previewTarget = linkInfo.getTargetMember();\n@@ -120,2 +266,2 @@\n-                DocPath filename = getPath(classLinkInfo);\n-                if (linkInfo.linkToSelf || typeElement != m_writer.getCurrentPageElement()) {\n+                DocPath filename = getPath(linkInfo);\n+                if (linkInfo.linkToSelf() || typeElement != m_writer.getCurrentPageElement()) {\n@@ -123,1 +269,1 @@\n-                                filename.fragment(classLinkInfo.fragment),\n+                                filename.fragment(linkInfo.getFragment()),\n@@ -125,1 +271,1 @@\n-                                classLinkInfo.style,\n+                                linkInfo.getStyle(),\n@@ -137,2 +283,2 @@\n-                typeElement, classLinkInfo.fragment,\n-                label, classLinkInfo.style, true);\n+                typeElement, linkInfo.getFragment(),\n+                label, linkInfo.getStyle(), true);\n@@ -159,2 +305,7 @@\n-    @Override\n-    protected Content getTypeParameterLinks(LinkInfo linkInfo) {\n+    \/**\n+     * Returns links to the type parameters.\n+     *\n+     * @param linkInfo the information about the link to construct\n+     * @return the links to the type parameters\n+     *\/\n+    protected Content getTypeParameterLinks(HtmlLinkInfo linkInfo) {\n@@ -163,2 +314,2 @@\n-        TypeMirror ctype = linkInfo.type != null\n-                ? utils.getComponentType(linkInfo.type)\n+        TypeMirror ctype = linkInfo.getType() != null\n+                ? utils.getComponentType(linkInfo.getType())\n@@ -166,4 +317,4 @@\n-        if (linkInfo.executableElement != null) {\n-            linkInfo.executableElement.getTypeParameters().forEach(t -> vars.add(t.asType()));\n-        } else if (linkInfo.type != null && utils.isDeclaredType(linkInfo.type)) {\n-            vars.addAll(((DeclaredType) linkInfo.type).getTypeArguments());\n+        if (linkInfo.getExecutableElement() != null) {\n+            linkInfo.getExecutableElement().getTypeParameters().forEach(t -> vars.add(t.asType()));\n+        } else if (linkInfo.getType() != null && utils.isDeclaredType(linkInfo.getType())) {\n+            vars.addAll(((DeclaredType) linkInfo.getType()).getTypeArguments());\n@@ -172,2 +323,2 @@\n-        } else if (ctype == null && linkInfo.typeElement != null) {\n-            linkInfo.typeElement.getTypeParameters().forEach(t -> vars.add(t.asType()));\n+        } else if (ctype == null && linkInfo.getTypeElement() != null) {\n+            linkInfo.getTypeElement().getTypeParameters().forEach(t -> vars.add(t.asType()));\n@@ -185,1 +336,1 @@\n-                    if (linkInfo.addLineBreaksInTypeParameters) {\n+                    if (linkInfo.addLineBreaksInTypeParameters()) {\n@@ -189,1 +340,1 @@\n-                links.add(getTypeParameterLink(linkInfo, t));\n+                links.add(getLink(linkInfo.forType(t)));\n@@ -198,1 +349,1 @@\n-     * Returns a link to the given type parameter.\n+     * Returns links to the type annotations.\n@@ -200,3 +351,2 @@\n-     * @param linkInfo     the information about the link to construct\n-     * @param typeParam the type parameter to link to\n-     * @return the link\n+     * @param linkInfo the information about the link to construct\n+     * @return the links to the type annotations\n@@ -204,13 +354,1 @@\n-    protected Content getTypeParameterLink(LinkInfo linkInfo, TypeMirror typeParam) {\n-        HtmlLinkInfo typeLinkInfo = new HtmlLinkInfo(m_writer.configuration,\n-                ((HtmlLinkInfo) linkInfo).getContext(), typeParam);\n-        typeLinkInfo.showTypeBounds = linkInfo.showTypeBounds;\n-        typeLinkInfo.linkTypeParameters = linkInfo.linkTypeParameters;\n-        typeLinkInfo.linkToSelf = linkInfo.linkToSelf;\n-        typeLinkInfo.addLineBreaksInTypeParameters = linkInfo.addLineBreaksInTypeParameters;\n-        typeLinkInfo.showTypeParameterAnnotations = linkInfo.showTypeParameterAnnotations;\n-        return getLink(typeLinkInfo);\n-    }\n-\n-    @Override\n-    public Content getTypeAnnotationLinks(LinkInfo linkInfo) {\n+    public Content getTypeAnnotationLinks(HtmlLinkInfo linkInfo) {\n@@ -219,4 +357,4 @@\n-        if (utils.isAnnotated(linkInfo.type)) {\n-            annotations = linkInfo.type.getAnnotationMirrors();\n-        } else if (utils.isTypeVariable(linkInfo.type) && linkInfo.showTypeParameterAnnotations) {\n-            Element element = utils.typeUtils.asElement(linkInfo.type);\n+        if (utils.isAnnotated(linkInfo.getType())) {\n+            annotations = linkInfo.getType().getAnnotationMirrors();\n+        } else if (utils.isTypeVariable(linkInfo.getType()) && linkInfo.showTypeParameterAnnotations()) {\n+            Element element = utils.typeUtils.asElement(linkInfo.getType());\n@@ -240,0 +378,7 @@\n+    \/*\n+     * Returns a link info for a type bounds link.\n+     *\/\n+    private HtmlLinkInfo getBoundsLinkInfo(HtmlLinkInfo linkInfo, TypeMirror bound) {\n+        return linkInfo.forType(bound).skipPreview(false);\n+    }\n+\n@@ -275,1 +420,1 @@\n-        return m_writer.pathToRoot.resolve(docPaths.forClass(linkInfo.typeElement));\n+        return m_writer.pathToRoot.resolve(docPaths.forClass(linkInfo.getTypeElement()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":208,"deletions":63,"binary":false,"changes":271,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javax.lang.model.type.DeclaredType;\n@@ -36,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;\n@@ -38,1 +40,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.links.LinkInfo;\n@@ -44,1 +45,1 @@\n-public class HtmlLinkInfo extends LinkInfo {\n+public class HtmlLinkInfo {\n@@ -82,1 +83,1 @@\n-    public final HtmlConfiguration configuration;\n+    private final HtmlConfiguration configuration;\n@@ -84,4 +85,2 @@\n-    \/**\n-     * The context of the link.\n-     *\/\n-    public Kind context = Kind.PLAIN;\n+    \/\/ The context of the link.\n+    private Kind context = Kind.PLAIN;\n@@ -89,4 +88,2 @@\n-    \/**\n-     * The fragment of the link.\n-     *\/\n-    public String fragment = \"\";\n+    \/\/ The fragment of the link.\n+    private String fragment = \"\";\n@@ -94,4 +91,2 @@\n-    \/**\n-     * The member this link points to (if any).\n-     *\/\n-    public Element targetMember;\n+    \/\/ The member this link points to (if any).\n+    private Element targetMember;\n@@ -99,4 +94,27 @@\n-    \/**\n-     * Optional style for the link.\n-     *\/\n-    public HtmlStyle style = null;\n+    \/\/ Optional style for the link.\n+    private HtmlStyle style = null;\n+\n+    \/\/ The class we want to link to. Null if we are not linking to a class.\n+    private TypeElement typeElement;\n+\n+    \/\/ The executable element we want to link to. Null if we are not linking to an executable element.\n+    private ExecutableElement executableElement;\n+\n+    \/\/ The Type we want to link to. Null if we are not linking to a type.\n+    private TypeMirror type;\n+\n+    \/\/ True if this is a link to a VarArg.\n+    private boolean isVarArg = false;\n+\n+    \/\/ The label for the link.\n+    private Content label;\n+\n+    \/\/ True if we should print the type bounds for the type parameter.\n+    private boolean showTypeBounds = true;\n+\n+    \/\/ True if type parameters should be rendered as links.\n+    private boolean linkTypeParameters = true;\n+\n+    \/\/ By default, the link can be to the page it's already on.  However,\n+    \/\/ there are cases where we don't want this (e.g. heading of class page).\n+    private boolean linkToSelf = true;\n@@ -104,1 +122,8 @@\n-    public final Utils utils;\n+    \/\/ True iff the preview flags should be skipped for this link.\n+    private boolean skipPreview;\n+\n+    \/\/ True if type parameters should be separated by line breaks.\n+    private boolean addLineBreaksInTypeParameters = false;\n+\n+    \/\/ True if annotations on type parameters should be shown.\n+    private boolean showTypeParameterAnnotations = false;\n@@ -115,1 +140,0 @@\n-        this.utils = configuration.utils;\n@@ -120,5 +144,0 @@\n-    @Override\n-    protected Content newContent() {\n-        return new ContentBuilder();\n-    }\n-\n@@ -134,1 +153,0 @@\n-        this.utils = configuration.utils;\n@@ -148,1 +166,0 @@\n-        this.utils = configuration.utils;\n@@ -153,0 +170,49 @@\n+    \/**\n+     * Creates a copy of this HtmlLinkInfo instance with a different TypeMirror.\n+     * This is used for contained types such as type parameters or array components.\n+     *\n+     * @param type the type mirror\n+     * @return the new link info\n+     *\/\n+    public HtmlLinkInfo forType(TypeMirror type) {\n+        HtmlLinkInfo linkInfo = new HtmlLinkInfo(configuration, context, type);\n+        linkInfo.showTypeBounds = showTypeBounds;\n+        linkInfo.linkTypeParameters = linkTypeParameters;\n+        linkInfo.linkToSelf = linkToSelf;\n+        linkInfo.addLineBreaksInTypeParameters = addLineBreaksInTypeParameters;\n+        linkInfo.showTypeParameterAnnotations = showTypeParameterAnnotations;\n+        linkInfo.skipPreview = skipPreview;\n+        return linkInfo;\n+    }\n+\n+    \/**\n+     * Sets the typeElement\n+     * @param typeElement the new typeElement object\n+     *\/\n+    public void setTypeElement(TypeElement typeElement) {\n+        this.typeElement = typeElement;\n+    }\n+\n+    \/**\n+     * The class we want to link to.  Null if we are not linking\n+     * to a class.\n+     *\/\n+    public TypeElement getTypeElement() {\n+        return typeElement;\n+    }\n+\n+    \/**\n+     * The executable element we want to link to.  Null if we are not linking\n+     * to an executable element.\n+     *\/\n+    public ExecutableElement getExecutableElement() {\n+        return executableElement;\n+    }\n+\n+    \/**\n+     * The Type we want to link to.  Null if we are not linking to a type.\n+     *\/\n+    public TypeMirror getType() {\n+        return type;\n+    }\n+\n@@ -156,0 +222,1 @@\n+     * @return this object\n@@ -164,0 +231,2 @@\n+     * @param label the new value\n+     * @return this object\n@@ -170,0 +239,7 @@\n+    \/**\n+     * {@return the label for the link}\n+     *\/\n+    public Content getLabel() {\n+        return label;\n+    }\n+\n@@ -172,0 +248,2 @@\n+     * @param style the new style value\n+     * @return this object\n@@ -178,0 +256,7 @@\n+    \/**\n+     * {@return the optional style for the link}\n+     *\/\n+    public HtmlStyle getStyle() {\n+        return style;\n+    }\n+\n@@ -180,0 +265,2 @@\n+     * @param varargs the new value\n+     * @return this object\n@@ -186,0 +273,7 @@\n+    \/**\n+     * {@return true if this is a link to a vararg member}\n+     *\/\n+    public boolean isVarArg() {\n+        return isVarArg;\n+    }\n+\n@@ -188,0 +282,2 @@\n+     * @param fragment the new fragment value\n+     * @return this object\n@@ -194,0 +290,80 @@\n+    \/**\n+     * {@return the fragment of the link}\n+     *\/\n+    public String getFragment() {\n+        return fragment;\n+    }\n+\n+    \/**\n+     * Sets the addLineBreaksInTypeParameters flag for this link.\n+     * @param addLineBreaksInTypeParameters the new value\n+     * @return this object\n+     *\/\n+    public HtmlLinkInfo addLineBreaksInTypeParameters(boolean addLineBreaksInTypeParameters) {\n+        this.addLineBreaksInTypeParameters = addLineBreaksInTypeParameters;\n+        return this;\n+    }\n+\n+    \/**\n+     * {@return true if type parameters should be separated by line breaks}\n+     *\/\n+    public boolean addLineBreaksInTypeParameters() {\n+        return addLineBreaksInTypeParameters;\n+    }\n+\n+    \/**\n+     * Set the linkToSelf flag for this link.\n+     * @param linkToSelf the new value\n+     * @return this object\n+     *\/\n+    public HtmlLinkInfo linkToSelf(boolean linkToSelf) {\n+        this.linkToSelf = linkToSelf;\n+        return this;\n+    }\n+\n+    \/**\n+     * {@return true if we should generate links to the current page}\n+     *\/\n+    public boolean linkToSelf() {\n+        return linkToSelf;\n+    }\n+\n+    \/**\n+     * {@return true if type parameters should be rendered as links}\n+     *\/\n+    public boolean linkTypeParameters() {\n+        return linkTypeParameters;\n+    }\n+\n+    \/**\n+     * Set the showTypeBounds flag for this link\n+     * @param showTypeBounds the new value\n+     *\/\n+    public void showTypeBounds(boolean showTypeBounds) {\n+        this.showTypeBounds = showTypeBounds;\n+    }\n+\n+    \/**\n+     * {@return true if we should print the type bounds for the type parameter}\n+     *\/\n+    public boolean showTypeBounds() {\n+        return showTypeBounds;\n+    }\n+\n+    \/**\n+     * Set the showTypeParameterAnnotations flag for this link.\n+     * @param showTypeParameterAnnotations the new value\n+     * @return this object\n+     *\/\n+    public HtmlLinkInfo showTypeParameterAnnotations(boolean showTypeParameterAnnotations) {\n+        this.showTypeParameterAnnotations = showTypeParameterAnnotations;\n+        return this;\n+    }\n+\n+    \/**\n+     * {@return true if annotations on type parameters should be shown}\n+     *\/\n+    public boolean showTypeParameterAnnotations() {\n+        return showTypeParameterAnnotations;\n+    }\n+\n@@ -196,0 +372,2 @@\n+     * @param el the new member value\n+     * @return this object\n@@ -202,0 +380,7 @@\n+    \/**\n+     * {@return the member this link points to (if any)}\n+     *\/\n+    public Element getTargetMember() {\n+        return targetMember;\n+    }\n+\n@@ -204,0 +389,2 @@\n+     * @param skipPreview the new value\n+     * @return this object\n@@ -210,0 +397,10 @@\n+    \/**\n+     * {@return true iff the preview flags should be skipped for this link}\n+     *\/\n+    public boolean isSkipPreview() {\n+        return skipPreview;\n+    }\n+\n+    \/**\n+     * {@return the link context}\n+     *\/\n@@ -220,1 +417,1 @@\n-    public final void setContext(Kind c) {\n+    private void setContext(Kind c) {\n@@ -233,1 +430,0 @@\n-    @Override\n@@ -238,1 +434,5 @@\n-    @Override\n+    \/**\n+     * Returns true if links to declared types should include type parameters.\n+     *\n+     * @return true if type parameter links should be included\n+     *\/\n@@ -246,0 +446,31 @@\n+    \/**\n+     * Return the label for this class link.\n+     *\n+     * @param configuration the current configuration of the doclet.\n+     * @return the label for this class link.\n+     *\/\n+    public Content getClassLinkLabel(BaseConfiguration configuration) {\n+        if (label != null && !label.isEmpty()) {\n+            return label;\n+        } else if (isLinkable()) {\n+            Content tlabel = newContent();\n+            Utils utils = configuration.utils;\n+            tlabel.add(type instanceof DeclaredType dt && utils.isGenericType(dt.getEnclosingType())\n+                    \/\/ If enclosing type is rendered as separate links only use own class name\n+                    ? typeElement.getSimpleName().toString()\n+                    : configuration.utils.getSimpleName(typeElement));\n+            return tlabel;\n+        } else {\n+            Content tlabel = newContent();\n+            tlabel.add(configuration.getClassName(typeElement));\n+            return tlabel;\n+        }\n+    }\n+\n+    \/**\n+     * {@return a new instance of a content object}\n+     *\/\n+    protected Content newContent() {\n+        return new ContentBuilder();\n+    }\n+\n@@ -249,1 +480,11 @@\n-                \"context=\" + context +\n+                \"typeElement=\" + typeElement +\n+                \", executableElement=\" + executableElement +\n+                \", type=\" + type +\n+                \", isVarArg=\" + isVarArg +\n+                \", label=\" + label +\n+                \", showTypeBounds=\" + showTypeBounds +\n+                \", linkTypeParameters=\" + linkTypeParameters +\n+                \", linkToSelf=\" + linkToSelf +\n+                \", addLineBreaksInTypeParameters=\" + addLineBreaksInTypeParameters +\n+                \", showTypeParameterAnnotations=\" + showTypeParameterAnnotations +\n+                \", context=\" + context +\n@@ -251,2 +492,1 @@\n-                \", style=\" + style +\n-                super.toString() + '}';\n+                \", style=\" + style + '}';\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkInfo.java","additions":274,"deletions":34,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -138,4 +138,3 @@\n-                    HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_AND_BOUNDS, typeElement);\n-            linkInfo.showTypeParameterAnnotations = true;\n-            \/\/Let's not link to ourselves in the signature.\n-            linkInfo.linkToSelf = false;\n+                    HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS_AND_BOUNDS, typeElement)\n+                    .linkToSelf(false)  \/\/ Let's not link to ourselves in the signature\n+                    .showTypeParameterAnnotations(true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,230 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit.util.links;\n-\n-import java.util.List;\n-\n-import javax.lang.model.element.Element;\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.element.TypeParameterElement;\n-import javax.lang.model.type.ArrayType;\n-import javax.lang.model.type.DeclaredType;\n-import javax.lang.model.type.TypeMirror;\n-import javax.lang.model.type.TypeVariable;\n-import javax.lang.model.type.WildcardType;\n-import javax.lang.model.util.SimpleTypeVisitor14;\n-\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n-\n-\/**\n- * A factory that constructs links from given link information.\n- *\/\n-public abstract class LinkFactory {\n-    protected final Utils utils;\n-\n-    protected LinkFactory(Utils utils) {\n-        this.utils = utils;\n-    }\n-\n-    \/**\n-     * {@return a new instance of a content object}\n-     *\/\n-    protected abstract Content newContent();\n-\n-    \/**\n-     * Constructs a link from the given link information.\n-     *\n-     * @param linkInfo the information about the link.\n-     * @return the link.\n-     *\/\n-    public Content getLink(LinkInfo linkInfo) {\n-        if (linkInfo.type != null) {\n-            SimpleTypeVisitor14<Content, LinkInfo> linkVisitor = new SimpleTypeVisitor14<>() {\n-\n-                final Content link = newContent();\n-\n-                \/\/ handles primitives, no types and error types\n-                @Override\n-                protected Content defaultAction(TypeMirror type, LinkInfo linkInfo) {\n-                    link.add(utils.getTypeName(type, false));\n-                    return link;\n-                }\n-\n-                int currentDepth = 0;\n-                @Override\n-                public Content visitArray(ArrayType type, LinkInfo linkInfo) {\n-                    \/\/ keep track of the dimension depth and replace the last dimension\n-                    \/\/ specifier with varargs, when the stack is fully unwound.\n-                    currentDepth++;\n-                    linkInfo.type = type.getComponentType();\n-                    visit(linkInfo.type, linkInfo);\n-                    currentDepth--;\n-                    if (utils.isAnnotated(type)) {\n-                        linkInfo.type = type;\n-                        link.add(\" \");\n-                        link.add(getTypeAnnotationLinks(linkInfo));\n-                    }\n-                    \/\/ use vararg if required\n-                    if (linkInfo.isVarArg && currentDepth == 0) {\n-                        link.add(\"...\");\n-                    } else {\n-                        link.add(\"[]\");\n-                    }\n-                    return link;\n-                }\n-\n-                @Override\n-                public Content visitWildcard(WildcardType type, LinkInfo linkInfo) {\n-                    link.add(getTypeAnnotationLinks(linkInfo));\n-                    link.add(\"?\");\n-                    TypeMirror extendsBound = type.getExtendsBound();\n-                    if (extendsBound != null) {\n-                        link.add(\" extends \");\n-                        setBoundsLinkInfo(linkInfo, extendsBound);\n-                        link.add(getLink(linkInfo));\n-                    }\n-                    TypeMirror superBound = type.getSuperBound();\n-                    if (superBound != null) {\n-                        link.add(\" super \");\n-                        setBoundsLinkInfo(linkInfo, superBound);\n-                        link.add(getLink(linkInfo));\n-                    }\n-                    return link;\n-                }\n-\n-                @Override\n-                public Content visitTypeVariable(TypeVariable type, LinkInfo linkInfo) {\n-                    link.add(getTypeAnnotationLinks(linkInfo));\n-                    TypeVariable typevariable = (utils.isArrayType(type))\n-                            ? (TypeVariable) utils.getComponentType(type)\n-                            : type;\n-                    Element owner = typevariable.asElement().getEnclosingElement();\n-                    if (linkInfo.linkTypeParameters && utils.isTypeElement(owner)) {\n-                        linkInfo.typeElement = (TypeElement) owner;\n-                        Content label = newContent();\n-                        label.add(utils.getTypeName(type, false));\n-                        linkInfo.label = label;\n-                        linkInfo.skipPreview = true;\n-                        link.add(getClassLink(linkInfo));\n-                    } else {\n-                        \/\/ No need to link method type parameters.\n-                        link.add(utils.getTypeName(typevariable, false));\n-                    }\n-\n-                    if (linkInfo.showTypeBounds) {\n-                        linkInfo.showTypeBounds = false;\n-                        TypeParameterElement tpe = ((TypeParameterElement) typevariable.asElement());\n-                        boolean more = false;\n-                        List<? extends TypeMirror> bounds = utils.getBounds(tpe);\n-                        for (TypeMirror bound : bounds) {\n-                            \/\/ we get everything as extends java.lang.Object we suppress\n-                            \/\/ all of them except those that have multiple extends\n-                            if (bounds.size() == 1 &&\n-                                    utils.typeUtils.isSameType(bound, utils.getObjectType()) &&\n-                                    !utils.isAnnotated(bound)) {\n-                                continue;\n-                            }\n-                            link.add(more ? \" & \" : \" extends \");\n-                            setBoundsLinkInfo(linkInfo, bound);\n-                            link.add(getLink(linkInfo));\n-                            more = true;\n-                        }\n-                    }\n-                    return link;\n-                }\n-\n-                @Override\n-                public Content visitDeclared(DeclaredType type, LinkInfo linkInfo) {\n-                    TypeMirror enc = type.getEnclosingType();\n-                    if (enc instanceof DeclaredType dt && utils.isGenericType(dt)) {\n-                        \/\/ If an enclosing type has type parameters render them as separate links as\n-                        \/\/ otherwise this information is lost. On the other hand, plain enclosing types\n-                        \/\/ are not linked separately as they are easy to reach from the nested type.\n-                        setEnclosingTypeLinkInfo(linkInfo, dt);\n-                        visitDeclared(dt, linkInfo);\n-                        link.add(\".\");\n-                        setEnclosingTypeLinkInfo(linkInfo, type);\n-                    }\n-                    link.add(getTypeAnnotationLinks(linkInfo));\n-                    linkInfo.typeElement = utils.asTypeElement(type);\n-                    link.add(getClassLink(linkInfo));\n-                    if (linkInfo.showTypeParameters()) {\n-                        link.add(getTypeParameterLinks(linkInfo));\n-                    }\n-                    return link;\n-                }\n-            };\n-            return linkVisitor.visit(linkInfo.type, linkInfo);\n-        } else if (linkInfo.typeElement != null) {\n-            Content link = newContent();\n-            link.add(getClassLink(linkInfo));\n-            if (linkInfo.showTypeParameters()) {\n-                link.add(getTypeParameterLinks(linkInfo));\n-            }\n-            return link;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    private void setBoundsLinkInfo(LinkInfo linkInfo, TypeMirror bound) {\n-        linkInfo.typeElement = null;\n-        linkInfo.label = null;\n-        linkInfo.type = bound;\n-        linkInfo.skipPreview = false;\n-    }\n-\n-    private void setEnclosingTypeLinkInfo(LinkInfo linkinfo, DeclaredType enclosing) {\n-        linkinfo.typeElement = null;\n-        linkinfo.label = null;\n-        linkinfo.type = enclosing;\n-    }\n-\n-    \/**\n-     * Returns a link to the given class.\n-     *\n-     * @param linkInfo the information about the link to construct\n-     * @return the link for the given class.\n-     *\/\n-    protected abstract Content getClassLink(LinkInfo linkInfo);\n-\n-    \/**\n-     * Returns links to the type parameters.\n-     *\n-     * @param linkInfo the information about the link to construct\n-     * @return the links to the type parameters\n-     *\/\n-    protected abstract Content getTypeParameterLinks(LinkInfo linkInfo);\n-\n-    \/**\n-     * Returns links to the type annotations.\n-     *\n-     * @param linkInfo the information about the link to construct\n-     * @return the links to the type annotations\n-     *\/\n-    public abstract Content getTypeAnnotationLinks(LinkInfo linkInfo);\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkFactory.java","additions":0,"deletions":230,"binary":false,"changes":230,"status":"deleted"},{"patch":"@@ -1,158 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.toolkit.util.links;\n-\n-import javax.lang.model.element.ExecutableElement;\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.type.DeclaredType;\n-import javax.lang.model.type.TypeMirror;\n-\n-import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n-\n-\/**\n- * Encapsulates information about a link.\n- *\/\n-public abstract class LinkInfo {\n-\n-    \/**\n-     * The class we want to link to.  Null if we are not linking\n-     * to a class.\n-     *\/\n-    public TypeElement typeElement;\n-\n-    \/**\n-     * The executable element we want to link to.  Null if we are not linking\n-     * to an executable element.\n-     *\/\n-    public ExecutableElement executableElement;\n-\n-    \/**\n-     * The Type we want to link to.  Null if we are not linking to a type.\n-     *\/\n-    public TypeMirror type;\n-\n-    \/**\n-     * True if this is a link to a VarArg.\n-     *\/\n-    public boolean isVarArg = false;\n-\n-    \/**\n-     * The label for the link.\n-     *\/\n-    public Content label;\n-\n-    \/**\n-     * True if we should print the type bounds for the type parameter.\n-     *\/\n-    public boolean showTypeBounds = true;\n-\n-    \/**\n-     * True if type parameters should be rendered as links.\n-     *\/\n-    public boolean linkTypeParameters = true;\n-\n-    \/**\n-     * By default, the link can be to the page it's already on.  However,\n-     * there are cases where we don't want this (e.g. heading of class page).\n-     *\/\n-    public boolean linkToSelf = true;\n-\n-    \/**\n-     * True iff the preview flags should be skipped for this link.\n-     *\/\n-    public boolean skipPreview;\n-\n-    \/**\n-     * True if type parameters should be separated by line breaks.\n-     *\/\n-    public boolean addLineBreaksInTypeParameters = false;\n-\n-    \/**\n-     * True if annotations on type parameters should be shown.\n-     *\/\n-    public boolean showTypeParameterAnnotations = false;\n-\n-    \/**\n-     * {@return a new instance of a content object}\n-     *\/\n-    protected abstract Content newContent();\n-\n-    \/**\n-     * Returns true if this link is linkable and false if we can't link to the\n-     * desired place.\n-     *\n-     * @return true if this link is linkable and false if we can't link to the\n-     * desired place.\n-     *\/\n-    public abstract boolean isLinkable();\n-\n-    \/**\n-     * Returns true if links to declared types should include type parameters.\n-     *\n-     * @return true if type parameter links should be included\n-     *\/\n-    public abstract boolean showTypeParameters();\n-\n-    \/**\n-     * Return the label for this class link.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @return the label for this class link.\n-     *\/\n-    public Content getClassLinkLabel(BaseConfiguration configuration) {\n-        if (label != null && !label.isEmpty()) {\n-            return label;\n-        } else if (isLinkable()) {\n-            Content tlabel = newContent();\n-            Utils utils = configuration.utils;\n-            tlabel.add(type instanceof DeclaredType dt && utils.isGenericType(dt.getEnclosingType())\n-                    \/\/ If enclosing type is rendered as separate links only use own class name\n-                    ? typeElement.getSimpleName().toString()\n-                    : configuration.utils.getSimpleName(typeElement));\n-            return tlabel;\n-        } else {\n-            Content tlabel = newContent();\n-            tlabel.add(configuration.getClassName(typeElement));\n-            return tlabel;\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"LinkInfo{\" + \"typeElement=\" + typeElement +\n-                \", executableElement=\" + executableElement +\n-                \", type=\" + type +\n-                \", isVarArg=\" + isVarArg +\n-                \", label=\" + label +\n-                \", showTypeBounds=\" + showTypeBounds +\n-                \", linkTypeParameters=\" + linkTypeParameters +\n-                \", linkToSelf=\" + linkToSelf +\n-                \", addLineBreaksInTypeParameters=\" + addLineBreaksInTypeParameters +\n-                \", showTypeParameterAnnotations=\" + showTypeParameterAnnotations + '}';\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkInfo.java","additions":0,"deletions":158,"binary":false,"changes":158,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * Provides a factory for constructing links.\n- *\/\n-package jdk.javadoc.internal.doclets.toolkit.util.links;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/package-info.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"}]}