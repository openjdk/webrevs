{"files":[{"patch":"@@ -421,1 +421,1 @@\n-                                                                    bool is_superclass,\n+                                                                    bool check_is_superclass,\n@@ -427,5 +427,0 @@\n-  \/\/ If class_name is already loaded, just return the superclass or superinterface.\n-  \/\/ Make sure there's a placeholder for the class_name before resolving.\n-  \/\/ This is used as a claim that this thread is currently loading superclass\/classloader\n-  \/\/ and for ClassCircularity checks.\n-\n@@ -433,1 +428,0 @@\n-  Dictionary* dictionary = loader_data->dictionary();\n@@ -435,5 +429,5 @@\n-  \/\/ can't throw error holding a lock\n-  bool throw_circularity_error = false;\n-  {\n-    MutexLocker mu(THREAD, SystemDictionary_lock);\n-    InstanceKlass* klassk = dictionary->find_class(THREAD, class_name);\n+  \/\/ For RedefineClasses, the class is already loaded so don't create a placeholder for checking\n+  \/\/ circularity error if the next_name matches class->super()->name() and if the class loaders match.\n+  \/\/ Also rarely, if parallel loading completes loading at this point, we can also check the super class name.\n+  if (check_is_superclass) {\n+    InstanceKlass* klassk = loader_data->dictionary()->find_class(THREAD, class_name);\n@@ -441,3 +435,1 @@\n-    \/\/ To support parallel loading: if class is done loading, just return the superclass\n-    \/\/ if the next_name matches class->super()->name() and if the class loaders match.\n-    if (klassk != nullptr && is_superclass &&\n+    if (klassk != nullptr &&\n@@ -448,7 +440,13 @@\n-    } else {\n-      \/\/ Must check ClassCircularity before checking if superclass is already loaded.\n-      PlaceholderEntry* probe = PlaceholderTable::get_entry(class_name, loader_data);\n-      if (probe && probe->check_seen_thread(THREAD, PlaceholderTable::DETECT_CIRCULARITY)) {\n-          log_circularity_error(class_name, probe);\n-          throw_circularity_error = true;\n-      }\n+    }\n+  }\n+\n+  \/\/ can't throw error holding a lock\n+  bool throw_circularity_error = false;\n+  {\n+    MutexLocker mu(THREAD, SystemDictionary_lock);\n+\n+    \/\/ Must check ClassCircularity before resolving next_name (superclass or interface).\n+    PlaceholderEntry* probe = PlaceholderTable::get_entry(class_name, loader_data);\n+    if (probe && probe->check_seen_thread(THREAD, PlaceholderTable::DETECT_CIRCULARITY)) {\n+        log_circularity_error(class_name, probe);\n+        throw_circularity_error = true;\n@@ -457,0 +455,3 @@\n+    \/\/ Make sure there's a placeholder for the class_name before resolving.\n+    \/\/ This is used as a claim that this thread is currently loading superclass\/classloader\n+    \/\/ and for ClassCircularity checks.\n@@ -504,2 +505,1 @@\n-  \/\/ This passes true to is_superclass even though it might not be the super class in order to perform the\n-  \/\/ optimization anyway.\n+  \/\/ This passes false to check_is_superclass to skip doing the unlikely optimization.\n@@ -509,1 +509,1 @@\n-                                                                       true,\n+                                                                       false,\n@@ -1016,1 +1016,1 @@\n-                                                     Handle class_loader, bool is_superclass, TRAPS) {\n+                                                     Handle class_loader, bool check_is_superclass, TRAPS) {\n@@ -1033,1 +1033,1 @@\n-                                                    class_loader, is_superclass, CHECK_false);\n+                                                    class_loader, check_is_superclass, CHECK_false);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-                                                           bool is_superclass,\n+                                                           bool check_is_superclass,\n@@ -117,2 +117,2 @@\n-                                              bool is_superclass, TRAPS) {\n-    return resolve_with_circularity_detection(class_name, super_name, class_loader, is_superclass, THREAD);\n+                                              bool check_is_superclass, TRAPS) {\n+    return resolve_with_circularity_detection(class_name, super_name, class_loader, check_is_superclass, THREAD);\n@@ -322,1 +322,1 @@\n-                                            bool is_superclass, TRAPS);\n+                                            bool check_is_superclass, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}