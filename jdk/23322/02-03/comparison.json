{"files":[{"patch":"@@ -421,1 +421,1 @@\n-                                                                    bool check_is_superclass,\n+                                                                    bool is_superclass,\n@@ -429,4 +429,1 @@\n-  \/\/ For RedefineClasses, the class is already loaded so don't create a placeholder for checking\n-  \/\/ circularity error if the next_name matches class->super()->name() and if the class loaders match.\n-  \/\/ Also rarely, if parallel loading completes loading at this point, we can also check the super class name.\n-  if (check_is_superclass) {\n+  if (is_superclass) {\n@@ -434,6 +431,11 @@\n-    InstanceKlass* quicksuperk;\n-    if (klassk != nullptr &&\n-       ((quicksuperk = klassk->java_super()) != nullptr) &&\n-       ((quicksuperk->name() == next_name) &&\n-         (quicksuperk->class_loader() == class_loader()))) {\n-      return quicksuperk;\n+    if (klassk != nullptr) {\n+      \/\/ We can come here for two reasons:\n+      \/\/ (a) RedefineClasses -- the class is already loaded\n+      \/\/ (b) Rarely, the class might have been loaded by a parallel thread\n+      \/\/ We can do a quick check against the already assigned superclass's name and loader.\n+      InstanceKlass* superk = klassk->java_super();\n+      if (superk != nullptr &&\n+          superk->name() == next_name &&\n+          superk->class_loader() == class_loader()) {\n+        return superk;\n+      }\n@@ -505,1 +507,1 @@\n-  \/\/ This passes false to check_is_superclass to skip doing the unlikely optimization.\n+  \/\/ This passes false to is_superclass to skip doing the unlikely optimization.\n@@ -1016,1 +1018,1 @@\n-                                                     Handle class_loader, bool check_is_superclass, TRAPS) {\n+                                                     Handle class_loader, bool is_superclass, TRAPS) {\n@@ -1033,1 +1035,1 @@\n-                                                    class_loader, check_is_superclass, CHECK_false);\n+                                                    class_loader, is_superclass, CHECK_false);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                                                           bool check_is_superclass,\n+                                                           bool is_superclass,\n@@ -117,2 +117,2 @@\n-                                              bool check_is_superclass, TRAPS) {\n-    return resolve_with_circularity_detection(class_name, super_name, class_loader, check_is_superclass, THREAD);\n+                                              bool is_superclass, TRAPS) {\n+    return resolve_with_circularity_detection(class_name, super_name, class_loader, is_superclass, THREAD);\n@@ -322,1 +322,1 @@\n-                                            bool check_is_superclass, TRAPS);\n+                                            bool is_superclass, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}