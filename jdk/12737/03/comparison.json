{"files":[{"patch":"@@ -181,0 +181,5 @@\n+template <> void DCmdArgument<char*>::destroy_value() {\n+  FREE_C_HEAP_ARRAY(char, _value);\n+  set_value(nullptr);\n+}\n+\n@@ -184,1 +189,1 @@\n-    _value = nullptr;\n+    destroy_value();\n@@ -186,1 +191,2 @@\n-    _value = NEW_C_HEAP_ARRAY(char, len + 1, mtInternal);\n+    \/\/ Use realloc as we may have a default set.\n+    _value = REALLOC_C_HEAP_ARRAY(char, _value, len + 1, mtInternal);\n@@ -193,1 +199,2 @@\n-  if (has_default() && _default_string != nullptr) {\n+  set_value(nullptr); \/\/ Must be initialized before calling parse_value\n+  if (has_default()) {\n@@ -195,5 +202,0 @@\n-    if (HAS_PENDING_EXCEPTION) {\n-     fatal(\"Default string must be parsable\");\n-    }\n-  } else {\n-    set_value(nullptr);\n@@ -203,5 +205,0 @@\n-template <> void DCmdArgument<char*>::destroy_value() {\n-  FREE_C_HEAP_ARRAY(char, _value);\n-  set_value(nullptr);\n-}\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,7 @@\n+    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"summary\", \"scale=\"});\n+    output = new OutputAnalyzer(pb.start());\n+    output.shouldContain(\"Incorrect scale value:\");\n+\n+    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"summary\", \"scale\"});\n+    output = new OutputAnalyzer(pb.start());\n+    output.shouldContain(\"Incorrect scale value: (null)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/JcmdScale.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}