{"files":[{"patch":"@@ -456,1 +456,3 @@\n-  __ adr(lr, pc());\n+  Label start;\n+  __ bind(start);\n+\n@@ -458,0 +460,4 @@\n+\n+  int entry_point = __ offset();\n+  __ b(start);\n+\n@@ -461,1 +467,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    _deopt_handler_size = 7 * NativeInstruction::instruction_size\n+    _deopt_handler_size = 4 * NativeInstruction::instruction_size\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -112,1 +111,1 @@\n-    return ( 4 * 4 );\n+    return ( 9 * 4 );\n@@ -888,2 +887,0 @@\n-  \/\/ Store address of the entry point\n-  __ push(PC);\n@@ -893,0 +890,7 @@\n+  address deopt_pc = __ pc();\n+  \/\/ Preserve R0 and reserve space for the address of the entry point\n+  __ push(RegisterSet(R0) | RegisterSet(R1));\n+  \/\/ Store the entry point address\n+  __ mov_relative_address(R0, deopt_pc);\n+  __ str(R0, Address(SP, wordSize));\n+  __ pop(R0); \/\/ restore R0\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -275,0 +275,6 @@\n+  Label start;\n+  __ bind(start);\n+\n+  __ jump(SharedRuntime::deopt_blob()->unpack(), relocInfo::runtime_call_type, noreg);\n+\n+  int entry_point = __ offset();\n@@ -277,1 +283,1 @@\n-  __ jump(SharedRuntime::deopt_blob()->unpack(), relocInfo::runtime_call_type, noreg);\n+  __ b(start);\n@@ -282,1 +288,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    _deopt_handler_size = 16\n+    _deopt_handler_size = 20\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -271,0 +271,3 @@\n+  Label start;\n+\n+  __ bind(start);\n@@ -272,0 +275,2 @@\n+  int entry_point = __ offset();\n+  __ b(start);\n@@ -276,1 +281,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  _deopt_handler_size = MacroAssembler::bl64_patchable_size\n+  _deopt_handler_size = MacroAssembler::bl64_patchable_size + BytesPerInstWord\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2977,1 +2977,0 @@\n-  const int return_pc_adjustment_no_exception = -MacroAssembler::bl64_patchable_size;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -384,2 +384,8 @@\n-  __ auipc(ra, 0);\n-  __ far_jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+  Label start;\n+  __ bind(start);\n+\n+  __ far_call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+\n+  int entry_point = __ offset();\n+  __ j(start);\n+\n@@ -389,1 +395,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    \/\/ auipc (1) + far_jump (2)\n+    \/\/ far_jump (2) + j (1)\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1056,2 +1055,2 @@\n-    \/\/ count auipc + far branch + jal\n-    return 2 * NativeInstruction::instruction_size + MacroAssembler::far_branch_size();\n+    \/\/ count far call + j\n+    return NativeInstruction::instruction_size + MacroAssembler::far_branch_size();\n@@ -1822,1 +1821,0 @@\n-  __ auipc(ra, 0);\n@@ -1830,1 +1828,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -279,1 +279,7 @@\n-  }  int offset = code_offset();\n+  }\n+\n+  int offset = code_offset();\n+\n+  Label start;\n+  __ bind(start);\n+\n@@ -283,0 +289,5 @@\n+\n+  int entry_point = __ offset();\n+\n+  __ z_bru(start);\n+\n@@ -286,1 +297,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2561,2 +2561,1 @@\n-  \/\/ Z_R14 points behind the call in the deopt handler. We adjust\n-  \/\/ it such that it points to the start of the deopt handler.\n+  \/\/ Z_R14 points to the entry point of the deopt handler.\n@@ -2566,3 +2565,0 @@\n-  \/\/ The (int) cast is necessary, because -((unsigned int)14)\n-  \/\/ is an unsigned int.\n-  __ add2reg(Z_R14, -(int)NativeCall::max_instruction_size());\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -457,1 +457,0 @@\n-  InternalAddress here(__ pc());\n@@ -459,2 +458,9 @@\n-  __ pushptr(here.addr(), rscratch1);\n-  __ jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+  Label start;\n+  __ bind(start);\n+\n+  __ call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+\n+  int entry_point = __ offset();\n+\n+  __ jmp(start);\n+\n@@ -464,1 +470,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    _deopt_handler_size = 17\n+    _deopt_handler_size = 10\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1246,1 +1245,0 @@\n-  address the_pc = (address) __ pc();\n@@ -1250,2 +1248,0 @@\n-  \/\/ push a \"the_pc\" on the stack without destroying any registers\n-  \/\/ as they all may be live.\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}