{"files":[{"patch":"@@ -4,0 +4,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1200,1 +1201,1 @@\n-    \/\/ count one adr and one far branch instruction\n+    \/\/ count one branch instruction and one far call instruction sequence\n@@ -2269,0 +2270,1 @@\n+\n@@ -2270,0 +2272,3 @@\n+  Label start;\n+  __ bind(start);\n+  __ far_call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n@@ -2271,2 +2276,2 @@\n-  __ adr(lr, __ pc());\n-  __ far_jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+  int entry_point = __ offset();\n+  __ b(start);\n@@ -2276,1 +2281,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -111,1 +112,1 @@\n-    return ( 9 * 4 );\n+    return ( 4 * 4 );\n@@ -883,1 +884,0 @@\n-  address deopt_pc = __ pc();\n@@ -885,5 +885,5 @@\n-  __ sub(SP, SP, wordSize); \/\/ make room for saved PC\n-  __ push(LR); \/\/ save LR that may be live when we get here\n-  __ mov_relative_address(LR, deopt_pc);\n-  __ str(LR, Address(SP, wordSize)); \/\/ save deopt PC\n-  __ pop(LR); \/\/ restore LR\n+  Label start;\n+  __ bind(start);\n+\n+  \/\/ Store address of the entry point\n+  __ push(PC);\n@@ -892,0 +892,3 @@\n+  int entry_point = __ offset();\n+  __ b(start);\n+\n@@ -895,1 +898,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -2095,1 +2096,1 @@\n-    return MacroAssembler::bl64_patchable_size;\n+    return MacroAssembler::bl64_patchable_size + BytesPerInstWord;\n@@ -2121,0 +2122,4 @@\n+\n+  Label start;\n+  __ bind(start);\n+\n@@ -2123,0 +2128,5 @@\n+\n+  int entry_point = __ offset();\n+\n+  __ b(start);\n+\n@@ -2126,1 +2136,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-                         int return_pc_adjustment,\n@@ -265,1 +264,0 @@\n-                         int return_pc_adjustment,\n@@ -274,1 +272,0 @@\n-  \/\/ If return_pc_adjustment != 0 adjust the return pc by return_pc_adjustment.\n@@ -308,1 +305,1 @@\n-    case return_pc_is_pre_saved: assert(return_pc_adjustment == 0, \"unsupported\"); break;\n+    case return_pc_is_pre_saved: break;\n@@ -313,3 +310,0 @@\n-    if (return_pc_adjustment != 0) {\n-      __ addi(R31, R31, return_pc_adjustment);\n-    }\n@@ -2980,2 +2974,0 @@\n-  \/\/ So currently SR_LR points behind the call in the deopt handler.\n-  \/\/ We adjust it such that it points to the start of the deopt handler.\n@@ -2985,3 +2977,0 @@\n-  \/\/ We can't grab a free register here, because all registers may\n-  \/\/ contain live values, so let the RegisterSaver do the adjustment\n-  \/\/ of the return pc.\n@@ -2995,1 +2984,0 @@\n-                                                                   return_pc_adjustment_no_exception,\n@@ -3030,1 +3018,0 @@\n-                                                             \/*return_pc_adjustment_exception=*\/ 0,\n@@ -3048,1 +3035,0 @@\n-                                                             \/*return_pc_adjustment_reexecute=*\/ 0,\n@@ -3339,1 +3325,0 @@\n-                                                                   \/*return_pc_adjustment=*\/0,\n@@ -3440,1 +3425,0 @@\n-                                                                   \/*return_pc_adjustment*\/ 0,\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1055,2 +1056,2 @@\n-    \/\/ count auipc + far branch\n-    return NativeInstruction::instruction_size + MacroAssembler::far_branch_size();\n+    \/\/ count auipc + far branch + jal\n+    return 2 * NativeInstruction::instruction_size + MacroAssembler::far_branch_size();\n@@ -1818,0 +1819,3 @@\n+  Label start;\n+  __ bind(start);\n+\n@@ -1819,1 +1823,4 @@\n-  __ far_jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+  __ far_call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+\n+  int entry_point = __ offset();\n+  __ j(start);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1655,1 +1656,1 @@\n-    return NativeCall::max_instruction_size();\n+    return NativeCall::max_instruction_size() + MacroAssembler::jump_pcrelative_size();\n@@ -1681,0 +1682,3 @@\n+  Label start;\n+  __ bind(start);\n+\n@@ -1685,0 +1689,5 @@\n+\n+  int entry_point = __ offset();\n+\n+  __ z_bru(start);\n+\n@@ -1688,1 +1697,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+\/\/ Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1140,2 +1141,2 @@\n-    \/\/ three 5 byte instructions plus one move for unreachable address.\n-    return 15+3;\n+    \/\/ one call and one jmp.\n+    return 10;\n@@ -1246,1 +1247,3 @@\n-  Label next;\n+  Label start;\n+  __ bind(start);\n+\n@@ -1249,0 +1252,3 @@\n+  __ call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+\n+  int entry_point = __ offset();\n@@ -1250,5 +1256,1 @@\n-  \/\/ push address of \"next\"\n-  __ call(next, relocInfo::none); \/\/ reloc none is fine since it is a disp32\n-  __ bind(next);\n-  \/\/ adjust it so it matches \"the_pc\"\n-  __ subptr(Address(rsp, 0), __ offset() - offset);\n+  __ jmp(start);\n@@ -1256,1 +1258,0 @@\n-  __ jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n@@ -1259,1 +1260,1 @@\n-  return offset;\n+  return entry_point;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -625,2 +625,2 @@\n-          nm->deopt_mh_handler_begin() :\n-          nm->deopt_handler_begin();\n+          nm->deopt_mh_handler_entry() :\n+          nm->deopt_handler_entry();\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2798,2 +2798,2 @@\n-            nm->deopt_mh_handler_begin() :\n-            nm->deopt_handler_begin();\n+            nm->deopt_mh_handler_entry() :\n+            nm->deopt_handler_entry();\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1319,2 +1319,2 @@\n-    _deopt_handler_offset    = 0;\n-    _deopt_mh_handler_offset = 0;\n+    _deopt_handler_entry_offset    = 0;\n+    _deopt_mh_handler_entry_offset = 0;\n@@ -1464,1 +1464,1 @@\n-        _deopt_handler_offset    = code_offset() + offsets->value(CodeOffsets::Deopt);\n+        _deopt_handler_entry_offset    = code_offset() + offsets->value(CodeOffsets::Deopt);\n@@ -1466,1 +1466,1 @@\n-        _deopt_handler_offset    = -1;\n+        _deopt_handler_entry_offset    = -1;\n@@ -1469,1 +1469,1 @@\n-        _deopt_mh_handler_offset = code_offset() + offsets->value(CodeOffsets::DeoptMH);\n+        _deopt_mh_handler_entry_offset = code_offset() + offsets->value(CodeOffsets::DeoptMH);\n@@ -1471,1 +1471,1 @@\n-        _deopt_mh_handler_offset = -1;\n+        _deopt_mh_handler_entry_offset = -1;\n@@ -1488,1 +1488,1 @@\n-      _deopt_handler_offset      = _stub_offset + offsets->value(CodeOffsets::Deopt);\n+      _deopt_handler_entry_offset      = _stub_offset + offsets->value(CodeOffsets::Deopt);\n@@ -1490,1 +1490,1 @@\n-        _deopt_mh_handler_offset = _stub_offset + offsets->value(CodeOffsets::DeoptMH);\n+        _deopt_mh_handler_entry_offset = _stub_offset + offsets->value(CodeOffsets::DeoptMH);\n@@ -1492,1 +1492,1 @@\n-        _deopt_mh_handler_offset = -1;\n+        _deopt_mh_handler_entry_offset = -1;\n@@ -2717,1 +2717,1 @@\n-  assert(has_method_handle_invokes() == (_deopt_mh_handler_offset != -1), \"must have deopt mh handler\");\n+  assert(has_method_handle_invokes() == (_deopt_mh_handler_entry_offset != -1), \"must have deopt mh handler\");\n@@ -3728,1 +3728,1 @@\n-  if (has_method_handle_invokes() && (pos == deopt_mh_handler_begin())) label = \"[Deopt MH Handler Code]\";\n+  if (has_method_handle_invokes() && (pos == deopt_mh_handler_entry())) label = \"[Deopt MH Handler Entry Point]\";\n@@ -3733,1 +3733,1 @@\n-  if (JVMCI_ONLY(_deopt_handler_offset != -1 &&) pos == deopt_handler_begin()) label = \"[Deopt Handler Code]\";\n+  if (JVMCI_ONLY(_deopt_handler_entry_offset != -1 &&) pos == deopt_handler_entry()) label = \"[Deopt Handler Entry Point]\";\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  int _deopt_handler_offset;\n+  int _deopt_handler_entry_offset;\n@@ -232,1 +232,1 @@\n-  int _deopt_mh_handler_offset;\n+  int _deopt_mh_handler_entry_offset;\n@@ -609,2 +609,2 @@\n-  address deopt_handler_begin   () const { return           header_begin() + _deopt_handler_offset    ; }\n-  address deopt_mh_handler_begin() const { return           header_begin() + _deopt_mh_handler_offset ; }\n+  address deopt_handler_entry   () const { return           header_begin() + _deopt_handler_entry_offset    ; }\n+  address deopt_mh_handler_entry() const { return           header_begin() + _deopt_mh_handler_entry_offset ; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  return pc == deopt_handler_begin();\n+  return pc == deopt_handler_entry();\n@@ -41,1 +41,1 @@\n-  return pc == deopt_mh_handler_begin();\n+  return pc == deopt_mh_handler_entry();\n","filename":"src\/hotspot\/share\/code\/nmethod.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -573,4 +573,0 @@\n-    } else {\n-      if (last_call_adr == blk_starts[i]+blk_size) {\n-        blk_size += nop_size;\n-      }\n@@ -1802,8 +1798,0 @@\n-    auto emit_nops = [&](int nops_count) {\n-      MachNode *nop = new MachNopNode(nops_count);\n-      block->insert_node(nop, block->number_of_nodes());\n-      C->cfg()->map_node_to_block(nop, block);\n-      nop->emit(masm, C->regalloc());\n-      current_offset = masm->offset();\n-    };\n-\n@@ -1816,5 +1804,5 @@\n-        emit_nops(padding \/ nop_size);\n-      }\n-    } else {\n-      if (last_call_offset == current_offset) {\n-        emit_nops(1);\n+        MachNode *nop = new MachNopNode(padding \/ nop_size);\n+        block->insert_node(nop, block->number_of_nodes());\n+        C->cfg()->map_node_to_block(nop, block);\n+        nop->emit(masm, C->regalloc());\n+        current_offset = masm->offset();\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-      return nm->deopt_mh_handler_begin() - pc_return_offset;\n+      return nm->deopt_mh_handler_entry() - pc_return_offset;\n@@ -212,1 +212,1 @@\n-      return nm->deopt_handler_begin() - pc_return_offset;\n+      return nm->deopt_handler_entry() - pc_return_offset;\n@@ -362,2 +362,2 @@\n-                        nm->deopt_mh_handler_begin() :\n-                        nm->deopt_handler_begin();\n+                        nm->deopt_mh_handler_entry() :\n+                        nm->deopt_handler_entry();\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -544,2 +544,2 @@\n-  nonstatic_field(nmethod,                     _deopt_handler_offset,                         int)                                   \\\n-  nonstatic_field(nmethod,                     _deopt_mh_handler_offset,                      int)                                   \\\n+  nonstatic_field(nmethod,                     _deopt_handler_entry_offset,                   int)                                   \\\n+  nonstatic_field(nmethod,                     _deopt_mh_handler_entry_offset,                int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,2 +88,2 @@\n-    deoptHandlerOffsetField     = type.getCIntegerField(\"_deopt_handler_offset\");\n-    deoptMhHandlerOffsetField   = type.getCIntegerField(\"_deopt_mh_handler_offset\");\n+    deoptHandlerOffsetField     = type.getCIntegerField(\"_deopt_handler_entry_offset\");\n+    deoptMhHandlerOffsetField   = type.getCIntegerField(\"_deopt_mh_handler_entry_offset\");\n@@ -127,2 +127,2 @@\n-  public Address deoptHandlerBegin()    { return headerBegin().addOffsetTo(getDeoptHandlerOffset());   }\n-  public Address deoptMhHandlerBegin()  { return headerBegin().addOffsetTo(getDeoptMhHandlerOffset()); }\n+  public Address deoptHandlerEntry()    { return headerBegin().addOffsetTo(getDeoptHandlerEntryOffset());   }\n+  public Address deoptMhHandlerEntry()  { return headerBegin().addOffsetTo(getDeoptMhHandlerEntryOffset()); }\n@@ -267,2 +267,2 @@\n-  public boolean isDeoptEntry   (Address pc) { return pc == deoptHandlerBegin(); }\n-  public boolean isDeoptMhEntry (Address pc) { return pc == deoptMhHandlerBegin(); }\n+  public boolean isDeoptEntry   (Address pc) { return pc == deoptHandlerEntry(); }\n+  public boolean isDeoptMhEntry (Address pc) { return pc == deoptMhHandlerEntry(); }\n@@ -496,2 +496,2 @@\n-  private int getDeoptHandlerOffset()   { return (int) deoptHandlerOffsetField  .getValue(addr); }\n-  private int getDeoptMhHandlerOffset() { return (int) deoptMhHandlerOffsetField.getValue(addr); }\n+  private int getDeoptHandlerEntryOffset()   { return (int) deoptHandlerOffsetField  .getValue(addr); }\n+  private int getDeoptMhHandlerEntryOffset() { return (int) deoptMhHandlerOffsetField.getValue(addr); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-        if (pc.equals(nm.deoptHandlerBegin())) {\n+        if (pc.equals(nm.deoptHandlerEntry())) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/aarch64\/AARCH64Frame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        if (pc.equals(nm.deoptHandlerBegin())) {\n+        if (pc.equals(nm.deoptHandlerEntry())) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ppc64\/PPC64Frame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        if (pc.equals(nm.deoptHandlerBegin())) {\n+        if (pc.equals(nm.deoptHandlerEntry())) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/riscv64\/RISCV64Frame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        if (pc.equals(nm.deoptHandlerBegin())) {\n+        if (pc.equals(nm.deoptHandlerEntry())) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/x86\/X86Frame.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}