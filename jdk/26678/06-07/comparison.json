{"files":[{"patch":"@@ -455,1 +455,1 @@\n-  __ far_jump(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n+  __ far_call(RuntimeAddress(SharedRuntime::deopt_blob()->unpack()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,6 +397,0 @@\n-#ifdef ASSERT\n-static bool is_movk_to_zr(uint32_t insn) {\n-  return ((insn & 0xffe0001f) == 0xf280001f);\n-}\n-#endif\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -529,0 +529,5 @@\n+private:\n+  static bool is_movk_to_zr(uint32_t insn) {\n+    return ((insn & 0xffe0001f) == 0xf280001f);\n+  }\n+\n@@ -531,6 +536,11 @@\n-    uint64_t insns = *(uint64_t*)addr_at(0);\n-    \/\/ Check for two instructions: nop; movk zr, xx\n-    \/\/ These instructions only ever appear together in a post-call\n-    \/\/ NOP, so it's unnecessary to check that the third instruction is\n-    \/\/ a MOVK as well.\n-    return (insns & 0xffe0001fffffffff) == 0xf280001fd503201f;\n+    \/\/ Check the first instruction is NOP.\n+    if (is_nop()) {\n+      uint32_t insn = *(uint32_t*)addr_at(4);\n+      \/\/ Check next instruction is MOVK zr, xx.\n+      \/\/ These instructions only ever appear together in a post-call\n+      \/\/ NOP, so it's unnecessary to check that the third instruction is\n+      \/\/ a MOVK as well.\n+      return is_movk_to_zr(insn);\n+    }\n+\n+    return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    \/\/ far_jump (2) + j (1)\n+    \/\/ far_call (2) + j (1)\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,0 +502,3 @@\n+  if (exec_mode == Unpack_deopt) {\n+    assert(deoptee.is_deoptimized_frame(), \"frame is not marked for deoptimization\");\n+  }\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test id=vthread-deopt-c1\n+ * @summary Deoptimization test for virtual threads (C1)\n+ * @requires vm.continuations\n+ * @requires vm.compiler1.enabled\n+ * @requires vm.opt.TieredStopAtLevel != 0\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-BackgroundCompilation\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   Deoptimization\n+ *\/\n+\n+\/**\n+ * @test id=vthread-deopt-c2\n+ * @summary Deoptimization test for virtual threads (C2)\n+ * @requires vm.continuations\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-BackgroundCompilation\n+ *                   -XX:-TieredCompilation\n+ *                   Deoptimization\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.Objects;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class Deoptimization {\n+    static final WhiteBox white_box = WhiteBox.getWhiteBox();\n+\n+    static class TestTask implements Runnable {\n+        CyclicBarrier start_barrier = null;\n+        AtomicInteger completed_number = new AtomicInteger(0);\n+\n+        public void reset(int barrier_parties) {\n+            start_barrier = new CyclicBarrier(barrier_parties);\n+            completed_number.set(0);\n+        }\n+\n+        public int getNumberWaiting() {\n+            return start_barrier.getNumberWaiting();\n+        }\n+\n+        public int getNumberCompleted() {\n+            return completed_number.get();\n+        }\n+\n+        public void await() throws BrokenBarrierException, InterruptedException {\n+            start_barrier.await();\n+        }\n+\n+        public void run() {\n+            try {\n+                await();\n+            } catch(BrokenBarrierException e) {\n+                return;\n+            } catch(InterruptedException e) {\n+                return;\n+            }\n+\n+            completed_number.getAndIncrement();\n+        }\n+    }\n+\n+    static void test(TestTask task, Method method, int vthreads_num) throws Exception {\n+        task.reset(vthreads_num + 1 \/* 1 for the main thread *\/);\n+\n+\tThread[] vthreads = new Thread[vthreads_num];\n+        for (int i = 0; i < vthreads_num; i++) {\n+            vthreads[i] = Thread.startVirtualThread(task);\n+        }\n+\n+        while (task.getNumberWaiting() != vthreads_num) {\n+            Thread.onSpinWait();\n+        }\n+\n+        if (method != null) {\n+            if (!white_box.isMethodCompiled(method, false)) {\n+                throw new Error(\"Unexpectedly, it is not compiled.\");\n+            }\n+\n+            white_box.deoptimizeMethod(method);\n+\n+            if (white_box.isMethodCompiled(method, false)) {\n+                throw new Error(\"Unexpectedly, it is compiled.\");\n+            }\n+        }\n+\n+        task.await();\n+\n+        for (int i = 0; i < vthreads_num; i++) {\n+            vthreads[i].join();\n+        }\n+\n+        if (task.getNumberCompleted() != vthreads_num) {\n+            throw new Error(\"Some threads didn't reach completion\");\n+        }\n+    }\n+\n+    static int getIntegerOption(String option_name) {\n+        Object option_object = white_box.getVMFlag(option_name);\n+        String option_string = Objects.toString(option_object);\n+        return Integer.parseInt(option_string);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        int tiered_stop_at_level = getIntegerOption(\"TieredStopAtLevel\");\n+\n+        Method method_run = TestTask.class.getMethod(\"run\");\n+        white_box.testSetDontInlineMethod(method_run, true);\n+\n+        Method method_await = TestTask.class.getMethod(\"await\");\n+        white_box.testSetDontInlineMethod(method_await, true);\n+\n+        TestTask task = new TestTask();\n+\n+        \/\/ Warm-up\n+        test(task, null, 2);\n+\n+        white_box.enqueueMethodForCompilation(method_run, tiered_stop_at_level);\n+\n+        \/\/ Deoptimization test\n+        test(task, method_run, 10000);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/Deoptimization.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}