{"files":[{"patch":"@@ -226,0 +226,25 @@\n+\n+    \/**\n+     * Creates a {@link JavaFileObject} which will be represents the given source content.\n+     *\n+     * <p>The provided {@code uri} will be returned from {@link #toUri()}.\n+     * The provided {@code content} will be returned from {@link #getCharContent(boolean)}.\n+     * The {@link #getKind()} method will return {@link Kind#SOURCE}.\n+     *\n+     * <p>All other methods will behave as described in the documentation in this class,\n+     * if the constructor is called with {@code uri} and {@code Kind.SOURCE}.\n+     *\n+     * @param uri that should be used for this {@code JavaFileObject}\n+     * @param content the content of the {@code JavaFileObject}\n+     * @return a {@code JavaFileObject} representing the given source content.\n+     * @since 23\n+     *\/\n+    public static JavaFileObject forSource(URI uri, String content) {\n+        return new SimpleJavaFileObject(uri, Kind.SOURCE) {\n+            @Override\n+            public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+                return content;\n+            }\n+        };\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/SimpleJavaFileObject.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8325362\n+ * @summary Test SimpleJavaFileObject\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @run main TestSimpleJavaFileObject\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.tools.Diagnostic.Kind;\n+import javax.tools.DiagnosticListener;\n+import javax.tools.FileObject;\n+import javax.tools.ForwardingJavaFileManager;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileManager;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+import toolbox.TestRunner;\n+\n+public class TestSimpleJavaFileObject extends TestRunner {\n+\n+    public TestSimpleJavaFileObject() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        TestSimpleJavaFileObject t = new TestSimpleJavaFileObject();\n+        t.runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testForSource(Path p) throws IOException {\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        List<String> errors = new ArrayList<>();\n+        DiagnosticListener<JavaFileObject> noErrors = d -> {\n+            if (d.getKind() == Kind.ERROR) {\n+                errors.add(d.getSource().toUri().toString() + \":\" +\n+                           d.getLineNumber() + \":\" +\n+                           d.getColumnNumber() + \":\" +\n+                           d.getCode());\n+            }\n+        };\n+        try (JavaFileManager fm = compiler.getStandardFileManager(null, null, null);\n+             LoggingFileManager rfm = new LoggingFileManager(fm)) {\n+            JavaFileObject src = SimpleJavaFileObject.forSource(URI.create(\"mem:\/\/\/Test.java\"),\n+                                                                \"\"\"\n+                                                                public class Test {}\n+                                                                \"\"\");\n+            assertTrue(\"compilation didn't succeed!\",\n+                       compiler.getTask(null, rfm, noErrors, null, null, List.of(src))\n+                               .call());\n+            assertTrue(\"no compilation errors expected, but got: \" + errors,\n+                       errors.isEmpty());\n+            Set<String> expectedWrittenClasses = Set.of(\"Test\");\n+            assertTrue(\"compiled correct classes: \" + rfm.writtenClasses,\n+                       expectedWrittenClasses.equals(rfm.writtenClasses));\n+        }\n+\n+        errors.clear();\n+\n+        JavaFileObject src = SimpleJavaFileObject.forSource(URI.create(\"mem:\/\/\/Test.java\"),\n+                                                            \"\"\"\n+                                                            public class Test {\n+                                                                Unknown u;\n+                                                            }\n+                                                            \"\"\");\n+        assertTrue(\"compilation succeeded unexpectedly!\",\n+                   !compiler.getTask(null, null, noErrors, null, null, List.of(src))\n+                            .call());\n+        List<String> expectedCompilationErrors = List.of(\n+                \"mem:\/\/\/Test.java:2:5:compiler.err.cant.resolve.location\"\n+        );\n+        assertTrue(\"incorrect compilation errors, expected: \" + expectedCompilationErrors +\n+                   \"actual: \" + errors,\n+                   expectedCompilationErrors.equals(errors));\n+    }\n+\n+    private static final class LoggingFileManager extends ForwardingJavaFileManager<JavaFileManager> {\n+\n+        private final Set<String> writtenClasses = new HashSet<>();\n+\n+        public LoggingFileManager(JavaFileManager fileManager) {\n+            super(fileManager);\n+        }\n+\n+        @Override\n+        public JavaFileObject getJavaFileForOutput(Location location,\n+                                                   String className,\n+                                                   JavaFileObject.Kind kind,\n+                                                   FileObject sibling) throws IOException {\n+            writtenClasses.add(className);\n+\n+            return super.getJavaFileForOutput(location, className, kind, sibling);\n+        }\n+\n+    }\n+\n+    private static void assertTrue(String message, boolean c) {\n+        if (!c) {\n+            throw new AssertionError(message);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/toolsapi\/TestSimpleJavaFileObject.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}