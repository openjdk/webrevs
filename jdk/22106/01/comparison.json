{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n","filename":"src\/java.instrument\/share\/classes\/java\/lang\/instrument\/ClassFileTransformer.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.security.AccessController;\n@@ -71,3 +70,1 @@\n-        PrivilegedAction<String> pa = () -> System.getProperty(TRACE_USAGE_PROP_NAME);\n-        @SuppressWarnings(\"removal\")\n-        String s = AccessController.doPrivileged(pa);\n+        String s = System.getProperty(TRACE_USAGE_PROP_NAME);\n@@ -103,3 +100,1 @@\n-                PrivilegedAction<Path> pa = path::toAbsolutePath;\n-                @SuppressWarnings(\"removal\")\n-                Path absolutePath = AccessController.doPrivileged(pa);\n+                Path absolutePath = path.toAbsolutePath();\n@@ -485,12 +480,0 @@\n-\n-    \/\/ Enable or disable Java programming language access checks on a\n-    \/\/ reflected object (for example, a method)\n-    @SuppressWarnings(\"removal\")\n-    private static void setAccessible(final AccessibleObject ao, final boolean accessible) {\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                public Object run() {\n-                    ao.setAccessible(accessible);\n-                    return null;\n-                }});\n-    }\n-\n@@ -556,1 +539,1 @@\n-            setAccessible(m, true);\n+            m.setAccessible(true);\n@@ -668,3 +651,1 @@\n-        PrivilegedAction<ProtectionDomain> pa = clazz::getProtectionDomain;\n-        @SuppressWarnings(\"removal\")\n-        CodeSource cs = AccessController.doPrivileged(pa).getCodeSource();\n+        CodeSource cs = clazz.getProtectionDomain().getCodeSource();\n@@ -678,8 +659,1 @@\n-        static final StackWalker walker;\n-        static {\n-            PrivilegedAction<StackWalker> pa = () ->\n-                    StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-            @SuppressWarnings(\"removal\")\n-            StackWalker w = AccessController.doPrivileged(pa);\n-            walker = w;\n-        }\n+        static final StackWalker walker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n","filename":"src\/java.instrument\/share\/classes\/sun\/instrument\/InstrumentationImpl.java","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"}]}