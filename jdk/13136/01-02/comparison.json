{"files":[{"patch":"@@ -503,2 +503,1 @@\n-  unsigned ival;\n-  ival = fp_immediate_for_encoding(value, 0);\n+  unsigned ival = fp_immediate_for_encoding(value, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-      _num_bits = PrimitiveConversions::cast<unsigned int>(v);\n+      _bits = PrimitiveConversions::cast<unsigned int>(v);\n@@ -285,4 +285,4 @@\n-    virtual unsigned int f_hi4() const { return (_num_bits << 9) >> (19+9); }\n-    virtual bool f_lo_is_null() const { return (_num_bits & ((1 << 19) - 1)) == 0; }\n-    virtual int e() const { return ((_num_bits << 1) >> (23+1)) - 127; }\n-    virtual unsigned int s() const { return _num_bits >> 31; }\n+    override unsigned int f_hi4() const { return (_bits << 9) >> (19+9); }\n+    override bool f_lo_is_null() const { return (_bits & ((1 << 19) - 1)) == 0; }\n+    override int e() const { return ((_bits << 1) >> (23+1)) - 127; }\n+    override unsigned int s() const { return _bits >> 31; }\n@@ -291,1 +291,1 @@\n-    unsigned int _num_bits;\n+    unsigned int _bits;\n@@ -297,1 +297,1 @@\n-      _num_bits = PrimitiveConversions::cast<uint64_t>(v);\n+      _bits = PrimitiveConversions::cast<uint64_t>(v);\n@@ -300,4 +300,4 @@\n-    virtual unsigned int f_hi4() const { return (_num_bits << 12) >> (48+12); }\n-    virtual bool f_lo_is_null() const { return (_num_bits & ((1LL << 48) - 1)) == 0; }\n-    virtual int e() const { return ((_num_bits << 1) >> (52+1)) - 1023; }\n-    virtual unsigned int s() const { return _num_bits >> 63; }\n+    override unsigned int f_hi4() const { return (_bits << 12) >> (48+12); }\n+    override bool f_lo_is_null() const { return (_bits & ((1LL << 48) - 1)) == 0; }\n+    override int e() const { return ((_bits << 1) >> (52+1)) - 1023; }\n+    override unsigned int s() const { return _bits >> 63; }\n@@ -306,1 +306,1 @@\n-    uint64_t _num_bits;\n+    uint64_t _bits;\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-  jint accessor_i = PrimitiveConversions::cast<jint>(c);\n+  jint float_bits = PrimitiveConversions::cast<jint>(c);\n@@ -681,1 +681,1 @@\n-  emit_int32(accessor_i);\n+  emit_int32(float_bits);\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -241,2 +241,2 @@\n-  juint xbits_i = PrimitiveConversions::cast<juint>(x);\n-  juint ybits_i = PrimitiveConversions::cast<juint>(y);\n+  juint xbits = PrimitiveConversions::cast<juint>(x);\n+  juint ybits = PrimitiveConversions::cast<juint>(y);\n@@ -244,2 +244,2 @@\n-  if (((xbits_i & float_sign_mask) != float_infinity) &&\n-       ((ybits_i & float_sign_mask) == float_infinity) ) {\n+  if (((xbits & float_sign_mask) != float_infinity) &&\n+       ((ybits & float_sign_mask) == float_infinity) ) {\n@@ -257,2 +257,2 @@\n-  julong xbits_l = PrimitiveConversions::cast<julong>(x);\n-  julong ybits_l = PrimitiveConversions::cast<julong>(y);\n+  julong xbits = PrimitiveConversions::cast<julong>(x);\n+  julong ybits = PrimitiveConversions::cast<julong>(y);\n@@ -260,2 +260,2 @@\n-  if (((xbits_l & double_sign_mask) != double_infinity) &&\n-       ((ybits_l & double_sign_mask) == double_infinity) ) {\n+  if (((xbits & double_sign_mask) != double_infinity) &&\n+       ((ybits & double_sign_mask) == double_infinity) ) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}