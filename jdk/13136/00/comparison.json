{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n@@ -502,4 +503,1 @@\n-  union {\n-    unsigned ival;\n-    float val;\n-  };\n+  unsigned ival;\n@@ -507,1 +505,1 @@\n-  return val;\n+  return PrimitiveConversions::cast<float>(ival);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +30,1 @@\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n@@ -434,5 +436,1 @@\n-  union {\n-    float fpval;\n-    uint32_t val;\n-  };\n-  fpval = immediate;\n+  uint32_t val = PrimitiveConversions::cast<uint32_t>(immediate);\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,1 +282,1 @@\n-      _num.val = v;\n+      _num_bits = PrimitiveConversions::cast<unsigned int>(v);\n@@ -285,4 +285,4 @@\n-    virtual unsigned int f_hi4() const { return (_num.bits << 9) >> (19+9); }\n-    virtual bool f_lo_is_null() const { return (_num.bits & ((1 << 19) - 1)) == 0; }\n-    virtual int e() const { return ((_num.bits << 1) >> (23+1)) - 127; }\n-    virtual unsigned int s() const { return _num.bits >> 31; }\n+    virtual unsigned int f_hi4() const { return (_num_bits << 9) >> (19+9); }\n+    virtual bool f_lo_is_null() const { return (_num_bits & ((1 << 19) - 1)) == 0; }\n+    virtual int e() const { return ((_num_bits << 1) >> (23+1)) - 127; }\n+    virtual unsigned int s() const { return _num_bits >> 31; }\n@@ -291,4 +291,1 @@\n-    union {\n-      float val;\n-      unsigned int bits;\n-    } _num;\n+    unsigned int _num_bits;\n@@ -300,1 +297,1 @@\n-      _num.val = v;\n+      _num_bits = PrimitiveConversions::cast<uint64_t>(v);\n@@ -303,4 +300,4 @@\n-    virtual unsigned int f_hi4() const { return (_num.bits << 12) >> (48+12); }\n-    virtual bool f_lo_is_null() const { return (_num.bits & ((1LL << 48) - 1)) == 0; }\n-    virtual int e() const { return ((_num.bits << 1) >> (52+1)) - 1023; }\n-    virtual unsigned int s() const { return _num.bits >> 63; }\n+    virtual unsigned int f_hi4() const { return (_num_bits << 12) >> (48+12); }\n+    virtual bool f_lo_is_null() const { return (_num_bits & ((1LL << 48) - 1)) == 0; }\n+    virtual int e() const { return ((_num_bits << 1) >> (52+1)) - 1023; }\n+    virtual unsigned int s() const { return _num_bits >> 63; }\n@@ -309,4 +306,1 @@\n-    union {\n-      double val;\n-      unsigned long long bits;\n-    } _num;\n+    uint64_t _num_bits;\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm.hpp","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n@@ -676,5 +677,1 @@\n-  union {\n-    jfloat f;\n-    jint i;\n-  } accessor;\n-  accessor.f = c;\n+  jint accessor_i = PrimitiveConversions::cast<jint>(c);\n@@ -684,1 +681,1 @@\n-  emit_int32(accessor.i);\n+  emit_int32(accessor_i);\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"metaprogramming\/primitiveConversions.hpp\"\n@@ -240,3 +241,2 @@\n-  union { jfloat f; juint i; } xbits, ybits;\n-  xbits.f = x;\n-  ybits.f = y;\n+  juint xbits_i = PrimitiveConversions::cast<juint>(x);\n+  juint ybits_i = PrimitiveConversions::cast<juint>(y);\n@@ -244,2 +244,2 @@\n-  if (((xbits.i & float_sign_mask) != float_infinity) &&\n-       ((ybits.i & float_sign_mask) == float_infinity) ) {\n+  if (((xbits_i & float_sign_mask) != float_infinity) &&\n+       ((ybits_i & float_sign_mask) == float_infinity) ) {\n@@ -257,3 +257,2 @@\n-  union { jdouble d; julong l; } xbits, ybits;\n-  xbits.d = x;\n-  ybits.d = y;\n+  julong xbits_l = PrimitiveConversions::cast<julong>(x);\n+  julong ybits_l = PrimitiveConversions::cast<julong>(y);\n@@ -261,2 +260,2 @@\n-  if (((xbits.l & double_sign_mask) != double_infinity) &&\n-       ((ybits.l & double_sign_mask) == double_infinity) ) {\n+  if (((xbits_l & double_sign_mask) != double_infinity) &&\n+       ((ybits_l & double_sign_mask) == double_infinity) ) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}