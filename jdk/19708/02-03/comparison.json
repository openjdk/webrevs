{"files":[{"patch":"@@ -84,1 +84,1 @@\n-            report(ex);\n+            report(\"Access Flags: \" + ex.getMessage());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/BasicWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,5 @@\n-        CLASS, FIELD, METHOD, INNER_CLASS\n+        NONE(false), CLASS, FIELD, METHOD, INNER_CLASS(false);\n+\n+        final boolean fails;\n+        TestLocation() { this(true); }\n+        TestLocation(boolean fails) { this.fails = fails; }\n@@ -102,1 +106,1 @@\n-            .run(location == TestLocation.INNER_CLASS ? Task.Expect.SUCCESS : Task.Expect.FAIL)\n+            .run(location.fails ? Task.Expect.FAIL : Task.Expect.SUCCESS)\n@@ -105,1 +109,13 @@\n-        assertTrue(lines.stream().anyMatch(l -> l.contains(\"Unmatched bit position\")), () -> String.join(\"\\n\", lines));\n+\n+        \/\/ No termination when access flag error happens\n+        assertTrue(lines.stream().anyMatch(l -> l.contains(\"java.lang.String field;\")));\n+        assertTrue(lines.stream().anyMatch(l -> l.contains(\"UndefinedAccessFlagTest$SampleInnerClass();\")));\n+        assertTrue(lines.stream().anyMatch(l -> l.contains(\"void method();\")));\n+        assertTrue(lines.stream().anyMatch(l -> l.contains(\"SampleInnerClass=class UndefinedAccessFlagTest$SampleInnerClass of class UndefinedAccessFlagTest\")));\n+\n+        \/\/ Remove non-error lines\n+        assertTrue(lines.removeIf(st -> !st.startsWith(\"Error:\")));\n+        \/\/ Desired locations has errors\n+        assertTrue(location == TestLocation.NONE || !lines.isEmpty());\n+        \/\/ Access Flag errors only\n+        assertTrue(lines.stream().allMatch(l -> l.contains(\"Access Flags:\")), () -> String.join(\"\\n\", lines));\n","filename":"test\/langtools\/tools\/javap\/UndefinedAccessFlagTest.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}