{"files":[{"patch":"@@ -1000,7 +1000,6 @@\n-  \/\/ Method bytecodes can be rewritten during linking.\n-  \/\/ Whilst the linking process rewriting bytescodes,\n-  \/\/ is_rewritten() returns false. So we won't restore the original bytecodes.\n-  \/\/ We hold a lock to guarantee we are not getting bytecodes\n-  \/\/ at the same time the linking process are rewriting them.\n-  Handle h_init_lock(Thread::current(), mh->method_holder()->init_lock());\n-  ObjectLocker ol(h_init_lock, JavaThread::current());\n+  \/\/ We acquire the init_lock monitor to serialize with class linking\n+  \/\/ so we are not getting bytecodes at the same time the linking process\n+  \/\/ is rewriting them.\n+  JavaThread* current = JavaThread::current();\n+  Handle h_init_lock(current, mh->method_holder()->init_lock());\n+  ObjectLocker ol(h_init_lock, current);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}