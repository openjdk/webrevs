{"files":[{"patch":"@@ -737,2 +737,2 @@\n-            if (!origin.isInterface() || origin.isSealed()) {\n-                \/\/t must be a non-sealed interface\n+            if (!origin.isInterface() || (origin.flags() & ANNOTATION) != 0 || origin.isSealed()) {\n+                \/\/t must be an interface\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3342,4 +3342,0 @@\n-                                if (bound.tsym != syms.objectType.tsym && !bound.isInterface()) {\n-                                    \/\/ bound must be j.l.Object or an interface\n-                                    reportIntersectionError(that, \"not.an.intf.component\", bound);\n-                                }\n@@ -3350,0 +3346,4 @@\n+                        if (bound.tsym != syms.objectType.tsym || !bound.isInterface() || (bound.tsym.flags() & ANNOTATION) != 0) {\n+                            \/\/ bound must be j.l.Object or an interface, but not an annotation\n+                            reportIntersectionError(that, \"not.an.intf.component\", bound);\n+                        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-    component type {0} is not an interface\n+    component type {0} is not an interface or java.lang.Object\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,0 +9,1 @@\n+import java.lang.annotation.Annotation;\n@@ -12,2 +13,3 @@\n-    void m() {\n-        var r = (ClassInIntersectionTypeTest & Runnable) () -> System.out.println(\"Hello, World!\");\n+    void m1() {\n+        ClassInIntersectionTypeTest r1 = (ClassInIntersectionTypeTest & Runnable) () -> System.out.println(\"Hello, World!\");\n+        ClassInIntersectionTypeTest r2 = (ClassInIntersectionTypeTest & Runnable) ClassInIntersectionTypeTest::run1;\n@@ -16,0 +18,2 @@\n+    static void run1() {}\n+\n@@ -18,1 +22,2 @@\n-        run(() -> System.out.println(\"Hello, World!\"));\n+        run2(() -> System.out.println(\"Hello, World!\"));\n+        run2(ClassInIntersectionTypeTest::run1);\n@@ -21,1 +26,1 @@\n-    static <T extends ClassInIntersectionTypeTest & Runnable> void run(T t) {\n+    static <T extends ClassInIntersectionTypeTest & Runnable> void run2(T t) {\n@@ -25,0 +30,1 @@\n+    static Class<? extends Annotation> myAnnoType() { return null; }\n@@ -26,3 +32,2 @@\n-    Anno a = (Anno & Serializable) ()-> null; \/\/ OK\n-\n-    Anno b = ()-> null; \/\/ OK\n+    Anno a = (Anno & Serializable) ()-> null; \/\/ annotations not allowed\n+    Anno b = (Anno & Serializable) ClassInIntersectionTypeTest::myAnnoType; \/\/ annotations not allowed\n@@ -32,0 +37,1 @@\n+        annotationType(ClassInIntersectionTypeTest::myAnnoType);\n@@ -33,0 +39,1 @@\n+\n@@ -34,1 +41,1 @@\n-        t.annotationType();  \/\/ OK\n+        t.annotationType();  \/\/ annotations not allowed\n@@ -36,0 +43,2 @@\n+\n+    Anno c = ()-> null; \/\/ annotations are not functional interfaces\n","filename":"test\/langtools\/tools\/javac\/lambda\/ClassInIntersectionTypeTest.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,3 +1,10 @@\n-ClassInIntersectionTypeTest.java:13:58: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest))\n-ClassInIntersectionTypeTest.java:18:12: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest)))\n-2 errors\n+ClassInIntersectionTypeTest.java:14:83: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest))\n+ClassInIntersectionTypeTest.java:15:83: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest))\n+ClassInIntersectionTypeTest.java:22:13: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest)))\n+ClassInIntersectionTypeTest.java:23:13: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest)))\n+ClassInIntersectionTypeTest.java:32:36: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest.Anno))\n+ClassInIntersectionTypeTest.java:33:36: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest.Anno))\n+ClassInIntersectionTypeTest.java:36:23: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest.Anno)))\n+ClassInIntersectionTypeTest.java:37:23: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest.Anno)))\n+ClassInIntersectionTypeTest.java:44:14: compiler.err.prob.found.req: (compiler.misc.not.a.functional.intf: ClassInIntersectionTypeTest.Anno)\n+9 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/ClassInIntersectionTypeTest.out","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}