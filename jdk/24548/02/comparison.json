{"files":[{"patch":"@@ -3342,0 +3342,4 @@\n+                                if (bound.tsym != syms.objectType.tsym && !bound.isInterface()) {\n+                                    \/\/ bound must be j.l.Object or an interface\n+                                    reportIntersectionError(that, \"not.an.intf.component\", bound);\n+                                }\n@@ -3369,0 +3373,5 @@\n+        private void reportIntersectionError(DiagnosticPosition pos, String key, Object... args) {\n+             resultInfo.checkContext.report(pos,\n+                 diags.fragment(Fragments.BadIntersectionTargetForFunctionalExpr(diags.fragment(key, args))));\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -147,2 +147,0 @@\n-compiler.misc.bad.intersection.target.for.functional.expr  # currently not generated, should be removed?\n-compiler.misc.not.an.intf.component\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-\/\/ key: compiler.misc.not.a.functional.intf.1\n+\/\/ key: compiler.misc.bad.intersection.target.for.functional.expr\n+\/\/ key: compiler.misc.not.an.intf.component\n@@ -26,1 +27,0 @@\n-\/\/ key: compiler.misc.incompatible.abstracts\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NotAnInterfaceComponent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8322810\n+ * @summary Lambda expressions can implement classes\n+ * @compile\/fail\/ref=ClassInIntersectionTypeTest.out -XDrawDiagnostics ClassInIntersectionTypeTest.java\n+ *\/\n+\n+import java.io.Serializable;\n+\n+public class ClassInIntersectionTypeTest {\n+    \/\/ test 1\n+    void m() {\n+        var r = (ClassInIntersectionTypeTest & Runnable) () -> System.out.println(\"Hello, World!\");\n+    }\n+\n+    \/\/ test 2\n+    static void foo() {\n+        run(() -> System.out.println(\"Hello, World!\"));\n+    }\n+\n+    static <T extends ClassInIntersectionTypeTest & Runnable> void run(T t) {\n+        t.run();\n+    }\n+\n+    @interface Anno {}\n+    Anno a = (Anno & Serializable) ()-> null; \/\/ OK\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/ClassInIntersectionTypeTest.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+ClassInIntersectionTypeTest.java:13:58: compiler.err.prob.found.req: (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest))\n+ClassInIntersectionTypeTest.java:18:12: compiler.err.prob.found.req: (compiler.misc.infer.no.conforming.assignment.exists: T, (compiler.misc.bad.intersection.target.for.functional.expr: (compiler.misc.not.an.intf.component: ClassInIntersectionTypeTest)))\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/ClassInIntersectionTypeTest.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}