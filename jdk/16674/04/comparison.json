{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import javax.swing.JButton;\n@@ -51,1 +50,0 @@\n-    private static JButton getSelectedFilesButton;\n@@ -53,3 +51,1 @@\n-    private static boolean passed;\n-    private static File[] testDir;\n-    private static File[] tempFile;\n+    private static volatile Point clickLocation;\n@@ -61,20 +57,4 @@\n-\n-        try {\n-            \/\/ create test directory\n-            String tmpDir = System.getProperty(\"user.home\");\n-            testDir = new File[1];\n-            testDir[0] = new File(tmpDir, \"testDir\");\n-            if (!testDir[0].exists())\n-                testDir[0].mkdir();\n-            testDir[0].deleteOnExit();\n-\n-            \/\/ create temporary files inside testDir\n-            tempFile = new File[5];\n-            for (int i = 0; i < 5; ++i) {\n-                tempFile[i] = File.createTempFile(\"temp\", \".txt\",\n-                        new File(testDir[0].getAbsolutePath()));\n-                tempFile[i].deleteOnExit();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n+        File testDirDirs = createFoldersOnlyDir();\n+        File testDirFiles = createFilesOnlyDir();\n+        populateDirs(testDirDirs);\n+        populateFiles(testDirFiles);\n@@ -82,1 +62,1 @@\n-                        UIManager.getInstalledLookAndFeels()) {\n+                UIManager.getInstalledLookAndFeels()) {\n@@ -85,3 +65,3 @@\n-            checkFileOnlyTest(laf);\n-            checkDirectoriesOnlyTest(laf);\n-            checkFilesAndDirectoriesTest(laf);\n+            checkFileOnlyTest(laf, testDirFiles);\n+            checkDirectoriesOnlyTest(laf, testDirDirs);\n+            checkFilesAndDirectoriesTest(laf, testDirDirs);\n@@ -92,2 +72,38 @@\n-    private static void checkFileOnlyTest(UIManager.LookAndFeelInfo laf)\n-            throws Exception {\n+    private static File createFoldersOnlyDir() {\n+        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+        File dirsDir = new File(tmpDir, \"dirsDir\");\n+        if (!dirsDir.exists()) {\n+            dirsDir.mkdir();\n+        }\n+        dirsDir.deleteOnExit();\n+        return dirsDir;\n+    }\n+\n+    private static void populateDirs(File parent) {\n+        for (int i = 0; i < 10; ++i) {\n+            File subDir = new File(parent, \"subDir_\" + (i+1));\n+            subDir.mkdir();\n+            subDir.deleteOnExit();\n+        }\n+    }\n+\n+    private static File createFilesOnlyDir() {\n+        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+        File filesDir = new File(tmpDir, \"filesDir\");\n+        if (!filesDir.exists()) {\n+            filesDir.mkdir();\n+        }\n+        filesDir.deleteOnExit();\n+        return filesDir;\n+    }\n+\n+    private static void populateFiles(File parent) throws Exception {\n+        for (int i = 0; i < 10; ++i) {\n+            File subFile = new File(parent, \"subFiles_\" + (i+1));\n+            subFile.createNewFile();\n+            subFile.deleteOnExit();\n+        }\n+    }\n+\n+    private static void checkFileOnlyTest(UIManager.LookAndFeelInfo laf,\n+                                          File dir) throws Exception {\n@@ -98,1 +114,2 @@\n-                fileChooser.setCurrentDirectory(testDir[0]);\n+                fileChooser.setCurrentDirectory(dir);\n+                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n@@ -103,2 +120,6 @@\n-            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n-            doTesting(laf, 230);\n+            if (laf.getClassName().contains(\"Motif\")\n+                || laf.getClassName().contains(\"GTK\")) {\n+                doTesting(laf, 230);\n+            } else {\n+                doTesting(laf, 50);\n+            }\n@@ -106,5 +127,1 @@\n-            SwingUtilities.invokeAndWait(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n+            disposeFrame();\n@@ -114,2 +131,2 @@\n-    private static void checkDirectoriesOnlyTest(UIManager.LookAndFeelInfo laf)\n-            throws Exception {\n+    private static void checkDirectoriesOnlyTest(UIManager.LookAndFeelInfo laf,\n+                                                 File dir) throws Exception {\n@@ -120,0 +137,2 @@\n+                fileChooser.setCurrentDirectory(dir);\n+                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n@@ -123,1 +142,0 @@\n-            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n@@ -126,5 +144,1 @@\n-            SwingUtilities.invokeAndWait(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n+            disposeFrame();\n@@ -134,2 +148,2 @@\n-    private static void checkFilesAndDirectoriesTest(UIManager.LookAndFeelInfo laf)\n-            throws Exception {\n+    private static void checkFilesAndDirectoriesTest(UIManager.LookAndFeelInfo laf,\n+                                                     File dir) throws Exception {\n@@ -140,0 +154,2 @@\n+                fileChooser.setCurrentDirectory(dir);\n+                fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n@@ -143,1 +159,0 @@\n-            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n@@ -146,5 +161,1 @@\n-            SwingUtilities.invokeAndWait(() -> {\n-                if (frame != null) {\n-                    frame.dispose();\n-                }\n-            });\n+            disposeFrame();\n@@ -157,1 +168,1 @@\n-        fileChooser = new JFileChooser(\"user.home\");\n+        fileChooser = new JFileChooser();\n@@ -160,13 +171,0 @@\n-\n-        getSelectedFilesButton = new JButton();\n-        getSelectedFilesButton.setText(\"Print selected Files\");\n-        getSelectedFilesButton.addActionListener(new ActionListener() {\n-            public void actionPerformed(ActionEvent evt) {\n-                passed = false;\n-                File files[] = fileChooser.getSelectedFiles();\n-                if (files.length != 0) {\n-                    passed = true;\n-                }\n-            }\n-        });\n-\n@@ -174,1 +172,0 @@\n-        frame.getContentPane().add(getSelectedFilesButton, BorderLayout.SOUTH);\n@@ -192,10 +189,8 @@\n-    private static void doTesting(UIManager.LookAndFeelInfo laf, int xOffset) {\n-        Point frameLocation = fileChooser.getLocationOnScreen();\n-        int frameWidth = frame.getWidth();\n-        int frameHeight = frame.getHeight();\n-\n-        Point btnLocation = getSelectedFilesButton.getLocationOnScreen();\n-        int btnWidth = getSelectedFilesButton.getWidth();\n-        int btnHeight = getSelectedFilesButton.getHeight();\n-        clickMouse(frameLocation, 0, frameHeight, xOffset);\n-        clickMouse(btnLocation, btnWidth, btnHeight, 0);\n+    private static void doTesting(UIManager.LookAndFeelInfo laf, int xOffset)\n+                                    throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            Point fileChooserLocation = fileChooser.getLocationOnScreen();\n+            fileChooserLocation.y += frame.getHeight() \/ 3;\n+            clickLocation = new Point(fileChooserLocation);\n+        });\n+        clickMouse(clickLocation, xOffset);\n@@ -205,3 +200,2 @@\n-    private static void clickMouse(Point point, int width, int height,\n-                                   int xOffset) {\n-        robot.mouseMove(point.x + width\/2 + xOffset , point.y + height\/3);\n+    private static void clickMouse(Point point, int xOffset) {\n+        robot.mouseMove(point.x + xOffset , point.y);\n@@ -211,0 +205,11 @@\n+        robot.waitForIdle();\n+    }\n+\n+    private static void checkResult(UIManager.LookAndFeelInfo laf) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            File files[] = fileChooser.getSelectedFiles();\n+            if (files.length == 0) {\n+                throw new RuntimeException(\"getSelectedFiles returned \" +\n+                        \"empty array for LAF: \" + laf.getClassName());\n+            }\n+        });\n@@ -213,4 +218,6 @@\n-    private static void checkResult(UIManager.LookAndFeelInfo laf) {\n-        if (!passed)\n-            throw new RuntimeException(\"getSelectedFiles returned \" +\n-                    \"empty array for LAF: \"+laf.getClassName());\n+    private static void disposeFrame() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestFileChooserSingleDirectorySelection.java","additions":94,"deletions":87,"binary":false,"changes":181,"status":"modified"}]}