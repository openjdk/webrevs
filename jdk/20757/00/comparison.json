{"files":[{"patch":"@@ -265,1 +265,1 @@\n-        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VoidType) {\n+        if (opcode.kind() != Opcode.Kind.BRANCH || BytecodeHelpers.isUnconditionalBranch(opcode)) {\n@@ -315,1 +315,1 @@\n-        if (opcode.kind() != Opcode.Kind.BRANCH || opcode.primaryTypeKind() == TypeKind.VoidType) {\n+        if (opcode.kind() != Opcode.Kind.BRANCH || BytecodeHelpers.isUnconditionalBranch(opcode)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.ConstantDescs;\n@@ -48,1 +46,1 @@\n-    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT, TypeKind.ReferenceType, 0, ConstantDescs.NULL),\n+    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT),\n@@ -51,1 +49,1 @@\n-    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT, TypeKind.IntType, 0, -1),\n+    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT),\n@@ -54,1 +52,1 @@\n-    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT, TypeKind.IntType, 0, 0),\n+    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT),\n@@ -57,1 +55,1 @@\n-    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT, TypeKind.IntType, 0, 1),\n+    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT),\n@@ -60,1 +58,1 @@\n-    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT, TypeKind.IntType, 0, 2),\n+    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT),\n@@ -63,1 +61,1 @@\n-    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT, TypeKind.IntType, 0, 3),\n+    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT),\n@@ -66,1 +64,1 @@\n-    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT, TypeKind.IntType, 0, 4),\n+    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT),\n@@ -69,1 +67,1 @@\n-    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT, TypeKind.IntType, 0, 5),\n+    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT),\n@@ -72,1 +70,1 @@\n-    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT, TypeKind.LongType, 0, 0L),\n+    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT),\n@@ -75,1 +73,1 @@\n-    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT, TypeKind.LongType, 0, 1L),\n+    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT),\n@@ -78,1 +76,1 @@\n-    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 0.0f),\n+    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT),\n@@ -81,1 +79,1 @@\n-    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 1.0f),\n+    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT),\n@@ -84,1 +82,1 @@\n-    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 2.0f),\n+    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT),\n@@ -87,1 +85,1 @@\n-    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 0.0d),\n+    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT),\n@@ -90,1 +88,1 @@\n-    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 1.0d),\n+    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT),\n@@ -93,1 +91,1 @@\n-    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT, TypeKind.ByteType),\n+    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT),\n@@ -96,1 +94,1 @@\n-    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT, TypeKind.ShortType),\n+    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT),\n@@ -108,1 +106,1 @@\n-    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD, TypeKind.IntType, -1),\n+    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD),\n@@ -111,1 +109,1 @@\n-    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD, TypeKind.LongType, -1),\n+    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD),\n@@ -114,1 +112,1 @@\n-    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD, TypeKind.FloatType, -1),\n+    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD),\n@@ -117,1 +115,1 @@\n-    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD, TypeKind.DoubleType, -1),\n+    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD),\n@@ -120,1 +118,1 @@\n-    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD, TypeKind.ReferenceType, -1),\n+    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD),\n@@ -123,1 +121,1 @@\n-    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD, TypeKind.IntType, 0),\n+    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD),\n@@ -126,1 +124,1 @@\n-    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD, TypeKind.IntType, 1),\n+    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD),\n@@ -129,1 +127,1 @@\n-    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD, TypeKind.IntType, 2),\n+    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD),\n@@ -132,1 +130,1 @@\n-    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD, TypeKind.IntType, 3),\n+    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD),\n@@ -135,1 +133,1 @@\n-    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD, TypeKind.LongType, 0),\n+    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD),\n@@ -138,1 +136,1 @@\n-    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD, TypeKind.LongType, 1),\n+    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD),\n@@ -141,1 +139,1 @@\n-    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD, TypeKind.LongType, 2),\n+    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD),\n@@ -144,1 +142,1 @@\n-    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD, TypeKind.LongType, 3),\n+    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD),\n@@ -147,1 +145,1 @@\n-    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD, TypeKind.FloatType, 0),\n+    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD),\n@@ -150,1 +148,1 @@\n-    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD, TypeKind.FloatType, 1),\n+    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD),\n@@ -153,1 +151,1 @@\n-    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD, TypeKind.FloatType, 2),\n+    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD),\n@@ -156,1 +154,1 @@\n-    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD, TypeKind.FloatType, 3),\n+    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD),\n@@ -159,1 +157,1 @@\n-    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD, TypeKind.DoubleType, 0),\n+    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD),\n@@ -162,1 +160,1 @@\n-    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD, TypeKind.DoubleType, 1),\n+    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD),\n@@ -165,1 +163,1 @@\n-    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD, TypeKind.DoubleType, 2),\n+    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD),\n@@ -168,1 +166,1 @@\n-    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD, TypeKind.DoubleType, 3),\n+    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD),\n@@ -171,1 +169,1 @@\n-    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD, TypeKind.ReferenceType, 0),\n+    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD),\n@@ -174,1 +172,1 @@\n-    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD, TypeKind.ReferenceType, 1),\n+    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD),\n@@ -177,1 +175,1 @@\n-    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD, TypeKind.ReferenceType, 2),\n+    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD),\n@@ -180,1 +178,1 @@\n-    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD, TypeKind.ReferenceType, 3),\n+    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD),\n@@ -183,1 +181,1 @@\n-    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD, TypeKind.IntType),\n+    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD),\n@@ -186,1 +184,1 @@\n-    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD, TypeKind.LongType),\n+    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD),\n@@ -189,1 +187,1 @@\n-    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD, TypeKind.FloatType),\n+    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD),\n@@ -192,1 +190,1 @@\n-    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD, TypeKind.DoubleType),\n+    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD),\n@@ -195,1 +193,1 @@\n-    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ReferenceType),\n+    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD),\n@@ -198,1 +196,1 @@\n-    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ByteType),\n+    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD),\n@@ -201,1 +199,1 @@\n-    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD, TypeKind.CharType),\n+    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD),\n@@ -204,1 +202,1 @@\n-    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ShortType),\n+    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD),\n@@ -207,1 +205,1 @@\n-    ISTORE(ClassFile.ISTORE, 2, Kind.STORE, TypeKind.IntType, -1),\n+    ISTORE(ClassFile.ISTORE, 2, Kind.STORE),\n@@ -210,1 +208,1 @@\n-    LSTORE(ClassFile.LSTORE, 2, Kind.STORE, TypeKind.LongType, -1),\n+    LSTORE(ClassFile.LSTORE, 2, Kind.STORE),\n@@ -213,1 +211,1 @@\n-    FSTORE(ClassFile.FSTORE, 2, Kind.STORE, TypeKind.FloatType, -1),\n+    FSTORE(ClassFile.FSTORE, 2, Kind.STORE),\n@@ -216,1 +214,1 @@\n-    DSTORE(ClassFile.DSTORE, 2, Kind.STORE, TypeKind.DoubleType, -1),\n+    DSTORE(ClassFile.DSTORE, 2, Kind.STORE),\n@@ -219,1 +217,1 @@\n-    ASTORE(ClassFile.ASTORE, 2, Kind.STORE, TypeKind.ReferenceType, -1),\n+    ASTORE(ClassFile.ASTORE, 2, Kind.STORE),\n@@ -222,1 +220,1 @@\n-    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE, TypeKind.IntType, 0),\n+    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE),\n@@ -225,1 +223,1 @@\n-    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE, TypeKind.IntType, 1),\n+    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE),\n@@ -228,1 +226,1 @@\n-    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE, TypeKind.IntType, 2),\n+    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE),\n@@ -231,1 +229,1 @@\n-    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE, TypeKind.IntType, 3),\n+    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE),\n@@ -234,1 +232,1 @@\n-    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE, TypeKind.LongType, 0),\n+    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE),\n@@ -237,1 +235,1 @@\n-    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE, TypeKind.LongType, 1),\n+    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE),\n@@ -240,1 +238,1 @@\n-    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE, TypeKind.LongType, 2),\n+    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE),\n@@ -243,1 +241,1 @@\n-    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE, TypeKind.LongType, 3),\n+    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE),\n@@ -246,1 +244,1 @@\n-    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE, TypeKind.FloatType, 0),\n+    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE),\n@@ -249,1 +247,1 @@\n-    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE, TypeKind.FloatType, 1),\n+    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE),\n@@ -252,1 +250,1 @@\n-    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE, TypeKind.FloatType, 2),\n+    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE),\n@@ -255,1 +253,1 @@\n-    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE, TypeKind.FloatType, 3),\n+    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE),\n@@ -258,1 +256,1 @@\n-    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE, TypeKind.DoubleType, 0),\n+    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE),\n@@ -261,1 +259,1 @@\n-    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE, TypeKind.DoubleType, 1),\n+    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE),\n@@ -264,1 +262,1 @@\n-    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE, TypeKind.DoubleType, 2),\n+    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE),\n@@ -267,1 +265,1 @@\n-    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE, TypeKind.DoubleType, 3),\n+    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE),\n@@ -270,1 +268,1 @@\n-    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE, TypeKind.ReferenceType, 0),\n+    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE),\n@@ -273,1 +271,1 @@\n-    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE, TypeKind.ReferenceType, 1),\n+    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE),\n@@ -276,1 +274,1 @@\n-    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE, TypeKind.ReferenceType, 2),\n+    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE),\n@@ -279,1 +277,1 @@\n-    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE, TypeKind.ReferenceType, 3),\n+    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE),\n@@ -282,1 +280,1 @@\n-    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE, TypeKind.IntType),\n+    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE),\n@@ -285,1 +283,1 @@\n-    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE, TypeKind.LongType),\n+    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE),\n@@ -288,1 +286,1 @@\n-    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE, TypeKind.FloatType),\n+    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE),\n@@ -291,1 +289,1 @@\n-    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE, TypeKind.DoubleType),\n+    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE),\n@@ -294,1 +292,1 @@\n-    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE, TypeKind.ReferenceType),\n+    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE),\n@@ -297,1 +295,1 @@\n-    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE, TypeKind.ByteType),\n+    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE),\n@@ -300,1 +298,1 @@\n-    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE, TypeKind.CharType),\n+    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE),\n@@ -303,1 +301,1 @@\n-    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE, TypeKind.ShortType),\n+    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE),\n@@ -333,1 +331,1 @@\n-    IADD(ClassFile.IADD, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IADD(ClassFile.IADD, 1, Kind.OPERATOR),\n@@ -336,1 +334,1 @@\n-    LADD(ClassFile.LADD, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LADD(ClassFile.LADD, 1, Kind.OPERATOR),\n@@ -339,1 +337,1 @@\n-    FADD(ClassFile.FADD, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FADD(ClassFile.FADD, 1, Kind.OPERATOR),\n@@ -342,1 +340,1 @@\n-    DADD(ClassFile.DADD, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DADD(ClassFile.DADD, 1, Kind.OPERATOR),\n@@ -345,1 +343,1 @@\n-    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR),\n@@ -348,1 +346,1 @@\n-    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR),\n@@ -351,1 +349,1 @@\n-    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR),\n@@ -354,1 +352,1 @@\n-    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR),\n@@ -357,1 +355,1 @@\n-    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR),\n@@ -360,1 +358,1 @@\n-    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR),\n@@ -363,1 +361,1 @@\n-    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR),\n@@ -366,1 +364,1 @@\n-    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR),\n@@ -369,1 +367,1 @@\n-    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR),\n@@ -372,1 +370,1 @@\n-    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR),\n@@ -375,1 +373,1 @@\n-    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR),\n@@ -378,1 +376,1 @@\n-    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR),\n@@ -381,1 +379,1 @@\n-    IREM(ClassFile.IREM, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IREM(ClassFile.IREM, 1, Kind.OPERATOR),\n@@ -384,1 +382,1 @@\n-    LREM(ClassFile.LREM, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LREM(ClassFile.LREM, 1, Kind.OPERATOR),\n@@ -387,1 +385,1 @@\n-    FREM(ClassFile.FREM, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FREM(ClassFile.FREM, 1, Kind.OPERATOR),\n@@ -390,1 +388,1 @@\n-    DREM(ClassFile.DREM, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DREM(ClassFile.DREM, 1, Kind.OPERATOR),\n@@ -393,1 +391,1 @@\n-    INEG(ClassFile.INEG, 1, Kind.OPERATOR, TypeKind.IntType),\n+    INEG(ClassFile.INEG, 1, Kind.OPERATOR),\n@@ -396,1 +394,1 @@\n-    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR),\n@@ -399,1 +397,1 @@\n-    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR),\n@@ -402,1 +400,1 @@\n-    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR),\n@@ -405,1 +403,1 @@\n-    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR),\n@@ -408,1 +406,1 @@\n-    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR),\n@@ -411,1 +409,1 @@\n-    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR),\n@@ -414,1 +412,1 @@\n-    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR),\n@@ -417,1 +415,1 @@\n-    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR),\n@@ -420,1 +418,1 @@\n-    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR),\n@@ -423,1 +421,1 @@\n-    IAND(ClassFile.IAND, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IAND(ClassFile.IAND, 1, Kind.OPERATOR),\n@@ -426,1 +424,1 @@\n-    LAND(ClassFile.LAND, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LAND(ClassFile.LAND, 1, Kind.OPERATOR),\n@@ -429,1 +427,1 @@\n-    IOR(ClassFile.IOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IOR(ClassFile.IOR, 1, Kind.OPERATOR),\n@@ -432,1 +430,1 @@\n-    LOR(ClassFile.LOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LOR(ClassFile.LOR, 1, Kind.OPERATOR),\n@@ -435,1 +433,1 @@\n-    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR),\n@@ -438,1 +436,1 @@\n-    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR),\n@@ -441,1 +439,1 @@\n-    IINC(ClassFile.IINC, 3, Kind.INCREMENT, TypeKind.IntType, -1),\n+    IINC(ClassFile.IINC, 3, Kind.INCREMENT),\n@@ -444,1 +442,1 @@\n-    I2L(ClassFile.I2L, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.LongType),\n+    I2L(ClassFile.I2L, 1, Kind.CONVERT),\n@@ -447,1 +445,1 @@\n-    I2F(ClassFile.I2F, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.FloatType),\n+    I2F(ClassFile.I2F, 1, Kind.CONVERT),\n@@ -450,1 +448,1 @@\n-    I2D(ClassFile.I2D, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.DoubleType),\n+    I2D(ClassFile.I2D, 1, Kind.CONVERT),\n@@ -453,1 +451,1 @@\n-    L2I(ClassFile.L2I, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.IntType),\n+    L2I(ClassFile.L2I, 1, Kind.CONVERT),\n@@ -456,1 +454,1 @@\n-    L2F(ClassFile.L2F, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.FloatType),\n+    L2F(ClassFile.L2F, 1, Kind.CONVERT),\n@@ -459,1 +457,1 @@\n-    L2D(ClassFile.L2D, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.DoubleType),\n+    L2D(ClassFile.L2D, 1, Kind.CONVERT),\n@@ -462,1 +460,1 @@\n-    F2I(ClassFile.F2I, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.IntType),\n+    F2I(ClassFile.F2I, 1, Kind.CONVERT),\n@@ -465,1 +463,1 @@\n-    F2L(ClassFile.F2L, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.LongType),\n+    F2L(ClassFile.F2L, 1, Kind.CONVERT),\n@@ -468,1 +466,1 @@\n-    F2D(ClassFile.F2D, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.DoubleType),\n+    F2D(ClassFile.F2D, 1, Kind.CONVERT),\n@@ -471,1 +469,1 @@\n-    D2I(ClassFile.D2I, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.IntType),\n+    D2I(ClassFile.D2I, 1, Kind.CONVERT),\n@@ -474,1 +472,1 @@\n-    D2L(ClassFile.D2L, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.LongType),\n+    D2L(ClassFile.D2L, 1, Kind.CONVERT),\n@@ -477,1 +475,1 @@\n-    D2F(ClassFile.D2F, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.FloatType),\n+    D2F(ClassFile.D2F, 1, Kind.CONVERT),\n@@ -480,1 +478,1 @@\n-    I2B(ClassFile.I2B, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ByteType),\n+    I2B(ClassFile.I2B, 1, Kind.CONVERT),\n@@ -483,1 +481,1 @@\n-    I2C(ClassFile.I2C, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.CharType),\n+    I2C(ClassFile.I2C, 1, Kind.CONVERT),\n@@ -486,1 +484,1 @@\n-    I2S(ClassFile.I2S, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ShortType),\n+    I2S(ClassFile.I2S, 1, Kind.CONVERT),\n@@ -489,1 +487,1 @@\n-    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR, TypeKind.LongType),\n+    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR),\n@@ -492,1 +490,1 @@\n-    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR),\n@@ -495,1 +493,1 @@\n-    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR),\n@@ -498,1 +496,1 @@\n-    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR),\n@@ -501,1 +499,1 @@\n-    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR),\n@@ -504,1 +502,1 @@\n-    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH),\n@@ -507,1 +505,1 @@\n-    IFNE(ClassFile.IFNE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFNE(ClassFile.IFNE, 3, Kind.BRANCH),\n@@ -510,1 +508,1 @@\n-    IFLT(ClassFile.IFLT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFLT(ClassFile.IFLT, 3, Kind.BRANCH),\n@@ -513,1 +511,1 @@\n-    IFGE(ClassFile.IFGE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFGE(ClassFile.IFGE, 3, Kind.BRANCH),\n@@ -516,1 +514,1 @@\n-    IFGT(ClassFile.IFGT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFGT(ClassFile.IFGT, 3, Kind.BRANCH),\n@@ -519,1 +517,1 @@\n-    IFLE(ClassFile.IFLE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IFLE(ClassFile.IFLE, 3, Kind.BRANCH),\n@@ -522,1 +520,1 @@\n-    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH),\n@@ -525,1 +523,1 @@\n-    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH),\n@@ -528,1 +526,1 @@\n-    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH),\n@@ -531,1 +529,1 @@\n-    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH),\n@@ -534,1 +532,1 @@\n-    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH),\n@@ -537,1 +535,1 @@\n-    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH, TypeKind.IntType),\n+    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH),\n@@ -540,1 +538,1 @@\n-    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH),\n@@ -543,1 +541,1 @@\n-    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH),\n@@ -546,1 +544,1 @@\n-    GOTO(ClassFile.GOTO, 3, Kind.BRANCH, TypeKind.VoidType),\n+    GOTO(ClassFile.GOTO, 3, Kind.BRANCH),\n@@ -567,1 +565,1 @@\n-    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN, TypeKind.IntType),\n+    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN),\n@@ -570,1 +568,1 @@\n-    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN, TypeKind.LongType),\n+    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN),\n@@ -573,1 +571,1 @@\n-    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN, TypeKind.FloatType),\n+    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN),\n@@ -576,1 +574,1 @@\n-    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN, TypeKind.DoubleType),\n+    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN),\n@@ -579,1 +577,1 @@\n-    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN, TypeKind.ReferenceType),\n+    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN),\n@@ -582,1 +580,1 @@\n-    RETURN(ClassFile.RETURN, 1, Kind.RETURN, TypeKind.VoidType),\n+    RETURN(ClassFile.RETURN, 1, Kind.RETURN),\n@@ -624,1 +622,1 @@\n-    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR, TypeKind.IntType),\n+    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR),\n@@ -645,1 +643,1 @@\n-    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH),\n@@ -648,1 +646,1 @@\n-    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH),\n@@ -651,1 +649,1 @@\n-    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH, TypeKind.VoidType),\n+    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH),\n@@ -660,1 +658,1 @@\n-    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD, TypeKind.IntType, -1),\n+    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD),\n@@ -663,1 +661,1 @@\n-    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD, TypeKind.LongType, -1),\n+    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD),\n@@ -666,1 +664,1 @@\n-    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD, TypeKind.FloatType, -1),\n+    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD),\n@@ -669,1 +667,1 @@\n-    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD, TypeKind.DoubleType, -1),\n+    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD),\n@@ -672,1 +670,1 @@\n-    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD, TypeKind.ReferenceType, -1),\n+    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD),\n@@ -675,1 +673,1 @@\n-    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE, TypeKind.IntType, -1),\n+    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE),\n@@ -678,1 +676,1 @@\n-    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE, TypeKind.LongType, -1),\n+    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE),\n@@ -681,1 +679,1 @@\n-    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE, TypeKind.FloatType, -1),\n+    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE),\n@@ -684,1 +682,1 @@\n-    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE, TypeKind.DoubleType, -1),\n+    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE),\n@@ -687,1 +685,1 @@\n-    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE, TypeKind.ReferenceType, -1),\n+    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE),\n@@ -696,1 +694,1 @@\n-    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT, TypeKind.IntType, -1);\n+    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT);\n@@ -1081,4 +1079,0 @@\n-    private final TypeKind primaryTypeKind;\n-    private final TypeKind secondaryTypeKind;\n-    private final int slot;\n-    private final ConstantDesc constantValue;\n@@ -1087,26 +1081,0 @@\n-        this(bytecode, sizeIfFixed, kind, null, null, -1, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, -1, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot, ConstantDesc constantValue) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, constantValue);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind primaryTypeKind, TypeKind secondaryTypeKind) {\n-        this(bytecode, sizeIfFixed, kind, primaryTypeKind, secondaryTypeKind, 0, null);\n-    }\n-\n-    Opcode(int bytecode,\n-           int sizeIfFixed,\n-           Kind kind,\n-           TypeKind primaryTypeKind,\n-           TypeKind secondaryTypeKind,\n-           int slot,\n-           ConstantDesc constantValue) {\n@@ -1116,4 +1084,0 @@\n-        this.primaryTypeKind = primaryTypeKind;\n-        this.secondaryTypeKind = secondaryTypeKind;\n-        this.slot = slot;\n-        this.constantValue = constantValue;\n@@ -1123,1 +1087,3 @@\n-     * {@return bytecode}\n+     * {@return the opcode value} For {@linkplain #isWide() wide} pseudo-opcodes, returns the\n+     * first 2 bytes of the instruction, which are the {@code wide} opcode and the functional\n+     * local variable opcode, as a U2 value.\n@@ -1128,1 +1094,14 @@\n-     * {@return true if the instruction has extended local variable index by additional bytes}\n+     * {@return true if this is a pseudo-opcode modified by {@code wide}}\n+     *\n+     * @see #ILOAD_W\n+     * @see #LLOAD_W\n+     * @see #FLOAD_W\n+     * @see #DLOAD_W\n+     * @see #ALOAD_W\n+     * @see #ISTORE_W\n+     * @see #LSTORE_W\n+     * @see #FSTORE_W\n+     * @see #DSTORE_W\n+     * @see #ASTORE_W\n+     * @see #RET_W\n+     * @see #IINC_W\n@@ -1133,1 +1112,2 @@\n-     * {@return size of the instruction if fixed, or -1 otherwise}\n+     * {@return size of the instruction in bytes if fixed, or -1 otherwise} This size includes\n+     * the opcode itself.\n@@ -1141,38 +1121,0 @@\n-\n-    \/**\n-     * {@return primary type kind for instructions operating with at least one type, or null otherwise}\n-     *\/\n-    public TypeKind primaryTypeKind() {\n-        return primaryTypeKind;\n-    }\n-\n-    \/**\n-     * {@return secondary type kind for instructions operating with two types, or null otherwise}\n-     *\/\n-    public TypeKind secondaryTypeKind() {\n-        return secondaryTypeKind;\n-    }\n-\n-    \/**\n-     * {@return local variable slot for instructions operating with local variable, or -1 otherwise}\n-     *\/\n-    public int slot() {\n-        return slot;\n-    }\n-\n-    \/**\n-     * {@return constant value for constant instructions, or null otherwise}\n-     *\/\n-    public ConstantDesc constantValue() {\n-        return constantValue;\n-    }\n-\n-    \/**\n-     * {@return true if the instruction represents an unconditional branch}\n-     *\/\n-    public boolean isUnconditionalBranch() {\n-        return switch (this) {\n-            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n-            default -> kind() == Kind.RETURN;\n-        };\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":195,"deletions":253,"binary":false,"changes":448,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n@@ -77,1 +78,1 @@\n-            return opcode().primaryTypeKind();\n+            return BytecodeHelpers.intrinsicConstantType(opcode());\n@@ -100,1 +101,1 @@\n-            return opcode().primaryTypeKind();\n+            return TypeKind.IntType;\n@@ -139,1 +140,1 @@\n-        if (op.constantValue() == null)\n+        if (op.sizeIfFixed() != 1)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.loadType(op);\n@@ -176,1 +176,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.storeType(op);\n@@ -803,1 +803,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.loadType(op);\n@@ -834,1 +834,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.storeType(op);\n@@ -996,1 +996,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.returnType(op);\n@@ -1229,1 +1229,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.arrayLoadType(op);\n@@ -1242,1 +1242,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.arrayStoreType(op);\n@@ -1289,1 +1289,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.convertFromType(op);\n@@ -1294,1 +1294,1 @@\n-            return op.secondaryTypeKind();\n+            return BytecodeHelpers.convertToType(op);\n@@ -1307,1 +1307,1 @@\n-            return op.primaryTypeKind();\n+            return BytecodeHelpers.operatorOperandType(op);\n@@ -1313,2 +1313,0 @@\n-        final ConstantDesc constant;\n-\n@@ -1317,1 +1315,0 @@\n-            constant = op.constantValue();\n@@ -1322,1 +1319,1 @@\n-            return constant;\n+            return BytecodeHelpers.intrinsicConstantValue(op);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            if (element instanceof Instruction i && i.opcode().isUnconditionalBranch())\n+            if (element instanceof Instruction i && BytecodeHelpers.isUnconditionalBranch(i.opcode()))\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BlockCodeBuilderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,5 @@\n+import static java.lang.classfile.ClassFile.*;\n+\n+\/**\n+ * Note: This class switches on opcode.bytecode for code size\n+ *\/\n@@ -175,1 +180,1 @@\n-        return switch (op) {\n+        return switch (op.bytecode()) {\n@@ -192,1 +197,1 @@\n-            default -> throw new IllegalArgumentException(\"Unknown branch instruction: \" + op);\n+            default -> throw Util.badOpcodeKindException(op, Opcode.Kind.BRANCH);\n@@ -233,0 +238,23 @@\n+    public static TypeKind convertFromType(Opcode opcode) {\n+        return switch (opcode.bytecode()) {\n+            case I2D, I2F, I2L, I2B, I2C, I2S -> TypeKind.IntType;\n+            case L2D, L2F, L2I -> TypeKind.LongType;\n+            case F2D, F2I, F2L -> TypeKind.FloatType;\n+            case D2F, D2I, D2L -> TypeKind.DoubleType;\n+            default -> throw Util.badOpcodeKindException(opcode, Opcode.Kind.CONVERT);\n+        };\n+    }\n+\n+    public static TypeKind convertToType(Opcode opcode) {\n+        return switch (opcode.bytecode()) {\n+            case I2B -> TypeKind.ByteType;\n+            case I2C -> TypeKind.CharType;\n+            case I2S -> TypeKind.ShortType;\n+            case L2I, F2I, D2I -> TypeKind.IntType;\n+            case I2L, F2L, D2L -> TypeKind.LongType;\n+            case I2F, L2F, D2F -> TypeKind.FloatType;\n+            case I2D, L2D, F2D -> TypeKind.DoubleType;\n+            default -> throw Util.badOpcodeKindException(opcode, Opcode.Kind.CONVERT);\n+        };\n+    }\n+\n@@ -298,1 +326,1 @@\n-        switch (opcode) {\n+        switch (opcode.bytecode()) {\n@@ -312,3 +340,1 @@\n-                var exp = opcode.constantValue();\n-                if (exp == null)\n-                    throw new IllegalArgumentException(\"Can not use Opcode: \" + opcode + \" with constant()\");\n+                var exp = intrinsicConstantValue(opcode);\n@@ -360,0 +386,141 @@\n+\n+    public static ConstantDesc intrinsicConstantValue(Opcode opcode) {\n+        return switch (opcode.bytecode()) {\n+            case ACONST_NULL -> ConstantDescs.NULL;\n+            case ICONST_M1 -> -1;\n+            case ICONST_0 -> 0;\n+            case ICONST_1 -> 1;\n+            case ICONST_2 -> 2;\n+            case ICONST_3 -> 3;\n+            case ICONST_4 -> 4;\n+            case ICONST_5 -> 5;\n+            case LCONST_0 -> 0L;\n+            case LCONST_1 -> 1L;\n+            case FCONST_0 -> 0F;\n+            case FCONST_1 -> 1F;\n+            case FCONST_2 -> 2F;\n+            case DCONST_0 -> 0D;\n+            case DCONST_1 -> 1D;\n+            default -> throw Util.badOpcodeKindException(opcode, Opcode.Kind.CONSTANT);\n+        };\n+    }\n+\n+    public static TypeKind intrinsicConstantType(Opcode opcode) {\n+        return switch (opcode.bytecode()) {\n+            case ACONST_NULL -> TypeKind.ReferenceType;\n+            case ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5 -> TypeKind.IntType;\n+            case LCONST_0, LCONST_1 -> TypeKind.LongType;\n+            case FCONST_0, FCONST_1, FCONST_2 -> TypeKind.FloatType;\n+            case DCONST_0, DCONST_1 -> TypeKind.DoubleType;\n+            default -> throw Util.badOpcodeKindException(opcode, Opcode.Kind.CONSTANT);\n+        };\n+    }\n+\n+    public static boolean isUnconditionalBranch(Opcode opcode) {\n+        return switch (opcode.bytecode()) {\n+            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n+            default -> opcode.kind() == Opcode.Kind.RETURN;\n+        };\n+    }\n+\n+    \/\/ Must check Opcode.sizeIfFixed() == 1 before call!\n+    public static int intrinsicLoadSlot(Opcode loadOpcode) {\n+        return switch (loadOpcode.bytecode()) {\n+            case ILOAD_0, LLOAD_0, FLOAD_0, DLOAD_0, ALOAD_0 -> 0;\n+            case ILOAD_1, LLOAD_1, FLOAD_1, DLOAD_1, ALOAD_1 -> 1;\n+            case ILOAD_2, LLOAD_2, FLOAD_2, DLOAD_2, ALOAD_2 -> 2;\n+            case ILOAD_3, LLOAD_3, FLOAD_3, DLOAD_3, ALOAD_3 -> 3;\n+            default -> throw Util.badOpcodeKindException(loadOpcode, Opcode.Kind.LOAD);\n+        };\n+    }\n+\n+    \/\/ Must check Opcode.sizeIfFixed() == 1 before call!\n+    public static int intrinsicStoreSlot(Opcode storeOpcode) {\n+        return switch (storeOpcode.bytecode()) {\n+            case ISTORE_0, LSTORE_0, FSTORE_0, DSTORE_0, ASTORE_0 -> 0;\n+            case ISTORE_1, LSTORE_1, FSTORE_1, DSTORE_1, ASTORE_1 -> 1;\n+            case ISTORE_2, LSTORE_2, FSTORE_2, DSTORE_2, ASTORE_2 -> 2;\n+            case ISTORE_3, LSTORE_3, FSTORE_3, DSTORE_3, ASTORE_3 -> 3;\n+            default -> throw Util.badOpcodeKindException(storeOpcode, Opcode.Kind.STORE);\n+        };\n+    }\n+\n+    public static TypeKind loadType(Opcode loadOpcode) {\n+        \/\/ Note: 0xFF handles wide opcodes\n+        return switch (loadOpcode.bytecode() & 0xFF) {\n+            case ILOAD, ILOAD_0, ILOAD_1, ILOAD_2, ILOAD_3 -> TypeKind.IntType;\n+            case LLOAD, LLOAD_0, LLOAD_1, LLOAD_2, LLOAD_3 -> TypeKind.LongType;\n+            case FLOAD, FLOAD_0, FLOAD_1, FLOAD_2, FLOAD_3 -> TypeKind.FloatType;\n+            case DLOAD, DLOAD_0, DLOAD_1, DLOAD_2, DLOAD_3 -> TypeKind.DoubleType;\n+            case ALOAD, ALOAD_0, ALOAD_1, ALOAD_2, ALOAD_3 -> TypeKind.ReferenceType;\n+            default -> throw Util.badOpcodeKindException(loadOpcode, Opcode.Kind.LOAD);\n+        };\n+    }\n+\n+    public static TypeKind storeType(Opcode storeOpcode) {\n+        \/\/ Note: 0xFF handles wide opcodes\n+        return switch (storeOpcode.bytecode() & 0xFF) {\n+            case ISTORE, ISTORE_0, ISTORE_1, ISTORE_2, ISTORE_3 -> TypeKind.IntType;\n+            case LSTORE, LSTORE_0, LSTORE_1, LSTORE_2, LSTORE_3 -> TypeKind.LongType;\n+            case FSTORE, FSTORE_0, FSTORE_1, FSTORE_2, FSTORE_3 -> TypeKind.FloatType;\n+            case DSTORE, DSTORE_0, DSTORE_1, DSTORE_2, DSTORE_3 -> TypeKind.DoubleType;\n+            case ASTORE, ASTORE_0, ASTORE_1, ASTORE_2, ASTORE_3 -> TypeKind.ReferenceType;\n+            default -> throw Util.badOpcodeKindException(storeOpcode, Opcode.Kind.STORE);\n+        };\n+    }\n+\n+    public static TypeKind arrayLoadType(Opcode arrayLoadOpcode) {\n+        return switch (arrayLoadOpcode.bytecode()) {\n+            case IALOAD -> TypeKind.IntType;\n+            case LALOAD -> TypeKind.LongType;\n+            case FALOAD -> TypeKind.FloatType;\n+            case DALOAD -> TypeKind.DoubleType;\n+            case AALOAD -> TypeKind.ReferenceType;\n+            case BALOAD -> TypeKind.ByteType;\n+            case CALOAD -> TypeKind.CharType;\n+            case SALOAD -> TypeKind.ShortType;\n+            default -> throw Util.badOpcodeKindException(arrayLoadOpcode, Opcode.Kind.ARRAY_LOAD);\n+        };\n+    }\n+\n+    public static TypeKind arrayStoreType(Opcode arrayStoreOpcode) {\n+        return switch (arrayStoreOpcode.bytecode()) {\n+            case IASTORE -> TypeKind.IntType;\n+            case LASTORE -> TypeKind.LongType;\n+            case FASTORE -> TypeKind.FloatType;\n+            case DASTORE -> TypeKind.DoubleType;\n+            case AASTORE -> TypeKind.ReferenceType;\n+            case BASTORE -> TypeKind.ByteType;\n+            case CASTORE -> TypeKind.CharType;\n+            case SASTORE -> TypeKind.ShortType;\n+            default -> throw Util.badOpcodeKindException(arrayStoreOpcode, Opcode.Kind.ARRAY_STORE);\n+        };\n+    }\n+\n+    public static TypeKind returnType(Opcode returnOpcode) {\n+        return switch (returnOpcode.bytecode()) {\n+            case IRETURN -> TypeKind.IntType;\n+            case LRETURN -> TypeKind.LongType;\n+            case FRETURN -> TypeKind.FloatType;\n+            case DRETURN -> TypeKind.DoubleType;\n+            case ARETURN -> TypeKind.ReferenceType;\n+            case RETURN -> TypeKind.VoidType;\n+            default -> throw Util.badOpcodeKindException(returnOpcode, Opcode.Kind.RETURN);\n+        };\n+    }\n+\n+    public static TypeKind operatorOperandType(Opcode operationOpcode) {\n+        return switch (operationOpcode.bytecode()) {\n+            case IADD, ISUB, IMUL, IDIV, IREM, INEG,\n+                 ISHL, ISHR, IUSHR, IAND, IOR, IXOR,\n+                 ARRAYLENGTH -> TypeKind.IntType;\n+            case LADD, LSUB, LMUL, LDIV, LREM, LNEG,\n+                 LSHL, LSHR, LUSHR, LAND, LOR, LXOR,\n+                 LCMP -> TypeKind.LongType;\n+            case FADD, FSUB, FMUL, FDIV, FREM, FNEG,\n+                 FCMPL, FCMPG -> TypeKind.FloatType;\n+            case DADD, DSUB, DMUL, DDIV, DREM, DNEG,\n+                 DCMPL, DCMPG -> TypeKind.DoubleType;\n+            default -> throw Util.badOpcodeKindException(operationOpcode, Opcode.Kind.OPERATOR);\n+        };\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":173,"deletions":6,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                    case LOAD -> LoadInstruction.of(o, o.slot());\n+                    case LOAD -> LoadInstruction.of(o, BytecodeHelpers.intrinsicLoadSlot(o));\n@@ -64,1 +64,1 @@\n-                    case STORE -> StoreInstruction.of(o, o.slot());\n+                    case STORE -> StoreInstruction.of(o, BytecodeHelpers.intrinsicStoreSlot(o));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,2 +188,6 @@\n-            throw new IllegalArgumentException(\n-                    String.format(\"Wrong opcode kind specified; found %s(%s), expected %s\", op, op.kind(), k));\n+            throw badOpcodeKindException(op, k);\n+    }\n+\n+    public static IllegalArgumentException badOpcodeKindException(Opcode op, Opcode.Kind k) {\n+        return new IllegalArgumentException(\n+                String.format(\"Wrong opcode kind specified; found %s(%s), expected %s\", op, op.kind(), k));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}