{"files":[{"patch":"@@ -1,174 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share;\n-\n-import nsk.share.*;\n-\n-import java.io.*;\n-\n-\/**\n- * Wrapper for local process.\n- * <p>\n- * This class provides abilities to launch such process,\n- * redirect standard output streams, wait for process terminates\n- * or kill the process, and so on.\n- * <p>\n- * This object is finalized with <code>nsk.share.Finalizer<\/code>.\n- *\n- * @see nsk.share.FinalizableObject\n- * @see nsk.share.Finalizer\n- *\/\n-\n-public class LocalProcess extends FinalizableObject {\n-\n-    public final static int PROCESS_IS_ALIVE = 222;\n-\n-    private Process process;\n-\n-    protected Process getProcess() {\n-        return process;\n-    }\n-\n-    public void launch (String[] args) throws IOException {\n-        System.out.println(\"Launching process by array of args: \");\n-        for (int mm=0; mm < args.length; mm++) {\n-            System.out.println(\"    args[\" + Integer.toString(mm) + \"]: >\" +\n-                               args[mm] + \"<\");\n-\n-        }\n-\n-        process = Runtime.getRuntime().exec(args);\n-\n-        registerCleanup();\n-    }\n-\n-    public void launch (String cmdLine) throws IOException {\n-        System.out.println(\"Launching process by command line: \" + cmdLine);\n-\n-        process = Runtime.getRuntime().exec(cmdLine);\n-\n-        registerCleanup();\n-    }\n-\n-    \/** Return exit status. *\/\n-    public int getStatus () {\n-        return process.exitValue();\n-    }\n-\n-    \/** Check whether the process has been terminated. *\/\n-    public boolean terminated() {\n-        try {\n-            int value = process.exitValue();\n-            return true;\n-        } catch (IllegalThreadStateException e) {\n-            return false;\n-        }\n-    }\n-\n-    \/** Wait until the process shutdown or crash. *\/\n-    public int waitFor () throws InterruptedException {\n-        return process.waitFor();\n-    }\n-\n-    \/**\n-     * Wait until the process shutdown or crash for given timeout in milliseconds.\n-     * Returns <code>LocalProcess.PROCESS_IS_ALIVE<\/code> if process is not terminated\n-     * after timeout.\n-     *\/\n-\n-    public int waitFor (long timeMillisec) throws InterruptedException {\n-        final Object waitObject = new Object();\n-\n-        class Watcher extends Thread {\n-            int exitCode = LocalProcess.PROCESS_IS_ALIVE;\n-            Process process;\n-\n-            Watcher (Process process) {\n-               this.process = process;\n-            }\n-\n-            public void run () {\n-                try {\n-                    synchronized (this) {\n-                       exitCode = process.waitFor();\n-                    }\n-                } catch (InterruptedException ie) {\n-                }\n-                synchronized (waitObject) {\n-                    waitObject.notifyAll();\n-                }\n-            }\n-\n-            synchronized public int getExitCode() {\n-                return exitCode;\n-            }\n-        }\n-\n-        Watcher watcher;\n-        \/\/ yield control to watcher for timeMillisec time.\n-        synchronized (waitObject) {\n-            watcher = new Watcher(process);\n-            watcher.start();\n-\n-            waitObject.wait(timeMillisec);\n-        }\n-\n-        if (watcher.isAlive()) {\n-            watcher.interrupt();\n-        }\n-\n-        return watcher.getExitCode();\n-    }\n-\n-    \/\/ --------------------------------------------------- \/\/\n-\n-    \/** Get a pipe to write to the process' stdin stream. *\/\n-    public OutputStream getStdin () {\n-        return process.getOutputStream();\n-    }\n-\n-    \/** Get a pipe to read the process' stdout stream. *\/\n-    public InputStream getStdout () {\n-        return process.getInputStream();\n-    }\n-\n-    \/** Get a pipe to read the process stderr stream. *\/\n-    public InputStream getStderr () {\n-        return process.getErrorStream();\n-    }\n-\n-    \/** Kill the process. *\/\n-    protected void kill() {\n-        process.destroy();\n-    }\n-\n-    \/**\n-     * This method is called at finalization and calls <code>kill()<\/code>.\n-     *\n-     *\/\n-    @Override\n-    public void cleanup() {\n-        kill();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/LocalProcess.java","additions":0,"deletions":174,"binary":false,"changes":174,"status":"deleted"},{"patch":"@@ -207,4 +207,4 @@\n-            } catch (Exception e) {\n-                failure(\"Caught unexpected exception: \" + e);\n-                e.printStackTrace(out);\n-\n+            } catch (Throwable t) {\n+                failure(\"Caught unexpected exception: \" + t);\n+                t.printStackTrace(out);\n+            } finally {\n@@ -212,0 +212,1 @@\n+                    log.complain(\"jdb reference is not null, check for exception in the logs.\");\n@@ -218,2 +219,0 @@\n-                } else {\n-                    log.complain(\"jdb reference is null, cannot run jdb.close() method\");\n@@ -222,1 +221,2 @@\n-                if (debuggee != null) {\n+                if (debuggee != null && !debuggee.terminated()) {\n+                    log.complain(\"debuggee is still running, check for exception in the logs.\");\n@@ -224,2 +224,0 @@\n-                } else {\n-                    log.complain(\"debuggee reference is null, cannot run debuggee.killDebuggee() method\");\n@@ -227,1 +225,0 @@\n-\n@@ -235,3 +232,3 @@\n-        } catch (Exception e) {\n-            out.println(\"Caught unexpected exception while starting the test: \" + e);\n-            e.printStackTrace(out);\n+        } catch (Throwable t) {\n+            out.println(\"Caught unexpected exception while starting the test: \" + t);\n+            t.printStackTrace(out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdb\/JdbTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package nsk.share.jdb;\n+\n+import java.io.*;\n+\n+\/**\n+ * Wrapper for local process.\n+ * <p>\n+ * This class provides abilities to launch such process,\n+ * redirect standard output streams, wait for process terminates\n+ * or kill the process, and so on.\n+ *\/\n+\n+class LocalProcess {\n+\n+    public final static int PROCESS_IS_ALIVE = 222;\n+\n+    private Process process;\n+\n+    protected Process getProcess() {\n+        return process;\n+    }\n+\n+    public void launch (String[] args) throws IOException {\n+        System.out.println(\"Launching process by array of args: \");\n+        for (int mm=0; mm < args.length; mm++) {\n+            System.out.println(\"    args[\" + Integer.toString(mm) + \"]: >\" +\n+                               args[mm] + \"<\");\n+\n+        }\n+\n+        process = Runtime.getRuntime().exec(args);\n+    }\n+\n+    public void launch (String cmdLine) throws IOException {\n+        System.out.println(\"Launching process by command line: \" + cmdLine);\n+        process = Runtime.getRuntime().exec(cmdLine);\n+    }\n+\n+    \/** Return exit status. *\/\n+    public int getStatus () {\n+        return process.exitValue();\n+    }\n+\n+    \/** Check whether the process has been terminated. *\/\n+    public boolean terminated() {\n+        try {\n+            int value = process.exitValue();\n+            return true;\n+        } catch (IllegalThreadStateException e) {\n+            return false;\n+        }\n+    }\n+\n+    \/** Wait until the process shutdown or crash. *\/\n+    public int waitFor () throws InterruptedException {\n+        return process.waitFor();\n+    }\n+\n+    \/**\n+     * Wait until the process shutdown or crash for given timeout in milliseconds.\n+     * Returns <code>LocalProcess.PROCESS_IS_ALIVE<\/code> if process is not terminated\n+     * after timeout.\n+     *\/\n+\n+    public int waitFor (long timeMillisec) throws InterruptedException {\n+        final Object waitObject = new Object();\n+\n+        class Watcher extends Thread {\n+            int exitCode = LocalProcess.PROCESS_IS_ALIVE;\n+            Process process;\n+\n+            Watcher (Process process) {\n+               this.process = process;\n+            }\n+\n+            public void run () {\n+                try {\n+                    synchronized (this) {\n+                       exitCode = process.waitFor();\n+                    }\n+                } catch (InterruptedException ie) {\n+                }\n+                synchronized (waitObject) {\n+                    waitObject.notifyAll();\n+                }\n+            }\n+\n+            synchronized public int getExitCode() {\n+                return exitCode;\n+            }\n+        }\n+\n+        Watcher watcher;\n+        \/\/ yield control to watcher for timeMillisec time.\n+        synchronized (waitObject) {\n+            watcher = new Watcher(process);\n+            watcher.start();\n+\n+            waitObject.wait(timeMillisec);\n+        }\n+\n+        if (watcher.isAlive()) {\n+            watcher.interrupt();\n+        }\n+\n+        return watcher.getExitCode();\n+    }\n+\n+    \/\/ --------------------------------------------------- \/\/\n+\n+    \/** Get a pipe to write to the process' stdin stream. *\/\n+    public OutputStream getStdin () {\n+        return process.getOutputStream();\n+    }\n+\n+    \/** Get a pipe to read the process' stdout stream. *\/\n+    public InputStream getStdout () {\n+        return process.getInputStream();\n+    }\n+\n+    \/** Get a pipe to read the process stderr stream. *\/\n+    public InputStream getStderr () {\n+        return process.getErrorStream();\n+    }\n+\n+    \/** Kill the process. *\/\n+    protected void kill() {\n+        process.destroy();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdb\/LocalProcess.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"}]}