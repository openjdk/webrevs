{"files":[{"patch":"@@ -53,1 +53,1 @@\n-                .positionTestUI(DefaultFrameIconTest::positionTestWindows)\n+                .positionTestUIRightRow()\n@@ -58,10 +58,0 @@\n-    private static void positionTestWindows(List<? extends Window> testWindows,\n-                                            PassFailJFrame.InstructionUI instructionUI) {\n-        int gap = 5;\n-        int x = instructionUI.getLocation().x + instructionUI.getSize().width + gap;\n-        for (Window w : testWindows) {\n-            w.setLocation(x, instructionUI.getLocation().y);\n-            x += w.getWidth() + gap;\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/awt\/Frame\/DefaultFrameIconTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                .positionTestUI(MenuCrash::positionTestWindows)\n+                .positionTestUIRightRow()\n@@ -84,10 +84,0 @@\n-    private static void positionTestWindows(List<? extends Window> testWindows,\n-                                            PassFailJFrame.InstructionUI instructionUI) {\n-        int gap = 5;\n-        int x = instructionUI.getLocation().x + instructionUI.getSize().width + gap;\n-        for (Window w : testWindows) {\n-            w.setLocation(x, instructionUI.getLocation().y);\n-            x += w.getWidth() + gap;\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/awt\/Frame\/MenuCrash.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -173,0 +173,5 @@\n+    \/**\n+     * A gap between windows.\n+     *\/\n+    public static final int WINDOW_GAP = 8;\n+\n@@ -1010,1 +1015,1 @@\n-                int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+                int newX = (((screenSize.width + WINDOW_GAP) \/ 2) - frame.getWidth());\n@@ -1016,1 +1021,1 @@\n-                int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+                int newY = (((screenSize.height + WINDOW_GAP) \/ 2) - frame.getHeight());\n@@ -1064,1 +1069,1 @@\n-                    testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                    testWindow.setLocation((frame.getX() + frame.getWidth() + WINDOW_GAP),\n@@ -1070,1 +1075,1 @@\n-                                           (frame.getY() + frame.getHeight() + 5));\n+                                           (frame.getY() + frame.getHeight() + WINDOW_GAP));\n@@ -1373,0 +1378,1 @@\n+\n@@ -1396,0 +1402,71 @@\n+        \/**\n+         * Positions the test UI windows in a row to the right of\n+         * the instruction frame. The top of the windows is aligned to\n+         * that of the instruction frame.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIRightRow() {\n+            return position(Position.HORIZONTAL)\n+                   .positionTestUI(WindowLayouts::rightOneRow);\n+        }\n+\n+        \/**\n+         * Positions the test UI windows in a column to the right of\n+         * the instruction frame. The top of the first window is aligned to\n+         * that of the instruction frame.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIRightColumn() {\n+            return position(Position.HORIZONTAL)\n+                   .positionTestUI(WindowLayouts::rightOneColumn);\n+        }\n+\n+        \/**\n+         * Positions the test UI windows in a column to the right of\n+         * the instruction frame centering the stack of the windows.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIRightColumnCentered() {\n+            return position(Position.HORIZONTAL)\n+                   .positionTestUI(WindowLayouts::rightOneColumnCentered);\n+        }\n+\n+        \/**\n+         * Positions the test UI windows in a row to the bottom of\n+         * the instruction frame. The left of the first window is aligned to\n+         * that of the instruction frame.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIBottomRow() {\n+            return position(Position.VERTICAL)\n+                   .positionTestUI(WindowLayouts::bottomOneRow);\n+        }\n+\n+        \/**\n+         * Positions the test UI windows in a row to the bottom of\n+         * the instruction frame centering the row of the windows.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIBottomRowCentered() {\n+            return position(Position.VERTICAL)\n+                   .positionTestUI(WindowLayouts::bottomOneRowCentered);\n+        }\n+\n+        \/**\n+         * Positions the test UI windows in a column to the bottom of\n+         * the instruction frame. The left of the first window is aligned to\n+         * that of the instruction frame.\n+         *\n+         * @return this builder\n+         *\/\n+        public Builder positionTestUIBottomColumn() {\n+            return position(Position.VERTICAL)\n+                   .positionTestUI(WindowLayouts::bottomOneColumn);\n+        }\n+\n+\n@@ -1498,0 +1575,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":82,"deletions":4,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -0,0 +1,237 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Window;\n+import java.util.List;\n+\n+import static java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment;\n+import static java.awt.Toolkit.getDefaultToolkit;\n+\n+\/**\n+ * A utility class which provides standard window layouts for multi-window\n+ * manual tests using the {@link PassFailJFrame} framework.\n+ * The layout methods {@code right-} and {@code bottom-} implement the\n+ * {@link PassFailJFrame.PositionWindows PositionWindows} interface and\n+ * can be used directly or via builder methods.\n+ * <p>\n+ * There are several helper methods, such as\n+ * {@link #getScreenCenter() getScreenCenter}, which could help you\n+ * implement customized windows layouts.\n+ *\/\n+public final class WindowLayouts {\n+\n+    \/** Private constructor to prevent instantiating the utility class. *\/\n+    private WindowLayouts() {\n+    }\n+\n+    \/** A gap between windows. (Local copy makes expressions shorter.) *\/\n+    private static final int WINDOW_GAP = PassFailJFrame.WINDOW_GAP;\n+\n+    \/**\n+     * Lays out the window list in one row to the right of\n+     * the instruction frame. The top of the windows is aligned to\n+     * that of the instruction frame.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void rightOneRow(final List<Window> windows,\n+                                   final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutRow(instructionUI.getLocation().x\n+                  + instructionUI.getSize().width\n+                  + WINDOW_GAP,\n+                  instructionUI.getLocation().y,\n+                  windows);\n+    }\n+\n+    \/**\n+     * Lays out the window list in one column to the right of\n+     * the instruction frame. The top of the first window is aligned to\n+     * that of the instruction frame.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void rightOneColumn(final List<Window> windows,\n+                                      final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutColumn(instructionUI.getLocation().x\n+                     + instructionUI.getSize().width\n+                     + WINDOW_GAP,\n+                     instructionUI.getLocation().y,\n+                     windows);\n+    }\n+\n+    \/**\n+     * Lays out the window list in one column to the right of\n+     * the instruction frame centering the stack of the windows.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void rightOneColumnCentered(final List<Window> windows,\n+                                              final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutColumn(instructionUI.getLocation().x\n+                     + instructionUI.getSize().width\n+                     + WINDOW_GAP,\n+                     getScreenCenter().y\n+                     - getWindowListHeight(windows) \/ 2,\n+                     windows);\n+    }\n+\n+\n+    \/**\n+     * Lays out the window list in one row to the bottom of\n+     * the instruction frame. The left of the first window is aligned to\n+     * that of the instruction frame.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void bottomOneRow(final List<Window> windows,\n+                                    final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutRow(instructionUI.getLocation().x,\n+                  instructionUI.getLocation().y\n+                  + instructionUI.getSize().height\n+                  + WINDOW_GAP,\n+                  windows);\n+    }\n+\n+    \/**\n+     * Lays out the window list in one row to the bottom of\n+     * the instruction frame centering the row of the windows.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void bottomOneRowCentered(final List<Window> windows,\n+                                            final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutRow(getScreenCenter().x\n+                  - getWindowListWidth(windows) \/ 2,\n+                  instructionUI.getLocation().y\n+                  + instructionUI.getSize().height\n+                  + WINDOW_GAP,\n+                  windows);\n+    }\n+\n+    \/**\n+     * Lays out the window list in one column to the bottom of\n+     * the instruction frame. The left of the first window is aligned to\n+     * that of the instruction frame.\n+     *\n+     * @param windows the list of windows to lay out\n+     * @param instructionUI information about the instruction frame\n+     *\/\n+    public static void bottomOneColumn(final List<Window> windows,\n+                                       final PassFailJFrame.InstructionUI instructionUI) {\n+        layoutColumn(instructionUI.getLocation().x,\n+                     instructionUI.getLocation().y\n+                     + instructionUI.getSize().height\n+                     + WINDOW_GAP,\n+                     windows);\n+    }\n+\n+\n+    \/**\n+     * Lays out the window list in one row starting at\n+     * ({@code x0}, {@code y}).\n+     *\n+     * @param x0 the starting <var>x<\/var> coordinate of the windows\n+     * @param y the <var>y<\/var> coordinate of the windows\n+     * @param windows the list of windows to lay out\n+     *\/\n+    public static void layoutRow(final int x0,\n+                                 final int y,\n+                                 final List<Window> windows) {\n+        int x = x0;\n+        for (Window w : windows) {\n+            w.setLocation(x, y);\n+            x += w.getWidth() + WINDOW_GAP;\n+        }\n+    }\n+\n+    \/**\n+     * Lays out the window list in one column starting at\n+     * ({@code x}, {@code y0}).\n+     *\n+     * @param x the <var>x<\/var> coordinate of the windows\n+     * @param y0 the starting <var>y<\/var> coordinate of the windows\n+     * @param windows the list of windows to lay out\n+     *\/\n+    public static void layoutColumn(final int x,\n+                                    final int y0,\n+                                    final List<Window> windows) {\n+        int y = y0;\n+        for (Window w : windows) {\n+            w.setLocation(x, y);\n+            y += w.getHeight() + WINDOW_GAP;\n+        }\n+    }\n+\n+\n+    \/**\n+     * {@return the center point of the main screen}\n+     *\/\n+    public static Point getScreenCenter() {\n+        GraphicsConfiguration gc = getLocalGraphicsEnvironment()\n+                                   .getDefaultScreenDevice()\n+                                   .getDefaultConfiguration();\n+        Dimension size = gc.getBounds()\n+                           .getSize();\n+        Insets insets = getDefaultToolkit()\n+                        .getScreenInsets(gc);\n+\n+        return new Point((size.width - insets.left - insets.right) \/ 2,\n+                         (size.height - insets.top - insets.bottom) \/ 2);\n+    }\n+\n+    \/**\n+     * {@return width of the windows in the list, taking into account\n+     * the gap between windows}\n+     *\n+     * @param windows the list of windows to get the width of\n+     *\/\n+    public static int getWindowListWidth(final List<Window> windows) {\n+        return windows.stream()\n+                      .mapToInt(Component::getWidth)\n+                      .sum()\n+               + WINDOW_GAP * (windows.size() - 1);\n+    }\n+\n+    \/**\n+     * {@return height of the windows in the list, taking into account\n+     * the gap between windows}\n+     *\n+     * @param windows the list of windows to get the height of\n+     *\/\n+    public static int getWindowListHeight(final List<Window> windows) {\n+        return windows.stream()\n+                      .mapToInt(Component::getHeight)\n+                      .sum()\n+               + WINDOW_GAP * (windows.size() - 1);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/WindowLayouts.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"}]}