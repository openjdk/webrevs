{"files":[{"patch":"@@ -24,0 +24,2 @@\n+import java.io.File;\n+import java.util.List;\n@@ -27,0 +29,2 @@\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n@@ -28,2 +32,0 @@\n-import java.io.File;\n-import java.util.List;\n@@ -32,1 +34,10 @@\n- * @test\n+ * @test id=metal\n+ * @bug 8139228\n+ * @summary JFileChooser should not render Directory names in HTML format\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HTMLFileName metal\n+ *\/\n+\n+\/*\n+ * @test id=system\n@@ -37,1 +48,1 @@\n- * @run main\/manual HTMLFileName\n+ * @run main\/manual HTMLFileName system\n@@ -41,0 +52,18 @@\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. FileChooser shows up a virtual directory and file with name\n+               \"<html><h1 color=#ff00ff><font face=\"Comic Sans MS\">Swing Rocks!\".\n+            2. On \"HTML disabled\" frame :\n+                  a. Verify that the folder and file name must be plain text.\n+                  b. If the name in file pane window and also in directory\n+                     ComboBox remains in plain text, then test passes.\n+                     If it appears to be in HTML format with Pink color,\n+                     then test fails.\n+                     (Verify for all Look and Feel).\n+            3. On \"HTML enabled\" frame :\n+                  a. Verify that the folder and file name remains in HTML\n+                     format with name \"Testing Name\" pink in color.\n+                  b. If the name in file pane window and also in directory\n+                     ComboBox remains in HTML format string, then test passes.\n+                     If it appears to be in plain text, then test fails.\n+                     (Verify for all Look and Feel).\n+            \"\"\";\n@@ -43,18 +72,10 @@\n-        String INSTRUCTIONS = \"\"\"\n-                1. FileChooser shows up a virtual directory and file with name\n-                   \"<html><h1 color=#ff00ff><font face=\"Comic Sans MS\">Testing Name\".\n-                2. On \"HTML disabled\" frame :\n-                      a. Verify that the folder and file name must be plain text.\n-                      b. If the name in file pane window and also in directory\n-                         ComboBox remains in plain text, then test PASS.\n-                         If it appears to be in HTML format with Pink color,\n-                         then test FAILS.\n-                         (Verify for all Look and Feel).\n-                3. On \"HTML enabled\" frame :\n-                      a. Verify that the folder and file name remains in HTML\n-                         format with name \"Testing Name\" pink in color.\n-                      b. If the name in file pane window and also in directory\n-                         ComboBox remains in HTML format string, then test PASS.\n-                         If it appears to be in plain text, then test FAILS.\n-                         (Verify for all Look and Feel).\n-                 \"\"\";\n+        if (args.length < 1) {\n+            throw new IllegalArgumentException(\"Look-and-Feel keyword is required\");\n+        }\n+\n+        final String lafClassName;\n+        switch (args[0]) {\n+            case \"metal\" -> lafClassName = UIManager.getCrossPlatformLookAndFeelClassName();\n+            case \"system\" -> lafClassName = UIManager.getSystemLookAndFeelClassName();\n+            default -> throw new IllegalArgumentException(\"Unsupported Look-and-Feel keyword: \" + args[0]);\n+        }\n@@ -62,0 +83,7 @@\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                UIManager.setLookAndFeel(lafClassName);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n@@ -63,0 +91,1 @@\n+        System.out.println(\"Test for LookAndFeel \" + lafClassName);\n@@ -70,0 +99,1 @@\n+        System.out.println(\"Test passed for LookAndFeel \" + lafClassName);\n@@ -76,6 +106,5 @@\n-    private static JFrame createFileChooser(boolean html_enabled) {\n-        JFileChooser jfc;\n-        String frameTitle = (html_enabled) ? \"HTML enabled\" : \"HTML disabled\";\n-        JFrame frame = new JFrame(frameTitle);\n-        jfc = new JFileChooser(new VirtualFileSystemView());\n-        jfc.putClientProperty(\"html.disable\", html_enabled);\n+    private static JFrame createFileChooser(boolean htmlEnabled) {\n+        JFileChooser jfc = new JFileChooser(new VirtualFileSystemView());\n+        jfc.putClientProperty(\"html.disable\", htmlEnabled);\n+        jfc.setControlButtonsAreShown(false);\n+        JFrame frame = new JFrame((htmlEnabled) ? \"HTML enabled\" : \"HTML disabled\");\n@@ -96,1 +125,2 @@\n-                    new File(\"\/\", \"<html><h1 color=#ff00ff><font face=\\\"Comic Sans MS\\\">SWING ROCKS!!!111\"),\n+                    new File(\"\/\", \"<html><h1 color=#ff00ff><font \" +\n+                            \"face=\\\"Comic Sans MS\\\">Swing Rocks!!!!111\"),\n@@ -116,1 +146,2 @@\n-                    new File(\"\/\", \"<html><h1 color=#ff00ff><font face=\\\"Comic Sans MS\\\">SWING ROCKS!!!111\"),\n+                    new File(\"\/\", \"<html><h1 color=#ff00ff><font \" +\n+                            \"face=\\\"Comic Sans MS\\\">Swing Rocks!\"),\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/HTMLFileName.java","additions":61,"deletions":30,"binary":false,"changes":91,"status":"modified"}]}