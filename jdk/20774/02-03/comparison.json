{"files":[{"patch":"@@ -133,1 +133,0 @@\n-  assert(items * x <= (size_t)1 << 31, \"unreasonable arena allocation size\");\n@@ -142,6 +141,2 @@\n-\/\/ Offsets a pointer with saturation to prevent overflow.\n-uintptr_t saturated_pointer_add(uintptr_t ptr, size_t size) {\n-  if (ptr > UINTPTR_MAX - size) {\n-    return UINTPTR_MAX;\n-  }\n-  return ptr + size;\n+size_t pointer_delta(const void *left, const void *right) {\n+  return (uintptr_t)left - (uintptr_t)right;\n@@ -153,6 +148,0 @@\n-  \/\/ Stupid fast special case\n-  if (new_size <= old_size) {     \/\/ Shrink in-place\n-    if (c_old + old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old + new_size;    \/\/ Adjust hwm\n-    return c_old;\n-  }\n@@ -160,5 +149,3 @@\n-  uintptr_t new_hwm = saturated_pointer_add((uintptr_t)c_old, new_size);\n-  \/\/ See if we can resize in-place\n-  if ((c_old + old_size == _hwm) && \/\/ Adjusting recent thing\n-      ((char *)new_hwm <= _max) &&  \/\/ Still fits where it sits\n-      (new_hwm != UINTPTR_MAX)) {   \/\/ Did not overflow\n+  \/\/ Reallocating the latest allocation?\n+  if (c_old + old_size == _hwm) {\n+    assert(_chunk->bottom() <= c_old, \"invariant\");\n@@ -166,2 +153,7 @@\n-    _hwm = (char *)new_hwm; \/\/ Adjust hwm\n-    return c_old;           \/\/ Return old pointer\n+    \/\/ Reallocate in place if it fits. Also handles shrinking\n+    if (pointer_delta(_max, c_old) >= new_size) {\n+      _hwm = c_old + new_size;\n+      return c_old;\n+    }\n+  } else if (new_size <= old_size) { \/\/ Shrink in place\n+    return c_old;\n","filename":"src\/hotspot\/share\/adlc\/adlArena.cpp","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-  assert(x <= (size_t)1 << 31, \"unreasonable arena allocation size\");\n","filename":"src\/hotspot\/share\/adlc\/adlArena.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -314,8 +314,0 @@\n-\/\/ Offsets a pointer with saturation to prevent overflow.\n-uintptr_t saturated_pointer_add(uintptr_t ptr, size_t size) {\n-  if (ptr > UINTPTR_MAX - size) {\n-    return UINTPTR_MAX;\n-  }\n-  return ptr + size;\n-}\n-\n@@ -333,6 +325,0 @@\n-  \/\/ Stupid fast special case\n-  if (new_size <= old_size) {     \/\/ Shrink in-place\n-    if (c_old + old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old + new_size;    \/\/ Adjust hwm\n-    return c_old;\n-  }\n@@ -340,1 +326,1 @@\n-  \/\/ make sure that new_size is legal\n+  \/\/ Make sure that new_size is legal\n@@ -342,7 +328,12 @@\n-  uintptr_t new_hwm = saturated_pointer_add((uintptr_t)c_old, corrected_new_size);\n-  \/\/ See if we can resize in-place\n-  if ((c_old + old_size == _hwm) && \/\/ Adjusting recent thing\n-      ((char *)new_hwm <= _max) &&  \/\/ Still fits where it sits\n-      (new_hwm != UINTPTR_MAX)) {   \/\/ Did not overflow\n-    _hwm = (char *)new_hwm;         \/\/ Adjust hwm\n-    return c_old;                   \/\/ Return old pointer\n+\n+  \/\/ Reallocating the latest allocation?\n+  if (c_old + old_size == _hwm) {\n+    assert(_chunk->bottom() <= c_old, \"invariant\");\n+\n+    \/\/ Reallocate in place if it fits. Also handles shrinking\n+    if (pointer_delta(_max, c_old, 1) >= corrected_new_size) {\n+      _hwm = c_old + corrected_new_size;\n+      return c_old;\n+    }\n+  } else if (new_size <= old_size) { \/\/ Shrink in place\n+    return c_old;\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-    assert(x <= 2*G, \"unreasonable arena allocation size\");\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}