{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+  assert(requested_size <= SIZE_MAX - length, \"overflow\");\n@@ -132,0 +133,1 @@\n+  assert(items <= SIZE_MAX \/ x, \"overflow\");\n@@ -139,0 +141,4 @@\n+size_t pointer_delta(const void *left, const void *right) {\n+  return (uintptr_t)left - (uintptr_t)right;\n+}\n+\n@@ -142,6 +148,0 @@\n-  \/\/ Stupid fast special case\n-  if( new_size <= old_size ) {  \/\/ Shrink in-place\n-    if( c_old+old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old+new_size;    \/\/ Adjust hwm\n-    return c_old;\n-  }\n@@ -149,5 +149,11 @@\n-  \/\/ See if we can resize in-place\n-  if( (c_old+old_size == _hwm) &&       \/\/ Adjusting recent thing\n-      (c_old+new_size <= _max) ) {      \/\/ Still fits where it sits\n-    _hwm = c_old+new_size;      \/\/ Adjust hwm\n-    return c_old;               \/\/ Return old pointer\n+  \/\/ Reallocating the latest allocation?\n+  if (c_old + old_size == _hwm) {\n+    assert(_chunk->bottom() <= c_old, \"invariant\");\n+\n+    \/\/ Reallocate in place if it fits. Also handles shrinking\n+    if (pointer_delta(_max, c_old) >= new_size) {\n+      _hwm = c_old + new_size;\n+      return c_old;\n+    }\n+  } else if (new_size <= old_size) { \/\/ Shrink in place\n+    return c_old;\n","filename":"src\/hotspot\/share\/adlc\/adlArena.cpp","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,1 @@\n+    assert(x <= SIZE_MAX - (8-1), \"overflow\");\n@@ -110,0 +111,1 @@\n+    assert(x <= SIZE_MAX - (4-1), \"overflow\");\n","filename":"src\/hotspot\/share\/adlc\/adlArena.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -314,2 +314,0 @@\n-\n-\n@@ -327,6 +325,0 @@\n-  \/\/ Stupid fast special case\n-  if( new_size <= old_size ) {  \/\/ Shrink in-place\n-    if( c_old+old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old+new_size;    \/\/ Adjust hwm\n-    return c_old;\n-  }\n@@ -334,1 +326,1 @@\n-  \/\/ make sure that new_size is legal\n+  \/\/ Make sure that new_size is legal\n@@ -337,5 +329,11 @@\n-  \/\/ See if we can resize in-place\n-  if( (c_old+old_size == _hwm) &&       \/\/ Adjusting recent thing\n-      (c_old+corrected_new_size <= _max) ) {      \/\/ Still fits where it sits\n-    _hwm = c_old+corrected_new_size;      \/\/ Adjust hwm\n-    return c_old;               \/\/ Return old pointer\n+  \/\/ Reallocating the latest allocation?\n+  if (c_old + old_size == _hwm) {\n+    assert(_chunk->bottom() <= c_old, \"invariant\");\n+\n+    \/\/ Reallocate in place if it fits. Also handles shrinking\n+    if (pointer_delta(_max, c_old, 1) >= corrected_new_size) {\n+      _hwm = c_old + corrected_new_size;\n+      return c_old;\n+    }\n+  } else if (new_size <= old_size) { \/\/ Shrink in place\n+    return c_old;\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}