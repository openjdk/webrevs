{"files":[{"patch":"@@ -133,0 +133,1 @@\n+  assert(items * x <= (size_t)1 << 31, \"unreasonable arena allocation size\");\n@@ -141,0 +142,8 @@\n+\/\/ Offsets a pointer with saturation to prevent overflow.\n+uintptr_t saturated_pointer_add(uintptr_t ptr, size_t size) {\n+  if (ptr > UINTPTR_MAX - size) {\n+    return UINTPTR_MAX;\n+  }\n+  return ptr + size;\n+}\n+\n@@ -145,3 +154,3 @@\n-  if( new_size <= old_size ) {  \/\/ Shrink in-place\n-    if( c_old+old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old+new_size;    \/\/ Adjust hwm\n+  if (new_size <= old_size) {     \/\/ Shrink in-place\n+    if (c_old + old_size == _hwm) \/\/ Attempt to free the excess bytes\n+      _hwm = c_old + new_size;    \/\/ Adjust hwm\n@@ -151,0 +160,1 @@\n+  uintptr_t new_hwm = saturated_pointer_add((uintptr_t)c_old, new_size);\n@@ -152,2 +162,3 @@\n-  if( (c_old+old_size == _hwm) &&            \/\/ Adjusting recent thing\n-      ((size_t)(_max-c_old) >= new_size) ) { \/\/ Still fits where it sits, safe from overflow\n+  if ((c_old + old_size == _hwm) && \/\/ Adjusting recent thing\n+      ((char *)new_hwm <= _max) &&  \/\/ Still fits where it sits\n+      (new_hwm != UINTPTR_MAX)) {   \/\/ Did not overflow\n@@ -155,2 +166,2 @@\n-    _hwm = c_old+new_size;      \/\/ Adjust hwm\n-    return c_old;               \/\/ Return old pointer\n+    _hwm = (char *)new_hwm; \/\/ Adjust hwm\n+    return c_old;           \/\/ Return old pointer\n","filename":"src\/hotspot\/share\/adlc\/adlArena.cpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+  assert(x <= (size_t)1 << 31, \"unreasonable arena allocation size\");\n","filename":"src\/hotspot\/share\/adlc\/adlArena.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -314,1 +314,7 @@\n-\n+\/\/ Offsets a pointer with saturation to prevent overflow.\n+uintptr_t saturated_pointer_add(uintptr_t ptr, size_t size) {\n+  if (ptr > UINTPTR_MAX - size) {\n+    return UINTPTR_MAX;\n+  }\n+  return ptr + size;\n+}\n@@ -328,3 +334,3 @@\n-  if( new_size <= old_size ) {  \/\/ Shrink in-place\n-    if( c_old+old_size == _hwm) \/\/ Attempt to free the excess bytes\n-      _hwm = c_old+new_size;    \/\/ Adjust hwm\n+  if (new_size <= old_size) {     \/\/ Shrink in-place\n+    if (c_old + old_size == _hwm) \/\/ Attempt to free the excess bytes\n+      _hwm = c_old + new_size;    \/\/ Adjust hwm\n@@ -336,1 +342,1 @@\n-\n+  uintptr_t new_hwm = saturated_pointer_add((uintptr_t)c_old, corrected_new_size);\n@@ -338,4 +344,5 @@\n-  if( (c_old+old_size == _hwm) &&                      \/\/ Adjusting recent thing\n-      ((size_t)(_max-c_old) >= corrected_new_size) ) { \/\/ Still fits where it sits, safe from overflow\n-    _hwm = c_old+corrected_new_size;      \/\/ Adjust hwm\n-    return c_old;               \/\/ Return old pointer\n+  if ((c_old + old_size == _hwm) && \/\/ Adjusting recent thing\n+      ((char *)new_hwm <= _max) &&  \/\/ Still fits where it sits\n+      (new_hwm != UINTPTR_MAX)) {   \/\/ Did not overflow\n+    _hwm = (char *)new_hwm;         \/\/ Adjust hwm\n+    return c_old;                   \/\/ Return old pointer\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+    assert(x <= 2*G, \"unreasonable arena allocation size\");\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}