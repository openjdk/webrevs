{"files":[{"patch":"@@ -67,0 +67,3 @@\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n@@ -104,2 +107,0 @@\n-import com.sun.tools.javac.jvm.Target;\n-import com.sun.tools.javac.util.Assert;\n@@ -107,1 +108,0 @@\n-import com.sun.tools.javac.util.Pair;\n@@ -342,1 +342,2 @@\n-    private ZipEntry createZipEntry(String name, long timestamp) {\n+    private ZipEntry createZipEntry(String name, long timeMillisSinceEpoch) {\n+        Instant time = Instant.ofEpochMilli(timeMillisSinceEpoch);\n@@ -344,2 +345,1 @@\n-\n-        ze.setTime(timestamp);\n+        ze.setTimeLocal(LocalDateTime.ofInstant(time, ZoneOffset.UTC));\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.lang.model.SourceVersion;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8327466\n+ * @summary verifies that the ct.sym file created by build.tools.symbolgenerator.CreateSymbols\n+ *          is reproducible\n+ * @library \/test\/lib\n+ * @modules java.compiler\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.jvm\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ *\n+ * @compile ${test.root}\/..\/..\/make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java\n+ *\n+ * @run junit CreateSymbolsReproducibleTest\n+ *\/\n+public class CreateSymbolsReproducibleTest {\n+\n+    \/\/ the fully qualified class name of the tool that we launch to generate the ct.sym file\n+    private static final String CREATE_SYMBOLS_CLASS_FQN = \"build.tools.symbolgenerator.CreateSymbols\";\n+    \/\/ a reproducible timestamp (in seconds) that we pass to \"CreateSymbols build-ctsym\" as input\n+    \/\/ when generating the ct.sym file\n+    private static final long SOURCE_EPOCH_DATE = Instant.now().getEpochSecond();\n+    \/\/ arbitrary set of packages that will be included in a include list file\n+    \/\/ that will be given as input to \"CreateSymbols build-description-incremental\" command\n+    \/\/ for generating the symbol text file\n+    private static final String INCLUDE_PKGS = \"\"\"\n+            +java\/io\/\n+            +java\/lang\/\n+            +java\/lang\/annotation\/\n+            +java\/lang\/instrument\/\n+            +java\/lang\/invoke\/\n+            \"\"\";\n+\n+    private static Path symTxtFile;\n+\n+    @BeforeAll\n+    static void beforeAll() throws Exception {\n+        symTxtFile = createSymTxtFile();\n+        System.out.println(\"created sym.txt file at \" + symTxtFile);\n+    }\n+\n+    \/*\n+     * Launches the \"CreateSymbols build-ctsym\" tool multiple times to generate ct.sym files.\n+     * Each time with the same inputs and the same timestamp. For each of these attempts, we use\n+     * a different timezone when launching the tool. The test verifies that irrespective of\n+     * what timezone gets used, the generated ct.sym files don't differ.\n+     *\/\n+    @Test\n+    void testDifferentTimezone() throws Exception {\n+        final Path destDir = Files.createTempDirectory(Path.of(\".\"), \"\").toAbsolutePath();\n+        final List<Path> ctSymFiles = new ArrayList<>();\n+        final List<Optional<String>> timezones = List.of(\n+                Optional.empty(), \/\/ no explicit timezone\n+                Optional.of(\"UTC\"),\n+                Optional.of(\"America\/Los_Angeles\"),\n+                Optional.of(\"Asia\/Tokyo\")\n+        );\n+        int num = 0;\n+        \/\/ create several ct.sym files by launching the tool with different timezones\n+        \/\/ but the same timestamp value as input\n+        for (final Optional<String> timezone : timezones) {\n+            num++;\n+            final String destCtSymFileName = \"ct-\" + num + \".sym\";\n+            final Path destCtSym = destDir.resolve(destCtSymFileName);\n+            System.out.println(\"using timezone \" + timezone + \" to create ct.sym file at \"\n+                    + destCtSym);\n+            createCtSym(destCtSym, symTxtFile, timezone);\n+            ctSymFiles.add(destCtSym);\n+        }\n+        \/\/ verify that each of these generated ct.sym files are exactly the same in content\n+        for (int i = 0; i < ctSymFiles.size() - 1; i++) {\n+            final Path ctSym1 = ctSymFiles.get(i);\n+            final Path ctSym2 = ctSymFiles.get(i + 1);\n+            final long mismatchOffset = Files.mismatch(ctSym1, ctSym2);\n+            if (mismatchOffset != -1) {\n+                throw new AssertionError(\"contents of files \" + ctSym1 + \" and \" + ctSym2\n+                        + \" unexpectedly differ\" + \" (at \" + mismatchOffset + \" offset)\");\n+            }\n+        }\n+    }\n+\n+    private static Path createSymTxtFile() throws Exception {\n+        final Path tmpDir = Files.createTempDirectory(Path.of(\".\"), \"\").toAbsolutePath();\n+        final Path destSymTxtFile = tmpDir.resolve(\"sym.txt\");\n+        Files.writeString(destSymTxtFile, \"\");\n+        final Path includeList = tmpDir.resolve(\"include.list\");\n+        Files.writeString(includeList, INCLUDE_PKGS);\n+        final String[] cmd = new String[]{\n+                \"--add-exports=jdk.compiler\/com.sun.tools.javac.api=ALL-UNNAMED\",\n+                \"--add-exports=jdk.compiler\/com.sun.tools.javac.util=ALL-UNNAMED\",\n+                CREATE_SYMBOLS_CLASS_FQN,\n+                \"build-description-incremental\",\n+                destSymTxtFile.toString(),\n+                includeList.toString()\n+        };\n+        final OutputAnalyzer oa = ProcessTools.executeTestJava(cmd);\n+        oa.shouldHaveExitValue(0);\n+        \/\/ verify the file was created\n+        if (Files.notExists(destSymTxtFile)) {\n+            oa.reportDiagnosticSummary();\n+            throw new AssertionError(CREATE_SYMBOLS_CLASS_FQN\n+                    + \" build-description-incremental failed to create \" + destSymTxtFile);\n+        }\n+        return destSymTxtFile;\n+    }\n+\n+    private static void createCtSym(final Path destCtSymFile, final Path symTxtFile,\n+                                    final Optional<String> timezone) throws Exception {\n+        final Path modulesDir = Path.of(\".\").resolve(\"modules\");\n+        Files.createDirectories(modulesDir);\n+        final Path modulesList = Path.of(\".\").resolve(\"modules-list\");\n+        \/\/ an empty file\n+        Files.writeString(modulesList, \"\");\n+\n+        final List<String> cmd = new ArrayList<>();\n+        timezone.ifPresent((tz) -> {\n+            \/\/ launch the tool with a specific timezone (if any)\n+            cmd.add(\"-Duser.timezone=\" + tz);\n+        });\n+        cmd.add(CREATE_SYMBOLS_CLASS_FQN);\n+        cmd.add(\"build-ctsym\"); \/\/ command to CreateSymbols tool\n+        cmd.add(\"non-existent-ct-desc-file\");\n+        cmd.add(symTxtFile.toString()); \/\/ a previously generated a sym.txt file\n+        cmd.add(destCtSymFile.toString()); \/\/ target ct.sym file to generate\n+        cmd.add(Long.toString(SOURCE_EPOCH_DATE)); \/\/ reproducible timestamp (in seconds)\n+        cmd.add(Integer.toString(SourceVersion.latest().ordinal()));\n+        cmd.add(\"does-not-matter-pre-release-tag\");\n+        cmd.add(modulesDir.toString());\n+        cmd.add(modulesList.toString());\n+        final OutputAnalyzer oa = ProcessTools.executeTestJava(cmd);\n+        oa.shouldHaveExitValue(0);\n+        \/\/ verify the ct.sym file was generated\n+        if (Files.notExists(destCtSymFile)) {\n+            oa.reportDiagnosticSummary();\n+            throw new AssertionError(\"ct.sym file missing at \" + destCtSymFile);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsReproducibleTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}