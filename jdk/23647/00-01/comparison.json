{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import java.util.List;\n@@ -74,41 +73,0 @@\n-    \/\/ Allocate the immutable lists as needed. Overwriting is not a concern.\n-    private static List<String> aliasEdDSA = null;\n-    private static List<String> aliasEd25519 = null;\n-    private static List<String> aliasXDH = null;\n-    private static List<String> aliasX25519 = null;\n-\n-    \/**\n-     * getAlias() adds extra algorithm names to the String if matched.  Used by\n-     * checkAlgorithm(), it returns additional names that may be on the\n-     * DisabledAlgorithmConstraints list.\n-     *\/\n-    public static List<String> getAliases(String algorithm) {\n-        return switch (algorithm) {\n-            case \"EdDSA\" -> {\n-                if (aliasEdDSA == null) {\n-                    aliasEdDSA = List.of(\"EdDSA\", \"Ed25519\", \"Ed448\");\n-                }\n-                yield aliasEdDSA;\n-            }\n-            case \"Ed25519\" -> {\n-                if (aliasEd25519 == null) {\n-                    aliasEd25519 = List.of(\"EdDSA\", \"Ed25519\");\n-                }\n-                yield aliasEd25519;\n-            }\n-            case \"XDH\" ->  {\n-                if (aliasXDH == null) {\n-                    aliasXDH = List.of(\"XDH\", \"X25519\", \"X448\");\n-                }\n-                yield aliasXDH;\n-            }\n-            case \"X25519\" ->  {\n-                if (aliasX25519 == null) {\n-                    aliasX25519 = List.of(\"XDH\", \"X25519\");\n-                }\n-                yield aliasX25519;\n-            }\n-            default -> List.of();\n-        };\n-    }\n-\n@@ -130,1 +88,1 @@\n-        \/\/ Check `algorithm` against disabled algorithms and their aliases\n+        \/\/ Check `algorithm` against disabled algorithms\n@@ -132,2 +90,1 @@\n-            if (algorithm.equalsIgnoreCase(a) ||\n-                getAliases(a).contains(algorithm)) {\n+            if (algorithm.equalsIgnoreCase(a)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AbstractAlgorithmConstraints.java","additions":2,"deletions":45,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-            default -> List.of(KeyUtil.getAlgorithm(key));\n+            default -> List.of(key.getAlgorithm(), KeyUtil.getAlgorithm(key));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import sun.security.pkcs.NamedPKCS8Key;\n+import sun.security.provider.ML_DSA;\n@@ -177,7 +179,7 @@\n-    \/*\n-     If the key is a sub-algorithm of a larger group of algorithms, this method\n-     will return that sub-algorithm.  For example, key.getAlgorithm() returns\n-     \"EdDSA\", but the underlying key maybe \"Ed448\".  For\n-     DisabledAlgorithmConstraints (DAC), this distinction is important.\n-     \"EdDSA\" means all curves for DAC, but when using it with\n-     KeyPairGenerator, EdDSA means Ed25519.\n+    \/**\n+     * If the key is a sub-algorithm of a larger group of algorithms, this\n+     * method will return that sub-algorithm.  For example, key.getAlgorithm()\n+     * returns \"EdDSA\", but the underlying key may be \"Ed448\".  For\n+     * DisabledAlgorithmConstraints (DAC), this distinction is important.\n+     * \"EdDSA\" means all curves for DAC, but when using it with\n+     * KeyPairGenerator, EdDSA means Ed25519.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -41,2 +41,6 @@\n- * @summary Check DisabledAlgorithmConstraints methods permit(Key) and\n- * permit(Set<CryptoPrimitive>, String, APS) with EdDSA & XDH keys\n+ * @summary Check DisabledAlgorithmConstraints using EdDSA & XDH against\n+ * permit(Set<CryptoPrimitive>, String, AP) and\n+ * permit(Set<CryptoPrimitive>, Key).  Results will differ based\n+ * on method used.  The first method only can compare the String with the\n+ * algorithms.  The second can check the algorithm and NamedParameterSpec\n+ * while results in more 'false' cases.\n@@ -61,1 +65,1 @@\n-                    new TestCase(\"EdDSA\", false),\n+                    new TestCase(\"EdDSA\", true),\n@@ -64,1 +68,5 @@\n-                    new TestCase(\"X448\", true));\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", false),\n+                    new TestCase(1,\"Ed25519\", false),\n+                    new TestCase(1,\"Ed448\", true),\n+                    new TestCase(1,\"X448\", true));\n@@ -70,1 +78,5 @@\n-                    new TestCase(\"X448\", true));\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", true),\n+                    new TestCase(1,\"Ed25519\", true),\n+                    new TestCase(1,\"Ed448\", false),\n+                    new TestCase(1,\"X448\", true));\n@@ -74,3 +86,7 @@\n-                    new TestCase(\"Ed25519\", false),\n-                    new TestCase(\"Ed448\", false),\n-                    new TestCase(\"X448\", true));\n+                    new TestCase(\"Ed25519\", true),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", false),\n+                    new TestCase(1,\"Ed25519\", false),\n+                    new TestCase(1,\"Ed448\", false),\n+                    new TestCase(1,\"X448\", true));\n@@ -79,1 +95,1 @@\n-                    new TestCase(\"XDH\", false),\n+                    new TestCase(\"XDH\", true),\n@@ -82,1 +98,5 @@\n-                    new TestCase(\"Ed448\", true));\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", false),\n+                    new TestCase(1, \"X25519\", false),\n+                    new TestCase(1, \"X448\", true),\n+                    new TestCase(1, \"Ed448\", true));\n@@ -88,1 +108,5 @@\n-                    new TestCase(\"Ed448\", true));\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", true),\n+                    new TestCase(1, \"X25519\", true),\n+                    new TestCase(1, \"X448\", false),\n+                    new TestCase(1, \"Ed448\", true));\n@@ -92,3 +116,7 @@\n-                    new TestCase(\"X25519\", false),\n-                    new TestCase(\"X448\", false),\n-                    new TestCase(\"Ed448\", true));\n+                    new TestCase(\"X25519\", true),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", false),\n+                    new TestCase(1, \"X25519\", false),\n+                    new TestCase(1, \"X448\", false),\n+                    new TestCase(1, \"Ed448\", true));\n@@ -103,1 +131,4 @@\n-        expected.stream().forEach(tc -> {\n+\n+        \/\/ Using only testType 0, this tests that permit(Set<>, String, null)\n+        \/\/ will check only the algorithm against the disabled list\n+        expected.stream().filter(n->n.testType == 0).forEach(tc -> {\n@@ -116,1 +147,5 @@\n-        expected.stream().forEach(tc -> {\n+\n+        \/\/ Using only testType 1, this tests permit(Set<>, Key) that will look\n+        \/\/ at both the key.getAlgorithm() and the key.getParams().getName()\n+        \/\/ against the disabled list\n+        expected.stream().filter(n->n.testType == 1).forEach(tc -> {\n","filename":"test\/jdk\/sun\/security\/util\/AlgorithmConstraints\/DisabledAlgorithmPermits.java","additions":51,"deletions":16,"binary":false,"changes":67,"status":"modified"}]}