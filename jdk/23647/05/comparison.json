{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import sun.security.util.KeyUtil;\n@@ -209,1 +210,2 @@\n-                dac.permits(trustedPubKey.getAlgorithm(), cp, true);\n+                dac.permits(KeyUtil.getAlgorithm(trustedPubKey),\n+                    cp, true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.security.interfaces.XECKey;\n@@ -41,1 +40,0 @@\n-import java.security.spec.NamedParameterSpec;\n@@ -48,1 +46,0 @@\n-import java.util.Arrays;\n@@ -257,1 +254,1 @@\n-                for (String curve : getNamedCurveFromKey(key)) {\n+                for (String curve : getNamedParametersFromKey(key)) {\n@@ -270,11 +267,17 @@\n-    private static List<String> getNamedCurveFromKey(Key key) {\n-        if (key instanceof ECKey) {\n-            NamedCurve nc = CurveDB.lookup(((ECKey)key).getParams());\n-            return (nc == null ? List.of()\n-                               : Arrays.asList(nc.getNameAndAliases()));\n-        } else if (key instanceof XECKey) {\n-            return List.of(\n-                ((NamedParameterSpec)((XECKey)key).getParams()).getName());\n-        } else {\n-            return List.of();\n-        }\n+    private static List<String> getNamedParametersFromKey(Key key) {\n+        return switch (key) {\n+            case ECKey ecKey -> {\n+                NamedCurve nc = CurveDB.lookup(ecKey.getParams());\n+                if (nc == null) {\n+                    yield List.of();\n+                }\n+                yield List.of(nc.getNameAndAliases());\n+            }\n+            default -> {\n+                String n = KeyUtil.getAlgorithm(key);\n+                if (n.equalsIgnoreCase(key.getAlgorithm())) {\n+                    yield List.of(n);\n+                }\n+                yield List.of(key.getAlgorithm(), n);\n+            }\n+        };\n@@ -304,1 +307,1 @@\n-        if (!permits(primitives, key.getAlgorithm(), null)) {\n+        if (!permits(primitives, KeyUtil.getAlgorithm(key), null)) {\n@@ -309,1 +312,1 @@\n-        for (String curve : getNamedCurveFromKey(key)) {\n+        for (String curve : getNamedParametersFromKey(key)) {\n@@ -463,1 +466,1 @@\n-            List<Constraint> list = getConstraints(key.getAlgorithm());\n+            List<Constraint> list = getConstraints(KeyUtil.getAlgorithm(key));\n@@ -517,1 +520,1 @@\n-                    algorithms.add(key.getAlgorithm());\n+                    algorithms.add(KeyUtil.getAlgorithm(key));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -177,0 +177,16 @@\n+    \/**\n+     * If the key is a sub-algorithm of a larger group of algorithms, this\n+     * method will return that sub-algorithm.  For example, key.getAlgorithm()\n+     * returns \"EdDSA\", but the underlying key may be \"Ed448\".  For\n+     * DisabledAlgorithmConstraints (DAC), this distinction is important.\n+     * \"EdDSA\" means all curves for DAC, but when using it with\n+     * KeyPairGenerator, \"EdDSA\" means \"Ed25519\".\n+     *\/\n+    public static String getAlgorithm(Key key) {\n+        if (key instanceof AsymmetricKey ak &&\n+            ak.getParams() instanceof NamedParameterSpec nps) {\n+            return nps.getName();\n+        }\n+        return key.getAlgorithm();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import sun.security.util.DisabledAlgorithmConstraints;\n+\n+import java.security.CryptoPrimitive;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.Security;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\/*\n+ * @test\n+ * @bug 8346129\n+ * @modules java.base\/sun.security.util\n+ * @summary Check DisabledAlgorithmConstraints using EdDSA & XDH against\n+ * permit(Set<CryptoPrimitive>, String, AP) and\n+ * permit(Set<CryptoPrimitive>, Key).  Results will differ based\n+ * on method used.  The first method only can compare the String with the\n+ * algorithms.  The second can check the algorithm and NamedParameterSpec\n+ * while results in more 'false' cases.\n+ *\n+ * @run main\/othervm DisabledAlgorithmPermits Ed25519\n+ * @run main\/othervm DisabledAlgorithmPermits Ed448\n+ * @run main\/othervm DisabledAlgorithmPermits EdDSA\n+ * @run main\/othervm DisabledAlgorithmPermits X25519\n+ * @run main\/othervm DisabledAlgorithmPermits X448\n+ * @run main\/othervm DisabledAlgorithmPermits XDH\n+ *\/\n+\n+public class DisabledAlgorithmPermits {\n+    public static void main(String[] args) throws Exception {\n+        String algorithm = args[0];\n+        Security.setProperty(\"x\", algorithm);\n+\n+        \/\/ Expected table are the expected results from the test\n+        List<TestCase> expected = switch (algorithm) {\n+            case \"Ed25519\" ->\n+                Arrays.asList(\n+                    new TestCase(\"EdDSA\", true),\n+                    new TestCase(\"Ed25519\", false),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", false),\n+                    new TestCase(1,\"Ed25519\", false),\n+                    new TestCase(1,\"Ed448\", true),\n+                    new TestCase(1,\"X448\", true));\n+            case \"Ed448\" ->\n+                Arrays.asList(\n+                    new TestCase(\"EdDSA\", true),\n+                    new TestCase(\"Ed25519\", true),\n+                    new TestCase(\"Ed448\", false),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", true),\n+                    new TestCase(1,\"Ed25519\", true),\n+                    new TestCase(1,\"Ed448\", false),\n+                    new TestCase(1,\"X448\", true));\n+            case \"EdDSA\" ->\n+                Arrays.asList(\n+                    new TestCase(\"EdDSA\", false),\n+                    new TestCase(\"Ed25519\", true),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(1,\"EdDSA\", false),\n+                    new TestCase(1,\"Ed25519\", false),\n+                    new TestCase(1,\"Ed448\", false),\n+                    new TestCase(1,\"X448\", true));\n+            case \"X25519\" ->\n+                Arrays.asList(\n+                    new TestCase(\"XDH\", true),\n+                    new TestCase(\"X25519\", false),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", false),\n+                    new TestCase(1, \"X25519\", false),\n+                    new TestCase(1, \"X448\", true),\n+                    new TestCase(1, \"Ed448\", true));\n+            case \"X448\" ->\n+                Arrays.asList(\n+                    new TestCase(\"XDH\", true),\n+                    new TestCase(\"X25519\", true),\n+                    new TestCase(\"X448\", false),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", true),\n+                    new TestCase(1, \"X25519\", true),\n+                    new TestCase(1, \"X448\", false),\n+                    new TestCase(1, \"Ed448\", true));\n+            case \"XDH\" ->\n+                Arrays.asList(\n+                    new TestCase(\"XDH\", false),\n+                    new TestCase(\"X25519\", true),\n+                    new TestCase(\"X448\", true),\n+                    new TestCase(\"Ed448\", true),\n+                    new TestCase(1, \"XDH\", false),\n+                    new TestCase(1, \"X25519\", false),\n+                    new TestCase(1, \"X448\", false),\n+                    new TestCase(1, \"Ed448\", true));\n+            default -> null;\n+        };\n+\n+        Objects.requireNonNull(expected, \"algorithm being tested \" +\n+            algorithm + \" not in expected table\");\n+        System.out.println(\"---\");\n+        var dac = new DisabledAlgorithmConstraints(\"x\");\n+        System.out.println(\"disabled algorithms = \" + Security.getProperty(\"x\"));\n+\n+        \/\/ Using only testType 0, this tests that permit(Set<>, String, null)\n+        \/\/ will check only the algorithm against the disabled list\n+        expected.stream().filter(n->n.testType == 0).forEach(tc -> {\n+            boolean r = dac.permits(Set.of(CryptoPrimitive.SIGNATURE),\n+                    tc.testAlgo, null);\n+            System.out.print(\"\\tpermits(Set.of(CryptoPrimitive.SIGNATURE), \\\"\" +\n+                tc.testAlgo + \"\\\", null): \" + r + \" : \" );\n+            if (r != tc.expected) {\n+                System.out.println(\"failed.\");\n+                throw new AssertionError(\"failed.  Expected \" +\n+                    tc.expected);\n+            }\n+            System.out.println(\"pass\");\n+        });\n+\n+        \/\/ Using only testType 1, this tests permit(Set<>, Key) that will look\n+        \/\/ at both the key.getAlgorithm() and the key.getParams().getName()\n+        \/\/ against the disabled list\n+        expected.stream().filter(n->n.testType == 1).forEach(tc -> {\n+            PrivateKey k;\n+            try {\n+                k = KeyPairGenerator.getInstance(tc.testAlgo).generateKeyPair().\n+                    getPrivate();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+            boolean r = dac.permits(Set.of(CryptoPrimitive.SIGNATURE), k);\n+            System.out.print(\"\\tpermits(Set.of(CryptoPrimitive.SIGNATURE), \" +\n+                tc.testAlgo + \" privkey): \" + r + \" : \" );\n+            if (r != tc.expected) {\n+                System.out.println(\"failed.\");\n+                throw new AssertionError(\"failed.  Expected \" +\n+                    tc.expected);\n+            }\n+            System.out.println(\"pass\");\n+        });\n+        System.out.println(\"---\");\n+    }\n+\n+    record TestCase(int testType, String testAlgo, boolean expected) {\n+        TestCase(String testAlgo, boolean expected) {\n+            this( 0, testAlgo, expected);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/util\/AlgorithmConstraints\/DisabledAlgorithmPermits.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}