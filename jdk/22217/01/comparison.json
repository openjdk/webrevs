{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -37,3 +39,19 @@\n- * is stored in the {@code BootstrapMethods} attribute, but is modeled by\n- * the {@link ConstantPool}, since the bootstrap method table is logically\n- * part of the constant pool.\n+ * is stored in the {@link BootstrapMethodsAttribute BootstrapMethods}\n+ * attribute, but is modeled by the {@link ConstantPool}, since the bootstrap\n+ * method table is logically part of the constant pool.\n+ * <p>\n+ * Conceptually, a bootstrap method entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=1 substring=\"BootstrapMethodEntry\" target=\"ConstantPoolBuilder#bsmEntry(DirectMethodHandleDesc, List)\"\n+ * \/\/ @link substring=\"DirectMethodHandleDesc\" target=\"#bootstrapMethod\" :\n+ * BootstrapMethodEntry(DirectMethodHandleDesc, List<ConstantDesc>) \/\/ @link substring=\"List<ConstantDesc>\" target=\"#arguments()\"\n+ * \/\/ @end region=1\n+ * }\n+ * <p>\n+ * Physically, a bootstrap method entry is a record:\n+ * {@snippet lang=text :\n+ * \/\/ @link region=1 substring=\"BootstrapMethodEntry\" target=\"ConstantPoolBuilder#bsmEntry(MethodHandleEntry, List)\"\n+ * \/\/ @link substring=\"MethodHandleEntry\" target=\"#bootstrapMethod\" :\n+ * BootstrapMethodEntry(MethodHandleEntry, List<LoadableConstantEntry>) \/\/ @link substring=\"List<LoadableConstantEntry>\" target=\"#arguments()\"\n+ * \/\/ @end region=1\n+ * }\n@@ -41,0 +59,1 @@\n+ * @see ConstantPoolBuilder#bsmEntry ConstantPoolBuilder::bsmEntry\n@@ -48,0 +67,7 @@\n+     *\n+     * @apiNote\n+     * Given a {@link ConstantPoolBuilder} {@code builder} and a {@code\n+     * BootstrapMethodEntry} {@code entry}, use {@link\n+     * ConstantPoolBuilder#canWriteDirect\n+     * builder.canWriteDirect(entry.constantPool())} instead of object equality\n+     * of the constant pool to determine if an entry is compatible.\n@@ -52,1 +78,2 @@\n-     * {@return the index into the bootstrap method table corresponding to this entry}\n+     * {@return the index into the bootstrap method table corresponding to this\n+     * entry}\n@@ -58,0 +85,4 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for the bootstrap method is available through\n+     * {@link MethodHandleEntry#asSymbol() bootstrapMethod().asSymbol()}.\n@@ -63,0 +94,5 @@\n+     *\n+     * @apiNote\n+     * A symbolic descriptor for each entry in the returned list is available\n+     * via {@link LoadableConstantEntry#constantValue\n+     * LoadableConstantEntry::constantValue}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BootstrapMethodEntry.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -143,6 +143,7 @@\n-     * transforming a classfile.  Reusing the constant pool enables significant\n-     * optimizations in processing time and minimizes differences between the\n-     * original and transformed classfile, but may result in a bigger classfile\n-     * when a classfile is significantly transformed.\n-     * Default is {@code SHARED_POOL} to preserve the original constant\n-     * pool.\n+     * transforming a {@code class} file.  Reusing the constant pool enables\n+     * significant optimizations in processing time and minimizes differences\n+     * between the original and transformed {@code class} files, but may result\n+     * in a bigger transformed {@code class} file when many elements of the\n+     * original {@code class} file are dropped and many original constant\n+     * pool entries become unused.  Default is {@link #SHARED_POOL} to preserve\n+     * the original constant pool.\n@@ -150,0 +151,3 @@\n+     * @see ConstantPoolBuilder\n+     * @see #build(ClassEntry, ConstantPoolBuilder, Consumer)\n+     * @see #transformClass(ClassModel, ClassTransform)\n@@ -154,1 +158,17 @@\n-        \/** Preserves the original constant pool when transforming classfile *\/\n+        \/**\n+         * Preserves the original constant pool when transforming the {@code\n+         * class} file.\n+         * <p>\n+         * These two transformations below are equivalent:\n+         * {@snippet lang=java :\n+         * ClassModel originalClass = null; \/\/ @replace substring=null; replacement=...\n+         * ClassDesc resultClassName = null; \/\/ @replace substring=null; replacement=...\n+         * ClassTransform classTransform = null; \/\/ @replace substring=null; replacement=...\n+         * var resultOne = ClassFile.of(ConstantPoolSharingOption.SHARED_POOL)\n+         *         .transformClass(originalClass, resultClassName, classTransform);\n+         * var resultTwo = ClassFile.of().build(resultClassName, ConstantPoolBuilder.of(originalClass),\n+         *         clb -> clb.transform(originalClass, classTransform));\n+         * }\n+         *\n+         * @see ConstantPoolBuilder#of(ClassModel) ConstantPoolBuilder::of(ClassModel)\n+         *\/\n@@ -157,1 +177,16 @@\n-        \/** Creates a new constant pool when transforming classfile *\/\n+        \/**\n+         * Creates a new constant pool when transforming the {@code class} file.\n+         * <p>\n+         * These two transformations below are equivalent:\n+         * {@snippet lang=java :\n+         * ClassModel originalClass = null; \/\/ @replace substring=null; replacement=...\n+         * ClassDesc resultClassName = null; \/\/ @replace substring=null; replacement=...\n+         * ClassTransform classTransform = null; \/\/ @replace substring=null; replacement=...\n+         * var resultOne = ClassFile.of(ConstantPoolSharingOption.NEW_POOL)\n+         *         .transformClass(originalClass, resultClassName, classTransform);\n+         * var resultTwo = ClassFile.of().build(resultClassName, ConstantPoolBuilder.of(),\n+         *         clb -> clb.transform(originalClass, classTransform));\n+         * }\n+         *\n+         * @see ConstantPoolBuilder#of() ConstantPoolBuilder::of()\n+         *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":43,"deletions":8,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -31,4 +31,3 @@\n- * A constant pool entry that may be used by annotation constant values,\n- * which includes the four kinds of primitive constants and UTF8 constants.\n- * These entries are also the only entries that do not refer to other\n- * constant pool entries.\n+ * Marker interface for constant pool entries that can represent constant values\n+ * associated with elements of annotations.  They are also the only entries that\n+ * do not refer to other constant pool entries.\n@@ -43,0 +42,1 @@\n+ * @jvms 4.7.16.1 The {@code element_value} structure\n@@ -50,3 +50,3 @@\n-     * {@return the constant value}  The constant value will be an {@link Integer},\n-     * {@link Long}, {@link Float}, {@link Double} for the primitive constants,\n-     * or {@link String} for UTF8 constants.\n+     * {@return the constant value}  The constant value will be an {@link\n+     * Integer}, {@link Long}, {@link Float}, {@link Double} for the primitive\n+     * constants, or {@link String} for UTF8 constants.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,3 +33,24 @@\n- * Models a {@code CONSTANT_Class_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.1 The CONSTANT_Class_info Structure\n+ * Models a {@code CONSTANT_Class_info} structure, representing a reference\n+ * type, in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code ClassEntry} is modeled by a {@link ClassDesc} that is not\n+ * primitive.  Conversions are through {@link ConstantPoolBuilder#classEntry(\n+ * ClassDesc)} and {@link #asSymbol()}.\n+ * <p>\n+ * A {@code ClassEntry} is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ClassEntry\" target=\"ConstantPoolBuilder#classEntry(Utf8Entry)\" :\n+ * ClassEntry(Utf8Entry name) \/\/ @link substring=\"name\" target=\"#name\"\n+ * }\n+ * where {@code name} represents:\n+ * <ul>\n+ * <li>The internal form of a binary name (JVMS {@jvms 4.2.1}), if and only if\n+ * this {@code ClassEntry} represents a class or interface, such as {@code\n+ * java\/lang\/String} for the {@link String} class.\n+ * <li>A field descriptor string (JVMS {@jvms 4.3.2}) representing an array type,\n+ * if and only if this {@code ClassEntry} represents an array type, such as\n+ * {@code [I} for the {@code int[]} type, or {@code [Ljava\/lang\/String;} for the\n+ * {@code String[]} type.\n+ * <\/ul>\n+ * A field descriptor string for an array type can be distinguished by its\n+ * leading {@code '['} character.\n@@ -37,0 +58,9 @@\n+ * @apiNote\n+ * The internal form of a binary name, where all occurrences of {@code .} in the\n+ * name are replaced by {@code \/}, is informally known as an <dfn>{@index\n+ * \"internal name\"}<\/dfn>.  This concept also applies to package names in\n+ * addition to class and interface names.\n+ *\n+ * @see ConstantPoolBuilder#classEntry ConstantPoolBuilder::classEntry\n+ * @see ClassDesc\n+ * @jvms 4.4.1 The {@code CONSTANT_Class_info} Structure\n@@ -43,0 +73,5 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * This is equivalent to {@link #asSymbol() asSymbol()}.\n+     *\/\n@@ -49,1 +84,8 @@\n-     * {@return the UTF8 constant pool entry for the class name}\n+     * {@return the {@code Utf8Entry} referred by this structure}  If the\n+     * value of the UTF8 starts with a {@code [}, this represents an array type\n+     * and the value is a descriptor string; otherwise, this represents a class\n+     * or interface and the value is the {@linkplain ##internalname internal\n+     * form} of a binary name.\n+     *\n+     * @see ConstantPoolBuilder#classEntry(Utf8Entry)\n+     *      ConstantPoolBuilder::classEntry(Utf8Entry)\n@@ -54,1 +96,3 @@\n-     * {@return the class name, as an internal binary name}\n+     * {@return the represented reference type, as the {@linkplain\n+     * ##internalname internal form} of a binary name or an array descriptor\n+     * string}  This is a shortcut for {@link #name() name().stringValue()}.\n@@ -59,1 +103,6 @@\n-     * {@return the class name, as a symbolic descriptor}\n+     * {@return the represented reference type, as a symbolic descriptor}  The\n+     * returned descriptor is never {@linkplain ClassDesc#isPrimitive()\n+     * primitive}.\n+     *\n+     * @see ConstantPoolBuilder#classEntry(ClassDesc)\n+     *      ConstantPoolBuilder::classEntry(ClassDesc)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ClassEntry.java","additions":55,"deletions":6,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -36,3 +36,18 @@\n- * Models a {@code CONSTANT_Dynamic_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n+ * Models a {@code CONSTANT_Dynamic_info} structure, representing a <dfn>{@index\n+ * \"dynamically-computed constant\"}<\/dfn>, in the constant pool of a {@code\n+ * class} file.\n+ * <p>\n+ * The use of a {@code ConstantDynamicEntry} is modeled by a {@link\n+ * DynamicConstantDesc}.  Conversions are through {@link #asSymbol()} and {@link\n+ * ConstantPoolBuilder#constantDynamicEntry(DynamicConstantDesc)}.\n+ * <p>\n+ * A dynamic constant entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ConstantDynamicEntry\" target=\"ConstantPoolBuilder#constantDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\" :\n+ * ConstantDynamicEntry(\n+ *     BootstrapMethodEntry bootstrap, \/\/ @link substring=\"bootstrap\" target=\"#bootstrap()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n+ * where {@link #type() nameAndType.type()} is a {@linkplain #typeSymbol()\n+ * field descriptor} string.\n@@ -40,0 +55,11 @@\n+ * @apiNote\n+ * A dynamically-computed constant is frequently called a <dfn>{@index \"dynamic\n+ * constant\"}<\/dfn>, or a <dfn>{@index \"condy\"}<\/dfn>, from the abbreviation of\n+ * \"constant dynamic\".\n+ *\n+ * @see ConstantPoolBuilder#constantDynamicEntry\n+ *      ConstantPoolBuilder::constantDynamicEntry\n+ * @see DynamicConstantDesc\n+ * @see java.lang.invoke##condycon Dynamically-computed constants\n+ * @jvms 4.4.10 The {@code CONSTANT_Dynamic_info} and {@code\n+ *              CONSTANT_InvokeDynamic_info} Structures\n@@ -47,1 +73,2 @@\n-     * {@return a symbolic descriptor for the dynamic constant's type}\n+     * {@return a symbolic descriptor for the {@linkplain #type() field type} of\n+     * this dynamically-computed constant}\n@@ -53,0 +80,5 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * This is equivalent to {@link #asSymbol() asSymbol()}.\n+     *\/\n@@ -59,1 +91,4 @@\n-     * {@return the symbolic descriptor for the {@code invokedynamic} constant}\n+     * {@return a symbolic descriptor for this dynamically-computed constant}\n+     *\n+     * @see ConstantPoolBuilder#constantDynamicEntry(DynamicConstantDesc)\n+     *      ConstantPoolBuilder::constantDynamicEntry(DynamicConstantDesc)\n@@ -71,1 +106,6 @@\n-     * {@return the type of the constant}\n+     * {@inheritDoc}\n+     *\n+     * @apiNote\n+     * The data type of a dynamically-computed constant depends on its\n+     * {@linkplain #type() descriptor}, while the data type of all other\n+     * constants can be determined by their {@linkplain #tag() constant type}.\n@@ -75,1 +115,1 @@\n-        return TypeKind.fromDescriptor(type().stringValue());\n+        return TypeKind.fromDescriptor(type());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantDynamicEntry.java","additions":47,"deletions":7,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n@@ -34,3 +35,8 @@\n- * Provides read access to the constant pool and bootstrap method table of a\n- * classfile.\n- * @jvms 4.4 The Constant Pool\n+ * Provides read access to the constant pool and the bootstrap method table of a\n+ * {@code class} file.\n+ *\n+ * <h2 id=\"index\">Index in the Constant Pool<\/h2>\n+ * The constant pool entries are accessed by index.  A valid index is in the\n+ * range of {@link #size() [1, size())}.  It is {@linkplain PoolEntry#width()\n+ * unusable} if a {@link LongEntry} or {@link DoubleEntry} is at its previous\n+ * index.\n@@ -38,0 +44,2 @@\n+ * @see BootstrapMethodsAttribute\n+ * @jvms 4.4 The Constant Pool\n@@ -49,1 +57,1 @@\n-     * int, Class) entryByIndex(int, Class)}.\n+     * int, Class)}.\n@@ -58,1 +66,5 @@\n-     * {@return the size of the constant pool}\n+     * {@return the exclusive upper bound of the valid indices of this constant\n+     * pool}  The actual number of entries is lower because {@code 0}, {@code\n+     * size()} are not valid, and a valid index may be unusable.\n+     *\n+     * @see ##index Index in the Constant Pool\n@@ -69,1 +81,2 @@\n-     *         constant pool, or the entry is not of the given type\n+     *         constant pool or considered unusable, or the entry is not\n+     *         of the given type\n@@ -75,0 +88,4 @@\n+     *\n+     * @apiNote\n+     * This skips any unusable index and is less error-prone than iterating by\n+     * raw index.  See <em>{@linkplain ##index Index in the Constant Pool}<\/em>.\n@@ -96,1 +113,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPool.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileBuilder;\n@@ -30,0 +31,3 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -31,0 +35,1 @@\n+import java.lang.invoke.MethodHandleInfo;\n@@ -32,0 +37,1 @@\n+import java.util.function.Consumer;\n@@ -42,3 +48,12 @@\n- * Builder for the constant pool of a classfile.  Provides read and write access\n- * to the constant pool that is being built.  Writing is append-only and idempotent\n- * (entry-bearing methods will return an existing entry if there is one).\n+ * Builder for the constant pool of a {@code class} file.  Provides read and\n+ * write access to the constant pool that is {@linkplain ClassFileBuilder#constantPool()\n+ * being built}.  Writing is append-only (the index of new entries monotonically\n+ * increase) and idempotent (entry-bearing methods will return an existing entry\n+ * if there is a suitable one).\n+ * <p>\n+ * For {@code class} file building, an overload of {@link ClassFile#build(\n+ * ClassEntry, ConstantPoolBuilder, Consumer) ClassFile::build} takes a\n+ * {@code ConstantPoolBuilder}.  For {@code class} file transformations via\n+ * {@link ClassFile#transformClass ClassFile::transformClass}, the {@link\n+ * ClassFile.ConstantPoolSharingOption} controls how the constant pool builder\n+ * of the resulting {@code class} is created.\n@@ -46,3 +61,24 @@\n- * A {@linkplain ConstantPoolBuilder} is associated with a {@link ClassBuilder}.\n- * The {@linkplain ConstantPoolBuilder} also provides access to some of the\n- * state of the {@linkplain ClassBuilder}, such as classfile processing options.\n+ * <h2 id=\"alien\">Alien Constant Pool Entries<\/h2>\n+ * In {@code class} file building and constant pool building, some constant pool\n+ * entries supplied may be {@linkplain #canWriteDirect(ConstantPool) alien}\n+ * to this constant pool builder of the active class file builder.  For example,\n+ * {@link #classEntry(Utf8Entry) classEntry(Utf8Entry)} may be called with an\n+ * alien UTF8 entry.  Alien entries will be converted to a pool entry in\n+ * this constant pool builder, reusing equivalent entries or adding new entries\n+ * if there is none.  As a result, all pool entries returned by entry-bearing\n+ * methods in this constant pool builder belong to this constant pool.\n+ * <p>\n+ * Some {@link ClassFileBuilder} methods may have their outputs adjusted if they\n+ * receive pool entries alien to {@linkplain ClassFileBuilder#constantPool\n+ * their constant pools}.  For example, if an {@link ConstantInstruction#ofLoad\n+ * ldc_w} instruction with an alien entry is written to a {@link CodeBuilder},\n+ * the {@code CodeBuilder} may emit a functionally equivalent {@code ldc}\n+ * instruction instead, if the converted entry can be encoded in such an\n+ * instruction.\n+ * <p>\n+ * To avoid the conversion of alien constant pool entries, such as for the\n+ * accuracy of the generated {@code class} file, users can always supply\n+ * constant pool entries obtained by calling the constant pool builder\n+ * entry-bearing methods of the constant pools associated with the {@code\n+ * ClassFileBuilder}.  Otherwise, the conversions have no impact on the\n+ * behaviors of the generated {@code class} files.\n@@ -50,0 +86,1 @@\n+ * @see ClassFileBuilder#constantPool()\n@@ -58,2 +95,4 @@\n-     * be pre-populated with the contents of the constant pool associated with\n-     * the class reader.\n+     * be pre-populated with the contents of the constant pool {@linkplain\n+     * ClassModel#constantPool() associated with} the given class model.  The\n+     * index of new entries will start from the {@link ConstantPool#size()\n+     * size()} of the source pool.\n@@ -62,0 +101,2 @@\n+     * @see ClassFile#build(ClassEntry, ConstantPoolBuilder, Consumer)\n+     * @see ClassFile.ConstantPoolSharingOption#SHARED_POOL\n@@ -69,1 +110,3 @@\n-     * will be empty.\n+     * will be empty.  The index of new entries will start from {@code 1}.\n+     *\n+     * @see ClassFile.ConstantPoolSharingOption#NEW_POOL\n@@ -76,3 +119,8 @@\n-     * {@return whether the provided constant pool is index-compatible with this\n-     * one}  This may be because they are the same constant pool, or because this\n-     * constant pool was copied from the other.\n+     * {@return {@code true} if the index of any entry in the given constant\n+     * pool refers to the same entry in this builder}  This may be because they\n+     * are the same builder, or because this builder was {@linkplain\n+     * #of(ClassModel) pre-populated} from the given constant pool.\n+     * <p>\n+     * If the constant pool of an entry is not directly writable to this pool,\n+     * it is alien to this pool, and a {@link ClassFileBuilder} associated\n+     * with this constant pool will convert that alien constant pool entry.\n@@ -80,1 +128,3 @@\n-     * @param constantPool the other constant pool\n+     * @param constantPool the given constant pool\n+     * @see ClassFileBuilder#constantPool() ClassFileBuilder::constantPool\n+     * @see ##alien Alien Constant Pool Entries\n@@ -85,3 +135,1 @@\n-     * {@return A {@link Utf8Entry} describing the provided {@linkplain String}}\n-     * If a UTF8 entry in the pool already describes this string, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link Utf8Entry} describing the provided {@link String}}\n@@ -90,0 +138,1 @@\n+     * @see Utf8Entry#stringValue() Utf8Entry::stringValue\n@@ -94,4 +143,8 @@\n-     * {@return A {@link Utf8Entry} describing the field descriptor of the provided\n-     * {@linkplain ClassDesc}}\n-     * If a UTF8 entry in the pool already describes this field descriptor, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link Utf8Entry} describing the {@linkplain\n+     * ClassDesc#descriptorString() field descriptor string} of the provided\n+     * {@link ClassDesc}}\n+     *\n+     * @apiNote\n+     * The resulting {@code Utf8Entry} is usually not {@linkplain\n+     * #classEntry(Utf8Entry) referable by} a {@link ClassEntry}, which uses\n+     * internal form of binary names.\n@@ -106,4 +159,3 @@\n-     * {@return A {@link Utf8Entry} describing the method descriptor of the provided\n-     * {@linkplain MethodTypeDesc}}\n-     * If a UTF8 entry in the pool already describes this field descriptor, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link Utf8Entry} describing the {@linkplain\n+     * MethodTypeDesc#descriptorString() method descriptor string} of the\n+     * provided {@link MethodTypeDesc}}\n@@ -118,5 +170,4 @@\n-     * {@return A {@link ClassEntry} describing the class whose internal name\n-     * is encoded in the provided {@linkplain Utf8Entry}}\n-     * If a Class entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ClassEntry} referring to the provided {@link\n+     * Utf8Entry}}  The {@code Utf8Entry} describes the internal form\n+     * of the binary name of a class or interface or the field descriptor\n+     * string of an array type.\n@@ -124,1 +175,2 @@\n-     * @param ne the constant pool entry describing the internal name of the class\n+     * @param ne the {@code Utf8Entry}\n+     * @see ClassEntry#name() ClassEntry::name\n@@ -129,5 +181,2 @@\n-     * {@return A {@link ClassEntry} describing the class described by\n-     * provided {@linkplain ClassDesc}}\n-     * If a Class entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ClassEntry} describing the same reference type\n+     * as the provided {@link ClassDesc}}\n@@ -135,2 +184,4 @@\n-     * @param classDesc the symbolic descriptor for the class\n-     * @throws IllegalArgumentException if {@code classDesc} represents a primitive type\n+     * @param classDesc the symbolic descriptor for the reference type\n+     * @throws IllegalArgumentException if {@code classDesc} represents a\n+     *         primitive type\n+     * @see ClassEntry#asSymbol() ClassEntry::asSymbol\n@@ -148,5 +199,3 @@\n-     * {@return A {@link PackageEntry} describing the class whose internal name\n-     * is encoded in the provided {@linkplain Utf8Entry}}\n-     * If a Package entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link PackageEntry} referring to the provided {@link\n+     * Utf8Entry}}  The {@code Utf8Entry} describes the internal form\n+     * of the name of a package.\n@@ -154,2 +203,2 @@\n-     * @param nameEntry the constant pool entry describing the internal name of\n-     *                  the package\n+     * @param nameEntry the {@code Utf8Entry}\n+     * @see PackageEntry#name() PackageEntry::name\n@@ -160,5 +209,2 @@\n-     * {@return A {@link PackageEntry} describing the class described by\n-     * provided {@linkplain PackageDesc}}\n-     * If a Package entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link PackageEntry} describing the same package as the\n+     * provided {@link PackageDesc}}\n@@ -166,1 +212,2 @@\n-     * @param packageDesc the symbolic descriptor for the class\n+     * @param packageDesc the symbolic descriptor for the package\n+     * @see PackageEntry#asSymbol() PackageEntry::asSymbol\n@@ -173,5 +220,2 @@\n-     * {@return A {@link ModuleEntry} describing the module whose name\n-     * is encoded in the provided {@linkplain Utf8Entry}}\n-     * If a module entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ModuleEntry} referring to the provided {@link\n+     * Utf8Entry}}  The {@code Utf8Entry} describes the module name.\n@@ -180,0 +224,1 @@\n+     * @see ModuleEntry#name() ModuleEntry::name\n@@ -184,5 +229,2 @@\n-     * {@return A {@link ModuleEntry} describing the module described by\n-     * provided {@linkplain ModuleDesc}}\n-     * If a module entry in the pool already describes this class,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ModuleEntry} describing the same module as the provided\n+     * {@link ModuleDesc}}\n@@ -190,1 +232,2 @@\n-     * @param moduleDesc the symbolic descriptor for the class\n+     * @param moduleDesc the symbolic descriptor for the module\n+     * @see ModuleEntry#asSymbol() ModuleEntry::asSymbol\n@@ -197,4 +240,5 @@\n-     * {@return A {@link NameAndTypeEntry} describing the provided name and type}\n-     * If a NameAndType entry in the pool already describes this name and type,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link NameAndTypeEntry} referring to the provided name and\n+     * type {@link Utf8Entry}}  The name {@code Utf8Entry} describes an\n+     * unqualified name or the special name {@value ConstantDescs#INIT_NAME},\n+     * and the type {@code Utf8Entry} describes a field or method descriptor\n+     * string.\n@@ -202,2 +246,4 @@\n-     * @param nameEntry the member name\n-     * @param typeEntry the member field or method descriptor\n+     * @param nameEntry the name {@code Utf8Entry}\n+     * @param typeEntry the type {@code Utf8Entry}\n+     * @see NameAndTypeEntry#name() NameAndTypeEntry::name\n+     * @see NameAndTypeEntry#type() NameAndTypeEntry::type\n@@ -208,4 +254,2 @@\n-     * {@return A {@link NameAndTypeEntry} describing the provided name and type}\n-     * If a NameAndType entry in the pool already describes this name and type,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link NameAndTypeEntry} describing the provided unqualified\n+     * name and field descriptor}\n@@ -213,2 +257,2 @@\n-     * @param name the member name\n-     * @param type the symbolic descriptor for a field type\n+     * @param name the unqualified name\n+     * @param type the field descriptor\n@@ -221,4 +265,3 @@\n-     * {@return A {@link NameAndTypeEntry} describing the provided name and type}\n-     * If a NameAndType entry in the pool already describes this name and type,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link NameAndTypeEntry} describing the provided name and\n+     * method descriptor}  The name can be an unqualified name or the\n+     * special name {@value ConstantDescs#INIT_NAME}.\n@@ -226,2 +269,2 @@\n-     * @param name the member name\n-     * @param type the symbolic descriptor for a method type\n+     * @param name the unqualified name, or {@value ConstantDescs#INIT_NAME}\n+     * @param type the method descriptor\n@@ -234,4 +277,5 @@\n-     * {@return A {@link FieldRefEntry} describing a field of a class}\n-     * If a FieldRef entry in the pool already describes this field,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link FieldRefEntry} referring to a {@link ClassEntry} and a\n+     * {@link NameAndTypeEntry}}  The {@code ClassEntry} describes a class or\n+     * interface that has this field as a member, and the {@code\n+     * NameAndTypeEntry} describes the unqualified name and the field descriptor\n+     * for this field.\n@@ -239,2 +283,4 @@\n-     * @param owner the class the field is a member of\n-     * @param nameAndType the name and type of the field\n+     * @param owner the {@code ClassEntry}\n+     * @param nameAndType the {@code NameAndTypeEntry}\n+     * @see FieldRefEntry#owner() FieldRefEntry::owner\n+     * @see FieldRefEntry#nameAndType() FieldRefEntry::nameAndType\n@@ -245,4 +291,1 @@\n-     * {@return A {@link FieldRefEntry} describing a field of a class}\n-     * If a FieldRef entry in the pool already describes this field,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link FieldRefEntry} describing a field of a class}\n@@ -250,3 +293,3 @@\n-     * @param owner the class the field is a member of\n-     * @param name the name of the field\n-     * @param type the type of the field\n+     * @param owner the class or interface the field is a member of\n+     * @param name the unqualified name of the field\n+     * @param type the field descriptor\n@@ -254,0 +297,1 @@\n+     * @see FieldRefEntry#typeSymbol() FieldRefEntry::typeSymbol\n@@ -260,4 +304,5 @@\n-     * {@return A {@link MethodRefEntry} describing a method of a class}\n-     * If a MethodRefEntry entry in the pool already describes this method,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodRefEntry} referring to a {@link ClassEntry} and a\n+     * {@link NameAndTypeEntry}}  The {@code ClassEntry} describes a class that\n+     * has this method as a member, and the {@code NameAndTypeEntry} describes\n+     * the unqualified name or the special name {@value ConstantDescs#INIT_NAME}\n+     * and the method descriptor for this method.\n@@ -265,2 +310,4 @@\n-     * @param owner the class the method is a member of\n-     * @param nameAndType the name and type of the method\n+     * @param owner the {@code ClassEntry}\n+     * @param nameAndType the {@code NameAndTypeEntry}\n+     * @see MethodRefEntry#owner() MethodRefEntry::owner\n+     * @see MethodRefEntry#nameAndType() MethodRefEntry::nameAndType\n@@ -271,4 +318,1 @@\n-     * {@return A {@link MethodRefEntry} describing a method of a class}\n-     * If a MethodRefEntry entry in the pool already describes this method,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodRefEntry} describing a method of a class}\n@@ -277,2 +321,3 @@\n-     * @param name the name of the method\n-     * @param type the type of the method\n+     * @param name the unqualified name, or special name {@value\n+     *        ConstantDescs#INIT_NAME}, of the method\n+     * @param type the method descriptor\n@@ -280,0 +325,1 @@\n+     * @see MethodRefEntry#typeSymbol() MethodRefEntry::typeSymbol\n@@ -286,4 +332,5 @@\n-     * {@return A {@link InterfaceMethodRefEntry} describing a method of a class}\n-     * If a InterfaceMethodRefEntry entry in the pool already describes this method,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return an {@link InterfaceMethodRefEntry} referring to a {@link\n+     * ClassEntry} and a {@link NameAndTypeEntry}}  The {@code ClassEntry}\n+     * describes an interface that has this method as a member, and the {@code\n+     * NameAndTypeEntry} describes the unqualified name and the method\n+     * descriptor for this method.\n@@ -291,2 +338,5 @@\n-     * @param owner the class the method is a member of\n-     * @param nameAndType the name and type of the method\n+     * @param owner the {@code ClassEntry}\n+     * @param nameAndType the {@code NameAndTypeEntry}\n+     * @see InterfaceMethodRefEntry#owner() InterfaceMethodRefEntry::owner\n+     * @see InterfaceMethodRefEntry#nameAndType()\n+     *      InterfaceMethodRefEntry::nameAndType\n@@ -297,4 +347,2 @@\n-     * {@return A {@link InterfaceMethodRefEntry} describing a method of a class}\n-     * If a InterfaceMethodRefEntry entry in the pool already describes this method,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return an {@link InterfaceMethodRefEntry} describing a method of an\n+     * interface}\n@@ -302,3 +350,3 @@\n-     * @param owner the class the method is a member of\n-     * @param name the name of the method\n-     * @param type the type of the method\n+     * @param owner the interface the method is a member of\n+     * @param name the unqualified name of the method\n+     * @param type the method descriptor\n@@ -306,0 +354,1 @@\n+     * @see InterfaceMethodRefEntry#typeSymbol() InterfaceMethodRefEntry::typeSymbol\n@@ -312,4 +361,2 @@\n-     * {@return A {@link MethodTypeEntry} describing a method type}\n-     * If a MethodType entry in the pool already describes this method type,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodTypeEntry} describing the same method type as\n+     * the provided {@link MethodTypeDesc}}\n@@ -318,0 +365,1 @@\n+     * @see MethodTypeEntry#asSymbol() MethodTypeEntry::asSymbol\n@@ -322,4 +370,2 @@\n-     * {@return A {@link MethodTypeEntry} describing a method type}\n-     * If a MethodType entry in the pool already describes this method type,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodTypeEntry} referring to a {@link Utf8Entry}}\n+     * The {@code Utf8Entry} represents a method descriptor string.\n@@ -327,1 +373,2 @@\n-     * @param descriptor the constant pool entry for the method type descriptor\n+     * @param descriptor the {@code Utf8Entry}\n+     * @see MethodTypeEntry#descriptor() MethodTypeEntry::descriptor\n@@ -332,4 +379,2 @@\n-     * {@return A {@link MethodHandleEntry} describing a direct method handle}\n-     * If a MethodHandle entry in the pool already describes this method handle,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodHandleEntry} describing the same method handle as\n+     * the given {@link DirectMethodHandleDesc}}\n@@ -338,0 +383,1 @@\n+     * @see MethodHandleEntry#asSymbol() MethodHandleEntry::asSymbol\n@@ -350,4 +396,4 @@\n-     * {@return A {@link MethodHandleEntry} describing a field accessor or method}\n-     * If a MethodHandle entry in the pool already describes this method handle,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link MethodHandleEntry} encoding a reference kind and\n+     * referring to a {@link MemberRefEntry}}  The reference kind must be\n+     * in {@code [1, 9]}, and the {@code MemberRefEntry} is subject to\n+     * various restrictions based on the reference kind (JVMS {@jvms 4.4.8}).\n@@ -355,2 +401,5 @@\n-     * @param refKind the reference kind of the method handle (JVMS {@jvms 4.4.8})\n-     * @param reference the constant pool entry describing the field or method\n+     * @param refKind the reference kind of the method handle\n+     * @param reference the {@code MemberRefEntry}\n+     * @see MethodHandleInfo##refKinds Reference kinds\n+     * @see MethodHandleEntry#kind() MethodHandleEntry::kind\n+     * @see MethodHandleEntry#reference() MethodHandleEntry::reference\n@@ -361,4 +410,2 @@\n-     * {@return An {@link InvokeDynamicEntry} describing a dynamic call site}\n-     * If an InvokeDynamic entry in the pool already describes this site,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return an {@link InvokeDynamicEntry} describing the same dynamic call\n+     * site as the provided {@link DynamicCallSiteDesc}}\n@@ -366,1 +413,2 @@\n-     * @param dcsd the symbolic descriptor of the method handle\n+     * @param dcsd the symbolic descriptor of the dynamic call site\n+     * @see InvokeDynamicEntry#asSymbol() InvokeDynamicEntry::asSymbol\n@@ -373,4 +421,5 @@\n-     * {@return An {@link InvokeDynamicEntry} describing a dynamic call site}\n-     * If an InvokeDynamic entry in the pool already describes this site,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return an {@link InvokeDynamicEntry} referring to a {@link\n+     * BootstrapMethodEntry} and a {@link NameAndTypeEntry}}\n+     * The {@code BootstrapMethodEntry} describes the bootstrap method\n+     * and its invocation arguments in addition to the name and type,\n+     * and the {@code NameAndTypeEntry} a name and a method descriptor.\n@@ -378,2 +427,4 @@\n-     * @param bootstrapMethodEntry the entry in the bootstrap method table\n-     * @param nameAndType the invocation name and type\n+     * @param bootstrapMethodEntry the {@code BootstrapMethodEntry}\n+     * @param nameAndType the {@code NameAndTypeEntry}\n+     * @see InvokeDynamicEntry#bootstrap() InvokeDynamicEntry::bootstrap\n+     * @see InvokeDynamicEntry#nameAndType() InvokeDynamicEntry::nameAndType\n@@ -385,4 +436,2 @@\n-     * {@return A {@link ConstantDynamicEntry} describing a dynamic constant}\n-     * If a ConstantDynamic entry in the pool already describes this site,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ConstantDynamicEntry} describing the dynamic constant\n+     * as the provided {@link DynamicConstantDesc}}\n@@ -391,0 +440,1 @@\n+     * @see ConstantDynamicEntry#asSymbol() ConstantDynamicEntry::asSymbol\n@@ -397,4 +447,5 @@\n-     * {@return A {@link ConstantDynamicEntry} describing a dynamic constant}\n-     * If a ConstantDynamic entry in the pool already describes this site,\n-     * it is returned; otherwise, a new entry is added and the new entry is\n-     * returned.\n+     * {@return a {@link ConstantDynamicEntry} referring to a {@link\n+     * BootstrapMethodEntry} and a {@link NameAndTypeEntry}}\n+     * The {@code BootstrapMethodEntry} describes the bootstrap method\n+     * and its invocation arguments in addition to the name and type,\n+     * and the {@code NameAndTypeEntry} a name and a field descriptor.\n@@ -402,2 +453,4 @@\n-     * @param bootstrapMethodEntry the entry in the bootstrap method table\n-     * @param nameAndType the invocation name and type\n+     * @param bootstrapMethodEntry the {@code BootstrapMethodEntry}\n+     * @param nameAndType the {@code NameAndTypeEntry}\n+     * @see ConstantDynamicEntry#bootstrap() ConstantDynamicEntry::bootstrap\n+     * @see ConstantDynamicEntry#nameAndType() ConstantDynamicEntry::nameAndType\n@@ -408,3 +461,1 @@\n-     * {@return An {@link IntegerEntry} describing the provided value}\n-     * If an integer entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return an {@link IntegerEntry} describing the provided value}\n@@ -413,0 +464,1 @@\n+     * @see IntegerEntry#intValue() IntegerEntry::intValue\n@@ -417,3 +469,1 @@\n-     * {@return A {@link FloatEntry} describing the provided value}\n-     * If a float entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link FloatEntry} describing the provided value}\n@@ -422,0 +472,1 @@\n+     * @see FloatEntry#floatValue() FloatEntry::floatValue\n@@ -426,3 +477,1 @@\n-     * {@return A {@link LongEntry} describing the provided value}\n-     * If a long entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link LongEntry} describing the provided value}\n@@ -431,0 +480,1 @@\n+     * @see LongEntry#longValue() LongEntry::longValue\n@@ -435,3 +485,1 @@\n-     * {@return A {@link DoubleEntry} describing the provided value}\n-     * If a double entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link DoubleEntry} describing the provided value}\n@@ -440,0 +488,1 @@\n+     * @see DoubleEntry#doubleValue() DoubleEntry::doubleValue\n@@ -444,3 +493,2 @@\n-     * {@return A {@link StringEntry} referencing the provided UTF8 entry}\n-     * If a String entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link StringEntry} referring to a {@link Utf8Entry}}\n+     * The {@code Utf8Entry} describes the string value.\n@@ -448,1 +496,2 @@\n-     * @param utf8 the UTF8 entry describing the string\n+     * @param utf8 the {@code Utf8Entry}\n+     * @see StringEntry#utf8() StringEntry::utf8\n@@ -453,3 +502,1 @@\n-     * {@return A {@link StringEntry} describing the provided value}\n-     * If a string entry in the pool already describes this value, it is returned;\n-     * otherwise, a new entry is added and the new entry is returned.\n+     * {@return a {@link StringEntry} describing the provided value}\n@@ -458,0 +505,1 @@\n+     * @see StringEntry#stringValue() StringEntry::stringValue\n@@ -464,2 +512,3 @@\n-     * {@return A {@link ConstantValueEntry} describing the provided\n-     * Integer, Long, Float, Double, or String constant}\n+     * {@return a {@link ConstantValueEntry} describing the provided constant\n+     * {@link Integer}, {@link Long}, {@link Float}, {@link Double}, or {@link\n+     * String} value}\n@@ -467,2 +516,7 @@\n-     * @param c the constant\n-     * @see ConstantValueEntry#constantValue()\n+     * @param c the provided constant value\n+     * @throws IllegalArgumentException if the value is not one of {@code\n+     *         Integer}, {@code Long}, {@code Float}, {@code Double}, or {@code\n+     *         String}\n+     * @see ConstantValueEntry#constantValue() ConstantValueEntry::constantValue\n+     * @see ConstantValueAttribute#of(ConstantDesc)\n+     *      ConstantValueAttribute::of(ConstantDesc)\n@@ -480,5 +534,2 @@\n-     * {@return A {@link LoadableConstantEntry} describing the provided\n-     * constant}  The constant should be an Integer, String, Long, Float,\n-     * Double, ClassDesc (for a Class constant), MethodTypeDesc (for a MethodType\n-     * constant), DirectMethodHandleDesc (for a MethodHandle constant), or\n-     * a DynamicConstantDesc (for a dynamic constant.)\n+     * {@return a {@link LoadableConstantEntry} describing the provided constant\n+     * value}\n@@ -486,1 +537,1 @@\n-     * @param c the constant\n+     * @param c the nominal descriptor for the constant\n@@ -503,1 +554,1 @@\n-     * bootstrap method and static arguments}\n+     * bootstrap method and arguments}\n@@ -506,1 +557,1 @@\n-     * @param arguments the bootstrap arguments\n+     * @param arguments the arguments\n@@ -515,2 +566,4 @@\n-     * {@return a {@link BootstrapMethodEntry} describing the provided\n-     * bootstrap method and static arguments}\n+     * {@return a {@link BootstrapMethodEntry} referring to a {@link\n+     * MethodHandleEntry} and a list of {@link LoadableConstantEntry}}\n+     * The {@code MethodHandleEntry} is the bootstrap method, and the\n+     * list of {@code LoadableConstantEntry} is the arguments.\n@@ -518,2 +571,5 @@\n-     * @param methodReference the bootstrap method\n-     * @param arguments the bootstrap arguments\n+     * @param methodReference the {@code MethodHandleEntry}\n+     * @param arguments the list of {@code LoadableConstantEntry}\n+     * @see BootstrapMethodEntry#bootstrapMethod()\n+     *      BootstrapMethodEntry::bootstrapMethod\n+     * @see BootstrapMethodEntry#arguments() BootstrapMethodEntry::arguments\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":249,"deletions":193,"binary":false,"changes":442,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n- * pool.\n+ * pool or the bootstrap method table.  This is also thrown when the lazy\n+ * evaluation of constant pool or bootstrap method table entries encounter\n+ * format errors.\n@@ -50,1 +52,2 @@\n-     * @param message the detail message.\n+     * @param message the detail message, may be {@code null} for no detail\n+     *                message\n@@ -58,5 +61,4 @@\n-     * a detail message of {@code (cause==null ? null : cause.toString())}.\n-     * @param cause the cause (which is saved for later retrieval by the\n-     *        {@link Throwable#getCause()} method).  (A {@code null} value is\n-     *        permitted, and indicates that the cause is nonexistent or\n-     *        unknown.)\n+     * a detail message of {@code cause == null ? null : cause.toString()}.\n+     *\n+     * @param cause the cause, may be {@code null} for nonexistent or unknown\n+     *              cause\n@@ -72,6 +74,4 @@\n-     * @param message the detail message (which is saved for later retrieval\n-     *        by the {@link Throwable#getMessage()} method).\n-     * @param cause the cause (which is saved for later retrieval by the\n-     *        {@link Throwable#getCause()} method).  (A {@code null} value\n-     *        is permitted, and indicates that the cause is nonexistent or\n-     *        unknown.)\n+     * @param message the detail message, may be {@code null} for no detail\n+     *                message\n+     * @param cause the cause, may be {@code null} for nonexistent or unknown\n+     *              cause\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolException.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -31,3 +31,2 @@\n- * Models a constant pool entry that can be used as the constant in a\n- * {@link Attributes#constantValue() ConstantValue} attribute; this includes the four\n- * primitive constant types and {@linkplain String} constants.\n+ * Marker interface for constant pool entries that can represent constant values\n+ * in the {@link Attributes#constantValue() ConstantValue} attribute.\n@@ -35,0 +34,2 @@\n+ * @see ConstantPoolBuilder#constantValueEntry\n+ *      ConstantPoolBuilder::constantValueEntry\n@@ -42,2 +43,2 @@\n-     * {@return the constant value}  The constant value will be an {@link Integer},\n-     * {@link Long}, {@link Float}, {@link Double}, or {@link String}.\n+     * {@return the constant value}  The constant value will be an {@link\n+     * Integer}, {@link Long}, {@link Float}, {@link Double}, or {@link String}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantValueEntry.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,3 +32,10 @@\n- * Models a {@code CONSTANT_Double_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n+ * Models a {@code CONSTANT_Double_info} structure, representing a {@code\n+ * double} constant, in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code DoubleEntry} is modeled by a {@code double}.  Conversions\n+ * are through {@link ConstantPoolBuilder#doubleEntry} and {@link #doubleValue()}.\n+ * In the conversions, all NaN values of the {@code double} may be collapsed\n+ * into a single {@linkplain Double#NaN \"canonical\" NaN value}.\n+ * <p>\n+ * A double entry has a {@linkplain #width() width} of {@code 2}, making its\n+ * subsequent constant pool index valid and unusable.\n@@ -36,0 +43,3 @@\n+ * @see ConstantPoolBuilder#doubleEntry ConstantPoolBuilder::doubleEntry\n+ * @jvms 4.4.5 The {@code CONSTANT_Long_info} and {@code CONSTANT_Double_info}\n+ *             Structures\n@@ -43,1 +53,4 @@\n-     * {@return the double value}\n+     * {@return the {@code double} value}\n+     *\n+     * @see ConstantPoolBuilder#doubleEntry(double)\n+     *      ConstantPoolBuilder::doubleEntry(double)\n@@ -47,3 +60,0 @@\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DoubleEntry.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,3 +30,15 @@\n- * Models a dynamic constant pool entry, which is either {@link ConstantDynamicEntry}\n- * or {@link InvokeDynamicEntry}.\n- * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n+ * Superinterface modeling dynamically-computed constant pool entries, which\n+ * include {@link ConstantDynamicEntry} and {@link InvokeDynamicEntry}, in the\n+ * constant pool of a {@code class} file.\n+ * <p>\n+ * Different types of dynamically-computed constant pool entries bear structural\n+ * similarities, but they appear in distinct locations.  As a result, their uses\n+ * are represented by different symbolic descriptors, specific to each subtype.\n+ * <p>\n+ * A dynamic constant entry is composite:\n+ * {@snippet lang=text :\n+ * DynamicConstantPoolEntry(\n+ *     BootstrapMethodEntry bootstrap, \/\/ @link substring=\"bootstrap\" target=\"#bootstrap()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n@@ -34,0 +46,5 @@\n+ * @see java.lang.invoke##jvm_mods Dynamic resolution of call sites and\n+ *      constants\n+ * @jvms 4.4.10 The {@code CONSTANT_Dynamic_info} and {@code\n+ *              CONSTANT_InvokeDynamic_info} Structures\n+ * @jvms 5.4.3.6 Dynamically-Computed Constant and Call Site Resolution\n@@ -42,0 +59,6 @@\n+     *\n+     * @see java.lang.invoke##bsm Execution of bootstrap methods\n+     * @see ConstantPoolBuilder#constantDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     *      ConstantPoolBuilder::constantDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     * @see ConstantPoolBuilder#invokeDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     *      ConstantPoolBuilder::invokeDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n@@ -46,1 +69,3 @@\n-     * {@return index of the entry in the bootstrap method table for this constant}\n+     * {@return index of the entry in the bootstrap method table for this\n+     * constant}  The return value is equivalent to {@code\n+     * bootstrap().bsmIndex()}.\n@@ -51,1 +76,8 @@\n-     * {@return the invocation name and type}\n+     * {@return the name and the descriptor string indicated by this symbolic\n+     * reference}\n+     *\n+     * @see java.lang.invoke##bsm Execution of bootstrap methods\n+     * @see ConstantPoolBuilder#constantDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     *      ConstantPoolBuilder::constantDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     * @see ConstantPoolBuilder#invokeDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n+     *      ConstantPoolBuilder::invokeDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\n@@ -56,1 +88,1 @@\n-     * {@return the invocation name}\n+     * {@return the name indicated by this symbolic reference}\n@@ -63,1 +95,8 @@\n-     * {@return the invocation type}\n+     * {@return the descriptor string indicated by this symbolic reference}\n+     * This is a field descriptor string if this entry is a {@link\n+     * ConstantDynamicEntry}, or a method descriptor string if this entry is a\n+     * {@link InvokeDynamicEntry}.\n+     *\n+     * @apiNote\n+     * Each subinterface has its specific accessor named {@code typeSymbol} for\n+     * the symbolic descriptor derived from this descriptor string.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DynamicConstantPoolEntry.java","additions":46,"deletions":7,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -33,3 +33,13 @@\n- * Models a {@code CONSTANT_Fieldref_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n+ * Models a {@code CONSTANT_Fieldref_info} structure, or a symbolic reference\n+ * to a field, in the constant pool of a {@code class} file.\n+ * <p>\n+ * A field reference constant pool entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"FieldRefEntry\" target=\"ConstantPoolBuilder#fieldRefEntry(ClassEntry, NameAndTypeEntry)\" :\n+ * FieldRefEntry(\n+ *     ClassEntry owner, \/\/ @link substring=\"owner\" target=\"#owner()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n+ * where the {@link #type() nameAndType.type()} represents a {@linkplain\n+ * #typeSymbol() field descriptor} string.\n@@ -37,0 +47,4 @@\n+ * @see ConstantPoolBuilder#fieldRefEntry ConstantPoolBuilder::fieldRefEntry\n+ * @jvms 4.4.2 The {@code CONSTANT_Fieldref_info}, {@code\n+ *             CONSTANT_Methodref_info}, and {@code\n+ *             CONSTANT_InterfaceMethodref_info} Structures\n@@ -43,1 +57,1 @@\n-     * {@return a symbolic descriptor for the field's type}\n+     * {@return a symbolic descriptor for the {@linkplain #type() field type}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FieldRefEntry.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,3 +32,7 @@\n- * Models a {@code CONSTANT_Float_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.4 The CONSTANT_Integer_info and CONSTANT_Float_info Structures\n+ * Models a {@code CONSTANT_Float_info} structure, or a {@code float} constant,\n+ * in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code FloatEntry} is modeled by a {@code float}.  Conversions\n+ * are through {@link ConstantPoolBuilder#floatEntry} and {@link #floatValue()}.\n+ * In the conversions, all NaN values of the {@code float} may be collapsed into\n+ * a single {@linkplain Float#NaN \"canonical\" NaN value}.\n@@ -36,0 +40,3 @@\n+ * @see ConstantPoolBuilder#floatEntry ConstantPoolBuilder::floatEntry\n+ * @jvms 4.4.4 The {@code CONSTANT_Integer_info} and {@code CONSTANT_Float_info}\n+ *             Structures\n@@ -43,1 +50,3 @@\n-     * {@return the float value}\n+     * {@return the {@code float} value}\n+     *\n+     * @see ConstantPoolBuilder#floatEntry(float)\n@@ -45,1 +54,0 @@\n-\n@@ -48,3 +56,0 @@\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FloatEntry.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,3 +32,5 @@\n- * Models a {@code CONSTANT_Integer_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.4 The CONSTANT_Integer_info and CONSTANT_Float_info Structures\n+ * Models a {@code CONSTANT_Integer_info} structure, or an {@code int} constant,\n+ * in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code IntegerEntry} is modeled by an {@code int}.  Conversions\n+ * are through {@link ConstantPoolBuilder#intEntry(int)} and {@link #intValue()}.\n@@ -36,0 +38,3 @@\n+ * @see ConstantPoolBuilder#intEntry ConstantPoolBuilder::intEntry\n+ * @jvms 4.4.4 The {@code CONSTANT_Integer_info} and {@code CONSTANT_Float_info}\n+ *             Structures\n@@ -43,1 +48,3 @@\n-     * {@return the integer value}\n+     * {@return the {@code int} value}\n+     *\n+     * @see ConstantPoolBuilder#intEntry(int)\n@@ -47,3 +54,0 @@\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/IntegerEntry.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,3 +33,14 @@\n- * Models a {@code CONSTANT_InterfaceMethodRef_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n+ * Models a {@code CONSTANT_InterfaceMethodRef_info} structure, or a symbolic\n+ * reference to an interface method, in the constant pool of a {@code class}\n+ * file.\n+ * <p>\n+ * An interface method reference entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InterfaceMethodRefEntry\" target=\"ConstantPoolBuilder#interfaceMethodRefEntry(ClassEntry, NameAndTypeEntry)\" :\n+ * InterfaceMethodRefEntry(\n+ *     ClassEntry owner, \/\/ @link substring=\"owner\" target=\"#owner()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n+ * where the {@link #type() type} in the {@code nameAndType} is a {@linkplain\n+ * #typeSymbol() method descriptor} string.\n@@ -37,0 +48,5 @@\n+ * @see ConstantPoolBuilder#interfaceMethodRefEntry\n+ *      ConstantPoolBuilder::interfaceMethodRefEntry\n+ * @jvms 4.4.2 The {@code CONSTANT_Fieldref_info}, {@code\n+ *             CONSTANT_Methodref_info}, and {@code\n+ *             CONSTANT_InterfaceMethodref_info} Structures\n@@ -44,1 +60,1 @@\n-     * {@return a symbolic descriptor for the interface method's type}\n+     * {@return a symbolic descriptor for the {@linkplain #type() method type}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,2 +35,20 @@\n- * Models a constant pool entry for a dynamic call site.\n- * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n+ * Models a {@code CONSTANT_InvokeDynamic_info} structure, or the symbolic\n+ * reference to a <dfn>{@index \"dynamically-computed call site\"}<\/dfn>, in the\n+ * constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code InvokeDynamicEntry} is modeled by a {@link\n+ * DynamicCallSiteDesc} symbolic descriptor.  It can be obtained from {@link\n+ * #asSymbol() InvokeDynamicEntry::asSymbol} and converted back to a constant\n+ * pool entry through {@link ConstantPoolBuilder#invokeDynamicEntry(DynamicCallSiteDesc)\n+ * ConstantPoolBuilder::invokeDynamicEntry}.\n+ * <p>\n+ * An invoke dynamic entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"InvokeDynamicEntry\" target=\"ConstantPoolBuilder#invokeDynamicEntry(BootstrapMethodEntry, NameAndTypeEntry)\" :\n+ * InvokeDynamicEntry(\n+ *     BootstrapMethodEntry bootstrap, \/\/ @link substring=\"bootstrap\" target=\"#bootstrap()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n+ * where the {@link #type() type} in the {@code nameAndType} is a {@linkplain\n+ * #typeSymbol() method descriptor} string.\n@@ -38,0 +56,11 @@\n+ * @apiNote\n+ * A dynamically-computed call site is frequently called a <dfn>{@index \"dynamic\n+ * call site\"}<\/dfn>, or an <dfn>{@index \"indy\"}<\/dfn>, from the abbreviation of\n+ * \"invoke dynamic\".\n+ *\n+ * @see ConstantPoolBuilder#invokeDynamicEntry\n+ *      ConstantPoolBuilder::invokeDynamicEntry\n+ * @see DynamicCallSiteDesc\n+ * @see java.lang.invoke##indyinsn Dynamically-computed call sites\n+ * @jvms 4.4.10 The {@code CONSTANT_Dynamic_info} and {@code\n+ *              CONSTANT_InvokeDynamic_info} Structures\n@@ -45,1 +74,2 @@\n-     * {@return a symbolic descriptor for the call site's invocation type}\n+     * {@return a symbolic descriptor for the {@linkplain #type() invocation\n+     * type} of this dynamic call site}\n@@ -52,1 +82,4 @@\n-     * {@return a symbolic descriptor for the dynamic call site}\n+     * {@return a symbolic descriptor for this dynamic call site}\n+     *\n+     * @see ConstantPoolBuilder#invokeDynamicEntry(DynamicCallSiteDesc)\n+     *      ConstantPoolBuilder::invokeDynamicEntry(DynamicCallSiteDesc)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/InvokeDynamicEntry.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Opcode;\n@@ -28,0 +30,1 @@\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -32,1 +35,5 @@\n- * {@code LDC} instructions.\n+ * {@link ConstantInstruction.LoadConstantInstruction ldc} instructions.\n+ * <p>\n+ * The use of a {@code LoadableConstantEntry} is modeled by a {@link ConstantDesc}.\n+ * Conversions are through {@link ConstantPoolBuilder#loadableConstantEntry(ConstantDesc)}\n+ * and {@link #constantValue()}.\n@@ -34,0 +41,2 @@\n+ * @see CodeBuilder#ldc(LoadableConstantEntry)\n+ * @jvms 4.4 The Constant Pool\n@@ -41,1 +50,3 @@\n-     * {@return the constant described by this entry}\n+     * {@return a symbolic descriptor of this constant}\n+     *\n+     * @see ConstantPoolBuilder#loadableConstantEntry(ConstantDesc)\n@@ -46,1 +57,6 @@\n-     * {@return the type of the constant}\n+     * {@return the data type of this constant}\n+     * <p>\n+     * If the data type is of {@linkplain TypeKind#slotSize() category} 2, this\n+     * constant must be loaded with {@link Opcode#LDC2_W ldc2_w}; otherwise, the\n+     * data type is of category 1, and this constant must be loaded with {@link\n+     * Opcode#LDC ldc} or {@link Opcode#LDC_W ldc_w}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,3 +32,8 @@\n- * Models a {@code CONSTANT_Long_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n+ * Models a {@code CONSTANT_Long_info} structure, or a {@code long} constant, in\n+ * the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code LongEntry} is modeled by a {@code long}.  Conversions are\n+ * through {@link ConstantPoolBuilder#longEntry(long)} and {@link #longValue()}.\n+ * <p>\n+ * A long entry has a {@linkplain #width() width} of {@code 2}, making its\n+ * subsequent constant pool index valid and unusable.\n@@ -36,0 +41,3 @@\n+ * @see ConstantPoolBuilder#longEntry ConstantPoolBuilder::longEntry\n+ * @jvms 4.4.5 The {@code CONSTANT_Long_info} and {@code CONSTANT_Double_info}\n+ *             Structures\n@@ -43,1 +51,4 @@\n-     * {@return the long value}\n+     * {@return the {@code long} value}\n+     *\n+     * @see ConstantPoolBuilder#longEntry(long)\n+     *      ConstantPoolBuilder::longEntry(long)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LongEntry.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.classfile.Opcode;\n+\n@@ -30,2 +32,18 @@\n- * Models a member reference constant in the constant pool of a classfile,\n- * which includes references to fields, methods, and interface methods.\n+ * Superinterface modeling symbolic references to a member of a class or interface\n+ * in the constant pool of a {@code class} file, which include references to\n+ * {@linkplain FieldRefEntry fields}, {@linkplain MethodRefEntry class methods},\n+ * and {@linkplain InterfaceMethodRefEntry interface methods}.\n+ * <p>\n+ * Different types of symbolic references to a member of a class or interface\n+ * bear structural similarities and share parts of the resolution processes, and\n+ * they can sometimes appear in the same locations.  For example, both {@link\n+ * MethodRefEntry} and {@link InterfaceMethodRefEntry} can appear in an {@link\n+ * Opcode#INVOKESTATIC invokestatic} instruction.\n+ * <p>\n+ * A member reference entry is composite:\n+ * {@snippet lang=text :\n+ * MemberRefEntry(\n+ *     ClassEntry owner, \/\/ @link substring=\"owner\" target=\"#owner()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n@@ -33,0 +51,3 @@\n+ * @jvms 4.4.2 The {@code CONSTANT_Fieldref_info}, {@code\n+ *             CONSTANT_Methodref_info}, and {@code\n+ *             CONSTANT_InterfaceMethodref_info} Structures\n@@ -39,1 +60,1 @@\n-     * {@return the class in which this member ref lives}\n+     * {@return the class or interface which this member belongs to}\n@@ -44,1 +65,1 @@\n-     * {@return the name and type of the member}\n+     * {@return the name and descriptor string of the member}\n@@ -56,1 +77,8 @@\n-     * {@return the type of the member}\n+     * {@return the descriptor string of the member}  This is a field descriptor\n+     * string if this entry is a {@link FieldRefEntry}, or a method descriptor\n+     * string if this entry is a {@link MethodRefEntry} or {@link\n+     * InterfaceMethodRefEntry}.\n+     *\n+     * @apiNote\n+     * Each subinterface defines a {@code typeSymbol()} accessor for the\n+     * symbolic descriptor for the member type.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MemberRefEntry.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandleInfo;\n@@ -33,3 +35,23 @@\n- * Models a {@code CONSTANT_MethodHandle_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.8 The CONSTANT_MethodHandle_info Structure\n+ * Models a {@code CONSTANT_MethodHandle_info} structure, or a symbolic\n+ * reference to a {@linkplain MethodHandle method handle}, in the constant pool\n+ * of a {@code class} file.  The method handle directly accesses an accessible\n+ * method, field, or constructor.\n+ * <p>\n+ * The use of a {@code MethodHandleEntry} is modeled by a {@link\n+ * DirectMethodHandleDesc}.  Conversions are through {@link\n+ * ConstantPoolBuilder#methodHandleEntry(DirectMethodHandleDesc)} and {@link\n+ * #asSymbol()}.\n+ * <p>\n+ * A method handle entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MethodHandleEntry\" target=\"ConstantPoolBuilder#methodHandleEntry(int, MemberRefEntry)\" :\n+ * MethodHandleEntry(\n+ *     int refKind, \/\/ @link substring=\"refKind\" target=\"#kind()\"\n+ *     MemberRefEntry reference \/\/ @link substring=\"reference\" target=\"#reference()\"\n+ * )\n+ * }\n+ * where {@code refKind} is in the range {@code [1, 9]}.\n+ *\n+ * @see ConstantPoolBuilder#methodHandleEntry\n+ *      ConstantPoolBuilder::methodHandleEntry\n+ * @jvms 4.4.8 The {@code CONSTANT_MethodHandle_info} Structure\n@@ -43,0 +65,5 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * This is equivalent to {@link #asSymbol() asSymbol()}.\n+     *\/\n@@ -50,1 +77,2 @@\n-     * @see java.lang.invoke.MethodHandleInfo\n+     *\n+     * @see MethodHandleInfo##refkinds Reference kinds\n@@ -55,1 +83,2 @@\n-     * {@return the constant pool entry describing the method}\n+     * {@return the constant pool entry describing the field or method,\n+     * according to the {@linkplain #kind() reference kind}}\n@@ -61,0 +90,3 @@\n+     *\n+     * @see ConstantPoolBuilder#methodHandleEntry(DirectMethodHandleDesc)\n+     *      ConstantPoolBuilder::methodHandleEntry(DirectMethodHandleDesc)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodHandleEntry.java","additions":37,"deletions":5,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -33,3 +33,13 @@\n- * Models a {@code CONSTANT_MethodRef_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.2 The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures\n+ * Models a {@code CONSTANT_MethodRef_info} structure, or a symbolic reference\n+ * to a class method, in the constant pool of a {@code class} file.\n+ * <p>\n+ * A class method reference entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MethodRefEntry\" target=\"ConstantPoolBuilder#methodRefEntry(ClassEntry, NameAndTypeEntry)\" :\n+ * MethodRefEntry(\n+ *     ClassEntry owner, \/\/ @link substring=\"owner\" target=\"#owner()\"\n+ *     NameAndTypeEntry nameAndType \/\/ @link substring=\"nameAndType\" target=\"#nameAndType()\"\n+ * )\n+ * }\n+ * where the type in the {@code NameAndTypeEntry} is a {@linkplain #typeSymbol()\n+ * method descriptor} string.\n@@ -37,0 +47,4 @@\n+ * @see ConstantPoolBuilder#methodRefEntry ConstantPoolBuilder::methodRefEntry\n+ * @jvms 4.4.2 The {@code CONSTANT_Fieldref_info}, {@code\n+ *             CONSTANT_Methodref_info}, and {@code\n+ *             CONSTANT_InterfaceMethodref_info} Structures\n@@ -43,1 +57,1 @@\n-     * {@return a symbolic descriptor for the method's type}\n+     * {@return a symbolic descriptor for the {@linkplain #type() method type}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodRefEntry.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -33,3 +33,14 @@\n- * Models a {@code CONSTANT_MethodType_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.9 The CONSTANT_MethodType_info Structure\n+ * Models a {@code CONSTANT_MethodType_info} structure, or a symbolic reference\n+ * to a method type, in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code MethodTypeEntry} is modeled by a {@link MethodTypeDesc}.\n+ * Conversions are through {@link ConstantPoolBuilder#methodTypeEntry(MethodTypeDesc)}\n+ * and {@link #asSymbol()}.\n+ * <p>\n+ * A method type entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"MethodTypeEntry\" target=\"ConstantPoolBuilder#methodTypeEntry(Utf8Entry)\" :\n+ * MethodTypeEntry(Utf8Entry descriptor) \/\/ @link substring=\"descriptor\" target=\"#descriptor()\"\n+ * }\n+ * where {@code descriptor} is a {@linkplain #asSymbol() method descriptor}\n+ * string.\n@@ -37,0 +48,1 @@\n+ * @jvms 4.4.9 The {@code CONSTANT_MethodType_info} Structure\n@@ -43,0 +55,5 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * This is equivalent to {@link #asSymbol() asSymbol()}.\n+     *\/\n@@ -49,1 +66,1 @@\n-     * {@return the constant pool entry describing the method type}\n+     * {@return the {@linkplain #asSymbol() method descriptor} string}\n@@ -54,1 +71,2 @@\n-     * {@return a symbolic descriptor for the method type}\n+     * {@return a symbolic descriptor for the {@linkplain #descriptor() method\n+     * type}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodTypeEntry.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,3 +32,13 @@\n- * Models a {@code CONSTANT_Module_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.11 The CONSTANT_Module_info Structure\n+ * Models a {@code CONSTANT_Module_info} structure, denoting a module, in the\n+ * constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code ModuleEntry} is modeled by a {@link ModuleDesc}.\n+ * Conversions are through {@link ConstantPoolBuilder#moduleEntry(ModuleDesc)}\n+ * and {@link #asSymbol()}.\n+ * <p>\n+ * A module entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"ModuleEntry\" target=\"ConstantPoolBuilder#moduleEntry(Utf8Entry)\" :\n+ * ModuleEntry(Utf8Entry name) \/\/ @link substring=\"name\" target=\"#name()\"\n+ * }\n+ * where {@code name} is a {@linkplain #asSymbol() module name}.\n@@ -36,0 +46,1 @@\n+ * @jvms 4.4.11 The {@code CONSTANT_Module_info} Structure\n@@ -41,1 +52,1 @@\n-     * {@return the name of the module}\n+     * {@return the name of the {@linkplain #asSymbol() module}}\n@@ -46,1 +57,1 @@\n-     * {@return a symbolic descriptor for the module}\n+     * {@return a symbolic descriptor for the {@linkplain #name() module name}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ModuleEntry.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.TypeDescriptor;\n+\n@@ -30,3 +34,21 @@\n- * Models a {@code CONSTANT_NameAndType_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.6 The CONSTANT_NameAndType_info Structure\n+ * Models a {@code CONSTANT_NameAndType_info} structure, representing a field or\n+ * method, in the constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code NameAndTypeEntry} is symbolically represented as a\n+ * {@code String name}, and a {@link ConstantPoolBuilder#nameAndTypeEntry(String,\n+ * ClassDesc) ClassDesc} or a {@link ConstantPoolBuilder#nameAndTypeEntry(String,\n+ * MethodTypeDesc) MethodTypeDesc} {@code type}, depending on where this {@code\n+ * NameAndTypeEntry} appears.  The accessors to the symbolic descriptors for the\n+ * {@code type} is defined on a per-use-site basis, such as {@link\n+ * FieldRefEntry#typeSymbol()} returning a {@code ClassDesc}, and {@link\n+ * MethodRefEntry#typeSymbol()} returning a {@code MethodTypeDesc}.\n+ * <p>\n+ * A name and type entry is composite:\n+ * {@snippet lang=text :\n+ * NameAndTypeEntry( \/\/ @link substring=\"NameAndTypeEntry\" target=\"ConstantPoolBuilder#nameAndTypeEntry(Utf8Entry, Utf8Entry)\"\n+ *     Utf8Entry name, \/\/ @link substring=\"name\" target=\"#name()\"\n+ *     Utf8Entry type  \/\/ @link substring=\"type\" target=\"#type()\"\n+ * )\n+ * }\n+ * where {@code name} is an unqualified name, and {@code type} is a field or\n+ * method descriptor string.\n@@ -34,0 +56,1 @@\n+ * @jvms 4.4.6 The {@code CONSTANT_NameAndType_info} Structure\n@@ -45,1 +68,4 @@\n-     * {@return the field or method descriptor}\n+     * {@return the field or method {@linkplain TypeDescriptor descriptor}\n+     * string}  It is a method descriptor strings if it starts with {@code (}.\n+     * Otherwise, it is a field descriptor string, and must start with one of\n+     * the {@code BCDFIJSZL[} characters.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -32,3 +32,15 @@\n- * Models a {@code CONSTANT_Package_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.12 The CONSTANT_Package_info Structure\n+ * Models a {@code CONSTANT_Package_info}, representing a package, in the\n+ * constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code PackageEntry} is represented by a {@link PackageDesc}\n+ * that does not represent the unnamed package.  Conversions are through\n+ * {@link ConstantPoolBuilder#packageEntry(PackageDesc)} and\n+ * {@link #asSymbol()}.\n+ * <p>\n+ * A package entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"PackageEntry\" target=\"ConstantPoolBuilder#packageEntry(Utf8Entry)\" :\n+ * PackageEntry(Utf8Entry name) \/\/ @link substring=\"name\" target=\"#name()\"\n+ * }\n+ * where {@code name} is the {@linkplain ClassEntry##internalname internal form}\n+ * of a binary package name and is not empty.\n@@ -36,0 +48,1 @@\n+ * @jvms 4.4.12 The {@code CONSTANT_Package_info} Structure\n@@ -41,1 +54,2 @@\n-     * {@return the package name}\n+     * {@return the {@linkplain ClassEntry##internalname internal form} of the\n+     * {@linkplain #asSymbol() package} name}\n@@ -46,1 +60,1 @@\n-     * {@return a symbolic descriptor for the package name}\n+     * {@return a symbolic descriptor for the {@linkplain #name() package name}}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PackageEntry.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,0 +27,5 @@\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassFileBuilder;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+\n@@ -28,1 +33,14 @@\n- * Models an entry in the constant pool of a classfile.\n+ * Models an entry in the constant pool of a {@code class} file.  Entries are\n+ * read from {@code class} files, and can be created with a {@link\n+ * ConstantPoolBuilder} to write to {@code class} files.\n+ *\n+ * @implNote\n+ * <h2 id=\"unbound\">Unbound Constant Pool Entries<\/h2>\n+ * Implementations may create unbound constant pool entries not belonging to\n+ * an actual constant pool.  They conveniently represent constant pool entries\n+ * referred by unbound {@linkplain Attribute attributes} not read from a {@code\n+ * class} file.  Their {@link #index() index()} return a non-positive invalid\n+ * value, and behaviors of their {@link #constantPool() constantPool()} are\n+ * unspecified.  They are considered alien to any {@linkplain\n+ * ClassFileBuilder#constantPool() contextual constant pool} and will be\n+ * converted when they are written to {@code class} files.\n@@ -30,0 +48,1 @@\n+ * @see ConstantPoolBuilder##alien Alien Constant Pool Entries\n@@ -91,0 +110,8 @@\n+     *\n+     * @apiNote\n+     * Given a {@link ConstantPoolBuilder} {@code builder} and a {@code\n+     * PoolEntry entry}, use {@link ConstantPoolBuilder#canWriteDirect\n+     * builder.canWriteDirect(entry.constantPool())} instead of object equality\n+     * of the constant pool to determine if an entry belongs to the builder.\n+     *\n+     * @see ##unbound Unbound Constant Pool Entries\n@@ -105,0 +132,4 @@\n+     * A valid index is always positive; if the index is non-positive, this\n+     * entry is {@linkplain ##unbound unbound}.\n+     *\n+     * @see ##unbound Unbound Constant Pool Entries\n@@ -110,0 +141,17 @@\n+     * <p>\n+     * All pool entries except {@link LongEntry CONSTANT_Long} and {@link\n+     * DoubleEntry CONSTANT_Double} have width {@code 1}. These two exceptions\n+     * have width {@code 2}, and their subsequent indices at {@link #index()\n+     * index() + 1} are considered unusable.\n+     *\n+     * @apiNote\n+     * If this entry is {@linkplain LoadableConstantEntry loadable}, the width\n+     * of this entry does not decide if this entry should be loaded with {@link\n+     * Opcode#LDC ldc} or {@link Opcode#LDC2_W ldc2_w}.  For example, {@link\n+     * ConstantDynamicEntry} always has width {@code 1}, but it must be loaded\n+     * with {@code ldc2_w} if its {@linkplain ConstantDynamicEntry#typeKind()\n+     * type} is {@link TypeKind#LONG long} or {@link TypeKind#DOUBLE double}.\n+     * Use {@link LoadableConstantEntry#typeKind() typeKind().slotSize()} to\n+     * determine the loading instruction instead.\n+     *\n+     * @see ConstantPool##index Index in the Constant Pool\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -30,3 +30,12 @@\n- * Models a {@code CONSTANT_String_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.3 The CONSTANT_String_info Structure\n+ * Models a {@code CONSTANT_String_info} structure, or a string constant, in the\n+ * constant pool of a {@code class} file.\n+ * <p>\n+ * The use of a {@code StringEntry} is represented by a {@link String}.\n+ * Conversions are through {@link ConstantPoolBuilder#stringEntry(String)} and\n+ * {@link #stringValue()}.\n+ * <p>\n+ * A string entry is composite:\n+ * {@snippet lang=text :\n+ * \/\/ @link substring=\"StringEntry\" target=\"ConstantPoolBuilder#stringEntry(Utf8Entry)\" :\n+ * StringEntry(Utf8Entry utf8) \/\/ @link substring=\"utf8\" target=\"#utf8()\"\n+ * }\n@@ -34,0 +43,1 @@\n+ * @jvms 4.4.3 The {@code CONSTANT_String_info} Structure\n@@ -41,0 +51,2 @@\n+     *\n+     * @see ConstantPoolBuilder#stringEntry(Utf8Entry)\n@@ -46,0 +58,2 @@\n+     *\n+     * @see ConstantPoolBuilder#stringEntry(String)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/StringEntry.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,0 +27,7 @@\n+import java.io.DataInput;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.MethodModel;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.TypeDescriptor;\n+\n@@ -30,3 +37,21 @@\n- * Models a {@code CONSTANT_UTF8_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.7 The CONSTANT_Utf8_info Structure\n+ * Models a {@code CONSTANT_UTF8_info} constant, representing strings, in the\n+ * constant pool of a {@code class} file.  This describes strings in the\n+ * {@linkplain DataInput##modified-utf-8 Modified UTF-8} format.\n+ * <p>\n+ * The use of a {@code Utf8Entry} is represented by a {@link String}.\n+ * Conversions are through {@link ConstantPoolBuilder#utf8Entry(String)} and\n+ * {@link #stringValue()}.\n+ * <p>\n+ * Some uses of {@code Utf8Entry} represent field or method {@linkplain\n+ * TypeDescriptor#descriptorString() descriptor strings}, symbolically\n+ * represented as {@link ClassDesc} or {@link MethodTypeDesc}, depending on\n+ * where a {@code Utf8Entry} appear.  Entries representing such uses are created\n+ * with {@link ConstantPoolBuilder#utf8Entry(ClassDesc)} and {@link\n+ * ConstantPoolBuilder#utf8Entry(MethodTypeDesc)}, and they can be converted to\n+ * symbolic descriptors on a per-use-site basis, such as in {@link\n+ * AnnotationValue.OfClass#classSymbol()} and {@link MethodModel#methodTypeSymbol()}.\n+ * <p>\n+ * Unlike most constant pool entries, a UTF-8 entry is of flexible length: it is\n+ * represented as an array structure, with an {@code u2} for the data length in\n+ * bytes, followed by that number of bytes of Modified UTF-8 data.  It can\n+ * represent at most 65535 bytes of data due to the physical restrictions.\n@@ -34,0 +59,2 @@\n+ * @jvms 4.4.7 The {@code CONSTANT_Utf8_info} Structure\n+ * @see DataInput##modified-utf-8 Modified UTF-8\n@@ -42,0 +69,9 @@\n+     *\n+     * @apiNote\n+     * A {@code Utf8Entry} can be used directly as a {@link CharSequence} if\n+     * {@code String} functionalities are not strictly desired.  If only string\n+     * equivalence is desired, {@link #equalsString(String) equalsString} should\n+     * be used.  Reduction of string processing can significantly improve {@code\n+     * class} file reading performance.\n+     *\n+     * @see ConstantPoolBuilder#utf8Entry(String)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/Utf8Entry.java","additions":39,"deletions":3,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * <h2>Provides interfaces describing classfile constant pool entries for the {@link java.lang.classfile} library.<\/h2>\n+ * <h2>Provides interfaces describing constant pool entries for the {@link java.lang.classfile} library.<\/h2>\n@@ -29,1 +29,7 @@\n- * The {@code java.lang.classfile.constantpool} package contains interfaces describing classfile constant pool entries.\n+ * The {@code java.lang.classfile.constantpool} package contains interfaces describing constant pool entries in the\n+ * {@code class} file format.  Constant pool entries are low-level models to faithfully represent the exact structure\n+ * of a {@code class} file.\n+ * <p>\n+ * Unless otherwise specified, passing {@code null} or an array or collection containing a {@code null} element as an\n+ * argument to a constructor or method of any Class-File API class or interface will cause a {@link NullPointerException}\n+ * to be thrown.\n@@ -31,0 +37,38 @@\n+ * <h2 id=\"reading\">Reading the constant pool entries<\/h2>\n+ * When read from {@code class} files, the pool entries are lazily inflated; the contents of these entries, besides the\n+ * bare structure, are not evaluated to speed up parsing.  Entries to users interest, usually accessed from other models\n+ * and elements, have their contents read on demand.  For example, to search for methods, a user should filter first by\n+ * access flags and then by method name, and use {@link Utf8Entry#equalsString(String)} instead of checking equality\n+ * against {@link Utf8Entry#stringValue()}.  This avoids inflation of UTF-8 entries as much as possible:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"isStaticWorkMethod\"}\n+ * <p>\n+ * The entries also define accessors to validated symbolic information with nominal descriptor abstractions from the\n+ * {@link java.lang.constant} package.  These symbolic information accessors perform validation against the read\n+ * {@code class} files, and throw {@link IllegalArgumentException} when the accessed constant pool entry contains\n+ * invalid data.  The nominal descriptors represent validated data, which saves users from extra validations in future\n+ * processing.\n+ * <p>\n+ * Due to the lazy nature of {@code class} file parsing, {@link IllegalArgumentException} indicating malformed\n+ * {@code class} file data can be thrown at any method invocation.  For example, an exception may come from a {@link\n+ * ClassEntry} when it is first read from the constant pool (referring to an invalid index or wrong type of entry), when\n+ * its referred UTF-8 entry is expanded (malformed UTF-8 data), or when its symbolic information is accessed (the string\n+ * is not valid for a class entry).\n+ *\n+ * <h2 id=\"writing\">Writing the constant pool entries<\/h2>\n+ * In general, users do not need to worry about working with the constant pool and its entries when writing {@code\n+ * class} files.  Most Class-File API models and elements have two sets of factory methods: one that accepts symbolic\n+ * information representing the uses, and another that accepts constant pool entries.  The constant pool builder\n+ * associated with {@code class} file builders, {@link ClassFileBuilder#constantPool}, automatically creates or reuses\n+ * pool entries from the symbolic information.  Validated data in symbolic information helps {@code class} file\n+ * generation by avoiding extraneous parsing of raw constant pool entry data.\n+ * <p>\n+ * As always, users can use factories that accept constant pool entries if they already have them by hand, or if they\n+ * desire fine-grained control over {@code class} file generation.\n+ * <p>\n+ * If many models and elements are reused from another {@link ClassModel} in class building, the class building process\n+ * can use a constant pool builder that extends from the given {@code ClassModel}, available through {@link\n+ * ConstantPoolBuilder#of(ClassModel) ConstantPoolBuilder::of(ClassModel)}, so that byte data with constant pool\n+ * references can be copied in batch, speeding up class building.  This is especially applicable to class transformations,\n+ * and {@link ClassFile.ConstantPoolSharingOption ConstantPoolSharingOption} exists to control this behavior.\n+ *\n+ * @jvms 4.4 The Constant Pool\n@@ -35,0 +79,4 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileBuilder;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.MethodModel;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/package-info.java","additions":50,"deletions":2,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.constantpool.snippet;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+\n+class PackageSnippets {\n+\n+    \/\/ @start region=isStaticWorkMethod\n+    boolean isStaticWorkMethod(MethodModel method) {\n+        \/\/ check static flag first to avoid unnecessary evaluation of UTF-8 entry\n+        return (method.flags().flagsMask() & ClassFile.ACC_STATIC) != 0\n+                \/\/ use equalsString to avoid full conversion to String for comparison\n+                \/\/ the Utf8Entry can also act as a basic CharSequence without full conversion\n+                \/\/ @link substring=\"methodName\" target=\"MethodModel#methodName\" :\n+                && method.methodName().equalsString(\"work\"); \/\/ @link substring=\"equalsString\" target=\"Utf8Entry#equalsString\"\n+    }\n+    \/\/ @end\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/snippet-files\/PackageSnippets.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -45,1 +45,3 @@\n-        \"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java\"})\n+        \"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/snippet-files\/PackageSnippets.java\",\n+        \"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java\"\n+    })\n","filename":"test\/jdk\/jdk\/classfile\/SnippetsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}