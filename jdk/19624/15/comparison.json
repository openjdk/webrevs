{"files":[{"patch":"@@ -168,0 +168,1 @@\n+        java.management.rmi,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -111,1 +112,0 @@\n-\n@@ -113,0 +113,1 @@\n+\n@@ -118,1 +119,6 @@\n-            this.acc = JMXSubjectDomainCombiner.getContext(subject);\n+            if (SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                \/\/ SM is allowed.  Will use ACC created with Subject:\n+                this.acc = JMXSubjectDomainCombiner.getContext(subject);\n+            } else {\n+                this.acc = null;\n+            }\n@@ -1295,4 +1301,14 @@\n-            if (acc == null)\n-                return action.run();\n-            else\n-                return AccessController.doPrivileged(action, acc);\n+            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                \/\/ Modern case\n+                if (subject == null)\n+                    return action.run();\n+                else\n+                    return Subject.doAs(subject, action);\n+            } else {\n+                \/\/ SM permitted\n+                if (acc == null) {\n+                    return action.run(); \/\/ No Subject or ACC\n+                } else {\n+                    return AccessController.doPrivileged(action, acc);\n+                }\n+            }\n@@ -1414,7 +1430,14 @@\n-            if (acc == null) {\n-                try {\n-                    return op.run();\n-                } catch (Exception e) {\n-                    if (e instanceof RuntimeException)\n-                        throw (RuntimeException) e;\n-                    throw new PrivilegedActionException(e);\n+            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                \/\/ Modern case\n+                if (subject == null) {\n+                    try {\n+                        return op.run();\n+                    } catch (Exception e) {\n+                        if (e instanceof RuntimeException) {\n+                            throw (RuntimeException) e;\n+                        } else {\n+                            throw new PrivilegedActionException(e);\n+                        }\n+                    }\n+                } else {\n+                    return Subject.doAs(subject, op);\n@@ -1423,1 +1446,14 @@\n-                return AccessController.doPrivileged(op, acc);\n+                \/\/ SM permitted\n+                if (acc == null) {\n+                    try {\n+                        return op.run();\n+                    } catch (Exception e) {\n+                        if (e instanceof RuntimeException) {\n+                            throw (RuntimeException) e;\n+                        } else {\n+                            throw new PrivilegedActionException(e);\n+                        }\n+                    }\n+                } else {\n+                    return AccessController.doPrivileged(op, acc);\n+                }\n@@ -1588,7 +1624,17 @@\n-            try{\n-                if (acc != null) {\n-                    return AccessController.doPrivileged(\n-                            (PrivilegedExceptionAction<T>) () ->\n-                                    wrappedClass.cast(mo.get()), acc);\n-                }else{\n-                    return wrappedClass.cast(mo.get());\n+            try {\n+                if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                    \/\/ Modern case\n+                    if (subject != null) {\n+                        return Subject.doAs(subject, (PrivilegedExceptionAction<T>) () -> wrappedClass.cast(mo.get()));\n+                    } else {\n+                        return wrappedClass.cast(mo.get());\n+                    }\n+                } else {\n+                    \/\/ SM permitted\n+                    if (acc != null) {\n+                        return AccessController.doPrivileged(\n+                                (PrivilegedExceptionAction<T>) () ->\n+                                        wrappedClass.cast(mo.get()), acc);\n+                    } else {\n+                        return wrappedClass.cast(mo.get());\n+                    }\n@@ -1596,1 +1642,1 @@\n-            }finally{\n+            } finally {\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl.java","additions":68,"deletions":22,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -346,1 +347,0 @@\n-\n@@ -349,1 +349,1 @@\n-        return Subject.getSubject(AccessController.getContext());\n+        return Subject.current();\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/internal\/ServerNotifForwarder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -303,0 +304,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -304,8 +306,9 @@\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc = AccessController.getContext();\n-        @SuppressWarnings(\"removal\")\n-        final Subject s =\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Subject run() {\n-                        return Subject.getSubject(acc);\n-                    }\n+        Subject s = null;\n+        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+            s = Subject.current();\n+        } else {\n+            final AccessControlContext acc = AccessController.getContext();\n+            s = AccessController.doPrivileged(new PrivilegedAction<>() {\n+                        public Subject run() {\n+                            return Subject.getSubject(acc);\n+                        }\n@@ -313,0 +316,1 @@\n+        }\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/MBeanServerFileAccessController.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,2 @@\n+import javax.security.auth.Subject;\n+import jdk.internal.access.SharedSecrets;\n@@ -172,1 +174,1 @@\n-     * AccessControlContext of the Monitor.start() caller.\n+     * Subject and possibly AccessControlContext of the Monitor.start() caller.\n@@ -174,0 +176,1 @@\n+    private volatile Subject subject;\n@@ -716,1 +719,1 @@\n-            \/\/ Cache the AccessControlContext of the Monitor.start() caller.\n+            \/\/ Cache the Subject or AccessControlContext of the Monitor.start() caller.\n@@ -719,1 +722,5 @@\n-            acc = AccessController.getContext();\n+            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                subject = Subject.current();\n+            } else {\n+                acc = AccessController.getContext();\n+            }\n@@ -750,1 +757,1 @@\n-            \/\/ Reset the AccessControlContext.\n+            \/\/ Reset the Subject and AccessControlContext.\n@@ -752,0 +759,1 @@\n+            subject = null;\n@@ -1515,0 +1523,1 @@\n+            final Subject s;\n@@ -1518,0 +1527,1 @@\n+                s  = Monitor.this.subject;\n@@ -1534,2 +1544,13 @@\n-            if (ac == null) {\n-                throw new SecurityException(\"AccessControlContext cannot be null\");\n+            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n+                \/\/ No SecurityManager permitted:\n+                if (s == null) {\n+                    action.run();\n+                } else {\n+                    Subject.doAs(s, action);\n+                }\n+            } else {\n+                if (ac == null) {\n+                    throw new SecurityException(\"AccessControlContext cannot be null\");\n+                }\n+                \/\/ ACC means SM is permitted.\n+                AccessController.doPrivileged(action, ac);\n@@ -1537,1 +1558,0 @@\n-            AccessController.doPrivileged(action, ac);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/monitor\/Monitor.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+ * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 1\n+ * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 2\n+ * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 3\n","filename":"test\/jdk\/javax\/management\/monitor\/StartStopTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+ *\n+ * @run main\/othervm ThreadPoolAccTest\n@@ -34,0 +36,1 @@\n+ * @run main\/othervm -Djava.security.manager=allow -DThreadPoolAccTest.useGetSubjectACC=true ThreadPoolAccTest\n@@ -40,0 +43,1 @@\n+import java.util.concurrent.Callable;\n@@ -70,1 +74,3 @@\n-            Subject subject = Subject.getSubject(AccessController.getContext());\n+            \/\/ Use Subject.current() unless test Property is set.\n+            Subject subject = Boolean.getBoolean(\"ThreadPoolAccTest.useGetSubjectACC\") ?\n+                              Subject.getSubject(AccessController.getContext()) : Subject.current();\n@@ -139,1 +145,3 @@\n-                Subject.doAs(subject, action);\n+                \/\/ Subject.doAs(subject, action);\n+                Callable<Void> c = (Callable<Void>) () -> action.run();\n+                Subject.callAs(subject, c);\n","filename":"test\/jdk\/javax\/management\/monitor\/ThreadPoolAccTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+ *\n+ * @run main\/othervm NotificationAccessControllerTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotificationAccessControllerTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ *\n@@ -35,0 +36,1 @@\n+ * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 1\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotificationEmissionTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @run main\/othervm NonJMXPrincipalsTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAccessFile\/NonJMXPrincipalsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+ *\n+ * @run main\/othervm PasswordAccessFileTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAccessFile\/PasswordAccessFileTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+ *\n+ * @run main\/othervm RMIAltAuthTest\n@@ -34,0 +36,1 @@\n+ * @run main\/othervm -Djava.security.manager=allow -DSimpleStandard.useGetSubjectACC=true RMIAltAuthTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIAltAuthTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+ *\n+ * @run main\/othervm RMIPasswdAuthTest\n@@ -34,0 +36,1 @@\n+ * @run main\/othervm -Djava.security.manager=allow -DSimpleStandard.useGetSubjectACC=true RMIPasswdAuthTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIPasswdAuthTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,2 +155,2 @@\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n+        Subject subject = Boolean.getBoolean(\"SimpleStandard.useGetSubjectACC\") ?\n+                          Subject.getSubject(AccessController.getContext()) : Subject.current();\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/SimpleStandard.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+ *\n+ * @run main\/othervm\/timeout=300 -DDEBUG_STANDARD -Dusername=username1 -Dpassword=password1 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials\n+ * @run main\/othervm\/timeout=300 -DDEBUG_STANDARD -Dusername=username2 -Dpassword=password2 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedSetException -expectedInvokeException\n+ * @run main\/othervm\/timeout=300 -DDEBUG_STANDARD -Dusername=username6 -Dpassword=password6 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n+ *\n@@ -35,0 +40,1 @@\n+ *\n","filename":"test\/jdk\/javax\/management\/security\/AuthorizationTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+ * @run main\/othervm\/timeout=300 RmiBootstrapTest .*_test.*.in\n@@ -75,0 +76,1 @@\n+ * @run main\/othervm\/timeout=300 RmiBootstrapTest .*_ssltest.*.in\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiBootstrapTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}