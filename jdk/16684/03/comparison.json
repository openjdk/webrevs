{"files":[{"patch":"@@ -266,1 +266,5 @@\n-        setsockopt(fd, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl)) < 0) {\n+            NET_ThrowNew(env, errno, \"setsockopt IP_TTL failed\");\n+            close(fd);\n+            return JNI_FALSE;\n+        }\n@@ -352,1 +356,5 @@\n-    setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &size, sizeof(size));\n+    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &size, sizeof(size)) < 0) {\n+        NET_ThrowNew(env, errno, \"setsockopt SO_RCVBUF failed\");\n+        close(fd);\n+        return JNI_FALSE;\n+    }\n@@ -356,1 +364,5 @@\n-        setsockopt(fd, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl)) < 0) {\n+            NET_ThrowNew(env, errno, \"setsockopt IP_TTL failed\");\n+            close(fd);\n+            return JNI_FALSE;\n+        }\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet4AddressImpl.c","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -466,1 +466,5 @@\n-        setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &ttl, sizeof(ttl)) < 0) {\n+            NET_ThrowNew(env, errno, \"setsockopt IPV6_UNICAST_HOPS failed\");\n+            close(fd);\n+            return JNI_FALSE;\n+        }\n@@ -471,1 +475,1 @@\n-        if (bind(fd, &netif->sa, sizeof(struct sockaddr_in6)) <0) {\n+        if (bind(fd, &netif->sa, sizeof(struct sockaddr_in6)) < 0) {\n@@ -560,1 +564,5 @@\n-    setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &size, sizeof(size));\n+    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &size, sizeof(size)) < 0) {\n+        NET_ThrowNew(env, errno, \"setsockopt SO_RCVBUF failed\");\n+        close(fd);\n+        return JNI_FALSE;\n+    }\n@@ -564,1 +572,5 @@\n-        setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &ttl, sizeof(ttl)) < 0) {\n+            NET_ThrowNew(env, errno, \"setsockopt IPV6_UNICAST_HOPS failed\");\n+            close(fd);\n+            return JNI_FALSE;\n+        }\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet6AddressImpl.c","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -539,1 +539,3 @@\n-            setsockopt(fd, level, SO_REUSEPORT, arg, len);\n+            if (setsockopt(fd, level, SO_REUSEPORT, arg, len) < 0) {\n+                return -1;\n+            }\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -235,1 +235,5 @@\n-        setsockopt(fd, IPPROTO_IP, IP_TTL, (const char *)&ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IP, IP_TTL, (const char *)&ttl, sizeof(ttl)) == SOCKET_ERROR) {\n+            NET_ThrowNew(env, WSAGetLastError(), \"setsockopt IP_TTL failed\");\n+            closesocket(fd);\n+            return JNI_FALSE;\n+        }\n","filename":"src\/java.base\/windows\/native\/libnet\/Inet4AddressImpl.c","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -313,1 +313,5 @@\n-        setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, (const char *)&ttl, sizeof(ttl));\n+        if (setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, (const char *)&ttl, sizeof(ttl)) == SOCKET_ERROR) {\n+            NET_ThrowNew(env, WSAGetLastError(), \"setsockopt IPV6_UNICAST_HOPS failed\");\n+            closesocket(fd);\n+            return JNI_FALSE;\n+        }\n","filename":"src\/java.base\/windows\/native\/libnet\/Inet6AddressImpl.c","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-        \/* IPV6_V6ONLY is true by default *\/\n+        \/* Attempt to disable IPV6_V6ONLY to ensure dual-socket support; ignore errors *\/\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/Net.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,3 @@\n-    setsockopt(s2, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT, (char *)&s1, sizeof(s1));\n+    if (setsockopt(s2, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT, (char *)&s1, sizeof(s1)) == SOCKET_ERROR) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"setsockopt failed\");\n+    }\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/WindowsAsynchronousServerSocketChannelImpl.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,3 @@\n-    setsockopt(s, SOL_SOCKET, SO_UPDATE_CONNECT_CONTEXT, NULL, 0);\n+    if (setsockopt(s, SOL_SOCKET, SO_UPDATE_CONNECT_CONTEXT, NULL, 0) == SOCKET_ERROR) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"setsockopt failed\");\n+    }\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/WindowsAsynchronousSocketChannelImpl.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}