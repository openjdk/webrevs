{"files":[{"patch":"@@ -4859,0 +4859,10 @@\n+  char buf[16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n+  \/\/ We may need to truncate the thread name. Since a common pattern is\n+  \/\/ for thread names is to be both longer than 15 chars and have a trailing number\n+  \/\/ (\"DispatcherWorkerThread21\", \"C2 CompilerThread#54\" etc), we truncate \"smartly\"\n+  \/\/ by attempting to preserve the trailing number in the name if there is one\n+  \/\/ (e.g. \"DispatcherWorkerThread21\" -> \"DispatcherW..21\").\n+  StringUtils::abbreviate_preserve_trailing_number(name, buf, sizeof(buf));\n+  \/\/ set name in kernel\n+  int rc = prctl(PR_SET_NAME, buf);\n+  assert(rc == 0, \"prctl(PR_SET_NAME) failed\");\n@@ -4860,4 +4870,2 @@\n-    char buf [16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n-    (void) os::snprintf(buf, sizeof(buf), \"%s\", name);\n-    buf[sizeof(buf) - 1] = '\\0';\n-    const int rc = Linux::_pthread_setname_np(pthread_self(), buf);\n+    \/\/ set name in pthread lib\n+    rc = Linux::_pthread_setname_np(pthread_self(), buf);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -145,0 +146,40 @@\n+\n+int StringUtils::find_trailing_number(const char* s) {\n+  precond(s != nullptr);\n+  const size_t l = strlen(s);\n+  size_t pos = l;\n+  while (isdigit(s[pos - 1]) && pos > 0) {\n+    pos--;\n+  }\n+  return pos < l ? checked_cast<int>(pos) : -1;\n+}\n+\n+char* StringUtils::abbreviate_preserve_trailing_number(const char* s, char* out, size_t outlen) {\n+  precond(out != nullptr && s != nullptr && outlen > 0);\n+  constexpr int dots = 2;\n+  const int maxchars = checked_cast<int>(outlen) - 1;\n+  const int l = checked_cast<int>(strlen(s));\n+  \/\/ Impose some reasonable length below which we just truncate dumbly\n+  const int smart_truncation_threshold = 4 \/* prefix *\/ + dots + 4 \/* space for number *\/;\n+  if (l <= maxchars || maxchars < smart_truncation_threshold) {\n+    (void) os::snprintf(out, outlen, \"%s\", s); \/\/ plain copy, possibly truncating\n+  } else {\n+    const int number_pos = find_trailing_number(s);\n+    if (number_pos == -1) {\n+      \/\/ No trailing number, just truncate\n+      \/\/ Impose some reasonable length below which we just truncate\n+      (void) os::snprintf(out, outlen, \"%s\", s);\n+    } else {\n+      const int l = checked_cast<int>(strlen(s));\n+      const int max_number_len = maxchars \/ 2; \/\/ numbers longer than this are truncated at the beginning (\"WorkerThread123123123\", 10 outlen => \"Work..3123\")\n+      const int number_len = MIN2(max_number_len, l - number_pos);\n+      const int corrected_number_pos = l - number_len; \/\/ since we may have to also truncate the number\n+      const int prefix_len = maxchars - dots - number_len;\n+      assert(prefix_len > 0 && number_len > 0, \"Sanity\");\n+      (void) os::snprintf(out, outlen, \"%.*s..%s\", prefix_len, s, s + corrected_number_pos);\n+    }\n+  }\n+  return out;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -58,0 +58,14 @@\n+  \/\/ Given a string that may or may not end on a decimal number, find position of that\n+  \/\/ number. Returns -1 if no number was found to trail the string, or if string is empty.\n+  static int find_trailing_number(const char* s);\n+\n+  \/\/ Given a string of unknown length and an output buffer, fit string into output buffer such\n+  \/\/ that:\n+  \/\/ - plain copy if it fits\n+  \/\/ - if it does not fit and it does not end in a number, truncate\n+  \/\/ - if it does not fit and it ends in a number, truncate the middle while preserving\n+  \/\/   the trailing number. The resulting string will be assembled from <first part>..<number trail>,\n+  \/\/   e.g. \"C1 CompilerThread2\", limited to 15 chars, would be \"C1 CompilerT..2\"\n+  \/\/ Returns: out\n+  static char* abbreviate_preserve_trailing_number(const char* s, char* out, size_t outlen);\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,0 +74,47 @@\n+\n+TEST_VM(StringUtils, find_trailing_number) {\n+  static const struct {\n+    const char* s; int expected;\n+  } totest[] = {\n+      { \"\",       -1 },\n+      { \"Hallo\",  -1 },\n+      { \"123\",     0 },\n+      { \"A123\",    1 },\n+      { \"123A\",   -1 },\n+      { \"C2 CompilerThread12\", 17 },\n+      { nullptr, -1}\n+  };\n+  for (int i = 0; totest[i].s != nullptr; i++) {\n+    ASSERT_EQ( StringUtils::find_trailing_number(totest[i].s), totest[i].expected );\n+  }\n+}\n+\n+TEST_VM(StringUtils, abbreviate_preserve_trailing_number) {\n+  static const struct {\n+    const char* s; size_t outlen; const char* expected;\n+  } totest[] = {\n+      \/\/ No truncation needed\n+      { \"\",       10, \"\" },\n+      { \"Hallo\",  10, \"Hallo\" },\n+      { \"123\",    10, \"123\" },\n+      { \"C2 CompilerThread1267223\",    100 + 1,  \"C2 CompilerThread1267223\" },\n+      \/\/ Output buffer too short, plain truncation expected:\n+      { \"C2 CompilerThread12\",           7 + 1,  \"C2 Comp\" },\n+      \/\/ Output buffer long enough to abbreviate:\n+      \/\/                                     .123456789.123456789.1234567899\n+      { \"C2 CompilerThread12\",          10 + 1,  \"C2 Com..12\" },\n+      { \"C2 CompilerThread12\",          15 + 1,  \"C2 Compiler..12\" },\n+      { \"C2 CompilerThread\",            10 + 1,  \"C2 Compile\" },\n+      { \"C2 CompilerThread1\",           15 + 1,  \"C2 CompilerT..1\" },\n+      { \"C2 CompilerThread1267223\",     15 + 1,  \"C2 Com..1267223\" },\n+      \/\/ Number would be eating up more than half of output len, start of number is sacrificed:\n+      { \"C2 CompilerThread1334267223\",  15 + 1,  \"C2 Com..4267223\" },\n+      { nullptr, 0, nullptr }\n+  };\n+  char out[100 + 1];\n+  for (int i = 0; totest[i].s != nullptr; i++) {\n+    assert(sizeof(out) >= totest[i].outlen, \"Sanity\");\n+    EXPECT_STREQ(StringUtils::abbreviate_preserve_trailing_number(totest[i].s, out, totest[i].outlen),\n+                 totest[i].expected) << \" for case \" << i;\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}