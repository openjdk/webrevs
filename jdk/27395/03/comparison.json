{"files":[{"patch":"@@ -4859,0 +4859,10 @@\n+  char buf[16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n+  \/\/ We may need to truncate the thread name. Since a common pattern is\n+  \/\/ for thread names is to be both longer than 15 chars and have a trailing number\n+  \/\/ (\"DispatcherWorkerThread21\", \"C2 CompilerThread#54\" etc), we truncate \"smartly\"\n+  \/\/ by attempting to preserve the trailing number in the name if there is one\n+  \/\/ (e.g. \"DispatcherWorkerThread21\" -> \"DispatcherW..21\").\n+  StringUtils::truncate_middle(name, buf, sizeof(buf));\n+  \/\/ set name in kernel\n+  int rc = prctl(PR_SET_NAME, buf);\n+  assert(rc == 0, \"prctl(PR_SET_NAME) failed\");\n@@ -4860,4 +4870,2 @@\n-    char buf [16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n-    (void) os::snprintf(buf, sizeof(buf), \"%s\", name);\n-    buf[sizeof(buf) - 1] = '\\0';\n-    const int rc = Linux::_pthread_setname_np(pthread_self(), buf);\n+    \/\/ set name in pthread lib\n+    rc = Linux::_pthread_setname_np(pthread_self(), buf);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -145,0 +146,19 @@\n+\n+char* StringUtils::truncate_middle(const char* s, char* out, size_t outlen) {\n+  precond(out != nullptr && s != nullptr && outlen > 0);\n+  constexpr int dots = 2;\n+  const int maxchars = checked_cast<int>(outlen) - 1;\n+  const int l = checked_cast<int>(strlen(s));\n+  \/\/ Impose some reasonable length below which we just truncate dumbly (4 chars each for head\/tail)\n+  constexpr int smart_truncation_threshold = dots + (4 * 2);\n+  if (l <= maxchars || maxchars < smart_truncation_threshold) {\n+    (void) os::snprintf(out, outlen, \"%s\", s); \/\/ plain copy, may or may not truncate\n+  } else {\n+    const int half = (maxchars - dots) \/ 2;\n+    const char* tail = s + l - half;\n+    (void) os::snprintf(out, outlen, \"%.*s..%s\", half, s, tail);\n+  }\n+  return out;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,6 @@\n+  \/\/ Given a string of unknown length and an output buffer, fit string into output buffer such\n+  \/\/ that we truncate the string in the middle, if needed.\n+  \/\/   e.g. \"C1 CompilerThread2\", limited to 15 chars, would be \"C1 Com..Thread2\"\n+  \/\/ Returns: out\n+  static char* truncate_middle(const char* s, char* out, size_t outlen);\n+\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,0 +74,26 @@\n+\n+TEST_VM(StringUtils, truncate_middle) {\n+  static const struct {\n+    const char* s; size_t outlen; const char* expected;\n+  } totest[] = {\n+      \/\/ No truncation needed\n+      { \"\",       10, \"\" },\n+      { \"Hallo\",  10, \"Hallo\" },\n+      { \"123\",    10, \"123\" },\n+      { \"C2 CompilerThread1267223\",    100 + 1,  \"C2 CompilerThread1267223\" },\n+      \/\/ Output buffer too short, plain truncation expected:\n+      { \"C2 CompilerThread12\",           7 + 1,  \"C2 Comp\" },\n+      \/\/ Output buffer long enough to abbreviate:\n+      \/\/                                     .123456789.123456789.1234567899\n+      { \"C2 CompilerThread12\",          10 + 1,  \"C2 C..ad12\" },\n+      { \"C2 CompilerThread12\",          15 + 1,  \"C2 Com..read12\" },\n+      { \"C2 CompilerThread1267223\",     15 + 1,  \"C2 Com..267223\" },\n+      { nullptr, 0, nullptr }\n+  };\n+  char out[100 + 1];\n+  for (int i = 0; totest[i].s != nullptr; i++) {\n+    assert(sizeof(out) >= totest[i].outlen, \"Sanity\");\n+    EXPECT_STREQ(StringUtils::truncate_middle(totest[i].s, out, totest[i].outlen),\n+                 totest[i].expected) << \" for case \" << i;\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}