{"files":[{"patch":"@@ -163,1 +163,0 @@\n-int (*os::Linux::_pthread_setname_np)(pthread_t, const char*) = nullptr;\n@@ -4379,4 +4378,0 @@\n-  \/\/ retrieve entry point for pthread_setname_np\n-  Linux::_pthread_setname_np =\n-    (int(*)(pthread_t, const char*))dlsym(RTLD_DEFAULT, \"pthread_setname_np\");\n-\n@@ -4859,8 +4854,18 @@\n-  if (Linux::_pthread_setname_np) {\n-    char buf [16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n-    (void) os::snprintf(buf, sizeof(buf), \"%s\", name);\n-    buf[sizeof(buf) - 1] = '\\0';\n-    const int rc = Linux::_pthread_setname_np(pthread_self(), buf);\n-    \/\/ ERANGE should not happen; all other errors should just be ignored.\n-    assert(rc != ERANGE, \"pthread_setname_np failed\");\n-  }\n+  char buf[16]; \/\/ according to glibc manpage, 16 chars incl. '\/0'\n+  \/\/ We may need to truncate the thread name. Since a common pattern\n+  \/\/ for thread names is to be both longer than 15 chars and have a\n+  \/\/ trailing number (\"DispatcherWorkerThread21\", \"C2 CompilerThread#54\" etc),\n+  \/\/ we preserve the end of the thread name by truncating the middle\n+  \/\/ (e.g. \"Dispatc..read21\").\n+  const size_t len = strlen(name);\n+  if (len < sizeof(buf)) {\n+    strcpy(buf, name);\n+  } else {\n+    (void) os::snprintf(buf, sizeof(buf), \"%.7s..%.6s\", name, name + len - 6);\n+  }\n+  \/\/ Note: we use the system call here instead of calling pthread_setname_np\n+  \/\/ since this is the only way to make ASAN aware of our thread names. Even\n+  \/\/ though ASAN intercepts both prctl and pthread_setname_np, it only processes\n+  \/\/ the thread name given to the former.\n+  int rc = prctl(PR_SET_NAME, buf);\n+  assert(rc == 0, \"prctl(PR_SET_NAME) failed\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-  static int (*_pthread_setname_np)(pthread_t, const char*);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include <sys\/prctl.h>\n@@ -471,0 +472,23 @@\n+static void test_set_thread_name(const char* name, const char* expected) {\n+  os::set_native_thread_name(name);\n+  char buf[16];\n+  int rc = prctl(PR_GET_NAME, buf);\n+  ASSERT_EQ(0, rc);\n+  ASSERT_STREQ(buf, expected);\n+}\n+\n+TEST_VM(os_linux, set_thread_name) {\n+  char buf[16];\n+  \/\/ retrieve current name\n+  int rc = prctl(PR_GET_NAME, buf);\n+  ASSERT_EQ(0, rc);\n+\n+  test_set_thread_name(\"shortname\", \"shortname\");\n+  test_set_thread_name(\"012345678901234\",  \"012345678901234\");\n+  test_set_thread_name(\"0123456789012345\", \"0123456..012345\");\n+  test_set_thread_name(\"MyAllocationWorkerThread22\", \"MyAlloc..read22\");\n+\n+  \/\/ restore current name\n+  test_set_thread_name(buf, buf);\n+}\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}