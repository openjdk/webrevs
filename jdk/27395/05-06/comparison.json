{"files":[{"patch":"@@ -163,1 +163,0 @@\n-int (*os::Linux::_pthread_setname_np)(pthread_t, const char*) = nullptr;\n@@ -4379,4 +4378,0 @@\n-  \/\/ retrieve entry point for pthread_setname_np\n-  Linux::_pthread_setname_np =\n-    (int(*)(pthread_t, const char*))dlsym(RTLD_DEFAULT, \"pthread_setname_np\");\n-\n@@ -4871,1 +4866,4 @@\n-  \/\/ set name in kernel\n+  \/\/ Note: we use the system call here instead of calling pthread_setname_np\n+  \/\/ since this is the only way to make ASAN aware of our thread names. Even\n+  \/\/ though ASAN intercepts both prctl and pthread_setname_np, it only processes\n+  \/\/ the thread name given to the former.\n@@ -4874,6 +4872,0 @@\n-  if (Linux::_pthread_setname_np) {\n-    \/\/ set name in pthread lib\n-    rc = Linux::_pthread_setname_np(pthread_self(), buf);\n-    \/\/ ERANGE should not happen; all other errors should just be ignored.\n-    assert(rc != ERANGE, \"pthread_setname_np failed\");\n-  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-  static int (*_pthread_setname_np)(pthread_t, const char*);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include <sys\/prctl.h>\n@@ -39,0 +38,1 @@\n+#include <sys\/prctl.h>\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}