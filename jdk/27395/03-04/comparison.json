{"files":[{"patch":"@@ -4860,6 +4860,11 @@\n-  \/\/ We may need to truncate the thread name. Since a common pattern is\n-  \/\/ for thread names is to be both longer than 15 chars and have a trailing number\n-  \/\/ (\"DispatcherWorkerThread21\", \"C2 CompilerThread#54\" etc), we truncate \"smartly\"\n-  \/\/ by attempting to preserve the trailing number in the name if there is one\n-  \/\/ (e.g. \"DispatcherWorkerThread21\" -> \"DispatcherW..21\").\n-  StringUtils::truncate_middle(name, buf, sizeof(buf));\n+  \/\/ We may need to truncate the thread name. Since a common pattern\n+  \/\/ for thread names is to be both longer than 15 chars and have a\n+  \/\/ trailing number (\"DispatcherWorkerThread21\", \"C2 CompilerThread#54\" etc),\n+  \/\/ we preserve the end of the thread name by truncating the middle\n+  \/\/ (e.g. \"Dispatc..read21\").\n+  const size_t len = strlen(name);\n+  if (len < sizeof(buf)) {\n+    strcpy(buf, name);\n+  } else {\n+    (void) os::snprintf(buf, sizeof(buf), \"%.7s..%.6s\", name, name + len - 6);\n+  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -146,19 +146,0 @@\n-\n-char* StringUtils::truncate_middle(const char* s, char* out, size_t outlen) {\n-  precond(out != nullptr && s != nullptr && outlen > 0);\n-  constexpr int dots = 2;\n-  const int maxchars = checked_cast<int>(outlen) - 1;\n-  const int l = checked_cast<int>(strlen(s));\n-  \/\/ Impose some reasonable length below which we just truncate dumbly (4 chars each for head\/tail)\n-  constexpr int smart_truncation_threshold = dots + (4 * 2);\n-  if (l <= maxchars || maxchars < smart_truncation_threshold) {\n-    (void) os::snprintf(out, outlen, \"%s\", s); \/\/ plain copy, may or may not truncate\n-  } else {\n-    const int half = (maxchars - dots) \/ 2;\n-    const char* tail = s + l - half;\n-    (void) os::snprintf(out, outlen, \"%.*s..%s\", half, s, tail);\n-  }\n-  return out;\n-}\n-\n-\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,6 +58,0 @@\n-  \/\/ Given a string of unknown length and an output buffer, fit string into output buffer such\n-  \/\/ that we truncate the string in the middle, if needed.\n-  \/\/   e.g. \"C1 CompilerThread2\", limited to 15 chars, would be \"C1 Com..Thread2\"\n-  \/\/ Returns: out\n-  static char* truncate_middle(const char* s, char* out, size_t outlen);\n-\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include <sys\/prctl.h>\n@@ -471,0 +472,21 @@\n+static void test_set_thread_name(const char* name, const char* expected) {\n+  os::set_native_thread_name(name);\n+  char buf[16];\n+  int rc = prctl(PR_GET_NAME, buf);\n+  ASSERT_EQ(0, rc);\n+  ASSERT_STREQ(buf, expected);\n+}\n+\n+TEST_VM(os_linux, set_thread_name) {\n+  char buf[16];\n+  \/\/ retrieve current name\n+  int rc = prctl(PR_GET_NAME, buf);\n+  ASSERT_EQ(0, rc);\n+\n+  test_set_thread_name(\"shortname\", \"shortname\");\n+  test_set_thread_name(\"MyAllocationWorkerThread22\", \"MyAlloc..read22\");\n+\n+  \/\/ restore current name\n+  test_set_thread_name(buf, buf);\n+}\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -74,26 +74,0 @@\n-\n-TEST_VM(StringUtils, truncate_middle) {\n-  static const struct {\n-    const char* s; size_t outlen; const char* expected;\n-  } totest[] = {\n-      \/\/ No truncation needed\n-      { \"\",       10, \"\" },\n-      { \"Hallo\",  10, \"Hallo\" },\n-      { \"123\",    10, \"123\" },\n-      { \"C2 CompilerThread1267223\",    100 + 1,  \"C2 CompilerThread1267223\" },\n-      \/\/ Output buffer too short, plain truncation expected:\n-      { \"C2 CompilerThread12\",           7 + 1,  \"C2 Comp\" },\n-      \/\/ Output buffer long enough to abbreviate:\n-      \/\/                                     .123456789.123456789.1234567899\n-      { \"C2 CompilerThread12\",          10 + 1,  \"C2 C..ad12\" },\n-      { \"C2 CompilerThread12\",          15 + 1,  \"C2 Com..read12\" },\n-      { \"C2 CompilerThread1267223\",     15 + 1,  \"C2 Com..267223\" },\n-      { nullptr, 0, nullptr }\n-  };\n-  char out[100 + 1];\n-  for (int i = 0; totest[i].s != nullptr; i++) {\n-    assert(sizeof(out) >= totest[i].outlen, \"Sanity\");\n-    EXPECT_STREQ(StringUtils::truncate_middle(totest[i].s, out, totest[i].outlen),\n-                 totest[i].expected) << \" for case \" << i;\n-  }\n-}\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}