{"files":[{"patch":"@@ -4865,1 +4865,1 @@\n-  StringUtils::abbreviate_preserve_trailing_number(name, buf, sizeof(buf));\n+  StringUtils::truncate_middle(name, buf, sizeof(buf));\n@@ -4868,1 +4868,2 @@\n-  assert(rc == 0, \"prctl(PR_SET_NAME) failed\");\n+  \/\/assert(rc == 0, \"prctl(PR_SET_NAME) failed\");\n+  \/\/int rc;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,11 +147,1 @@\n-int StringUtils::find_trailing_number(const char* s) {\n-  precond(s != nullptr);\n-  const size_t l = strlen(s);\n-  size_t pos = l;\n-  while (isdigit(s[pos - 1]) && pos > 0) {\n-    pos--;\n-  }\n-  return pos < l ? checked_cast<int>(pos) : -1;\n-}\n-\n-char* StringUtils::abbreviate_preserve_trailing_number(const char* s, char* out, size_t outlen) {\n+char* StringUtils::truncate_middle(const char* s, char* out, size_t outlen) {\n@@ -162,2 +152,2 @@\n-  \/\/ Impose some reasonable length below which we just truncate dumbly\n-  const int smart_truncation_threshold = 4 \/* prefix *\/ + dots + 4 \/* space for number *\/;\n+  \/\/ Impose some reasonable length below which we just truncate dumbly (4 chars each for head\/tail)\n+  constexpr int smart_truncation_threshold = dots + (4 * 2);\n@@ -165,1 +155,1 @@\n-    (void) os::snprintf(out, outlen, \"%s\", s); \/\/ plain copy, possibly truncating\n+    (void) os::snprintf(out, outlen, \"%s\", s); \/\/ plain copy, may or may not truncate\n@@ -167,14 +157,3 @@\n-    const int number_pos = find_trailing_number(s);\n-    if (number_pos == -1) {\n-      \/\/ No trailing number, just truncate\n-      \/\/ Impose some reasonable length below which we just truncate\n-      (void) os::snprintf(out, outlen, \"%s\", s);\n-    } else {\n-      const int l = checked_cast<int>(strlen(s));\n-      const int max_number_len = maxchars \/ 2; \/\/ numbers longer than this are truncated at the beginning (\"WorkerThread123123123\", 10 outlen => \"Work..3123\")\n-      const int number_len = MIN2(max_number_len, l - number_pos);\n-      const int corrected_number_pos = l - number_len; \/\/ since we may have to also truncate the number\n-      const int prefix_len = maxchars - dots - number_len;\n-      assert(prefix_len > 0 && number_len > 0, \"Sanity\");\n-      (void) os::snprintf(out, outlen, \"%.*s..%s\", prefix_len, s, s + corrected_number_pos);\n-    }\n+    const int half = (maxchars - dots) \/ 2;\n+    const char* tail = s + l - half;\n+    (void) os::snprintf(out, outlen, \"%.*s..%s\", half, s, tail);\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -58,4 +58,0 @@\n-  \/\/ Given a string that may or may not end on a decimal number, find position of that\n-  \/\/ number. Returns -1 if no number was found to trail the string, or if string is empty.\n-  static int find_trailing_number(const char* s);\n-\n@@ -63,6 +59,2 @@\n-  \/\/ that:\n-  \/\/ - plain copy if it fits\n-  \/\/ - if it does not fit and it does not end in a number, truncate\n-  \/\/ - if it does not fit and it ends in a number, truncate the middle while preserving\n-  \/\/   the trailing number. The resulting string will be assembled from <first part>..<number trail>,\n-  \/\/   e.g. \"C1 CompilerThread2\", limited to 15 chars, would be \"C1 CompilerT..2\"\n+  \/\/ that we truncate the string in the middle, if needed.\n+  \/\/   e.g. \"C1 CompilerThread2\", limited to 15 chars, would be \"C1 Com..Thread2\"\n@@ -70,1 +62,1 @@\n-  static char* abbreviate_preserve_trailing_number(const char* s, char* out, size_t outlen);\n+  static char* truncate_middle(const char* s, char* out, size_t outlen);\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -75,18 +75,1 @@\n-TEST_VM(StringUtils, find_trailing_number) {\n-  static const struct {\n-    const char* s; int expected;\n-  } totest[] = {\n-      { \"\",       -1 },\n-      { \"Hallo\",  -1 },\n-      { \"123\",     0 },\n-      { \"A123\",    1 },\n-      { \"123A\",   -1 },\n-      { \"C2 CompilerThread12\", 17 },\n-      { nullptr, -1}\n-  };\n-  for (int i = 0; totest[i].s != nullptr; i++) {\n-    ASSERT_EQ( StringUtils::find_trailing_number(totest[i].s), totest[i].expected );\n-  }\n-}\n-\n-TEST_VM(StringUtils, abbreviate_preserve_trailing_number) {\n+TEST_VM(StringUtils, truncate_middle) {\n@@ -105,7 +88,3 @@\n-      { \"C2 CompilerThread12\",          10 + 1,  \"C2 Com..12\" },\n-      { \"C2 CompilerThread12\",          15 + 1,  \"C2 Compiler..12\" },\n-      { \"C2 CompilerThread\",            10 + 1,  \"C2 Compile\" },\n-      { \"C2 CompilerThread1\",           15 + 1,  \"C2 CompilerT..1\" },\n-      { \"C2 CompilerThread1267223\",     15 + 1,  \"C2 Com..1267223\" },\n-      \/\/ Number would be eating up more than half of output len, start of number is sacrificed:\n-      { \"C2 CompilerThread1334267223\",  15 + 1,  \"C2 Com..4267223\" },\n+      { \"C2 CompilerThread12\",          10 + 1,  \"C2 C..ad12\" },\n+      { \"C2 CompilerThread12\",          15 + 1,  \"C2 Com..read12\" },\n+      { \"C2 CompilerThread1267223\",     15 + 1,  \"C2 Com..267223\" },\n@@ -117,1 +96,1 @@\n-    EXPECT_STREQ(StringUtils::abbreviate_preserve_trailing_number(totest[i].s, out, totest[i].outlen),\n+    EXPECT_STREQ(StringUtils::truncate_middle(totest[i].s, out, totest[i].outlen),\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"}]}