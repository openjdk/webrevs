{"files":[{"patch":"@@ -106,1 +106,1 @@\n-  bool equals(ciMetadata* obj) const { return (this == obj); }\n+  bool equals(const ciMetadata* obj) const { return (this == obj); }\n","filename":"src\/hotspot\/share\/ci\/ciMetadata.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4315,6 +4315,1 @@\n-    Node* cast = _gvn.transform(new CastPPNode(is_array_ctrl, *obj, TypeAryPtr::BOTTOM));\n-    \/\/ Check for top because in rare cases, the type system can determine that\n-    \/\/ the object can't be an array but the layout helper check is not folded.\n-    if (!cast->is_top()) {\n-      *obj = cast;\n-    }\n+    *obj = _gvn.transform(new CastPPNode(is_array_ctrl, *obj, TypeAryPtr::BOTTOM));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2214,4 +2214,2 @@\n-        !tkls->is_instklassptr()->instance_klass()->is_java_lang_Object() \/\/ not the supertype of all T[] and specifically not Serializable & Cloneable\n-        ) {\n-      \/\/ Note:  When interfaces are reliable, we can narrow the interface\n-      \/\/ test to (klass != Serializable && klass != Cloneable).\n+        !tkls->is_instklassptr()->might_be_an_array() \/\/ not the supertype of all T[] (java.lang.Object) or has an interface that is not Serializable or Cloneable\n+    ) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3684,0 +3684,6 @@\n+bool TypeInterfaces::has_non_array_interface() const {\n+  assert(TypeAryPtr::_array_interfaces != nullptr, \"How come Type::Initialize_shared wasn't called yet?\");\n+\n+  return !TypeAryPtr::_array_interfaces->contains(this);\n+}\n+\n@@ -6196,0 +6202,13 @@\n+bool TypeInstKlassPtr::might_be_an_array() const {\n+  if (!instance_klass()->is_java_lang_Object()) {\n+    \/\/ TypeInstKlassPtr can be an array only if it is java.lang.Object: the only supertype of array types.\n+    return false;\n+  }\n+  if (interfaces()->has_non_array_interface()) {\n+    \/\/ Arrays only implement Cloneable and Serializable. If we see any other interface, [this] cannot be an array.\n+    return false;\n+  }\n+  \/\/ Cannot prove it's not an array.\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -945,0 +945,1 @@\n+  bool has_non_array_interface() const;\n@@ -1422,0 +1423,1 @@\n+  friend class TypeInterfaces;\n@@ -1694,0 +1696,2 @@\n+  bool might_be_an_array() const;\n+\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}