{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,2 +183,2 @@\n-                throw new AssertionError(\n-                        \"PRK is required for HKDFParameterSpec.Expand\");\n+                throw new InvalidAlgorithmParameterException(\n+                        \"Cannot retrieve PRK for HKDFParameterSpec.Expand\");\n@@ -414,1 +414,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HKDFKeyDerivation.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347289\n+ * @summary make sure DPS works when non-extractable PRK is provided\n+ * @library \/test\/lib \/test\/jdk\/security\/unsignedjce\n+ * @build java.base\/javax.crypto.ProviderVerifier\n+ * @enablePreview\n+ * @run main\/othervm HKDFDelayedPRK\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import javax.crypto.KDF;\n+import javax.crypto.KDFParameters;\n+import javax.crypto.KDFSpi;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class HKDFDelayedPRK {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ This is a fake non-extractable key\n+        var prk = new SecretKey() {\n+            @Override\n+            public String getAlgorithm() {\n+                return \"PRK\";\n+            }\n+\n+            @Override\n+            public String getFormat() {\n+                return null;\n+            }\n+\n+            @Override\n+            public byte[] getEncoded() {\n+                return null;\n+            }\n+        };\n+\n+        Security.addProvider(new ProviderImpl());\n+        var kdf = KDF.getInstance(\"HKDF-SHA256\");\n+        kdf.deriveData(HKDFParameterSpec.expandOnly(prk, null, 32));\n+\n+        \/\/ Confirms our own omnipotent impl is selected\n+        Asserts.assertEquals(\"P\", kdf.getProviderName());\n+    }\n+\n+    public static class ProviderImpl extends Provider {\n+        public ProviderImpl() {\n+            super(\"P\", \"1\", \"info\");\n+            put(\"KDF.HKDF-SHA256\", KDFImpl.class.getName());\n+        }\n+    }\n+\n+    \/\/ This HKDF impl accepts everything\n+    public static class KDFImpl extends KDFSpi {\n+\n+        public KDFImpl(KDFParameters params) throws InvalidAlgorithmParameterException {\n+            super(params);\n+        }\n+\n+        @Override\n+        protected KDFParameters engineGetParameters() {\n+            return null;\n+        }\n+\n+        @Override\n+        protected SecretKey engineDeriveKey(String alg, AlgorithmParameterSpec dummy) {\n+            return new SecretKeySpec(new byte[32], alg);\n+        }\n+\n+        @Override\n+        protected byte[] engineDeriveData(AlgorithmParameterSpec dummy) {\n+            return new byte[32];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFDelayedPRK.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}