{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.net.http.HttpResponse.BodyHandlers;\n@@ -49,0 +50,2 @@\n+import java.util.concurrent.Flow.Subscription;\n+\n@@ -144,1 +147,11 @@\n- * provide a best effort implementation.\n+ * provide a best effort implementation. Failing to close, cancel, or\n+ * read returned streams to exhaustion, such as streams provided when using\n+ * {@link BodyHandlers#ofInputStream()}, {@link BodyHandlers#ofLines()}, or\n+ * {@link BodyHandlers#ofPublisher()}, may prevent requests submitted\n+ * before an {@linkplain #shutdown() orderly shutdown}\n+ * to run to completion. Likewise, failing to\n+ * {@linkplain Subscription#request(long) request data} or {@linkplain\n+ * Subscription#cancel() cancel subscriptions} from a custom {@linkplain\n+ * java.net.http.HttpResponse.BodySubscriber BodySubscriber} may stop\n+ * delivery of data and {@linkplain #awaitTermination(Duration) stall an\n+ * orderly shutdown}.\n@@ -616,1 +629,1 @@\n-     *         the client is {@linkplain ##closing shutting down}\n+     *         the client has {@linkplain ##closing shut down}\n@@ -664,1 +677,1 @@\n-     *      or the client is {@linkplain ##closing shutting down}.<\/li>\n+     *      or the client has {@linkplain ##closing shut down}.<\/li>\n@@ -750,3 +763,8 @@\n-     * Initiates an orderly shutdown in which previously submitted\n-     * operations are run to completion, but no new request will be\n-     * accepted.\n+     * Initiates an orderly shutdown in which  requests previously\n+     * submitted with {@code send} or {@code sendAsync}\n+     * are run to completion, but no new request will be accepted.\n+     * Running a request to completion may involve running several\n+     * operations in the background, including {@linkplain ##closing\n+     * waiting for responses to be delivered}, which will all have to\n+     * run to completion until the request is considered completed.\n+     *\n@@ -756,2 +774,2 @@\n-     * to complete execution.  Use {@link #awaitTermination awaitTermination}\n-     * to do that.\n+     * to complete execution.  Use {@link #awaitTermination(Duration)\n+     * awaitTermination} or {@link #close() close} to do that.\n@@ -772,0 +790,2 @@\n+     * Operations are any tasks required to run a request previously\n+     * submitted with {@code send} or {@code sendAsync} to completion.\n@@ -797,1 +817,3 @@\n-     * Note that {@code isTerminated} is never {@code true} unless\n+     * Operations are any tasks required to run a request previously\n+     * submitted with {@code send} or {@code sendAsync} to completion.\n+     * <p> Note that {@code isTerminated} is never {@code true} unless\n@@ -817,0 +839,2 @@\n+     * Operations are any tasks required to run a request previously\n+     * submitted with {@code send} or {@code sendAsync} to completion.\n@@ -834,3 +858,8 @@\n-     * Initiates an orderly shutdown in which previously submitted operation are\n-     * executed, but no new request will be accepted. This method waits until all\n-     * operations have completed execution and the client has terminated.\n+     * Initiates an orderly shutdown in which  requests previously\n+     * submitted to {@code send} or {@code sendAsync}\n+     * are run to completion, but no new request will be accepted.\n+     * Running a request to completion may involve running several\n+     * operations in the background, including {@linkplain ##closing\n+     * waiting for responses to be delivered}.\n+     * This method waits until all operations have completed execution\n+     * and the client has terminated.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpClient.java","additions":41,"deletions":12,"binary":false,"changes":53,"status":"modified"}]}