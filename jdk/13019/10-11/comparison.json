{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientBuilderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,2 @@\n-        try (HttpClient client = HttpClient.newBuilder()\n+        HttpClient toCheck = null;\n+        try (HttpClient client = toCheck = HttpClient.newBuilder()\n@@ -173,0 +174,1 @@\n+        assertTrue(toCheck.isTerminated());\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientClose.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,3 +137,7 @@\n-    public void close() {\n-        client.close();\n-    }\n+    public void close() { client.close(); }\n+\n+    \/**\n+     * Invokes the default implementation of HttpClient::close\n+     * Can be closed by subclasses if necessary.\n+     *\/\n+    protected void defaultClose() { super.close();}\n","filename":"test\/jdk\/java\/net\/httpclient\/offline\/DelegatingHttpClient.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Arrays;\n@@ -56,0 +57,3 @@\n+ * Can delegate to an actual HttpClient created from a supplied\n+ * HttpClient.Builder if needed, by calling methods on its\n+ * DelegatingClient super class.\n@@ -221,1 +225,1 @@\n-                try {\n+                    responses.remove(cf);\n@@ -233,2 +237,0 @@\n-                } finally {\n-                    responses.remove(cf);\n@@ -236,1 +238,0 @@\n-            }\n@@ -265,0 +266,1 @@\n+        \/\/ return true if this and the wrapped client are terminated\n@@ -267,1 +269,1 @@\n-            return responses.isEmpty();\n+            return responses.isEmpty() && super.isTerminated();\n@@ -273,0 +275,3 @@\n+        \/\/ shutdown the wrapped client\n+        super.shutdown();\n+        \/\/ mark shutdown requested\n@@ -278,1 +283,5 @@\n-        shutdown();\n+        \/\/ shutdown the wrapped client now\n+        super.shutdownNow();\n+        \/\/ mark shutdown requested\n+        shutdownRequested = true;\n+        \/\/ cancel all completable futures\n@@ -283,1 +292,1 @@\n-            responses.clear();\n+            responses.removeAll(Arrays.asList(futures));\n@@ -293,4 +302,4 @@\n-        CompletableFuture[] futures;\n-        synchronized (this) {\n-            if (responses.isEmpty()) return true;\n-            futures = responses.toArray(CompletableFuture[]::new);\n+        CompletableFuture[] futures = responses.toArray(CompletableFuture[]::new);\n+        if (futures.length == 0) {\n+            \/\/ nothing to do here: wait for the wrapped client\n+            return super.awaitTermination(duration) && isTerminated();\n@@ -298,0 +307,2 @@\n+\n+        \/\/ waits for our own completable futures to get completed\n@@ -304,1 +315,1 @@\n-            return false;\n+            return isTerminated();\n@@ -308,1 +319,13 @@\n-            return true;\n+            return isTerminated();\n+        }\n+        return isTerminated();\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            \/\/ closes this client\n+            defaultClose();\n+        } finally {\n+            \/\/ closes the wrapped client (which should already be closed)\n+            super.close();\n@@ -310,1 +333,0 @@\n-        return true;\n","filename":"test\/jdk\/java\/net\/httpclient\/offline\/FixedResponseHttpClient.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -66,13 +66,15 @@\n-        HttpClient client = getClient();\n-\n-        HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(\"https:\/\/openjdk.org\/\"))\n-                .build();\n-\n-        client.sendAsync(request, BodyHandlers.ofString())\n-                .thenAccept(response -> {\n-                    System.out.println(\"response: \" + response);\n-                    assertEquals(response.statusCode(), 200);\n-                    assertTrue(response.headers().firstValue(\"Server\").isPresent());\n-                    assertEquals(response.body(), \"A response message\"); } )\n-                .join();\n+        try (HttpClient client = getClient()) {\n+\n+            HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(URI.create(\"https:\/\/openjdk.org\/\"))\n+                    .build();\n+\n+            client.sendAsync(request, BodyHandlers.ofString())\n+                    .thenAccept(response -> {\n+                        System.out.println(\"response: \" + response);\n+                        assertEquals(response.statusCode(), 200);\n+                        assertTrue(response.headers().firstValue(\"Server\").isPresent());\n+                        assertEquals(response.body(), \"A response message\");\n+                    })\n+                    .join();\n+        }\n@@ -83,13 +85,15 @@\n-        HttpClient client = getClient();\n-\n-        HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(\"https:\/\/openjdk.org\/\"))\n-                .build();\n-\n-        client.sendAsync(request, BodyHandlers.ofByteArray())\n-                .thenAccept(response -> {\n-                    System.out.println(\"response: \" + response);\n-                    assertEquals(response.statusCode(), 200);\n-                    assertTrue(response.headers().firstValue(\"Content-Type\").isPresent());\n-                    assertEquals(response.body(), \"A response message\".getBytes(UTF_8)); } )\n-                .join();\n+        try (HttpClient client = getClient()) {\n+\n+            HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(URI.create(\"https:\/\/openjdk.org\/\"))\n+                    .build();\n+\n+            client.sendAsync(request, BodyHandlers.ofByteArray())\n+                    .thenAccept(response -> {\n+                        System.out.println(\"response: \" + response);\n+                        assertEquals(response.statusCode(), 200);\n+                        assertTrue(response.headers().firstValue(\"Content-Type\").isPresent());\n+                        assertEquals(response.body(), \"A response message\".getBytes(UTF_8));\n+                    })\n+                    .join();\n+        }\n@@ -101,1 +105,1 @@\n-        HttpClient client = FixedResponseHttpClient.createClientFrom(\n+        HttpClient fixedClient = FixedResponseHttpClient.createClientFrom(\n@@ -121,8 +125,12 @@\n-        client.sendAsync(request, BodyHandlers.ofString())\n-                .thenAccept(response -> {\n-                    assertEquals(response.statusCode(), 404);\n-                    response.headers().firstValue(\"Content-Type\")\n-                            .ifPresentOrElse(type -> assertEquals(type, \"text\/html\"),\n-                                             () -> fail(\"Content-Type not present\"));\n-                    assertTrue(response.body().contains(\"404 Not Found\")); } )\n-                .join();\n+        try (var client = fixedClient) {\n+            client.sendAsync(request, BodyHandlers.ofString())\n+                    .thenAccept(response -> {\n+                        assertEquals(response.statusCode(), 404);\n+                        response.headers().firstValue(\"Content-Type\")\n+                                .ifPresentOrElse(type -> assertEquals(type, \"text\/html\"),\n+                                        () -> fail(\"Content-Type not present\"));\n+                        assertTrue(response.body().contains(\"404 Not Found\"));\n+                    })\n+                    .join();\n+        }\n+        assertTrue(fixedClient.isTerminated());\n@@ -133,1 +141,1 @@\n-        HttpClient client = FixedResponseHttpClient.createEchoClient(\n+        try (HttpClient client = FixedResponseHttpClient.createEchoClient(\n@@ -136,13 +144,15 @@\n-                headersOf(\"Connection\",  \"keep-alive\"));\n-\n-        HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(\"https:\/\/openjdk.org\/echo\"))\n-                .POST(BodyPublishers.ofString(\"Hello World\"))\n-                .build();\n-\n-        client.sendAsync(request, BodyHandlers.ofString())\n-                .thenAccept(response -> {\n-                    System.out.println(\"response: \" + response);\n-                    assertEquals(response.statusCode(), 200);\n-                    assertEquals(response.body(), \"Hello World\"); } )\n-                .join();\n+                headersOf(\"Connection\",  \"keep-alive\"))) {\n+\n+            HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(URI.create(\"https:\/\/openjdk.org\/echo\"))\n+                    .POST(BodyPublishers.ofString(\"Hello World\"))\n+                    .build();\n+\n+            client.sendAsync(request, BodyHandlers.ofString())\n+                    .thenAccept(response -> {\n+                        System.out.println(\"response: \" + response);\n+                        assertEquals(response.statusCode(), 200);\n+                        assertEquals(response.body(), \"Hello World\");\n+                    })\n+                    .join();\n+        }\n@@ -153,1 +163,1 @@\n-        HttpClient client = FixedResponseHttpClient.createEchoClient(\n+        try (HttpClient client = FixedResponseHttpClient.createEchoClient(\n@@ -156,1 +166,1 @@\n-                headersOf(\"Connection\",  \"keep-alive\"));\n+                headersOf(\"Connection\",  \"keep-alive\"))) {\n@@ -158,4 +168,4 @@\n-        HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(\"https:\/\/openjdk.org\/echo\"))\n-                .POST(BodyPublishers.ofString(\"Hello chegar!!\"))\n-                .build();\n+            HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(URI.create(\"https:\/\/openjdk.org\/echo\"))\n+                    .POST(BodyPublishers.ofString(\"Hello chegar!!\"))\n+                    .build();\n@@ -163,4 +173,5 @@\n-        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());\n-        System.out.println(\"response: \" + response);\n-        assertEquals(response.statusCode(), 200);\n-        assertEquals(response.body(), \"Hello chegar!!\");\n+            HttpResponse<String> response = client.send(request, BodyHandlers.ofString());\n+            System.out.println(\"response: \" + response);\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.body(), \"Hello chegar!!\");\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/offline\/OfflineTesting.java","additions":70,"deletions":59,"binary":false,"changes":129,"status":"modified"}]}