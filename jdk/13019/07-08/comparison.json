{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Objects;\n@@ -50,0 +51,2 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n@@ -75,1 +78,1 @@\n-        for (HttpClient client : clients) {\n+        for (HttpClient c : clients) {\n@@ -77,9 +80,11 @@\n-            assertFalse(client.authenticator().isPresent());\n-            assertFalse(client.cookieHandler().isPresent());\n-            assertFalse(client.connectTimeout().isPresent());\n-            assertFalse(client.executor().isPresent());\n-            assertFalse(client.proxy().isPresent());\n-            assertTrue(client.sslParameters() != null);\n-            assertTrue(client.followRedirects().equals(HttpClient.Redirect.NEVER));\n-            assertTrue(client.sslContext() == SSLContext.getDefault());\n-            assertTrue(client.version().equals(HttpClient.Version.HTTP_2));\n+            try (var client = c) {\n+                assertFalse(client.authenticator().isPresent());\n+                assertFalse(client.cookieHandler().isPresent());\n+                assertFalse(client.connectTimeout().isPresent());\n+                assertFalse(client.executor().isPresent());\n+                assertFalse(client.proxy().isPresent());\n+                assertTrue(client.sslParameters() != null);\n+                assertTrue(client.followRedirects().equals(HttpClient.Redirect.NEVER));\n+                assertTrue(client.sslContext() == SSLContext.getDefault());\n+                assertTrue(client.version().equals(HttpClient.Version.HTTP_2));\n+            }\n@@ -105,0 +110,20 @@\n+    static class Closer implements AutoCloseable {\n+        final HttpClient.Builder builder;\n+        HttpClient client;\n+        Closer(HttpClient.Builder builder) {\n+            this.builder = Objects.requireNonNull(builder);\n+        }\n+        HttpClient build() {\n+            if (client != null) client.close();\n+            return client = builder.build();\n+        }\n+        @Override\n+        public void close() {\n+            if (client != null) client.close();\n+        }\n+    }\n+\n+    static Closer closeable(HttpClient.Builder builder) {\n+        return new Closer(builder);\n+    }\n+\n@@ -110,1 +135,3 @@\n-        assertTrue(builder.build().authenticator().get() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().authenticator().get() == a);\n+        }\n@@ -113,1 +140,3 @@\n-        assertTrue(builder.build().authenticator().get() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().authenticator().get() == b);\n+        }\n@@ -117,1 +146,3 @@\n-        assertTrue(builder.build().authenticator().get() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().authenticator().get() == c);\n+        }\n@@ -125,1 +156,3 @@\n-        assertTrue(builder.build().cookieHandler().get() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().cookieHandler().get() == a);\n+        }\n@@ -128,1 +161,3 @@\n-        assertTrue(builder.build().cookieHandler().get() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().cookieHandler().get() == b);\n+        }\n@@ -132,1 +167,3 @@\n-        assertTrue(builder.build().cookieHandler().get() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().cookieHandler().get() == c);\n+        }\n@@ -140,1 +177,3 @@\n-        assertTrue(builder.build().connectTimeout().get() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().connectTimeout().get() == a);\n+        }\n@@ -143,1 +182,3 @@\n-        assertTrue(builder.build().connectTimeout().get() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().connectTimeout().get() == b);\n+        }\n@@ -147,1 +188,3 @@\n-        assertTrue(builder.build().connectTimeout().get() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().connectTimeout().get() == c);\n+        }\n@@ -156,1 +199,1 @@\n-        public void execute(Runnable r) { }\n+        public void execute(Runnable r) { r.run();}\n@@ -164,1 +207,3 @@\n-        assertTrue(builder.build().executor().get() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().executor().get() == a);\n+        }\n@@ -167,1 +212,3 @@\n-        assertTrue(builder.build().executor().get() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().executor().get() == b);\n+        }\n@@ -171,1 +218,3 @@\n-        assertTrue(builder.build().executor().get() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().executor().get() == c);\n+        }\n@@ -179,1 +228,3 @@\n-        assertTrue(builder.build().proxy().get() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().proxy().get() == a);\n+        }\n@@ -182,1 +233,3 @@\n-        assertTrue(builder.build().proxy().get() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().proxy().get() == b);\n+        }\n@@ -186,1 +239,3 @@\n-        assertTrue(builder.build().proxy().get() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().proxy().get() == c);\n+        }\n@@ -196,2 +251,6 @@\n-        assertTrue(builder.build().sslParameters() != (a));\n-        assertTrue(builder.build().sslParameters().getCipherSuites()[0].equals(\"A\"));\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslParameters() != (a));\n+        }\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslParameters().getCipherSuites()[0].equals(\"A\"));\n+        }\n@@ -201,2 +260,6 @@\n-        assertTrue(builder.build().sslParameters() != b);\n-        assertTrue(builder.build().sslParameters().getEnableRetransmissions());\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslParameters() != b);\n+        }\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslParameters().getEnableRetransmissions());\n+        }\n@@ -208,1 +271,3 @@\n-        assertTrue(builder.build().sslParameters().getProtocols()[0].equals(\"C\"));\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslParameters().getProtocols()[0].equals(\"C\"));\n+        }\n@@ -216,1 +281,3 @@\n-        assertTrue(builder.build().sslContext() == a);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslContext() == a);\n+        }\n@@ -219,1 +286,3 @@\n-        assertTrue(builder.build().sslContext() == b);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslContext() == b);\n+        }\n@@ -223,1 +292,3 @@\n-        assertTrue(builder.build().sslContext() == c);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().sslContext() == c);\n+        }\n@@ -230,1 +301,3 @@\n-        assertTrue(builder.build().followRedirects() == Redirect.ALWAYS);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().followRedirects() == Redirect.ALWAYS);\n+        }\n@@ -232,1 +305,3 @@\n-        assertTrue(builder.build().followRedirects() == Redirect.NEVER);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().followRedirects() == Redirect.NEVER);\n+        }\n@@ -235,1 +310,3 @@\n-        assertTrue(builder.build().followRedirects() == Redirect.NORMAL);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().followRedirects() == Redirect.NORMAL);\n+        }\n@@ -242,1 +319,3 @@\n-        assertTrue(builder.build().version() == Version.HTTP_2);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().version() == Version.HTTP_2);\n+        }\n@@ -244,1 +323,3 @@\n-        assertTrue(builder.build().version() == Version.HTTP_1_1);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().version() == Version.HTTP_1_1);\n+        }\n@@ -247,1 +328,3 @@\n-        assertTrue(builder.build().version() == Version.HTTP_2);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().version() == Version.HTTP_2);\n+        }\n@@ -249,1 +332,3 @@\n-        assertTrue(builder.build().version() == Version.HTTP_1_1);\n+        try (var closer = closeable(builder)) {\n+            assertTrue(closer.build().version() == Version.HTTP_1_1);\n+        }\n@@ -261,1 +346,1 @@\n-        builder.build();\n+        try (var httpClient = builder.build()) {}\n@@ -263,1 +348,1 @@\n-        builder.build();\n+        try (var httpClient = builder.build()) {}\n@@ -355,21 +440,22 @@\n-        HttpClient client = HttpClient.newHttpClient();\n-        HttpRequest request = HttpRequest.newBuilder(uri).build();\n-\n-        assertThrows(NPE, () -> client.send(null, BodyHandlers.discarding()));\n-        assertThrows(NPE, () -> client.send(request, null));\n-        assertThrows(NPE, () -> client.send(null, null));\n-\n-        assertThrows(NPE, () -> client.sendAsync(null, BodyHandlers.discarding()));\n-        assertThrows(NPE, () -> client.sendAsync(request, null));\n-        assertThrows(NPE, () -> client.sendAsync(null, null));\n-\n-        assertThrows(NPE, () -> client.sendAsync(null, BodyHandlers.discarding(), null));\n-        assertThrows(NPE, () -> client.sendAsync(request, null, null));\n-        assertThrows(NPE, () -> client.sendAsync(null, null, null));\n-\n-        \/\/ CONNECT is disallowed in the implementation, since it is used for\n-        \/\/ tunneling, and is handled separately for security checks.\n-        HttpRequest connectRequest = new HttpConnectRequest();\n-        assertThrows(IAE, () -> client.send(connectRequest, BodyHandlers.discarding()));\n-        assertThrows(IAE, () -> client.sendAsync(connectRequest, BodyHandlers.discarding()));\n-        assertThrows(IAE, () -> client.sendAsync(connectRequest, BodyHandlers.discarding(), null));\n+        try (HttpClient client = HttpClient.newHttpClient()) {\n+            HttpRequest request = HttpRequest.newBuilder(uri).build();\n+\n+            assertThrows(NPE, () -> client.send(null, BodyHandlers.discarding()));\n+            assertThrows(NPE, () -> client.send(request, null));\n+            assertThrows(NPE, () -> client.send(null, null));\n+\n+            assertThrows(NPE, () -> client.sendAsync(null, BodyHandlers.discarding()));\n+            assertThrows(NPE, () -> client.sendAsync(request, null));\n+            assertThrows(NPE, () -> client.sendAsync(null, null));\n+\n+            assertThrows(NPE, () -> client.sendAsync(null, BodyHandlers.discarding(), null));\n+            assertThrows(NPE, () -> client.sendAsync(request, null, null));\n+            assertThrows(NPE, () -> client.sendAsync(null, null, null));\n+\n+            \/\/ CONNECT is disallowed in the implementation, since it is used for\n+            \/\/ tunneling, and is handled separately for security checks.\n+            HttpRequest connectRequest = new HttpConnectRequest();\n+            assertThrows(IAE, () -> client.send(connectRequest, BodyHandlers.discarding()));\n+            assertThrows(IAE, () -> client.sendAsync(connectRequest, BodyHandlers.discarding()));\n+            assertThrows(IAE, () -> client.sendAsync(connectRequest, BodyHandlers.discarding(), null));\n+        }\n@@ -397,0 +483,103 @@\n+    @Test\n+    static void testDefaultShutdown() throws Exception {\n+        try (HttpClient client = new MockHttpClient()) {\n+            client.shutdown(); \/\/ does nothing\n+        }\n+    }\n+\n+    @Test\n+    static void testDefaultShutdownNow() throws Exception {\n+        try (HttpClient client = new MockHttpClient()) {\n+            client.shutdownNow(); \/\/ calls shutdown, doesn't wait\n+        }\n+\n+        AtomicInteger shutdownCalled = new AtomicInteger();\n+        HttpClient mock = new MockHttpClient() {\n+            @Override\n+            public void shutdown() {\n+                super.shutdown();\n+                shutdownCalled.incrementAndGet();\n+            }\n+        };\n+        try (HttpClient client = mock) {\n+            client.shutdownNow();  \/\/ calls shutdown, doesn't wait\n+        }\n+\n+        \/\/ once from shutdownNow(), and once from close()\n+        assertEquals(shutdownCalled.get(), 2);\n+    }\n+\n+    @Test\n+    static void testDefaultIsTerminated() throws Exception {\n+        try (HttpClient client = new MockHttpClient()) {\n+            assertFalse(client.isTerminated());\n+        }\n+    }\n+\n+    @Test\n+    static void testDefaultAwaitTermination() throws Exception {\n+        try (HttpClient client = new MockHttpClient()) {\n+            assertTrue(client.awaitTermination(Duration.ofDays(1)));\n+        }\n+        try (HttpClient client = new MockHttpClient()) {\n+            assertThrows(NullPointerException.class,\n+                    () -> client.awaitTermination(null));\n+        }\n+    }\n+\n+    @Test\n+    static void testDefaultClose() {\n+        AtomicInteger shutdownCalled = new AtomicInteger();\n+        AtomicInteger awaitTerminationCalled = new AtomicInteger();\n+        AtomicInteger shutdownNowCalled = new AtomicInteger();\n+        HttpClient mock = new MockHttpClient() {\n+            @Override\n+            public void shutdown() {\n+                super.shutdown();\n+                shutdownCalled.incrementAndGet();\n+            }\n+            @Override\n+            public void shutdownNow() {\n+                super.shutdownNow();\n+                shutdownNowCalled.incrementAndGet();\n+            }\n+\n+            @Override\n+            public boolean awaitTermination(Duration duration) throws InterruptedException {\n+                int count = awaitTerminationCalled.incrementAndGet();\n+                if (count == 1) return false;\n+                if (count == 2) return true;\n+                if (count == 3) {\n+                    Thread.currentThread().interrupt();\n+                    throw new InterruptedException();\n+                }\n+                return super.awaitTermination(duration);\n+            }\n+        };\n+\n+        \/\/ first time around:\n+        \/\/   close()\n+        \/\/      shutdown() 0->1\n+        \/\/      awaitTermination() 0->1 -> false\n+        \/\/      awaitTermination() 1->2 -> true\n+        try (HttpClient client = mock) { }\n+        assertEquals(shutdownCalled.get(), 1); \/\/ called by close()\n+        assertEquals(shutdownNowCalled.get(), 0); \/\/ not called\n+        assertEquals(awaitTerminationCalled.get(), 2); \/\/ called by close() twice\n+        assertFalse(Thread.currentThread().isInterrupted());\n+\n+        \/\/ second time around:\n+        \/\/   close()\n+        \/\/      shutdown() 1->2\n+        \/\/      awaitTermination() 2->3 -> interrupt, throws\n+        \/\/      shutdownNow() 0->1\n+        \/\/         calls shutdown() 2->3\n+        \/\/      awaitTermination() 3->4 -> true\n+        try (HttpClient client = mock) { }\n+        assertEquals(shutdownCalled.get(), 3); \/\/ called by close() and shutdownNow()\n+        assertEquals(shutdownNowCalled.get(), 1); \/\/ called by close() due to interrupt\n+        assertEquals(awaitTerminationCalled.get(), 4); \/\/ called by close twice\n+        assertTrue(Thread.currentThread().isInterrupted());\n+        assertTrue(Thread.interrupted());\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientBuilderTest.java","additions":253,"deletions":64,"binary":false,"changes":317,"status":"modified"}]}