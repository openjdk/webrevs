{"files":[{"patch":"@@ -53,4 +53,4 @@\n-                byte[] buf = new byte[100];\n-                int size = writeClass(buf, className);\n-                Class<?> cls = defineClass(null, buf, 0, size);\n-                return MethodHandles.publicLookup().findStatic(cls, \"m\", MethodType.methodType(void.class));\n+            byte[] buf = new byte[100];\n+            int size = writeClass(buf, className);\n+            Class<?> cls = defineClass(null, buf, 0, size);\n+            return MethodHandles.publicLookup().findStatic(cls, \"m\", MethodType.methodType(void.class));\n@@ -60,5 +60,5 @@\n-                byte[] buf = new byte[100];\n-                int size = writeClass(buf, \"MH$$\");\n-                \/\/ use different classloader instances to load the classes with the same name\n-                Class<?> cls = new ResolvedMethodTableHashTest().defineClass(null, buf, 0, size);\n-                return MethodHandles.publicLookup().findStatic(cls, \"m\", MethodType.methodType(void.class));\n+            byte[] buf = new byte[100];\n+            int size = writeClass(buf, \"MH$$\");\n+            \/\/ use different classloader instances to load the classes with the same name\n+            Class<?> cls = new ResolvedMethodTableHashTest().defineClass(null, buf, 0, size);\n+            return MethodHandles.publicLookup().findStatic(cls, \"m\", MethodType.methodType(void.class));\n@@ -70,22 +70,22 @@\n-                return ByteBuffer.wrap(buf)\n-                                .putInt(0xCAFEBABE)           \/\/ magic\n-                                .putInt(50)                           \/\/ version: 50\n-                                .putShort((short) 7)          \/\/ constant_pool_count: 7\n-                                .put((byte) 7).putShort((short) 2)\n-                                .put((byte) 1).putShort((short) className.length()).put(className.getBytes())\n-                                .put((byte) 7).putShort((short) 4)\n-                                .put((byte) 1).putShort((short) 16).put(\"java\/lang\/Object\".getBytes())\n-                                .put((byte) 1).putShort((short) 1).put(\"m\".getBytes())\n-                                .put((byte) 1).putShort((short) 3).put(\"()V\".getBytes())\n-                                .putShort((short) 0x21)   \/\/ access_flags: public super\n-                                .putShort((short) 1)          \/\/ this_class: #1\n-                                .putShort((short) 3)          \/\/ super_class: #3\n-                                .putShort((short) 0)          \/\/ interfaces_count: 0\n-                                .putShort((short) 0)          \/\/ fields_count: 0\n-                                .putShort((short) 1)          \/\/ methods_count: 1\n-                                .putShort((short) 0x109)  \/\/   access_flags: public static native\n-                                .putShort((short) 5)          \/\/   name_index: #5\n-                                .putShort((short) 6)          \/\/   descriptor_index: #6\n-                                .putShort((short) 0)          \/\/   attributes_count: 0\n-                                .putShort((short) 0)          \/\/ attributes_count: 0\n-                                .position();\n+            return ByteBuffer.wrap(buf)\n+                .putInt(0xCAFEBABE)           \/\/ magic\n+                .putInt(50)                           \/\/ version: 50\n+                .putShort((short) 7)          \/\/ constant_pool_count: 7\n+                .put((byte) 7).putShort((short) 2)\n+                .put((byte) 1).putShort((short) className.length()).put(className.getBytes())\n+                .put((byte) 7).putShort((short) 4)\n+                .put((byte) 1).putShort((short) 16).put(\"java\/lang\/Object\".getBytes())\n+                .put((byte) 1).putShort((short) 1).put(\"m\".getBytes())\n+                .put((byte) 1).putShort((short) 3).put(\"()V\".getBytes())\n+                .putShort((short) 0x21)   \/\/ access_flags: public super\n+                .putShort((short) 1)          \/\/ this_class: #1\n+                .putShort((short) 3)          \/\/ super_class: #3\n+                .putShort((short) 0)          \/\/ interfaces_count: 0\n+                .putShort((short) 0)          \/\/ fields_count: 0\n+                .putShort((short) 1)          \/\/ methods_count: 1\n+                .putShort((short) 0x109)  \/\/   access_flags: public static native\n+                .putShort((short) 5)          \/\/   name_index: #5\n+                .putShort((short) 6)          \/\/   descriptor_index: #6\n+                .putShort((short) 0)          \/\/   attributes_count: 0\n+                .putShort((short) 0)          \/\/ attributes_count: 0\n+                .position();\n@@ -96,2 +96,2 @@\n-                ResolvedMethodTableHashTest generator = new ResolvedMethodTableHashTest();\n-                List<MethodHandle> handles = new ArrayList<>();\n+            ResolvedMethodTableHashTest generator = new ResolvedMethodTableHashTest();\n+            List<MethodHandle> handles = new ArrayList<>();\n@@ -99,1 +99,1 @@\n-                int count = args.length > 0 ? Integer.parseInt(args[0]) : 200000;\n+            int count = 1001;\n@@ -101,10 +101,6 @@\n-                for (int i = 0; i < count; i++) {\n-                        \/\/ prevents metaspace oom\n-                        if (i % 20 != 0) {\n-                                handles.add(generator.generate(\"MH$\" + i));\n-                        } else {\n-                                handles.add(generator.generateWithSameName());\n-                        }\n-                        if (i % 1000 == 0) {\n-                                System.out.println(\"Generated \" + i + \" handles\");\n-                        }\n+            for (int i = 0; i < count; i++) {\n+                \/\/ prevents metaspace oom\n+                if (i % 20 != 0) {\n+                    handles.add(generator.generate(\"MH$\" + i));\n+                } else {\n+                    handles.add(generator.generateWithSameName());\n@@ -112,0 +108,4 @@\n+                if (i % 1000 == 0) {\n+                    System.out.println(\"Generated \" + i + \" handles\");\n+                }\n+            }\n@@ -113,1 +113,1 @@\n-                System.out.println(\"Test passed\");\n+            System.out.println(\"Test passed\");\n@@ -121,1 +121,1 @@\n-                                                                             ResolvedMethodTableHashTest.class.getName(), \"1001\");\n+                                                                             ResolvedMethodTableHashTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/runtime\/MemberName\/ResolvedMethodTableHash.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"}]}