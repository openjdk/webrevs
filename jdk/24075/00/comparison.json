{"files":[{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc.metaspace;\n-\n-\/*\n- * @test G1AddMetaspaceDependency\n- * @bug 8010196\n- * @requires vm.gc.G1\n- * @library \/\n- * @summary Checks that we don't get locking problems when adding metaspace dependencies with the G1 update buffer monitor\n- * @run main\/othervm -XX:+UseG1GC -XX:G1UpdateBufferSize=1 gc.metaspace.G1AddMetaspaceDependency\n- *\/\n-\n-import java.io.InputStream;\n-\n-public class G1AddMetaspaceDependency {\n-\n-  static byte[] getClassBytes(String name) {\n-    byte[] b = null;\n-    try (InputStream is = ClassLoader.getSystemResourceAsStream(name)) {\n-      byte[] tmp = new byte[is.available()];\n-      is.read(tmp);\n-      b = tmp;\n-    } finally {\n-      if (b == null) {\n-        throw new RuntimeException(\"Unable to load class file\");\n-      }\n-      return b;\n-    }\n-  }\n-\n-  static final String a_name = A.class.getName();\n-  static final String b_name = B.class.getName();\n-\n-  public static void main(String... args) throws Exception {\n-    final byte[] a_bytes = getClassBytes(a_name.replace('.', '\/') + \".class\");\n-    final byte[] b_bytes = getClassBytes(b_name.replace('.', '\/') + \".class\");\n-\n-    for (int i = 0; i < 1000; i += 1) {\n-      runTest(a_bytes, b_bytes);\n-    }\n-  }\n-\n-  static class Loader extends ClassLoader {\n-    private final String myClass;\n-    private final byte[] myBytes;\n-    private final String friendClass;\n-    private final ClassLoader friendLoader;\n-\n-    Loader(String myClass, byte[] myBytes,\n-           String friendClass, ClassLoader friendLoader) {\n-      this.myClass = myClass;\n-      this.myBytes = myBytes;\n-      this.friendClass = friendClass;\n-      this.friendLoader = friendLoader;\n-    }\n-\n-    Loader(String myClass, byte[] myBytes) {\n-      this(myClass, myBytes, null, null);\n-    }\n-\n-    @Override\n-    public Class<?> loadClass(String name) throws ClassNotFoundException {\n-      Class<?> c = findLoadedClass(name);\n-      if (c != null) {\n-        return c;\n-      }\n-\n-      if (name.equals(friendClass)) {\n-        return friendLoader.loadClass(name);\n-      }\n-\n-      if (name.equals(myClass)) {\n-        c = defineClass(name, myBytes, 0, myBytes.length);\n-        resolveClass(c);\n-        return c;\n-      }\n-\n-      return findSystemClass(name);\n-    }\n-\n-  }\n-\n-  private static void runTest(final byte[] a_bytes, final byte[] b_bytes) throws Exception {\n-    Loader a_loader = new Loader(a_name, a_bytes);\n-    Loader b_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-    Loader c_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-    Loader d_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-    Loader e_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-    Loader f_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-    Loader g_loader = new Loader(b_name, b_bytes, a_name, a_loader);\n-\n-    b_loader.loadClass(b_name);\n-    c_loader.loadClass(b_name);\n-    d_loader.loadClass(b_name);\n-    e_loader.loadClass(b_name);\n-    f_loader.loadClass(b_name);\n-    g_loader.loadClass(b_name);\n-  }\n-  public class A {\n-  }\n-  class B extends A {\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/G1AddMetaspaceDependency.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"}]}