{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.function.Supplier;\n@@ -144,1 +145,2 @@\n-    private static HashSet<Currency> available;\n+    private static final Supplier<HashSet<Currency>> available =\n+            StableValue.supplier(Currency::computeAllCurrencies);\n@@ -450,1 +452,1 @@\n-        return new HashSet<>(getCurrencies());\n+        return new HashSet<>(available.get());\n@@ -465,1 +467,1 @@\n-        return getCurrencies().stream();\n+        return available.get().stream();\n@@ -468,36 +470,35 @@\n-    \/\/ Returns the set of available Currencies which are lazily initialized\n-    private static synchronized HashSet<Currency> getCurrencies() {\n-        if (available == null) {\n-            var sysTime = System.currentTimeMillis();\n-            available = HashSet.newHashSet(256);\n-\n-            \/\/ Add simple currencies first\n-            for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n-                for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n-                    int tableEntry = getMainTableEntry(c1, c2);\n-                    if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n-                            && tableEntry != INVALID_COUNTRY_ENTRY) {\n-                        char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n-                        int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n-                        int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n-                        StringBuilder sb = new StringBuilder();\n-                        sb.append(c1);\n-                        sb.append(c2);\n-                        sb.append(finalChar);\n-                        available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n-                    } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n-                            && tableEntry != INVALID_COUNTRY_ENTRY\n-                            && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n-                        int index = SpecialCaseEntry.toIndex(tableEntry);\n-                        SpecialCaseEntry scEntry = specialCasesList.get(index);\n-\n-                        if (scEntry.cutOverTime == Long.MAX_VALUE\n-                                || sysTime < scEntry.cutOverTime) {\n-                            available.add(getInstance(scEntry.oldCurrency,\n-                                    scEntry.oldCurrencyFraction,\n-                                    scEntry.oldCurrencyNumericCode));\n-                        } else {\n-                            available.add(getInstance(scEntry.newCurrency,\n-                                    scEntry.newCurrencyFraction,\n-                                    scEntry.newCurrencyNumericCode));\n-                        }\n+    \/\/ Builds and returns the set of available Currencies\n+    private static HashSet<Currency> computeAllCurrencies() {\n+        var sysTime = System.currentTimeMillis();\n+        HashSet<Currency> available = HashSet.newHashSet(256);\n+\n+        for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n+            for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n+                int tableEntry = getMainTableEntry(c1, c2);\n+                if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n+                        && tableEntry != INVALID_COUNTRY_ENTRY) {\n+                    \/\/ Simple Currencies\n+                    char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n+                    int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n+                    int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n+                    StringBuilder sb = new StringBuilder();\n+                    sb.append(c1);\n+                    sb.append(c2);\n+                    sb.append(finalChar);\n+                    available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n+                } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n+                        && tableEntry != INVALID_COUNTRY_ENTRY\n+                        && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n+                    \/\/ Special Currencies\n+                    int index = SpecialCaseEntry.toIndex(tableEntry);\n+                    SpecialCaseEntry scEntry = specialCasesList.get(index);\n+\n+                    if (scEntry.cutOverTime == Long.MAX_VALUE\n+                            || sysTime < scEntry.cutOverTime) {\n+                        available.add(getInstance(scEntry.oldCurrency,\n+                                scEntry.oldCurrencyFraction,\n+                                scEntry.oldCurrencyNumericCode));\n+                    } else {\n+                        available.add(getInstance(scEntry.newCurrency,\n+                                scEntry.newCurrencyFraction,\n+                                scEntry.newCurrencyNumericCode));\n@@ -507,0 +508,1 @@\n+        }\n@@ -508,4 +510,3 @@\n-            \/\/ Now add other currencies\n-            for (OtherCurrencyEntry entry : otherCurrenciesList) {\n-                available.add(getInstance(entry.currencyCode));\n-            }\n+        \/\/ Other Currencies\n+        for (OtherCurrencyEntry entry : otherCurrenciesList) {\n+            available.add(getInstance(entry.currencyCode));\n","filename":"src\/java.base\/share\/classes\/java\/util\/Currency.java","additions":44,"deletions":43,"binary":false,"changes":87,"status":"modified"}]}