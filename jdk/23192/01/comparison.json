{"files":[{"patch":"@@ -97,0 +97,6 @@\n+        \/\/ Apply options\n+        options.whenReady(this::applyOptions);\n+    }\n+\n+    protected void applyOptions(Options options) {\n+\n@@ -109,8 +115,6 @@\n-        options.whenReady(options -> {\n-            String s = options.get(\"fileManager.deferClose\");\n-            if (s != null) {\n-                try {\n-                    deferredCloseTimeout = (int) (Float.parseFloat(s) * 1000);\n-                } catch (NumberFormatException e) {\n-                    deferredCloseTimeout = 60 * 1000;  \/\/ default: one minute, in millis\n-                }\n+        String s = options.get(\"fileManager.deferClose\");\n+        if (s != null) {\n+            try {\n+                deferredCloseTimeout = (int) (Float.parseFloat(s) * 1000);\n+            } catch (NumberFormatException e) {\n+                deferredCloseTimeout = 60 * 1000;  \/\/ default: one minute, in millis\n@@ -118,1 +122,1 @@\n-        });\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+import com.sun.tools.javac.util.Options;\n@@ -112,1 +113,1 @@\n-    protected boolean symbolFileEnabled;\n+    protected boolean symbolFileEnabled = true;\n@@ -172,1 +173,0 @@\n-\n@@ -174,0 +174,5 @@\n+    }\n+\n+    @Override\n+    protected void applyOptions(Options options) {\n+        super.applyOptions(options);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8348038\n+ * @summary Verify use of \"-XDignore.symbol.file=true\" doesn't cause assertion failure\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ *\/\n+\n+import java.io.File;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+public class JavadocIgnoreSymbolFile {\n+\n+    public static void main(String[] args) {\n+        String[] javadocArgs = new String[] {\n+            \"-XDignore.symbol.file=true\"\n+        };\n+        StringWriter buf = new StringWriter();\n+        try (PrintWriter pw = new PrintWriter(buf)) {\n+            jdk.javadoc.internal.tool.Main.execute(javadocArgs, pw);\n+        }\n+        String expected = \"error: No modules, packages or classes specified. 1 error\";\n+        String actual = buf.toString().trim().replaceAll(\"\\\\s+\", \" \");\n+        if (!actual.equals(expected))\n+            throw new AssertionError(\"unexpected output:\\n\" + actual);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/JavadocIgnoreSymbolFile.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}