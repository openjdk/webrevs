{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,12 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ * @bug 7046096\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ *\n+ * @compile -XDstringConcat=inline Test7046096.java\n+ * @run main\/othervm -Xbatch compiler.c2.Test7046096\n+ *\/\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test7046096.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +36,12 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ * @bug 7179138\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ *\n+ * @compile -XDstringConcat=inline Test7179138_2.java\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation compiler.c2.Test7179138_2\n+ *\/\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test7179138_2.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,11 @@\n+\/*\n+ * @test id=stringConcatInline\n+ * @bug 8054307\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ * @library \/test\/lib\n+ *\n+ * @compile -XDstringConcat=inline TestStringIntrinsics.java\n+ * @run main\/timeout=240 compiler.intrinsics.string.TestStringIntrinsics\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringIntrinsics.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,14 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ *\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ * VM Testbase keywords: [jit, quick]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @compile -XDstringConcat=inline ..\/..\/Implicit01.java\n+ * @run main\/othervm -XX:-CompactStrings vm.compiler.optimizations.stringconcat.implicit.Implicit01\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/optimizations\/stringconcat\/implicit\/Implicit01\/cs_disabled\/TestDescription.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,14 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ *\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ * VM Testbase keywords: [jit, quick]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @compile -XDstringConcat=inline ..\/..\/Implicit01.java\n+ * @run main\/othervm -XX:+CompactStrings vm.compiler.optimizations.stringconcat.implicit.Implicit01\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/optimizations\/stringconcat\/implicit\/Implicit01\/cs_enabled\/TestDescription.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,14 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ *\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ * VM Testbase keywords: [jit, quick]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @compile -XDstringConcat=inline ..\/..\/Merge01.java\n+ * @run main\/othervm -XX:-CompactStrings vm.compiler.optimizations.stringconcat.implicit.Merge01\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/optimizations\/stringconcat\/implicit\/Merge01\/cs_disabled\/TestDescription.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,14 @@\n+\n+\/*\n+ * @test id=stringConcatInline\n+ *\n+ * @summary The same test with an updated compile directive that produces\n+ *          StringBuilder-backed string concatenations.\n+ * VM Testbase keywords: [jit, quick]\n+ *\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n+ * @compile -XDstringConcat=inline ..\/..\/Merge01.java\n+ * @run main\/othervm -XX:+CompactStrings vm.compiler.optimizations.stringconcat.implicit.Merge01\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/optimizations\/stringconcat\/implicit\/Merge01\/cs_enabled\/TestDescription.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}