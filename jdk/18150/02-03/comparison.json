{"files":[{"patch":"@@ -1177,1 +1177,1 @@\n-  _is_alive_closure_cm(nullptr),\n+  _is_alive_closure_cm(),\n@@ -1509,1 +1509,1 @@\n-  _is_alive_closure_cm = new G1CMIsAliveClosure(concurrent_mark());\n+  _is_alive_closure_cm.initialize(concurrent_mark());\n@@ -1517,1 +1517,1 @@\n-                           _is_alive_closure_cm);                          \/\/ is alive closure\n+                           &_is_alive_closure_cm);                         \/\/ is alive closure\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -867,1 +867,1 @@\n-  G1CMIsAliveClosure* _is_alive_closure_cm;\n+  G1CMIsAliveClosure _is_alive_closure_cm;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,0 +81,2 @@\n+G1CMIsAliveClosure::G1CMIsAliveClosure() : _cm(nullptr) { }\n+\n@@ -85,0 +87,6 @@\n+void G1CMIsAliveClosure::initialize(G1ConcurrentMark* cm) {\n+  assert(cm != nullptr, \"must be\");\n+  assert(_cm == nullptr, \"double initialize\");\n+  _cm = cm;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+\n@@ -101,0 +102,1 @@\n+  G1CMIsAliveClosure();\n@@ -102,0 +104,1 @@\n+  void initialize(G1ConcurrentMark* cm);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-class Closure : public CHeapObj<mtGC> { };\n+class Closure { };\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}