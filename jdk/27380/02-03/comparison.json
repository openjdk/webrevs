{"files":[{"patch":"@@ -150,0 +150,25 @@\n+     * <p>\n+     * These are examples of class type signatures:\n+     * <ul>\n+     * <li>{@code Lcom\/example\/Outer;} for {@code Outer}\n+     * <br>Has class name {@code com\/example\/Outer} and no outer type or type\n+     *     argument.\n+     * <li>{@code Lcom\/example\/Outer$Nested<TA;>;} for {@code Outer.Nested<A>}\n+     * <br>Has class name {@code com\/example\/Outer$Nested} representing a nested\n+     *     class, no outer type, and a single type argument of type variable\n+     *     {@code A}.\n+     * <li>{@code Lcom\/example\/GenericOuter<TA;>.Inner;} for {@code\n+     *     GenericOuter<A>.Inner}\n+     * <br>Has class name {@code Inner}, a simple class name, outer type\n+     *     {@code Lcom\/example\/GenericOuter<TA;>;} for {@code GenericOuter<A>},\n+     *     and no type argument.\n+     * <\/ul>\n+     * <p>\n+     * If the {@linkplain #outerType() outer type} exists, the {@linkplain\n+     * #className() class name} is the simple name of the nested type.\n+     * Otherwise, it is a {@linkplain ClassEntry##internalname binary name in\n+     * internal form} (separated by {@code \/}).\n+     * <p>\n+     * If a nested type does not have any enclosing parameterization, it may\n+     * be represented without an outer type and as an internal binary name,\n+     * in which nesting is represented by {@code $} instead of {@code .}.\n@@ -163,1 +188,2 @@\n-         * absent if it is not a parameterized type.\n+         * absent if this is a member class without any parameterized enclosing\n+         * type.\n@@ -172,1 +198,2 @@\n-         * outer type}\n+         * outer type}  Note this may indicate a nested class name with {@code $}\n+         * separators if there is no parameterized enclosing type.\n@@ -246,2 +273,2 @@\n-         *        to indicate this is a top-level class or interface\n-         * @param className the name of this class or interface\n+         * @param className the name of this class or interface, may not include\n+         *                  {@code \/} if outer type is present\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Signature.java","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"}]}