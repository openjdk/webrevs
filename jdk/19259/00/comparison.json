{"files":[{"patch":"@@ -1330,0 +1330,8 @@\n+    if (head->is_BaseCountedLoop() && ctrl->is_IfProj() && ctrl->in(0)->is_BaseCountedLoopEnd() &&\n+        head->as_BaseCountedLoop()->loopexit() == ctrl->in(0)) {\n+      Node* entry = head->in(LoopNode::EntryControl);\n+      Node* backedge = head->in(LoopNode::LoopBackControl);\n+      Node* new_head = new LoopNode(entry, backedge);\n+      phase->register_control(new_head, phase->get_loop(entry), entry);\n+      phase->lazy_replace(head, new_head);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8328107\n+ * @summary Barrier expanded on backedge break loop verification code\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestBarrierOnLoopBackedge::notInlined\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyLoopOptimizations TestBarrierOnLoopBackedge\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestBarrierOnLoopBackedge::notInlined\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyLoopOptimizations -XX:-UseCountedLoopSafepoints TestBarrierOnLoopBackedge\n+ *\/\n+\n+public class TestBarrierOnLoopBackedge {\n+    private static A field = new A();\n+    private static final A finalField = new A();\n+    private static float floatField;\n+\n+    public static void main(String[] args) {\n+        A[] array = new A[1];\n+        array[0] = finalField;\n+        for (int i = 0; i < 20_000; i++) {\n+            test1();\n+            test2();\n+        }\n+    }\n+\n+    private static void test1() {\n+        floatField = field.f;\n+        for (int i = 0; i < 1000; i++) {\n+            notInlined(field); \/\/ load barrier split thru phi and ends up on back edge\n+            if (i % 2 == 0) {\n+                field = finalField;\n+            }\n+        }\n+    }\n+\n+    private static void test2() {\n+        A[] array = new A[1];\n+        notInlined(array);\n+        int i = 0;\n+        A a = array[0];\n+        for (;;) {\n+            synchronized (new Object()) {\n+            }\n+            notInlined(a);\n+            i++;\n+            if (i >= 1000) {\n+                break;\n+            }\n+            a = array[0]; \/\/ load barrier pinned on backedge\n+        }\n+    }\n+\n+    private static void notInlined(Object a) {\n+\n+    }\n+\n+    private static class A {\n+        float f;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierOnLoopBackedge.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}