{"files":[{"patch":"@@ -2512,1 +2512,1 @@\n-    \/\/ Intel can handle 2 adds in addressing mode\n+    \/\/ Intel can handle 2 adds in addressing mode, with one of them using an immediate offset.\n@@ -2517,0 +2517,1 @@\n+        !adr->in(AddPNode::Offset)->is_Con() &&\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -173,1 +173,3 @@\n-    visited.set(n->_idx);\n+    if (visited.test_set(n->_idx)) {\n+      continue;\n+    }\n@@ -178,4 +180,1 @@\n-        assert(C->node_arena()->contains(in), \"dead node\");\n-        if (!visited.test(in->_idx)) {\n-          worklist.push(in);\n-        }\n+        worklist.push(in);\n@@ -184,0 +183,3 @@\n+    for (DUIterator_Fast jmax, j = n->fast_outs(jmax); j < jmax; j++) {\n+      worklist.push(n->fast_out(j));\n+    }\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8339303\n+ * @summary Test that the matcher does not create dead nodes when matching\n+ *          address expressions with two immediate offsets.\n+ * @requires os.maxMemory > 4G\n+ *\n+ * @run main\/othervm -Xmx4g -Xbatch -XX:-TieredCompilation\n+ *      -XX:CompileOnly=compiler.c2.TestMatcherTwoImmOffsets::test\n+ *      compiler.c2.TestMatcherTwoImmOffsets\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestMatcherTwoImmOffsets {\n+    static final int[] a1 = new int[10];\n+    int[] a2;\n+    static TestMatcherTwoImmOffsets o = new TestMatcherTwoImmOffsets();\n+\n+    public static void test() {\n+        for (int i = 0; i < 10; i++) {\n+            for (int j = 0; j < 100; j++) {\n+                int[][] nArray = new int[10][];\n+                for (int k = 0; k < nArray.length; k++) {}\n+            }\n+            for (long j = 1L; j < 3L; j++) {\n+                a1[(int) j]--;\n+            }\n+            o.a2 = a1;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMatcherTwoImmOffsets.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}