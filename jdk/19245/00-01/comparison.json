{"files":[{"patch":"@@ -119,0 +119,1 @@\n+          --add-exports java.base\/jdk.internal.module=jdk.compiler.interim \\\n","filename":"make\/CompileInterimLangtools.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.module.InvalidModuleDescriptorException;\n@@ -42,0 +43,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -44,0 +47,1 @@\n+import jdk.internal.module.Checks;\n@@ -118,12 +122,15 @@\n-        try (var stream = Files.find(sourceRootPath, 99, (path, attr) -> attr.isDirectory())) {\n-            var names = new TreeSet<String>();\n-            stream.filter(ProgramDescriptor::containsAtLeastOneRegularFile)\n-                  .map(sourceRootPath::relativize)\n-                  .filter(ProgramDescriptor::composedOfValidPackageNameElements)\n-                  .map(Path::toString)\n-                  .filter(string -> !string.isEmpty())\n-                  .map(string -> string.replace(File.separatorChar, '.'))\n-                  .forEach(names::add);\n-            return names;\n-        } catch (IOException exception) {\n-            throw new UncheckedIOException(exception);\n+        return explodedPackages(sourceRootPath);\n+    }\n+\n+    \/\/ -- exploded directories --> based on jdk.internal.module.ModulePath\n+\n+    private static Set<String> explodedPackages(Path dir) {\n+        String separator = dir.getFileSystem().getSeparator();\n+        try (Stream<Path> stream = Files.find(dir, Integer.MAX_VALUE,\n+                (path, attrs) -> attrs.isRegularFile() && !isHidden(path))) {\n+            return stream.map(dir::relativize)\n+                    .map(path -> toPackageName(path, separator))\n+                    .flatMap(Optional::stream)\n+                    .collect(Collectors.toSet());\n+        } catch (IOException x) {\n+            throw new UncheckedIOException(x);\n@@ -133,6 +140,17 @@\n-    private static boolean composedOfValidPackageNameElements(Path path) {\n-        if (path.getNameCount() == 0) return false;\n-        for (var element : path) {\n-            var name = element.toString();\n-            if (!SourceVersion.isIdentifier(name)) {\n-                return false;\n+    \/**\n+     * Maps the relative path of an entry in an exploded module to a package\n+     * name.\n+     *\n+     * @throws InvalidModuleDescriptorException if the name is a class file in\n+     *         the top-level directory (and it's not module-info.class)\n+     *\/\n+    private static Optional<String> toPackageName(Path file, String separator) {\n+        assert file.getRoot() == null;\n+\n+        Path parent = file.getParent();\n+        if (parent == null) {\n+            String name = file.toString();\n+            if (name.endsWith(\".class\") && !name.equals(\"module-info.class\")) {\n+                String msg = name + \" found in top-level directory\"\n+                        + \" (unnamed package not allowed in module)\";\n+                throw new InvalidModuleDescriptorException(msg);\n@@ -140,0 +158,9 @@\n+            return Optional.empty();\n+        }\n+\n+        String pn = parent.toString().replace(separator, \".\");\n+        if (Checks.isPackageName(pn)) {\n+            return Optional.of(pn);\n+        } else {\n+            \/\/ not a valid package name\n+            return Optional.empty();\n@@ -141,1 +168,0 @@\n-        return true;\n@@ -144,5 +170,8 @@\n-    private static boolean containsAtLeastOneRegularFile(Path directory) {\n-        try (var stream = Files.newDirectoryStream(directory, Files::isRegularFile)) {\n-            return stream.iterator().hasNext();\n-        } catch (IOException exception) {\n-            throw new UncheckedIOException(exception);\n+    \/**\n+     * Returns true if the given file exists and is a hidden file\n+     *\/\n+    private static boolean isHidden(Path file) {\n+        try {\n+            return Files.isHidden(file);\n+        } catch (IOException ioe) {\n+            return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/ProgramDescriptor.java","additions":53,"deletions":24,"binary":false,"changes":77,"status":"modified"}]}