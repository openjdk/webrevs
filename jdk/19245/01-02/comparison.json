{"files":[{"patch":"@@ -119,1 +119,0 @@\n-          --add-exports java.base\/jdk.internal.module=jdk.compiler.interim \\\n","filename":"make\/CompileInterimLangtools.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.module.InvalidModuleDescriptorException;\n@@ -43,2 +42,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -47,1 +44,0 @@\n-import jdk.internal.module.Checks;\n@@ -122,15 +118,12 @@\n-        return explodedPackages(sourceRootPath);\n-    }\n-\n-    \/\/ -- exploded directories --> based on jdk.internal.module.ModulePath\n-\n-    private static Set<String> explodedPackages(Path dir) {\n-        String separator = dir.getFileSystem().getSeparator();\n-        try (Stream<Path> stream = Files.find(dir, Integer.MAX_VALUE,\n-                (path, attrs) -> attrs.isRegularFile() && !isHidden(path))) {\n-            return stream.map(dir::relativize)\n-                    .map(path -> toPackageName(path, separator))\n-                    .flatMap(Optional::stream)\n-                    .collect(Collectors.toSet());\n-        } catch (IOException x) {\n-            throw new UncheckedIOException(x);\n+        try (var stream = Files.find(sourceRootPath, 99, (path, attr) -> attr.isDirectory())) {\n+            var names = new TreeSet<String>();\n+            stream.filter(ProgramDescriptor::containsAtLeastOneRegularFile)\n+                  .map(sourceRootPath::relativize)\n+                  .filter(ProgramDescriptor::composedOfValidPackageNameElements)\n+                  .map(Path::toString)\n+                  .filter(string -> !string.isEmpty())\n+                  .map(string -> string.replace(File.separatorChar, '.'))\n+                  .forEach(names::add);\n+            return names;\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n@@ -140,17 +133,6 @@\n-    \/**\n-     * Maps the relative path of an entry in an exploded module to a package\n-     * name.\n-     *\n-     * @throws InvalidModuleDescriptorException if the name is a class file in\n-     *         the top-level directory (and it's not module-info.class)\n-     *\/\n-    private static Optional<String> toPackageName(Path file, String separator) {\n-        assert file.getRoot() == null;\n-\n-        Path parent = file.getParent();\n-        if (parent == null) {\n-            String name = file.toString();\n-            if (name.endsWith(\".class\") && !name.equals(\"module-info.class\")) {\n-                String msg = name + \" found in top-level directory\"\n-                        + \" (unnamed package not allowed in module)\";\n-                throw new InvalidModuleDescriptorException(msg);\n+    private static boolean composedOfValidPackageNameElements(Path path) {\n+        if (path.getNameCount() == 0) return false;\n+        for (var element : path) {\n+            var name = element.toString();\n+            if (!SourceVersion.isIdentifier(name)) {\n+                return false;\n@@ -158,9 +140,0 @@\n-            return Optional.empty();\n-        }\n-\n-        String pn = parent.toString().replace(separator, \".\");\n-        if (Checks.isPackageName(pn)) {\n-            return Optional.of(pn);\n-        } else {\n-            \/\/ not a valid package name\n-            return Optional.empty();\n@@ -168,0 +141,1 @@\n+        return true;\n@@ -170,8 +144,5 @@\n-    \/**\n-     * Returns true if the given file exists and is a hidden file\n-     *\/\n-    private static boolean isHidden(Path file) {\n-        try {\n-            return Files.isHidden(file);\n-        } catch (IOException ioe) {\n-            return false;\n+    private static boolean containsAtLeastOneRegularFile(Path directory) {\n+        try (var stream = Files.newDirectoryStream(directory, Files::isRegularFile)) {\n+            return stream.iterator().hasNext();\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/ProgramDescriptor.java","additions":24,"deletions":53,"binary":false,"changes":77,"status":"modified"}]}