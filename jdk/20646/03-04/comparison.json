{"files":[{"patch":"@@ -612,1 +612,1 @@\n-  char* s_path = subsystem_path();\n+  const char* s_path = subsystem_path();\n@@ -682,1 +682,1 @@\n-  char* s_path = subsystem_path();\n+  const char* s_path = subsystem_path();\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    virtual char* subsystem_path() = 0;\n+    virtual const char* subsystem_path() = 0;\n@@ -112,2 +112,2 @@\n-    char* cgroup_path() { return _cgroup_path; }\n-    char* mount_point() { return _mount_point; }\n+    const char* cgroup_path() { return _cgroup_path; }\n+    const char* mount_point() { return _mount_point; }\n@@ -213,1 +213,1 @@\n-    virtual char* subsystem_path() = 0;\n+    virtual const char* subsystem_path() = 0;\n@@ -215,2 +215,2 @@\n-    virtual char* mount_point() = 0;\n-    virtual char* cgroup_path() = 0;\n+    virtual const char* mount_point() = 0;\n+    virtual const char* cgroup_path() = 0;\n@@ -233,1 +233,1 @@\n-    virtual char* subsystem_path() = 0;\n+    virtual const char* subsystem_path() = 0;\n@@ -235,2 +235,2 @@\n-    virtual char* mount_point() = 0;\n-    virtual char* cgroup_path() = 0;\n+    virtual const char* mount_point() = 0;\n+    virtual const char* cgroup_path() = 0;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+  char* limit_cg_path = nullptr;\n@@ -64,2 +65,2 @@\n-  bool path_iterated = false;\n-  while (limit < 0 && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n+  jlong lowest_limit = phys_mem;\n+  while ((last_slash = strrchr(cg_path, '\/')) != cg_path) {\n@@ -70,6 +71,4 @@\n-    path_iterated = true;\n-    if (limit > 0) {\n-      log_trace(os, container)(\"Adjusted controller path for memory to: %s\", mem->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return;\n+    if (limit >= 0 && limit < lowest_limit) {\n+      lowest_limit = limit;\n+      os::free(limit_cg_path); \/\/ handles nullptr\n+      limit_cg_path = os::strdup(cg_path);\n@@ -78,12 +77,21 @@\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    mem->set_subsystem_path(\"\/\");\n-    limit = mem->read_memory_limit_in_bytes(phys_mem);\n-    if (limit > 0) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted controller path for memory to: %s\", mem->subsystem_path());\n-      os::free(orig);\n-      return;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n+  \/\/ need to check limit at mount point\n+  mem->set_subsystem_path(\"\/\");\n+  limit = mem->read_memory_limit_in_bytes(phys_mem);\n+  if (limit >= 0 && limit < lowest_limit) {\n+    lowest_limit = limit;\n+    os::free(limit_cg_path); \/\/ handles nullptr\n+    limit_cg_path = os::strdup(\"\/\");\n+  }\n+  assert(lowest_limit >= 0, \"limit must be positive\");\n+  if ((julong)lowest_limit != phys_mem) {\n+    \/\/ we've found a lower limit anywhere in the hierarchy,\n+    \/\/ set the path to the limit path\n+    assert(limit_cg_path != nullptr, \"limit path must be set\");\n+    mem->set_subsystem_path(limit_cg_path);\n+    log_trace(os, container)(\"Adjusted controller path for memory to: %s. \"\n+                             \"Lowest limit was: \" JLONG_FORMAT,\n+                             mem->subsystem_path(),\n+                             lowest_limit);\n+  } else {\n+    log_trace(os, container)(\"No lower limit found for memory in hierarchy %s, \"\n+                             \"adjusting to original path %s\",\n@@ -92,3 +100,0 @@\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for memory at leaf: %s\",\n-                              mem->subsystem_path());\n@@ -96,0 +101,1 @@\n+  os::free(cg_path);\n@@ -97,0 +103,1 @@\n+  os::free(limit_cg_path);\n@@ -112,2 +119,3 @@\n-  bool path_iterated = false;\n-  while (cpus == host_cpus && (last_slash = strrchr(cg_path, '\/')) != cg_path) {\n+  int lowest_limit = host_cpus;\n+  char* limit_cg_path = nullptr;\n+  while ((last_slash = strrchr(cg_path, '\/')) != cg_path) {\n@@ -118,6 +126,4 @@\n-    path_iterated = true;\n-    if (cpus != host_cpus) {\n-      log_trace(os, container)(\"Adjusted controller path for cpu to: %s\", cpu->subsystem_path());\n-      os::free(cg_path);\n-      os::free(orig);\n-      return;\n+    if (cpus != host_cpus && cpus < lowest_limit) {\n+      lowest_limit = cpus;\n+      os::free(limit_cg_path); \/\/ handles nullptr\n+      limit_cg_path = os::strdup(cg_path);\n@@ -126,12 +132,21 @@\n-  \/\/ no lower limit found or limit at leaf\n-  os::free(cg_path);\n-  if (path_iterated) {\n-    cpu->set_subsystem_path(\"\/\");\n-    cpus = CgroupUtil::processor_count(cpu, host_cpus);\n-    if (cpus != host_cpus) {\n-      \/\/ handle limit set at mount point\n-      log_trace(os, container)(\"Adjusted controller path for cpu to: %s\", cpu->subsystem_path());\n-      os::free(orig);\n-      return;\n-    }\n-    log_trace(os, container)(\"No lower limit found in hierarchy %s, adjusting to original path %s\",\n+  \/\/ need to check limit at mount point\n+  cpu->set_subsystem_path(\"\/\");\n+  cpus = CgroupUtil::processor_count(cpu, host_cpus);\n+  if (cpus != host_cpus && cpus < lowest_limit) {\n+    lowest_limit = cpus;\n+    os::free(limit_cg_path); \/\/ handles nullptr\n+    limit_cg_path = os::strdup(cg_path);\n+  }\n+  assert(lowest_limit >= 0, \"limit must be positive\");\n+  if (lowest_limit != host_cpus) {\n+    \/\/ we've found a lower limit anywhere in the hierarchy,\n+    \/\/ set the path to the limit path\n+    assert(limit_cg_path != nullptr, \"limit path must be set\");\n+    cpu->set_subsystem_path(limit_cg_path);\n+    log_trace(os, container)(\"Adjusted controller path for cpu to: %s. \"\n+                             \"Lowest limit was: %d\",\n+                             cpu->subsystem_path(),\n+                             lowest_limit);\n+  } else {\n+    log_trace(os, container)(\"No lower limit found for cpu in hierarchy %s, \"\n+                             \"adjusting to original path %s\",\n@@ -140,3 +155,0 @@\n-  } else {\n-    log_trace(os, container)(\"Lowest limit for cpu at leaf: %s\",\n-                              cpu->subsystem_path());\n@@ -144,0 +156,1 @@\n+  os::free(cg_path);\n@@ -145,1 +158,1 @@\n-  return;\n+  os::free(limit_cg_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":60,"deletions":47,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    char* subsystem_path() override { return _path; }\n+    const char* subsystem_path() override { return _path; }\n@@ -98,3 +98,3 @@\n-    char* subsystem_path() override { return reader()->subsystem_path(); }\n-    char* mount_point() override { return reader()->mount_point(); }\n-    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    const char* subsystem_path() override { return reader()->subsystem_path(); }\n+    const char* mount_point() override { return reader()->mount_point(); }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n@@ -127,1 +127,1 @@\n-    char* subsystem_path() override {\n+    const char* subsystem_path() override {\n@@ -130,1 +130,1 @@\n-    char* mount_point() override {\n+    const char* mount_point() override {\n@@ -136,1 +136,1 @@\n-    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    char* subsystem_path() override { return _path; }\n+    const char* subsystem_path() override { return _path; }\n@@ -67,1 +67,1 @@\n-    char* subsystem_path() {\n+    const char* subsystem_path() {\n@@ -76,2 +76,2 @@\n-    char* mount_point() { return reader()->mount_point(); }\n-    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    const char* mount_point() { return reader()->mount_point(); }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n@@ -100,1 +100,1 @@\n-    char* subsystem_path() {\n+    const char* subsystem_path() {\n@@ -109,2 +109,2 @@\n-    char* mount_point() { return reader()->mount_point(); }\n-    char* cgroup_path() override { return reader()->cgroup_path(); }\n+    const char* mount_point() { return reader()->mount_point(); }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}