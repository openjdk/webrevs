{"files":[{"patch":"@@ -214,1 +214,1 @@\n-    virtual void set_subsystem_path(char* cgroup_path) = 0;\n+    virtual void set_subsystem_path(const char* cgroup_path) = 0;\n@@ -234,1 +234,1 @@\n-    virtual void set_subsystem_path(char* cgroup_path) = 0;\n+    virtual void set_subsystem_path(const char* cgroup_path) = 0;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-CgroupMemoryController* CgroupUtil::adjust_controller(CgroupMemoryController* mem) {\n+void CgroupUtil::adjust_controller(CgroupMemoryController* mem) {\n@@ -54,1 +54,1 @@\n-    return mem;\n+    return;\n@@ -61,0 +61,1 @@\n+  assert(cg_path[0] == '\/', \"cgroup path must start with '\/'\");\n@@ -74,1 +75,1 @@\n-      return mem;\n+      return;\n@@ -80,1 +81,1 @@\n-    mem->set_subsystem_path((char*)\"\/\");\n+    mem->set_subsystem_path(\"\/\");\n@@ -86,1 +87,1 @@\n-      return mem;\n+      return;\n@@ -96,1 +97,0 @@\n-  return mem;\n@@ -99,1 +99,1 @@\n-CgroupCpuController* CgroupUtil::adjust_controller(CgroupCpuController* cpu) {\n+void CgroupUtil::adjust_controller(CgroupCpuController* cpu) {\n@@ -102,1 +102,1 @@\n-    return cpu;\n+    return;\n@@ -109,0 +109,1 @@\n+  assert(cg_path[0] == '\/', \"cgroup path must start with '\/'\");\n@@ -115,1 +116,1 @@\n-    cpu->set_subsystem_path((char*)cg_path);\n+    cpu->set_subsystem_path(cg_path);\n@@ -122,1 +123,1 @@\n-      return cpu;\n+      return;\n@@ -128,1 +129,1 @@\n-    cpu->set_subsystem_path((char*)\"\/\");\n+    cpu->set_subsystem_path(\"\/\");\n@@ -134,1 +135,1 @@\n-      return cpu;\n+      return;\n@@ -144,1 +145,1 @@\n-  return cpu;\n+  return;\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,6 +35,6 @@\n-    \/\/ Iterate over the memory controller hierarchy adjusting the path to the\n-    \/\/ smallest observable limit (if any)\n-    static CgroupMemoryController* adjust_controller(CgroupMemoryController* m);\n-    \/\/ Iterate over the cpu controller hierarchy adjusting the path to the\n-    \/\/ smallest observable limit (if any)\n-    static CgroupCpuController* adjust_controller(CgroupCpuController* c);\n+    \/\/ Given a memory controller, adjust its path to a point in the hierarchy\n+    \/\/ that represents the closest memory limit.\n+    static void adjust_controller(CgroupMemoryController* m);\n+    \/\/ Given a cpu controller, adjust its path to a point in the hierarchy\n+    \/\/ that represents the closest cpu limit.\n+    static void adjust_controller(CgroupCpuController* c);\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-void CgroupV1Controller::set_subsystem_path(char *cgroup_path) {\n+void CgroupV1Controller::set_subsystem_path(const char* cgroup_path) {\n@@ -62,1 +62,1 @@\n-        char *p = strstr(cgroup_path, _root);\n+        char *p = strstr((char*)cgroup_path, _root);\n@@ -76,0 +76,6 @@\n+\/*\n+ * The common case, containers, we have _root == _cgroup_path, and thus set the\n+ * controller path to the _mount_point. This is where the limits are exposed in\n+ * the cgroup pseudo filesystem (at the leaf) and adjustment of the path won't\n+ * be needed for that reason.\n+ *\/\n@@ -195,0 +201,15 @@\n+\/\/ Constructor\n+CgroupV1Subsystem::CgroupV1Subsystem(CgroupV1Controller* cpuset,\n+                      CgroupV1CpuController* cpu,\n+                      CgroupV1Controller* cpuacct,\n+                      CgroupV1Controller* pids,\n+                      CgroupV1MemoryController* memory) :\n+    _cpuset(cpuset),\n+    _cpuacct(cpuacct),\n+    _pids(pids) {\n+  CgroupUtil::adjust_controller(memory);\n+  CgroupUtil::adjust_controller(cpu);\n+  _memory = new CachingCgroupController<CgroupMemoryController>(memory);\n+  _cpu = new CachingCgroupController<CgroupCpuController>(cpu);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    void set_subsystem_path(char *cgroup_path);\n+    void set_subsystem_path(const char *cgroup_path);\n@@ -77,1 +77,1 @@\n-    void set_subsystem_path(char *cgroup_path) override {\n+    void set_subsystem_path(const char *cgroup_path) override {\n@@ -121,1 +121,1 @@\n-    void set_subsystem_path(char *cgroup_path) override {\n+    void set_subsystem_path(const char *cgroup_path) override {\n@@ -146,0 +146,6 @@\n+    CgroupV1Subsystem(CgroupV1Controller* cpuset,\n+                      CgroupV1CpuController* cpu,\n+                      CgroupV1Controller* cpuacct,\n+                      CgroupV1Controller* pids,\n+                      CgroupV1MemoryController* memory);\n+\n@@ -171,14 +177,0 @@\n-  public:\n-    CgroupV1Subsystem(CgroupV1Controller* cpuset,\n-                      CgroupV1CpuController* cpu,\n-                      CgroupV1Controller* cpuacct,\n-                      CgroupV1Controller* pids,\n-                      CgroupV1MemoryController* memory) :\n-      _memory(new CachingCgroupController<CgroupMemoryController>(\n-                                         CgroupUtil::adjust_controller(memory))),\n-      _cpuset(cpuset),\n-      _cpu(new CachingCgroupController<CgroupCpuController>(\n-                                         CgroupUtil::adjust_controller(cpu))),\n-      _cpuacct(cpuacct),\n-      _pids(pids) {\n-    }\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,16 @@\n+\/\/ Constructor\n+CgroupV2Controller::CgroupV2Controller(char* mount_path,\n+                                       char *cgroup_path,\n+                                       bool ro) :  _read_only(ro),\n+                                                   _path(construct_path(mount_path, cgroup_path)) {\n+  _cgroup_path = os::strdup(cgroup_path);\n+  _mount_point = os::strdup(mount_path);\n+}\n+\/\/ Shallow copy constructor\n+CgroupV2Controller::CgroupV2Controller(const CgroupV2Controller& o) :\n+                                            _read_only(o._read_only),\n+                                            _path(o._path) {\n+  _cgroup_path = o._cgroup_path;\n+  _mount_point = o._mount_point;\n+}\n+\n@@ -98,0 +114,11 @@\n+\/\/ Constructor\n+CgroupV2Subsystem::CgroupV2Subsystem(CgroupV2MemoryController * memory,\n+                                     CgroupV2CpuController* cpu,\n+                                     CgroupV2Controller unified) :\n+                                     _unified(unified) {\n+  CgroupUtil::adjust_controller(memory);\n+  CgroupUtil::adjust_controller(cpu);\n+  _memory = new CachingCgroupController<CgroupMemoryController>(memory);\n+  _cpu = new CachingCgroupController<CgroupCpuController>(cpu);\n+}\n+\n@@ -267,1 +294,1 @@\n-void CgroupV2Controller::set_subsystem_path(char* cgroup_path) {\n+void CgroupV2Controller::set_subsystem_path(const char* cgroup_path) {\n@@ -287,1 +314,1 @@\n-char* CgroupV2Controller::construct_path(char* mount_path, char *cgroup_path) {\n+char* CgroupV2Controller::construct_path(char* mount_path, const char* cgroup_path) {\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static char* construct_path(char* mount_path, char *cgroup_path);\n+    static char* construct_path(char* mount_path, const char *cgroup_path);\n@@ -40,7 +40,1 @@\n-    CgroupV2Controller(char* mount_path,\n-                       char *cgroup_path,\n-                       bool ro) :  _read_only(ro),\n-                                   _path(construct_path(mount_path, cgroup_path)) {\n-      _cgroup_path = os::strdup(cgroup_path);\n-      _mount_point = os::strdup(mount_path);\n-    }\n+    CgroupV2Controller(char* mount_path, char *cgroup_path, bool ro);\n@@ -48,6 +42,1 @@\n-    CgroupV2Controller(const CgroupV2Controller& o) :\n-                                            _read_only(o._read_only),\n-                                            _path(o._path) {\n-      _cgroup_path = o._cgroup_path;\n-      _mount_point = o._mount_point;\n-    }\n+    CgroupV2Controller(const CgroupV2Controller& o);\n@@ -61,1 +50,1 @@\n-    void set_subsystem_path(char* cgroup_path);\n+    void set_subsystem_path(const char* cgroup_path);\n@@ -84,1 +73,1 @@\n-    void set_subsystem_path(char* cgroup_path) {\n+    void set_subsystem_path(const char* cgroup_path) {\n@@ -117,1 +106,1 @@\n-    void set_subsystem_path(char* cgroup_path) {\n+    void set_subsystem_path(const char* cgroup_path) {\n@@ -137,7 +126,1 @@\n-                      CgroupV2Controller unified) :\n-                         _unified(unified),\n-                         _memory(new CachingCgroupController<CgroupMemoryController>(\n-                                         CgroupUtil::adjust_controller(memory))),\n-                         _cpu(new CachingCgroupController<CgroupCpuController>(\n-                                         CgroupUtil::adjust_controller(cpu))) {\n-    }\n+                      CgroupV2Controller unified);\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"}]}