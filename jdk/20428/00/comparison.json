{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,17 @@\n-    JLI_CmdToArgs(GetCommandLine());\n+\n+    \/\/ Obtain the command line in UTF-16, then convert it to ANSI code page\n+    \/\/ without the \"best-fit\" option\n+    LPWSTR wcCmdline = GetCommandLineW();\n+    int mbSize = WideCharToMultiByte(CP_ACP,\n+        WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR,\n+        wcCmdline, -1, NULL, 0, NULL, NULL);\n+    LPSTR mbCmdline = JLI_MemAlloc(mbSize);\n+    if (WideCharToMultiByte(CP_ACP, WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR,\n+        wcCmdline, -1, mbCmdline, mbSize, NULL, NULL) == 0) {\n+        perror(\"command line encoding conversion failure\");\n+        exit(1);\n+    }\n+\n+    JLI_CmdToArgs(mbCmdline);\n+    JLI_MemFree(mbCmdline);\n+\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8337506\n+ * @summary Verify Command Line arguments are not mapped with\n+ *     \"best-fit\" mappings on Windows\n+ * @requires (os.family == \"windows\")\n+ * @library \/test\/lib\n+ * @run junit DisableBestFitMappingTest\n+ *\/\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n+import java.util.stream.Stream;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.*;\n+\n+public class DisableBestFitMappingTest {\n+    private static final CharsetEncoder NATIVE_ENC =\n+            Charset.forName(System.getProperty(\"native.encoding\")).newEncoder();\n+    private static final String REPLACEMENT =\n+            NATIVE_ENC.charset().decode(ByteBuffer.wrap(NATIVE_ENC.replacement())).toString();\n+    private static final int EXIT_SUCCESS = 0;\n+    private static final int EXIT_FAILURE = -1;\n+\n+    static Stream<Arguments> CMD_ARGS() {\n+        return Stream.of(\n+                Arguments.of(\"aa\\uff02 \\uff02bb\", \"aa\" + REPLACEMENT + \" \" + REPLACEMENT + \"bb\"),\n+                Arguments.of(\"aa\\uff01bb\", \"aa\" + REPLACEMENT + \"bb\"),\n+                Arguments.of(\"aa\\u221ebb\", \"aa\" + REPLACEMENT + \"bb\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"CMD_ARGS\")\n+    void testDisableBestFitMapping(String arg, String expected) throws Exception {\n+        \/\/ Only execute if the arg cannot be encoded\n+        assumeFalse(NATIVE_ENC.canEncode(arg),\n+                \"native.encoding (%s) can encode the argument '%s'. Test ignored.\"\n+                        .formatted(NATIVE_ENC.charset(), arg));\n+\n+        var result= ProcessTools.executeTestJava(\n+                DisableBestFitMappingTest.class.getSimpleName(), arg, expected);\n+        result.asLines().forEach(System.out::println);\n+        assertEquals(EXIT_SUCCESS, result.getExitValue(),\n+                \"Disabling best-fit mapping failed\");\n+    }\n+\n+    public static void main(String... args) {\n+        System.out.println(args[0]);\n+        System.out.println(args[1]);\n+        System.exit(args[0].equals(args[1]) ? EXIT_SUCCESS : EXIT_FAILURE);\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/DisableBestFitMappingTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}