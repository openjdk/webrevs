{"files":[{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.PrintJob;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PrinterJob;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4242308 4255603\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jtreg.SkippedException\n+ * @summary Tests printing of images\n+ * @run main\/manual ImageTest\n+ *\/\n+public final class ImageTest {\n+\n+    private static final class ImageFrame extends Frame {\n+        final Image img;\n+        PrintJob pjob;\n+\n+        private ImageFrame() {\n+            super(\"ImageFrame\");\n+            img = getToolkit().getImage(\"image.gif\");\n+        }\n+\n+        public void paint(Graphics g) {\n+            int width = img.getWidth(this);\n+            int height = img.getHeight(this);\n+            if (pjob != null) {\n+                System.out.println(\"Size \" + pjob.getPageDimension());\n+                Dimension dim = pjob.getPageDimension();\n+                if (width > dim.width) {\n+                    width = dim.width - 30; \/\/ take care of paper margin\n+                }\n+                if (height > dim.height) {\n+                    height = dim.height - 30;\n+                }\n+            }\n+            g.drawImage(img, 10, 75, width, height, this);\n+        }\n+\n+        public void setPrintJob(PrintJob pj) {\n+            pjob = pj;\n+        }\n+\n+        public boolean imageUpdate(Image img, int infoflags,\n+                                   int x, int y, int w, int h) {\n+            if ((infoflags & ALLBITS) != 0) {\n+                repaint();\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private static Frame init() {\n+        ImageFrame f = new ImageFrame();\n+        f.setLayout(new FlowLayout());\n+        Button b = new Button(\"Print\");\n+        b.addActionListener(e -> {\n+            PrintJob pj = Toolkit.getDefaultToolkit()\n+                    .getPrintJob(f, \"ImageTest\", null);\n+            if (pj != null) {\n+                f.setPrintJob(pj);\n+                Graphics pg = pj.getGraphics();\n+                f.paint(pg);\n+                pg.dispose();\n+                pj.end();\n+            }\n+        });\n+        f.add(b);\n+        f.setBounds(0, 50, 700, 350);\n+\n+        return f;\n+    }\n+\n+    private static void createImage() throws IOException {\n+        final BufferedImage bufferedImage =\n+                new BufferedImage(600, 230, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = bufferedImage.createGraphics();\n+\n+        g2d.setColor(new Color(0xE7E7E7));\n+        g2d.fillRect(0, 0, bufferedImage.getWidth(), bufferedImage.getHeight());\n+\n+        g2d.setColor(Color.YELLOW);\n+        g2d.fillRect(0, 6, 336, 40);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(\"Yellow rectangle\", 10, 30);\n+\n+        g2d.setColor(Color.CYAN);\n+        g2d.fillRect(132, 85, 141, 138);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(\"Cyan rectangle\", 142, 148);\n+\n+        g2d.setColor(Color.MAGENTA);\n+        g2d.fillRect(432, 85, 141, 138);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(\"Magenta rectangle\", 442, 148);\n+\n+        g2d.dispose();\n+\n+        ImageIO.write(bufferedImage, \"gif\", new File(\"image.gif\"));\n+    }\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+             Click the Print button on the Frame. Select a printer from the\n+             print dialog and click 'OK'. Verify that the image displayed\n+             in the Frame is correctly printed. Test printing in both Color\n+             and Monochrome.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        createImage();\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .testUI(ImageTest::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/ImageTest\/ImageTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}