{"files":[{"patch":"@@ -2017,0 +2017,11 @@\n+  \/\/ If we are loading from a freshly-allocated object, produce a zero,\n+  \/\/ if the load is provably beyond the header of the object.\n+  \/\/ (Also allow a variable load from a fresh array to produce zero.)\n+  const TypeOopPtr *tinst = tp->isa_oopptr();\n+  bool is_instance = (tinst != nullptr) && tinst->is_known_instance_field();\n+  Node* value = can_see_stored_value(mem, phase);\n+  if (value != nullptr && value->is_Con()) {\n+    assert(value->bottom_type()->higher_equal(_type), \"sanity\");\n+    return value->bottom_type();\n+  }\n+\n@@ -2223,14 +2234,0 @@\n-  \/\/ If we are loading from a freshly-allocated object, produce a zero,\n-  \/\/ if the load is provably beyond the header of the object.\n-  \/\/ (Also allow a variable load from a fresh array to produce zero.)\n-  const TypeOopPtr *tinst = tp->isa_oopptr();\n-  bool is_instance = (tinst != nullptr) && tinst->is_known_instance_field();\n-  bool is_boxed_value = (tinst != nullptr) && tinst->is_ptr_to_boxed_value();\n-  if (ReduceFieldZeroing || is_instance || is_boxed_value) {\n-    Node* value = can_see_stored_value(mem,phase);\n-    if (value != nullptr && value->is_Con()) {\n-      assert(value->bottom_type()->higher_equal(_type),\"sanity\");\n-      return value->bottom_type();\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8346184\n+ * @summary C2: assert(has_node(i)) failed during split thru phi\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestLoadSplitThruPhiNull\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-ReduceFieldZeroing TestLoadSplitThruPhiNull\n+ * @run main TestLoadSplitThruPhiNull\n+ *\n+ *\/\n+\n+public class TestLoadSplitThruPhiNull {\n+    private static Object[] fieldArray;\n+    private static Object fieldObject;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(true);\n+            test1(false);\n+        }\n+    }\n+\n+    private static Object test1(boolean flag) {\n+        for (int i = 0; i < 10; i++) {\n+            for (int j = 0; j < 10; j++) {\n+                for (int k = 0; k < 10; k++) {\n+\n+                }\n+            }\n+        }\n+        Object[] array = new Object[10];\n+        fieldArray = array;\n+        int i;\n+        for (i = 0; i < 10; i++) {\n+            for (int j = 0; j < 10; j++) {\n+\n+            }\n+        }\n+        Object v = array[i-10];\n+        if (flag) {\n+            array[0] = new Object();\n+        }\n+        return array[i-10];\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestLoadSplitThruPhiNull.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}