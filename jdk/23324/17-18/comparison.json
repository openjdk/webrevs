{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -662,16 +662,0 @@\n-        if (UIManager.getLookAndFeel().getName().equals(\"Windows\")\n-            && (Integer.parseInt(System.getProperty(\"os.name\")\n-                .replaceAll(\"[^0-9]\", \"\")) >= 11)\n-            && lh.getCheckIcon() != null && lh.useCheckAndArrow()) {\n-            Rectangle rect = lr.getTextRect();\n-\n-            \/\/ If ImageIcon is present, place menuItem text slightly ahead\n-            \/\/ else place text slightly before so that text appears\n-            \/\/ to be at the same line as ImageIcon if it was present\n-            if (menuItem.getIcon() != null) {\n-                rect.x = rect.x + checkIcon.getIconWidth() \/ 2;\n-            } else {\n-                rect.x = rect.x - checkIcon.getIconWidth() \/ 2;\n-            }\n-            lr.setTextRect(rect);\n-        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicMenuItemUI.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import javax.swing.Icon;\n@@ -74,0 +75,18 @@\n+\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                    arrowIcon, background, foreground, defaultTextIconGap,\n+                    menuItem, getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsCheckBoxMenuItemUI.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.awt.Font;\n@@ -31,0 +32,1 @@\n+import java.awt.Insets;\n@@ -36,0 +38,1 @@\n+import javax.swing.Icon;\n@@ -62,0 +65,3 @@\n+    private static Color disabledForeground;\n+    private static Color acceleratorSelectionForeground;\n+    private static Color acceleratorForeground;\n@@ -124,0 +130,21 @@\n+    protected void installDefaults() {\n+        super.installDefaults();\n+        String prefix = getPropertyPrefix();\n+\n+        if (acceleratorSelectionForeground == null ||\n+                acceleratorSelectionForeground instanceof UIResource) {\n+            acceleratorSelectionForeground =\n+                    UIManager.getColor(prefix + \".acceleratorSelectionForeground\");\n+        }\n+        if (acceleratorForeground == null ||\n+                acceleratorForeground instanceof UIResource) {\n+            acceleratorForeground =\n+                    UIManager.getColor(prefix + \".acceleratorForeground\");\n+        }\n+        if (disabledForeground == null ||\n+                disabledForeground instanceof UIResource) {\n+            disabledForeground =\n+                    UIManager.getColor(prefix + \".disabledForeground\");\n+        }\n+    }\n+\n@@ -136,0 +163,191 @@\n+    private static void applyInsets(Rectangle rect, Insets insets) {\n+        if(insets != null) {\n+            rect.x += insets.left;\n+            rect.y += insets.top;\n+            rect.width -= (insets.right + rect.x);\n+            rect.height -= (insets.bottom + rect.y);\n+        }\n+    }\n+\n+    private static void paintCheckIcon(Graphics g, MenuItemLayoutHelper lh,\n+                                MenuItemLayoutHelper.LayoutResult lr,\n+                                Color holdc, Color foreground) {\n+        if (lh.getCheckIcon() != null) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n+                    && model.isSelected())) {\n+                g.setColor(foreground);\n+            } else {\n+                g.setColor(holdc);\n+            }\n+            if (lh.useCheckAndArrow()) {\n+                lh.getCheckIcon().paintIcon(lh.getMenuItem(), g,\n+                        lr.getCheckRect().x, lr.getCheckRect().y);\n+            }\n+            g.setColor(holdc);\n+        }\n+    }\n+\n+    private static void paintIcon(Graphics g, MenuItemLayoutHelper lh,\n+                           MenuItemLayoutHelper.LayoutResult lr, Color holdc) {\n+        if (lh.getIcon() != null) {\n+            Icon icon;\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (!model.isEnabled()) {\n+                icon = lh.getMenuItem().getDisabledIcon();\n+            } else if (model.isPressed() && model.isArmed()) {\n+                icon = lh.getMenuItem().getPressedIcon();\n+                if (icon == null) {\n+                    \/\/ Use default icon\n+                    icon = lh.getMenuItem().getIcon();\n+                }\n+            } else {\n+                icon = lh.getMenuItem().getIcon();\n+            }\n+\n+            if (icon != null) {\n+                icon.paintIcon(lh.getMenuItem(), g, lr.getIconRect().x,\n+                        lr.getIconRect().y);\n+                g.setColor(holdc);\n+            }\n+        }\n+    }\n+\n+    private static void paintAccText(Graphics g, MenuItemLayoutHelper lh,\n+                              MenuItemLayoutHelper.LayoutResult lr) {\n+        if (!lh.getAccText().isEmpty()) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            g.setFont(lh.getAccFontMetrics().getFont());\n+            if (!model.isEnabled()) {\n+\n+                \/\/ *** paint the accText disabled\n+                if (disabledForeground != null) {\n+                    g.setColor(disabledForeground);\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x,\n+                            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n+                } else {\n+                    g.setColor(lh.getMenuItem().getBackground().brighter());\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x,\n+                            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n+                    g.setColor(lh.getMenuItem().getBackground().darker());\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x - 1,\n+                            lr.getAccRect().y + lh.getFontMetrics().getAscent() - 1);\n+                }\n+            } else {\n+\n+                \/\/ *** paint the accText normally\n+                if (model.isArmed()\n+                        || (lh.getMenuItem() instanceof JMenu\n+                        && model.isSelected())) {\n+                    g.setColor(acceleratorSelectionForeground);\n+                } else {\n+                    g.setColor(acceleratorForeground);\n+                }\n+                SwingUtilities2.drawString(lh.getMenuItem(), g, lh.getAccText(),\n+                        lr.getAccRect().x, lr.getAccRect().y +\n+                                lh.getAccFontMetrics().getAscent());\n+            }\n+        }\n+    }\n+\n+    private static void paintArrowIcon(Graphics g, MenuItemLayoutHelper lh,\n+                                MenuItemLayoutHelper.LayoutResult lr,\n+                                Color foreground) {\n+        if (lh.getArrowIcon() != null) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n+                    && model.isSelected())) {\n+                g.setColor(foreground);\n+            }\n+            if (lh.useCheckAndArrow()) {\n+                lh.getArrowIcon().paintIcon(lh.getMenuItem(), g,\n+                        lr.getArrowRect().x, lr.getArrowRect().y);\n+            }\n+        }\n+    }\n+\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                                            arrowIcon, background, foreground,\n+                                            defaultTextIconGap, menuItem,\n+                                            getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+        return;\n+    }\n+\n+    static void paintMenuItem(WindowsMenuItemUIAccessor accessor, Graphics g,\n+                              JComponent c, Icon checkIcon, Icon arrowIcon,\n+                              Color background, Color foreground,\n+                              int defaultTextIconGap, JMenuItem menuItem, String prefix) {\n+        \/\/ Save original graphics font and color\n+        Font holdf = g.getFont();\n+        Color holdc = g.getColor();\n+\n+        JMenuItem mi = (JMenuItem) c;\n+        g.setFont(mi.getFont());\n+\n+        Rectangle viewRect = new Rectangle(0, 0, mi.getWidth(), mi.getHeight());\n+        applyInsets(viewRect, mi.getInsets());\n+\n+        String acceleratorDelimiter =\n+                UIManager.getString(\"MenuItem.acceleratorDelimiter\");\n+        if (acceleratorDelimiter == null) { acceleratorDelimiter = \"+\"; }\n+        Font acceleratorFont = UIManager.getFont(\"MenuItem.acceleratorFont\");\n+        if (acceleratorFont == null) {\n+            acceleratorFont = UIManager.getFont(\"MenuItem.font\");\n+        }\n+        MenuItemLayoutHelper lh = new MenuItemLayoutHelper(mi, checkIcon,\n+                arrowIcon, viewRect, defaultTextIconGap, acceleratorDelimiter,\n+                mi.getComponentOrientation().isLeftToRight(), mi.getFont(),\n+                acceleratorFont, MenuItemLayoutHelper.useCheckAndArrow(menuItem),\n+                prefix);\n+        MenuItemLayoutHelper.LayoutResult lr = lh.layoutMenuItem();\n+\n+        paintBackground(accessor, g, mi, background);\n+        paintCheckIcon(g, lh, lr, holdc, foreground);\n+        paintIcon(g, lh, lr, holdc);\n+\n+        if ((Integer.parseInt(System.getProperty(\"os.name\")\n+                .replaceAll(\"[^0-9]\", \"\")) >= 11)\n+                && lh.getCheckIcon() != null && lh.useCheckAndArrow()) {\n+            Rectangle rect = lr.getTextRect();\n+\n+            \/\/ If ImageIcon is present, place menuItem text slightly ahead\n+            \/\/ else place text slightly before so that text appears\n+            \/\/ to be at the same line as ImageIcon if it was present\n+            if (menuItem.getIcon() != null) {\n+                rect.x = rect.x + checkIcon.getIconWidth() \/ 2;\n+            } else {\n+                rect.x = rect.x - checkIcon.getIconWidth() \/ 2;\n+            }\n+            lr.setTextRect(rect);\n+        }\n+        if (!lh.getText().isEmpty()) {\n+            if (lh.getHtmlView() != null) {\n+                \/\/ Text is HTML\n+                lh.getHtmlView().paint(g, lr.getTextRect());\n+            } else {\n+                \/\/ Text isn't HTML\n+                paintText(accessor, g, lh.getMenuItem(),\n+                          lr.getTextRect(), lh.getText());\n+            }\n+        }\n+        paintAccText(g, lh, lr);\n+        paintArrowIcon(g, lh, lr, foreground);\n+\n+        \/\/ Restore original graphics font and color\n+        g.setColor(holdc);\n+        g.setFont(holdf);\n+        return;\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":219,"deletions":1,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,0 +130,19 @@\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                              Icon checkIcon, Icon arrowIcon,\n+                              Color background, Color foreground,\n+                              int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon, arrowIcon,\n+                                            background, foreground,\n+                                            defaultTextIconGap, menuItem,\n+                                            getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                                   foreground, defaultTextIconGap);\n+    }\n+\n+\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuUI.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import javax.swing.Icon;\n@@ -75,0 +76,17 @@\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                    arrowIcon, background, foreground, defaultTextIconGap,\n+                    menuItem, getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRadioButtonMenuItemUI.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}