{"files":[{"patch":"@@ -143,1 +143,1 @@\n-    check_unsupported_dumping_properties();\n+    check_unsupported_dumping_module_options();\n@@ -252,15 +252,19 @@\n-static const char* unsupported_properties[] = {\n-  \"jdk.module.limitmods\",\n-  \"jdk.module.upgrade.path\",\n-  \"jdk.module.patch.0\"\n-};\n-static const char* unsupported_options[] = {\n-  \"--limit-modules\",\n-  \"--upgrade-module-path\",\n-  \"--patch-module\"\n-};\n-\n-void CDSConfig::check_unsupported_dumping_properties() {\n-  assert(is_dumping_archive(), \"this function is only used with CDS dump time\");\n-  assert(ARRAY_SIZE(unsupported_properties) == ARRAY_SIZE(unsupported_options), \"must be\");\n-  \/\/ If a vm option is found in the unsupported_options array, vm will exit with an error message.\n+\/\/ Returns any JVM command-line option, such as \"--patch-module\", that's not supported by CDS.\n+static const char* find_any_unsupported_module_option() {\n+  \/\/ Note that arguments.cpp has translated the command-line options into properties. If we find an\n+  \/\/ unsupported property, translate it back to its command-line option for better error reporting.\n+\n+  \/\/ The following properties are checked by Arguments::is_internal_module_property() and cannot be\n+  \/\/ directly specified in the command-line.\n+  static const char* unsupported_module_properties[] = {\n+    \"jdk.module.limitmods\",\n+    \"jdk.module.upgrade.path\",\n+    \"jdk.module.patch.0\"\n+  };\n+  static const char* unsupported_module_options[] = {\n+    \"--limit-modules\",\n+    \"--upgrade-module-path\",\n+    \"--patch-module\"\n+  };\n+\n+  assert(ARRAY_SIZE(unsupported_module_properties) == ARRAY_SIZE(unsupported_module_options), \"must be\");\n@@ -269,4 +273,3 @@\n-    for (uint i = 0; i < ARRAY_SIZE(unsupported_properties); i++) {\n-      if (strcmp(sp->key(), unsupported_properties[i]) == 0) {\n-        vm_exit_during_initialization(\n-          \"Cannot use the following option when dumping the shared archive\", unsupported_options[i]);\n+    for (uint i = 0; i < ARRAY_SIZE(unsupported_module_properties); i++) {\n+      if (strcmp(sp->key(), unsupported_module_properties[i]) == 0) {\n+        return unsupported_module_options[i];\n@@ -278,0 +281,9 @@\n+  return nullptr; \/\/ not found\n+}\n+\n+void CDSConfig::check_unsupported_dumping_module_options() {\n+  assert(is_dumping_archive(), \"this function is only used with CDS dump time\");\n+  const char* option = find_any_unsupported_module_option();\n+  if (option != nullptr) {\n+    vm_exit_during_initialization(\"Cannot use the following option when dumping the shared archive\", option);\n+  }\n@@ -284,1 +296,1 @@\n-bool CDSConfig::check_unsupported_cds_runtime_properties() {\n+bool CDSConfig::has_unsupported_runtime_module_options() {\n@@ -286,1 +298,0 @@\n-  assert(ARRAY_SIZE(unsupported_properties) == ARRAY_SIZE(unsupported_options), \"must be\");\n@@ -294,8 +305,6 @@\n-  for (uint i = 0; i < ARRAY_SIZE(unsupported_properties); i++) {\n-    if (Arguments::get_property(unsupported_properties[i]) != nullptr) {\n-      if (RequireSharedSpaces) {\n-        warning(\"CDS is disabled when the %s option is specified.\", unsupported_options[i]);\n-      } else {\n-        log_info(cds)(\"CDS is disabled when the %s option is specified.\", unsupported_options[i]);\n-      }\n-      return true;\n+  const char* option = find_any_unsupported_module_option();\n+  if (option != nullptr) {\n+    if (RequireSharedSpaces) {\n+      warning(\"CDS is disabled when the %s option is specified.\", option);\n+    } else {\n+      log_info(cds)(\"CDS is disabled when the %s option is specified.\", option);\n@@ -303,0 +312,1 @@\n+    return true;\n@@ -307,1 +317,1 @@\n-bool CDSConfig::check_vm_args_consistency(bool patch_mod_javabase,  bool mode_flag_cmd_line) {\n+bool CDSConfig::check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line) {\n@@ -355,1 +365,1 @@\n-  if (UseSharedSpaces && check_unsupported_cds_runtime_properties()) {\n+  if (UseSharedSpaces && has_unsupported_runtime_module_options()) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":42,"deletions":32,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  static bool check_unsupported_cds_runtime_properties();\n@@ -62,2 +61,3 @@\n-  static void check_unsupported_dumping_properties() NOT_CDS_RETURN;\n-  static bool check_vm_args_consistency(bool patch_mod_javabase,  bool mode_flag_cmd_line) NOT_CDS_RETURN_(true);\n+  static void check_unsupported_dumping_module_options() NOT_CDS_RETURN;\n+  static bool has_unsupported_runtime_module_options() NOT_CDS_RETURN;\n+  static bool check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line) NOT_CDS_RETURN_(true);\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -654,1 +654,1 @@\n-  CDSConfig::check_unsupported_dumping_properties();\n+  CDSConfig::check_unsupported_dumping_module_options();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1122,12 +1122,2 @@\n-    \/\/ At CDS dump time, the --patch-module entries are ignored. That means a\n-    \/\/ class is still loaded from the runtime image even if it might\n-    \/\/ appear in the _patch_mod_entries. The runtime shared class visibility\n-    \/\/ check will determine if a shared class is visible based on the runtime\n-    \/\/ environment, including the runtime --patch-module setting.\n-    \/\/\n-    \/\/ Dynamic dumping requires UseSharedSpaces to be enabled. Since --patch-module\n-    \/\/ is not supported with UseSharedSpaces, we can never come here during dynamic dumping.\n-    assert(!CDSConfig::is_dumping_dynamic_archive(), \"sanity\");\n-    if (!CDSConfig::is_dumping_static_archive()) {\n-      stream = search_module_entries(THREAD, _patch_mod_entries, pkg_entry, file_name);\n-    }\n+    assert(!CDSConfig::is_dumping_archive(), \"CDS doesn't support --patch-module during dumping\");\n+    stream = search_module_entries(THREAD, _patch_mod_entries, pkg_entry, file_name);\n@@ -1144,0 +1134,1 @@\n+      assert(!CDSConfig::is_dumping_archive(), \"CDS doesn't support exploded build\");\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"}]}