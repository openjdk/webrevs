{"files":[{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.util.Arrays;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.Box;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+import static javax.swing.BorderFactory.createEmptyBorder;\n+\n+\/*\n+ * @test\n+ * @bug 4650997\n+ * @summary rotate a TextLayout and verify that the bounds are correct\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RotFontBoundsTest\n+ *\/\n+public final class RotFontBoundsTest {\n+    private static final String TEXT = \".This is a STRINg.\";\n+\n+    private static final String INSTRUCTIONS =\n+            \"A string \\u201C\" + TEXT + \"\\u201D is drawn at eight different \"\n+            + \"angles, and eight boxes that surround the bounds of the text \"\n+            + \"layouts (give or take a pixel) are drawn in red. The boxes \"\n+            + \"are always composed of horizontal and vertical lines \\u2014 \"\n+            + \"they are not rotated.\\n\"\n+            + \"\\n\"\n+            + \"By default, all the rotations are displayed. Select or clear \"\n+            + \"a check box with an angle to show or hide a particular \"\n+            + \"rotation. Click \\\"Select All\\\" or \\\"Clear All\\\" to show all \"\n+            + \"the rotations or to hide them.\\n\"\n+            + \"\\n\"\n+            + \"Click the Pass button if each box encloses its corresponding \"\n+            + \"text layout.\\n\"\n+            + \"Otherwise, click Screenshot to save a screenshot for failure \"\n+            + \"analysis and then click Fail.\";\n+\n+    private static boolean verbose;\n+\n+    public static void main(String[] args) throws Exception {\n+        verbose = (args.length > 0 && args[0].equalsIgnoreCase(\"verbose\"));\n+\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+        PassFailJFrame.builder()\n+                      .instructions(INSTRUCTIONS)\n+                      .rows(20)\n+                      .columns(50)\n+                      .testTimeOut(15)\n+                      .screenCapture()\n+                      .testUI(RotFontBoundsTest::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static final int ROTATIONS = 8;\n+\n+    private static JComponent createUI() {\n+        final RotatedTextBounds rotatedText = new RotatedTextBounds();\n+\n+        final JPanel checkBoxes = new JPanel(new FlowLayout(FlowLayout.CENTER,\n+                                                            4, 4));\n+        checkBoxes.setBorder(createEmptyBorder(0, 8, 8, 8));\n+        for (int i = 0; i < ROTATIONS; i++) {\n+            checkBoxes.add(new JCheckBox(new SelectRotationAction(i, rotatedText)));\n+        }\n+\n+        JButton selectAll = new JButton(\"Select All\");\n+        selectAll.addActionListener(\n+                e -> selectAllCheckBoxes(checkBoxes.getComponents(), true));\n+        selectAll.setMnemonic('S');\n+\n+        JButton clearAll = new JButton(\"Clear All\");\n+        clearAll.addActionListener(\n+                e -> selectAllCheckBoxes(checkBoxes.getComponents(), false));\n+        clearAll.setMnemonic('C');\n+\n+        Box controls = Box.createHorizontalBox();\n+        controls.add(new JLabel(\"Visible Rotations:\"));\n+        controls.add(Box.createHorizontalGlue());\n+        controls.add(selectAll);\n+        controls.add(Box.createHorizontalStrut(4));\n+        controls.add(clearAll);\n+        controls.setBorder(createEmptyBorder(8, 8, 0, 8));\n+\n+        Box controlPanel = Box.createVerticalBox();\n+        controlPanel.add(controls);\n+        controlPanel.add(checkBoxes);\n+\n+        Box javaVersion = Box.createHorizontalBox();\n+        javaVersion.setBorder(createEmptyBorder(8, 8, 8, 8));\n+        javaVersion.add(new JLabel(\"Java version: \"\n+                                        + System.getProperty(\"java.runtime.version\")));\n+        javaVersion.add(Box.createHorizontalGlue());\n+\n+        Box main = Box.createVerticalBox();\n+        main.setName(\"Rotated TextLayout Test\");\n+        main.add(controlPanel);\n+        main.add(rotatedText);\n+        main.add(javaVersion);\n+\n+        return main;\n+    }\n+\n+    private static final class RotatedTextBounds extends JComponent {\n+        private final Font font = new Font(Font.DIALOG, Font.PLAIN, 24);\n+\n+        private final boolean[] rotationVisible = new boolean[ROTATIONS];\n+\n+        private RotatedTextBounds() {\n+            setBackground(Color.WHITE);\n+            setPreferredSize(new Dimension(400, 400));\n+            Arrays.fill(rotationVisible, true);\n+        }\n+\n+        public void setRotationVisible(int rotation, boolean visible) {\n+            rotationVisible[rotation] = visible;\n+            repaint();\n+        }\n+\n+        \/\/ Counts the number of paints\n+        private int counter = 0;\n+\n+        @Override\n+        public void paintComponent(Graphics _g) {\n+            Graphics2D g = (Graphics2D) _g;\n+            Dimension d = getSize();\n+\n+            g.setColor(getBackground());\n+            g.fillRect(0, 0, d.width, d.height);\n+\n+            counter++;\n+            int x = d.width \/ 2;\n+            int y = d.height \/ 2;\n+            FontRenderContext frc = g.getFontRenderContext();\n+\n+            for (int i = 0; i < ROTATIONS; i++) {\n+                if (!rotationVisible[i]) {\n+                    continue;\n+                }\n+\n+                double angle = -Math.PI \/ 4.0 * i;\n+                AffineTransform flip = AffineTransform.getRotateInstance(angle);\n+                Font flippedFont = font.deriveFont(flip);\n+                TextLayout tl = new TextLayout(TEXT, flippedFont, frc);\n+                Rectangle2D bb = tl.getBounds();\n+                g.setPaint(Color.BLACK);\n+                tl.draw(g, x, y);\n+                g.setPaint(Color.RED);\n+                g.drawRect(x + (int) bb.getX(), y + (int) bb.getY(),\n+                           (int) bb.getWidth(), (int) bb.getHeight());\n+\n+                if (verbose) {\n+                    if (counter == 1) {\n+                        printDetails(angle, tl);\n+                    } else if (i == 0) {\n+                        System.out.println(\"Paint, counter=\" + counter);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private static void printDetails(double angle, TextLayout tl) {\n+            System.out.println(\"Angle: \" + angle);\n+            System.out.println(\"getAscent: \" + tl.getAscent());\n+            System.out.println(\"getAdvance: \" + tl.getAdvance());\n+            System.out.println(\"getBaseline: \" + tl.getBaseline());\n+            System.out.println(\"getBounds: \" + tl.getBounds());\n+            System.out.println(\"getDescent: \" + tl.getDescent());\n+            System.out.println(\"getLeading: \" + tl.getLeading());\n+            System.out.println(\"getVisibleAdvance: \" + tl.getVisibleAdvance());\n+            System.out.println(\".\");\n+        }\n+    }\n+\n+    private static final class SelectRotationAction\n+            extends AbstractAction\n+            implements PropertyChangeListener {\n+        private final int rotation;\n+        private final RotatedTextBounds rotatedText;\n+\n+        private SelectRotationAction(int rotation,\n+                                     RotatedTextBounds rotatedText) {\n+            super(rotation * (360 \/ ROTATIONS) + \"\\u00B0\");\n+            this.rotation = rotation;\n+            this.rotatedText = rotatedText;\n+\n+            putValue(SELECTED_KEY, true);\n+\n+            addPropertyChangeListener(this);\n+        }\n+\n+        private void updateRotationVisible() {\n+            rotatedText.setRotationVisible(rotation,\n+                                           (Boolean) getValue(SELECTED_KEY));\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            updateRotationVisible();\n+        }\n+\n+        @Override\n+        public void propertyChange(PropertyChangeEvent evt) {\n+            if (evt.getPropertyName().equals(SELECTED_KEY)) {\n+                updateRotationVisible();\n+            }\n+        }\n+    }\n+\n+    private static void selectAllCheckBoxes(Component[] checkBoxes,\n+                                            boolean visible) {\n+        Arrays.stream(checkBoxes)\n+              .forEach(c -> ((JCheckBox) c).setSelected(visible));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/RotFontBoundsTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"}]}