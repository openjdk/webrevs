{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.security.cert.X509CRL;\n@@ -48,1 +49,1 @@\n-        \"\"\", KeyPair.class);\n+        \"\"\", KeyPair.class, \"SunEC\");\n@@ -68,1 +69,62 @@\n-        \"\"\", RSAPrivateKey.class);\n+        \"\"\", RSAPrivateKey.class, \"SunRsaSign\");\n+\n+    public static final Entry rsaCrtCoefZeroPriv = new Entry(\"rsaCrtCoefZeroPriv\",\n+        \"\"\"\n+        -----BEGIN RSA PRIVATE KEY-----\n+        MIIEIwIBAAKCAQEAuZAPiPMlA5R0oOIbxbq+gOmBRcvptIT+0pmG6rZ6H\/\/r7A\/Z\n+        MRwen0iO2GuhlyUgOk9Fja\/TMBrNX99boVDEZtL4oxRTJibdLNjfQqPeFhs3NNvv\n+        CJJEGD91Dq\/fGbWv1TMZcEywqqYSdERDEA7yluw87I7YZc9kXVBwRw5AedvoXOL\/\n+        z5yPjK8W7FTCLHSVKiD\/X3P3ZX9TmFjTIbRH15Do5sRxsPdrZczYjWdXFXNQEUuF\n+        sVFGHFbB\/AJiZlGYqMU+hEIErE35sHrKpZYkj9YovYQe0SBJyuROPl8wmz0Cd69s\n+        rhg142Qf23RPhclBuCNAQQOkefeCppg4IFFh7QIDAQABAoIBADlKHlm4Q7m2uElB\n+        dbSWwqEXNnefjJBUrT3E84\/8dXjysNppTDNqzJN9uchcdn+tESWfeshTO97yr2yF\n+        j4se3fwm72ed60vwnMFvVYKECBmIHoO90S8yxT49PT0jFDyiSN6IT7bJnpOZAUKP\n+        HqtTCheJaQfZ1DqejIx4vKlbX5GfShwPQV0Q7KeKnfxhryhAbM5Y5UT8grQGBQU7\n+        aQUZuasQV10APVRaz39VU8\/hzBc081LR3O0tjnZcrMAQ7ANsP9Gu3My04cnQ5WBo\n+        P8uCCaSPSkrzCvjd9YYkdnwXMbVCfALOa+MxBddMi4IQG0qI28Bpw6dkKziPxage\n+        KcAQnAsCgYEA0\/CwzUlyrG6f+FF3uAvPVn\/jEhWatJb7Me7lkhO3suV92brb1pQo\n+        1W1jHdx0OqMuCVfIJ4bXkTwKuvLQGcWJzNWUVh4Tij\/ZAV0Ssw2cKbBSCQGNIFsx\n+        Ux0V9tDSYJsEdk+Y5grloDNJokYYCCpF5bz\/6QYmX+t3yzjyVSvcNeMCgYEA4COU\n+        ezUXKLSWD+jJZXpS5yopB7oXAg7mmonlc1DRuaIxspwBrbXPLQ\/neN8Sefpz9Nxn\n+        4ksPxGbLnJh0wGCnxSu0Qfn4eNVSsulag4IQmbCO2UBsdXNCJB5KlDpRlVhvvviH\n+        Zpz2Dkdx+itLf1EV841MCtPAHZJwrs6i6JntEe8CgYEAgJYdjs+rJXcQ04YKDr4L\n+        k72PtR8qd7rKuObqnhAcegvGqV03mB7YD3WIl0tzsUfj3INHysOC8njtQbOkEp7J\n+        Fl\/W2dDxpgVK0gr4F26AesKhYxlv2Fu7t2OEOfVETpx+vpFYgOnHm8TCPhQs7HdJ\n+        ZTOgSG8UxUmFquToEkjEGGUCgYB6AMP8wKxHeuzH4iVl+EySCa\/lxdRqSWQasH7V\n+        4yMVkYTNvP9o57LKy4Jql7n97Wca3LIrSkJd3LpuFcpPQQ1xVNW8p+0pEK0AN+cN\n+        +ElC7wkCln+y+rcA5AAiaRApY8cHw04oe72vjhIrY0+oEKILPVkr95D2R9TQQigI\n+        xmh1vwIBAA==\n+        -----END RSA PRIVATE KEY-----\n+        \"\"\", RSAPrivateKey.class, \"SunRsaSign\");\n+\n+    public static final Entry rsapsspriv = new Entry(\"rsapsspriv\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIIEugIBADALBgkqhkiG9w0BAQoEggSmMIIEogIBAAKCAQEAn3qFQtvj9JVqVPRh\n+        mMMRyT17GiUY+NWOwUHx5bHqfhlHJoCllctSU\/YXzrH4Da1w7sSeaMmAKYMW4X5k\n+        rn9hnKOhgHnm2nkZBaVNQeyrseuDnfwWtLXjnj8rEKpgf9UPRUeXGRSoAb1qpwBf\n+        epFtLSKZrzswZY2u2UEUGJERABi6Qp+cIZ8uXzBkIsMgrhb50xsdysZ9+qq95z0i\n+        N1vh\/V+Yi2fYpSYVDE8aMWdpvs0oWGvoLQjRgElJx\/SknndAfLD42HPYZyyXevyJ\n+        RgUf+NP0V7c+UtE7m7pgMs1hhxHSmUNdfH9GnOSg9m3+L3WqhaNNWB4aKMqFyhlM\n+        EsAuawIDAQABAoIBAAMJ9yXIgeYEaN54j67fsg7nJIQ228HLc\/5xGWvFQaYofidu\n+        K87twm0GKKWlf4gR24U5QEQtPst2YNu9fav+PRJv4yEgcYqNOdxWg4veN4Fa7wr2\n+        JZ\/zmARJHjLMRFgl67YSwKmCMBdkZXa24PA5et6cJQM7+gFIELe5b+lt7j3VsxQ7\n+        JpTJyp3I73lXcJrzcb\/OCTxobFPLtkVSgKUNwae26xlNqXX4fQfLp99LHGnkmG3k\n+        Wlzjs6dUi4fl4yLAJYMxEwxQbSbmY66ZKnM4SkT\/YHx67gyJw2CMRp4FQDg94Sor\n+        0IDDKiSMGzcjuCuUl27\/qTuv+iMgCqNB7CSPXtECgYEAvqN8ZuZXeUKz4tn6wxJk\n+        k1utCl3pSM5PLMF4J43uvX49HF1i3svXrwxzJqug6kPXvB7cuB6U2DFIM3lh2jNE\n+        u2w0U\/5zVz2yEI9EaRjnOXePLsSWjOiC+5MGTafJWy5vZ8+zaWL9tjtUH5hsg1cB\n+        ZMlXtWrI+AmAUAv6FFDZaHECgYEA1igXzRMGgXAT+YX0wdZQcRMy9jD5WIYIiCex\n+        6\/WRE2LDM855ZBwTU5gyqZC2MWC3yn1ASDraxKdH1m3872Q0NVJfsOaLvBk1HuPk\n+        dlSHRKO2GeO9m5\/YzrZm9jpGs0IH6DKOah\/t0aCd2CFxt6qef2wOUmXTCK6tyCXN\n+        EiUmEpsCgYAMue85E1Ftl+VYVILn+Ndb+ve\/RGupX5RrgXLa+R+h6MZ9mUJbazI3\n+        zlX1k+mHGgZR2aGUbP40vH18ajL9FQUWme+YV9ktTsIPVvETLwVokbGuRpNiTrdH\n+        whXeoz\/O5Xesb3Ijq+cR\/j3sagl8bxd5ufMv+jP2UvQM4+\/K4WbSEQKBgGuZeVvw\n+        UzR1u5ODWpaJt6EYpGJN+PohXegLCbokh9\/Vn35IH3XNJWi677mCnAfzMGTsyX+B\n+        Eqn74nw6hvtAvXqNCMc5DrxTbf03Q3KwxcYW+0fGxV2L0sMJonHUlfE7G\/3uaN+p\n+        azQIH0aYhypg74HWKNv9jSqvmWEWnRKg16BBAoGAGLAqCRCP8wxqRVZZjhUJ+5JN\n+        b6PrykDxCKhlA6JqZKuCYzvXhLABq\/7miNDg0CmRREl+yKXlkEoFl4g9LtP7wfjX\n+        n4us\/WNmh+GPZYxlCJSNRTjgk7pm5TjVH5YWURDEnjIHZ7yxbAFlvNUhI1mF5g97\n+        KVcB4fjBitP1h8P+MoY=\n+        -----END PRIVATE KEY-----\n+        \"\"\", RSAPrivateKey.class, \"SunRsaSign\");\n@@ -88,1 +150,1 @@\n-        \"\"\", RSAPrivateKey.class);\n+        \"\"\", RSAPrivateKey.class, \"SunRsaSign\");\n@@ -95,1 +157,1 @@\n-        \"\"\", EdECPrivateKey.class);\n+        \"\"\", EdECPrivateKey.class, \"SunEC\");\n@@ -105,1 +167,14 @@\n-        \"\"\", RSAPublicKey.class);\n+        \"\"\", RSAPublicKey.class, \"SunRsaSign\");\n+\n+    public static final Entry rsapsspub = new Entry(\"rsapsspub\",\n+        \"\"\"\n+        -----BEGIN PUBLIC KEY-----\n+        MIIBIDALBgkqhkiG9w0BAQoDggEPADCCAQoCggEBAJ96hULb4\/SValT0YZjDEck9\n+        exolGPjVjsFB8eWx6n4ZRyaApZXLUlP2F86x+A2tcO7EnmjJgCmDFuF+ZK5\/YZyj\n+        oYB55tp5GQWlTUHsq7Hrg538FrS1454\/KxCqYH\/VD0VHlxkUqAG9aqcAX3qRbS0i\n+        ma87MGWNrtlBFBiREQAYukKfnCGfLl8wZCLDIK4W+dMbHcrGffqqvec9Ijdb4f1f\n+        mItn2KUmFQxPGjFnab7NKFhr6C0I0YBJScf0pJ53QHyw+Nhz2Gcsl3r8iUYFH\/jT\n+        9Fe3PlLRO5u6YDLNYYcR0plDXXx\/RpzkoPZt\/i91qoWjTVgeGijKhcoZTBLALmsC\n+        AwEAAQ==\n+        -----END PUBLIC KEY-----\n+        \"\"\", RSAPublicKey.class, \"SunRsaSign\");\n@@ -115,1 +190,1 @@\n-        \"\"\", RSAPublicKey.class);\n+        \"\"\", RSAPublicKey.class, \"SunRsaSign\");\n@@ -122,1 +197,1 @@\n-        \"\"\", ECPublicKey.class);\n+        \"\"\", ECPublicKey.class, \"SunEC\");\n@@ -155,1 +230,1 @@\n-        \"\"\", KeyPair.class);\n+        \"\"\", KeyPair.class, \"SunRsaSign\");\n@@ -164,1 +239,18 @@\n-        \"\"\", KeyPair.class);\n+        \"\"\", KeyPair.class, \"SunEC\");\n+\n+    public static final Entry oasxdh = new Entry(\"oasxdh\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MFECAQEwBQYDK2VuBCIEIIrMS7w5YxuBTyPFiaFvp6ILiGET7wY9ybk7Qqhe3hSq\n+        gSEAB7ODPxRePrPnJMaj3f47blVx6c5bfxcllQzLp4bW5x4=\n+        -----END PRIVATE KEY-----\n+        \"\"\", KeyPair.class, \"SunEC\");\n+\n+    public static final Entry oasec = new Entry(\"oasec\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIGFAgEBMBMGByqGSM49AgEGCCqGSM49AwEHBCcwJQIBAQQgkGEVbZE1yAiO11Ya\n+        eepcrBQL+HpVE4fy0V6jbpJcmkiBQgAERCqYYmN9uNT9Z1O2Z2VC3Zag9eUAhz7G\n+        p8DqC21VrIgpqVQ4BrcWsieNg9fSd4N2hgfMpk9PCQwJQ8ifCMiBVQ==\n+        -----END PRIVATE KEY-----\n+        \"\"\", KeyPair.class, \"SunEC\");\n@@ -195,1 +287,1 @@\n-        \"\"\", RSAPrivateKey.class);\n+        \"\"\", RSAPrivateKey.class, \"SunRsaSign\");\n@@ -205,1 +297,1 @@\n-        \"\"\", EdECPrivateKey.class, \"fish\".toCharArray());\n+        \"\"\", EdECPrivateKey.class, \"SunEC\", \"fish\".toCharArray());\n@@ -209,1 +301,1 @@\n-        ed25519ep8.pem(), EncryptedPrivateKeyInfo.class, null);\n+        ed25519ep8.pem(), EncryptedPrivateKeyInfo.class, \"SunEC\", null);\n@@ -240,1 +332,1 @@\n-        \"\"\", X509Certificate.class);\n+        \"\"\", X509Certificate.class, \"SUN\");\n@@ -252,1 +344,42 @@\n-        \"\"\", X509Certificate.class);\n+        \"\"\", X509Certificate.class, \"SUN\");\n+\n+    private static final Entry rsaCrl = new Entry(\"rsaCrl\",\n+            \"\"\"\n+            -----BEGIN X509 CRL-----\n+            MIIBRTCBrwIBATANBgkqhkiG9w0BAQUFADBMMQswCQYDVQQGEwJVUzEaMBgGA1UE\n+            ChMRVGVzdCBDZXJ0aWZpY2F0ZXMxITAfBgNVBAMTGEJhc2ljIEhUVFAgVVJJIFBl\n+            ZXIgMSBDQRcNMDUwNjAzMjE0NTQ3WhcNMTUwNjAxMjE0NTQ3WqAvMC0wHwYDVR0j\n+            BBgwFoAUa+bxcvx1zVdUhvIEd9hcfbmFdw4wCgYDVR0UBAMCAQEwDQYJKoZIhvcN\n+            AQEFBQADgYEAZ+21yt1pJn2FU6vBwpFtAKVeBCCCqJVFiRxT84XbUw0BpLrCFvlk\n+            FOo6tC95aoV7vPGwOEyUNbKJJOCzLliIwV1PPfgZQV20xohSIPISHdUjmlyttglv\n+            AuEvltGnbP7ENxw18HxvM20XmHz+akuFu6npI6MkBjfoxvlq1bcdTrI=\n+            -----END X509 CRL-----\n+            \"\"\", X509CRL.class, \"SUN\");\n+\n+    private static final Entry invalidPEM = new Entry(\"invalidPEM\", \"\"\"\n+        -----BEGIN INVALID PEM-----\n+        MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBVS52ZSKZ0oES7twD2\n+        GGwRIVu3uHlGIwlu0xzFe7sgIPntca2bHfYMhgGxrlCm0q+hZANiAAQNWgwWfLX8\n+        8pYVjvwbfvDF9f+Oa9w6JjrfpWwFAUI6b1OPgrNUh+yXtUXnQNXnfUcIu0Os53bM\n+        \"\"\", DEREncodable.class, null);\n+\n+    private static final Entry invalidHeader = new Entry(\"invalidHeader\", \"\"\"\n+        ---BEGIN PRIVATE KEY---\n+        MC4CAQAwBQYDK2VwBCIEIFFZsmD+OKk67Cigc84\/2fWtlKsvXWLSoMJ0MHh4jI4I\n+        -----END PRIVATE KEY-----\n+        \"\"\", DEREncodable.class, null);\n+\n+    private static final Entry invalidFooter = new Entry(\"invalidFooter\", \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MC4CAQAwBQYDK2VwBCIEIFFZsmD+OKk67Cigc84\/2fWtlKsvXWLSoMJ0MHh4jI4I\n+        ---END PRIVATE KEY---\n+        \"\"\", DEREncodable.class, null);\n+\n+    private static final Entry incorrectFooter = new Entry(\"incorrectFooter\", \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBVS52ZSKZ0oES7twD2\n+        GGwRIVu3uHlGIwlu0xzFe7sgIPntca2bHfYMhgGxrlCm0q+hZANiAAQNWgwWfLX8\n+        8pYVjvwbfvDF9f+Oa9w6JjrfpWwFAUI6b1OPgrNUh+yXtUXnQNXnfUcIu0Os53bM\n+        8fTqPkQl6RyWEDHeXqJK8zTBHMeBq9nLfDPSbzQgLDyC64Orn0D8exM=\n+        -----END PUBLIC KEY-----\n+        \"\"\", DEREncodable.class, null);\n@@ -283,1 +416,1 @@\n-        \"\"\", KeyPair.class);\n+        \"\"\", KeyPair.class, \"SunEC\");\n@@ -300,1 +433,1 @@\n-        \"\"\", PEMRecord.class);\n+        \"\"\", PEMRecord.class, \"SunEC\");\n@@ -321,1 +454,1 @@\n-        \"\"\" + postData, PEMRecord.class);\n+        \"\"\" + postData, PEMRecord.class, \"SunEC\");\n@@ -328,1 +461,1 @@\n-    public record Entry(String name, String pem, Class clazz, char[] password,\n+    public record Entry(String name, String pem, Class clazz, String provider, char[] password,\n@@ -331,1 +464,1 @@\n-        public Entry(String name, String pem, Class clazz, char[] password,\n+        public Entry(String name, String pem, Class clazz, String provider, char[] password,\n@@ -336,0 +469,1 @@\n+            this.provider = provider;\n@@ -337,1 +471,2 @@\n-            if (pem != null && pem.length() > 0) {\n+            if (pem != null && pem.length() > 0 &&\n+                    !name.contains(\"incorrect\") && !name.contains(\"invalid\")) {\n@@ -344,2 +479,2 @@\n-        Entry(String name, String pem, Class clazz, char[] password) {\n-            this(name, pem, clazz, password, null);\n+        Entry(String name, String pem, Class clazz, String provider, char[] password) {\n+            this(name, pem, clazz,provider, password, null);\n@@ -348,2 +483,2 @@\n-        Entry(String name, String pem, Class clazz) {\n-            this(name, pem, clazz, null, null);\n+        Entry(String name, String pem, Class clazz, String provider) {\n+            this(name, pem, clazz, provider, null, null);\n@@ -353,1 +488,1 @@\n-            return new Entry(name, pem, c, password);\n+            return new Entry(name, pem, c, provider, password);\n@@ -363,1 +498,1 @@\n-                clazz, password());\n+                clazz, provider, password());\n@@ -369,1 +504,1 @@\n-                clazz, password());\n+                clazz, provider, password());\n@@ -376,1 +511,1 @@\n-                clazz, password());\n+                clazz, provider, password());\n@@ -404,0 +539,1 @@\n+        pubList.add(rsapsspub);\n@@ -408,0 +544,1 @@\n+        privList.add(rsapsspriv);\n@@ -416,0 +553,2 @@\n+        oasList.add(oasec);\n+        oasList.add(oasxdh);\n@@ -419,0 +558,1 @@\n+        certList.add(rsaCrl);\n@@ -432,0 +572,4 @@\n+        failureEntryList.add(incorrectFooter);\n+        failureEntryList.add(invalidPEM);\n+        failureEntryList.add(invalidHeader);\n+        failureEntryList.add(invalidFooter);\n","filename":"test\/jdk\/java\/security\/PEM\/PEMData.java","additions":172,"deletions":28,"binary":false,"changes":200,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -40,0 +41,1 @@\n+import java.security.cert.CertificateEncodingException;\n@@ -43,2 +45,1 @@\n-import java.security.spec.PKCS8EncodedKeySpec;\n-import java.security.spec.X509EncodedKeySpec;\n+import java.security.spec.*;\n@@ -48,0 +49,2 @@\n+import jdk.test.lib.Asserts;\n+import sun.security.pkcs.PKCS8Key;\n@@ -54,1 +57,1 @@\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args) throws Exception {\n@@ -56,1 +59,3 @@\n-        PEMData.entryList.forEach(PEMDecoderTest::test);\n+        PEMData.entryList.forEach(entry -> test(entry, false));\n+        System.out.println(\"Decoder test withFactory:\");\n+        PEMData.entryList.forEach(entry -> test(entry, true));\n@@ -98,1 +103,5 @@\n-        PEMData.oasList.forEach(PEMDecoderTest::testSignature);\n+        PEMData.oasList.stream().filter(e -> !e.name().endsWith(\"xdh\"))\n+                .forEach(PEMDecoderTest::testSignature);\n+\n+        System.out.println(\"Checking if decode() returns a PKCS8Key and can generate a pub\");\n+        PEMData.oasList.forEach(PEMDecoderTest::testPKCS8Key);\n@@ -185,0 +194,4 @@\n+        testCertTypeConverter(PEMData.ecCert);\n+\n+        System.out.println(\"Decoder test testCoefZero:\");\n+        testCoefZero(PEMData.rsaCrtCoefZeroPriv);\n@@ -234,0 +247,18 @@\n+    \/\/ test that X509 CERTIFICATE is converted to CERTIFICATE in PEM\n+    static void testCertTypeConverter(PEMData.Entry entry) throws CertificateEncodingException {\n+        String certPem = entry.pem().replace(\"CERTIFICATE\", \"X509 CERTIFICATE\");\n+        Asserts.assertEqualsByteArray(entry.der(),\n+                PEMDecoder.of().decode(certPem, X509Certificate.class).getEncoded());\n+\n+        certPem = entry.pem().replace(\"CERTIFICATE\", \"X.509 CERTIFICATE\");\n+        Asserts.assertEqualsByteArray(entry.der(),\n+                PEMDecoder.of().decode(certPem, X509Certificate.class).getEncoded());\n+    }\n+\n+    \/\/ test that when the crtCoeff is zero, the key is decoded but only the modulus and private\n+    \/\/ exponent are used resulting in a different der\n+    static void testCoefZero(PEMData.Entry entry) {\n+        RSAPrivateKey decoded = PEMDecoder.of().decode(entry.pem(), RSAPrivateKey.class);\n+        Asserts.assertNotEqualsByteArray(decoded.getEncoded(), entry.der());\n+    }\n+\n@@ -336,1 +367,1 @@\n-        return test(entry.newClass(c));\n+        return test(entry.newClass(c), false);\n@@ -341,0 +372,5 @@\n+        return test(entry, false);\n+    }\n+\n+    \/\/ Run test with a given Entry\n+    static DEREncodable test(PEMData.Entry entry, boolean withFactory) {\n@@ -342,1 +378,8 @@\n-            DEREncodable r = test(entry.pem(), entry.clazz(), PEMDecoder.of());\n+            PEMDecoder pemDecoder;\n+            if (withFactory) {\n+                Provider provider = Security.getProvider(entry.provider());\n+                pemDecoder = PEMDecoder.of().withFactory(provider);\n+            } else {\n+                pemDecoder = PEMDecoder.of();\n+            }\n+            DEREncodable r = test(entry.pem(), entry.clazz(), pemDecoder);\n@@ -415,0 +458,13 @@\n+    private static void testPKCS8Key(PEMData.Entry entry) {\n+        try {\n+            PKCS8Key key = PEMDecoder.of().decode(entry.pem(), PKCS8Key.class);\n+            PKCS8EncodedKeySpec spec =\n+                    new PKCS8EncodedKeySpec(key.getEncoded());\n+\n+            KeyFactory kf = KeyFactory.getInstance(key.getAlgorithm());\n+            kf.generatePublic(spec);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n@@ -475,0 +531,1 @@\n+        AlgorithmParameterSpec spec = null;\n@@ -478,0 +535,5 @@\n+            case \"RSASSA-PSS\" ->  {\n+                spec = new PSSParameterSpec(\n+                        \"SHA-256\", \"MGF1\", MGF1ParameterSpec.SHA256, 32, 1);\n+                yield \"RSASSA-PSS\";\n+            }\n@@ -490,0 +552,3 @@\n+                if (spec != null) {\n+                    s.setParameter(spec);\n+                }\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":72,"deletions":7,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,5 @@\n+ * @run main PEMEncoderTest PBEWithHmacSHA256AndAES_128\n+ * @run main\/othervm -Djava.security.properties=${test.src}\/java.security-anotherAlgo\n+ *      PEMEncoderTest PBEWithHmacSHA512AndAES_256\n+ * @run main\/othervm -Djava.security.properties=${test.src}\/java.security-emptyAlgo\n+ *      PEMEncoderTest PBEWithHmacSHA256AndAES_128\n@@ -42,0 +48,2 @@\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n@@ -44,0 +52,5 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertThrows;\n+\n@@ -47,0 +60,1 @@\n+    static String pkcs8DefaultAlgExpect;\n@@ -49,0 +63,1 @@\n+        pkcs8DefaultAlgExpect = args[0];\n@@ -66,1 +81,6 @@\n-\n+        System.out.println(\"Same instance Encoder testEncodedKeySpec:\");\n+        testEncodedKeySpec(encoder);\n+        System.out.println(\"New instance Encoder testEncodedKeySpec:\");\n+        testEncodedKeySpec(PEMEncoder.of());\n+        System.out.println(\"Same instance Encoder testEmptyKey:\");\n+        testEmptyAndNullKey(encoder);\n@@ -89,0 +109,7 @@\n+\n+        \/\/ test PemRecord is encapsulated with PEM header and footer on encoding\n+        String[] pemLines = PEMData.ed25519ep8.pem().split(\"\\n\");\n+        String[] pemNoHeaderFooter = Arrays.copyOfRange(pemLines, 1, pemLines.length - 1);\n+        PEMRecord pemR = new PEMRecord(\"ENCRYPTED PRIVATE KEY\", String.join(\"\\n\",\n+                pemNoHeaderFooter));\n+        PEMData.checkResults(PEMData.ed25519ep8.pem(), encoder.encodeToString(pemR));\n@@ -148,1 +175,1 @@\n-            encoder.withEncryption(\n+            String pem = encoder.withEncryption(\n@@ -152,0 +179,2 @@\n+\n+            verifyEncriptionAlg(pem);\n@@ -160,0 +189,5 @@\n+    private static void verifyEncriptionAlg(String pem) {\n+        var epki = PEMDecoder.of().decode(pem, EncryptedPrivateKeyInfo.class);\n+        assertEquals(epki.getAlgName(), pkcs8DefaultAlgExpect);\n+    }\n+\n@@ -198,1 +232,0 @@\n-}\n@@ -200,0 +233,38 @@\n+    static void testEncodedKeySpec(PEMEncoder encoder) throws NoSuchAlgorithmException {\n+        KeyPair kp = getKeyPair();\n+        encoder.encodeToString(new X509EncodedKeySpec(kp.getPublic().getEncoded()));\n+        encoder.encodeToString((new PKCS8EncodedKeySpec(kp.getPrivate().getEncoded())));\n+        System.out.println(\"PASS: testEncodedKeySpec\");\n+    }\n+    private static void testEmptyAndNullKey(PEMEncoder encoder) throws NoSuchAlgorithmException {\n+        KeyPair kp = getKeyPair();\n+        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+                new KeyPair(kp.getPublic(), new EmptyKey())));\n+        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+                new KeyPair(kp.getPublic(), null)));\n+\n+        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+                new KeyPair(new EmptyKey(), kp.getPrivate())));\n+        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+                new KeyPair(null, kp.getPrivate())));\n+        System.out.println(\"PASS: testEmptyKey\");\n+    }\n+\n+    private static KeyPair getKeyPair() throws NoSuchAlgorithmException {\n+        Provider provider = Security.getProvider(\"SunRsaSign\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", provider);\n+        kpg.initialize(SecurityUtils.getTestKeySize(\"RSA\"));\n+        return kpg.generateKeyPair();\n+    }\n+\n+    private static class EmptyKey implements PublicKey, PrivateKey {\n+        @Override\n+        public String getAlgorithm() { return \"Test\"; }\n+\n+        @Override\n+        public String getFormat() { return \"Test\"; }\n+\n+        @Override\n+        public byte[] getEncoded() { return new byte[0]; }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/PEM\/PEMEncoderTest.java","additions":74,"deletions":3,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8298420\n+ * @library \/test\/lib\n+ * @summary Testing PEM API is thread safe\n+ * @enablePreview\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import java.security.*;\n+import java.util.*;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class PEMMultiThreadTest {\n+    static final int THREAD_COUNT = 5;\n+    static final int KEYS_COUNT = 50;\n+\n+    public static void main(String[] args) throws Exception {\n+        PEMEncoder encoder = PEMEncoder.of();\n+        try(ExecutorService ex = Executors.newFixedThreadPool(THREAD_COUNT)) {\n+            Map<Integer, PublicKey> keys = new HashMap<>();\n+            Map<Integer, String> encoded = Collections.synchronizedMap(new HashMap<>());\n+            Map<Integer, String> decoded = Collections.synchronizedMap(new HashMap<>());\n+            final CountDownLatch encodingComplete = new CountDownLatch(KEYS_COUNT);\n+            final CountDownLatch decodingComplete = new CountDownLatch(KEYS_COUNT);\n+\n+            \/\/ Generate keys and encode them in parallel\n+            for (int i = 0 ; i < KEYS_COUNT ; i++) {\n+                final int finalI = i;\n+                KeyPair kp = getKeyPair();\n+                keys.put(finalI, kp.getPublic());\n+\n+                ex.submit(() -> {\n+                    encoded.put(finalI, encoder.encodeToString(kp.getPublic()));\n+                    encodingComplete.countDown();\n+                });\n+            }\n+            encodingComplete.await();\n+\n+            \/\/ Decode keys in parallel\n+            PEMDecoder decoder = PEMDecoder.of();\n+            for (Map.Entry<Integer, String> entry : encoded.entrySet()) {\n+                ex.submit(() -> {\n+                    decoded.put(entry.getKey(), decoder.decode(entry.getValue(), PublicKey.class)\n+                            .toString());\n+                    decodingComplete.countDown();\n+                });\n+            }\n+\n+            decodingComplete.await();\n+\n+            \/\/ verify all keys were properly encoded and decoded comparing with the original key map\n+            for (Map.Entry<Integer, PublicKey> kp : keys.entrySet()) {\n+                if (!decoded.get(kp.getKey()).equals(kp.getValue().toString())) {\n+                    throw new RuntimeException(\"a key was not properly encoded and decoded: \" + decoded);\n+                }\n+            }\n+        }\n+\n+        System.out.println(\"PASS: testThreadSafety\");\n+    }\n+\n+    private static KeyPair getKeyPair() throws NoSuchAlgorithmException {\n+        String alg = \"EC\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(alg);\n+        kpg.initialize(jdk.test.lib.security.SecurityUtils.getTestKeySize(alg));\n+        return kpg.generateKeyPair();\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/PEM\/PEMMultiThreadTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+jdk.epkcs8.defaultAlgorithm=PBEWithHmacSHA512AndAES_256\n","filename":"test\/jdk\/java\/security\/PEM\/java.security-anotherAlgo","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+jdk.epkcs8.defaultAlgorithm=\n","filename":"test\/jdk\/java\/security\/PEM\/java.security-emptyAlgo","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -28,0 +28,2 @@\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n@@ -33,0 +35,2 @@\n+import sun.security.util.Pem;\n+\n@@ -40,0 +44,3 @@\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.Security;\n@@ -42,0 +49,2 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n@@ -59,0 +68,2 @@\n+        Provider p = Security.getProvider(System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+\n@@ -74,0 +85,13 @@\n+        \/\/ Test encryptKey(PrivateKey, char[], String, ...) with provider\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, password, ekpi.getAlgName(),\n+                ap.getParameterSpec(PBEParameterSpec.class), p);\n+        if (!Arrays.equals(ekpi.getEncryptedData(), e.getEncryptedData())) {\n+            throw new AssertionError(\"encryptKey() didn't match\" +\n+                    \" with expected.\");\n+        }\n+\n+        \/\/ Test encryptKey(PrivateKey, char[], String, ...) with provider and null algorithm\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, password, null, null,\n+                p);\n+        assertEquals(e.getAlgName(), Pem.DEFAULT_ALGO);\n+\n@@ -81,0 +105,21 @@\n+\n+        \/\/ Test encryptKey(PrivateKey, Key, String, ...) with provider and null random\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, key, ekpi.getAlgName(),\n+                ap.getParameterSpec(PBEParameterSpec.class), p, null);\n+        if (!Arrays.equals(ekpi.getEncryptedData(), e.getEncryptedData())) {\n+            throw new AssertionError(\"encryptKey() didn't match\" +\n+                    \" with expected.\");\n+        }\n+\n+        \/\/ Test encryptKey(PrivateKey, Key, String, ...) with provider and SecureRandom\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, key, ekpi.getAlgName(),\n+                ap.getParameterSpec(PBEParameterSpec.class), p, new SecureRandom());\n+        if (!Arrays.equals(ekpi.getEncryptedData(), e.getEncryptedData())) {\n+            throw new AssertionError(\"encryptKey() didn't match\" +\n+                    \" with expected.\");\n+        }\n+\n+        \/\/ Test encryptKey(PrivateKey, Key, String, ...) with provider and null algorithm\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, key, null, null,\n+                p, new SecureRandom());\n+        assertEquals(e.getAlgName(), Pem.DEFAULT_ALGO);\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/EncryptKey.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.security.Provider;\n+import java.security.Security;\n@@ -51,0 +53,15 @@\n+    private static final String encDHECKey =\n+        \"\"\"\n+        -----BEGIN ENCRYPTED PRIVATE KEY-----\n+        MIIBvDBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUN8pkErJx7aqH0fJF\n+        BcOadPKiuRoCAhAAAgEQMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAECBBAT1Vwd\n+        gU4rTd6zy7lKr4wmBIIBUMe+2+O0AG6t4CMSHcDVceRg2jvbs5PmPjW4Ka5mDich\n+        hVEsjSpJLbUyJdbji6UaiUpuWgvYSMLZ10pfhOFw\/ssXwCw+JrlXUqDpQGLaW8ZR\n+        zSL3CoozTI2Y6EBdWt53KbySwtZMoTpW\/W3vPi98bJXtR635msf6gYXmSUP7DyoJ\n+        79dxz3pRYsnOuBe0yZ2wTq9iMgTMudzLJAFX2qyi+3KOb1g5Va9DYAqJmzCYOd74\n+        +I+0gGNFtSc1vGQYr3cAfcKT8AZ1RHE4IkpnpgFD5HsZ8f4hy0yK8juk9NE9Gzuy\n+        B929LBXk6V3L0MKzIABS3QvAlhWETM6XtGBDugzAgsooo9lEHLwYRldvOlL+QYyE\n+        CtqDmXOrgEMWvxWGEFCTKYhKkqMKjU3y3GiozEEdb9j2okW1s30yHQjIoj0OR4nB\n+        D8GeP0QnY73NfbOw7z81TA==\n+        -----END ENCRYPTED PRIVATE KEY-----\n+        \"\"\";\n@@ -57,0 +74,2 @@\n+        Provider p = Security.getProvider(System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+\n@@ -69,1 +88,1 @@\n-        \/\/ Test getKey(key, provider)\n+        \/\/ Test getKey(key, provider) provider null\n@@ -75,0 +94,12 @@\n+\n+        \/\/ Test getKey(key, provider) with provider\n+        EncryptedPrivateKeyInfo ekpiDH = PEMDecoder.of().decode(encDHECKey,\n+                EncryptedPrivateKeyInfo.class);\n+        PrivateKey priKeyDH = PEMDecoder.of().withDecryption(password).\n+                decode(encDHECKey, PrivateKey.class);\n+\n+        if (!Arrays.equals(priKeyDH.getEncoded(),\n+                ekpiDH.getKey(key, p).getEncoded())) {\n+            throw new AssertionError(\"getKey(key, provider) \" +\n+                    \"didn't match with expected.\");\n+        }\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKey.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @run main\/othervm -Dtest.provider.name=SunJCE PKCS8Test\n@@ -38,0 +39,2 @@\n+import java.security.Provider;\n+import java.security.Security;\n@@ -48,0 +51,1 @@\n+    static Provider provider;\n@@ -62,1 +66,1 @@\n-\n+        provider = Security.getProvider(System.getProperty(\"test.provider.name\"));\n@@ -76,1 +80,2 @@\n-        PKCS8Key decodedKey = (PKCS8Key)PKCS8Key.parseKey(encodedKey);\n+        PKCS8Key decodedKey = provider == null ? (PKCS8Key)PKCS8Key.parseKey(encodedKey) :\n+                (PKCS8Key)PKCS8Key.parseKey(encodedKey, provider);\n@@ -129,1 +134,5 @@\n-            PKCS8Key.parseKey(original);\n+            if (provider == null) {\n+                PKCS8Key.parseKey(original);\n+            } else {\n+                PKCS8Key.parseKey(original, provider);\n+            }\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs8\/PKCS8Test.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,2 @@\n+        Ed25519(256),\n+        EC(256),\n@@ -148,0 +150,2 @@\n+            case \"Ed25519\" -> KeySize.Ed25519.keySize;\n+            case \"EC\" -> KeySize.EC.keySize;\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}