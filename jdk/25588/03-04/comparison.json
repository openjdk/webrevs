{"files":[{"patch":"@@ -536,1 +536,1 @@\n-            case \"RSASSA-PSS\" ->  {\n+            case \"RSASSA-PSS\" -> {\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-        encoder.encodeToString((new PKCS8EncodedKeySpec(kp.getPrivate().getEncoded())));\n+        encoder.encodeToString(new PKCS8EncodedKeySpec(kp.getPrivate().getEncoded()));\n@@ -241,1 +241,1 @@\n-        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+        assertThrows(IllegalArgumentException.class, () -> encoder.encode(\n@@ -243,1 +243,1 @@\n-        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+        assertThrows(IllegalArgumentException.class, () -> encoder.encode(\n@@ -246,1 +246,1 @@\n-        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+        assertThrows(IllegalArgumentException.class, () -> encoder.encode(\n@@ -248,1 +248,1 @@\n-        assertThrows(IllegalArgumentException.class,() -> encoder.encode(\n+        assertThrows(IllegalArgumentException.class, () -> encoder.encode(\n","filename":"test\/jdk\/java\/security\/PEM\/PEMEncoderTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -47,1 +49,1 @@\n-        try(ExecutorService ex = Executors.newFixedThreadPool(THREAD_COUNT)) {\n+        try (ExecutorService ex = Executors.newFixedThreadPool(THREAD_COUNT)) {\n@@ -55,1 +57,1 @@\n-            for (int i = 0 ; i < KEYS_COUNT ; i++) {\n+            for (int i = 0; i < KEYS_COUNT; i++) {\n@@ -76,1 +78,0 @@\n-\n@@ -93,1 +94,1 @@\n-        kpg.initialize(jdk.test.lib.security.SecurityUtils.getTestKeySize(alg));\n+        kpg.initialize(SecurityUtils.getTestKeySize(alg));\n","filename":"test\/jdk\/java\/security\/PEM\/PEMMultiThreadTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}