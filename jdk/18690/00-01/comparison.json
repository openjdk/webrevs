{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.classfile.TypeKind;\n@@ -1406,1 +1407,1 @@\n-                            clb.withFlags(AccessFlag.PUBLIC, AccessFlag.FINAL, AccessFlag.SUPER, AccessFlag.SYNTHETIC)\n+                            clb.withFlags(AccessFlag.FINAL, AccessFlag.SUPER, AccessFlag.SYNTHETIC)\n@@ -1409,1 +1410,1 @@\n-                                        ClassFile.ACC_FINAL | ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC,\n+                                        ClassFile.ACC_FINAL | ClassFile.ACC_PRIVATE | ClassFile.ACC_STATIC,\n@@ -1414,1 +1415,2 @@\n-                Class<?> innerClass = lookup.defineHiddenClass(classBytes, true, STRONG).lookupClass();\n+                Lookup hiddenLookup = lookup.defineHiddenClass(classBytes, true, STRONG);\n+                Class<?> innerClass = hiddenLookup.lookupClass();\n@@ -1416,1 +1418,1 @@\n-                MethodHandle mh = lookup.findStatic(innerClass, METHOD_NAME, args);\n+                MethodHandle mh = hiddenLookup.findStatic(innerClass, METHOD_NAME, args);\n@@ -1441,1 +1443,3 @@\n-                            off += load(cb, cl, off);\n+                            TypeKind kind = TypeKind.from(cl);\n+                            cb.loadInstruction(kind, off);\n+                            off += kind.slotSize();\n@@ -1457,23 +1461,0 @@\n-        \/\/ Load the argument of type cl at slot onto stack, return the number of argument stack slots consumed.\n-        private static int load(CodeBuilder cb, Class<?> cl, int slot) {\n-            if (cl == Void.TYPE) {\n-                throw new InternalError(\"Unexpected void type of load opcode\");\n-            }\n-            if (cl.isPrimitive()) {\n-                if (cl == Float.TYPE) {\n-                    cb.fload(slot);\n-                } else if (cl == Double.TYPE) {\n-                    cb.dload(slot);\n-                    return 2;\n-                } else if (cl == Long.TYPE) {\n-                    cb.lload(slot);\n-                    return 2;\n-                } else {\n-                    cb.iload(slot);\n-                }\n-            } else {\n-                cb.aload(slot);\n-            }\n-            return 1;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"}]}