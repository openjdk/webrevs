{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,5 @@\n- * @summary Confirm that ToPage is populated for argument =2. Range is disabled for argument = 0.\n- * @run main\/manual PrintDlgPageable\n+ * @summary Confirm that ToPage is populated for argument = 2. Range is disabled for argument = 0.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PrintDlgPageable 0\n+ * @run main\/manual PrintDlgPageable 2\n@@ -31,3 +34,0 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.util.Locale;\n@@ -35,1 +35,10 @@\n-import javax.print.*;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Pageable;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.PrinterException;\n+\n+public class PrintDlgPageable implements Printable {\n@@ -37,1 +46,0 @@\n-class PrintDlgPageable implements Printable {\n@@ -39,5 +47,8 @@\n-        \/**\n-         * Constructor\n-         *\/\n-         public PrintDlgPageable() {\n-                super();\n+    public PrintDlgPageable() {\n+        super();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length < 1) {\n+            System.out.println(\"usage: java PrintDlgPageable { 0 | 2}\");\n+            return;\n@@ -45,25 +56,1 @@\n-        \/**\n-         * Starts the application.\n-         *\/\n-        public static void main(java.lang.String[] args) {\n-            if (args.length < 1) {\n-                System.out.println(\"usage: java PrintDlgPageable { 0 | 2}\");\n-                return;\n-            }\n-            arg = Integer.parseInt(args[0]);\n-                PrintDlgPageable pd = new PrintDlgPageable();\n-                PrinterJob pj = PrinterJob.getPrinterJob();\n-                PageableHandler handler = new PageableHandler();\n-                pj.setPageable(handler);\n-\n-                System.out.println(\"open PrintDialog..\");\n-                if (pj.printDialog()) {\n-                        try {\n-                                System.out.println(\"About to print the data ...\");\n-                                pj.print();\n-                                System.out.println(\"Printed\");\n-                        }\n-                        catch (PrinterException pe) {\n-                                pe.printStackTrace();\n-                        }\n-                }\n+        arg = Integer.parseInt(args[0]);\n@@ -71,0 +58,6 @@\n+        String INSTRUCTIONS = \" A pagedialog will be shown.\";\n+\n+        if (arg == 0) {\n+            INSTRUCTIONS += \"\\n Confirm that page range is disabled.\";\n+        } else if (arg == 2) {\n+            INSTRUCTIONS += \"\\n Confirm ToPage is populated with pagerange 2\";\n@@ -72,0 +65,11 @@\n+        INSTRUCTIONS += \"\\nCancel the print dialog. Press PASS if it so seen else press FAIL.\";\n+\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        PageableHandler handler = new PageableHandler();\n+        pj.setPageable(handler);\n+\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+            .title(\"Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .columns(35)\n+            .build();\n@@ -73,16 +77,6 @@\n-        \/\/printable interface\n-        public int print(Graphics g, PageFormat pf, int pi) throws\n-PrinterException {\n-\n-                \/*if (pi > 0) {\n-                        System.out.println(\"pi is greater than 0\");\n-                        return Printable.NO_SUCH_PAGE;\n-                }*\/\n-                \/\/ Simply draw two rectangles\n-                Graphics2D g2 = (Graphics2D)g;\n-                g2.setColor(Color.black);\n-                g2.translate(pf.getImageableX(), pf.getImageableY());\n-                g2.drawRect(1,1,200,300);\n-                g2.drawRect(1,1,25,25);\n-                System.out.println(\"print method called \"+pi + \" Orientation \"+pf.getOrientation());\n-                return Printable.PAGE_EXISTS;\n+        if (pj.printDialog()) {\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            }\n@@ -90,0 +84,14 @@\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    \/\/printable interface\n+    public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n+\n+        \/\/ Simply draw two rectangles\n+        Graphics2D g2 = (Graphics2D) g;\n+        g2.setColor(Color.black);\n+        g2.translate(pf.getImageableX(), pf.getImageableY());\n+        g2.drawRect(1, 1, 200, 300);\n+        g2.drawRect(1, 1, 25, 25);\n+        return Printable.PAGE_EXISTS;\n+    }\n@@ -94,1 +102,1 @@\n-        PageFormat pf = new PageFormat();\n+    PageFormat pf = new PageFormat();\n@@ -96,4 +104,3 @@\n-        public int getNumberOfPages() {\n-                return PrintDlgPageable.arg;\n-                \/\/return 0;\n-        }\n+    public int getNumberOfPages() {\n+        return PrintDlgPageable.arg;\n+    }\n@@ -101,3 +108,3 @@\n-        public Printable getPrintable(int pageIndex) {\n-                return new PrintDlgPageable();\n-        }\n+    public Printable getPrintable(int pageIndex) {\n+        return new PrintDlgPageable();\n+    }\n@@ -105,11 +112,7 @@\n-        public PageFormat getPageFormat(int pageIndex) {\n-                System.out.println(\"getPageFormat called \"+pageIndex);\n-                if (pageIndex == 0) {\n-                        pf.setOrientation(PageFormat.PORTRAIT);\n-                        System.out.println(\"Orientation returned from Pageable \"+findOrientation(pf.getOrientation()));\n-                        return pf;\n-                } else {\n-                        pf.setOrientation(PageFormat.LANDSCAPE);\n-                        System.out.println(\"Orientation returned from Pageable \"+findOrientation(pf.getOrientation()));\n-                        return pf;\n-                }\n+    public PageFormat getPageFormat(int pageIndex) {\n+        if (pageIndex == 0) {\n+            pf.setOrientation(PageFormat.PORTRAIT);\n+            return pf;\n+        } else {\n+            pf.setOrientation(PageFormat.LANDSCAPE);\n+            return pf;\n@@ -117,0 +120,1 @@\n+    }\n@@ -118,11 +122,0 @@\n-        public String findOrientation(int orient) {\n-                if (orient == PageFormat.LANDSCAPE) {\n-                        return \"LANDSCAPE\";\n-                }else if (orient == PageFormat.PORTRAIT) {\n-                        return \"PORTRAIT\";\n-                } else if (orient == PageFormat.REVERSE_LANDSCAPE) {\n-                        return \"REVERSE LANDSCAPE\";\n-                } else {\n-                        return null;\n-                }\n-        }\n","filename":"test\/jdk\/java\/awt\/print\/Dialog\/PrintDlgPageable.java","additions":77,"deletions":84,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,3 @@\n- * @summary You would see a cross-platform print dialog being popped up. Check whether orientation is shown as LANDSCAPE. Click 'OK'. 'streamexample.ps' will be created in the same dir where this application was executed. Pass if the orientation in the ps file is landscape.\n- * @run main\/manual StreamPrintingOrientation\n+ * @key printer\n+ * @summary StreamPrintService ignores the PrintReqAttrSet when printing through 2D Printing\n+ * @run main StreamPrintingOrientation\n@@ -31,6 +32,0 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import javax.print.*;\n-import javax.print.attribute.standard.*;\n-import javax.print.attribute.*;\n-import java.io.FileOutputStream;\n@@ -38,1 +33,28 @@\n-import java.util.Locale;\n+import java.io.FileOutputStream;\n+import java.nio.file.Files;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import javax.print.attribute.Attribute;\n+import javax.print.PrintService;\n+import javax.print.StreamPrintServiceFactory;\n+import javax.print.attribute.standard.Copies;\n+import javax.print.attribute.standard.JobName;\n+import javax.print.attribute.standard.OrientationRequested;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+\n+public class StreamPrintingOrientation implements Printable {\n+\n+    public static void main(String[] args) throws Exception {\n+        StreamPrintingOrientation pd = new StreamPrintingOrientation();\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n+        HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n+        PrintService service = null;\n+\n+        FileOutputStream fos = null;\n+        String mType = \"application\/postscript\";\n@@ -40,6 +62,6 @@\n-class StreamPrintingOrientation implements Printable {\n-        \/**\n-         * Constructor\n-         *\/\n-         public StreamPrintingOrientation() {\n-                super();\n+        File fl = new File(\"stream_landscape.ps\");\n+        fl.deleteOnExit();\n+        fos = new FileOutputStream(fl);\n+        StreamPrintServiceFactory[] factories = PrinterJob.lookupStreamPrintServices(mType);\n+        if (factories.length > 0) {\n+            service = factories[0].getPrintService(fos);\n@@ -47,8 +69,0 @@\n-        \/**\n-         * Starts the application.\n-         *\/\n-        public static void main(java.lang.String[] args) {\n-                StreamPrintingOrientation pd = new StreamPrintingOrientation();\n-                PrinterJob pj = PrinterJob.getPrinterJob();\n-                HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n-                PrintService service = null;\n@@ -56,3 +70,12 @@\n-                FileOutputStream fos = null;\n-                File f = null, f1 = null;\n-                String mType = \"application\/postscript\";\n+        if (service != null) {\n+            System.out.println(\"Stream Print Service \" + service);\n+            pj.setPrintService(service);\n+        } else {\n+            throw new RuntimeException(\"No stream Print Service available.\");\n+        }\n+\n+        pj.setPrintable(pd);\n+        prSet.add(OrientationRequested.LANDSCAPE);\n+        prSet.add(new Copies(1));\n+        prSet.add(new JobName(\"orientation test\", null));\n+        System.out.println(\"open PrintDialog..\");\n@@ -60,6 +83,11 @@\n-                try {\n-                        f = new File(\"streamexample.ps\");\n-                        fos = new FileOutputStream(f);\n-                        StreamPrintServiceFactory[] factories = PrinterJob.lookupStreamPrintServices(mType);\n-                        if (factories.length > 0)\n-                                service = factories[0].getPrintService(fos);\n+        System.out.println(\"\\nValues in attr set passed to print method\");\n+        Attribute attr[] = prSet.toArray();\n+        for (int x = 0; x < attr.length; x++) {\n+            System.out.println(\"Name \" + attr[x].getName() + \"  \" + attr[x]);\n+        }\n+        System.out.println(\"About to print the data ...\");\n+        if (service != null) {\n+            System.out.println(\"TEST: calling Print\");\n+            pj.print(prSet);\n+            System.out.println(\"TEST: Printed\");\n+        }\n@@ -67,9 +95,6 @@\n-                        if (service != null) {\n-                                System.out.println(\"Stream Print Service \"+service);\n-                                pj.setPrintService(service);\n-                        } else {\n-                                throw new RuntimeException(\"No stream Print Service available.\");\n-                        }\n-                } catch (Exception e) {\n-                        e.printStackTrace();\n-                }\n+        File fp = new File(\"stream_portrait.ps\");\n+        fp.deleteOnExit();\n+        fos = new FileOutputStream(fp);\n+        if (factories.length > 0) {\n+            service = factories[0].getPrintService(fos);\n+        }\n@@ -77,23 +102,8 @@\n-                pj.setPrintable(pd);\n-                prSet.add(OrientationRequested.LANDSCAPE);\n-                prSet.add(new Copies(3));\n-                prSet.add(new JobName(\"orientation test\", null));\n-                System.out.println(\"open PrintDialog..\");\n-                if (pj.printDialog(prSet)) {\n-                        try {\n-                                System.out.println(\"\\nValues in attr set passed to print method\");\n-                                Attribute attr[] = prSet.toArray();\n-                                for (int x = 0; x < attr.length; x ++) {\n-                                        System.out.println(\"Name \"+attr[x].getName()+\"  \"+attr[x]);\n-                                }\n-                                System.out.println(\"About to print the data ...\");\n-                                if (service != null) {\n-                                        System.out.println(\"TEST: calling Print\");\n-                                        pj.print(prSet);\n-                                        System.out.println(\"TEST: Printed\");\n-                                }\n-                        }\n-                        catch (PrinterException pe) {\n-                                pe.printStackTrace();\n-                        }\n-                }\n+        pj.setPrintService(service);\n+        pj.setPrintable(pd);\n+        prSet.add(OrientationRequested.PORTRAIT);\n+        prSet.add(new Copies(1));\n+        prSet.add(new JobName(\"orientation test\", null));\n+        if (service != null) {\n+            pj.print(prSet);\n+        }\n@@ -101,0 +111,3 @@\n+        if (Files.mismatch(fl.toPath(), fp.toPath()) == -1) {\n+            throw new RuntimeException(\"Printing stream orientation is same \" +\n+                                       \"for both PORTRAIT and LANDSCAPE\");\n@@ -102,0 +115,1 @@\n+    }\n@@ -103,2 +117,2 @@\n-        \/\/printable interface\n-        public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n+    \/\/printable interface\n+    public int print(Graphics g, PageFormat pf, int pi) throws PrinterException {\n@@ -106,11 +120,2 @@\n-                if (pi > 0) {\n-                        return Printable.NO_SUCH_PAGE;\n-                }\n-                \/\/ Simply draw two rectangles\n-                Graphics2D g2 = (Graphics2D)g;\n-                g2.setColor(Color.black);\n-                g2.translate(pf.getImageableX(), pf.getImageableY());\n-                System.out.println(\"StreamPrinting Test Width \"+pf.getWidth()+\" Height \"+pf.getHeight());\n-                g2.drawRect(1,1,200,300);\n-                g2.drawRect(1,1,25,25);\n-                return Printable.PAGE_EXISTS;\n+        if (pi > 0) {\n+            return Printable.NO_SUCH_PAGE;\n@@ -118,0 +123,9 @@\n+        \/\/ Simply draw two rectangles\n+        Graphics2D g2 = (Graphics2D) g;\n+        g2.setColor(Color.black);\n+        g2.translate(pf.getImageableX(), pf.getImageableY());\n+        System.out.println(\"StreamPrinting Test Width \" + pf.getWidth() + \" Height \" + pf.getHeight());\n+        g2.drawRect(1, 1, 200, 300);\n+        g2.drawRect(1, 1, 25, 25);\n+        return Printable.PAGE_EXISTS;\n+    }\n","filename":"test\/jdk\/javax\/print\/StreamPrintingOrientation.java","additions":92,"deletions":78,"binary":false,"changes":170,"status":"modified"}]}