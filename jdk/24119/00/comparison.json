{"files":[{"patch":"@@ -88,1 +88,5 @@\n-    __ corrected_idivl(dreg, lreg, rreg, is_irem, \/* is_signed *\/ true);\n+    if (is_irem) {\n+      __ remw(dreg, lreg, rreg);\n+    } else {\n+      __ divw(dreg, lreg, rreg);\n+    }\n@@ -174,6 +178,2 @@\n-      case lir_div: __ corrected_idivq(dest->as_register_lo(), lreg_lo, rreg_lo,\n-                                       \/* want_remainder *\/ false, \/* is_signed *\/ true);\n-                    break;\n-      case lir_rem: __ corrected_idivq(dest->as_register_lo(), lreg_lo, rreg_lo,\n-                                       \/* want_remainder *\/ true, \/* is_signed *\/ true);\n-                    break;\n+      case lir_div: __ div(dest->as_register_lo(), lreg_lo, rreg_lo); break;\n+      case lir_rem: __ rem(dest->as_register_lo(), lreg_lo, rreg_lo); break;\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arith_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3349,65 +3349,0 @@\n-int MacroAssembler::corrected_idivl(Register result, Register rs1, Register rs2,\n-                                    bool want_remainder, bool is_signed)\n-{\n-  \/\/ Full implementation of Java idiv and irem.  The function\n-  \/\/ returns the (pc) offset of the div instruction - may be needed\n-  \/\/ for implicit exceptions.\n-  \/\/\n-  \/\/ input : rs1: dividend\n-  \/\/         rs2: divisor\n-  \/\/\n-  \/\/ result: either\n-  \/\/         quotient  (= rs1 idiv rs2)\n-  \/\/         remainder (= rs1 irem rs2)\n-\n-\n-  int idivl_offset = offset();\n-  if (!want_remainder) {\n-    if (is_signed) {\n-      divw(result, rs1, rs2);\n-    } else {\n-      divuw(result, rs1, rs2);\n-    }\n-  } else {\n-    \/\/ result = rs1 % rs2;\n-    if (is_signed) {\n-      remw(result, rs1, rs2);\n-    } else {\n-      remuw(result, rs1, rs2);\n-    }\n-  }\n-  return idivl_offset;\n-}\n-\n-int MacroAssembler::corrected_idivq(Register result, Register rs1, Register rs2,\n-                                    bool want_remainder, bool is_signed)\n-{\n-  \/\/ Full implementation of Java ldiv and lrem.  The function\n-  \/\/ returns the (pc) offset of the div instruction - may be needed\n-  \/\/ for implicit exceptions.\n-  \/\/\n-  \/\/ input : rs1: dividend\n-  \/\/         rs2: divisor\n-  \/\/\n-  \/\/ result: either\n-  \/\/         quotient  (= rs1 idiv rs2)\n-  \/\/         remainder (= rs1 irem rs2)\n-\n-  int idivq_offset = offset();\n-  if (!want_remainder) {\n-    if (is_signed) {\n-      div(result, rs1, rs2);\n-    } else {\n-      divu(result, rs1, rs2);\n-    }\n-  } else {\n-    \/\/ result = rs1 % rs2;\n-    if (is_signed) {\n-      rem(result, rs1, rs2);\n-    } else {\n-      remu(result, rs1, rs2);\n-    }\n-  }\n-  return idivq_offset;\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -245,6 +245,0 @@\n-  \/\/ idiv variant which deals with MINLONG as dividend and -1 as divisor\n-  int corrected_idivl(Register result, Register rs1, Register rs2,\n-                      bool want_remainder, bool is_signed);\n-  int corrected_idivq(Register result, Register rs1, Register rs2,\n-                      bool want_remainder, bool is_signed);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2488,58 +2488,0 @@\n-  \/\/ arithmetic encodings\n-\n-  enc_class riscv_enc_divw(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivl(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ false, \/* is_signed *\/ true);\n-  %}\n-\n-  enc_class riscv_enc_divuw(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivl(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ false, \/* is_signed *\/ false);\n-  %}\n-\n-  enc_class riscv_enc_div(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivq(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ false, \/* is_signed *\/ true);\n-  %}\n-\n-  enc_class riscv_enc_divu(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivq(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ false, \/* is_signed *\/ false);\n-  %}\n-\n-  enc_class riscv_enc_modw(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivl(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ true, \/* is_signed *\/ true);\n-  %}\n-\n-  enc_class riscv_enc_moduw(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivl(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ true, \/* is_signed *\/ false);\n-  %}\n-\n-  enc_class riscv_enc_mod(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivq(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ true, \/* is_signed *\/ true);\n-  %}\n-\n-  enc_class riscv_enc_modu(iRegI dst, iRegI src1, iRegI src2) %{\n-    Register dst_reg = as_Register($dst$$reg);\n-    Register src1_reg = as_Register($src1$$reg);\n-    Register src2_reg = as_Register($src2$$reg);\n-    __ corrected_idivq(dst_reg, src1_reg, src2_reg, \/* want_remainder *\/ true, \/* is_signed *\/ false);\n-  %}\n-\n@@ -6766,1 +6708,3 @@\n-  ins_encode(riscv_enc_divw(dst, src1, src2));\n+  ins_encode %{\n+    __ divw(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6775,1 +6719,3 @@\n-  ins_encode(riscv_enc_divuw(dst, src1, src2));\n+  ins_encode %{\n+    __ divuw(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6797,1 +6743,3 @@\n-  ins_encode(riscv_enc_div(dst, src1, src2));\n+  ins_encode %{\n+    __ div(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6807,1 +6755,3 @@\n-  ins_encode(riscv_enc_divu(dst, src1, src2));\n+  ins_encode %{\n+    __ divu(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6829,1 +6779,3 @@\n-  ins_encode(riscv_enc_modw(dst, src1, src2));\n+  ins_encode %{\n+    __ remw(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6838,1 +6790,3 @@\n-  ins_encode(riscv_enc_moduw(dst, src1, src2));\n+  ins_encode %{\n+    __ remuw(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6849,1 +6803,3 @@\n-  ins_encode(riscv_enc_mod(dst, src1, src2));\n+  ins_encode %{\n+    __ rem(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n@@ -6858,1 +6814,3 @@\n-  ins_encode(riscv_enc_modu(dst, src1, src2));\n+  ins_encode %{\n+    __ remu(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":24,"deletions":66,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -1327,1 +1327,1 @@\n-  __ corrected_idivl(x10, x11, x10, \/* want_remainder *\/ false, \/* is_signed *\/ true);\n+  __ divw(x10, x11, x10);\n@@ -1340,1 +1340,1 @@\n-  __ corrected_idivl(x10, x11, x10, \/* want_remainder *\/ true, \/* is_signed *\/ true);\n+  __ remw(x10, x11, x10);\n@@ -1359,1 +1359,1 @@\n-  __ corrected_idivq(x10, x11, x10, \/* want_remainder *\/ false, \/* is_signed *\/ true);\n+  __ div(x10, x11, x10);\n@@ -1372,1 +1372,1 @@\n-  __ corrected_idivq(x10, x11, x10, \/* want_remainder *\/ true, \/* is_signed *\/ true);\n+  __ rem(x10, x11, x10);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatform = {\"aarch64\", \"true\"},\n+    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatformOr = {\"aarch64\", \"true\", \"riscv64\", \"true\"},\n@@ -97,1 +97,1 @@\n-    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatform = {\"aarch64\", \"true\"},\n+    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatformOr = {\"aarch64\", \"true\", \"riscv64\", \"true\"},\n@@ -122,1 +122,1 @@\n-    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatform = {\"aarch64\", \"true\"},\n+    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatformOr = {\"aarch64\", \"true\", \"riscv64\", \"true\"},\n@@ -147,1 +147,1 @@\n-    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatform = {\"aarch64\", \"true\"},\n+    @IR(applyIf = {\"UseDivMod\", \"true\"}, applyIfPlatformOr = {\"aarch64\", \"true\", \"riscv64\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestDivModNodes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}