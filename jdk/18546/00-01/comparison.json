{"files":[{"patch":"@@ -336,19 +336,3 @@\n-        additionalScripts = options.additionalScripts().stream().map(sf -> {\n-            DocFile file = DocFile.createFileForInput(this, sf);\n-            boolean isModule = sf.toLowerCase(Locale.ROOT).endsWith(\".mjs\");\n-            if (!isModule) {\n-                \/\/ Regex to detect JavaScript modules\n-                Pattern modulePattern = Pattern.compile(\"\"\"\n-                        (?:^|[;}])\\\\s*(?:\\\n-                        import\\\\s*[\"']|\\\n-                        import[\\\\s{*][^()]*from\\\\s*[\"']|\\\n-                        export(?:\\\\s+(?:let|const|function|class|var|default|async)|\\\\s*[{*]))\"\"\");\n-                try (InputStream in = file.openInputStream();\n-                     BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n-                    isModule = reader.lines().anyMatch(s -> modulePattern.matcher(s).find());\n-                } catch (DocFileIOException | IOException e) {\n-                    \/\/ Errors are handled when copying resources\n-                }\n-            }\n-            return new JavaScriptFile(DocPath.create(file.getName()), isModule);\n-        }).collect(Collectors.toCollection(ArrayList::new));\n+        additionalScripts = options.additionalScripts().stream()\n+                .map(this::detectJSModule)\n+                .collect(Collectors.toList());\n@@ -365,0 +349,20 @@\n+    private JavaScriptFile detectJSModule(String fileName) {\n+        DocFile file = DocFile.createFileForInput(this, fileName);\n+        boolean isModule = fileName.toLowerCase(Locale.ROOT).endsWith(\".mjs\");\n+        if (!isModule) {\n+            \/\/ Regex to detect JavaScript modules\n+            Pattern modulePattern = Pattern.compile(\"\"\"\n+                    (?:^|[;}])\\\\s*(?:\\\n+                    import\\\\s*[\"']|\\\n+                    import[\\\\s{*][^()]*from\\\\s*[\"']|\\\n+                    export(?:\\\\s+(?:let|const|function|class|var|default|async)|\\\\s*[{*]))\"\"\");\n+            try (InputStream in = file.openInputStream();\n+                 BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                isModule = reader.lines().anyMatch(s -> modulePattern.matcher(s).find());\n+            } catch (DocFileIOException | IOException e) {\n+                \/\/ Errors are handled when copying resources\n+            }\n+        }\n+        return new JavaScriptFile(DocPath.create(file.getName()), isModule);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"}]}