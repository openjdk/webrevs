{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.io.BufferedReader;\n@@ -30,0 +31,2 @@\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -44,0 +47,1 @@\n+import java.util.regex.Pattern;\n@@ -67,0 +71,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n@@ -201,0 +206,12 @@\n+    \/**\n+     * List of additional JavaScript files\n+     *\/\n+    private List<JavaScriptFile> additionalScripts;\n+\n+    \/**\n+     * Record for JavaScript file and module flag.\n+     * @param path file path\n+     * @param isModule module flag\n+     *\/\n+    public record JavaScriptFile(DocPath path, boolean isModule) {}\n+\n@@ -319,0 +336,3 @@\n+        additionalScripts = options.additionalScripts().stream()\n+                .map(this::detectJSModule)\n+                .collect(Collectors.toList());\n@@ -329,0 +349,20 @@\n+    private JavaScriptFile detectJSModule(String fileName) {\n+        DocFile file = DocFile.createFileForInput(this, fileName);\n+        boolean isModule = fileName.toLowerCase(Locale.ROOT).endsWith(\".mjs\");\n+        if (!isModule) {\n+            \/\/ Regex to detect JavaScript modules\n+            Pattern modulePattern = Pattern.compile(\"\"\"\n+                    (?:^|[;}])\\\\s*(?:\\\n+                    import\\\\s*[\"']|\\\n+                    import[\\\\s{*][^()]*from\\\\s*[\"']|\\\n+                    export(?:\\\\s+(?:let|const|function|class|var|default|async)|\\\\s*[{*]))\"\"\");\n+            try (InputStream in = file.openInputStream();\n+                 BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+                isModule = reader.lines().anyMatch(s -> modulePattern.matcher(s).find());\n+            } catch (DocFileIOException | IOException e) {\n+                \/\/ Errors are handled when copying resources\n+            }\n+        }\n+        return new JavaScriptFile(DocPath.create(file.getName()), isModule);\n+    }\n+\n@@ -424,5 +464,2 @@\n-    public List<DocPath> getAdditionalScripts() {\n-        return options.additionalScripts().stream()\n-                .map(sf -> DocFile.createFileForInput(this, sf))\n-                .map(file -> DocPath.create(file.getName()))\n-                .collect(Collectors.toCollection(ArrayList::new));\n+    public List<JavaScriptFile> getAdditionalScripts() {\n+        return additionalScripts;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":42,"deletions":5,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.HtmlConfiguration;\n@@ -63,1 +64,1 @@\n-    private List<DocPath> additionalScripts = List.of();\n+    private List<HtmlConfiguration.JavaScriptFile> additionalScripts = List.of();\n@@ -179,1 +180,1 @@\n-    public Head setAdditionalScripts(List<DocPath> scripts) {\n+    public Head setAdditionalScripts(List<HtmlConfiguration.JavaScriptFile> scripts) {\n@@ -349,1 +350,1 @@\n-            addScriptElement(head, DocPaths.SCRIPT_FILES.resolve(DocPaths.SCRIPT_JS));\n+            addScriptElement(head, DocPaths.SCRIPT_JS);\n@@ -359,2 +360,2 @@\n-            addScriptElement(head, DocPaths.SCRIPT_FILES.resolve(DocPaths.JQUERY_JS));\n-            addScriptElement(head, DocPaths.SCRIPT_FILES.resolve(DocPaths.JQUERY_UI_JS));\n+            addScriptElement(head, DocPaths.JQUERY_JS);\n+            addScriptElement(head, DocPaths.JQUERY_UI_JS);\n@@ -362,2 +363,2 @@\n-        for (DocPath path : additionalScripts) {\n-            addScriptElement(head, DocPaths.SCRIPT_FILES.resolve(path));\n+        for (HtmlConfiguration.JavaScriptFile javaScriptFile : additionalScripts) {\n+            addScriptElement(head, javaScriptFile);\n@@ -371,1 +372,1 @@\n-        DocPath scriptFile = pathToRoot.resolve(filePath);\n+        DocPath scriptFile = pathToRoot.resolve(DocPaths.SCRIPT_FILES).resolve(filePath);\n@@ -374,0 +375,6 @@\n+\n+    private void addScriptElement(HtmlTree head, HtmlConfiguration.JavaScriptFile script) {\n+        DocPath scriptFile = pathToRoot.resolve(DocPaths.SCRIPT_FILES).resolve(script.path());\n+        HtmlTree scriptTag = HtmlTree.SCRIPT(scriptFile.getPath());\n+        head.add(script.isModule() ? scriptTag.put(HtmlAttr.TYPE, \"module\") : scriptTag);\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Head.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8317621\n+ * @summary  --add-script should support JavaScript modules\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestJavaScriptModules\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestJavaScriptModules extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestJavaScriptModules();\n+        tester.setup().runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+    Path src;\n+\n+    TestJavaScriptModules setup() throws IOException {\n+        src = Path.of(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                   \/**\n+                    * Simple dummy class.\n+                    *\/\n+                   public class Test {}\n+                   \"\"\");\n+        tb.writeFile(\"module.mjs\", \"\"\"\n+                   var x = 1;\n+                   \"\"\");\n+        tb.writeFile(\"module1.js\", \"\"\"\n+                   const x = 1;\n+                   export class FooModule {}\n+                   \"\"\");\n+        tb.writeFile(\"module2.js\", \"\"\"\n+                   const x = 1;\n+                   export function f() {}\n+                   \"\"\");\n+        tb.writeFile(\"module3.js\", \"\"\"\n+                       const x = 1;\n+                       export async function a() {}\n+                   \"\"\");\n+        tb.writeFile(\"module4.js\", \"\"\"\n+                   \/\/ Another JS module\n+                   export const c = 3;\n+                   \"\"\");\n+        tb.writeFile(\"module5.js\", \"\"\"\n+                   export default class FooModule {}\n+                   \"\"\");\n+        tb.writeFile(\"module6.js\", \"\"\"\n+                   const x = 1;\n+                   export class FooModule {}\n+                   \"\"\");\n+        tb.writeFile(\"module7.js\", \"\"\"\n+                   function abc() {}\n+                   import * as foo from \"module1.js\";\n+                   \"\"\");\n+        tb.writeFile(\"module8.js\", \"\"\"\n+                   var z = false;\n+                   import { _A_, $b, C0 } from \"abc.js\";\n+                   \"\"\");\n+        tb.writeFile(\"script1.js\", \"\"\"\n+                   var z = false;\n+                   import(1, z);\n+                   \"\"\");\n+        tb.writeFile(\"script2.js\", \"\"\"\n+                   export(\"foo\");\n+                   \"\"\");\n+        tb.writeFile(\"script3.js\", \"\"\"\n+                   var import = 1;\n+                   \"\"\");\n+        return this;\n+    }\n+\n+    @Test\n+    public void test(Path base) {\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--add-script\", \"module.mjs\",\n+                \"--add-script\", \"module1.js\",\n+                \"--add-script\", \"module2.js\",\n+                \"--add-script\", \"module3.js\",\n+                \"--add-script\", \"module4.js\",\n+                \"--add-script\", \"module5.js\",\n+                \"--add-script\", \"module6.js\",\n+                \"--add-script\", \"module7.js\",\n+                \"--add-script\", \"module8.js\",\n+                \"--add-script\", \"script1.js\",\n+                \"--add-script\", \"script2.js\",\n+                \"--add-script\", \"script3.js\",\n+                src.resolve(\"Test.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"Test.html\", true,\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module.mjs\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module1.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module2.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module3.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module4.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module5.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module6.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module7.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"module\" src=\"script-files\/module8.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"text\/javascript\" src=\"script-files\/script1.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"text\/javascript\" src=\"script-files\/script2.js\"><\/script>\"\"\",\n+                \"\"\"\n+                    <script type=\"text\/javascript\" src=\"script-files\/script3.js\"><\/script>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaScriptModules\/TestJavaScriptModules.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}