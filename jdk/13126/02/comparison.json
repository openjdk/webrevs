{"files":[{"patch":"@@ -570,3 +570,0 @@\n-            \/\/ It may be possible to extract the platform info from the given image.\n-            \/\/ --post-process-path is a hidden option and pass unknown platform for now.\n-            \/\/ --generate-cds-archive plugin cannot be used with --post-process-path option.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -303,15 +303,0 @@\n-    \/**\n-     * Post process the image with a plugin configuration.\n-     *\n-     * @param image Existing image.\n-     * @param plugins Plugins cannot be null\n-     *\/\n-    public void postProcess(ExecutableImage image, List<Plugin> plugins) {\n-        Objects.requireNonNull(image);\n-        Objects.requireNonNull(plugins);\n-        try {\n-            JlinkTask.postProcessImage(image, plugins);\n-        } catch (Exception ex) {\n-            throw new PluginException(ex);\n-        }\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Jlink.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -268,6 +268,0 @@\n-            if (taskHelper.getExistingImage() != null) {\n-                postProcessOnly(taskHelper.getExistingImage());\n-                return EXIT_OK;\n-            }\n-\n-\n@@ -374,23 +368,0 @@\n-    \/*\n-     * Jlink API entry point.\n-     *\/\n-    public static void postProcessImage(ExecutableImage image, List<Plugin> postProcessorPlugins)\n-            throws Exception {\n-        Objects.requireNonNull(image);\n-        Objects.requireNonNull(postProcessorPlugins);\n-        PluginsConfiguration config = new PluginsConfiguration(postProcessorPlugins);\n-        ImagePluginStack stack = ImagePluginConfiguration.\n-                parseConfiguration(config);\n-\n-        stack.operate((ImagePluginStack stack1) -> image);\n-    }\n-\n-    private void postProcessOnly(Path existingImage) throws Exception {\n-        PluginsConfiguration config = taskHelper.getPluginsConfig(null, null);\n-        ExecutableImage img = DefaultImageBuilder.getExecutableImage(existingImage);\n-        if (img == null) {\n-            throw taskHelper.newBadArgs(\"err.existing.image.invalid\");\n-        }\n-        postProcessImage(img, config.getPlugins());\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -233,1 +233,0 @@\n-        private Path existingImage;\n@@ -262,7 +261,0 @@\n-            mainOptions.add(new PluginOption(true, (task, opt, arg) -> {\n-                Path path = Paths.get(arg);\n-                if (!Files.exists(path) || !Files.isDirectory(path)) {\n-                    throw newBadArgs(\"err.image.must.exist\", path);\n-                }\n-                existingImage = path.toAbsolutePath();\n-            }, true, \"--post-process-path\"));\n@@ -724,4 +716,0 @@\n-    public Path getExistingImage() {\n-        return pluginOptions.existingImage;\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -130,2 +130,0 @@\n-err.image.must.exist=image {0} does not exist or is not a directory\n-err.existing.image.invalid=existing image is not valid\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,3 +315,0 @@\n-plugin.opt.post-process-path=\\\n-\\      --post-process-path <imagefile>   Post process an existing image\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-\n-import jdk.tools.jlink.plugin.Plugin;\n-import jdk.tools.jlink.plugin.ResourcePool;\n-import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n-import jdk.tools.jlink.internal.PluginRepository;\n-import jdk.tools.jlink.internal.PostProcessor;\n-import jdk.tools.jlink.internal.ExecutableImage;\n-import tests.Helper;\n-\n-\/*\n- * @test\n- * @summary Test post processing\n- * @author Jean-Francois Denise\n- * @library ..\/lib\n- * @modules java.base\/jdk.internal.jimage\n- *          jdk.jdeps\/com.sun.tools.classfile\n- *          jdk.jlink\/jdk.tools.jlink.internal\n- *          jdk.jlink\/jdk.tools.jlink.plugin\n- *          jdk.jlink\/jdk.tools.jmod\n- *          jdk.jlink\/jdk.tools.jimage\n- *          jdk.compiler\n- * @build tests.*\n- * @run main\/othervm JLinkPostProcessingTest\n- *\/\n-public class JLinkPostProcessingTest {\n-\n-    private static class PPPlugin implements PostProcessor, Plugin {\n-\n-        private static ExecutableImage called;\n-        private static final String NAME = \"pp\";\n-\n-        @Override\n-        public List<String> process(ExecutableImage image) {\n-            called = image;\n-            Path gen = image.getHome().resolve(\"lib\").resolve(\"toto.txt\");\n-            try {\n-                Files.createFile(gen);\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public ResourcePool transform(ResourcePool in, ResourcePoolBuilder out) {\n-            in.transformAndCopy(Function.identity(), out);\n-            return out.build();\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return NAME;\n-        }\n-\n-        @Override\n-        public Category getType() {\n-            return Category.PROCESSOR;\n-        }\n-\n-        @Override\n-        public String getDescription() {\n-            return NAME;\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        Helper helper = Helper.newHelper();\n-        if (helper == null) {\n-            System.err.println(\"Test not run\");\n-            return;\n-        }\n-        helper.generateDefaultModules();\n-\n-        PluginRepository.registerPlugin(new PPPlugin());\n-\n-        \/\/ Generate an image and post-process in same jlink execution.\n-        {\n-            String[] userOptions = {\"--pp\"};\n-            String moduleName = \"postprocessing1\";\n-            helper.generateDefaultJModule(moduleName, \"composite2\");\n-            String[] res = {};\n-            String[] files = {};\n-            Path imageDir = helper.generateDefaultImage(userOptions, moduleName).assertSuccess();\n-            helper.checkImage(imageDir, moduleName, res, files);\n-\n-            test(imageDir);\n-        }\n-\n-        \/\/ Generate an image, post-process in 2 jlink executions.\n-        {\n-            String[] userOptions = {};\n-            String moduleName = \"postprocessing2\";\n-            helper.generateDefaultJModule(moduleName, \"composite2\");\n-            String[] res = {};\n-            String[] files = {};\n-            Path imageDir = helper.generateDefaultImage(userOptions, moduleName).assertSuccess();\n-            helper.checkImage(imageDir, moduleName, res, files);\n-\n-            String[] ppOptions = {\"--pp\"};\n-            helper.postProcessImage(imageDir, ppOptions);\n-            test(imageDir);\n-        }\n-    }\n-\n-    private static void test(Path imageDir)\n-            throws Exception {\n-        if (PPPlugin.called == null) {\n-            throw new Exception(\"Post processor not called.\");\n-        }\n-        if (!PPPlugin.called.getHome().equals(imageDir)) {\n-            throw new Exception(\"Not right imageDir \" + PPPlugin.called.getHome());\n-        }\n-        if (PPPlugin.called.getExecutionArgs().isEmpty()) {\n-            throw new Exception(\"No arguments to run java...\");\n-        }\n-        Path gen = imageDir.resolve(\"lib\").resolve(\"toto.txt\");\n-        if (!Files.exists(gen)) {\n-            throw new Exception(\"Generated file doesn;t exist\");\n-        }\n-        PPPlugin.called = null;\n-    }\n-}\n","filename":"test\/jdk\/tools\/jlink\/JLinkPostProcessingTest.java","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"}]}