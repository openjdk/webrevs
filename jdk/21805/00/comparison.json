{"files":[{"patch":"@@ -577,1 +577,2 @@\n-          \/\/ We may have an OpaqueNotNull node between If and Bool nodes. Bail out in such case.\n+          \/\/ We may have an OpaqueNotNull node between If and Bool nodes. But we could also have a sub class of IfNode,\n+          \/\/ for example, an OuterStripMinedLoopEnd or a Parse Predicate. Bail out in all these cases.\n@@ -583,2 +584,0 @@\n-          } else {\n-            assert(iff->in(1)->is_OpaqueNotNull(), \"must be OpaqueNotNull\");\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343380\n+ * @summary Test that can_reduce_check_users() can handle different If nodes and that we bail out properly if it's not\n+ *          an actual IfNode.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.escapeAnalysis.TestCanReduceCheckUsersDifferentIfs::test*\n+ *                   -Xcomp compiler.escapeAnalysis.TestCanReduceCheckUsersDifferentIfs\n+ *\/\n+\n+package compiler.escapeAnalysis;\n+\n+public class TestCanReduceCheckUsersDifferentIfs {\n+    static int iFld, iFld2;\n+    static boolean flag;\n+\n+    public static void main(String[] args) {\n+        \/\/ Make sure classes are loaded.\n+        new B();\n+        new C();\n+        testParsePredicate();\n+        testOuterStripMinedLoopEnd();\n+    }\n+\n+    static void testOuterStripMinedLoopEnd() {\n+        \/\/ (1) phi1 for a: phi(CheckCastPP(B), CheckCastPP(c)) with type A:NotNull\n+        A a = flag ? new B() : new C();\n+\n+        \/\/ (4) Loop removed in PhaseIdealLoop before EA and we know that x == 77.\n+        int x = 77;\n+        int y = 0;\n+        do {\n+            x--;\n+            y++;\n+        } while (x > 0);\n+\n+        \/\/ (L)\n+        for (int i = 0; i < 100; i++) {\n+            iFld += 34;\n+        }\n+        \/\/ (6) CastPP(phi1) ends up at IfFalse of OuterStripMinedLoopEnd of loop (L).\n+        \/\/ (7) EA tries to reduce phi1(CheckCastPP(B), CheckCastPP(c)) and looks at\n+        \/\/     OuterStripMinedLoopEnd and asserts that if it's not an IfNode that it has\n+        \/\/     an OpaqueNotNull which obviously is not the case and the assert fails.\n+\n+        \/\/ (5) Found to be false after PhaseIdealLoop before EA and is folded away.\n+        if (y == 76) {\n+            a = (B) a; \/\/ (2) a = CheckCastPP(phi1)\n+        }\n+        \/\/ (3) phi2 for a: phi(if, else) = phi(CheckCastPP(phi1), phi1)\n+        \/\/     phi(CheckCastPP(phi1), phi1) is replaced in PhiNode::Ideal with a CastPP:\n+        \/\/     a = CastPP(phi1) with type A:NotNull\n+        iFld2 = a.iFld;\n+    }\n+\n+    \/\/ Same as testOuterStripMinedLoopEnd() but we find in (7) a ParsePredicate from the\n+    \/\/ removed loop (L) which also does not have an OpaqueNotNull and the assert fails.\n+    static void testParsePredicate() {\n+        A a = flag ? new B() : new C();\n+\n+        int x = 77;\n+        int y = 0;\n+        \/\/ (L)\n+        do {\n+            x--;\n+            y++;\n+        } while (x > 0);\n+\n+        if (y == 76) {\n+            a = (B) a;\n+        }\n+        iFld2 = a.iFld;\n+    }\n+}\n+\n+class A {\n+    int iFld;\n+}\n+\n+class B extends A {\n+}\n+\n+class C extends A {\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestCanReduceCheckUsersDifferentIfs.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}