{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -426,0 +426,2 @@\n+            \"shift ctrl UP\", \"selectPreviousExtendSelection\",\n+            \"shift ctrl KP_UP\", \"selectPreviousExtendSelection\",\n@@ -430,0 +432,2 @@\n+            \"shift ctrl DOWN\", \"selectNextExtendSelection\",\n+            \"shift ctrl KP_DOWN\", \"selectNextExtendSelection\",\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaKeyBindings.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @requires (os.family == \"mac\")\n+ * @bug 8360462\n+ * @summary Verifies ctrl+shift+down selects next row\n+ *          and ctrl+shift+up selects previous row in Aqua L&F\n+ * @run main TestTreeRowSelection\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JTree;\n+import javax.swing.SwingUtilities;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+\n+public class TestTreeRowSelection {\n+    static JTree tree;\n+    static JFrame frame;\n+    static volatile int selectedRowCount;\n+    static volatile int curSelectedRowCount;\n+\n+    public static void main(String[]  args) throws Exception {\n+\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                DefaultMutableTreeNode sports = new DefaultMutableTreeNode(\"sports\");\n+                sports.add(new DefaultMutableTreeNode(\"basketball\"));\n+                sports.add(new DefaultMutableTreeNode(\"football\"));\n+                sports.add(new DefaultMutableTreeNode(\"cricket\"));\n+                sports.add(new DefaultMutableTreeNode(\"tennis\"));\n+\n+                tree = new JTree(sports);\n+                tree.setSelectionRow(2);\n+\n+                frame.getContentPane().add(tree);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                selectedRowCount = tree.getSelectionCount();\n+            });\n+            System.out.println(\"rows selected \" + selectedRowCount);\n+            for (int i = 0; i < 2; i++) {\n+                robot.keyPress(KeyEvent.VK_CONTROL);\n+                robot.keyPress(KeyEvent.VK_SHIFT);\n+                robot.keyPress(KeyEvent.VK_DOWN);\n+                robot.keyRelease(KeyEvent.VK_DOWN);\n+                robot.keyRelease(KeyEvent.VK_SHIFT);\n+                robot.keyRelease(KeyEvent.VK_CONTROL);\n+                robot.waitForIdle();\n+                robot.delay(500);\n+            }\n+            SwingUtilities.invokeAndWait(() -> {\n+                curSelectedRowCount = tree.getSelectionCount();\n+            });\n+            System.out.println(\"rows selected \" + curSelectedRowCount);\n+            if (curSelectedRowCount != selectedRowCount + 2) {\n+                throw new RuntimeException(\"ctrl+shift+down doesn't select next row\");\n+            }\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_UP);\n+            robot.keyRelease(KeyEvent.VK_UP);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            SwingUtilities.invokeAndWait(() -> {\n+                curSelectedRowCount = tree.getSelectionCount();\n+            });\n+            System.out.println(\"rows selected \" + curSelectedRowCount);\n+            if (curSelectedRowCount != selectedRowCount + 1) {\n+                throw new RuntimeException(\"ctrl+shift+up doesn't select previous row\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/TestTreeRowSelection.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}