{"files":[{"patch":"@@ -1318,2 +1318,2 @@\n-         (i->as_Goto()->sux_at(0) == tsux  && i->as_Goto()->is_safepoint() == tsux->bci() < stream()->cur_bci()) ||\n-         (i->as_Goto()->sux_at(0) == fsux  && i->as_Goto()->is_safepoint() == fsux->bci() < stream()->cur_bci()),\n+         (i->as_Goto()->sux_at(0) == tsux  && i->as_Goto()->is_safepoint() == (tsux->bci() < stream()->cur_bci())) ||\n+         (i->as_Goto()->sux_at(0) == fsux  && i->as_Goto()->is_safepoint() == (fsux->bci() < stream()->cur_bci())),\n@@ -1454,1 +1454,1 @@\n-          assert(res->as_Goto()->is_safepoint() == sw.dest_offset_at(i) < 0, \"safepoint state of Goto returned by canonicalizer incorrect\");\n+          assert(res->as_Goto()->is_safepoint() == (sw.dest_offset_at(i) < 0), \"safepoint state of Goto returned by canonicalizer incorrect\");\n@@ -1503,1 +1503,1 @@\n-          assert(res->as_Goto()->is_safepoint() == sw.pair_at(i).offset() < 0, \"safepoint state of Goto returned by canonicalizer incorrect\");\n+          assert(res->as_Goto()->is_safepoint() == (sw.pair_at(i).offset() < 0), \"safepoint state of Goto returned by canonicalizer incorrect\");\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4860,2 +4860,2 @@\n-    assert (kind == fixedKind && fixed->from() <= any->from() ||\n-            kind == anyKind   && any->from() <= fixed->from(), \"wrong interval!!!\");\n+    assert((kind == fixedKind && fixed->from() <= any->from()) ||\n+           (kind == anyKind   && any->from() <= fixed->from()), \"wrong interval!!!\");\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    assert(tag == t->type()->tag() || tag == objectTag && t->type()->tag() == addressTag, \"types must correspond\");\n+    assert(tag == t->type()->tag() || (tag == objectTag && t->type()->tag() == addressTag), \"types must correspond\");\n","filename":"src\/hotspot\/share\/c1\/c1_ValueStack.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,2 +153,2 @@\n-  assert((cs->locs_start() != nullptr) && (cs->locs_end() != nullptr) ||\n-         (cs->locs_start() == nullptr) && (cs->locs_end() == nullptr), \"valid start and end pointer\");\n+  assert(((cs->locs_start() != nullptr) && (cs->locs_end() != nullptr)) ||\n+         ((cs->locs_start() == nullptr) && (cs->locs_end() == nullptr)), \"valid start and end pointer\");\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n+  assert((is_jvmci_compiler() && is_jvmci()) || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n@@ -117,1 +117,1 @@\n-  assert(is_c1_simple_only() && is_c1_only() || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n+  assert((is_c1_simple_only() && is_c1_only()) || !is_c1_simple_only(), \"c1 simple mode must imply c1-only mode\");\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}