{"files":[{"patch":"@@ -175,0 +175,13 @@\n+    \/**\n+     * Terminates the current line in this console's output stream using\n+     * {@link System#lineSeparator()} and then flushes the console.\n+     *\n+     * @return  This console\n+     *\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public Console println() {\n+        return println(\"\");\n+    }\n+\n@@ -217,0 +230,18 @@\n+    \/**\n+     * Reads a single line of text from this console.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached without having read\n+     *          any characters.\n+     *\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public String readln() {\n+        throw newUnsupportedOperationException();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -66,0 +66,15 @@\n+    \/**\n+     * Terminates the current line on the system console and then flushes\n+     * that console.\n+     *\n+     * <p> The effect is as if {@link Console#println() println()}\n+     * had been called on {@code System.console()}.\n+     *\n+     * @throws IOError if {@code System.console()} returns {@code null},\n+     *                 or if an I\/O error occurs\n+     * @since 24\n+     *\/\n+    public static void println() {\n+        con().println();\n+    }\n+\n@@ -102,0 +117,18 @@\n+    \/**\n+     * Reads a single line of text from the system console.\n+     *\n+     * <p> The effect is as if {@link Console#readln() readln()}\n+     * had been called on {@code System.console()}.\n+     *\n+     * @return a string containing the line read from the system console, not\n+     * including any line-termination characters. Returns {@code null} if an\n+     * end of stream has been reached without having read any characters.\n+     *\n+     * @throws IOError if {@code System.console()} returns {@code null},\n+     *                 or if an I\/O error occurs\n+     * @since 24\n+     *\/\n+    public static String readln() {\n+        return con().readln();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/IO.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -120,0 +120,12 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @throws IOError {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readln() {\n+        synchronized (readLock) {\n+            return delegate.readln();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    String readln();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,15 @@\n+    @Override\n+    public String readln() {\n+        String line = null;\n+        synchronized(readLock) {\n+            try {\n+                char[] ca = readline(false);\n+                if (ca != null)\n+                    line = new String(ca);\n+            } catch (IOException x) {\n+                throw new IOError(x);\n+            }\n+        }\n+        return line;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -101,0 +101,5 @@\n+        @Override\n+        public String readln() {\n+            return getDelegate(true).readln();\n+        }\n+\n@@ -225,0 +230,10 @@\n+        }\n+\n+        @Override\n+        public String readln() {\n+            try {\n+                initJLineIfNeeded();\n+                return jline.readLine();\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    public String readUserLine() throws IOException {\n+        throw new UserInterruptException(\"\");\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/IOContext.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4115,0 +4115,9 @@\n+        @Override\n+        public String readLine() throws IOError {\n+            try {\n+                return input.readUserLine();\n+            } catch (IOException ex) {\n+                throw new IOError(ex);\n+            }\n+        }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -78,0 +79,15 @@\n+    \/**\n+     * Reads a single line of text from the console.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     * @see java.io.Console#readLine()\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public String readLine() throws IOError;\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/JShellConsole.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -236,0 +236,18 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\n+         * @throws IOError {@inheritDoc}\n+         *\/\n+        @Override\n+        public String readln() {\n+            try {\n+                return sendAndReceive(() -> {\n+                    remoteInput.write(Task.READ_LINE_NO_PROMPT.ordinal());\n+                    char[] line = readChars();\n+                    return new String(line);\n+                });\n+            } catch (IOException ex) {\n+                throw new IOError(ex);\n+            }\n+        }\n+\n@@ -407,0 +425,6 @@\n+                case READ_LINE_NO_PROMPT -> {\n+                    String line = console.readLine();\n+                    char[] chars = line.toCharArray();\n+                    sendChars(sinkOutput, chars, 0, chars.length);\n+                    bp = 0;\n+                }\n@@ -481,0 +505,1 @@\n+        READ_LINE_NO_PROMPT,\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.Writer;\n@@ -36,0 +37,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +53,1 @@\n- * @bug 8305457\n+ * @bug 8305457 8342936\n@@ -134,1 +136,3 @@\n-            command.add(Path.of(testSrc, \"input.exp\").toAbsolutePath().toString());\n+            String expectInputName = PROMPT_NONE.equals(prompt) ? \"input-no-prompt\"\n+                                                                : \"input\";\n+            command.add(Path.of(testSrc, expectInputName + \".exp\").toAbsolutePath().toString());\n@@ -140,1 +144,1 @@\n-            command.add(prompt == null ? \"0\" : \"1\");\n+            command.add(prompt == null ? \"0\" : PROMPT_NONE.equals(prompt) ? \"2\" : \"1\");\n@@ -147,0 +151,2 @@\n+        private static final String PROMPT_NONE = \"prompt-none\";\n+\n@@ -149,1 +155,1 @@\n-            return Stream.of(null, \"gibberish\").flatMap(console -> Stream.of(null, \"?\", \"%s\")\n+            return Stream.of(null, \"gibberish\").flatMap(console -> Stream.of(null, \"?\", \"%s\", PROMPT_NONE)\n@@ -175,0 +181,27 @@\n+    @Test \/\/JDK-8342936\n+    public void printlnNoParamsTest() throws Exception {\n+        var file = Path.of(\"PrintlnNoParams.java\");\n+        try (Writer w = Files.newBufferedWriter(file)) {\n+            w.write(\"\"\"\n+                    void main() {\n+                        print(\"1 \");\n+                        print(\"2 \");\n+                        print(\"3 \");\n+                        println();\n+                        System.console().print(\"1 \");\n+                        System.console().print(\"2 \");\n+                        System.console().print(\"3 \");\n+                        System.console().println();\n+                    }\n+                    \"\"\");\n+        }\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\"--enable-preview\", file.toString());\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        assertEquals(0, output.getExitValue());\n+        assertTrue(output.getStderr().isEmpty());\n+        output.reportDiagnosticSummary();\n+        String out = output.getStdout();\n+        String nl = System.getProperty(\"line.separator\");\n+        assertEquals(\"1 2 3 \" + nl + \"1 2 3 \" + nl, out);\n+    }\n+\n","filename":"test\/jdk\/java\/io\/IO\/IO.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -31,4 +31,6 @@\n-        if (args[0].equals(\"0\"))\n-            System.out.print(readln(null));\n-        else\n-            System.out.print(readln(args[1]));\n+        switch (args[0]) {\n+            case \"0\" -> System.out.print(readln(null));\n+            case \"1\" -> System.out.print(readln(args[1]));\n+            case \"2\" -> System.out.print(readln());\n+            default -> throw new AssertionError(\"Unknown command: \" + args[0]);\n+        }\n","filename":"test\/jdk\/java\/io\/IO\/Input.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,9 +29,1 @@\n-expect {\n-    -exact \"$prompt\" {\n-        send \"hello\\r\"\n-    }\n-    timeout {\n-        puts \"timeout\"\n-        exit 1\n-    }\n-}\n+send \"hello\\r\"\n","filename":"test\/jdk\/java\/io\/IO\/input-no-prompt.exp","additions":1,"deletions":9,"binary":false,"changes":10,"previous_filename":"test\/jdk\/java\/io\/IO\/input.exp","status":"copied"}]}