{"files":[{"patch":"@@ -3322,2 +3322,3 @@\n-\/\/ in the safepoint protocol, thread suspension, thread interruption, or anything of that\n-\/\/ nature. JavaThreads will be \"in native\" when using this API from JDK code.\n+\/\/ in the safepoint protocol, thread suspension, thread interruption, or most things of that\n+\/\/ nature, except JavaThreads will be blocked by VM_Exit::block_if_vm_exited if the VM has\n+\/\/ shutdown. JavaThreads will be \"in native\" when using this API from JDK code.\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -614,6 +614,10 @@\n-  if (_vm_exited &&\n-      Thread::current_or_null() != _shutdown_thread) {\n-    \/\/ _vm_exited is set at safepoint, and the Threads_lock is never released\n-    \/\/ so we will block here until the process dies.\n-    Threads_lock->lock();\n-    ShouldNotReachHere();\n+  if (_vm_exited) {\n+    \/\/ Need to check for an unattached thread as only attached threads\n+    \/\/ can acquire the lock.\n+    Thread* current = Thread::current_or_null();\n+    if (current != nullptr && current != _shutdown_thread) {\n+      \/\/ _vm_exited is set at safepoint, and the Threads_lock is never released\n+      \/\/ so we will block here until the process dies.\n+      Threads_lock->lock();\n+      ShouldNotReachHere();\n+    }\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}