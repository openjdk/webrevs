{"files":[{"patch":"@@ -59,0 +59,1 @@\n+#include \"opto\/locknode.hpp\"\n@@ -4951,0 +4952,28 @@\n+\/\/ Mark locking regions (identified by BoxLockNode) as coarsened\n+\/\/ if locks coarsening optimization removed lock\/unlock from them.\n+\/\/ Such regions become unbalanced and we can't execute other\n+\/\/ locks elimination optimization on them.\n+void Compile::mark_coarsened_boxes() {\n+  int count = coarsened_count();\n+  for (int i = 0; i < count; i++) {\n+    Node_List* locks_list = _coarsened_locks.at(i);\n+    uint size = locks_list->size();\n+    if (size > 0) {\n+      AbstractLockNode* alock = locks_list->at(0)->as_AbstractLock();\n+      BoxLockNode* box = alock->box_node()->as_BoxLock();\n+      if (alock->is_coarsened() && !box->is_coarsened()) { \/\/ Not marked already\n+        assert(!box->is_eliminated(), \"regions with coarsened locks should not be marked as eliminated\");\n+        for (uint j = 1; j < size; j++) {\n+          assert(locks_list->at(j)->as_AbstractLock()->is_coarsened(), \"only coarsened locks are expected here\");\n+          BoxLockNode* this_box = locks_list->at(j)->as_AbstractLock()->box_node()->as_BoxLock();\n+          assert(!this_box->is_eliminated(), \"regions with coarsened locks should not be marked as eliminated\");\n+          if (box != this_box) {\n+            box->set_coarsened();\n+            this_box->set_coarsened();\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -783,0 +783,1 @@\n+  void mark_coarsened_boxes();\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"opto\/locknode.hpp\"\n@@ -2549,1 +2550,2 @@\n-        if (!alock->is_non_esc_obj()) {\n+        BoxLockNode* box = alock->box_node()->as_BoxLock();\n+        if (!box->is_coarsened() && !alock->is_non_esc_obj()) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                       _slot(slot), _is_eliminated(false) {\n+                                       _slot(slot), _kind(BoxLockNode::Regular) {\n@@ -58,1 +58,1 @@\n-  return Node::hash() + _slot + (_is_eliminated ? Compile::current()->fixed_slots() : 0);\n+  return Node::hash() + _slot + (is_eliminated() ? Compile::current()->fixed_slots() : 0);\n@@ -66,1 +66,1 @@\n-  return bn._slot == _slot && bn._is_eliminated == _is_eliminated;\n+  return bn._slot == _slot && bn._kind == _kind;\n@@ -95,2 +95,0 @@\n-  bool has_lock = false;\n-  bool has_unlock = false;\n@@ -105,6 +103,0 @@\n-          if (alock->is_Unlock()) {\n-            has_unlock = true;\n-          } else {\n-            assert(alock->is_Lock(), \"only Lock node expected\");\n-            has_lock = true;\n-          }\n@@ -131,6 +123,0 @@\n-  if (has_lock != has_unlock) {\n-    \/\/ Unbalanced locking region.\n-    \/\/ Can happen when locks coarsening optimization eliminated\n-    \/\/ pair of Unlock\/Lock nodes from adjacent locking regions.\n-    return false;\n-  }\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,5 @@\n-  bool _is_eliminated; \/\/ Associated locks were safely eliminated\n+  enum {\n+    Regular = 0,       \/\/ Normal locking region\n+    Coarsened,         \/\/ Some lock\/unlock in region were coarsened\n+    Eliminated         \/\/ All lock\/unlock in region were eliminated\n+  } _kind;\n@@ -60,3 +64,4 @@\n-  bool is_eliminated() const { return _is_eliminated; }\n-  \/\/ mark lock as eliminated.\n-  void set_eliminated()      { _is_eliminated = true; }\n+  bool is_eliminated() const { return _kind == Eliminated; }\n+  bool is_coarsened()  const { return _kind == Coarsened; }\n+  void set_eliminated()      { _kind = Eliminated; }\n+  void set_coarsened()       { _kind = Coarsened; }\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2036,0 +2036,3 @@\n+  if (alock->box_node()->as_BoxLock()->is_coarsened()) {\n+    return; \/\/ Can't do any more elimination for this locking region\n+  }\n@@ -2352,0 +2355,2 @@\n+  } else {\n+    C->mark_coarsened_boxes();\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}