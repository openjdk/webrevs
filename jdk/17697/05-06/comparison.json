{"files":[{"patch":"@@ -2168,0 +2168,1 @@\n+        box->set_nested();\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4871,1 +4871,0 @@\n-#ifdef ASSERT\n@@ -4874,1 +4873,0 @@\n-#endif\n@@ -4879,1 +4877,0 @@\n-#ifdef ASSERT\n@@ -4882,2 +4879,10 @@\n-        this_box->mark_unbalanced();\n-        box->mark_unbalanced();\n+        \/\/ Locking regions (BoxLock) could be Unbalanced here:\n+        \/\/  - its coarsened locks were eliminated in earlier\n+        \/\/    macro nodes elimination followed by loop unroll\n+        \/\/ Preserve Unbalanced status in such cases.\n+        if (!this_box->is_unbalanced()) {\n+          this_box->set_coarsened();\n+        }\n+        if (!box->is_unbalanced()) {\n+          box->set_coarsened();\n+        }\n@@ -4885,1 +4890,0 @@\n-#endif\n@@ -4984,1 +4988,0 @@\n-          assert(!this_box->is_eliminated(), \"regions with coarsened locks should not be marked as eliminated\");\n@@ -4986,0 +4989,1 @@\n+            assert(!this_box->is_eliminated(), \"regions with coarsened locks should not be marked as eliminated\");\n@@ -4988,1 +4992,0 @@\n-            assert(this_box->is_marked_unbalanced(),\"inconsistency\");\n@@ -4991,1 +4994,0 @@\n-        assert(box->is_unbalanced() == box->is_marked_unbalanced(),\"inconsistency\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2889,1 +2889,9 @@\n-  return !box->is_unbalanced() && not_global_escape(alock->obj_node());\n+  if (!box->is_unbalanced() && not_global_escape(alock->obj_node())) {\n+    if (EliminateNestedLocks) {\n+      \/\/ We can mark whole locking region as Local only when only\n+      \/\/ one object is used for locking.\n+      box->set_local();\n+    }\n+    return true;\n+  }\n+  return false;\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  DEBUG_ONLY(_marked_unbalanced = false);\n@@ -55,1 +54,0 @@\n-\/\/-----------------------------hash--------------------------------------------\n@@ -57,1 +55,1 @@\n-  if (EliminateNestedLocks)\n+  if (EliminateNestedLocks) {\n@@ -59,0 +57,1 @@\n+  }\n@@ -62,1 +61,0 @@\n-\/\/------------------------------cmp--------------------------------------------\n@@ -64,1 +62,1 @@\n-  if (EliminateNestedLocks)\n+  if (EliminateNestedLocks) {\n@@ -66,0 +64,1 @@\n+  }\n@@ -67,1 +66,30 @@\n-  return bn._slot == _slot && bn._kind == _kind;\n+  return (bn._slot == _slot) && (bn.is_eliminated() == is_eliminated());\n+}\n+\n+Node* BoxLockNode::Identity(PhaseGVN* phase) {\n+  if (!EliminateNestedLocks && !this->is_eliminated()) {\n+    Node* n = phase->hash_find(this);\n+    if (n == nullptr || n == this) {\n+      return this;\n+    }\n+    BoxLockNode* old_box = n->as_BoxLock();\n+    \/\/ Set corresponding status (_kind) when commoning BoxLock nodes.\n+    if (this->_kind != old_box->_kind) {\n+      if (this->is_unbalanced()) {\n+        old_box->set_unbalanced();\n+      }\n+      if (!old_box->is_unbalanced()) {\n+        \/\/ Only Regular or Coarsened status should be here:\n+        \/\/ Nested and Local are set only when EliminateNestedLocks is on.\n+        if (old_box->is_regular()) {\n+          assert(this->is_coarsened(),\"unexpected kind: %s\", _kind_name[(int)this->_kind]);\n+          old_box->set_coarsened();\n+        } else {\n+          assert(this->is_regular(),\"unexpected kind: %s\", _kind_name[(int)this->_kind]);\n+          assert(old_box->is_coarsened(),\"unexpected kind: %s\", _kind_name[(int)old_box->_kind]);\n+        }\n+      }\n+    }\n+    return old_box;\n+  }\n+  return this;\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+private:\n@@ -40,2 +41,5 @@\n-    Unbalanced,        \/\/ Some lock\/unlock in region were coarsened,\n-                       \/\/ as result this region become unbalanced\n+    Local,             \/\/ EA found that local not escaping object is used for locking\n+    Nested,            \/\/ This region is inside other region which use the same object\n+    Coarsened,         \/\/ Some lock\/unlock in region were marked as coarsened\n+    Unbalanced,        \/\/ This region become unbalanced after coarsened lock\/unlock were eliminated\n+                       \/\/ or it is locking region from OSR when locking is done in Interpreter\n@@ -45,2 +49,18 @@\n-  \/\/ In debug VM verify correctness of unbalanced marking\n-  DEBUG_ONLY(bool _marked_unbalanced;)\n+#ifdef ASSERT\n+  const char* _kind_name[6] = {\n+   \"Regular\",\n+   \"Local\",\n+   \"Nested\",\n+   \"Coarsened\",\n+   \"Unbalanced\",\n+   \"Eliminated\"\n+  };\n+#endif\n+\n+  \/\/ Allowed transitions of _kind:\n+  \/\/   Regular -> Local, Nested, Coarsened\n+  \/\/   Local   -> Eliminated\n+  \/\/   Nested  -> Eliminated\n+  \/\/   Coarsened -> Local, Nested, Unbalanced\n+  \/\/ EA and nested lock elimination can overwrite Coarsened kind.\n+  \/\/ Also allow transition to the same kind.\n@@ -60,0 +80,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n@@ -68,0 +89,4 @@\n+  bool is_regular()    const { return _kind == Regular; }\n+  bool is_local()      const { return _kind == Local; }\n+  bool is_nested()     const { return _kind == Nested; }\n+  bool is_coarsened()  const { return _kind == Coarsened; }\n@@ -70,2 +95,0 @@\n-  void set_eliminated()      { _kind = Eliminated; }\n-  void set_unbalanced()      { _kind = Unbalanced; }\n@@ -73,4 +96,25 @@\n-#ifdef ASSERT\n-  void mark_unbalanced()            { _marked_unbalanced = true; }\n-  bool is_marked_unbalanced() const { return _marked_unbalanced; }\n-#endif\n+  void set_local()      {\n+    assert((_kind == Regular || _kind == Local || _kind == Coarsened),\n+           \"incorrect kind for Local transitioni: %s\", _kind_name[(int)_kind]);\n+    _kind = Local;\n+  }\n+  void set_nested()     {\n+    assert((_kind == Regular || _kind == Nested || _kind == Coarsened),\n+           \"incorrect kind for Nested transition: %s\", _kind_name[(int)_kind]);\n+    _kind = Nested;\n+  }\n+  void set_coarsened()  {\n+    assert((_kind == Regular || _kind == Coarsened),\n+           \"incorrect kind for Coarsened transition: %s\", _kind_name[(int)_kind]);\n+    _kind = Coarsened;\n+  }\n+  void set_eliminated() {\n+    assert((_kind == Local || _kind == Nested),\n+           \"incorrect kind for Eliminated transition: %s\", _kind_name[(int)_kind]);\n+    _kind = Eliminated;\n+  }\n+  void set_unbalanced() {\n+    assert((_kind == Coarsened || _kind == Unbalanced),\n+           \"incorrect kind for Unbalanced transition: %s\", _kind_name[(int)_kind]);\n+    _kind = Unbalanced;\n+  }\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":54,"deletions":10,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1942,2 +1942,3 @@\n-void PhaseMacroExpand::mark_eliminated_box(Node* oldbox, Node* obj) {\n-  if (oldbox->as_BoxLock()->is_eliminated()) {\n+void PhaseMacroExpand::mark_eliminated_box(Node* box, Node* obj) {\n+  BoxLockNode* oldbox = box->as_BoxLock();\n+  if (oldbox->is_eliminated()) {\n@@ -1946,1 +1947,1 @@\n-  assert(!oldbox->as_BoxLock()->is_unbalanced(), \"this should not be called for unbalanced region\");\n+  assert(!oldbox->is_unbalanced(), \"this should not be called for unbalanced region\");\n@@ -1954,0 +1955,1 @@\n+    oldbox->set_local();      \/\/ This verifies correct state of BoxLock\n@@ -1955,1 +1957,1 @@\n-    oldbox->as_BoxLock()->set_eliminated(); \/\/ This changes box's hash value\n+    oldbox->set_eliminated(); \/\/ This changes box's hash value\n@@ -1982,0 +1984,1 @@\n+  newbox->set_local(); \/\/ This verifies correct state of BoxLock\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @summary C2 incorrectly marks unbalanced nested locks for elimination.\n+ * @summary C2 incorrectly marks unbalanced (after coarsened locks were eliminated)\n+ *          nested locks for elimination.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation TestNestedLocksElimination\n+ * @run main\/othervm -XX:-BackgroundCompilation TestCoarsenedAndNestedLocksElimination\n@@ -32,1 +33,1 @@\n-public class TestNestedLocksElimination {\n+public class TestCoarsenedAndNestedLocksElimination {\n","filename":"test\/hotspot\/jtreg\/compiler\/locks\/TestCoarsenedAndNestedLocksElimination.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestNestedLocksElimination.java","status":"renamed"}]}