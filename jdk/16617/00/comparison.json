{"files":[{"patch":"@@ -401,1 +401,1 @@\n-  uint32_t last = 31 - count_leading_zeros(_bitset);\n+  uint32_t last = max_size() - 1 - count_leading_zeros(_bitset);\n@@ -414,1 +414,1 @@\n-  uint32_t last = 31 - count_leading_zeros(_bitset);\n+  uint32_t last = max_size() - 1 - count_leading_zeros(_bitset);\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  uint32_t _bitset;\n+  size_t _bitset;\n@@ -98,1 +98,5 @@\n-  AbstractRegSet(uint32_t bitset) : _bitset(bitset) { }\n+  constexpr AbstractRegSet(size_t bitset) : _bitset(bitset) { }\n+\n+  static constexpr size_t max_size() {\n+    return sizeof _bitset * CHAR_BIT;\n+  }\n@@ -102,1 +106,1 @@\n-  AbstractRegSet() : _bitset(0) { }\n+  constexpr AbstractRegSet() : _bitset(0) { }\n@@ -104,1 +108,2 @@\n-  AbstractRegSet(RegImpl r1) : _bitset(1 << r1->encoding()) { }\n+  constexpr AbstractRegSet(RegImpl r1)\n+    : _bitset(size_t(r1->is_valid()) << r1->encoding()) { }\n@@ -106,1 +111,1 @@\n-  AbstractRegSet operator+(const AbstractRegSet aSet) const {\n+  constexpr AbstractRegSet operator+(const AbstractRegSet aSet) const {\n@@ -111,1 +116,1 @@\n-  AbstractRegSet operator-(const AbstractRegSet aSet) const {\n+  constexpr AbstractRegSet operator-(const AbstractRegSet aSet) const {\n@@ -116,1 +121,1 @@\n-  AbstractRegSet &operator+=(const AbstractRegSet aSet) {\n+  constexpr AbstractRegSet &operator+=(const AbstractRegSet aSet) {\n@@ -121,1 +126,1 @@\n-  AbstractRegSet &operator-=(const AbstractRegSet aSet) {\n+  constexpr AbstractRegSet &operator-=(const AbstractRegSet aSet) {\n@@ -126,1 +131,1 @@\n-  static AbstractRegSet of(RegImpl r1) {\n+  constexpr static AbstractRegSet of(RegImpl r1) {\n@@ -130,1 +135,1 @@\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2) {\n+  constexpr static AbstractRegSet of(RegImpl r1, RegImpl r2) {\n@@ -134,1 +139,1 @@\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3) {\n+  constexpr static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3) {\n@@ -138,1 +143,1 @@\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3, RegImpl r4) {\n+  constexpr static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3, RegImpl r4) {\n@@ -142,1 +147,1 @@\n-  static AbstractRegSet range(RegImpl start, RegImpl end) {\n+  constexpr static AbstractRegSet range(RegImpl start, RegImpl end) {\n@@ -146,1 +151,1 @@\n-    uint32_t bits = ~0;\n+    size_t bits = ~(size_t)0;\n@@ -148,2 +153,2 @@\n-    bits <<= 31 - end_enc;\n-    bits >>= 31 - end_enc;\n+    bits <<= max_size() - 1 - end_enc;\n+    bits >>= max_size() - 1 - end_enc;\n@@ -154,1 +159,3 @@\n-  uint size() const { return population_count(_bitset); }\n+  constexpr bool contains(RegImpl reg) {\n+    return (AbstractRegSet(reg).bits() & bits()) != 0;\n+  }\n@@ -156,1 +163,2 @@\n-  uint32_t bits() const { return _bitset; }\n+  constexpr uint size() const { return population_count(_bitset); }\n+  constexpr size_t bits() const { return _bitset; }\n@@ -248,0 +256,27 @@\n+template<typename R, typename... Rx>\n+inline constexpr bool different_registers(AbstractRegSet<R> allocated_regs, R first_register) {\n+  return ! allocated_regs.contains(first_register);\n+}\n+\n+template<typename R, typename... Rx>\n+inline constexpr bool different_registers(AbstractRegSet<R> allocated_regs, R first_register, Rx... more_registers) {\n+  if (allocated_regs.contains(first_register))\n+    return false;\n+  return different_registers(allocated_regs + first_register, more_registers...);\n+}\n+\n+template<typename R, typename... Rx>\n+inline constexpr bool different_registers(R first_register, Rx... more_registers) {\n+  return different_registers(AbstractRegSet<R>(), first_register, more_registers...);\n+}\n+\n+template<typename R, typename... Rx>\n+inline constexpr bool different_registers(R reg1, R reg2) {\n+  return reg1 != reg2;\n+}\n+\n+template<typename R, typename... Rx>\n+inline constexpr bool different_registers(R reg1, R reg2, R reg3) {\n+  return reg1 != reg2 && reg2 != reg3 && reg1 != reg3;\n+}\n+\n@@ -251,5 +286,8 @@\n-  const R regs[] = { first_register, more_registers... };\n-  \/\/ Verify there are no equal entries.\n-  for (size_t i = 0; i < ARRAY_SIZE(regs) - 1; ++i) {\n-    for (size_t j = i + 1; j < ARRAY_SIZE(regs); ++j) {\n-      assert(regs[i] != regs[j], \"Multiple uses of register: %s\", regs[i]->name());\n+  if (! different_registers(first_register, more_registers...)) {\n+    const R regs[] = { first_register, more_registers... };\n+    \/\/ Find a duplicate entry.\n+    for (size_t i = 0; i < ARRAY_SIZE(regs) - 1; ++i) {\n+      for (size_t j = i + 1; j < ARRAY_SIZE(regs); ++j) {\n+        assert(! regs[i]->is_valid() || regs[i] != regs[j],\n+               \"Multiple uses of register: %s\", regs[i]->name());\n+      }\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":61,"deletions":23,"binary":false,"changes":84,"status":"modified"}]}