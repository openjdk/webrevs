{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -1129,0 +1131,183 @@\n+\n+        System.out.println();\n+        crossCheckEntries(jarName);\n+    }\n+\n+    private void crossCheckEntries(String jarName) throws Exception {\n+\n+        try (JarFile jarFile = new JarFile(jarName);\n+             JarInputStream jis = new JarInputStream(\n+                     Files.newInputStream(Path.of(jarName)))) {\n+\n+            \/\/ Validate Manifest first\n+            Manifest cenManifest = jarFile.getManifest();\n+            Manifest locManifest = jis.getManifest();\n+            if (!compareManifest(cenManifest, locManifest)) {\n+                return;\n+            }\n+\n+            Enumeration<JarEntry> cenEntries = jarFile.entries();\n+            JarEntry locEntry;\n+\n+            \/\/ Skip the first entry \"META-INF\/MANIFEST.MF\" in CEN\n+            if (cenEntries.hasMoreElements()) {\n+                JarEntry firstCenEntry = cenEntries.nextElement();\n+                if (!\"META-INF\/MANIFEST.MF\".equals(firstCenEntry.getName())) {\n+                    System.out.println(rb.getString(\n+                            \"First.entry.in.CEN.is.not.MANIFEST.MF\"));\n+                    return;\n+                }\n+            }\n+\n+            Set<String> cenEntrySet = new HashSet<>();\n+            Set<String> locEntrySet = new HashSet<>();\n+\n+            JarEntry cenEntry = null;\n+            while (cenEntries.hasMoreElements() &&\n+                    (locEntry = jis.getNextJarEntry()) != null) {\n+                cenEntry = cenEntries.nextElement();\n+\n+                cenEntrySet.add(cenEntry.getName());\n+                locEntrySet.add(locEntry.getName());\n+\n+                \/\/ Check if entries match in order\n+                if (!cenEntry.getName().equals(locEntry.getName())) {\n+                    System.out.println(rb.getString(\n+                            \"The.order.of.entries.in.CEN.and.LOC.does.not.match\"));\n+                    return;\n+                }\n+\n+                \/\/ Compare sizes\n+                long cenSize = cenEntry.getSize();\n+                long locSize = locEntry.getSize() == -1 ? calculateEntrySize(jis) : locEntry.getSize();\n+\n+                if (cenSize != -1 && cenSize != locSize) {\n+                    System.out.println(String.format(rb.getString(\"Size.mismatch.for.jar.entry.1\"),\n+                            cenEntry.getName()));\n+                }\n+\n+                \/\/ Skip signature files in META-INF\n+                if (cenEntry.getName().startsWith(\"META-INF\/\")) {\n+                    continue;\n+                }\n+\n+                \/\/ Read entry for signature verification\n+                readEntry(jis);\n+                readEntry(jarFile.getInputStream(cenEntry));\n+\n+                \/\/ Compare signers\n+                compareSigners(cenEntry, locEntry);\n+            }\n+\n+            \/\/ Remaining entries if any\n+            while (cenEntries.hasMoreElements()) {\n+                cenEntrySet.add(cenEntries.nextElement().getName());\n+            }\n+            while ((locEntry = jis.getNextJarEntry()) != null) {\n+                locEntrySet.add(locEntry.getName());\n+            }\n+\n+            \/\/ Find if an entry is present in LOC but missing in CEN, and vice versa.\n+            if (!cenEntrySet.equals(locEntrySet)) {\n+                System.out.println(rb.getString(\n+                        \"Mismatch.in.number.of.entries.between.CEN.and.LOC\"));\n+\n+                Set<String> cenMissingEntry = new HashSet<>(locEntrySet);\n+                cenMissingEntry.removeAll(cenEntrySet);\n+\n+                Set<String> locMissingEntry = new HashSet<>(cenEntrySet);\n+                locMissingEntry.removeAll(locEntrySet);\n+\n+                if (!cenMissingEntry.isEmpty()) {\n+                    for (String entry : cenMissingEntry) {\n+                        System.out.println(String.format(rb.getString(\n+                                \"Jar.entry.in.LOC.but.missing.in.CEN.1\"),\n+                                entry));\n+                    }\n+                }\n+\n+                if (!locMissingEntry.isEmpty()) {\n+                    for (String entry : locMissingEntry) {\n+                        System.out.println(String.format(rb.getString(\n+                                \"Jar.entry.in.CEN.but.missing.in.LOC.1\"),\n+                                entry));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private long calculateEntrySize(JarInputStream jis) throws IOException {\n+        long size = 0;\n+        byte[] buffer = new byte[8192];\n+        int bytesRead;\n+        while ((bytesRead = jis.read(buffer)) != -1) {\n+            size += bytesRead;\n+        }\n+        return size;\n+    }\n+\n+    private void readEntry(InputStream is) throws IOException {\n+        byte[] buffer = new byte[8192];\n+        while (is.read(buffer) != -1) {\n+        }\n+    }\n+\n+    private boolean compareManifest(Manifest cenManifest, Manifest locManifest) {\n+        if (cenManifest == null) {\n+            System.out.println(rb.getString(\n+                    \"CEN.manifest.is.missing\"));\n+            return false;\n+        }\n+        if (locManifest == null) {\n+            System.out.println(rb.getString(\n+                    \"LOC.manifest.is.missing\"));\n+            return false;\n+        }\n+\n+        Attributes cenMainAttrs = cenManifest.getMainAttributes();\n+        Attributes locMainAttrs = locManifest.getMainAttributes();\n+\n+        for (Object key : cenMainAttrs.keySet()) {\n+            Object cenValue = cenMainAttrs.get(key);\n+            Object locValue = locMainAttrs.get(key);\n+\n+            if (locValue == null) {\n+                System.out.println(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.CEN.but.missing.in.LOC\"),\n+                        key));\n+                return false;\n+            } else if (!cenValue.equals(locValue)) {\n+                System.out.println(String.format(\n+                        rb.getString(\"main.atrribute.key.1.mismatch.CEN.2.LOC.3\"),\n+                        key, cenValue, locValue));\n+                return false;\n+            }\n+        }\n+\n+        for (Object key : locMainAttrs.keySet()) {\n+            if (!cenMainAttrs.containsKey(key)) {\n+                System.out.println(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.LOC.but.missing.in.CEN\"),\n+                        key));\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void compareSigners(JarEntry cenEntry, JarEntry locEntry) {\n+        CodeSigner[] cenSigners = cenEntry.getCodeSigners();\n+        CodeSigner[] locSigners = locEntry.getCodeSigners();\n+\n+        boolean cenHasSigners = cenSigners != null;\n+        boolean locHasSigners = locSigners != null;\n+\n+        if (cenHasSigners && locHasSigners) {\n+            List<CodeSigner> cenSignerList = Arrays.asList(cenSigners);\n+            List<CodeSigner> locSignerList = Arrays.asList(locSigners);\n+\n+            if (!cenSignerList.equals(locSignerList)) {\n+                System.out.printf(rb.getString(\"Signature.mismatch.for.entry.1\"), cenEntry.getName());\n+            }\n+        }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -327,0 +327,24 @@\n+        {\"Jar.entry.in.CEN.but.missing.in.LOC.1\",\n+                \"Jar entries in CEN but missing in LOC: %s\"},\n+        {\"Jar.entry.in.LOC.but.missing.in.CEN.1\",\n+                \"Jar entries in LOC but missing in CEN: %s\"},\n+        {\"Size.mismatch.for.jar.entry.1\",\n+                \"Size mismatch for Jar entry: %s\"},\n+        {\"CEN.manifest.is.missing\",\n+                \"CEN manifest is missing\"},\n+        {\"LOC.manifest.is.missing\",\n+                \"LOC manifest is missing\"},\n+        {\"main.attribute.key.1.in.CEN.but.missing.in.LOC\",\n+                \"Main attribute key %s in CEN but missing in LOC\"},\n+        {\"main.attribute.key.1.in.LOC.but.missing.in.CEN\",\n+                \"Main attribute key %s in LOC but missing in CEN\"},\n+        {\"main.atrribute.key.1.mismatch.CEN.2.LOC.3\",\n+                \"Main attribute key %s mismatch: CEN= %s and LOC= %s\"},\n+        {\"First.entry.in.CEN.is.not.MANIFEST.MF\",\n+                \"First entry in CEN is not MANIFEST.MF\"},\n+        {\"The.order.of.entries.in.CEN.and.LOC.does.not.match\",\n+                \"The order of entries in CEN and LOC does not match\"},\n+        {\"Signature.mismatch.for.entry.1\",\n+                \"Signature mismatch between CEN and LOC for entry = %s\"},\n+        {\"Mismatch.in.number.of.entries.between.CEN.and.LOC\",\n+                \"Mismatch in number of entries between CEN and LOC\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8339280\n+ * @summary Test jarsigner -verify on a jar with an entry which size is > 64k,\n+ *     so its size (or csize) is stored in the extra field and\/or data descriptor.\n+ * @library \/test\/lib\n+ * @run main VerifyCompressedLargeFile\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.test.lib.SecurityTools;\n+\n+public class VerifyCompressedLargeFile {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/**\n+         * largefile.zip created by:\n+         * - dd if=\/dev\/zero bs=1K count=100 of=largefile.txt\n+         * - zip -fz largefile.zip largefile.txt\n+         *\/\n+        String largeZip = Path.of(System.getProperty(\"test.src\"), \"largefile.zip\").toString();\n+\n+        SecurityTools.keytool(\"-genkeypair -keystore ks -storepass changeit \" +\n+                        \"-keyalg rsa -alias mykey -dname CN=me\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit -digestalg SHA256 \" +\n+                        largeZip + \" mykey\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.jarsigner(\"-verify -verbose \" + largeZip)\n+                .shouldMatch(\"102400 .*largefile.txt\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyCompressedLargeFile.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/largefile.zip","binary":true,"status":"added"}]}