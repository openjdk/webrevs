{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8339280\n+ * @summary Test that jarsigner -verify emits a warning when the filename of\n+ *     an entry in the LOC is changed\n+ * @library \/test\/lib\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import jdk.test.lib.SecurityTools;\n+\n+public class VerifyJarEntryName {\n+\n+    public static void main(String[] args) throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n+        try (ZipOutputStream zos = new ZipOutputStream(out)) {\n+            zos.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME));\n+            zos.write(\"Manifest-Version: 1.0\\nCreated-By: Test\\n\".getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+        }\n+\n+        var template = out.toByteArray();\n+        Path jarPath = Path.of(\"test.jar\");\n+        Files.write(jarPath, template);\n+\n+        SecurityTools.keytool(\"-genkeypair -keystore ks -storepass changeit \"\n+                + \"-alias mykey -keyalg rsa -dname CN=me \");\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \"\n+                        + \"test.jar mykey\")\n+                .shouldHaveExitValue(0);\n+\n+        Path jarPath1 = Path.of(\"test1.jar\");\n+        Files.copy(jarPath, jarPath1, StandardCopyOption.REPLACE_EXISTING);\n+\n+        \/\/ Modify a single byte in \"MANIFEST.MF\" filename in LOC\n+        byte[] signedJar = Files.readAllBytes(jarPath);\n+        var jarS = new String(signedJar, StandardCharsets.ISO_8859_1);\n+\n+        var manifestPos = jarS.indexOf(\"MANIFEST.MF\");\n+        if (manifestPos != -1) {\n+            signedJar[manifestPos] = 'X';\n+        }\n+        Files.write(jarPath, signedJar);\n+\n+        SecurityTools.jarsigner(\"-verify -verbose test.jar\")\n+                .shouldContain(\"LOC manifest is missing\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ Modify a single byte in \"MYKEY.SF\" filename in LOC\n+        byte[] signedJar1 = Files.readAllBytes(jarPath1);\n+        var jarS1 = new String(signedJar1, StandardCharsets.ISO_8859_1);\n+\n+        var sfPos = jarS1.indexOf(\"MYKEY.SF\");\n+        if (sfPos != -1) {\n+            signedJar1[sfPos] = 'X';\n+        }\n+        Files.write(jarPath1, signedJar1);\n+\n+        SecurityTools.jarsigner(\"-verify -verbose test1.jar\")\n+                .shouldContain(\"Mismatch in entries between CEN and LOC\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}