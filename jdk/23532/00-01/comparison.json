{"files":[{"patch":"@@ -246,0 +246,2 @@\n+    private List<String> crossChkWarnings = new ArrayList<>();\n+\n@@ -1107,0 +1109,1 @@\n+            crossCheckEntries(jarName);\n@@ -1131,3 +1134,0 @@\n-\n-        System.out.println();\n-        crossCheckEntries(jarName);\n@@ -1137,0 +1137,2 @@\n+        List<String> locEntries = new ArrayList<>();\n+        List<String> cenEntries;\n@@ -1142,1 +1144,0 @@\n-            \/\/ Validate Manifest first\n@@ -1149,1 +1150,0 @@\n-            Enumeration<JarEntry> cenEntries = jarFile.entries();\n@@ -1151,0 +1151,3 @@\n+            while ((locEntry = jis.getNextJarEntry()) != null) {\n+                String entryName = locEntry.getName();\n+                locEntries.add(entryName);\n@@ -1152,39 +1155,4 @@\n-            \/\/ Skip the first entry \"META-INF\/MANIFEST.MF\" in CEN\n-            if (cenEntries.hasMoreElements()) {\n-                JarEntry firstCenEntry = cenEntries.nextElement();\n-                if (!\"META-INF\/MANIFEST.MF\".equals(firstCenEntry.getName())) {\n-                    System.out.println(rb.getString(\n-                            \"First.entry.in.CEN.is.not.MANIFEST.MF\"));\n-                    return;\n-                }\n-            }\n-\n-            Set<String> cenEntrySet = new HashSet<>();\n-            Set<String> locEntrySet = new HashSet<>();\n-\n-            JarEntry cenEntry = null;\n-            while (cenEntries.hasMoreElements() &&\n-                    (locEntry = jis.getNextJarEntry()) != null) {\n-                cenEntry = cenEntries.nextElement();\n-\n-                cenEntrySet.add(cenEntry.getName());\n-                locEntrySet.add(locEntry.getName());\n-\n-                \/\/ Check if entries match in order\n-                if (!cenEntry.getName().equals(locEntry.getName())) {\n-                    System.out.println(rb.getString(\n-                            \"The.order.of.entries.in.CEN.and.LOC.does.not.match\"));\n-                    return;\n-                }\n-\n-                \/\/ Compare sizes\n-                long cenSize = cenEntry.getSize();\n-                long locSize = locEntry.getSize() == -1 ? calculateEntrySize(jis) : locEntry.getSize();\n-\n-                if (cenSize != -1 && cenSize != locSize) {\n-                    System.out.println(String.format(rb.getString(\"Size.mismatch.for.jar.entry.1\"),\n-                            cenEntry.getName()));\n-                }\n-\n-                \/\/ Skip signature files in META-INF\n-                if (cenEntry.getName().startsWith(\"META-INF\/\")) {\n+                JarEntry cenEntry = jarFile.getJarEntry(entryName);\n+                if (cenEntry == null) {\n+                    crossChkWarnings.add(String.format(rb.getString(\n+                            \"Entry.missing.in.JarFile.1\"), entryName));\n@@ -1194,1 +1162,0 @@\n-                \/\/ Read entry for signature verification\n@@ -1196,1 +1163,3 @@\n-                readEntry(jarFile.getInputStream(cenEntry));\n+                try (InputStream cenInputStream = jarFile.getInputStream(cenEntry)) {\n+                    readEntry(cenInputStream);\n+                }\n@@ -1198,1 +1167,0 @@\n-                \/\/ Compare signers\n@@ -1202,6 +1170,3 @@\n-            \/\/ Remaining entries if any\n-            while (cenEntries.hasMoreElements()) {\n-                cenEntrySet.add(cenEntries.nextElement().getName());\n-            }\n-            while ((locEntry = jis.getNextJarEntry()) != null) {\n-                locEntrySet.add(locEntry.getName());\n+            Map<String, Integer> entryMap = new HashMap<>();\n+            for (int i = 0; i < locEntries.size(); i++) {\n+                entryMap.put(locEntries.get(i), i);\n@@ -1210,10 +1175,5 @@\n-            \/\/ Find if an entry is present in LOC but missing in CEN, and vice versa.\n-            if (!cenEntrySet.equals(locEntrySet)) {\n-                System.out.println(rb.getString(\n-                        \"Mismatch.in.number.of.entries.between.CEN.and.LOC\"));\n-\n-                Set<String> cenMissingEntry = new HashSet<>(locEntrySet);\n-                cenMissingEntry.removeAll(cenEntrySet);\n-\n-                Set<String> locMissingEntry = new HashSet<>(cenEntrySet);\n-                locMissingEntry.removeAll(locEntrySet);\n+            cenEntries = jarFile.stream()\n+                    .map(JarEntry::getName)\n+                    .sorted(Comparator.comparingInt(\n+                            name -> entryMap.getOrDefault(name, Integer.MAX_VALUE)))\n+                    .collect(Collectors.toList());\n@@ -1221,15 +1181,4 @@\n-                if (!cenMissingEntry.isEmpty()) {\n-                    for (String entry : cenMissingEntry) {\n-                        System.out.println(String.format(rb.getString(\n-                                \"Jar.entry.in.LOC.but.missing.in.CEN.1\"),\n-                                entry));\n-                    }\n-                }\n-\n-                if (!locMissingEntry.isEmpty()) {\n-                    for (String entry : locMissingEntry) {\n-                        System.out.println(String.format(rb.getString(\n-                                \"Jar.entry.in.CEN.but.missing.in.LOC.1\"),\n-                                entry));\n-                    }\n-                }\n+            cenEntries.remove(\"META-INF\/MANIFEST.MF\");\n+            if (!cenEntries.equals(locEntries)) {\n+                crossChkWarnings.add(rb.getString(\n+                        \"Mismatch.in.number.of.entries.between.CEN.and.LOC\"));\n@@ -1240,10 +1189,0 @@\n-    private long calculateEntrySize(JarInputStream jis) throws IOException {\n-        long size = 0;\n-        byte[] buffer = new byte[8192];\n-        int bytesRead;\n-        while ((bytesRead = jis.read(buffer)) != -1) {\n-            size += bytesRead;\n-        }\n-        return size;\n-    }\n-\n@@ -1258,2 +1197,1 @@\n-            System.out.println(rb.getString(\n-                    \"CEN.manifest.is.missing\"));\n+            crossChkWarnings.add(rb.getString(\"CEN.manifest.is.missing\"));\n@@ -1263,2 +1201,1 @@\n-            System.out.println(rb.getString(\n-                    \"LOC.manifest.is.missing\"));\n+            crossChkWarnings.add(rb.getString(\"LOC.manifest.is.missing\"));\n@@ -1276,1 +1213,1 @@\n-                System.out.println(String.format(\n+                crossChkWarnings.add(String.format(\n@@ -1281,1 +1218,1 @@\n-                System.out.println(String.format(\n+                crossChkWarnings.add(String.format(\n@@ -1311,1 +1248,2 @@\n-                System.out.printf(rb.getString(\"Signature.mismatch.for.entry.1\"), cenEntry.getName());\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"Signature.mismatch.for.entry.1\"), cenEntry.getName()));\n@@ -1542,0 +1480,4 @@\n+            if (!crossChkWarnings.isEmpty()) {\n+                System.out.println();\n+                crossChkWarnings.forEach(System.out::println);\n+            }\n@@ -1543,1 +1485,1 @@\n-            if (!errors.isEmpty() || !warnings.isEmpty()) {\n+            if (!errors.isEmpty() || !warnings.isEmpty() || !crossChkWarnings.isEmpty()) {\n@@ -1548,0 +1490,1 @@\n+                crossChkWarnings.forEach(System.out::println);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":39,"deletions":96,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -327,6 +327,0 @@\n-        {\"Jar.entry.in.CEN.but.missing.in.LOC.1\",\n-                \"Jar entries in CEN but missing in LOC: %s\"},\n-        {\"Jar.entry.in.LOC.but.missing.in.CEN.1\",\n-                \"Jar entries in LOC but missing in CEN: %s\"},\n-        {\"Size.mismatch.for.jar.entry.1\",\n-                \"Size mismatch for Jar entry: %s\"},\n@@ -343,4 +337,2 @@\n-        {\"First.entry.in.CEN.is.not.MANIFEST.MF\",\n-                \"First entry in CEN is not MANIFEST.MF\"},\n-        {\"The.order.of.entries.in.CEN.and.LOC.does.not.match\",\n-                \"The order of entries in CEN and LOC does not match\"},\n+        {\"Entry.missing.in.JarFile.1\",\n+                \"Entry missing in JarFile: %s\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8339280\n- * @summary Test jarsigner -verify on a jar with an entry which size is > 64k,\n- *     so its size (or csize) is stored in the extra field and\/or data descriptor.\n- * @library \/test\/lib\n- * @run main VerifyCompressedLargeFile\n- *\/\n-\n-import java.nio.file.Path;\n-import jdk.test.lib.SecurityTools;\n-\n-public class VerifyCompressedLargeFile {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/**\n-         * largefile.zip created by:\n-         * - dd if=\/dev\/zero bs=1K count=100 of=largefile.txt\n-         * - zip -fz largefile.zip largefile.txt\n-         *\/\n-        String largeZip = Path.of(System.getProperty(\"test.src\"), \"largefile.zip\").toString();\n-\n-        SecurityTools.keytool(\"-genkeypair -keystore ks -storepass changeit \" +\n-                        \"-keyalg rsa -alias mykey -dname CN=me\")\n-                .shouldHaveExitValue(0);\n-\n-        SecurityTools.jarsigner(\"-keystore ks -storepass changeit -digestalg SHA256 \" +\n-                        largeZip + \" mykey\")\n-                .shouldHaveExitValue(0);\n-\n-        SecurityTools.jarsigner(\"-verify -verbose \" + largeZip)\n-                .shouldMatch(\"102400 .*largefile.txt\")\n-                .shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyCompressedLargeFile.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/largefile.zip","binary":true,"status":"deleted"}]}