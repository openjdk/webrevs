{"files":[{"patch":"@@ -30,0 +30,1 @@\n+ * @run junit VerifyJarEntryName\n@@ -32,1 +33,4 @@\n-import java.io.ByteArrayOutputStream;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.FileOutputStream;\n@@ -42,0 +46,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,3 +50,7 @@\n-    public static void main(String[] args) throws Exception {\n-        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n-        try (ZipOutputStream zos = new ZipOutputStream(out)) {\n+    private static final Path JAR_PATH = Path.of(\"test.jar\");\n+    private static final Path JAR_PATH1 = Path.of(\"test1.jar\");\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(JAR_PATH.toFile());\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n@@ -53,4 +62,0 @@\n-        var template = out.toByteArray();\n-        Path jarPath = Path.of(\"test.jar\");\n-        Files.write(jarPath, template);\n-\n@@ -64,2 +69,2 @@\n-        Path jarPath1 = Path.of(\"test1.jar\");\n-        Files.copy(jarPath, jarPath1, StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(JAR_PATH, JAR_PATH1, StandardCopyOption.REPLACE_EXISTING);\n+    }\n@@ -67,3 +72,8 @@\n-        \/\/ Modify a single byte in \"MANIFEST.MF\" filename in LOC\n-        byte[] signedJar = Files.readAllBytes(jarPath);\n-        var jarS = new String(signedJar, StandardCharsets.ISO_8859_1);\n+    \/*\n+     * Modify a single byte in \"MANIFEST.MF\" filename in LOC, and\n+     * validate that jarsigner -verify emits a warning message.\n+     *\/\n+    @Test\n+    void verifyManifestEntryName() throws Exception {\n+        byte[] signedJar = Files.readAllBytes(JAR_PATH);\n+        var jarS = new String(signedJar, StandardCharsets.UTF_8);\n@@ -72,4 +82,3 @@\n-        if (manifestPos != -1) {\n-            signedJar[manifestPos] = 'X';\n-        }\n-        Files.write(jarPath, signedJar);\n+        assertTrue(manifestPos != -1, \"Manifest entry is not present\");\n+        signedJar[manifestPos] = 'X';\n+        Files.write(JAR_PATH, signedJar);\n@@ -80,0 +89,1 @@\n+    }\n@@ -81,3 +91,8 @@\n-        \/\/ Modify a single byte in \"MYKEY.SF\" filename in LOC\n-        byte[] signedJar1 = Files.readAllBytes(jarPath1);\n-        var jarS1 = new String(signedJar1, StandardCharsets.ISO_8859_1);\n+    \/*\n+     * Modify a single byte in signature filename in LOC, and\n+     * validate that jarsigner -verify emits a warning message.\n+     *\/\n+    @Test\n+    void verifySignatureEntryName() throws Exception {\n+        byte[] signedJar1 = Files.readAllBytes(JAR_PATH1);\n+        var jarS1 = new String(signedJar1, StandardCharsets.UTF_8);\n@@ -86,4 +101,3 @@\n-        if (sfPos != -1) {\n-            signedJar1[sfPos] = 'X';\n-        }\n-        Files.write(jarPath1, signedJar1);\n+        assertTrue(sfPos != -1, \"Signature file is not present\");\n+        signedJar1[sfPos] = 'X';\n+        Files.write(JAR_PATH1, signedJar1);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"}]}