{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -40,1 +41,0 @@\n-import java.nio.file.StandardCopyOption;\n@@ -50,2 +50,2 @@\n-    private static final Path JAR_PATH = Path.of(\"test.jar\");\n-    private static final Path JAR_PATH1 = Path.of(\"test1.jar\");\n+    private static final Path ORIGINAL_JAR = Path.of(\"test.jar\");\n+    private static final Path MODIFIED_JAR = Path.of(\"modified_test.jar\");\n@@ -55,1 +55,1 @@\n-        try (FileOutputStream fos = new FileOutputStream(JAR_PATH.toFile());\n+        try (FileOutputStream fos = new FileOutputStream(ORIGINAL_JAR.toFile());\n@@ -66,1 +66,1 @@\n-                        + \"test.jar mykey\")\n+                        + ORIGINAL_JAR + \" mykey\")\n@@ -68,0 +68,1 @@\n+    }\n@@ -69,1 +70,3 @@\n-        Files.copy(JAR_PATH, JAR_PATH1, StandardCopyOption.REPLACE_EXISTING);\n+    @BeforeEach\n+    void cleanup() throws Exception {\n+        Files.deleteIfExists(MODIFIED_JAR);\n@@ -78,9 +81,2 @@\n-        byte[] signedJar = Files.readAllBytes(JAR_PATH);\n-        var jarS = new String(signedJar, StandardCharsets.UTF_8);\n-\n-        var manifestPos = jarS.indexOf(\"MANIFEST.MF\");\n-        assertTrue(manifestPos != -1, \"Manifest entry is not present\");\n-        signedJar[manifestPos] = 'X';\n-        Files.write(JAR_PATH, signedJar);\n-\n-        SecurityTools.jarsigner(\"-verify -verbose test.jar\")\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"MANIFEST.MF\");\n+        SecurityTools.jarsigner(\"-verify -verbose \" + MODIFIED_JAR)\n@@ -97,9 +93,2 @@\n-        byte[] signedJar1 = Files.readAllBytes(JAR_PATH1);\n-        var jarS1 = new String(signedJar1, StandardCharsets.UTF_8);\n-\n-        var sfPos = jarS1.indexOf(\"MYKEY.SF\");\n-        assertTrue(sfPos != -1, \"Signature file is not present\");\n-        signedJar1[sfPos] = 'X';\n-        Files.write(JAR_PATH1, signedJar1);\n-\n-        SecurityTools.jarsigner(\"-verify -verbose test1.jar\")\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"MYKEY.SF\");\n+        SecurityTools.jarsigner(\"-verify -verbose \" + MODIFIED_JAR)\n@@ -109,0 +98,17 @@\n+\n+    @Test\n+    void verifyOriginalJar() throws Exception {\n+        SecurityTools.jarsigner(\"-verify -verbose \" + ORIGINAL_JAR)\n+                .shouldNotContain(\"Manifest is missing when reading via JarInputStream\")\n+                .shouldNotContain(\"Entries mismatch when comparing JarFile and JarInputStream\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private void modifyJarEntryName(Path origJar, Path modifiedJar, String entryName) throws Exception {\n+        byte[] jarBytes = Files.readAllBytes(origJar);\n+        var jarString = new String(jarBytes, StandardCharsets.UTF_8);\n+        var pos = jarString.indexOf(entryName);\n+        assertTrue(pos != -1, entryName + \" is not present in the JAR\");\n+        jarBytes[pos] = 'X';\n+        Files.write(modifiedJar, jarBytes);\n+    }\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":30,"deletions":24,"binary":false,"changes":54,"status":"modified"}]}