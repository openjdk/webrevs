{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -244,0 +246,2 @@\n+    private List<String> crossChkWarnings = new ArrayList<>();\n+\n@@ -1105,0 +1109,1 @@\n+            crossCheckEntries(jarName);\n@@ -1131,0 +1136,113 @@\n+    private void crossCheckEntries(String jarName) throws Exception {\n+        List<String> locEntries = new ArrayList<>();\n+        List<String> cenEntries;\n+\n+        try (JarFile jarFile = new JarFile(jarName);\n+             JarInputStream jis = new JarInputStream(\n+                     Files.newInputStream(Path.of(jarName)))) {\n+\n+            Manifest cenManifest = jarFile.getManifest();\n+            Manifest locManifest = jis.getManifest();\n+            if (!compareManifest(cenManifest, locManifest)) {\n+                return;\n+            }\n+\n+            JarEntry locEntry;\n+            while ((locEntry = jis.getNextJarEntry()) != null) {\n+                String entryName = locEntry.getName();\n+                locEntries.add(entryName);\n+\n+                JarEntry cenEntry = jarFile.getJarEntry(entryName);\n+                if (cenEntry == null) {\n+                    crossChkWarnings.add(String.format(rb.getString(\n+                            \"Entry.missing.in.JarFile.1\"), entryName));\n+                    continue;\n+                }\n+\n+                readEntry(jis);\n+                try (InputStream cenInputStream = jarFile.getInputStream(cenEntry)) {\n+                    readEntry(cenInputStream);\n+                }\n+\n+                compareSigners(cenEntry, locEntry);\n+            }\n+\n+            cenEntries = jarFile.stream()\n+                    .map(JarEntry::getName)\n+                    .collect(Collectors.toList());\n+\n+            var cenEntries2 = cenEntries.getFirst().equals(JarFile.MANIFEST_NAME)\n+                    ? cenEntries.subList(1, cenEntries.size()) : cenEntries;\n+\n+            if (!cenEntries2.equals(locEntries)) {\n+                crossChkWarnings.add(rb.getString(\n+                        \"Mismatch.in.entries.between.CEN.and.LOC\"));\n+            }\n+        }\n+    }\n+\n+    private void readEntry(InputStream is) throws IOException {\n+        byte[] buffer = new byte[8192];\n+        while (is.read(buffer) != -1) {\n+        }\n+    }\n+\n+    private boolean compareManifest(Manifest cenManifest, Manifest locManifest) {\n+        if (cenManifest == null) {\n+            crossChkWarnings.add(rb.getString(\"CEN.manifest.is.missing\"));\n+            return false;\n+        }\n+        if (locManifest == null) {\n+            crossChkWarnings.add(rb.getString(\"LOC.manifest.is.missing\"));\n+            return false;\n+        }\n+\n+        Attributes cenMainAttrs = cenManifest.getMainAttributes();\n+        Attributes locMainAttrs = locManifest.getMainAttributes();\n+\n+        for (Object key : cenMainAttrs.keySet()) {\n+            Object cenValue = cenMainAttrs.get(key);\n+            Object locValue = locMainAttrs.get(key);\n+\n+            if (locValue == null) {\n+                crossChkWarnings.add(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.CEN.but.missing.in.LOC\"),\n+                        key));\n+                return false;\n+            } else if (!cenValue.equals(locValue)) {\n+                crossChkWarnings.add(String.format(\n+                        rb.getString(\"main.atrribute.key.1.mismatch.CEN.2.LOC.3\"),\n+                        key, cenValue, locValue));\n+                return false;\n+            }\n+        }\n+\n+        for (Object key : locMainAttrs.keySet()) {\n+            if (!cenMainAttrs.containsKey(key)) {\n+                System.out.println(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.LOC.but.missing.in.CEN\"),\n+                        key));\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void compareSigners(JarEntry cenEntry, JarEntry locEntry) {\n+        CodeSigner[] cenSigners = cenEntry.getCodeSigners();\n+        CodeSigner[] locSigners = locEntry.getCodeSigners();\n+\n+        boolean cenHasSigners = cenSigners != null;\n+        boolean locHasSigners = locSigners != null;\n+\n+        if (cenHasSigners && locHasSigners) {\n+            List<CodeSigner> cenSignerList = Arrays.asList(cenSigners);\n+            List<CodeSigner> locSignerList = Arrays.asList(locSigners);\n+\n+            if (!cenSignerList.equals(locSignerList)) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"Signature.mismatch.for.entry.1\"), cenEntry.getName()));\n+            }\n+        }\n+    }\n+\n@@ -1357,0 +1475,4 @@\n+            if (!crossChkWarnings.isEmpty()) {\n+                System.out.println();\n+                crossChkWarnings.forEach(System.out::println);\n+            }\n@@ -1358,1 +1480,1 @@\n-            if (!errors.isEmpty() || !warnings.isEmpty()) {\n+            if (!errors.isEmpty() || !warnings.isEmpty() || !crossChkWarnings.isEmpty()) {\n@@ -1363,0 +1485,1 @@\n+                crossChkWarnings.forEach(System.out::println);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":124,"deletions":1,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -210,0 +210,8 @@\n+CEN.manifest.is.missing=CEN manifest is missing\n+LOC.manifest.is.missing=LOC manifest is missing\n+main.attribute.key.1.in.CEN.but.missing.in.LOC=Main attribute key %s in CEN but missing in LOC\n+main.attribute.key.1.in.LOC.but.missing.in.CEN=Main attribute key %s in LOC but missing in CEN\n+main.atrribute.key.1.mismatch.CEN.2.LOC.3=Main attribute key %1$s mismatch: CEN= %2$s and LOC= %3$s\n+Entry.missing.in.JarFile.1=Entry missing in JarFile: %s\n+Signature.mismatch.for.entry.1=Signature mismatch between CEN and LOC for entry = %s\n+Mismatch.in.entries.between.CEN.and.LOC=Mismatch in entries between CEN and LOC\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/resources\/jarsigner.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8339280\n+ * @summary Test that jarsigner -verify emits a warning when the filename of\n+ *     an entry in the LOC is changed\n+ * @library \/test\/lib\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import jdk.test.lib.SecurityTools;\n+\n+public class VerifyJarEntryName {\n+\n+    public static void main(String[] args) throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n+        try (ZipOutputStream zos = new ZipOutputStream(out)) {\n+            zos.putNextEntry(new ZipEntry(JarFile.MANIFEST_NAME));\n+            zos.write(\"Manifest-Version: 1.0\\nCreated-By: Test\\n\".getBytes(StandardCharsets.UTF_8));\n+            zos.closeEntry();\n+        }\n+\n+        var template = out.toByteArray();\n+        Path jarPath = Path.of(\"test.jar\");\n+        Files.write(jarPath, template);\n+\n+        SecurityTools.keytool(\"-genkeypair -keystore ks -storepass changeit \"\n+                + \"-alias mykey -keyalg rsa -dname CN=me \");\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \"\n+                        + \"test.jar mykey\")\n+                .shouldHaveExitValue(0);\n+\n+        Path jarPath1 = Path.of(\"test1.jar\");\n+        Files.copy(jarPath, jarPath1, StandardCopyOption.REPLACE_EXISTING);\n+\n+        \/\/ Modify a single byte in \"MANIFEST.MF\" filename in LOC\n+        byte[] signedJar = Files.readAllBytes(jarPath);\n+        var jarS = new String(signedJar, StandardCharsets.ISO_8859_1);\n+\n+        var manifestPos = jarS.indexOf(\"MANIFEST.MF\");\n+        if (manifestPos != -1) {\n+            signedJar[manifestPos] = 'X';\n+        }\n+        Files.write(jarPath, signedJar);\n+\n+        SecurityTools.jarsigner(\"-verify -verbose test.jar\")\n+                .shouldContain(\"LOC manifest is missing\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ Modify a single byte in \"MYKEY.SF\" filename in LOC\n+        byte[] signedJar1 = Files.readAllBytes(jarPath1);\n+        var jarS1 = new String(signedJar1, StandardCharsets.ISO_8859_1);\n+\n+        var sfPos = jarS1.indexOf(\"MYKEY.SF\");\n+        if (sfPos != -1) {\n+            signedJar1[sfPos] = 'X';\n+        }\n+        Files.write(jarPath1, signedJar1);\n+\n+        SecurityTools.jarsigner(\"-verify -verbose test1.jar\")\n+                .shouldContain(\"Mismatch in entries between CEN and LOC\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}