{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -244,0 +246,2 @@\n+    private List<String> crossChkWarnings = new ArrayList<>();\n+\n@@ -1105,0 +1109,1 @@\n+            crossCheckEntries(jarName);\n@@ -1131,0 +1136,118 @@\n+    private void crossCheckEntries(String jarName) throws Exception {\n+        List<String> locEntries = new ArrayList<>();\n+        List<String> cenEntries;\n+\n+        try (JarFile jarFile = new JarFile(jarName);\n+             JarInputStream jis = new JarInputStream(\n+                     Files.newInputStream(Path.of(jarName)))) {\n+\n+            Manifest cenManifest = jarFile.getManifest();\n+            Manifest locManifest = jis.getManifest();\n+            if (!compareManifest(cenManifest, locManifest)) {\n+                return;\n+            }\n+\n+            JarEntry locEntry;\n+            while ((locEntry = jis.getNextJarEntry()) != null) {\n+                String entryName = locEntry.getName();\n+                locEntries.add(entryName);\n+\n+                JarEntry cenEntry = jarFile.getJarEntry(entryName);\n+                if (cenEntry == null) {\n+                    crossChkWarnings.add(String.format(rb.getString(\n+                            \"Entry.missing.in.JarFile.1\"), entryName));\n+                    continue;\n+                }\n+\n+                readEntry(jis);\n+                try (InputStream cenInputStream = jarFile.getInputStream(cenEntry)) {\n+                    readEntry(cenInputStream);\n+                }\n+\n+                compareSigners(cenEntry, locEntry);\n+            }\n+\n+            Map<String, Integer> entryMap = new HashMap<>();\n+            for (int i = 0; i < locEntries.size(); i++) {\n+                entryMap.put(locEntries.get(i), i);\n+            }\n+\n+            cenEntries = jarFile.stream()\n+                    .map(JarEntry::getName)\n+                    .sorted(Comparator.comparingInt(\n+                            name -> entryMap.getOrDefault(name, Integer.MAX_VALUE)))\n+                    .collect(Collectors.toList());\n+\n+            cenEntries.remove(\"META-INF\/MANIFEST.MF\");\n+            if (!cenEntries.equals(locEntries)) {\n+                crossChkWarnings.add(rb.getString(\n+                        \"Mismatch.in.number.of.entries.between.CEN.and.LOC\"));\n+            }\n+        }\n+    }\n+\n+    private void readEntry(InputStream is) throws IOException {\n+        byte[] buffer = new byte[8192];\n+        while (is.read(buffer) != -1) {\n+        }\n+    }\n+\n+    private boolean compareManifest(Manifest cenManifest, Manifest locManifest) {\n+        if (cenManifest == null) {\n+            crossChkWarnings.add(rb.getString(\"CEN.manifest.is.missing\"));\n+            return false;\n+        }\n+        if (locManifest == null) {\n+            crossChkWarnings.add(rb.getString(\"LOC.manifest.is.missing\"));\n+            return false;\n+        }\n+\n+        Attributes cenMainAttrs = cenManifest.getMainAttributes();\n+        Attributes locMainAttrs = locManifest.getMainAttributes();\n+\n+        for (Object key : cenMainAttrs.keySet()) {\n+            Object cenValue = cenMainAttrs.get(key);\n+            Object locValue = locMainAttrs.get(key);\n+\n+            if (locValue == null) {\n+                crossChkWarnings.add(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.CEN.but.missing.in.LOC\"),\n+                        key));\n+                return false;\n+            } else if (!cenValue.equals(locValue)) {\n+                crossChkWarnings.add(String.format(\n+                        rb.getString(\"main.atrribute.key.1.mismatch.CEN.2.LOC.3\"),\n+                        key, cenValue, locValue));\n+                return false;\n+            }\n+        }\n+\n+        for (Object key : locMainAttrs.keySet()) {\n+            if (!cenMainAttrs.containsKey(key)) {\n+                System.out.println(String.format(\n+                        rb.getString(\"main.attribute.key.1.in.LOC.but.missing.in.CEN\"),\n+                        key));\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void compareSigners(JarEntry cenEntry, JarEntry locEntry) {\n+        CodeSigner[] cenSigners = cenEntry.getCodeSigners();\n+        CodeSigner[] locSigners = locEntry.getCodeSigners();\n+\n+        boolean cenHasSigners = cenSigners != null;\n+        boolean locHasSigners = locSigners != null;\n+\n+        if (cenHasSigners && locHasSigners) {\n+            List<CodeSigner> cenSignerList = Arrays.asList(cenSigners);\n+            List<CodeSigner> locSignerList = Arrays.asList(locSigners);\n+\n+            if (!cenSignerList.equals(locSignerList)) {\n+                crossChkWarnings.add(String.format(rb.getString(\n+                        \"Signature.mismatch.for.entry.1\"), cenEntry.getName()));\n+            }\n+        }\n+    }\n+\n@@ -1357,0 +1480,4 @@\n+            if (!crossChkWarnings.isEmpty()) {\n+                System.out.println();\n+                crossChkWarnings.forEach(System.out::println);\n+            }\n@@ -1358,1 +1485,1 @@\n-            if (!errors.isEmpty() || !warnings.isEmpty()) {\n+            if (!errors.isEmpty() || !warnings.isEmpty() || !crossChkWarnings.isEmpty()) {\n@@ -1363,0 +1490,1 @@\n+                crossChkWarnings.forEach(System.out::println);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":129,"deletions":1,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -327,0 +327,16 @@\n+        {\"CEN.manifest.is.missing\",\n+                \"CEN manifest is missing\"},\n+        {\"LOC.manifest.is.missing\",\n+                \"LOC manifest is missing\"},\n+        {\"main.attribute.key.1.in.CEN.but.missing.in.LOC\",\n+                \"Main attribute key %s in CEN but missing in LOC\"},\n+        {\"main.attribute.key.1.in.LOC.but.missing.in.CEN\",\n+                \"Main attribute key %s in LOC but missing in CEN\"},\n+        {\"main.atrribute.key.1.mismatch.CEN.2.LOC.3\",\n+                \"Main attribute key %s mismatch: CEN= %s and LOC= %s\"},\n+        {\"Entry.missing.in.JarFile.1\",\n+                \"Entry missing in JarFile: %s\"},\n+        {\"Signature.mismatch.for.entry.1\",\n+                \"Signature mismatch between CEN and LOC for entry = %s\"},\n+        {\"Mismatch.in.number.of.entries.between.CEN.and.LOC\",\n+                \"Mismatch in number of entries between CEN and LOC\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}