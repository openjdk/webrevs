{"files":[{"patch":"@@ -43,0 +43,5 @@\n+\/\/\/ Modeling private keys generated by a [sun.security.provider.NamedKeyPairGenerator]\n+\/\/\/ or [sun.security.provider.NamedKeyFactory]. Its [#getParams()] method always\n+\/\/\/ returns its name as a [NamedParameterSpec] object.\n+\/\/\/\n+\/\/\/ @see sun.security.provider.NamedKeyPairGenerator\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/NamedPKCS8Key.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n-\/\/\/ An implementation extends this class to create its own `KEM`.\n-\/\/\/\n-\/\/\/ @see NamedKeyPairGenerator\n+\/\/\/ A base class for all `KEM` implementations that can be\n+\/\/\/ configured with a named parameter set. See [NamedKeyPairGenerator]\n+\/\/\/ for more details.\n@@ -157,1 +157,1 @@\n-    public abstract byte[][] implEncapsulate(String name, byte[] pk, Object pk2, SecureRandom sr);\n+    protected abstract byte[][] implEncapsulate(String name, byte[] pk, Object pk2, SecureRandom sr);\n@@ -168,1 +168,1 @@\n-    public abstract byte[] implDecapsulate(String name, byte[] sk, Object sk2, byte[] encap)\n+    protected abstract byte[] implDecapsulate(String name, byte[] sk, Object sk2, byte[] encap)\n@@ -176,1 +176,1 @@\n-    public abstract int implSecretSize(String name);\n+    protected abstract int implSecretSize(String name);\n@@ -183,1 +183,1 @@\n-    public abstract int implEncapsulationSize(String name);\n+    protected abstract int implEncapsulationSize(String name);\n@@ -198,1 +198,1 @@\n-    public Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n+    protected Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n@@ -215,1 +215,1 @@\n-    public Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n+    protected Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKEM.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -47,1 +47,3 @@\n-\/\/\/ An implementation extends this class to create its own `KeyFactory`.\n+\/\/\/ A base class for all `KeyFactory` implementations that can be\n+\/\/\/ configured with a named parameter set. See [NamedKeyPairGenerator]\n+\/\/\/ for more details.\n@@ -49,1 +51,1 @@\n-\/\/\/ Bonus: This factory supports reading and writing to RAW formats:\n+\/\/\/ This factory supports reading and writing to RAW formats:\n@@ -59,2 +61,0 @@\n-\/\/\/\n-\/\/\/ @see NamedKeyPairGenerator\n@@ -243,1 +243,1 @@\n-                \/\/ Three case that we can find the parameter set name from a RAW key:\n+                \/\/ Three cases that we can find the parameter set name from a RAW key:\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-\/\/\/ An implementation extends this class to create its own `KeyPairGenerator`.\n+\/\/\/ A base class for all `KeyPairGenerator` implementations that can be\n+\/\/\/ configured with a named parameter set.\n@@ -43,5 +44,17 @@\n-\/\/\/ An implementation must include a zero-argument public constructor that calls\n-\/\/\/ `super(fname, pnames)`, where `fname` is the family name of the algorithm and\n-\/\/\/ `pnames` are the supported parameter set names. `pnames` must contain at least\n-\/\/\/ one element and the first element is the default parameter set name,\n-\/\/\/ i.e. the parameter set to be used in key pair generation unless\n+\/\/\/ Together with [NamedKeyFactory], [NamedKEM], and [NamedSignature], these\n+\/\/\/ classes form a compact framework designed to support any public key\n+\/\/\/ algorithm standardized with named parameter sets. In this scenario,\n+\/\/\/ the algorithm name is the \"family name\" and each standardized parameter\n+\/\/\/ set has a \"parameter set name\". Implementations of these classes are able\n+\/\/\/ to instantiate a `KeyPairGenerator`, `KeyFactory`, or `KEM` or `Signature`\n+\/\/\/ object using either the family name or a parameter set name. All keys used\n+\/\/\/ in this context will be of the type [NamedPKCS8Key] or [NamedX509Key],\n+\/\/\/ with `getAlgorithm` returning the family name, and `getParams` returning\n+\/\/\/ the parameter set name as a [NamedParameterSpec] object.\n+\/\/\/\n+\/\/\/ An implementation must include a zero-argument public constructor that\n+\/\/\/ calls `super(fname, pnames)`, where `fname` is the family name of the\n+\/\/\/ algorithm and `pnames` are its supported parameter set names. `pnames`\n+\/\/\/ must contain at least one element. For an implementation of\n+\/\/\/ `NamedKeyPairGenerator`, the first element becomes its default parameter\n+\/\/\/ set, i.e. the parameter set to be used in key pair generation unless\n@@ -49,3 +62,1 @@\n-\/\/\/ is called to choose a specific parameter set. This requirement also applies\n-\/\/\/ to implementations of [NamedKeyFactory], [NamedKEM], and [NamedSignature],\n-\/\/\/ although there is no default parameter set concept for these classes.\n+\/\/\/ is called on a different parameter set.\n@@ -60,2 +71,1 @@\n-\/\/\/ make any defensive copy on the input and output arrays. This requirement\n-\/\/\/ also applies to abstract methods defined in [NamedKEM] and [NamedSignature].\n+\/\/\/ make any defensive copy on the input and output arrays.\n@@ -66,3 +76,4 @@\n-\/\/\/ a copy of the input private key. A `KEM` implementation also must\n-\/\/\/ not keep a copy of the shared secret key, no matter if it's an\n-\/\/\/ encapsulator or a decapsulator.\n+\/\/\/ a copy of the input private key. A `KEM` implementation also must not\n+\/\/\/ keep a copy of the shared secret key, no matter if it's an encapsulator\n+\/\/\/ or a decapsulator. Only the code that owns these sensitive data can\n+\/\/\/ choose to perform cleanup when it determines they are no longer needed.\n@@ -72,1 +83,1 @@\n-\/\/\/ a key before using it. An implementation may return a parsed key of\n+\/\/\/ a key before using it. An implementation may return a parsed key in\n@@ -81,1 +92,1 @@\n-    protected String name = null; \/\/ init as\n+    protected String name; \/\/ init as\n@@ -117,1 +128,1 @@\n-        this.secureRandom = random ;\n+        this.secureRandom = random;\n@@ -123,2 +134,2 @@\n-            \/\/ Bonus: a chance to provide a SecureRandom without\n-            \/\/ specifying a parameter set name\n+            \/\/ User can call initialize(-1, sr) to provide a SecureRandom\n+            \/\/ without touching the parameter set currently used\n@@ -144,1 +155,1 @@\n-    public abstract byte[][] implGenerateKeyPair(String pname, SecureRandom sr);\n+    protected abstract byte[][] implGenerateKeyPair(String pname, SecureRandom sr);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyPairGenerator.java","additions":31,"deletions":20,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-\/\/\/ An implementation extends this class to create its own `Signature`.\n+\/\/\/ A base class for all `Signature` implementations that can be\n+\/\/\/ configured with a named parameter set. See [NamedKeyPairGenerator]\n+\/\/\/ for more details.\n@@ -48,2 +50,0 @@\n-\/\/\/\n-\/\/\/ @see NamedKeyPairGenerator\n@@ -169,1 +169,1 @@\n-    public abstract byte[] implSign(String name, byte[] sk, Object sk2,\n+    protected abstract byte[] implSign(String name, byte[] sk, Object sk2,\n@@ -182,1 +182,1 @@\n-    public abstract boolean implVerify(String name, byte[] pk, Object pk2,\n+    protected abstract boolean implVerify(String name, byte[] pk, Object pk2,\n@@ -198,1 +198,1 @@\n-    public Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n+    protected Object implCheckPublicKey(String name, byte[] pk) throws InvalidKeyException {\n@@ -215,1 +215,1 @@\n-    public Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n+    protected Object implCheckPrivateKey(String name, byte[] sk) throws InvalidKeyException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedSignature.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,0 +40,5 @@\n+\/\/\/ Modeling public keys generated by a [sun.security.provider.NamedKeyPairGenerator]\n+\/\/\/ or [sun.security.provider.NamedKeyFactory]. Its [#getParams()] method always\n+\/\/\/ returns its name as a [NamedParameterSpec] object.\n+\/\/\/\n+\/\/\/ @see sun.security.provider.NamedKeyPairGenerator\n@@ -67,1 +72,1 @@\n-        paramSpec = new NamedParameterSpec(algid.getName());\n+        this.paramSpec = new NamedParameterSpec(algid.getName());\n@@ -71,1 +76,1 @@\n-        h = getKey().toByteArray();\n+        this.h = getKey().toByteArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NamedX509Key.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}