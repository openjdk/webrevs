{"files":[{"patch":"@@ -49,6 +49,10 @@\n-\/\/\/ Bonus: This factory can read from a RAW key using `translateKey`\n-\/\/\/ if `key.getFormat` is \"RAW\", and write to a RAW `EncodedKeySpec`\n-\/\/\/ using `getKeySpec(key, EncodedKeySpec.class)`. The algorithm of\n-\/\/\/ this `EncodedKeySpec` is intentionally left unspecified, since\n-\/\/\/ family name does not include enough information, and we don't use\n-\/\/\/ parameter set names as key algorithm names.\n+\/\/\/ Bonus: This factory supports reading and writing to RAW formats:\n+\/\/\/\n+\/\/\/ 1. It reads from a RAW key using `translateKey` if `key.getFormat` is \"RAW\".\n+\/\/\/ 2. It writes to a RAW [EncodedKeySpec] if `getKeySpec(key, EncodedKeySpec.class)`\n+\/\/\/    is called. The format of the output is \"RAW\" and the algorithm is\n+\/\/\/    intentionally left unspecified.\n+\/\/\/ 3. It reads from and writes to the internal type [RawKeySpec].\n+\/\/\/\n+\/\/\/ When reading from a RAW format, it needs enough info to derive the\n+\/\/\/ parameter set name.\n@@ -93,0 +97,13 @@\n+        } else if (keySpec instanceof RawKeySpec rks) {\n+            if (pnames.length == 1) {\n+                return new NamedX509Key(fname, pnames[0], rks.getKeyArr());\n+            } else {\n+                throw new InvalidKeySpecException(\"Parameter set name unavailable\");\n+            }\n+        } else if (keySpec instanceof EncodedKeySpec espec\n+                && espec.getFormat().equalsIgnoreCase(\"RAW\")) {\n+            if (pnames.length == 1) {\n+                return new NamedX509Key(fname, pnames[0], espec.getEncoded());\n+            } else {\n+                throw new InvalidKeySpecException(\"Parameter set name unavailable\");\n+            }\n@@ -108,1 +125,24 @@\n-                Arrays.fill(bytes, (byte)0);\n+                Arrays.fill(bytes, (byte) 0);\n+            }\n+        } else if (keySpec instanceof RawKeySpec rks) {\n+            if (pnames.length == 1) {\n+                var bytes = rks.getKeyArr();\n+                try {\n+                    return new NamedPKCS8Key(fname, pnames[0], bytes);\n+                } finally {\n+                    Arrays.fill(bytes, (byte) 0);\n+                }\n+            } else {\n+                throw new InvalidKeySpecException(\"Parameter set name unavailable\");\n+            }\n+        } else if (keySpec instanceof EncodedKeySpec espec\n+                && espec.getFormat().equalsIgnoreCase(\"RAW\")) {\n+            if (pnames.length == 1) {\n+                var bytes = espec.getEncoded();\n+                try {\n+                    return new NamedPKCS8Key(fname, pnames[0], bytes);\n+                } finally {\n+                    Arrays.fill(bytes, (byte) 0);\n+                }\n+            } else {\n+                throw new InvalidKeySpecException(\"Parameter set name unavailable\");\n@@ -156,1 +196,1 @@\n-                    return keySpec.cast(new RawKeySpec(bytes = nk.getRawBytes()));\n+                    return keySpec.cast(new RawKeySpec(nk.getRawBytes()));\n@@ -159,1 +199,3 @@\n-                            new RawEncodedKeySpec(bytes = nk.getRawBytes()));\n+                            new RawEncodedKeySpec(nk.getRawBytes()));\n+                } else {\n+                    throw new InvalidKeySpecException(\"Unsupported type: \" + keySpec);\n@@ -174,0 +216,2 @@\n+            } else {\n+                throw new InvalidKeySpecException(\"Unsupported type: \" + keySpec);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyFactory.java","additions":53,"deletions":9,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *          java.base\/sun.security.pkcs\n@@ -34,0 +35,2 @@\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.pkcs.NamedPKCS8Key;\n@@ -40,4 +43,1 @@\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.EncodedKeySpec;\n-import java.security.spec.NamedParameterSpec;\n-import java.security.spec.X509EncodedKeySpec;\n+import java.security.spec.*;\n@@ -46,0 +46,3 @@\n+\n+    private static final SeededSecureRandom RAND = SeededSecureRandom.one();\n+\n@@ -49,1 +52,3 @@\n-        var k = new NamedX509Key(\"sHa\", \"SHA-256\", new byte[2]);\n+        var g = KeyPairGenerator.getInstance(\"sHA\");\n+        var g2 = KeyPairGenerator.getInstance(\"ShA-256\");\n+        var g5 = KeyPairGenerator.getInstance(\"SHa-512\");\n@@ -51,0 +56,24 @@\n+        var kf2 = KeyFactory.getInstance(\"Sha-256\");\n+        var kf5 = KeyFactory.getInstance(\"Sha-512\");\n+\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n+\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n+\n+        Utils.runAndCheckException(() -> g.initialize(NamedParameterSpec.ED448),\n+                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n+        Utils.runAndCheckException(() -> g.initialize(new NamedParameterSpec(\"SHA-384\")),\n+                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n+\n+        Utils.runAndCheckException(() -> g5.initialize(new NamedParameterSpec(\"SHA-256\")),\n+                InvalidAlgorithmParameterException.class); \/\/ diff pname\n+        g5.initialize(new NamedParameterSpec(\"SHA-512\"));\n+\n+        g.initialize(new NamedParameterSpec(\"sHA-512\"));\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-512\");\n+        g.initialize(new NamedParameterSpec(\"ShA-256\"));\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n@@ -52,3 +81,4 @@\n-        Asserts.assertTrue(k.getAlgorithm().equalsIgnoreCase(\"SHA\"));\n-        Asserts.assertEquals(k.getFormat(), \"X.509\");\n-        Asserts.assertEquals(k.getParams().getName(), \"SHA-256\");\n+        var pk = new NamedX509Key(\"sHa\", \"ShA-256\", RAND.nBytes(2));\n+        var sk = new NamedPKCS8Key(\"sHa\", \"SHa-256\", RAND.nBytes(2));\n+        checkKey(pk, \"sHa\", \"ShA-256\");\n+        checkKey(sk, \"sHa\", \"SHa-256\");\n@@ -56,2 +86,32 @@\n-        var spec = kf.getKeySpec(k, X509EncodedKeySpec.class);\n-        Asserts.assertEquals(kf.generatePublic(spec).getAlgorithm(), \"SHA\");\n+        Asserts.assertEquals(\"X.509\", pk.getFormat());\n+        Asserts.assertEquals(\"PKCS#8\", sk.getFormat());\n+\n+        var pkSpec = kf.getKeySpec(pk, X509EncodedKeySpec.class);\n+        var skSpec = kf.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n+\n+        kf2.getKeySpec(pk, X509EncodedKeySpec.class);\n+        kf2.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n+        Utils.runAndCheckException(() -> kf5.getKeySpec(pk, X509EncodedKeySpec.class),\n+                InvalidKeySpecException.class); \/\/ wrong KF\n+        Utils.runAndCheckException(() -> kf5.getKeySpec(sk, PKCS8EncodedKeySpec.class),\n+                InvalidKeySpecException.class);\n+        Utils.runAndCheckException(() -> kf.getKeySpec(pk, PKCS8EncodedKeySpec.class),\n+                InvalidKeySpecException.class); \/\/ wrong KeySpec\n+        Utils.runAndCheckException(() -> kf.getKeySpec(sk, X509EncodedKeySpec.class),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n+        Utils.runAndCheckException(() -> kf.generatePrivate(pkSpec),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n+        Utils.runAndCheckException(() -> kf.generatePublic(skSpec),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf2.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n+        checkKey(kf2.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n+\n+        Utils.runAndCheckException(() -> kf5.generatePublic(pkSpec),\n+                InvalidKeySpecException.class); \/\/ wrong KF\n+        Utils.runAndCheckException(() -> kf5.generatePublic(skSpec),\n+                InvalidKeySpecException.class);\n@@ -60,5 +120,5 @@\n-        var rk = kf.getKeySpec(k, RawKeySpec.class);\n-        Asserts.assertEquals(2, rk.getKeyArr().length);\n-        var rk2 = kf.getKeySpec(k, EncodedKeySpec.class);\n-        Asserts.assertEquals(\"RAW\", rk2.getFormat());\n-        Asserts.assertEqualsByteArray(rk.getKeyArr(), rk2.getEncoded());\n+        var prk = kf.getKeySpec(pk, RawKeySpec.class);\n+        Asserts.assertEqualsByteArray(prk.getKeyArr(), pk.getRawBytes());\n+        var prk2 = kf.getKeySpec(pk, EncodedKeySpec.class);\n+        Asserts.assertEquals(\"RAW\", prk2.getFormat());\n+        Asserts.assertEqualsByteArray(prk.getKeyArr(), prk2.getEncoded());\n@@ -66,2 +126,15 @@\n-        var kf2 = KeyFactory.getInstance(\"Sha-256\");\n-        var kf5 = KeyFactory.getInstance(\"Sha-512\");\n+        Asserts.assertEqualsByteArray(kf2.generatePublic(prk).getEncoded(), pk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePublic(prk), InvalidKeySpecException.class); \/\/ no pname\n+        Asserts.assertEqualsByteArray(kf2.generatePublic(prk2).getEncoded(), pk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePublic(prk2), InvalidKeySpecException.class); \/\/ no pname\n+\n+        var srk = kf.getKeySpec(sk, RawKeySpec.class);\n+        Asserts.assertEqualsByteArray(srk.getKeyArr(), sk.getRawBytes());\n+        var srk2 = kf.getKeySpec(sk, EncodedKeySpec.class);\n+        Asserts.assertEquals(\"RAW\", srk2.getFormat());\n+        Asserts.assertEqualsByteArray(srk2.getEncoded(), sk.getRawBytes());\n+\n+        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk).getEncoded(), sk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePrivate(srk), InvalidKeySpecException.class); \/\/ no pname\n+        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk2).getEncoded(), sk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePrivate(srk2), InvalidKeySpecException.class); \/\/ no pname\n@@ -72,1 +145,1 @@\n-            public byte[] getEncoded() { return new byte[2]; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n@@ -77,1 +150,1 @@\n-            public byte[] getEncoded() { return new byte[2]; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n@@ -82,1 +155,1 @@\n-            public byte[] getEncoded() { return new byte[2]; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n@@ -86,3 +159,3 @@\n-        Asserts.assertTrue(kf2.translateKey(pk1).toString().contains(\"SHA-256\"));\n-        Asserts.assertTrue(kf.translateKey(pk2).toString().contains(\"SHA-256\"));\n-        Asserts.assertTrue(kf.translateKey(pk3).toString().contains(\"SHA-256\"));\n+        checkKey(kf2.translateKey(pk1), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(pk2), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(pk3), \"SHA\", \"SHA-256\");\n@@ -94,2 +167,20 @@\n-        var kpg = KeyPairGenerator.getInstance(\"SHA\");\n-        Asserts.assertTrue(kpg.generateKeyPair().getPublic().toString().contains(\"SHA-256\"));\n+        var sk1 = new PrivateKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n+        };\n+        var sk2 = new PrivateKey() {\n+            public String getAlgorithm() { return \"sHA-256\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n+        };\n+        var sk3 = new PrivateKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAND.nBytes(2); }\n+            public AlgorithmParameterSpec getParams() { return new NamedParameterSpec(\"sHA-256\"); }\n+        };\n+\n+        checkKey(kf2.translateKey(sk1), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(sk2), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(sk3), \"SHA\", \"SHA-256\");\n@@ -97,4 +188,4 @@\n-        kpg.initialize(new NamedParameterSpec(\"ShA-256\"));\n-        Asserts.assertTrue(kpg.generateKeyPair().getPublic().toString().contains(\"SHA-256\"));\n-        kpg.initialize(new NamedParameterSpec(\"SHa-512\"));\n-        Asserts.assertTrue(kpg.generateKeyPair().getPublic().toString().contains(\"SHA-512\"));\n+        Utils.runAndCheckException(() -> kf.translateKey(sk1), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(sk2), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(sk3), InvalidKeyException.class);\n+    }\n@@ -102,2 +193,4 @@\n-        var kpg1 = KeyPairGenerator.getInstance(\"ShA-256\");\n-        Asserts.assertTrue(kpg1.generateKeyPair().getPublic().toString().contains(\"SHA-256\"));\n+    static void checkKeyPair(KeyPair kp, String algName, String toString) {\n+        checkKey(kp.getPrivate(), algName, toString);\n+        checkKey(kp.getPublic(), algName, toString);\n+    }\n@@ -105,2 +198,6 @@\n-        var kpg2 = KeyPairGenerator.getInstance(\"sHA-512\");\n-        Asserts.assertTrue(kpg2.generateKeyPair().getPublic().toString().contains(\"SHA-512\"));\n+    static void checkKey(Key k, String algName, String pname) {\n+        Asserts.assertEquals(algName, k.getAlgorithm());\n+        Asserts.assertTrue(k.toString().contains(pname));\n+        if (k instanceof AsymmetricKey ak && ak.getParams() instanceof NamedParameterSpec nps) {\n+            Asserts.assertEquals(pname, nps.getName());\n+        }\n@@ -109,0 +206,2 @@\n+    \/\/ Provider\n+\n@@ -147,2 +246,2 @@\n-            out[0] = new byte[name.endsWith(\"256\") ? 2 : 4];\n-            out[1] = new byte[name.endsWith(\"256\") ? 2 : 4];\n+            out[0] = RAND.nBytes(name.endsWith(\"256\") ? 2 : 4);\n+            out[1] = RAND.nBytes(name.endsWith(\"256\") ? 2 : 4);\n","filename":"test\/jdk\/sun\/security\/provider\/NamedKeyFactoryTest.java","additions":134,"deletions":35,"binary":false,"changes":169,"status":"modified"}]}