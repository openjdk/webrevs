{"files":[{"patch":"@@ -58,3 +58,3 @@\n-    private String name = null;\n-    private byte[] secKey = null;\n-    private byte[] pubKey = null;\n+    private String name;\n+    private byte[] secKey;\n+    private byte[] pubKey;\n@@ -62,2 +62,2 @@\n-    private Object sk2 = null;\n-    private Object pk2 = null;\n+    private Object sk2;\n+    private Object pk2;\n@@ -121,1 +121,1 @@\n-            throw new IllegalStateException(\"No private key\");\n+            throw new SignatureException(\"No private key\");\n@@ -132,1 +132,1 @@\n-            throw new IllegalStateException(\"No public key\");\n+            throw new SignatureException(\"No public key\");\n@@ -140,1 +140,1 @@\n-        throw new UnsupportedOperationException(\"setParameter() not supported\");\n+        throw new InvalidParameterException(\"setParameter() not supported\");\n@@ -146,1 +146,1 @@\n-        throw new UnsupportedOperationException(\"getParameter() not supported\");\n+        throw new InvalidParameterException(\"getParameter() not supported\");\n@@ -191,1 +191,1 @@\n-    \/\/\/ This method will be called in `initVerify`. This gives provider a chance to\n+    \/\/\/ This method will be called in `initVerify`. This gives the provider a chance to\n@@ -193,1 +193,1 @@\n-    \/\/\/ An implementation can optional return a \"parsed key\" as an `Object` value.\n+    \/\/\/ An implementation can optionally return a \"parsed key\" as an `Object` value.\n@@ -208,1 +208,1 @@\n-    \/\/\/ This method will be called in `initSign`. This gives provider a chance to\n+    \/\/\/ This method will be called in `initSign`. This gives the provider a chance to\n@@ -210,1 +210,1 @@\n-    \/\/\/ An implementation can optional return a \"parsed key\" as an `Object` value.\n+    \/\/\/ An implementation can optionally return a \"parsed key\" as an `Object` value.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedSignature.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -187,2 +187,2 @@\n-        if (key instanceof ECKey) {\n-            ECParameterSpec paramSpec = ((ECKey) key).getParams();\n+        if (key instanceof AsymmetricKey ak) {\n+            AlgorithmParameterSpec paramSpec = ak.getParams();\n@@ -191,0 +191,2 @@\n+            } else if (paramSpec instanceof NamedParameterSpec nps) {\n+                result = nps.getName();\n@@ -192,2 +194,0 @@\n-        } else if (key instanceof EdECKey) {\n-            result = ((EdECKey) key).getParams().getName();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-                    \"Unknown algorithm: \" + signatureAlgorithm);\n+                    \"Cannot extract digest algorithm from \" + signatureAlgorithm);\n@@ -498,2 +498,4 @@\n-            default -> kAlg; \/\/ All modern signature algorithms,\n-                             \/\/ RSASSA-PSS, ED25519, ED448, HSS\/LMS, etc\n+            default -> kAlg.contains(\"KEM\") ? null : kAlg;\n+                \/\/ All modern signature algorithms use the same name across\n+                \/\/ key algorithms and signature algorithms, for example,\n+                \/\/ RSASSA-PSS, ED25519, ED448, HSS\/LMS, etc\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}