{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import sun.security.util.RawKeySpec;\n@@ -50,1 +51,4 @@\n-\/\/\/ using `getKeySpec(key, EncodedKeySpec.class)`.\n+\/\/\/ using `getKeySpec(key, EncodedKeySpec.class)`. The algorithm of\n+\/\/\/ this `EncodedKeySpec` is intentionally left unspecified, since\n+\/\/\/ family name does not include enough information, and we don't use\n+\/\/\/ parameter set names as key algorithm names.\n@@ -151,0 +155,2 @@\n+                } else if (keySpec == RawKeySpec.class) {\n+                    return keySpec.cast(new RawKeySpec(bytes = nk.getRawBytes()));\n@@ -164,0 +170,2 @@\n+            } else if (keySpec == RawKeySpec.class) {\n+                return keySpec.cast(new RawKeySpec(nk.getRawBytes()));\n@@ -168,1 +176,1 @@\n-        throw new AssertionError(\"Unknown key: \" + key.getClass());\n+        throw new AssertionError(\"No \" + keySpec.getName() + \" for \" + key.getClass());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyFactory.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ *          java.base\/sun.security.util\n@@ -35,0 +36,1 @@\n+import sun.security.util.RawKeySpec;\n@@ -39,0 +41,1 @@\n+import java.security.spec.EncodedKeySpec;\n@@ -56,0 +59,7 @@\n+        \/\/ The private RawKeySpec and unnamed RAW EncodedKeySpec\n+        var rk = kf.getKeySpec(k, RawKeySpec.class);\n+        Asserts.assertEquals(2, rk.getKeyArr().length);\n+        var rk2 = kf.getKeySpec(k, EncodedKeySpec.class);\n+        Asserts.assertEquals(\"RAW\", rk2.getFormat());\n+        Asserts.assertEqualsByteArray(rk.getKeyArr(), rk2.getEncoded());\n+\n","filename":"test\/jdk\/sun\/security\/provider\/NamedKeyFactoryTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}