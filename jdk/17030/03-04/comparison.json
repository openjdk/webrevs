{"files":[{"patch":"@@ -0,0 +1,199 @@\n+\/*\r\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+import javax.print.attribute.HashPrintRequestAttributeSet;\r\n+import javax.print.attribute.PrintRequestAttributeSet;\r\n+import javax.print.attribute.standard.Sides;\r\n+import javax.swing.*;\r\n+import java.awt.*;\r\n+import java.awt.event.WindowAdapter;\r\n+import java.awt.event.WindowEvent;\r\n+import java.awt.print.*;\r\n+import java.awt.print.PrinterException;\r\n+\r\n+import static java.awt.print.PageFormat.*;\r\n+\r\n+\/*\r\n+ * @test\r\n+ * @bug 8307246\r\n+ * @key printer\r\n+ * @library ..\/..\/..\/regtesthelpers\r\n+ * @build PassFailJFrame\r\n+ * @summary Test for comparing offsets of images drew with opaque and translucent colors printed in all orientations\r\n+ * @run main\/manual AlphaPrintingOffsets\r\n+ *\/\r\n+\r\n+public class AlphaPrintingOffsets {\r\n+    private static final String INSTRUCTIONS =\r\n+            \"This test prints 6 pages with same image except text messages. \\n\" +\r\n+                    \"Tested bug occurs only on-paper printing so you mustn't use PDF printer\\n\" +\r\n+                    \"1.Java print dialog should appear.\\n\" +\r\n+                    \"2. Press the Print button on the Java Print dialog.\\n\"+\r\n+                    \"3. Check that 6 pages have the same image except text messages.\\n\"+\r\n+                    \"If so, press PASS, else press FAIL.\";\r\n+\r\n+    public static void main(String[] args) throws Exception {\r\n+        if (PrinterJob.lookupPrintServices().length > 0) {\r\n+\r\n+            PassFailJFrame.builder().instructions(INSTRUCTIONS)\r\n+                    .testUI(() -> createTestUI()).build().awaitAndCheck();\r\n+\r\n+        }\r\n+        else {\r\n+            System.out.println(\"Printer not configured or available.\"\r\n+                    + \" Test cannot continue.\");\r\n+            PassFailJFrame.forcePass();\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    public static JFrame createTestUI() {\r\n+        JFrame testUI = new JFrame(\"Print images\");\r\n+        testUI.setSize(1,1);\r\n+        testUI.addWindowListener(new WindowAdapter() {\r\n+            @Override\r\n+            public void windowOpened(WindowEvent e) {\r\n+                super.windowOpened(e);\r\n+                print();\r\n+            }\r\n+\r\n+            @Override\r\n+            public void windowActivated(WindowEvent e) {\r\n+                super.windowActivated(e);\r\n+                testUI.setVisible(false);\r\n+            }\r\n+        });\r\n+\r\n+        return testUI;\r\n+    }\r\n+\r\n+    private static void print() {\r\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\r\n+        PageFormat pageFormatP = printerJob.defaultPage();\r\n+\r\n+        Paper paper = pageFormatP.getPaper();\r\n+        paper.setImageableArea(0,0,paper.getWidth(),paper.getHeight());\r\n+        pageFormatP.setPaper(paper);\r\n+\r\n+        PageFormat pageFormatL = (PageFormat) pageFormatP.clone();\r\n+        PageFormat pageFormatRL = (PageFormat) pageFormatP.clone();\r\n+\r\n+        pageFormatL.setOrientation(LANDSCAPE);\r\n+        pageFormatRL.setOrientation(REVERSE_LANDSCAPE);\r\n+\r\n+        Printable printableOpaque = new CustomPrintable(255);\r\n+        Printable printableTransparent = new CustomPrintable(254);\r\n+\r\n+        Book book = new Book();\r\n+        book.append(printableOpaque, pageFormatP);\r\n+        book.append(printableTransparent, pageFormatP);\r\n+        book.append(printableOpaque, pageFormatL);\r\n+        book.append(printableTransparent, pageFormatL);\r\n+        book.append(printableOpaque, pageFormatRL);\r\n+        book.append(printableTransparent, pageFormatRL);\r\n+        printerJob.setPageable(book);\r\n+\r\n+        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\r\n+        aset.add(Sides.ONE_SIDED);\r\n+\r\n+        if (printerJob.printDialog()) {\r\n+            try {\r\n+                printerJob.print(aset);\r\n+            } catch (PrinterException e) {\r\n+                e.printStackTrace();\r\n+                throw new RuntimeException(\"Exception whilst printing.\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            throw new RuntimeException(\"Test failed : \"\r\n+                    + \"User selected 'Cancel' button on the print dialog\");\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+class CustomPrintable implements Printable {\r\n+    private static final int THICKNESS = 10;\r\n+    private static final int MARGIN = 15;\r\n+    private static final int SMALL_RECTANGLE_SIZE = 5;\r\n+    private int alphaValue;\r\n+\r\n+    public CustomPrintable(int alpha) {\r\n+        alphaValue=alpha;\r\n+    }\r\n+\r\n+    private static String getOrientStr(int orient) {\r\n+        switch (orient) {\r\n+            case PORTRAIT: return \"PORTRAIT\";\r\n+            case LANDSCAPE: return \"LANDSCAPE\";\r\n+            case REVERSE_LANDSCAPE: return \"REVERSE_LANDSCAPE\";\r\n+            default : return \"BAD Orientation\";\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public int print(Graphics g, PageFormat pageFormat, int pageIndex) {\r\n+\r\n+        if (pageIndex > 5) {\r\n+            return Printable.NO_SUCH_PAGE;\r\n+        }\r\n+\r\n+        drawRectangle(g, pageFormat.getImageableX(), pageFormat.getImageableY(),\r\n+                pageFormat.getImageableWidth(), pageFormat.getImageableHeight());\r\n+\r\n+        drawSmallRectangle(g, pageFormat.getImageableX(), pageFormat.getImageableY(),\r\n+                pageFormat.getImageableWidth(), pageFormat.getImageableHeight());\r\n+\r\n+        drawMsg(g,300,300, pageFormat.getOrientation());\r\n+        return Printable.PAGE_EXISTS;\r\n+    }\r\n+\r\n+    private void drawRectangle(Graphics g, double x, double y, double width, double height) {\r\n+        Graphics2D g2d = (Graphics2D) g;\r\n+        g2d.setStroke(new BasicStroke(THICKNESS));\r\n+\r\n+        \/\/ Draw rectangle with thick border lines\r\n+        g2d.drawRect((int) x+MARGIN, (int) y+MARGIN, (int) width-MARGIN*2, (int) height-MARGIN*2);\r\n+    }\r\n+\r\n+    private void drawSmallRectangle(Graphics g, double x, double y, double width, double height) {\r\n+        Graphics2D g2d = (Graphics2D) g;\r\n+        Color originalColor = g2d.getColor();\r\n+\r\n+        g2d.setColor(new Color(0,0,0,alphaValue));\r\n+        \/\/ Calculate the position to center the smaller rectangle\r\n+        double centerX = x + (width - SMALL_RECTANGLE_SIZE) \/ 2;\r\n+        double centerY = y + (height - SMALL_RECTANGLE_SIZE) \/ 2;\r\n+\r\n+        g2d.fillRect((int) centerX, (int) centerY, SMALL_RECTANGLE_SIZE, SMALL_RECTANGLE_SIZE);\r\n+\r\n+        g2d.setColor(originalColor);\r\n+    }\r\n+\r\n+    private void drawMsg(Graphics g, int x, int y, int orient) {\r\n+        Graphics2D g2d = (Graphics2D) g;\r\n+\r\n+        String msg = \"Orient= \" + getOrientStr(orient);\r\n+        msg += \" Color=\" + (alphaValue != 255 ? \" ALPHA\" : \" OPAQUE\");\r\n+        g2d.drawString(msg, x, y);\r\n+    }\r\n+}\r\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/AlphaPrintingOffsets.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"}]}