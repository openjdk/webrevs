{"files":[{"patch":"@@ -2399,0 +2399,1 @@\n+                    bandGraphics.translate(-deviceAddressableX,deviceAddressableY);\n@@ -2421,1 +2422,1 @@\n-                        int bandX = deviceLeft - deviceAddressableX;\n+                        int bandX = deviceLeft;\n@@ -2426,1 +2427,1 @@\n-                        int bandY = deviceTop + bandTop - deviceAddressableY;\n+                        int bandY = deviceTop;\n@@ -2437,1 +2438,1 @@\n-                        printBand(data, bandX, bandY, bandWidth, bandHeight);\n+                        printBand(data, bandX, bandTop+bandY, bandWidth, bandHeight);\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/RasterPrinterJob.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.Sides;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.*;\n+import java.awt.print.PrinterException;\n+\n+import static java.awt.print.PageFormat.*;\n+\n+\/*\n+ * @test\n+ * @bug 8307246\n+ * @key printer\n+ * @library ..\/..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test for comparing offsets of images drew with opaque and translucent colors printed in all orientations\n+ * @run main\/manual AlphaPrintingOffsets\n+ *\/\n+\n+public class AlphaPrintingOffsets {\n+    private static final String INSTRUCTIONS =\n+            \"This test prints 6 pages with same image except text messages. \\n\" +\n+                    \"Tested bug occurs only on-paper printing so you mustn't use PDF printer\\n\" +\n+                    \"1.Java print dialog should appear.\\n\" +\n+                    \"2. Press the Print button on the Java Print dialog.\\n\"+\n+                    \"3. Check that 6 pages have the same image except text messages.\\n\"+\n+                    \"If so, press PASS, else press FAIL.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length > 0) {\n+\n+            PassFailJFrame.builder().instructions(INSTRUCTIONS)\n+                    .testUI(() -> createTestUI()).build().awaitAndCheck();\n+\n+        }\n+        else {\n+            System.out.println(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+            PassFailJFrame.forcePass();\n+        }\n+\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame testUI = new JFrame(\"Print images\");\n+        testUI.setSize(1,1);\n+        testUI.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowOpened(WindowEvent e) {\n+                super.windowOpened(e);\n+                print();\n+            }\n+\n+            @Override\n+            public void windowActivated(WindowEvent e) {\n+                super.windowActivated(e);\n+                testUI.setVisible(false);\n+            }\n+        });\n+\n+        return testUI;\n+    }\n+\n+    private static void print() {\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PageFormat pageFormatP = printerJob.defaultPage();\n+\n+        Paper paper = pageFormatP.getPaper();\n+        paper.setImageableArea(0,0,paper.getWidth(),paper.getHeight());\n+        pageFormatP.setPaper(paper);\n+\n+        PageFormat pageFormatL = (PageFormat) pageFormatP.clone();\n+        PageFormat pageFormatRL = (PageFormat) pageFormatP.clone();\n+\n+        pageFormatL.setOrientation(LANDSCAPE);\n+        pageFormatRL.setOrientation(REVERSE_LANDSCAPE);\n+\n+        Printable printableOpaque = new CustomPrintable(255);\n+        Printable printableTransparent = new CustomPrintable(254);\n+\n+        Book book = new Book();\n+        book.append(printableOpaque, pageFormatP);\n+        book.append(printableTransparent, pageFormatP);\n+        book.append(printableOpaque, pageFormatL);\n+        book.append(printableTransparent, pageFormatL);\n+        book.append(printableOpaque, pageFormatRL);\n+        book.append(printableTransparent, pageFormatRL);\n+        printerJob.setPageable(book);\n+\n+        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();\n+        aset.add(Sides.ONE_SIDED);\n+\n+        if (printerJob.printDialog()) {\n+            try {\n+                printerJob.print(aset);\n+            } catch (PrinterException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(\"Exception whilst printing.\");\n+            }\n+        }\n+        else {\n+            throw new RuntimeException(\"Test failed : \"\n+                    + \"User selected 'Cancel' button on the print dialog\");\n+        }\n+    }\n+}\n+\n+class CustomPrintable implements Printable {\n+    private static final int THICKNESS = 10;\n+    private static final int MARGIN = 15;\n+    private static final int SMALL_RECTANGLE_SIZE = 5;\n+    private int alphaValue;\n+\n+    public CustomPrintable(int alpha) {\n+        alphaValue=alpha;\n+    }\n+\n+    private static String getOrientStr(int orient) {\n+        switch (orient) {\n+            case PORTRAIT: return \"PORTRAIT\";\n+            case LANDSCAPE: return \"LANDSCAPE\";\n+            case REVERSE_LANDSCAPE: return \"REVERSE_LANDSCAPE\";\n+            default : return \"BAD Orientation\";\n+        }\n+    }\n+\n+    @Override\n+    public int print(Graphics g, PageFormat pageFormat, int pageIndex) {\n+\n+        if (pageIndex > 5) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        drawRectangle(g, pageFormat.getImageableX(), pageFormat.getImageableY(),\n+                pageFormat.getImageableWidth(), pageFormat.getImageableHeight());\n+\n+        drawSmallRectangle(g, pageFormat.getImageableX(), pageFormat.getImageableY(),\n+                pageFormat.getImageableWidth(), pageFormat.getImageableHeight());\n+\n+        drawMsg(g,300,300, pageFormat.getOrientation());\n+        return Printable.PAGE_EXISTS;\n+    }\n+\n+    private void drawRectangle(Graphics g, double x, double y, double width, double height) {\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.setStroke(new BasicStroke(THICKNESS));\n+\n+        \/\/ Draw rectangle with thick border lines\n+        g2d.drawRect((int) x+MARGIN, (int) y+MARGIN, (int) width-MARGIN*2, (int) height-MARGIN*2);\n+    }\n+\n+    private void drawSmallRectangle(Graphics g, double x, double y, double width, double height) {\n+        Graphics2D g2d = (Graphics2D) g;\n+        Color originalColor = g2d.getColor();\n+\n+        g2d.setColor(new Color(0,0,0,alphaValue));\n+        \/\/ Calculate the position to center the smaller rectangle\n+        double centerX = x + (width - SMALL_RECTANGLE_SIZE) \/ 2;\n+        double centerY = y + (height - SMALL_RECTANGLE_SIZE) \/ 2;\n+\n+        g2d.fillRect((int) centerX, (int) centerY, SMALL_RECTANGLE_SIZE, SMALL_RECTANGLE_SIZE);\n+\n+        g2d.setColor(originalColor);\n+    }\n+\n+    private void drawMsg(Graphics g, int x, int y, int orient) {\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        String msg = \"Orient= \" + getOrientStr(orient);\n+        msg += \" Color=\" + (alphaValue != 255 ? \" ALPHA\" : \" OPAQUE\");\n+        g2d.drawString(msg, x, y);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/AlphaPrintingOffsets.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"}]}