{"files":[{"patch":"@@ -1421,2 +1421,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+  if (DTraceMethodProbes) {\n@@ -1461,2 +1460,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+  if (DTraceMethodProbes) {\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1757,5 +1757,2 @@\n-  {\n-    uint64_t offset;\n-    __ adrp(rscratch1, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ ldrb(rscratch1, Address(rscratch1, offset));\n-    __ cbnzw(rscratch1, dtrace_method_entry);\n+  if (DTraceMethodProbes) {\n+    __ b(dtrace_method_entry);\n@@ -1993,5 +1990,2 @@\n-  {\n-    uint64_t offset;\n-    __ adrp(rscratch1, ExternalAddress((address)&DTraceMethodProbes), offset);\n-    __ ldrb(rscratch1, Address(rscratch1, offset));\n-    __ cbnzw(rscratch1, dtrace_method_exit);\n+  if (DTraceMethodProbes) {\n+    __ b(dtrace_method_exit);\n@@ -2141,16 +2135,17 @@\n-  {\n-    __ block_comment(\"dtrace entry {\");\n-    __ bind(dtrace_method_entry);\n-\n-    \/\/ We have all of the arguments setup at this point. We must not touch any register\n-    \/\/ argument registers at this point (what if we save\/restore them there are no oop?\n-\n-    save_args(masm, total_c_args, c_arg, out_regs);\n-    __ mov_metadata(c_rarg1, method());\n-    __ call_VM_leaf(\n-      CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_entry),\n-      rthread, c_rarg1);\n-    restore_args(masm, total_c_args, c_arg, out_regs);\n-    __ b(dtrace_method_entry_done);\n-    __ block_comment(\"} dtrace entry\");\n-  }\n+  if (DTraceMethodProbes) {\n+    {\n+      __ block_comment(\"dtrace entry {\");\n+      __ bind(dtrace_method_entry);\n+\n+      \/\/ We have all of the arguments setup at this point. We must not touch any register\n+      \/\/ argument registers at this point (what if we save\/restore them there are no oop?\n+\n+      save_args(masm, total_c_args, c_arg, out_regs);\n+      __ mov_metadata(c_rarg1, method());\n+      __ call_VM_leaf(\n+        CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_entry),\n+        rthread, c_rarg1);\n+      restore_args(masm, total_c_args, c_arg, out_regs);\n+      __ b(dtrace_method_entry_done);\n+      __ block_comment(\"} dtrace entry\");\n+    }\n@@ -2158,11 +2153,12 @@\n-  {\n-    __ block_comment(\"dtrace exit {\");\n-    __ bind(dtrace_method_exit);\n-    save_native_result(masm, ret_type, stack_slots);\n-    __ mov_metadata(c_rarg1, method());\n-    __ call_VM_leaf(\n-         CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_exit),\n-         rthread, c_rarg1);\n-    restore_native_result(masm, ret_type, stack_slots);\n-    __ b(dtrace_method_exit_done);\n-    __ block_comment(\"} dtrace exit\");\n+    {\n+      __ block_comment(\"dtrace exit {\");\n+      __ bind(dtrace_method_exit);\n+      save_native_result(masm, ret_type, stack_slots);\n+      __ mov_metadata(c_rarg1, method());\n+      __ call_VM_leaf(\n+        CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_exit),\n+        rthread, c_rarg1);\n+      restore_native_result(masm, ret_type, stack_slots);\n+      __ b(dtrace_method_exit_done);\n+      __ block_comment(\"} dtrace exit\");\n+    }\n@@ -2171,1 +2167,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":33,"deletions":38,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -3651,2 +3651,1 @@\n-    {\n-      SkipIfEqual skip(_masm, &DTraceAllocProbes, false);\n+    if (DTraceAllocProbes) {\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3862,4 +3862,5 @@\n-    SkipIfEqualZero::skip_to_label_if_equal_zero(_masm, Rscratch, &DTraceAllocProbes, Ldone);\n-    __ push(atos);\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, static_cast<int (*)(oopDesc*)>(SharedRuntime::dtrace_object_alloc)));\n-    __ pop(atos);\n+    if (DTraceAllocProbes) {\n+      __ push(atos);\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, static_cast<int (*)(oopDesc*)>(SharedRuntime::dtrace_object_alloc)));\n+      __ pop(atos);\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1470,2 +1470,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+  if (DTraceMethodProbes) {\n@@ -1509,2 +1508,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+  if (DTraceMethodProbes) {\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1641,8 +1641,2 @@\n-  {\n-    ExternalAddress target((address)&DTraceMethodProbes);\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lbu(t0, Address(t0, offset));\n-    });\n-    __ bnez(t0, dtrace_method_entry);\n+  if (DTraceMethodProbes) {\n+    __ j(dtrace_method_entry);\n@@ -1864,8 +1858,2 @@\n-  {\n-    ExternalAddress target((address)&DTraceMethodProbes);\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lbu(t0, Address(t0, offset));\n-    });\n-    __ bnez(t0, dtrace_method_exit);\n+  if (DTraceMethodProbes) {\n+    __ j(dtrace_method_exit);\n@@ -2012,16 +2000,17 @@\n-  {\n-    __ block_comment(\"dtrace entry {\");\n-    __ bind(dtrace_method_entry);\n-\n-    \/\/ We have all of the arguments setup at this point. We must not touch any register\n-    \/\/ argument registers at this point (what if we save\/restore them there are no oop?\n-\n-    save_args(masm, total_c_args, c_arg, out_regs);\n-    __ mov_metadata(c_rarg1, method());\n-    __ call_VM_leaf(\n-      CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_entry),\n-      xthread, c_rarg1);\n-    restore_args(masm, total_c_args, c_arg, out_regs);\n-    __ j(dtrace_method_entry_done);\n-    __ block_comment(\"} dtrace entry\");\n-  }\n+  if (DTraceMethodProbes) {\n+    {\n+      __ block_comment(\"dtrace entry {\");\n+      __ bind(dtrace_method_entry);\n+\n+      \/\/ We have all of the arguments setup at this point. We must not touch any register\n+      \/\/ argument registers at this point (what if we save\/restore them there are no oop?\n+\n+      save_args(masm, total_c_args, c_arg, out_regs);\n+      __ mov_metadata(c_rarg1, method());\n+      __ call_VM_leaf(\n+        CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_entry),\n+        xthread, c_rarg1);\n+      restore_args(masm, total_c_args, c_arg, out_regs);\n+      __ j(dtrace_method_entry_done);\n+      __ block_comment(\"} dtrace entry\");\n+    }\n@@ -2029,11 +2018,12 @@\n-  {\n-    __ block_comment(\"dtrace exit {\");\n-    __ bind(dtrace_method_exit);\n-    save_native_result(masm, ret_type, stack_slots);\n-    __ mov_metadata(c_rarg1, method());\n-    __ call_VM_leaf(\n-         CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_exit),\n-         xthread, c_rarg1);\n-    restore_native_result(masm, ret_type, stack_slots);\n-    __ j(dtrace_method_exit_done);\n-    __ block_comment(\"} dtrace exit\");\n+    {\n+      __ block_comment(\"dtrace exit {\");\n+      __ bind(dtrace_method_exit);\n+      save_native_result(masm, ret_type, stack_slots);\n+      __ mov_metadata(c_rarg1, method());\n+      __ call_VM_leaf(\n+           CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_exit),\n+           xthread, c_rarg1);\n+      restore_native_result(masm, ret_type, stack_slots);\n+      __ j(dtrace_method_exit_done);\n+      __ block_comment(\"} dtrace exit\");\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":33,"deletions":43,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -3595,2 +3595,1 @@\n-    {\n-      SkipIfEqual skip(_masm, &DTraceAllocProbes, false);\n+    if (DTraceAllocProbes) {\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3979,2 +3979,1 @@\n-    {\n-      SkipIfEqual skip(_masm, &DTraceAllocProbes, false, Z_ARG5 \/*scratch*\/);\n+    if (DTraceAllocProbes) {\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1958,2 +1958,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false, rscratch1);\n+  if (DTraceMethodProbes) {\n@@ -2003,2 +2002,1 @@\n-  {\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false, rscratch1);\n+  if (DTraceMethodProbes) {\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1615,2 +1615,1 @@\n-  {\n-    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0, noreg);\n+  if (DTraceMethodProbes) {\n@@ -1860,2 +1859,1 @@\n-  {\n-    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0, noreg);\n+  if (DTraceMethodProbes) {\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2203,2 +2203,1 @@\n-  {\n-    SkipIfEqual skip(masm, &DTraceMethodProbes, false, rscratch1);\n+  if (DTraceMethodProbes) {\n@@ -2442,2 +2441,1 @@\n-  {\n-    SkipIfEqual skip(masm, &DTraceMethodProbes, false, rscratch1);\n+  if (DTraceMethodProbes) {\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4126,2 +4126,1 @@\n-    {\n-      SkipIfEqual skip_if(_masm, &DTraceAllocProbes, 0, rscratch1);\n+    if (DTraceAllocProbes) {\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}