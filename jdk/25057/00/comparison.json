{"files":[{"patch":"@@ -0,0 +1,27 @@\n+#\n+#Currencies List to cross validate the values returned by Currency.getInstance() in ValidateCurrencyCoverage.java test file\n+#\n+#Format <ISO 3166 country code>\t<currency code>\t<numeric code>\t<default fraction digits>\t<cutover timestamp>\t<new currency code>\t<new numeric code>\t<new default fraction digits>\n+#\n+\n+CW\tXCG\t532\t2\t2099-04-22-00-00-00\tANG\t532\t2\n+CY\tEUR\t978\t2\n+SX\tXCG\t532\t2\t2025-04-22-00-00-00\tANG\t532\t2\n+SZ\tSZL\t748\t2\n+SE\tSEK\t752\t2\n+BA\tBAM\t977\t2\n+BW\tBWP\t72\t2\n+BV\tNOK\t578\t2\n+BR\tBRL\t986\t2\t2049-08-02-08-00-00\tBLR\t986\t2\n+IO\tUSD\t840\t2\n+BN\tBND\t96\t2\n+BG\tBGN\t975\t2\n+BF\tXOF\t952\t0\n+BI\tBIF\t108\t0\t2022-12-15-04-00-00\tBFI\t108\t0\n+KH\tKHR\t116\t2\n+CM\tXAF\t950\t0\n+CA\tCAD\t124\t2\n+CV\tCVE\t132\t2\n+KY\tKYD\t136\t2\t2024-11-11-09-00-00\tKDY\t136\t2\n+CF\tXAF\t950\t0\n+TD\tXAF\t950\t0\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/Currency\/currencyEnhancedCoverage\/CurrencyList.txt","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @run main\/othervm ValidateCurrencyCoverage\n+ * @summary Validates that all currency codes and country-currency mappings\n+ * in the input file are consistent with the Java Currency API.\n+ *\/\n+\n+import java.io.*;\n+import java.text.*;\n+import java.util.*;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class ValidateCurrencyCoverage {\n+\n+    private static final int ALPHA_NUM = 26;\n+    private static final byte UNDEFINED = 0; \/\/ Indicates that a country-currency mapping has not yet been processed\n+    private static final byte DEFINED = 1; \/\/ Indicates that a country-currency mapping has been processed and defined\n+\n+    \/\/ Input data file\n+    private static final String DATA_FILE = \"CurrencyList.txt\";\n+\n+    \/\/ Mapping array to track defined country codes\n+    private static final byte[] codes = new byte[ALPHA_NUM * ALPHA_NUM];\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean failureFlag = false;\n+        Path SRC_DIR = Paths.get(System.getProperty(\"test.src\", \"src\"));\n+        \/\/ Override the default Java currency data property for testing\n+        System.setProperty(\"java.util.currency.data\", SRC_DIR + File.separator + \"currency.properties\");\n+        List<String[]> inputList = parseCurrencyTextFile();\n+        for (String[] currencyDetails : inputList) {\n+            String country = currencyDetails[0];\n+            String currency = currencyDetails[1];\n+            String numeric = currencyDetails[2];\n+            String minorUnit = currencyDetails[3];\n+            int index = toIndex(country);\n+            int numericCode = Integer.parseInt(numeric);\n+            int digits = Integer.parseInt(minorUnit);\n+            String failmessage = testCountryCurrencyWithLocale(country, currency, numericCode, digits, index);\n+            System.out.println(\"\\nTest case for : Country = \" + country + \" , Currency = \" + currency);\n+            if (failmessage == null) {\n+                System.out.println(\"testCountryCurrencyWithLocale: PASS\");\n+            } else {\n+                failureFlag = true;\n+                System.out.println(\"testCountryCurrencyWithLocale: FAIL\");\n+                System.out.println(failmessage);\n+            }\n+            failmessage = testCountryCurrencyWithCurrencyCode(currency, numericCode, digits);\n+            if (failmessage == null) {\n+                System.out.println(\"\\ntestCountryCurrencyWithCurrencyCode: PASS\");\n+            } else {\n+                failureFlag = true;\n+                System.out.println(\"\\ntestCountryCurrencyWithCurrencyCode: FAIL\");\n+                System.out.println(failmessage);\n+            }\n+\n+        }\n+\n+        if (failureFlag) {\n+            throw new RuntimeException(\"Test FAILED\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * Reads the currency definitions from the input file and validates each entry.\n+     *\n+     * @return\n+     *\/\n+    private static List<String[]> parseCurrencyTextFile() throws Exception {\n+        List<String[]> inputList = new ArrayList<String[]>();\n+        String[] inputArray;\n+        try (FileReader fr = new FileReader(new File(System.getProperty(\"test.src\", \".\"), DATA_FILE));\n+                BufferedReader in = new BufferedReader(fr)) {\n+            String line;\n+            SimpleDateFormat format = null;\n+            while ((line = in.readLine()) != null) {\n+                \/\/ Skip empty or commented lines\n+                if (line.length() == 0 || line.charAt(0) == '#') {\n+                    continue;\n+                }\n+                inputArray = new String[4];\n+                StringTokenizer tokens = new StringTokenizer(line, \"\\t\");\n+                String country = tokens.nextToken();\n+\n+                \/\/ Skip lines with invalid country codes\n+                if (country.length() != 2) {\n+                    continue;\n+                }\n+                String currency;\n+                String numeric;\n+                String minorUnit;\n+                int tokensCount = tokens.countTokens();\n+                if (tokensCount < 3) {\n+                    \/\/ Default values if not all tokens are present\n+                    currency = \"\";\n+                    numeric = \"0\";\n+                    minorUnit = \"0\";\n+                } else {\n+                    currency = tokens.nextToken();\n+                    numeric = tokens.nextToken();\n+                    minorUnit = tokens.nextToken();\n+                    \/\/ Handle future currency transitions if date is specified\n+                    if (tokensCount > 3) {\n+                        if (format == null) {\n+                            format = new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss\", Locale.US);\n+                            format.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+                            format.setLenient(false);\n+                        }\n+                        String dates = tokens.nextToken();\n+                        if (format.parse(dates).getTime() < System.currentTimeMillis()) {\n+                            currency = tokens.nextToken();\n+                            numeric = tokens.nextToken();\n+                            minorUnit = tokens.nextToken();\n+                        }\n+                    }\n+                }\n+                inputArray[0] = country;\n+                inputArray[1] = currency;\n+                inputArray[2] = numeric;\n+                inputArray[3] = minorUnit;\n+                inputList.add(inputArray);\n+\n+            }\n+        }\n+        return inputList;\n+    }\n+\n+    \/**\n+     * Converts a two-letter country code to an array index.\n+     *\/\n+    private static int toIndex(String s) {\n+        return ((s.charAt(0) - 'A') * ALPHA_NUM + s.charAt(1) - 'A');\n+    }\n+\n+    \/**\n+     * Validates the locale based currency instance returned.\n+     *\/\n+    private static String testCountryCurrencyWithLocale(String country, String currencyCode, int numericCode,\n+            int digits, int index) {\n+        String failMessage = null;\n+        if (currencyCode.length() == 0) {\n+            return failMessage;\n+        }\n+        Locale loc = new Locale(\"\", country);\n+        try {\n+            Currency currency = Currency.getInstance(loc);\n+            if (!currency.getCurrencyCode().equals(currencyCode)) {\n+                failMessage = \"Fail: [ Country: \" + country + \":\" + loc.getDisplayCountry()\n+                        + \"] expected currencyCode: \" + currencyCode + \", got: \" + currency.getCurrencyCode();\n+            }\n+            if (codes[index] != UNDEFINED) {\n+                System.out.println(\"Warning: [\" + country + \":\" + loc.getDisplayCountry()\n+                        + \"] multiple definitions. currency code=\" + currencyCode);\n+            }\n+            codes[index] = DEFINED;\n+        } catch (Exception e) {\n+            failMessage = \"Fail: \" + e + \": Country=\" + country;\n+        }\n+        return failMessage;\n+    }\n+\n+    \/**\n+     * Validates the currencycode based currency instance.\n+     *\n+     * @return\n+     *\/\n+    private static String testCountryCurrencyWithCurrencyCode(String currencyCode, int numericCode, int digits) {\n+        String failMessage = null;\n+        if (currencyCode.length() == 0) {\n+            return failMessage;\n+        }\n+        try {\n+            Currency currency = Currency.getInstance(currencyCode);\n+            if (currency.getNumericCode() != numericCode) {\n+                failMessage = \"Fail: [ CurrencyCode: \" + currencyCode + \"] expected numericCode: \" + numericCode\n+                        + \"; got: \" + currency.getNumericCode();\n+            }\n+            if (currency.getDefaultFractionDigits() != digits) {\n+                failMessage = \"Fail: [\" + currencyCode + \"] expected: \" + digits + \"; got: \"\n+                        + currency.getDefaultFractionDigits();\n+            }\n+        } catch (Exception e) {\n+            failMessage = \"Fail: \" + e + \": Currency code=\" + currencyCode;\n+        }\n+        return failMessage;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/Currency\/currencyEnhancedCoverage\/ValidateCurrencyCoverage.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+#\n+# Test data for replacing the currency data\n+#\n+# Format <ISO 3166 country code>=<currency code>|<numeric code>|<default fraction digits>|<cutover timestamp>\n+#\n+\n+CW=ANG,532,2,2099-04-22T00:00:00\n+CY=EUR,978,2\n+SX=ANG,532,2,2025-04-22T00:00:00\n+SY=SYP,760,2\n+BA=BAM,977,2\n+BV=NOK,578,2\n+BR=BLR,986,2,2049-08-02T08:00:00\n+IO=USD,840,2\n+BG=BGN,975,2\n+BF=XOF,952,0\n+BI=BFI,108,0,2022-12-15T04:00:00\n+KH=KHR,116,2\n+CM=XAF,950,0\n+CA=CAD,124,2\n+CV=CVE,132,2\n+KY=KDY,136,2,2024-11-11T09:00:00\n+CF=XAF,950,0\n+TD=XAF,950,0\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/Currency\/currencyEnhancedCoverage\/currency.properties","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"}]}